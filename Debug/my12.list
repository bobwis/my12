
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026440  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001bf20  08026640  08026640  00036640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042560  08042560  000606b4  2**0
                  CONTENTS
  4 .ARM          00000008  08042560  08042560  00052560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08042568  08042568  000606b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042568  08042568  00052568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804256c  0804256c  0005256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006b4  20000000  08042570  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f418  200006b8  08042c24  000606b8  2**3
                  ALLOC
 10 ._user_heap_stack 0001c800  2002fad0  08042c24  0006fad0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b0bce  00000000  00000000  000606e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00013d74  00000000  00000000  001112b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0004add6  00000000  00000000  00125024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003518  00000000  00000000  0016fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000079f8  00000000  00000000  00173318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004744e  00000000  00000000  0017ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00088711  00000000  00000000  001c215e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00139576  00000000  00000000  0024a86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00383de5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cf24  00000000  00000000  00383e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006b8 	.word	0x200006b8
 800021c:	00000000 	.word	0x00000000
 8000220:	08026628 	.word	0x08026628

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006bc 	.word	0x200006bc
 800023c:	08026628 	.word	0x08026628

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b9 	b.w	80006a4 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <ADC_MultiModeDMAConvM0Cplt>:
// handle the highest priority interrupt to capture the true DMA conversion complete time (below RTOSOS level)
extern TIM_HandleTypeDef htim5;
void ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	// adc conversion done (DMA complete)
{

	timestamp = TIM2->CNT;			// real time
 80006a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006ae:	2100      	movs	r1, #0
	timestamp = TIM2->CNT;			// real time
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006b2:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	dmabufno = 0;
 80006b6:	6011      	str	r1, [r2, #0]
	TIM5->DIER = 0x01;
 80006b8:	2101      	movs	r1, #1
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006ba:	2219      	movs	r2, #25
	timestamp = TIM2->CNT;			// real time
 80006bc:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006be:	f8c3 1c0c 	str.w	r1, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
 80006ca:	4770      	bx	lr
 80006cc:	200006e0 	.word	0x200006e0
 80006d0:	2001ae18 	.word	0x2001ae18

080006d4 <ADC_MultiModeDMAConvM1Cplt>:
	timestamp = TIM2->CNT;			// real time
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006d8:	4907      	ldr	r1, [pc, #28]	; (80006f8 <ADC_MultiModeDMAConvM1Cplt+0x24>)
 80006da:	2201      	movs	r2, #1
	timestamp = TIM2->CNT;			// real time
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <ADC_MultiModeDMAConvM1Cplt+0x28>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006de:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	dmabufno = 1;
 80006e2:	600a      	str	r2, [r1, #0]
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006e4:	2119      	movs	r1, #25
	timestamp = TIM2->CNT;			// real time
 80006e6:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006e8:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f0:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200006e0 	.word	0x200006e0
 80006fc:	2001ae18 	.word	0x2001ae18

08000700 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000700:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000702:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000706:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000708:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800070a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800070c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000714:	f021 ff72 	bl	80225fc <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000718:	4620      	mov	r0, r4
}
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800071e:	f006 b95f 	b.w	80069e0 <HAL_ADC_ErrorCallback>
 8000722:	bf00      	nop
 8000724:	08026828 	.word	0x08026828

08000728 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800072c:	4605      	mov	r5, r0
 800072e:	4690      	mov	r8, r2
 8000730:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000732:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000734:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000736:	460f      	mov	r7, r1
 8000738:	4699      	mov	r9, r3
	__IO uint32_t counter = 0;
 800073a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800073c:	2a01      	cmp	r2, #1
 800073e:	d903      	bls.n	8000748 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000740:	2199      	movs	r1, #153	; 0x99
 8000742:	4845      	ldr	r0, [pc, #276]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000744:	f003 fa00 	bl	8003b48 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000748:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800074a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800074e:	d17a      	bne.n	8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x11e>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000750:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000754:	2b01      	cmp	r3, #1
 8000756:	d903      	bls.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000758:	219b      	movs	r1, #155	; 0x9b
 800075a:	483f      	ldr	r0, [pc, #252]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800075c:	f003 f9f4 	bl	8003b48 <assert_failed>
	__HAL_LOCK(hadc);
 8000760:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000764:	2b01      	cmp	r3, #1
 8000766:	d073      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x128>
 8000768:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800076a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800076c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000770:	68b3      	ldr	r3, [r6, #8]
 8000772:	07d9      	lsls	r1, r3, #31
 8000774:	d414      	bmi.n	80007a0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000776:	4b39      	ldr	r3, [pc, #228]	; (800085c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000778:	4939      	ldr	r1, [pc, #228]	; (8000860 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800077a:	681b      	ldr	r3, [r3, #0]
		__HAL_ADC_ENABLE(hadc);
 800077c:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800077e:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_ADC_ENABLE(hadc);
 8000782:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000788:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800078a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800078e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 8000790:	9b03      	ldr	r3, [sp, #12]
 8000792:	b12b      	cbz	r3, 80007a0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 8000794:	9c03      	ldr	r4, [sp, #12]
 8000796:	3c01      	subs	r4, #1
 8000798:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 800079a:	9803      	ldr	r0, [sp, #12]
 800079c:	2800      	cmp	r0, #0
 800079e:	d1f9      	bne.n	8000794 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007a0:	68b3      	ldr	r3, [r6, #8]
 80007a2:	07da      	lsls	r2, r3, #31
 80007a4:	d544      	bpl.n	8000830 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
		ADC_STATE_CLR_SET(hadc->State,
 80007a6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007aa:	4013      	ands	r3, r2
 80007ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007b2:	6873      	ldr	r3, [r6, #4]
 80007b4:	055b      	lsls	r3, r3, #21
 80007b6:	d505      	bpl.n	80007c4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007c4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007c6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007ca:	d03a      	beq.n	8000842 <HAL_ADCEx_MultiModeStart_DBDMA+0x11a>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007cc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007ce:	f023 0306 	bic.w	r3, r3, #6
 80007d2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007d4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007d6:	2300      	movs	r3, #0
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007d8:	4923      	ldr	r1, [pc, #140]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007da:	f06f 0202 	mvn.w	r2, #2
		__HAL_UNLOCK(hadc);
 80007de:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007e2:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	e9c0 130f 	strd	r1, r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007ea:	4921      	ldr	r1, [pc, #132]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007ec:	64c3      	str	r3, [r0, #76]	; 0x4c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007ee:	6441      	str	r1, [r0, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007f0:	6032      	str	r2, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007f2:	6873      	ldr	r3, [r6, #4]
			ADC->CCR |= ADC_CCR_DDS;
 80007f4:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007fa:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 80007fc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000800:	b1d3      	cbz	r3, 8000838 <HAL_ADCEx_MultiModeStart_DBDMA+0x110>
			ADC->CCR |= ADC_CCR_DDS;
 8000802:	6853      	ldr	r3, [r2, #4]
 8000804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000808:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800080a:	4643      	mov	r3, r8
 800080c:	463a      	mov	r2, r7
 800080e:	491a      	ldr	r1, [pc, #104]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000810:	f8cd 9000 	str.w	r9, [sp]
 8000814:	f007 fa32 	bl	8007c7c <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	6898      	ldr	r0, [r3, #8]
 800081c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000820:	d106      	bne.n	8000830 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000828:	609a      	str	r2, [r3, #8]
}
 800082a:	b005      	add	sp, #20
 800082c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 8000830:	2000      	movs	r0, #0
}
 8000832:	b005      	add	sp, #20
 8000834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000838:	6853      	ldr	r3, [r2, #4]
 800083a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800083e:	6053      	str	r3, [r2, #4]
 8000840:	e7e3      	b.n	800080a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000842:	646b      	str	r3, [r5, #68]	; 0x44
 8000844:	e7c6      	b.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000846:	219a      	movs	r1, #154	; 0x9a
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800084a:	f003 f97d 	bl	8003b48 <assert_failed>
 800084e:	e77f      	b.n	8000750 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 8000850:	2002      	movs	r0, #2
}
 8000852:	b005      	add	sp, #20
 8000854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000858:	08026840 	.word	0x08026840
 800085c:	20000274 	.word	0x20000274
 8000860:	431bde83 	.word	0x431bde83
 8000864:	fffff8fe 	.word	0xfffff8fe
 8000868:	080006a9 	.word	0x080006a9
 800086c:	08000701 	.word	0x08000701
 8000870:	080006d5 	.word	0x080006d5
 8000874:	40012300 	.word	0x40012300
 8000878:	40012308 	.word	0x40012308

0800087c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800087c:	4b75      	ldr	r3, [pc, #468]	; (8000a54 <ADC_Conv_complete+0x1d8>)
	(*buf)[3] = timestamp;		// this may not get set until now
 800087e:	4a76      	ldr	r2, [pc, #472]	; (8000a58 <ADC_Conv_complete+0x1dc>)
	if (dmabufno == 1) {		// second buffer is ready
 8000880:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000882:	4876      	ldr	r0, [pc, #472]	; (8000a5c <ADC_Conv_complete+0x1e0>)
	if (dmabufno == 1) {		// second buffer is ready
 8000884:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000886:	4b76      	ldr	r3, [pc, #472]	; (8000a60 <ADC_Conv_complete+0x1e4>)
ADC_Conv_complete() {
 8000888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800088c:	681f      	ldr	r7, [r3, #0]
ADC_Conv_complete() {
 800088e:	b087      	sub	sp, #28
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000890:	4b74      	ldr	r3, [pc, #464]	; (8000a64 <ADC_Conv_complete+0x1e8>)
 8000892:	4d75      	ldr	r5, [pc, #468]	; (8000a68 <ADC_Conv_complete+0x1ec>)
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000894:	bf08      	it	eq
 8000896:	f507 67b8 	addeq.w	r7, r7, #1472	; 0x5c0
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800089a:	781b      	ldrb	r3, [r3, #0]
	(*buf)[3] = timestamp;		// this may not get set until now
 800089c:	6814      	ldr	r4, [r2, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800089e:	9305      	str	r3, [sp, #20]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
 80008a6:	4a71      	ldr	r2, [pc, #452]	; (8000a6c <ADC_Conv_complete+0x1f0>)
 80008a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (sigsend) {		// oops overrun
 80008ac:	f8df a208 	ldr.w	sl, [pc, #520]	; 8000ab8 <ADC_Conv_complete+0x23c>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b0:	7811      	ldrb	r1, [r2, #0]
 80008b2:	7802      	ldrb	r2, [r0, #0]
 80008b4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b8:	60fc      	str	r4, [r7, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	f002 0103 	and.w	r1, r2, #3
 80008be:	3201      	adds	r2, #1
 80008c0:	430b      	orrs	r3, r1
 80008c2:	7002      	strb	r2, [r0, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c4:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
	if (sigsend) {		// oops overrun
 80008c8:	f8da 2000 	ldr.w	r2, [sl]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008cc:	e9c7 3101 	strd	r3, r1, [r7, #4]
	if (sigsend) {		// oops overrun
 80008d0:	b12a      	cbz	r2, 80008de <ADC_Conv_complete+0x62>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d2:	6fab      	ldr	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008d4:	2200      	movs	r2, #0
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d6:	3301      	adds	r3, #1
 80008d8:	67ab      	str	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008da:	f8ca 2000 	str.w	r2, [sl]
 80008de:	4a64      	ldr	r2, [pc, #400]	; (8000a70 <ADC_Conv_complete+0x1f4>)
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008e0:	2500      	movs	r5, #0
 80008e2:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <ADC_Conv_complete+0x1f8>)
 80008e4:	370e      	adds	r7, #14
 80008e6:	f8d2 c000 	ldr.w	ip, [r2]
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	4a62      	ldr	r2, [pc, #392]	; (8000a78 <ADC_Conv_complete+0x1fc>)
 80008ee:	4c63      	ldr	r4, [pc, #396]	; (8000a7c <ADC_Conv_complete+0x200>)
 80008f0:	6810      	ldr	r0, [r2, #0]
 80008f2:	4963      	ldr	r1, [pc, #396]	; (8000a80 <ADC_Conv_complete+0x204>)
 80008f4:	4a63      	ldr	r2, [pc, #396]	; (8000a84 <ADC_Conv_complete+0x208>)
 80008f6:	9303      	str	r3, [sp, #12]
 80008f8:	4b63      	ldr	r3, [pc, #396]	; (8000a88 <ADC_Conv_complete+0x20c>)
 80008fa:	8824      	ldrh	r4, [r4, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000904:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8000abc <ADC_Conv_complete+0x240>
 8000908:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000ac0 <ADC_Conv_complete+0x244>
 800090c:	9504      	str	r5, [sp, #16]
 800090e:	9402      	str	r4, [sp, #8]
 8000910:	9301      	str	r3, [sp, #4]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000912:	f005 041f 	and.w	r4, r5, #31
		thissamp = (*adcbuf16)[i];
 8000916:	f837 3f02 	ldrh.w	r3, [r7, #2]!
		lastmeanwindiff = abs(meanwindiff);
 800091a:	2900      	cmp	r1, #0
 800091c:	f105 0501 	add.w	r5, r5, #1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000920:	f839 b014 	ldrh.w	fp, [r9, r4, lsl #1]
 8000924:	4418      	add	r0, r3
		lastmeanwindiff = abs(meanwindiff);
 8000926:	bfb8      	it	lt
 8000928:	4249      	neglt	r1, r1
		lastsamp[j] = thissamp;			// save last samples
 800092a:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800092e:	eba0 000b 	sub.w	r0, r0, fp
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 8000932:	449c      	add	ip, r3
		lastmeanwindiff = abs(meanwindiff);
 8000934:	fa1f fe81 	uxth.w	lr, r1
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000938:	9903      	ldr	r1, [sp, #12]
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 800093a:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800093e:	eb0e 0b01 	add.w	fp, lr, r1
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000942:	f340 114f 	sbfx	r1, r0, #5, #16
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000946:	1b92      	subs	r2, r2, r6
		if (sigsend)
 8000948:	f8da 6000 	ldr.w	r6, [sl]
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 800094c:	1a5b      	subs	r3, r3, r1
 800094e:	2b00      	cmp	r3, #0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000954:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000956:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800095a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800095e:	f848 1024 	str.w	r1, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000962:	9c02      	ldr	r4, [sp, #8]
 8000964:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000968:	b29b      	uxth	r3, r3
 800096a:	191c      	adds	r4, r3, r4
 800096c:	455c      	cmp	r4, fp
 800096e:	dd04      	ble.n	800097a <ADC_Conv_complete+0xfe>
			pretrigcnt++;
 8000970:	9c01      	ldr	r4, [sp, #4]
 8000972:	3401      	adds	r4, #1
 8000974:	9401      	str	r4, [sp, #4]
 8000976:	2401      	movs	r4, #1
 8000978:	9404      	str	r4, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 800097a:	b926      	cbnz	r6, 8000986 <ADC_Conv_complete+0x10a>
 800097c:	455b      	cmp	r3, fp
 800097e:	dd02      	ble.n	8000986 <ADC_Conv_complete+0x10a>
			sigsend = 1; // the real trigger
 8000980:	2301      	movs	r3, #1
 8000982:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000986:	f5b5 7f36 	cmp.w	r5, #728	; 0x2d8
 800098a:	d1c2      	bne.n	8000912 <ADC_Conv_complete+0x96>
 800098c:	4c38      	ldr	r4, [pc, #224]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 800098e:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <ADC_Conv_complete+0x210>)
 8000990:	f8c4 c000 	str.w	ip, [r4]
 8000994:	4c38      	ldr	r4, [pc, #224]	; (8000a78 <ADC_Conv_complete+0x1fc>)
 8000996:	f8a3 e000 	strh.w	lr, [r3]
 800099a:	6020      	str	r0, [r4, #0]
 800099c:	4839      	ldr	r0, [pc, #228]	; (8000a84 <ADC_Conv_complete+0x208>)
 800099e:	9b04      	ldr	r3, [sp, #16]
 80009a0:	6002      	str	r2, [r0, #0]
 80009a2:	4a37      	ldr	r2, [pc, #220]	; (8000a80 <ADC_Conv_complete+0x204>)
 80009a4:	8011      	strh	r1, [r2, #0]
 80009a6:	b113      	cbz	r3, 80009ae <ADC_Conv_complete+0x132>
 80009a8:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <ADC_Conv_complete+0x20c>)
 80009aa:	9a01      	ldr	r2, [sp, #4]
 80009ac:	601a      	str	r2, [r3, #0]
	if (sigsend) {
 80009ae:	f8da 3000 	ldr.w	r3, [sl]
 80009b2:	b343      	cbz	r3, 8000a06 <ADC_Conv_complete+0x18a>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <ADC_Conv_complete+0x214>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d02d      	beq.n	8000a18 <ADC_Conv_complete+0x19c>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009bc:	4c2a      	ldr	r4, [pc, #168]	; (8000a68 <ADC_Conv_complete+0x1ec>)
		sigprev = 1;	// remember this trigger for next packet
 80009be:	2001      	movs	r0, #1
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009c0:	4934      	ldr	r1, [pc, #208]	; (8000a94 <ADC_Conv_complete+0x218>)
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009c2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009c4:	6018      	str	r0, [r3, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009c6:	230f      	movs	r3, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009c8:	4402      	add	r2, r0
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009ca:	600b      	str	r3, [r1, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009cc:	67e2      	str	r2, [r4, #124]	; 0x7c
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009ce:	4a32      	ldr	r2, [pc, #200]	; (8000a98 <ADC_Conv_complete+0x21c>)
 80009d0:	6813      	ldr	r3, [r2, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	d10b      	bne.n	80009f4 <ADC_Conv_complete+0x178>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009dc:	492f      	ldr	r1, [pc, #188]	; (8000a9c <ADC_Conv_complete+0x220>)
 80009de:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 80009e2:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <ADC_Conv_complete+0x224>)
 80009e4:	fba1 1303 	umull	r1, r3, r1, r3
		adcbgbaseacc = 0;
 80009e8:	4c21      	ldr	r4, [pc, #132]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 80009ea:	2100      	movs	r1, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009ec:	0b9b      	lsrs	r3, r3, #14
		adcbgbaseacc = 0;
 80009ee:	6021      	str	r1, [r4, #0]
		samplecnt = 0;
 80009f0:	6011      	str	r1, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009f2:	6003      	str	r3, [r0, #0]
	if (xTaskToNotify == NULL) {
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <ADC_Conv_complete+0x228>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	b332      	cbz	r2, 8000a48 <ADC_Conv_complete+0x1cc>
	} else if (sigsend) {
 80009fa:	f8da 2000 	ldr.w	r2, [sl]
 80009fe:	b982      	cbnz	r2, 8000a22 <ADC_Conv_complete+0x1a6>
}
 8000a00:	b007      	add	sp, #28
 8000a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <ADC_Conv_complete+0x214>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	b112      	cbz	r2, 8000a12 <ADC_Conv_complete+0x196>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <ADC_Conv_complete+0x22c>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	e7da      	b.n	80009ce <ADC_Conv_complete+0x152>
			++adcbatchid; // start a new adc batch number
 8000a18:	9a05      	ldr	r2, [sp, #20]
 8000a1a:	4912      	ldr	r1, [pc, #72]	; (8000a64 <ADC_Conv_complete+0x1e8>)
 8000a1c:	3201      	adds	r2, #1
 8000a1e:	700a      	strb	r2, [r1, #0]
 8000a20:	e7cc      	b.n	80009bc <ADC_Conv_complete+0x140>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a22:	4c22      	ldr	r4, [pc, #136]	; (8000aac <ADC_Conv_complete+0x230>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	4621      	mov	r1, r4
 8000a28:	f013 fd6a 	bl	8014500 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0e6      	beq.n	8000a00 <ADC_Conv_complete+0x184>
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <ADC_Conv_complete+0x234>)
 8000a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	f3bf 8f4f 	dsb	sy
 8000a3e:	f3bf 8f6f 	isb	sy
}
 8000a42:	b007      	add	sp, #28
 8000a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a48:	481a      	ldr	r0, [pc, #104]	; (8000ab4 <ADC_Conv_complete+0x238>)
}
 8000a4a:	b007      	add	sp, #28
 8000a4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a50:	f021 bdd4 	b.w	80225fc <puts>
 8000a54:	200006e0 	.word	0x200006e0
 8000a58:	2001ae18 	.word	0x2001ae18
 8000a5c:	200006dc 	.word	0x200006dc
 8000a60:	2001ae2c 	.word	0x2001ae2c
 8000a64:	200006d4 	.word	0x200006d4
 8000a68:	2001ad7c 	.word	0x2001ad7c
 8000a6c:	20000740 	.word	0x20000740
 8000a70:	200006d8 	.word	0x200006d8
 8000a74:	20000002 	.word	0x20000002
 8000a78:	200007d8 	.word	0x200007d8
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000738 	.word	0x20000738
 8000a84:	20000754 	.word	0x20000754
 8000a88:	2000073c 	.word	0x2000073c
 8000a8c:	200006f0 	.word	0x200006f0
 8000a90:	2000074c 	.word	0x2000074c
 8000a94:	20000734 	.word	0x20000734
 8000a98:	20000744 	.word	0x20000744
 8000a9c:	16816817 	.word	0x16816817
 8000aa0:	200006e4 	.word	0x200006e4
 8000aa4:	200007e0 	.word	0x200007e0
 8000aa8:	20000748 	.word	0x20000748
 8000aac:	200007dc 	.word	0x200007dc
 8000ab0:	e000ed04 	.word	0xe000ed04
 8000ab4:	08026858 	.word	0x08026858
 8000ab8:	20000750 	.word	0x20000750
 8000abc:	200006f4 	.word	0x200006f4
 8000ac0:	20000758 	.word	0x20000758

08000ac4 <startadc>:
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <startadc+0xb8>)
	statuspkt.adcpktssent = 0;
 8000ac6:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ac8:	492d      	ldr	r1, [pc, #180]	; (8000b80 <startadc+0xbc>)

	printf("Starting ADC DMA\n");
 8000aca:	482e      	ldr	r0, [pc, #184]	; (8000b84 <startadc+0xc0>)
void startadc() {
 8000acc:	b510      	push	{r4, lr}
	statuspkt.clktrim = 108000000;
 8000ace:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ad0:	4c2d      	ldr	r4, [pc, #180]	; (8000b88 <startadc+0xc4>)
	statuspkt.adcpktssent = 0;
 8000ad2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ad6:	f021 fd91 	bl	80225fc <puts>
	osDelay(100);
 8000ada:	2064      	movs	r0, #100	; 0x64
 8000adc:	f011 ff8c 	bl	80129f8 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ae0:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000ae4:	f014 f9ec 	bl	8014ec0 <pvPortMalloc>
 8000ae8:	6020      	str	r0, [r4, #0]
	if (pktbuf == NULL) {
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d041      	beq.n	8000b72 <startadc+0xae>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000aee:	0783      	lsls	r3, r0, #30
 8000af0:	d12d      	bne.n	8000b4e <startadc+0x8a>
 8000af2:	1f03      	subs	r3, r0, #4
 8000af4:	f200 51bc 	addw	r1, r0, #1468	; 0x5bc

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000af8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000afc:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
 8000b00:	428b      	cmp	r3, r1
 8000b02:	d1fb      	bne.n	8000afc <startadc+0x38>
 8000b04:	f600 317c 	addw	r1, r0, #2940	; 0xb7c
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b08:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000b0c:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d1fb      	bne.n	8000b0c <startadc+0x48>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b14:	f500 62ba 	add.w	r2, r0, #1488	; 0x5d0
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b18:	f100 0110 	add.w	r1, r0, #16
 8000b1c:	481b      	ldr	r0, [pc, #108]	; (8000b8c <startadc+0xc8>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b1e:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b22:	4c1b      	ldr	r4, [pc, #108]	; (8000b90 <startadc+0xcc>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b24:	6001      	str	r1, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b26:	481b      	ldr	r0, [pc, #108]	; (8000b94 <startadc+0xd0>)
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b28:	6022      	str	r2, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2a:	f7ff fdfd 	bl	8000728 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <startadc+0xd4>)
 8000b30:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b32:	481a      	ldr	r0, [pc, #104]	; (8000b9c <startadc+0xd8>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b34:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b36:	f005 fea5 	bl	8006884 <HAL_ADC_Start>
 8000b3a:	b9b0      	cbnz	r0, 8000b6a <startadc+0xa6>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b3c:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <startadc+0xdc>)
 8000b3e:	f005 fea1 	bl	8006884 <HAL_ADC_Start>
 8000b42:	b970      	cbnz	r0, 8000b62 <startadc+0x9e>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <startadc+0xd0>)
 8000b46:	f005 fe9d 	bl	8006884 <HAL_ADC_Start>
 8000b4a:	b928      	cbnz	r0, 8000b58 <startadc+0x94>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b4c:	bd10      	pop	{r4, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b4e:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <startadc+0xe0>)
 8000b50:	f021 fd54 	bl	80225fc <puts>
 8000b54:	6820      	ldr	r0, [r4, #0]
 8000b56:	e7cc      	b.n	8000af2 <startadc+0x2e>
		printf("ADC1 failed start\r\n");
 8000b58:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <startadc+0xe4>)
}
 8000b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("ADC1 failed start\r\n");
 8000b5e:	f021 bd4d 	b.w	80225fc <puts>
		printf("ADC2 failed start\r\n");
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <startadc+0xe8>)
 8000b64:	f021 fd4a 	bl	80225fc <puts>
 8000b68:	e7ec      	b.n	8000b44 <startadc+0x80>
		printf("ADC3 failed start\r\n");
 8000b6a:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <startadc+0xec>)
 8000b6c:	f021 fd46 	bl	80225fc <puts>
 8000b70:	e7e4      	b.n	8000b3c <startadc+0x78>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b72:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <startadc+0xf0>)
 8000b74:	f021 fd42 	bl	80225fc <puts>
		for (;;)
 8000b78:	e7fe      	b.n	8000b78 <startadc+0xb4>
 8000b7a:	bf00      	nop
 8000b7c:	2001ad7c 	.word	0x2001ad7c
 8000b80:	066ff300 	.word	0x066ff300
 8000b84:	0802686c 	.word	0x0802686c
 8000b88:	2001ae2c 	.word	0x2001ae2c
 8000b8c:	2001ae30 	.word	0x2001ae30
 8000b90:	2001ae24 	.word	0x2001ae24
 8000b94:	2001b45c 	.word	0x2001b45c
 8000b98:	2001ae34 	.word	0x2001ae34
 8000b9c:	2001b4a4 	.word	0x2001b4a4
 8000ba0:	2001b0fc 	.word	0x2001b0fc
 8000ba4:	080268a8 	.word	0x080268a8
 8000ba8:	08026908 	.word	0x08026908
 8000bac:	080268f4 	.word	0x080268f4
 8000bb0:	080268e0 	.word	0x080268e0
 8000bb4:	08026880 	.word	0x08026880

08000bb8 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <vApplicationMallocFailedHook>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bc4:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bca:	4d03      	ldr	r5, [pc, #12]	; (8000bd8 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bcc:	4c03      	ldr	r4, [pc, #12]	; (8000bdc <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bce:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bd0:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bd2:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bd4:	bc30      	pop	{r4, r5}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000be4 	.word	0x20000be4
 8000bdc:	200007e4 	.word	0x200007e4

08000be0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000be0:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000be2:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000be6:	4d03      	ldr	r5, [pc, #12]	; (8000bf4 <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000be8:	4c03      	ldr	r4, [pc, #12]	; (8000bf8 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bea:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000bec:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bee:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bf0:	bc30      	pop	{r4, r5}
 8000bf2:	4770      	bx	lr
 8000bf4:	20001438 	.word	0x20001438
 8000bf8:	20000c38 	.word	0x20000c38

08000bfc <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000bfc:	2200      	movs	r2, #0
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
 8000bfe:	4603      	mov	r3, r0

	return (ERR_OK);
}
 8000c00:	4610      	mov	r0, r2
	state->ConnectionTimeout = 0;
 8000c02:	749a      	strb	r2, [r3, #18]
}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000c08:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000c10:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c12:	b082      	sub	sp, #8
 8000c14:	4605      	mov	r5, r0
 8000c16:	460f      	mov	r7, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000c18:	4616      	mov	r6, r2
 8000c1a:	b10a      	cbz	r2, 8000c20 <hc_recv+0x18>
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d159      	bne.n	8000cd4 <hc_recv+0xcc>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000c20:	bb4e      	cbnz	r6, 8000c76 <hc_recv+0x6e>
 8000c22:	b343      	cbz	r3, 8000c76 <hc_recv+0x6e>
		for (i = 0; i < state->Len; i++) {
 8000c24:	8a2b      	ldrh	r3, [r5, #16]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8098 	beq.w	8000d5c <hc_recv+0x154>
 8000c2c:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000c2e:	2604      	movs	r6, #4
 8000c30:	68e8      	ldr	r0, [r5, #12]
 8000c32:	e002      	b.n	8000c3a <hc_recv+0x32>
		for (i = 0; i < state->Len; i++) {
 8000c34:	3201      	adds	r2, #1
 8000c36:	4293      	cmp	r3, r2
 8000c38:	dd0c      	ble.n	8000c54 <hc_recv+0x4c>
			if (errormsg == GEN_ERROR) {
 8000c3a:	2e04      	cmp	r6, #4
 8000c3c:	d01f      	beq.n	8000c7e <hc_recv+0x76>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c3e:	5c84      	ldrb	r4, [r0, r2]
 8000c40:	2c0d      	cmp	r4, #13
 8000c42:	d1f7      	bne.n	8000c34 <hc_recv+0x2c>
 8000c44:	1c51      	adds	r1, r2, #1
 8000c46:	5c44      	ldrb	r4, [r0, r1]
 8000c48:	2c0a      	cmp	r4, #10
 8000c4a:	d027      	beq.n	8000c9c <hc_recv+0x94>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000c4c:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000c4e:	3201      	adds	r2, #1
 8000c50:	4293      	cmp	r3, r2
 8000c52:	dcf2      	bgt.n	8000c3a <hc_recv+0x32>
	char *page = NULL;
 8000c54:	2400      	movs	r4, #0
		if (errormsg == OK) {
 8000c56:	b9d6      	cbnz	r6, 8000c8e <hc_recv+0x86>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000c58:	4622      	mov	r2, r4
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	696c      	ldr	r4, [r5, #20]
 8000c5e:	7828      	ldrb	r0, [r5, #0]
 8000c60:	47a0      	blx	r4
	if (pcb != NULL) {
 8000c62:	b117      	cbz	r7, 8000c6a <hc_recv+0x62>
		tcp_close(pcb);
 8000c64:	4638      	mov	r0, r7
 8000c66:	f018 ffdf 	bl	8019c28 <tcp_close>
		free(state->RecvData);
 8000c6a:	68e8      	ldr	r0, [r5, #12]
 8000c6c:	f020 fc7a 	bl	8021564 <free>
		free(state);
 8000c70:	4628      	mov	r0, r5
 8000c72:	f020 fc77 	bl	8021564 <free>
}
 8000c76:	2000      	movs	r0, #0
 8000c78:	b002      	add	sp, #8
 8000c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000c7e:	5c81      	ldrb	r1, [r0, r2]
 8000c80:	2932      	cmp	r1, #50	; 0x32
 8000c82:	d05c      	beq.n	8000d3e <hc_recv+0x136>
				if (*(state->RecvData + i) == '\n')
 8000c84:	290a      	cmp	r1, #10
 8000c86:	d055      	beq.n	8000d34 <hc_recv+0x12c>
		for (i = 0; i < state->Len; i++) {
 8000c88:	3201      	adds	r2, #1
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	dcf7      	bgt.n	8000c7e <hc_recv+0x76>
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	696c      	ldr	r4, [r5, #20]
 8000c94:	461a      	mov	r2, r3
 8000c96:	7828      	ldrb	r0, [r5, #0]
 8000c98:	47a0      	blx	r4
 8000c9a:	e7e2      	b.n	8000c62 <hc_recv+0x5a>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000c9c:	1c91      	adds	r1, r2, #2
 8000c9e:	5c44      	ldrb	r4, [r0, r1]
 8000ca0:	2c0d      	cmp	r4, #13
 8000ca2:	d1d3      	bne.n	8000c4c <hc_recv+0x44>
 8000ca4:	1cd1      	adds	r1, r2, #3
 8000ca6:	5c44      	ldrb	r4, [r0, r1]
 8000ca8:	2c0a      	cmp	r4, #10
 8000caa:	d1cf      	bne.n	8000c4c <hc_recv+0x44>
					i++;
 8000cac:	3204      	adds	r2, #4
 8000cae:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000cb0:	1881      	adds	r1, r0, r2
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	9100      	str	r1, [sp, #0]
 8000cb6:	f7ff facd 	bl	8000254 <strlen>
 8000cba:	4680      	mov	r8, r0
 8000cbc:	f020 fc4a 	bl	8021554 <malloc>
					strcpy(page, state->RecvData + i);
 8000cc0:	9900      	ldr	r1, [sp, #0]
 8000cc2:	f108 0201 	add.w	r2, r8, #1
					page = malloc(strlen(state->RecvData + i));
 8000cc6:	4604      	mov	r4, r0
					strcpy(page, state->RecvData + i);
 8000cc8:	f020 fc62 	bl	8021590 <memcpy>
					break;
 8000ccc:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d0c2      	beq.n	8000c58 <hc_recv+0x50>
 8000cd2:	e7dc      	b.n	8000c8e <hc_recv+0x86>
		tcp_recved(pcb, p->tot_len);
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	8911      	ldrh	r1, [r2, #8]
 8000cd8:	f018 f8ca 	bl	8018e70 <tcp_recved>
 8000cdc:	4634      	mov	r4, r6
 8000cde:	8a29      	ldrh	r1, [r5, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000ce0:	2700      	movs	r7, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000ce2:	8963      	ldrh	r3, [r4, #10]
 8000ce4:	68e8      	ldr	r0, [r5, #12]
 8000ce6:	4419      	add	r1, r3
 8000ce8:	3101      	adds	r1, #1
 8000cea:	f021 fccf 	bl	802268c <realloc>
 8000cee:	60e8      	str	r0, [r5, #12]
			if (state->RecvData == NULL) {
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d037      	beq.n	8000d64 <hc_recv+0x15c>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000cf4:	8a2b      	ldrh	r3, [r5, #16]
 8000cf6:	8962      	ldrh	r2, [r4, #10]
 8000cf8:	6861      	ldr	r1, [r4, #4]
 8000cfa:	4418      	add	r0, r3
 8000cfc:	f022 fb78 	bl	80233f0 <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000d00:	8961      	ldrh	r1, [r4, #10]
 8000d02:	68eb      	ldr	r3, [r5, #12]
 8000d04:	8a2a      	ldrh	r2, [r5, #16]
 8000d06:	440b      	add	r3, r1
 8000d08:	549f      	strb	r7, [r3, r2]
			state->Len += temp_p->len;
 8000d0a:	8963      	ldrh	r3, [r4, #10]
 8000d0c:	8a29      	ldrh	r1, [r5, #16]
			temp_p = temp_p->next;
 8000d0e:	6824      	ldr	r4, [r4, #0]
			state->Len += temp_p->len;
 8000d10:	4419      	add	r1, r3
 8000d12:	b289      	uxth	r1, r1
 8000d14:	8229      	strh	r1, [r5, #16]
		while (temp_p != NULL) {
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d1e3      	bne.n	8000ce2 <hc_recv+0xda>
			temp_p = p->next;
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000d1e:	f014 faed 	bl	80152fc <pbuf_free_callback>
		while (p != NULL) {
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d0a7      	beq.n	8000c76 <hc_recv+0x6e>
			temp_p = p->next;
 8000d26:	4630      	mov	r0, r6
 8000d28:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000d2a:	f014 fae7 	bl	80152fc <pbuf_free_callback>
		while (p != NULL) {
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d1f3      	bne.n	8000d1a <hc_recv+0x112>
 8000d32:	e7a0      	b.n	8000c76 <hc_recv+0x6e>
		for (i = 0; i < state->Len; i++) {
 8000d34:	3201      	adds	r2, #1
					errormsg = NOT_FOUND;
 8000d36:	2603      	movs	r6, #3
		for (i = 0; i < state->Len; i++) {
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	dc80      	bgt.n	8000c3e <hc_recv+0x36>
 8000d3c:	e7a7      	b.n	8000c8e <hc_recv+0x86>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000d3e:	1c54      	adds	r4, r2, #1
 8000d40:	5d01      	ldrb	r1, [r0, r4]
 8000d42:	2930      	cmp	r1, #48	; 0x30
 8000d44:	d001      	beq.n	8000d4a <hc_recv+0x142>
 8000d46:	4622      	mov	r2, r4
 8000d48:	e79c      	b.n	8000c84 <hc_recv+0x7c>
						&& (*(state->RecvData + ++i) == '0'))
 8000d4a:	1c94      	adds	r4, r2, #2
 8000d4c:	5d01      	ldrb	r1, [r0, r4]
 8000d4e:	2930      	cmp	r1, #48	; 0x30
 8000d50:	d1f9      	bne.n	8000d46 <hc_recv+0x13e>
		for (i = 0; i < state->Len; i++) {
 8000d52:	3203      	adds	r2, #3
 8000d54:	4293      	cmp	r3, r2
 8000d56:	dd03      	ble.n	8000d60 <hc_recv+0x158>
					errormsg = OK;
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e770      	b.n	8000c3e <hc_recv+0x36>
	hc_errormsg errormsg = GEN_ERROR;
 8000d5c:	2604      	movs	r6, #4
 8000d5e:	e796      	b.n	8000c8e <hc_recv+0x86>
	char *page = NULL;
 8000d60:	2400      	movs	r4, #0
 8000d62:	e779      	b.n	8000c58 <hc_recv+0x50>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000d64:	4603      	mov	r3, r0
 8000d66:	696c      	ldr	r4, [r5, #20]
 8000d68:	7828      	ldrb	r0, [r5, #0]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	47a0      	blx	r4
				return (ERR_OK);
 8000d70:	e781      	b.n	8000c76 <hc_recv+0x6e>
 8000d72:	bf00      	nop

08000d74 <hc_error>:
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d74:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000d76:	b570      	push	{r4, r5, r6, lr}
 8000d78:	4604      	mov	r4, r0
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d7a:	461a      	mov	r2, r3
static void hc_error(void *arg, err_t err) {
 8000d7c:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d7e:	6946      	ldr	r6, [r0, #20]
 8000d80:	2104      	movs	r1, #4
 8000d82:	7800      	ldrb	r0, [r0, #0]
 8000d84:	47b0      	blx	r6
	free(state->RecvData);
 8000d86:	68e0      	ldr	r0, [r4, #12]
 8000d88:	f020 fbec 	bl	8021564 <free>
	free(state->PostVars);
 8000d8c:	68a0      	ldr	r0, [r4, #8]
 8000d8e:	f020 fbe9 	bl	8021564 <free>
	free(state->Page);
 8000d92:	6860      	ldr	r0, [r4, #4]
 8000d94:	f020 fbe6 	bl	8021564 <free>
	free(state);
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f020 fbe3 	bl	8021564 <free>
	printf("hc_error: err=%d\n", err);
 8000d9e:	4629      	mov	r1, r5
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <hc_error+0x38>)
}
 8000da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000da6:	f021 bb8d 	b.w	80224c4 <iprintf>
 8000daa:	bf00      	nop
 8000dac:	0802691c 	.word	0x0802691c

08000db0 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8000db0:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8000db2:	7c83      	ldrb	r3, [r0, #18]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8000db8:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8000dba:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8000dbc:	d801      	bhi.n	8000dc2 <hc_poll+0x12>
}
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	bd38      	pop	{r3, r4, r5, pc}
 8000dc2:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	f018 fd29 	bl	801981c <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 8000dca:	2300      	movs	r3, #0
 8000dcc:	7820      	ldrb	r0, [r4, #0]
 8000dce:	2102      	movs	r1, #2
 8000dd0:	6965      	ldr	r5, [r4, #20]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	47a8      	blx	r5
}
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop

08000ddc <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	4605      	mov	r5, r0
 8000de0:	b085      	sub	sp, #20
 8000de2:	460c      	mov	r4, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	d13f      	bne.n	8000e68 <hc_connected+0x8c>

		return (ERR_OK);
	}

	// Define Headers
	if (state->PostVars == NULL) {
 8000de8:	6887      	ldr	r7, [r0, #8]
 8000dea:	2f00      	cmp	r7, #0
 8000dec:	d04f      	beq.n	8000e8e <hc_connected+0xb2>
		headers = malloc(19 + strlen(state->Page));
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
	} else {
		// POST headers (without PostVars or Page)(+ \0) = 91
		// Content-length: %d <== 						   ??? (max 10)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000dee:	4638      	mov	r0, r7
 8000df0:	f7ff fa30 	bl	8000254 <strlen>
 8000df4:	686a      	ldr	r2, [r5, #4]
 8000df6:	4606      	mov	r6, r0
 8000df8:	4610      	mov	r0, r2
 8000dfa:	9203      	str	r2, [sp, #12]
 8000dfc:	f7ff fa2a 	bl	8000254 <strlen>
 8000e00:	4430      	add	r0, r6
 8000e02:	3065      	adds	r0, #101	; 0x65
 8000e04:	f020 fba6 	bl	8021554 <malloc>
		sprintf(headers,
 8000e08:	4633      	mov	r3, r6
 8000e0a:	9a03      	ldr	r2, [sp, #12]
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e0c:	4606      	mov	r6, r0
		sprintf(headers,
 8000e0e:	4927      	ldr	r1, [pc, #156]	; (8000eac <hc_connected+0xd0>)
 8000e10:	9700      	str	r7, [sp, #0]
 8000e12:	f021 fccf 	bl	80227b4 <siprintf>

		return (ERR_OK);
	}

	// Setup the TCP receive function
	tcp_recv(pcb, hc_recv);
 8000e16:	4926      	ldr	r1, [pc, #152]	; (8000eb0 <hc_connected+0xd4>)
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f018 f8b7 	bl	8018f8c <tcp_recv>

	// Setup the TCP error function
	tcp_err(pcb, hc_error);
 8000e1e:	4925      	ldr	r1, [pc, #148]	; (8000eb4 <hc_connected+0xd8>)
 8000e20:	4620      	mov	r0, r4
 8000e22:	f018 f8eb 	bl	8018ffc <tcp_err>

	// Setup the TCP polling function/interval	 //TCP_POLL IS NOT CORRECT DEFINED @ DOC!!!
	tcp_poll(pcb, hc_poll, 10);
 8000e26:	220a      	movs	r2, #10
 8000e28:	4923      	ldr	r1, [pc, #140]	; (8000eb8 <hc_connected+0xdc>)
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f018 f908 	bl	8019040 <tcp_poll>

	// Setup the TCP sent callback function
	tcp_sent(pcb, hc_sent);
 8000e30:	4922      	ldr	r1, [pc, #136]	; (8000ebc <hc_connected+0xe0>)
 8000e32:	4620      	mov	r0, r4
 8000e34:	f018 f8c6 	bl	8018fc4 <tcp_sent>

	// Send data
	tcp_write(pcb, headers, strlen(headers), 1);
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f7ff fa0b 	bl	8000254 <strlen>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	4602      	mov	r2, r0
 8000e42:	4631      	mov	r1, r6
 8000e44:	4620      	mov	r0, r4
 8000e46:	f01a ff47 	bl	801bcd8 <tcp_write>
	tcp_output(pcb);
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f01b fdaa 	bl	801c9a4 <tcp_output>

	// remove headers
	free(headers);
 8000e50:	4630      	mov	r0, r6
 8000e52:	f020 fb87 	bl	8021564 <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 8000e56:	68a8      	ldr	r0, [r5, #8]
 8000e58:	f020 fb84 	bl	8021564 <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8000e5c:	6868      	ldr	r0, [r5, #4]
 8000e5e:	f020 fb81 	bl	8021564 <free>

	return (ERR_OK);
}
 8000e62:	2000      	movs	r0, #0
 8000e64:	b005      	add	sp, #20
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (pcb != NULL) {
 8000e68:	b111      	cbz	r1, 8000e70 <hc_connected+0x94>
		tcp_close(pcb);
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	f018 fedc 	bl	8019c28 <tcp_close>
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000e70:	2300      	movs	r3, #0
 8000e72:	2104      	movs	r1, #4
 8000e74:	7828      	ldrb	r0, [r5, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	696c      	ldr	r4, [r5, #20]
 8000e7a:	47a0      	blx	r4
		free(state->RecvData);
 8000e7c:	68e8      	ldr	r0, [r5, #12]
 8000e7e:	f020 fb71 	bl	8021564 <free>
		free(state);
 8000e82:	4628      	mov	r0, r5
 8000e84:	f020 fb6e 	bl	8021564 <free>
}
 8000e88:	2000      	movs	r0, #0
 8000e8a:	b005      	add	sp, #20
 8000e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		headers = malloc(19 + strlen(state->Page));
 8000e8e:	6842      	ldr	r2, [r0, #4]
 8000e90:	4610      	mov	r0, r2
 8000e92:	9203      	str	r2, [sp, #12]
 8000e94:	f7ff f9de 	bl	8000254 <strlen>
 8000e98:	3013      	adds	r0, #19
 8000e9a:	f020 fb5b 	bl	8021554 <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e9e:	9a03      	ldr	r2, [sp, #12]
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <hc_connected+0xe4>)
		headers = malloc(19 + strlen(state->Page));
 8000ea2:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000ea4:	f021 fc86 	bl	80227b4 <siprintf>
 8000ea8:	e7b5      	b.n	8000e16 <hc_connected+0x3a>
 8000eaa:	bf00      	nop
 8000eac:	08026948 	.word	0x08026948
 8000eb0:	08000c09 	.word	0x08000c09
 8000eb4:	08000d75 	.word	0x08000d75
 8000eb8:	08000db1 	.word	0x08000db1
 8000ebc:	08000bfd 	.word	0x08000bfd
 8000ec0:	08026930 	.word	0x08026930

08000ec4 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	4616      	mov	r6, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	9003      	str	r0, [sp, #12]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 8000ed0:	2018      	movs	r0, #24
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ed2:	9101      	str	r1, [sp, #4]
	state = malloc(sizeof(struct hc_state));
 8000ed4:	f020 fb3e 	bl	8021554 <malloc>
 8000ed8:	4604      	mov	r4, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 8000eda:	f018 fddb 	bl	8019a94 <tcp_new>
	if (pcb == NULL || state == NULL) {
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d06f      	beq.n	8000fc2 <hc_open+0xfe>
 8000ee2:	4605      	mov	r5, r0
 8000ee4:	fab4 f084 	clz	r0, r4
 8000ee8:	9901      	ldr	r1, [sp, #4]
 8000eea:	0940      	lsrs	r0, r0, #5
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d068      	beq.n	8000fc2 <hc_open+0xfe>
			;
		return 0;
	}

	// Define webclient state vars
	num++;
 8000ef0:	4f39      	ldr	r7, [pc, #228]	; (8000fd8 <hc_open+0x114>)
	state->Num = num;
	state->RecvData = NULL;
 8000ef2:	60e0      	str	r0, [r4, #12]
	num++;
 8000ef4:	783a      	ldrb	r2, [r7, #0]
	state->ConnectionTimeout = 0;
 8000ef6:	74a0      	strb	r0, [r4, #18]
	num++;
 8000ef8:	3201      	adds	r2, #1
	state->Len = 0;
 8000efa:	8220      	strh	r0, [r4, #16]
	state->ReturnPage = returnpage;
 8000efc:	f8c4 8014 	str.w	r8, [r4, #20]
	num++;
 8000f00:	b2d3      	uxtb	r3, r2
 8000f02:	703b      	strb	r3, [r7, #0]
	state->Num = num;
 8000f04:	7023      	strb	r3, [r4, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 8000f06:	b146      	cbz	r6, 8000f1a <hc_open+0x56>
		state->PostVars = malloc(strlen(PostVars) + 1);
 8000f08:	4630      	mov	r0, r6
 8000f0a:	9101      	str	r1, [sp, #4]
 8000f0c:	f7ff f9a2 	bl	8000254 <strlen>
 8000f10:	3001      	adds	r0, #1
 8000f12:	f020 fb1f 	bl	8021554 <malloc>
 8000f16:	9901      	ldr	r1, [sp, #4]
 8000f18:	60a0      	str	r0, [r4, #8]
	state->Page = malloc(strlen(Page) + 1);
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	9102      	str	r1, [sp, #8]
 8000f1e:	f7ff f999 	bl	8000254 <strlen>
 8000f22:	1c42      	adds	r2, r0, #1
 8000f24:	4610      	mov	r0, r2
 8000f26:	9201      	str	r2, [sp, #4]
 8000f28:	f020 fb14 	bl	8021554 <malloc>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	6060      	str	r0, [r4, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f30:	b390      	cbz	r0, 8000f98 <hc_open+0xd4>
 8000f32:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8000f36:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 8000f3a:	f1b8 0f00 	cmp.w	r8, #0
 8000f3e:	d02a      	beq.n	8000f96 <hc_open+0xd2>
		printf("httpclient: no pcb memory\n");
#endif
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8000f40:	f020 fb26 	bl	8021590 <memcpy>
	if (PostVars != NULL)
 8000f44:	2e00      	cmp	r6, #0
 8000f46:	d039      	beq.n	8000fbc <hc_open+0xf8>
		strcpy(state->PostVars, PostVars);
 8000f48:	4631      	mov	r1, r6
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	f021 fcd9 	bl	8022902 <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000f50:	f641 7690 	movw	r6, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f54:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000fe8 <hc_open+0x124>
 8000f58:	e000      	b.n	8000f5c <hc_open+0x98>
		// Local port in use, use port+1
		port++;
 8000f5a:	b2b6      	uxth	r6, r6
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f5c:	4632      	mov	r2, r6
 8000f5e:	4641      	mov	r1, r8
 8000f60:	4628      	mov	r0, r5
		port++;
 8000f62:	3601      	adds	r6, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f64:	f017 fe78 	bl	8018c58 <tcp_bind>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d1f6      	bne.n	8000f5a <hc_open+0x96>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f018 f808 	bl	8018f84 <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <hc_open+0x118>)
 8000f76:	4628      	mov	r0, r5
 8000f78:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000f7c:	a903      	add	r1, sp, #12
 8000f7e:	f018 ff71 	bl	8019e64 <tcp_connect>
 8000f82:	b243      	sxtb	r3, r0
 8000f84:	f88d 3017 	strb.w	r3, [sp, #23]

	if (err != ERR_OK) {
 8000f88:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000f8c:	b9eb      	cbnz	r3, 8000fca <hc_open+0x106>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8000f8e:	7838      	ldrb	r0, [r7, #0]
}
 8000f90:	b006      	add	sp, #24
 8000f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f96:	b17e      	cbz	r6, 8000fb8 <hc_open+0xf4>
		free(state->Page);
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f020 fae3 	bl	8021564 <free>
		free(state->PostVars);
 8000f9e:	68a0      	ldr	r0, [r4, #8]
 8000fa0:	f020 fae0 	bl	8021564 <free>
		free(state);
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f020 fadd 	bl	8021564 <free>
		tcp_close(pcb);
 8000faa:	4628      	mov	r0, r5
 8000fac:	f018 fe3c 	bl	8019c28 <tcp_close>
		return 0;
 8000fb0:	2000      	movs	r0, #0
}
 8000fb2:	b006      	add	sp, #24
 8000fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	strcpy(state->Page, Page);
 8000fb8:	f020 faea 	bl	8021590 <memcpy>
		state->PostVars = NULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60a3      	str	r3, [r4, #8]
 8000fc0:	e7c6      	b.n	8000f50 <hc_open+0x8c>
		printf("hc_open: Not enough memory for pcb or state\n");
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <hc_open+0x11c>)
 8000fc4:	f021 fb1a 	bl	80225fc <puts>
		for (;;)
 8000fc8:	e7fe      	b.n	8000fc8 <hc_open+0x104>
		printf("hc_open failed with %d\n", err);
 8000fca:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <hc_open+0x120>)
 8000fd0:	b249      	sxtb	r1, r1
 8000fd2:	f021 fa77 	bl	80224c4 <iprintf>
 8000fd6:	e7da      	b.n	8000f8e <hc_open+0xca>
 8000fd8:	2000148c 	.word	0x2000148c
 8000fdc:	08000ddd 	.word	0x08000ddd
 8000fe0:	080269ac 	.word	0x080269ac
 8000fe4:	080269d8 	.word	0x080269d8
 8000fe8:	08041a0c 	.word	0x08041a0c

08000fec <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8000fec:	2300      	movs	r3, #0
int wait_armtx(void) {
 8000fee:	b510      	push	{r4, lr}
 8000ff0:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8000ff2:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8000ff4:	9b01      	ldr	r3, [sp, #4]
 8000ff6:	2b95      	cmp	r3, #149	; 0x95
 8000ff8:	dc0d      	bgt.n	8001016 <wait_armtx+0x2a>
 8000ffa:	4c0e      	ldr	r4, [pc, #56]	; (8001034 <wait_armtx+0x48>)
 8000ffc:	e007      	b.n	800100e <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8000ffe:	9b01      	ldr	r3, [sp, #4]
 8001000:	4403      	add	r3, r0
 8001002:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001004:	f011 fcf8 	bl	80129f8 <osDelay>
	while (timeoutcnt < 150) {
 8001008:	9b01      	ldr	r3, [sp, #4]
 800100a:	2b95      	cmp	r3, #149	; 0x95
 800100c:	dc03      	bgt.n	8001016 <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 800100e:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	4283      	cmp	r3, r0
 8001014:	d1f3      	bne.n	8000ffe <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	2bf9      	cmp	r3, #249	; 0xf9
 800101a:	dc02      	bgt.n	8001022 <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 800101c:	2000      	movs	r0, #0
}
 800101e:	b002      	add	sp, #8
 8001020:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <wait_armtx+0x4c>)
 8001024:	f021 faea 	bl	80225fc <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <wait_armtx+0x48>)
 800102a:	2201      	movs	r2, #1
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	601a      	str	r2, [r3, #0]
		return (-1);
 8001032:	e7f4      	b.n	800101e <wait_armtx+0x32>
 8001034:	20001bd8 	.word	0x20001bd8
 8001038:	080269f0 	.word	0x080269f0

0800103c <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <HAL_UART_TxCpltCallback+0x14>)
 8001042:	6802      	ldr	r2, [r0, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d000      	beq.n	800104a <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001048:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 800104a:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_UART_TxCpltCallback+0x18>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40005000 	.word	0x40005000
 8001058:	20001bd8 	.word	0x20001bd8

0800105c <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001060:	4c1b      	ldr	r4, [pc, #108]	; (80010d0 <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 8001062:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001064:	481b      	ldr	r0, [pc, #108]	; (80010d4 <lcd_uart_init+0x78>)
 8001066:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 8001068:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 800106a:	f021 fa2b 	bl	80224c4 <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 8001070:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001072:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001074:	f00e fc8c 	bl	800f990 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001078:	4620      	mov	r0, r4
 800107a:	f00e fbd5 	bl	800f828 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001080:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001082:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8001084:	6022      	str	r2, [r4, #0]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001086:	6163      	str	r3, [r4, #20]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001088:	e9c4 6501 	strd	r6, r5, [r4, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 800108c:	e9c4 5503 	strd	r5, r5, [r4, #12]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001094:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001098:	f00f faf8 	bl	801068c <HAL_UART_Init>
 800109c:	b958      	cbnz	r0, 80010b6 <lcd_uart_init+0x5a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	490f      	ldr	r1, [pc, #60]	; (80010e0 <lcd_uart_init+0x84>)
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <lcd_uart_init+0x74>)
 80010a4:	f00f fc44 	bl	8010930 <HAL_UART_Receive_DMA>
 80010a8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80010ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010b0:	b933      	cbnz	r3, 80010c0 <lcd_uart_init+0x64>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 80010b2:	b002      	add	sp, #8
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 80010b6:	4631      	mov	r1, r6
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <lcd_uart_init+0x88>)
 80010ba:	f021 fa03 	bl	80224c4 <iprintf>
 80010be:	e7ee      	b.n	800109e <lcd_uart_init+0x42>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <lcd_uart_init+0x8c>)
}
 80010c6:	b002      	add	sp, #8
 80010c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010cc:	f021 b9fa 	b.w	80224c4 <iprintf>
 80010d0:	2001b3d8 	.word	0x2001b3d8
 80010d4:	08026a04 	.word	0x08026a04
 80010d8:	20001610 	.word	0x20001610
 80010dc:	40005000 	.word	0x40005000
 80010e0:	200014d0 	.word	0x200014d0
 80010e4:	08026a20 	.word	0x08026a20
 80010e8:	08026a50 	.word	0x08026a50

080010ec <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 80010ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80010f0:	4a3a      	ldr	r2, [pc, #232]	; (80011dc <lcd_init+0xf0>)
void lcd_init(int baud) {
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	4606      	mov	r6, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <lcd_init+0xf4>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80010f8:	f10d 0808 	add.w	r8, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80010fc:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 80010fe:	4f39      	ldr	r7, [pc, #228]	; (80011e4 <lcd_init+0xf8>)
 8001100:	ad04      	add	r5, sp, #16
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8001102:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001106:	e888 0003 	stmia.w	r8, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	c407      	stmia	r4!, {r0, r1, r2}
 800110e:	0c1a      	lsrs	r2, r3, #16
 8001110:	f824 3b02 	strh.w	r3, [r4], #2
 8001114:	7022      	strb	r2, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001116:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800111a:	c507      	stmia	r5!, {r0, r1, r2}
	int siz, page;
	volatile char *cmd;

	printf("lcd_init: baud=%d\n", baud);
 800111c:	4631      	mov	r1, r6
 800111e:	4832      	ldr	r0, [pc, #200]	; (80011e8 <lcd_init+0xfc>)
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001120:	702b      	strb	r3, [r5, #0]
	printf("lcd_init: baud=%d\n", baud);
 8001122:	f021 f9cf 	bl	80224c4 <iprintf>
	if (!((baud == 9600) || (baud == 230400))) {
 8001126:	f5b6 5f16 	cmp.w	r6, #9600	; 0x2580
 800112a:	d009      	beq.n	8001140 <lcd_init+0x54>
 800112c:	f5b6 3f61 	cmp.w	r6, #230400	; 0x38400
 8001130:	d006      	beq.n	8001140 <lcd_init+0x54>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 8001132:	4631      	mov	r1, r6
 8001134:	482d      	ldr	r0, [pc, #180]	; (80011ec <lcd_init+0x100>)
 8001136:	f021 f9c5 	bl	80224c4 <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 800113a:	b00c      	add	sp, #48	; 0x30
 800113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	txdmadone = 0;	// TX is NOT free
 8001140:	2300      	movs	r3, #0
 8001142:	4c2b      	ldr	r4, [pc, #172]	; (80011f0 <lcd_init+0x104>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8001144:	4641      	mov	r1, r8
 8001146:	2207      	movs	r2, #7
 8001148:	482a      	ldr	r0, [pc, #168]	; (80011f4 <lcd_init+0x108>)
	txdmadone = 0;	// TX is NOT free
 800114a:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 800114c:	f00e fbca 	bl	800f8e4 <HAL_UART_Transmit_DMA>
 8001150:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001154:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001158:	b14b      	cbz	r3, 800116e <lcd_init+0x82>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800115a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800115e:	4826      	ldr	r0, [pc, #152]	; (80011f8 <lcd_init+0x10c>)
 8001160:	f021 f9b0 	bl	80224c4 <iprintf>
	while (!(txdmadone)) {
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	b92b      	cbnz	r3, 8001174 <lcd_init+0x88>
		osDelay(1);		// wait for comms to complete
 8001168:	2001      	movs	r0, #1
 800116a:	f011 fc45 	bl	80129f8 <osDelay>
	while (!(txdmadone)) {
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f9      	beq.n	8001168 <lcd_init+0x7c>
	txdmadone = 0;	// TX is NOT free
 8001174:	2300      	movs	r3, #0
	osDelay(800);
 8001176:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 800117a:	6023      	str	r3, [r4, #0]
	osDelay(800);
 800117c:	f011 fc3c 	bl	80129f8 <osDelay>
	if (baud == 9600)
 8001180:	f5b6 5f16 	cmp.w	r6, #9600	; 0x2580
 8001184:	d018      	beq.n	80011b8 <lcd_init+0xcc>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 8001186:	a908      	add	r1, sp, #32
 8001188:	220e      	movs	r2, #14
 800118a:	481a      	ldr	r0, [pc, #104]	; (80011f4 <lcd_init+0x108>)
 800118c:	f00e fbaa 	bl	800f8e4 <HAL_UART_Transmit_DMA>
 8001190:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 8001194:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001198:	b11b      	cbz	r3, 80011a2 <lcd_init+0xb6>
 800119a:	e018      	b.n	80011ce <lcd_init+0xe2>
		osDelay(1);		// wait for comms to complete
 800119c:	2001      	movs	r0, #1
 800119e:	f011 fc2b 	bl	80129f8 <osDelay>
	while (!(txdmadone)) {
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f9      	beq.n	800119c <lcd_init+0xb0>
	txdmadone = 0;	// TX is NOT free
 80011a8:	2300      	movs	r3, #0
	osDelay(120);
 80011aa:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 80011ac:	6023      	str	r3, [r4, #0]
	osDelay(120);
 80011ae:	f011 fc23 	bl	80129f8 <osDelay>
}
 80011b2:	b00c      	add	sp, #48	; 0x30
 80011b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 80011b8:	a904      	add	r1, sp, #16
 80011ba:	220c      	movs	r2, #12
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <lcd_init+0x108>)
 80011be:	f00e fb91 	bl	800f8e4 <HAL_UART_Transmit_DMA>
 80011c2:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80011c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0e9      	beq.n	80011a2 <lcd_init+0xb6>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80011ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <lcd_init+0x10c>)
 80011d4:	f021 f976 	bl	80224c4 <iprintf>
 80011d8:	e7e3      	b.n	80011a2 <lcd_init+0xb6>
 80011da:	bf00      	nop
 80011dc:	08026af8 	.word	0x08026af8
 80011e0:	08026b00 	.word	0x08026b00
 80011e4:	08026b10 	.word	0x08026b10
 80011e8:	08026a80 	.word	0x08026a80
 80011ec:	08026a94 	.word	0x08026a94
 80011f0:	20001bd8 	.word	0x20001bd8
 80011f4:	2001b3d8 	.word	0x2001b3d8
 80011f8:	08026ac8 	.word	0x08026ac8

080011fc <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 80011fc:	b530      	push	{r4, r5, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[64];
	uint32_t reg;

	if (wait_armtx() == -1)
 8001202:	f7ff fef3 	bl	8000fec <wait_armtx>
 8001206:	4605      	mov	r5, r0
 8001208:	3001      	adds	r0, #1
 800120a:	d01d      	beq.n	8001248 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <lcd_puts+0x60>)
 8001210:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001212:	9b01      	ldr	r3, [sp, #4]
 8001214:	5ce3      	ldrb	r3, [r4, r3]
 8001216:	b153      	cbz	r3, 800122e <lcd_puts+0x32>
		buffer[i] = str[i];
 8001218:	9901      	ldr	r1, [sp, #4]
 800121a:	9a01      	ldr	r2, [sp, #4]
		i++;
 800121c:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 800121e:	5c61      	ldrb	r1, [r4, r1]
		i++;
 8001220:	3301      	adds	r3, #1
		buffer[i] = str[i];
 8001222:	5481      	strb	r1, [r0, r2]
		i++;
 8001224:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001226:	9b01      	ldr	r3, [sp, #4]
 8001228:	5ce3      	ldrb	r3, [r4, r3]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f4      	bne.n	8001218 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 800122e:	9d01      	ldr	r5, [sp, #4]
 8001230:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001232:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 8001234:	4c0a      	ldr	r4, [pc, #40]	; (8001260 <lcd_puts+0x64>)
	buffer[i] = '\0';
 8001236:	5543      	strb	r3, [r0, r5]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001238:	b292      	uxth	r2, r2
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <lcd_puts+0x60>)
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 800123e:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001240:	f00e fb50 	bl	800f8e4 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001244:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 8001246:	b910      	cbnz	r0, 800124e <lcd_puts+0x52>
	}
	return (stat);
}
 8001248:	4628      	mov	r0, r5
 800124a:	b003      	add	sp, #12
 800124c:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800124e:	4629      	mov	r1, r5
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <lcd_puts+0x6c>)
 8001252:	f021 f937 	bl	80224c4 <iprintf>
}
 8001256:	4628      	mov	r0, r5
 8001258:	b003      	add	sp, #12
 800125a:	bd30      	pop	{r4, r5, pc}
 800125c:	20001490 	.word	0x20001490
 8001260:	20001bd8 	.word	0x20001bd8
 8001264:	2001b3d8 	.word	0x2001b3d8
 8001268:	08026b20 	.word	0x08026b20

0800126c <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 800126c:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 800126e:	2300      	movs	r3, #0
int lcd_rxdma() {
 8001270:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001272:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <lcd_rxdma+0x64>)
	volatile int count = 0;
 8001274:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 8001276:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001278:	6853      	ldr	r3, [r2, #4]
 800127a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800127e:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 8001280:	9a01      	ldr	r2, [sp, #4]
 8001282:	2a80      	cmp	r2, #128	; 0x80
 8001284:	d016      	beq.n	80012b4 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8001286:	4d13      	ldr	r5, [pc, #76]	; (80012d4 <lcd_rxdma+0x68>)
 8001288:	9a01      	ldr	r2, [sp, #4]
 800128a:	682b      	ldr	r3, [r5, #0]
 800128c:	4293      	cmp	r3, r2
 800128e:	d00e      	beq.n	80012ae <lcd_rxdma+0x42>
 8001290:	4c11      	ldr	r4, [pc, #68]	; (80012d8 <lcd_rxdma+0x6c>)
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001294:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 8001296:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001298:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 800129a:	3301      	adds	r3, #1
		count++;
 800129c:	3201      	adds	r2, #1
		return (0);
 800129e:	2b80      	cmp	r3, #128	; 0x80
		count++;
 80012a0:	9200      	str	r2, [sp, #0]
		return (0);
 80012a2:	bfa8      	it	ge
 80012a4:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80012a6:	9a01      	ldr	r2, [sp, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d1f3      	bne.n	8001294 <lcd_rxdma+0x28>
 80012ac:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 80012ae:	9800      	ldr	r0, [sp, #0]
}
 80012b0:	b003      	add	sp, #12
 80012b2:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 80012b4:	4909      	ldr	r1, [pc, #36]	; (80012dc <lcd_rxdma+0x70>)
 80012b6:	480a      	ldr	r0, [pc, #40]	; (80012e0 <lcd_rxdma+0x74>)
 80012b8:	f00f fb3a 	bl	8010930 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 80012bc:	b910      	cbnz	r0, 80012c4 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 80012be:	2300      	movs	r3, #0
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	e7e0      	b.n	8001286 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80012c4:	4601      	mov	r1, r0
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <lcd_rxdma+0x78>)
 80012c8:	f021 f8fc 	bl	80224c4 <iprintf>
 80012cc:	e7f7      	b.n	80012be <lcd_rxdma+0x52>
 80012ce:	bf00      	nop
 80012d0:	40026010 	.word	0x40026010
 80012d4:	20001610 	.word	0x20001610
 80012d8:	20001590 	.word	0x20001590
 80012dc:	200014d0 	.word	0x200014d0
 80012e0:	2001b3d8 	.word	0x2001b3d8
 80012e4:	08026b50 	.word	0x08026b50

080012e8 <intwritelcdcmd>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// internal send a var string to the LCD (len max 255) - cant be blcoked
// terminate with three 0xff's
// returns 0 if sent
int intwritelcdcmd(char *str) {
 80012e8:	b500      	push	{lr}
 80012ea:	b091      	sub	sp, #68	; 0x44
 80012ec:	4601      	mov	r1, r0
	char i = 0;
	char pkt[64];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 80012ee:	4668      	mov	r0, sp
 80012f0:	f021 faf1 	bl	80228d6 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <intwritelcdcmd+0x20>)
	strcpy(pkt, str);
 80012f6:	4603      	mov	r3, r0
	strcat(pkt, "\xff\xff\xff");
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	6018      	str	r0, [r3, #0]
	return (lcd_puts(pkt));
 80012fc:	4668      	mov	r0, sp
 80012fe:	f7ff ff7d 	bl	80011fc <lcd_puts>
}
 8001302:	b011      	add	sp, #68	; 0x44
 8001304:	f85d fb04 	ldr.w	pc, [sp], #4
 8001308:	08026afc 	.word	0x08026afc

0800130c <writelcdcmd>:


// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 800130c:	b500      	push	{lr}
 800130e:	b091      	sub	sp, #68	; 0x44
 8001310:	4601      	mov	r1, r0
	char i = 0;
	char pkt[64];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 8001312:	4668      	mov	r0, sp
 8001314:	f021 fadf 	bl	80228d6 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <writelcdcmd+0x30>)
	strcpy(pkt, str);
 800131c:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800131e:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001320:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8001322:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8001324:	b92b      	cbnz	r3, 8001332 <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 8001326:	4668      	mov	r0, sp
 8001328:	f7ff ff68 	bl	80011fc <lcd_puts>
	else
		return(-1);
}
 800132c:	b011      	add	sp, #68	; 0x44
 800132e:	f85d fb04 	ldr.w	pc, [sp], #4
		return(-1);
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
 8001336:	e7f9      	b.n	800132c <writelcdcmd+0x20>
 8001338:	08026afc 	.word	0x08026afc
 800133c:	2000158c 	.word	0x2000158c

08001340 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8001340:	b510      	push	{r4, lr}
 8001342:	b092      	sub	sp, #72	; 0x48
	int i;
	char str[64];
	volatile int result = 0;
 8001344:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 800134a:	a802      	add	r0, sp, #8
 800134c:	4905      	ldr	r1, [pc, #20]	; (8001364 <setlcdtext+0x24>)
	volatile int result = 0;
 800134e:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001350:	f021 fa30 	bl	80227b4 <siprintf>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8001354:	a802      	add	r0, sp, #8
 8001356:	f7ff ffd9 	bl	800130c <writelcdcmd>
 800135a:	9001      	str	r0, [sp, #4]
	return (result);
 800135c:	9801      	ldr	r0, [sp, #4]
}
 800135e:	b012      	add	sp, #72	; 0x48
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop
 8001364:	08026b80 	.word	0x08026b80

08001368 <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 8001368:	b500      	push	{lr}
 800136a:	b08b      	sub	sp, #44	; 0x2c
 800136c:	460b      	mov	r3, r1
 800136e:	4602      	mov	r2, r0
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 8001370:	490a      	ldr	r1, [pc, #40]	; (800139c <setlcdbin+0x34>)
 8001372:	a802      	add	r0, sp, #8
 8001374:	f021 fa1e 	bl	80227b4 <siprintf>
	result = writelcdcmd(buffer);
 8001378:	a802      	add	r0, sp, #8
 800137a:	f7ff ffc7 	bl	800130c <writelcdcmd>
 800137e:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 8001380:	9b01      	ldr	r3, [sp, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	d003      	beq.n	800138e <setlcdbin+0x26>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 8001386:	9801      	ldr	r0, [sp, #4]
}
 8001388:	b00b      	add	sp, #44	; 0x2c
 800138a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <setlcdbin+0x38>)
 8001390:	f021 f898 	bl	80224c4 <iprintf>
	return (result);
 8001394:	9801      	ldr	r0, [sp, #4]
}
 8001396:	b00b      	add	sp, #44	; 0x2c
 8001398:	f85d fb04 	ldr.w	pc, [sp], #4
 800139c:	08026b88 	.word	0x08026b88
 80013a0:	08026b90 	.word	0x08026b90

080013a4 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <isnexpkt+0xbc>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80013a8:	b083      	sub	sp, #12
	if (lastidx != lcdrxoutidx) {		// something there
 80013aa:	4d2e      	ldr	r5, [pc, #184]	; (8001464 <isnexpkt+0xc0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	682a      	ldr	r2, [r5, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d052      	beq.n	800145a <isnexpkt+0xb6>
	if (++index >= limit)
 80013b4:	1c53      	adds	r3, r2, #1
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 80013b6:	4c2c      	ldr	r4, [pc, #176]	; (8001468 <isnexpkt+0xc4>)
		ch = lcdrxbuffer[lastidx];
 80013b8:	4f2c      	ldr	r7, [pc, #176]	; (800146c <isnexpkt+0xc8>)
		rxtimeout = 100;
 80013ba:	f04f 0c64 	mov.w	ip, #100	; 0x64
		return (0);
 80013be:	2b80      	cmp	r3, #128	; 0x80
		buffer[i++] = ch;
 80013c0:	7826      	ldrb	r6, [r4, #0]
		ch = lcdrxbuffer[lastidx];
 80013c2:	5cbf      	ldrb	r7, [r7, r2]
		return (0);
 80013c4:	bfa8      	it	ge
 80013c6:	2300      	movge	r3, #0
		buffer[i++] = ch;
 80013c8:	1c72      	adds	r2, r6, #1
		ch = rawchar & 0xff;
 80013ca:	f88d 7007 	strb.w	r7, [sp, #7]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80013ce:	602b      	str	r3, [r5, #0]
		buffer[i++] = ch;
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f89d 7007 	ldrb.w	r7, [sp, #7]
		if (ch == 0xff) {
 80013d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		rxtimeout = 100;
 80013da:	4d25      	ldr	r5, [pc, #148]	; (8001470 <isnexpkt+0xcc>)
		if (ch == 0xff) {
 80013dc:	2bff      	cmp	r3, #255	; 0xff
		buffer[i++] = ch;
 80013de:	7022      	strb	r2, [r4, #0]
		rxtimeout = 100;
 80013e0:	f8c5 c000 	str.w	ip, [r5]
		buffer[i++] = ch;
 80013e4:	5587      	strb	r7, [r0, r6]
		if (ch == 0xff) {
 80013e6:	d029      	beq.n	800143c <isnexpkt+0x98>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013e8:	f89d c007 	ldrb.w	ip, [sp, #7]
			termcnt = 0;
 80013ec:	2300      	movs	r3, #0
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013ee:	4f21      	ldr	r7, [pc, #132]	; (8001474 <isnexpkt+0xd0>)
			termcnt = 0;
 80013f0:	4e21      	ldr	r6, [pc, #132]	; (8001478 <isnexpkt+0xd4>)
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013f2:	f887 c000 	strb.w	ip, [r7]
			termcnt = 0;
 80013f6:	7033      	strb	r3, [r6, #0]
		}

		if (i == size) { // overrun
 80013f8:	428a      	cmp	r2, r1
 80013fa:	d102      	bne.n	8001402 <isnexpkt+0x5e>
			i = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 8001400:	7033      	strb	r3, [r6, #0]
		}
	}
	if (rxtimeout > 0)
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	b133      	cbz	r3, 8001414 <isnexpkt+0x70>
		rxtimeout--;
 8001406:	3b01      	subs	r3, #1
 8001408:	602b      	str	r3, [r5, #0]
	if (rxtimeout == 0) {
 800140a:	b11b      	cbz	r3, 8001414 <isnexpkt+0x70>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (-2);  // no char available
 800140c:	f06f 0001 	mvn.w	r0, #1
}
 8001410:	b003      	add	sp, #12
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		termcnt = 0;
 8001414:	2200      	movs	r2, #0
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <isnexpkt+0xd4>)
		for (i = 0; i < size; buffer[i++] = 0)
 8001418:	4c13      	ldr	r4, [pc, #76]	; (8001468 <isnexpkt+0xc4>)
		termcnt = 0;
 800141a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 800141c:	7022      	strb	r2, [r4, #0]
 800141e:	b139      	cbz	r1, 8001430 <isnexpkt+0x8c>
 8001420:	3901      	subs	r1, #1
 8001422:	1e43      	subs	r3, r0, #1
 8001424:	fa50 f081 	uxtab	r0, r0, r1
 8001428:	f803 2f01 	strb.w	r2, [r3, #1]!
 800142c:	4298      	cmp	r0, r3
 800142e:	d1fb      	bne.n	8001428 <isnexpkt+0x84>
		i = 0;
 8001430:	2300      	movs	r3, #0
		return (-1);
 8001432:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 8001436:	7023      	strb	r3, [r4, #0]
}
 8001438:	b003      	add	sp, #12
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			termcnt++;
 800143c:	4e0e      	ldr	r6, [pc, #56]	; (8001478 <isnexpkt+0xd4>)
 800143e:	7833      	ldrb	r3, [r6, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	b2db      	uxtb	r3, r3
			if (termcnt == 3) {
 8001444:	2b03      	cmp	r3, #3
			termcnt++;
 8001446:	7033      	strb	r3, [r6, #0]
			if (termcnt == 3) {
 8001448:	d1d6      	bne.n	80013f8 <isnexpkt+0x54>
				printf(" # ");		// found terminator
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <isnexpkt+0xd8>)
 800144c:	f021 f83a 	bl	80224c4 <iprintf>
				i = 0;
 8001450:	2300      	movs	r3, #0
				index = i;
 8001452:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 8001454:	7033      	strb	r3, [r6, #0]
				i = 0;
 8001456:	7023      	strb	r3, [r4, #0]
				return (index);
 8001458:	e7da      	b.n	8001410 <isnexpkt+0x6c>
 800145a:	4d05      	ldr	r5, [pc, #20]	; (8001470 <isnexpkt+0xcc>)
 800145c:	e7d1      	b.n	8001402 <isnexpkt+0x5e>
 800145e:	bf00      	nop
 8001460:	20001610 	.word	0x20001610
 8001464:	2000157c 	.word	0x2000157c
 8001468:	20001570 	.word	0x20001570
 800146c:	20001590 	.word	0x20001590
 8001470:	200019e8 	.word	0x200019e8
 8001474:	200019e4 	.word	0x200019e4
 8001478:	200019ec 	.word	0x200019ec
 800147c:	08026bac 	.word	0x08026bac

08001480 <lcd_time>:
//Application specific display stuff
//
//////////////////////////////////////////////////////////////

// send the time to t0.txt
void lcd_time() {
 8001480:	b530      	push	{r4, r5, lr}
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001482:	4c1c      	ldr	r4, [pc, #112]	; (80014f4 <lcd_time+0x74>)
 8001484:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8001488:	2500      	movs	r5, #0
 800148a:	481b      	ldr	r0, [pc, #108]	; (80014f8 <lcd_time+0x78>)
void lcd_time() {
 800148c:	b085      	sub	sp, #20
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 800148e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001492:	185b      	adds	r3, r3, r1
 8001494:	eb45 0202 	adc.w	r2, r5, r2
	timeinfo = *localtime(&localepochtime);
 8001498:	4d18      	ldr	r5, [pc, #96]	; (80014fc <lcd_time+0x7c>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 800149a:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 800149e:	f01f ff45 	bl	802132c <localtime>
 80014a2:	4604      	mov	r4, r0
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ac:	462b      	mov	r3, r5
 80014ae:	6820      	ldr	r0, [r4, #0]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80014b0:	4a13      	ldr	r2, [pc, #76]	; (8001500 <lcd_time+0x80>)
 80014b2:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 80014b4:	f843 0920 	str.w	r0, [r3], #-32
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <lcd_time+0x84>)
 80014ba:	f021 ff7d 	bl	80233b8 <strftime>
	setlcdtext("t0.txt", buffer);
 80014be:	4911      	ldr	r1, [pc, #68]	; (8001504 <lcd_time+0x84>)
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <lcd_time+0x88>)
 80014c2:	f7ff ff3d 	bl	8001340 <setlcdtext>

	if (!(gpslocked))
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <lcd_time+0x8c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b923      	cbnz	r3, 80014d6 <lcd_time+0x56>
		writelcdcmd("vis t3,1");	// hide
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <lcd_time+0x90>)
 80014ce:	f7ff ff1d 	bl	800130c <writelcdcmd>
		sprintf(str,"AQUIRE GPS:%d",statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,0");
	}

}
 80014d2:	b005      	add	sp, #20
 80014d4:	bd30      	pop	{r4, r5, pc}
		sprintf(str,"AQUIRE GPS:%d",statuspkt.NavPvt.numSV);
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <lcd_time+0x94>)
 80014d8:	4668      	mov	r0, sp
 80014da:	490f      	ldr	r1, [pc, #60]	; (8001518 <lcd_time+0x98>)
 80014dc:	7eda      	ldrb	r2, [r3, #27]
 80014de:	f021 f969 	bl	80227b4 <siprintf>
		setlcdtext("t3.txt", str);
 80014e2:	4669      	mov	r1, sp
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <lcd_time+0x9c>)
 80014e6:	f7ff ff2b 	bl	8001340 <setlcdtext>
		writelcdcmd("vis t3,0");
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <lcd_time+0xa0>)
 80014ec:	f7ff ff0e 	bl	800130c <writelcdcmd>
}
 80014f0:	b005      	add	sp, #20
 80014f2:	bd30      	pop	{r4, r5, pc}
 80014f4:	2001ba30 	.word	0x2001ba30
 80014f8:	2001ae88 	.word	0x2001ae88
 80014fc:	2001ae38 	.word	0x2001ae38
 8001500:	08026bb0 	.word	0x08026bb0
 8001504:	2001ae5c 	.word	0x2001ae5c
 8001508:	08026bbc 	.word	0x08026bbc
 800150c:	20001c95 	.word	0x20001c95
 8001510:	08026bc4 	.word	0x08026bc4
 8001514:	2001ad7c 	.word	0x2001ad7c
 8001518:	08026bd0 	.word	0x08026bd0
 800151c:	08026be0 	.word	0x08026be0
 8001520:	08026be8 	.word	0x08026be8

08001524 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <lcd_date+0x24>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001526:	2128      	movs	r1, #40	; 0x28
 8001528:	4a08      	ldr	r2, [pc, #32]	; (800154c <lcd_date+0x28>)
void lcd_date() {
 800152a:	b570      	push	{r4, r5, r6, lr}
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 800152c:	4c08      	ldr	r4, [pc, #32]	; (8001550 <lcd_date+0x2c>)
	lastday = timeinfo.tm_yday;
 800152e:	69de      	ldr	r6, [r3, #28]
 8001530:	4d08      	ldr	r5, [pc, #32]	; (8001554 <lcd_date+0x30>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001532:	4620      	mov	r0, r4
	lastday = timeinfo.tm_yday;
 8001534:	602e      	str	r6, [r5, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001536:	f021 ff3f 	bl	80233b8 <strftime>
	setlcdtext("t1.txt", buffer);
 800153a:	4621      	mov	r1, r4
 800153c:	4806      	ldr	r0, [pc, #24]	; (8001558 <lcd_date+0x34>)
}
 800153e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setlcdtext("t1.txt", buffer);
 8001542:	f7ff befd 	b.w	8001340 <setlcdtext>
 8001546:	bf00      	nop
 8001548:	2001ae38 	.word	0x2001ae38
 800154c:	08026bf4 	.word	0x08026bf4
 8001550:	2001ae5c 	.word	0x2001ae5c
 8001554:	20001578 	.word	0x20001578
 8001558:	08026c04 	.word	0x08026c04

0800155c <lcd_showvars>:

// populate the page2 vars
lcd_showvars() {
	unsigned char str[64];

	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800155c:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <lcd_showvars+0x158>)
 800155e:	4956      	ldr	r1, [pc, #344]	; (80016b8 <lcd_showvars+0x15c>)
 8001560:	681a      	ldr	r2, [r3, #0]
lcd_showvars() {
 8001562:	b530      	push	{r4, r5, lr}
	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8001564:	0e13      	lsrs	r3, r2, #24
lcd_showvars() {
 8001566:	b095      	sub	sp, #84	; 0x54
	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8001568:	f3c2 4407 	ubfx	r4, r2, #16, #8
			(myip & 0xFF000000) >> 24);
	setlcdtext("t11.txt", str);
	sprintf(str, "%d", statuspkt.uid);
 800156c:	4d53      	ldr	r5, [pc, #332]	; (80016bc <lcd_showvars+0x160>)
	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	a804      	add	r0, sp, #16
 8001572:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001576:	9400      	str	r4, [sp, #0]
 8001578:	b2d2      	uxtb	r2, r2
	sprintf(str, "%d", statuspkt.uid);
 800157a:	4c51      	ldr	r4, [pc, #324]	; (80016c0 <lcd_showvars+0x164>)
	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800157c:	f021 f91a 	bl	80227b4 <siprintf>
	setlcdtext("t11.txt", str);
 8001580:	a904      	add	r1, sp, #16
 8001582:	4850      	ldr	r0, [pc, #320]	; (80016c4 <lcd_showvars+0x168>)
 8001584:	f7ff fedc 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.uid);
 8001588:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 800158c:	4621      	mov	r1, r4
 800158e:	a804      	add	r0, sp, #16
 8001590:	b292      	uxth	r2, r2
 8001592:	f021 f90f 	bl	80227b4 <siprintf>
	setlcdtext("t10.txt", str);
 8001596:	a904      	add	r1, sp, #16
 8001598:	484b      	ldr	r0, [pc, #300]	; (80016c8 <lcd_showvars+0x16c>)
 800159a:	f7ff fed1 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.adcpktssent);
 800159e:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 80015a2:	4621      	mov	r1, r4
 80015a4:	a804      	add	r0, sp, #16
 80015a6:	b292      	uxth	r2, r2
 80015a8:	f021 f904 	bl	80227b4 <siprintf>
	setlcdtext("t9.txt", str);
 80015ac:	a904      	add	r1, sp, #16
 80015ae:	4847      	ldr	r0, [pc, #284]	; (80016cc <lcd_showvars+0x170>)
 80015b0:	f7ff fec6 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80015b4:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <lcd_showvars+0x174>)
 80015b6:	4621      	mov	r1, r4
 80015b8:	a804      	add	r0, sp, #16
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80015c0:	f021 f8f8 	bl	80227b4 <siprintf>
	setlcdtext("t8.txt", str);
 80015c4:	a904      	add	r1, sp, #16
 80015c6:	4843      	ldr	r0, [pc, #268]	; (80016d4 <lcd_showvars+0x178>)
 80015c8:	f7ff feba 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80015cc:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <lcd_showvars+0x17c>)
 80015ce:	4621      	mov	r1, r4
 80015d0:	a804      	add	r0, sp, #16
 80015d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	bfb8      	it	lt
 80015da:	4252      	neglt	r2, r2
 80015dc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80015e0:	f021 f8e8 	bl	80227b4 <siprintf>
	setlcdtext("t7.txt", str);
 80015e4:	a904      	add	r1, sp, #16
 80015e6:	483d      	ldr	r0, [pc, #244]	; (80016dc <lcd_showvars+0x180>)
 80015e8:	f7ff feaa 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", pgagain & 7);	// gain
 80015ec:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <lcd_showvars+0x184>)
 80015ee:	4621      	mov	r1, r4
 80015f0:	a804      	add	r0, sp, #16
 80015f2:	881a      	ldrh	r2, [r3, #0]
 80015f4:	f002 0207 	and.w	r2, r2, #7
 80015f8:	f021 f8dc 	bl	80227b4 <siprintf>
	setlcdtext("t6.txt", str);
 80015fc:	a904      	add	r1, sp, #16
 80015fe:	4839      	ldr	r0, [pc, #228]	; (80016e4 <lcd_showvars+0x188>)
 8001600:	f7ff fe9e 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 8001604:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8001606:	4621      	mov	r1, r4
 8001608:	a804      	add	r0, sp, #16
 800160a:	f021 f8d3 	bl	80227b4 <siprintf>
	setlcdtext("t24.txt", str);
 800160e:	a904      	add	r1, sp, #16
 8001610:	4835      	ldr	r0, [pc, #212]	; (80016e8 <lcd_showvars+0x18c>)
 8001612:	f7ff fe95 	bl	8001340 <setlcdtext>

	sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8001616:	7eea      	ldrb	r2, [r5, #27]
 8001618:	4621      	mov	r1, r4
 800161a:	a804      	add	r0, sp, #16
 800161c:	f021 f8ca 	bl	80227b4 <siprintf>
	setlcdtext("t0.txt", str);
 8001620:	a904      	add	r1, sp, #16
 8001622:	4832      	ldr	r0, [pc, #200]	; (80016ec <lcd_showvars+0x190>)
 8001624:	f7ff fe8c 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8001628:	6a2a      	ldr	r2, [r5, #32]
 800162a:	4621      	mov	r1, r4
 800162c:	a804      	add	r0, sp, #16
 800162e:	f021 f8c1 	bl	80227b4 <siprintf>
	setlcdtext("t1.txt", str);
 8001632:	a904      	add	r1, sp, #16
 8001634:	482e      	ldr	r0, [pc, #184]	; (80016f0 <lcd_showvars+0x194>)
 8001636:	f7ff fe83 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 800163a:	69ea      	ldr	r2, [r5, #28]
 800163c:	4621      	mov	r1, r4
 800163e:	a804      	add	r0, sp, #16
 8001640:	f021 f8b8 	bl	80227b4 <siprintf>
	setlcdtext("t2.txt", str);
 8001644:	a904      	add	r1, sp, #16
 8001646:	482b      	ldr	r0, [pc, #172]	; (80016f4 <lcd_showvars+0x198>)
 8001648:	f7ff fe7a 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 800164c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800164e:	4621      	mov	r1, r4
 8001650:	a804      	add	r0, sp, #16
 8001652:	f021 f8af 	bl	80227b4 <siprintf>
	setlcdtext("t3.txt", str);
 8001656:	a904      	add	r1, sp, #16
 8001658:	4827      	ldr	r0, [pc, #156]	; (80016f8 <lcd_showvars+0x19c>)
 800165a:	f7ff fe71 	bl	8001340 <setlcdtext>

	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 800165e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001660:	4621      	mov	r1, r4
 8001662:	a804      	add	r0, sp, #16
 8001664:	f021 f8a6 	bl	80227b4 <siprintf>
	setlcdtext("t4.txt", str);
 8001668:	a904      	add	r1, sp, #16
 800166a:	4824      	ldr	r0, [pc, #144]	; (80016fc <lcd_showvars+0x1a0>)
 800166c:	f7ff fe68 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 8001670:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8001672:	4621      	mov	r1, r4
 8001674:	a804      	add	r0, sp, #16
 8001676:	f021 f89d 	bl	80227b4 <siprintf>
	setlcdtext("t5.txt", str);
 800167a:	a904      	add	r1, sp, #16
 800167c:	4820      	ldr	r0, [pc, #128]	; (8001700 <lcd_showvars+0x1a4>)

	sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],	STM32_UUID[1], STM32_UUID[2]);
 800167e:	f242 741e 	movw	r4, #10014	; 0x271e
	setlcdtext("t5.txt", str);
 8001682:	f7ff fe5d 	bl	8001340 <setlcdtext>
	sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],	STM32_UUID[1], STM32_UUID[2]);
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <lcd_showvars+0x1a8>)
 8001688:	4d1f      	ldr	r5, [pc, #124]	; (8001708 <lcd_showvars+0x1ac>)
 800168a:	a804      	add	r0, sp, #16
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	230c      	movs	r3, #12
 8001690:	491e      	ldr	r1, [pc, #120]	; (800170c <lcd_showvars+0x1b0>)
 8001692:	9203      	str	r2, [sp, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	682d      	ldr	r5, [r5, #0]
 8001698:	9502      	str	r5, [sp, #8]
 800169a:	6809      	ldr	r1, [r1, #0]
 800169c:	e9cd 4100 	strd	r4, r1, [sp]
 80016a0:	491b      	ldr	r1, [pc, #108]	; (8001710 <lcd_showvars+0x1b4>)
 80016a2:	f021 f887 	bl	80227b4 <siprintf>
//	sprintf(str, "UID=%lx %lx %lx", STM32_UUID[0],	STM32_UUID[1], STM32_UUID[2]);
	setlcdtext("t26.txt", str);
 80016a6:	a904      	add	r1, sp, #16
 80016a8:	481a      	ldr	r0, [pc, #104]	; (8001714 <lcd_showvars+0x1b8>)
 80016aa:	f7ff fe49 	bl	8001340 <setlcdtext>

}
 80016ae:	b015      	add	sp, #84	; 0x54
 80016b0:	bd30      	pop	{r4, r5, pc}
 80016b2:	bf00      	nop
 80016b4:	2001b218 	.word	0x2001b218
 80016b8:	08026c0c 	.word	0x08026c0c
 80016bc:	2001ad7c 	.word	0x2001ad7c
 80016c0:	08026ccc 	.word	0x08026ccc
 80016c4:	08026c1c 	.word	0x08026c1c
 80016c8:	08026c24 	.word	0x08026c24
 80016cc:	08026c2c 	.word	0x08026c2c
 80016d0:	200006e4 	.word	0x200006e4
 80016d4:	08026c34 	.word	0x08026c34
 80016d8:	20000738 	.word	0x20000738
 80016dc:	08026c3c 	.word	0x08026c3c
 80016e0:	2000026a 	.word	0x2000026a
 80016e4:	08026c44 	.word	0x08026c44
 80016e8:	08026c4c 	.word	0x08026c4c
 80016ec:	08026bbc 	.word	0x08026bbc
 80016f0:	08026c04 	.word	0x08026c04
 80016f4:	08026c54 	.word	0x08026c54
 80016f8:	08026be0 	.word	0x08026be0
 80016fc:	08026c5c 	.word	0x08026c5c
 8001700:	08026c64 	.word	0x08026c64
 8001704:	1ff0f428 	.word	0x1ff0f428
 8001708:	1ff0f424 	.word	0x1ff0f424
 800170c:	1ff0f420 	.word	0x1ff0f420
 8001710:	08026c6c 	.word	0x08026c6c
 8001714:	08026c94 	.word	0x08026c94

08001718 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
lcd_trigcharts() {
 8001718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 800171c:	4931      	ldr	r1, [pc, #196]	; (80017e4 <lcd_trigcharts+0xcc>)
lcd_trigcharts() {
 800171e:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 8001720:	4831      	ldr	r0, [pc, #196]	; (80017e8 <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 8001722:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 8001726:	f7ff fe0b 	bl	8001340 <setlcdtext>
	setlcdtext("t18.txt","Triggers");
 800172a:	492e      	ldr	r1, [pc, #184]	; (80017e4 <lcd_trigcharts+0xcc>)
 800172c:	482f      	ldr	r0, [pc, #188]	; (80017ec <lcd_trigcharts+0xd4>)
 800172e:	f7ff fe07 	bl	8001340 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 8001732:	492f      	ldr	r1, [pc, #188]	; (80017f0 <lcd_trigcharts+0xd8>)
 8001734:	482f      	ldr	r0, [pc, #188]	; (80017f4 <lcd_trigcharts+0xdc>)
 8001736:	f7ff fe03 	bl	8001340 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 800173a:	492d      	ldr	r1, [pc, #180]	; (80017f0 <lcd_trigcharts+0xd8>)
 800173c:	482e      	ldr	r0, [pc, #184]	; (80017f8 <lcd_trigcharts+0xe0>)
 800173e:	f7ff fdff 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <lcd_trigcharts+0xe4>)
 8001744:	492e      	ldr	r1, [pc, #184]	; (8001800 <lcd_trigcharts+0xe8>)
 8001746:	4668      	mov	r0, sp
 8001748:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800174a:	f021 f833 	bl	80227b4 <siprintf>
	setlcdtext("t0.txt", str);
 800174e:	4669      	mov	r1, sp
 8001750:	482c      	ldr	r0, [pc, #176]	; (8001804 <lcd_trigcharts+0xec>)
 8001752:	f7ff fdf5 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <lcd_trigcharts+0xf0>)
 8001758:	4929      	ldr	r1, [pc, #164]	; (8001800 <lcd_trigcharts+0xe8>)
 800175a:	4668      	mov	r0, sp
 800175c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001760:	4f2a      	ldr	r7, [pc, #168]	; (800180c <lcd_trigcharts+0xf4>)
 8001762:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001764:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001828 <lcd_trigcharts+0x110>
 8001768:	4e29      	ldr	r6, [pc, #164]	; (8001810 <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800176a:	bfb8      	it	lt
 800176c:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 800176e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800182c <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001772:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001776:	f021 f81d 	bl	80227b4 <siprintf>
	setlcdtext("t2.txt", str);
 800177a:	4669      	mov	r1, sp
 800177c:	4825      	ldr	r0, [pc, #148]	; (8001814 <lcd_trigcharts+0xfc>)
 800177e:	f7ff fddf 	bl	8001340 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8001782:	4825      	ldr	r0, [pc, #148]	; (8001818 <lcd_trigcharts+0x100>)
 8001784:	f7ff fdc2 	bl	800130c <writelcdcmd>
	buffi = trigindex;
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <lcd_trigcharts+0x104>)
 800178a:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 800178c:	e01c      	b.n	80017c8 <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 800178e:	f819 2004 	ldrb.w	r2, [r9, r4]
 8001792:	f021 f80f 	bl	80227b4 <siprintf>
		writelcdcmd(str);
 8001796:	4668      	mov	r0, sp
 8001798:	f7ff fdb8 	bl	800130c <writelcdcmd>
		osDelay(15);
 800179c:	200f      	movs	r0, #15
 800179e:	f011 f92b 	bl	80129f8 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 80017a2:	f818 2004 	ldrb.w	r2, [r8, r4]
 80017a6:	491e      	ldr	r1, [pc, #120]	; (8001820 <lcd_trigcharts+0x108>)
 80017a8:	4668      	mov	r0, sp
 80017aa:	f021 f803 	bl	80227b4 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 80017ae:	3401      	adds	r4, #1
		writelcdcmd(str);
 80017b0:	4668      	mov	r0, sp
 80017b2:	f7ff fdab 	bl	800130c <writelcdcmd>
		osDelay(15);
 80017b6:	200f      	movs	r0, #15
 80017b8:	f011 f91e 	bl	80129f8 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 80017bc:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80017c0:	bfc8      	it	gt
 80017c2:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 80017c4:	3d01      	subs	r5, #1
 80017c6:	d007      	beq.n	80017d8 <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 80017c8:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 80017ca:	4631      	mov	r1, r6
 80017cc:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d0dd      	beq.n	800178e <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 80017d2:	b009      	add	sp, #36	; 0x24
 80017d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 80017d8:	4812      	ldr	r0, [pc, #72]	; (8001824 <lcd_trigcharts+0x10c>)
 80017da:	f7ff fd97 	bl	800130c <writelcdcmd>
}
 80017de:	b009      	add	sp, #36	; 0x24
 80017e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017e4:	08026c9c 	.word	0x08026c9c
 80017e8:	08026be0 	.word	0x08026be0
 80017ec:	08026ca8 	.word	0x08026ca8
 80017f0:	08026cb0 	.word	0x08026cb0
 80017f4:	08026c5c 	.word	0x08026c5c
 80017f8:	08026c04 	.word	0x08026c04
 80017fc:	2001ad7c 	.word	0x2001ad7c
 8001800:	08026ccc 	.word	0x08026ccc
 8001804:	08026bbc 	.word	0x08026bbc
 8001808:	20000738 	.word	0x20000738
 800180c:	200017fc 	.word	0x200017fc
 8001810:	08026cc4 	.word	0x08026cc4
 8001814:	08026c54 	.word	0x08026c54
 8001818:	08026cb8 	.word	0x08026cb8
 800181c:	200019f0 	.word	0x200019f0
 8001820:	08026cd0 	.word	0x08026cd0
 8001824:	08026cdc 	.word	0x08026cdc
 8001828:	200019f4 	.word	0x200019f4
 800182c:	2000161c 	.word	0x2000161c

08001830 <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
lcd_trigplot() {
 8001830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001834:	493c      	ldr	r1, [pc, #240]	; (8001928 <lcd_trigplot+0xf8>)
lcd_trigplot() {
 8001836:	b088      	sub	sp, #32
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001838:	4d3c      	ldr	r5, [pc, #240]	; (800192c <lcd_trigplot+0xfc>)
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 800183a:	4e3d      	ldr	r6, [pc, #244]	; (8001930 <lcd_trigplot+0x100>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 800183c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800183e:	6808      	ldr	r0, [r1, #0]
	val = abs(meanwindiff) & 0xfff;
 8001840:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001844:	1a12      	subs	r2, r2, r0

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001846:	f8df c128 	ldr.w	ip, [pc, #296]	; 8001970 <lcd_trigplot+0x140>
	val = abs(meanwindiff) & 0xfff;
 800184a:	2b00      	cmp	r3, #0
	lasttrig = statuspkt.trigcount;
 800184c:	f8d5 e07c 	ldr.w	lr, [r5, #124]	; 0x7c
	val = val * 32;		// scale up: n pixels per trigger
 8001850:	ea4f 1242 	mov.w	r2, r2, lsl #5
	trigvec[trigindex] = val;
 8001854:	4c37      	ldr	r4, [pc, #220]	; (8001934 <lcd_trigplot+0x104>)
	val = abs(meanwindiff) & 0xfff;
 8001856:	bfb8      	it	lt
 8001858:	425b      	neglt	r3, r3
	if (our_currentpage == 2) {		// if currently displaying on LCD
 800185a:	f89c c000 	ldrb.w	ip, [ip]
	trigvec[trigindex] = val;
 800185e:	2a77      	cmp	r2, #119	; 0x77
 8001860:	6820      	ldr	r0, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8001862:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8001866:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001974 <lcd_trigplot+0x144>
 800186a:	bfa8      	it	ge
 800186c:	2277      	movge	r2, #119	; 0x77
	noisevec[trigindex] = val;
 800186e:	4f32      	ldr	r7, [pc, #200]	; (8001938 <lcd_trigplot+0x108>)
 8001870:	2b77      	cmp	r3, #119	; 0x77
	lasttrig = statuspkt.trigcount;
 8001872:	f8c1 e000 	str.w	lr, [r1]
	trigvec[trigindex] = val;
 8001876:	f808 2000 	strb.w	r2, [r8, r0]
	noisevec[trigindex] = val;
 800187a:	bfa8      	it	ge
 800187c:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 800187e:	f1bc 0f02 	cmp.w	ip, #2
	noisevec[trigindex] = val;
 8001882:	543b      	strb	r3, [r7, r0]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001884:	d00c      	beq.n	80018a0 <lcd_trigplot+0x70>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8001886:	3001      	adds	r0, #1
	if (trigindex >= LCDXPIXELS)
 8001888:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
 800188c:	da03      	bge.n	8001896 <lcd_trigplot+0x66>
	trigindex++;
 800188e:	6020      	str	r0, [r4, #0]
		trigindex = 0;
}
 8001890:	b008      	add	sp, #32
 8001892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		trigindex = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	6023      	str	r3, [r4, #0]
}
 800189a:	b008      	add	sp, #32
 800189c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		setlcdtext("t3.txt", "Triggers");
 80018a0:	4926      	ldr	r1, [pc, #152]	; (800193c <lcd_trigplot+0x10c>)
 80018a2:	4827      	ldr	r0, [pc, #156]	; (8001940 <lcd_trigplot+0x110>)
 80018a4:	f7ff fd4c 	bl	8001340 <setlcdtext>
		setlcdtext("t18.txt","Triggers");
 80018a8:	4924      	ldr	r1, [pc, #144]	; (800193c <lcd_trigplot+0x10c>)
 80018aa:	4826      	ldr	r0, [pc, #152]	; (8001944 <lcd_trigplot+0x114>)
 80018ac:	f7ff fd48 	bl	8001340 <setlcdtext>
		setlcdtext("t4.txt", "Noise");
 80018b0:	4925      	ldr	r1, [pc, #148]	; (8001948 <lcd_trigplot+0x118>)
 80018b2:	4826      	ldr	r0, [pc, #152]	; (800194c <lcd_trigplot+0x11c>)
 80018b4:	f7ff fd44 	bl	8001340 <setlcdtext>
		setlcdtext("t1.txt", "Noise");
 80018b8:	4923      	ldr	r1, [pc, #140]	; (8001948 <lcd_trigplot+0x118>)
 80018ba:	4825      	ldr	r0, [pc, #148]	; (8001950 <lcd_trigplot+0x120>)
 80018bc:	f7ff fd40 	bl	8001340 <setlcdtext>
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	4924      	ldr	r1, [pc, #144]	; (8001954 <lcd_trigplot+0x124>)
 80018c4:	4668      	mov	r0, sp
 80018c6:	f818 2003 	ldrb.w	r2, [r8, r3]
 80018ca:	f020 ff73 	bl	80227b4 <siprintf>
		writelcdcmd(str);
 80018ce:	4668      	mov	r0, sp
 80018d0:	f7ff fd1c 	bl	800130c <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	4920      	ldr	r1, [pc, #128]	; (8001958 <lcd_trigplot+0x128>)
 80018d8:	4668      	mov	r0, sp
 80018da:	5cfa      	ldrb	r2, [r7, r3]
 80018dc:	f020 ff6a 	bl	80227b4 <siprintf>
		writelcdcmd(str);
 80018e0:	4668      	mov	r0, sp
 80018e2:	f7ff fd13 	bl	800130c <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80018e6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80018e8:	491c      	ldr	r1, [pc, #112]	; (800195c <lcd_trigplot+0x12c>)
 80018ea:	4668      	mov	r0, sp
 80018ec:	f020 ff62 	bl	80227b4 <siprintf>
		setlcdtext("t0.txt", str);
 80018f0:	4669      	mov	r1, sp
 80018f2:	481b      	ldr	r0, [pc, #108]	; (8001960 <lcd_trigplot+0x130>)
 80018f4:	f7ff fd24 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80018f8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80018fc:	4917      	ldr	r1, [pc, #92]	; (800195c <lcd_trigplot+0x12c>)
 80018fe:	4668      	mov	r0, sp
 8001900:	2a00      	cmp	r2, #0
 8001902:	bfb8      	it	lt
 8001904:	4252      	neglt	r2, r2
 8001906:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800190a:	f020 ff53 	bl	80227b4 <siprintf>
		setlcdtext("t2.txt", str);
 800190e:	4669      	mov	r1, sp
 8001910:	4814      	ldr	r0, [pc, #80]	; (8001964 <lcd_trigplot+0x134>)
 8001912:	f7ff fd15 	bl	8001340 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001916:	4814      	ldr	r0, [pc, #80]	; (8001968 <lcd_trigplot+0x138>)
 8001918:	f7ff fcf8 	bl	800130c <writelcdcmd>
		writelcdcmd("vis t4,1");
 800191c:	4813      	ldr	r0, [pc, #76]	; (800196c <lcd_trigplot+0x13c>)
 800191e:	f7ff fcf5 	bl	800130c <writelcdcmd>
 8001922:	6820      	ldr	r0, [r4, #0]
 8001924:	e7af      	b.n	8001886 <lcd_trigplot+0x56>
 8001926:	bf00      	nop
 8001928:	20001580 	.word	0x20001580
 800192c:	2001ad7c 	.word	0x2001ad7c
 8001930:	20000738 	.word	0x20000738
 8001934:	200019f0 	.word	0x200019f0
 8001938:	2000161c 	.word	0x2000161c
 800193c:	08026c9c 	.word	0x08026c9c
 8001940:	08026be0 	.word	0x08026be0
 8001944:	08026ca8 	.word	0x08026ca8
 8001948:	08026cb0 	.word	0x08026cb0
 800194c:	08026c5c 	.word	0x08026c5c
 8001950:	08026c04 	.word	0x08026c04
 8001954:	08026cc4 	.word	0x08026cc4
 8001958:	08026cd0 	.word	0x08026cd0
 800195c:	08026ccc 	.word	0x08026ccc
 8001960:	08026bbc 	.word	0x08026bbc
 8001964:	08026c54 	.word	0x08026c54
 8001968:	08026bc4 	.word	0x08026bc4
 800196c:	08026cec 	.word	0x08026cec
 8001970:	200017fc 	.word	0x200017fc
 8001974:	200019f4 	.word	0x200019f4

08001978 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
lcd_presscharts() {
 8001978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 800197c:	4920      	ldr	r1, [pc, #128]	; (8001a00 <lcd_presscharts+0x88>)
lcd_presscharts() {
 800197e:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 8001980:	4820      	ldr	r0, [pc, #128]	; (8001a04 <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac>>2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8001982:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 8001986:	f7ff fcdb 	bl	8001340 <setlcdtext>
	setlcdtext("t18.txt","Pressure");
 800198a:	491d      	ldr	r1, [pc, #116]	; (8001a00 <lcd_presscharts+0x88>)
 800198c:	481e      	ldr	r0, [pc, #120]	; (8001a08 <lcd_presscharts+0x90>)
 800198e:	f7ff fcd7 	bl	8001340 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac>>2);	// pressure
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <lcd_presscharts+0x94>)
 8001994:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <lcd_presscharts+0x98>)
 8001996:	4668      	mov	r0, sp
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	491d      	ldr	r1, [pc, #116]	; (8001a14 <lcd_presscharts+0x9c>)
 80019a0:	f020 ff08 	bl	80227b4 <siprintf>
	setlcdtext("t0.txt", str);
 80019a4:	4669      	mov	r1, sp
 80019a6:	481c      	ldr	r0, [pc, #112]	; (8001a18 <lcd_presscharts+0xa0>)
 80019a8:	f7ff fcca 	bl	8001340 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 80019ac:	481b      	ldr	r0, [pc, #108]	; (8001a1c <lcd_presscharts+0xa4>)
 80019ae:	f7ff fcad 	bl	800130c <writelcdcmd>
	buffi = pressindex;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <lcd_presscharts+0xa8>)
 80019b4:	4f1b      	ldr	r7, [pc, #108]	; (8001a24 <lcd_presscharts+0xac>)
 80019b6:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80019b8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001a30 <lcd_presscharts+0xb8>
 80019bc:	4e1a      	ldr	r6, [pc, #104]	; (8001a28 <lcd_presscharts+0xb0>)
 80019be:	e010      	b.n	80019e2 <lcd_presscharts+0x6a>
 80019c0:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 80019c4:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80019c6:	f020 fef5 	bl	80227b4 <siprintf>
		writelcdcmd(str);
 80019ca:	4668      	mov	r0, sp
 80019cc:	f7ff fc9e 	bl	800130c <writelcdcmd>
		osDelay(15);
 80019d0:	200f      	movs	r0, #15
 80019d2:	f011 f811 	bl	80129f8 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 80019d6:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80019da:	bfc8      	it	gt
 80019dc:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 80019de:	3d01      	subs	r5, #1
 80019e0:	d007      	beq.n	80019f2 <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 80019e2:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80019e4:	4631      	mov	r1, r6
 80019e6:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d0e9      	beq.n	80019c0 <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 80019ec:	b008      	add	sp, #32
 80019ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <lcd_presscharts+0xb4>)
 80019f4:	f7ff fc8a 	bl	800130c <writelcdcmd>
}
 80019f8:	b008      	add	sp, #32
 80019fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019fe:	bf00      	nop
 8001a00:	08026cf8 	.word	0x08026cf8
 8001a04:	08026be0 	.word	0x08026be0
 8001a08:	08026ca8 	.word	0x08026ca8
 8001a0c:	2001bac8 	.word	0x2001bac8
 8001a10:	2001bac4 	.word	0x2001bac4
 8001a14:	08026d04 	.word	0x08026d04
 8001a18:	08026bbc 	.word	0x08026bbc
 8001a1c:	08026cb8 	.word	0x08026cb8
 8001a20:	20001800 	.word	0x20001800
 8001a24:	200017fc 	.word	0x200017fc
 8001a28:	08026cc4 	.word	0x08026cc4
 8001a2c:	08026cdc 	.word	0x08026cdc
 8001a30:	20001804 	.word	0x20001804

08001a34 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
lcd_pressplot() {
 8001a34:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a36:	4d2e      	ldr	r5, [pc, #184]	; (8001af0 <lcd_pressplot+0xbc>)
lcd_pressplot() {
 8001a38:	b08c      	sub	sp, #48	; 0x30
	p = pressure;
 8001a3a:	4c2e      	ldr	r4, [pc, #184]	; (8001af4 <lcd_pressplot+0xc0>)

	p = pressure * 1000 + pf;
 8001a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a40:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8001a42:	6823      	ldr	r3, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a44:	0892      	lsrs	r2, r2, #2
	if (p < 93000) p = 93000;		// 93 HPa
 8001a46:	492c      	ldr	r1, [pc, #176]	; (8001af8 <lcd_pressplot+0xc4>)
	p = pressure;
 8001a48:	9301      	str	r3, [sp, #4]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a4a:	9202      	str	r2, [sp, #8]
	p = pressure * 1000 + pf;
 8001a4c:	9a02      	ldr	r2, [sp, #8]
 8001a4e:	fb00 2303 	mla	r3, r0, r3, r2
 8001a52:	9301      	str	r3, [sp, #4]
	if (p < 93000) p = 93000;		// 93 HPa
 8001a54:	9b01      	ldr	r3, [sp, #4]
 8001a56:	428b      	cmp	r3, r1
 8001a58:	dc01      	bgt.n	8001a5e <lcd_pressplot+0x2a>
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <lcd_pressplot+0xc8>)
 8001a5c:	9301      	str	r3, [sp, #4]
	if (p > 103000) p - 103000;		// 103 HPa
 8001a5e:	9a01      	ldr	r2, [sp, #4]
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <lcd_pressplot+0xcc>)
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dd00      	ble.n	8001a68 <lcd_pressplot+0x34>
 8001a66:	9b01      	ldr	r3, [sp, #4]

	p = p - 93000;
 8001a68:	9901      	ldr	r1, [sp, #4]
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <lcd_pressplot+0xd0>)
	val = p / (10000/240);		// scale for 240 Y steps on chart
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <lcd_pressplot+0xd4>)
	p = p - 93000;
 8001a6e:	440b      	add	r3, r1

	printf("pressure for LCD %d",val);
 8001a70:	4826      	ldr	r0, [pc, #152]	; (8001b0c <lcd_pressplot+0xd8>)
	p = p - 93000;
 8001a72:	9301      	str	r3, [sp, #4]
	val = p / (10000/240);		// scale for 240 Y steps on chart
 8001a74:	9b01      	ldr	r3, [sp, #4]
 8001a76:	fb82 1203 	smull	r1, r2, r2, r3
 8001a7a:	17db      	asrs	r3, r3, #31
 8001a7c:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8001a80:	9303      	str	r3, [sp, #12]
	printf("pressure for LCD %d",val);
 8001a82:	9903      	ldr	r1, [sp, #12]
 8001a84:	f020 fd1e 	bl	80224c4 <iprintf>

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8001a88:	9b03      	ldr	r3, [sp, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	da01      	bge.n	8001a92 <lcd_pressplot+0x5e>
		val = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	9303      	str	r3, [sp, #12]
	if (val >= 240)
 8001a92:	9b03      	ldr	r3, [sp, #12]
 8001a94:	2bef      	cmp	r3, #239	; 0xef
 8001a96:	dd01      	ble.n	8001a9c <lcd_pressplot+0x68>
		val = 239;		// max Y
 8001a98:	23ef      	movs	r3, #239	; 0xef
 8001a9a:	9303      	str	r3, [sp, #12]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001a9c:	491c      	ldr	r1, [pc, #112]	; (8001b10 <lcd_pressplot+0xdc>)
	pressvec[pressindex] = val;
 8001a9e:	9a03      	ldr	r2, [sp, #12]
 8001aa0:	4e1c      	ldr	r6, [pc, #112]	; (8001b14 <lcd_pressplot+0xe0>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001aa2:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8001aa4:	6833      	ldr	r3, [r6, #0]
 8001aa6:	481c      	ldr	r0, [pc, #112]	; (8001b18 <lcd_pressplot+0xe4>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001aa8:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8001aaa:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001aac:	d007      	beq.n	8001abe <lcd_pressplot+0x8a>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8001aae:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8001ab0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8001ab4:	bfa8      	it	ge
 8001ab6:	2300      	movge	r3, #0
 8001ab8:	6033      	str	r3, [r6, #0]
}
 8001aba:	b00c      	add	sp, #48	; 0x30
 8001abc:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	4916      	ldr	r1, [pc, #88]	; (8001b1c <lcd_pressplot+0xe8>)
 8001ac2:	a804      	add	r0, sp, #16
 8001ac4:	f020 fe76 	bl	80227b4 <siprintf>
		writelcdcmd(str);
 8001ac8:	a804      	add	r0, sp, #16
 8001aca:	f7ff fc1f 	bl	800130c <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac>>2);	// pressure
 8001ace:	682b      	ldr	r3, [r5, #0]
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	a804      	add	r0, sp, #16
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	4912      	ldr	r1, [pc, #72]	; (8001b20 <lcd_pressplot+0xec>)
 8001ad8:	f020 fe6c 	bl	80227b4 <siprintf>
		setlcdtext("t0.txt", str);
 8001adc:	a904      	add	r1, sp, #16
 8001ade:	4811      	ldr	r0, [pc, #68]	; (8001b24 <lcd_pressplot+0xf0>)
 8001ae0:	f7ff fc2e 	bl	8001340 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001ae4:	4810      	ldr	r0, [pc, #64]	; (8001b28 <lcd_pressplot+0xf4>)
 8001ae6:	f7ff fc11 	bl	800130c <writelcdcmd>
 8001aea:	6833      	ldr	r3, [r6, #0]
 8001aec:	e7df      	b.n	8001aae <lcd_pressplot+0x7a>
 8001aee:	bf00      	nop
 8001af0:	2001bac8 	.word	0x2001bac8
 8001af4:	2001bac4 	.word	0x2001bac4
 8001af8:	00016b47 	.word	0x00016b47
 8001afc:	00016b48 	.word	0x00016b48
 8001b00:	00019258 	.word	0x00019258
 8001b04:	fffe94b8 	.word	0xfffe94b8
 8001b08:	63e7063f 	.word	0x63e7063f
 8001b0c:	08026d10 	.word	0x08026d10
 8001b10:	200017fc 	.word	0x200017fc
 8001b14:	20001800 	.word	0x20001800
 8001b18:	20001804 	.word	0x20001804
 8001b1c:	08026cc4 	.word	0x08026cc4
 8001b20:	08026d04 	.word	0x08026d04
 8001b24:	08026bbc 	.word	0x08026bbc
 8001b28:	08026bc4 	.word	0x08026bc4

08001b2c <lcd_controls>:


// refresh the entire control page on the lcd
lcd_controls()
{
 8001b2c:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 8001b2e:	2064      	movs	r0, #100	; 0x64
{
 8001b30:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8001b32:	f010 ff61 	bl	80129f8 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <lcd_controls+0x48>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d002      	beq.n	8001b44 <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
	sprintf(str,"Target UDP host: %s\n", udp_target);
	setlcdtext("t3.txt", str);
	}
}
 8001b3e:	b00d      	add	sp, #52	; 0x34
 8001b40:	f85d fb04 	ldr.w	pc, [sp], #4
	setlcdtext("t0.txt", "Sound");
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <lcd_controls+0x4c>)
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <lcd_controls+0x50>)
 8001b48:	f7ff fbfa 	bl	8001340 <setlcdtext>
	setlcdtext("t1.txt", "LEDS");
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <lcd_controls+0x54>)
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <lcd_controls+0x58>)
 8001b50:	f7ff fbf6 	bl	8001340 <setlcdtext>
	setlcdtext("t2.txt", "LCD Brightness");
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <lcd_controls+0x5c>)
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <lcd_controls+0x60>)
 8001b58:	f7ff fbf2 	bl	8001340 <setlcdtext>
	sprintf(str,"Target UDP host: %s\n", udp_target);
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <lcd_controls+0x64>)
 8001b5e:	4668      	mov	r0, sp
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <lcd_controls+0x68>)
 8001b62:	f020 fe27 	bl	80227b4 <siprintf>
	setlcdtext("t3.txt", str);
 8001b66:	4669      	mov	r1, sp
 8001b68:	480b      	ldr	r0, [pc, #44]	; (8001b98 <lcd_controls+0x6c>)
 8001b6a:	f7ff fbe9 	bl	8001340 <setlcdtext>
}
 8001b6e:	b00d      	add	sp, #52	; 0x34
 8001b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b74:	200017fc 	.word	0x200017fc
 8001b78:	08026d24 	.word	0x08026d24
 8001b7c:	08026bbc 	.word	0x08026bbc
 8001b80:	08026d2c 	.word	0x08026d2c
 8001b84:	08026c04 	.word	0x08026c04
 8001b88:	08026d34 	.word	0x08026d34
 8001b8c:	08026c54 	.word	0x08026c54
 8001b90:	2001bb30 	.word	0x2001bb30
 8001b94:	08026d44 	.word	0x08026d44
 8001b98:	08026be0 	.word	0x08026be0

08001b9c <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8001b9c:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8001b9e:	4c15      	ldr	r4, [pc, #84]	; (8001bf4 <lcd_pagechange+0x58>)
 8001ba0:	7823      	ldrb	r3, [r4, #0]
 8001ba2:	4283      	cmp	r3, r0
 8001ba4:	d00b      	beq.n	8001bbe <lcd_pagechange+0x22>
	our_currentpage = newpage;
 8001ba6:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8001ba8:	2805      	cmp	r0, #5
 8001baa:	d81f      	bhi.n	8001bec <lcd_pagechange+0x50>
 8001bac:	e8df f000 	tbb	[pc, r0]
 8001bb0:	19140f03 	.word	0x19140f03
 8001bb4:	070a      	.short	0x070a
		lcd_time();
 8001bb6:	f7ff fc63 	bl	8001480 <lcd_time>
		lcd_date();
 8001bba:	f7ff fcb3 	bl	8001524 <lcd_date>
	return (our_currentpage);
 8001bbe:	7820      	ldrb	r0, [r4, #0]
 8001bc0:	b2c0      	uxtb	r0, r0
}
 8001bc2:	bd10      	pop	{r4, pc}
		lcd_controls();
 8001bc4:	f7ff ffb2 	bl	8001b2c <lcd_controls>
	return (our_currentpage);
 8001bc8:	7820      	ldrb	r0, [r4, #0]
 8001bca:	b2c0      	uxtb	r0, r0
}
 8001bcc:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 8001bce:	f7ff fcc5 	bl	800155c <lcd_showvars>
	return (our_currentpage);
 8001bd2:	7820      	ldrb	r0, [r4, #0]
 8001bd4:	b2c0      	uxtb	r0, r0
}
 8001bd6:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 8001bd8:	f7ff fd9e 	bl	8001718 <lcd_trigcharts>
	return (our_currentpage);
 8001bdc:	7820      	ldrb	r0, [r4, #0]
 8001bde:	b2c0      	uxtb	r0, r0
}
 8001be0:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8001be2:	f7ff fec9 	bl	8001978 <lcd_presscharts>
	return (our_currentpage);
 8001be6:	7820      	ldrb	r0, [r4, #0]
 8001be8:	b2c0      	uxtb	r0, r0
}
 8001bea:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <lcd_pagechange+0x5c>)
 8001bee:	f020 fd05 	bl	80225fc <puts>
		break;
 8001bf2:	e7e4      	b.n	8001bbe <lcd_pagechange+0x22>
 8001bf4:	200017fc 	.word	0x200017fc
 8001bf8:	08026d5c 	.word	0x08026d5c

08001bfc <lcd_event_process>:
int lcd_event_process(void) {
 8001bfc:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001bfe:	4c89      	ldr	r4, [pc, #548]	; (8001e24 <lcd_event_process+0x228>)
int lcd_event_process(void) {
 8001c00:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001c02:	2120      	movs	r1, #32
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff fbcd 	bl	80013a4 <isnexpkt>
 8001c0a:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8001c0c:	9b01      	ldr	r3, [sp, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	dd47      	ble.n	8001ca2 <lcd_event_process+0xa6>
		lcdstatus = eventbuffer[0];
 8001c12:	7821      	ldrb	r1, [r4, #0]
 8001c14:	4b84      	ldr	r3, [pc, #528]	; (8001e28 <lcd_event_process+0x22c>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001c16:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8001c18:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001c1a:	d925      	bls.n	8001c68 <lcd_event_process+0x6c>
			switch (eventbuffer[0]) {
 8001c1c:	2965      	cmp	r1, #101	; 0x65
 8001c1e:	d067      	beq.n	8001cf0 <lcd_event_process+0xf4>
 8001c20:	2966      	cmp	r1, #102	; 0x66
 8001c22:	d046      	beq.n	8001cb2 <lcd_event_process+0xb6>
 8001c24:	2924      	cmp	r1, #36	; 0x24
 8001c26:	d03f      	beq.n	8001ca8 <lcd_event_process+0xac>
				printf("lcd_event_process: unknown response received 0x%x\n",eventbuffer[0]);
 8001c28:	4880      	ldr	r0, [pc, #512]	; (8001e2c <lcd_event_process+0x230>)
 8001c2a:	f020 fc4b 	bl	80224c4 <iprintf>
				i = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001c32:	9b00      	ldr	r3, [sp, #0]
 8001c34:	5ce3      	ldrb	r3, [r4, r3]
 8001c36:	2bff      	cmp	r3, #255	; 0xff
 8001c38:	d00f      	beq.n	8001c5a <lcd_event_process+0x5e>
					printf(" 0x%02x", eventbuffer[i++]);
 8001c3a:	4d7d      	ldr	r5, [pc, #500]	; (8001e30 <lcd_event_process+0x234>)
 8001c3c:	e009      	b.n	8001c52 <lcd_event_process+0x56>
 8001c3e:	9b00      	ldr	r3, [sp, #0]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	5ce1      	ldrb	r1, [r4, r3]
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	f020 fc3d 	bl	80224c4 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001c4a:	9b00      	ldr	r3, [sp, #0]
 8001c4c:	5ce3      	ldrb	r3, [r4, r3]
 8001c4e:	2bff      	cmp	r3, #255	; 0xff
 8001c50:	d003      	beq.n	8001c5a <lcd_event_process+0x5e>
 8001c52:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8001c54:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001c56:	2b1f      	cmp	r3, #31
 8001c58:	d9f1      	bls.n	8001c3e <lcd_event_process+0x42>
				printf("\n");
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f020 fc4a 	bl	80224f4 <putchar>
				return(-1);
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c64:	b003      	add	sp, #12
 8001c66:	bd30      	pop	{r4, r5, pc}
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8001c68:	2901      	cmp	r1, #1
 8001c6a:	d0fb      	beq.n	8001c64 <lcd_event_process+0x68>
				printf("Nextion reported: ");
 8001c6c:	4871      	ldr	r0, [pc, #452]	; (8001e34 <lcd_event_process+0x238>)
 8001c6e:	f020 fc29 	bl	80224c4 <iprintf>
				switch (eventbuffer[0]) {
 8001c72:	7821      	ldrb	r1, [r4, #0]
 8001c74:	1e4b      	subs	r3, r1, #1
 8001c76:	2b23      	cmp	r3, #35	; 0x23
 8001c78:	d845      	bhi.n	8001d06 <lcd_event_process+0x10a>
 8001c7a:	e8df f003 	tbb	[pc, r3]
 8001c7e:	4481      	.short	0x4481
 8001c80:	44444444 	.word	0x44444444
 8001c84:	44444444 	.word	0x44444444
 8001c88:	44444444 	.word	0x44444444
 8001c8c:	79444444 	.word	0x79444444
 8001c90:	44444444 	.word	0x44444444
 8001c94:	71444444 	.word	0x71444444
 8001c98:	65446b44 	.word	0x65446b44
 8001c9c:	44445f44 	.word	0x44445f44
 8001ca0:	5359      	.short	0x5359
		return (result);		// 0 = nothing found, -1 = timeout
 8001ca2:	9801      	ldr	r0, [sp, #4]
}
 8001ca4:	b003      	add	sp, #12
 8001ca6:	bd30      	pop	{r4, r5, pc}
				printf("Serial Buffer Overflow!\n");
 8001ca8:	4863      	ldr	r0, [pc, #396]	; (8001e38 <lcd_event_process+0x23c>)
 8001caa:	f020 fca7 	bl	80225fc <puts>
				return(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	e7d8      	b.n	8001c64 <lcd_event_process+0x68>
				setlcddim(lcdbright);
 8001cb2:	4962      	ldr	r1, [pc, #392]	; (8001e3c <lcd_event_process+0x240>)
	dimtimer = DIMTIME;
 8001cb4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <lcd_event_process+0x244>)
				setlcddim(lcdbright);
 8001cba:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 8001cbc:	4861      	ldr	r0, [pc, #388]	; (8001e44 <lcd_event_process+0x248>)
 8001cbe:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 8001cc0:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8001cc2:	bf28      	it	cs
 8001cc4:	2163      	movcs	r1, #99	; 0x63
 8001cc6:	f7ff fb4f 	bl	8001368 <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8001cca:	7860      	ldrb	r0, [r4, #1]
 8001ccc:	f7ff ff66 	bl	8001b9c <lcd_pagechange>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	db04      	blt.n	8001cde <lcd_event_process+0xe2>
 8001cd4:	7860      	ldrb	r0, [r4, #1]
 8001cd6:	f7ff ff61 	bl	8001b9c <lcd_pagechange>
 8001cda:	2805      	cmp	r0, #5
 8001cdc:	dd19      	ble.n	8001d12 <lcd_event_process+0x116>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001cde:	7860      	ldrb	r0, [r4, #1]
 8001ce0:	f7ff ff5c 	bl	8001b9c <lcd_pagechange>
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	4858      	ldr	r0, [pc, #352]	; (8001e48 <lcd_event_process+0x24c>)
 8001ce8:	f020 fbec 	bl	80224c4 <iprintf>
		return(0);
 8001cec:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001cee:	e7b9      	b.n	8001c64 <lcd_event_process+0x68>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n",eventbuffer[1],eventbuffer[2],eventbuffer[3] );
 8001cf0:	78e3      	ldrb	r3, [r4, #3]
 8001cf2:	78a2      	ldrb	r2, [r4, #2]
 8001cf4:	7861      	ldrb	r1, [r4, #1]
 8001cf6:	4855      	ldr	r0, [pc, #340]	; (8001e4c <lcd_event_process+0x250>)
 8001cf8:	f020 fbe4 	bl	80224c4 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8001cfc:	7863      	ldrb	r3, [r4, #1]
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d043      	beq.n	8001d8a <lcd_event_process+0x18e>
		return(0);
 8001d02:	2000      	movs	r0, #0
 8001d04:	e7ae      	b.n	8001c64 <lcd_event_process+0x68>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8001d06:	4852      	ldr	r0, [pc, #328]	; (8001e50 <lcd_event_process+0x254>)
 8001d08:	f020 fbdc 	bl	80224c4 <iprintf>
				return(-1);		// some kindof error
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d10:	e7a8      	b.n	8001c64 <lcd_event_process+0x68>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001d12:	7860      	ldrb	r0, [r4, #1]
 8001d14:	f7ff ff42 	bl	8001b9c <lcd_pagechange>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a4e      	ldr	r2, [pc, #312]	; (8001e54 <lcd_event_process+0x258>)
		return(0);
 8001d1c:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	7013      	strb	r3, [r2, #0]
 8001d22:	e79f      	b.n	8001c64 <lcd_event_process+0x68>
					printf("Ser Buffer Overflow\n");
 8001d24:	484c      	ldr	r0, [pc, #304]	; (8001e58 <lcd_event_process+0x25c>)
 8001d26:	f020 fc69 	bl	80225fc <puts>
				return(-1);		// some kindof error
 8001d2a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d2e:	e799      	b.n	8001c64 <lcd_event_process+0x68>
					printf("Variable name too long\n");
 8001d30:	484a      	ldr	r0, [pc, #296]	; (8001e5c <lcd_event_process+0x260>)
 8001d32:	f020 fc63 	bl	80225fc <puts>
				return(-1);		// some kindof error
 8001d36:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d3a:	e793      	b.n	8001c64 <lcd_event_process+0x68>
					printf("Invalid Escape Char\n");
 8001d3c:	4848      	ldr	r0, [pc, #288]	; (8001e60 <lcd_event_process+0x264>)
 8001d3e:	f020 fc5d 	bl	80225fc <puts>
				return(-1);		// some kindof error
 8001d42:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d46:	e78d      	b.n	8001c64 <lcd_event_process+0x68>
					printf("Invalid number of parameters\n");
 8001d48:	4846      	ldr	r0, [pc, #280]	; (8001e64 <lcd_event_process+0x268>)
 8001d4a:	f020 fc57 	bl	80225fc <puts>
				return(-1);		// some kindof error
 8001d4e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d52:	e787      	b.n	8001c64 <lcd_event_process+0x68>
					printf("Attribute assignment failed\n");
 8001d54:	4844      	ldr	r0, [pc, #272]	; (8001e68 <lcd_event_process+0x26c>)
 8001d56:	f020 fc51 	bl	80225fc <puts>
				return(-1);		// some kindof error
 8001d5a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d5e:	e781      	b.n	8001c64 <lcd_event_process+0x68>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 8001d60:	4842      	ldr	r0, [pc, #264]	; (8001e6c <lcd_event_process+0x270>)
 8001d62:	f020 fc4b 	bl	80225fc <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8001d66:	f000 f951 	bl	800200c <getlcdpage>
				return(-1);		// some kindof error
 8001d6a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d6e:	e779      	b.n	8001c64 <lcd_event_process+0x68>
					printf("Invalid Waveform ID\n");
 8001d70:	483f      	ldr	r0, [pc, #252]	; (8001e70 <lcd_event_process+0x274>)
 8001d72:	f020 fc43 	bl	80225fc <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8001d76:	f000 f949 	bl	800200c <getlcdpage>
				return(-1);		// some kindof error
 8001d7a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d7e:	e771      	b.n	8001c64 <lcd_event_process+0x68>
					printf("Successful execution\n");
 8001d80:	483c      	ldr	r0, [pc, #240]	; (8001e74 <lcd_event_process+0x278>)
 8001d82:	f020 fc3b 	bl	80225fc <puts>
					return(0);
 8001d86:	2000      	movs	r0, #0
 8001d88:	e76c      	b.n	8001c64 <lcd_event_process+0x68>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8001d8a:	78a3      	ldrb	r3, [r4, #2]
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d012      	beq.n	8001db6 <lcd_event_process+0x1ba>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d039      	beq.n	8001e08 <lcd_event_process+0x20c>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d026      	beq.n	8001de6 <lcd_event_process+0x1ea>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d1b2      	bne.n	8001d02 <lcd_event_process+0x106>
					if (eventbuffer[3] == 1) 		// sound on
 8001d9c:	78e3      	ldrb	r3, [r4, #3]
 8001d9e:	4a36      	ldr	r2, [pc, #216]	; (8001e78 <lcd_event_process+0x27c>)
 8001da0:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 8001da4:	4835      	ldr	r0, [pc, #212]	; (8001e7c <lcd_event_process+0x280>)
					if (eventbuffer[3] == 1) 		// sound on
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8001dae:	f020 fc25 	bl	80225fc <puts>
		return(0);
 8001db2:	2000      	movs	r0, #0
 8001db4:	e756      	b.n	8001c64 <lcd_event_process+0x68>
					lcdbright = eventbuffer[3];
 8001db6:	78e2      	ldrb	r2, [r4, #3]
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <lcd_event_process+0x240>)
 8001dba:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2a0d      	cmp	r2, #13
 8001dc0:	dc01      	bgt.n	8001dc6 <lcd_event_process+0x1ca>
						lcdbright = 14;		// prevent black
 8001dc2:	220e      	movs	r2, #14
 8001dc4:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8001dc6:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 8001dc8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <lcd_event_process+0x244>)
	setlcdbin("dim", level);
 8001dce:	2963      	cmp	r1, #99	; 0x63
 8001dd0:	481c      	ldr	r0, [pc, #112]	; (8001e44 <lcd_event_process+0x248>)
	dimtimer = DIMTIME;
 8001dd2:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8001dd4:	bf28      	it	cs
 8001dd6:	2163      	movcs	r1, #99	; 0x63
 8001dd8:	f7ff fac6 	bl	8001368 <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8001ddc:	7863      	ldrb	r3, [r4, #1]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d18f      	bne.n	8001d02 <lcd_event_process+0x106>
 8001de2:	78a3      	ldrb	r3, [r4, #2]
 8001de4:	e7d4      	b.n	8001d90 <lcd_event_process+0x194>
					if (eventbuffer[3] == 1) 		// sound on
 8001de6:	78e3      	ldrb	r3, [r4, #3]
 8001de8:	4a25      	ldr	r2, [pc, #148]	; (8001e80 <lcd_event_process+0x284>)
 8001dea:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8001dee:	4825      	ldr	r0, [pc, #148]	; (8001e84 <lcd_event_process+0x288>)
					if (eventbuffer[3] == 1) 		// sound on
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8001df8:	f020 fc00 	bl	80225fc <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8001dfc:	7863      	ldrb	r3, [r4, #1]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	f47f af7f 	bne.w	8001d02 <lcd_event_process+0x106>
 8001e04:	78a3      	ldrb	r3, [r4, #2]
 8001e06:	e7c7      	b.n	8001d98 <lcd_event_process+0x19c>
					printf("Reboot touch\n");
 8001e08:	481f      	ldr	r0, [pc, #124]	; (8001e88 <lcd_event_process+0x28c>)
 8001e0a:	f020 fbf7 	bl	80225fc <puts>
					osDelay(100);
 8001e0e:	2064      	movs	r0, #100	; 0x64
 8001e10:	f010 fdf2 	bl	80129f8 <osDelay>
					rebootme();
 8001e14:	f000 fdce 	bl	80029b4 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8001e18:	7863      	ldrb	r3, [r4, #1]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	f47f af71 	bne.w	8001d02 <lcd_event_process+0x106>
 8001e20:	78a3      	ldrb	r3, [r4, #2]
 8001e22:	e7b7      	b.n	8001d94 <lcd_event_process+0x198>
 8001e24:	20001550 	.word	0x20001550
 8001e28:	20001614 	.word	0x20001614
 8001e2c:	08026ef8 	.word	0x08026ef8
 8001e30:	08026f2c 	.word	0x08026f2c
 8001e34:	08026d70 	.word	0x08026d70
 8001e38:	08026e58 	.word	0x08026e58
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	20000004 	.word	0x20000004
 8001e44:	08026ba8 	.word	0x08026ba8
 8001e48:	08026ec8 	.word	0x08026ec8
 8001e4c:	08026e70 	.word	0x08026e70
 8001e50:	08026e40 	.word	0x08026e40
 8001e54:	20001584 	.word	0x20001584
 8001e58:	08026db0 	.word	0x08026db0
 8001e5c:	08026d98 	.word	0x08026d98
 8001e60:	08026de4 	.word	0x08026de4
 8001e64:	08026dc4 	.word	0x08026dc4
 8001e68:	08026df8 	.word	0x08026df8
 8001e6c:	08026d84 	.word	0x08026d84
 8001e70:	08026e14 	.word	0x08026e14
 8001e74:	08026e28 	.word	0x08026e28
 8001e78:	20000266 	.word	0x20000266
 8001e7c:	08026ebc 	.word	0x08026ebc
 8001e80:	2000026c 	.word	0x2000026c
 8001e84:	08026eb0 	.word	0x08026eb0
 8001e88:	08026ea0 	.word	0x08026ea0

08001e8c <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8001e8c:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 8001e8e:	4d3e      	ldr	r5, [pc, #248]	; (8001f88 <processnex+0xfc>)
void processnex() {		// process Nextion - called at regular intervals
 8001e90:	b082      	sub	sp, #8
	switch (lcduart_error) {
 8001e92:	682b      	ldr	r3, [r5, #0]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d039      	beq.n	8001f0c <processnex+0x80>
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d01e      	beq.n	8001eda <processnex+0x4e>
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d018      	beq.n	8001ed2 <processnex+0x46>
		break;
 8001ea0:	4c3a      	ldr	r4, [pc, #232]	; (8001f8c <processnex+0x100>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d01f      	beq.n	8001eec <processnex+0x60>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d05d      	beq.n	8001f6e <processnex+0xe2>
	if (lcd_initflag == 3) {	// uart only
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d047      	beq.n	8001f48 <processnex+0xbc>
	if (dimtimer > 0) {
 8001eb8:	4c35      	ldr	r4, [pc, #212]	; (8001f90 <processnex+0x104>)
	lcd_rxdma();		// get any new characters received
 8001eba:	f7ff f9d7 	bl	800126c <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8001ebe:	f7ff fe9d 	bl	8001bfc <lcd_event_process>
 8001ec2:	9001      	str	r0, [sp, #4]
	if (dimtimer > 0) {
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	b113      	cbz	r3, 8001ece <processnex+0x42>
		dimtimer--;
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	6023      	str	r3, [r4, #0]
		if (dimtimer == 0) {
 8001ecc:	b32b      	cbz	r3, 8001f1a <processnex+0x8e>
}
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 8001ed2:	4830      	ldr	r0, [pc, #192]	; (8001f94 <processnex+0x108>)
 8001ed4:	f020 fb92 	bl	80225fc <puts>
 8001ed8:	e7e2      	b.n	8001ea0 <processnex+0x14>
		printf("LCD UART OVERRUN\n");
 8001eda:	4c2c      	ldr	r4, [pc, #176]	; (8001f8c <processnex+0x100>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8001edc:	2600      	movs	r6, #0
		printf("LCD UART OVERRUN\n");
 8001ede:	482e      	ldr	r0, [pc, #184]	; (8001f98 <processnex+0x10c>)
 8001ee0:	f020 fb8c 	bl	80225fc <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 8001ee4:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d1df      	bne.n	8001eac <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 8001eec:	482b      	ldr	r0, [pc, #172]	; (8001f9c <processnex+0x110>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8001eee:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8001ef0:	f020 fb84 	bl	80225fc <puts>
		lcd_uart_init(9600);	// switch us to 9600
 8001ef4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001ef8:	f7ff f8b0 	bl	800105c <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 8001efc:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001f00:	f7ff f8f4 	bl	80010ec <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8001f04:	2302      	movs	r3, #2
 8001f06:	6023      	str	r3, [r4, #0]
}
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART FRAMING\n");
 8001f0c:	4824      	ldr	r0, [pc, #144]	; (8001fa0 <processnex+0x114>)
 8001f0e:	f020 fb75 	bl	80225fc <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 8001f12:	4c1e      	ldr	r4, [pc, #120]	; (8001f8c <processnex+0x100>)
 8001f14:	2301      	movs	r3, #1
 8001f16:	6023      	str	r3, [r4, #0]
		break;
 8001f18:	e7c3      	b.n	8001ea2 <processnex+0x16>
			printf("Auto Dimming now\n");
 8001f1a:	4822      	ldr	r0, [pc, #136]	; (8001fa4 <processnex+0x118>)
 8001f1c:	f020 fb6e 	bl	80225fc <puts>
			i = lcdbright - 40;
 8001f20:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <processnex+0x11c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3b28      	subs	r3, #40	; 0x28
			if (i < 14)
 8001f26:	2b0d      	cmp	r3, #13
 8001f28:	dd29      	ble.n	8001f7e <processnex+0xf2>
 8001f2a:	2b63      	cmp	r3, #99	; 0x63
			i = lcdbright - 40;
 8001f2c:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <processnex+0x120>)
 8001f2e:	4619      	mov	r1, r3
 8001f30:	bf28      	it	cs
 8001f32:	2163      	movcs	r1, #99	; 0x63
 8001f34:	6013      	str	r3, [r2, #0]
	dimtimer = DIMTIME;
 8001f36:	f64e 2360 	movw	r3, #60000	; 0xea60
	setlcdbin("dim", level);
 8001f3a:	481d      	ldr	r0, [pc, #116]	; (8001fb0 <processnex+0x124>)
	dimtimer = DIMTIME;
 8001f3c:	6023      	str	r3, [r4, #0]
}
 8001f3e:	b002      	add	sp, #8
 8001f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setlcdbin("dim", level);
 8001f44:	f7ff ba10 	b.w	8001368 <setlcdbin>
		printf("processnex: calling lcd_uart_init(230400)\n");
 8001f48:	481a      	ldr	r0, [pc, #104]	; (8001fb4 <processnex+0x128>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8001f4a:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8001f4c:	f020 fb56 	bl	80225fc <puts>
		lcd_uart_init(230400);
 8001f50:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8001f54:	f7ff f882 	bl	800105c <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 8001f58:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8001f5c:	f7ff f8c6 	bl	80010ec <lcd_init>
		osDelay(100);
 8001f60:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 8001f62:	6026      	str	r6, [r4, #0]
}
 8001f64:	b002      	add	sp, #8
 8001f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 8001f6a:	f010 bd45 	b.w	80129f8 <osDelay>
		osDelay(500);
 8001f6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f72:	f010 fd41 	bl	80129f8 <osDelay>
		lcd_initflag = 3;
 8001f76:	2303      	movs	r3, #3
 8001f78:	6023      	str	r3, [r4, #0]
}
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bd70      	pop	{r4, r5, r6, pc}
				i = 14;	// prevent black
 8001f7e:	230e      	movs	r3, #14
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <processnex+0x120>)
 8001f82:	4619      	mov	r1, r3
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e7d6      	b.n	8001f36 <processnex+0xaa>
 8001f88:	20001618 	.word	0x20001618
 8001f8c:	20001588 	.word	0x20001588
 8001f90:	20000004 	.word	0x20000004
 8001f94:	08026f34 	.word	0x08026f34
 8001f98:	08026f58 	.word	0x08026f58
 8001f9c:	08026f6c 	.word	0x08026f6c
 8001fa0:	08026f44 	.word	0x08026f44
 8001fa4:	08026fc0 	.word	0x08026fc0
 8001fa8:	2000000c 	.word	0x2000000c
 8001fac:	20001574 	.word	0x20001574
 8001fb0:	08026ba8 	.word	0x08026ba8
 8001fb4:	08026f94 	.word	0x08026f94

08001fb8 <lcd_getlack>:
uint8_t lcd_getlack() {
 8001fb8:	b570      	push	{r4, r5, r6, lr}
	while (lcdstatus == 0xff) {
 8001fba:	4d11      	ldr	r5, [pc, #68]	; (8002000 <lcd_getlack+0x48>)
	processnex();
 8001fbc:	f7ff ff66 	bl	8001e8c <processnex>
	while (lcdstatus == 0xff) {
 8001fc0:	782b      	ldrb	r3, [r5, #0]
 8001fc2:	2bff      	cmp	r3, #255	; 0xff
 8001fc4:	d118      	bne.n	8001ff8 <lcd_getlack+0x40>
 8001fc6:	b2de      	uxtb	r6, r3
 8001fc8:	4c0e      	ldr	r4, [pc, #56]	; (8002004 <lcd_getlack+0x4c>)
 8001fca:	e007      	b.n	8001fdc <lcd_getlack+0x24>
		trys++;
 8001fcc:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8001fce:	f010 fd13 	bl	80129f8 <osDelay>
		processnex();
 8001fd2:	f7ff ff5b 	bl	8001e8c <processnex>
	while (lcdstatus == 0xff) {
 8001fd6:	782b      	ldrb	r3, [r5, #0]
 8001fd8:	2bff      	cmp	r3, #255	; 0xff
 8001fda:	d10d      	bne.n	8001ff8 <lcd_getlack+0x40>
		if (trys > 1000) {
 8001fdc:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8001fde:	2001      	movs	r0, #1
		if (trys > 1000) {
 8001fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8001fe4:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8001fe8:	d9f0      	bls.n	8001fcc <lcd_getlack+0x14>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <lcd_getlack+0x50>)
 8001fec:	f020 fa6a 	bl	80224c4 <iprintf>
			trys = 0;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4630      	mov	r0, r6
			trys = 0;
 8001ff4:	6023      	str	r3, [r4, #0]
}
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
	return (lcdstatus);
 8001ff8:	782e      	ldrb	r6, [r5, #0]
 8001ffa:	b2f6      	uxtb	r6, r6
}
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
 8002000:	20001614 	.word	0x20001614
 8002004:	20001bd4 	.word	0x20001bd4
 8002008:	08026fd4 	.word	0x08026fd4

0800200c <getlcdpage>:
int getlcdpage(void) {
 800200c:	b570      	push	{r4, r5, r6, lr}
	printf("getlcdpage:\n");
 800200e:	481e      	ldr	r0, [pc, #120]	; (8002088 <getlcdpage+0x7c>)
int getlcdpage(void) {
 8002010:	b082      	sub	sp, #8
	printf("getlcdpage:\n");
 8002012:	f020 faf3 	bl	80225fc <puts>
	lcd_txblocked = 1;		// stop others sending to the LCD
 8002016:	4d1d      	ldr	r5, [pc, #116]	; (800208c <getlcdpage+0x80>)
 8002018:	2301      	movs	r3, #1
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800201a:	2096      	movs	r0, #150	; 0x96
	lcd_txblocked = 1;		// stop others sending to the LCD
 800201c:	602b      	str	r3, [r5, #0]
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800201e:	f010 fceb 	bl	80129f8 <osDelay>
	lcdstatus = 0xff;
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <getlcdpage+0x84>)
 8002024:	22ff      	movs	r2, #255	; 0xff
	result = intwritelcdcmd("sendme");
 8002026:	481b      	ldr	r0, [pc, #108]	; (8002094 <getlcdpage+0x88>)
	lcdstatus = 0xff;
 8002028:	701a      	strb	r2, [r3, #0]
	result = intwritelcdcmd("sendme");
 800202a:	f7ff f95d 	bl	80012e8 <intwritelcdcmd>
 800202e:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 8002030:	9b01      	ldr	r3, [sp, #4]
 8002032:	3301      	adds	r3, #1
 8002034:	d023      	beq.n	800207e <getlcdpage+0x72>
	result = lcd_getlack();		// wait for a response
 8002036:	f7ff ffbf 	bl	8001fb8 <lcd_getlack>
 800203a:	9001      	str	r0, [sp, #4]
	while (result == 0xff ) {	// try again
 800203c:	9b01      	ldr	r3, [sp, #4]
 800203e:	2bff      	cmp	r3, #255	; 0xff
 8002040:	d118      	bne.n	8002074 <getlcdpage+0x68>
		result = intwritelcdcmd("sendme");
 8002042:	4c14      	ldr	r4, [pc, #80]	; (8002094 <getlcdpage+0x88>)
			printf("getlcdpage2: Cmd failed\n\r");
 8002044:	4e14      	ldr	r6, [pc, #80]	; (8002098 <getlcdpage+0x8c>)
 8002046:	e005      	b.n	8002054 <getlcdpage+0x48>
		result = lcd_getlack();		// wait for a response
 8002048:	f7ff ffb6 	bl	8001fb8 <lcd_getlack>
 800204c:	9001      	str	r0, [sp, #4]
	while (result == 0xff ) {	// try again
 800204e:	9b01      	ldr	r3, [sp, #4]
 8002050:	2bff      	cmp	r3, #255	; 0xff
 8002052:	d10f      	bne.n	8002074 <getlcdpage+0x68>
		result = intwritelcdcmd("sendme");
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff f947 	bl	80012e8 <intwritelcdcmd>
 800205a:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 800205c:	9b01      	ldr	r3, [sp, #4]
 800205e:	3301      	adds	r3, #1
 8002060:	d1f2      	bne.n	8002048 <getlcdpage+0x3c>
			printf("getlcdpage2: Cmd failed\n\r");
 8002062:	4630      	mov	r0, r6
 8002064:	f020 fa2e 	bl	80224c4 <iprintf>
		result = lcd_getlack();		// wait for a response
 8002068:	f7ff ffa6 	bl	8001fb8 <lcd_getlack>
 800206c:	9001      	str	r0, [sp, #4]
	while (result == 0xff ) {	// try again
 800206e:	9b01      	ldr	r3, [sp, #4]
 8002070:	2bff      	cmp	r3, #255	; 0xff
 8002072:	d0ef      	beq.n	8002054 <getlcdpage+0x48>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8002074:	2300      	movs	r3, #0
 8002076:	602b      	str	r3, [r5, #0]
	return (result);
 8002078:	9801      	ldr	r0, [sp, #4]
}
 800207a:	b002      	add	sp, #8
 800207c:	bd70      	pop	{r4, r5, r6, pc}
		printf("getlcdpage: Cmd failed\n\r");
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <getlcdpage+0x90>)
 8002080:	f020 fa20 	bl	80224c4 <iprintf>
 8002084:	e7d7      	b.n	8002036 <getlcdpage+0x2a>
 8002086:	bf00      	nop
 8002088:	08027004 	.word	0x08027004
 800208c:	2000158c 	.word	0x2000158c
 8002090:	20001614 	.word	0x20001614
 8002094:	08027010 	.word	0x08027010
 8002098:	08027034 	.word	0x08027034
 800209c:	08027018 	.word	0x08027018

080020a0 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 80020a0:	4801      	ldr	r0, [pc, #4]	; (80020a8 <netif_status_callbk_fn+0x8>)
 80020a2:	f020 baab 	b.w	80225fc <puts>
 80020a6:	bf00      	nop
 80020a8:	08027064 	.word	0x08027064

080020ac <Callback01>:

/* Callback01 function */
void Callback01(void const * argument)
{
  /* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 80020ac:	4801      	ldr	r0, [pc, #4]	; (80020b4 <Callback01+0x8>)
 80020ae:	f020 baa5 	b.w	80225fc <puts>
 80020b2:	bf00      	nop
 80020b4:	0802707c 	.word	0x0802707c

080020b8 <StarLPTask>:
	char str[80] = { "empty" };
 80020b8:	4b57      	ldr	r3, [pc, #348]	; (8002218 <StarLPTask+0x160>)
 80020ba:	224a      	movs	r2, #74	; 0x4a
{
 80020bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[80] = { "empty" };
 80020c0:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 80020c4:	b09f      	sub	sp, #124	; 0x7c
 80020c6:	2400      	movs	r4, #0
	lcduart_error = HAL_UART_ERROR_NONE;
 80020c8:	4d54      	ldr	r5, [pc, #336]	; (800221c <StarLPTask+0x164>)
	statuspkt.adcudpover = 0;		// debug use count overruns
 80020ca:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002238 <StarLPTask+0x180>
	char str[80] = { "empty" };
 80020ce:	900a      	str	r0, [sp, #40]	; 0x28
 80020d0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 80020d4:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80020d8:	4621      	mov	r1, r4
{
 80020da:	9407      	str	r4, [sp, #28]
	char str[80] = { "empty" };
 80020dc:	f01f fa80 	bl	80215e0 <memset>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 80020e0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	statuspkt.adcudpover = 0;		// debug use count overruns
 80020e4:	f8c8 4078 	str.w	r4, [r8, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80020e8:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80020ec:	f8c8 4080 	str.w	r4, [r8, #128]	; 0x80
	lcduart_error = HAL_UART_ERROR_NONE;
 80020f0:	602c      	str	r4, [r5, #0]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 80020f2:	f7fe fffb 	bl	80010ec <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 80020f6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	while (main_init_done == 0) { // wait from main to complete the init {
 80020fa:	f8df a140 	ldr.w	sl, [pc, #320]	; 800223c <StarLPTask+0x184>
	lcd_uart_init(9600); // then change our baud to match
 80020fe:	f7fe ffad 	bl	800105c <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 8002102:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002106:	f7fe fff1 	bl	80010ec <lcd_init>
	osDelay(600);
 800210a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800210e:	f010 fc73 	bl	80129f8 <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 8002112:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002116:	f7fe ffe9 	bl	80010ec <lcd_init>
	osDelay(600);
 800211a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800211e:	f010 fc6b 	bl	80129f8 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 8002122:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002126:	f7fe ff99 	bl	800105c <lcd_uart_init>
	osDelay(600);
 800212a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800212e:	f010 fc63 	bl	80129f8 <osDelay>
	writelcdcmd("page 0");
 8002132:	483b      	ldr	r0, [pc, #236]	; (8002220 <StarLPTask+0x168>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002134:	602c      	str	r4, [r5, #0]
	writelcdcmd("page 0");
 8002136:	f7ff f8e9 	bl	800130c <writelcdcmd>
	printf("LCD page 0\n");
 800213a:	483a      	ldr	r0, [pc, #232]	; (8002224 <StarLPTask+0x16c>)
 800213c:	f020 fa5e 	bl	80225fc <puts>
	osDelay(600);
 8002140:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002144:	f010 fc58 	bl	80129f8 <osDelay>
	writelcdcmd("cls BLACK");
 8002148:	4837      	ldr	r0, [pc, #220]	; (8002228 <StarLPTask+0x170>)
 800214a:	f7ff f8df 	bl	800130c <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d, Build:%d\"", MAJORVERSION, MINORVERSION, BUILD);
 800214e:	f242 731e 	movw	r3, #10014	; 0x271e
 8002152:	4622      	mov	r2, r4
 8002154:	4935      	ldr	r1, [pc, #212]	; (800222c <StarLPTask+0x174>)
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	a80a      	add	r0, sp, #40	; 0x28
 800215a:	230c      	movs	r3, #12
 800215c:	f020 fb2a 	bl	80227b4 <siprintf>
	writelcdcmd(str);
 8002160:	a80a      	add	r0, sp, #40	; 0x28
	lcduart_error = HAL_UART_ERROR_NONE;
 8002162:	602c      	str	r4, [r5, #0]
	writelcdcmd(str);
 8002164:	f7ff f8d2 	bl	800130c <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002168:	f8da 7000 	ldr.w	r7, [sl]
	lcduart_error = HAL_UART_ERROR_NONE;
 800216c:	602c      	str	r4, [r5, #0]
	while (main_init_done == 0) { // wait from main to complete the init {
 800216e:	2f00      	cmp	r7, #0
 8002170:	d173      	bne.n	800225a <StarLPTask+0x1a2>
 8002172:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8002240 <StarLPTask+0x188>
 8002176:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8002244 <StarLPTask+0x18c>
 800217a:	e01a      	b.n	80021b2 <StarLPTask+0xfa>
		switch (i & 3) {
 800217c:	f1be 0f01 	cmp.w	lr, #1
 8002180:	f000 8190 	beq.w	80024a4 <StarLPTask+0x3ec>
			writelcdcmd(strcat(str, ".\""));
 8002184:	f8b9 2000 	ldrh.w	r2, [r9]
 8002188:	f899 3002 	ldrb.w	r3, [r9, #2]
 800218c:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
 8002190:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8002194:	f7ff f8ba 	bl	800130c <writelcdcmd>
		osDelay(250);
 8002198:	20fa      	movs	r0, #250	; 0xfa
		i++;
 800219a:	3701      	adds	r7, #1
		osDelay(250);
 800219c:	f010 fc2c 	bl	80129f8 <osDelay>
		if (!(netif_is_link_up(&gnetif))) {
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <StarLPTask+0x178>)
 80021a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a6:	075b      	lsls	r3, r3, #29
 80021a8:	d550      	bpl.n	800224c <StarLPTask+0x194>
	while (main_init_done == 0) { // wait from main to complete the init {
 80021aa:	f8da 3000 	ldr.w	r3, [sl]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d153      	bne.n	800225a <StarLPTask+0x1a2>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80021b2:	f8df c094 	ldr.w	ip, [pc, #148]	; 8002248 <StarLPTask+0x190>
 80021b6:	ac0a      	add	r4, sp, #40	; 0x28
		switch (i & 3) {
 80021b8:	f007 0e03 	and.w	lr, r7, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80021bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80021c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80021c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
		switch (i & 3) {
 80021cc:	f1be 0f02 	cmp.w	lr, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80021d0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80021d4:	c407      	stmia	r4!, {r0, r1, r2}
 80021d6:	f824 3b02 	strh.w	r3, [r4], #2
 80021da:	f884 c000 	strb.w	ip, [r4]
		switch (i & 3) {
 80021de:	d00e      	beq.n	80021fe <StarLPTask+0x146>
 80021e0:	f1be 0f03 	cmp.w	lr, #3
			writelcdcmd(strcat(str, ".\""));
 80021e4:	a80a      	add	r0, sp, #40	; 0x28
		switch (i & 3) {
 80021e6:	d1c9      	bne.n	800217c <StarLPTask+0xc4>
			writelcdcmd(strcat(str, "....\""));
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <StarLPTask+0x17c>)
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	889b      	ldrh	r3, [r3, #4]
 80021ee:	f8cd 0056 	str.w	r0, [sp, #86]	; 0x56
 80021f2:	a80a      	add	r0, sp, #40	; 0x28
 80021f4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 80021f8:	f7ff f888 	bl	800130c <writelcdcmd>
			break;
 80021fc:	e7cc      	b.n	8002198 <StarLPTask+0xe0>
			writelcdcmd(strcat(str, "...\""));
 80021fe:	f8db 0000 	ldr.w	r0, [fp]
 8002202:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8002206:	f8cd 0056 	str.w	r0, [sp, #86]	; 0x56
 800220a:	a80a      	add	r0, sp, #40	; 0x28
 800220c:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 8002210:	f7ff f87c 	bl	800130c <writelcdcmd>
			break;
 8002214:	e7c0      	b.n	8002198 <StarLPTask+0xe0>
 8002216:	bf00      	nop
 8002218:	08026640 	.word	0x08026640
 800221c:	20001618 	.word	0x20001618
 8002220:	0802708c 	.word	0x0802708c
 8002224:	08027088 	.word	0x08027088
 8002228:	08027094 	.word	0x08027094
 800222c:	080270a0 	.word	0x080270a0
 8002230:	2001bff0 	.word	0x2001bff0
 8002234:	0802716c 	.word	0x0802716c
 8002238:	2001ad7c 	.word	0x2001ad7c
 800223c:	20001c2c 	.word	0x20001c2c
 8002240:	0802715c 	.word	0x0802715c
 8002244:	08027164 	.word	0x08027164
 8002248:	0802712c 	.word	0x0802712c
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 800224c:	48a6      	ldr	r0, [pc, #664]	; (80024e8 <StarLPTask+0x430>)
 800224e:	f7ff f85d 	bl	800130c <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002252:	f8da 3000 	ldr.w	r3, [sl]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0ab      	beq.n	80021b2 <StarLPTask+0xfa>
	lcduart_error = HAL_UART_ERROR_NONE;
 800225a:	2400      	movs	r4, #0
	writelcdcmd("ref 0");		// refresh screen
 800225c:	48a3      	ldr	r0, [pc, #652]	; (80024ec <StarLPTask+0x434>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800225e:	f8df 934c 	ldr.w	r9, [pc, #844]	; 80025ac <StarLPTask+0x4f4>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002262:	602c      	str	r4, [r5, #0]
	writelcdcmd("ref 0");		// refresh screen
 8002264:	f7ff f852 	bl	800130c <writelcdcmd>
	writelcdcmd("page 0");
 8002268:	48a1      	ldr	r0, [pc, #644]	; (80024f0 <StarLPTask+0x438>)
	uint16_t onesectimer = 0;
 800226a:	4627      	mov	r7, r4
	lcduart_error = HAL_UART_ERROR_NONE;
 800226c:	602c      	str	r4, [r5, #0]
	uint16_t tenmstimer = 0;
 800226e:	4625      	mov	r5, r4
	int last3min = 0;
 8002270:	9409      	str	r4, [sp, #36]	; 0x24
	writelcdcmd("page 0");
 8002272:	f7ff f84b 	bl	800130c <writelcdcmd>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002276:	f8b8 105c 	ldrh.w	r1, [r8, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800227a:	4c9e      	ldr	r4, [pc, #632]	; (80024f4 <StarLPTask+0x43c>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 800227c:	f898 e070 	ldrb.w	lr, [r8, #112]	; 0x70
 8002280:	b289      	uxth	r1, r1
 8002282:	f898 c071 	ldrb.w	ip, [r8, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002286:	4b9c      	ldr	r3, [pc, #624]	; (80024f8 <StarLPTask+0x440>)
 8002288:	4a9c      	ldr	r2, [pc, #624]	; (80024fc <StarLPTask+0x444>)
 800228a:	489d      	ldr	r0, [pc, #628]	; (8002500 <StarLPTask+0x448>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	f8cd c00c 	str.w	ip, [sp, #12]
 8002294:	f8df a318 	ldr.w	sl, [pc, #792]	; 80025b0 <StarLPTask+0x4f8>
 8002298:	f8df b318 	ldr.w	fp, [pc, #792]	; 80025b4 <StarLPTask+0x4fc>
 800229c:	e9cd 1e01 	strd	r1, lr, [sp, #4]
 80022a0:	e9cd 9404 	strd	r9, r4, [sp, #16]
 80022a4:	6800      	ldr	r0, [r0, #0]
 80022a6:	4997      	ldr	r1, [pc, #604]	; (8002504 <StarLPTask+0x44c>)
 80022a8:	9000      	str	r0, [sp, #0]
 80022aa:	4897      	ldr	r0, [pc, #604]	; (8002508 <StarLPTask+0x450>)
 80022ac:	f020 fa82 	bl	80227b4 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 80022b0:	4896      	ldr	r0, [pc, #600]	; (800250c <StarLPTask+0x454>)
 80022b2:	f00a fe4f 	bl	800cf54 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 80022b6:	4c96      	ldr	r4, [pc, #600]	; (8002510 <StarLPTask+0x458>)
 80022b8:	4b96      	ldr	r3, [pc, #600]	; (8002514 <StarLPTask+0x45c>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80022be:	4896      	ldr	r0, [pc, #600]	; (8002518 <StarLPTask+0x460>)
		tenmstimer++;
 80022c0:	3501      	adds	r5, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80022c2:	f008 f835 	bl	800a330 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 80022c6:	200a      	movs	r0, #10
 80022c8:	f010 fb96 	bl	80129f8 <osDelay>
		globaladcnoise = abs(meanwindiff);
 80022cc:	4b93      	ldr	r3, [pc, #588]	; (800251c <StarLPTask+0x464>)
		if (!(ledsenabled)) {
 80022ce:	4a94      	ldr	r2, [pc, #592]	; (8002520 <StarLPTask+0x468>)
		tenmstimer++;
 80022d0:	b2ad      	uxth	r5, r5
		globaladcnoise = abs(meanwindiff);
 80022d2:	f9b3 3000 	ldrsh.w	r3, [r3]
		if (!(ledsenabled)) {
 80022d6:	8811      	ldrh	r1, [r2, #0]
		globaladcnoise = abs(meanwindiff);
 80022d8:	2b00      	cmp	r3, #0
 80022da:	4892      	ldr	r0, [pc, #584]	; (8002524 <StarLPTask+0x46c>)
 80022dc:	bfb8      	it	lt
 80022de:	425b      	neglt	r3, r3
 80022e0:	b29b      	uxth	r3, r3
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 80022e2:	09da      	lsrs	r2, r3, #7
		globaladcnoise = abs(meanwindiff);
 80022e4:	6003      	str	r3, [r0, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 80022e6:	1d13      	adds	r3, r2, #4
 80022e8:	4a8f      	ldr	r2, [pc, #572]	; (8002528 <StarLPTask+0x470>)
 80022ea:	8013      	strh	r3, [r2, #0]
		if (!(ledsenabled)) {
 80022ec:	2900      	cmp	r1, #0
 80022ee:	f000 80e1 	beq.w	80024b4 <StarLPTask+0x3fc>
		} else if (ledhang) {	// trigger led
 80022f2:	4b8e      	ldr	r3, [pc, #568]	; (800252c <StarLPTask+0x474>)
 80022f4:	461e      	mov	r6, r3
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80db 	beq.w	80024b4 <StarLPTask+0x3fc>
			ledhang--;
 80022fe:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002300:	2201      	movs	r2, #1
 8002302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002306:	488a      	ldr	r0, [pc, #552]	; (8002530 <StarLPTask+0x478>)
			ledhang--;
 8002308:	6033      	str	r3, [r6, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 800230a:	f007 fb09 	bl	8009920 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 800230e:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 8002312:	f8da 3000 	ldr.w	r3, [sl]
 8002316:	429a      	cmp	r2, r3
 8002318:	f040 80d9 	bne.w	80024ce <StarLPTask+0x416>
		processnex();		// process Nextion
 800231c:	f7ff fdb6 	bl	8001e8c <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8002320:	1ce9      	adds	r1, r5, #3
 8002322:	4b84      	ldr	r3, [pc, #528]	; (8002534 <StarLPTask+0x47c>)
 8002324:	4a84      	ldr	r2, [pc, #528]	; (8002538 <StarLPTask+0x480>)
 8002326:	fb03 f301 	mul.w	r3, r3, r1
 800232a:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 800232e:	d315      	bcc.n	800235c <StarLPTask+0x2a4>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8002330:	4b82      	ldr	r3, [pc, #520]	; (800253c <StarLPTask+0x484>)
 8002332:	f8d8 107c 	ldr.w	r1, [r8, #124]	; 0x7c
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f103 0219 	add.w	r2, r3, #25
 800233c:	4291      	cmp	r1, r2
 800233e:	f200 81fe 	bhi.w	800273e <StarLPTask+0x686>
				if (jabbertimeout) {
 8002342:	4a7f      	ldr	r2, [pc, #508]	; (8002540 <StarLPTask+0x488>)
 8002344:	6813      	ldr	r3, [r2, #0]
 8002346:	b10b      	cbz	r3, 800234c <StarLPTask+0x294>
					jabbertimeout--;		// de-arm count
 8002348:	3b01      	subs	r3, #1
 800234a:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 800234c:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 8002350:	4a7a      	ldr	r2, [pc, #488]	; (800253c <StarLPTask+0x484>)
 8002352:	6013      	str	r3, [r2, #0]
			if (gainchanged == 0) {		// gain not just changed
 8002354:	9b07      	ldr	r3, [sp, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8209 	beq.w	800276e <StarLPTask+0x6b6>
		if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 800235c:	4b79      	ldr	r3, [pc, #484]	; (8002544 <StarLPTask+0x48c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b943      	cbnz	r3, 8002374 <StarLPTask+0x2bc>
 8002362:	4b79      	ldr	r3, [pc, #484]	; (8002548 <StarLPTask+0x490>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	42bb      	cmp	r3, r7
 8002368:	d004      	beq.n	8002374 <StarLPTask+0x2bc>
 800236a:	4b78      	ldr	r3, [pc, #480]	; (800254c <StarLPTask+0x494>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8243 	beq.w	80027fa <StarLPTask+0x742>
		} else if (lcd_currentpage == 1) {
 8002374:	4b75      	ldr	r3, [pc, #468]	; (800254c <StarLPTask+0x494>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	f000 820e 	beq.w	800279a <StarLPTask+0x6e2>
			lcd_showvars();
 800237e:	4a74      	ldr	r2, [pc, #464]	; (8002550 <StarLPTask+0x498>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002380:	f105 030b 	add.w	r3, r5, #11
			lcd_showvars();
 8002384:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002388:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800238c:	3a01      	subs	r2, #1
 800238e:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002392:	f080 8146 	bcs.w	8002622 <StarLPTask+0x56a>
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002396:	f105 031b 	add.w	r3, r5, #27
			lcd_trigplot();		// update lcd trigger and noise plots
 800239a:	496e      	ldr	r1, [pc, #440]	; (8002554 <StarLPTask+0x49c>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 800239c:	4a6e      	ldr	r2, [pc, #440]	; (8002558 <StarLPTask+0x4a0>)
			lcd_trigplot();		// update lcd trigger and noise plots
 800239e:	fb01 f303 	mul.w	r3, r1, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 80023a2:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 80023a6:	d319      	bcc.n	80023dc <StarLPTask+0x324>
			if (agc) {
 80023a8:	4b6c      	ldr	r3, [pc, #432]	; (800255c <StarLPTask+0x4a4>)
 80023aa:	8818      	ldrh	r0, [r3, #0]
 80023ac:	2800      	cmp	r0, #0
 80023ae:	f000 81f2 	beq.w	8002796 <StarLPTask+0x6de>
				trigsin10sec = trigs - prevtrigs;
 80023b2:	4b6b      	ldr	r3, [pc, #428]	; (8002560 <StarLPTask+0x4a8>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80023b4:	496b      	ldr	r1, [pc, #428]	; (8002564 <StarLPTask+0x4ac>)
				trigsin10sec = trigs - prevtrigs;
 80023b6:	f8da 2000 	ldr.w	r2, [sl]
 80023ba:	681b      	ldr	r3, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80023bc:	8809      	ldrh	r1, [r1, #0]
				trigsin10sec = trigs - prevtrigs;
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	4869      	ldr	r0, [pc, #420]	; (8002568 <StarLPTask+0x4b0>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80023c2:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 80023c4:	6003      	str	r3, [r0, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80023c6:	d802      	bhi.n	80023ce <StarLPTask+0x316>
					if (trigsin10sec < MINTRIGS10S)
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f240 82c3 	bls.w	8002954 <StarLPTask+0x89c>
				if (trigsin10sec > MAXTRIGS10S)
 80023ce:	2b0a      	cmp	r3, #10
 80023d0:	f200 823d 	bhi.w	800284e <StarLPTask+0x796>
				prevtrigs = trigs;
 80023d4:	4b62      	ldr	r3, [pc, #392]	; (8002560 <StarLPTask+0x4a8>)
 80023d6:	601a      	str	r2, [r3, #0]
			gainchanged = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	9307      	str	r3, [sp, #28]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 80023dc:	f640 338c 	movw	r3, #2956	; 0xb8c
 80023e0:	429d      	cmp	r5, r3
 80023e2:	d948      	bls.n	8002476 <StarLPTask+0x3be>
			if (gpsgood == 0) {	// gps is not talking to us
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <StarLPTask+0x4b4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 81d9 	beq.w	80027a0 <StarLPTask+0x6e8>
			if (psensor == MPL115A2) {
 80023ee:	4b60      	ldr	r3, [pc, #384]	; (8002570 <StarLPTask+0x4b8>)
			gpsgood = 0;			// reset the good flag
 80023f0:	2200      	movs	r2, #0
 80023f2:	495e      	ldr	r1, [pc, #376]	; (800256c <StarLPTask+0x4b4>)
			if (psensor == MPL115A2) {
 80023f4:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 80023f6:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	f000 821f 	beq.w	800283c <StarLPTask+0x784>
			} else if (psensor == MPL3115A2) {
 80023fe:	2b02      	cmp	r3, #2
 8002400:	f000 823d 	beq.w	800287e <StarLPTask+0x7c6>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002404:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <StarLPTask+0x4bc>)
 8002406:	f242 721e 	movw	r2, #10014	; 0x271e
 800240a:	f8b8 105c 	ldrh.w	r1, [r8, #92]	; 0x5c
			tenmstimer = 0;
 800240e:	2500      	movs	r5, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b289      	uxth	r1, r1
 8002414:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8002418:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 800241c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f8cd e008 	str.w	lr, [sp, #8]
 8002426:	e9cd 0c00 	strd	r0, ip, [sp]
 800242a:	4853      	ldr	r0, [pc, #332]	; (8002578 <StarLPTask+0x4c0>)
 800242c:	f020 f84a 	bl	80224c4 <iprintf>
			printf("triggers:%04d, gain:%d, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n", trigs,
 8002430:	4a52      	ldr	r2, [pc, #328]	; (800257c <StarLPTask+0x4c4>)
 8002432:	4b53      	ldr	r3, [pc, #332]	; (8002580 <StarLPTask+0x4c8>)
 8002434:	6811      	ldr	r1, [r2, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a52      	ldr	r2, [pc, #328]	; (8002584 <StarLPTask+0x4cc>)
 800243a:	0889      	lsrs	r1, r1, #2
 800243c:	4852      	ldr	r0, [pc, #328]	; (8002588 <StarLPTask+0x4d0>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	4a52      	ldr	r2, [pc, #328]	; (800258c <StarLPTask+0x4d4>)
 8002444:	6806      	ldr	r6, [r0, #0]
 8002446:	4852      	ldr	r0, [pc, #328]	; (8002590 <StarLPTask+0x4d8>)
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	8812      	ldrh	r2, [r2, #0]
 800244c:	6800      	ldr	r0, [r0, #0]
 800244e:	9304      	str	r3, [sp, #16]
 8002450:	f002 0207 	and.w	r2, r2, #7
 8002454:	9008      	str	r0, [sp, #32]
 8002456:	4b43      	ldr	r3, [pc, #268]	; (8002564 <StarLPTask+0x4ac>)
 8002458:	484e      	ldr	r0, [pc, #312]	; (8002594 <StarLPTask+0x4dc>)
 800245a:	9102      	str	r1, [sp, #8]
 800245c:	9005      	str	r0, [sp, #20]
 800245e:	9908      	ldr	r1, [sp, #32]
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	484d      	ldr	r0, [pc, #308]	; (8002598 <StarLPTask+0x4e0>)
 8002464:	9603      	str	r6, [sp, #12]
 8002466:	e9cd 3100 	strd	r3, r1, [sp]
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <StarLPTask+0x46c>)
 800246c:	f8da 1000 	ldr.w	r1, [sl]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f020 f827 	bl	80224c4 <iprintf>
		if (((onesectimer+21) % 180 == 0) && (last3min != onesectimer)) {
 8002476:	f107 0315 	add.w	r3, r7, #21
 800247a:	4948      	ldr	r1, [pc, #288]	; (800259c <StarLPTask+0x4e4>)
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <StarLPTask+0x4e8>)
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002486:	d305      	bcc.n	8002494 <StarLPTask+0x3dc>
 8002488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800248a:	429f      	cmp	r7, r3
 800248c:	d002      	beq.n	8002494 <StarLPTask+0x3dc>
			lcd_pressplot();		// add a point to the pressure plot
 800248e:	9709      	str	r7, [sp, #36]	; 0x24
 8002490:	f7ff fad0 	bl	8001a34 <lcd_pressplot>
		if (onesectimer > 900) {			// 15 mins
 8002494:	f5b7 7f61 	cmp.w	r7, #900	; 0x384
 8002498:	f67f af11 	bls.w	80022be <StarLPTask+0x206>
			onesectimer = 0;
 800249c:	2700      	movs	r7, #0
			requestapisn();	//update s/n and udp target (reboot on fail)
 800249e:	f004 f817 	bl	80064d0 <requestapisn>
 80024a2:	e70c      	b.n	80022be <StarLPTask+0x206>
			writelcdcmd(strcat(str, "..\""));
 80024a4:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <StarLPTask+0x4ec>)
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	f8cd 0056 	str.w	r0, [sp, #86]	; 0x56
 80024ac:	a80a      	add	r0, sp, #40	; 0x28
 80024ae:	f7fe ff2d 	bl	800130c <writelcdcmd>
			break;
 80024b2:	e671      	b.n	8002198 <StarLPTask+0xe0>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80024b4:	2200      	movs	r2, #0
 80024b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ba:	481d      	ldr	r0, [pc, #116]	; (8002530 <StarLPTask+0x478>)
 80024bc:	f007 fa30 	bl	8009920 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 80024c0:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 80024c4:	f8da 3000 	ldr.w	r3, [sl]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f43f af27 	beq.w	800231c <StarLPTask+0x264>
			if (soundenabled) {
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <StarLPTask+0x4f0>)
			trigs = statuspkt.trigcount;
 80024d0:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
			if (soundenabled) {
 80024d4:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 80024d6:	f8ca 2000 	str.w	r2, [sl]
			if (soundenabled) {
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 8164 	bne.w	80027a8 <StarLPTask+0x6f0>
				printf("sem wait 1a\n");
 80024e0:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80025b8 <StarLPTask+0x500>
 80024e4:	e06c      	b.n	80025c0 <StarLPTask+0x508>
 80024e6:	bf00      	nop
 80024e8:	08027174 	.word	0x08027174
 80024ec:	080270dc 	.word	0x080270dc
 80024f0:	0802708c 	.word	0x0802708c
 80024f4:	2001bb18 	.word	0x2001bb18
 80024f8:	1ff0f424 	.word	0x1ff0f424
 80024fc:	1ff0f420 	.word	0x1ff0f420
 8002500:	1ff0f428 	.word	0x1ff0f428
 8002504:	080270e4 	.word	0x080270e4
 8002508:	20000084 	.word	0x20000084
 800250c:	2001b900 	.word	0x2001b900
 8002510:	2001b5c8 	.word	0x2001b5c8
 8002514:	20001c28 	.word	0x20001c28
 8002518:	2001b194 	.word	0x2001b194
 800251c:	20000738 	.word	0x20000738
 8002520:	20000266 	.word	0x20000266
 8002524:	200006e8 	.word	0x200006e8
 8002528:	20000000 	.word	0x20000000
 800252c:	20000734 	.word	0x20000734
 8002530:	40020c00 	.word	0x40020c00
 8002534:	cccccccd 	.word	0xcccccccd
 8002538:	19999999 	.word	0x19999999
 800253c:	20001c1c 	.word	0x20001c1c
 8002540:	200006ec 	.word	0x200006ec
 8002544:	20001588 	.word	0x20001588
 8002548:	20000008 	.word	0x20000008
 800254c:	20001584 	.word	0x20001584
 8002550:	c28f5c29 	.word	0xc28f5c29
 8002554:	26e978d5 	.word	0x26e978d5
 8002558:	00418937 	.word	0x00418937
 800255c:	20000010 	.word	0x20000010
 8002560:	20001c30 	.word	0x20001c30
 8002564:	20000002 	.word	0x20000002
 8002568:	20001c40 	.word	0x20001c40
 800256c:	20001c4c 	.word	0x20001c4c
 8002570:	20001c84 	.word	0x20001c84
 8002574:	2001b218 	.word	0x2001b218
 8002578:	08027384 	.word	0x08027384
 800257c:	2001bac8 	.word	0x2001bac8
 8002580:	2001babc 	.word	0x2001babc
 8002584:	10624dd3 	.word	0x10624dd3
 8002588:	2001bac0 	.word	0x2001bac0
 800258c:	2000026a 	.word	0x2000026a
 8002590:	2001bac4 	.word	0x2001bac4
 8002594:	20000054 	.word	0x20000054
 8002598:	080273a0 	.word	0x080273a0
 800259c:	a4fa4fa5 	.word	0xa4fa4fa5
 80025a0:	016c16c1 	.word	0x016c16c1
 80025a4:	08027160 	.word	0x08027160
 80025a8:	2000026c 	.word	0x2000026c
 80025ac:	2001bb30 	.word	0x2001bb30
 80025b0:	20001c3c 	.word	0x20001c3c
 80025b4:	2000023c 	.word	0x2000023c
 80025b8:	080271b0 	.word	0x080271b0
 80025bc:	f020 f81e 	bl	80225fc <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80025c0:	2101      	movs	r1, #1
 80025c2:	6820      	ldr	r0, [r4, #0]
 80025c4:	f010 ffb8 	bl	8013538 <xQueueSemaphoreTake>
 80025c8:	4603      	mov	r3, r0
				printf("sem wait 1a\n");
 80025ca:	4648      	mov	r0, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d1f5      	bne.n	80025bc <StarLPTask+0x504>
			strcpy(str, ctime(&epochtime));		// ctime
 80025d0:	48b5      	ldr	r0, [pc, #724]	; (80028a8 <StarLPTask+0x7f0>)
 80025d2:	f01e fe7f 	bl	80212d4 <ctime>
 80025d6:	4601      	mov	r1, r0
 80025d8:	a80a      	add	r0, sp, #40	; 0x28
 80025da:	f020 f97c 	bl	80228d6 <stpcpy>
			while (i < strlen(str)) {
 80025de:	ab0a      	add	r3, sp, #40	; 0x28
			n = 0;
 80025e0:	2100      	movs	r1, #0
 80025e2:	1ac0      	subs	r0, r0, r3
			i = 0;
 80025e4:	460b      	mov	r3, r1
			while (i < strlen(str)) {
 80025e6:	4283      	cmp	r3, r0
 80025e8:	d20c      	bcs.n	8002604 <StarLPTask+0x54c>
				if ((str[i] != '\n') && (str[i] != '\r'))
 80025ea:	aa0a      	add	r2, sp, #40	; 0x28
 80025ec:	5cd2      	ldrb	r2, [r2, r3]
				i++;
 80025ee:	3301      	adds	r3, #1
				if ((str[i] != '\n') && (str[i] != '\r'))
 80025f0:	2a0a      	cmp	r2, #10
 80025f2:	d0f8      	beq.n	80025e6 <StarLPTask+0x52e>
 80025f4:	2a0d      	cmp	r2, #13
 80025f6:	d0f6      	beq.n	80025e6 <StarLPTask+0x52e>
			while (i < strlen(str)) {
 80025f8:	4283      	cmp	r3, r0
					trigtimestr[n++] = str[i];
 80025fa:	f80b 2001 	strb.w	r2, [fp, r1]
 80025fe:	f101 0101 	add.w	r1, r1, #1
			while (i < strlen(str)) {
 8002602:	d3f2      	bcc.n	80025ea <StarLPTask+0x532>
			trigtimestr[n] = '\0';
 8002604:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002606:	6820      	ldr	r0, [r4, #0]
			trigtimestr[n] = '\0';
 8002608:	f80b 3001 	strb.w	r3, [fp, r1]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800260c:	461a      	mov	r2, r3
 800260e:	4619      	mov	r1, r3
 8002610:	f010 fd0c 	bl	801302c <xQueueGenericSend>
 8002614:	2801      	cmp	r0, #1
 8002616:	f43f ae81 	beq.w	800231c <StarLPTask+0x264>
				printf("semaphore 1a release failed\n");
 800261a:	48a4      	ldr	r0, [pc, #656]	; (80028ac <StarLPTask+0x7f4>)
 800261c:	f01f ffee 	bl	80225fc <puts>
 8002620:	e67c      	b.n	800231c <StarLPTask+0x264>
			if (ledsenabled)
 8002622:	4ba3      	ldr	r3, [pc, #652]	; (80028b0 <StarLPTask+0x7f8>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002628:	48a2      	ldr	r0, [pc, #648]	; (80028b4 <StarLPTask+0x7fc>)
			if (ledsenabled)
 800262a:	881a      	ldrh	r2, [r3, #0]
 800262c:	2a00      	cmp	r2, #0
 800262e:	f000 80d8 	beq.w	80027e2 <StarLPTask+0x72a>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002632:	f007 f98f 	bl	8009954 <HAL_GPIO_TogglePin>
				printf("sem wait 1b\n");
 8002636:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8002944 <StarLPTask+0x88c>
 800263a:	e001      	b.n	8002640 <StarLPTask+0x588>
 800263c:	f01f ffde 	bl	80225fc <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8002640:	2101      	movs	r1, #1
 8002642:	6820      	ldr	r0, [r4, #0]
 8002644:	f010 ff78 	bl	8013538 <xQueueSemaphoreTake>
 8002648:	4603      	mov	r3, r0
				printf("sem wait 1b\n");
 800264a:	4648      	mov	r0, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 800264c:	2b01      	cmp	r3, #1
 800264e:	d1f5      	bne.n	800263c <StarLPTask+0x584>
			strcpy(str, ctime(&epochtime));
 8002650:	4895      	ldr	r0, [pc, #596]	; (80028a8 <StarLPTask+0x7f0>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002652:	ae1e      	add	r6, sp, #120	; 0x78
			strcpy(str, ctime(&epochtime));
 8002654:	f01e fe3e 	bl	80212d4 <ctime>
 8002658:	4601      	mov	r1, r0
 800265a:	a80a      	add	r0, sp, #40	; 0x28
 800265c:	f020 f93b 	bl	80228d6 <stpcpy>
			sprintf(nowtimestr, "\"%s\"", str);
 8002660:	aa0a      	add	r2, sp, #40	; 0x28
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002662:	f04f 0c00 	mov.w	ip, #0
			sprintf(nowtimestr, "\"%s\"", str);
 8002666:	4994      	ldr	r1, [pc, #592]	; (80028b8 <StarLPTask+0x800>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002668:	1a83      	subs	r3, r0, r2
			sprintf(nowtimestr, "\"%s\"", str);
 800266a:	4894      	ldr	r0, [pc, #592]	; (80028bc <StarLPTask+0x804>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800266c:	4433      	add	r3, r6
			sprintf(statstr,
 800266e:	4e94      	ldr	r6, [pc, #592]	; (80028c0 <StarLPTask+0x808>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002670:	f803 cc51 	strb.w	ip, [r3, #-81]
			sprintf(nowtimestr, "\"%s\"", str);
 8002674:	f020 f89e 	bl	80227b4 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <StarLPTask+0x80c>)
 800267a:	4a93      	ldr	r2, [pc, #588]	; (80028c8 <StarLPTask+0x810>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	4992      	ldr	r1, [pc, #584]	; (80028cc <StarLPTask+0x814>)
 8002682:	4893      	ldr	r0, [pc, #588]	; (80028d0 <StarLPTask+0x818>)
 8002684:	f020 f896 	bl	80227b4 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8002688:	4b92      	ldr	r3, [pc, #584]	; (80028d4 <StarLPTask+0x81c>)
 800268a:	4a93      	ldr	r2, [pc, #588]	; (80028d8 <StarLPTask+0x820>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	498e      	ldr	r1, [pc, #568]	; (80028cc <StarLPTask+0x814>)
 8002692:	4892      	ldr	r0, [pc, #584]	; (80028dc <StarLPTask+0x824>)
 8002694:	f020 f88e 	bl	80227b4 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002698:	4b91      	ldr	r3, [pc, #580]	; (80028e0 <StarLPTask+0x828>)
			sprintf(statstr,
 800269a:	4a92      	ldr	r2, [pc, #584]	; (80028e4 <StarLPTask+0x82c>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800269c:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 80026a0:	6811      	ldr	r1, [r2, #0]
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80026a2:	2b00      	cmp	r3, #0
			sprintf(statstr,
 80026a4:	f8b6 c000 	ldrh.w	ip, [r6]
 80026a8:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 80026ac:	f3c1 010b 	ubfx	r1, r1, #0, #12
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80026b0:	bfb8      	it	lt
 80026b2:	425b      	neglt	r3, r3
			sprintf(statstr,
 80026b4:	f8d8 007c 	ldr.w	r0, [r8, #124]	; 0x7c
 80026b8:	f8cd c00c 	str.w	ip, [sp, #12]
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	9000      	str	r0, [sp, #0]
 80026c2:	4889      	ldr	r0, [pc, #548]	; (80028e8 <StarLPTask+0x830>)
 80026c4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80026c8:	4b88      	ldr	r3, [pc, #544]	; (80028ec <StarLPTask+0x834>)
 80026ca:	4989      	ldr	r1, [pc, #548]	; (80028f0 <StarLPTask+0x838>)
 80026cc:	f020 f872 	bl	80227b4 <siprintf>
			if (gpslocked) {
 80026d0:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <StarLPTask+0x83c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d071      	beq.n	80027bc <StarLPTask+0x704>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 80026d8:	f898 201b 	ldrb.w	r2, [r8, #27]
 80026dc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80026e0:	f8d8 0020 	ldr.w	r0, [r8, #32]
 80026e4:	4984      	ldr	r1, [pc, #528]	; (80028f8 <StarLPTask+0x840>)
 80026e6:	9000      	str	r0, [sp, #0]
 80026e8:	4884      	ldr	r0, [pc, #528]	; (80028fc <StarLPTask+0x844>)
 80026ea:	f020 f863 	bl	80227b4 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80026ee:	2300      	movs	r3, #0
 80026f0:	6820      	ldr	r0, [r4, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	f010 fc99 	bl	801302c <xQueueGenericSend>
 80026fa:	2801      	cmp	r0, #1
 80026fc:	d002      	beq.n	8002704 <StarLPTask+0x64c>
				printf("semaphore 1b release failed\n");
 80026fe:	4880      	ldr	r0, [pc, #512]	; (8002900 <StarLPTask+0x848>)
 8002700:	f01f ff7c 	bl	80225fc <puts>
			onesectimer++;
 8002704:	3701      	adds	r7, #1
				printf("sem wait 1c\n");
 8002706:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8002948 <StarLPTask+0x890>
			onesectimer++;
 800270a:	b2bf      	uxth	r7, r7
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 800270c:	e001      	b.n	8002712 <StarLPTask+0x65a>
				printf("sem wait 1c\n");
 800270e:	f01f ff75 	bl	80225fc <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8002712:	2119      	movs	r1, #25
 8002714:	6820      	ldr	r0, [r4, #0]
 8002716:	f010 ff0f 	bl	8013538 <xQueueSemaphoreTake>
 800271a:	4603      	mov	r3, r0
				printf("sem wait 1c\n");
 800271c:	4648      	mov	r0, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 800271e:	2b01      	cmp	r3, #1
 8002720:	d1f5      	bne.n	800270e <StarLPTask+0x656>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002722:	2300      	movs	r3, #0
 8002724:	6820      	ldr	r0, [r4, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	4619      	mov	r1, r3
 800272a:	f010 fc7f 	bl	801302c <xQueueGenericSend>
 800272e:	2801      	cmp	r0, #1
 8002730:	d002      	beq.n	8002738 <StarLPTask+0x680>
				printf("semaphore 1c release failed\n");
 8002732:	4874      	ldr	r0, [pc, #464]	; (8002904 <StarLPTask+0x84c>)
 8002734:	f01f ff62 	bl	80225fc <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 8002738:	f7ff f87a 	bl	8001830 <lcd_trigplot>
 800273c:	e62b      	b.n	8002396 <StarLPTask+0x2de>
				statuspkt.jabcnt++;
 800273e:	f8b8 2086 	ldrh.w	r2, [r8, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8002742:	2101      	movs	r1, #1
 8002744:	4870      	ldr	r0, [pc, #448]	; (8002908 <StarLPTask+0x850>)
				statuspkt.jabcnt++;
 8002746:	440a      	add	r2, r1
				jabbertimeout = 1;		// 100mS seconds pause
 8002748:	6001      	str	r1, [r0, #0]
				statuspkt.jabcnt++;
 800274a:	b292      	uxth	r2, r2
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 800274c:	486f      	ldr	r0, [pc, #444]	; (800290c <StarLPTask+0x854>)
				statuspkt.jabcnt++;
 800274e:	f8a8 2086 	strh.w	r2, [r8, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002752:	f8d8 107c 	ldr.w	r1, [r8, #124]	; 0x7c
 8002756:	1ac9      	subs	r1, r1, r3
 8002758:	f01f feb4 	bl	80224c4 <iprintf>
				if (agc) {
 800275c:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <StarLPTask+0x858>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 8095 	bne.w	8002890 <StarLPTask+0x7d8>
				jabtrigcnt = statuspkt.trigcount;
 8002766:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 800276a:	4a6a      	ldr	r2, [pc, #424]	; (8002914 <StarLPTask+0x85c>)
 800276c:	6013      	str	r3, [r2, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 800276e:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <StarLPTask+0x860>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b6a      	ldr	r3, [pc, #424]	; (800291c <StarLPTask+0x864>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	1ad3      	subs	r3, r2, r3
				if (n > 5) {				// too many triggers in 100mS
 8002778:	2b05      	cmp	r3, #5
 800277a:	dd35      	ble.n	80027e8 <StarLPTask+0x730>
					if (trigthresh < 4095)
 800277c:	4850      	ldr	r0, [pc, #320]	; (80028c0 <StarLPTask+0x808>)
 800277e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8002782:	8803      	ldrh	r3, [r0, #0]
 8002784:	428b      	cmp	r3, r1
 8002786:	d801      	bhi.n	800278c <StarLPTask+0x6d4>
						trigthresh++;
 8002788:	3301      	adds	r3, #1
 800278a:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 800278c:	2300      	movs	r3, #0
 800278e:	9307      	str	r3, [sp, #28]
 8002790:	4b62      	ldr	r3, [pc, #392]	; (800291c <StarLPTask+0x864>)
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e5e2      	b.n	800235c <StarLPTask+0x2a4>
			gainchanged = 0;
 8002796:	9007      	str	r0, [sp, #28]
 8002798:	e620      	b.n	80023dc <StarLPTask+0x324>
			lcd_showvars();
 800279a:	f7fe fedf 	bl	800155c <lcd_showvars>
 800279e:	e5ee      	b.n	800237e <StarLPTask+0x2c6>
				printf("GPS serial comms problem?\n");
 80027a0:	485f      	ldr	r0, [pc, #380]	; (8002920 <StarLPTask+0x868>)
 80027a2:	f01f ff2b 	bl	80225fc <puts>
 80027a6:	e622      	b.n	80023ee <StarLPTask+0x336>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80027a8:	2008      	movs	r0, #8
 80027aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80027ae:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <StarLPTask+0x86c>)
 80027b0:	2100      	movs	r1, #0
 80027b2:	9000      	str	r0, [sp, #0]
 80027b4:	485c      	ldr	r0, [pc, #368]	; (8002928 <StarLPTask+0x870>)
 80027b6:	f004 fc91 	bl	80070dc <HAL_DAC_Start_DMA>
 80027ba:	e691      	b.n	80024e0 <StarLPTask+0x428>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");
 80027bc:	f8df c18c 	ldr.w	ip, [pc, #396]	; 800294c <StarLPTask+0x894>
 80027c0:	f8df e138 	ldr.w	lr, [pc, #312]	; 80028fc <StarLPTask+0x844>
 80027c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80027c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80027cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80027d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80027d4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80027d8:	f8ce 0000 	str.w	r0, [lr]
 80027dc:	f8ae 1004 	strh.w	r1, [lr, #4]
 80027e0:	e785      	b.n	80026ee <StarLPTask+0x636>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 80027e2:	f007 f89d 	bl	8009920 <HAL_GPIO_WritePin>
 80027e6:	e726      	b.n	8002636 <StarLPTask+0x57e>
				if (n == 0) {		// no triggers in last 100mS
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1cf      	bne.n	800278c <StarLPTask+0x6d4>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 80027ec:	4934      	ldr	r1, [pc, #208]	; (80028c0 <StarLPTask+0x808>)
 80027ee:	880b      	ldrh	r3, [r1, #0]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d9cb      	bls.n	800278c <StarLPTask+0x6d4>
						trigthresh--;
 80027f4:	3b01      	subs	r3, #1
 80027f6:	800b      	strh	r3, [r1, #0]
 80027f8:	e7c8      	b.n	800278c <StarLPTask+0x6d4>
			timeinfo = *localtime(&localepochtime);
 80027fa:	484c      	ldr	r0, [pc, #304]	; (800292c <StarLPTask+0x874>)
 80027fc:	f01e fd96 	bl	802132c <localtime>
 8002800:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8002950 <StarLPTask+0x898>
 8002804:	4684      	mov	ip, r0
 8002806:	46ce      	mov	lr, r9
 8002808:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800280c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002810:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002814:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
			lastsec = onesectimer;
 8002818:	4a45      	ldr	r2, [pc, #276]	; (8002930 <StarLPTask+0x878>)
			timeinfo = *localtime(&localepochtime);
 800281a:	f8dc 3000 	ldr.w	r3, [ip]
			lastsec = onesectimer;
 800281e:	8017      	strh	r7, [r2, #0]
			timeinfo = *localtime(&localepochtime);
 8002820:	f8ce 3000 	str.w	r3, [lr]
			lcd_time();
 8002824:	f7fe fe2c 	bl	8001480 <lcd_time>
			if (timeinfo.tm_yday != lastday) {
 8002828:	4b42      	ldr	r3, [pc, #264]	; (8002934 <StarLPTask+0x87c>)
 800282a:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	f43f ada4 	beq.w	800237e <StarLPTask+0x2c6>
				lcd_date();
 8002836:	f7fe fe75 	bl	8001524 <lcd_date>
 800283a:	e5a0      	b.n	800237e <StarLPTask+0x2c6>
				if (getpressure115() != HAL_OK) {
 800283c:	f001 fd90 	bl	8004360 <getpressure115>
 8002840:	2800      	cmp	r0, #0
 8002842:	f43f addf 	beq.w	8002404 <StarLPTask+0x34c>
					printf("MPL115A2 error\n\r");
 8002846:	483c      	ldr	r0, [pc, #240]	; (8002938 <StarLPTask+0x880>)
 8002848:	f01f fe3c 	bl	80224c4 <iprintf>
 800284c:	e5da      	b.n	8002404 <StarLPTask+0x34c>
					gainchanged = bumppga(-1);
 800284e:	f04f 30ff 	mov.w	r0, #4294967295
 8002852:	f001 fd43 	bl	80042dc <bumppga>
 8002856:	b203      	sxth	r3, r0
 8002858:	9307      	str	r3, [sp, #28]
				prevtrigs = trigs;
 800285a:	f8da 3000 	ldr.w	r3, [sl]
 800285e:	4a37      	ldr	r2, [pc, #220]	; (800293c <StarLPTask+0x884>)
 8002860:	6013      	str	r3, [r2, #0]
				if (gainchanged > 0) {	// increased gain
 8002862:	9b07      	ldr	r3, [sp, #28]
 8002864:	2b00      	cmp	r3, #0
 8002866:	f77f adb9 	ble.w	80023dc <StarLPTask+0x324>
					if (trigthresh < (4095 - 10))
 800286a:	4915      	ldr	r1, [pc, #84]	; (80028c0 <StarLPTask+0x808>)
 800286c:	f640 72f4 	movw	r2, #4084	; 0xff4
 8002870:	880b      	ldrh	r3, [r1, #0]
 8002872:	4293      	cmp	r3, r2
 8002874:	f63f adb2 	bhi.w	80023dc <StarLPTask+0x324>
						trigthresh += 5;
 8002878:	3305      	adds	r3, #5
 800287a:	800b      	strh	r3, [r1, #0]
 800287c:	e5ae      	b.n	80023dc <StarLPTask+0x324>
				if (getpressure3115() != HAL_OK) {
 800287e:	f001 ff07 	bl	8004690 <getpressure3115>
 8002882:	2800      	cmp	r0, #0
 8002884:	f43f adbe 	beq.w	8002404 <StarLPTask+0x34c>
					printf("MPL3115A2 error\n\r");
 8002888:	482d      	ldr	r0, [pc, #180]	; (8002940 <StarLPTask+0x888>)
 800288a:	f01f fe1b 	bl	80224c4 <iprintf>
 800288e:	e5b9      	b.n	8002404 <StarLPTask+0x34c>
					gainchanged = bumppga(-1);	// decrease gain
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f001 fd22 	bl	80042dc <bumppga>
				jabtrigcnt = statuspkt.trigcount;
 8002898:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
					gainchanged = bumppga(-1);	// decrease gain
 800289c:	b202      	sxth	r2, r0
 800289e:	9207      	str	r2, [sp, #28]
				jabtrigcnt = statuspkt.trigcount;
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <StarLPTask+0x85c>)
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	e556      	b.n	8002354 <StarLPTask+0x29c>
 80028a6:	bf00      	nop
 80028a8:	2001ba30 	.word	0x2001ba30
 80028ac:	080271bc 	.word	0x080271bc
 80028b0:	20000266 	.word	0x20000266
 80028b4:	40020c00 	.word	0x40020c00
 80028b8:	080271f4 	.word	0x080271f4
 80028bc:	20000054 	.word	0x20000054
 80028c0:	20000002 	.word	0x20000002
 80028c4:	2001babc 	.word	0x2001babc
 80028c8:	2001bac0 	.word	0x2001bac0
 80028cc:	080271fc 	.word	0x080271fc
 80028d0:	20000230 	.word	0x20000230
 80028d4:	2001bac8 	.word	0x2001bac8
 80028d8:	2001bac4 	.word	0x2001bac4
 80028dc:	20000074 	.word	0x20000074
 80028e0:	20000738 	.word	0x20000738
 80028e4:	200006e4 	.word	0x200006e4
 80028e8:	20000128 	.word	0x20000128
 80028ec:	2000023c 	.word	0x2000023c
 80028f0:	08027204 	.word	0x08027204
 80028f4:	20001c95 	.word	0x20001c95
 80028f8:	080272ac 	.word	0x080272ac
 80028fc:	20000014 	.word	0x20000014
 8002900:	080272fc 	.word	0x080272fc
 8002904:	08027324 	.word	0x08027324
 8002908:	200006ec 	.word	0x200006ec
 800290c:	080271d8 	.word	0x080271d8
 8002910:	20000010 	.word	0x20000010
 8002914:	20001c1c 	.word	0x20001c1c
 8002918:	2000073c 	.word	0x2000073c
 800291c:	20001c24 	.word	0x20001c24
 8002920:	08027340 	.word	0x08027340
 8002924:	080276e0 	.word	0x080276e0
 8002928:	2001b4ec 	.word	0x2001b4ec
 800292c:	2001ae88 	.word	0x2001ae88
 8002930:	20000008 	.word	0x20000008
 8002934:	20001578 	.word	0x20001578
 8002938:	0802735c 	.word	0x0802735c
 800293c:	20001c30 	.word	0x20001c30
 8002940:	08027370 	.word	0x08027370
 8002944:	080271e8 	.word	0x080271e8
 8002948:	08027318 	.word	0x08027318
 800294c:	080272d4 	.word	0x080272d4
 8002950:	2001ae38 	.word	0x2001ae38
						gainchanged = bumppga(1);
 8002954:	2001      	movs	r0, #1
 8002956:	f001 fcc1 	bl	80042dc <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <StarLPTask+0x8b4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b0a      	cmp	r3, #10
 8002960:	f63f af75 	bhi.w	800284e <StarLPTask+0x796>
						gainchanged = bumppga(1);
 8002964:	b203      	sxth	r3, r0
 8002966:	9307      	str	r3, [sp, #28]
 8002968:	e777      	b.n	800285a <StarLPTask+0x7a2>
 800296a:	bf00      	nop
 800296c:	20001c40 	.word	0x20001c40

08002970 <_write>:
	if (file == 1) {
 8002970:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8002972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002974:	460c      	mov	r4, r1
 8002976:	4617      	mov	r7, r2
	if (file == 1) {
 8002978:	d00e      	beq.n	8002998 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800297a:	2a00      	cmp	r2, #0
 800297c:	dd0a      	ble.n	8002994 <_write+0x24>
 800297e:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8002980:	4d0b      	ldr	r5, [pc, #44]	; (80029b0 <_write+0x40>)
 8002982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002986:	230a      	movs	r3, #10
 8002988:	2201      	movs	r2, #1
 800298a:	4628      	mov	r0, r5
 800298c:	f00d fdd6 	bl	801053c <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002990:	42a6      	cmp	r6, r4
 8002992:	d1f6      	bne.n	8002982 <_write+0x12>
}
 8002994:	4638      	mov	r0, r7
 8002996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002998:	2a00      	cmp	r2, #0
 800299a:	ddfb      	ble.n	8002994 <_write+0x24>
 800299c:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 800299e:	f814 0b01 	ldrb.w	r0, [r4], #1
 80029a2:	f001 f8d3 	bl	8003b4c <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80029a6:	42ac      	cmp	r4, r5
 80029a8:	d1f9      	bne.n	800299e <_write+0x2e>
}
 80029aa:	4638      	mov	r0, r7
 80029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2001b3d8 	.word	0x2001b3d8

080029b4 <rebootme>:
void rebootme() {
 80029b4:	b508      	push	{r3, lr}
		osDelay(2000);
 80029b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029ba:	f010 f81d 	bl	80129f8 <osDelay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029be:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029c2:	4905      	ldr	r1, [pc, #20]	; (80029d8 <rebootme+0x24>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <rebootme+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029c6:	68ca      	ldr	r2, [r1, #12]
 80029c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60cb      	str	r3, [r1, #12]
 80029d0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80029d4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80029d6:	e7fd      	b.n	80029d4 <rebootme+0x20>
 80029d8:	e000ed00 	.word	0xe000ed00
 80029dc:	05fa0004 	.word	0x05fa0004

080029e0 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 80029e0:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 80029e4:	074a      	lsls	r2, r1, #29
 80029e6:	d502      	bpl.n	80029ee <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 80029e8:	4808      	ldr	r0, [pc, #32]	; (8002a0c <netif_link_callbk_fn+0x2c>)
 80029ea:	f01f bd6b 	b.w	80224c4 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 80029ee:	b510      	push	{r4, lr}
 80029f0:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 80029f2:	4807      	ldr	r0, [pc, #28]	; (8002a10 <netif_link_callbk_fn+0x30>)
 80029f4:	f01f fd66 	bl	80224c4 <iprintf>
		if (!(netif_is_link_up(netif))) {
 80029f8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80029fc:	075b      	lsls	r3, r3, #29
 80029fe:	d500      	bpl.n	8002a02 <netif_link_callbk_fn+0x22>
}
 8002a00:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 8002a02:	4804      	ldr	r0, [pc, #16]	; (8002a14 <netif_link_callbk_fn+0x34>)
 8002a04:	f01f fdfa 	bl	80225fc <puts>
			rebootme();
 8002a08:	f7ff ffd4 	bl	80029b4 <rebootme>
 8002a0c:	080273fc 	.word	0x080273fc
 8002a10:	0802741c 	.word	0x0802741c
 8002a14:	0802743c 	.word	0x0802743c

08002a18 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f004 bbfb 	b.w	8007214 <HAL_DAC_Stop_DMA>
 8002a1e:	bf00      	nop

08002a20 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8002a22:	6803      	ldr	r3, [r0, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d02d      	beq.n	8002a8c <HAL_TIM_IC_CaptureCallback+0x6c>
}
 8002a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002a32:	4c1a      	ldr	r4, [pc, #104]	; (8002a9c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002a36:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8002a38:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002a3a:	3101      	adds	r1, #1
 8002a3c:	481a      	ldr	r0, [pc, #104]	; (8002aa8 <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 8002a3e:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002a40:	fba3 5301 	umull	r5, r3, r3, r1
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002a4a:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002a52:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002a54:	4815      	ldr	r0, [pc, #84]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 8002a56:	b1b2      	cbz	r2, 8002a86 <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002a58:	f006 ff7c 	bl	8009954 <HAL_GPIO_TogglePin>
		diff = lastcap;
 8002a5c:	4d14      	ldr	r5, [pc, #80]	; (8002ab0 <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 8002a5e:	2100      	movs	r1, #0
		diff = lastcap;
 8002a60:	4e14      	ldr	r6, [pc, #80]	; (8002ab4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002a62:	462b      	mov	r3, r5
 8002a64:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8002a68:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8002a70:	4298      	cmp	r0, r3
		sum += data[i];
 8002a72:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8002a74:	d1f9      	bne.n	8002a6a <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 8002a76:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 8002a7a:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8002a7c:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002a7e:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8002a80:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002a82:	6033      	str	r3, [r6, #0]
}
 8002a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002a86:	f006 ff4b 	bl	8009920 <HAL_GPIO_WritePin>
 8002a8a:	e7e7      	b.n	8002a5c <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8002a8c:	480b      	ldr	r0, [pc, #44]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 8002a8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8002a92:	f01f bdb3 	b.w	80225fc <puts>
 8002a96:	bf00      	nop
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	2001ad7c 	.word	0x2001ad7c
 8002aa0:	88888889 	.word	0x88888889
 8002aa4:	20000266 	.word	0x20000266
 8002aa8:	20000740 	.word	0x20000740
 8002aac:	40020c00 	.word	0x40020c00
 8002ab0:	20001bdc 	.word	0x20001bdc
 8002ab4:	20001c20 	.word	0x20001c20
 8002ab8:	2001ae28 	.word	0x2001ae28
 8002abc:	08027470 	.word	0x08027470

08002ac0 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE BEGIN Callback 0 */
	static int counter = 0;

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8002ac0:	4a25      	ldr	r2, [pc, #148]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ac2:	6803      	ldr	r3, [r0, #0]
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d029      	beq.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8002ac8:	4a24      	ldr	r2, [pc, #144]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d02d      	beq.n	8002b2a <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad2:	d02c      	beq.n	8002b2e <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8002ad4:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d030      	beq.n	8002b3c <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8002ada:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d005      	beq.n	8002aec <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8002ae0:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0x66>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8002ae6:	4821      	ldr	r0, [pc, #132]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002ae8:	f01f bd88 	b.w	80225fc <puts>
{
 8002aec:	b510      	push	{r4, lr}
		t1sec++;
 8002aee:	4920      	ldr	r1, [pc, #128]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8002af0:	4c20      	ldr	r4, [pc, #128]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8002af2:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8002af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8002af6:	4820      	ldr	r0, [pc, #128]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8002af8:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8002afa:	3301      	adds	r3, #1
		if (netup)
 8002afc:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8002afe:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8002b00:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8002b02:	b110      	cbz	r0, 8002b0a <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8002b04:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002b06:	3301      	adds	r3, #1
 8002b08:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	b9c3      	cbnz	r3, 8002b42 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8002b12:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8002b14:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8002b16:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
  /* USER CODE END Callback 1 */
}
 8002b1a:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	6013      	str	r3, [r2, #0]
		return;
 8002b24:	4770      	bx	lr
    HAL_IncTick();
 8002b26:	f003 bd1d 	b.w	8006564 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 8002b2a:	f7fd bea7 	b.w	800087c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8002b2e:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002b32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	4815      	ldr	r0, [pc, #84]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002b38:	f01f bcc4 	b.w	80224c4 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 8002b3c:	4814      	ldr	r0, [pc, #80]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002b3e:	f01f bd5d 	b.w	80225fc <puts>
			statuspkt.gpsuptime++;
 8002b42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002b44:	3301      	adds	r3, #1
 8002b46:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8002b48:	f001 f81e 	bl	8003b88 <calcepoch32>
				epochvalid = 1;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002b4e:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8002b50:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8002b54:	701a      	strb	r2, [r3, #0]
}
 8002b56:	bd10      	pop	{r4, pc}
 8002b58:	40002000 	.word	0x40002000
 8002b5c:	40000c00 	.word	0x40000c00
 8002b60:	40000400 	.word	0x40000400
 8002b64:	40001000 	.word	0x40001000
 8002b68:	40001800 	.word	0x40001800
 8002b6c:	080274c0 	.word	0x080274c0
 8002b70:	20001c38 	.word	0x20001c38
 8002b74:	2001ad7c 	.word	0x2001ad7c
 8002b78:	2000073a 	.word	0x2000073a
 8002b7c:	20001c95 	.word	0x20001c95
 8002b80:	20001c94 	.word	0x20001c94
 8002b84:	20001c34 	.word	0x20001c34
 8002b88:	2001ae28 	.word	0x2001ae28
 8002b8c:	08027480 	.word	0x08027480
 8002b90:	080274a4 	.word	0x080274a4

08002b94 <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8002b94:	4c02      	ldr	r4, [pc, #8]	; (8002ba0 <Error_Handler+0xc>)
{
 8002b96:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f01f fd2f 	bl	80225fc <puts>
	while (1) {
 8002b9e:	e7fb      	b.n	8002b98 <Error_Handler+0x4>
 8002ba0:	080274e8 	.word	0x080274e8

08002ba4 <SystemClock_Config>:
{
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ba8:	2234      	movs	r2, #52	; 0x34
 8002baa:	2100      	movs	r1, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002bac:	2509      	movs	r5, #9
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bae:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bb0:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bb2:	f01e fd15 	bl	80215e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002bbc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002bc0:	9306      	str	r3, [sp, #24]
  HAL_PWR_EnableBkUpAccess();
 8002bc2:	f008 f93f 	bl	800ae44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <SystemClock_Config+0xa4>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bc8:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bca:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002bce:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002bd2:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bda:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002bde:	9200      	str	r2, [sp, #0]
 8002be0:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002be8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bea:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bec:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002bee:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bf0:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf8:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bfa:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bfc:	2104      	movs	r1, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bfe:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002c00:	22d8      	movs	r2, #216	; 0xd8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c02:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002c04:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c06:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c08:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c0a:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002c0c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002c0e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c10:	e9cd 510e 	strd	r5, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c14:	f008 f95a 	bl	800aecc <HAL_RCC_OscConfig>
 8002c18:	b9a0      	cbnz	r0, 8002c44 <SystemClock_Config+0xa0>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c1a:	f008 f91b 	bl	800ae54 <HAL_PWREx_EnableOverDrive>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	b980      	cbnz	r0, 8002c44 <SystemClock_Config+0xa0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c22:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c24:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002c2c:	a802      	add	r0, sp, #8
 8002c2e:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c30:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c32:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c34:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c36:	e9cd 5205 	strd	r5, r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002c3a:	f008 fc27 	bl	800b48c <HAL_RCC_ClockConfig>
 8002c3e:	b908      	cbnz	r0, 8002c44 <SystemClock_Config+0xa0>
}
 8002c40:	b014      	add	sp, #80	; 0x50
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002c44:	f7ff ffa6 	bl	8002b94 <Error_Handler>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000

08002c50 <PeriphCommonClock_Config>:
{
 8002c50:	b530      	push	{r4, r5, lr}
 8002c52:	b0a5      	sub	sp, #148	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c54:	228c      	movs	r2, #140	; 0x8c
 8002c56:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c58:	25c0      	movs	r5, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c5a:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002c5c:	2403      	movs	r4, #3
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c5e:	f01e fcbf 	bl	80215e0 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002c62:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002c66:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002c68:	2101      	movs	r1, #1
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002c6e:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c70:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c72:	9505      	str	r5, [sp, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002c74:	9408      	str	r4, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002c76:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002c78:	921f      	str	r2, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002c7a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c7e:	f008 fd6d 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	b908      	cbnz	r0, 8002c88 <PeriphCommonClock_Config+0x38>
}
 8002c84:	b025      	add	sp, #148	; 0x94
 8002c86:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8002c88:	f7ff ff84 	bl	8002b94 <Error_Handler>

08002c8c <main>:
{
 8002c8c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002c90:	b0dd      	sub	sp, #372	; 0x174
 8002c92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c96:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002c9a:	4bc3      	ldr	r3, [pc, #780]	; (8002fa8 <main+0x31c>)
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002ca2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ca6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002cb0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cb6:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cba:	4dbc      	ldr	r5, [pc, #752]	; (8002fac <main+0x320>)
  HAL_Init();
 8002cbc:	f003 fc40 	bl	8006540 <HAL_Init>
  SystemClock_Config();
 8002cc0:	f7ff ff70 	bl	8002ba4 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc4:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8002cc6:	f7ff ffc3 	bl	8002c50 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cca:	9459      	str	r4, [sp, #356]	; 0x164
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8002ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	48b7      	ldr	r0, [pc, #732]	; (8002fb0 <main+0x324>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd4:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = probe1_Pin;
 8002cd8:	468a      	mov	sl, r1
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cda:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cdc:	f44f 1b88 	mov.w	fp, #1114112	; 0x110000
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002ce0:	f04f 0880 	mov.w	r8, #128	; 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 8002ce8:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	632b      	str	r3, [r5, #48]	; 0x30
 8002cf4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	9303      	str	r3, [sp, #12]
 8002cfc:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	632b      	str	r3, [r5, #48]	; 0x30
 8002d06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	9304      	str	r3, [sp, #16]
 8002d0e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d12:	f043 0320 	orr.w	r3, r3, #32
 8002d16:	632b      	str	r3, [r5, #48]	; 0x30
 8002d18:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	9305      	str	r3, [sp, #20]
 8002d20:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d28:	632b      	str	r3, [r5, #48]	; 0x30
 8002d2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	9306      	str	r3, [sp, #24]
 8002d32:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d34:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	632b      	str	r3, [r5, #48]	; 0x30
 8002d3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	9307      	str	r3, [sp, #28]
 8002d44:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	632b      	str	r3, [r5, #48]	; 0x30
 8002d4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	9308      	str	r3, [sp, #32]
 8002d56:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d5e:	632b      	str	r3, [r5, #48]	; 0x30
 8002d60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	9309      	str	r3, [sp, #36]	; 0x24
 8002d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	632b      	str	r3, [r5, #48]	; 0x30
 8002d72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	930a      	str	r3, [sp, #40]	; 0x28
 8002d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8002d7c:	f006 fdd0 	bl	8009920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002d80:	4622      	mov	r2, r4
 8002d82:	f644 0181 	movw	r1, #18561	; 0x4881
 8002d86:	488b      	ldr	r0, [pc, #556]	; (8002fb4 <main+0x328>)
 8002d88:	f006 fdca 	bl	8009920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|XBEE_RST_Pin
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	f24d 4101 	movw	r1, #54273	; 0xd401
 8002d92:	4889      	ldr	r0, [pc, #548]	; (8002fb8 <main+0x32c>)
 8002d94:	f006 fdc4 	bl	8009920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8002d98:	4632      	mov	r2, r6
 8002d9a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002d9e:	4887      	ldr	r0, [pc, #540]	; (8002fbc <main+0x330>)
 8002da0:	f006 fdbe 	bl	8009920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002da4:	4622      	mov	r2, r4
 8002da6:	2144      	movs	r1, #68	; 0x44
 8002da8:	4885      	ldr	r0, [pc, #532]	; (8002fc0 <main+0x334>)
 8002daa:	f006 fdb9 	bl	8009920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8002dae:	4622      	mov	r2, r4
 8002db0:	4649      	mov	r1, r9
 8002db2:	4882      	ldr	r0, [pc, #520]	; (8002fbc <main+0x330>)
 8002db4:	f006 fdb4 	bl	8009920 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8002db8:	f642 138a 	movw	r3, #10634	; 0x298a
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dbc:	a955      	add	r1, sp, #340	; 0x154
 8002dbe:	487e      	ldr	r0, [pc, #504]	; (8002fb8 <main+0x32c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8002dc0:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dc4:	9756      	str	r7, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dc6:	f006 fafd 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002dce:	a955      	add	r1, sp, #340	; 0x154
 8002dd0:	487c      	ldr	r0, [pc, #496]	; (8002fc4 <main+0x338>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002dd2:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dd6:	f8cd b158 	str.w	fp, [sp, #344]	; 0x158
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002dda:	f006 faf3 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002dde:	f643 433c 	movw	r3, #15420	; 0x3c3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002de2:	a955      	add	r1, sp, #340	; 0x154
 8002de4:	4872      	ldr	r0, [pc, #456]	; (8002fb0 <main+0x324>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002de6:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dec:	f006 faea 	bl	80093c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8002df0:	a955      	add	r1, sp, #340	; 0x154
 8002df2:	486f      	ldr	r0, [pc, #444]	; (8002fb0 <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df4:	e9cd a655 	strd	sl, r6, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df8:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8002dfc:	f006 fae2 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8002e00:	f240 3301 	movw	r3, #769	; 0x301
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e04:	a955      	add	r1, sp, #340	; 0x154
 8002e06:	486f      	ldr	r0, [pc, #444]	; (8002fc4 <main+0x338>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8002e08:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0e:	f006 fad9 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e12:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e14:	a955      	add	r1, sp, #340	; 0x154
 8002e16:	486c      	ldr	r0, [pc, #432]	; (8002fc8 <main+0x33c>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e18:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	f006 fad1 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 8002e22:	f644 0381 	movw	r3, #18561	; 0x4881
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e26:	a955      	add	r1, sp, #340	; 0x154
 8002e28:	4862      	ldr	r0, [pc, #392]	; (8002fb4 <main+0x328>)
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 8002e2a:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e32:	f006 fac7 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002e36:	2322      	movs	r3, #34	; 0x22
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e38:	a955      	add	r1, sp, #340	; 0x154
 8002e3a:	485e      	ldr	r0, [pc, #376]	; (8002fb4 <main+0x328>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002e3c:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e42:	f006 fabf 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002e46:	f24d 533b 	movw	r3, #54587	; 0xd53b
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e4a:	a955      	add	r1, sp, #340	; 0x154
 8002e4c:	485c      	ldr	r0, [pc, #368]	; (8002fc0 <main+0x334>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002e4e:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e54:	f006 fab6 	bl	80093c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e58:	a955      	add	r1, sp, #340	; 0x154
 8002e5a:	4857      	ldr	r0, [pc, #348]	; (8002fb8 <main+0x32c>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e5c:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
  GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8002e60:	f04f 0a0c 	mov.w	sl, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	e9cd b456 	strd	fp, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e68:	f006 faac 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|XBEE_RST_Pin
 8002e6c:	f24d 4301 	movw	r3, #54273	; 0xd401
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e70:	a955      	add	r1, sp, #340	; 0x154
 8002e72:	4851      	ldr	r0, [pc, #324]	; (8002fb8 <main+0x32c>)
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|XBEE_RST_Pin
 8002e74:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e7c:	f006 faa2 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 8002e80:	f240 4385 	movw	r3, #1157	; 0x485
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e84:	a955      	add	r1, sp, #340	; 0x154
 8002e86:	484d      	ldr	r0, [pc, #308]	; (8002fbc <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 8002e88:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8e:	f006 fa99 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8002e92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e96:	a955      	add	r1, sp, #340	; 0x154
 8002e98:	4848      	ldr	r0, [pc, #288]	; (8002fbc <main+0x330>)
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8002e9a:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea2:	f006 fa8f 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 8002ea6:	2344      	movs	r3, #68	; 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ea8:	a955      	add	r1, sp, #340	; 0x154
 8002eaa:	4845      	ldr	r0, [pc, #276]	; (8002fc0 <main+0x334>)
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 8002eac:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eb4:	f006 fa86 	bl	80093c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002eb8:	a955      	add	r1, sp, #340	; 0x154
 8002eba:	4841      	ldr	r0, [pc, #260]	; (8002fc0 <main+0x334>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002ebc:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ec4:	f006 fa7e 	bl	80093c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ecc:	a955      	add	r1, sp, #340	; 0x154
 8002ece:	483e      	ldr	r0, [pc, #248]	; (8002fc8 <main+0x33c>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ed0:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	9758      	str	r7, [sp, #352]	; 0x160
  GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8002ed4:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002edc:	f006 fa72 	bl	80093c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8002ee0:	a955      	add	r1, sp, #340	; 0x154
 8002ee2:	4836      	ldr	r0, [pc, #216]	; (8002fbc <main+0x330>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee4:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ee8:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8002eec:	f006 fa6a 	bl	80093c4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ef0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	4639      	mov	r1, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8002efa:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002efc:	632b      	str	r3, [r5, #48]	; 0x30
 8002efe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f0e:	632b      	str	r3, [r5, #48]	; 0x30
 8002f10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  huart2.Init.BaudRate = 115200;
 8002f12:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8002f1e:	f003 ff87 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002f22:	200b      	movs	r0, #11
 8002f24:	f003 ffce 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8002f28:	4622      	mov	r2, r4
 8002f2a:	2106      	movs	r1, #6
 8002f2c:	4650      	mov	r0, sl
 8002f2e:	f003 ff7f 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002f32:	4650      	mov	r0, sl
 8002f34:	f003 ffc6 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8002f38:	4622      	mov	r2, r4
 8002f3a:	2106      	movs	r1, #6
 8002f3c:	2010      	movs	r0, #16
 8002f3e:	f003 ff77 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f42:	2010      	movs	r0, #16
 8002f44:	f003 ffbe 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 8002f48:	4622      	mov	r2, r4
 8002f4a:	4639      	mov	r1, r7
 8002f4c:	202f      	movs	r0, #47	; 0x2f
 8002f4e:	f003 ff6f 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002f52:	202f      	movs	r0, #47	; 0x2f
 8002f54:	f003 ffb6 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8002f58:	4622      	mov	r2, r4
 8002f5a:	2106      	movs	r1, #6
 8002f5c:	2039      	movs	r0, #57	; 0x39
 8002f5e:	f003 ff67 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002f62:	2039      	movs	r0, #57	; 0x39
 8002f64:	f003 ffae 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8002f68:	4622      	mov	r2, r4
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	203c      	movs	r0, #60	; 0x3c
 8002f6e:	f003 ff5f 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002f72:	203c      	movs	r0, #60	; 0x3c
 8002f74:	f003 ffa6 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8002f78:	4814      	ldr	r0, [pc, #80]	; (8002fcc <main+0x340>)
 8002f7a:	f8df c054 	ldr.w	ip, [pc, #84]	; 8002fd0 <main+0x344>
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002f7e:	4623      	mov	r3, r4
 8002f80:	4622      	mov	r2, r4
 8002f82:	4621      	mov	r1, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f84:	f8c0 a014 	str.w	sl, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f88:	6084      	str	r4, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f8a:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f8e:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f92:	e9c0 4408 	strd	r4, r4, [r0, #32]
  huart2.Init.BaudRate = 115200;
 8002f96:	e9c0 c500 	strd	ip, r5, [r0]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002f9a:	f00d fcf1 	bl	8010980 <HAL_RS485Ex_Init>
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	f040 846c 	bne.w	800387c <main+0xbf0>
 8002fa4:	e016      	b.n	8002fd4 <main+0x348>
 8002fa6:	bf00      	nop
 8002fa8:	e000ed00 	.word	0xe000ed00
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021800 	.word	0x40021800
 8002fc4:	40020800 	.word	0x40020800
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	2001b7d0 	.word	0x2001b7d0
 8002fd0:	40004400 	.word	0x40004400
  hadc1.Instance = ADC1;
 8002fd4:	4cb6      	ldr	r4, [pc, #728]	; (80032b0 <main+0x624>)
 8002fd6:	4603      	mov	r3, r0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fd8:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hadc1.Instance = ADC1;
 8002fdc:	49b5      	ldr	r1, [pc, #724]	; (80032b4 <main+0x628>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fde:	4ab6      	ldr	r2, [pc, #728]	; (80032b8 <main+0x62c>)
  ADC_MultiModeTypeDef multimode = {0};
 8002fe0:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fe2:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fe4:	9345      	str	r3, [sp, #276]	; 0x114
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fe6:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fe8:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002fea:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fec:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ff2:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ff4:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002ff6:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002ffa:	6163      	str	r3, [r4, #20]
  hadc1.Instance = ADC1;
 8002ffc:	6021      	str	r1, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ffe:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003000:	6065      	str	r5, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003002:	9348      	str	r3, [sp, #288]	; 0x120
  ADC_MultiModeTypeDef multimode = {0};
 8003004:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
  ADC_ChannelConfTypeDef sConfig = {0};
 8003008:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800300c:	f003 face 	bl	80065ac <HAL_ADC_Init>
 8003010:	2800      	cmp	r0, #0
 8003012:	f040 8433 	bne.w	800387c <main+0xbf0>
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
 800301a:	2217      	movs	r2, #23
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 800301c:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800301e:	a922      	add	r1, sp, #136	; 0x88
 8003020:	4620      	mov	r0, r4
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003022:	9323      	str	r3, [sp, #140]	; 0x8c
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
 8003024:	9222      	str	r2, [sp, #136]	; 0x88
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003026:	f003 fe83 	bl	8006d30 <HAL_ADCEx_MultiModeConfigChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	2800      	cmp	r0, #0
 800302e:	f040 8425 	bne.w	800387c <main+0xbf0>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003032:	4620      	mov	r0, r4
 8003034:	a945      	add	r1, sp, #276	; 0x114
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003036:	9347      	str	r3, [sp, #284]	; 0x11c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003038:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800303c:	f003 fd82 	bl	8006b44 <HAL_ADC_ConfigChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	2800      	cmp	r0, #0
 8003044:	f040 841a 	bne.w	800387c <main+0xbf0>
  hadc2.Instance = ADC2;
 8003048:	4c9c      	ldr	r4, [pc, #624]	; (80032bc <main+0x630>)
 800304a:	4a9d      	ldr	r2, [pc, #628]	; (80032c0 <main+0x634>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800304c:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 800304e:	9341      	str	r3, [sp, #260]	; 0x104
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003050:	6123      	str	r3, [r4, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003052:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003056:	60e3      	str	r3, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003058:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800305c:	6163      	str	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800305e:	9344      	str	r3, [sp, #272]	; 0x110
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003060:	61a6      	str	r6, [r4, #24]
  hadc2.Init.NbrOfConversion = 1;
 8003062:	61e6      	str	r6, [r4, #28]
  hadc2.Instance = ADC2;
 8003064:	6022      	str	r2, [r4, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003066:	e9c4 5301 	strd	r5, r3, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800306a:	e9cd 3342 	strd	r3, r3, [sp, #264]	; 0x108
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800306e:	f003 fa9d 	bl	80065ac <HAL_ADC_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2800      	cmp	r0, #0
 8003076:	f040 8401 	bne.w	800387c <main+0xbf0>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800307a:	4620      	mov	r0, r4
 800307c:	a941      	add	r1, sp, #260	; 0x104
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800307e:	9343      	str	r3, [sp, #268]	; 0x10c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003080:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003084:	f003 fd5e 	bl	8006b44 <HAL_ADC_ConfigChannel>
 8003088:	4603      	mov	r3, r0
 800308a:	2800      	cmp	r0, #0
 800308c:	f040 83f6 	bne.w	800387c <main+0xbf0>
  hadc3.Instance = ADC3;
 8003090:	4c8c      	ldr	r4, [pc, #560]	; (80032c4 <main+0x638>)
 8003092:	4a8d      	ldr	r2, [pc, #564]	; (80032c8 <main+0x63c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003094:	903d      	str	r0, [sp, #244]	; 0xf4
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003096:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003098:	6123      	str	r3, [r4, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800309a:	f884 3020 	strb.w	r3, [r4, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800309e:	60e3      	str	r3, [r4, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80030a0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80030a4:	6163      	str	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80030a6:	9340      	str	r3, [sp, #256]	; 0x100
  hadc3.Init.ContinuousConvMode = ENABLE;
 80030a8:	61a6      	str	r6, [r4, #24]
  hadc3.Init.NbrOfConversion = 1;
 80030aa:	61e6      	str	r6, [r4, #28]
  hadc3.Instance = ADC3;
 80030ac:	6022      	str	r2, [r4, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80030ae:	e9c4 5301 	strd	r5, r3, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80030b2:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80030b6:	f003 fa79 	bl	80065ac <HAL_ADC_Init>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2800      	cmp	r0, #0
 80030be:	f040 83dd 	bne.w	800387c <main+0xbf0>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80030c2:	4620      	mov	r0, r4
 80030c4:	a93d      	add	r1, sp, #244	; 0xf4
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80030c6:	933f      	str	r3, [sp, #252]	; 0xfc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030c8:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80030cc:	f003 fd3a 	bl	8006b44 <HAL_ADC_ConfigChannel>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	f040 83d3 	bne.w	800387c <main+0xbf0>
  hrng.Instance = RNG;
 80030d6:	4b7d      	ldr	r3, [pc, #500]	; (80032cc <main+0x640>)
 80030d8:	487d      	ldr	r0, [pc, #500]	; (80032d0 <main+0x644>)
 80030da:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80030dc:	f009 f828 	bl	800c130 <HAL_RNG_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2800      	cmp	r0, #0
 80030e4:	f040 83ca 	bne.w	800387c <main+0xbf0>
  htim6.Instance = TIM6;
 80030e8:	487a      	ldr	r0, [pc, #488]	; (80032d4 <main+0x648>)
  htim6.Init.Prescaler = 10800;
 80030ea:	f642 2130 	movw	r1, #10800	; 0x2a30
  htim6.Instance = TIM6;
 80030ee:	4c7a      	ldr	r4, [pc, #488]	; (80032d8 <main+0x64c>)
  htim6.Init.Period = 10000;
 80030f0:	f242 7210 	movw	r2, #10000	; 0x2710
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f4:	931f      	str	r3, [sp, #124]	; 0x7c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f6:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030f8:	f8c0 8018 	str.w	r8, [r0, #24]
  htim6.Init.Period = 10000;
 80030fc:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = 10800;
 80030fe:	e9c0 4100 	strd	r4, r1, [r0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003102:	e9cd 3320 	strd	r3, r3, [sp, #128]	; 0x80
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003106:	f00a fe03 	bl	800dd10 <HAL_TIM_Base_Init>
 800310a:	2800      	cmp	r0, #0
 800310c:	f040 83b6 	bne.w	800387c <main+0xbf0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003110:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003112:	2210      	movs	r2, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003114:	a91f      	add	r1, sp, #124	; 0x7c
 8003116:	486f      	ldr	r0, [pc, #444]	; (80032d4 <main+0x648>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003118:	9321      	str	r3, [sp, #132]	; 0x84
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800311a:	921f      	str	r2, [sp, #124]	; 0x7c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800311c:	f00c fa60 	bl	800f5e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003120:	4603      	mov	r3, r0
 8003122:	2800      	cmp	r0, #0
 8003124:	f040 83aa 	bne.w	800387c <main+0xbf0>
  htim3.Instance = TIM3;
 8003128:	4c6c      	ldr	r4, [pc, #432]	; (80032dc <main+0x650>)
  htim3.Init.Prescaler = 10800;
 800312a:	f642 2130 	movw	r1, #10800	; 0x2a30
  htim3.Instance = TIM3;
 800312e:	486c      	ldr	r0, [pc, #432]	; (80032e0 <main+0x654>)
  htim3.Init.Period = 10000;
 8003130:	f242 7210 	movw	r2, #10000	; 0x2710
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003134:	2780      	movs	r7, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003136:	9339      	str	r3, [sp, #228]	; 0xe4
  htim3.Instance = TIM3;
 8003138:	6020      	str	r0, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800313a:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC = {0};
 800313c:	935b      	str	r3, [sp, #364]	; 0x16c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313e:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003140:	6123      	str	r3, [r4, #16]
  htim3.Init.Prescaler = 10800;
 8003142:	6061      	str	r1, [r4, #4]
  htim3.Init.Period = 10000;
 8003144:	60e2      	str	r2, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003146:	61a7      	str	r7, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003148:	933c      	str	r3, [sp, #240]	; 0xf0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314a:	931e      	str	r3, [sp, #120]	; 0x78
  TIM_OC_InitTypeDef sConfigOC = {0};
 800314c:	e9cd 3355 	strd	r3, r3, [sp, #340]	; 0x154
 8003150:	e9cd 3357 	strd	r3, r3, [sp, #348]	; 0x15c
 8003154:	e9cd 3359 	strd	r3, r3, [sp, #356]	; 0x164
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003158:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800315c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003160:	f00a fdd6 	bl	800dd10 <HAL_TIM_Base_Init>
 8003164:	2800      	cmp	r0, #0
 8003166:	f040 8389 	bne.w	800387c <main+0xbf0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800316a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800316e:	a939      	add	r1, sp, #228	; 0xe4
 8003170:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003172:	9639      	str	r6, [sp, #228]	; 0xe4
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003174:	f00a f86a 	bl	800d24c <HAL_TIM_ConfigClockSource>
 8003178:	2800      	cmp	r0, #0
 800317a:	f040 837f 	bne.w	800387c <main+0xbf0>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800317e:	4620      	mov	r0, r4
 8003180:	f00a ff62 	bl	800e048 <HAL_TIM_PWM_Init>
 8003184:	2800      	cmp	r0, #0
 8003186:	f040 8379 	bne.w	800387c <main+0xbf0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800318a:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800318c:	a91c      	add	r1, sp, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800318e:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003190:	4620      	mov	r0, r4
 8003192:	f00c fa25 	bl	800f5e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003196:	2800      	cmp	r0, #0
 8003198:	f040 8370 	bne.w	800387c <main+0xbf0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800319c:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 10;
 800319e:	230a      	movs	r3, #10
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031a0:	9057      	str	r0, [sp, #348]	; 0x15c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031a2:	2204      	movs	r2, #4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a4:	9059      	str	r0, [sp, #356]	; 0x164
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031a6:	a955      	add	r1, sp, #340	; 0x154
 80031a8:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031aa:	9555      	str	r5, [sp, #340]	; 0x154
  sConfigOC.Pulse = 10;
 80031ac:	9356      	str	r3, [sp, #344]	; 0x158
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031ae:	f00b fac9 	bl	800e744 <HAL_TIM_PWM_ConfigChannel>
 80031b2:	4605      	mov	r5, r0
 80031b4:	2800      	cmp	r0, #0
 80031b6:	f040 8361 	bne.w	800387c <main+0xbf0>
  HAL_TIM_MspPostInit(&htim3);
 80031ba:	4620      	mov	r0, r4
  htim7.Instance = TIM7;
 80031bc:	4c49      	ldr	r4, [pc, #292]	; (80032e4 <main+0x658>)
  HAL_TIM_MspPostInit(&htim3);
 80031be:	f001 ffd1 	bl	8005164 <HAL_TIM_MspPostInit>
  htim7.Init.Period = 9600;
 80031c2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  htim7.Instance = TIM7;
 80031c6:	4a48      	ldr	r2, [pc, #288]	; (80032e8 <main+0x65c>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80031c8:	4620      	mov	r0, r4
  htim7.Init.Period = 9600;
 80031ca:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031cc:	61a7      	str	r7, [r4, #24]
  htim7.Instance = TIM7;
 80031ce:	6022      	str	r2, [r4, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d0:	951b      	str	r5, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d2:	e9c4 5501 	strd	r5, r5, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d6:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80031da:	f00a fd99 	bl	800dd10 <HAL_TIM_Base_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2800      	cmp	r0, #0
 80031e2:	f040 834b 	bne.w	800387c <main+0xbf0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80031e6:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80031e8:	4620      	mov	r0, r4
 80031ea:	a919      	add	r1, sp, #100	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ec:	931b      	str	r3, [sp, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80031ee:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80031f0:	f00c f9f6 	bl	800f5e0 <HAL_TIMEx_MasterConfigSynchronization>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2800      	cmp	r0, #0
 80031f8:	f040 8340 	bne.w	800387c <main+0xbf0>
  htim1.Instance = TIM1;
 80031fc:	4c3b      	ldr	r4, [pc, #236]	; (80032ec <main+0x660>)
  htim1.Init.Period = 65535;
 80031fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim1.Instance = TIM1;
 8003202:	493b      	ldr	r1, [pc, #236]	; (80032f0 <main+0x664>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003204:	9035      	str	r0, [sp, #212]	; 0xd4
  htim1.Init.Prescaler = 0;
 8003206:	6060      	str	r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003208:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320a:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800320c:	61a3      	str	r3, [r4, #24]
  htim1.Instance = TIM1;
 800320e:	6021      	str	r1, [r4, #0]
  htim1.Init.Period = 65535;
 8003210:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003212:	9338      	str	r3, [sp, #224]	; 0xe0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003214:	9318      	str	r3, [sp, #96]	; 0x60
  htim1.Init.RepetitionCounter = 0;
 8003216:	e9c4 3304 	strd	r3, r3, [r4, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800321a:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321e:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003222:	f00a fd75 	bl	800dd10 <HAL_TIM_Base_Init>
 8003226:	2800      	cmp	r0, #0
 8003228:	f040 8328 	bne.w	800387c <main+0xbf0>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800322c:	a935      	add	r1, sp, #212	; 0xd4
 800322e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003230:	9635      	str	r6, [sp, #212]	; 0xd4
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003232:	f00a f80b 	bl	800d24c <HAL_TIM_ConfigClockSource>
 8003236:	2800      	cmp	r0, #0
 8003238:	f040 8320 	bne.w	800387c <main+0xbf0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800323e:	a916      	add	r1, sp, #88	; 0x58
 8003240:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003242:	9318      	str	r3, [sp, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003244:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003248:	f00c f9ca 	bl	800f5e0 <HAL_TIMEx_MasterConfigSynchronization>
 800324c:	4602      	mov	r2, r0
 800324e:	2800      	cmp	r0, #0
 8003250:	f040 8314 	bne.w	800387c <main+0xbf0>
  hcrc.Instance = CRC;
 8003254:	4827      	ldr	r0, [pc, #156]	; (80032f4 <main+0x668>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003256:	2501      	movs	r5, #1
  hcrc.Instance = CRC;
 8003258:	4927      	ldr	r1, [pc, #156]	; (80032f8 <main+0x66c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800325a:	8082      	strh	r2, [r0, #4]
  hcrc.Instance = CRC;
 800325c:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800325e:	6205      	str	r5, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003260:	e9c0 2205 	strd	r2, r2, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003264:	f003 fe5c 	bl	8006f20 <HAL_CRC_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2800      	cmp	r0, #0
 800326c:	f040 8306 	bne.w	800387c <main+0xbf0>
  htim2.Instance = TIM2;
 8003270:	4c22      	ldr	r4, [pc, #136]	; (80032fc <main+0x670>)
 8003272:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 4000000000;
 8003276:	4a22      	ldr	r2, [pc, #136]	; (8003300 <main+0x674>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003278:	ae49      	add	r6, sp, #292	; 0x124
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800327a:	902d      	str	r0, [sp, #180]	; 0xb4
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800327c:	9049      	str	r0, [sp, #292]	; 0x124
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800327e:	4620      	mov	r0, r4
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003280:	9331      	str	r3, [sp, #196]	; 0xc4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003282:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003284:	61a3      	str	r3, [r4, #24]
  htim2.Instance = TIM2;
 8003286:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = 4000000000;
 8003288:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800328a:	9330      	str	r3, [sp, #192]	; 0xc0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800328c:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_IC_InitTypeDef sConfigIC = {0};
 800328e:	9334      	str	r3, [sp, #208]	; 0xd0
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003290:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003294:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003298:	e9cd 334a 	strd	r3, r3, [sp, #296]	; 0x128
 800329c:	e9cd 334c 	strd	r3, r3, [sp, #304]	; 0x130
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  TIM_IC_InitTypeDef sConfigIC = {0};
 80032a4:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032a8:	f00a fd32 	bl	800dd10 <HAL_TIM_Base_Init>
 80032ac:	e02a      	b.n	8003304 <main+0x678>
 80032ae:	bf00      	nop
 80032b0:	2001b45c 	.word	0x2001b45c
 80032b4:	40012000 	.word	0x40012000
 80032b8:	0f000001 	.word	0x0f000001
 80032bc:	2001b0fc 	.word	0x2001b0fc
 80032c0:	40012100 	.word	0x40012100
 80032c4:	2001b4a4 	.word	0x2001b4a4
 80032c8:	40012200 	.word	0x40012200
 80032cc:	50060800 	.word	0x50060800
 80032d0:	2001b668 	.word	0x2001b668
 80032d4:	2001b5cc 	.word	0x2001b5cc
 80032d8:	40001000 	.word	0x40001000
 80032dc:	2001b2c8 	.word	0x2001b2c8
 80032e0:	40000400 	.word	0x40000400
 80032e4:	2001b900 	.word	0x2001b900
 80032e8:	40001400 	.word	0x40001400
 80032ec:	2001b618 	.word	0x2001b618
 80032f0:	40010000 	.word	0x40010000
 80032f4:	2001b1a4 	.word	0x2001b1a4
 80032f8:	40023000 	.word	0x40023000
 80032fc:	2001b784 	.word	0x2001b784
 8003300:	ee6b2800 	.word	0xee6b2800
 8003304:	2800      	cmp	r0, #0
 8003306:	f040 82b9 	bne.w	800387c <main+0xbf0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800330a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800330e:	a92d      	add	r1, sp, #180	; 0xb4
 8003310:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003312:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003314:	f009 ff9a 	bl	800d24c <HAL_TIM_ConfigClockSource>
 8003318:	2800      	cmp	r0, #0
 800331a:	f040 82af 	bne.w	800387c <main+0xbf0>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800331e:	4620      	mov	r0, r4
 8003320:	f00a ff60 	bl	800e1e4 <HAL_TIM_IC_Init>
 8003324:	2800      	cmp	r0, #0
 8003326:	f040 82a9 	bne.w	800387c <main+0xbf0>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800332a:	2704      	movs	r7, #4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800332c:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800332e:	904b      	str	r0, [sp, #300]	; 0x12c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003330:	4631      	mov	r1, r6
  sSlaveConfig.TriggerFilter = 0;
 8003332:	904d      	str	r0, [sp, #308]	; 0x134
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003334:	4620      	mov	r0, r4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003336:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800333a:	f00a fa5f 	bl	800d7fc <HAL_TIM_SlaveConfigSynchro>
 800333e:	2800      	cmp	r0, #0
 8003340:	f040 829c 	bne.w	800387c <main+0xbf0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003344:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003346:	a913      	add	r1, sp, #76	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003348:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800334a:	4620      	mov	r0, r4
 800334c:	f00c f948 	bl	800f5e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003350:	4602      	mov	r2, r0
 8003352:	2800      	cmp	r0, #0
 8003354:	f040 8292 	bne.w	800387c <main+0xbf0>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003358:	a931      	add	r1, sp, #196	; 0xc4
 800335a:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800335c:	e9cd 2531 	strd	r2, r5, [sp, #196]	; 0xc4
  sConfigIC.ICFilter = 0;
 8003360:	e9cd 2233 	strd	r2, r2, [sp, #204]	; 0xcc
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003364:	f00b fc10 	bl	800eb88 <HAL_TIM_IC_ConfigChannel>
 8003368:	2800      	cmp	r0, #0
 800336a:	f040 8287 	bne.w	800387c <main+0xbf0>
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800336e:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003370:	463a      	mov	r2, r7
 8003372:	a931      	add	r1, sp, #196	; 0xc4
 8003374:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003376:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003378:	f00b fc06 	bl	800eb88 <HAL_TIM_IC_ConfigChannel>
 800337c:	2800      	cmp	r0, #0
 800337e:	f040 827d 	bne.w	800387c <main+0xbf0>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003382:	a931      	add	r1, sp, #196	; 0xc4
 8003384:	4620      	mov	r0, r4
 8003386:	2208      	movs	r2, #8
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003388:	9532      	str	r5, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800338a:	f00b fbfd 	bl	800eb88 <HAL_TIM_IC_ConfigChannel>
 800338e:	2800      	cmp	r0, #0
 8003390:	f040 8274 	bne.w	800387c <main+0xbf0>
  huart6.Instance = USART6;
 8003394:	48c4      	ldr	r0, [pc, #784]	; (80036a8 <main+0xa1c>)
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  huart6.Instance = USART6;
 800339a:	4bc4      	ldr	r3, [pc, #784]	; (80036ac <main+0xa20>)
  huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800339c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80033a0:	2430      	movs	r4, #48	; 0x30
  huart6.Init.BaudRate = 9600;
 80033a2:	f44f 5816 	mov.w	r8, #9600	; 0x2580
  huart6.Instance = USART6;
 80033a6:	6003      	str	r3, [r0, #0]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80033a8:	250c      	movs	r5, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033aa:	2300      	movs	r3, #0
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80033ac:	6244      	str	r4, [r0, #36]	; 0x24
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80033ae:	6381      	str	r1, [r0, #56]	; 0x38
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033b0:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80033b2:	63c2      	str	r2, [r0, #60]	; 0x3c
  huart6.Init.Mode = UART_MODE_TX_RX;
 80033b4:	6145      	str	r5, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033b6:	e9c0 8301 	strd	r8, r3, [r0, #4]
  huart6.Init.Parity = UART_PARITY_NONE;
 80033ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80033be:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80033c2:	f00d f963 	bl	801068c <HAL_UART_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2800      	cmp	r0, #0
 80033ca:	f040 8257 	bne.w	800387c <main+0xbf0>
  hdac.Instance = DAC;
 80033ce:	4cb8      	ldr	r4, [pc, #736]	; (80036b0 <main+0xa24>)
 80033d0:	4ab8      	ldr	r2, [pc, #736]	; (80036b4 <main+0xa28>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80033d2:	4620      	mov	r0, r4
  DAC_ChannelConfTypeDef sConfig = {0};
 80033d4:	930b      	str	r3, [sp, #44]	; 0x2c
  hdac.Instance = DAC;
 80033d6:	6022      	str	r2, [r4, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 80033d8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80033da:	f003 fe5b 	bl	8007094 <HAL_DAC_Init>
 80033de:	4602      	mov	r2, r0
 80033e0:	2800      	cmp	r0, #0
 80033e2:	f040 824b 	bne.w	800387c <main+0xbf0>
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80033e6:	2314      	movs	r3, #20
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80033e8:	4620      	mov	r0, r4
 80033ea:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80033ec:	920c      	str	r2, [sp, #48]	; 0x30
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80033ee:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80033f0:	f003 ffac 	bl	800734c <HAL_DAC_ConfigChannel>
 80033f4:	4607      	mov	r7, r0
 80033f6:	2800      	cmp	r0, #0
 80033f8:	f040 8240 	bne.w	800387c <main+0xbf0>
  hi2c1.Instance = I2C1;
 80033fc:	4cae      	ldr	r4, [pc, #696]	; (80036b8 <main+0xa2c>)
  MX_FATFS_Init();
 80033fe:	f00e f925 	bl	801164c <MX_FATFS_Init>
  hi2c1.Instance = I2C1;
 8003402:	49ae      	ldr	r1, [pc, #696]	; (80036bc <main+0xa30>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003404:	2301      	movs	r3, #1
  hi2c1.Init.Timing = 0x20404768;
 8003406:	4aae      	ldr	r2, [pc, #696]	; (80036c0 <main+0xa34>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003408:	4620      	mov	r0, r4
  hi2c1.Init.OwnAddress1 = 0;
 800340a:	60a7      	str	r7, [r4, #8]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800340c:	6227      	str	r7, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800340e:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.Timing = 0x20404768;
 8003410:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c1.Init.OwnAddress2 = 0;
 8003414:	e9c4 7704 	strd	r7, r7, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003418:	e9c4 7706 	strd	r7, r7, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800341c:	f006 fc84 	bl	8009d28 <HAL_I2C_Init>
 8003420:	4601      	mov	r1, r0
 8003422:	2800      	cmp	r0, #0
 8003424:	f040 822a 	bne.w	800387c <main+0xbf0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003428:	4620      	mov	r0, r4
 800342a:	f006 fedf 	bl	800a1ec <HAL_I2CEx_ConfigAnalogFilter>
 800342e:	4601      	mov	r1, r0
 8003430:	2800      	cmp	r0, #0
 8003432:	f040 8223 	bne.w	800387c <main+0xbf0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003436:	4620      	mov	r0, r4
 8003438:	f006 ff2a 	bl	800a290 <HAL_I2CEx_ConfigDigitalFilter>
 800343c:	2800      	cmp	r0, #0
 800343e:	f040 821d 	bne.w	800387c <main+0xbf0>
  huart4.Instance = UART4;
 8003442:	4ba0      	ldr	r3, [pc, #640]	; (80036c4 <main+0xa38>)
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003444:	f44f 7240 	mov.w	r2, #768	; 0x300
  huart4.Instance = UART4;
 8003448:	499f      	ldr	r1, [pc, #636]	; (80036c8 <main+0xa3c>)
  huart4.Init.BaudRate = 115200;
 800344a:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800344e:	6258      	str	r0, [r3, #36]	; 0x24
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003450:	619a      	str	r2, [r3, #24]
  huart4.Instance = UART4;
 8003452:	6019      	str	r1, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003454:	605f      	str	r7, [r3, #4]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003456:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800345a:	e9c3 0504 	strd	r0, r5, [r3, #16]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800345e:	e9c3 0007 	strd	r0, r0, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003462:	4618      	mov	r0, r3
 8003464:	f00d f912 	bl	801068c <HAL_UART_Init>
 8003468:	4602      	mov	r2, r0
 800346a:	2800      	cmp	r0, #0
 800346c:	f040 8206 	bne.w	800387c <main+0xbf0>
  huart5.Instance = UART5;
 8003470:	4896      	ldr	r0, [pc, #600]	; (80036cc <main+0xa40>)
 8003472:	4997      	ldr	r1, [pc, #604]	; (80036d0 <main+0xa44>)
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003474:	6242      	str	r2, [r0, #36]	; 0x24
  huart5.Instance = UART5;
 8003476:	6001      	str	r1, [r0, #0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003478:	e9c0 8201 	strd	r8, r2, [r0, #4]
  huart5.Init.Parity = UART_PARITY_NONE;
 800347c:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003480:	e9c0 5205 	strd	r5, r2, [r0, #20]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003484:	e9c0 2207 	strd	r2, r2, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003488:	f00d f900 	bl	801068c <HAL_UART_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2800      	cmp	r0, #0
 8003490:	f040 81f4 	bne.w	800387c <main+0xbf0>
  huart7.Instance = UART7;
 8003494:	488f      	ldr	r0, [pc, #572]	; (80036d4 <main+0xa48>)
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8003496:	461a      	mov	r2, r3
  huart7.Instance = UART7;
 8003498:	4c8f      	ldr	r4, [pc, #572]	; (80036d8 <main+0xa4c>)
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800349a:	4619      	mov	r1, r3
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800349c:	6243      	str	r3, [r0, #36]	; 0x24
  huart7.Instance = UART7;
 800349e:	6004      	str	r4, [r0, #0]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80034a0:	e9c0 7301 	strd	r7, r3, [r0, #4]
  huart7.Init.Parity = UART_PARITY_NONE;
 80034a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034a8:	e9c0 5305 	strd	r5, r3, [r0, #20]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ac:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80034b0:	f00d fa66 	bl	8010980 <HAL_RS485Ex_Init>
 80034b4:	4602      	mov	r2, r0
 80034b6:	2800      	cmp	r0, #0
 80034b8:	f040 81e0 	bne.w	800387c <main+0xbf0>
  huart3.Instance = USART3;
 80034bc:	4887      	ldr	r0, [pc, #540]	; (80036dc <main+0xa50>)
 80034be:	f5a4 5440 	sub.w	r4, r4, #12288	; 0x3000
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80034c2:	4611      	mov	r1, r2
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034c4:	6145      	str	r5, [r0, #20]
  huart3.Instance = USART3;
 80034c6:	6004      	str	r4, [r0, #0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034c8:	e9c0 7201 	strd	r7, r2, [r0, #4]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034cc:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d0:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034d4:	e9c0 2208 	strd	r2, r2, [r0, #32]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80034d8:	f00d f986 	bl	80107e8 <HAL_MultiProcessor_Init>
 80034dc:	2800      	cmp	r0, #0
 80034de:	f040 81cd 	bne.w	800387c <main+0xbf0>
  hspi4.Instance = SPI4;
 80034e2:	487f      	ldr	r0, [pc, #508]	; (80036e0 <main+0xa54>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80034e4:	2300      	movs	r3, #0
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80034e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi4.Instance = SPI4;
 80034ea:	497e      	ldr	r1, [pc, #504]	; (80036e4 <main+0xa58>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80034ec:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80034f0:	f44f 7940 	mov.w	r9, #768	; 0x300
  hspi4.Init.CRCPolynomial = 7;
 80034f4:	2707      	movs	r7, #7
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034f6:	2408      	movs	r4, #8
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80034f8:	6182      	str	r2, [r0, #24]
  hspi4.Instance = SPI4;
 80034fa:	6001      	str	r1, [r0, #0]
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034fc:	6303      	str	r3, [r0, #48]	; 0x30
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80034fe:	f8c0 900c 	str.w	r9, [r0, #12]
  hspi4.Init.CRCPolynomial = 7;
 8003502:	62c7      	str	r7, [r0, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003504:	6344      	str	r4, [r0, #52]	; 0x34
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003506:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800350a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800350e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003512:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003516:	f008 ff3f 	bl	800c398 <HAL_SPI_Init>
 800351a:	4602      	mov	r2, r0
 800351c:	2800      	cmp	r0, #0
 800351e:	f040 81ad 	bne.w	800387c <main+0xbf0>
  hspi3.Instance = SPI3;
 8003522:	4871      	ldr	r0, [pc, #452]	; (80036e8 <main+0xa5c>)
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003524:	f44f 7800 	mov.w	r8, #512	; 0x200
  hspi3.Instance = SPI3;
 8003528:	4970      	ldr	r1, [pc, #448]	; (80036ec <main+0xa60>)
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800352a:	6142      	str	r2, [r0, #20]
  hspi3.Instance = SPI3;
 800352c:	6001      	str	r1, [r0, #0]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800352e:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003532:	e9c0 2201 	strd	r2, r2, [r0, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003536:	e9c0 9203 	strd	r9, r2, [r0, #12]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800353a:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi3.Init.CRCPolynomial = 7;
 800353e:	e9c0 270a 	strd	r2, r7, [r0, #40]	; 0x28
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003542:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003546:	f008 ff27 	bl	800c398 <HAL_SPI_Init>
 800354a:	4602      	mov	r2, r0
 800354c:	2800      	cmp	r0, #0
 800354e:	f040 8195 	bne.w	800387c <main+0xbf0>
  hspi2.Instance = SPI2;
 8003552:	4867      	ldr	r0, [pc, #412]	; (80036f0 <main+0xa64>)
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003554:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  hspi2.Instance = SPI2;
 8003558:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8003710 <main+0xa84>
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800355c:	2138      	movs	r1, #56	; 0x38
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800355e:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003560:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi2.Instance = SPI2;
 8003564:	f8c0 e000 	str.w	lr, [r0]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003568:	61c1      	str	r1, [r0, #28]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800356a:	e9c0 5201 	strd	r5, r2, [r0, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800356e:	e9c0 2204 	strd	r2, r2, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003572:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi2.Init.CRCPolynomial = 7;
 8003576:	e9c0 270a 	strd	r2, r7, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800357a:	e9c0 240c 	strd	r2, r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800357e:	f008 ff0b 	bl	800c398 <HAL_SPI_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2800      	cmp	r0, #0
 8003586:	f040 8179 	bne.w	800387c <main+0xbf0>
  hi2c4.Instance = I2C4;
 800358a:	4c5a      	ldr	r4, [pc, #360]	; (80036f4 <main+0xa68>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800358c:	2501      	movs	r5, #1
  hi2c4.Instance = I2C4;
 800358e:	4a5a      	ldr	r2, [pc, #360]	; (80036f8 <main+0xa6c>)
  hi2c4.Init.Timing = 0x20404768;
 8003590:	4f4b      	ldr	r7, [pc, #300]	; (80036c0 <main+0xa34>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003592:	4620      	mov	r0, r4
  hi2c4.Init.OwnAddress1 = 0;
 8003594:	60a3      	str	r3, [r4, #8]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003596:	6223      	str	r3, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003598:	60e5      	str	r5, [r4, #12]
  hi2c4.Init.OwnAddress2 = 0;
 800359a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800359e:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c4.Init.Timing = 0x20404768;
 80035a2:	e9c4 2700 	strd	r2, r7, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80035a6:	f006 fbbf 	bl	8009d28 <HAL_I2C_Init>
 80035aa:	4601      	mov	r1, r0
 80035ac:	2800      	cmp	r0, #0
 80035ae:	f040 8165 	bne.w	800387c <main+0xbf0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035b2:	4620      	mov	r0, r4
 80035b4:	f006 fe1a 	bl	800a1ec <HAL_I2CEx_ConfigAnalogFilter>
 80035b8:	4601      	mov	r1, r0
 80035ba:	2800      	cmp	r0, #0
 80035bc:	f040 815e 	bne.w	800387c <main+0xbf0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80035c0:	4620      	mov	r0, r4
 80035c2:	f006 fe65 	bl	800a290 <HAL_I2CEx_ConfigDigitalFilter>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2800      	cmp	r0, #0
 80035ca:	f040 8157 	bne.w	800387c <main+0xbf0>
  hi2c2.Instance = I2C2;
 80035ce:	4c4b      	ldr	r4, [pc, #300]	; (80036fc <main+0xa70>)
 80035d0:	4a4b      	ldr	r2, [pc, #300]	; (8003700 <main+0xa74>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80035d2:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x20404768;
 80035d4:	6067      	str	r7, [r4, #4]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035d6:	6223      	str	r3, [r4, #32]
  hi2c2.Instance = I2C2;
 80035d8:	6022      	str	r2, [r4, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035da:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 80035de:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035e2:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80035e6:	f006 fb9f 	bl	8009d28 <HAL_I2C_Init>
 80035ea:	4601      	mov	r1, r0
 80035ec:	2800      	cmp	r0, #0
 80035ee:	f040 8145 	bne.w	800387c <main+0xbf0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035f2:	4620      	mov	r0, r4
 80035f4:	f006 fdfa 	bl	800a1ec <HAL_I2CEx_ConfigAnalogFilter>
 80035f8:	4601      	mov	r1, r0
 80035fa:	2800      	cmp	r0, #0
 80035fc:	f040 813e 	bne.w	800387c <main+0xbf0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003600:	4620      	mov	r0, r4
 8003602:	f006 fe45 	bl	800a290 <HAL_I2CEx_ConfigDigitalFilter>
 8003606:	4603      	mov	r3, r0
 8003608:	2800      	cmp	r0, #0
 800360a:	f040 8137 	bne.w	800387c <main+0xbf0>
  htim4.Instance = TIM4;
 800360e:	483d      	ldr	r0, [pc, #244]	; (8003704 <main+0xa78>)
  htim4.Init.Period = 1100;
 8003610:	f240 414c 	movw	r1, #1100	; 0x44c
  htim4.Instance = TIM4;
 8003614:	4c3c      	ldr	r4, [pc, #240]	; (8003708 <main+0xa7c>)
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003616:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003618:	9329      	str	r3, [sp, #164]	; 0xa4
  TIM_OC_InitTypeDef sConfigOC = {0};
 800361a:	934e      	str	r3, [sp, #312]	; 0x138
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361c:	6103      	str	r3, [r0, #16]
  htim4.Instance = TIM4;
 800361e:	6004      	str	r4, [r0, #0]
  htim4.Init.Period = 1100;
 8003620:	60c1      	str	r1, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003622:	6182      	str	r2, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003624:	932c      	str	r3, [sp, #176]	; 0xb0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003626:	9312      	str	r3, [sp, #72]	; 0x48
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003628:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800362c:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003630:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003634:	e9cd 334f 	strd	r3, r3, [sp, #316]	; 0x13c
 8003638:	e9cd 3351 	strd	r3, r3, [sp, #324]	; 0x144
 800363c:	e9cd 3353 	strd	r3, r3, [sp, #332]	; 0x14c
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003640:	f00a fb66 	bl	800dd10 <HAL_TIM_Base_Init>
 8003644:	2800      	cmp	r0, #0
 8003646:	f040 8119 	bne.w	800387c <main+0xbf0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800364a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800364e:	a929      	add	r1, sp, #164	; 0xa4
 8003650:	482c      	ldr	r0, [pc, #176]	; (8003704 <main+0xa78>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003652:	9529      	str	r5, [sp, #164]	; 0xa4
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003654:	f009 fdfa 	bl	800d24c <HAL_TIM_ConfigClockSource>
 8003658:	2800      	cmp	r0, #0
 800365a:	f040 810f 	bne.w	800387c <main+0xbf0>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800365e:	4829      	ldr	r0, [pc, #164]	; (8003704 <main+0xa78>)
 8003660:	f00a fc24 	bl	800deac <HAL_TIM_OC_Init>
 8003664:	2800      	cmp	r0, #0
 8003666:	f040 8109 	bne.w	800387c <main+0xbf0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800366a:	2430      	movs	r4, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366c:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800366e:	a910      	add	r1, sp, #64	; 0x40
 8003670:	4824      	ldr	r0, [pc, #144]	; (8003704 <main+0xa78>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003672:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003674:	f00b ffb4 	bl	800f5e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003678:	2800      	cmp	r0, #0
 800367a:	f040 80ff 	bne.w	800387c <main+0xbf0>
  sConfigOC.Pulse = 550;
 800367e:	f240 2326 	movw	r3, #550	; 0x226
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003682:	9050      	str	r0, [sp, #320]	; 0x140
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003684:	9052      	str	r0, [sp, #328]	; 0x148
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003686:	2208      	movs	r2, #8
 8003688:	a94e      	add	r1, sp, #312	; 0x138
 800368a:	481e      	ldr	r0, [pc, #120]	; (8003704 <main+0xa78>)
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800368c:	944e      	str	r4, [sp, #312]	; 0x138
  sConfigOC.Pulse = 550;
 800368e:	934f      	str	r3, [sp, #316]	; 0x13c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003690:	f00a fedc 	bl	800e44c <HAL_TIM_OC_ConfigChannel>
 8003694:	4604      	mov	r4, r0
 8003696:	2800      	cmp	r0, #0
 8003698:	f040 80f0 	bne.w	800387c <main+0xbf0>
  HAL_TIM_MspPostInit(&htim4);
 800369c:	4819      	ldr	r0, [pc, #100]	; (8003704 <main+0xa78>)
 800369e:	f001 fd61 	bl	8005164 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <main+0xa80>)
 80036a4:	e036      	b.n	8003714 <main+0xa88>
 80036a6:	bf00      	nop
 80036a8:	2001b678 	.word	0x2001b678
 80036ac:	40011400 	.word	0x40011400
 80036b0:	2001b4ec 	.word	0x2001b4ec
 80036b4:	40007400 	.word	0x40007400
 80036b8:	2001b144 	.word	0x2001b144
 80036bc:	40005400 	.word	0x40005400
 80036c0:	20404768 	.word	0x20404768
 80036c4:	2001b6fc 	.word	0x2001b6fc
 80036c8:	40004c00 	.word	0x40004c00
 80036cc:	2001b3d8 	.word	0x2001b3d8
 80036d0:	40005000 	.word	0x40005000
 80036d4:	2001afa8 	.word	0x2001afa8
 80036d8:	40007800 	.word	0x40007800
 80036dc:	2001b078 	.word	0x2001b078
 80036e0:	2001b504 	.word	0x2001b504
 80036e4:	40013400 	.word	0x40013400
 80036e8:	2001b314 	.word	0x2001b314
 80036ec:	40003c00 	.word	0x40003c00
 80036f0:	2001af44 	.word	0x2001af44
 80036f4:	2001ae98 	.word	0x2001ae98
 80036f8:	40006000 	.word	0x40006000
 80036fc:	2001b1c8 	.word	0x2001b1c8
 8003700:	40005800 	.word	0x40005800
 8003704:	2001b02c 	.word	0x2001b02c
 8003708:	40000800 	.word	0x40000800
 800370c:	2001b8b4 	.word	0x2001b8b4
 8003710:	40003800 	.word	0x40003800
 8003714:	485a      	ldr	r0, [pc, #360]	; (8003880 <main+0xbf4>)
  htim14.Init.Period = 10800;
 8003716:	f642 2130 	movw	r1, #10800	; 0x2a30
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800371a:	2280      	movs	r2, #128	; 0x80
  htim14.Init.Prescaler = 0;
 800371c:	605c      	str	r4, [r3, #4]
  htim14.Instance = TIM14;
 800371e:	6018      	str	r0, [r3, #0]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003720:	4618      	mov	r0, r3
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003722:	609c      	str	r4, [r3, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003724:	611c      	str	r4, [r3, #16]
  htim14.Init.Period = 10800;
 8003726:	60d9      	str	r1, [r3, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800372a:	f00a faf1 	bl	800dd10 <HAL_TIM_Base_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2800      	cmp	r0, #0
 8003732:	f040 80a3 	bne.w	800387c <main+0xbf0>
  htim5.Instance = TIM5;
 8003736:	4c53      	ldr	r4, [pc, #332]	; (8003884 <main+0xbf8>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003738:	2110      	movs	r1, #16
  htim5.Init.Period = 4;
 800373a:	2204      	movs	r2, #4
  htim5.Instance = TIM5;
 800373c:	4f52      	ldr	r7, [pc, #328]	; (8003888 <main+0xbfc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800373e:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003740:	4620      	mov	r0, r4
  htim5.Init.Prescaler = 0;
 8003742:	6063      	str	r3, [r4, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003744:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003746:	61a3      	str	r3, [r4, #24]
  htim5.Instance = TIM5;
 8003748:	6027      	str	r7, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800374a:	9328      	str	r3, [sp, #160]	; 0xa0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800374c:	930f      	str	r3, [sp, #60]	; 0x3c
  htim5.Init.Period = 4;
 800374e:	e9c4 1202 	strd	r1, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003752:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003756:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800375a:	f00a fad9 	bl	800dd10 <HAL_TIM_Base_Init>
 800375e:	2800      	cmp	r0, #0
 8003760:	f040 808c 	bne.w	800387c <main+0xbf0>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003764:	a925      	add	r1, sp, #148	; 0x94
 8003766:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003768:	9525      	str	r5, [sp, #148]	; 0x94
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800376a:	f009 fd6f 	bl	800d24c <HAL_TIM_ConfigClockSource>
 800376e:	4603      	mov	r3, r0
 8003770:	2800      	cmp	r0, #0
 8003772:	f040 8083 	bne.w	800387c <main+0xbf0>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003776:	4620      	mov	r0, r4
 8003778:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800377a:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800377c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800377e:	f00b ff2f 	bl	800f5e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003782:	4604      	mov	r4, r0
 8003784:	2800      	cmp	r0, #0
 8003786:	d179      	bne.n	800387c <main+0xbf0>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003788:	683b      	ldr	r3, [r7, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 800378a:	4602      	mov	r2, r0
 800378c:	2107      	movs	r1, #7
 800378e:	2026      	movs	r0, #38	; 0x26
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003790:	f043 0308 	orr.w	r3, r3, #8
  osMessageQDef(myQueue01, 256, uint16_t);
 8003794:	4d3d      	ldr	r5, [pc, #244]	; (800388c <main+0xc00>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003796:	603b      	str	r3, [r7, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003798:	f003 fb4a 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800379c:	2026      	movs	r0, #38	; 0x26
 800379e:	f003 fb91 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80037a2:	4622      	mov	r2, r4
 80037a4:	2106      	movs	r1, #6
 80037a6:	2047      	movs	r0, #71	; 0x47
 80037a8:	f003 fb42 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80037ac:	2047      	movs	r0, #71	; 0x47
 80037ae:	f003 fb89 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80037b2:	4622      	mov	r2, r4
 80037b4:	2106      	movs	r1, #6
 80037b6:	2012      	movs	r0, #18
 80037b8:	f003 fb3a 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80037bc:	2012      	movs	r0, #18
 80037be:	f003 fb81 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80037c2:	4622      	mov	r2, r4
 80037c4:	2106      	movs	r1, #6
 80037c6:	2028      	movs	r0, #40	; 0x28
 80037c8:	f003 fb32 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037cc:	2028      	movs	r0, #40	; 0x28
 80037ce:	f003 fb79 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 80037d2:	4622      	mov	r2, r4
 80037d4:	2101      	movs	r1, #1
 80037d6:	202d      	movs	r0, #45	; 0x2d
 80037d8:	f003 fb2a 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80037dc:	202d      	movs	r0, #45	; 0x2d
 80037de:	f003 fb71 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80037e2:	a83d      	add	r0, sp, #244	; 0xf4
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80037e4:	4f2a      	ldr	r7, [pc, #168]	; (8003890 <main+0xc04>)
  osMutexDef(myMutex01);
 80037e6:	e9cd 443d 	strd	r4, r4, [sp, #244]	; 0xf4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80037ea:	f00f f931 	bl	8012a50 <osMutexCreate>
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <main+0xc08>)
 80037f0:	4602      	mov	r2, r0
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80037f2:	2101      	movs	r1, #1
 80037f4:	a841      	add	r0, sp, #260	; 0x104
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80037f6:	601a      	str	r2, [r3, #0]
  osSemaphoreDef(ssicontent);
 80037f8:	e9cd 4441 	strd	r4, r4, [sp, #260]	; 0x104
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80037fc:	f00f f984 	bl	8012b08 <osSemaphoreCreate>
  osTimerDef(myTimer01, Callback01);
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <main+0xc0c>)
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003802:	4684      	mov	ip, r0
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003804:	4622      	mov	r2, r4
 8003806:	2101      	movs	r1, #1
 8003808:	a845      	add	r0, sp, #276	; 0x114
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800380a:	f8c7 c000 	str.w	ip, [r7]
  osTimerDef(myTimer01, Callback01);
 800380e:	9345      	str	r3, [sp, #276]	; 0x114
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003810:	4f22      	ldr	r7, [pc, #136]	; (800389c <main+0xc10>)
  osTimerDef(myTimer01, Callback01);
 8003812:	9446      	str	r4, [sp, #280]	; 0x118
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003814:	f00f f8f8 	bl	8012a08 <osTimerCreate>
 8003818:	4684      	mov	ip, r0
  osMessageQDef(myQueue01, 256, uint16_t);
 800381a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800381e:	f8c7 c000 	str.w	ip, [r7]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003822:	f105 0710 	add.w	r7, r5, #16
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003826:	352c      	adds	r5, #44	; 0x2c
  osMessageQDef(myQueue01, 256, uint16_t);
 8003828:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800382c:	4630      	mov	r0, r6
 800382e:	4621      	mov	r1, r4
 8003830:	f00f f9be 	bl	8012bb0 <osMessageCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003834:	ae4e      	add	r6, sp, #312	; 0x138
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003836:	4686      	mov	lr, r0
 8003838:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80038a8 <main+0xc1c>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 800383c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800383e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003840:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003844:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003848:	4621      	mov	r1, r4
 800384a:	a84e      	add	r0, sp, #312	; 0x138
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800384c:	f8cc e000 	str.w	lr, [ip]
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003850:	ae55      	add	r6, sp, #340	; 0x154
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003852:	f00f f8a5 	bl	80129a0 <osThreadCreate>
 8003856:	4684      	mov	ip, r0
 8003858:	4f11      	ldr	r7, [pc, #68]	; (80038a0 <main+0xc14>)
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 800385a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800385c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800385e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003862:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8003866:	4621      	mov	r1, r4
 8003868:	a855      	add	r0, sp, #340	; 0x154
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800386a:	f8c7 c000 	str.w	ip, [r7]
  LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 800386e:	f00f f897 	bl	80129a0 <osThreadCreate>
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <main+0xc18>)
 8003874:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003876:	f00f f885 	bl	8012984 <osKernelStart>
	while (1) {
 800387a:	e7fe      	b.n	800387a <main+0xbee>
    Error_Handler();
 800387c:	f7ff f98a 	bl	8002b94 <Error_Handler>
 8003880:	40002000 	.word	0x40002000
 8003884:	2001b21c 	.word	0x2001b21c
 8003888:	40000c00 	.word	0x40000c00
 800388c:	08026690 	.word	0x08026690
 8003890:	2001b5c8 	.word	0x2001b5c8
 8003894:	2001b94c 	.word	0x2001b94c
 8003898:	080020ad 	.word	0x080020ad
 800389c:	2001b664 	.word	0x2001b664
 80038a0:	2001ae94 	.word	0x2001ae94
 80038a4:	2001b190 	.word	0x2001b190
 80038a8:	2001b780 	.word	0x2001b780

080038ac <StartDefaultTask>:
{
 80038ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ae:	b085      	sub	sp, #20
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 80038b0:	f242 761e 	movw	r6, #10014	; 0x271e
  MX_USB_DEVICE_Init();
 80038b4:	f01d fa82 	bl	8020dbc <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 80038b8:	250c      	movs	r5, #12
  MX_LWIP_Init();
 80038ba:	f00d feeb 	bl	8011694 <MX_LWIP_Init>
	printf("\n\n-------------------------------------------------------------------\n");
 80038be:	487d      	ldr	r0, [pc, #500]	; (8003ab4 <StartDefaultTask+0x208>)
 80038c0:	f01e fe9c 	bl	80225fc <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 80038c4:	2400      	movs	r4, #0
 80038c6:	4b7c      	ldr	r3, [pc, #496]	; (8003ab8 <StartDefaultTask+0x20c>)
 80038c8:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <StartDefaultTask+0x210>)
 80038ca:	497d      	ldr	r1, [pc, #500]	; (8003ac0 <StartDefaultTask+0x214>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	6809      	ldr	r1, [r1, #0]
 80038d2:	487c      	ldr	r0, [pc, #496]	; (8003ac4 <StartDefaultTask+0x218>)
 80038d4:	9400      	str	r4, [sp, #0]
 80038d6:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80038da:	f01e fdf3 	bl	80224c4 <iprintf>
	if (!(netif_is_link_up(&gnetif))) {
 80038de:	4b7a      	ldr	r3, [pc, #488]	; (8003ac8 <StartDefaultTask+0x21c>)
 80038e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e4:	075b      	lsls	r3, r3, #29
 80038e6:	d41d      	bmi.n	8003924 <StartDefaultTask+0x78>
		printf("LAN interface appears disconnected\n\r");
 80038e8:	4878      	ldr	r0, [pc, #480]	; (8003acc <StartDefaultTask+0x220>)
 80038ea:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80038ec:	4d78      	ldr	r5, [pc, #480]	; (8003ad0 <StartDefaultTask+0x224>)
		printf("LAN interface appears disconnected\n\r");
 80038ee:	f01e fde9 	bl	80224c4 <iprintf>
			osDelay(50);
 80038f2:	2032      	movs	r0, #50	; 0x32
 80038f4:	f00f f880 	bl	80129f8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80038f8:	2201      	movs	r2, #1
 80038fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038fe:	4628      	mov	r0, r5
 8003900:	f006 f80e 	bl	8009920 <HAL_GPIO_WritePin>
			osDelay(50);
 8003904:	2032      	movs	r0, #50	; 0x32
 8003906:	f00f f877 	bl	80129f8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 800390a:	2200      	movs	r2, #0
 800390c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003910:	4628      	mov	r0, r5
 8003912:	f006 f805 	bl	8009920 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8003916:	3c01      	subs	r4, #1
 8003918:	d1eb      	bne.n	80038f2 <StartDefaultTask+0x46>
		printf("************* REBOOTING **************\n");
 800391a:	486e      	ldr	r0, [pc, #440]	; (8003ad4 <StartDefaultTask+0x228>)
 800391c:	f01e fe6e 	bl	80225fc <puts>
		rebootme();
 8003920:	f7ff f848 	bl	80029b4 <rebootme>
	netif = netif_default;
 8003924:	4b6c      	ldr	r3, [pc, #432]	; (8003ad8 <StartDefaultTask+0x22c>)
 8003926:	4f6d      	ldr	r7, [pc, #436]	; (8003adc <StartDefaultTask+0x230>)
 8003928:	6818      	ldr	r0, [r3, #0]
	globalfreeze = 0;		// Allow UDP streaming
 800392a:	4b6d      	ldr	r3, [pc, #436]	; (8003ae0 <StartDefaultTask+0x234>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 800392c:	496d      	ldr	r1, [pc, #436]	; (8003ae4 <StartDefaultTask+0x238>)
	globalfreeze = 0;		// Allow UDP streaming
 800392e:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 8003930:	6038      	str	r0, [r7, #0]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8003932:	f014 fbcd 	bl	80180d0 <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8003936:	6838      	ldr	r0, [r7, #0]
 8003938:	496b      	ldr	r1, [pc, #428]	; (8003ae8 <StartDefaultTask+0x23c>)
 800393a:	f014 fb85 	bl	8018048 <netif_set_status_callback>
	statuspkt.uid = BUILDNO;		// 16 bits
 800393e:	4b6b      	ldr	r3, [pc, #428]	; (8003aec <StartDefaultTask+0x240>)
	statuspkt.adctrigoff = TRIG_THRES;
 8003940:	2264      	movs	r2, #100	; 0x64
	t2cap[0] = 44444444;
 8003942:	496b      	ldr	r1, [pc, #428]	; (8003af0 <StartDefaultTask+0x244>)
	statuspkt.uid = BUILDNO;		// 16 bits
 8003944:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
	statuspkt.majorversion = MAJORVERSION;
 8003948:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 800394c:	f883 5071 	strb.w	r5, [r3, #113]	; 0x71
	statuspkt.udppknum = 0;
 8003950:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8003952:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8003954:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8003956:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8003958:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 800395c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003960:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003962:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8003964:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8003968:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 800396c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8003970:	4860      	ldr	r0, [pc, #384]	; (8003af4 <StartDefaultTask+0x248>)
	statuspkt.bconf |= 0x01;	// splat board version 1
 8003972:	f042 0201 	orr.w	r2, r2, #1
	t2cap[0] = 44444444;
 8003976:	6008      	str	r0, [r1, #0]
	statuspkt.bconf |= 0x01;	// splat board version 1
 8003978:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	stat = setupneo();
 800397c:	f000 faaa 	bl	8003ed4 <setupneo>
	if (stat != HAL_OK) {
 8003980:	2800      	cmp	r0, #0
 8003982:	f040 8093 	bne.w	8003aac <StartDefaultTask+0x200>
	initsplat();
 8003986:	f000 ffa7 	bl	80048d8 <initsplat>
	printf("Setting up timers\n");
 800398a:	485b      	ldr	r0, [pc, #364]	; (8003af8 <StartDefaultTask+0x24c>)
 800398c:	f01e fe36 	bl	80225fc <puts>
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003990:	2300      	movs	r3, #0
 8003992:	4a5a      	ldr	r2, [pc, #360]	; (8003afc <StartDefaultTask+0x250>)
 8003994:	4619      	mov	r1, r3
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8003996:	4c5a      	ldr	r4, [pc, #360]	; (8003b00 <StartDefaultTask+0x254>)
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003998:	6810      	ldr	r0, [r2, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f00f fb46 	bl	801302c <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 80039a0:	4858      	ldr	r0, [pc, #352]	; (8003b04 <StartDefaultTask+0x258>)
 80039a2:	f009 fb8f 	bl	800d0c4 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 80039a6:	2200      	movs	r2, #0
 80039a8:	6820      	ldr	r0, [r4, #0]
 80039aa:	4611      	mov	r1, r2
 80039ac:	f00b faae 	bl	800ef0c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 80039b0:	6820      	ldr	r0, [r4, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	2104      	movs	r1, #4
 80039b6:	f00b faa9 	bl	800ef0c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 80039ba:	2200      	movs	r2, #0
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	210c      	movs	r1, #12
 80039c0:	f00b faa4 	bl	800ef0c <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 80039c4:	2100      	movs	r1, #0
 80039c6:	4620      	mov	r0, r4
 80039c8:	f00b fcee 	bl	800f3a8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 80039cc:	2104      	movs	r1, #4
 80039ce:	4620      	mov	r0, r4
 80039d0:	f00b fcea 	bl	800f3a8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 80039d4:	210c      	movs	r1, #12
 80039d6:	4620      	mov	r0, r4
 80039d8:	f00b fce6 	bl	800f3a8 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 80039dc:	4620      	mov	r0, r4
 80039de:	2301      	movs	r3, #1
 80039e0:	4a43      	ldr	r2, [pc, #268]	; (8003af0 <StartDefaultTask+0x244>)
 80039e2:	2108      	movs	r1, #8
 80039e4:	f00b faf0 	bl	800efc8 <HAL_TIM_IC_Start_DMA>
 80039e8:	4605      	mov	r5, r0
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d158      	bne.n	8003aa0 <StartDefaultTask+0x1f4>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80039ee:	6820      	ldr	r0, [r4, #0]
 80039f0:	2201      	movs	r2, #1
 80039f2:	2108      	movs	r1, #8
	myip = ip.addr;
 80039f4:	4c44      	ldr	r4, [pc, #272]	; (8003b08 <StartDefaultTask+0x25c>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80039f6:	f00b fa89 	bl	800ef0c <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 80039fa:	683b      	ldr	r3, [r7, #0]
	printf("*****************************************\n");
 80039fc:	4843      	ldr	r0, [pc, #268]	; (8003b0c <StartDefaultTask+0x260>)
	ip = dhcp->offered_ip_addr;
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	uip = locateudp();
 8003a00:	4e43      	ldr	r6, [pc, #268]	; (8003b10 <StartDefaultTask+0x264>)
	myip = ip.addr;
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	6023      	str	r3, [r4, #0]
	printf("*****************************************\n");
 8003a06:	f01e fdf9 	bl	80225fc <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8003a0a:	6821      	ldr	r1, [r4, #0]
 8003a0c:	4841      	ldr	r0, [pc, #260]	; (8003b14 <StartDefaultTask+0x268>)
 8003a0e:	0e0a      	lsrs	r2, r1, #24
 8003a10:	f3c1 4307 	ubfx	r3, r1, #16, #8
	while (lptask_init_done == 0)
 8003a14:	4c40      	ldr	r4, [pc, #256]	; (8003b18 <StartDefaultTask+0x26c>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8003a16:	9200      	str	r2, [sp, #0]
 8003a18:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8003a1c:	b2c9      	uxtb	r1, r1
 8003a1e:	f01e fd51 	bl	80224c4 <iprintf>
	printf("*****************************************\n");
 8003a22:	483a      	ldr	r0, [pc, #232]	; (8003b0c <StartDefaultTask+0x260>)
 8003a24:	f01e fdea 	bl	80225fc <puts>
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8003a28:	f002 fd1a 	bl	8006460 <initialapisn>
	osDelay(1000);
 8003a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a30:	f00e ffe2 	bl	80129f8 <osDelay>
	printf("Starting httpd web server\n");
 8003a34:	4839      	ldr	r0, [pc, #228]	; (8003b1c <StartDefaultTask+0x270>)
 8003a36:	f01e fde1 	bl	80225fc <puts>
	httpd_init();		// start the www server
 8003a3a:	f012 fd57 	bl	80164ec <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8003a3e:	f002 fcbb 	bl	80063b8 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8003a42:	4837      	ldr	r0, [pc, #220]	; (8003b20 <StartDefaultTask+0x274>)
 8003a44:	f01e fdda 	bl	80225fc <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8003a48:	2208      	movs	r2, #8
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003a50:	9200      	str	r2, [sp, #0]
 8003a52:	4834      	ldr	r0, [pc, #208]	; (8003b24 <StartDefaultTask+0x278>)
 8003a54:	4a34      	ldr	r2, [pc, #208]	; (8003b28 <StartDefaultTask+0x27c>)
 8003a56:	f003 fb41 	bl	80070dc <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);		// fast interval DAC timer sample rate
 8003a5a:	4834      	ldr	r0, [pc, #208]	; (8003b2c <StartDefaultTask+0x280>)
 8003a5c:	f009 fa7a 	bl	800cf54 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8003a60:	f010 fbd4 	bl	801420c <xTaskGetCurrentTaskHandle>
 8003a64:	4b32      	ldr	r3, [pc, #200]	; (8003b30 <StartDefaultTask+0x284>)
 8003a66:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8003a68:	f002 f8ee 	bl	8005c48 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8003a6c:	4b31      	ldr	r3, [pc, #196]	; (8003b34 <StartDefaultTask+0x288>)
	uip = locateudp();
 8003a6e:	4601      	mov	r1, r0
	main_init_done = 1; // let lptask now main has initialised
 8003a70:	2201      	movs	r2, #1
	printf("Waiting for lptask to start\n");
 8003a72:	4831      	ldr	r0, [pc, #196]	; (8003b38 <StartDefaultTask+0x28c>)
	uip = locateudp();
 8003a74:	6031      	str	r1, [r6, #0]
	main_init_done = 1; // let lptask now main has initialised
 8003a76:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8003a78:	f01e fdc0 	bl	80225fc <puts>
	while (lptask_init_done == 0)
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	b92b      	cbnz	r3, 8003a8c <StartDefaultTask+0x1e0>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8003a80:	2064      	movs	r0, #100	; 0x64
 8003a82:	f00e ffb9 	bl	80129f8 <osDelay>
	while (lptask_init_done == 0)
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f9      	beq.n	8003a80 <StartDefaultTask+0x1d4>
	startadc();		// start the ADC DMA loop
 8003a8c:	f7fd f81a 	bl	8000ac4 <startadc>
		startudp(uip);		// should never return
 8003a90:	6830      	ldr	r0, [r6, #0]
 8003a92:	f002 f90d 	bl	8005cb0 <startudp>
		printf("UDP stream exited!!!\n\r");
 8003a96:	4829      	ldr	r0, [pc, #164]	; (8003b3c <StartDefaultTask+0x290>)
 8003a98:	f01e fd14 	bl	80224c4 <iprintf>
		rebootme();
 8003a9c:	f7fe ff8a 	bl	80029b4 <rebootme>
		printf("TIM_Base_Start_DMA err %i", err);
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	4827      	ldr	r0, [pc, #156]	; (8003b40 <StartDefaultTask+0x294>)
 8003aa4:	f01e fd0e 	bl	80224c4 <iprintf>
		Error_Handler();
 8003aa8:	f7ff f874 	bl	8002b94 <Error_Handler>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8003aac:	4825      	ldr	r0, [pc, #148]	; (8003b44 <StartDefaultTask+0x298>)
 8003aae:	f01e fd09 	bl	80224c4 <iprintf>
 8003ab2:	e768      	b.n	8003986 <StartDefaultTask+0xda>
 8003ab4:	08027500 	.word	0x08027500
 8003ab8:	1ff0f428 	.word	0x1ff0f428
 8003abc:	1ff0f424 	.word	0x1ff0f424
 8003ac0:	1ff0f420 	.word	0x1ff0f420
 8003ac4:	08027548 	.word	0x08027548
 8003ac8:	2001bff0 	.word	0x2001bff0
 8003acc:	08027580 	.word	0x08027580
 8003ad0:	40020c00 	.word	0x40020c00
 8003ad4:	080275a8 	.word	0x080275a8
 8003ad8:	2002e084 	.word	0x2002e084
 8003adc:	2001ae90 	.word	0x2001ae90
 8003ae0:	2001bb28 	.word	0x2001bb28
 8003ae4:	080029e1 	.word	0x080029e1
 8003ae8:	080020a1 	.word	0x080020a1
 8003aec:	2001ad7c 	.word	0x2001ad7c
 8003af0:	2001ae28 	.word	0x2001ae28
 8003af4:	02a62b1c 	.word	0x02a62b1c
 8003af8:	080275f0 	.word	0x080275f0
 8003afc:	2001b5c8 	.word	0x2001b5c8
 8003b00:	2001b784 	.word	0x2001b784
 8003b04:	2001b5cc 	.word	0x2001b5cc
 8003b08:	2001b218 	.word	0x2001b218
 8003b0c:	08027620 	.word	0x08027620
 8003b10:	2001b214 	.word	0x2001b214
 8003b14:	0802764c 	.word	0x0802764c
 8003b18:	20001c28 	.word	0x20001c28
 8003b1c:	08027674 	.word	0x08027674
 8003b20:	08027690 	.word	0x08027690
 8003b24:	2001b4ec 	.word	0x2001b4ec
 8003b28:	080276e0 	.word	0x080276e0
 8003b2c:	2001b900 	.word	0x2001b900
 8003b30:	200007e0 	.word	0x200007e0
 8003b34:	20001c2c 	.word	0x20001c2c
 8003b38:	080276ac 	.word	0x080276ac
 8003b3c:	080276c8 	.word	0x080276c8
 8003b40:	08027604 	.word	0x08027604
 8003b44:	080275d0 	.word	0x080275d0

08003b48 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8003b4c:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8003b4e:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8003b50:	b083      	sub	sp, #12
 8003b52:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8003b54:	d009      	beq.n	8003b6a <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8003b56:	230a      	movs	r3, #10
 8003b58:	2201      	movs	r2, #1
 8003b5a:	a901      	add	r1, sp, #4
 8003b5c:	4808      	ldr	r0, [pc, #32]	; (8003b80 <__io_putchar+0x34>)
 8003b5e:	f00c fced 	bl	801053c <HAL_UART_Transmit>

	return ch;
	}
}
 8003b62:	9801      	ldr	r0, [sp, #4]
 8003b64:	b003      	add	sp, #12
 8003b66:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	4905      	ldr	r1, [pc, #20]	; (8003b84 <__io_putchar+0x38>)
 8003b70:	4803      	ldr	r0, [pc, #12]	; (8003b80 <__io_putchar+0x34>)
 8003b72:	f00c fce3 	bl	801053c <HAL_UART_Transmit>
}
 8003b76:	9801      	ldr	r0, [sp, #4]
 8003b78:	b003      	add	sp, #12
 8003b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b7e:	bf00      	nop
 8003b80:	2001b7d0 	.word	0x2001b7d0
 8003b84:	08027de0 	.word	0x08027de0

08003b88 <calcepoch32>:
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8003b88:	b538      	push	{r3, r4, r5, lr}
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <calcepoch32+0x40>)
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8003b8c:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003b90:	480e      	ldr	r0, [pc, #56]	; (8003bcc <calcepoch32+0x44>)
 8003b92:	891a      	ldrh	r2, [r3, #8]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003b94:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003b96:	b292      	uxth	r2, r2
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8003b98:	7add      	ldrb	r5, [r3, #11]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003b9a:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8003b9c:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003b9e:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_hour = statuspkt.NavPvt.hour;
 8003ba2:	7b1c      	ldrb	r4, [r3, #12]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003ba4:	e9c0 1204 	strd	r1, r2, [r0, #16]
	now.tm_min = statuspkt.NavPvt.min;
 8003ba8:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8003baa:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_hour = statuspkt.NavPvt.hour;
 8003bac:	e9c0 4502 	strd	r4, r5, [r0, #8]
	now.tm_sec = statuspkt.NavPvt.sec;
 8003bb0:	e9c0 3200 	strd	r3, r2, [r0]

	epochtime = mktime(getgpstime());
 8003bb4:	f01d fdf4 	bl	80217a0 <mktime>
 8003bb8:	4a05      	ldr	r2, [pc, #20]	; (8003bd0 <calcepoch32+0x48>)
 8003bba:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 8003bbc:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 8003bc0:	e9c2 3100 	strd	r3, r1, [r2]
}
 8003bc4:	4418      	add	r0, r3
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	2001ad7c 	.word	0x2001ad7c
 8003bcc:	2001b9b0 	.word	0x2001b9b0
 8003bd0:	2001ba30 	.word	0x2001ba30

08003bd4 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 8003bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd8:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 8003bda:	b33a      	cbz	r2, 8003c2c <printPacket+0x58>
 8003bdc:	4607      	mov	r7, r0
 8003bde:	4616      	mov	r6, r2
 8003be0:	1e4d      	subs	r5, r1, #1
 8003be2:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 8003be4:	f8df a054 	ldr.w	sl, [pc, #84]	; 8003c3c <printPacket+0x68>
 8003be8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8003c40 <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8003bec:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8003c44 <printPacket+0x70>
 8003bf0:	e013      	b.n	8003c1a <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 8003bf2:	f8da 1000 	ldr.w	r1, [sl]
 8003bf6:	1c4b      	adds	r3, r1, #1
 8003bf8:	f8ca 3000 	str.w	r3, [sl]
 8003bfc:	f01e fc62 	bl	80224c4 <iprintf>
	for (byte i = 0; i < len; i++) {
 8003c00:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 8003c02:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003c06:	4641      	mov	r1, r8
 8003c08:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 8003c0a:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8003c0c:	f01e fdd2 	bl	80227b4 <siprintf>
		printf(temp);
 8003c10:	a801      	add	r0, sp, #4
 8003c12:	f01e fc57 	bl	80224c4 <iprintf>
	for (byte i = 0; i < len; i++) {
 8003c16:	42a6      	cmp	r6, r4
 8003c18:	d008      	beq.n	8003c2c <printPacket+0x58>
		if (i % 16 == 0) {
 8003c1a:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 8003c1e:	463a      	mov	r2, r7
 8003c20:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 8003c22:	d0e6      	beq.n	8003bf2 <printPacket+0x1e>
			printf(" ");
 8003c24:	2020      	movs	r0, #32
 8003c26:	f01e fc65 	bl	80224f4 <putchar>
 8003c2a:	e7e9      	b.n	8003c00 <printPacket+0x2c>
	}
	printf("\n\r");
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <printPacket+0x64>)
 8003c2e:	f01e fc49 	bl	80224c4 <iprintf>
}
 8003c32:	b002      	add	sp, #8
 8003c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c38:	080276dc 	.word	0x080276dc
 8003c3c:	20001c44 	.word	0x20001c44
 8003c40:	08027de4 	.word	0x08027de4
 8003c44:	08027df0 	.word	0x08027df0

08003c48 <restoreDefaults>:

// UBLOX revert to defaults
// B5 62 06 09 0D 00 FF FF 00 00 00 00 00 00 FF FF 00 00 03 1B 9A

// Function, sending packet to the receiver to restore default configuration
void restoreDefaults() {
 8003c48:	b530      	push	{r4, r5, lr}
			0x17, // payload
			0x2F, // CK_A
			0xAE, // CK_B
			};
#endif
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8003c4a:	4d09      	ldr	r5, [pc, #36]	; (8003c70 <restoreDefaults+0x28>)
void restoreDefaults() {
 8003c4c:	b087      	sub	sp, #28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8003c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c50:	466c      	mov	r4, sp
 8003c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c54:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003c58:	2364      	movs	r3, #100	; 0x64
 8003c5a:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8003c5c:	f844 0b04 	str.w	r0, [r4], #4
 8003c60:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003c62:	4669      	mov	r1, sp
 8003c64:	4803      	ldr	r0, [pc, #12]	; (8003c74 <restoreDefaults+0x2c>)
 8003c66:	f00c fc69 	bl	801053c <HAL_UART_Transmit>
			0x00, 0x00, 0x03, 0x1B, 0x9A };

	sendPacket(packet, sizeof(packet));
}
 8003c6a:	b007      	add	sp, #28
 8003c6c:	bd30      	pop	{r4, r5, pc}
 8003c6e:	bf00      	nop
 8003c70:	080266d8 	.word	0x080266d8
 8003c74:	2001b678 	.word	0x2001b678

08003c78 <askneo_ver>:

void askneo_ver() {
 8003c78:	b510      	push	{r4, lr}
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <askneo_ver+0x28>)
void askneo_ver() {
 8003c7c:	b082      	sub	sp, #8
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8003c7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c82:	466c      	mov	r4, sp
 8003c84:	e884 0003 	stmia.w	r4, {r0, r1}

	printf("Checking for Neo GPS...\n");
 8003c88:	4806      	ldr	r0, [pc, #24]	; (8003ca4 <askneo_ver+0x2c>)
 8003c8a:	f01e fcb7 	bl	80225fc <puts>
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003c8e:	4621      	mov	r1, r4
 8003c90:	2364      	movs	r3, #100	; 0x64
 8003c92:	2208      	movs	r2, #8
 8003c94:	4804      	ldr	r0, [pc, #16]	; (8003ca8 <askneo_ver+0x30>)
 8003c96:	f00c fc51 	bl	801053c <HAL_UART_Transmit>
	sendPacket(packet, sizeof(packet));
}
 8003c9a:	b002      	add	sp, #8
 8003c9c:	bd10      	pop	{r4, pc}
 8003c9e:	bf00      	nop
 8003ca0:	080266f0 	.word	0x080266f0
 8003ca4:	08027df8 	.word	0x08027df8
 8003ca8:	2001b678 	.word	0x2001b678

08003cac <disableNmea>:

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8003cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003cb0:	4c21      	ldr	r4, [pc, #132]	; (8003d38 <disableNmea+0x8c>)
void disableNmea() {
 8003cb2:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8003cb4:	2700      	movs	r7, #0
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003cb6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003d3c <disableNmea+0x90>
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003cba:	ad04      	add	r5, sp, #16
 8003cbc:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8003cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cc2:	462e      	mov	r6, r5
 8003cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cca:	e894 0003 	ldmia.w	r4, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8003cce:	f104 0208 	add.w	r2, r4, #8
 8003cd2:	ab01      	add	r3, sp, #4
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003cd4:	e885 0003 	stmia.w	r5, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8003cd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cda:	f10d 050d 	add.w	r5, sp, #13
 8003cde:	0c14      	lsrs	r4, r2, #16
 8003ce0:	c303      	stmia	r3!, {r0, r1}
 8003ce2:	f823 2b02 	strh.w	r2, [r3], #2
 8003ce6:	701c      	strb	r4, [r3, #0]
		packet[packetSize - 1] = 0x00;
 8003ce8:	2400      	movs	r4, #0
			packet[payloadOffset + j] = messages[i][j];
 8003cea:	7831      	ldrb	r1, [r6, #0]
 8003cec:	7873      	ldrb	r3, [r6, #1]
 8003cee:	f10d 0206 	add.w	r2, sp, #6
		packet[packetSize - 1] = 0x00;
 8003cf2:	46a4      	mov	ip, r4
		packet[packetSize - 2] = 0x00;
 8003cf4:	f88d 700d 	strb.w	r7, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8003cf8:	f88d 700e 	strb.w	r7, [sp, #14]
			packet[payloadOffset + j] = messages[i][j];
 8003cfc:	f88d 100a 	strb.w	r1, [sp, #10]
 8003d00:	f88d 300b 	strb.w	r3, [sp, #11]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8003d04:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003d08:	4463      	add	r3, ip
		for (byte j = 0; j < packetSize - 4; j++) {
 8003d0a:	4295      	cmp	r5, r2
			packet[packetSize - 2] += packet[2 + j];
 8003d0c:	fa5f fc83 	uxtb.w	ip, r3
			packet[packetSize - 1] += packet[packetSize - 2];
 8003d10:	4464      	add	r4, ip
 8003d12:	b2e4      	uxtb	r4, r4
		for (byte j = 0; j < packetSize - 4; j++) {
 8003d14:	d1f6      	bne.n	8003d04 <disableNmea+0x58>
 8003d16:	3602      	adds	r6, #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003d18:	2364      	movs	r3, #100	; 0x64
 8003d1a:	220b      	movs	r2, #11
 8003d1c:	a901      	add	r1, sp, #4
 8003d1e:	4640      	mov	r0, r8
 8003d20:	f88d c00d 	strb.w	ip, [sp, #13]
 8003d24:	f88d 400e 	strb.w	r4, [sp, #14]
 8003d28:	f00c fc08 	bl	801053c <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8003d2c:	454e      	cmp	r6, r9
 8003d2e:	d1db      	bne.n	8003ce8 <disableNmea+0x3c>
		}

		sendPacket(packet, packetSize);
	}
}
 8003d30:	b00f      	add	sp, #60	; 0x3c
 8003d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d36:	bf00      	nop
 8003d38:	080266f8 	.word	0x080266f8
 8003d3c:	2001b678 	.word	0x2001b678

08003d40 <changeFrequency>:
	sendPacket(packet, sizeof(packet));
}

// Function, sending packet to the receiver to change frequency to 100 ms
#define SEC 1
void changeFrequency() {
 8003d40:	b510      	push	{r4, lr}
	// CFG-RATE packet
	byte packet[] = { 0xB5, // sync char 1
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <changeFrequency+0x20>)
void changeFrequency() {
 8003d44:	b084      	sub	sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8003d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d48:	466c      	mov	r4, sp
 8003d4a:	c407      	stmia	r4!, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003d4c:	220e      	movs	r2, #14
	byte packet[] = { 0xB5, // sync char 1
 8003d4e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003d50:	4669      	mov	r1, sp
 8003d52:	2364      	movs	r3, #100	; 0x64
 8003d54:	4803      	ldr	r0, [pc, #12]	; (8003d64 <changeFrequency+0x24>)
 8003d56:	f00c fbf1 	bl	801053c <HAL_UART_Transmit>
			0x01, // CK_A
			0x39, // CK_B
#endif
			};
	sendPacket(packet, sizeof(packet));
}
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bd10      	pop	{r4, pc}
 8003d5e:	bf00      	nop
 8003d60:	08026748 	.word	0x08026748
 8003d64:	2001b678 	.word	0x2001b678

08003d68 <disableUnnecessaryChannels>:

// Function, sending packet to the receiver to disable unnecessary channels
void disableUnnecessaryChannels() {
 8003d68:	b530      	push	{r4, r5, lr}
	// CFG-GNSS packet
	byte packet[] = { 0xB5, // sync char 1
 8003d6a:	4d09      	ldr	r5, [pc, #36]	; (8003d90 <disableUnnecessaryChannels+0x28>)
void disableUnnecessaryChannels() {
 8003d6c:	b08d      	sub	sp, #52	; 0x34
	byte packet[] = { 0xB5, // sync char 1
 8003d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d70:	ac01      	add	r4, sp, #4
 8003d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003d7c:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8003d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003d82:	222c      	movs	r2, #44	; 0x2c
 8003d84:	a901      	add	r1, sp, #4
 8003d86:	4803      	ldr	r0, [pc, #12]	; (8003d94 <disableUnnecessaryChannels+0x2c>)
 8003d88:	f00c fbd8 	bl	801053c <HAL_UART_Transmit>
			0xA4, // CK_A
			0x25, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8003d8c:	b00d      	add	sp, #52	; 0x34
 8003d8e:	bd30      	pop	{r4, r5, pc}
 8003d90:	08026758 	.word	0x08026758
 8003d94:	2001b678 	.word	0x2001b678

08003d98 <enableNavPvt>:

// Function, sending packet to the receiver to enable NAV-PVT messages
void enableNavPvt() {
 8003d98:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, // sync char 1
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <enableNavPvt+0x24>)
void enableNavPvt() {
 8003d9c:	b085      	sub	sp, #20
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003d9e:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8003da0:	ac01      	add	r4, sp, #4
 8003da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003da4:	c403      	stmia	r4!, {r0, r1}
 8003da6:	0c15      	lsrs	r5, r2, #16
 8003da8:	f824 2b02 	strh.w	r2, [r4], #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003dac:	a901      	add	r1, sp, #4
 8003dae:	220b      	movs	r2, #11
 8003db0:	4803      	ldr	r0, [pc, #12]	; (8003dc0 <enableNavPvt+0x28>)
	byte packet[] = { 0xB5, // sync char 1
 8003db2:	7025      	strb	r5, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003db4:	f00c fbc2 	bl	801053c <HAL_UART_Transmit>
			0x13, // CK_A
			0x51, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8003db8:	b005      	add	sp, #20
 8003dba:	bd30      	pop	{r4, r5, pc}
 8003dbc:	08026784 	.word	0x08026784
 8003dc0:	2001b678 	.word	0x2001b678

08003dc4 <enableNaTP5>:

// Function, to set time pulse2 to interval of 1pps
// pulse only running when GPS locked to UTC
void enableNaTP5() {
 8003dc4:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8003dc6:	4d09      	ldr	r5, [pc, #36]	; (8003dec <enableNaTP5+0x28>)
void enableNaTP5() {
 8003dc8:	b08b      	sub	sp, #44	; 0x2c
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8003dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dcc:	466c      	mov	r4, sp
 8003dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dd4:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003dd8:	2364      	movs	r3, #100	; 0x64
 8003dda:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8003ddc:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003de0:	4669      	mov	r1, sp
 8003de2:	4803      	ldr	r0, [pc, #12]	; (8003df0 <enableNaTP5+0x2c>)
 8003de4:	f00c fbaa 	bl	801053c <HAL_UART_Transmit>
			0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF7, 0x00, 0x00, 0x00, 0xC9, 0x97 };

	sendPacket(packet, sizeof(packet));
}
 8003de8:	b00b      	add	sp, #44	; 0x2c
 8003dea:	bd30      	pop	{r4, r5, pc}
 8003dec:	08026790 	.word	0x08026790
 8003df0:	2001b678 	.word	0x2001b678

08003df4 <IsPacketReady>:
}

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8003df4:	4931      	ldr	r1, [pc, #196]	; (8003ebc <IsPacketReady+0xc8>)
int IsPacketReady(unsigned char c) {
 8003df6:	4602      	mov	r2, r0
 8003df8:	b4f0      	push	{r4, r5, r6, r7}
	unsigned char p = UbxGpsv.carriagePosition;
 8003dfa:	78cb      	ldrb	r3, [r1, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d814      	bhi.n	8003e2a <IsPacketReady+0x36>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 8003e00:	482f      	ldr	r0, [pc, #188]	; (8003ec0 <IsPacketReady+0xcc>)
 8003e02:	461c      	mov	r4, r3
 8003e04:	5cc0      	ldrb	r0, [r0, r3]
 8003e06:	4290      	cmp	r0, r2
 8003e08:	d00a      	beq.n	8003e20 <IsPacketReady+0x2c>
 8003e0a:	482e      	ldr	r0, [pc, #184]	; (8003ec4 <IsPacketReady+0xd0>)
 8003e0c:	5cc0      	ldrb	r0, [r0, r3]
 8003e0e:	4290      	cmp	r0, r2
 8003e10:	d006      	beq.n	8003e20 <IsPacketReady+0x2c>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8003e12:	4a2d      	ldr	r2, [pc, #180]	; (8003ec8 <IsPacketReady+0xd4>)
 8003e14:	2300      	movs	r3, #0
 8003e16:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8003e18:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8003e1a:	70cb      	strb	r3, [r1, #3]
}
 8003e1c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e1e:	4770      	bx	lr
			PACKETstore[p++] = c;
 8003e20:	3301      	adds	r3, #1
 8003e22:	482a      	ldr	r0, [pc, #168]	; (8003ecc <IsPacketReady+0xd8>)
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	5502      	strb	r2, [r0, r4]
 8003e28:	e7f6      	b.n	8003e18 <IsPacketReady+0x24>
		if (p < 6) {
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d928      	bls.n	8003e80 <IsPacketReady+0x8c>
		if (p == 6) {
 8003e2e:	2b06      	cmp	r3, #6
 8003e30:	d02d      	beq.n	8003e8e <IsPacketReady+0x9a>
 8003e32:	4c25      	ldr	r4, [pc, #148]	; (8003ec8 <IsPacketReady+0xd4>)
		if (p < (2 + 4 + len + 2)) {
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	461d      	mov	r5, r3
 8003e38:	3007      	adds	r0, #7
 8003e3a:	4298      	cmp	r0, r3
 8003e3c:	dbec      	blt.n	8003e18 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8003e3e:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 8003e40:	6820      	ldr	r0, [r4, #0]
			PACKETstore[p++] = c;
 8003e42:	4e22      	ldr	r6, [pc, #136]	; (8003ecc <IsPacketReady+0xd8>)
 8003e44:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 8003e46:	3008      	adds	r0, #8
			PACKETstore[p++] = c;
 8003e48:	5572      	strb	r2, [r6, r5]
			if (p == (2 + 4 + len + 2)) {
 8003e4a:	4283      	cmp	r3, r0
 8003e4c:	d1e4      	bne.n	8003e18 <IsPacketReady+0x24>
				if (isGoodChecksum(len)) {
 8003e4e:	f8d4 c000 	ldr.w	ip, [r4]
				UbxGpsv.carriagePosition = p;
 8003e52:	2200      	movs	r2, #0
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8003e54:	f11c 0f03 	cmn.w	ip, #3
				UbxGpsv.carriagePosition = p;
 8003e58:	70ca      	strb	r2, [r1, #3]
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8003e5a:	db2c      	blt.n	8003eb6 <IsPacketReady+0xc2>
 8003e5c:	1d77      	adds	r7, r6, #5
 8003e5e:	1c70      	adds	r0, r6, #1
	unsigned char CK_A = 0;
 8003e60:	4613      	mov	r3, r2
 8003e62:	4467      	add	r7, ip
		CK_A = CK_A + PACKETstore[i];
 8003e64:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003e68:	442b      	add	r3, r5
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8003e6a:	42b8      	cmp	r0, r7
		CK_A = CK_A + PACKETstore[i];
 8003e6c:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8003e6e:	441a      	add	r2, r3
 8003e70:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8003e72:	d1f7      	bne.n	8003e64 <IsPacketReady+0x70>
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8003e74:	4466      	add	r6, ip
 8003e76:	79b0      	ldrb	r0, [r6, #6]
 8003e78:	4298      	cmp	r0, r3
 8003e7a:	d014      	beq.n	8003ea6 <IsPacketReady+0xb2>
				p = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e7cb      	b.n	8003e18 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8003e80:	4d12      	ldr	r5, [pc, #72]	; (8003ecc <IsPacketReady+0xd8>)
 8003e82:	1c5c      	adds	r4, r3, #1
			return (0);
 8003e84:	2000      	movs	r0, #0
			PACKETstore[p++] = c;
 8003e86:	54ea      	strb	r2, [r5, r3]
			UbxGpsv.carriagePosition = p;
 8003e88:	70cc      	strb	r4, [r1, #3]
}
 8003e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8003e8c:	4770      	bx	lr
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 8003e8e:	4d0f      	ldr	r5, [pc, #60]	; (8003ecc <IsPacketReady+0xd8>)
 8003e90:	4c0d      	ldr	r4, [pc, #52]	; (8003ec8 <IsPacketReady+0xd4>)
 8003e92:	796e      	ldrb	r6, [r5, #5]
 8003e94:	7928      	ldrb	r0, [r5, #4]
 8003e96:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8003e9a:	6020      	str	r0, [r4, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	287f      	cmp	r0, #127	; 0x7f
 8003ea0:	d9c8      	bls.n	8003e34 <IsPacketReady+0x40>
				return 0;
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e7ba      	b.n	8003e1c <IsPacketReady+0x28>
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8003ea6:	79f3      	ldrb	r3, [r6, #7]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d1e7      	bne.n	8003e7c <IsPacketReady+0x88>
					gpsgood = 1;
 8003eac:	2201      	movs	r2, #1
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <IsPacketReady+0xdc>)
					return len;
 8003eb0:	6820      	ldr	r0, [r4, #0]
					gpsgood = 1;
 8003eb2:	601a      	str	r2, [r3, #0]
					return len;
 8003eb4:	e7b2      	b.n	8003e1c <IsPacketReady+0x28>
	unsigned char CK_A = 0;
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	e7dc      	b.n	8003e74 <IsPacketReady+0x80>
 8003eba:	bf00      	nop
 8003ebc:	2000025c 	.word	0x2000025c
 8003ec0:	08027fb0 	.word	0x08027fb0
 8003ec4:	08027fb4 	.word	0x08027fb4
 8003ec8:	20001c50 	.word	0x20001c50
 8003ecc:	2001ba3c 	.word	0x2001ba3c
 8003ed0:	20001c4c 	.word	0x20001c4c

08003ed4 <setupneo>:
		printf("0x%02x ", data);
	}
}

// init neo7
HAL_StatusTypeDef setupneo() {
 8003ed4:	b510      	push	{r4, lr}
	 * @param Size: amount of data to be received.
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */
	stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	4922      	ldr	r1, [pc, #136]	; (8003f64 <setupneo+0x90>)
 8003eda:	4823      	ldr	r0, [pc, #140]	; (8003f68 <setupneo+0x94>)
 8003edc:	f00c fd28 	bl	8010930 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	bbc8      	cbnz	r0, 8003f58 <setupneo+0x84>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8003ee4:	f7ff fee2 	bl	8003cac <disableNmea>
	osDelay(500);
 8003ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003eec:	f00e fd84 	bl	80129f8 <osDelay>

	// is there a device - what is it running?
	askneo_ver();
 8003ef0:	f7ff fec2 	bl	8003c78 <askneo_ver>
	osDelay(500);
 8003ef4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ef8:	f00e fd7e 	bl	80129f8 <osDelay>

	restoreDefaults();
 8003efc:	f7ff fea4 	bl	8003c48 <restoreDefaults>
	osDelay(1500);
 8003f00:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003f04:	f00e fd78 	bl	80129f8 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8003f08:	4818      	ldr	r0, [pc, #96]	; (8003f6c <setupneo+0x98>)
 8003f0a:	f01e fadb 	bl	80224c4 <iprintf>

	changeFrequency();
 8003f0e:	f7ff ff17 	bl	8003d40 <changeFrequency>
	osDelay(500);
 8003f12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f16:	f00e fd6f 	bl	80129f8 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8003f1a:	4815      	ldr	r0, [pc, #84]	; (8003f70 <setupneo+0x9c>)
 8003f1c:	f01e fb6e 	bl	80225fc <puts>
	disableUnnecessaryChannels();
 8003f20:	f7ff ff22 	bl	8003d68 <disableUnnecessaryChannels>
	osDelay(500);
 8003f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f28:	f00e fd66 	bl	80129f8 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8003f2c:	4811      	ldr	r0, [pc, #68]	; (8003f74 <setupneo+0xa0>)
 8003f2e:	f01e fac9 	bl	80224c4 <iprintf>
	enableNavPvt();
 8003f32:	f7ff ff31 	bl	8003d98 <enableNavPvt>
	osDelay(500);
 8003f36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f3a:	f00e fd5d 	bl	80129f8 <osDelay>

// Enable Time pulse
	enableNaTP5();
 8003f3e:	f7ff ff41 	bl	8003dc4 <enableNaTP5>
	osDelay(500);
 8003f42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f46:	f00e fd57 	bl	80129f8 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <setupneo+0xa4>)
	printf("NEO: Auto-configuration is complete\n\r");
 8003f4c:	480b      	ldr	r0, [pc, #44]	; (8003f7c <setupneo+0xa8>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8003f4e:	765c      	strb	r4, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8003f50:	f01e fab8 	bl	80224c4 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8003f54:	4620      	mov	r0, r4
 8003f56:	bd10      	pop	{r4, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6\n", stat);
 8003f58:	4601      	mov	r1, r0
 8003f5a:	4809      	ldr	r0, [pc, #36]	; (8003f80 <setupneo+0xac>)
 8003f5c:	f01e fab2 	bl	80224c4 <iprintf>
}
 8003f60:	4620      	mov	r0, r4
 8003f62:	bd10      	pop	{r4, pc}
 8003f64:	20001c54 	.word	0x20001c54
 8003f68:	2001b678 	.word	0x2001b678
 8003f6c:	08027e38 	.word	0x08027e38
 8003f70:	08027e68 	.word	0x08027e68
 8003f74:	08027e90 	.word	0x08027e90
 8003f78:	2001ad7c 	.word	0x2001ad7c
 8003f7c:	08027eb4 	.word	0x08027eb4
 8003f80:	08027e10 	.word	0x08027e10

08003f84 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	HAL_StatusTypeDef stat;
	volatile int len;

//	printf("UART6 RxCpl");
	if (huart->Instance == USART6) { //our UART
 8003f84:	4a30      	ldr	r2, [pc, #192]	; (8004048 <HAL_UART_RxCpltCallback+0xc4>)
 8003f86:	6803      	ldr	r3, [r0, #0]
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <HAL_UART_RxCpltCallback+0x18>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
				break;
			}
		}
	} else {
		if (huart->Instance == UART5) {
 8003f8c:	4a2f      	ldr	r2, [pc, #188]	; (800404c <HAL_UART_RxCpltCallback+0xc8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d002      	beq.n	8003f98 <HAL_UART_RxCpltCallback+0x14>
			uart5_rxdone();
		} else
			printf("USART unknown uart int\n");
 8003f92:	482f      	ldr	r0, [pc, #188]	; (8004050 <HAL_UART_RxCpltCallback+0xcc>)
 8003f94:	f01e bb32 	b.w	80225fc <puts>
			uart5_rxdone();
 8003f98:	f7fd b850 	b.w	800103c <uart5_rxdone>
		data = rxdatabuf[0];
 8003f9c:	492d      	ldr	r1, [pc, #180]	; (8004054 <HAL_UART_RxCpltCallback+0xd0>)
		flag = 1;
 8003f9e:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003fa0:	b570      	push	{r4, r5, r6, lr}
		flag = 1;
 8003fa2:	2501      	movs	r5, #1
 8003fa4:	4604      	mov	r4, r0
		data = rxdatabuf[0];
 8003fa6:	4e2d      	ldr	r6, [pc, #180]	; (800405c <HAL_UART_RxCpltCallback+0xd8>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003fa8:	b082      	sub	sp, #8
		data = rxdatabuf[0];
 8003faa:	7808      	ldrb	r0, [r1, #0]
		stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 8003fac:	462a      	mov	r2, r5
		flag = 1;
 8003fae:	601d      	str	r5, [r3, #0]
		data = rxdatabuf[0];
 8003fb0:	7030      	strb	r0, [r6, #0]
		stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 8003fb2:	482b      	ldr	r0, [pc, #172]	; (8004060 <HAL_UART_RxCpltCallback+0xdc>)
 8003fb4:	f00c fcbc 	bl	8010930 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 8003fb8:	bb30      	cbnz	r0, 8004008 <HAL_UART_RxCpltCallback+0x84>
		if ((len = IsPacketReady(data)) > 0) {
 8003fba:	7830      	ldrb	r0, [r6, #0]
 8003fbc:	f7ff ff1a 	bl	8003df4 <IsPacketReady>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	9001      	str	r0, [sp, #4]
 8003fc4:	dd1e      	ble.n	8004004 <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 8003fc6:	9b01      	ldr	r3, [sp, #4]
 8003fc8:	2b54      	cmp	r3, #84	; 0x54
 8003fca:	d00a      	beq.n	8003fe2 <HAL_UART_RxCpltCallback+0x5e>
 8003fcc:	2b64      	cmp	r3, #100	; 0x64
 8003fce:	d028      	beq.n	8004022 <HAL_UART_RxCpltCallback+0x9e>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8003fd0:	9a01      	ldr	r2, [sp, #4]
 8003fd2:	4924      	ldr	r1, [pc, #144]	; (8004064 <HAL_UART_RxCpltCallback+0xe0>)
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	4824      	ldr	r0, [pc, #144]	; (8004068 <HAL_UART_RxCpltCallback+0xe4>)
	}
}
 8003fd8:	b002      	add	sp, #8
 8003fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8003fde:	f7ff bdf9 	b.w	8003bd4 <printPacket>
 8003fe2:	4b22      	ldr	r3, [pc, #136]	; (800406c <HAL_UART_RxCpltCallback+0xe8>)
 8003fe4:	4a22      	ldr	r2, [pc, #136]	; (8004070 <HAL_UART_RxCpltCallback+0xec>)
 8003fe6:	f103 004e 	add.w	r0, r3, #78	; 0x4e
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8003fea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
				for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8003fee:	4283      	cmp	r3, r0
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8003ff0:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8003ff4:	d1f9      	bne.n	8003fea <HAL_UART_RxCpltCallback+0x66>
				if (statuspkt.NavPvt.flags & 1) { // locked
 8003ff6:	4c1f      	ldr	r4, [pc, #124]	; (8004074 <HAL_UART_RxCpltCallback+0xf0>)
 8003ff8:	7e63      	ldrb	r3, [r4, #25]
 8003ffa:	f013 0301 	ands.w	r3, r3, #1
 8003ffe:	d11b      	bne.n	8004038 <HAL_UART_RxCpltCallback+0xb4>
					gpslocked = 0;
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_UART_RxCpltCallback+0xf4>)
 8004002:	7013      	strb	r3, [r2, #0]
}
 8004004:	b002      	add	sp, #8
 8004006:	bd70      	pop	{r4, r5, r6, pc}
			printf("Err HAL_UART_Receive_DMA3 %d usart6\n", stat);
 8004008:	4601      	mov	r1, r0
 800400a:	481c      	ldr	r0, [pc, #112]	; (800407c <HAL_UART_RxCpltCallback+0xf8>)
 800400c:	f01e fa5a 	bl	80224c4 <iprintf>
			__HAL_UART_CLEAR_FEFLAG(huart);
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	2002      	movs	r0, #2
			__HAL_UART_CLEAR_NEFLAG(huart);
 8004014:	2104      	movs	r1, #4
			__HAL_UART_CLEAR_OREFLAG(huart);
 8004016:	2208      	movs	r2, #8
			__HAL_UART_CLEAR_FEFLAG(huart);
 8004018:	6218      	str	r0, [r3, #32]
			__HAL_UART_CLEAR_NEFLAG(huart);
 800401a:	6219      	str	r1, [r3, #32]
			__HAL_UART_CLEAR_OREFLAG(huart);
 800401c:	621a      	str	r2, [r3, #32]
			__HAL_UART_CLEAR_PEFLAG(huart);
 800401e:	621d      	str	r5, [r3, #32]
 8004020:	e7cb      	b.n	8003fba <HAL_UART_RxCpltCallback+0x36>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36], &PACKETstore[46]);
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <HAL_UART_RxCpltCallback+0xfc>)
 8004024:	4817      	ldr	r0, [pc, #92]	; (8004084 <HAL_UART_RxCpltCallback+0x100>)
 8004026:	f1a3 020a 	sub.w	r2, r3, #10
 800402a:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
}
 800402e:	b002      	add	sp, #8
 8004030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36], &PACKETstore[46]);
 8004034:	f01e ba46 	b.w	80224c4 <iprintf>
					statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8004038:	f7ff fda6 	bl	8003b88 <calcepoch32>
					gpslocked = 1;
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_UART_RxCpltCallback+0xf4>)
 800403e:	2201      	movs	r2, #1
					statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8004040:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
					gpslocked = 1;
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e7dd      	b.n	8004004 <HAL_UART_RxCpltCallback+0x80>
 8004048:	40011400 	.word	0x40011400
 800404c:	40005000 	.word	0x40005000
 8004050:	08027f4c 	.word	0x08027f4c
 8004054:	20001c54 	.word	0x20001c54
 8004058:	20001c48 	.word	0x20001c48
 800405c:	2001ba38 	.word	0x2001ba38
 8004060:	2001b678 	.word	0x2001b678
 8004064:	2001ba3c 	.word	0x2001ba3c
 8004068:	08027f30 	.word	0x08027f30
 800406c:	2001ba41 	.word	0x2001ba41
 8004070:	2001ad7f 	.word	0x2001ad7f
 8004074:	2001ad7c 	.word	0x2001ad7c
 8004078:	20001c95 	.word	0x20001c95
 800407c:	08027edc 	.word	0x08027edc
 8004080:	2001ba6a 	.word	0x2001ba6a
 8004084:	08027f04 	.word	0x08027f04

08004088 <HAL_UART_ErrorCallback>:
	HAL_StatusTypeDef stat;
	uint8_t ch;
	volatile uint32_t reg;

	// whatever the error try to clear it blindly
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004088:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
 800408a:	2208      	movs	r2, #8
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == USART6) { 		// GPS  UART
 800408c:	491e      	ldr	r1, [pc, #120]	; (8004108 <HAL_UART_ErrorCallback+0x80>)
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800408e:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART6) { 		// GPS  UART
 8004090:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004092:	f04f 0602 	mov.w	r6, #2
	__HAL_UART_CLEAR_NEFLAG(huart);
 8004096:	f04f 0504 	mov.w	r5, #4
	__HAL_UART_CLEAR_PEFLAG(huart);
 800409a:	f04f 0401 	mov.w	r4, #1
	__HAL_UART_CLEAR_FEFLAG(huart);
 800409e:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 80040a0:	621d      	str	r5, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 80040a2:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 80040a4:	621c      	str	r4, [r3, #32]
	if (huart->Instance == USART6) { 		// GPS  UART
 80040a6:	d01c      	beq.n	80040e2 <HAL_UART_ErrorCallback+0x5a>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 80040a8:	4918      	ldr	r1, [pc, #96]	; (800410c <HAL_UART_ErrorCallback+0x84>)
 80040aa:	428b      	cmp	r3, r1
 80040ac:	d000      	beq.n	80040b0 <HAL_UART_ErrorCallback+0x28>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
		if (!(lcd_initflag)) {
 80040b0:	4917      	ldr	r1, [pc, #92]	; (8004110 <HAL_UART_ErrorCallback+0x88>)
 80040b2:	6809      	ldr	r1, [r1, #0]
 80040b4:	2900      	cmp	r1, #0
 80040b6:	d1fa      	bne.n	80040ae <HAL_UART_ErrorCallback+0x26>
			lcduart_error = huart->ErrorCode;
 80040b8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80040bc:	4915      	ldr	r1, [pc, #84]	; (8004114 <HAL_UART_ErrorCallback+0x8c>)
 80040be:	6008      	str	r0, [r1, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 80040c0:	69d9      	ldr	r1, [r3, #28]
 80040c2:	0708      	lsls	r0, r1, #28
 80040c4:	d500      	bpl.n	80040c8 <HAL_UART_ErrorCallback+0x40>
				UART5->ICR = USART_ICR_ORECF;
 80040c6:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_UART_ErrorCallback+0x84>)
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	0751      	lsls	r1, r2, #29
 80040ce:	d501      	bpl.n	80040d4 <HAL_UART_ErrorCallback+0x4c>
				UART5->ICR = USART_ICR_NCF;
 80040d0:	2204      	movs	r2, #4
 80040d2:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_UART_ErrorCallback+0x84>)
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	0792      	lsls	r2, r2, #30
 80040da:	d5e8      	bpl.n	80040ae <HAL_UART_ErrorCallback+0x26>
				UART5->ICR = USART_ICR_FECF;
 80040dc:	2202      	movs	r2, #2
 80040de:	621a      	str	r2, [r3, #32]
}
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 80040e2:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80040e6:	480c      	ldr	r0, [pc, #48]	; (8004118 <HAL_UART_ErrorCallback+0x90>)
 80040e8:	f01e f9ec 	bl	80224c4 <iprintf>
		stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 80040ec:	4622      	mov	r2, r4
 80040ee:	490b      	ldr	r1, [pc, #44]	; (800411c <HAL_UART_ErrorCallback+0x94>)
 80040f0:	480b      	ldr	r0, [pc, #44]	; (8004120 <HAL_UART_ErrorCallback+0x98>)
 80040f2:	f00c fc1d 	bl	8010930 <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 80040f6:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 80040fa:	d0d8      	beq.n	80040ae <HAL_UART_ErrorCallback+0x26>
			printf("Err HAL_UART_Receive_DMA4 usart6 stat=%d\n", stat);
 80040fc:	4601      	mov	r1, r0
 80040fe:	4809      	ldr	r0, [pc, #36]	; (8004124 <HAL_UART_ErrorCallback+0x9c>)
}
 8004100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printf("Err HAL_UART_Receive_DMA4 usart6 stat=%d\n", stat);
 8004104:	f01e b9de 	b.w	80224c4 <iprintf>
 8004108:	40011400 	.word	0x40011400
 800410c:	40005000 	.word	0x40005000
 8004110:	20001588 	.word	0x20001588
 8004114:	20001618 	.word	0x20001618
 8004118:	08027f64 	.word	0x08027f64
 800411c:	20001c54 	.word	0x20001c54
 8004120:	2001b678 	.word	0x2001b678
 8004124:	08027f84 	.word	0x08027f84

08004128 <cycleleds>:
//////////////////////////////////////////////
//
// Initialise and test the LEDS by cycling them
//
//////////////////////////////////////////////
void cycleleds(void) {
 8004128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412a:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 800412c:	4a1b      	ldr	r2, [pc, #108]	; (800419c <cycleleds+0x74>)
	LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin };

	int i;

	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800412e:	4f1c      	ldr	r7, [pc, #112]	; (80041a0 <cycleleds+0x78>)
 8004130:	ac01      	add	r4, sp, #4
 8004132:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 8004136:	ca07      	ldmia	r2, {r0, r1, r2}
 8004138:	4623      	mov	r3, r4
 800413a:	4626      	mov	r6, r4
 800413c:	c303      	stmia	r3!, {r0, r1}
 800413e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004140:	f836 1b02 	ldrh.w	r1, [r6], #2
 8004144:	2200      	movs	r2, #0
 8004146:	4638      	mov	r0, r7
 8004148:	f005 fbea 	bl	8009920 <HAL_GPIO_WritePin>
		osDelay(140);
 800414c:	208c      	movs	r0, #140	; 0x8c
 800414e:	f00e fc53 	bl	80129f8 <osDelay>
	for (i = 0; i < 5; i++) {
 8004152:	42ae      	cmp	r6, r5
 8004154:	d1f4      	bne.n	8004140 <cycleleds+0x18>
	}
	osDelay(600);
 8004156:	f44f 7016 	mov.w	r0, #600	; 0x258
 800415a:	4626      	mov	r6, r4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800415c:	4f10      	ldr	r7, [pc, #64]	; (80041a0 <cycleleds+0x78>)
	osDelay(600);
 800415e:	f00e fc4b 	bl	80129f8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004162:	f836 1b02 	ldrh.w	r1, [r6], #2
 8004166:	2201      	movs	r2, #1
 8004168:	4638      	mov	r0, r7
 800416a:	f005 fbd9 	bl	8009920 <HAL_GPIO_WritePin>
		osDelay(140);
 800416e:	208c      	movs	r0, #140	; 0x8c
 8004170:	f00e fc42 	bl	80129f8 <osDelay>
	for (i = 0; i < 5; i++) {
 8004174:	42ae      	cmp	r6, r5
 8004176:	d1f4      	bne.n	8004162 <cycleleds+0x3a>
	}
	osDelay(500);
 8004178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800417c:	4e08      	ldr	r6, [pc, #32]	; (80041a0 <cycleleds+0x78>)
	osDelay(500);
 800417e:	f00e fc3b 	bl	80129f8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004182:	f834 1b02 	ldrh.w	r1, [r4], #2
 8004186:	2200      	movs	r2, #0
 8004188:	4630      	mov	r0, r6
 800418a:	f005 fbc9 	bl	8009920 <HAL_GPIO_WritePin>
		osDelay(140);
 800418e:	208c      	movs	r0, #140	; 0x8c
 8004190:	f00e fc32 	bl	80129f8 <osDelay>
	for (i = 0; i < 5; i++) {
 8004194:	42ac      	cmp	r4, r5
 8004196:	d1f4      	bne.n	8004182 <cycleleds+0x5a>
	}
}
 8004198:	b005      	add	sp, #20
 800419a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419c:	080267b8 	.word	0x080267b8
 80041a0:	40020c00 	.word	0x40020c00

080041a4 <setpgagain>:
//////////////////////////////////////////////
//
// Set the Programmable Gain Amplifier GAIN
//
//////////////////////////////////////////////
void setpgagain(int gain) {
 80041a4:	b510      	push	{r4, lr}
 80041a6:	4604      	mov	r4, r0
	osDelay(5);
 80041a8:	2005      	movs	r0, #5
 80041aa:	f00e fc25 	bl	80129f8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80041ae:	2201      	movs	r2, #1
 80041b0:	2104      	movs	r1, #4
 80041b2:	4814      	ldr	r0, [pc, #80]	; (8004204 <setpgagain+0x60>)
 80041b4:	f005 fbb4 	bl	8009920 <HAL_GPIO_WritePin>
	osDelay(5);
 80041b8:	2005      	movs	r0, #5
 80041ba:	f00e fc1d 	bl	80129f8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	osDelay(5);
	pgagain = 0x4000 | (gain & 0x07);
 80041be:	f004 0407 	and.w	r4, r4, #7
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80041c2:	2200      	movs	r2, #0
 80041c4:	2104      	movs	r1, #4
 80041c6:	480f      	ldr	r0, [pc, #60]	; (8004204 <setpgagain+0x60>)
	pgagain = 0x4000 | (gain & 0x07);
 80041c8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80041cc:	f005 fba8 	bl	8009920 <HAL_GPIO_WritePin>
	osDelay(5);
 80041d0:	2005      	movs	r0, #5
 80041d2:	f00e fc11 	bl	80129f8 <osDelay>
	pgagain = 0x4000 | (gain & 0x07);
 80041d6:	490c      	ldr	r1, [pc, #48]	; (8004208 <setpgagain+0x64>)
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 80041d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041dc:	2201      	movs	r2, #1
 80041de:	480b      	ldr	r0, [pc, #44]	; (800420c <setpgagain+0x68>)
	pgagain = 0x4000 | (gain & 0x07);
 80041e0:	800c      	strh	r4, [r1, #0]
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 80041e2:	f008 fa3f 	bl	800c664 <HAL_SPI_Transmit>
 80041e6:	b948      	cbnz	r0, 80041fc <setpgagain+0x58>
		printf("setpgagain: SPI Error\n");
	}
	osDelay(5);
 80041e8:	2005      	movs	r0, #5
 80041ea:	f00e fc05 	bl	80129f8 <osDelay>
//printf("PGA Gain set to %d\n",pgagain & 7);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80041ee:	2201      	movs	r2, #1
 80041f0:	2104      	movs	r1, #4
 80041f2:	4804      	ldr	r0, [pc, #16]	; (8004204 <setpgagain+0x60>)
}
 80041f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80041f8:	f005 bb92 	b.w	8009920 <HAL_GPIO_WritePin>
		printf("setpgagain: SPI Error\n");
 80041fc:	4804      	ldr	r0, [pc, #16]	; (8004210 <setpgagain+0x6c>)
 80041fe:	f01e f9fd 	bl	80225fc <puts>
 8004202:	e7f1      	b.n	80041e8 <setpgagain+0x44>
 8004204:	40021800 	.word	0x40021800
 8004208:	2000026a 	.word	0x2000026a
 800420c:	2001af44 	.word	0x2001af44
 8004210:	08027fb8 	.word	0x08027fb8

08004214 <initpga>:
//////////////////////////////////////////////
//
// Initialise the Programmable Gain Amplifier MCP6S93
//
//////////////////////////////////////////////
int initpga() {
 8004214:	b510      	push	{r4, lr}
	// init spi based single ended PG Amp
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004216:	2201      	movs	r2, #1
int initpga() {
 8004218:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800421a:	2104      	movs	r1, #4
 800421c:	482b      	ldr	r0, [pc, #172]	; (80042cc <initpga+0xb8>)
 800421e:	f005 fb7f 	bl	8009920 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8004222:	2200      	movs	r2, #0
 8004224:	2104      	movs	r1, #4
 8004226:	4829      	ldr	r0, [pc, #164]	; (80042cc <initpga+0xb8>)
 8004228:	f005 fb7a 	bl	8009920 <HAL_GPIO_WritePin>
	osDelay(50);
 800422c:	2032      	movs	r0, #50	; 0x32
 800422e:	f00e fbe3 	bl	80129f8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004232:	2201      	movs	r2, #1
 8004234:	2104      	movs	r1, #4
 8004236:	4825      	ldr	r0, [pc, #148]	; (80042cc <initpga+0xb8>)
 8004238:	f005 fb72 	bl	8009920 <HAL_GPIO_WritePin>
	osDelay(50);
 800423c:	2032      	movs	r0, #50	; 0x32
 800423e:	f00e fbdb 	bl	80129f8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	if (HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000) != HAL_OK) {	// nop cmd
 8004242:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004244:	2200      	movs	r2, #0
 8004246:	2104      	movs	r1, #4
 8004248:	4820      	ldr	r0, [pc, #128]	; (80042cc <initpga+0xb8>)
 800424a:	f005 fb69 	bl	8009920 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000) != HAL_OK) {	// nop cmd
 800424e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004252:	2201      	movs	r2, #1
 8004254:	a901      	add	r1, sp, #4
 8004256:	481e      	ldr	r0, [pc, #120]	; (80042d0 <initpga+0xbc>)
 8004258:	f8ad 4004 	strh.w	r4, [sp, #4]
 800425c:	f008 fa02 	bl	800c664 <HAL_SPI_Transmit>
 8004260:	bb70      	cbnz	r0, 80042c0 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 8004262:	9000      	str	r0, [sp, #0]
 8004264:	9b00      	ldr	r3, [sp, #0]
 8004266:	2b31      	cmp	r3, #49	; 0x31
 8004268:	dc05      	bgt.n	8004276 <initpga+0x62>
 800426a:	9b00      	ldr	r3, [sp, #0]
 800426c:	3301      	adds	r3, #1
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	9b00      	ldr	r3, [sp, #0]
 8004272:	2b31      	cmp	r3, #49	; 0x31
 8004274:	ddf9      	ble.n	800426a <initpga+0x56>
			;
	}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8004276:	2201      	movs	r2, #1
 8004278:	2104      	movs	r1, #4
 800427a:	4814      	ldr	r0, [pc, #80]	; (80042cc <initpga+0xb8>)
 800427c:	f005 fb50 	bl	8009920 <HAL_GPIO_WritePin>
	osDelay(50);
 8004280:	2032      	movs	r0, #50	; 0x32
 8004282:	f00e fbb9 	bl	80129f8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004286:	2200      	movs	r2, #0
 8004288:	2104      	movs	r1, #4
 800428a:	4810      	ldr	r0, [pc, #64]	; (80042cc <initpga+0xb8>)
 800428c:	f005 fb48 	bl	8009920 <HAL_GPIO_WritePin>
	//osDelay(5);
	if (HAL_SPI_Transmit(&hspi2, &spicmdchan[0], 1, 1000) != HAL_OK) {	// set the channel to ch1
 8004290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004294:	2201      	movs	r2, #1
 8004296:	490f      	ldr	r1, [pc, #60]	; (80042d4 <initpga+0xc0>)
 8004298:	480d      	ldr	r0, [pc, #52]	; (80042d0 <initpga+0xbc>)
 800429a:	f008 f9e3 	bl	800c664 <HAL_SPI_Transmit>
 800429e:	b978      	cbnz	r0, 80042c0 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 80042a0:	9001      	str	r0, [sp, #4]
 80042a2:	9b01      	ldr	r3, [sp, #4]
 80042a4:	2b31      	cmp	r3, #49	; 0x31
 80042a6:	dc05      	bgt.n	80042b4 <initpga+0xa0>
 80042a8:	9b01      	ldr	r3, [sp, #4]
 80042aa:	3301      	adds	r3, #1
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	9b01      	ldr	r3, [sp, #4]
 80042b0:	2b31      	cmp	r3, #49	; 0x31
 80042b2:	ddf9      	ble.n	80042a8 <initpga+0x94>
			;
	}
	setpgagain(1);			// 1 == gain of 2x
 80042b4:	2001      	movs	r0, #1
 80042b6:	f7ff ff75 	bl	80041a4 <setpgagain>
	return (0);
 80042ba:	2000      	movs	r0, #0
}
 80042bc:	b002      	add	sp, #8
 80042be:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2\n\r");
 80042c0:	4805      	ldr	r0, [pc, #20]	; (80042d8 <initpga+0xc4>)
 80042c2:	f01e f8ff 	bl	80224c4 <iprintf>
		return (1);
 80042c6:	2001      	movs	r0, #1
}
 80042c8:	b002      	add	sp, #8
 80042ca:	bd10      	pop	{r4, pc}
 80042cc:	40021800 	.word	0x40021800
 80042d0:	2001af44 	.word	0x2001af44
 80042d4:	08028260 	.word	0x08028260
 80042d8:	08027fd0 	.word	0x08027fd0

080042dc <bumppga>:

// bump the pga by one step
int bumppga(int i) {
	volatile int gain;

	gain = pgagain & 0x7;
 80042dc:	4b10      	ldr	r3, [pc, #64]	; (8004320 <bumppga+0x44>)
 80042de:	881b      	ldrh	r3, [r3, #0]
int bumppga(int i) {
 80042e0:	b510      	push	{r4, lr}
	gain = pgagain & 0x7;
 80042e2:	f003 0307 	and.w	r3, r3, #7
int bumppga(int i) {
 80042e6:	b082      	sub	sp, #8
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 80042e8:	1e04      	subs	r4, r0, #0
	gain = pgagain & 0x7;
 80042ea:	9301      	str	r3, [sp, #4]
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 80042ec:	9b01      	ldr	r3, [sp, #4]
 80042ee:	da04      	bge.n	80042fa <bumppga+0x1e>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bfd4      	ite	le
 80042f4:	2000      	movle	r0, #0
 80042f6:	2001      	movgt	r0, #1
 80042f8:	b138      	cbz	r0, 800430a <bumppga+0x2e>
 80042fa:	2c00      	cmp	r4, #0
 80042fc:	9801      	ldr	r0, [sp, #4]
 80042fe:	dd06      	ble.n	800430e <bumppga+0x32>
 8004300:	2806      	cmp	r0, #6
 8004302:	bfcc      	ite	gt
 8004304:	2000      	movgt	r0, #0
 8004306:	2001      	movle	r0, #1
 8004308:	b908      	cbnz	r0, 800430e <bumppga+0x32>
		gain = gain + i;
		setpgagain(gain);
		return(i);
	}
return(0);
}
 800430a:	b002      	add	sp, #8
 800430c:	bd10      	pop	{r4, pc}
		gain = gain + i;
 800430e:	9b01      	ldr	r3, [sp, #4]
 8004310:	4423      	add	r3, r4
 8004312:	9301      	str	r3, [sp, #4]
		setpgagain(gain);
 8004314:	9801      	ldr	r0, [sp, #4]
 8004316:	f7ff ff45 	bl	80041a4 <setpgagain>
		return(i);
 800431a:	4620      	mov	r0, r4
}
 800431c:	b002      	add	sp, #8
 800431e:	bd10      	pop	{r4, pc}
 8004320:	2000026a 	.word	0x2000026a

08004324 <initdualmux>:
//////////////////////////////////////////////
//
// Initialise the dual mux ADG729
//
//////////////////////////////////////////////
void initdualmux(void) {
 8004324:	b500      	push	{lr}
	//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8004326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void initdualmux(void) {
 800432a:	b083      	sub	sp, #12
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 800432c:	2301      	movs	r3, #1
 800432e:	4a08      	ldr	r2, [pc, #32]	; (8004350 <initdualmux+0x2c>)
 8004330:	9000      	str	r0, [sp, #0]
 8004332:	2188      	movs	r1, #136	; 0x88
 8004334:	4807      	ldr	r0, [pc, #28]	; (8004354 <initdualmux+0x30>)
 8004336:	f005 fdc9 	bl	8009ecc <HAL_I2C_Master_Transmit>
 800433a:	b910      	cbnz	r0, 8004342 <initdualmux+0x1e>
		printf("I2C HAL returned error 1\n\r");
	}
}
 800433c:	b003      	add	sp, #12
 800433e:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 8004342:	4805      	ldr	r0, [pc, #20]	; (8004358 <initdualmux+0x34>)
}
 8004344:	b003      	add	sp, #12
 8004346:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 800434a:	f01e b8bb 	b.w	80224c4 <iprintf>
 800434e:	bf00      	nop
 8004350:	20000268 	.word	0x20000268
 8004354:	2001b144 	.word	0x2001b144
 8004358:	08027fe8 	.word	0x08027fe8
 800435c:	00000000 	.word	0x00000000

08004360 <getpressure115>:

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8004360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_StatusTypeDef result;
	volatile double ffrac, p, t, n;
	uint16_t pr, tr;
	uint8_t testdat[8];

	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004364:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004368:	2512      	movs	r5, #18
 800436a:	2302      	movs	r3, #2
 800436c:	21c0      	movs	r1, #192	; 0xc0
 800436e:	487c      	ldr	r0, [pc, #496]	; (8004560 <getpressure115+0x200>)
HAL_StatusTypeDef getpressure115(void) {
 8004370:	ed2d 8b02 	vpush	{d8}
 8004374:	b090      	sub	sp, #64	; 0x40
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004376:	aa05      	add	r2, sp, #20
 8004378:	9400      	str	r4, [sp, #0]
 800437a:	f8ad 5014 	strh.w	r5, [sp, #20]
 800437e:	f005 fda5 	bl	8009ecc <HAL_I2C_Master_Transmit>
	// CMD Start Conversion
	if (result != HAL_OK) {
 8004382:	4607      	mov	r7, r0
 8004384:	2800      	cmp	r0, #0
 8004386:	f040 80c9 	bne.w	800451c <getpressure115+0x1bc>
	}

	osDelay(4);		// conversion time max 3mS

	for (i = 0; i < 4; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 800438a:	46a0      	mov	r8, r4
	for (i = 0; i < 4; i++) {
 800438c:	4604      	mov	r4, r0
	osDelay(4);		// conversion time max 3mS
 800438e:	2004      	movs	r0, #4
 8004390:	ae0e      	add	r6, sp, #56	; 0x38
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 8004392:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8004560 <getpressure115+0x200>
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004396:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800458c <getpressure115+0x22c>
	osDelay(4);		// conversion time max 3mS
 800439a:	f00e fb2d 	bl	80129f8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 800439e:	2301      	movs	r3, #1
 80043a0:	9600      	str	r6, [sp, #0]
 80043a2:	b2a2      	uxth	r2, r4
 80043a4:	21c1      	movs	r1, #193	; 0xc1
 80043a6:	4648      	mov	r0, r9
 80043a8:	f8cd 8008 	str.w	r8, [sp, #8]
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	3601      	adds	r6, #1
 80043b0:	f005 fe3e 	bl	800a030 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80043b4:	4605      	mov	r5, r0
 80043b6:	2800      	cmp	r0, #0
 80043b8:	f040 80a2 	bne.w	8004500 <getpressure115+0x1a0>
	for (i = 0; i < 4; i++) {
 80043bc:	3401      	adds	r4, #1
 80043be:	2c04      	cmp	r4, #4
 80043c0:	d1ed      	bne.n	800439e <getpressure115+0x3e>
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
	tr = (data[2] * 256 + data[3]) >> 6;
 80043c2:	f89d 403a 	ldrb.w	r4, [sp, #58]	; 0x3a
//	printf("Comp: Press = %f\n", p);

	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
//	printf("kPA Press = %f\n", p);

	ffrac = modf(p, &n);
 80043c6:	a80c      	add	r0, sp, #48	; 0x30
	pr = (data[0] * 256 + data[1]) >> 6;
 80043c8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38

				printf("myt 0x%x, %d, t=%f, myf=%f\n\r",myt,myt,t,myf);

			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80043cc:	eeb3 8b00 	vmov.f64	d8, #48	; 0x41800000  16.0
	tr = (data[2] * 256 + data[3]) >> 6;
 80043d0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
	pr = (data[0] * 256 + data[1]) >> 6;
 80043d4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
	tr = (data[2] * 256 + data[3]) >> 6;
 80043d8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
	tempfrac = tempfrac * 100;	// now 10,000
 80043dc:	4d61      	ldr	r5, [pc, #388]	; (8004564 <getpressure115+0x204>)
	pr = (data[0] * 256 + data[1]) >> 6;
 80043de:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80043e2:	4961      	ldr	r1, [pc, #388]	; (8004568 <getpressure115+0x208>)
	t = tr;
 80043e4:	099c      	lsrs	r4, r3, #6
	pr = (data[0] * 256 + data[1]) >> 6;
 80043e6:	0992      	lsrs	r2, r2, #6
	t = tr;
 80043e8:	ee06 4a10 	vmov	s12, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 80043ec:	119c      	asrs	r4, r3, #6
	p = pr;
 80043ee:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80043f2:	4a5e      	ldr	r2, [pc, #376]	; (800456c <getpressure115+0x20c>)
	t = tr;
 80043f4:	eeb8 6b46 	vcvt.f64.u32	d6, s12
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80043f8:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <getpressure115+0x210>)
	p = pr;
 80043fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	t = tr;
 80043fe:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	p = pr;
 8004402:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004406:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800440a:	ed91 4b00 	vldr	d4, [r1]
 800440e:	ed92 5b00 	vldr	d5, [r2]
 8004412:	ed9d 1b08 	vldr	d1, [sp, #32]
 8004416:	ed93 7b00 	vldr	d7, [r3]
 800441a:	eea4 5b06 	vfma.f64	d5, d4, d6
 800441e:	4b55      	ldr	r3, [pc, #340]	; (8004574 <getpressure115+0x214>)
 8004420:	ed9d 3b0a 	vldr	d3, [sp, #40]	; 0x28
 8004424:	ed93 2b00 	vldr	d2, [r3]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8004428:	ed9f 4b41 	vldr	d4, [pc, #260]	; 8004530 <getpressure115+0x1d0>
 800442c:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8004538 <getpressure115+0x1d8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004430:	eea5 7b01 	vfma.f64	d7, d5, d1
 8004434:	eea2 7b03 	vfma.f64	d7, d2, d3
 8004438:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 800443c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004440:	eea7 6b04 	vfma.f64	d6, d7, d4
 8004444:	ed8d 6b08 	vstr	d6, [sp, #32]
	ffrac = modf(p, &n);
 8004448:	ed9d 0b08 	vldr	d0, [sp, #32]
 800444c:	f01e f926 	bl	802269c <modf>
	t = tr * -0.1706 + 112.27; //C
 8004450:	ee07 4a90 	vmov	s15, r4
	tempfrac = tempfrac * 100;	// now 10,000
 8004454:	2264      	movs	r2, #100	; 0x64
	temperature = t;
 8004456:	4b48      	ldr	r3, [pc, #288]	; (8004578 <getpressure115+0x218>)
	t = tr * -0.1706 + 112.27; //C
 8004458:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800445c:	4847      	ldr	r0, [pc, #284]	; (800457c <getpressure115+0x21c>)
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800445e:	4c48      	ldr	r4, [pc, #288]	; (8004580 <getpressure115+0x220>)
	pressure = (uint32_t) n;
 8004460:	4948      	ldr	r1, [pc, #288]	; (8004584 <getpressure115+0x224>)
	t = tr * -0.1706 + 112.27; //C
 8004462:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8004540 <getpressure115+0x1e0>
 8004466:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8004548 <getpressure115+0x1e8>
	ffrac = modf(p, &n);
 800446a:	ed8d 0b06 	vstr	d0, [sp, #24]
	pressure = (uint32_t) n;
 800446e:	ed9d 4b0c 	vldr	d4, [sp, #48]	; 0x30
	t = tr * -0.1706 + 112.27; //C
 8004472:	eea7 5b06 	vfma.f64	d5, d7, d6
	pressure = (uint32_t) n;
 8004476:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800447a:	ed9d 3b06 	vldr	d3, [sp, #24]
 800447e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8004550 <getpressure115+0x1f0>
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004482:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8004558 <getpressure115+0x1f8>
	pressure = (uint32_t) n;
 8004486:	ed81 4a00 	vstr	s8, [r1]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800448a:	ee23 3b00 	vmul.f64	d3, d3, d0
	t = tr * -0.1706 + 112.27; //C
 800448e:	ed8d 5b0a 	vstr	d5, [sp, #40]	; 0x28
	temperature = t;
 8004492:	ed9d 2b0a 	vldr	d2, [sp, #40]	; 0x28
	tempfrac = (t - temperature) * 100;
 8004496:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800449a:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
	temperature = t;
 800449e:	eebc 2bc2 	vcvt.u32.f64	s4, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80044a2:	eebc 3bc3 	vcvt.u32.f64	s6, d3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80044a6:	ee26 6b08 	vmul.f64	d6, d6, d8
	temperature = t;
 80044aa:	ed83 2a00 	vstr	s4, [r3]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80044ae:	ed84 3a00 	vstr	s6, [r4]
	tempfrac = (t - temperature) * 100;
 80044b2:	eeb8 7b42 	vcvt.f64.u32	d7, s4
 80044b6:	ee35 5b47 	vsub.f64	d5, d5, d7
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80044ba:	feb8 6b46 	vrinta.f64	d6, d6
 80044be:	eefc 6bc6 	vcvt.u32.f64	s13, d6
	tempfrac = (t - temperature) * 100;
 80044c2:	ee25 5b00 	vmul.f64	d5, d5, d0
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80044c6:	ee16 3a90 	vmov	r3, s13
 80044ca:	ed9d 7b08 	vldr	d7, [sp, #32]
	tempfrac = (t - temperature) * 100;
 80044ce:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80044d2:	ee27 7b01 	vmul.f64	d7, d7, d1
	tempfrac = tempfrac * 100;	// now 10,000
 80044d6:	ee15 6a10 	vmov	r6, s10
 80044da:	fb02 f206 	mul.w	r2, r2, r6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80044de:	feb8 7b47 	vrinta.f64	d7, d7
 80044e2:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = tempfrac * 100;	// now 10,000
 80044e6:	602a      	str	r2, [r5, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80044e8:	ee17 2a10 	vmov	r2, s14
 80044ec:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 80044f0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
}
 80044f4:	4638      	mov	r0, r7
 80044f6:	b010      	add	sp, #64	; 0x40
 80044f8:	ecbd 8b02 	vpop	{d8}
 80044fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004500:	4650      	mov	r0, sl
 8004502:	4629      	mov	r1, r5
 8004504:	f01d ffde 	bl	80224c4 <iprintf>
			if (i == 3)
 8004508:	2c03      	cmp	r4, #3
 800450a:	f47f af57 	bne.w	80043bc <getpressure115+0x5c>
 800450e:	462f      	mov	r7, r5
}
 8004510:	4638      	mov	r0, r7
 8004512:	b010      	add	sp, #64	; 0x40
 8004514:	ecbd 8b02 	vpop	{d8}
 8004518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 800451c:	481a      	ldr	r0, [pc, #104]	; (8004588 <getpressure115+0x228>)
 800451e:	f01d ffd1 	bl	80224c4 <iprintf>
}
 8004522:	4638      	mov	r0, r7
 8004524:	b010      	add	sp, #64	; 0x40
 8004526:	ecbd 8b02 	vpop	{d8}
 800452a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452e:	bf00      	nop
 8004530:	04411044 	.word	0x04411044
 8004534:	3fb04411 	.word	0x3fb04411
 8004538:	00000000 	.word	0x00000000
 800453c:	40490000 	.word	0x40490000
 8004540:	86594af5 	.word	0x86594af5
 8004544:	bfc5d638 	.word	0xbfc5d638
 8004548:	ae147ae1 	.word	0xae147ae1
 800454c:	405c1147 	.word	0x405c1147
 8004550:	00000000 	.word	0x00000000
 8004554:	40590000 	.word	0x40590000
 8004558:	00000000 	.word	0x00000000
 800455c:	40af4000 	.word	0x40af4000
 8004560:	2001b144 	.word	0x2001b144
 8004564:	2001babc 	.word	0x2001babc
 8004568:	20001c78 	.word	0x20001c78
 800456c:	20001c68 	.word	0x20001c68
 8004570:	20001c60 	.word	0x20001c60
 8004574:	20001c70 	.word	0x20001c70
 8004578:	2001bac0 	.word	0x2001bac0
 800457c:	2001ad7c 	.word	0x2001ad7c
 8004580:	2001bac8 	.word	0x2001bac8
 8004584:	2001bac4 	.word	0x2001bac4
 8004588:	08028004 	.word	0x08028004
 800458c:	08028028 	.word	0x08028028

08004590 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8004590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004594:	b086      	sub	sp, #24
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8004596:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 800459a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800459e:	2701      	movs	r7, #1
 80045a0:	f10d 0a18 	add.w	sl, sp, #24
		data[i] = 0x5A;
 80045a4:	ac04      	add	r4, sp, #16
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80045a6:	4e33      	ldr	r6, [pc, #204]	; (8004674 <initpressure115+0xe4>)
 80045a8:	f1ca 090c 	rsb	r9, sl, #12
		data[i] = 0x5A;
 80045ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80045b0:	eb09 0204 	add.w	r2, r9, r4
 80045b4:	2301      	movs	r3, #1
 80045b6:	9400      	str	r4, [sp, #0]
 80045b8:	21c0      	movs	r1, #192	; 0xc0
 80045ba:	b292      	uxth	r2, r2
 80045bc:	4630      	mov	r0, r6
 80045be:	441c      	add	r4, r3
 80045c0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80045c4:	f005 fd34 	bl	800a030 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80045c8:	4605      	mov	r5, r0
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d142      	bne.n	8004654 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 80045ce:	4554      	cmp	r4, sl
 80045d0:	d1ee      	bne.n	80045b0 <initpressure115+0x20>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 80045d2:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80045d6:	2c5a      	cmp	r4, #90	; 0x5a
 80045d8:	d044      	beq.n	8004664 <initpressure115+0xd4>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 80045da:	f89d 2012 	ldrb.w	r2, [sp, #18]
	b2co = (data[4] << 8) | data[5];
 80045de:	f89d 3014 	ldrb.w	r3, [sp, #20]
	b1co = (data[2] << 8) | data[3];
 80045e2:	f89d 0013 	ldrb.w	r0, [sp, #19]
	b2co = (data[4] << 8) | data[5];
 80045e6:	f89d 1015 	ldrb.w	r1, [sp, #21]
	c12co = (data[6] << 8) | data[7];
 80045ea:	f89d 6016 	ldrb.w	r6, [sp, #22]
	b1co = (data[2] << 8) | data[3];
 80045ee:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	b2co = (data[4] << 8) | data[5];
 80045f2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	c12co = (data[6] << 8) | data[7];
 80045f6:	f89d 2017 	ldrb.w	r2, [sp, #23]
	a0co = (data[0] << 8) | data[1];
 80045fa:	f89d 3011 	ldrb.w	r3, [sp, #17]
	b1co = (data[2] << 8) | data[3];
 80045fe:	b200      	sxth	r0, r0
	c12co = (data[6] << 8) | data[7];
 8004600:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	a0co = (data[0] << 8) | data[1];
 8004604:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
	b1 = (double) b1co / 8192;
 8004608:	ee04 0a10 	vmov	s8, r0
 800460c:	eeba 4be9 	vcvt.f64.s32	d4, d4, #13
	b2co = (data[4] << 8) | data[5];
 8004610:	b209      	sxth	r1, r1
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8004612:	f342 028d 	sbfx	r2, r2, #2, #14
	a0 = (double) a0co / 8;
 8004616:	b21b      	sxth	r3, r3
	b1 = (double) b1co / 8192;
 8004618:	4817      	ldr	r0, [pc, #92]	; (8004678 <initpressure115+0xe8>)
	b2 = (double) b2co / 16384;
 800461a:	ee05 1a10 	vmov	s10, r1
 800461e:	eeba 5bc9 	vcvt.f64.s32	d5, d5, #14
 8004622:	4916      	ldr	r1, [pc, #88]	; (800467c <initpressure115+0xec>)
	c12 /= (double) 4194304.0;
 8004624:	ee06 2a10 	vmov	s12, r2
 8004628:	eeba 6bc5 	vcvt.f64.s32	d6, d6, #22
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <initpressure115+0xf0>)
	a0 = (double) a0co / 8;
 800462e:	ee07 3a10 	vmov	s14, r3
 8004632:	eeba 7bee 	vcvt.f64.s32	d7, d7, #3
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <initpressure115+0xf4>)
	b1 = (double) b1co / 8192;
 8004638:	ed80 4b00 	vstr	d4, [r0]
	b2 = (double) b2co / 16384;
 800463c:	ed81 5b00 	vstr	d5, [r1]
	c12 /= (double) 4194304.0;
 8004640:	ed82 6b00 	vstr	d6, [r2]
	a0 = (double) a0co / 8;
 8004644:	ed83 7b00 	vstr	d7, [r3]

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
 8004648:	f7ff fe8a 	bl	8004360 <getpressure115>
	return (HAL_OK);
}
 800464c:	4628      	mov	r0, r5
 800464e:	b006      	add	sp, #24
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8004654:	4601      	mov	r1, r0
 8004656:	480c      	ldr	r0, [pc, #48]	; (8004688 <initpressure115+0xf8>)
 8004658:	f01d ff34 	bl	80224c4 <iprintf>
}
 800465c:	4628      	mov	r0, r5
 800465e:	b006      	add	sp, #24
 8004660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8004664:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8004666:	4809      	ldr	r0, [pc, #36]	; (800468c <initpressure115+0xfc>)
 8004668:	f01d ff2c 	bl	80224c4 <iprintf>
}
 800466c:	4628      	mov	r0, r5
 800466e:	b006      	add	sp, #24
 8004670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004674:	2001b144 	.word	0x2001b144
 8004678:	20001c68 	.word	0x20001c68
 800467c:	20001c70 	.word	0x20001c70
 8004680:	20001c78 	.word	0x20001c78
 8004684:	20001c60 	.word	0x20001c60
 8004688:	0802804c 	.word	0x0802804c
 800468c:	0802807c 	.word	0x0802807c

08004690 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8004690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004694:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8004696:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8004698:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 800469a:	4f47      	ldr	r7, [pc, #284]	; (80047b8 <getpressure3115+0x128>)
 800469c:	ae08      	add	r6, sp, #32
	data[0] = 0x55;
 800469e:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 80046a2:	200a      	movs	r0, #10
 80046a4:	f00e f9a8 	bl	80129f8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80046a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046ac:	2301      	movs	r3, #1
 80046ae:	21c0      	movs	r1, #192	; 0xc0
 80046b0:	9202      	str	r2, [sp, #8]
 80046b2:	2200      	movs	r2, #0
 80046b4:	4841      	ldr	r0, [pc, #260]	; (80047bc <getpressure3115+0x12c>)
 80046b6:	9600      	str	r6, [sp, #0]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	f005 fcb9 	bl	800a030 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80046be:	4604      	mov	r4, r0
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d167      	bne.n	8004794 <getpressure3115+0x104>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 80046c4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 80046c8:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 80046ca:	071b      	lsls	r3, r3, #28
 80046cc:	d401      	bmi.n	80046d2 <getpressure3115+0x42>
	for (trys = 0; trys < 4; trys++) {
 80046ce:	2d04      	cmp	r5, #4
 80046d0:	d1e7      	bne.n	80046a2 <getpressure3115+0x12>
 80046d2:	2501      	movs	r5, #1
 80046d4:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80046d6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 80046da:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80047bc <getpressure3115+0x12c>
 80046de:	46a8      	mov	r8, r5
 80046e0:	2301      	movs	r3, #1
 80046e2:	b2aa      	uxth	r2, r5
 80046e4:	21c0      	movs	r1, #192	; 0xc0
 80046e6:	4648      	mov	r0, r9
 80046e8:	f8cd a008 	str.w	sl, [sp, #8]
	for (i = 1; i < 6; i++) {
 80046ec:	441d      	add	r5, r3
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80046ee:	f8cd 8004 	str.w	r8, [sp, #4]
 80046f2:	9600      	str	r6, [sp, #0]
 80046f4:	f005 fc9c 	bl	800a030 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80046f8:	4604      	mov	r4, r0
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d154      	bne.n	80047a8 <getpressure3115+0x118>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 80046fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8004702:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8004704:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8004708:	d1ea      	bne.n	80046e0 <getpressure3115+0x50>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 800470a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
	ifrac = (p % 4000);		// fractions of a kilopascal
 800470e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004712:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8004716:	f24f 4124 	movw	r1, #62500	; 0xf424
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 800471a:	0212      	lsls	r2, r2, #8
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 800471c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8004720:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004724:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 800472c:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004730:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	pressure = ifn;
 8004734:	4e22      	ldr	r6, [pc, #136]	; (80047c0 <getpressure3115+0x130>)
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004736:	432a      	orrs	r2, r5
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004738:	4d22      	ldr	r5, [pc, #136]	; (80047c4 <getpressure3115+0x134>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 800473a:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 800473c:	0912      	lsrs	r2, r2, #4
 800473e:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004740:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004742:	9b05      	ldr	r3, [sp, #20]
 8004744:	9a04      	ldr	r2, [sp, #16]
 8004746:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
	ifn = p / 4000;		// kilopascals
 800474a:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <getpressure3115+0x138>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 800474c:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
	ifn = p / 4000;		// kilopascals
 8004750:	9a04      	ldr	r2, [sp, #16]
 8004752:	fba3 5202 	umull	r5, r2, r3, r2
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004756:	4d1d      	ldr	r5, [pc, #116]	; (80047cc <getpressure3115+0x13c>)
	ifn = p / 4000;		// kilopascals
 8004758:	0a12      	lsrs	r2, r2, #8
 800475a:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 800475c:	9a04      	ldr	r2, [sp, #16]
 800475e:	fba3 7302 	umull	r7, r3, r3, r2
	temperature = t >> 4;
 8004762:	4f1b      	ldr	r7, [pc, #108]	; (80047d0 <getpressure3115+0x140>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004764:	0a1b      	lsrs	r3, r3, #8
 8004766:	fb00 2313 	mls	r3, r0, r3, r2
 800476a:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 800476c:	f8dd c018 	ldr.w	ip, [sp, #24]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004770:	9807      	ldr	r0, [sp, #28]
	temperature = t >> 4;
 8004772:	9b05      	ldr	r3, [sp, #20]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004774:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004776:	6028      	str	r0, [r5, #0]
	temperature = t >> 4;
 8004778:	091b      	lsrs	r3, r3, #4
	tempfrac = (t & 0x0F) * 625 * 100;
 800477a:	f002 020f 	and.w	r2, r2, #15
 800477e:	4815      	ldr	r0, [pc, #84]	; (80047d4 <getpressure3115+0x144>)
	pressure = ifn;
 8004780:	f8c6 c000 	str.w	ip, [r6]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004784:	fb01 f102 	mul.w	r1, r1, r2
	temperature = t >> 4;
 8004788:	603b      	str	r3, [r7, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 800478a:	6001      	str	r1, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 800478c:	4620      	mov	r0, r4
 800478e:	b00c      	add	sp, #48	; 0x30
 8004790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8004794:	4638      	mov	r0, r7
 8004796:	4621      	mov	r1, r4
 8004798:	f01d fe94 	bl	80224c4 <iprintf>
			if (trys == 3)
 800479c:	2d03      	cmp	r5, #3
 800479e:	d191      	bne.n	80046c4 <getpressure3115+0x34>
}
 80047a0:	4620      	mov	r0, r4
 80047a2:	b00c      	add	sp, #48	; 0x30
 80047a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 80047a8:	4601      	mov	r1, r0
 80047aa:	480b      	ldr	r0, [pc, #44]	; (80047d8 <getpressure3115+0x148>)
 80047ac:	f01d fe8a 	bl	80224c4 <iprintf>
}
 80047b0:	4620      	mov	r0, r4
 80047b2:	b00c      	add	sp, #48	; 0x30
 80047b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b8:	080280a4 	.word	0x080280a4
 80047bc:	2001b144 	.word	0x2001b144
 80047c0:	2001bac4 	.word	0x2001bac4
 80047c4:	2001ad7c 	.word	0x2001ad7c
 80047c8:	10624dd3 	.word	0x10624dd3
 80047cc:	2001bac8 	.word	0x2001bac8
 80047d0:	2001bac0 	.word	0x2001bac0
 80047d4:	2001babc 	.word	0x2001babc
 80047d8:	080280cc 	.word	0x080280cc

080047dc <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 80047dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047de:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 80047e0:	2501      	movs	r5, #1
 80047e2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80047e6:	220c      	movs	r2, #12
 80047e8:	a808      	add	r0, sp, #32
 80047ea:	462b      	mov	r3, r5
 80047ec:	21c0      	movs	r1, #192	; 0xc0
 80047ee:	9602      	str	r6, [sp, #8]
 80047f0:	9000      	str	r0, [sp, #0]
 80047f2:	9501      	str	r5, [sp, #4]
 80047f4:	4830      	ldr	r0, [pc, #192]	; (80048b8 <initpressure3115+0xdc>)
 80047f6:	f005 fc1b 	bl	800a030 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d145      	bne.n	800488a <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 80047fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004802:	2bc4      	cmp	r3, #196	; 0xc4
 8004804:	d003      	beq.n	800480e <initpressure3115+0x32>
		return (HAL_ERROR);
 8004806:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8004808:	4620      	mov	r0, r4
 800480a:	b00b      	add	sp, #44	; 0x2c
 800480c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 800480e:	4f2b      	ldr	r7, [pc, #172]	; (80048bc <initpressure3115+0xe0>)
 8004810:	2302      	movs	r3, #2
 8004812:	aa05      	add	r2, sp, #20
 8004814:	21c0      	movs	r1, #192	; 0xc0
 8004816:	89bc      	ldrh	r4, [r7, #12]
 8004818:	4827      	ldr	r0, [pc, #156]	; (80048b8 <initpressure3115+0xdc>)
 800481a:	9600      	str	r6, [sp, #0]
 800481c:	f8ad 4014 	strh.w	r4, [sp, #20]
 8004820:	f005 fb54 	bl	8009ecc <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004824:	4604      	mov	r4, r0
 8004826:	2800      	cmp	r0, #0
 8004828:	d136      	bne.n	8004898 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 800482a:	8a3c      	ldrh	r4, [r7, #16]
 800482c:	2302      	movs	r3, #2
 800482e:	aa06      	add	r2, sp, #24
 8004830:	21c0      	movs	r1, #192	; 0xc0
 8004832:	4821      	ldr	r0, [pc, #132]	; (80048b8 <initpressure3115+0xdc>)
 8004834:	9600      	str	r6, [sp, #0]
 8004836:	f8ad 4018 	strh.w	r4, [sp, #24]
 800483a:	f005 fb47 	bl	8009ecc <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 800483e:	4604      	mov	r4, r0
 8004840:	bb70      	cbnz	r0, 80048a0 <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8004842:	8abc      	ldrh	r4, [r7, #20]
 8004844:	2302      	movs	r3, #2
 8004846:	aa07      	add	r2, sp, #28
 8004848:	21c0      	movs	r1, #192	; 0xc0
 800484a:	481b      	ldr	r0, [pc, #108]	; (80048b8 <initpressure3115+0xdc>)
 800484c:	9600      	str	r6, [sp, #0]
 800484e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8004852:	f005 fb3b 	bl	8009ecc <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004856:	4604      	mov	r4, r0
 8004858:	bb50      	cbnz	r0, 80048b0 <initpressure3115+0xd4>
	osDelay(100);	// allow chip to start up sampling
 800485a:	2064      	movs	r0, #100	; 0x64
 800485c:	f00e f8cc 	bl	80129f8 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8004860:	aa08      	add	r2, sp, #32
 8004862:	462b      	mov	r3, r5
 8004864:	21c0      	movs	r1, #192	; 0xc0
 8004866:	9200      	str	r2, [sp, #0]
 8004868:	462a      	mov	r2, r5
 800486a:	4813      	ldr	r0, [pc, #76]	; (80048b8 <initpressure3115+0xdc>)
 800486c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004870:	f005 fbde 	bl	800a030 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8004874:	4604      	mov	r4, r0
 8004876:	b9b8      	cbnz	r0, 80048a8 <initpressure3115+0xcc>
	result = getpressure3115();
 8004878:	f7ff ff0a 	bl	8004690 <getpressure3115>
	if (result != HAL_OK) {
 800487c:	4604      	mov	r4, r0
 800487e:	2800      	cmp	r0, #0
 8004880:	d0c2      	beq.n	8004808 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8004882:	480f      	ldr	r0, [pc, #60]	; (80048c0 <initpressure3115+0xe4>)
 8004884:	f01d fe1e 	bl	80224c4 <iprintf>
 8004888:	e7be      	b.n	8004808 <initpressure3115+0x2c>
 800488a:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 800488c:	480d      	ldr	r0, [pc, #52]	; (80048c4 <initpressure3115+0xe8>)
 800488e:	f01d fe19 	bl	80224c4 <iprintf>
}
 8004892:	4620      	mov	r0, r4
 8004894:	b00b      	add	sp, #44	; 0x2c
 8004896:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8004898:	480b      	ldr	r0, [pc, #44]	; (80048c8 <initpressure3115+0xec>)
 800489a:	f01d fe13 	bl	80224c4 <iprintf>
		return (result);
 800489e:	e7b3      	b.n	8004808 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 80048a0:	480a      	ldr	r0, [pc, #40]	; (80048cc <initpressure3115+0xf0>)
 80048a2:	f01d fe0f 	bl	80224c4 <iprintf>
		return (result);
 80048a6:	e7af      	b.n	8004808 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 80048a8:	4809      	ldr	r0, [pc, #36]	; (80048d0 <initpressure3115+0xf4>)
 80048aa:	f01d fe0b 	bl	80224c4 <iprintf>
		return (result);
 80048ae:	e7ab      	b.n	8004808 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 80048b0:	4808      	ldr	r0, [pc, #32]	; (80048d4 <initpressure3115+0xf8>)
 80048b2:	f01d fe07 	bl	80224c4 <iprintf>
		return (result);
 80048b6:	e7a7      	b.n	8004808 <initpressure3115+0x2c>
 80048b8:	2001b144 	.word	0x2001b144
 80048bc:	080267b8 	.word	0x080267b8
 80048c0:	08028164 	.word	0x08028164
 80048c4:	08027fe8 	.word	0x08027fe8
 80048c8:	080280f4 	.word	0x080280f4
 80048cc:	08028110 	.word	0x08028110
 80048d0:	08028148 	.word	0x08028148
 80048d4:	0802812c 	.word	0x0802812c

080048d8 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 80048d8:	b510      	push	{r4, lr}
	int i, j, k;

	cycleleds();
 80048da:	f7ff fc25 	bl	8004128 <cycleleds>
	osDelay(500);
 80048de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048e2:	f00e f889 	bl	80129f8 <osDelay>
	printf("Initsplat: LED cycle\n");
 80048e6:	4827      	ldr	r0, [pc, #156]	; (8004984 <initsplat+0xac>)
 80048e8:	f01d fe88 	bl	80225fc <puts>

	printf("Initsplat: Dual Mux\n\r");
 80048ec:	4826      	ldr	r0, [pc, #152]	; (8004988 <initsplat+0xb0>)
 80048ee:	f01d fde9 	bl	80224c4 <iprintf>
	printf("Initsplat: Programmable Gain Amp\n");
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 80048f2:	4c26      	ldr	r4, [pc, #152]	; (800498c <initsplat+0xb4>)
	initdualmux();
 80048f4:	f7ff fd16 	bl	8004324 <initdualmux>
	osDelay(500);
 80048f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048fc:	f00e f87c 	bl	80129f8 <osDelay>
	printf("Initsplat: Programmable Gain Amp\n");
 8004900:	4823      	ldr	r0, [pc, #140]	; (8004990 <initsplat+0xb8>)
 8004902:	f01d fe7b 	bl	80225fc <puts>
	initpga();
 8004906:	f7ff fc85 	bl	8004214 <initpga>
	osDelay(500);
 800490a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800490e:	f00e f873 	bl	80129f8 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8004912:	4820      	ldr	r0, [pc, #128]	; (8004994 <initsplat+0xbc>)
 8004914:	f01d fdd6 	bl	80224c4 <iprintf>
	psensor = PNONE;
 8004918:	2300      	movs	r3, #0
 800491a:	6023      	str	r3, [r4, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 800491c:	f7ff ff5e 	bl	80047dc <initpressure3115>
 8004920:	b988      	cbnz	r0, 8004946 <initsplat+0x6e>
		printf("MPL3115A2 pressure sensor present\n\r");
 8004922:	481d      	ldr	r0, [pc, #116]	; (8004998 <initsplat+0xc0>)
 8004924:	f01d fdce 	bl	80224c4 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2<<3);
 8004928:	4a1c      	ldr	r2, [pc, #112]	; (800499c <initsplat+0xc4>)
		psensor = MPL3115A2;
 800492a:	2102      	movs	r1, #2
			statuspkt.bconf |= (MPL115A2<<3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 800492c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		statuspkt.bconf |= (MPL3115A2<<3);
 8004930:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8004934:	6021      	str	r1, [r4, #0]
		statuspkt.bconf |= (MPL3115A2<<3);
 8004936:	f043 0310 	orr.w	r3, r3, #16
}
 800493a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		statuspkt.bconf |= (MPL3115A2<<3);
 800493e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 8004942:	f00e b859 	b.w	80129f8 <osDelay>
		if (initpressure115() == HAL_OK) {
 8004946:	f7ff fe23 	bl	8004590 <initpressure115>
 800494a:	b988      	cbnz	r0, 8004970 <initsplat+0x98>
			printf("MPL115A2 pressure sensor present\n\r");
 800494c:	4814      	ldr	r0, [pc, #80]	; (80049a0 <initsplat+0xc8>)
 800494e:	f01d fdb9 	bl	80224c4 <iprintf>
			statuspkt.bconf |= (MPL115A2<<3);
 8004952:	4a12      	ldr	r2, [pc, #72]	; (800499c <initsplat+0xc4>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8004954:	2101      	movs	r1, #1
	osDelay(500);
 8004956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2<<3);
 800495a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 800495e:	6021      	str	r1, [r4, #0]
			statuspkt.bconf |= (MPL115A2<<3);
 8004960:	f043 0308 	orr.w	r3, r3, #8
}
 8004964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			statuspkt.bconf |= (MPL115A2<<3);
 8004968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 800496c:	f00e b844 	b.w	80129f8 <osDelay>
			printf("NO pressure sensor present\n\r");
 8004970:	480c      	ldr	r0, [pc, #48]	; (80049a4 <initsplat+0xcc>)
 8004972:	f01d fda7 	bl	80224c4 <iprintf>
	osDelay(500);
 8004976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800497a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 800497e:	f00e b83b 	b.w	80129f8 <osDelay>
 8004982:	bf00      	nop
 8004984:	08028184 	.word	0x08028184
 8004988:	0802819c 	.word	0x0802819c
 800498c:	20001c84 	.word	0x20001c84
 8004990:	080281b4 	.word	0x080281b4
 8004994:	080281d8 	.word	0x080281d8
 8004998:	080281f8 	.word	0x080281f8
 800499c:	2001ad7c 	.word	0x2001ad7c
 80049a0:	0802821c 	.word	0x0802821c
 80049a4:	08028240 	.word	0x08028240

080049a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80049a8:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <HAL_MspInit+0x5c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80049aa:	2200      	movs	r2, #0
 80049ac:	210f      	movs	r1, #15
 80049ae:	f06f 0001 	mvn.w	r0, #1
{
 80049b2:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80049b4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 80049b6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80049b8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80049bc:	641c      	str	r4, [r3, #64]	; 0x40
 80049be:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80049c0:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 80049c4:	9400      	str	r4, [sp, #0]
 80049c6:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80049ca:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80049ce:	645c      	str	r4, [r3, #68]	; 0x44
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80049da:	f002 fa29 	bl	8006e30 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80049de:	2200      	movs	r2, #0
 80049e0:	2106      	movs	r1, #6
 80049e2:	2005      	movs	r0, #5
 80049e4:	f002 fa24 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80049e8:	2005      	movs	r0, #5
 80049ea:	f002 fa6b 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2106      	movs	r1, #6
 80049f2:	2051      	movs	r0, #81	; 0x51
 80049f4:	f002 fa1c 	bl	8006e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80049f8:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049fa:	b002      	add	sp, #8
 80049fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8004a00:	f002 ba60 	b.w	8006ec4 <HAL_NVIC_EnableIRQ>
 8004a04:	40023800 	.word	0x40023800

08004a08 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004a08:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <HAL_ADC_MspInit+0x12c>)
 8004a0a:	6803      	ldr	r3, [r0, #0]
{
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 8004a0e:	4293      	cmp	r3, r2
{
 8004a10:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a12:	f04f 0400 	mov.w	r4, #0
 8004a16:	9408      	str	r4, [sp, #32]
 8004a18:	9407      	str	r4, [sp, #28]
 8004a1a:	940b      	str	r4, [sp, #44]	; 0x2c
 8004a1c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8004a20:	d007      	beq.n	8004a32 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8004a22:	4a45      	ldr	r2, [pc, #276]	; (8004b38 <HAL_ADC_MspInit+0x130>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d046      	beq.n	8004ab6 <HAL_ADC_MspInit+0xae>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8004a28:	4a44      	ldr	r2, [pc, #272]	; (8004b3c <HAL_ADC_MspInit+0x134>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d061      	beq.n	8004af2 <HAL_ADC_MspInit+0xea>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004a2e:	b00d      	add	sp, #52	; 0x34
 8004a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a32:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <HAL_ADC_MspInit+0x138>)
 8004a34:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a36:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a38:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a3c:	a907      	add	r1, sp, #28
    hdma_adc1.Instance = DMA2_Stream4;
 8004a3e:	4e41      	ldr	r6, [pc, #260]	; (8004b44 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
 8004a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a48:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004a4c:	9201      	str	r2, [sp, #4]
 8004a4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a5a:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5c:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a60:	4839      	ldr	r0, [pc, #228]	; (8004b48 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a62:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a64:	9302      	str	r3, [sp, #8]
 8004a66:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a68:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a6a:	f004 fcab 	bl	80093c4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8004a6e:	4a37      	ldr	r2, [pc, #220]	; (8004b4c <HAL_ADC_MspInit+0x144>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a78:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004a7c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004a80:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Instance = DMA2_Stream4;
 8004a82:	6032      	str	r2, [r6, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004a84:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004a88:	2204      	movs	r2, #4
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a8a:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8004a8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004a90:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a92:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a94:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004a96:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004a98:	6272      	str	r2, [r6, #36]	; 0x24
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8004a9a:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a9c:	e9c6 c005 	strd	ip, r0, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004aa0:	4630      	mov	r0, r6
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004aa2:	e9c6 7107 	strd	r7, r1, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004aa6:	f002 fcd3 	bl	8007450 <HAL_DMA_Init>
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d13f      	bne.n	8004b2e <HAL_ADC_MspInit+0x126>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004aae:	63ae      	str	r6, [r5, #56]	; 0x38
 8004ab0:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8004ab2:	b00d      	add	sp, #52	; 0x34
 8004ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004ab8:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aba:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004abc:	2503      	movs	r5, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac0:	4821      	ldr	r0, [pc, #132]	; (8004b48 <HAL_ADC_MspInit+0x140>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac6:	645a      	str	r2, [r3, #68]	; 0x44
 8004ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004ace:	9203      	str	r2, [sp, #12]
 8004ad0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004adc:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	9304      	str	r3, [sp, #16]
 8004ae4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ae6:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aea:	f004 fc6b 	bl	80093c4 <HAL_GPIO_Init>
}
 8004aee:	b00d      	add	sp, #52	; 0x34
 8004af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004af2:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004af4:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004af8:	2503      	movs	r5, #3
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afc:	4812      	ldr	r0, [pc, #72]	; (8004b48 <HAL_ADC_MspInit+0x140>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b02:	645a      	str	r2, [r3, #68]	; 0x44
 8004b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b06:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004b0a:	9205      	str	r2, [sp, #20]
 8004b0c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b18:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	9306      	str	r3, [sp, #24]
 8004b20:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b22:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b26:	f004 fc4d 	bl	80093c4 <HAL_GPIO_Init>
}
 8004b2a:	b00d      	add	sp, #52	; 0x34
 8004b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8004b2e:	f7fe f831 	bl	8002b94 <Error_Handler>
 8004b32:	e7bc      	b.n	8004aae <HAL_ADC_MspInit+0xa6>
 8004b34:	40012000 	.word	0x40012000
 8004b38:	40012100 	.word	0x40012100
 8004b3c:	40012200 	.word	0x40012200
 8004b40:	40023800 	.word	0x40023800
 8004b44:	2001b568 	.word	0x2001b568
 8004b48:	40020000 	.word	0x40020000
 8004b4c:	40026470 	.word	0x40026470

08004b50 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <HAL_CRC_MspInit+0x28>)
 8004b52:	6802      	ldr	r2, [r0, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d000      	beq.n	8004b5a <HAL_CRC_MspInit+0xa>
 8004b58:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004b5a:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 8004b62:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8004b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004b74:	b002      	add	sp, #8
 8004b76:	4770      	bx	lr
 8004b78:	40023000 	.word	0x40023000

08004b7c <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <HAL_DAC_MspInit+0xb0>)
 8004b7e:	6802      	ldr	r2, [r0, #0]
{
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC)
 8004b82:	429a      	cmp	r2, r3
{
 8004b84:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b86:	f04f 0400 	mov.w	r4, #0
 8004b8a:	9404      	str	r4, [sp, #16]
 8004b8c:	9403      	str	r4, [sp, #12]
 8004b8e:	9407      	str	r4, [sp, #28]
 8004b90:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC)
 8004b94:	d001      	beq.n	8004b9a <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004b96:	b009      	add	sp, #36	; 0x24
 8004b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8004b9a:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8004b9e:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004ba0:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ba2:	2703      	movs	r7, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8004ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba6:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 8004ba8:	4e21      	ldr	r6, [pc, #132]	; (8004c30 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8004baa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
 8004bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004bb6:	9201      	str	r2, [sp, #4]
 8004bb8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004bc4:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc6:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bca:	481a      	ldr	r0, [pc, #104]	; (8004c34 <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bcc:	9704      	str	r7, [sp, #16]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8004bce:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bd2:	9302      	str	r3, [sp, #8]
 8004bd4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd8:	f004 fbf4 	bl	80093c4 <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 8004bdc:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <HAL_DAC_MspInit+0xbc>)
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bde:	2040      	movs	r0, #64	; 0x40
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8004be0:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004be4:	2104      	movs	r1, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8004be6:	2202      	movs	r2, #2
    hdma_dac1.Instance = DMA1_Stream5;
 8004be8:	6033      	str	r3, [r6, #0]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8004bea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bee:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004bf0:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8004bf2:	6137      	str	r7, [r6, #16]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8004bf4:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bf6:	e9c6 c001 	strd	ip, r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8004bfa:	4630      	mov	r0, r6
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bfc:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8004c00:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8004c04:	e9c6 1209 	strd	r1, r2, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8004c08:	f002 fc22 	bl	8007450 <HAL_DMA_Init>
 8004c0c:	b958      	cbnz	r0, 8004c26 <HAL_DAC_MspInit+0xaa>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8004c12:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8004c14:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8004c16:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8004c18:	f002 f90a 	bl	8006e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c1c:	2036      	movs	r0, #54	; 0x36
 8004c1e:	f002 f951 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
}
 8004c22:	b009      	add	sp, #36	; 0x24
 8004c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8004c26:	f7fd ffb5 	bl	8002b94 <Error_Handler>
 8004c2a:	e7f0      	b.n	8004c0e <HAL_DAC_MspInit+0x92>
 8004c2c:	40007400 	.word	0x40007400
 8004c30:	2001b378 	.word	0x2001b378
 8004c34:	40020000 	.word	0x40020000
 8004c38:	40026088 	.word	0x40026088

08004c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c3c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3e:	2400      	movs	r4, #0
{
 8004c40:	b0b0      	sub	sp, #192	; 0xc0
 8004c42:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c44:	2290      	movs	r2, #144	; 0x90
 8004c46:	4621      	mov	r1, r4
 8004c48:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4a:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c4c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8004c50:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c54:	f01c fcc4 	bl	80215e0 <memset>
  if(hi2c->Instance==I2C1)
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	4a4c      	ldr	r2, [pc, #304]	; (8004d8c <HAL_I2C_MspInit+0x150>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <HAL_I2C_MspInit+0x34>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8004c60:	4a4b      	ldr	r2, [pc, #300]	; (8004d90 <HAL_I2C_MspInit+0x154>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d031      	beq.n	8004cca <HAL_I2C_MspInit+0x8e>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8004c66:	4a4b      	ldr	r2, [pc, #300]	; (8004d94 <HAL_I2C_MspInit+0x158>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d059      	beq.n	8004d20 <HAL_I2C_MspInit+0xe4>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004c6c:	b030      	add	sp, #192	; 0xc0
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c74:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c76:	9425      	str	r4, [sp, #148]	; 0x94
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c78:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c7a:	f006 fd6f 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d17a      	bne.n	8004d78 <HAL_I2C_MspInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c82:	4c45      	ldr	r4, [pc, #276]	; (8004d98 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c84:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c86:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004c88:	f44f 7610 	mov.w	r6, #576	; 0x240
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c8e:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c90:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c92:	f043 0302 	orr.w	r3, r3, #2
 8004c96:	6323      	str	r3, [r4, #48]	; 0x30
 8004c98:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c9a:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c9c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c9e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ca2:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca4:	483d      	ldr	r0, [pc, #244]	; (8004d9c <HAL_I2C_MspInit+0x160>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca6:	9301      	str	r3, [sp, #4]
 8004ca8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004caa:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004cac:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb0:	f004 fb88 	bl	80093c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cba:	6423      	str	r3, [r4, #64]	; 0x40
 8004cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	9b02      	ldr	r3, [sp, #8]
}
 8004cc6:	b030      	add	sp, #192	; 0xc0
 8004cc8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cce:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004cd0:	9426      	str	r4, [sp, #152]	; 0x98
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004cd2:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cd4:	f006 fd42 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d150      	bne.n	8004d7e <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cdc:	4c2e      	ldr	r4, [pc, #184]	; (8004d98 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cde:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ce0:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ce2:	2601      	movs	r6, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ce4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004ce6:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ce8:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cea:	f043 0320 	orr.w	r3, r3, #32
 8004cee:	6323      	str	r3, [r4, #48]	; 0x30
 8004cf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cf2:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cf4:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004cf8:	4829      	ldr	r0, [pc, #164]	; (8004da0 <HAL_I2C_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004cfa:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cfc:	9303      	str	r3, [sp, #12]
 8004cfe:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d00:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d02:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d04:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d06:	f004 fb5d 	bl	80093c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d10:	6423      	str	r3, [r4, #64]	; 0x40
 8004d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d18:	9304      	str	r3, [sp, #16]
 8004d1a:	9b04      	ldr	r3, [sp, #16]
}
 8004d1c:	b030      	add	sp, #192	; 0xc0
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d24:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8004d26:	9428      	str	r4, [sp, #160]	; 0xa0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004d28:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d2a:	f006 fd17 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 8004d2e:	bb48      	cbnz	r0, 8004d84 <HAL_I2C_MspInit+0x148>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d30:	4c19      	ldr	r4, [pc, #100]	; (8004d98 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d32:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d34:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004d36:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d3c:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d3e:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d40:	f043 0320 	orr.w	r3, r3, #32
 8004d44:	6323      	str	r3, [r4, #48]	; 0x30
 8004d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d48:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004d4a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d4c:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d50:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d52:	4813      	ldr	r0, [pc, #76]	; (8004da0 <HAL_I2C_MspInit+0x164>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d54:	9305      	str	r3, [sp, #20]
 8004d56:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004d58:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004d5a:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d5e:	f004 fb31 	bl	80093c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d68:	6423      	str	r3, [r4, #64]	; 0x40
 8004d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d70:	9306      	str	r3, [sp, #24]
 8004d72:	9b06      	ldr	r3, [sp, #24]
}
 8004d74:	b030      	add	sp, #192	; 0xc0
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004d78:	f7fd ff0c 	bl	8002b94 <Error_Handler>
 8004d7c:	e781      	b.n	8004c82 <HAL_I2C_MspInit+0x46>
      Error_Handler();
 8004d7e:	f7fd ff09 	bl	8002b94 <Error_Handler>
 8004d82:	e7ab      	b.n	8004cdc <HAL_I2C_MspInit+0xa0>
      Error_Handler();
 8004d84:	f7fd ff06 	bl	8002b94 <Error_Handler>
 8004d88:	e7d2      	b.n	8004d30 <HAL_I2C_MspInit+0xf4>
 8004d8a:	bf00      	nop
 8004d8c:	40005400 	.word	0x40005400
 8004d90:	40005800 	.word	0x40005800
 8004d94:	40006000 	.word	0x40006000
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40020400 	.word	0x40020400
 8004da0:	40021400 	.word	0x40021400

08004da4 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <HAL_RNG_MspInit+0x24>)
 8004da6:	6802      	ldr	r2, [r0, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d000      	beq.n	8004dae <HAL_RNG_MspInit+0xa>
 8004dac:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <HAL_RNG_MspInit+0x28>)
{
 8004db0:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8004db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004dc4:	b002      	add	sp, #8
 8004dc6:	4770      	bx	lr
 8004dc8:	50060800 	.word	0x50060800
 8004dcc:	40023800 	.word	0x40023800

08004dd0 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8004dd0:	4a57      	ldr	r2, [pc, #348]	; (8004f30 <HAL_SPI_MspInit+0x160>)
 8004dd2:	6803      	ldr	r3, [r0, #0]
{
 8004dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hspi->Instance==SPI2)
 8004dd8:	4293      	cmp	r3, r2
{
 8004dda:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ddc:	f04f 0400 	mov.w	r4, #0
 8004de0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004de4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004de8:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8004dea:	d008      	beq.n	8004dfe <HAL_SPI_MspInit+0x2e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8004dec:	4a51      	ldr	r2, [pc, #324]	; (8004f34 <HAL_SPI_MspInit+0x164>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_SPI_MspInit+0x9a>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8004df2:	4a51      	ldr	r2, [pc, #324]	; (8004f38 <HAL_SPI_MspInit+0x168>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d078      	beq.n	8004eea <HAL_SPI_MspInit+0x11a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8004df8:	b00e      	add	sp, #56	; 0x38
 8004dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004dfe:	4b4f      	ldr	r3, [pc, #316]	; (8004f3c <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004e00:	200c      	movs	r0, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e02:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004e04:	2601      	movs	r6, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e08:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e0a:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
 8004e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e14:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004e18:	9201      	str	r2, [sp, #4]
 8004e1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1e:	f042 0204 	orr.w	r2, r2, #4
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
 8004e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e26:	f002 0204 	and.w	r2, r2, #4
 8004e2a:	9202      	str	r2, [sp, #8]
 8004e2c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e30:	f042 0208 	orr.w	r2, r2, #8
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004e38:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e3a:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e3e:	4840      	ldr	r0, [pc, #256]	; (8004f40 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e40:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e42:	9303      	str	r3, [sp, #12]
 8004e44:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e46:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e48:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e4c:	f004 faba 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e50:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e52:	a909      	add	r1, sp, #36	; 0x24
 8004e54:	483b      	ldr	r0, [pc, #236]	; (8004f44 <HAL_SPI_MspInit+0x174>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e56:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e5a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e5c:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e60:	f004 fab0 	bl	80093c4 <HAL_GPIO_Init>
}
 8004e64:	b00e      	add	sp, #56	; 0x38
 8004e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004e6a:	4b34      	ldr	r3, [pc, #208]	; (8004f3c <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e6e:	2004      	movs	r0, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e70:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004e74:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e76:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e78:	f04f 0806 	mov.w	r8, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
 8004e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e84:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004e88:	9204      	str	r2, [sp, #16]
 8004e8a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8e:	4332      	orrs	r2, r6
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
 8004e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e94:	4032      	ands	r2, r6
 8004e96:	9205      	str	r2, [sp, #20]
 8004e98:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e9c:	4302      	orrs	r2, r0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ea2:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ea4:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea6:	4828      	ldr	r0, [pc, #160]	; (8004f48 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea8:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eaa:	9306      	str	r3, [sp, #24]
 8004eac:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004eb0:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb4:	f004 fa86 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ebc:	a909      	add	r1, sp, #36	; 0x24
 8004ebe:	4820      	ldr	r0, [pc, #128]	; (8004f40 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ec0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004ec4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ecc:	f004 fa7a 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004ed0:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ed2:	a909      	add	r1, sp, #36	; 0x24
 8004ed4:	481c      	ldr	r0, [pc, #112]	; (8004f48 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed8:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004eda:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004edc:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee0:	f004 fa70 	bl	80093c4 <HAL_GPIO_Init>
}
 8004ee4:	b00e      	add	sp, #56	; 0x38
 8004ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004eea:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004eec:	2074      	movs	r0, #116	; 0x74
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004eee:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef0:	2602      	movs	r6, #2
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef4:	2503      	movs	r5, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004ef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004efa:	645a      	str	r2, [r3, #68]	; 0x44
 8004efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004f02:	9207      	str	r2, [sp, #28]
 8004f04:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f08:	f042 0210 	orr.w	r2, r2, #16
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004f0e:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004f12:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f14:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f18:	480c      	ldr	r0, [pc, #48]	; (8004f4c <HAL_SPI_MspInit+0x17c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1a:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f1c:	9308      	str	r3, [sp, #32]
 8004f1e:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f20:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004f22:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f26:	f004 fa4d 	bl	80093c4 <HAL_GPIO_Init>
}
 8004f2a:	b00e      	add	sp, #56	; 0x38
 8004f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f30:	40003800 	.word	0x40003800
 8004f34:	40003c00 	.word	0x40003c00
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40020800 	.word	0x40020800
 8004f44:	40020c00 	.word	0x40020c00
 8004f48:	40020400 	.word	0x40020400
 8004f4c:	40021000 	.word	0x40021000

08004f50 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8004f50:	4a78      	ldr	r2, [pc, #480]	; (8005134 <HAL_TIM_Base_MspInit+0x1e4>)
 8004f52:	6803      	ldr	r3, [r0, #0]
{
 8004f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(htim_base->Instance==TIM1)
 8004f58:	4293      	cmp	r3, r2
{
 8004f5a:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5c:	f04f 0400 	mov.w	r4, #0
 8004f60:	940c      	str	r4, [sp, #48]	; 0x30
 8004f62:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f64:	940f      	str	r4, [sp, #60]	; 0x3c
 8004f66:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if(htim_base->Instance==TIM1)
 8004f6a:	d021      	beq.n	8004fb0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d058      	beq.n	8005024 <HAL_TIM_Base_MspInit+0xd4>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004f72:	4a71      	ldr	r2, [pc, #452]	; (8005138 <HAL_TIM_Base_MspInit+0x1e8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d028      	beq.n	8004fca <HAL_TIM_Base_MspInit+0x7a>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8004f78:	4a70      	ldr	r2, [pc, #448]	; (800513c <HAL_TIM_Base_MspInit+0x1ec>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d045      	beq.n	800500a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8004f7e:	4a70      	ldr	r2, [pc, #448]	; (8005140 <HAL_TIM_Base_MspInit+0x1f0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	f000 80ad 	beq.w	80050e0 <HAL_TIM_Base_MspInit+0x190>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8004f86:	4a6f      	ldr	r2, [pc, #444]	; (8005144 <HAL_TIM_Base_MspInit+0x1f4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	f000 80bc 	beq.w	8005106 <HAL_TIM_Base_MspInit+0x1b6>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8004f8e:	4a6e      	ldr	r2, [pc, #440]	; (8005148 <HAL_TIM_Base_MspInit+0x1f8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d02f      	beq.n	8004ff4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8004f94:	4a6d      	ldr	r2, [pc, #436]	; (800514c <HAL_TIM_Base_MspInit+0x1fc>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d114      	bne.n	8004fc4 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004f9a:	4b6d      	ldr	r3, [pc, #436]	; (8005150 <HAL_TIM_Base_MspInit+0x200>)
 8004f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004faa:	930a      	str	r3, [sp, #40]	; 0x28
 8004fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004fae:	e009      	b.n	8004fc4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fb0:	4b67      	ldr	r3, [pc, #412]	; (8005150 <HAL_TIM_Base_MspInit+0x200>)
 8004fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	645a      	str	r2, [r3, #68]	; 0x44
 8004fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	9b01      	ldr	r3, [sp, #4]
}
 8004fc4:	b011      	add	sp, #68	; 0x44
 8004fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fca:	4b61      	ldr	r3, [pc, #388]	; (8005150 <HAL_TIM_Base_MspInit+0x200>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004fcc:	4622      	mov	r2, r4
 8004fce:	2106      	movs	r1, #6
 8004fd0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fd2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004fd4:	f044 0402 	orr.w	r4, r4, #2
 8004fd8:	641c      	str	r4, [r3, #64]	; 0x40
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	9305      	str	r3, [sp, #20]
 8004fe2:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004fe4:	f001 ff24 	bl	8006e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004fe8:	201d      	movs	r0, #29
 8004fea:	f001 ff6b 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
}
 8004fee:	b011      	add	sp, #68	; 0x44
 8004ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004ff4:	4b56      	ldr	r3, [pc, #344]	; (8005150 <HAL_TIM_Base_MspInit+0x200>)
 8004ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff8:	f042 0220 	orr.w	r2, r2, #32
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	9309      	str	r3, [sp, #36]	; 0x24
 8005006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005008:	e7dc      	b.n	8004fc4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800500a:	4b51      	ldr	r3, [pc, #324]	; (8005150 <HAL_TIM_Base_MspInit+0x200>)
 800500c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800500e:	f042 0204 	orr.w	r2, r2, #4
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	9306      	str	r3, [sp, #24]
 800501c:	9b06      	ldr	r3, [sp, #24]
}
 800501e:	b011      	add	sp, #68	; 0x44
 8005020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005024:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005028:	2701      	movs	r7, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502a:	f04f 0802 	mov.w	r8, #2
 800502e:	4605      	mov	r5, r0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005032:	2020      	movs	r0, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005034:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005036:	f44f 6980 	mov.w	r9, #1024	; 0x400
    __HAL_RCC_TIM2_CLK_ENABLE();
 800503a:	433a      	orrs	r2, r7
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800503c:	4e45      	ldr	r6, [pc, #276]	; (8005154 <HAL_TIM_Base_MspInit+0x204>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
 8005040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005042:	403a      	ands	r2, r7
 8005044:	9202      	str	r2, [sp, #8]
 8005046:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800504a:	433a      	orrs	r2, r7
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
 800504e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005050:	403a      	ands	r2, r7
 8005052:	9203      	str	r2, [sp, #12]
 8005054:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005058:	ea42 0208 	orr.w	r2, r2, r8
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005060:	900b      	str	r0, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005062:	ea03 0308 	and.w	r3, r3, r8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005066:	483c      	ldr	r0, [pc, #240]	; (8005158 <HAL_TIM_Base_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005068:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005070:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005072:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005076:	f004 f9a5 	bl	80093c4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507a:	a90b      	add	r1, sp, #44	; 0x2c
 800507c:	4837      	ldr	r0, [pc, #220]	; (800515c <HAL_TIM_Base_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800507e:	970f      	str	r7, [sp, #60]	; 0x3c
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8005080:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005084:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005088:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800508c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005090:	f004 f998 	bl	80093c4 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005094:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8005160 <HAL_TIM_Base_MspInit+0x210>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800509c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80050a0:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80050a4:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80050a6:	f8c6 9010 	str.w	r9, [r6, #16]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050aa:	60b4      	str	r4, [r6, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ac:	60f4      	str	r4, [r6, #12]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80050ae:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050b0:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80050b4:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050b8:	e9c6 1205 	strd	r1, r2, [r6, #20]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80050bc:	f002 f9c8 	bl	8007450 <HAL_DMA_Init>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d133      	bne.n	800512c <HAL_TIM_Base_MspInit+0x1dc>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80050c4:	2200      	movs	r2, #0
 80050c6:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 80050c8:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80050ca:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 80050cc:	62ee      	str	r6, [r5, #44]	; 0x2c
 80050ce:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80050d0:	f001 feae 	bl	8006e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050d4:	201c      	movs	r0, #28
 80050d6:	f001 fef5 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
}
 80050da:	b011      	add	sp, #68	; 0x44
 80050dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_TIM_Base_MspInit+0x200>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80050e2:	4622      	mov	r2, r4
 80050e4:	2105      	movs	r1, #5
 80050e6:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050e8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80050ea:	f044 0408 	orr.w	r4, r4, #8
 80050ee:	641c      	str	r4, [r3, #64]	; 0x40
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	9307      	str	r3, [sp, #28]
 80050f8:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80050fa:	f001 fe99 	bl	8006e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80050fe:	2032      	movs	r0, #50	; 0x32
 8005100:	f001 fee0 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
 8005104:	e75e      	b.n	8004fc4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <HAL_TIM_Base_MspInit+0x200>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005108:	4622      	mov	r2, r4
 800510a:	2106      	movs	r1, #6
 800510c:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800510e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005110:	f044 0410 	orr.w	r4, r4, #16
 8005114:	641c      	str	r4, [r3, #64]	; 0x40
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	9308      	str	r3, [sp, #32]
 800511e:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005120:	f001 fe86 	bl	8006e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005124:	2036      	movs	r0, #54	; 0x36
 8005126:	f001 fecd 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
 800512a:	e74b      	b.n	8004fc4 <HAL_TIM_Base_MspInit+0x74>
      Error_Handler();
 800512c:	f7fd fd32 	bl	8002b94 <Error_Handler>
 8005130:	e7c8      	b.n	80050c4 <HAL_TIM_Base_MspInit+0x174>
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	40001000 	.word	0x40001000
 8005148:	40001400 	.word	0x40001400
 800514c:	40002000 	.word	0x40002000
 8005150:	40023800 	.word	0x40023800
 8005154:	2001b268 	.word	0x2001b268
 8005158:	40020000 	.word	0x40020000
 800515c:	40020400 	.word	0x40020400
 8005160:	40026028 	.word	0x40026028

08005164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8005164:	491e      	ldr	r1, [pc, #120]	; (80051e0 <HAL_TIM_MspPostInit+0x7c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005166:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8005168:	6802      	ldr	r2, [r0, #0]
{
 800516a:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM3)
 800516c:	428a      	cmp	r2, r1
{
 800516e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005170:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005174:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005178:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 800517a:	d004      	beq.n	8005186 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 800517c:	4919      	ldr	r1, [pc, #100]	; (80051e4 <HAL_TIM_MspPostInit+0x80>)
 800517e:	428a      	cmp	r2, r1
 8005180:	d018      	beq.n	80051b4 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005182:	b008      	add	sp, #32
 8005184:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005186:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005188:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800518a:	2680      	movs	r6, #128	; 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800518c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800518e:	6b14      	ldr	r4, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005190:	4816      	ldr	r0, [pc, #88]	; (80051ec <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005192:	f044 0404 	orr.w	r4, r4, #4
 8005196:	6314      	str	r4, [r2, #48]	; 0x30
 8005198:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800519c:	f002 0204 	and.w	r2, r2, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80051a2:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051a4:	9201      	str	r2, [sp, #4]
 80051a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051aa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ac:	f004 f90a 	bl	80093c4 <HAL_GPIO_Init>
}
 80051b0:	b008      	add	sp, #32
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051b4:	4a0c      	ldr	r2, [pc, #48]	; (80051e8 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b6:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80051b8:	f44f 7680 	mov.w	r6, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051bc:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051be:	6b14      	ldr	r4, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c0:	480b      	ldr	r0, [pc, #44]	; (80051f0 <HAL_TIM_MspPostInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051c2:	432c      	orrs	r4, r5
 80051c4:	6314      	str	r4, [r2, #48]	; 0x30
 80051c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c8:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ca:	402a      	ands	r2, r5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80051ce:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051d0:	9202      	str	r2, [sp, #8]
 80051d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051d6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d8:	f004 f8f4 	bl	80093c4 <HAL_GPIO_Init>
}
 80051dc:	b008      	add	sp, #32
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40023800 	.word	0x40023800
 80051ec:	40020800 	.word	0x40020800
 80051f0:	40020400 	.word	0x40020400

080051f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f8:	2400      	movs	r4, #0
{
 80051fa:	b0bb      	sub	sp, #236	; 0xec
 80051fc:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80051fe:	2290      	movs	r2, #144	; 0x90
 8005200:	4621      	mov	r1, r4
 8005202:	a816      	add	r0, sp, #88	; 0x58
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005204:	9415      	str	r4, [sp, #84]	; 0x54
 8005206:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800520a:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800520e:	f01c f9e7 	bl	80215e0 <memset>
  if(huart->Instance==UART4)
 8005212:	682b      	ldr	r3, [r5, #0]
 8005214:	4aa2      	ldr	r2, [pc, #648]	; (80054a0 <HAL_UART_MspInit+0x2ac>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d040      	beq.n	800529c <HAL_UART_MspInit+0xa8>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 800521a:	4aa2      	ldr	r2, [pc, #648]	; (80054a4 <HAL_UART_MspInit+0x2b0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	f000 8092 	beq.w	8005346 <HAL_UART_MspInit+0x152>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8005222:	4aa1      	ldr	r2, [pc, #644]	; (80054a8 <HAL_UART_MspInit+0x2b4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	f000 810c 	beq.w	8005442 <HAL_UART_MspInit+0x24e>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800522a:	4aa0      	ldr	r2, [pc, #640]	; (80054ac <HAL_UART_MspInit+0x2b8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00a      	beq.n	8005246 <HAL_UART_MspInit+0x52>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8005230:	4a9f      	ldr	r2, [pc, #636]	; (80054b0 <HAL_UART_MspInit+0x2bc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	f000 8154 	beq.w	80054e0 <HAL_UART_MspInit+0x2ec>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005238:	4a9e      	ldr	r2, [pc, #632]	; (80054b4 <HAL_UART_MspInit+0x2c0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	f000 817d 	beq.w	800553a <HAL_UART_MspInit+0x346>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005240:	b03b      	add	sp, #236	; 0xec
 8005242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005246:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005248:	a816      	add	r0, sp, #88	; 0x58
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800524a:	9428      	str	r4, [sp, #160]	; 0xa0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800524c:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800524e:	f006 fa85 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 8005252:	2800      	cmp	r0, #0
 8005254:	f040 81dc 	bne.w	8005610 <HAL_UART_MspInit+0x41c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005258:	4b97      	ldr	r3, [pc, #604]	; (80054b8 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525a:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800525c:	2670      	movs	r6, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525e:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8005260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005262:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005264:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART2_CLK_ENABLE();
 8005266:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
 800526c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800526e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005272:	920a      	str	r2, [sp, #40]	; 0x28
 8005274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005278:	f042 0208 	orr.w	r2, r2, #8
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800527e:	2207      	movs	r2, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005282:	9012      	str	r0, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005284:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005288:	488c      	ldr	r0, [pc, #560]	; (80054bc <HAL_UART_MspInit+0x2c8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800528a:	9611      	str	r6, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800528c:	930b      	str	r3, [sp, #44]	; 0x2c
 800528e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005290:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005292:	e9cd 5413 	strd	r5, r4, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005296:	f004 f895 	bl	80093c4 <HAL_GPIO_Init>
 800529a:	e7d1      	b.n	8005240 <HAL_UART_MspInit+0x4c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800529c:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052a0:	a816      	add	r0, sp, #88	; 0x58
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80052a2:	942a      	str	r4, [sp, #168]	; 0xa8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80052a4:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052a6:	f006 fa59 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	f040 819b 	bne.w	80055e6 <HAL_UART_MspInit+0x3f2>
    __HAL_RCC_UART4_CLK_ENABLE();
 80052b0:	4b81      	ldr	r3, [pc, #516]	; (80054b8 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b2:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 80052b4:	f248 0001 	movw	r0, #32769	; 0x8001
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b8:	2600      	movs	r6, #0
    __HAL_RCC_UART4_CLK_ENABLE();
 80052ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052bc:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80052be:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052c0:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART4_CLK_ENABLE();
 80052c2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40
 80052c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ca:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80052ce:	9201      	str	r2, [sp, #4]
 80052d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
 80052da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052dc:	f002 0201 	and.w	r2, r2, #1
 80052e0:	9202      	str	r2, [sp, #8]
 80052e2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e6:	433a      	orrs	r2, r7
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
 80052ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ec:	403a      	ands	r2, r7
 80052ee:	9203      	str	r2, [sp, #12]
 80052f0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f4:	f042 0204 	orr.w	r2, r2, #4
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 80052fc:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052fe:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005302:	486f      	ldr	r0, [pc, #444]	; (80054c0 <HAL_UART_MspInit+0x2cc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005304:	9712      	str	r7, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800530a:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800530c:	e9cd 6513 	strd	r6, r5, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005310:	f004 f858 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005318:	a911      	add	r1, sp, #68	; 0x44
 800531a:	486a      	ldr	r0, [pc, #424]	; (80054c4 <HAL_UART_MspInit+0x2d0>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800531c:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	e9cd 7612 	strd	r7, r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005322:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005326:	f004 f84d 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800532a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800532e:	a911      	add	r1, sp, #68	; 0x44
 8005330:	4865      	ldr	r0, [pc, #404]	; (80054c8 <HAL_UART_MspInit+0x2d4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005332:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	e9cd 7612 	strd	r7, r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005338:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800533c:	f004 f842 	bl	80093c4 <HAL_GPIO_Init>
}
 8005340:	b03b      	add	sp, #236	; 0xec
 8005342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005346:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800534a:	a816      	add	r0, sp, #88	; 0x58
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800534c:	942b      	str	r4, [sp, #172]	; 0xac
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800534e:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005350:	f006 fa04 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 8005354:	2800      	cmp	r0, #0
 8005356:	f040 8155 	bne.w	8005604 <HAL_UART_MspInit+0x410>
    __HAL_RCC_UART5_CLK_ENABLE();
 800535a:	4b57      	ldr	r3, [pc, #348]	; (80054b8 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535e:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005360:	f44f 5980 	mov.w	r9, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8005364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005366:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005368:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800536c:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART5_CLK_ENABLE();
 800536e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005372:	4854      	ldr	r0, [pc, #336]	; (80054c4 <HAL_UART_MspInit+0x2d0>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8005374:	641a      	str	r2, [r3, #64]	; 0x40
 8005376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005378:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800537c:	9205      	str	r2, [sp, #20]
 800537e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005382:	433a      	orrs	r2, r7
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
 8005386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005388:	403a      	ands	r2, r7
 800538a:	9206      	str	r2, [sp, #24]
 800538c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800538e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005390:	f042 0204 	orr.w	r2, r2, #4
 8005394:	631a      	str	r2, [r3, #48]	; 0x30
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005398:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	9307      	str	r3, [sp, #28]
 80053a2:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a4:	e9cd 7412 	strd	r7, r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80053a8:	e9cd 6814 	strd	r6, r8, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ac:	f004 f80a 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053b0:	2301      	movs	r3, #1
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80053b2:	4e46      	ldr	r6, [pc, #280]	; (80054cc <HAL_UART_MspInit+0x2d8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053b4:	a911      	add	r1, sp, #68	; 0x44
 80053b6:	4844      	ldr	r0, [pc, #272]	; (80054c8 <HAL_UART_MspInit+0x2d4>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053b8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ba:	e9cd 9711 	strd	r9, r7, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80053be:	e9cd 7814 	strd	r7, r8, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c2:	f003 ffff 	bl	80093c4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80053c6:	4f42      	ldr	r7, [pc, #264]	; (80054d0 <HAL_UART_MspInit+0x2dc>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80053c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80053d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80053d4:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053d6:	6132      	str	r2, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80053d8:	61f3      	str	r3, [r6, #28]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053da:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053de:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053e2:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80053e6:	e9c6 7100 	strd	r7, r1, [r6]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80053ea:	f002 f831 	bl	8007450 <HAL_DMA_Init>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	f040 8105 	bne.w	80055fe <HAL_UART_MspInit+0x40a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80053f4:	4c37      	ldr	r4, [pc, #220]	; (80054d4 <HAL_UART_MspInit+0x2e0>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053f6:	2300      	movs	r3, #0
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80053f8:	4837      	ldr	r0, [pc, #220]	; (80054d8 <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80053fa:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053fe:	2140      	movs	r1, #64	; 0x40
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005400:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005404:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005406:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8005408:	672e      	str	r6, [r5, #112]	; 0x70
 800540a:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800540c:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800540e:	e9c4 7101 	strd	r7, r1, [r4, #4]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005412:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005416:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800541a:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800541e:	f002 f817 	bl	8007450 <HAL_DMA_Init>
 8005422:	2800      	cmp	r0, #0
 8005424:	f040 80e8 	bne.w	80055f8 <HAL_UART_MspInit+0x404>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005428:	2200      	movs	r2, #0
 800542a:	2107      	movs	r1, #7
 800542c:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800542e:	66ec      	str	r4, [r5, #108]	; 0x6c
 8005430:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005432:	f001 fcfd 	bl	8006e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005436:	2035      	movs	r0, #53	; 0x35
 8005438:	f001 fd44 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
}
 800543c:	b03b      	add	sp, #236	; 0xec
 800543e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005446:	a816      	add	r0, sp, #88	; 0x58
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005448:	942d      	str	r4, [sp, #180]	; 0xb4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800544a:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800544c:	f006 f986 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 8005450:	2800      	cmp	r0, #0
 8005452:	f040 80da 	bne.w	800560a <HAL_UART_MspInit+0x416>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005456:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005458:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800545a:	f44f 76e0 	mov.w	r6, #448	; 0x1c0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800545e:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART7_CLK_ENABLE();
 8005460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005462:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005464:	2403      	movs	r4, #3
    __HAL_RCC_UART7_CLK_ENABLE();
 8005466:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800546a:	641a      	str	r2, [r3, #64]	; 0x40
 800546c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800546e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005472:	9208      	str	r2, [sp, #32]
 8005474:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005478:	f042 0220 	orr.w	r2, r2, #32
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800547e:	2208      	movs	r2, #8
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005482:	9012      	str	r0, [sp, #72]	; 0x48
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005484:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005488:	4814      	ldr	r0, [pc, #80]	; (80054dc <HAL_UART_MspInit+0x2e8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800548a:	9611      	str	r6, [sp, #68]	; 0x44
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800548c:	9309      	str	r3, [sp, #36]	; 0x24
 800548e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005490:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005492:	e9cd 5413 	strd	r5, r4, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005496:	f003 ff95 	bl	80093c4 <HAL_GPIO_Init>
}
 800549a:	b03b      	add	sp, #236	; 0xec
 800549c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054a0:	40004c00 	.word	0x40004c00
 80054a4:	40005000 	.word	0x40005000
 80054a8:	40007800 	.word	0x40007800
 80054ac:	40004400 	.word	0x40004400
 80054b0:	40004800 	.word	0x40004800
 80054b4:	40011400 	.word	0x40011400
 80054b8:	40023800 	.word	0x40023800
 80054bc:	40020c00 	.word	0x40020c00
 80054c0:	40020000 	.word	0x40020000
 80054c4:	40020400 	.word	0x40020400
 80054c8:	40020800 	.word	0x40020800
 80054cc:	2001b854 	.word	0x2001b854
 80054d0:	40026010 	.word	0x40026010
 80054d4:	2001b950 	.word	0x2001b950
 80054d8:	400260b8 	.word	0x400260b8
 80054dc:	40021400 	.word	0x40021400
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80054e0:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054e4:	a816      	add	r0, sp, #88	; 0x58
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80054e6:	9429      	str	r4, [sp, #164]	; 0xa4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80054e8:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054ea:	f006 f937 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	f040 8091 	bne.w	8005616 <HAL_UART_MspInit+0x422>
    __HAL_RCC_USART3_CLK_ENABLE();
 80054f4:	4b49      	ldr	r3, [pc, #292]	; (800561c <HAL_UART_MspInit+0x428>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054f6:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80054f8:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fc:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80054fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005500:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005502:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART3_CLK_ENABLE();
 8005504:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
 800550a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005510:	920c      	str	r2, [sp, #48]	; 0x30
 8005512:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005516:	f042 0208 	orr.w	r2, r2, #8
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800551c:	2207      	movs	r2, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005520:	9012      	str	r0, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005522:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005526:	483e      	ldr	r0, [pc, #248]	; (8005620 <HAL_UART_MspInit+0x42c>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005528:	9611      	str	r6, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800552a:	930d      	str	r3, [sp, #52]	; 0x34
 800552c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800552e:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005530:	e9cd 5413 	strd	r5, r4, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005534:	f003 ff46 	bl	80093c4 <HAL_GPIO_Init>
 8005538:	e682      	b.n	8005240 <HAL_UART_MspInit+0x4c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800553a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800553e:	a816      	add	r0, sp, #88	; 0x58
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005540:	942c      	str	r4, [sp, #176]	; 0xb0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005542:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005544:	f006 f90a 	bl	800b75c <HAL_RCCEx_PeriphCLKConfig>
 8005548:	2800      	cmp	r0, #0
 800554a:	d152      	bne.n	80055f2 <HAL_UART_MspInit+0x3fe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800554c:	4b33      	ldr	r3, [pc, #204]	; (800561c <HAL_UART_MspInit+0x428>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800554e:	2040      	movs	r0, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005550:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005552:	2703      	movs	r7, #3
    __HAL_RCC_USART6_CLK_ENABLE();
 8005554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005556:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005558:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART6_CLK_ENABLE();
 800555a:	f042 0220 	orr.w	r2, r2, #32
 800555e:	645a      	str	r2, [r3, #68]	; 0x44
 8005560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005562:	f002 0220 	and.w	r2, r2, #32
 8005566:	920e      	str	r2, [sp, #56]	; 0x38
 8005568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800556a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800556c:	f042 0204 	orr.w	r2, r2, #4
 8005570:	631a      	str	r2, [r3, #48]	; 0x30
 8005572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005574:	f002 0204 	and.w	r2, r2, #4
 8005578:	920f      	str	r2, [sp, #60]	; 0x3c
 800557a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800557c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557e:	4302      	orrs	r2, r0
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005584:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005586:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005588:	4826      	ldr	r0, [pc, #152]	; (8005624 <HAL_UART_MspInit+0x430>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558a:	9412      	str	r4, [sp, #72]	; 0x48
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800558c:	9310      	str	r3, [sp, #64]	; 0x40
 800558e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005590:	9615      	str	r6, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005592:	e9cd 4713 	strd	r4, r7, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005596:	f003 ff15 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800559a:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800559e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055a0:	a911      	add	r1, sp, #68	; 0x44
 80055a2:	4821      	ldr	r0, [pc, #132]	; (8005628 <HAL_UART_MspInit+0x434>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a4:	9412      	str	r4, [sp, #72]	; 0x48
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80055a6:	4c21      	ldr	r4, [pc, #132]	; (800562c <HAL_UART_MspInit+0x438>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055a8:	9211      	str	r2, [sp, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055aa:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80055ac:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055b0:	f003 ff08 	bl	80093c4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80055b4:	4f1e      	ldr	r7, [pc, #120]	; (8005630 <HAL_UART_MspInit+0x43c>)
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055b6:	2300      	movs	r3, #0
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80055b8:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80055c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80055c4:	4620      	mov	r0, r4
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80055c6:	61e3      	str	r3, [r4, #28]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055c8:	6121      	str	r1, [r4, #16]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80055ca:	6222      	str	r2, [r4, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055cc:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80055ce:	e9c4 7600 	strd	r7, r6, [r4]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055d2:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055d6:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80055da:	f001 ff39 	bl	8007450 <HAL_DMA_Init>
 80055de:	b928      	cbnz	r0, 80055ec <HAL_UART_MspInit+0x3f8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80055e0:	672c      	str	r4, [r5, #112]	; 0x70
 80055e2:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80055e4:	e62c      	b.n	8005240 <HAL_UART_MspInit+0x4c>
      Error_Handler();
 80055e6:	f7fd fad5 	bl	8002b94 <Error_Handler>
 80055ea:	e661      	b.n	80052b0 <HAL_UART_MspInit+0xbc>
      Error_Handler();
 80055ec:	f7fd fad2 	bl	8002b94 <Error_Handler>
 80055f0:	e7f6      	b.n	80055e0 <HAL_UART_MspInit+0x3ec>
      Error_Handler();
 80055f2:	f7fd facf 	bl	8002b94 <Error_Handler>
 80055f6:	e7a9      	b.n	800554c <HAL_UART_MspInit+0x358>
      Error_Handler();
 80055f8:	f7fd facc 	bl	8002b94 <Error_Handler>
 80055fc:	e714      	b.n	8005428 <HAL_UART_MspInit+0x234>
      Error_Handler();
 80055fe:	f7fd fac9 	bl	8002b94 <Error_Handler>
 8005602:	e6f7      	b.n	80053f4 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8005604:	f7fd fac6 	bl	8002b94 <Error_Handler>
 8005608:	e6a7      	b.n	800535a <HAL_UART_MspInit+0x166>
      Error_Handler();
 800560a:	f7fd fac3 	bl	8002b94 <Error_Handler>
 800560e:	e722      	b.n	8005456 <HAL_UART_MspInit+0x262>
      Error_Handler();
 8005610:	f7fd fac0 	bl	8002b94 <Error_Handler>
 8005614:	e620      	b.n	8005258 <HAL_UART_MspInit+0x64>
      Error_Handler();
 8005616:	f7fd fabd 	bl	8002b94 <Error_Handler>
 800561a:	e76b      	b.n	80054f4 <HAL_UART_MspInit+0x300>
 800561c:	40023800 	.word	0x40023800
 8005620:	40020c00 	.word	0x40020c00
 8005624:	40020800 	.word	0x40020800
 8005628:	40021800 	.word	0x40021800
 800562c:	2001aee4 	.word	0x2001aee4
 8005630:	40026428 	.word	0x40026428

08005634 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8005634:	4a43      	ldr	r2, [pc, #268]	; (8005744 <HAL_UART_MspDeInit+0x110>)
 8005636:	6803      	ldr	r3, [r0, #0]
 8005638:	4293      	cmp	r3, r2
{
 800563a:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 800563c:	d01f      	beq.n	800567e <HAL_UART_MspDeInit+0x4a>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 800563e:	4a42      	ldr	r2, [pc, #264]	; (8005748 <HAL_UART_MspDeInit+0x114>)
 8005640:	4604      	mov	r4, r0
 8005642:	4293      	cmp	r3, r2
 8005644:	d032      	beq.n	80056ac <HAL_UART_MspDeInit+0x78>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 8005646:	4a41      	ldr	r2, [pc, #260]	; (800574c <HAL_UART_MspDeInit+0x118>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d04a      	beq.n	80056e2 <HAL_UART_MspDeInit+0xae>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800564c:	4a40      	ldr	r2, [pc, #256]	; (8005750 <HAL_UART_MspDeInit+0x11c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d006      	beq.n	8005660 <HAL_UART_MspDeInit+0x2c>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8005652:	4a40      	ldr	r2, [pc, #256]	; (8005754 <HAL_UART_MspDeInit+0x120>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d051      	beq.n	80056fc <HAL_UART_MspDeInit+0xc8>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8005658:	4a3f      	ldr	r2, [pc, #252]	; (8005758 <HAL_UART_MspDeInit+0x124>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d05b      	beq.n	8005716 <HAL_UART_MspDeInit+0xe2>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800565e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_DISABLE();
 8005660:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8005664:	483d      	ldr	r0, [pc, #244]	; (800575c <HAL_UART_MspDeInit+0x128>)
 8005666:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 8005668:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800566a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800566e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8005670:	f004 f84c 	bl	800970c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005674:	2026      	movs	r0, #38	; 0x26
}
 8005676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800567a:	f001 bc37 	b.w	8006eec <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 800567e:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8005682:	f248 0101 	movw	r1, #32769	; 0x8001
 8005686:	4836      	ldr	r0, [pc, #216]	; (8005760 <HAL_UART_MspDeInit+0x12c>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8005688:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800568a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800568e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8005690:	f004 f83c 	bl	800970c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8005694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005698:	4832      	ldr	r0, [pc, #200]	; (8005764 <HAL_UART_MspDeInit+0x130>)
 800569a:	f004 f837 	bl	800970c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 800569e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056a2:	4831      	ldr	r0, [pc, #196]	; (8005768 <HAL_UART_MspDeInit+0x134>)
}
 80056a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80056a8:	f004 b830 	b.w	800970c <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 80056ac:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80056b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056b4:	482b      	ldr	r0, [pc, #172]	; (8005764 <HAL_UART_MspDeInit+0x130>)
    __HAL_RCC_UART5_CLK_DISABLE();
 80056b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80056b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056bc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80056be:	f004 f825 	bl	800970c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 80056c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056c6:	4828      	ldr	r0, [pc, #160]	; (8005768 <HAL_UART_MspDeInit+0x134>)
 80056c8:	f004 f820 	bl	800970c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80056cc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80056ce:	f002 f873 	bl	80077b8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80056d2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80056d4:	f002 f870 	bl	80077b8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80056d8:	2035      	movs	r0, #53	; 0x35
}
 80056da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80056de:	f001 bc05 	b.w	8006eec <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 80056e2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8);
 80056e6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80056ea:	4820      	ldr	r0, [pc, #128]	; (800576c <HAL_UART_MspDeInit+0x138>)
    __HAL_RCC_UART7_CLK_DISABLE();
 80056ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80056ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 80056f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 80056f6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8);
 80056f8:	f004 b808 	b.w	800970c <HAL_GPIO_DeInit>
    __HAL_RCC_USART3_CLK_DISABLE();
 80056fc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8005700:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005704:	4815      	ldr	r0, [pc, #84]	; (800575c <HAL_UART_MspDeInit+0x128>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8005706:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 800570c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8005710:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8005712:	f003 bffb 	b.w	800970c <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 8005716:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 800571a:	2140      	movs	r1, #64	; 0x40
 800571c:	4812      	ldr	r0, [pc, #72]	; (8005768 <HAL_UART_MspDeInit+0x134>)
    __HAL_RCC_USART6_CLK_DISABLE();
 800571e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005720:	f023 0320 	bic.w	r3, r3, #32
 8005724:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8005726:	f003 fff1 	bl	800970c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800572a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800572e:	4810      	ldr	r0, [pc, #64]	; (8005770 <HAL_UART_MspDeInit+0x13c>)
 8005730:	f003 ffec 	bl	800970c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005734:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005736:	f002 f83f 	bl	80077b8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800573a:	2047      	movs	r0, #71	; 0x47
}
 800573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8005740:	f001 bbd4 	b.w	8006eec <HAL_NVIC_DisableIRQ>
 8005744:	40004c00 	.word	0x40004c00
 8005748:	40005000 	.word	0x40005000
 800574c:	40007800 	.word	0x40007800
 8005750:	40004400 	.word	0x40004400
 8005754:	40004800 	.word	0x40004800
 8005758:	40011400 	.word	0x40011400
 800575c:	40020c00 	.word	0x40020c00
 8005760:	40020000 	.word	0x40020000
 8005764:	40020400 	.word	0x40020400
 8005768:	40020800 	.word	0x40020800
 800576c:	40021400 	.word	0x40021400
 8005770:	40021800 	.word	0x40021800

08005774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005774:	b530      	push	{r4, r5, lr}
 8005776:	4601      	mov	r1, r0
 8005778:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 800577a:	2200      	movs	r2, #0
 800577c:	202b      	movs	r0, #43	; 0x2b
 800577e:	f001 fb57 	bl	8006e30 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005782:	202b      	movs	r0, #43	; 0x2b
 8005784:	f001 fb9e 	bl	8006ec4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8005788:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800578a:	a901      	add	r1, sp, #4
 800578c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 800578e:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute TIM12 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005790:	4d14      	ldr	r5, [pc, #80]	; (80057e4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8005792:	f042 0240 	orr.w	r2, r2, #64	; 0x40

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8005796:	4c14      	ldr	r4, [pc, #80]	; (80057e8 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8005798:	641a      	str	r2, [r3, #64]	; 0x40
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	9302      	str	r3, [sp, #8]
 80057a2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80057a4:	f005 ffb8 	bl	800b718 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80057a8:	f005 ff96 	bl	800b6d8 <HAL_RCC_GetPCLK1Freq>
  + Period = [(TIM12CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80057ac:	f240 32e7 	movw	r2, #999	; 0x3e7
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80057b0:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 80057b2:	490e      	ldr	r1, [pc, #56]	; (80057ec <HAL_InitTick+0x78>)
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80057b4:	60e2      	str	r2, [r4, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 80057b6:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80057b8:	fba5 0303 	umull	r0, r3, r5, r3
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80057bc:	4620      	mov	r0, r4
  htim12.Instance = TIM12;
 80057be:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80057c0:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.ClockDivision = 0;
 80057c2:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057c4:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80057c6:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 80057c8:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80057ca:	f008 faa1 	bl	800dd10 <HAL_TIM_Base_Init>
 80057ce:	b110      	cbz	r0, 80057d6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 80057d0:	2001      	movs	r0, #1
}
 80057d2:	b009      	add	sp, #36	; 0x24
 80057d4:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 80057d6:	4620      	mov	r0, r4
 80057d8:	f007 fc74 	bl	800d0c4 <HAL_TIM_Base_Start_IT>
}
 80057dc:	b009      	add	sp, #36	; 0x24
 80057de:	bd30      	pop	{r4, r5, pc}
 80057e0:	40023800 	.word	0x40023800
 80057e4:	431bde83 	.word	0x431bde83
 80057e8:	2001bacc 	.word	0x2001bacc
 80057ec:	40001800 	.word	0x40001800

080057f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop

080057f4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057f4:	e7fe      	b.n	80057f4 <HardFault_Handler>
 80057f6:	bf00      	nop

080057f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057f8:	e7fe      	b.n	80057f8 <MemManage_Handler>
 80057fa:	bf00      	nop

080057fc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057fc:	e7fe      	b.n	80057fc <BusFault_Handler>
 80057fe:	bf00      	nop

08005800 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005800:	e7fe      	b.n	8005800 <UsageFault_Handler>
 8005802:	bf00      	nop

08005804 <RCC_IRQHandler>:
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop

08005808 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005808:	4801      	ldr	r0, [pc, #4]	; (8005810 <DMA1_Stream0_IRQHandler+0x8>)
 800580a:	f002 b945 	b.w	8007a98 <HAL_DMA_IRQHandler>
 800580e:	bf00      	nop
 8005810:	2001b854 	.word	0x2001b854

08005814 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8005814:	4801      	ldr	r0, [pc, #4]	; (800581c <DMA1_Stream1_IRQHandler+0x8>)
 8005816:	f002 b93f 	b.w	8007a98 <HAL_DMA_IRQHandler>
 800581a:	bf00      	nop
 800581c:	2001b268 	.word	0x2001b268

08005820 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8005820:	4801      	ldr	r0, [pc, #4]	; (8005828 <DMA1_Stream5_IRQHandler+0x8>)
 8005822:	f002 b939 	b.w	8007a98 <HAL_DMA_IRQHandler>
 8005826:	bf00      	nop
 8005828:	2001b378 	.word	0x2001b378

0800582c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800582c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800582e:	4805      	ldr	r0, [pc, #20]	; (8005844 <ADC_IRQHandler+0x18>)
 8005830:	f001 f8d8 	bl	80069e4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005834:	4804      	ldr	r0, [pc, #16]	; (8005848 <ADC_IRQHandler+0x1c>)
 8005836:	f001 f8d5 	bl	80069e4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800583a:	4804      	ldr	r0, [pc, #16]	; (800584c <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800583c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 8005840:	f001 b8d0 	b.w	80069e4 <HAL_ADC_IRQHandler>
 8005844:	2001b45c 	.word	0x2001b45c
 8005848:	2001b0fc 	.word	0x2001b0fc
 800584c:	2001b4a4 	.word	0x2001b4a4

08005850 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <TIM2_IRQHandler+0x8>)
 8005852:	f008 b8dd 	b.w	800da10 <HAL_TIM_IRQHandler>
 8005856:	bf00      	nop
 8005858:	2001b784 	.word	0x2001b784

0800585c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <TIM3_IRQHandler+0x8>)
 800585e:	f008 b8d7 	b.w	800da10 <HAL_TIM_IRQHandler>
 8005862:	bf00      	nop
 8005864:	2001b2c8 	.word	0x2001b2c8

08005868 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <USART2_IRQHandler+0x8>)
 800586a:	f00a b9d3 	b.w	800fc14 <HAL_UART_IRQHandler>
 800586e:	bf00      	nop
 8005870:	2001b7d0 	.word	0x2001b7d0

08005874 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8005874:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005878:	f004 b884 	b.w	8009984 <HAL_GPIO_EXTI_IRQHandler>

0800587c <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800587c:	4801      	ldr	r0, [pc, #4]	; (8005884 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 800587e:	f008 b8c7 	b.w	800da10 <HAL_TIM_IRQHandler>
 8005882:	bf00      	nop
 8005884:	2001bacc 	.word	0x2001bacc

08005888 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005888:	4801      	ldr	r0, [pc, #4]	; (8005890 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 800588a:	f008 b8c1 	b.w	800da10 <HAL_TIM_IRQHandler>
 800588e:	bf00      	nop
 8005890:	2001b8b4 	.word	0x2001b8b4

08005894 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005894:	4801      	ldr	r0, [pc, #4]	; (800589c <DMA1_Stream7_IRQHandler+0x8>)
 8005896:	f002 b8ff 	b.w	8007a98 <HAL_DMA_IRQHandler>
 800589a:	bf00      	nop
 800589c:	2001b950 	.word	0x2001b950

080058a0 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80058a0:	4801      	ldr	r0, [pc, #4]	; (80058a8 <TIM5_IRQHandler+0x8>)
 80058a2:	f008 b8b5 	b.w	800da10 <HAL_TIM_IRQHandler>
 80058a6:	bf00      	nop
 80058a8:	2001b21c 	.word	0x2001b21c

080058ac <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80058ac:	4801      	ldr	r0, [pc, #4]	; (80058b4 <UART5_IRQHandler+0x8>)
 80058ae:	f00a b9b1 	b.w	800fc14 <HAL_UART_IRQHandler>
 80058b2:	bf00      	nop
 80058b4:	2001b3d8 	.word	0x2001b3d8

080058b8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80058b8:	4804      	ldr	r0, [pc, #16]	; (80058cc <TIM6_DAC_IRQHandler+0x14>)
{
 80058ba:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 80058bc:	f001 fd12 	bl	80072e4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80058c0:	4803      	ldr	r0, [pc, #12]	; (80058d0 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80058c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80058c6:	f008 b8a3 	b.w	800da10 <HAL_TIM_IRQHandler>
 80058ca:	bf00      	nop
 80058cc:	2001b4ec 	.word	0x2001b4ec
 80058d0:	2001b5cc 	.word	0x2001b5cc

080058d4 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80058d4:	4801      	ldr	r0, [pc, #4]	; (80058dc <DMA2_Stream1_IRQHandler+0x8>)
 80058d6:	f002 b8df 	b.w	8007a98 <HAL_DMA_IRQHandler>
 80058da:	bf00      	nop
 80058dc:	2001aee4 	.word	0x2001aee4

080058e0 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80058e0:	4801      	ldr	r0, [pc, #4]	; (80058e8 <DMA2_Stream4_IRQHandler+0x8>)
 80058e2:	f002 b8d9 	b.w	8007a98 <HAL_DMA_IRQHandler>
 80058e6:	bf00      	nop
 80058e8:	2001b568 	.word	0x2001b568

080058ec <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80058ec:	4801      	ldr	r0, [pc, #4]	; (80058f4 <ETH_IRQHandler+0x8>)
 80058ee:	f003 b875 	b.w	80089dc <HAL_ETH_IRQHandler>
 80058f2:	bf00      	nop
 80058f4:	2001d908 	.word	0x2001d908

080058f8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <OTG_FS_IRQHandler+0x8>)
 80058fa:	f004 bde5 	b.w	800a4c8 <HAL_PCD_IRQHandler>
 80058fe:	bf00      	nop
 8005900:	2002f6c0 	.word	0x2002f6c0

08005904 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <USART6_IRQHandler+0x8>)
 8005906:	f00a b985 	b.w	800fc14 <HAL_UART_IRQHandler>
 800590a:	bf00      	nop
 800590c:	2001b678 	.word	0x2001b678

08005910 <FPU_IRQHandler>:
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop

08005914 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 8005914:	2001      	movs	r0, #1
 8005916:	4770      	bx	lr

08005918 <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 8005918:	4b02      	ldr	r3, [pc, #8]	; (8005924 <_kill+0xc>)
 800591a:	2216      	movs	r2, #22
	return -1;
}
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8005920:	601a      	str	r2, [r3, #0]
}
 8005922:	4770      	bx	lr
 8005924:	2002e1e8 	.word	0x2002e1e8

08005928 <_exit>:
	errno = EINVAL;
 8005928:	4b01      	ldr	r3, [pc, #4]	; (8005930 <_exit+0x8>)
 800592a:	2216      	movs	r2, #22
 800592c:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 800592e:	e7fe      	b.n	800592e <_exit+0x6>
 8005930:	2002e1e8 	.word	0x2002e1e8

08005934 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8005934:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005936:	1e16      	subs	r6, r2, #0
 8005938:	dd07      	ble.n	800594a <_read+0x16>
 800593a:	460c      	mov	r4, r1
 800593c:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 800593e:	f3af 8000 	nop.w
 8005942:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005946:	42a5      	cmp	r5, r4
 8005948:	d1f9      	bne.n	800593e <_read+0xa>
	}

	return len;
}
 800594a:	4630      	mov	r0, r6
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	bf00      	nop

08005950 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop

08005958 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8005958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800595c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800595e:	604b      	str	r3, [r1, #4]
}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop

08005964 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8005964:	2001      	movs	r0, #1
 8005966:	4770      	bx	lr

08005968 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8005968:	2000      	movs	r0, #0
 800596a:	4770      	bx	lr

0800596c <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800596c:	490d      	ldr	r1, [pc, #52]	; (80059a4 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 800596e:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8005970:	4a0d      	ldr	r2, [pc, #52]	; (80059a8 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8005972:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8005974:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8005976:	4c0d      	ldr	r4, [pc, #52]	; (80059ac <_sbrk+0x40>)
 8005978:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 800597a:	b170      	cbz	r0, 800599a <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800597c:	4403      	add	r3, r0
 800597e:	4293      	cmp	r3, r2
 8005980:	d803      	bhi.n	800598a <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 8005982:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 8005986:	600b      	str	r3, [r1, #0]
}
 8005988:	4770      	bx	lr
		errno = ENOMEM;
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <_sbrk+0x44>)
 800598c:	220c      	movs	r2, #12
		return (void*) -1;
 800598e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005992:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8005996:	601a      	str	r2, [r3, #0]
}
 8005998:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 800599a:	4c06      	ldr	r4, [pc, #24]	; (80059b4 <_sbrk+0x48>)
 800599c:	4620      	mov	r0, r4
 800599e:	600c      	str	r4, [r1, #0]
 80059a0:	e7ec      	b.n	800597c <_sbrk+0x10>
 80059a2:	bf00      	nop
 80059a4:	20001c8c 	.word	0x20001c8c
 80059a8:	20080000 	.word	0x20080000
 80059ac:	00006800 	.word	0x00006800
 80059b0:	2002e1e8 	.word	0x2002e1e8
 80059b4:	2002fad0 	.word	0x2002fad0

080059b8 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059b8:	4a0f      	ldr	r2, [pc, #60]	; (80059f8 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80059ba:	4b10      	ldr	r3, [pc, #64]	; (80059fc <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059bc:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80059c0:	490f      	ldr	r1, [pc, #60]	; (8005a00 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059c2:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80059c6:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059c8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 80059cc:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 80059ce:	6818      	ldr	r0, [r3, #0]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059d0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	RCC->PLLCFGR = 0x24003010;
 80059d4:	4e0b      	ldr	r6, [pc, #44]	; (8005a04 <SystemInit+0x4c>)
	RCC->CR |= (uint32_t) 0x00000001;
 80059d6:	f040 0001 	orr.w	r0, r0, #1
 80059da:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 80059dc:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	4001      	ands	r1, r0
 80059e2:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 80059e4:	605e      	str	r6, [r3, #4]
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80059e6:	6819      	ldr	r1, [r3, #0]
 80059e8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80059ec:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 80059ee:	60dc      	str	r4, [r3, #12]
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059f0:	6095      	str	r5, [r2, #8]
#endif
}
 80059f2:	bc70      	pop	{r4, r5, r6}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	e000ed00 	.word	0xe000ed00
 80059fc:	40023800 	.word	0x40023800
 8005a00:	fef6ffff 	.word	0xfef6ffff
 8005a04:	24003010 	.word	0x24003010

08005a08 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8005a08:	680b      	ldr	r3, [r1, #0]
 8005a0a:	4a03      	ldr	r2, [pc, #12]	; (8005a18 <dnsfound+0x10>)
 8005a0c:	2b00      	cmp	r3, #0
		ip_ready = -1;
 8005a0e:	bf08      	it	eq
 8005a10:	f04f 33ff 	moveq.w	r3, #4294967295
 8005a14:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 8005a16:	4770      	bx	lr
 8005a18:	20001c98 	.word	0x20001c98

08005a1c <myreboot>:
void myreboot(char *msg) {
 8005a1c:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 8005a1e:	480a      	ldr	r0, [pc, #40]	; (8005a48 <myreboot+0x2c>)
void myreboot(char *msg) {
 8005a20:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 8005a22:	f01c fd4f 	bl	80224c4 <iprintf>
	osDelay(2000);
 8005a26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a2a:	f00c ffe5 	bl	80129f8 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8005a2e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005a32:	4906      	ldr	r1, [pc, #24]	; (8005a4c <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005a36:	68ca      	ldr	r2, [r1, #12]
 8005a38:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60cb      	str	r3, [r1, #12]
 8005a40:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005a44:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8005a46:	e7fd      	b.n	8005a44 <myreboot+0x28>
 8005a48:	0802827c 	.word	0x0802827c
 8005a4c:	e000ed00 	.word	0xe000ed00
 8005a50:	05fa0004 	.word	0x05fa0004

08005a54 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8005a54:	b500      	push	{lr}
 8005a56:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8005a58:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a5c:	4a16      	ldr	r2, [pc, #88]	; (8005ab8 <sendudp+0x64>)
 8005a5e:	f017 fe4f 	bl	801d700 <udp_sendto>
 8005a62:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8005a66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a6a:	b943      	cbnz	r3, 8005a7e <sendudp+0x2a>
 8005a6c:	b25a      	sxtb	r2, r3
		busycount = 0;
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <sendudp+0x68>)
 8005a70:	601a      	str	r2, [r3, #0]
	return (err);
 8005a72:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005a76:	b240      	sxtb	r0, r0
 8005a78:	b003      	add	sp, #12
 8005a7a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 8005a7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005a82:	480f      	ldr	r0, [pc, #60]	; (8005ac0 <sendudp+0x6c>)
 8005a84:	b249      	sxtb	r1, r1
 8005a86:	f01c fd1d 	bl	80224c4 <iprintf>
		vTaskDelay(100); //some delay!
 8005a8a:	2064      	movs	r0, #100	; 0x64
 8005a8c:	f00e fa6a 	bl	8013f64 <vTaskDelay>
		if (err == ERR_MEM) {
 8005a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a94:	2bff      	cmp	r3, #255	; 0xff
 8005a96:	d00c      	beq.n	8005ab2 <sendudp+0x5e>
		if (err == ERR_USE) {
 8005a98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a9c:	2bf8      	cmp	r3, #248	; 0xf8
 8005a9e:	d1e8      	bne.n	8005a72 <sendudp+0x1e>
			if (busycount++ > 10)
 8005aa0:	4a06      	ldr	r2, [pc, #24]	; (8005abc <sendudp+0x68>)
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	1c59      	adds	r1, r3, #1
 8005aa6:	2b0a      	cmp	r3, #10
 8005aa8:	6011      	str	r1, [r2, #0]
 8005aaa:	dde2      	ble.n	8005a72 <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8005aac:	4805      	ldr	r0, [pc, #20]	; (8005ac4 <sendudp+0x70>)
 8005aae:	f7ff ffb5 	bl	8005a1c <myreboot>
			myreboot("sendudp: out of mem");
 8005ab2:	4805      	ldr	r0, [pc, #20]	; (8005ac8 <sendudp+0x74>)
 8005ab4:	f7ff ffb2 	bl	8005a1c <myreboot>
 8005ab8:	2001bb2c 	.word	0x2001bb2c
 8005abc:	20001c90 	.word	0x20001c90
 8005ac0:	08028290 	.word	0x08028290
 8005ac4:	080282b8 	.word	0x080282b8
 8005ac8:	080282a4 	.word	0x080282a4

08005acc <sendstatus>:
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8005acc:	b5f0      	push	{r4, r5, r6, r7, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8005ace:	4c24      	ldr	r4, [pc, #144]	; (8005b60 <sendstatus+0x94>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8005ad0:	4607      	mov	r7, r0
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005ad2:	4b24      	ldr	r3, [pc, #144]	; (8005b64 <sendstatus+0x98>)
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8005ad4:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8005ad6:	f9b4 4000 	ldrsh.w	r4, [r4]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8005ada:	b083      	sub	sp, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005adc:	881d      	ldrh	r5, [r3, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8005ade:	ea84 7ce4 	eor.w	ip, r4, r4, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8005ae2:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <sendstatus+0x9c>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005ae4:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <sendstatus+0xa0>)
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8005ae6:	6812      	ldr	r2, [r2, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8005ae8:	ebac 7ce4 	sub.w	ip, ip, r4, asr #31
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005aec:	1b64      	subs	r4, r4, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005aee:	4d20      	ldr	r5, [pc, #128]	; (8005b70 <sendstatus+0xa4>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8005af0:	4e20      	ldr	r6, [pc, #128]	; (8005b74 <sendstatus+0xa8>)
 8005af2:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005af6:	2c00      	cmp	r4, #0
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005af8:	682d      	ldr	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005afa:	881b      	ldrh	r3, [r3, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8005afc:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005b00:	f8df e080 	ldr.w	lr, [pc, #128]	; 8005b84 <sendstatus+0xb8>
 8005b04:	bfb8      	it	lt
 8005b06:	4264      	neglt	r4, r4
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8005b08:	f8a6 c072 	strh.w	ip, [r6, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005b0c:	031b      	lsls	r3, r3, #12
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8005b0e:	f8a6 2062 	strh.w	r2, [r6, #98]	; 0x62
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005b12:	022d      	lsls	r5, r5, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005b14:	f8be c000 	ldrh.w	ip, [lr]
 8005b18:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005b1c:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <sendstatus+0xac>)
 8005b1e:	b2ad      	uxth	r5, r5
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005b20:	4464      	add	r4, ip
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005b22:	f8d6 c074 	ldr.w	ip, [r6, #116]	; 0x74
 8005b26:	f892 e000 	ldrb.w	lr, [r2]
 8005b2a:	4a14      	ldr	r2, [pc, #80]	; (8005b7c <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005b2c:	431c      	orrs	r4, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005b2e:	ea45 050e 	orr.w	r5, r5, lr
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8005b32:	f241 3388 	movw	r3, #5000	; 0x1388
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005b36:	ea0c 0202 	and.w	r2, ip, r2
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005b3a:	b2a4      	uxth	r4, r4
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8005b3c:	f8d1 c004 	ldr.w	ip, [r1, #4]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005b40:	4315      	orrs	r5, r2
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8005b42:	4a0f      	ldr	r2, [pc, #60]	; (8005b80 <sendstatus+0xb4>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005b44:	6775      	str	r5, [r6, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005b46:	f8a6 4060 	strh.w	r4, [r6, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8005b4a:	f88c 7003 	strb.w	r7, [ip, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8005b4e:	f7ff ff81 	bl	8005a54 <sendudp>
 8005b52:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8005b56:	6833      	ldr	r3, [r6, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	6033      	str	r3, [r6, #0]
}
 8005b5c:	b003      	add	sp, #12
 8005b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b60:	20000738 	.word	0x20000738
 8005b64:	200006f0 	.word	0x200006f0
 8005b68:	200006e4 	.word	0x200006e4
 8005b6c:	2000026a 	.word	0x2000026a
 8005b70:	200006ec 	.word	0x200006ec
 8005b74:	2001ad7c 	.word	0x2001ad7c
 8005b78:	200006d4 	.word	0x200006d4
 8005b7c:	ffff0000 	.word	0xffff0000
 8005b80:	2001bb2c 	.word	0x2001bb2c
 8005b84:	20000002 	.word	0x20000002

08005b88 <sendtimedstatus>:
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <sendtimedstatus+0x30>)
void sendtimedstatus(struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8005b8a:	b470      	push	{r4, r5, r6}
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8005b8c:	4d0b      	ldr	r5, [pc, #44]	; (8005bbc <sendtimedstatus+0x34>)
 8005b8e:	681c      	ldr	r4, [r3, #0]
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	429c      	cmp	r4, r3
 8005b94:	d006      	beq.n	8005ba4 <sendtimedstatus+0x1c>
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <sendtimedstatus+0x38>)
 8005b98:	4e0a      	ldr	r6, [pc, #40]	; (8005bc4 <sendtimedstatus+0x3c>)
 8005b9a:	fb03 f304 	mul.w	r3, r3, r4
 8005b9e:	ebb6 0ff3 	cmp.w	r6, r3, ror #3
 8005ba2:	d201      	bcs.n	8005ba8 <sendtimedstatus+0x20>
}
 8005ba4:	bc70      	pop	{r4, r5, r6}
 8005ba6:	4770      	bx	lr
		sendstatus(TIMED, ps, pcb, batchid);
 8005ba8:	4613      	mov	r3, r2
		talive = t1sec;
 8005baa:	602c      	str	r4, [r5, #0]
		sendstatus(TIMED, ps, pcb, batchid);
 8005bac:	460a      	mov	r2, r1
 8005bae:	4601      	mov	r1, r0
 8005bb0:	2002      	movs	r0, #2
}
 8005bb2:	bc70      	pop	{r4, r5, r6}
		sendstatus(TIMED, ps, pcb, batchid);
 8005bb4:	f7ff bf8a 	b.w	8005acc <sendstatus>
 8005bb8:	20001c38 	.word	0x20001c38
 8005bbc:	20001c9c 	.word	0x20001c9c
 8005bc0:	eeeeeeef 	.word	0xeeeeeeef
 8005bc4:	02222222 	.word	0x02222222

08005bc8 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 8005bce:	4818      	ldr	r0, [pc, #96]	; (8005c30 <dnslookup+0x68>)
 8005bd0:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 8005bd2:	4e18      	ldr	r6, [pc, #96]	; (8005c34 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 8005bd4:	f01c fc76 	bl	80224c4 <iprintf>
	ip_ready = 0;
 8005bd8:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8005bda:	4620      	mov	r0, r4
 8005bdc:	4639      	mov	r1, r7
 8005bde:	4a16      	ldr	r2, [pc, #88]	; (8005c38 <dnslookup+0x70>)
	ip_ready = 0;
 8005be0:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8005be2:	f011 fa29 	bl	8017038 <dns_gethostbyname>
 8005be6:	4604      	mov	r4, r0

	switch (err) {
 8005be8:	3005      	adds	r0, #5
 8005bea:	d005      	beq.n	8005bf8 <dnslookup+0x30>
 8005bec:	b114      	cbz	r4, 8005bf4 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 8005bee:	4813      	ldr	r0, [pc, #76]	; (8005c3c <dnslookup+0x74>)
 8005bf0:	f01c fc68 	bl	80224c4 <iprintf>
		break;
	}
	return (err);
}
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8005bf8:	4811      	ldr	r0, [pc, #68]	; (8005c40 <dnslookup+0x78>)
 8005bfa:	2514      	movs	r5, #20
 8005bfc:	f01c fc62 	bl	80224c4 <iprintf>
		for (i = 0; i < 20; i++) {
 8005c00:	e001      	b.n	8005c06 <dnslookup+0x3e>
 8005c02:	3d01      	subs	r5, #1
 8005c04:	d0f3      	beq.n	8005bee <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 8005c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c0a:	f00c fef5 	bl	80129f8 <osDelay>
			printf(".");
 8005c0e:	202e      	movs	r0, #46	; 0x2e
 8005c10:	f01c fc70 	bl	80224f4 <putchar>
			if (ip_ready) {
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f3      	beq.n	8005c02 <dnslookup+0x3a>
				if (ip_ready == -1) {
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	d002      	beq.n	8005c24 <dnslookup+0x5c>
				return (ERR_OK);
 8005c1e:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 8005c20:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 8005c22:	e7e7      	b.n	8005bf4 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8005c26:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 8005c2a:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8005c2c:	e7e2      	b.n	8005bf4 <dnslookup+0x2c>
 8005c2e:	bf00      	nop
 8005c30:	080282d4 	.word	0x080282d4
 8005c34:	20001c98 	.word	0x20001c98
 8005c38:	08005a09 	.word	0x08005a09
 8005c3c:	08028310 	.word	0x08028310
 8005c40:	080282e8 	.word	0x080282e8
 8005c44:	08028304 	.word	0x08028304

08005c48 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8005c48:	b530      	push	{r4, r5, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8005c4a:	4913      	ldr	r1, [pc, #76]	; (8005c98 <locateudp+0x50>)
{
 8005c4c:	b085      	sub	sp, #20
	printf("Finding %s for UDP streaming\n", udp_target);
 8005c4e:	4813      	ldr	r0, [pc, #76]	; (8005c9c <locateudp+0x54>)
 8005c50:	f01c fc38 	bl	80224c4 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8005c54:	4912      	ldr	r1, [pc, #72]	; (8005ca0 <locateudp+0x58>)
 8005c56:	4810      	ldr	r0, [pc, #64]	; (8005c98 <locateudp+0x50>)
 8005c58:	f7ff ffb6 	bl	8005bc8 <dnslookup>
 8005c5c:	b240      	sxtb	r0, r0
 8005c5e:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 8005c62:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005c66:	b9a3      	cbnz	r3, 8005c92 <locateudp+0x4a>
		rebootme();

	ip = udpdestip.addr;
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <locateudp+0x58>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8005c6a:	490e      	ldr	r1, [pc, #56]	; (8005ca4 <locateudp+0x5c>)
	ip = udpdestip.addr;
 8005c6c:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8005c6e:	480e      	ldr	r0, [pc, #56]	; (8005ca8 <locateudp+0x60>)
 8005c70:	0e22      	lsrs	r2, r4, #24
 8005c72:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8005c76:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8005c7a:	9201      	str	r2, [sp, #4]
 8005c7c:	b2e2      	uxtb	r2, r4
 8005c7e:	9500      	str	r5, [sp, #0]
 8005c80:	f01c fd98 	bl	80227b4 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8005c84:	4908      	ldr	r1, [pc, #32]	; (8005ca8 <locateudp+0x60>)
 8005c86:	4809      	ldr	r0, [pc, #36]	; (8005cac <locateudp+0x64>)
 8005c88:	f01c fc1c 	bl	80224c4 <iprintf>
	return (ip);
}
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	b005      	add	sp, #20
 8005c90:	bd30      	pop	{r4, r5, pc}
		rebootme();
 8005c92:	f7fc fe8f 	bl	80029b4 <rebootme>
 8005c96:	e7e7      	b.n	8005c68 <locateudp+0x20>
 8005c98:	2001bb30 	.word	0x2001bb30
 8005c9c:	08028334 	.word	0x08028334
 8005ca0:	2001bb2c 	.word	0x2001bb2c
 8005ca4:	08028354 	.word	0x08028354
 8005ca8:	2001bb18 	.word	0x2001bb18
 8005cac:	08028364 	.word	0x08028364

08005cb0 <startudp>:

void startudp(uint32_t ip) {
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8005cb6:	f00e faa9 	bl	801420c <xTaskGetCurrentTaskHandle>
 8005cba:	4b68      	ldr	r3, [pc, #416]	; (8005e5c <startudp+0x1ac>)
 8005cbc:	4602      	mov	r2, r0
	osDelay(1000);
 8005cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8005cc2:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8005cc4:	f00c fe98 	bl	80129f8 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8005cc8:	f017 fde6 	bl	801d898 <udp_new>
	if (pcb == NULL) {
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	f000 80b7 	beq.w	8005e40 <startudp+0x190>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8005cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd6:	4962      	ldr	r1, [pc, #392]	; (8005e60 <startudp+0x1b0>)
 8005cd8:	4680      	mov	r8, r0
 8005cda:	f017 fb7d 	bl	801d3d8 <udp_bind>
 8005cde:	4682      	mov	sl, r0
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	f040 80a9 	bne.w	8005e38 <startudp+0x188>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005ce6:	2241      	movs	r2, #65	; 0x41
 8005ce8:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8005cec:	2036      	movs	r0, #54	; 0x36
 8005cee:	f012 fb3f 	bl	8018370 <pbuf_alloc>

	if (p1 == NULL) {
 8005cf2:	9000      	str	r0, [sp, #0]
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f000 80ad 	beq.w	8005e54 <startudp+0x1a4>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8005cfa:	4c5a      	ldr	r4, [pc, #360]	; (8005e64 <startudp+0x1b4>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005cfc:	2241      	movs	r2, #65	; 0x41
	p1->payload = &(*pktbuf)[0];
 8005cfe:	9d00      	ldr	r5, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005d00:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8005d04:	6823      	ldr	r3, [r4, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005d06:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 8005d08:	606b      	str	r3, [r5, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005d0a:	f012 fb31 	bl	8018370 <pbuf_alloc>
	if (p2 == NULL) {
 8005d0e:	9001      	str	r0, [sp, #4]
 8005d10:	2800      	cmp	r0, #0
 8005d12:	f000 8099 	beq.w	8005e48 <startudp+0x198>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8005d16:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8005d18:	2201      	movs	r2, #1
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8005d1a:	9c01      	ldr	r4, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8005d1c:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8005d1e:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8005d22:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8005d24:	6063      	str	r3, [r4, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8005d26:	f012 fb23 	bl	8018370 <pbuf_alloc>
	if (ps == NULL) {
 8005d2a:	4681      	mov	r9, r0
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	f000 8093 	beq.w	8005e58 <startudp+0x1a8>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 8005d32:	4c4d      	ldr	r4, [pc, #308]	; (8005e68 <startudp+0x1b8>)

	osDelay(5000);
 8005d34:	f241 3088 	movw	r0, #5000	; 0x1388
 8005d38:	4f4c      	ldr	r7, [pc, #304]	; (8005e6c <startudp+0x1bc>)
	ps->payload = &statuspkt;	// point at status / GPS data
 8005d3a:	f8c9 4004 	str.w	r4, [r9, #4]
	osDelay(5000);
 8005d3e:	f00c fe5b 	bl	80129f8 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8005d42:	4b4b      	ldr	r3, [pc, #300]	; (8005e70 <startudp+0x1c0>)

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8005d44:	2101      	movs	r1, #1
 8005d46:	4a4b      	ldr	r2, [pc, #300]	; (8005e74 <startudp+0x1c4>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8005d48:	484b      	ldr	r0, [pc, #300]	; (8005e78 <startudp+0x1c8>)
	statuspkt.auxstatus1 = 0;
 8005d4a:	f8c4 a074 	str.w	sl, [r4, #116]	; 0x74
	statuspkt.adcudpover = 0;		// debug use count overruns
 8005d4e:	4e4b      	ldr	r6, [pc, #300]	; (8005e7c <startudp+0x1cc>)
 8005d50:	f8c4 a078 	str.w	sl, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8005d54:	f8df b154 	ldr.w	fp, [pc, #340]	; 8005eac <startudp+0x1fc>
 8005d58:	f8c4 a07c 	str.w	sl, [r4, #124]	; 0x7c
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8005d5c:	4d48      	ldr	r5, [pc, #288]	; (8005e80 <startudp+0x1d0>)
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8005d5e:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8005d62:	7011      	strb	r1, [r2, #0]
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8005d64:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8005d68:	f01c fc48 	bl	80225fc <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8005d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d70:	2001      	movs	r0, #1
 8005d72:	f00e fb91 	bl	8014498 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d057      	beq.n	8005e2a <startudp+0x17a>
			sigsend = 0;
 8005d7a:	2200      	movs	r2, #0
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8005d7c:	7833      	ldrb	r3, [r6, #0]
			sigsend = 0;
 8005d7e:	603a      	str	r2, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f3      	beq.n	8005d6c <startudp+0xbc>
 8005d84:	4a3f      	ldr	r2, [pc, #252]	; (8005e84 <startudp+0x1d4>)
 8005d86:	f8db 3000 	ldr.w	r3, [fp]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	d1ed      	bne.n	8005d6c <startudp+0xbc>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8005d90:	4a3d      	ldr	r2, [pc, #244]	; (8005e88 <startudp+0x1d8>)
 8005d92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	bf08      	it	eq
 8005d9c:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8005d9e:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8005da0:	468a      	mov	sl, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8005da2:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8005da4:	6822      	ldr	r2, [r4, #0]
 8005da6:	684b      	ldr	r3, [r1, #4]
 8005da8:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	684a      	ldr	r2, [r1, #4]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	684a      	ldr	r2, [r1, #4]
 8005db6:	0c1b      	lsrs	r3, r3, #16
 8005db8:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 8005dba:	7b89      	ldrb	r1, [r1, #14]
 8005dbc:	2901      	cmp	r1, #1
 8005dbe:	d006      	beq.n	8005dce <startudp+0x11e>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f01c fb7f 	bl	80224c4 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8005dc6:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8005dca:	2901      	cmp	r1, #1
 8005dcc:	d1f8      	bne.n	8005dc0 <startudp+0x110>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8005dce:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dd2:	4a2e      	ldr	r2, [pc, #184]	; (8005e8c <startudp+0x1dc>)
 8005dd4:	4651      	mov	r1, sl
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f7ff fe3c 	bl	8005a54 <sendudp>
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 8005ddc:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <startudp+0x1e0>)
				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8005dde:	f88d 000f 	strb.w	r0, [sp, #15]
				if (sendendstatus > 0) {
 8005de2:	781a      	ldrb	r2, [r3, #0]
				statuspkt.udpsent++;	// debug no of sample packets set
 8005de4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005de8:	3301      	adds	r3, #1
 8005dea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 8005dee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005df2:	3301      	adds	r3, #1
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	6023      	str	r3, [r4, #0]
				if (sendendstatus > 0) {
 8005e00:	2a00      	cmp	r2, #0
 8005e02:	d0b3      	beq.n	8005d6c <startudp+0xbc>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 8005e04:	4923      	ldr	r1, [pc, #140]	; (8005e94 <startudp+0x1e4>)
 8005e06:	4642      	mov	r2, r8
 8005e08:	2001      	movs	r0, #1
 8005e0a:	780b      	ldrb	r3, [r1, #0]
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	f7ff fe5d 	bl	8005acc <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8005e12:	2300      	movs	r3, #0
 8005e14:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <startudp+0x1e0>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8005e16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e1a:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 8005e1c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 8005e20:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8005e22:	f00e fb39 	bl	8014498 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d1a7      	bne.n	8005d7a <startudp+0xca>
		}
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		/* The transmission ended as expected. */
		else {
			/* The call to ulTaskNotifyTake() timed out. */
			sendtimedstatus(ps, pcb, adcbatchid);
 8005e2a:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <startudp+0x1e4>)
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	4648      	mov	r0, r9
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	f7ff fea9 	bl	8005b88 <sendtimedstatus>
 8005e36:	e799      	b.n	8005d6c <startudp+0xbc>
		printf("startudp: udp_bind failed!\n");
 8005e38:	4817      	ldr	r0, [pc, #92]	; (8005e98 <startudp+0x1e8>)
 8005e3a:	f01c fbdf 	bl	80225fc <puts>
		for (;;)
 8005e3e:	e7fe      	b.n	8005e3e <startudp+0x18e>
		printf("startudp: udp_new failed!\n");
 8005e40:	4816      	ldr	r0, [pc, #88]	; (8005e9c <startudp+0x1ec>)
 8005e42:	f01c fbdb 	bl	80225fc <puts>
		for (;;)
 8005e46:	e7fe      	b.n	8005e46 <startudp+0x196>
		printf("startudp: p2 buf_alloc failed!\n");
 8005e48:	4815      	ldr	r0, [pc, #84]	; (8005ea0 <startudp+0x1f0>)
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8005e4a:	b005      	add	sp, #20
 8005e4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8005e50:	f01c bbd4 	b.w	80225fc <puts>
		printf("startudp: p1 buf_alloc failed!\n");
 8005e54:	4813      	ldr	r0, [pc, #76]	; (8005ea4 <startudp+0x1f4>)
 8005e56:	e7f8      	b.n	8005e4a <startudp+0x19a>
		printf("startudp: ps buf_alloc failed!\n");
 8005e58:	4813      	ldr	r0, [pc, #76]	; (8005ea8 <startudp+0x1f8>)
 8005e5a:	e7f6      	b.n	8005e4a <startudp+0x19a>
 8005e5c:	200007e0 	.word	0x200007e0
 8005e60:	08041a0c 	.word	0x08041a0c
 8005e64:	2001ae2c 	.word	0x2001ae2c
 8005e68:	2001ad7c 	.word	0x2001ad7c
 8005e6c:	20000750 	.word	0x20000750
 8005e70:	dec0edfe 	.word	0xdec0edfe
 8005e74:	2000073a 	.word	0x2000073a
 8005e78:	08028410 	.word	0x08028410
 8005e7c:	20001c95 	.word	0x20001c95
 8005e80:	08028444 	.word	0x08028444
 8005e84:	200006ec 	.word	0x200006ec
 8005e88:	200006e0 	.word	0x200006e0
 8005e8c:	2001bb2c 	.word	0x2001bb2c
 8005e90:	20000748 	.word	0x20000748
 8005e94:	200006d4 	.word	0x200006d4
 8005e98:	08028394 	.word	0x08028394
 8005e9c:	08028378 	.word	0x08028378
 8005ea0:	080283d0 	.word	0x080283d0
 8005ea4:	080283b0 	.word	0x080283b0
 8005ea8:	080283f0 	.word	0x080283f0
 8005eac:	2001bb28 	.word	0x2001bb28

08005eb0 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 8005eb2:	4b53      	ldr	r3, [pc, #332]	; (8006000 <tag_callback+0x150>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8005eb8:	4852      	ldr	r0, [pc, #328]	; (8006004 <tag_callback+0x154>)
	if (ledsenabled) {
 8005eba:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8005ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 8005ec0:	2a00      	cmp	r2, #0
 8005ec2:	d03a      	beq.n	8005f3a <tag_callback+0x8a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8005ec4:	f003 fd46 	bl	8009954 <HAL_GPIO_TogglePin>
 8005ec8:	4d4f      	ldr	r5, [pc, #316]	; (8006008 <tag_callback+0x158>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8005eca:	4e50      	ldr	r6, [pc, #320]	; (800600c <tag_callback+0x15c>)
 8005ecc:	e001      	b.n	8005ed2 <tag_callback+0x22>
 8005ece:	f01c fb95 	bl	80225fc <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	6828      	ldr	r0, [r5, #0]
 8005ed6:	f00d fb2f 	bl	8013538 <xQueueSemaphoreTake>
 8005eda:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8005edc:	4630      	mov	r0, r6
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d1f5      	bne.n	8005ece <tag_callback+0x1e>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8005ee2:	1f22      	subs	r2, r4, #4
 8005ee4:	2a07      	cmp	r2, #7
 8005ee6:	d819      	bhi.n	8005f1c <tag_callback+0x6c>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8005ee8:	4949      	ldr	r1, [pc, #292]	; (8006010 <tag_callback+0x160>)
 8005eea:	4093      	lsls	r3, r2
 8005eec:	4a49      	ldr	r2, [pc, #292]	; (8006014 <tag_callback+0x164>)
 8005eee:	7809      	ldrb	r1, [r1, #0]
 8005ef0:	400b      	ands	r3, r1
 8005ef2:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8005ef4:	bb5b      	cbnz	r3, 8005f4e <tag_callback+0x9e>
			strcpy(newstring, "0");
 8005ef6:	4b48      	ldr	r3, [pc, #288]	; (8006018 <tag_callback+0x168>)
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8005efc:	2300      	movs	r3, #0
 8005efe:	6828      	ldr	r0, [r5, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	4619      	mov	r1, r3
 8005f04:	f00d f892 	bl	801302c <xQueueGenericSend>
 8005f08:	2801      	cmp	r0, #1
 8005f0a:	d002      	beq.n	8005f12 <tag_callback+0x62>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8005f0c:	4843      	ldr	r0, [pc, #268]	; (800601c <tag_callback+0x16c>)
 8005f0e:	f01c fb75 	bl	80225fc <puts>
	}
	return (strlen(newstring));
 8005f12:	4638      	mov	r0, r7
}
 8005f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8005f18:	f7fa b99c 	b.w	8000254 <strlen>
		switch (index) {
 8005f1c:	2c14      	cmp	r4, #20
 8005f1e:	d868      	bhi.n	8005ff2 <tag_callback+0x142>
 8005f20:	e8df f004 	tbb	[pc, r4]
 8005f24:	0e585d62 	.word	0x0e585d62
 8005f28:	67676767 	.word	0x67676767
 8005f2c:	67676767 	.word	0x67676767
 8005f30:	3b444d54 	.word	0x3b444d54
 8005f34:	21262b30 	.word	0x21262b30
 8005f38:	19          	.byte	0x19
 8005f39:	00          	.byte	0x00
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8005f3a:	f003 fcf1 	bl	8009920 <HAL_GPIO_WritePin>
 8005f3e:	e7c3      	b.n	8005ec8 <tag_callback+0x18>
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8005f40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f44:	482f      	ldr	r0, [pc, #188]	; (8006004 <tag_callback+0x154>)
 8005f46:	f003 fcd9 	bl	80098fc <HAL_GPIO_ReadPin>
 8005f4a:	2801      	cmp	r0, #1
 8005f4c:	d1d3      	bne.n	8005ef6 <tag_callback+0x46>
			strcpy(newstring, "1");
 8005f4e:	4b34      	ldr	r3, [pc, #208]	; (8006020 <tag_callback+0x170>)
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	803b      	strh	r3, [r7, #0]
 8005f54:	e7d2      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8005f56:	4b33      	ldr	r3, [pc, #204]	; (8006024 <tag_callback+0x174>)
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bf14      	ite	ne
 8005f5e:	2331      	movne	r3, #49	; 0x31
 8005f60:	2330      	moveq	r3, #48	; 0x30
 8005f62:	803b      	strh	r3, [r7, #0]
			break;
 8005f64:	e7ca      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, gpsstr);		// GPS Status
 8005f66:	4930      	ldr	r1, [pc, #192]	; (8006028 <tag_callback+0x178>)
 8005f68:	4638      	mov	r0, r7
 8005f6a:	f01c fcca 	bl	8022902 <strcpy>
			break;
 8005f6e:	e7c5      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, statstr);		// Detector Status
 8005f70:	492e      	ldr	r1, [pc, #184]	; (800602c <tag_callback+0x17c>)
 8005f72:	4638      	mov	r0, r7
 8005f74:	f01c fcc5 	bl	8022902 <strcpy>
			break;
 8005f78:	e7c0      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, snstr);			// Detector ID
 8005f7a:	492d      	ldr	r1, [pc, #180]	; (8006030 <tag_callback+0x180>)
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	f01c fcc0 	bl	8022902 <strcpy>
			break;
 8005f82:	e7bb      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8005f84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f88:	482a      	ldr	r0, [pc, #168]	; (8006034 <tag_callback+0x184>)
 8005f8a:	f003 fcb7 	bl	80098fc <HAL_GPIO_ReadPin>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	bf14      	ite	ne
 8005f92:	2330      	movne	r3, #48	; 0x30
 8005f94:	2331      	moveq	r3, #49	; 0x31
 8005f96:	803b      	strh	r3, [r7, #0]
			break;
 8005f98:	e7b0      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8005f9a:	4b27      	ldr	r3, [pc, #156]	; (8006038 <tag_callback+0x188>)
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	f013 0f04 	tst.w	r3, #4
 8005fa2:	bf14      	ite	ne
 8005fa4:	2331      	movne	r3, #49	; 0x31
 8005fa6:	2330      	moveq	r3, #48	; 0x30
 8005fa8:	803b      	strh	r3, [r7, #0]
			break;
 8005faa:	e7a7      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8005fac:	4b22      	ldr	r3, [pc, #136]	; (8006038 <tag_callback+0x188>)
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	f013 0f02 	tst.w	r3, #2
 8005fb4:	bf14      	ite	ne
 8005fb6:	2331      	movne	r3, #49	; 0x31
 8005fb8:	2330      	moveq	r3, #48	; 0x30
 8005fba:	803b      	strh	r3, [r7, #0]
			break;
 8005fbc:	e79e      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8005fbe:	4b1e      	ldr	r3, [pc, #120]	; (8006038 <tag_callback+0x188>)
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	3330      	adds	r3, #48	; 0x30
 8005fc8:	803b      	strh	r3, [r7, #0]
			break;
 8005fca:	e797      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, "5");
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <tag_callback+0x18c>)
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	803b      	strh	r3, [r7, #0]
			break;
 8005fd2:	e793      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, nowtimestr);
 8005fd4:	491a      	ldr	r1, [pc, #104]	; (8006040 <tag_callback+0x190>)
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	f01c fc93 	bl	8022902 <strcpy>
			break;
 8005fdc:	e78e      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, pressstr);		// pressure
 8005fde:	4919      	ldr	r1, [pc, #100]	; (8006044 <tag_callback+0x194>)
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f01c fc8e 	bl	8022902 <strcpy>
			break;
 8005fe6:	e789      	b.n	8005efc <tag_callback+0x4c>
			strcpy(newstring, tempstr);		// temperature
 8005fe8:	4917      	ldr	r1, [pc, #92]	; (8006048 <tag_callback+0x198>)
 8005fea:	4638      	mov	r0, r7
 8005fec:	f01c fc89 	bl	8022902 <strcpy>
			break;
 8005ff0:	e784      	b.n	8005efc <tag_callback+0x4c>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	4915      	ldr	r1, [pc, #84]	; (800604c <tag_callback+0x19c>)
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f01c fbdc 	bl	80227b4 <siprintf>
			break;
 8005ffc:	e77e      	b.n	8005efc <tag_callback+0x4c>
 8005ffe:	bf00      	nop
 8006000:	20000266 	.word	0x20000266
 8006004:	40020c00 	.word	0x40020c00
 8006008:	2001b5c8 	.word	0x2001b5c8
 800600c:	0802852c 	.word	0x0802852c
 8006010:	20000268 	.word	0x20000268
 8006014:	2001bb74 	.word	0x2001bb74
 8006018:	080415e8 	.word	0x080415e8
 800601c:	08028558 	.word	0x08028558
 8006020:	0802830c 	.word	0x0802830c
 8006024:	20000010 	.word	0x20000010
 8006028:	20000014 	.word	0x20000014
 800602c:	20000128 	.word	0x20000128
 8006030:	20000084 	.word	0x20000084
 8006034:	40021000 	.word	0x40021000
 8006038:	2000026a 	.word	0x2000026a
 800603c:	0803f960 	.word	0x0803f960
 8006040:	20000054 	.word	0x20000054
 8006044:	20000074 	.word	0x20000074
 8006048:	20000230 	.word	0x20000230
 800604c:	08028538 	.word	0x08028538

08006050 <returnpage>:
/* ---------------------------------------------- */
// http client
/* ---------------------------------------------- */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8006050:	b5f0      	push	{r4, r5, r6, r7, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8006052:	4d3d      	ldr	r5, [pc, #244]	; (8006148 <returnpage+0xf8>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8006054:	b08d      	sub	sp, #52	; 0x34
 8006056:	4616      	mov	r6, r2
 8006058:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 800605c:	ac07      	add	r4, sp, #28
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 800605e:	f88d 100e 	strb.w	r1, [sp, #14]
 8006062:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile uint32_t sn;
	int nconv;
	volatile int p1, p2;

	if (errorm == 0) {
 8006066:	f89d 700e 	ldrb.w	r7, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 800606a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800606c:	682d      	ldr	r5, [r5, #0]
 800606e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006070:	6025      	str	r5, [r4, #0]
	if (errorm == 0) {
 8006072:	b10f      	cbz	r7, 8006078 <returnpage+0x28>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 8006074:	b00d      	add	sp, #52	; 0x34
 8006076:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nconv = sscanf(content, "%5u%48s%u%u", &sn, udp_target, &p1, &p2);
 8006078:	aa06      	add	r2, sp, #24
 800607a:	a905      	add	r1, sp, #20
 800607c:	4b33      	ldr	r3, [pc, #204]	; (800614c <returnpage+0xfc>)
 800607e:	4630      	mov	r0, r6
 8006080:	9201      	str	r2, [sp, #4]
 8006082:	aa04      	add	r2, sp, #16
 8006084:	9100      	str	r1, [sp, #0]
 8006086:	4932      	ldr	r1, [pc, #200]	; (8006150 <returnpage+0x100>)
 8006088:	f01c fbb4 	bl	80227f4 <siscanf>
		if (nconv != EOF) {
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d032      	beq.n	80060f6 <returnpage+0xa6>
			switch (nconv) {
 8006090:	2802      	cmp	r0, #2
 8006092:	d020      	beq.n	80060d6 <returnpage+0x86>
 8006094:	dc13      	bgt.n	80060be <returnpage+0x6e>
 8006096:	2801      	cmp	r0, #1
 8006098:	d128      	bne.n	80060ec <returnpage+0x9c>
				if (statuspkt.uid != sn) {
 800609a:	4a2e      	ldr	r2, [pc, #184]	; (8006154 <returnpage+0x104>)
 800609c:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 80060a0:	9904      	ldr	r1, [sp, #16]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	428b      	cmp	r3, r1
 80060a6:	d0e5      	beq.n	8006074 <returnpage+0x24>
					statuspkt.uid = sn;
 80060a8:	9b04      	ldr	r3, [sp, #16]
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 80060aa:	482b      	ldr	r0, [pc, #172]	; (8006158 <returnpage+0x108>)
					statuspkt.uid = sn;
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 80060b2:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80060b6:	b289      	uxth	r1, r1
 80060b8:	f01c fa04 	bl	80224c4 <iprintf>
 80060bc:	e7da      	b.n	8006074 <returnpage+0x24>
			switch (nconv) {
 80060be:	1ec3      	subs	r3, r0, #3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d813      	bhi.n	80060ec <returnpage+0x9c>
				if (p1 == 1) {		// reboot
 80060c4:	9b05      	ldr	r3, [sp, #20]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d033      	beq.n	8006132 <returnpage+0xe2>
				if (p1 == 2) {		// freeze the UDP streaming
 80060ca:	9b05      	ldr	r3, [sp, #20]
 80060cc:	2b02      	cmp	r3, #2
					globalfreeze = 1;
 80060ce:	4b23      	ldr	r3, [pc, #140]	; (800615c <returnpage+0x10c>)
				if (p1 == 2) {		// freeze the UDP streaming
 80060d0:	d029      	beq.n	8006126 <returnpage+0xd6>
					globalfreeze = 0;
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
				if (strlen(udp_target) < 7) {					// bad url or ip address
 80060d6:	4c1d      	ldr	r4, [pc, #116]	; (800614c <returnpage+0xfc>)
 80060d8:	4620      	mov	r0, r4
 80060da:	f7fa f8bb 	bl	8000254 <strlen>
 80060de:	2806      	cmp	r0, #6
 80060e0:	d918      	bls.n	8006114 <returnpage+0xc4>
				printf("Server -> Target UDP host: %s\n", udp_target);
 80060e2:	491a      	ldr	r1, [pc, #104]	; (800614c <returnpage+0xfc>)
 80060e4:	481e      	ldr	r0, [pc, #120]	; (8006160 <returnpage+0x110>)
 80060e6:	f01c f9ed 	bl	80224c4 <iprintf>
 80060ea:	e7d6      	b.n	800609a <returnpage+0x4a>
				printf("Wrong number of params from Server -> %d\n", nconv);
 80060ec:	4601      	mov	r1, r0
 80060ee:	481d      	ldr	r0, [pc, #116]	; (8006164 <returnpage+0x114>)
 80060f0:	f01c f9e8 	bl	80224c4 <iprintf>
				break;
 80060f4:	e7be      	b.n	8006074 <returnpage+0x24>
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 80060f6:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80060fa:	ac0c      	add	r4, sp, #48	; 0x30
 80060fc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8006100:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006104:	4818      	ldr	r0, [pc, #96]	; (8006168 <returnpage+0x118>)
 8006106:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800610a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800610e:	f01c f9d9 	bl	80224c4 <iprintf>
}
 8006112:	e7af      	b.n	8006074 <returnpage+0x24>
					strcpy(udp_target, SERVER_DESTINATION);		// default it
 8006114:	4d15      	ldr	r5, [pc, #84]	; (800616c <returnpage+0x11c>)
 8006116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006118:	6020      	str	r0, [r4, #0]
 800611a:	6828      	ldr	r0, [r5, #0]
 800611c:	6061      	str	r1, [r4, #4]
 800611e:	6120      	str	r0, [r4, #16]
 8006120:	60a2      	str	r2, [r4, #8]
 8006122:	60e3      	str	r3, [r4, #12]
 8006124:	e7dd      	b.n	80060e2 <returnpage+0x92>
					globalfreeze = 1;
 8006126:	2201      	movs	r2, #1
					printf("Server -> commands a streaming freeze\n");
 8006128:	4811      	ldr	r0, [pc, #68]	; (8006170 <returnpage+0x120>)
					globalfreeze = 1;
 800612a:	601a      	str	r2, [r3, #0]
					printf("Server -> commands a streaming freeze\n");
 800612c:	f01c fa66 	bl	80225fc <puts>
 8006130:	e7d1      	b.n	80060d6 <returnpage+0x86>
					printf("Server -> commands a reboot...\n");
 8006132:	4810      	ldr	r0, [pc, #64]	; (8006174 <returnpage+0x124>)
 8006134:	f01c fa62 	bl	80225fc <puts>
					osDelay(2000);
 8006138:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800613c:	f00c fc5c 	bl	80129f8 <osDelay>
					rebootme();
 8006140:	f7fc fc38 	bl	80029b4 <rebootme>
 8006144:	e7c1      	b.n	80060ca <returnpage+0x7a>
 8006146:	bf00      	nop
 8006148:	080267d0 	.word	0x080267d0
 800614c:	2001bb30 	.word	0x2001bb30
 8006150:	08028570 	.word	0x08028570
 8006154:	2001ad7c 	.word	0x2001ad7c
 8006158:	080285f8 	.word	0x080285f8
 800615c:	2001bb28 	.word	0x2001bb28
 8006160:	080285d8 	.word	0x080285d8
 8006164:	08028618 	.word	0x08028618
 8006168:	08028644 	.word	0x08028644
 800616c:	080285c4 	.word	0x080285c4
 8006170:	0802859c 	.word	0x0802859c
 8006174:	0802857c 	.word	0x0802857c

08006178 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	b085      	sub	sp, #20
 800617e:	4615      	mov	r5, r2
 8006180:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8006182:	220a      	movs	r2, #10
 8006184:	a903      	add	r1, sp, #12
 8006186:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8006188:	4699      	mov	r9, r3
 800618a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 800618c:	f01d f9ca 	bl	8023524 <strtol>
 8006190:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8006192:	4621      	mov	r1, r4
 8006194:	462a      	mov	r2, r5
 8006196:	486f      	ldr	r0, [pc, #444]	; (8006354 <httpd_cgi_handler+0x1dc>)
 8006198:	4633      	mov	r3, r6
 800619a:	f01c f993 	bl	80224c4 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800619e:	2d00      	cmp	r5, #0
 80061a0:	dd37      	ble.n	8006212 <httpd_cgi_handler+0x9a>
 80061a2:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80061a4:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8006384 <httpd_cgi_handler+0x20c>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80061a8:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8006388 <httpd_cgi_handler+0x210>
		switch (j) {
 80061ac:	f1a6 030a 	sub.w	r3, r6, #10
 80061b0:	2b0e      	cmp	r3, #14
 80061b2:	f200 80c9 	bhi.w	8006348 <httpd_cgi_handler+0x1d0>
 80061b6:	e8df f003 	tbb	[pc, r3]
 80061ba:	9bb3      	.short	0x9bb3
 80061bc:	08080808 	.word	0x08080808
 80061c0:	08080808 	.word	0x08080808
 80061c4:	834d5f71 	.word	0x834d5f71
 80061c8:	3a          	.byte	0x3a
 80061c9:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 80061ca:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80061cc:	2101      	movs	r1, #1
 80061ce:	f1a6 000c 	sub.w	r0, r6, #12
 80061d2:	4b61      	ldr	r3, [pc, #388]	; (8006358 <httpd_cgi_handler+0x1e0>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 80061d4:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 80061d6:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80061da:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 80061dc:	2a30      	cmp	r2, #48	; 0x30
 80061de:	d01b      	beq.n	8006218 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	4311      	orrs	r1, r2
 80061e4:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80061e6:	f001 0202 	and.w	r2, r1, #2
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80061ea:	4650      	mov	r0, sl
 80061ec:	7019      	strb	r1, [r3, #0]
			j -= 11;	// now offset 0
 80061ee:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80061f0:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80061f4:	f01c f966 	bl	80224c4 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 80061f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061fc:	2301      	movs	r3, #1
 80061fe:	4a56      	ldr	r2, [pc, #344]	; (8006358 <httpd_cgi_handler+0x1e0>)
 8006200:	2188      	movs	r1, #136	; 0x88
 8006202:	9000      	str	r0, [sp, #0]
 8006204:	4855      	ldr	r0, [pc, #340]	; (800635c <httpd_cgi_handler+0x1e4>)
 8006206:	f003 fe61 	bl	8009ecc <HAL_I2C_Master_Transmit>
 800620a:	b960      	cbnz	r0, 8006226 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800620c:	3401      	adds	r4, #1
 800620e:	42a5      	cmp	r5, r4
 8006210:	d1cc      	bne.n	80061ac <httpd_cgi_handler+0x34>
}
 8006212:	b005      	add	sp, #20
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8006218:	2201      	movs	r2, #1
 800621a:	7819      	ldrb	r1, [r3, #0]
 800621c:	fa02 f600 	lsl.w	r6, r2, r0
 8006220:	ea21 0106 	bic.w	r1, r1, r6
 8006224:	e7df      	b.n	80061e6 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8006226:	484e      	ldr	r0, [pc, #312]	; (8006360 <httpd_cgi_handler+0x1e8>)
 8006228:	f01c f94c 	bl	80224c4 <iprintf>
 800622c:	e7ee      	b.n	800620c <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	3c01      	subs	r4, #1
 8006232:	484c      	ldr	r0, [pc, #304]	; (8006364 <httpd_cgi_handler+0x1ec>)
 8006234:	440c      	add	r4, r1
 8006236:	4623      	mov	r3, r4
 8006238:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800623c:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 800623e:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006240:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006244:	bf18      	it	ne
 8006246:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006248:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 800624a:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800624c:	dcf3      	bgt.n	8006236 <httpd_cgi_handler+0xbe>
}
 800624e:	b005      	add	sp, #20
 8006250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006254:	4e44      	ldr	r6, [pc, #272]	; (8006368 <httpd_cgi_handler+0x1f0>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	8830      	ldrh	r0, [r6, #0]
 800625a:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800625c:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 800625e:	2b30      	cmp	r3, #48	; 0x30
 8006260:	bf0c      	ite	eq
 8006262:	f020 0001 	biceq.w	r0, r0, #1
 8006266:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 800626a:	f7fd ff9b 	bl	80041a4 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800626e:	42a5      	cmp	r5, r4
 8006270:	dcf1      	bgt.n	8006256 <httpd_cgi_handler+0xde>
}
 8006272:	b005      	add	sp, #20
 8006274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006278:	4e3b      	ldr	r6, [pc, #236]	; (8006368 <httpd_cgi_handler+0x1f0>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	8830      	ldrh	r0, [r6, #0]
 800627e:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006280:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8006282:	2b30      	cmp	r3, #48	; 0x30
 8006284:	bf0c      	ite	eq
 8006286:	f020 0002 	biceq.w	r0, r0, #2
 800628a:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 800628e:	f7fd ff89 	bl	80041a4 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006292:	42a5      	cmp	r5, r4
 8006294:	dcf1      	bgt.n	800627a <httpd_cgi_handler+0x102>
}
 8006296:	b005      	add	sp, #20
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	4e32      	ldr	r6, [pc, #200]	; (8006368 <httpd_cgi_handler+0x1f0>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	8830      	ldrh	r0, [r6, #0]
 80062a2:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80062a4:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 80062a6:	2b30      	cmp	r3, #48	; 0x30
 80062a8:	bf0c      	ite	eq
 80062aa:	f020 0004 	biceq.w	r0, r0, #4
 80062ae:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 80062b2:	f7fd ff77 	bl	80041a4 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80062b6:	42a5      	cmp	r5, r4
 80062b8:	dcf1      	bgt.n	800629e <httpd_cgi_handler+0x126>
}
 80062ba:	b005      	add	sp, #20
 80062bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c0:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80062c2:	4e2a      	ldr	r6, [pc, #168]	; (800636c <httpd_cgi_handler+0x1f4>)
 80062c4:	e004      	b.n	80062d0 <httpd_cgi_handler+0x158>
 80062c6:	f003 fb2b 	bl	8009920 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80062ca:	42a5      	cmp	r5, r4
 80062cc:	dda1      	ble.n	8006212 <httpd_cgi_handler+0x9a>
 80062ce:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 80062d0:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80062d2:	2201      	movs	r2, #1
 80062d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062d8:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 80062da:	4423      	add	r3, r4
 80062dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80062e0:	2b31      	cmp	r3, #49	; 0x31
 80062e2:	d1f0      	bne.n	80062c6 <httpd_cgi_handler+0x14e>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 80062e4:	2200      	movs	r2, #0
 80062e6:	f003 fb1b 	bl	8009920 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80062ea:	42a5      	cmp	r5, r4
 80062ec:	dcef      	bgt.n	80062ce <httpd_cgi_handler+0x156>
 80062ee:	e790      	b.n	8006212 <httpd_cgi_handler+0x9a>
 80062f0:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 80062f2:	4e1f      	ldr	r6, [pc, #124]	; (8006370 <httpd_cgi_handler+0x1f8>)
 80062f4:	e004      	b.n	8006300 <httpd_cgi_handler+0x188>
 80062f6:	f003 fb13 	bl	8009920 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80062fa:	42ac      	cmp	r4, r5
 80062fc:	da89      	bge.n	8006212 <httpd_cgi_handler+0x9a>
 80062fe:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8006300:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8006302:	2201      	movs	r2, #1
 8006304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006308:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 800630a:	4423      	add	r3, r4
 800630c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006310:	2b30      	cmp	r3, #48	; 0x30
 8006312:	d1f0      	bne.n	80062f6 <httpd_cgi_handler+0x17e>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8006314:	2200      	movs	r2, #0
 8006316:	f003 fb03 	bl	8009920 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800631a:	42a5      	cmp	r5, r4
 800631c:	dcef      	bgt.n	80062fe <httpd_cgi_handler+0x186>
 800631e:	e778      	b.n	8006212 <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8006320:	4814      	ldr	r0, [pc, #80]	; (8006374 <httpd_cgi_handler+0x1fc>)
 8006322:	f01c f96b 	bl	80225fc <puts>
			osDelay(1000);
 8006326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800632a:	f00c fb65 	bl	80129f8 <osDelay>
 800632e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006332:	4911      	ldr	r1, [pc, #68]	; (8006378 <httpd_cgi_handler+0x200>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006334:	4b11      	ldr	r3, [pc, #68]	; (800637c <httpd_cgi_handler+0x204>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006336:	68ca      	ldr	r2, [r1, #12]
 8006338:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800633c:	4313      	orrs	r3, r2
 800633e:	60cb      	str	r3, [r1, #12]
 8006340:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006344:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006346:	e7fd      	b.n	8006344 <httpd_cgi_handler+0x1cc>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8006348:	f8d9 1000 	ldr.w	r1, [r9]
 800634c:	480c      	ldr	r0, [pc, #48]	; (8006380 <httpd_cgi_handler+0x208>)
 800634e:	f01c f8b9 	bl	80224c4 <iprintf>
			break;
 8006352:	e75b      	b.n	800620c <httpd_cgi_handler+0x94>
 8006354:	08028680 	.word	0x08028680
 8006358:	20000268 	.word	0x20000268
 800635c:	2001b144 	.word	0x2001b144
 8006360:	08027fe8 	.word	0x08027fe8
 8006364:	20000010 	.word	0x20000010
 8006368:	2000026a 	.word	0x2000026a
 800636c:	40021000 	.word	0x40021000
 8006370:	40020c00 	.word	0x40020c00
 8006374:	080286ac 	.word	0x080286ac
 8006378:	e000ed00 	.word	0xe000ed00
 800637c:	05fa0004 	.word	0x05fa0004
 8006380:	080286e4 	.word	0x080286e4
 8006384:	20001c80 	.word	0x20001c80
 8006388:	080286c8 	.word	0x080286c8

0800638c <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 800638c:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 800638e:	4802      	ldr	r0, [pc, #8]	; (8006398 <httpd_post_receive_data+0xc>)
 8006390:	f01c f934 	bl	80225fc <puts>
}
 8006394:	2000      	movs	r0, #0
 8006396:	bd08      	pop	{r3, pc}
 8006398:	08028704 	.word	0x08028704

0800639c <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 800639c:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 800639e:	4802      	ldr	r0, [pc, #8]	; (80063a8 <httpd_post_begin+0xc>)
 80063a0:	f01c f92c 	bl	80225fc <puts>
}
 80063a4:	2000      	movs	r0, #0
 80063a6:	bd08      	pop	{r3, pc}
 80063a8:	08028720 	.word	0x08028720

080063ac <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 80063ac:	4801      	ldr	r0, [pc, #4]	; (80063b4 <httpd_post_finished+0x8>)
 80063ae:	f01c b925 	b.w	80225fc <puts>
 80063b2:	bf00      	nop
 80063b4:	08028734 	.word	0x08028734

080063b8 <init_httpd_ssi>:
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80063b8:	4803      	ldr	r0, [pc, #12]	; (80063c8 <init_httpd_ssi+0x10>)
 80063ba:	2215      	movs	r2, #21
 80063bc:	4903      	ldr	r1, [pc, #12]	; (80063cc <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 80063be:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80063c0:	f010 f8dc 	bl	801657c <http_set_ssi_handler>
}
 80063c4:	bd08      	pop	{r3, pc}
 80063c6:	bf00      	nop
 80063c8:	08005eb1 	.word	0x08005eb1
 80063cc:	20000278 	.word	0x20000278

080063d0 <httpclient>:

void httpclient(char Page[64]) {
 80063d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 80063d2:	4910      	ldr	r1, [pc, #64]	; (8006414 <httpclient+0x44>)
void httpclient(char Page[64]) {
 80063d4:	b084      	sub	sp, #16
 80063d6:	4604      	mov	r4, r0
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 80063d8:	480f      	ldr	r0, [pc, #60]	; (8006418 <httpclient+0x48>)
 80063da:	f7ff fbf5 	bl	8005bc8 <dnslookup>
	if (err != ERR_OK)
 80063de:	b9b0      	cbnz	r0, 800640e <httpclient+0x3e>
		rebootme();
	ip = remoteip.addr;
 80063e0:	4d0c      	ldr	r5, [pc, #48]	; (8006414 <httpclient+0x44>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 80063e2:	490d      	ldr	r1, [pc, #52]	; (8006418 <httpclient+0x48>)
	ip = remoteip.addr;
 80063e4:	682a      	ldr	r2, [r5, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 80063e6:	480d      	ldr	r0, [pc, #52]	; (800641c <httpclient+0x4c>)
 80063e8:	0e13      	lsrs	r3, r2, #24
 80063ea:	f3c2 4607 	ubfx	r6, r2, #16, #8
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80063f4:	9600      	str	r6, [sp, #0]
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	f01c f864 	bl	80224c4 <iprintf>
			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);

	result = hc_open(remoteip, Page, Postvars, returnpage);
 80063fc:	4621      	mov	r1, r4
 80063fe:	4b08      	ldr	r3, [pc, #32]	; (8006420 <httpclient+0x50>)
 8006400:	2200      	movs	r2, #0
 8006402:	6828      	ldr	r0, [r5, #0]
 8006404:	f7fa fd5e 	bl	8000ec4 <hc_open>
 8006408:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 800640a:	b004      	add	sp, #16
 800640c:	bd70      	pop	{r4, r5, r6, pc}
		rebootme();
 800640e:	f7fc fad1 	bl	80029b4 <rebootme>
 8006412:	e7e5      	b.n	80063e0 <httpclient+0x10>
 8006414:	20001ca0 	.word	0x20001ca0
 8006418:	080285c4 	.word	0x080285c4
 800641c:	0802874c 	.word	0x0802874c
 8006420:	08006051 	.word	0x08006051

08006424 <apisn>:

void apisn() {
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006424:	4909      	ldr	r1, [pc, #36]	; (800644c <apisn+0x28>)
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <apisn+0x2c>)
 8006428:	6809      	ldr	r1, [r1, #0]
 800642a:	4a0a      	ldr	r2, [pc, #40]	; (8006454 <apisn+0x30>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6812      	ldr	r2, [r2, #0]
void apisn() {
 8006430:	b510      	push	{r4, lr}
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006432:	4c09      	ldr	r4, [pc, #36]	; (8006458 <apisn+0x34>)
void apisn() {
 8006434:	b082      	sub	sp, #8
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006436:	4620      	mov	r0, r4
 8006438:	9100      	str	r1, [sp, #0]
 800643a:	4908      	ldr	r1, [pc, #32]	; (800645c <apisn+0x38>)
 800643c:	f01c f9ba 	bl	80227b4 <siprintf>
	httpclient(stmuid);		// get sn and targ
 8006440:	4620      	mov	r0, r4
}
 8006442:	b002      	add	sp, #8
 8006444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	httpclient(stmuid);		// get sn and targ
 8006448:	f7ff bfc2 	b.w	80063d0 <httpclient>
 800644c:	1ff0f428 	.word	0x1ff0f428
 8006450:	1ff0f424 	.word	0x1ff0f424
 8006454:	1ff0f420 	.word	0x1ff0f420
 8006458:	20001ca4 	.word	0x20001ca4
 800645c:	08028774 	.word	0x08028774

08006460 <initialapisn>:

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8006460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	i = 1;
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006464:	4e17      	ldr	r6, [pc, #92]	; (80064c4 <initialapisn+0x64>)
 8006466:	f242 731e 	movw	r3, #10014	; 0x271e
 800646a:	f8b6 505c 	ldrh.w	r5, [r6, #92]	; 0x5c
 800646e:	b2ad      	uxth	r5, r5
 8006470:	429d      	cmp	r5, r3
 8006472:	d125      	bne.n	80064c0 <initialapisn+0x60>
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006474:	2101      	movs	r1, #1
 8006476:	4814      	ldr	r0, [pc, #80]	; (80064c8 <initialapisn+0x68>)
		apisn();
		osDelay(5000);

		i++;
 8006478:	2402      	movs	r4, #2
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 800647a:	4f13      	ldr	r7, [pc, #76]	; (80064c8 <initialapisn+0x68>)
		if (i > 10) {
			printf("************* ABORTED **************\n");
 800647c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80064cc <initialapisn+0x6c>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006480:	f01c f820 	bl	80224c4 <iprintf>
		apisn();
 8006484:	f7ff ffce 	bl	8006424 <apisn>
		osDelay(5000);
 8006488:	f241 3088 	movw	r0, #5000	; 0x1388
 800648c:	f00c fab4 	bl	80129f8 <osDelay>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006490:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006494:	4621      	mov	r1, r4
 8006496:	4638      	mov	r0, r7
		i++;
 8006498:	3401      	adds	r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 800649a:	b29b      	uxth	r3, r3
 800649c:	42ab      	cmp	r3, r5
 800649e:	d10f      	bne.n	80064c0 <initialapisn+0x60>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80064a0:	f01c f810 	bl	80224c4 <iprintf>
		apisn();
 80064a4:	f7ff ffbe 	bl	8006424 <apisn>
		osDelay(5000);
 80064a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80064ac:	f00c faa4 	bl	80129f8 <osDelay>
		if (i > 10) {
 80064b0:	2c0a      	cmp	r4, #10
 80064b2:	dded      	ble.n	8006490 <initialapisn+0x30>
			printf("************* ABORTED **************\n");
 80064b4:	4640      	mov	r0, r8
 80064b6:	f01c f8a1 	bl	80225fc <puts>
			rebootme();
 80064ba:	f7fc fa7b 	bl	80029b4 <rebootme>
 80064be:	e7e7      	b.n	8006490 <initialapisn+0x30>
		}
	}
}
 80064c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c4:	2001ad7c 	.word	0x2001ad7c
 80064c8:	0802878c 	.word	0x0802878c
 80064cc:	080287bc 	.word	0x080287bc

080064d0 <requestapisn>:

void requestapisn() {
 80064d0:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 80064d2:	4804      	ldr	r0, [pc, #16]	; (80064e4 <requestapisn+0x14>)
 80064d4:	f01c f892 	bl	80225fc <puts>
	httpclient(stmuid);		// get sn and targ
 80064d8:	4803      	ldr	r0, [pc, #12]	; (80064e8 <requestapisn+0x18>)
}
 80064da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 80064de:	f7ff bf77 	b.w	80063d0 <httpclient>
 80064e2:	bf00      	nop
 80064e4:	080287e4 	.word	0x080287e4
 80064e8:	20001ca4 	.word	0x20001ca4

080064ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 80064ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006524 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80064f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80064f2:	e003      	b.n	80064fc <LoopCopyDataInit>

080064f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80064f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80064f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80064fa:	3104      	adds	r1, #4

080064fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80064fc:	480b      	ldr	r0, [pc, #44]	; (800652c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80064fe:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006500:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006502:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006504:	d3f6      	bcc.n	80064f4 <CopyDataInit>
  ldr  r2, =_sbss
 8006506:	4a0b      	ldr	r2, [pc, #44]	; (8006534 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006508:	e002      	b.n	8006510 <LoopFillZerobss>

0800650a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800650a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800650c:	f842 3b04 	str.w	r3, [r2], #4

08006510 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006510:	4b09      	ldr	r3, [pc, #36]	; (8006538 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006512:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006514:	d3f9      	bcc.n	800650a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006516:	f7ff fa4f 	bl	80059b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800651a:	f01a fee3 	bl	80212e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800651e:	f7fc fbb5 	bl	8002c8c <main>
  bx  lr    
 8006522:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8006524:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8006528:	08042570 	.word	0x08042570
  ldr  r0, =_sdata
 800652c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006530:	200006b4 	.word	0x200006b4
  ldr  r2, =_sbss
 8006534:	200006b8 	.word	0x200006b8
  ldr  r3, = _ebss
 8006538:	2002fad0 	.word	0x2002fad0

0800653c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800653c:	e7fe      	b.n	800653c <CAN1_RX0_IRQHandler>
	...

08006540 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006540:	4a07      	ldr	r2, [pc, #28]	; (8006560 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006542:	2003      	movs	r0, #3
{
 8006544:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800654c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800654e:	f000 fc51 	bl	8006df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006552:	2000      	movs	r0, #0
 8006554:	f7ff f90e 	bl	8005774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006558:	f7fe fa26 	bl	80049a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800655c:	2000      	movs	r0, #0
 800655e:	bd08      	pop	{r3, pc}
 8006560:	40023c00 	.word	0x40023c00

08006564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006564:	4a03      	ldr	r2, [pc, #12]	; (8006574 <HAL_IncTick+0x10>)
 8006566:	4b04      	ldr	r3, [pc, #16]	; (8006578 <HAL_IncTick+0x14>)
 8006568:	6811      	ldr	r1, [r2, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	440b      	add	r3, r1
 800656e:	6013      	str	r3, [r2, #0]
}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	2001bb78 	.word	0x2001bb78
 8006578:	200002d0 	.word	0x200002d0

0800657c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800657c:	4b01      	ldr	r3, [pc, #4]	; (8006584 <HAL_GetTick+0x8>)
 800657e:	6818      	ldr	r0, [r3, #0]
}
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	2001bb78 	.word	0x2001bb78

08006588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800658c:	f7ff fff6 	bl	800657c <HAL_GetTick>
 8006590:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006592:	1c63      	adds	r3, r4, #1
 8006594:	d002      	beq.n	800659c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006596:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <HAL_Delay+0x20>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800659c:	f7ff ffee 	bl	800657c <HAL_GetTick>
 80065a0:	1b43      	subs	r3, r0, r5
 80065a2:	42a3      	cmp	r3, r4
 80065a4:	d3fa      	bcc.n	800659c <HAL_Delay+0x14>
  {
  }
}
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	200002d0 	.word	0x200002d0

080065ac <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f000 8146 	beq.w	800683e <HAL_ADC_Init+0x292>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80065b2:	49ae      	ldr	r1, [pc, #696]	; (800686c <HAL_ADC_Init+0x2c0>)
 80065b4:	4aae      	ldr	r2, [pc, #696]	; (8006870 <HAL_ADC_Init+0x2c4>)
{
 80065b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80065b8:	6803      	ldr	r3, [r0, #0]
 80065ba:	4604      	mov	r4, r0
 80065bc:	428b      	cmp	r3, r1
 80065be:	bf18      	it	ne
 80065c0:	4293      	cmpne	r3, r2
 80065c2:	d003      	beq.n	80065cc <HAL_ADC_Init+0x20>
 80065c4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d177      	bne.n	80066bc <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80065cc:	6863      	ldr	r3, [r4, #4]
 80065ce:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80065d2:	d17c      	bne.n	80066ce <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80065d4:	68a3      	ldr	r3, [r4, #8]
 80065d6:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80065da:	f040 8082 	bne.w	80066e2 <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d84e      	bhi.n	8006682 <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80065e4:	69a3      	ldr	r3, [r4, #24]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d845      	bhi.n	8006676 <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80065ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80065ec:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 80065f0:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 80065f4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80065f8:	bf18      	it	ne
 80065fa:	2900      	cmpne	r1, #0
 80065fc:	bf14      	ite	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	2300      	moveq	r3, #0
 8006602:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8006606:	bf0c      	ite	eq
 8006608:	2300      	moveq	r3, #0
 800660a:	f003 0301 	andne.w	r3, r3, #1
 800660e:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 8006612:	bf0c      	ite	eq
 8006614:	2300      	moveq	r3, #0
 8006616:	f003 0301 	andne.w	r3, r3, #1
 800661a:	b123      	cbz	r3, 8006626 <HAL_ADC_Init+0x7a>
 800661c:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8006620:	2a01      	cmp	r2, #1
 8006622:	f200 8113 	bhi.w	800684c <HAL_ADC_Init+0x2a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8006626:	68e3      	ldr	r3, [r4, #12]
 8006628:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800662c:	d165      	bne.n	80066fa <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800662e:	69e3      	ldr	r3, [r4, #28]
 8006630:	3b01      	subs	r3, #1
 8006632:	2b0f      	cmp	r3, #15
 8006634:	d85b      	bhi.n	80066ee <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8006636:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800663a:	2b01      	cmp	r3, #1
 800663c:	d830      	bhi.n	80066a0 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800663e:	6963      	ldr	r3, [r4, #20]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d835      	bhi.n	80066b0 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8006644:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d823      	bhi.n	8006694 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800664c:	4b89      	ldr	r3, [pc, #548]	; (8006874 <HAL_ADC_Init+0x2c8>)
 800664e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006650:	429a      	cmp	r2, r3
 8006652:	d004      	beq.n	800665e <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8006654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006656:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800665a:	f040 80ea 	bne.w	8006832 <HAL_ADC_Init+0x286>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800665e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8006660:	2d00      	cmp	r5, #0
 8006662:	f000 80d6 	beq.w	8006812 <HAL_ADC_Init+0x266>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006668:	06db      	lsls	r3, r3, #27
 800666a:	d54c      	bpl.n	8006706 <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800666c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800666e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8006670:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8006674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8006676:	f240 1151 	movw	r1, #337	; 0x151
 800667a:	487f      	ldr	r0, [pc, #508]	; (8006878 <HAL_ADC_Init+0x2cc>)
 800667c:	f7fd fa64 	bl	8003b48 <assert_failed>
 8006680:	e7b3      	b.n	80065ea <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8006682:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8006686:	487c      	ldr	r0, [pc, #496]	; (8006878 <HAL_ADC_Init+0x2cc>)
 8006688:	f7fd fa5e 	bl	8003b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800668c:	69a3      	ldr	r3, [r4, #24]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d9ab      	bls.n	80065ea <HAL_ADC_Init+0x3e>
 8006692:	e7f0      	b.n	8006676 <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8006694:	f240 1157 	movw	r1, #343	; 0x157
 8006698:	4877      	ldr	r0, [pc, #476]	; (8006878 <HAL_ADC_Init+0x2cc>)
 800669a:	f7fd fa55 	bl	8003b48 <assert_failed>
 800669e:	e7d5      	b.n	800664c <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80066a0:	f240 1155 	movw	r1, #341	; 0x155
 80066a4:	4874      	ldr	r0, [pc, #464]	; (8006878 <HAL_ADC_Init+0x2cc>)
 80066a6:	f7fd fa4f 	bl	8003b48 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80066aa:	6963      	ldr	r3, [r4, #20]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d9c9      	bls.n	8006644 <HAL_ADC_Init+0x98>
 80066b0:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80066b4:	4870      	ldr	r0, [pc, #448]	; (8006878 <HAL_ADC_Init+0x2cc>)
 80066b6:	f7fd fa47 	bl	8003b48 <assert_failed>
 80066ba:	e7c3      	b.n	8006644 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80066bc:	f240 114d 	movw	r1, #333	; 0x14d
 80066c0:	486d      	ldr	r0, [pc, #436]	; (8006878 <HAL_ADC_Init+0x2cc>)
 80066c2:	f7fd fa41 	bl	8003b48 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80066c6:	6863      	ldr	r3, [r4, #4]
 80066c8:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80066cc:	d082      	beq.n	80065d4 <HAL_ADC_Init+0x28>
 80066ce:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80066d2:	4869      	ldr	r0, [pc, #420]	; (8006878 <HAL_ADC_Init+0x2cc>)
 80066d4:	f7fd fa38 	bl	8003b48 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80066de:	f43f af7e 	beq.w	80065de <HAL_ADC_Init+0x32>
 80066e2:	f240 114f 	movw	r1, #335	; 0x14f
 80066e6:	4864      	ldr	r0, [pc, #400]	; (8006878 <HAL_ADC_Init+0x2cc>)
 80066e8:	f7fd fa2e 	bl	8003b48 <assert_failed>
 80066ec:	e777      	b.n	80065de <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80066ee:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80066f2:	4861      	ldr	r0, [pc, #388]	; (8006878 <HAL_ADC_Init+0x2cc>)
 80066f4:	f7fd fa28 	bl	8003b48 <assert_failed>
 80066f8:	e79d      	b.n	8006636 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80066fa:	f240 1153 	movw	r1, #339	; 0x153
 80066fe:	485e      	ldr	r0, [pc, #376]	; (8006878 <HAL_ADC_Init+0x2cc>)
 8006700:	f7fd fa22 	bl	8003b48 <assert_failed>
 8006704:	e793      	b.n	800662e <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 8006706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006708:	4a5c      	ldr	r2, [pc, #368]	; (800687c <HAL_ADC_Init+0x2d0>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800670a:	495d      	ldr	r1, [pc, #372]	; (8006880 <HAL_ADC_Init+0x2d4>)
    ADC_STATE_CLR_SET(hadc->State,
 800670c:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800670e:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006710:	4d58      	ldr	r5, [pc, #352]	; (8006874 <HAL_ADC_Init+0x2c8>)
    ADC_STATE_CLR_SET(hadc->State,
 8006712:	f042 0202 	orr.w	r2, r2, #2
 8006716:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006718:	684a      	ldr	r2, [r1, #4]
 800671a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800671e:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006720:	684a      	ldr	r2, [r1, #4]
 8006722:	6860      	ldr	r0, [r4, #4]
 8006724:	4302      	orrs	r2, r0
 8006726:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006728:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800672a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800672c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006730:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006734:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006736:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006738:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800673a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800673c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006740:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006742:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006744:	6858      	ldr	r0, [r3, #4]
 8006746:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800674a:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800674c:	6859      	ldr	r1, [r3, #4]
 800674e:	ea41 010c 	orr.w	r1, r1, ip
 8006752:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006754:	6899      	ldr	r1, [r3, #8]
 8006756:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800675a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	ea42 0207 	orr.w	r2, r2, r7
 8006762:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006764:	d05c      	beq.n	8006820 <HAL_ADC_Init+0x274>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006766:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006768:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800676a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800676e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	4316      	orrs	r6, r2
 8006774:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006776:	6899      	ldr	r1, [r3, #8]
 8006778:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800677c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	4302      	orrs	r2, r0
 8006782:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006784:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006786:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006788:	f021 0102 	bic.w	r1, r1, #2
 800678c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8006794:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006796:	f894 2020 	ldrb.w	r2, [r4, #32]
 800679a:	2a00      	cmp	r2, #0
 800679c:	d051      	beq.n	8006842 <HAL_ADC_Init+0x296>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800679e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067a0:	3a01      	subs	r2, #1
 80067a2:	2a07      	cmp	r2, #7
 80067a4:	d858      	bhi.n	8006858 <HAL_ADC_Init+0x2ac>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80067a6:	6859      	ldr	r1, [r3, #4]
 80067a8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80067ac:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80067ae:	6859      	ldr	r1, [r3, #4]
 80067b0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80067b4:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80067b6:	6859      	ldr	r1, [r3, #4]
 80067b8:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80067bc:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80067be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80067c0:	2500      	movs	r5, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80067c2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80067c4:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80067c8:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80067ca:	1e4a      	subs	r2, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80067cc:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067ce:	4628      	mov	r0, r5
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80067d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067d2:	ea41 5102 	orr.w	r1, r1, r2, lsl #20
 80067d6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80067d8:	6899      	ldr	r1, [r3, #8]
 80067da:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80067de:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80067e0:	6899      	ldr	r1, [r3, #8]
 80067e2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80067e6:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80067ea:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80067ec:	6899      	ldr	r1, [r3, #8]
 80067ee:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80067f2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80067fa:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80067fc:	6465      	str	r5, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80067fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006800:	f023 0303 	bic.w	r3, r3, #3
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800680a:	2300      	movs	r3, #0
 800680c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8006812:	4620      	mov	r0, r4
 8006814:	f7fe f8f8 	bl	8004a08 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006818:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800681a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 800681e:	e722      	b.n	8006666 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	e7a8      	b.n	8006784 <HAL_ADC_Init+0x1d8>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8006832:	f240 115b 	movw	r1, #347	; 0x15b
 8006836:	4810      	ldr	r0, [pc, #64]	; (8006878 <HAL_ADC_Init+0x2cc>)
 8006838:	f7fd f986 	bl	8003b48 <assert_failed>
 800683c:	e70f      	b.n	800665e <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 800683e:	2001      	movs	r0, #1
}
 8006840:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	e7b8      	b.n	80067be <HAL_ADC_Init+0x212>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800684c:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8006850:	4809      	ldr	r0, [pc, #36]	; (8006878 <HAL_ADC_Init+0x2cc>)
 8006852:	f7fd f979 	bl	8003b48 <assert_failed>
 8006856:	e6e6      	b.n	8006626 <HAL_ADC_Init+0x7a>
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8006858:	f240 71ac 	movw	r1, #1964	; 0x7ac
 800685c:	4806      	ldr	r0, [pc, #24]	; (8006878 <HAL_ADC_Init+0x2cc>)
 800685e:	f7fd f973 	bl	8003b48 <assert_failed>
 8006862:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	3a01      	subs	r2, #1
 8006868:	e79d      	b.n	80067a6 <HAL_ADC_Init+0x1fa>
 800686a:	bf00      	nop
 800686c:	40012000 	.word	0x40012000
 8006870:	40012100 	.word	0x40012100
 8006874:	0f000001 	.word	0x0f000001
 8006878:	0802880c 	.word	0x0802880c
 800687c:	ffffeefd 	.word	0xffffeefd
 8006880:	40012300 	.word	0x40012300

08006884 <HAL_ADC_Start>:
{
 8006884:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 8006886:	2300      	movs	r3, #0
{
 8006888:	b082      	sub	sp, #8
 800688a:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 800688c:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800688e:	6983      	ldr	r3, [r0, #24]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d904      	bls.n	800689e <HAL_ADC_Start+0x1a>
 8006894:	f240 21df 	movw	r1, #735	; 0x2df
 8006898:	4848      	ldr	r0, [pc, #288]	; (80069bc <HAL_ADC_Start+0x138>)
 800689a:	f7fd f955 	bl	8003b48 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800689e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068a0:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80068a4:	d174      	bne.n	8006990 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 80068a6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d079      	beq.n	80069a2 <HAL_ADC_Start+0x11e>
 80068ae:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80068b0:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 80068b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80068b6:	6893      	ldr	r3, [r2, #8]
 80068b8:	07d8      	lsls	r0, r3, #31
 80068ba:	d414      	bmi.n	80068e6 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80068bc:	4b40      	ldr	r3, [pc, #256]	; (80069c0 <HAL_ADC_Start+0x13c>)
 80068be:	4841      	ldr	r0, [pc, #260]	; (80069c4 <HAL_ADC_Start+0x140>)
 80068c0:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80068c2:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80068c4:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80068c8:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80068cc:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80068ce:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80068d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80068d4:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80068d6:	9b01      	ldr	r3, [sp, #4]
 80068d8:	b12b      	cbz	r3, 80068e6 <HAL_ADC_Start+0x62>
      counter--;
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	3b01      	subs	r3, #1
 80068de:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80068e0:	9b01      	ldr	r3, [sp, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f9      	bne.n	80068da <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80068e6:	6890      	ldr	r0, [r2, #8]
 80068e8:	f010 0001 	ands.w	r0, r0, #1
 80068ec:	d02c      	beq.n	8006948 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 80068ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068f0:	4b35      	ldr	r3, [pc, #212]	; (80069c8 <HAL_ADC_Start+0x144>)
 80068f2:	400b      	ands	r3, r1
 80068f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f8:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80068fa:	6853      	ldr	r3, [r2, #4]
 80068fc:	0559      	lsls	r1, r3, #21
 80068fe:	d505      	bpl.n	800690c <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006906:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800690a:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800690c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800690e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8006912:	d02f      	beq.n	8006974 <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006914:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006916:	f023 0306 	bic.w	r3, r3, #6
 800691a:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800691c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8006920:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006922:	4b2a      	ldr	r3, [pc, #168]	; (80069cc <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 8006924:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006928:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800692a:	6858      	ldr	r0, [r3, #4]
 800692c:	f010 001f 	ands.w	r0, r0, #31
 8006930:	d114      	bne.n	800695c <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006932:	6893      	ldr	r3, [r2, #8]
 8006934:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8006938:	d10e      	bne.n	8006958 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800693a:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 800693c:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800693e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006942:	6091      	str	r1, [r2, #8]
}
 8006944:	b002      	add	sp, #8
 8006946:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800694a:	f043 0310 	orr.w	r3, r3, #16
 800694e:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006950:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	6463      	str	r3, [r4, #68]	; 0x44
}
 8006958:	b002      	add	sp, #8
 800695a:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800695c:	481c      	ldr	r0, [pc, #112]	; (80069d0 <HAL_ADC_Start+0x14c>)
 800695e:	4282      	cmp	r2, r0
 8006960:	d00a      	beq.n	8006978 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8006962:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006964:	06db      	lsls	r3, r3, #27
 8006966:	d402      	bmi.n	800696e <HAL_ADC_Start+0xea>
 8006968:	4c1a      	ldr	r4, [pc, #104]	; (80069d4 <HAL_ADC_Start+0x150>)
 800696a:	42a2      	cmp	r2, r4
 800696c:	d01c      	beq.n	80069a8 <HAL_ADC_Start+0x124>
  return HAL_OK;
 800696e:	2000      	movs	r0, #0
}
 8006970:	b002      	add	sp, #8
 8006972:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8006974:	6463      	str	r3, [r4, #68]	; 0x44
 8006976:	e7d1      	b.n	800691c <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006978:	6893      	ldr	r3, [r2, #8]
 800697a:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800697e:	d103      	bne.n	8006988 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006980:	6893      	ldr	r3, [r2, #8]
 8006982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006986:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8006988:	4b10      	ldr	r3, [pc, #64]	; (80069cc <HAL_ADC_Start+0x148>)
  return HAL_OK;
 800698a:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800698c:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800698e:	e7e3      	b.n	8006958 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8006990:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8006994:	4809      	ldr	r0, [pc, #36]	; (80069bc <HAL_ADC_Start+0x138>)
 8006996:	f7fd f8d7 	bl	8003b48 <assert_failed>
  __HAL_LOCK(hadc);
 800699a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d185      	bne.n	80068ae <HAL_ADC_Start+0x2a>
 80069a2:	2002      	movs	r0, #2
}
 80069a4:	b002      	add	sp, #8
 80069a6:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80069a8:	68a0      	ldr	r0, [r4, #8]
 80069aa:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80069ae:	d1de      	bne.n	800696e <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069b0:	68a3      	ldr	r3, [r4, #8]
 80069b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069b6:	60a3      	str	r3, [r4, #8]
 80069b8:	e7ce      	b.n	8006958 <HAL_ADC_Start+0xd4>
 80069ba:	bf00      	nop
 80069bc:	0802880c 	.word	0x0802880c
 80069c0:	20000274 	.word	0x20000274
 80069c4:	431bde83 	.word	0x431bde83
 80069c8:	fffff8fe 	.word	0xfffff8fe
 80069cc:	40012300 	.word	0x40012300
 80069d0:	40012000 	.word	0x40012000
 80069d4:	40012200 	.word	0x40012200

080069d8 <HAL_ADC_ConvCpltCallback>:
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop

080069dc <HAL_ADC_LevelOutOfWindowCallback>:
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop

080069e0 <HAL_ADC_ErrorCallback>:
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop

080069e4 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80069e4:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 80069e6:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80069e8:	2a01      	cmp	r2, #1
{
 80069ea:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80069ec:	681d      	ldr	r5, [r3, #0]
{
 80069ee:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80069f0:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80069f2:	d904      	bls.n	80069fe <HAL_ADC_IRQHandler+0x1a>
 80069f4:	f240 41c1 	movw	r1, #1217	; 0x4c1
 80069f8:	4851      	ldr	r0, [pc, #324]	; (8006b40 <HAL_ADC_IRQHandler+0x15c>)
 80069fa:	f7fd f8a5 	bl	8003b48 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80069fe:	69e3      	ldr	r3, [r4, #28]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	2b0f      	cmp	r3, #15
 8006a04:	f200 8086 	bhi.w	8006b14 <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8006a08:	6963      	ldr	r3, [r4, #20]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d87c      	bhi.n	8006b08 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 8006a0e:	07ab      	lsls	r3, r5, #30
 8006a10:	d52c      	bpl.n	8006a6c <HAL_ADC_IRQHandler+0x88>
 8006a12:	06b0      	lsls	r0, r6, #26
 8006a14:	d52a      	bpl.n	8006a6c <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a18:	06d9      	lsls	r1, r3, #27
 8006a1a:	d403      	bmi.n	8006a24 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a22:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8006a2c:	d117      	bne.n	8006a5e <HAL_ADC_IRQHandler+0x7a>
 8006a2e:	69a2      	ldr	r2, [r4, #24]
 8006a30:	b9aa      	cbnz	r2, 8006a5e <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a34:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8006a38:	d002      	beq.n	8006a40 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006a3a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a3c:	0552      	lsls	r2, r2, #21
 8006a3e:	d40e      	bmi.n	8006a5e <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	f022 0220 	bic.w	r2, r2, #32
 8006a46:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a52:	04d8      	lsls	r0, r3, #19
 8006a54:	d403      	bmi.n	8006a5e <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a58:	f043 0301 	orr.w	r3, r3, #1
 8006a5c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7ff ffba 	bl	80069d8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	f06f 0212 	mvn.w	r2, #18
 8006a6a:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8006a6c:	0769      	lsls	r1, r5, #29
 8006a6e:	d530      	bpl.n	8006ad2 <HAL_ADC_IRQHandler+0xee>
 8006a70:	0632      	lsls	r2, r6, #24
 8006a72:	d52e      	bpl.n	8006ad2 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a76:	06db      	lsls	r3, r3, #27
 8006a78:	d403      	bmi.n	8006a82 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006a7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a80:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8006a8a:	d11b      	bne.n	8006ac4 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8006a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006a8e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8006a92:	d151      	bne.n	8006b38 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006a94:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006a96:	0551      	lsls	r1, r2, #21
 8006a98:	d414      	bmi.n	8006ac4 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8006a9a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006a9c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8006aa0:	d110      	bne.n	8006ac4 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8006aa2:	69a2      	ldr	r2, [r4, #24]
 8006aa4:	b972      	cbnz	r2, 8006ac4 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aac:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ab4:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ab8:	05da      	lsls	r2, r3, #23
 8006aba:	d403      	bmi.n	8006ac4 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 f931 	bl	8006d2c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	f06f 020c 	mvn.w	r2, #12
 8006ad0:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8006ad2:	0673      	lsls	r3, r6, #25
 8006ad4:	d505      	bpl.n	8006ae2 <HAL_ADC_IRQHandler+0xfe>
 8006ad6:	07e8      	lsls	r0, r5, #31
 8006ad8:	d503      	bpl.n	8006ae2 <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	07d9      	lsls	r1, r3, #31
 8006ae0:	d41e      	bmi.n	8006b20 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 8006ae2:	06aa      	lsls	r2, r5, #26
 8006ae4:	d501      	bpl.n	8006aea <HAL_ADC_IRQHandler+0x106>
 8006ae6:	0173      	lsls	r3, r6, #5
 8006ae8:	d400      	bmi.n	8006aec <HAL_ADC_IRQHandler+0x108>
}
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006aec:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006aee:	f06f 0520 	mvn.w	r5, #32
 8006af2:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 8006af4:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006af6:	f043 0302 	orr.w	r3, r3, #2
 8006afa:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006afc:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8006afe:	f7ff ff6f 	bl	80069e0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	601d      	str	r5, [r3, #0]
}
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8006b08:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8006b0c:	480c      	ldr	r0, [pc, #48]	; (8006b40 <HAL_ADC_IRQHandler+0x15c>)
 8006b0e:	f7fd f81b 	bl	8003b48 <assert_failed>
 8006b12:	e77c      	b.n	8006a0e <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8006b14:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8006b18:	4809      	ldr	r0, [pc, #36]	; (8006b40 <HAL_ADC_IRQHandler+0x15c>)
 8006b1a:	f7fd f815 	bl	8003b48 <assert_failed>
 8006b1e:	e773      	b.n	8006a08 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b22:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b28:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b2a:	f7ff ff57 	bl	80069dc <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	f06f 0201 	mvn.w	r2, #1
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e7d4      	b.n	8006ae2 <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006b38:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8006b3a:	0550      	lsls	r0, r2, #21
 8006b3c:	d4c2      	bmi.n	8006ac4 <HAL_ADC_IRQHandler+0xe0>
 8006b3e:	e7a9      	b.n	8006a94 <HAL_ADC_IRQHandler+0xb0>
 8006b40:	0802880c 	.word	0x0802880c

08006b44 <HAL_ADC_ConfigChannel>:
{
 8006b44:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8006b46:	2300      	movs	r3, #0
{
 8006b48:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8006b4a:	4a72      	ldr	r2, [pc, #456]	; (8006d14 <HAL_ADC_ConfigChannel+0x1d0>)
{
 8006b4c:	460e      	mov	r6, r1
  __IO uint32_t counter = 0;
 8006b4e:	9301      	str	r3, [sp, #4]
{
 8006b50:	4604      	mov	r4, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8006b52:	680b      	ldr	r3, [r1, #0]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	bf18      	it	ne
 8006b58:	2b12      	cmpne	r3, #18
 8006b5a:	d902      	bls.n	8006b62 <HAL_ADC_ConfigChannel+0x1e>
 8006b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b60:	d143      	bne.n	8006bea <HAL_ADC_ConfigChannel+0xa6>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8006b62:	6873      	ldr	r3, [r6, #4]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d848      	bhi.n	8006bfc <HAL_ADC_ConfigChannel+0xb8>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8006b6a:	68b3      	ldr	r3, [r6, #8]
 8006b6c:	2b07      	cmp	r3, #7
 8006b6e:	d84d      	bhi.n	8006c0c <HAL_ADC_ConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 8006b70:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d052      	beq.n	8006c1e <HAL_ADC_ConfigChannel+0xda>
 8006b78:	2301      	movs	r3, #1
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b7a:	2107      	movs	r1, #7
 8006b7c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hadc);
 8006b7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006b82:	6835      	ldr	r5, [r6, #0]
 8006b84:	2d09      	cmp	r5, #9
 8006b86:	b2af      	uxth	r7, r5
 8006b88:	d94c      	bls.n	8006c24 <HAL_ADC_ConfigChannel+0xe0>
 8006b8a:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8006b8e:	d049      	beq.n	8006c24 <HAL_ADC_ConfigChannel+0xe0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b90:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8006b94:	68c2      	ldr	r2, [r0, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b96:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8006d14 <HAL_ADC_ConfigChannel+0x1d0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b9a:	3b1e      	subs	r3, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b9c:	4565      	cmp	r5, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b9e:	fa01 f103 	lsl.w	r1, r1, r3
 8006ba2:	ea22 0201 	bic.w	r2, r2, r1
 8006ba6:	60c2      	str	r2, [r0, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ba8:	f000 8086 	beq.w	8006cb8 <HAL_ADC_ConfigChannel+0x174>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006bac:	68b2      	ldr	r2, [r6, #8]
 8006bae:	68c1      	ldr	r1, [r0, #12]
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7)
 8006bb8:	6873      	ldr	r3, [r6, #4]
 8006bba:	2b06      	cmp	r3, #6
 8006bbc:	d843      	bhi.n	8006c46 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006bbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006bc2:	211f      	movs	r1, #31
 8006bc4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006bc6:	3b05      	subs	r3, #5
 8006bc8:	4099      	lsls	r1, r3
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006bca:	fa07 f303 	lsl.w	r3, r7, r3
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006bce:	ea22 0201 	bic.w	r2, r2, r1
 8006bd2:	6342      	str	r2, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006bd4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	6343      	str	r3, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006bda:	4b4f      	ldr	r3, [pc, #316]	; (8006d18 <HAL_ADC_ConfigChannel+0x1d4>)
 8006bdc:	4298      	cmp	r0, r3
 8006bde:	d047      	beq.n	8006c70 <HAL_ADC_ConfigChannel+0x12c>
  __HAL_UNLOCK(hadc);
 8006be0:	2000      	movs	r0, #0
 8006be2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006be6:	b003      	add	sp, #12
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8006bea:	f240 618b 	movw	r1, #1675	; 0x68b
 8006bee:	484b      	ldr	r0, [pc, #300]	; (8006d1c <HAL_ADC_ConfigChannel+0x1d8>)
 8006bf0:	f7fc ffaa 	bl	8003b48 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8006bf4:	6873      	ldr	r3, [r6, #4]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	2b0f      	cmp	r3, #15
 8006bfa:	d9b6      	bls.n	8006b6a <HAL_ADC_ConfigChannel+0x26>
 8006bfc:	f240 618c 	movw	r1, #1676	; 0x68c
 8006c00:	4846      	ldr	r0, [pc, #280]	; (8006d1c <HAL_ADC_ConfigChannel+0x1d8>)
 8006c02:	f7fc ffa1 	bl	8003b48 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8006c06:	68b3      	ldr	r3, [r6, #8]
 8006c08:	2b07      	cmp	r3, #7
 8006c0a:	d9b1      	bls.n	8006b70 <HAL_ADC_ConfigChannel+0x2c>
 8006c0c:	f240 618d 	movw	r1, #1677	; 0x68d
 8006c10:	4842      	ldr	r0, [pc, #264]	; (8006d1c <HAL_ADC_ConfigChannel+0x1d8>)
 8006c12:	f7fc ff99 	bl	8003b48 <assert_failed>
  __HAL_LOCK(hadc);
 8006c16:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d1ac      	bne.n	8006b78 <HAL_ADC_ConfigChannel+0x34>
 8006c1e:	2002      	movs	r0, #2
}
 8006c20:	b003      	add	sp, #12
 8006c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006c24:	eb07 0c47 	add.w	ip, r7, r7, lsl #1
 8006c28:	6902      	ldr	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c2a:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006c2c:	fa01 f10c 	lsl.w	r1, r1, ip
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c30:	fa03 f30c 	lsl.w	r3, r3, ip
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006c34:	ea22 0201 	bic.w	r2, r2, r1
 8006c38:	6102      	str	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c3a:	6902      	ldr	r2, [r0, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	6103      	str	r3, [r0, #16]
  if (sConfig->Rank < 7)
 8006c40:	6873      	ldr	r3, [r6, #4]
 8006c42:	2b06      	cmp	r3, #6
 8006c44:	d9bb      	bls.n	8006bbe <HAL_ADC_ConfigChannel+0x7a>
  else if (sConfig->Rank < 13)
 8006c46:	2b0c      	cmp	r3, #12
 8006c48:	d821      	bhi.n	8006c8e <HAL_ADC_ConfigChannel+0x14a>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c4e:	261f      	movs	r6, #31
 8006c50:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006c52:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8006c56:	fa06 f301 	lsl.w	r3, r6, r1
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c5a:	fa07 f101 	lsl.w	r1, r7, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c5e:	ea22 0303 	bic.w	r3, r2, r3
 8006c62:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c64:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006c66:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006c68:	4b2b      	ldr	r3, [pc, #172]	; (8006d18 <HAL_ADC_ConfigChannel+0x1d4>)
 8006c6a:	4298      	cmp	r0, r3
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c6c:	6301      	str	r1, [r0, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006c6e:	d1b7      	bne.n	8006be0 <HAL_ADC_ConfigChannel+0x9c>
 8006c70:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8006c74:	d01a      	beq.n	8006cac <HAL_ADC_ConfigChannel+0x168>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c76:	2d12      	cmp	r5, #18
 8006c78:	d125      	bne.n	8006cc6 <HAL_ADC_ConfigChannel+0x182>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006c7a:	4b29      	ldr	r3, [pc, #164]	; (8006d20 <HAL_ADC_ConfigChannel+0x1dc>)
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006c82:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006c8a:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c8c:	e7a8      	b.n	8006be0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c8e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006c92:	261f      	movs	r6, #31
 8006c94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006c96:	3a41      	subs	r2, #65	; 0x41
 8006c98:	4096      	lsls	r6, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c9a:	fa07 f102 	lsl.w	r1, r7, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c9e:	ea23 0306 	bic.w	r3, r3, r6
 8006ca2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006ca4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006ca6:	4311      	orrs	r1, r2
 8006ca8:	62c1      	str	r1, [r0, #44]	; 0x2c
 8006caa:	e796      	b.n	8006bda <HAL_ADC_ConfigChannel+0x96>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006cac:	4a1c      	ldr	r2, [pc, #112]	; (8006d20 <HAL_ADC_ConfigChannel+0x1dc>)
 8006cae:	6853      	ldr	r3, [r2, #4]
 8006cb0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006cb4:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006cb6:	e793      	b.n	8006be0 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006cb8:	68c3      	ldr	r3, [r0, #12]
 8006cba:	2712      	movs	r7, #18
 8006cbc:	68b2      	ldr	r2, [r6, #8]
 8006cbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006cc2:	60c3      	str	r3, [r0, #12]
 8006cc4:	e778      	b.n	8006bb8 <HAL_ADC_ConfigChannel+0x74>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006cc6:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <HAL_ADC_ConfigChannel+0x1d0>)
 8006cc8:	429d      	cmp	r5, r3
 8006cca:	d001      	beq.n	8006cd0 <HAL_ADC_ConfigChannel+0x18c>
 8006ccc:	2d11      	cmp	r5, #17
 8006cce:	d187      	bne.n	8006be0 <HAL_ADC_ConfigChannel+0x9c>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006cd0:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <HAL_ADC_ConfigChannel+0x1dc>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006cd2:	4910      	ldr	r1, [pc, #64]	; (8006d14 <HAL_ADC_ConfigChannel+0x1d0>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006cd4:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006cd6:	428d      	cmp	r5, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006cd8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8006cdc:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006ce4:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ce6:	f47f af7b 	bne.w	8006be0 <HAL_ADC_ConfigChannel+0x9c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <HAL_ADC_ConfigChannel+0x1e0>)
 8006cec:	4a0e      	ldr	r2, [pc, #56]	; (8006d28 <HAL_ADC_ConfigChannel+0x1e4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf4:	0c9b      	lsrs	r3, r3, #18
 8006cf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8006cfe:	9b01      	ldr	r3, [sp, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f43f af6d 	beq.w	8006be0 <HAL_ADC_ConfigChannel+0x9c>
        counter--;
 8006d06:	9b01      	ldr	r3, [sp, #4]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8006d0c:	9b01      	ldr	r3, [sp, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f9      	bne.n	8006d06 <HAL_ADC_ConfigChannel+0x1c2>
 8006d12:	e765      	b.n	8006be0 <HAL_ADC_ConfigChannel+0x9c>
 8006d14:	10000012 	.word	0x10000012
 8006d18:	40012000 	.word	0x40012000
 8006d1c:	0802880c 	.word	0x0802880c
 8006d20:	40012300 	.word	0x40012300
 8006d24:	20000274 	.word	0x20000274
 8006d28:	431bde83 	.word	0x431bde83

08006d2c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop

08006d30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8006d30:	680b      	ldr	r3, [r1, #0]
 8006d32:	2b19      	cmp	r3, #25
{
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	460c      	mov	r4, r1
 8006d38:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8006d3a:	d93e      	bls.n	8006dba <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8006d3c:	f240 31af 	movw	r1, #943	; 0x3af
 8006d40:	4829      	ldr	r0, [pc, #164]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8006d42:	f7fc ff01 	bl	8003b48 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8006d46:	6863      	ldr	r3, [r4, #4]
 8006d48:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8006d4c:	d13e      	bne.n	8006dcc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d58:	bf18      	it	ne
 8006d5a:	2b00      	cmpne	r3, #0
 8006d5c:	bf14      	ite	ne
 8006d5e:	2201      	movne	r2, #1
 8006d60:	2200      	moveq	r2, #0
 8006d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d66:	bf0c      	ite	eq
 8006d68:	2200      	moveq	r2, #0
 8006d6a:	f002 0201 	andne.w	r2, r2, #1
 8006d6e:	b112      	cbz	r2, 8006d76 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8006d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d74:	d132      	bne.n	8006ddc <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d76:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d02c      	beq.n	8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d80:	2100      	movs	r1, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8006d82:	685a      	ldr	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8006d84:	4608      	mov	r0, r1
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8006d86:	f022 021f 	bic.w	r2, r2, #31
 8006d8a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	6826      	ldr	r6, [r4, #0]
 8006d90:	4332      	orrs	r2, r6
 8006d92:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006d9a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	6866      	ldr	r6, [r4, #4]
 8006da0:	4332      	orrs	r2, r6
 8006da2:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8006daa:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8006dac:	68a4      	ldr	r4, [r4, #8]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	4322      	orrs	r2, r4
 8006db2:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8006db4:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8006db8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8006dba:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8006dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc0:	07db      	lsls	r3, r3, #31
 8006dc2:	d5bb      	bpl.n	8006d3c <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8006dc4:	6863      	ldr	r3, [r4, #4]
 8006dc6:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8006dca:	d0c0      	beq.n	8006d4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006dcc:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8006dd0:	4805      	ldr	r0, [pc, #20]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8006dd2:	f7fc feb9 	bl	8003b48 <assert_failed>
 8006dd6:	e7ba      	b.n	8006d4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8006dd8:	2002      	movs	r0, #2
}
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8006ddc:	f240 31b1 	movw	r1, #945	; 0x3b1
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8006de2:	f7fc feb1 	bl	8003b48 <assert_failed>
 8006de6:	e7c6      	b.n	8006d76 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8006de8:	08028844 	.word	0x08028844
 8006dec:	40012300 	.word	0x40012300
 8006df0:	02e602e7 	.word	0x02e602e7

08006df4 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006df4:	1ec3      	subs	r3, r0, #3
 8006df6:	2b04      	cmp	r3, #4
{
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006dfc:	d80c      	bhi.n	8006e18 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dfe:	4909      	ldr	r1, [pc, #36]	; (8006e24 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e00:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e02:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8006e06:	4b08      	ldr	r3, [pc, #32]	; (8006e28 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e08:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e0a:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e0e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e10:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 8006e12:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8006e14:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006e16:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006e18:	2191      	movs	r1, #145	; 0x91
 8006e1a:	4804      	ldr	r0, [pc, #16]	; (8006e2c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8006e1c:	f7fc fe94 	bl	8003b48 <assert_failed>
 8006e20:	e7ed      	b.n	8006dfe <HAL_NVIC_SetPriorityGrouping+0xa>
 8006e22:	bf00      	nop
 8006e24:	e000ed00 	.word	0xe000ed00
 8006e28:	05fa0000 	.word	0x05fa0000
 8006e2c:	08028880 	.word	0x08028880

08006e30 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006e30:	2a0f      	cmp	r2, #15
{ 
 8006e32:	b570      	push	{r4, r5, r6, lr}
 8006e34:	4616      	mov	r6, r2
 8006e36:	4605      	mov	r5, r0
 8006e38:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006e3a:	d836      	bhi.n	8006eaa <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006e3c:	2c0f      	cmp	r4, #15
 8006e3e:	d82f      	bhi.n	8006ea0 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e40:	4b1c      	ldr	r3, [pc, #112]	; (8006eb4 <HAL_NVIC_SetPriority+0x84>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e48:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e4c:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e4e:	2804      	cmp	r0, #4
 8006e50:	bf28      	it	cs
 8006e52:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e54:	2a06      	cmp	r2, #6
 8006e56:	d918      	bls.n	8006e8a <HAL_NVIC_SetPriority+0x5a>
 8006e58:	3b03      	subs	r3, #3
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5e:	409a      	lsls	r2, r3
 8006e60:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e64:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006e68:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e6a:	fa01 f100 	lsl.w	r1, r1, r0
 8006e6e:	ea24 0401 	bic.w	r4, r4, r1
 8006e72:	fa04 f403 	lsl.w	r4, r4, r3
 8006e76:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8006e7a:	db09      	blt.n	8006e90 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e7c:	0124      	lsls	r4, r4, #4
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <HAL_NVIC_SetPriority+0x88>)
 8006e80:	b2e4      	uxtb	r4, r4
 8006e82:	442b      	add	r3, r5
 8006e84:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006e88:	bd70      	pop	{r4, r5, r6, pc}
 8006e8a:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e8c:	4633      	mov	r3, r6
 8006e8e:	e7e9      	b.n	8006e64 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e90:	f005 050f 	and.w	r5, r5, #15
 8006e94:	0124      	lsls	r4, r4, #4
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <HAL_NVIC_SetPriority+0x8c>)
 8006e98:	b2e4      	uxtb	r4, r4
 8006e9a:	442b      	add	r3, r5
 8006e9c:	761c      	strb	r4, [r3, #24]
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006ea0:	21aa      	movs	r1, #170	; 0xaa
 8006ea2:	4807      	ldr	r0, [pc, #28]	; (8006ec0 <HAL_NVIC_SetPriority+0x90>)
 8006ea4:	f7fc fe50 	bl	8003b48 <assert_failed>
 8006ea8:	e7ca      	b.n	8006e40 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006eaa:	21a9      	movs	r1, #169	; 0xa9
 8006eac:	4804      	ldr	r0, [pc, #16]	; (8006ec0 <HAL_NVIC_SetPriority+0x90>)
 8006eae:	f7fc fe4b 	bl	8003b48 <assert_failed>
 8006eb2:	e7c3      	b.n	8006e3c <HAL_NVIC_SetPriority+0xc>
 8006eb4:	e000ed00 	.word	0xe000ed00
 8006eb8:	e000e100 	.word	0xe000e100
 8006ebc:	e000ecfc 	.word	0xe000ecfc
 8006ec0:	08028880 	.word	0x08028880

08006ec4 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	db08      	blt.n	8006eda <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ec8:	f000 011f 	and.w	r1, r0, #31
 8006ecc:	2301      	movs	r3, #1
 8006ece:	0940      	lsrs	r0, r0, #5
 8006ed0:	4a04      	ldr	r2, [pc, #16]	; (8006ee4 <HAL_NVIC_EnableIRQ+0x20>)
 8006ed2:	408b      	lsls	r3, r1
 8006ed4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006ed8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006eda:	21bd      	movs	r1, #189	; 0xbd
 8006edc:	4802      	ldr	r0, [pc, #8]	; (8006ee8 <HAL_NVIC_EnableIRQ+0x24>)
 8006ede:	f7fc be33 	b.w	8003b48 <assert_failed>
 8006ee2:	bf00      	nop
 8006ee4:	e000e100 	.word	0xe000e100
 8006ee8:	08028880 	.word	0x08028880

08006eec <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006eec:	2800      	cmp	r0, #0
 8006eee:	db0e      	blt.n	8006f0e <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ef0:	0943      	lsrs	r3, r0, #5
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f000 001f 	and.w	r0, r0, #31
 8006ef8:	4907      	ldr	r1, [pc, #28]	; (8006f18 <HAL_NVIC_DisableIRQ+0x2c>)
 8006efa:	3320      	adds	r3, #32
 8006efc:	fa02 f000 	lsl.w	r0, r2, r0
 8006f00:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8006f04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f08:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006f0c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006f0e:	21cd      	movs	r1, #205	; 0xcd
 8006f10:	4802      	ldr	r0, [pc, #8]	; (8006f1c <HAL_NVIC_DisableIRQ+0x30>)
 8006f12:	f7fc be19 	b.w	8003b48 <assert_failed>
 8006f16:	bf00      	nop
 8006f18:	e000e100 	.word	0xe000e100
 8006f1c:	08028880 	.word	0x08028880

08006f20 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d075      	beq.n	8007010 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8006f24:	4b3b      	ldr	r3, [pc, #236]	; (8007014 <HAL_CRC_Init+0xf4>)
 8006f26:	6802      	ldr	r2, [r0, #0]
 8006f28:	429a      	cmp	r2, r3
{
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8006f2e:	d003      	beq.n	8006f38 <HAL_CRC_Init+0x18>
 8006f30:	2170      	movs	r1, #112	; 0x70
 8006f32:	4839      	ldr	r0, [pc, #228]	; (8007018 <HAL_CRC_Init+0xf8>)
 8006f34:	f7fc fe08 	bl	8003b48 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006f38:	7f63      	ldrb	r3, [r4, #29]
 8006f3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d055      	beq.n	8006fee <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006f42:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006f44:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006f46:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006f48:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006f4a:	d838      	bhi.n	8006fbe <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d13d      	bne.n	8006fcc <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	4a32      	ldr	r2, [pc, #200]	; (800701c <HAL_CRC_Init+0xfc>)
 8006f54:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	f022 0218 	bic.w	r2, r2, #24
 8006f5c:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8006f5e:	7963      	ldrb	r3, [r4, #5]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d83c      	bhi.n	8006fde <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006f64:	b1e3      	cbz	r3, 8006fa0 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006f66:	6922      	ldr	r2, [r4, #16]
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8006f6c:	6962      	ldr	r2, [r4, #20]
 8006f6e:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8006f72:	d11d      	bne.n	8006fb0 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006f74:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006f76:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006f78:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8006f7c:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006f7e:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006f82:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006f84:	d13d      	bne.n	8007002 <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006f86:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006f88:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006f8e:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006f90:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006f92:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006f94:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006f96:	d82f      	bhi.n	8006ff8 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006f98:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8006f9a:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8006f9c:	7763      	strb	r3, [r4, #29]
}
 8006f9e:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8006fa8:	6962      	ldr	r2, [r4, #20]
 8006faa:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8006fae:	d0e1      	beq.n	8006f74 <HAL_CRC_Init+0x54>
 8006fb0:	219c      	movs	r1, #156	; 0x9c
 8006fb2:	4819      	ldr	r0, [pc, #100]	; (8007018 <HAL_CRC_Init+0xf8>)
 8006fb4:	f7fc fdc8 	bl	8003b48 <assert_failed>
 8006fb8:	6962      	ldr	r2, [r4, #20]
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	e7da      	b.n	8006f74 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006fbe:	217e      	movs	r1, #126	; 0x7e
 8006fc0:	4815      	ldr	r0, [pc, #84]	; (8007018 <HAL_CRC_Init+0xf8>)
 8006fc2:	f7fc fdc1 	bl	8003b48 <assert_failed>
 8006fc6:	7923      	ldrb	r3, [r4, #4]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0c1      	beq.n	8006f50 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006fcc:	68e2      	ldr	r2, [r4, #12]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	68a1      	ldr	r1, [r4, #8]
 8006fd2:	f000 f825 	bl	8007020 <HAL_CRCEx_Polynomial_Set>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d0c1      	beq.n	8006f5e <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8006fda:	2001      	movs	r0, #1
}
 8006fdc:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8006fde:	2190      	movs	r1, #144	; 0x90
 8006fe0:	480d      	ldr	r0, [pc, #52]	; (8007018 <HAL_CRC_Init+0xf8>)
 8006fe2:	f7fc fdb1 	bl	8003b48 <assert_failed>
 8006fe6:	7963      	ldrb	r3, [r4, #5]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1bc      	bne.n	8006f66 <HAL_CRC_Init+0x46>
 8006fec:	e7d8      	b.n	8006fa0 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8006fee:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8006ff0:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8006ff2:	f7fd fdad 	bl	8004b50 <HAL_CRC_MspInit>
 8006ff6:	e7a4      	b.n	8006f42 <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006ff8:	21a5      	movs	r1, #165	; 0xa5
 8006ffa:	4807      	ldr	r0, [pc, #28]	; (8007018 <HAL_CRC_Init+0xf8>)
 8006ffc:	f7fc fda4 	bl	8003b48 <assert_failed>
 8007000:	e7ca      	b.n	8006f98 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8007002:	4805      	ldr	r0, [pc, #20]	; (8007018 <HAL_CRC_Init+0xf8>)
 8007004:	21a0      	movs	r1, #160	; 0xa0
 8007006:	f7fc fd9f 	bl	8003b48 <assert_failed>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	69a0      	ldr	r0, [r4, #24]
 800700e:	e7ba      	b.n	8006f86 <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8007010:	2001      	movs	r0, #1
}
 8007012:	4770      	bx	lr
 8007014:	40023000 	.word	0x40023000
 8007018:	080288bc 	.word	0x080288bc
 800701c:	04c11db7 	.word	0x04c11db7

08007020 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8007022:	f032 0318 	bics.w	r3, r2, #24
{
 8007026:	4617      	mov	r7, r2
 8007028:	4606      	mov	r6, r0
 800702a:	460d      	mov	r5, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 800702c:	d003      	beq.n	8007036 <HAL_CRCEx_Polynomial_Set+0x16>
 800702e:	215f      	movs	r1, #95	; 0x5f
 8007030:	4817      	ldr	r0, [pc, #92]	; (8007090 <HAL_CRCEx_Polynomial_Set+0x70>)
 8007032:	f7fc fd89 	bl	8003b48 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007036:	231e      	movs	r3, #30
 8007038:	e001      	b.n	800703e <HAL_CRCEx_Polynomial_Set+0x1e>
 800703a:	3b01      	subs	r3, #1
 800703c:	d314      	bcc.n	8007068 <HAL_CRCEx_Polynomial_Set+0x48>
 800703e:	fa25 f403 	lsr.w	r4, r5, r3
 8007042:	07e2      	lsls	r2, r4, #31
 8007044:	d5f9      	bpl.n	800703a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8007046:	2f18      	cmp	r7, #24
 8007048:	d80f      	bhi.n	800706a <HAL_CRCEx_Polynomial_Set+0x4a>
 800704a:	e8df f007 	tbb	[pc, r7]
 800704e:	0e12      	.short	0x0e12
 8007050:	0e0e0e0e 	.word	0x0e0e0e0e
 8007054:	0e1b0e0e 	.word	0x0e1b0e0e
 8007058:	0e0e0e0e 	.word	0x0e0e0e0e
 800705c:	0e1e0e0e 	.word	0x0e1e0e0e
 8007060:	0e0e0e0e 	.word	0x0e0e0e0e
 8007064:	0e0e      	.short	0x0e0e
 8007066:	10          	.byte	0x10
 8007067:	00          	.byte	0x00
 8007068:	b11f      	cbz	r7, 8007072 <HAL_CRCEx_Polynomial_Set+0x52>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 800706a:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800706c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800706e:	2b06      	cmp	r3, #6
 8007070:	d8fb      	bhi.n	800706a <HAL_CRCEx_Polynomial_Set+0x4a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007072:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007074:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007076:	614d      	str	r5, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007078:	688b      	ldr	r3, [r1, #8]
 800707a:	f023 0318 	bic.w	r3, r3, #24
 800707e:	433b      	orrs	r3, r7
 8007080:	608b      	str	r3, [r1, #8]
}
 8007082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8007084:	2b0f      	cmp	r3, #15
 8007086:	d9f4      	bls.n	8007072 <HAL_CRCEx_Polynomial_Set+0x52>
 8007088:	e7ef      	b.n	800706a <HAL_CRCEx_Polynomial_Set+0x4a>
      if (msb >= HAL_CRC_LENGTH_8B)
 800708a:	2b07      	cmp	r3, #7
 800708c:	d9f1      	bls.n	8007072 <HAL_CRCEx_Polynomial_Set+0x52>
 800708e:	e7ec      	b.n	800706a <HAL_CRCEx_Polynomial_Set+0x4a>
 8007090:	080288f4 	.word	0x080288f4

08007094 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8007094:	b1d8      	cbz	r0, 80070ce <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8007096:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <HAL_DAC_Init+0x40>)
 8007098:	6802      	ldr	r2, [r0, #0]
 800709a:	429a      	cmp	r2, r3
{
 800709c:	b510      	push	{r4, lr}
 800709e:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80070a0:	d004      	beq.n	80070ac <HAL_DAC_Init+0x18>
 80070a2:	f240 1115 	movw	r1, #277	; 0x115
 80070a6:	480c      	ldr	r0, [pc, #48]	; (80070d8 <HAL_DAC_Init+0x44>)
 80070a8:	f7fc fd4e 	bl	8003b48 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 80070ac:	7923      	ldrb	r3, [r4, #4]
 80070ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80070b2:	b13b      	cbz	r3, 80070c4 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80070b4:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80070b6:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80070b8:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80070ba:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80070bc:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80070be:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80070c0:	7122      	strb	r2, [r4, #4]
}
 80070c2:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 80070c4:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 80070c6:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 80070c8:	f7fd fd58 	bl	8004b7c <HAL_DAC_MspInit>
 80070cc:	e7f2      	b.n	80070b4 <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 80070ce:	2001      	movs	r0, #1
}
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40007400 	.word	0x40007400
 80070d8:	08028930 	.word	0x08028930

080070dc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80070dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e0:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80070e2:	f031 0310 	bics.w	r3, r1, #16
{
 80070e6:	460d      	mov	r5, r1
 80070e8:	4604      	mov	r4, r0
 80070ea:	4617      	mov	r7, r2
 80070ec:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 80070ee:	d16b      	bne.n	80071c8 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 80070f0:	f036 0304 	bics.w	r3, r6, #4
 80070f4:	d001      	beq.n	80070fa <HAL_DAC_Start_DMA+0x1e>
 80070f6:	2e08      	cmp	r6, #8
 80070f8:	d15b      	bne.n	80071b2 <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 80070fa:	7962      	ldrb	r2, [r4, #5]
 80070fc:	2a01      	cmp	r2, #1
 80070fe:	d060      	beq.n	80071c2 <HAL_DAC_Start_DMA+0xe6>
 8007100:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007102:	2302      	movs	r3, #2

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007104:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 8007108:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800710a:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 800710c:	bb35      	cbnz	r5, 800715c <HAL_DAC_Start_DMA+0x80>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800710e:	f8dc 3000 	ldr.w	r3, [ip]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007112:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007114:	68a0      	ldr	r0, [r4, #8]
 8007116:	4a38      	ldr	r2, [pc, #224]	; (80071f8 <HAL_DAC_Start_DMA+0x11c>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800711c:	4937      	ldr	r1, [pc, #220]	; (80071fc <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800711e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007120:	4a37      	ldr	r2, [pc, #220]	; (8007200 <HAL_DAC_Start_DMA+0x124>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007122:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007124:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007126:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 800712a:	d059      	beq.n	80071e0 <HAL_DAC_Start_DMA+0x104>
 800712c:	2e08      	cmp	r6, #8
 800712e:	d054      	beq.n	80071da <HAL_DAC_Start_DMA+0xfe>
 8007130:	2e00      	cmp	r6, #0
 8007132:	d04f      	beq.n	80071d4 <HAL_DAC_Start_DMA+0xf8>
 8007134:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007136:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800713a:	4643      	mov	r3, r8
 800713c:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800713e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8007142:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007146:	f000 fbef 	bl	8007928 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800714a:	2300      	movs	r3, #0
 800714c:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800714e:	b330      	cbz	r0, 800719e <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	f043 0304 	orr.w	r3, r3, #4
 8007156:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8007158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800715c:	f8dc 3000 	ldr.w	r3, [ip]
    switch (Alignment)
 8007160:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007162:	68e0      	ldr	r0, [r4, #12]
 8007164:	4a27      	ldr	r2, [pc, #156]	; (8007204 <HAL_DAC_Start_DMA+0x128>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800716a:	4927      	ldr	r1, [pc, #156]	; (8007208 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800716c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800716e:	4a27      	ldr	r2, [pc, #156]	; (800720c <HAL_DAC_Start_DMA+0x130>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007170:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007172:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007174:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8007178:	d03b      	beq.n	80071f2 <HAL_DAC_Start_DMA+0x116>
 800717a:	2e08      	cmp	r6, #8
 800717c:	d036      	beq.n	80071ec <HAL_DAC_Start_DMA+0x110>
 800717e:	b396      	cbz	r6, 80071e6 <HAL_DAC_Start_DMA+0x10a>
 8007180:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007182:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007186:	4643      	mov	r3, r8
 8007188:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800718a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800718e:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007192:	f000 fbc9 	bl	8007928 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8007196:	2300      	movs	r3, #0
 8007198:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 800719a:	2800      	cmp	r0, #0
 800719c:	d1d8      	bne.n	8007150 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	f005 0110 	and.w	r1, r5, #16
 80071a4:	2501      	movs	r5, #1
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	408d      	lsls	r5, r1
 80071aa:	4315      	orrs	r5, r2
 80071ac:	601d      	str	r5, [r3, #0]
}
 80071ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 80071b2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80071b6:	4816      	ldr	r0, [pc, #88]	; (8007210 <HAL_DAC_Start_DMA+0x134>)
 80071b8:	f7fc fcc6 	bl	8003b48 <assert_failed>
  __HAL_LOCK(hdac);
 80071bc:	7962      	ldrb	r2, [r4, #5]
 80071be:	2a01      	cmp	r2, #1
 80071c0:	d19e      	bne.n	8007100 <HAL_DAC_Start_DMA+0x24>
 80071c2:	2002      	movs	r0, #2
}
 80071c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80071c8:	f240 210f 	movw	r1, #527	; 0x20f
 80071cc:	4810      	ldr	r0, [pc, #64]	; (8007210 <HAL_DAC_Start_DMA+0x134>)
 80071ce:	f7fc fcbb 	bl	8003b48 <assert_failed>
 80071d2:	e78d      	b.n	80070f0 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80071d4:	f10c 0208 	add.w	r2, ip, #8
        break;
 80071d8:	e7ad      	b.n	8007136 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80071da:	f10c 0210 	add.w	r2, ip, #16
        break;
 80071de:	e7aa      	b.n	8007136 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80071e0:	f10c 020c 	add.w	r2, ip, #12
        break;
 80071e4:	e7a7      	b.n	8007136 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80071e6:	f10c 0214 	add.w	r2, ip, #20
        break;
 80071ea:	e7ca      	b.n	8007182 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80071ec:	f10c 021c 	add.w	r2, ip, #28
        break;
 80071f0:	e7c7      	b.n	8007182 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80071f2:	f10c 0218 	add.w	r2, ip, #24
        break;
 80071f6:	e7c4      	b.n	8007182 <HAL_DAC_Start_DMA+0xa6>
 80071f8:	080072a5 	.word	0x080072a5
 80071fc:	080072b9 	.word	0x080072b9
 8007200:	080072c9 	.word	0x080072c9
 8007204:	0800741d 	.word	0x0800741d
 8007208:	0800742d 	.word	0x0800742d
 800720c:	08007439 	.word	0x08007439
 8007210:	08028930 	.word	0x08028930

08007214 <HAL_DAC_Stop_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8007214:	f031 0310 	bics.w	r3, r1, #16
{
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	460d      	mov	r5, r1
 800721c:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 800721e:	d11d      	bne.n	800725c <HAL_DAC_Stop_DMA+0x48>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007220:	6803      	ldr	r3, [r0, #0]
 8007222:	f001 0110 	and.w	r1, r1, #16
 8007226:	f44f 5680 	mov.w	r6, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800722a:	2201      	movs	r2, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800722c:	6818      	ldr	r0, [r3, #0]
 800722e:	408e      	lsls	r6, r1
  __HAL_DAC_DISABLE(hdac, Channel);
 8007230:	fa02 f101 	lsl.w	r1, r2, r1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007234:	ea20 0006 	bic.w	r0, r0, r6
 8007238:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	ea22 0201 	bic.w	r2, r2, r1
 8007240:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007242:	bb0d      	cbnz	r5, 8007288 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007244:	68a0      	ldr	r0, [r4, #8]
 8007246:	f000 fbcb 	bl	80079e0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800724a:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800724c:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800724e:	6813      	ldr	r3, [r2, #0]
 8007250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007254:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8007256:	2301      	movs	r3, #1
 8007258:	7123      	strb	r3, [r4, #4]
}
 800725a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800725c:	f240 218f 	movw	r1, #655	; 0x28f
 8007260:	480f      	ldr	r0, [pc, #60]	; (80072a0 <HAL_DAC_Stop_DMA+0x8c>)
 8007262:	f7fc fc71 	bl	8003b48 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007266:	f005 0510 	and.w	r5, r5, #16
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 8007270:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007272:	fa02 f005 	lsl.w	r0, r2, r5
 8007276:	681a      	ldr	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8007278:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800727a:	ea22 0200 	bic.w	r2, r2, r0
 800727e:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8007280:	681d      	ldr	r5, [r3, #0]
 8007282:	ea25 0501 	bic.w	r5, r5, r1
 8007286:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007288:	68e0      	ldr	r0, [r4, #12]
 800728a:	f000 fba9 	bl	80079e0 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800728e:	6822      	ldr	r2, [r4, #0]
}
 8007290:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007292:	6813      	ldr	r3, [r2, #0]
 8007294:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007298:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800729a:	2301      	movs	r3, #1
 800729c:	7123      	strb	r3, [r4, #4]
}
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	08028930 	.word	0x08028930

080072a4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80072a4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072a6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7fb fbb5 	bl	8002a18 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80072ae:	2301      	movs	r3, #1
 80072b0:	7123      	strb	r3, [r4, #4]
}
 80072b2:	bd10      	pop	{r4, pc}

080072b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop

080072b8 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80072b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80072ba:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80072bc:	f7ff fffa 	bl	80072b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80072c0:	bd08      	pop	{r3, pc}
 80072c2:	bf00      	nop

080072c4 <HAL_DAC_ErrorCallbackCh1>:
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop

080072c8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80072c8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ca:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80072cc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80072ce:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80072d0:	f043 0304 	orr.w	r3, r3, #4
 80072d4:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80072d6:	f7ff fff5 	bl	80072c4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80072da:	2301      	movs	r3, #1
 80072dc:	7123      	strb	r3, [r4, #4]
}
 80072de:	bd10      	pop	{r4, pc}

080072e0 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop

080072e4 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80072e4:	6803      	ldr	r3, [r0, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	0491      	lsls	r1, r2, #18
{
 80072ea:	b510      	push	{r4, lr}
 80072ec:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80072ee:	d502      	bpl.n	80072f6 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80072f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f2:	0492      	lsls	r2, r2, #18
 80072f4:	d418      	bmi.n	8007328 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	0091      	lsls	r1, r2, #2
 80072fa:	d502      	bpl.n	8007302 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80072fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072fe:	0092      	lsls	r2, r2, #2
 8007300:	d400      	bmi.n	8007304 <HAL_DAC_IRQHandler+0x20>
}
 8007302:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8007304:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007306:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800730a:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800730c:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800730e:	6922      	ldr	r2, [r4, #16]
 8007310:	f042 0202 	orr.w	r2, r2, #2
 8007314:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007316:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800731e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007322:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007324:	f000 b878 	b.w	8007418 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8007328:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800732a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800732e:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007330:	6902      	ldr	r2, [r0, #16]
 8007332:	f042 0201 	orr.w	r2, r2, #1
 8007336:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007338:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007340:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007342:	f7ff ffcd 	bl	80072e0 <HAL_DAC_DMAUnderrunCallbackCh1>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	e7d5      	b.n	80072f6 <HAL_DAC_IRQHandler+0x12>
 800734a:	bf00      	nop

0800734c <HAL_DAC_ConfigChannel>:
{
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8007350:	6808      	ldr	r0, [r1, #0]
{
 8007352:	460d      	mov	r5, r1
 8007354:	4616      	mov	r6, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8007356:	f020 0308 	bic.w	r3, r0, #8
 800735a:	f020 0104 	bic.w	r1, r0, #4
 800735e:	f020 0210 	bic.w	r2, r0, #16
 8007362:	2b24      	cmp	r3, #36	; 0x24
 8007364:	bf18      	it	ne
 8007366:	2900      	cmpne	r1, #0
 8007368:	bf14      	ite	ne
 800736a:	2301      	movne	r3, #1
 800736c:	2300      	moveq	r3, #0
 800736e:	283c      	cmp	r0, #60	; 0x3c
 8007370:	bf0c      	ite	eq
 8007372:	2300      	moveq	r3, #0
 8007374:	f003 0301 	andne.w	r3, r3, #1
 8007378:	2a0c      	cmp	r2, #12
 800737a:	bf0c      	ite	eq
 800737c:	2300      	moveq	r3, #0
 800737e:	f003 0301 	andne.w	r3, r3, #1
 8007382:	b11b      	cbz	r3, 800738c <HAL_DAC_ConfigChannel+0x40>
 8007384:	f020 0020 	bic.w	r0, r0, #32
 8007388:	2814      	cmp	r0, #20
 800738a:	d137      	bne.n	80073fc <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800738c:	686b      	ldr	r3, [r5, #4]
 800738e:	f033 0302 	bics.w	r3, r3, #2
 8007392:	d12d      	bne.n	80073f0 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8007394:	f036 0310 	bics.w	r3, r6, #16
 8007398:	d120      	bne.n	80073dc <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 800739a:	7963      	ldrb	r3, [r4, #5]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d025      	beq.n	80073ec <HAL_DAC_ConfigChannel+0xa0>
  hdac->State = HAL_DAC_STATE_BUSY;
 80073a0:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80073a2:	f006 0210 	and.w	r2, r6, #16
  tmpreg1 = hdac->Instance->CR;
 80073a6:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80073a8:	f640 76fe 	movw	r6, #4094	; 0xffe
  hdac->State = HAL_DAC_STATE_BUSY;
 80073ac:	7123      	strb	r3, [r4, #4]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80073ae:	27c0      	movs	r7, #192	; 0xc0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80073b0:	6868      	ldr	r0, [r5, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80073b2:	4096      	lsls	r6, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80073b4:	682b      	ldr	r3, [r5, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80073b6:	fa07 f502 	lsl.w	r5, r7, r2
  hdac->State = HAL_DAC_STATE_READY;
 80073ba:	2701      	movs	r7, #1
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80073bc:	4303      	orrs	r3, r0
  tmpreg1 = hdac->Instance->CR;
 80073be:	6808      	ldr	r0, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80073c0:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80073c2:	ea20 0206 	bic.w	r2, r0, r6
  __HAL_UNLOCK(hdac);
 80073c6:	2600      	movs	r6, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80073c8:	4313      	orrs	r3, r2
  return HAL_OK;
 80073ca:	4630      	mov	r0, r6
  hdac->Instance->CR = tmpreg1;
 80073cc:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80073ce:	680b      	ldr	r3, [r1, #0]
 80073d0:	ea23 0305 	bic.w	r3, r3, r5
 80073d4:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80073d6:	7127      	strb	r7, [r4, #4]
  __HAL_UNLOCK(hdac);
 80073d8:	7166      	strb	r6, [r4, #5]
}
 80073da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80073dc:	f240 31a6 	movw	r1, #934	; 0x3a6
 80073e0:	4809      	ldr	r0, [pc, #36]	; (8007408 <HAL_DAC_ConfigChannel+0xbc>)
 80073e2:	f7fc fbb1 	bl	8003b48 <assert_failed>
  __HAL_LOCK(hdac);
 80073e6:	7963      	ldrb	r3, [r4, #5]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d1d9      	bne.n	80073a0 <HAL_DAC_ConfigChannel+0x54>
 80073ec:	2002      	movs	r0, #2
}
 80073ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80073f0:	f240 31a5 	movw	r1, #933	; 0x3a5
 80073f4:	4804      	ldr	r0, [pc, #16]	; (8007408 <HAL_DAC_ConfigChannel+0xbc>)
 80073f6:	f7fc fba7 	bl	8003b48 <assert_failed>
 80073fa:	e7cb      	b.n	8007394 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80073fc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8007400:	4801      	ldr	r0, [pc, #4]	; (8007408 <HAL_DAC_ConfigChannel+0xbc>)
 8007402:	f7fc fba1 	bl	8003b48 <assert_failed>
 8007406:	e7c1      	b.n	800738c <HAL_DAC_ConfigChannel+0x40>
 8007408:	08028930 	.word	0x08028930

0800740c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop

08007410 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop

08007414 <HAL_DACEx_ErrorCallbackCh2>:
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop

08007418 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop

0800741c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800741c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800741e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007420:	4620      	mov	r0, r4
 8007422:	f7ff fff3 	bl	800740c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007426:	2301      	movs	r3, #1
 8007428:	7123      	strb	r3, [r4, #4]
}
 800742a:	bd10      	pop	{r4, pc}

0800742c <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800742c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800742e:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007430:	f7ff ffee 	bl	8007410 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007434:	bd08      	pop	{r3, pc}
 8007436:	bf00      	nop

08007438 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007438:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800743a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800743c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800743e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007440:	f043 0304 	orr.w	r3, r3, #4
 8007444:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007446:	f7ff ffe5 	bl	8007414 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800744a:	2301      	movs	r3, #1
 800744c:	7123      	strb	r3, [r4, #4]
}
 800744e:	bd10      	pop	{r4, pc}

08007450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8007454:	f7ff f892 	bl	800657c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007458:	2c00      	cmp	r4, #0
 800745a:	f000 8145 	beq.w	80076e8 <HAL_DMA_Init+0x298>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	4605      	mov	r5, r0
 8007462:	4bb8      	ldr	r3, [pc, #736]	; (8007744 <HAL_DMA_Init+0x2f4>)
 8007464:	48b8      	ldr	r0, [pc, #736]	; (8007748 <HAL_DMA_Init+0x2f8>)
 8007466:	49b9      	ldr	r1, [pc, #740]	; (800774c <HAL_DMA_Init+0x2fc>)
 8007468:	429a      	cmp	r2, r3
 800746a:	bf18      	it	ne
 800746c:	4282      	cmpne	r2, r0
 800746e:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8007472:	bf14      	ite	ne
 8007474:	2301      	movne	r3, #1
 8007476:	2300      	moveq	r3, #0
 8007478:	428a      	cmp	r2, r1
 800747a:	bf0c      	ite	eq
 800747c:	2300      	moveq	r3, #0
 800747e:	f003 0301 	andne.w	r3, r3, #1
 8007482:	3130      	adds	r1, #48	; 0x30
 8007484:	4282      	cmp	r2, r0
 8007486:	bf0c      	ite	eq
 8007488:	2300      	moveq	r3, #0
 800748a:	f003 0301 	andne.w	r3, r3, #1
 800748e:	3030      	adds	r0, #48	; 0x30
 8007490:	428a      	cmp	r2, r1
 8007492:	bf0c      	ite	eq
 8007494:	2300      	moveq	r3, #0
 8007496:	f003 0301 	andne.w	r3, r3, #1
 800749a:	3130      	adds	r1, #48	; 0x30
 800749c:	4282      	cmp	r2, r0
 800749e:	bf0c      	ite	eq
 80074a0:	2300      	moveq	r3, #0
 80074a2:	f003 0301 	andne.w	r3, r3, #1
 80074a6:	3030      	adds	r0, #48	; 0x30
 80074a8:	428a      	cmp	r2, r1
 80074aa:	bf0c      	ite	eq
 80074ac:	2300      	moveq	r3, #0
 80074ae:	f003 0301 	andne.w	r3, r3, #1
 80074b2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80074b6:	4282      	cmp	r2, r0
 80074b8:	bf0c      	ite	eq
 80074ba:	2300      	moveq	r3, #0
 80074bc:	f003 0301 	andne.w	r3, r3, #1
 80074c0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80074c4:	428a      	cmp	r2, r1
 80074c6:	bf0c      	ite	eq
 80074c8:	2300      	moveq	r3, #0
 80074ca:	f003 0301 	andne.w	r3, r3, #1
 80074ce:	3130      	adds	r1, #48	; 0x30
 80074d0:	4282      	cmp	r2, r0
 80074d2:	bf0c      	ite	eq
 80074d4:	2300      	moveq	r3, #0
 80074d6:	f003 0301 	andne.w	r3, r3, #1
 80074da:	3030      	adds	r0, #48	; 0x30
 80074dc:	428a      	cmp	r2, r1
 80074de:	bf0c      	ite	eq
 80074e0:	2300      	moveq	r3, #0
 80074e2:	f003 0301 	andne.w	r3, r3, #1
 80074e6:	3130      	adds	r1, #48	; 0x30
 80074e8:	4282      	cmp	r2, r0
 80074ea:	bf0c      	ite	eq
 80074ec:	2300      	moveq	r3, #0
 80074ee:	f003 0301 	andne.w	r3, r3, #1
 80074f2:	3030      	adds	r0, #48	; 0x30
 80074f4:	428a      	cmp	r2, r1
 80074f6:	bf0c      	ite	eq
 80074f8:	2300      	moveq	r3, #0
 80074fa:	f003 0301 	andne.w	r3, r3, #1
 80074fe:	3130      	adds	r1, #48	; 0x30
 8007500:	4282      	cmp	r2, r0
 8007502:	bf0c      	ite	eq
 8007504:	2300      	moveq	r3, #0
 8007506:	f003 0301 	andne.w	r3, r3, #1
 800750a:	428a      	cmp	r2, r1
 800750c:	bf0c      	ite	eq
 800750e:	2300      	moveq	r3, #0
 8007510:	f003 0301 	andne.w	r3, r3, #1
 8007514:	b11b      	cbz	r3, 800751e <HAL_DMA_Init+0xce>
 8007516:	4b8e      	ldr	r3, [pc, #568]	; (8007750 <HAL_DMA_Init+0x300>)
 8007518:	429a      	cmp	r2, r3
 800751a:	f040 812c 	bne.w	8007776 <HAL_DMA_Init+0x326>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800751e:	6863      	ldr	r3, [r4, #4]
 8007520:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007528:	bf18      	it	ne
 800752a:	2b00      	cmpne	r3, #0
 800752c:	bf14      	ite	ne
 800752e:	2201      	movne	r2, #1
 8007530:	2200      	moveq	r2, #0
 8007532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007536:	bf0c      	ite	eq
 8007538:	2200      	moveq	r2, #0
 800753a:	f002 0201 	andne.w	r2, r2, #1
 800753e:	b11a      	cbz	r2, 8007548 <HAL_DMA_Init+0xf8>
 8007540:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007544:	f040 811c 	bne.w	8007780 <HAL_DMA_Init+0x330>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8007548:	68a3      	ldr	r3, [r4, #8]
 800754a:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800754e:	d002      	beq.n	8007556 <HAL_DMA_Init+0x106>
 8007550:	2b80      	cmp	r3, #128	; 0x80
 8007552:	f040 80ab 	bne.w	80076ac <HAL_DMA_Init+0x25c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8007556:	68e3      	ldr	r3, [r4, #12]
 8007558:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800755c:	f040 80af 	bne.w	80076be <HAL_DMA_Init+0x26e>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007566:	f040 80b3 	bne.w	80076d0 <HAL_DMA_Init+0x280>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800756a:	6963      	ldr	r3, [r4, #20]
 800756c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8007570:	d003      	beq.n	800757a <HAL_DMA_Init+0x12a>
 8007572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007576:	f040 8094 	bne.w	80076a2 <HAL_DMA_Init+0x252>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800757a:	69a3      	ldr	r3, [r4, #24]
 800757c:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8007580:	d003      	beq.n	800758a <HAL_DMA_Init+0x13a>
 8007582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007586:	f040 8087 	bne.w	8007698 <HAL_DMA_Init+0x248>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800758a:	69e3      	ldr	r3, [r4, #28]
 800758c:	f033 0220 	bics.w	r2, r3, #32
 8007590:	d002      	beq.n	8007598 <HAL_DMA_Init+0x148>
 8007592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007596:	d172      	bne.n	800767e <HAL_DMA_Init+0x22e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8007598:	6a23      	ldr	r3, [r4, #32]
 800759a:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800759e:	d176      	bne.n	800768e <HAL_DMA_Init+0x23e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80075a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075a2:	f033 0204 	bics.w	r2, r3, #4
 80075a6:	d162      	bne.n	800766e <HAL_DMA_Init+0x21e>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d150      	bne.n	800764e <HAL_DMA_Init+0x1fe>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80075ac:	2200      	movs	r2, #0

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80075ae:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80075b0:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 80075b2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80075b6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	f022 0201 	bic.w	r2, r2, #1
 80075c0:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075c2:	e006      	b.n	80075d2 <HAL_DMA_Init+0x182>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075c4:	f7fe ffda 	bl	800657c <HAL_GetTick>
 80075c8:	1b40      	subs	r0, r0, r5
 80075ca:	2805      	cmp	r0, #5
 80075cc:	f200 8085 	bhi.w	80076da <HAL_DMA_Init+0x28a>
 80075d0:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	07d1      	lsls	r1, r2, #31
 80075d6:	d4f5      	bmi.n	80075c4 <HAL_DMA_Init+0x174>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075d8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80075dc:	68e5      	ldr	r5, [r4, #12]
 80075de:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CR;
 80075e0:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075e2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075e6:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075e8:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 80075ea:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075ec:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075f0:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80075f2:	4958      	ldr	r1, [pc, #352]	; (8007754 <HAL_DMA_Init+0x304>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075f4:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80075f6:	4039      	ands	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075f8:	432a      	orrs	r2, r5

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80075fc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075fe:	2d04      	cmp	r5, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007600:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007604:	d072      	beq.n	80076ec <HAL_DMA_Init+0x29c>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007606:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007608:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800760a:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800760e:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007610:	b2da      	uxtb	r2, r3
 8007612:	4951      	ldr	r1, [pc, #324]	; (8007758 <HAL_DMA_Init+0x308>)
  hdma->Instance->FCR = tmp;
 8007614:	615d      	str	r5, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007616:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007618:	4850      	ldr	r0, [pc, #320]	; (800775c <HAL_DMA_Init+0x30c>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800761a:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 800761e:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007620:	4a4f      	ldr	r2, [pc, #316]	; (8007760 <HAL_DMA_Init+0x310>)
  hdma->State = HAL_DMA_STATE_READY;
 8007622:	f04f 0501 	mov.w	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007626:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800762a:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800762e:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007632:	5c40      	ldrb	r0, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007634:	f04f 0100 	mov.w	r1, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007638:	bf88      	it	hi
 800763a:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800763c:	4083      	lsls	r3, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800763e:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007640:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 8007642:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007644:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007646:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007648:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800764c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800764e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007650:	2b03      	cmp	r3, #3
 8007652:	d86c      	bhi.n	800772e <HAL_DMA_Init+0x2de>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8007654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007656:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800765a:	d16d      	bne.n	8007738 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800765c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800765e:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8007662:	d0a3      	beq.n	80075ac <HAL_DMA_Init+0x15c>
 8007664:	21c8      	movs	r1, #200	; 0xc8
 8007666:	483f      	ldr	r0, [pc, #252]	; (8007764 <HAL_DMA_Init+0x314>)
 8007668:	f7fc fa6e 	bl	8003b48 <assert_failed>
 800766c:	e79e      	b.n	80075ac <HAL_DMA_Init+0x15c>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800766e:	21c1      	movs	r1, #193	; 0xc1
 8007670:	483c      	ldr	r0, [pc, #240]	; (8007764 <HAL_DMA_Init+0x314>)
 8007672:	f7fc fa69 	bl	8003b48 <assert_failed>
 8007676:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8007678:	2b00      	cmp	r3, #0
 800767a:	d097      	beq.n	80075ac <HAL_DMA_Init+0x15c>
 800767c:	e7e7      	b.n	800764e <HAL_DMA_Init+0x1fe>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800767e:	21bf      	movs	r1, #191	; 0xbf
 8007680:	4838      	ldr	r0, [pc, #224]	; (8007764 <HAL_DMA_Init+0x314>)
 8007682:	f7fc fa61 	bl	8003b48 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8007686:	6a23      	ldr	r3, [r4, #32]
 8007688:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800768c:	d088      	beq.n	80075a0 <HAL_DMA_Init+0x150>
 800768e:	21c0      	movs	r1, #192	; 0xc0
 8007690:	4834      	ldr	r0, [pc, #208]	; (8007764 <HAL_DMA_Init+0x314>)
 8007692:	f7fc fa59 	bl	8003b48 <assert_failed>
 8007696:	e783      	b.n	80075a0 <HAL_DMA_Init+0x150>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8007698:	21be      	movs	r1, #190	; 0xbe
 800769a:	4832      	ldr	r0, [pc, #200]	; (8007764 <HAL_DMA_Init+0x314>)
 800769c:	f7fc fa54 	bl	8003b48 <assert_failed>
 80076a0:	e773      	b.n	800758a <HAL_DMA_Init+0x13a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80076a2:	21bd      	movs	r1, #189	; 0xbd
 80076a4:	482f      	ldr	r0, [pc, #188]	; (8007764 <HAL_DMA_Init+0x314>)
 80076a6:	f7fc fa4f 	bl	8003b48 <assert_failed>
 80076aa:	e766      	b.n	800757a <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80076ac:	21ba      	movs	r1, #186	; 0xba
 80076ae:	482d      	ldr	r0, [pc, #180]	; (8007764 <HAL_DMA_Init+0x314>)
 80076b0:	f7fc fa4a 	bl	8003b48 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80076b4:	68e3      	ldr	r3, [r4, #12]
 80076b6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80076ba:	f43f af51 	beq.w	8007560 <HAL_DMA_Init+0x110>
 80076be:	21bb      	movs	r1, #187	; 0xbb
 80076c0:	4828      	ldr	r0, [pc, #160]	; (8007764 <HAL_DMA_Init+0x314>)
 80076c2:	f7fc fa41 	bl	8003b48 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80076cc:	f43f af4d 	beq.w	800756a <HAL_DMA_Init+0x11a>
 80076d0:	21bc      	movs	r1, #188	; 0xbc
 80076d2:	4824      	ldr	r0, [pc, #144]	; (8007764 <HAL_DMA_Init+0x314>)
 80076d4:	f7fc fa38 	bl	8003b48 <assert_failed>
 80076d8:	e747      	b.n	800756a <HAL_DMA_Init+0x11a>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076da:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076dc:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80076de:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076e0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80076e8:	2001      	movs	r0, #1
}
 80076ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076ec:	e9d4 700b 	ldrd	r7, r0, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80076f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076f2:	4338      	orrs	r0, r7
 80076f4:	4301      	orrs	r1, r0
  hdma->Instance->CR = tmp;  
 80076f6:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80076f8:	695d      	ldr	r5, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076fa:	f025 0507 	bic.w	r5, r5, #7
 80076fe:	4315      	orrs	r5, r2
    tmp |= hdma->Init.FIFOThreshold;
 8007700:	f045 0504 	orr.w	r5, r5, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007704:	2f00      	cmp	r7, #0
 8007706:	d083      	beq.n	8007610 <HAL_DMA_Init+0x1c0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007708:	b376      	cbz	r6, 8007768 <HAL_DMA_Init+0x318>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800770a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800770e:	d03c      	beq.n	800778a <HAL_DMA_Init+0x33a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007710:	2a02      	cmp	r2, #2
 8007712:	d905      	bls.n	8007720 <HAL_DMA_Init+0x2d0>
 8007714:	2a03      	cmp	r2, #3
 8007716:	f47f af7b 	bne.w	8007610 <HAL_DMA_Init+0x1c0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800771a:	01fa      	lsls	r2, r7, #7
 800771c:	f57f af78 	bpl.w	8007610 <HAL_DMA_Init+0x1c0>
        hdma->State = HAL_DMA_STATE_READY;
 8007720:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007722:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8007724:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007726:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8007728:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800772c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800772e:	21c6      	movs	r1, #198	; 0xc6
 8007730:	480c      	ldr	r0, [pc, #48]	; (8007764 <HAL_DMA_Init+0x314>)
 8007732:	f7fc fa09 	bl	8003b48 <assert_failed>
 8007736:	e78d      	b.n	8007654 <HAL_DMA_Init+0x204>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8007738:	21c7      	movs	r1, #199	; 0xc7
 800773a:	480a      	ldr	r0, [pc, #40]	; (8007764 <HAL_DMA_Init+0x314>)
 800773c:	f7fc fa04 	bl	8003b48 <assert_failed>
 8007740:	e78c      	b.n	800765c <HAL_DMA_Init+0x20c>
 8007742:	bf00      	nop
 8007744:	40026010 	.word	0x40026010
 8007748:	40026028 	.word	0x40026028
 800774c:	40026040 	.word	0x40026040
 8007750:	400264b8 	.word	0x400264b8
 8007754:	e010803f 	.word	0xe010803f
 8007758:	aaaaaaab 	.word	0xaaaaaaab
 800775c:	080289a0 	.word	0x080289a0
 8007760:	fffffc00 	.word	0xfffffc00
 8007764:	08028968 	.word	0x08028968
    switch (tmp)
 8007768:	2a01      	cmp	r2, #1
 800776a:	d01d      	beq.n	80077a8 <HAL_DMA_Init+0x358>
 800776c:	f032 0202 	bics.w	r2, r2, #2
 8007770:	f47f af4e 	bne.w	8007610 <HAL_DMA_Init+0x1c0>
 8007774:	e7d1      	b.n	800771a <HAL_DMA_Init+0x2ca>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8007776:	21b8      	movs	r1, #184	; 0xb8
 8007778:	480e      	ldr	r0, [pc, #56]	; (80077b4 <HAL_DMA_Init+0x364>)
 800777a:	f7fc f9e5 	bl	8003b48 <assert_failed>
 800777e:	e6ce      	b.n	800751e <HAL_DMA_Init+0xce>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8007780:	21b9      	movs	r1, #185	; 0xb9
 8007782:	480c      	ldr	r0, [pc, #48]	; (80077b4 <HAL_DMA_Init+0x364>)
 8007784:	f7fc f9e0 	bl	8003b48 <assert_failed>
 8007788:	e6de      	b.n	8007548 <HAL_DMA_Init+0xf8>
    switch (tmp)
 800778a:	2a03      	cmp	r2, #3
 800778c:	f63f af40 	bhi.w	8007610 <HAL_DMA_Init+0x1c0>
 8007790:	a101      	add	r1, pc, #4	; (adr r1, 8007798 <HAL_DMA_Init+0x348>)
 8007792:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007796:	bf00      	nop
 8007798:	08007721 	.word	0x08007721
 800779c:	0800771b 	.word	0x0800771b
 80077a0:	08007721 	.word	0x08007721
 80077a4:	080077a9 	.word	0x080077a9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077a8:	f1b7 7fc0 	cmp.w	r7, #25165824	; 0x1800000
 80077ac:	f47f af30 	bne.w	8007610 <HAL_DMA_Init+0x1c0>
 80077b0:	e7b6      	b.n	8007720 <HAL_DMA_Init+0x2d0>
 80077b2:	bf00      	nop
 80077b4:	08028968 	.word	0x08028968

080077b8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f000 8099 	beq.w	80078f0 <HAL_DMA_DeInit+0x138>
{
 80077be:	b570      	push	{r4, r5, r6, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80077c0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80077c4:	4604      	mov	r4, r0
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	b2d8      	uxtb	r0, r3
 80077ca:	f000 808b 	beq.w	80078e4 <HAL_DMA_DeInit+0x12c>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	4b4c      	ldr	r3, [pc, #304]	; (8007904 <HAL_DMA_DeInit+0x14c>)
 80077d2:	484d      	ldr	r0, [pc, #308]	; (8007908 <HAL_DMA_DeInit+0x150>)
 80077d4:	494d      	ldr	r1, [pc, #308]	; (800790c <HAL_DMA_DeInit+0x154>)
 80077d6:	429a      	cmp	r2, r3
 80077d8:	bf18      	it	ne
 80077da:	4282      	cmpne	r2, r0
 80077dc:	4d4c      	ldr	r5, [pc, #304]	; (8007910 <HAL_DMA_DeInit+0x158>)
 80077de:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80077e2:	bf14      	ite	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2300      	moveq	r3, #0
 80077e8:	428a      	cmp	r2, r1
 80077ea:	bf0c      	ite	eq
 80077ec:	2300      	moveq	r3, #0
 80077ee:	f003 0301 	andne.w	r3, r3, #1
 80077f2:	3148      	adds	r1, #72	; 0x48
 80077f4:	42aa      	cmp	r2, r5
 80077f6:	bf0c      	ite	eq
 80077f8:	2300      	moveq	r3, #0
 80077fa:	f003 0301 	andne.w	r3, r3, #1
 80077fe:	3548      	adds	r5, #72	; 0x48
 8007800:	4282      	cmp	r2, r0
 8007802:	bf0c      	ite	eq
 8007804:	2300      	moveq	r3, #0
 8007806:	f003 0301 	andne.w	r3, r3, #1
 800780a:	3048      	adds	r0, #72	; 0x48
 800780c:	428a      	cmp	r2, r1
 800780e:	bf0c      	ite	eq
 8007810:	2300      	moveq	r3, #0
 8007812:	f003 0301 	andne.w	r3, r3, #1
 8007816:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800781a:	42aa      	cmp	r2, r5
 800781c:	bf0c      	ite	eq
 800781e:	2300      	moveq	r3, #0
 8007820:	f003 0301 	andne.w	r3, r3, #1
 8007824:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8007828:	4282      	cmp	r2, r0
 800782a:	bf0c      	ite	eq
 800782c:	2300      	moveq	r3, #0
 800782e:	f003 0301 	andne.w	r3, r3, #1
 8007832:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8007836:	428a      	cmp	r2, r1
 8007838:	bf0c      	ite	eq
 800783a:	2300      	moveq	r3, #0
 800783c:	f003 0301 	andne.w	r3, r3, #1
 8007840:	3148      	adds	r1, #72	; 0x48
 8007842:	42aa      	cmp	r2, r5
 8007844:	bf0c      	ite	eq
 8007846:	2300      	moveq	r3, #0
 8007848:	f003 0301 	andne.w	r3, r3, #1
 800784c:	3548      	adds	r5, #72	; 0x48
 800784e:	4282      	cmp	r2, r0
 8007850:	bf0c      	ite	eq
 8007852:	2300      	moveq	r3, #0
 8007854:	f003 0301 	andne.w	r3, r3, #1
 8007858:	3048      	adds	r0, #72	; 0x48
 800785a:	428a      	cmp	r2, r1
 800785c:	bf0c      	ite	eq
 800785e:	2300      	moveq	r3, #0
 8007860:	f003 0301 	andne.w	r3, r3, #1
 8007864:	3148      	adds	r1, #72	; 0x48
 8007866:	42aa      	cmp	r2, r5
 8007868:	bf0c      	ite	eq
 800786a:	2300      	moveq	r3, #0
 800786c:	f003 0301 	andne.w	r3, r3, #1
 8007870:	4282      	cmp	r2, r0
 8007872:	bf0c      	ite	eq
 8007874:	2300      	moveq	r3, #0
 8007876:	f003 0301 	andne.w	r3, r3, #1
 800787a:	428a      	cmp	r2, r1
 800787c:	bf0c      	ite	eq
 800787e:	2300      	moveq	r3, #0
 8007880:	f003 0301 	andne.w	r3, r3, #1
 8007884:	b113      	cbz	r3, 800788c <HAL_DMA_DeInit+0xd4>
 8007886:	4b23      	ldr	r3, [pc, #140]	; (8007914 <HAL_DMA_DeInit+0x15c>)
 8007888:	429a      	cmp	r2, r3
 800788a:	d133      	bne.n	80078f4 <HAL_DMA_DeInit+0x13c>
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800788c:	b2d3      	uxtb	r3, r2
 800788e:	4822      	ldr	r0, [pc, #136]	; (8007918 <HAL_DMA_DeInit+0x160>)
  __HAL_DMA_DISABLE(hdma);
 8007890:	6815      	ldr	r5, [r2, #0]
  hdma->Instance->CR   = 0U;
 8007892:	2100      	movs	r1, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007894:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 8007896:	f025 0501 	bic.w	r5, r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800789a:	fba0 6003 	umull	r6, r0, r0, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800789e:	4e1f      	ldr	r6, [pc, #124]	; (800791c <HAL_DMA_DeInit+0x164>)
  __HAL_DMA_DISABLE(hdma);
 80078a0:	6015      	str	r5, [r2, #0]
  if (stream_number > 3U)
 80078a2:	2b5f      	cmp	r3, #95	; 0x5f
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80078a4:	ea4f 1010 	mov.w	r0, r0, lsr #4
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80078a8:	f04f 0521 	mov.w	r5, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80078ac:	6011      	str	r1, [r2, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80078ae:	5c30      	ldrb	r0, [r6, r0]
  hdma->Instance->NDTR = 0U;
 80078b0:	6051      	str	r1, [r2, #4]
  hdma->Instance->PAR  = 0U;
 80078b2:	6091      	str	r1, [r2, #8]
  hdma->Instance->M0AR = 0U;
 80078b4:	60d1      	str	r1, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80078b6:	6111      	str	r1, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80078b8:	6155      	str	r5, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80078ba:	65e0      	str	r0, [r4, #92]	; 0x5c
  if (stream_number > 3U)
 80078bc:	d813      	bhi.n	80078e6 <HAL_DMA_DeInit+0x12e>
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80078be:	4918      	ldr	r1, [pc, #96]	; (8007920 <HAL_DMA_DeInit+0x168>)
 80078c0:	4011      	ands	r1, r2
  hdma->XferCpltCallback = NULL;
 80078c2:	2300      	movs	r3, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078c4:	223f      	movs	r2, #63	; 0x3f
 80078c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80078c8:	4082      	lsls	r2, r0
  return HAL_OK;
 80078ca:	4618      	mov	r0, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078cc:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078ce:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80078d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80078d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80078d8:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80078dc:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80078e0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80078e6:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 80078ea:	4011      	ands	r1, r2
 80078ec:	3104      	adds	r1, #4
 80078ee:	e7e8      	b.n	80078c2 <HAL_DMA_DeInit+0x10a>
    return HAL_ERROR;
 80078f0:	2001      	movs	r0, #1
}
 80078f2:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80078f4:	f240 1149 	movw	r1, #329	; 0x149
 80078f8:	480a      	ldr	r0, [pc, #40]	; (8007924 <HAL_DMA_DeInit+0x16c>)
 80078fa:	f7fc f925 	bl	8003b48 <assert_failed>
 80078fe:	6822      	ldr	r2, [r4, #0]
 8007900:	e7c4      	b.n	800788c <HAL_DMA_DeInit+0xd4>
 8007902:	bf00      	nop
 8007904:	40026010 	.word	0x40026010
 8007908:	40026028 	.word	0x40026028
 800790c:	40026040 	.word	0x40026040
 8007910:	40026058 	.word	0x40026058
 8007914:	400264b8 	.word	0x400264b8
 8007918:	aaaaaaab 	.word	0xaaaaaaab
 800791c:	080289a0 	.word	0x080289a0
 8007920:	fffffc00 	.word	0xfffffc00
 8007924:	08028968 	.word	0x08028968

08007928 <HAL_DMA_Start_IT>:
{
 8007928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800792c:	461e      	mov	r6, r3
 800792e:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007930:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8007934:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007936:	1e70      	subs	r0, r6, #1
{
 8007938:	4617      	mov	r7, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800793a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800793e:	4298      	cmp	r0, r3
 8007940:	d83b      	bhi.n	80079ba <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 8007942:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007946:	2b01      	cmp	r3, #1
 8007948:	d040      	beq.n	80079cc <HAL_DMA_Start_IT+0xa4>
 800794a:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800794c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8007950:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8007952:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007956:	d005      	beq.n	8007964 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8007958:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800795a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800795c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8007960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007964:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8007966:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007968:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800796a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800796e:	68a2      	ldr	r2, [r4, #8]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007970:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007972:	682b      	ldr	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007974:	2a40      	cmp	r2, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800797a:	602b      	str	r3, [r5, #0]
  hdma->Instance->NDTR = DataLength;
 800797c:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800797e:	d028      	beq.n	80079d2 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 8007980:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 8007984:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007986:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007988:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800798a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800798c:	408b      	lsls	r3, r1
 800798e:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007992:	682b      	ldr	r3, [r5, #0]
 8007994:	f043 0316 	orr.w	r3, r3, #22
 8007998:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800799a:	696b      	ldr	r3, [r5, #20]
 800799c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a0:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80079a2:	b11a      	cbz	r2, 80079ac <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	f043 0308 	orr.w	r3, r3, #8
 80079aa:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80079ac:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ae:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	602b      	str	r3, [r5, #0]
}
 80079b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80079ba:	f240 11cd 	movw	r1, #461	; 0x1cd
 80079be:	4807      	ldr	r0, [pc, #28]	; (80079dc <HAL_DMA_Start_IT+0xb4>)
 80079c0:	f7fc f8c2 	bl	8003b48 <assert_failed>
  __HAL_LOCK(hdma);
 80079c4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d1be      	bne.n	800794a <HAL_DMA_Start_IT+0x22>
 80079cc:	2002      	movs	r0, #2
}
 80079ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 80079d2:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 80079d4:	f8c5 800c 	str.w	r8, [r5, #12]
 80079d8:	e7d5      	b.n	8007986 <HAL_DMA_Start_IT+0x5e>
 80079da:	bf00      	nop
 80079dc:	08028968 	.word	0x08028968

080079e0 <HAL_DMA_Abort>:
{
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079e4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80079e6:	f7fe fdc9 	bl	800657c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079ea:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d006      	beq.n	8007a00 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079f2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80079f4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80079f6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079f8:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80079fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a04:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	f022 0216 	bic.w	r2, r2, #22
 8007a0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a14:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a16:	b339      	cbz	r1, 8007a68 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	f022 0208 	bic.w	r2, r2, #8
 8007a1e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	f022 0201 	bic.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a28:	e005      	b.n	8007a36 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a2a:	f7fe fda7 	bl	800657c <HAL_GetTick>
 8007a2e:	1b43      	subs	r3, r0, r5
 8007a30:	2b05      	cmp	r3, #5
 8007a32:	d80f      	bhi.n	8007a54 <HAL_DMA_Abort+0x74>
 8007a34:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f013 0301 	ands.w	r3, r3, #1
 8007a3c:	d1f5      	bne.n	8007a2a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a3e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a40:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8007a42:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a44:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8007a46:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a48:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8007a4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8007a4e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a56:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8007a58:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a5a:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a5c:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a5e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8007a62:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a68:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	d1d4      	bne.n	8007a18 <HAL_DMA_Abort+0x38>
 8007a6e:	e7d7      	b.n	8007a20 <HAL_DMA_Abort+0x40>

08007a70 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a70:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8007a74:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a76:	2a02      	cmp	r2, #2
 8007a78:	d003      	beq.n	8007a82 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a7a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8007a7c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007a80:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8007a82:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a84:	2105      	movs	r1, #5
  return HAL_OK;
 8007a86:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a88:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8007a8c:	6813      	ldr	r3, [r2, #0]
 8007a8e:	f023 0301 	bic.w	r3, r3, #1
 8007a92:	6013      	str	r3, [r2, #0]
}
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop

08007a98 <HAL_DMA_IRQHandler>:
  uint32_t timeout = SystemCoreClock / 9600;
 8007a98:	4b75      	ldr	r3, [pc, #468]	; (8007c70 <HAL_DMA_IRQHandler+0x1d8>)
  __IO uint32_t count = 0;
 8007a9a:	2100      	movs	r1, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a9c:	2208      	movs	r2, #8
{
 8007a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600;
 8007aa2:	681d      	ldr	r5, [r3, #0]
{
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	4680      	mov	r8, r0
  __IO uint32_t count = 0;
 8007aa8:	9101      	str	r1, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007aaa:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8007aae:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ab0:	409a      	lsls	r2, r3
 8007ab2:	4222      	tst	r2, r4
 8007ab4:	d004      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ab6:	6801      	ldr	r1, [r0, #0]
 8007ab8:	680f      	ldr	r7, [r1, #0]
 8007aba:	0778      	lsls	r0, r7, #29
 8007abc:	f100 808a 	bmi.w	8007bd4 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	409a      	lsls	r2, r3
 8007ac4:	4222      	tst	r2, r4
 8007ac6:	d004      	beq.n	8007ad2 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ac8:	f8d8 1000 	ldr.w	r1, [r8]
 8007acc:	6949      	ldr	r1, [r1, #20]
 8007ace:	0609      	lsls	r1, r1, #24
 8007ad0:	d478      	bmi.n	8007bc4 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	409a      	lsls	r2, r3
 8007ad6:	4222      	tst	r2, r4
 8007ad8:	d004      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007ada:	f8d8 1000 	ldr.w	r1, [r8]
 8007ade:	6809      	ldr	r1, [r1, #0]
 8007ae0:	078f      	lsls	r7, r1, #30
 8007ae2:	d467      	bmi.n	8007bb4 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007ae4:	2210      	movs	r2, #16
 8007ae6:	409a      	lsls	r2, r3
 8007ae8:	4222      	tst	r2, r4
 8007aea:	d004      	beq.n	8007af6 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007aec:	f8d8 1000 	ldr.w	r1, [r8]
 8007af0:	680f      	ldr	r7, [r1, #0]
 8007af2:	0738      	lsls	r0, r7, #28
 8007af4:	d449      	bmi.n	8007b8a <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007af6:	2220      	movs	r2, #32
 8007af8:	409a      	lsls	r2, r3
 8007afa:	4222      	tst	r2, r4
 8007afc:	d017      	beq.n	8007b2e <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007afe:	f8d8 1000 	ldr.w	r1, [r8]
 8007b02:	680c      	ldr	r4, [r1, #0]
 8007b04:	06e0      	lsls	r0, r4, #27
 8007b06:	d512      	bpl.n	8007b2e <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007b08:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007b0a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8007b0e:	2a05      	cmp	r2, #5
 8007b10:	d073      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b12:	680b      	ldr	r3, [r1, #0]
 8007b14:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b18:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b1a:	f000 8090 	beq.w	8007c3e <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b1e:	0319      	lsls	r1, r3, #12
 8007b20:	f140 809b 	bpl.w	8007c5a <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8007b24:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8007b28:	b10b      	cbz	r3, 8007b2e <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b2e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8007b32:	b33b      	cbz	r3, 8007b84 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007b34:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8007b38:	07da      	lsls	r2, r3, #31
 8007b3a:	d51b      	bpl.n	8007b74 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8007b3c:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8007b40:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8007b42:	4b4c      	ldr	r3, [pc, #304]	; (8007c74 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8007b44:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8007b48:	fba3 3505 	umull	r3, r5, r3, r5
      __HAL_DMA_DISABLE(hdma);
 8007b4c:	6813      	ldr	r3, [r2, #0]
 8007b4e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8007b52:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	e002      	b.n	8007b5e <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007b58:	6813      	ldr	r3, [r2, #0]
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d504      	bpl.n	8007b68 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	3301      	adds	r3, #1
 8007b62:	42ab      	cmp	r3, r5
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	d9f7      	bls.n	8007b58 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8007b68:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8007b6a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8007b6c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8007b70:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8007b74:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8007b78:	b123      	cbz	r3, 8007b84 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8007b7a:	4640      	mov	r0, r8
}
 8007b7c:	b002      	add	sp, #8
 8007b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8007b82:	4718      	bx	r3
}
 8007b84:	b002      	add	sp, #8
 8007b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007b8a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b8c:	680a      	ldr	r2, [r1, #0]
 8007b8e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b92:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b94:	d12a      	bne.n	8007bec <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b96:	05d7      	lsls	r7, r2, #23
 8007b98:	d403      	bmi.n	8007ba2 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b9a:	680a      	ldr	r2, [r1, #0]
 8007b9c:	f022 0208 	bic.w	r2, r2, #8
 8007ba0:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8007ba2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	d0a5      	beq.n	8007af6 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8007baa:	4640      	mov	r0, r8
 8007bac:	4790      	blx	r2
 8007bae:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8007bb2:	e7a0      	b.n	8007af6 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007bb4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007bb6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8007bba:	f042 0204 	orr.w	r2, r2, #4
 8007bbe:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8007bc2:	e78f      	b.n	8007ae4 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007bc4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007bc6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8007bca:	f042 0202 	orr.w	r2, r2, #2
 8007bce:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8007bd2:	e77e      	b.n	8007ad2 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007bd4:	680f      	ldr	r7, [r1, #0]
 8007bd6:	f027 0704 	bic.w	r7, r7, #4
 8007bda:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007bdc:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007bde:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8007bea:	e769      	b.n	8007ac0 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007bec:	0312      	lsls	r2, r2, #12
 8007bee:	d5d8      	bpl.n	8007ba2 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007bf0:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8007bf4:	2a00      	cmp	r2, #0
 8007bf6:	d1d8      	bne.n	8007baa <HAL_DMA_IRQHandler+0x112>
 8007bf8:	e77d      	b.n	8007af6 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bfa:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007bfc:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c00:	f022 0216 	bic.w	r2, r2, #22
 8007c04:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c06:	694a      	ldr	r2, [r1, #20]
 8007c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c0c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c0e:	b354      	cbz	r4, 8007c66 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c10:	680a      	ldr	r2, [r1, #0]
 8007c12:	f022 0208 	bic.w	r2, r2, #8
 8007c16:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c18:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8007c1a:	2401      	movs	r4, #1
        __HAL_UNLOCK(hdma);
 8007c1c:	2100      	movs	r1, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c1e:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8007c22:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c26:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8007c28:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8007c2c:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8007c30:	2a00      	cmp	r2, #0
 8007c32:	d0a7      	beq.n	8007b84 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8007c34:	4640      	mov	r0, r8
}
 8007c36:	b002      	add	sp, #8
 8007c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8007c3c:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c3e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8007c42:	f47f af6f 	bne.w	8007b24 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007c46:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007c48:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007c4a:	f022 0210 	bic.w	r2, r2, #16
 8007c4e:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8007c50:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007c54:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8007c58:	e764      	b.n	8007b24 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8007c5a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f47f af63 	bne.w	8007b2a <HAL_DMA_IRQHandler+0x92>
 8007c64:	e763      	b.n	8007b2e <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c66:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	d1d0      	bne.n	8007c10 <HAL_DMA_IRQHandler+0x178>
 8007c6e:	e7d3      	b.n	8007c18 <HAL_DMA_IRQHandler+0x180>
 8007c70:	20000274 	.word	0x20000274
 8007c74:	1b4e81b5 	.word	0x1b4e81b5

08007c78 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8007c78:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8007c7a:	4770      	bx	lr

08007c7c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007c84:	f64f 75fe 	movw	r5, #65534	; 0xfffe
{
 8007c88:	4604      	mov	r4, r0
 8007c8a:	4689      	mov	r9, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007c8c:	f108 36ff 	add.w	r6, r8, #4294967295
{
 8007c90:	4692      	mov	sl, r2
 8007c92:	461f      	mov	r7, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007c94:	42ae      	cmp	r6, r5
 8007c96:	d85f      	bhi.n	8007d58 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c98:	68a0      	ldr	r0, [r4, #8]
 8007c9a:	2880      	cmp	r0, #128	; 0x80
 8007c9c:	d063      	beq.n	8007d66 <HAL_DMAEx_MultiBufferStart_IT+0xea>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c9e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	f000 8090 	beq.w	8007dc8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8007ca8:	2201      	movs	r2, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007caa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8007cae:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8007cb0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007cb4:	d005      	beq.n	8007cc2 <HAL_DMAEx_MultiBufferStart_IT+0x46>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007cb6:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 8007cb8:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8007cba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 8007cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8007cc2:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cc4:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cc6:	2202      	movs	r2, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cc8:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cca:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cce:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cd6:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8007cd8:	612f      	str	r7, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 8007cda:	f8c5 8004 	str.w	r8, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cde:	d06a      	beq.n	8007db6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8007ce0:	f8c5 9008 	str.w	r9, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8007ce4:	f8c5 a00c 	str.w	sl, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007ce8:	4ba4      	ldr	r3, [pc, #656]	; (8007f7c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8007cea:	429d      	cmp	r5, r3
 8007cec:	d941      	bls.n	8007d72 <HAL_DMAEx_MultiBufferStart_IT+0xf6>
 8007cee:	3b48      	subs	r3, #72	; 0x48
 8007cf0:	49a3      	ldr	r1, [pc, #652]	; (8007f80 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8007cf2:	4aa4      	ldr	r2, [pc, #656]	; (8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8007cf4:	429d      	cmp	r5, r3
 8007cf6:	bf18      	it	ne
 8007cf8:	428d      	cmpne	r5, r1
 8007cfa:	bf14      	ite	ne
 8007cfc:	2301      	movne	r3, #1
 8007cfe:	2300      	moveq	r3, #0
 8007d00:	4295      	cmp	r5, r2
 8007d02:	bf0c      	ite	eq
 8007d04:	2300      	moveq	r3, #0
 8007d06:	f003 0301 	andne.w	r3, r3, #1
 8007d0a:	b11b      	cbz	r3, 8007d14 <HAL_DMAEx_MultiBufferStart_IT+0x98>
 8007d0c:	4b9e      	ldr	r3, [pc, #632]	; (8007f88 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	f040 8111 	bne.w	8007f36 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 8007d14:	4b9d      	ldr	r3, [pc, #628]	; (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007d16:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007d18:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007d1a:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007d1c:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007d1e:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007d20:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007d22:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007d24:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007d26:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007d28:	4b98      	ldr	r3, [pc, #608]	; (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007d2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d2c:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d30:	f043 0316 	orr.w	r3, r3, #22
 8007d34:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007d36:	696b      	ldr	r3, [r5, #20]
 8007d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3c:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d3e:	2a00      	cmp	r2, #0
 8007d40:	d03e      	beq.n	8007dc0 <HAL_DMAEx_MultiBufferStart_IT+0x144>
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	f043 0308 	orr.w	r3, r3, #8
 8007d48:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 8007d4a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d4c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8007d4e:	f043 0301 	orr.w	r3, r3, #1
 8007d52:	602b      	str	r3, [r5, #0]
}
 8007d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007d58:	488d      	ldr	r0, [pc, #564]	; (8007f90 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8007d5a:	21a1      	movs	r1, #161	; 0xa1
 8007d5c:	f7fb fef4 	bl	8003b48 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d60:	68a0      	ldr	r0, [r4, #8]
 8007d62:	2880      	cmp	r0, #128	; 0x80
 8007d64:	d19b      	bne.n	8007c9e <HAL_DMAEx_MultiBufferStart_IT+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007d66:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 8007d6a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007d6c:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007d72:	4b88      	ldr	r3, [pc, #544]	; (8007f94 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8007d74:	429d      	cmp	r5, r3
 8007d76:	d929      	bls.n	8007dcc <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8007d78:	3ba8      	subs	r3, #168	; 0xa8
 8007d7a:	4987      	ldr	r1, [pc, #540]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8007d7c:	4a81      	ldr	r2, [pc, #516]	; (8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	bf18      	it	ne
 8007d82:	428d      	cmpne	r5, r1
 8007d84:	bf14      	ite	ne
 8007d86:	2301      	movne	r3, #1
 8007d88:	2300      	moveq	r3, #0
 8007d8a:	4295      	cmp	r5, r2
 8007d8c:	bf0c      	ite	eq
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	f003 0301 	andne.w	r3, r3, #1
 8007d94:	b113      	cbz	r3, 8007d9c <HAL_DMAEx_MultiBufferStart_IT+0x120>
 8007d96:	4b7c      	ldr	r3, [pc, #496]	; (8007f88 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8007d98:	429d      	cmp	r5, r3
 8007d9a:	d15a      	bne.n	8007e52 <HAL_DMAEx_MultiBufferStart_IT+0x1d6>
 8007d9c:	4b7b      	ldr	r3, [pc, #492]	; (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007d9e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007da0:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007da2:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007da4:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007da6:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007da8:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007daa:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007dac:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007dae:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007db0:	4b76      	ldr	r3, [pc, #472]	; (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007db2:	609a      	str	r2, [r3, #8]
 8007db4:	e7ba      	b.n	8007d2c <HAL_DMAEx_MultiBufferStart_IT+0xb0>
    hdma->Instance->PAR = DstAddress;
 8007db6:	f8c5 a008 	str.w	sl, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 8007dba:	f8c5 900c 	str.w	r9, [r5, #12]
 8007dbe:	e793      	b.n	8007ce8 <HAL_DMAEx_MultiBufferStart_IT+0x6c>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007dc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1bd      	bne.n	8007d42 <HAL_DMAEx_MultiBufferStart_IT+0xc6>
 8007dc6:	e7c0      	b.n	8007d4a <HAL_DMAEx_MultiBufferStart_IT+0xce>
  __HAL_LOCK(hdma);
 8007dc8:	2002      	movs	r0, #2
 8007dca:	e778      	b.n	8007cbe <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007dcc:	4b73      	ldr	r3, [pc, #460]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8007dce:	429d      	cmp	r5, r3
 8007dd0:	d91f      	bls.n	8007e12 <HAL_DMAEx_MultiBufferStart_IT+0x196>
 8007dd2:	3b48      	subs	r3, #72	; 0x48
 8007dd4:	4970      	ldr	r1, [pc, #448]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8007dd6:	4a6b      	ldr	r2, [pc, #428]	; (8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8007dd8:	429d      	cmp	r5, r3
 8007dda:	bf18      	it	ne
 8007ddc:	428d      	cmpne	r5, r1
 8007dde:	bf14      	ite	ne
 8007de0:	2301      	movne	r3, #1
 8007de2:	2300      	moveq	r3, #0
 8007de4:	4295      	cmp	r5, r2
 8007de6:	bf0c      	ite	eq
 8007de8:	2300      	moveq	r3, #0
 8007dea:	f003 0301 	andne.w	r3, r3, #1
 8007dee:	b11b      	cbz	r3, 8007df8 <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 8007df0:	4b65      	ldr	r3, [pc, #404]	; (8007f88 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8007df2:	429d      	cmp	r5, r3
 8007df4:	f040 8152 	bne.w	800809c <HAL_DMAEx_MultiBufferStart_IT+0x420>
 8007df8:	4b69      	ldr	r3, [pc, #420]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8007dfa:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007dfc:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007dfe:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007e00:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007e02:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007e04:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007e06:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007e08:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007e0a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007e0c:	4b64      	ldr	r3, [pc, #400]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8007e0e:	60da      	str	r2, [r3, #12]
 8007e10:	e78c      	b.n	8007d2c <HAL_DMAEx_MultiBufferStart_IT+0xb0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007e12:	4b61      	ldr	r3, [pc, #388]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8007e14:	495a      	ldr	r1, [pc, #360]	; (8007f80 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8007e16:	4a5b      	ldr	r2, [pc, #364]	; (8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8007e18:	429d      	cmp	r5, r3
 8007e1a:	bf18      	it	ne
 8007e1c:	428d      	cmpne	r5, r1
 8007e1e:	bf14      	ite	ne
 8007e20:	2301      	movne	r3, #1
 8007e22:	2300      	moveq	r3, #0
 8007e24:	4295      	cmp	r5, r2
 8007e26:	bf0c      	ite	eq
 8007e28:	2300      	moveq	r3, #0
 8007e2a:	f003 0301 	andne.w	r3, r3, #1
 8007e2e:	b11b      	cbz	r3, 8007e38 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
 8007e30:	4b55      	ldr	r3, [pc, #340]	; (8007f88 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8007e32:	429d      	cmp	r5, r3
 8007e34:	f040 80be 	bne.w	8007fb4 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8007e38:	4b59      	ldr	r3, [pc, #356]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8007e3a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007e3c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007e3e:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007e40:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007e42:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007e44:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007e46:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007e48:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007e4a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007e4c:	4b54      	ldr	r3, [pc, #336]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8007e4e:	609a      	str	r2, [r3, #8]
 8007e50:	e76c      	b.n	8007d2c <HAL_DMAEx_MultiBufferStart_IT+0xb0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007e52:	3b48      	subs	r3, #72	; 0x48
 8007e54:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8007e58:	3218      	adds	r2, #24
 8007e5a:	429d      	cmp	r5, r3
 8007e5c:	bf18      	it	ne
 8007e5e:	428d      	cmpne	r5, r1
 8007e60:	bf14      	ite	ne
 8007e62:	2301      	movne	r3, #1
 8007e64:	2300      	moveq	r3, #0
 8007e66:	4295      	cmp	r5, r2
 8007e68:	bf0c      	ite	eq
 8007e6a:	2300      	moveq	r3, #0
 8007e6c:	f003 0301 	andne.w	r3, r3, #1
 8007e70:	b11b      	cbz	r3, 8007e7a <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
 8007e72:	4b4c      	ldr	r3, [pc, #304]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007e74:	429d      	cmp	r5, r3
 8007e76:	f040 8215 	bne.w	80082a4 <HAL_DMAEx_MultiBufferStart_IT+0x628>
 8007e7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007e7e:	4b4a      	ldr	r3, [pc, #296]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8007e80:	4a4a      	ldr	r2, [pc, #296]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8007e82:	484b      	ldr	r0, [pc, #300]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8007e84:	429d      	cmp	r5, r3
 8007e86:	bf18      	it	ne
 8007e88:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007e8a:	f842 1c20 	str.w	r1, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007e8e:	bf14      	ite	ne
 8007e90:	2301      	movne	r3, #1
 8007e92:	2300      	moveq	r3, #0
 8007e94:	4285      	cmp	r5, r0
 8007e96:	bf0c      	ite	eq
 8007e98:	2300      	moveq	r3, #0
 8007e9a:	f003 0301 	andne.w	r3, r3, #1
 8007e9e:	b11b      	cbz	r3, 8007ea8 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8007ea0:	4b40      	ldr	r3, [pc, #256]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007ea2:	429d      	cmp	r5, r3
 8007ea4:	f040 8218 	bne.w	80082d8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>
 8007ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007eac:	4b3e      	ldr	r3, [pc, #248]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8007eae:	493f      	ldr	r1, [pc, #252]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8007eb0:	483f      	ldr	r0, [pc, #252]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8007eb2:	429d      	cmp	r5, r3
 8007eb4:	bf18      	it	ne
 8007eb6:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007eb8:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007ebc:	bf14      	ite	ne
 8007ebe:	2301      	movne	r3, #1
 8007ec0:	2300      	moveq	r3, #0
 8007ec2:	4285      	cmp	r5, r0
 8007ec4:	bf0c      	ite	eq
 8007ec6:	2300      	moveq	r3, #0
 8007ec8:	f003 0301 	andne.w	r3, r3, #1
 8007ecc:	b11b      	cbz	r3, 8007ed6 <HAL_DMAEx_MultiBufferStart_IT+0x25a>
 8007ece:	4b35      	ldr	r3, [pc, #212]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007ed0:	429d      	cmp	r5, r3
 8007ed2:	f040 8231 	bne.w	8008338 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8007ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007eda:	4b34      	ldr	r3, [pc, #208]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8007edc:	4932      	ldr	r1, [pc, #200]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8007ede:	4834      	ldr	r0, [pc, #208]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8007ee0:	429d      	cmp	r5, r3
 8007ee2:	bf18      	it	ne
 8007ee4:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007ee6:	f8c1 23e0 	str.w	r2, [r1, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007eea:	bf14      	ite	ne
 8007eec:	2301      	movne	r3, #1
 8007eee:	2300      	moveq	r3, #0
 8007ef0:	4285      	cmp	r5, r0
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	f003 0301 	andne.w	r3, r3, #1
 8007efa:	b11b      	cbz	r3, 8007f04 <HAL_DMAEx_MultiBufferStart_IT+0x288>
 8007efc:	4b29      	ldr	r3, [pc, #164]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007efe:	429d      	cmp	r5, r3
 8007f00:	f040 8202 	bne.w	8008308 <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 8007f04:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007f08:	4b28      	ldr	r3, [pc, #160]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8007f0a:	4927      	ldr	r1, [pc, #156]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8007f0c:	4828      	ldr	r0, [pc, #160]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	bf18      	it	ne
 8007f12:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007f14:	f8c1 23e0 	str.w	r2, [r1, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007f18:	bf14      	ite	ne
 8007f1a:	2301      	movne	r3, #1
 8007f1c:	2300      	moveq	r3, #0
 8007f1e:	4285      	cmp	r5, r0
 8007f20:	bf0c      	ite	eq
 8007f22:	2300      	moveq	r3, #0
 8007f24:	f003 0301 	andne.w	r3, r3, #1
 8007f28:	b11b      	cbz	r3, 8007f32 <HAL_DMAEx_MultiBufferStart_IT+0x2b6>
 8007f2a:	4b1e      	ldr	r3, [pc, #120]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007f2c:	429d      	cmp	r5, r3
 8007f2e:	f040 821b 	bne.w	8008368 <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
 8007f32:	2240      	movs	r2, #64	; 0x40
 8007f34:	e73c      	b.n	8007db0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007f36:	3b48      	subs	r3, #72	; 0x48
 8007f38:	3118      	adds	r1, #24
 8007f3a:	3218      	adds	r2, #24
 8007f3c:	429d      	cmp	r5, r3
 8007f3e:	bf18      	it	ne
 8007f40:	428d      	cmpne	r5, r1
 8007f42:	bf14      	ite	ne
 8007f44:	2301      	movne	r3, #1
 8007f46:	2300      	moveq	r3, #0
 8007f48:	4295      	cmp	r5, r2
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2300      	moveq	r3, #0
 8007f4e:	f003 0301 	andne.w	r3, r3, #1
 8007f52:	b11b      	cbz	r3, 8007f5c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 8007f54:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007f56:	429d      	cmp	r5, r3
 8007f58:	f040 8115 	bne.w	8008186 <HAL_DMAEx_MultiBufferStart_IT+0x50a>
 8007f5c:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007f5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007f66:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007f6a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007f70:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007f72:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007f74:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007f76:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007f78:	e6d6      	b.n	8007d28 <HAL_DMAEx_MultiBufferStart_IT+0xac>
 8007f7a:	bf00      	nop
 8007f7c:	40026458 	.word	0x40026458
 8007f80:	40026010 	.word	0x40026010
 8007f84:	40026070 	.word	0x40026070
 8007f88:	40026470 	.word	0x40026470
 8007f8c:	40026400 	.word	0x40026400
 8007f90:	080289a8 	.word	0x080289a8
 8007f94:	400260b8 	.word	0x400260b8
 8007f98:	40026410 	.word	0x40026410
 8007f9c:	40026058 	.word	0x40026058
 8007fa0:	40026000 	.word	0x40026000
 8007fa4:	40026488 	.word	0x40026488
 8007fa8:	40026028 	.word	0x40026028
 8007fac:	40026428 	.word	0x40026428
 8007fb0:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007fb4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8007fb8:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8007fbc:	3218      	adds	r2, #24
 8007fbe:	429d      	cmp	r5, r3
 8007fc0:	bf18      	it	ne
 8007fc2:	428d      	cmpne	r5, r1
 8007fc4:	bf14      	ite	ne
 8007fc6:	2301      	movne	r3, #1
 8007fc8:	2300      	moveq	r3, #0
 8007fca:	4295      	cmp	r5, r2
 8007fcc:	bf0c      	ite	eq
 8007fce:	2300      	moveq	r3, #0
 8007fd0:	f003 0301 	andne.w	r3, r3, #1
 8007fd4:	b11b      	cbz	r3, 8007fde <HAL_DMAEx_MultiBufferStart_IT+0x362>
 8007fd6:	4bab      	ldr	r3, [pc, #684]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007fd8:	429d      	cmp	r5, r3
 8007fda:	f040 81dd 	bne.w	8008398 <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 8007fde:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007fe2:	4ba9      	ldr	r3, [pc, #676]	; (8008288 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8007fe4:	4aa9      	ldr	r2, [pc, #676]	; (800828c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8007fe6:	48aa      	ldr	r0, [pc, #680]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8007fe8:	429d      	cmp	r5, r3
 8007fea:	bf18      	it	ne
 8007fec:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007fee:	f842 1c20 	str.w	r1, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007ff2:	bf14      	ite	ne
 8007ff4:	2301      	movne	r3, #1
 8007ff6:	2300      	moveq	r3, #0
 8007ff8:	4285      	cmp	r5, r0
 8007ffa:	bf0c      	ite	eq
 8007ffc:	2300      	moveq	r3, #0
 8007ffe:	f003 0301 	andne.w	r3, r3, #1
 8008002:	b11b      	cbz	r3, 800800c <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8008004:	4b9f      	ldr	r3, [pc, #636]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8008006:	429d      	cmp	r5, r3
 8008008:	f040 81df 	bne.w	80083ca <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 800800c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008010:	4b9d      	ldr	r3, [pc, #628]	; (8008288 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8008012:	499e      	ldr	r1, [pc, #632]	; (800828c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8008014:	489e      	ldr	r0, [pc, #632]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8008016:	429d      	cmp	r5, r3
 8008018:	bf18      	it	ne
 800801a:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800801c:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008020:	bf14      	ite	ne
 8008022:	2301      	movne	r3, #1
 8008024:	2300      	moveq	r3, #0
 8008026:	4285      	cmp	r5, r0
 8008028:	bf0c      	ite	eq
 800802a:	2300      	moveq	r3, #0
 800802c:	f003 0301 	andne.w	r3, r3, #1
 8008030:	b11b      	cbz	r3, 800803a <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 8008032:	4b94      	ldr	r3, [pc, #592]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8008034:	429d      	cmp	r5, r3
 8008036:	f040 8228 	bne.w	800848a <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 800803a:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800803e:	4b93      	ldr	r3, [pc, #588]	; (800828c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8008040:	4991      	ldr	r1, [pc, #580]	; (8008288 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8008042:	4893      	ldr	r0, [pc, #588]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8008044:	429d      	cmp	r5, r3
 8008046:	bf18      	it	ne
 8008048:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800804a:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800804e:	bf14      	ite	ne
 8008050:	2301      	movne	r3, #1
 8008052:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008054:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008056:	4285      	cmp	r5, r0
 8008058:	bf0c      	ite	eq
 800805a:	2300      	moveq	r3, #0
 800805c:	f003 0301 	andne.w	r3, r3, #1
 8008060:	b11b      	cbz	r3, 800806a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008062:	4b88      	ldr	r3, [pc, #544]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8008064:	429d      	cmp	r5, r3
 8008066:	f040 81e0 	bne.w	800842a <HAL_DMAEx_MultiBufferStart_IT+0x7ae>
 800806a:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800806e:	4b86      	ldr	r3, [pc, #536]	; (8008288 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8008070:	4986      	ldr	r1, [pc, #536]	; (800828c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8008072:	4887      	ldr	r0, [pc, #540]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8008074:	429d      	cmp	r5, r3
 8008076:	bf18      	it	ne
 8008078:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800807a:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800807e:	bf14      	ite	ne
 8008080:	2301      	movne	r3, #1
 8008082:	2300      	moveq	r3, #0
 8008084:	4285      	cmp	r5, r0
 8008086:	bf0c      	ite	eq
 8008088:	2300      	moveq	r3, #0
 800808a:	f003 0301 	andne.w	r3, r3, #1
 800808e:	b11b      	cbz	r3, 8008098 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 8008090:	4b7c      	ldr	r3, [pc, #496]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8008092:	429d      	cmp	r5, r3
 8008094:	f040 8229 	bne.w	80084ea <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8008098:	2240      	movs	r2, #64	; 0x40
 800809a:	e6d7      	b.n	8007e4c <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800809c:	3b48      	subs	r3, #72	; 0x48
 800809e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80080a2:	3218      	adds	r2, #24
 80080a4:	429d      	cmp	r5, r3
 80080a6:	bf18      	it	ne
 80080a8:	428d      	cmpne	r5, r1
 80080aa:	bf14      	ite	ne
 80080ac:	2301      	movne	r3, #1
 80080ae:	2300      	moveq	r3, #0
 80080b0:	4295      	cmp	r5, r2
 80080b2:	bf0c      	ite	eq
 80080b4:	2300      	moveq	r3, #0
 80080b6:	f003 0301 	andne.w	r3, r3, #1
 80080ba:	b11b      	cbz	r3, 80080c4 <HAL_DMAEx_MultiBufferStart_IT+0x448>
 80080bc:	4b71      	ldr	r3, [pc, #452]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 80080be:	429d      	cmp	r5, r3
 80080c0:	f040 81cb 	bne.w	800845a <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 80080c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80080c8:	4b70      	ldr	r3, [pc, #448]	; (800828c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 80080ca:	4a6f      	ldr	r2, [pc, #444]	; (8008288 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 80080cc:	4870      	ldr	r0, [pc, #448]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 80080ce:	429d      	cmp	r5, r3
 80080d0:	bf18      	it	ne
 80080d2:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80080d4:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80080d8:	bf14      	ite	ne
 80080da:	2301      	movne	r3, #1
 80080dc:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80080de:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80080e0:	4285      	cmp	r5, r0
 80080e2:	bf0c      	ite	eq
 80080e4:	2300      	moveq	r3, #0
 80080e6:	f003 0301 	andne.w	r3, r3, #1
 80080ea:	b11b      	cbz	r3, 80080f4 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 80080ec:	4b65      	ldr	r3, [pc, #404]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 80080ee:	429d      	cmp	r5, r3
 80080f0:	f040 8183 	bne.w	80083fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80080f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80080f8:	4b63      	ldr	r3, [pc, #396]	; (8008288 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 80080fa:	4964      	ldr	r1, [pc, #400]	; (800828c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 80080fc:	4864      	ldr	r0, [pc, #400]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 80080fe:	429d      	cmp	r5, r3
 8008100:	bf18      	it	ne
 8008102:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008104:	f841 2c1c 	str.w	r2, [r1, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008108:	bf14      	ite	ne
 800810a:	2301      	movne	r3, #1
 800810c:	2300      	moveq	r3, #0
 800810e:	4285      	cmp	r5, r0
 8008110:	bf0c      	ite	eq
 8008112:	2300      	moveq	r3, #0
 8008114:	f003 0301 	andne.w	r3, r3, #1
 8008118:	b11b      	cbz	r3, 8008122 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800811a:	4b5a      	ldr	r3, [pc, #360]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 800811c:	429d      	cmp	r5, r3
 800811e:	f040 81fa 	bne.w	8008516 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 8008122:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008126:	4b59      	ldr	r3, [pc, #356]	; (800828c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8008128:	4957      	ldr	r1, [pc, #348]	; (8008288 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 800812a:	4859      	ldr	r0, [pc, #356]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 800812c:	429d      	cmp	r5, r3
 800812e:	bf18      	it	ne
 8008130:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008132:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008136:	bf14      	ite	ne
 8008138:	2301      	movne	r3, #1
 800813a:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800813c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800813e:	4285      	cmp	r5, r0
 8008140:	bf0c      	ite	eq
 8008142:	2300      	moveq	r3, #0
 8008144:	f003 0301 	andne.w	r3, r3, #1
 8008148:	b11b      	cbz	r3, 8008152 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 800814a:	4b4e      	ldr	r3, [pc, #312]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 800814c:	429d      	cmp	r5, r3
 800814e:	f040 81b4 	bne.w	80084ba <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8008152:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008156:	4b4d      	ldr	r3, [pc, #308]	; (800828c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8008158:	494b      	ldr	r1, [pc, #300]	; (8008288 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 800815a:	484d      	ldr	r0, [pc, #308]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 800815c:	429d      	cmp	r5, r3
 800815e:	bf18      	it	ne
 8008160:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008162:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008166:	bf14      	ite	ne
 8008168:	2301      	movne	r3, #1
 800816a:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800816c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800816e:	4285      	cmp	r5, r0
 8008170:	bf0c      	ite	eq
 8008172:	2300      	moveq	r3, #0
 8008174:	f003 0301 	andne.w	r3, r3, #1
 8008178:	b11b      	cbz	r3, 8008182 <HAL_DMAEx_MultiBufferStart_IT+0x506>
 800817a:	4b42      	ldr	r3, [pc, #264]	; (8008284 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 800817c:	429d      	cmp	r5, r3
 800817e:	f040 81e0 	bne.w	8008542 <HAL_DMAEx_MultiBufferStart_IT+0x8c6>
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	e642      	b.n	8007e0c <HAL_DMAEx_MultiBufferStart_IT+0x190>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008186:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800818a:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800818e:	3218      	adds	r2, #24
 8008190:	429d      	cmp	r5, r3
 8008192:	bf18      	it	ne
 8008194:	428d      	cmpne	r5, r1
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	4295      	cmp	r5, r2
 800819e:	bf0c      	ite	eq
 80081a0:	2300      	moveq	r3, #0
 80081a2:	f003 0301 	andne.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 81f5 	beq.w	8008596 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 80081ac:	4b39      	ldr	r3, [pc, #228]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 80081ae:	429d      	cmp	r5, r3
 80081b0:	f000 81f1 	beq.w	8008596 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 80081b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80081b8:	4b37      	ldr	r3, [pc, #220]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 80081ba:	4a38      	ldr	r2, [pc, #224]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 80081bc:	4838      	ldr	r0, [pc, #224]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 80081be:	429d      	cmp	r5, r3
 80081c0:	bf18      	it	ne
 80081c2:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80081c4:	f842 1c34 	str.w	r1, [r2, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80081c8:	bf14      	ite	ne
 80081ca:	2301      	movne	r3, #1
 80081cc:	2300      	moveq	r3, #0
 80081ce:	4285      	cmp	r5, r0
 80081d0:	bf0c      	ite	eq
 80081d2:	2300      	moveq	r3, #0
 80081d4:	f003 0301 	andne.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 81d9 	beq.w	8008590 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 80081de:	4b2d      	ldr	r3, [pc, #180]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 80081e0:	429d      	cmp	r5, r3
 80081e2:	f000 81d5 	beq.w	8008590 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 80081e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80081ea:	4b2b      	ldr	r3, [pc, #172]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 80081ec:	492b      	ldr	r1, [pc, #172]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 80081ee:	482c      	ldr	r0, [pc, #176]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 80081f0:	429d      	cmp	r5, r3
 80081f2:	bf18      	it	ne
 80081f4:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80081f6:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80081fa:	bf14      	ite	ne
 80081fc:	2301      	movne	r3, #1
 80081fe:	2300      	moveq	r3, #0
 8008200:	4285      	cmp	r5, r0
 8008202:	bf0c      	ite	eq
 8008204:	2300      	moveq	r3, #0
 8008206:	f003 0301 	andne.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 81b5 	beq.w	800857a <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8008210:	4b20      	ldr	r3, [pc, #128]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8008212:	429d      	cmp	r5, r3
 8008214:	f000 81b1 	beq.w	800857a <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8008218:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800821c:	4b1e      	ldr	r3, [pc, #120]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 800821e:	491f      	ldr	r1, [pc, #124]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 8008220:	481f      	ldr	r0, [pc, #124]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 8008222:	429d      	cmp	r5, r3
 8008224:	bf18      	it	ne
 8008226:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008228:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800822c:	bf14      	ite	ne
 800822e:	2301      	movne	r3, #1
 8008230:	2300      	moveq	r3, #0
 8008232:	4285      	cmp	r5, r0
 8008234:	bf0c      	ite	eq
 8008236:	2300      	moveq	r3, #0
 8008238:	f003 0301 	andne.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8199 	beq.w	8008574 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8008242:	4b14      	ldr	r3, [pc, #80]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8008244:	429d      	cmp	r5, r3
 8008246:	f000 8195 	beq.w	8008574 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 800824a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800824e:	4b12      	ldr	r3, [pc, #72]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 8008250:	4912      	ldr	r1, [pc, #72]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 8008252:	4813      	ldr	r0, [pc, #76]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 8008254:	429d      	cmp	r5, r3
 8008256:	bf18      	it	ne
 8008258:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800825a:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	4285      	cmp	r5, r0
 8008266:	bf0c      	ite	eq
 8008268:	2300      	moveq	r3, #0
 800826a:	f003 0301 	andne.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 817c 	beq.w	800856c <HAL_DMAEx_MultiBufferStart_IT+0x8f0>
 8008274:	4b07      	ldr	r3, [pc, #28]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8008276:	429d      	cmp	r5, r3
 8008278:	f000 8178 	beq.w	800856c <HAL_DMAEx_MultiBufferStart_IT+0x8f0>
 800827c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008280:	e552      	b.n	8007d28 <HAL_DMAEx_MultiBufferStart_IT+0xac>
 8008282:	bf00      	nop
 8008284:	40026488 	.word	0x40026488
 8008288:	40026428 	.word	0x40026428
 800828c:	40026028 	.word	0x40026028
 8008290:	40026088 	.word	0x40026088
 8008294:	400264a0 	.word	0x400264a0
 8008298:	40026040 	.word	0x40026040
 800829c:	40026440 	.word	0x40026440
 80082a0:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80082a4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80082a8:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 80082ac:	3218      	adds	r2, #24
 80082ae:	429d      	cmp	r5, r3
 80082b0:	bf18      	it	ne
 80082b2:	428d      	cmpne	r5, r1
 80082b4:	bf14      	ite	ne
 80082b6:	2301      	movne	r3, #1
 80082b8:	2300      	moveq	r3, #0
 80082ba:	4295      	cmp	r5, r2
 80082bc:	bf0c      	ite	eq
 80082be:	2300      	moveq	r3, #0
 80082c0:	f003 0301 	andne.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 816c 	beq.w	80085a2 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 80082ca:	4bad      	ldr	r3, [pc, #692]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80082cc:	429d      	cmp	r5, r3
 80082ce:	f000 8168 	beq.w	80085a2 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 80082d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80082d6:	e5d2      	b.n	8007e7e <HAL_DMAEx_MultiBufferStart_IT+0x202>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80082d8:	4baa      	ldr	r3, [pc, #680]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80082da:	49ab      	ldr	r1, [pc, #684]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 80082dc:	4aab      	ldr	r2, [pc, #684]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 80082de:	429d      	cmp	r5, r3
 80082e0:	bf18      	it	ne
 80082e2:	428d      	cmpne	r5, r1
 80082e4:	bf14      	ite	ne
 80082e6:	2301      	movne	r3, #1
 80082e8:	2300      	moveq	r3, #0
 80082ea:	4295      	cmp	r5, r2
 80082ec:	bf0c      	ite	eq
 80082ee:	2300      	moveq	r3, #0
 80082f0:	f003 0301 	andne.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 815a 	beq.w	80085ae <HAL_DMAEx_MultiBufferStart_IT+0x932>
 80082fa:	4ba1      	ldr	r3, [pc, #644]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80082fc:	429d      	cmp	r5, r3
 80082fe:	f000 8156 	beq.w	80085ae <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8008302:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008306:	e5d1      	b.n	8007eac <HAL_DMAEx_MultiBufferStart_IT+0x230>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008308:	4b9f      	ldr	r3, [pc, #636]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 800830a:	499e      	ldr	r1, [pc, #632]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800830c:	4a9f      	ldr	r2, [pc, #636]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 800830e:	429d      	cmp	r5, r3
 8008310:	bf18      	it	ne
 8008312:	428d      	cmpne	r5, r1
 8008314:	bf14      	ite	ne
 8008316:	2301      	movne	r3, #1
 8008318:	2300      	moveq	r3, #0
 800831a:	4295      	cmp	r5, r2
 800831c:	bf0c      	ite	eq
 800831e:	2300      	moveq	r3, #0
 8008320:	f003 0301 	andne.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 813f 	beq.w	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800832a:	4b95      	ldr	r3, [pc, #596]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800832c:	429d      	cmp	r5, r3
 800832e:	f000 813b 	beq.w	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8008332:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008336:	e5e7      	b.n	8007f08 <HAL_DMAEx_MultiBufferStart_IT+0x28c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008338:	4b93      	ldr	r3, [pc, #588]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 800833a:	4992      	ldr	r1, [pc, #584]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800833c:	4a93      	ldr	r2, [pc, #588]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 800833e:	429d      	cmp	r5, r3
 8008340:	bf18      	it	ne
 8008342:	428d      	cmpne	r5, r1
 8008344:	bf14      	ite	ne
 8008346:	2301      	movne	r3, #1
 8008348:	2300      	moveq	r3, #0
 800834a:	4295      	cmp	r5, r2
 800834c:	bf0c      	ite	eq
 800834e:	2300      	moveq	r3, #0
 8008350:	f003 0301 	andne.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 812d 	beq.w	80085b4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800835a:	4b89      	ldr	r3, [pc, #548]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800835c:	429d      	cmp	r5, r3
 800835e:	f000 8129 	beq.w	80085b4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8008362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008366:	e5b8      	b.n	8007eda <HAL_DMAEx_MultiBufferStart_IT+0x25e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008368:	4b87      	ldr	r3, [pc, #540]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 800836a:	4986      	ldr	r1, [pc, #536]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800836c:	4a87      	ldr	r2, [pc, #540]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 800836e:	429d      	cmp	r5, r3
 8008370:	bf18      	it	ne
 8008372:	428d      	cmpne	r5, r1
 8008374:	bf14      	ite	ne
 8008376:	2301      	movne	r3, #1
 8008378:	2300      	moveq	r3, #0
 800837a:	4295      	cmp	r5, r2
 800837c:	bf0c      	ite	eq
 800837e:	2300      	moveq	r3, #0
 8008380:	f003 0301 	andne.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 8109 	beq.w	800859c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800838a:	4b7d      	ldr	r3, [pc, #500]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800838c:	429d      	cmp	r5, r3
 800838e:	f000 8105 	beq.w	800859c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8008392:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008396:	e50b      	b.n	8007db0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008398:	3b48      	subs	r3, #72	; 0x48
 800839a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800839e:	3218      	adds	r2, #24
 80083a0:	429d      	cmp	r5, r3
 80083a2:	bf18      	it	ne
 80083a4:	428d      	cmpne	r5, r1
 80083a6:	bf14      	ite	ne
 80083a8:	2301      	movne	r3, #1
 80083aa:	2300      	moveq	r3, #0
 80083ac:	4295      	cmp	r5, r2
 80083ae:	bf0c      	ite	eq
 80083b0:	2300      	moveq	r3, #0
 80083b2:	f003 0301 	andne.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 8111 	beq.w	80085de <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80083bc:	4b70      	ldr	r3, [pc, #448]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80083be:	429d      	cmp	r5, r3
 80083c0:	f000 810d 	beq.w	80085de <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80083c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80083c8:	e60b      	b.n	8007fe2 <HAL_DMAEx_MultiBufferStart_IT+0x366>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80083ca:	4b6f      	ldr	r3, [pc, #444]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 80083cc:	496d      	ldr	r1, [pc, #436]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80083ce:	4a6f      	ldr	r2, [pc, #444]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 80083d0:	429d      	cmp	r5, r3
 80083d2:	bf18      	it	ne
 80083d4:	428d      	cmpne	r5, r1
 80083d6:	bf14      	ite	ne
 80083d8:	2301      	movne	r3, #1
 80083da:	2300      	moveq	r3, #0
 80083dc:	4295      	cmp	r5, r2
 80083de:	bf0c      	ite	eq
 80083e0:	2300      	moveq	r3, #0
 80083e2:	f003 0301 	andne.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 80ed 	beq.w	80085c6 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 80083ec:	4b64      	ldr	r3, [pc, #400]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80083ee:	429d      	cmp	r5, r3
 80083f0:	f000 80e9 	beq.w	80085c6 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 80083f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80083f8:	e60a      	b.n	8008010 <HAL_DMAEx_MultiBufferStart_IT+0x394>
 80083fa:	4b62      	ldr	r3, [pc, #392]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80083fc:	4962      	ldr	r1, [pc, #392]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 80083fe:	4a63      	ldr	r2, [pc, #396]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008400:	429d      	cmp	r5, r3
 8008402:	bf18      	it	ne
 8008404:	428d      	cmpne	r5, r1
 8008406:	bf14      	ite	ne
 8008408:	2301      	movne	r3, #1
 800840a:	2300      	moveq	r3, #0
 800840c:	4295      	cmp	r5, r2
 800840e:	bf0c      	ite	eq
 8008410:	2300      	moveq	r3, #0
 8008412:	f003 0301 	andne.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80e7 	beq.w	80085ea <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 800841c:	4b58      	ldr	r3, [pc, #352]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800841e:	429d      	cmp	r5, r3
 8008420:	f000 80e3 	beq.w	80085ea <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8008424:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008428:	e666      	b.n	80080f8 <HAL_DMAEx_MultiBufferStart_IT+0x47c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800842a:	4b56      	ldr	r3, [pc, #344]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800842c:	4956      	ldr	r1, [pc, #344]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 800842e:	4a57      	ldr	r2, [pc, #348]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008430:	429d      	cmp	r5, r3
 8008432:	bf18      	it	ne
 8008434:	428d      	cmpne	r5, r1
 8008436:	bf14      	ite	ne
 8008438:	2301      	movne	r3, #1
 800843a:	2300      	moveq	r3, #0
 800843c:	4295      	cmp	r5, r2
 800843e:	bf0c      	ite	eq
 8008440:	2300      	moveq	r3, #0
 8008442:	f003 0301 	andne.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 80ba 	beq.w	80085c0 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800844c:	4b4c      	ldr	r3, [pc, #304]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800844e:	429d      	cmp	r5, r3
 8008450:	f000 80b6 	beq.w	80085c0 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8008454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008458:	e609      	b.n	800806e <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800845a:	3b48      	subs	r3, #72	; 0x48
 800845c:	3118      	adds	r1, #24
 800845e:	3218      	adds	r2, #24
 8008460:	429d      	cmp	r5, r3
 8008462:	bf18      	it	ne
 8008464:	428d      	cmpne	r5, r1
 8008466:	bf14      	ite	ne
 8008468:	2301      	movne	r3, #1
 800846a:	2300      	moveq	r3, #0
 800846c:	4295      	cmp	r5, r2
 800846e:	bf0c      	ite	eq
 8008470:	2300      	moveq	r3, #0
 8008472:	f003 0301 	andne.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 80b4 	beq.w	80085e4 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800847c:	4b40      	ldr	r3, [pc, #256]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800847e:	429d      	cmp	r5, r3
 8008480:	f000 80b0 	beq.w	80085e4 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8008484:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8008488:	e61e      	b.n	80080c8 <HAL_DMAEx_MultiBufferStart_IT+0x44c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800848a:	4b3f      	ldr	r3, [pc, #252]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 800848c:	493d      	ldr	r1, [pc, #244]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800848e:	4a3f      	ldr	r2, [pc, #252]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008490:	429d      	cmp	r5, r3
 8008492:	bf18      	it	ne
 8008494:	428d      	cmpne	r5, r1
 8008496:	bf14      	ite	ne
 8008498:	2301      	movne	r3, #1
 800849a:	2300      	moveq	r3, #0
 800849c:	4295      	cmp	r5, r2
 800849e:	bf0c      	ite	eq
 80084a0:	2300      	moveq	r3, #0
 80084a2:	f003 0301 	andne.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 8093 	beq.w	80085d2 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80084ac:	4b34      	ldr	r3, [pc, #208]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80084ae:	429d      	cmp	r5, r3
 80084b0:	f000 808f 	beq.w	80085d2 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80084b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084b8:	e5c1      	b.n	800803e <HAL_DMAEx_MultiBufferStart_IT+0x3c2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80084ba:	4b32      	ldr	r3, [pc, #200]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80084bc:	4932      	ldr	r1, [pc, #200]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 80084be:	4a33      	ldr	r2, [pc, #204]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 80084c0:	429d      	cmp	r5, r3
 80084c2:	bf18      	it	ne
 80084c4:	428d      	cmpne	r5, r1
 80084c6:	bf14      	ite	ne
 80084c8:	2301      	movne	r3, #1
 80084ca:	2300      	moveq	r3, #0
 80084cc:	4295      	cmp	r5, r2
 80084ce:	bf0c      	ite	eq
 80084d0:	2300      	moveq	r3, #0
 80084d2:	f003 0301 	andne.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 808a 	beq.w	80085f0 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 80084dc:	4b28      	ldr	r3, [pc, #160]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80084de:	429d      	cmp	r5, r3
 80084e0:	f000 8086 	beq.w	80085f0 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 80084e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084e8:	e635      	b.n	8008156 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80084ea:	4b27      	ldr	r3, [pc, #156]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 80084ec:	4925      	ldr	r1, [pc, #148]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80084ee:	4a27      	ldr	r2, [pc, #156]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 80084f0:	429d      	cmp	r5, r3
 80084f2:	bf18      	it	ne
 80084f4:	428d      	cmpne	r5, r1
 80084f6:	bf14      	ite	ne
 80084f8:	2301      	movne	r3, #1
 80084fa:	2300      	moveq	r3, #0
 80084fc:	4295      	cmp	r5, r2
 80084fe:	bf0c      	ite	eq
 8008500:	2300      	moveq	r3, #0
 8008502:	f003 0301 	andne.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d060      	beq.n	80085cc <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800850a:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800850c:	429d      	cmp	r5, r3
 800850e:	d05d      	beq.n	80085cc <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8008510:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008514:	e49a      	b.n	8007e4c <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008516:	4b1c      	ldr	r3, [pc, #112]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008518:	491a      	ldr	r1, [pc, #104]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800851a:	4a1c      	ldr	r2, [pc, #112]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 800851c:	429d      	cmp	r5, r3
 800851e:	bf18      	it	ne
 8008520:	428d      	cmpne	r5, r1
 8008522:	bf14      	ite	ne
 8008524:	2301      	movne	r3, #1
 8008526:	2300      	moveq	r3, #0
 8008528:	4295      	cmp	r5, r2
 800852a:	bf0c      	ite	eq
 800852c:	2300      	moveq	r3, #0
 800852e:	f003 0301 	andne.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d050      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8008536:	4b12      	ldr	r3, [pc, #72]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008538:	429d      	cmp	r5, r3
 800853a:	d04d      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800853c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008540:	e5f1      	b.n	8008126 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008542:	4b11      	ldr	r3, [pc, #68]	; (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008544:	490f      	ldr	r1, [pc, #60]	; (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008546:	4a11      	ldr	r2, [pc, #68]	; (800858c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008548:	429d      	cmp	r5, r3
 800854a:	bf18      	it	ne
 800854c:	428d      	cmpne	r5, r1
 800854e:	bf14      	ite	ne
 8008550:	2301      	movne	r3, #1
 8008552:	2300      	moveq	r3, #0
 8008554:	4295      	cmp	r5, r2
 8008556:	bf0c      	ite	eq
 8008558:	2300      	moveq	r3, #0
 800855a:	f003 0301 	andne.w	r3, r3, #1
 800855e:	b363      	cbz	r3, 80085ba <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008562:	429d      	cmp	r5, r3
 8008564:	d029      	beq.n	80085ba <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8008566:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800856a:	e44f      	b.n	8007e0c <HAL_DMAEx_MultiBufferStart_IT+0x190>
 800856c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008570:	f7ff bbda 	b.w	8007d28 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008574:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008578:	e669      	b.n	800824e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800857a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800857e:	e64d      	b.n	800821c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
 8008580:	400264a0 	.word	0x400264a0
 8008584:	40026440 	.word	0x40026440
 8008588:	40026040 	.word	0x40026040
 800858c:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008590:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008594:	e629      	b.n	80081ea <HAL_DMAEx_MultiBufferStart_IT+0x56e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800859a:	e60d      	b.n	80081b8 <HAL_DMAEx_MultiBufferStart_IT+0x53c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800859c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80085a0:	e406      	b.n	8007db0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80085a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085a6:	e46a      	b.n	8007e7e <HAL_DMAEx_MultiBufferStart_IT+0x202>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80085a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80085ac:	e4ac      	b.n	8007f08 <HAL_DMAEx_MultiBufferStart_IT+0x28c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80085ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085b2:	e47b      	b.n	8007eac <HAL_DMAEx_MultiBufferStart_IT+0x230>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80085b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80085b8:	e48f      	b.n	8007eda <HAL_DMAEx_MultiBufferStart_IT+0x25e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80085ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80085be:	e425      	b.n	8007e0c <HAL_DMAEx_MultiBufferStart_IT+0x190>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80085c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80085c4:	e553      	b.n	800806e <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80085c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085ca:	e521      	b.n	8008010 <HAL_DMAEx_MultiBufferStart_IT+0x394>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80085cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80085d0:	e43c      	b.n	8007e4c <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80085d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80085d6:	e532      	b.n	800803e <HAL_DMAEx_MultiBufferStart_IT+0x3c2>
 80085d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80085dc:	e5a3      	b.n	8008126 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80085de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085e2:	e4fe      	b.n	8007fe2 <HAL_DMAEx_MultiBufferStart_IT+0x366>
 80085e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085e8:	e56e      	b.n	80080c8 <HAL_DMAEx_MultiBufferStart_IT+0x44c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80085ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085ee:	e583      	b.n	80080f8 <HAL_DMAEx_MultiBufferStart_IT+0x47c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80085f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80085f4:	e5af      	b.n	8008156 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80085f6:	bf00      	nop

080085f8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80085f8:	b530      	push	{r4, r5, lr}
  __IO uint32_t tmpreg = 0;
 80085fa:	2300      	movs	r3, #0
{
 80085fc:	b083      	sub	sp, #12
 80085fe:	4605      	mov	r5, r0
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008600:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8008604:	9301      	str	r3, [sp, #4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008606:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	591a      	ldr	r2, [r3, r4]
 800860c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008610:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8008612:	591b      	ldr	r3, [r3, r4]
 8008614:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008616:	f7fd ffb7 	bl	8006588 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	9a01      	ldr	r2, [sp, #4]
 800861e:	511a      	str	r2, [r3, r4]
}
 8008620:	b003      	add	sp, #12
 8008622:	bd30      	pop	{r4, r5, pc}

08008624 <ETH_MACDMAConfig>:
{
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8008628:	2900      	cmp	r1, #0
 800862a:	d15e      	bne.n	80086ea <ETH_MACDMAConfig+0xc6>
 800862c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8008630:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008632:	69e3      	ldr	r3, [r4, #28]
 8008634:	b90b      	cbnz	r3, 800863a <ETH_MACDMAConfig+0x16>
 8008636:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 800863a:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800863c:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800863e:	4b2f      	ldr	r3, [pc, #188]	; (80086fc <ETH_MACDMAConfig+0xd8>)
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008640:	2600      	movs	r6, #0
  tmpreg = (heth->Instance)->MACCR;
 8008642:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8008644:	402b      	ands	r3, r5
    tmpreg = (heth->Instance)->DMAOMR;
 8008646:	f241 0518 	movw	r5, #4120	; 0x1018
 800864a:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800864c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8008650:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008652:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008654:	f7fd ff98 	bl	8006588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8008658:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800865a:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800865c:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800865e:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008660:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8008662:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008664:	f7fd ff90 	bl	8006588 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8008668:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800866a:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800866e:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8008670:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008672:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8008674:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8008676:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8008678:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800867a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800867e:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8008680:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008682:	f7fd ff81 	bl	8006588 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8008686:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008688:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800868a:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800868c:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800868e:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008690:	f7fd ff7a 	bl	8006588 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8008694:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008696:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8008698:	4919      	ldr	r1, [pc, #100]	; (8008700 <ETH_MACDMAConfig+0xdc>)
    (heth->Instance)->MACVLANTR = tmpreg;
 800869a:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800869c:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800869e:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80086a0:	4a18      	ldr	r2, [pc, #96]	; (8008704 <ETH_MACDMAConfig+0xe0>)
 80086a2:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80086a4:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80086a6:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80086a8:	f7fd ff6e 	bl	8006588 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80086ac:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80086ae:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80086b0:	4a15      	ldr	r2, [pc, #84]	; (8008708 <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->DMAOMR = tmpreg;
 80086b2:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80086b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b8:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80086ba:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80086bc:	f7fd ff64 	bl	8006588 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80086c0:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80086c2:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 80086c4:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80086c8:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 80086ca:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80086cc:	d105      	bne.n	80086da <ETH_MACDMAConfig+0xb6>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80086ce:	f241 011c 	movw	r1, #4124	; 0x101c
 80086d2:	4a0e      	ldr	r2, [pc, #56]	; (800870c <ETH_MACDMAConfig+0xe8>)
 80086d4:	5858      	ldr	r0, [r3, r1]
 80086d6:	4302      	orrs	r2, r0
 80086d8:	505a      	str	r2, [r3, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80086da:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80086dc:	490c      	ldr	r1, [pc, #48]	; (8008710 <ETH_MACDMAConfig+0xec>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80086de:	8898      	ldrh	r0, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80086e0:	4a0c      	ldr	r2, [pc, #48]	; (8008714 <ETH_MACDMAConfig+0xf0>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80086e2:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80086e4:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80086e6:	6013      	str	r3, [r2, #0]
}
 80086e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80086ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 80086ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086f2:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80086f6:	e9c0 3202 	strd	r3, r2, [r0, #8]
 80086fa:	e79a      	b.n	8008632 <ETH_MACDMAConfig+0xe>
 80086fc:	ff20810f 	.word	0xff20810f
 8008700:	f8de3f23 	.word	0xf8de3f23
 8008704:	02200004 	.word	0x02200004
 8008708:	02c12080 	.word	0x02c12080
 800870c:	00010040 	.word	0x00010040
 8008710:	40028040 	.word	0x40028040
 8008714:	40028044 	.word	0x40028044

08008718 <HAL_ETH_DMATxDescListInit>:
{
 8008718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	469e      	mov	lr, r3
  __HAL_LOCK(heth);
 800871e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008722:	2b01      	cmp	r3, #1
 8008724:	d045      	beq.n	80087b2 <HAL_ETH_DMATxDescListInit+0x9a>
 8008726:	4680      	mov	r8, r0
  heth->State = HAL_ETH_STATE_BUSY;
 8008728:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 800872a:	2001      	movs	r0, #1
  heth->TxDesc = DMATxDescTab;
 800872c:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 8008730:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8008734:	f888 3044 	strb.w	r3, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 8008738:	f1be 0f00 	cmp.w	lr, #0
 800873c:	d02b      	beq.n	8008796 <HAL_ETH_DMATxDescListInit+0x7e>
 800873e:	f8d8 a01c 	ldr.w	sl, [r8, #28]
 8008742:	f10e 39ff 	add.w	r9, lr, #4294967295
 8008746:	460c      	mov	r4, r1
 8008748:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800874a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800874e:	e009      	b.n	8008764 <HAL_ETH_DMATxDescListInit+0x4c>
 8008750:	f105 0c01 	add.w	ip, r5, #1
 8008754:	4637      	mov	r7, r6
 8008756:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 800875a:	45e6      	cmp	lr, ip
 800875c:	60e7      	str	r7, [r4, #12]
 800875e:	4665      	mov	r5, ip
 8008760:	4634      	mov	r4, r6
 8008762:	d918      	bls.n	8008796 <HAL_ETH_DMATxDescListInit+0x7e>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8008764:	f104 0620 	add.w	r6, r4, #32
 8008768:	f105 0c01 	add.w	ip, r5, #1
 800876c:	460f      	mov	r7, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800876e:	6020      	str	r0, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8008770:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008772:	f1ba 0f00 	cmp.w	sl, #0
 8008776:	d103      	bne.n	8008780 <HAL_ETH_DMATxDescListInit+0x68>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800877e:	6023      	str	r3, [r4, #0]
    if(i < (TxBuffCount-1))
 8008780:	45a9      	cmp	r9, r5
 8008782:	d8e5      	bhi.n	8008750 <HAL_ETH_DMATxDescListInit+0x38>
 8008784:	f104 0620 	add.w	r6, r4, #32
  for(i=0; i < TxBuffCount; i++)
 8008788:	45e6      	cmp	lr, ip
 800878a:	60e7      	str	r7, [r4, #12]
 800878c:	4665      	mov	r5, ip
 800878e:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8008792:	4634      	mov	r4, r6
 8008794:	d8e6      	bhi.n	8008764 <HAL_ETH_DMATxDescListInit+0x4c>
  __HAL_UNLOCK(heth);
 8008796:	2300      	movs	r3, #0
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8008798:	f8d8 4000 	ldr.w	r4, [r8]
 800879c:	f241 0010 	movw	r0, #4112	; 0x1010
  heth->State= HAL_ETH_STATE_READY;
 80087a0:	2201      	movs	r2, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80087a2:	5021      	str	r1, [r4, r0]
  return HAL_OK;
 80087a4:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 80087a6:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80087aa:	f888 3045 	strb.w	r3, [r8, #69]	; 0x45
}
 80087ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 80087b2:	2002      	movs	r0, #2
}
 80087b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080087b8 <HAL_ETH_DMARxDescListInit>:
{
 80087b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087bc:	4686      	mov	lr, r0
  __HAL_LOCK(heth);
 80087be:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 80087c2:	2801      	cmp	r0, #1
 80087c4:	d033      	beq.n	800882e <HAL_ETH_DMARxDescListInit+0x76>
 80087c6:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80087c8:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 80087ca:	f8ce 1028 	str.w	r1, [lr, #40]	; 0x28
  __HAL_LOCK(heth);
 80087ce:	f88e 4045 	strb.w	r4, [lr, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80087d2:	f88e 0044 	strb.w	r0, [lr, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 80087d6:	b1e3      	cbz	r3, 8008812 <HAL_ETH_DMARxDescListInit+0x5a>
 80087d8:	f103 39ff 	add.w	r9, r3, #4294967295
 80087dc:	460c      	mov	r4, r1
 80087de:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80087e0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80087e4:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 80087e8:	45a9      	cmp	r9, r5
 80087ea:	f104 0620 	add.w	r6, r4, #32
 80087ee:	f105 0c01 	add.w	ip, r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80087f2:	460f      	mov	r7, r1
 80087f4:	bf94      	ite	ls
 80087f6:	f104 0620 	addls.w	r6, r4, #32
 80087fa:	4637      	movhi	r7, r6
  for(i=0; i < RxBuffCount; i++)
 80087fc:	4563      	cmp	r3, ip
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80087fe:	60a2      	str	r2, [r4, #8]
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8008800:	f8c4 8000 	str.w	r8, [r4]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8008804:	4665      	mov	r5, ip
 8008806:	6060      	str	r0, [r4, #4]
    if(i < (RxBuffCount-1))
 8008808:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 800880c:	60e7      	str	r7, [r4, #12]
  for(i=0; i < RxBuffCount; i++)
 800880e:	4634      	mov	r4, r6
 8008810:	d8ea      	bhi.n	80087e8 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_UNLOCK(heth);
 8008812:	2300      	movs	r3, #0
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8008814:	f8de 4000 	ldr.w	r4, [lr]
 8008818:	f241 000c 	movw	r0, #4108	; 0x100c
  heth->State= HAL_ETH_STATE_READY;
 800881c:	2201      	movs	r2, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800881e:	5021      	str	r1, [r4, r0]
  return HAL_OK;
 8008820:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 8008822:	f88e 2044 	strb.w	r2, [lr, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008826:	f88e 3045 	strb.w	r3, [lr, #69]	; 0x45
}
 800882a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(heth);
 800882e:	2002      	movs	r0, #2
}
 8008830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008834 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8008834:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008838:	2b01      	cmp	r3, #1
 800883a:	d074      	beq.n	8008926 <HAL_ETH_TransmitFrame+0xf2>
 800883c:	4602      	mov	r2, r0
  heth->State = HAL_ETH_STATE_BUSY;
 800883e:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 8008840:	2001      	movs	r0, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8008842:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_LOCK(heth);
 8008846:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
  if (FrameLength == 0) 
 800884a:	2900      	cmp	r1, #0
 800884c:	d038      	beq.n	80088c0 <HAL_ETH_TransmitFrame+0x8c>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800884e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
 8008850:	b4f0      	push	{r4, r5, r6, r7}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008852:	681c      	ldr	r4, [r3, #0]
 8008854:	2c00      	cmp	r4, #0
 8008856:	db5c      	blt.n	8008912 <HAL_ETH_TransmitFrame+0xde>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8008858:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800885c:	4281      	cmp	r1, r0
 800885e:	d936      	bls.n	80088ce <HAL_ETH_TransmitFrame+0x9a>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8008860:	4d32      	ldr	r5, [pc, #200]	; (800892c <HAL_ETH_TransmitFrame+0xf8>)
 8008862:	fba5 4501 	umull	r4, r5, r5, r1
 8008866:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8008868:	fb00 1015 	mls	r0, r0, r5, r1
 800886c:	b368      	cbz	r0, 80088ca <HAL_ETH_TransmitFrame+0x96>
      bufcount++;
 800886e:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8008870:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8008874:	4c2e      	ldr	r4, [pc, #184]	; (8008930 <HAL_ETH_TransmitFrame+0xfc>)
    for (i=0; i< bufcount; i++)
 8008876:	2000      	movs	r0, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8008878:	f240 56f4 	movw	r6, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800887c:	fb04 1105 	mla	r1, r4, r5, r1
      if (i == (bufcount-1))
 8008880:	1e6f      	subs	r7, r5, #1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8008882:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8008886:	e00f      	b.n	80088a8 <HAL_ETH_TransmitFrame+0x74>
      if (i == (bufcount-1))
 8008888:	4287      	cmp	r7, r0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800888a:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 800888c:	d104      	bne.n	8008898 <HAL_ETH_TransmitFrame+0x64>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800888e:	681c      	ldr	r4, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8008890:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8008892:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8008896:	601c      	str	r4, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8008898:	681c      	ldr	r4, [r3, #0]
    for (i=0; i< bufcount; i++)
 800889a:	3001      	adds	r0, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800889c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80088a0:	42a8      	cmp	r0, r5
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80088a2:	601c      	str	r4, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80088a4:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80088a6:	d03c      	beq.n	8008922 <HAL_ETH_TransmitFrame+0xee>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80088a8:	681c      	ldr	r4, [r3, #0]
 80088aa:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 80088ae:	601c      	str	r4, [r3, #0]
      if (i == 0) 
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d1e9      	bne.n	8008888 <HAL_ETH_TransmitFrame+0x54>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80088b4:	681c      	ldr	r4, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80088b6:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80088b8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80088bc:	601c      	str	r4, [r3, #0]
      if (i == (bufcount-1))
 80088be:	e7eb      	b.n	8008898 <HAL_ETH_TransmitFrame+0x64>
    heth->State = HAL_ETH_STATE_READY;
 80088c0:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80088c4:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 80088c8:	4770      	bx	lr
  if (bufcount == 1)
 80088ca:	2d01      	cmp	r5, #1
 80088cc:	d1d0      	bne.n	8008870 <HAL_ETH_TransmitFrame+0x3c>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80088ce:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80088d0:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80088d4:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80088d6:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80088da:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80088dc:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80088e4:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80088e6:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80088e8:	6813      	ldr	r3, [r2, #0]
 80088ea:	f241 0114 	movw	r1, #4116	; 0x1014
 80088ee:	5858      	ldr	r0, [r3, r1]
 80088f0:	0740      	lsls	r0, r0, #29
 80088f2:	d505      	bpl.n	8008900 <HAL_ETH_TransmitFrame+0xcc>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80088f4:	2504      	movs	r5, #4
    (heth->Instance)->DMATPDR = 0;
 80088f6:	f241 0004 	movw	r0, #4100	; 0x1004
 80088fa:	2400      	movs	r4, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80088fc:	505d      	str	r5, [r3, r1]
    (heth->Instance)->DMATPDR = 0;
 80088fe:	501c      	str	r4, [r3, r0]
  __HAL_UNLOCK(heth);
 8008900:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8008902:	2101      	movs	r1, #1
  return HAL_OK;
 8008904:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8008906:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800890a:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800890e:	bcf0      	pop	{r4, r5, r6, r7}
 8008910:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8008912:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 8008914:	2300      	movs	r3, #0
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8008916:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800891a:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800891e:	bcf0      	pop	{r4, r5, r6, r7}
 8008920:	4770      	bx	lr
 8008922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008924:	e7e0      	b.n	80088e8 <HAL_ETH_TransmitFrame+0xb4>
  __HAL_LOCK(heth);
 8008926:	2002      	movs	r0, #2
}
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	ac02b00b 	.word	0xac02b00b
 8008930:	fffffa0c 	.word	0xfffffa0c

08008934 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8008934:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008938:	2b01      	cmp	r3, #1
 800893a:	d02f      	beq.n	800899c <HAL_ETH_GetReceivedFrame_IT+0x68>
 800893c:	4602      	mov	r2, r0
 800893e:	2101      	movs	r1, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8008940:	2002      	movs	r0, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8008942:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8008944:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(heth);
 8008946:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800894a:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	2800      	cmp	r0, #0
 8008952:	db16      	blt.n	8008982 <HAL_ETH_GetReceivedFrame_IT+0x4e>
      heth->RxFrameInfos.SegCount = 1;   
 8008954:	460c      	mov	r4, r1
  uint32_t descriptorscancounter = 0;
 8008956:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8008958:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800895a:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800895c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8008960:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008964:	d015      	beq.n	8008992 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8008966:	6819      	ldr	r1, [r3, #0]
 8008968:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 800896c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800896e:	d117      	bne.n	80089a0 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8008970:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 8008972:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8008974:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 8008976:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8008978:	6819      	ldr	r1, [r3, #0]
 800897a:	2900      	cmp	r1, #0
 800897c:	db01      	blt.n	8008982 <HAL_ETH_GetReceivedFrame_IT+0x4e>
 800897e:	2804      	cmp	r0, #4
 8008980:	d1ea      	bne.n	8008958 <HAL_ETH_GetReceivedFrame_IT+0x24>
  heth->State = HAL_ETH_STATE_READY;
 8008982:	2001      	movs	r0, #1
  __HAL_UNLOCK(heth);
 8008984:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8008986:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800898a:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800898e:	bc70      	pop	{r4, r5, r6}
 8008990:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8008992:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8008994:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 8008996:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8008998:	6293      	str	r3, [r2, #40]	; 0x28
 800899a:	e7ed      	b.n	8008978 <HAL_ETH_GetReceivedFrame_IT+0x44>
  __HAL_LOCK(heth);
 800899c:	2002      	movs	r0, #2
}
 800899e:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 80089a0:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80089a2:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 80089a4:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 80089a6:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 80089a8:	d011      	beq.n	80089ce <HAL_ETH_GetReceivedFrame_IT+0x9a>
 80089aa:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80089ac:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 80089ae:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80089b0:	6880      	ldr	r0, [r0, #8]
      heth->State = HAL_ETH_STATE_READY;
 80089b2:	2501      	movs	r5, #1
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80089b4:	f3c1 410d 	ubfx	r1, r1, #16, #14
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80089b8:	68de      	ldr	r6, [r3, #12]
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80089ba:	6410      	str	r0, [r2, #64]	; 0x40
      return HAL_OK;
 80089bc:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80089be:	3904      	subs	r1, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80089c0:	6296      	str	r6, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 80089c2:	f882 5044 	strb.w	r5, [r2, #68]	; 0x44
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80089c6:	63d1      	str	r1, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 80089c8:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 80089cc:	e7df      	b.n	800898e <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80089ce:	4618      	mov	r0, r3
 80089d0:	6313      	str	r3, [r2, #48]	; 0x30
 80089d2:	e7eb      	b.n	80089ac <HAL_ETH_GetReceivedFrame_IT+0x78>

080089d4 <HAL_ETH_TxCpltCallback>:
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop

080089d8 <HAL_ETH_ErrorCallback>:
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop

080089dc <HAL_ETH_IRQHandler>:
{
 80089dc:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80089de:	6803      	ldr	r3, [r0, #0]
 80089e0:	f241 0614 	movw	r6, #4116	; 0x1014
{
 80089e4:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80089e6:	599d      	ldr	r5, [r3, r6]
 80089e8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80089ec:	d123      	bne.n	8008a36 <HAL_ETH_IRQHandler+0x5a>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80089ee:	599a      	ldr	r2, [r3, r6]
 80089f0:	07d2      	lsls	r2, r2, #31
 80089f2:	d416      	bmi.n	8008a22 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80089f4:	f241 0514 	movw	r5, #4116	; 0x1014
 80089f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80089fc:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80089fe:	595b      	ldr	r3, [r3, r5]
 8008a00:	041b      	lsls	r3, r3, #16
 8008a02:	d400      	bmi.n	8008a06 <HAL_ETH_IRQHandler+0x2a>
}
 8008a04:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_ErrorCallback(heth);
 8008a06:	4620      	mov	r0, r4
 8008a08:	f7ff ffe6 	bl	80089d8 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8008a0c:	6821      	ldr	r1, [r4, #0]
 8008a0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8008a12:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 8008a14:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8008a16:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 8008a18:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8008a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8008a20:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_TxCpltCallback(heth);
 8008a22:	f7ff ffd7 	bl	80089d4 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8008a26:	2201      	movs	r2, #1
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8008a2c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8008a30:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008a34:	e7de      	b.n	80089f4 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 8008a36:	f009 f801 	bl	8011a3c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 8008a3e:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 8008a40:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8008a42:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8008a44:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8008a48:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008a4c:	e7d2      	b.n	80089f4 <HAL_ETH_IRQHandler+0x18>
 8008a4e:	bf00      	nop

08008a50 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8008a50:	8a03      	ldrh	r3, [r0, #16]
 8008a52:	2b20      	cmp	r3, #32
{
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4604      	mov	r4, r0
 8008a58:	460e      	mov	r6, r1
 8008a5a:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8008a5c:	d834      	bhi.n	8008ac8 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8008a5e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008a62:	2b82      	cmp	r3, #130	; 0x82
 8008a64:	d039      	beq.n	8008ada <HAL_ETH_ReadPHYRegister+0x8a>
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8008a66:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008a68:	01b1      	lsls	r1, r6, #6
  tmpreg = heth->Instance->MACMIIAR;
 8008a6a:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8008a6c:	2282      	movs	r2, #130	; 0x82
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8008a6e:	02db      	lsls	r3, r3, #11
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008a70:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8008a74:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8008a78:	b29b      	uxth	r3, r3
  tmpreg = heth->Instance->MACMIIAR;
 8008a7a:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008a7c:	430b      	orrs	r3, r1
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8008a7e:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008a82:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8008a84:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 8008a88:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8008a8a:	f7fd fd77 	bl	800657c <HAL_GetTick>
 8008a8e:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008a90:	e004      	b.n	8008a9c <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 8008a92:	6821      	ldr	r1, [r4, #0]
 8008a94:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008a96:	f013 0301 	ands.w	r3, r3, #1
 8008a9a:	d00d      	beq.n	8008ab8 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8008a9c:	f7fd fd6e 	bl	800657c <HAL_GetTick>
 8008aa0:	1b83      	subs	r3, r0, r6
 8008aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa6:	d3f4      	bcc.n	8008a92 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8008aa8:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8008aaa:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8008aac:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8008aae:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8008ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8008ab8:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 8008aba:	2101      	movs	r1, #1
  return HAL_OK;
 8008abc:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8008abe:	b292      	uxth	r2, r2
 8008ac0:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8008ac2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8008ac8:	f240 5116 	movw	r1, #1302	; 0x516
 8008acc:	4804      	ldr	r0, [pc, #16]	; (8008ae0 <HAL_ETH_ReadPHYRegister+0x90>)
 8008ace:	f7fb f83b 	bl	8003b48 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8008ad2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ad6:	2b82      	cmp	r3, #130	; 0x82
 8008ad8:	d1c5      	bne.n	8008a66 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 8008ada:	2002      	movs	r0, #2
}
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
 8008ade:	bf00      	nop
 8008ae0:	080289e4 	.word	0x080289e4

08008ae4 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8008ae4:	8a03      	ldrh	r3, [r0, #16]
 8008ae6:	2b20      	cmp	r3, #32
{
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	4604      	mov	r4, r0
 8008aec:	460d      	mov	r5, r1
 8008aee:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8008af0:	d833      	bhi.n	8008b5a <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8008af2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008af6:	2b42      	cmp	r3, #66	; 0x42
 8008af8:	d038      	beq.n	8008b6c <HAL_ETH_WritePHYRegister+0x88>
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8008afa:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8008afc:	01a9      	lsls	r1, r5, #6
  tmpreg = heth->Instance->MACMIIAR;
 8008afe:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8008b00:	2242      	movs	r2, #66	; 0x42
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8008b02:	02db      	lsls	r3, r3, #11
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8008b04:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8008b08:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8008b0c:	b2b6      	uxth	r6, r6
 8008b0e:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8008b10:	b29b      	uxth	r3, r3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8008b12:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8008b14:	f005 021c 	and.w	r2, r5, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8008b1c:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 8008b20:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8008b22:	f7fd fd2b 	bl	800657c <HAL_GetTick>
 8008b26:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008b28:	e004      	b.n	8008b34 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008b2e:	f013 0301 	ands.w	r3, r3, #1
 8008b32:	d00d      	beq.n	8008b50 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8008b34:	f7fd fd22 	bl	800657c <HAL_GetTick>
 8008b38:	1b43      	subs	r3, r0, r5
 8008b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3e:	d3f4      	bcc.n	8008b2a <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 8008b40:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8008b42:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8008b44:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8008b46:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8008b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8008b50:	2201      	movs	r2, #1
  return HAL_OK; 
 8008b52:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8008b54:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8008b5a:	f240 515e 	movw	r1, #1374	; 0x55e
 8008b5e:	4804      	ldr	r0, [pc, #16]	; (8008b70 <HAL_ETH_WritePHYRegister+0x8c>)
 8008b60:	f7fa fff2 	bl	8003b48 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8008b64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008b68:	2b42      	cmp	r3, #66	; 0x42
 8008b6a:	d1c6      	bne.n	8008afa <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 8008b6c:	2002      	movs	r0, #2
}
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	080289e4 	.word	0x080289e4

08008b74 <HAL_ETH_Init>:
{
 8008b74:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 8008b76:	2300      	movs	r3, #0
{
 8008b78:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 8008b7a:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	f000 80f3 	beq.w	8008d68 <HAL_ETH_Init+0x1f4>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8008b82:	6843      	ldr	r3, [r0, #4]
 8008b84:	4604      	mov	r4, r0
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	f200 809c 	bhi.w	8008cc4 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8008b8c:	69a3      	ldr	r3, [r4, #24]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	f200 808f 	bhi.w	8008cb2 <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8008b94:	69e3      	ldr	r3, [r4, #28]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d873      	bhi.n	8008c82 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8008b9a:	6a23      	ldr	r3, [r4, #32]
 8008b9c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8008ba0:	d177      	bne.n	8008c92 <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 8008ba2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ba6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d07b      	beq.n	8008ca6 <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bae:	4a90      	ldr	r2, [pc, #576]	; (8008df0 <HAL_ETH_Init+0x27c>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8008bb0:	6823      	ldr	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bb2:	6c51      	ldr	r1, [r2, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8008bb4:	488f      	ldr	r0, [pc, #572]	; (8008df4 <HAL_ETH_Init+0x280>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8008bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bba:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8008bbe:	6451      	str	r1, [r2, #68]	; 0x44
 8008bc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008bc2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008bc6:	9201      	str	r2, [sp, #4]
 8008bc8:	9a01      	ldr	r2, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8008bca:	6842      	ldr	r2, [r0, #4]
 8008bcc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008bd0:	6042      	str	r2, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8008bd2:	6842      	ldr	r2, [r0, #4]
 8008bd4:	6a21      	ldr	r1, [r4, #32]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	6042      	str	r2, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	f042 0201 	orr.w	r2, r2, #1
 8008be0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8008be2:	f7fd fccb 	bl	800657c <HAL_GetTick>
 8008be6:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008be8:	e005      	b.n	8008bf6 <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8008bea:	f7fd fcc7 	bl	800657c <HAL_GetTick>
 8008bee:	1b43      	subs	r3, r0, r5
 8008bf0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008bf4:	d86f      	bhi.n	8008cd6 <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	07d0      	lsls	r0, r2, #31
 8008c00:	d4f3      	bmi.n	8008bea <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 8008c02:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8008c04:	f002 fd62 	bl	800b6cc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8008c08:	4b7b      	ldr	r3, [pc, #492]	; (8008df8 <HAL_ETH_Init+0x284>)
 8008c0a:	4a7c      	ldr	r2, [pc, #496]	; (8008dfc <HAL_ETH_Init+0x288>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8008c0c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8008c10:	4403      	add	r3, r0
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d272      	bcs.n	8008cfc <HAL_ETH_Init+0x188>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8008c16:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8008c1a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8008c1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008c20:	2100      	movs	r1, #0
 8008c22:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8008c24:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8008c26:	f7ff ff5d 	bl	8008ae4 <HAL_ETH_WritePHYRegister>
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d15b      	bne.n	8008ce8 <HAL_ETH_Init+0x174>
  HAL_Delay(PHY_RESET_DELAY);
 8008c30:	20ff      	movs	r0, #255	; 0xff
 8008c32:	f7fd fca9 	bl	8006588 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008c36:	6863      	ldr	r3, [r4, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d176      	bne.n	8008d2a <HAL_ETH_Init+0x1b6>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008c3c:	68a3      	ldr	r3, [r4, #8]
 8008c3e:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8008c42:	f040 809c 	bne.w	8008d7e <HAL_ETH_Init+0x20a>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8008c46:	68e3      	ldr	r3, [r4, #12]
 8008c48:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8008c4c:	f040 8090 	bne.w	8008d70 <HAL_ETH_Init+0x1fc>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8008c50:	08db      	lsrs	r3, r3, #3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8008c52:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8008c54:	2100      	movs	r1, #0
 8008c56:	4620      	mov	r0, r4
 8008c58:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8008c5c:	b292      	uxth	r2, r2
 8008c5e:	f7ff ff41 	bl	8008ae4 <HAL_ETH_WritePHYRegister>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d140      	bne.n	8008ce8 <HAL_ETH_Init+0x174>
    HAL_Delay(PHY_CONFIG_DELAY);
 8008c66:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008c6a:	f7fd fc8d 	bl	8006588 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8008c6e:	4620      	mov	r0, r4
 8008c70:	2100      	movs	r1, #0
 8008c72:	f7ff fcd7 	bl	8008624 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8008c76:	2301      	movs	r3, #1
}
 8008c78:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 8008c7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8008c7e:	b003      	add	sp, #12
 8008c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8008c82:	21e0      	movs	r1, #224	; 0xe0
 8008c84:	485e      	ldr	r0, [pc, #376]	; (8008e00 <HAL_ETH_Init+0x28c>)
 8008c86:	f7fa ff5f 	bl	8003b48 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8008c8a:	6a23      	ldr	r3, [r4, #32]
 8008c8c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8008c90:	d087      	beq.n	8008ba2 <HAL_ETH_Init+0x2e>
 8008c92:	21e1      	movs	r1, #225	; 0xe1
 8008c94:	485a      	ldr	r0, [pc, #360]	; (8008e00 <HAL_ETH_Init+0x28c>)
 8008c96:	f7fa ff57 	bl	8003b48 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 8008c9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008c9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d183      	bne.n	8008bae <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 8008ca6:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 8008ca8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8008cac:	f008 fe36 	bl	801191c <HAL_ETH_MspInit>
 8008cb0:	e77d      	b.n	8008bae <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8008cb2:	21df      	movs	r1, #223	; 0xdf
 8008cb4:	4852      	ldr	r0, [pc, #328]	; (8008e00 <HAL_ETH_Init+0x28c>)
 8008cb6:	f7fa ff47 	bl	8003b48 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8008cba:	69e3      	ldr	r3, [r4, #28]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	f67f af6c 	bls.w	8008b9a <HAL_ETH_Init+0x26>
 8008cc2:	e7de      	b.n	8008c82 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8008cc4:	21de      	movs	r1, #222	; 0xde
 8008cc6:	484e      	ldr	r0, [pc, #312]	; (8008e00 <HAL_ETH_Init+0x28c>)
 8008cc8:	f7fa ff3e 	bl	8003b48 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8008ccc:	69a3      	ldr	r3, [r4, #24]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	f67f af60 	bls.w	8008b94 <HAL_ETH_Init+0x20>
 8008cd4:	e7ed      	b.n	8008cb2 <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8008cd6:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8008cd8:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8008cda:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8008cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	b003      	add	sp, #12
 8008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      heth->State = HAL_ETH_STATE_READY;
 8008ce8:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8008cea:	4620      	mov	r0, r4
 8008cec:	2101      	movs	r1, #1
 8008cee:	f7ff fc99 	bl	8008624 <ETH_MACDMAConfig>
}
 8008cf2:	4628      	mov	r0, r5
      heth->State = HAL_ETH_STATE_READY;
 8008cf4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
}
 8008cf8:	b003      	add	sp, #12
 8008cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8008cfc:	4b41      	ldr	r3, [pc, #260]	; (8008e04 <HAL_ETH_Init+0x290>)
 8008cfe:	4a42      	ldr	r2, [pc, #264]	; (8008e08 <HAL_ETH_Init+0x294>)
 8008d00:	4403      	add	r3, r0
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d90e      	bls.n	8008d24 <HAL_ETH_Init+0x1b0>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8008d06:	4b41      	ldr	r3, [pc, #260]	; (8008e0c <HAL_ETH_Init+0x298>)
 8008d08:	4a41      	ldr	r2, [pc, #260]	; (8008e10 <HAL_ETH_Init+0x29c>)
 8008d0a:	4403      	add	r3, r0
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d384      	bcc.n	8008c1a <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8008d10:	4b40      	ldr	r3, [pc, #256]	; (8008e14 <HAL_ETH_Init+0x2a0>)
 8008d12:	4a41      	ldr	r2, [pc, #260]	; (8008e18 <HAL_ETH_Init+0x2a4>)
 8008d14:	4403      	add	r3, r0
 8008d16:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8008d18:	bf94      	ite	ls
 8008d1a:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8008d1e:	f045 0510 	orrhi.w	r5, r5, #16
 8008d22:	e77a      	b.n	8008c1a <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8008d24:	f045 050c 	orr.w	r5, r5, #12
 8008d28:	e777      	b.n	8008c1a <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 8008d2a:	f7fd fc27 	bl	800657c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008d2e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8008d32:	4606      	mov	r6, r0
 8008d34:	e002      	b.n	8008d3c <HAL_ETH_Init+0x1c8>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	0759      	lsls	r1, r3, #29
 8008d3a:	d426      	bmi.n	8008d8a <HAL_ETH_Init+0x216>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008d3c:	466a      	mov	r2, sp
 8008d3e:	2101      	movs	r1, #1
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7ff fe85 	bl	8008a50 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008d46:	f7fd fc19 	bl	800657c <HAL_GetTick>
 8008d4a:	1b80      	subs	r0, r0, r6
 8008d4c:	42b8      	cmp	r0, r7
 8008d4e:	d9f2      	bls.n	8008d36 <HAL_ETH_Init+0x1c2>
        ETH_MACDMAConfig(heth, err);
 8008d50:	2101      	movs	r1, #1
 8008d52:	4620      	mov	r0, r4
 8008d54:	f7ff fc66 	bl	8008624 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8008d58:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 8008d5a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8008d5c:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8008d5e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8008d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8008d66:	e7bc      	b.n	8008ce2 <HAL_ETH_Init+0x16e>
    return HAL_ERROR;
 8008d68:	2501      	movs	r5, #1
}
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	b003      	add	sp, #12
 8008d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8008d70:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8008d74:	4822      	ldr	r0, [pc, #136]	; (8008e00 <HAL_ETH_Init+0x28c>)
 8008d76:	f7fa fee7 	bl	8003b48 <assert_failed>
 8008d7a:	68e3      	ldr	r3, [r4, #12]
 8008d7c:	e768      	b.n	8008c50 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008d7e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8008d82:	481f      	ldr	r0, [pc, #124]	; (8008e00 <HAL_ETH_Init+0x28c>)
 8008d84:	f7fa fee0 	bl	8003b48 <assert_failed>
 8008d88:	e75d      	b.n	8008c46 <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8008d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4620      	mov	r0, r4
 8008d92:	f7ff fea7 	bl	8008ae4 <HAL_ETH_WritePHYRegister>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d1a6      	bne.n	8008ce8 <HAL_ETH_Init+0x174>
    tickstart = HAL_GetTick();
 8008d9a:	f7fd fbef 	bl	800657c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8008d9e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8008da2:	4606      	mov	r6, r0
 8008da4:	e002      	b.n	8008dac <HAL_ETH_Init+0x238>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	069a      	lsls	r2, r3, #26
 8008daa:	d40a      	bmi.n	8008dc2 <HAL_ETH_Init+0x24e>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008dac:	466a      	mov	r2, sp
 8008dae:	2101      	movs	r1, #1
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7ff fe4d 	bl	8008a50 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8008db6:	f7fd fbe1 	bl	800657c <HAL_GetTick>
 8008dba:	1b80      	subs	r0, r0, r6
 8008dbc:	42b8      	cmp	r0, r7
 8008dbe:	d9f2      	bls.n	8008da6 <HAL_ETH_Init+0x232>
 8008dc0:	e7c6      	b.n	8008d50 <HAL_ETH_Init+0x1dc>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8008dc2:	466a      	mov	r2, sp
 8008dc4:	2110      	movs	r1, #16
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f7ff fe42 	bl	8008a50 <HAL_ETH_ReadPHYRegister>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d18b      	bne.n	8008ce8 <HAL_ETH_Init+0x174>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008dd0:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8008dd2:	f013 0204 	ands.w	r2, r3, #4
 8008dd6:	bf18      	it	ne
 8008dd8:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8008ddc:	079b      	lsls	r3, r3, #30
 8008dde:	60e2      	str	r2, [r4, #12]
 8008de0:	d501      	bpl.n	8008de6 <HAL_ETH_Init+0x272>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8008de2:	60a0      	str	r0, [r4, #8]
 8008de4:	e743      	b.n	8008c6e <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 8008de6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008dea:	60a3      	str	r3, [r4, #8]
 8008dec:	e73f      	b.n	8008c6e <HAL_ETH_Init+0xfa>
 8008dee:	bf00      	nop
 8008df0:	40023800 	.word	0x40023800
 8008df4:	40013800 	.word	0x40013800
 8008df8:	feced300 	.word	0xfeced300
 8008dfc:	00e4e1c0 	.word	0x00e4e1c0
 8008e00:	080289e4 	.word	0x080289e4
 8008e04:	fde9f140 	.word	0xfde9f140
 8008e08:	017d783f 	.word	0x017d783f
 8008e0c:	fc6c7900 	.word	0xfc6c7900
 8008e10:	02625a00 	.word	0x02625a00
 8008e14:	fa0a1f00 	.word	0xfa0a1f00
 8008e18:	02faf07f 	.word	0x02faf07f

08008e1c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8008e1c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d039      	beq.n	8008e98 <HAL_ETH_Start+0x7c>
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008e24:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8008e26:	2202      	movs	r2, #2
{  
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	b082      	sub	sp, #8
  __HAL_LOCK(heth);
 8008e2e:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8008e30:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 8008e32:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __IO uint32_t tmpreg = 0;
 8008e36:	9501      	str	r5, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e38:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8008e3a:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	f042 0208 	orr.w	r2, r2, #8
 8008e44:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e4a:	f7fd fb9d 	bl	8006588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008e4e:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e50:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8008e56:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	f042 0204 	orr.w	r2, r2, #4
 8008e5e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e64:	f7fd fb90 	bl	8006588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008e68:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8008e6a:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8008e6c:	9a00      	ldr	r2, [sp, #0]
 8008e6e:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8008e70:	f7ff fbc2 	bl	80085f8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8008e7a:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8008e7c:	58d1      	ldr	r1, [r2, r3]
 8008e7e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8008e82:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8008e84:	58d1      	ldr	r1, [r2, r3]
 8008e86:	f041 0102 	orr.w	r1, r1, #2
 8008e8a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8008e8c:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008e90:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8008e94:	b002      	add	sp, #8
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8008e98:	2002      	movs	r0, #2
}
 8008e9a:	4770      	bx	lr

08008e9c <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8008e9c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d039      	beq.n	8008f18 <HAL_ETH_Stop+0x7c>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008ea4:	6803      	ldr	r3, [r0, #0]
 8008ea6:	f241 0218 	movw	r2, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 8008eaa:	2102      	movs	r1, #2
{  
 8008eac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8008eae:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8008eb0:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 8008eb4:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0;
 8008eb6:	2500      	movs	r5, #0
  __HAL_LOCK(heth);
 8008eb8:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 8008ebc:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008ebe:	5899      	ldr	r1, [r3, r2]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008ec0:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008ec2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8008ec6:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8008ec8:	5899      	ldr	r1, [r3, r2]
 8008eca:	f021 0102 	bic.w	r1, r1, #2
 8008ece:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 8008ed0:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	f022 0204 	bic.w	r2, r2, #4
 8008ed8:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008ede:	f7fd fb53 	bl	8006588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008ee2:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8008ee4:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8008ee6:	9a01      	ldr	r2, [sp, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8008eea:	f7ff fb85 	bl	80085f8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8008eee:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t tmpreg = 0;
 8008ef0:	9500      	str	r5, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008ef2:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	f022 0208 	bic.w	r2, r2, #8
 8008efa:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008f00:	f7fd fb42 	bl	8006588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008f04:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
 8008f06:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8008f0c:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008f10:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8008f14:	b002      	add	sp, #8
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8008f18:	2002      	movs	r0, #2
}
 8008f1a:	4770      	bx	lr

08008f1c <HAL_ETH_ConfigMAC>:
{
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8008f1e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	f000 8242 	beq.w	80093ac <HAL_ETH_ConfigMAC+0x490>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008f28:	6883      	ldr	r3, [r0, #8]
 8008f2a:	460c      	mov	r4, r1
  heth->State= HAL_ETH_STATE_BUSY;
 8008f2c:	2202      	movs	r2, #2
  __HAL_LOCK(heth);
 8008f2e:	2101      	movs	r1, #1
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008f30:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8008f34:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8008f36:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 8008f3a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008f3e:	f040 8207 	bne.w	8009350 <HAL_ETH_ConfigMAC+0x434>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8008f42:	68eb      	ldr	r3, [r5, #12]
 8008f44:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8008f48:	f040 8114 	bne.w	8009174 <HAL_ETH_ConfigMAC+0x258>
  if (macconf != NULL)
 8008f4c:	2c00      	cmp	r4, #0
 8008f4e:	f000 8119 	beq.w	8009184 <HAL_ETH_ConfigMAC+0x268>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8008f58:	f040 8139 	bne.w	80091ce <HAL_ETH_ConfigMAC+0x2b2>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8008f5c:	6863      	ldr	r3, [r4, #4]
 8008f5e:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8008f62:	f040 816b 	bne.w	800923c <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8008f66:	68a3      	ldr	r3, [r4, #8]
 8008f68:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8008f6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f70:	d002      	beq.n	8008f78 <HAL_ETH_ConfigMAC+0x5c>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f040 821c 	bne.w	80093b0 <HAL_ETH_ConfigMAC+0x494>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8008f78:	68e3      	ldr	r3, [r4, #12]
 8008f7a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8008f7e:	f040 8152 	bne.w	8009226 <HAL_ETH_ConfigMAC+0x30a>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8008f82:	6923      	ldr	r3, [r4, #16]
 8008f84:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8008f88:	f040 8142 	bne.w	8009210 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8008f8c:	6963      	ldr	r3, [r4, #20]
 8008f8e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8008f92:	f040 8132 	bne.w	80091fa <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8008f96:	69a3      	ldr	r3, [r4, #24]
 8008f98:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8008f9c:	f040 8122 	bne.w	80091e4 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8008fa0:	69e3      	ldr	r3, [r4, #28]
 8008fa2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008fa6:	f040 81a3 	bne.w	80092f0 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8008faa:	6a23      	ldr	r3, [r4, #32]
 8008fac:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008fb0:	f040 818e 	bne.w	80092d0 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8008fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fb6:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8008fba:	f040 8193 	bne.w	80092e4 <HAL_ETH_ConfigMAC+0x3c8>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8008fbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fc0:	f033 0310 	bics.w	r3, r3, #16
 8008fc4:	f040 8179 	bne.w	80092ba <HAL_ETH_ConfigMAC+0x39e>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8008fc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fca:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8008fce:	f040 819a 	bne.w	8009306 <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8008fd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008fd4:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8008fd8:	d003      	beq.n	8008fe2 <HAL_ETH_ConfigMAC+0xc6>
 8008fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fde:	f040 81d3 	bne.w	8009388 <HAL_ETH_ConfigMAC+0x46c>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8008fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fe4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fe8:	2a40      	cmp	r2, #64	; 0x40
 8008fea:	d002      	beq.n	8008ff2 <HAL_ETH_ConfigMAC+0xd6>
 8008fec:	2b80      	cmp	r3, #128	; 0x80
 8008fee:	f040 81b5 	bne.w	800935c <HAL_ETH_ConfigMAC+0x440>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8008ff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ff4:	f033 0320 	bics.w	r3, r3, #32
 8008ff8:	f040 80de 	bne.w	80091b8 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8008ffc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ffe:	f033 0308 	bics.w	r3, r3, #8
 8009002:	f040 80cf 	bne.w	80091a4 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8009006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009008:	2b01      	cmp	r3, #1
 800900a:	f200 80a5 	bhi.w	8009158 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800900e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009010:	f240 4204 	movw	r2, #1028	; 0x404
 8009014:	4293      	cmp	r3, r2
 8009016:	bf18      	it	ne
 8009018:	2b10      	cmpne	r3, #16
 800901a:	d003      	beq.n	8009024 <HAL_ETH_ConfigMAC+0x108>
 800901c:	f033 0304 	bics.w	r3, r3, #4
 8009020:	f040 81be 	bne.w	80093a0 <HAL_ETH_ConfigMAC+0x484>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8009024:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009026:	f033 0202 	bics.w	r2, r3, #2
 800902a:	d004      	beq.n	8009036 <HAL_ETH_ConfigMAC+0x11a>
 800902c:	f240 4202 	movw	r2, #1026	; 0x402
 8009030:	4293      	cmp	r3, r2
 8009032:	f040 819e 	bne.w	8009372 <HAL_ETH_ConfigMAC+0x456>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8009036:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800903c:	f080 816e 	bcs.w	800931c <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8009040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009042:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009046:	f040 8173 	bne.w	8009330 <HAL_ETH_ConfigMAC+0x414>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800904a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800904c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8009050:	f040 8178 	bne.w	8009344 <HAL_ETH_ConfigMAC+0x428>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8009054:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009056:	f033 0308 	bics.w	r3, r3, #8
 800905a:	f040 8123 	bne.w	80092a4 <HAL_ETH_ConfigMAC+0x388>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800905e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009060:	f033 0304 	bics.w	r3, r3, #4
 8009064:	f040 8113 	bne.w	800928e <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8009068:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800906a:	f033 0302 	bics.w	r3, r3, #2
 800906e:	f040 8103 	bne.w	8009278 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8009072:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009074:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009078:	f040 80f3 	bne.w	8009262 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800907c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800907e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009082:	f080 80e8 	bcs.w	8009256 <HAL_ETH_ConfigMAC+0x33a>
                         macconf->BackOffLimit | 
 8009086:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009088:	2001      	movs	r0, #1
                         macconf->BackOffLimit | 
 800908a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800908e:	430b      	orrs	r3, r1
 8009090:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	6962      	ldr	r2, [r4, #20]
 8009098:	4333      	orrs	r3, r6
 800909a:	69a6      	ldr	r6, [r4, #24]
 800909c:	430b      	orrs	r3, r1
 800909e:	69e1      	ldr	r1, [r4, #28]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	6a22      	ldr	r2, [r4, #32]
 80090a4:	4333      	orrs	r3, r6
 80090a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090a8:	430b      	orrs	r3, r1
 80090aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80090ac:	4313      	orrs	r3, r2
 80090ae:	68aa      	ldr	r2, [r5, #8]
 80090b0:	4333      	orrs	r3, r6
    tmpreg = (heth->Instance)->MACCR;
 80090b2:	682e      	ldr	r6, [r5, #0]
                         macconf->BackOffLimit | 
 80090b4:	430b      	orrs	r3, r1
    tmpreg = (heth->Instance)->MACCR;
 80090b6:	6837      	ldr	r7, [r6, #0]
                         macconf->BackOffLimit | 
 80090b8:	68e9      	ldr	r1, [r5, #12]
 80090ba:	4313      	orrs	r3, r2
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80090bc:	4abf      	ldr	r2, [pc, #764]	; (80093bc <HAL_ETH_ConfigMAC+0x4a0>)
                         macconf->BackOffLimit | 
 80090be:	430b      	orrs	r3, r1
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80090c0:	403a      	ands	r2, r7
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80090c2:	f64f 7741 	movw	r7, #65345	; 0xff41
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80090c6:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80090c8:	6033      	str	r3, [r6, #0]
    tmpreg = (heth->Instance)->MACCR;
 80090ca:	6836      	ldr	r6, [r6, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80090cc:	f7fd fa5c 	bl	8006588 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80090d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80090d2:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80090d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 80090d6:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80090d8:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 80090da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg; 
 80090dc:	6016      	str	r6, [r2, #0]
                                          macconf->SourceAddrFilter |
 80090de:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 80090e0:	e9d4 160e 	ldrd	r1, r6, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 80090e4:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 80090e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
                                          macconf->BroadcastFramesReception | 
 80090e8:	4333      	orrs	r3, r6
                                          macconf->PromiscuousMode |
 80090ea:	6c66      	ldr	r6, [r4, #68]	; 0x44
                                          macconf->DestinationAddrFilter |
 80090ec:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 80090ee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                          macconf->PromiscuousMode |
 80090f0:	4333      	orrs	r3, r6
                                          macconf->MulticastFramesFilter |
 80090f2:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80090f4:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 80090f6:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80090f8:	f7fd fa46 	bl	8006588 <HAL_Delay>
                          macconf->ReceiveFlowControl |
 80090fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80090fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
     (heth->Instance)->MACFFR = tmpreg;
 8009100:	682a      	ldr	r2, [r5, #0]
                          macconf->ReceiveFlowControl |
 8009102:	430b      	orrs	r3, r1
 8009104:	6e21      	ldr	r1, [r4, #96]	; 0x60
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8009106:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
                          macconf->ReceiveFlowControl |
 8009108:	430b      	orrs	r3, r1
 800910a:	6e61      	ldr	r1, [r4, #100]	; 0x64
     (heth->Instance)->MACFFR = tmpreg;
 800910c:	6056      	str	r6, [r2, #4]
                          macconf->ReceiveFlowControl |
 800910e:	430b      	orrs	r3, r1
 8009110:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8009112:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          macconf->ReceiveFlowControl |
 8009114:	4333      	orrs	r3, r6
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8009116:	6090      	str	r0, [r2, #8]
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8009118:	6d66      	ldr	r6, [r4, #84]	; 0x54
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800911a:	2001      	movs	r0, #1
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800911c:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800911e:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8009120:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009124:	4039      	ands	r1, r7
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8009126:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009128:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800912a:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800912c:	f7fd fa2c 	bl	8006588 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009130:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8009132:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009134:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACFCR = tmpreg;
 8009136:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009138:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg;
 800913a:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800913c:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800913e:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8009140:	f7fd fa22 	bl	8006588 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 8009148:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800914a:	2201      	movs	r2, #1
  return HAL_OK;  
 800914c:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800914e:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009152:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8009156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8009158:	f240 6123 	movw	r1, #1571	; 0x623
 800915c:	4898      	ldr	r0, [pc, #608]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 800915e:	f7fa fcf3 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8009162:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009164:	f240 4204 	movw	r2, #1028	; 0x404
 8009168:	4293      	cmp	r3, r2
 800916a:	bf18      	it	ne
 800916c:	2b10      	cmpne	r3, #16
 800916e:	f47f af55 	bne.w	800901c <HAL_ETH_ConfigMAC+0x100>
 8009172:	e757      	b.n	8009024 <HAL_ETH_ConfigMAC+0x108>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8009174:	f240 610e 	movw	r1, #1550	; 0x60e
 8009178:	4891      	ldr	r0, [pc, #580]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 800917a:	f7fa fce5 	bl	8003b48 <assert_failed>
  if (macconf != NULL)
 800917e:	2c00      	cmp	r4, #0
 8009180:	f47f aee7 	bne.w	8008f52 <HAL_ETH_ConfigMAC+0x36>
    tmpreg = (heth->Instance)->MACCR;
 8009184:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009186:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8009188:	68ec      	ldr	r4, [r5, #12]
    tmpreg = (heth->Instance)->MACCR;
 800918a:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800918c:	68ab      	ldr	r3, [r5, #8]
    tmpreg &= ~((uint32_t)0x00004800);
 800918e:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8009192:	4323      	orrs	r3, r4
 8009194:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009196:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 8009198:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800919a:	f7fd f9f5 	bl	8006588 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800919e:	682b      	ldr	r3, [r5, #0]
 80091a0:	601c      	str	r4, [r3, #0]
 80091a2:	e7d1      	b.n	8009148 <HAL_ETH_ConfigMAC+0x22c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80091a4:	f240 6122 	movw	r1, #1570	; 0x622
 80091a8:	4885      	ldr	r0, [pc, #532]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80091aa:	f7fa fccd 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 80091ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	f67f af2c 	bls.w	800900e <HAL_ETH_ConfigMAC+0xf2>
 80091b6:	e7cf      	b.n	8009158 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 80091b8:	f240 6121 	movw	r1, #1569	; 0x621
 80091bc:	4880      	ldr	r0, [pc, #512]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80091be:	f7fa fcc3 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80091c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091c4:	f033 0308 	bics.w	r3, r3, #8
 80091c8:	f43f af1d 	beq.w	8009006 <HAL_ETH_ConfigMAC+0xea>
 80091cc:	e7ea      	b.n	80091a4 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 80091ce:	f240 6113 	movw	r1, #1555	; 0x613
 80091d2:	487b      	ldr	r0, [pc, #492]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80091d4:	f7fa fcb8 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 80091d8:	6863      	ldr	r3, [r4, #4]
 80091da:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80091de:	f43f aec2 	beq.w	8008f66 <HAL_ETH_ConfigMAC+0x4a>
 80091e2:	e02b      	b.n	800923c <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 80091e4:	f240 6119 	movw	r1, #1561	; 0x619
 80091e8:	4875      	ldr	r0, [pc, #468]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80091ea:	f7fa fcad 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 80091ee:	69e3      	ldr	r3, [r4, #28]
 80091f0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80091f4:	f43f aed9 	beq.w	8008faa <HAL_ETH_ConfigMAC+0x8e>
 80091f8:	e07a      	b.n	80092f0 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 80091fa:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 80091fe:	4870      	ldr	r0, [pc, #448]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009200:	f7fa fca2 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8009204:	69a3      	ldr	r3, [r4, #24]
 8009206:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800920a:	f43f aec9 	beq.w	8008fa0 <HAL_ETH_ConfigMAC+0x84>
 800920e:	e7e9      	b.n	80091e4 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8009210:	f240 6117 	movw	r1, #1559	; 0x617
 8009214:	486a      	ldr	r0, [pc, #424]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009216:	f7fa fc97 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800921a:	6963      	ldr	r3, [r4, #20]
 800921c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8009220:	f43f aeb9 	beq.w	8008f96 <HAL_ETH_ConfigMAC+0x7a>
 8009224:	e7e9      	b.n	80091fa <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8009226:	f240 6116 	movw	r1, #1558	; 0x616
 800922a:	4865      	ldr	r0, [pc, #404]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 800922c:	f7fa fc8c 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8009236:	f43f aea9 	beq.w	8008f8c <HAL_ETH_ConfigMAC+0x70>
 800923a:	e7e9      	b.n	8009210 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800923c:	f240 6114 	movw	r1, #1556	; 0x614
 8009240:	485f      	ldr	r0, [pc, #380]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009242:	f7fa fc81 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8009246:	68a3      	ldr	r3, [r4, #8]
 8009248:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800924c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009250:	f47f ae8f 	bne.w	8008f72 <HAL_ETH_ConfigMAC+0x56>
 8009254:	e690      	b.n	8008f78 <HAL_ETH_ConfigMAC+0x5c>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8009256:	f240 612d 	movw	r1, #1581	; 0x62d
 800925a:	4859      	ldr	r0, [pc, #356]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 800925c:	f7fa fc74 	bl	8003b48 <assert_failed>
 8009260:	e711      	b.n	8009086 <HAL_ETH_ConfigMAC+0x16a>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8009262:	f240 612c 	movw	r1, #1580	; 0x62c
 8009266:	4856      	ldr	r0, [pc, #344]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009268:	f7fa fc6e 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800926c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800926e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009272:	f4ff af08 	bcc.w	8009086 <HAL_ETH_ConfigMAC+0x16a>
 8009276:	e7ee      	b.n	8009256 <HAL_ETH_ConfigMAC+0x33a>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8009278:	f240 612b 	movw	r1, #1579	; 0x62b
 800927c:	4850      	ldr	r0, [pc, #320]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 800927e:	f7fa fc63 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8009282:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009284:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009288:	f43f aef8 	beq.w	800907c <HAL_ETH_ConfigMAC+0x160>
 800928c:	e7e9      	b.n	8009262 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800928e:	f240 612a 	movw	r1, #1578	; 0x62a
 8009292:	484b      	ldr	r0, [pc, #300]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009294:	f7fa fc58 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8009298:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800929a:	f033 0302 	bics.w	r3, r3, #2
 800929e:	f43f aee8 	beq.w	8009072 <HAL_ETH_ConfigMAC+0x156>
 80092a2:	e7e9      	b.n	8009278 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 80092a4:	f240 6129 	movw	r1, #1577	; 0x629
 80092a8:	4845      	ldr	r0, [pc, #276]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80092aa:	f7fa fc4d 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 80092ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092b0:	f033 0304 	bics.w	r3, r3, #4
 80092b4:	f43f aed8 	beq.w	8009068 <HAL_ETH_ConfigMAC+0x14c>
 80092b8:	e7e9      	b.n	800928e <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 80092ba:	f240 611d 	movw	r1, #1565	; 0x61d
 80092be:	4840      	ldr	r0, [pc, #256]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80092c0:	f7fa fc42 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 80092c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80092c6:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 80092ca:	f43f ae82 	beq.w	8008fd2 <HAL_ETH_ConfigMAC+0xb6>
 80092ce:	e01a      	b.n	8009306 <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 80092d0:	f240 611b 	movw	r1, #1563	; 0x61b
 80092d4:	483a      	ldr	r0, [pc, #232]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80092d6:	f7fa fc37 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 80092da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092dc:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 80092e0:	f43f ae6d 	beq.w	8008fbe <HAL_ETH_ConfigMAC+0xa2>
 80092e4:	f240 611c 	movw	r1, #1564	; 0x61c
 80092e8:	4835      	ldr	r0, [pc, #212]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80092ea:	f7fa fc2d 	bl	8003b48 <assert_failed>
 80092ee:	e666      	b.n	8008fbe <HAL_ETH_ConfigMAC+0xa2>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 80092f0:	f240 611a 	movw	r1, #1562	; 0x61a
 80092f4:	4832      	ldr	r0, [pc, #200]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80092f6:	f7fa fc27 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 80092fa:	6a23      	ldr	r3, [r4, #32]
 80092fc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009300:	f43f ae58 	beq.w	8008fb4 <HAL_ETH_ConfigMAC+0x98>
 8009304:	e7e4      	b.n	80092d0 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8009306:	f240 611e 	movw	r1, #1566	; 0x61e
 800930a:	482d      	ldr	r0, [pc, #180]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 800930c:	f7fa fc1c 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8009310:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009312:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8009316:	f47f ae60 	bne.w	8008fda <HAL_ETH_ConfigMAC+0xbe>
 800931a:	e662      	b.n	8008fe2 <HAL_ETH_ConfigMAC+0xc6>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800931c:	f240 6126 	movw	r1, #1574	; 0x626
 8009320:	4827      	ldr	r0, [pc, #156]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009322:	f7fa fc11 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8009326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009328:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800932c:	f43f ae8d 	beq.w	800904a <HAL_ETH_ConfigMAC+0x12e>
 8009330:	f240 6127 	movw	r1, #1575	; 0x627
 8009334:	4822      	ldr	r0, [pc, #136]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009336:	f7fa fc07 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800933a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800933c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8009340:	f43f ae88 	beq.w	8009054 <HAL_ETH_ConfigMAC+0x138>
 8009344:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 8009348:	481d      	ldr	r0, [pc, #116]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 800934a:	f7fa fbfd 	bl	8003b48 <assert_failed>
 800934e:	e681      	b.n	8009054 <HAL_ETH_ConfigMAC+0x138>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009350:	f240 610d 	movw	r1, #1549	; 0x60d
 8009354:	481a      	ldr	r0, [pc, #104]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009356:	f7fa fbf7 	bl	8003b48 <assert_failed>
 800935a:	e5f2      	b.n	8008f42 <HAL_ETH_ConfigMAC+0x26>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800935c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8009360:	4817      	ldr	r0, [pc, #92]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009362:	f7fa fbf1 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8009366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009368:	f033 0320 	bics.w	r3, r3, #32
 800936c:	f43f ae46 	beq.w	8008ffc <HAL_ETH_ConfigMAC+0xe0>
 8009370:	e722      	b.n	80091b8 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8009372:	f240 6125 	movw	r1, #1573	; 0x625
 8009376:	4812      	ldr	r0, [pc, #72]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 8009378:	f7fa fbe6 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800937c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800937e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009382:	f4ff ae5d 	bcc.w	8009040 <HAL_ETH_ConfigMAC+0x124>
 8009386:	e7c9      	b.n	800931c <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8009388:	f240 611f 	movw	r1, #1567	; 0x61f
 800938c:	480c      	ldr	r0, [pc, #48]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 800938e:	f7fa fbdb 	bl	8003b48 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8009392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009394:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009398:	2a40      	cmp	r2, #64	; 0x40
 800939a:	f47f ae27 	bne.w	8008fec <HAL_ETH_ConfigMAC+0xd0>
 800939e:	e628      	b.n	8008ff2 <HAL_ETH_ConfigMAC+0xd6>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 80093a0:	f240 6124 	movw	r1, #1572	; 0x624
 80093a4:	4806      	ldr	r0, [pc, #24]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80093a6:	f7fa fbcf 	bl	8003b48 <assert_failed>
 80093aa:	e63b      	b.n	8009024 <HAL_ETH_ConfigMAC+0x108>
  __HAL_LOCK(heth);
 80093ac:	2002      	movs	r0, #2
}
 80093ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 80093b0:	f240 6115 	movw	r1, #1557	; 0x615
 80093b4:	4802      	ldr	r0, [pc, #8]	; (80093c0 <HAL_ETH_ConfigMAC+0x4a4>)
 80093b6:	f7fa fbc7 	bl	8003b48 <assert_failed>
 80093ba:	e5dd      	b.n	8008f78 <HAL_ETH_ConfigMAC+0x5c>
 80093bc:	ff20810f 	.word	0xff20810f
 80093c0:	080289e4 	.word	0x080289e4

080093c4 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80093c4:	4bc0      	ldr	r3, [pc, #768]	; (80096c8 <HAL_GPIO_Init+0x304>)
 80093c6:	4ac1      	ldr	r2, [pc, #772]	; (80096cc <HAL_GPIO_Init+0x308>)
 80093c8:	4290      	cmp	r0, r2
 80093ca:	bf18      	it	ne
 80093cc:	4298      	cmpne	r0, r3
{
 80093ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80093d2:	bf18      	it	ne
 80093d4:	2301      	movne	r3, #1
{
 80093d6:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80093d8:	bf08      	it	eq
 80093da:	2300      	moveq	r3, #0
{
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	d026      	beq.n	8009432 <HAL_GPIO_Init+0x6e>
 80093e4:	4bba      	ldr	r3, [pc, #744]	; (80096d0 <HAL_GPIO_Init+0x30c>)
 80093e6:	4298      	cmp	r0, r3
 80093e8:	d023      	beq.n	8009432 <HAL_GPIO_Init+0x6e>
 80093ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093ee:	4298      	cmp	r0, r3
 80093f0:	d01f      	beq.n	8009432 <HAL_GPIO_Init+0x6e>
 80093f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093f6:	4298      	cmp	r0, r3
 80093f8:	d01b      	beq.n	8009432 <HAL_GPIO_Init+0x6e>
 80093fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093fe:	4298      	cmp	r0, r3
 8009400:	d017      	beq.n	8009432 <HAL_GPIO_Init+0x6e>
 8009402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009406:	4298      	cmp	r0, r3
 8009408:	d013      	beq.n	8009432 <HAL_GPIO_Init+0x6e>
 800940a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800940e:	4298      	cmp	r0, r3
 8009410:	d00f      	beq.n	8009432 <HAL_GPIO_Init+0x6e>
 8009412:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8009416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941a:	4290      	cmp	r0, r2
 800941c:	bf18      	it	ne
 800941e:	4298      	cmpne	r0, r3
 8009420:	d007      	beq.n	8009432 <HAL_GPIO_Init+0x6e>
 8009422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009426:	4298      	cmp	r0, r3
 8009428:	d003      	beq.n	8009432 <HAL_GPIO_Init+0x6e>
 800942a:	21aa      	movs	r1, #170	; 0xaa
 800942c:	48a9      	ldr	r0, [pc, #676]	; (80096d4 <HAL_GPIO_Init+0x310>)
 800942e:	f7fa fb8b 	bl	8003b48 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8009432:	883b      	ldrh	r3, [r7, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 811a 	beq.w	800966e <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 8009440:	bf18      	it	ne
 8009442:	2a03      	cmpne	r2, #3
 8009444:	f1a2 0011 	sub.w	r0, r2, #17
 8009448:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800944c:	bf8c      	ite	hi
 800944e:	2301      	movhi	r3, #1
 8009450:	2300      	movls	r3, #0
 8009452:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 8009456:	bf0c      	ite	eq
 8009458:	2300      	moveq	r3, #0
 800945a:	f003 0301 	andne.w	r3, r3, #1
 800945e:	2801      	cmp	r0, #1
 8009460:	bf94      	ite	ls
 8009462:	2300      	movls	r3, #0
 8009464:	f003 0301 	andhi.w	r3, r3, #1
 8009468:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800946c:	bf0c      	ite	eq
 800946e:	2300      	moveq	r3, #0
 8009470:	f003 0301 	andne.w	r3, r3, #1
 8009474:	b11b      	cbz	r3, 800947e <HAL_GPIO_Init+0xba>
 8009476:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800947a:	f040 8120 	bne.w	80096be <HAL_GPIO_Init+0x2fa>
{
 800947e:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009480:	f8df b278 	ldr.w	fp, [pc, #632]	; 80096fc <HAL_GPIO_Init+0x338>
 8009484:	e003      	b.n	800948e <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 8009486:	3501      	adds	r5, #1
 8009488:	2d10      	cmp	r5, #16
 800948a:	f000 80b4 	beq.w	80095f6 <HAL_GPIO_Init+0x232>
    ioposition = ((uint32_t)0x01) << position;
 800948e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009490:	683b      	ldr	r3, [r7, #0]
    ioposition = ((uint32_t)0x01) << position;
 8009492:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009494:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 8009498:	ea34 0303 	bics.w	r3, r4, r3
 800949c:	d1f3      	bne.n	8009486 <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	f002 0303 	and.w	r3, r2, #3
 80094a4:	1e59      	subs	r1, r3, #1
 80094a6:	2901      	cmp	r1, #1
 80094a8:	f240 80a8 	bls.w	80095fc <HAL_GPIO_Init+0x238>
 80094ac:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80094b0:	f04f 0803 	mov.w	r8, #3
 80094b4:	fa08 f80a 	lsl.w	r8, r8, sl
 80094b8:	ea6f 0808 	mvn.w	r8, r8
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d024      	beq.n	800950a <HAL_GPIO_Init+0x146>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80094c0:	68b9      	ldr	r1, [r7, #8]
 80094c2:	2902      	cmp	r1, #2
 80094c4:	f200 80b7 	bhi.w	8009636 <HAL_GPIO_Init+0x272>
        temp = GPIOx->PUPDR;
 80094c8:	68f0      	ldr	r0, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80094ca:	fa01 f10a 	lsl.w	r1, r1, sl
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094ce:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80094d0:	ea00 0008 	and.w	r0, r0, r8
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80094d4:	ea41 0100 	orr.w	r1, r1, r0
        GPIOx->PUPDR = temp;
 80094d8:	60f1      	str	r1, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094da:	d116      	bne.n	800950a <HAL_GPIO_Init+0x146>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80094dc:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80094e0:	f1be 0f0f 	cmp.w	lr, #15
 80094e4:	f200 80c8 	bhi.w	8009678 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 80094e8:	08e8      	lsrs	r0, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80094ea:	f005 0107 	and.w	r1, r5, #7
 80094ee:	f04f 0c0f 	mov.w	ip, #15
 80094f2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80094f6:	0089      	lsls	r1, r1, #2
        temp = GPIOx->AFR[position >> 3];
 80094f8:	6a04      	ldr	r4, [r0, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80094fa:	fa0c fc01 	lsl.w	ip, ip, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80094fe:	fa0e f101 	lsl.w	r1, lr, r1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009502:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009506:	4321      	orrs	r1, r4
        GPIOx->AFR[position >> 3] = temp;
 8009508:	6201      	str	r1, [r0, #32]
      temp = GPIOx->MODER;
 800950a:	6831      	ldr	r1, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800950c:	fa03 f30a 	lsl.w	r3, r3, sl
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009510:	f412 3f40 	tst.w	r2, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009514:	ea01 0808 	and.w	r8, r1, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009518:	ea43 0308 	orr.w	r3, r3, r8
      GPIOx->MODER = temp;
 800951c:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800951e:	d0b2      	beq.n	8009486 <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009520:	f8db 0044 	ldr.w	r0, [fp, #68]	; 0x44
 8009524:	f025 0c03 	bic.w	ip, r5, #3
 8009528:	4c6b      	ldr	r4, [pc, #428]	; (80096d8 <HAL_GPIO_Init+0x314>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800952a:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800952e:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009532:	210f      	movs	r1, #15
 8009534:	4464      	add	r4, ip
 8009536:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009538:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 800953c:	f8db 0044 	ldr.w	r0, [fp, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009540:	4099      	lsls	r1, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009542:	f8df c188 	ldr.w	ip, [pc, #392]	; 80096cc <HAL_GPIO_Init+0x308>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009546:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800954a:	4566      	cmp	r6, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800954c:	9003      	str	r0, [sp, #12]
 800954e:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8009550:	68a0      	ldr	r0, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009552:	ea20 0101 	bic.w	r1, r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009556:	d025      	beq.n	80095a4 <HAL_GPIO_Init+0x1e0>
 8009558:	9801      	ldr	r0, [sp, #4]
 800955a:	2800      	cmp	r0, #0
 800955c:	d07d      	beq.n	800965a <HAL_GPIO_Init+0x296>
 800955e:	485c      	ldr	r0, [pc, #368]	; (80096d0 <HAL_GPIO_Init+0x30c>)
 8009560:	4286      	cmp	r6, r0
 8009562:	d07f      	beq.n	8009664 <HAL_GPIO_Init+0x2a0>
 8009564:	485d      	ldr	r0, [pc, #372]	; (80096dc <HAL_GPIO_Init+0x318>)
 8009566:	4286      	cmp	r6, r0
 8009568:	f000 8090 	beq.w	800968c <HAL_GPIO_Init+0x2c8>
 800956c:	485c      	ldr	r0, [pc, #368]	; (80096e0 <HAL_GPIO_Init+0x31c>)
 800956e:	4286      	cmp	r6, r0
 8009570:	f000 8091 	beq.w	8009696 <HAL_GPIO_Init+0x2d2>
 8009574:	485b      	ldr	r0, [pc, #364]	; (80096e4 <HAL_GPIO_Init+0x320>)
 8009576:	4286      	cmp	r6, r0
 8009578:	f000 8097 	beq.w	80096aa <HAL_GPIO_Init+0x2e6>
 800957c:	485a      	ldr	r0, [pc, #360]	; (80096e8 <HAL_GPIO_Init+0x324>)
 800957e:	4286      	cmp	r6, r0
 8009580:	f000 8098 	beq.w	80096b4 <HAL_GPIO_Init+0x2f0>
 8009584:	4859      	ldr	r0, [pc, #356]	; (80096ec <HAL_GPIO_Init+0x328>)
 8009586:	4286      	cmp	r6, r0
 8009588:	f000 808a 	beq.w	80096a0 <HAL_GPIO_Init+0x2dc>
 800958c:	4858      	ldr	r0, [pc, #352]	; (80096f0 <HAL_GPIO_Init+0x32c>)
 800958e:	4286      	cmp	r6, r0
 8009590:	f000 80b6 	beq.w	8009700 <HAL_GPIO_Init+0x33c>
 8009594:	4857      	ldr	r0, [pc, #348]	; (80096f4 <HAL_GPIO_Init+0x330>)
 8009596:	4286      	cmp	r6, r0
 8009598:	bf0c      	ite	eq
 800959a:	2009      	moveq	r0, #9
 800959c:	200a      	movne	r0, #10
 800959e:	fa00 f303 	lsl.w	r3, r0, r3
 80095a2:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80095a4:	4b54      	ldr	r3, [pc, #336]	; (80096f8 <HAL_GPIO_Init+0x334>)
        temp &= ~((uint32_t)iocurrent);
 80095a6:	ea6f 0009 	mvn.w	r0, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 80095aa:	60a1      	str	r1, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80095ac:	02d4      	lsls	r4, r2, #11
        temp = EXTI->RTSR;
 80095ae:	6899      	ldr	r1, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80095b0:	f105 0501 	add.w	r5, r5, #1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80095b4:	4b50      	ldr	r3, [pc, #320]	; (80096f8 <HAL_GPIO_Init+0x334>)
        temp &= ~((uint32_t)iocurrent);
 80095b6:	bf54      	ite	pl
 80095b8:	4001      	andpl	r1, r0
          temp |= iocurrent;
 80095ba:	ea49 0101 	orrmi.w	r1, r9, r1
        EXTI->RTSR = temp;
 80095be:	6099      	str	r1, [r3, #8]

        temp = EXTI->FTSR;
 80095c0:	68d9      	ldr	r1, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80095c2:	0293      	lsls	r3, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80095c4:	4b4c      	ldr	r3, [pc, #304]	; (80096f8 <HAL_GPIO_Init+0x334>)
        temp &= ~((uint32_t)iocurrent);
 80095c6:	bf54      	ite	pl
 80095c8:	4001      	andpl	r1, r0
          temp |= iocurrent;
 80095ca:	ea49 0101 	orrmi.w	r1, r9, r1

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80095ce:	0394      	lsls	r4, r2, #14
        EXTI->FTSR = temp;
 80095d0:	60d9      	str	r1, [r3, #12]
        temp = EXTI->EMR;
 80095d2:	6859      	ldr	r1, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80095d4:	4b48      	ldr	r3, [pc, #288]	; (80096f8 <HAL_GPIO_Init+0x334>)
        temp &= ~((uint32_t)iocurrent);
 80095d6:	bf54      	ite	pl
 80095d8:	4001      	andpl	r1, r0
          temp |= iocurrent;
 80095da:	ea49 0101 	orrmi.w	r1, r9, r1

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80095de:	03d2      	lsls	r2, r2, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80095e0:	4a45      	ldr	r2, [pc, #276]	; (80096f8 <HAL_GPIO_Init+0x334>)
        EXTI->EMR = temp;
 80095e2:	6059      	str	r1, [r3, #4]
        temp = EXTI->IMR;
 80095e4:	681b      	ldr	r3, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 80095e6:	bf54      	ite	pl
 80095e8:	4003      	andpl	r3, r0
          temp |= iocurrent;
 80095ea:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 80095ee:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 80095f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80095f2:	f47f af4c 	bne.w	800948e <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 80095f6:	b005      	add	sp, #20
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	2803      	cmp	r0, #3
 8009600:	d822      	bhi.n	8009648 <HAL_GPIO_Init+0x284>
        temp = GPIOx->OSPEEDR; 
 8009602:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009606:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR; 
 800960a:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800960e:	f3c2 1100 	ubfx	r1, r2, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009612:	fa08 f80a 	lsl.w	r8, r8, sl
        temp |= (GPIO_Init->Speed << (position * 2));
 8009616:	fa00 f00a 	lsl.w	r0, r0, sl
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800961a:	40a9      	lsls	r1, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800961c:	ea2c 0c08 	bic.w	ip, ip, r8
 8009620:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2));
 8009624:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->OSPEEDR = temp;
 8009628:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800962a:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800962c:	ea20 0404 	bic.w	r4, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009630:	4321      	orrs	r1, r4
        GPIOx->OTYPER = temp;
 8009632:	6071      	str	r1, [r6, #4]
 8009634:	e742      	b.n	80094bc <HAL_GPIO_Init+0xf8>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8009636:	21ce      	movs	r1, #206	; 0xce
 8009638:	4826      	ldr	r0, [pc, #152]	; (80096d4 <HAL_GPIO_Init+0x310>)
 800963a:	f7fa fa85 	bl	8003b48 <assert_failed>
 800963e:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
 8009642:	f002 0303 	and.w	r3, r2, #3
 8009646:	e73f      	b.n	80094c8 <HAL_GPIO_Init+0x104>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8009648:	4822      	ldr	r0, [pc, #136]	; (80096d4 <HAL_GPIO_Init+0x310>)
 800964a:	21bd      	movs	r1, #189	; 0xbd
 800964c:	f7fa fa7c 	bl	8003b48 <assert_failed>
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f002 0303 	and.w	r3, r2, #3
 8009658:	e7d3      	b.n	8009602 <HAL_GPIO_Init+0x23e>
 800965a:	2001      	movs	r0, #1
 800965c:	fa00 f303 	lsl.w	r3, r0, r3
 8009660:	4319      	orrs	r1, r3
 8009662:	e79f      	b.n	80095a4 <HAL_GPIO_Init+0x1e0>
 8009664:	2002      	movs	r0, #2
 8009666:	fa00 f303 	lsl.w	r3, r0, r3
 800966a:	4319      	orrs	r1, r3
 800966c:	e79a      	b.n	80095a4 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800966e:	21ab      	movs	r1, #171	; 0xab
 8009670:	4818      	ldr	r0, [pc, #96]	; (80096d4 <HAL_GPIO_Init+0x310>)
 8009672:	f7fa fa69 	bl	8003b48 <assert_failed>
 8009676:	e6e0      	b.n	800943a <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8009678:	21db      	movs	r1, #219	; 0xdb
 800967a:	4816      	ldr	r0, [pc, #88]	; (80096d4 <HAL_GPIO_Init+0x310>)
 800967c:	f7fa fa64 	bl	8003b48 <assert_failed>
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8009686:	f002 0303 	and.w	r3, r2, #3
 800968a:	e72d      	b.n	80094e8 <HAL_GPIO_Init+0x124>
 800968c:	2003      	movs	r0, #3
 800968e:	fa00 f303 	lsl.w	r3, r0, r3
 8009692:	4319      	orrs	r1, r3
 8009694:	e786      	b.n	80095a4 <HAL_GPIO_Init+0x1e0>
 8009696:	2004      	movs	r0, #4
 8009698:	fa00 f303 	lsl.w	r3, r0, r3
 800969c:	4319      	orrs	r1, r3
 800969e:	e781      	b.n	80095a4 <HAL_GPIO_Init+0x1e0>
 80096a0:	2007      	movs	r0, #7
 80096a2:	fa00 f303 	lsl.w	r3, r0, r3
 80096a6:	4319      	orrs	r1, r3
 80096a8:	e77c      	b.n	80095a4 <HAL_GPIO_Init+0x1e0>
 80096aa:	2005      	movs	r0, #5
 80096ac:	fa00 f303 	lsl.w	r3, r0, r3
 80096b0:	4319      	orrs	r1, r3
 80096b2:	e777      	b.n	80095a4 <HAL_GPIO_Init+0x1e0>
 80096b4:	2006      	movs	r0, #6
 80096b6:	fa00 f303 	lsl.w	r3, r0, r3
 80096ba:	4319      	orrs	r1, r3
 80096bc:	e772      	b.n	80095a4 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80096be:	21ac      	movs	r1, #172	; 0xac
 80096c0:	4804      	ldr	r0, [pc, #16]	; (80096d4 <HAL_GPIO_Init+0x310>)
 80096c2:	f7fa fa41 	bl	8003b48 <assert_failed>
 80096c6:	e6da      	b.n	800947e <HAL_GPIO_Init+0xba>
 80096c8:	40020400 	.word	0x40020400
 80096cc:	40020000 	.word	0x40020000
 80096d0:	40020800 	.word	0x40020800
 80096d4:	08028a1c 	.word	0x08028a1c
 80096d8:	40013800 	.word	0x40013800
 80096dc:	40020c00 	.word	0x40020c00
 80096e0:	40021000 	.word	0x40021000
 80096e4:	40021400 	.word	0x40021400
 80096e8:	40021800 	.word	0x40021800
 80096ec:	40021c00 	.word	0x40021c00
 80096f0:	40022000 	.word	0x40022000
 80096f4:	40022400 	.word	0x40022400
 80096f8:	40013c00 	.word	0x40013c00
 80096fc:	40023800 	.word	0x40023800
 8009700:	2008      	movs	r0, #8
 8009702:	fa00 f303 	lsl.w	r3, r0, r3
 8009706:	4319      	orrs	r1, r3
 8009708:	e74c      	b.n	80095a4 <HAL_GPIO_Init+0x1e0>
 800970a:	bf00      	nop

0800970c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800970c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009710:	4a6d      	ldr	r2, [pc, #436]	; (80098c8 <HAL_GPIO_DeInit+0x1bc>)
{
 8009712:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009714:	4b6d      	ldr	r3, [pc, #436]	; (80098cc <HAL_GPIO_DeInit+0x1c0>)
{
 8009716:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009718:	4290      	cmp	r0, r2
 800971a:	bf18      	it	ne
 800971c:	4298      	cmpne	r0, r3
 800971e:	bf14      	ite	ne
 8009720:	f04f 0801 	movne.w	r8, #1
 8009724:	f04f 0800 	moveq.w	r8, #0
 8009728:	d028      	beq.n	800977c <HAL_GPIO_DeInit+0x70>
 800972a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800972e:	4298      	cmp	r0, r3
 8009730:	d024      	beq.n	800977c <HAL_GPIO_DeInit+0x70>
 8009732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009736:	4298      	cmp	r0, r3
 8009738:	d020      	beq.n	800977c <HAL_GPIO_DeInit+0x70>
 800973a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800973e:	4298      	cmp	r0, r3
 8009740:	d01c      	beq.n	800977c <HAL_GPIO_DeInit+0x70>
 8009742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009746:	4298      	cmp	r0, r3
 8009748:	d018      	beq.n	800977c <HAL_GPIO_DeInit+0x70>
 800974a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800974e:	4298      	cmp	r0, r3
 8009750:	d014      	beq.n	800977c <HAL_GPIO_DeInit+0x70>
 8009752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009756:	4298      	cmp	r0, r3
 8009758:	d010      	beq.n	800977c <HAL_GPIO_DeInit+0x70>
 800975a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800975e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009762:	4290      	cmp	r0, r2
 8009764:	bf18      	it	ne
 8009766:	4298      	cmpne	r0, r3
 8009768:	d008      	beq.n	800977c <HAL_GPIO_DeInit+0x70>
 800976a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800976e:	4298      	cmp	r0, r3
 8009770:	d004      	beq.n	800977c <HAL_GPIO_DeInit+0x70>
 8009772:	f240 112b 	movw	r1, #299	; 0x12b
 8009776:	4856      	ldr	r0, [pc, #344]	; (80098d0 <HAL_GPIO_DeInit+0x1c4>)
 8009778:	f7fa f9e6 	bl	8003b48 <assert_failed>
{
 800977c:	2300      	movs	r3, #0
 800977e:	f8df b174 	ldr.w	fp, [pc, #372]	; 80098f4 <HAL_GPIO_DeInit+0x1e8>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009782:	f8df a144 	ldr.w	sl, [pc, #324]	; 80098c8 <HAL_GPIO_DeInit+0x1bc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009786:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80098f8 <HAL_GPIO_DeInit+0x1ec>
 800978a:	e002      	b.n	8009792 <HAL_GPIO_DeInit+0x86>
  for(position = 0; position < GPIO_NUMBER; position++)
 800978c:	3301      	adds	r3, #1
 800978e:	2b10      	cmp	r3, #16
 8009790:	d07c      	beq.n	800988c <HAL_GPIO_DeInit+0x180>
    ioposition = ((uint32_t)0x01) << position;
 8009792:	2001      	movs	r0, #1
 8009794:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 8009798:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800979c:	ea02 0c05 	and.w	ip, r2, r5
    if(iocurrent == ioposition)
 80097a0:	d1f4      	bne.n	800978c <HAL_GPIO_DeInit+0x80>
      tmp = SYSCFG->EXTICR[position >> 2];
 80097a2:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80097a6:	f003 0103 	and.w	r1, r3, #3
 80097aa:	270f      	movs	r7, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80097ac:	4554      	cmp	r4, sl
 80097ae:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80097b0:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 80097b4:	f8d6 e008 	ldr.w	lr, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80097b8:	fa07 f701 	lsl.w	r7, r7, r1
 80097bc:	ea07 0e0e 	and.w	lr, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80097c0:	d01f      	beq.n	8009802 <HAL_GPIO_DeInit+0xf6>
 80097c2:	f1b8 0f00 	cmp.w	r8, #0
 80097c6:	d064      	beq.n	8009892 <HAL_GPIO_DeInit+0x186>
 80097c8:	4842      	ldr	r0, [pc, #264]	; (80098d4 <HAL_GPIO_DeInit+0x1c8>)
 80097ca:	4284      	cmp	r4, r0
 80097cc:	d064      	beq.n	8009898 <HAL_GPIO_DeInit+0x18c>
 80097ce:	4842      	ldr	r0, [pc, #264]	; (80098d8 <HAL_GPIO_DeInit+0x1cc>)
 80097d0:	4284      	cmp	r4, r0
 80097d2:	d065      	beq.n	80098a0 <HAL_GPIO_DeInit+0x194>
 80097d4:	4841      	ldr	r0, [pc, #260]	; (80098dc <HAL_GPIO_DeInit+0x1d0>)
 80097d6:	4284      	cmp	r4, r0
 80097d8:	d066      	beq.n	80098a8 <HAL_GPIO_DeInit+0x19c>
 80097da:	4841      	ldr	r0, [pc, #260]	; (80098e0 <HAL_GPIO_DeInit+0x1d4>)
 80097dc:	4284      	cmp	r4, r0
 80097de:	d067      	beq.n	80098b0 <HAL_GPIO_DeInit+0x1a4>
 80097e0:	4840      	ldr	r0, [pc, #256]	; (80098e4 <HAL_GPIO_DeInit+0x1d8>)
 80097e2:	4284      	cmp	r4, r0
 80097e4:	d054      	beq.n	8009890 <HAL_GPIO_DeInit+0x184>
 80097e6:	4840      	ldr	r0, [pc, #256]	; (80098e8 <HAL_GPIO_DeInit+0x1dc>)
 80097e8:	4284      	cmp	r4, r0
 80097ea:	d065      	beq.n	80098b8 <HAL_GPIO_DeInit+0x1ac>
 80097ec:	483f      	ldr	r0, [pc, #252]	; (80098ec <HAL_GPIO_DeInit+0x1e0>)
 80097ee:	4284      	cmp	r4, r0
 80097f0:	d066      	beq.n	80098c0 <HAL_GPIO_DeInit+0x1b4>
 80097f2:	483f      	ldr	r0, [pc, #252]	; (80098f0 <HAL_GPIO_DeInit+0x1e4>)
 80097f4:	4284      	cmp	r4, r0
 80097f6:	bf14      	ite	ne
 80097f8:	200a      	movne	r0, #10
 80097fa:	2009      	moveq	r0, #9
 80097fc:	fa00 f101 	lsl.w	r1, r0, r1
 8009800:	e000      	b.n	8009804 <HAL_GPIO_DeInit+0xf8>
 8009802:	2100      	movs	r1, #0
 8009804:	458e      	cmp	lr, r1
 8009806:	d11b      	bne.n	8009840 <HAL_GPIO_DeInit+0x134>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009808:	f8d9 1000 	ldr.w	r1, [r9]
 800980c:	ea21 010c 	bic.w	r1, r1, ip
 8009810:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009814:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009818:	ea21 010c 	bic.w	r1, r1, ip
 800981c:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009820:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8009824:	ea21 010c 	bic.w	r1, r1, ip
 8009828:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800982c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8009830:	ea21 010c 	bic.w	r1, r1, ip
 8009834:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009838:	68b1      	ldr	r1, [r6, #8]
 800983a:	ea21 0707 	bic.w	r7, r1, r7
 800983e:	60b7      	str	r7, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009840:	0059      	lsls	r1, r3, #1
 8009842:	2603      	movs	r6, #3
 8009844:	f8d4 c000 	ldr.w	ip, [r4]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009848:	270f      	movs	r7, #15
 800984a:	fa23 f006 	lsr.w	r0, r3, r6
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800984e:	408e      	lsls	r6, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009850:	f003 0107 	and.w	r1, r3, #7
  for(position = 0; position < GPIO_NUMBER; position++)
 8009854:	3301      	adds	r3, #1
 8009856:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800985a:	ea2c 0c06 	bic.w	ip, ip, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800985e:	0089      	lsls	r1, r1, #2
  for(position = 0; position < GPIO_NUMBER; position++)
 8009860:	2b10      	cmp	r3, #16
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009862:	f8c4 c000 	str.w	ip, [r4]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009866:	fa07 f701 	lsl.w	r7, r7, r1
 800986a:	6a01      	ldr	r1, [r0, #32]
 800986c:	ea21 0107 	bic.w	r1, r1, r7
 8009870:	6201      	str	r1, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009872:	68e1      	ldr	r1, [r4, #12]
 8009874:	ea21 0106 	bic.w	r1, r1, r6
 8009878:	60e1      	str	r1, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800987a:	6861      	ldr	r1, [r4, #4]
 800987c:	ea21 0202 	bic.w	r2, r1, r2
 8009880:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009882:	68a2      	ldr	r2, [r4, #8]
 8009884:	ea22 0606 	bic.w	r6, r2, r6
 8009888:	60a6      	str	r6, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800988a:	d182      	bne.n	8009792 <HAL_GPIO_DeInit+0x86>
    }
  }
}
 800988c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009890:	2006      	movs	r0, #6
 8009892:	fa00 f101 	lsl.w	r1, r0, r1
 8009896:	e7b5      	b.n	8009804 <HAL_GPIO_DeInit+0xf8>
 8009898:	2002      	movs	r0, #2
 800989a:	fa00 f101 	lsl.w	r1, r0, r1
 800989e:	e7b1      	b.n	8009804 <HAL_GPIO_DeInit+0xf8>
 80098a0:	2003      	movs	r0, #3
 80098a2:	fa00 f101 	lsl.w	r1, r0, r1
 80098a6:	e7ad      	b.n	8009804 <HAL_GPIO_DeInit+0xf8>
 80098a8:	2004      	movs	r0, #4
 80098aa:	fa00 f101 	lsl.w	r1, r0, r1
 80098ae:	e7a9      	b.n	8009804 <HAL_GPIO_DeInit+0xf8>
 80098b0:	2005      	movs	r0, #5
 80098b2:	fa00 f101 	lsl.w	r1, r0, r1
 80098b6:	e7a5      	b.n	8009804 <HAL_GPIO_DeInit+0xf8>
 80098b8:	2007      	movs	r0, #7
 80098ba:	fa00 f101 	lsl.w	r1, r0, r1
 80098be:	e7a1      	b.n	8009804 <HAL_GPIO_DeInit+0xf8>
 80098c0:	2008      	movs	r0, #8
 80098c2:	fa00 f101 	lsl.w	r1, r0, r1
 80098c6:	e79d      	b.n	8009804 <HAL_GPIO_DeInit+0xf8>
 80098c8:	40020000 	.word	0x40020000
 80098cc:	40020400 	.word	0x40020400
 80098d0:	08028a1c 	.word	0x08028a1c
 80098d4:	40020800 	.word	0x40020800
 80098d8:	40020c00 	.word	0x40020c00
 80098dc:	40021000 	.word	0x40021000
 80098e0:	40021400 	.word	0x40021400
 80098e4:	40021800 	.word	0x40021800
 80098e8:	40021c00 	.word	0x40021c00
 80098ec:	40022000 	.word	0x40022000
 80098f0:	40022400 	.word	0x40022400
 80098f4:	40013800 	.word	0x40013800
 80098f8:	40013c00 	.word	0x40013c00

080098fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009900:	460c      	mov	r4, r1
 8009902:	b129      	cbz	r1, 8009910 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009904:	692b      	ldr	r3, [r5, #16]
 8009906:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009908:	bf14      	ite	ne
 800990a:	2001      	movne	r0, #1
 800990c:	2000      	moveq	r0, #0
 800990e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009910:	f240 1177 	movw	r1, #375	; 0x177
 8009914:	4801      	ldr	r0, [pc, #4]	; (800991c <HAL_GPIO_ReadPin+0x20>)
 8009916:	f7fa f917 	bl	8003b48 <assert_failed>
 800991a:	e7f3      	b.n	8009904 <HAL_GPIO_ReadPin+0x8>
 800991c:	08028a1c 	.word	0x08028a1c

08009920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009924:	460c      	mov	r4, r1
{
 8009926:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009928:	b161      	cbz	r1, 8009944 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800992a:	2d01      	cmp	r5, #1
 800992c:	d803      	bhi.n	8009936 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800992e:	b905      	cbnz	r5, 8009932 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009930:	0424      	lsls	r4, r4, #16
 8009932:	61b4      	str	r4, [r6, #24]
  }
}
 8009934:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8009936:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800993a:	4805      	ldr	r0, [pc, #20]	; (8009950 <HAL_GPIO_WritePin+0x30>)
 800993c:	f7fa f904 	bl	8003b48 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009940:	61b4      	str	r4, [r6, #24]
}
 8009942:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009944:	f240 1197 	movw	r1, #407	; 0x197
 8009948:	4801      	ldr	r0, [pc, #4]	; (8009950 <HAL_GPIO_WritePin+0x30>)
 800994a:	f7fa f8fd 	bl	8003b48 <assert_failed>
 800994e:	e7ec      	b.n	800992a <HAL_GPIO_WritePin+0xa>
 8009950:	08028a1c 	.word	0x08028a1c

08009954 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009958:	460c      	mov	r4, r1
 800995a:	b141      	cbz	r1, 800996e <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800995c:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800995e:	ea04 0301 	and.w	r3, r4, r1
 8009962:	ea24 0401 	bic.w	r4, r4, r1
 8009966:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800996a:	61ac      	str	r4, [r5, #24]
}
 800996c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800996e:	f240 11af 	movw	r1, #431	; 0x1af
 8009972:	4802      	ldr	r0, [pc, #8]	; (800997c <HAL_GPIO_TogglePin+0x28>)
 8009974:	f7fa f8e8 	bl	8003b48 <assert_failed>
 8009978:	e7f0      	b.n	800995c <HAL_GPIO_TogglePin+0x8>
 800997a:	bf00      	nop
 800997c:	08028a1c 	.word	0x08028a1c

08009980 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop

08009984 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009984:	4a04      	ldr	r2, [pc, #16]	; (8009998 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8009986:	6951      	ldr	r1, [r2, #20]
 8009988:	4201      	tst	r1, r0
 800998a:	d100      	bne.n	800998e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800998c:	4770      	bx	lr
{
 800998e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009990:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009992:	f7ff fff5 	bl	8009980 <HAL_GPIO_EXTI_Callback>
}
 8009996:	bd08      	pop	{r3, pc}
 8009998:	40013c00 	.word	0x40013c00

0800999c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800999c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80099a0:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009a64 <I2C_TransferConfig+0xc8>
{
 80099a4:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80099a6:	4e28      	ldr	r6, [pc, #160]	; (8009a48 <I2C_TransferConfig+0xac>)
{
 80099a8:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80099aa:	6801      	ldr	r1, [r0, #0]
{
 80099ac:	4614      	mov	r4, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80099ae:	4827      	ldr	r0, [pc, #156]	; (8009a4c <I2C_TransferConfig+0xb0>)
{
 80099b0:	461f      	mov	r7, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80099b2:	42b1      	cmp	r1, r6
 80099b4:	bf18      	it	ne
 80099b6:	4561      	cmpne	r1, ip
{
 80099b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80099bc:	bf14      	ite	ne
 80099be:	2601      	movne	r6, #1
 80099c0:	2600      	moveq	r6, #0
 80099c2:	4281      	cmp	r1, r0
 80099c4:	bf0c      	ite	eq
 80099c6:	2600      	moveq	r6, #0
 80099c8:	f006 0601 	andne.w	r6, r6, #1
 80099cc:	b116      	cbz	r6, 80099d4 <I2C_TransferConfig+0x38>
 80099ce:	4b20      	ldr	r3, [pc, #128]	; (8009a50 <I2C_TransferConfig+0xb4>)
 80099d0:	4299      	cmp	r1, r3
 80099d2:	d126      	bne.n	8009a22 <I2C_TransferConfig+0x86>
  assert_param(IS_TRANSFER_MODE(Mode));
 80099d4:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80099d8:	d002      	beq.n	80099e0 <I2C_TransferConfig+0x44>
 80099da:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80099de:	d12c      	bne.n	8009a3a <I2C_TransferConfig+0x9e>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80099e0:	4b1c      	ldr	r3, [pc, #112]	; (8009a54 <I2C_TransferConfig+0xb8>)
 80099e2:	4599      	cmp	r9, r3
 80099e4:	d007      	beq.n	80099f6 <I2C_TransferConfig+0x5a>
 80099e6:	f429 6380 	bic.w	r3, r9, #1024	; 0x400
 80099ea:	4a1b      	ldr	r2, [pc, #108]	; (8009a58 <I2C_TransferConfig+0xbc>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d002      	beq.n	80099f6 <I2C_TransferConfig+0x5a>
 80099f0:	f1b9 0f00 	cmp.w	r9, #0
 80099f4:	d11b      	bne.n	8009a2e <I2C_TransferConfig+0x92>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80099fa:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099fe:	f3c5 0509 	ubfx	r5, r5, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a02:	4816      	ldr	r0, [pc, #88]	; (8009a5c <I2C_TransferConfig+0xc0>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a04:	ea44 0307 	orr.w	r3, r4, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a08:	684a      	ldr	r2, [r1, #4]
 8009a0a:	ea40 5959 	orr.w	r9, r0, r9, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a0e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a10:	ea22 0909 	bic.w	r9, r2, r9
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a18:	ea43 0309 	orr.w	r3, r3, r9
 8009a1c:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009a22:	f641 213a 	movw	r1, #6714	; 0x1a3a
 8009a26:	480e      	ldr	r0, [pc, #56]	; (8009a60 <I2C_TransferConfig+0xc4>)
 8009a28:	f7fa f88e 	bl	8003b48 <assert_failed>
 8009a2c:	e7d2      	b.n	80099d4 <I2C_TransferConfig+0x38>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8009a2e:	f641 213c 	movw	r1, #6716	; 0x1a3c
 8009a32:	480b      	ldr	r0, [pc, #44]	; (8009a60 <I2C_TransferConfig+0xc4>)
 8009a34:	f7fa f888 	bl	8003b48 <assert_failed>
 8009a38:	e7dd      	b.n	80099f6 <I2C_TransferConfig+0x5a>
  assert_param(IS_TRANSFER_MODE(Mode));
 8009a3a:	f641 213b 	movw	r1, #6715	; 0x1a3b
 8009a3e:	4808      	ldr	r0, [pc, #32]	; (8009a60 <I2C_TransferConfig+0xc4>)
 8009a40:	f7fa f882 	bl	8003b48 <assert_failed>
 8009a44:	e7cc      	b.n	80099e0 <I2C_TransferConfig+0x44>
 8009a46:	bf00      	nop
 8009a48:	40005400 	.word	0x40005400
 8009a4c:	40005c00 	.word	0x40005c00
 8009a50:	40006000 	.word	0x40006000
 8009a54:	80004000 	.word	0x80004000
 8009a58:	80002000 	.word	0x80002000
 8009a5c:	03ff63ff 	.word	0x03ff63ff
 8009a60:	08028a58 	.word	0x08028a58
 8009a64:	40005800 	.word	0x40005800

08009a68 <I2C_IsErrorOccurred>:
{
 8009a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a6c:	6803      	ldr	r3, [r0, #0]
{
 8009a6e:	460d      	mov	r5, r1
 8009a70:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a72:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a74:	f011 0110 	ands.w	r1, r1, #16
 8009a78:	d045      	beq.n	8009b06 <I2C_IsErrorOccurred+0x9e>
 8009a7a:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 8009a7c:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a80:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 8009a82:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a86:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	0696      	lsls	r6, r2, #26
 8009a8c:	f100 808d 	bmi.w	8009baa <I2C_IsErrorOccurred+0x142>
 8009a90:	f1b9 0f00 	cmp.w	r9, #0
 8009a94:	f040 808d 	bne.w	8009bb2 <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 8009a98:	1c6a      	adds	r2, r5, #1
 8009a9a:	d152      	bne.n	8009b42 <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a9c:	699a      	ldr	r2, [r3, #24]
 8009a9e:	0697      	lsls	r7, r2, #26
 8009aa0:	d5fc      	bpl.n	8009a9c <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009aa2:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8009aa4:	2104      	movs	r1, #4
    status = HAL_ERROR;
 8009aa6:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009aaa:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8009aac:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009aae:	05d5      	lsls	r5, r2, #23
 8009ab0:	d42d      	bmi.n	8009b0e <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009ab2:	0557      	lsls	r7, r2, #21
 8009ab4:	d53d      	bpl.n	8009b32 <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009ab6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8009aba:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009abe:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009ac0:	0596      	lsls	r6, r2, #22
 8009ac2:	d504      	bpl.n	8009ace <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ac8:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009acc:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	0790      	lsls	r0, r2, #30
 8009ad2:	d501      	bpl.n	8009ad8 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ad8:	699a      	ldr	r2, [r3, #24]
 8009ada:	07d2      	lsls	r2, r2, #31
 8009adc:	d524      	bpl.n	8009b28 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 8009ade:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ae0:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 8009ae2:	4e35      	ldr	r6, [pc, #212]	; (8009bb8 <I2C_IsErrorOccurred+0x150>)
    hi2c->State = HAL_I2C_STATE_READY;
 8009ae4:	2520      	movs	r5, #32
    __HAL_UNLOCK(hi2c);
 8009ae6:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 8009aea:	4032      	ands	r2, r6
 8009aec:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8009aee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8009af0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8009af4:	4319      	orrs	r1, r3
 8009af6:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009af8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009afc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8009b00:	4648      	mov	r0, r9
 8009b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8009b06:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 8009b08:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b0a:	05d5      	lsls	r5, r2, #23
 8009b0c:	d5d1      	bpl.n	8009ab2 <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b0e:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8009b12:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b16:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b18:	0550      	lsls	r0, r2, #21
 8009b1a:	d5d1      	bpl.n	8009ac0 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8009b20:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b24:	61d8      	str	r0, [r3, #28]
 8009b26:	e7cb      	b.n	8009ac0 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009b28:	699a      	ldr	r2, [r3, #24]
 8009b2a:	f042 0201 	orr.w	r2, r2, #1
 8009b2e:	619a      	str	r2, [r3, #24]
 8009b30:	e7d5      	b.n	8009ade <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b32:	0595      	lsls	r5, r2, #22
 8009b34:	d4c6      	bmi.n	8009ac4 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 8009b36:	f1b9 0f00 	cmp.w	r9, #0
 8009b3a:	d1c8      	bne.n	8009ace <I2C_IsErrorOccurred+0x66>
}
 8009b3c:	4648      	mov	r0, r9
 8009b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b42:	f7fc fd1b 	bl	800657c <HAL_GetTick>
 8009b46:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009b48:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b4a:	42a8      	cmp	r0, r5
 8009b4c:	d801      	bhi.n	8009b52 <I2C_IsErrorOccurred+0xea>
 8009b4e:	2d00      	cmp	r5, #0
 8009b50:	d19a      	bne.n	8009a88 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009b52:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8009b54:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b58:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8009b5a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b5c:	040e      	lsls	r6, r1, #16
 8009b5e:	d50d      	bpl.n	8009b7c <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 8009b60:	0441      	lsls	r1, r0, #17
 8009b62:	d40b      	bmi.n	8009b7c <I2C_IsErrorOccurred+0x114>
 8009b64:	2a20      	cmp	r2, #32
 8009b66:	d009      	beq.n	8009b7c <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b6e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8009b70:	f7fc fd04 	bl	800657c <HAL_GetTick>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	4607      	mov	r7, r0
 8009b78:	e000      	b.n	8009b7c <I2C_IsErrorOccurred+0x114>
 8009b7a:	6823      	ldr	r3, [r4, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b7c:	699e      	ldr	r6, [r3, #24]
 8009b7e:	f016 0620 	ands.w	r6, r6, #32
 8009b82:	d181      	bne.n	8009a88 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b84:	f7fc fcfa 	bl	800657c <HAL_GetTick>
 8009b88:	1bc0      	subs	r0, r0, r7
 8009b8a:	2819      	cmp	r0, #25
 8009b8c:	d9f5      	bls.n	8009b7a <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b8e:	6c62      	ldr	r2, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8009b90:	f04f 0901 	mov.w	r9, #1
 8009b94:	6823      	ldr	r3, [r4, #0]
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b96:	f042 0220 	orr.w	r2, r2, #32
              __HAL_UNLOCK(hi2c);
 8009b9a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b9e:	6462      	str	r2, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009ba0:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ba4:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8009ba8:	e7e8      	b.n	8009b7c <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 8009baa:	f1b9 0f00 	cmp.w	r9, #0
 8009bae:	f43f af78 	beq.w	8009aa2 <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	e7a8      	b.n	8009b08 <I2C_IsErrorOccurred+0xa0>
 8009bb6:	bf00      	nop
 8009bb8:	fe00e800 	.word	0xfe00e800

08009bbc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009bbc:	b570      	push	{r4, r5, r6, lr}
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	460d      	mov	r5, r1
 8009bc2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bc4:	e004      	b.n	8009bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bc6:	f7ff ff4f 	bl	8009a68 <I2C_IsErrorOccurred>
 8009bca:	b950      	cbnz	r0, 8009be2 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8009bcc:	1c6a      	adds	r2, r5, #1
 8009bce:	d10a      	bne.n	8009be6 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bd0:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bd2:	4632      	mov	r2, r6
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	079b      	lsls	r3, r3, #30
 8009bdc:	d5f3      	bpl.n	8009bc6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 8009bde:	2000      	movs	r0, #0
}
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009be2:	2001      	movs	r0, #1
}
 8009be4:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009be6:	f7fc fcc9 	bl	800657c <HAL_GetTick>
 8009bea:	1b80      	subs	r0, r0, r6
 8009bec:	42a8      	cmp	r0, r5
 8009bee:	d801      	bhi.n	8009bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	d1ed      	bne.n	8009bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009bf6:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bf8:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8009bfa:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bfc:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8009bfe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c02:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c04:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c08:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8009c0c:	bd70      	pop	{r4, r5, r6, pc}
 8009c0e:	bf00      	nop

08009c10 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	4605      	mov	r5, r0
 8009c14:	460c      	mov	r4, r1
 8009c16:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c18:	e008      	b.n	8009c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c1a:	f7ff ff25 	bl	8009a68 <I2C_IsErrorOccurred>
 8009c1e:	b9d8      	cbnz	r0, 8009c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c20:	f7fc fcac 	bl	800657c <HAL_GetTick>
 8009c24:	1b80      	subs	r0, r0, r6
 8009c26:	42a0      	cmp	r0, r4
 8009c28:	d809      	bhi.n	8009c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8009c2a:	b144      	cbz	r4, 8009c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c2c:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c2e:	4632      	mov	r2, r6
 8009c30:	4621      	mov	r1, r4
 8009c32:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	069b      	lsls	r3, r3, #26
 8009c38:	d5ef      	bpl.n	8009c1a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8009c3a:	2000      	movs	r0, #0
}
 8009c3c:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c3e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c40:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c42:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8009c44:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c46:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8009c48:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c4c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c4e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c52:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009c58:	2001      	movs	r0, #1
}
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}

08009c5c <I2C_WaitOnFlagUntilTimeout>:
{
 8009c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c60:	4680      	mov	r8, r0
 8009c62:	460f      	mov	r7, r1
 8009c64:	4616      	mov	r6, r2
 8009c66:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c68:	f8d8 3000 	ldr.w	r3, [r8]
 8009c6c:	e001      	b.n	8009c72 <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8009c6e:	1c6a      	adds	r2, r5, #1
 8009c70:	d10a      	bne.n	8009c88 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c72:	699c      	ldr	r4, [r3, #24]
 8009c74:	ea37 0204 	bics.w	r2, r7, r4
 8009c78:	bf0c      	ite	eq
 8009c7a:	2401      	moveq	r4, #1
 8009c7c:	2400      	movne	r4, #0
 8009c7e:	42b4      	cmp	r4, r6
 8009c80:	d0f5      	beq.n	8009c6e <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8009c82:	2000      	movs	r0, #0
}
 8009c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c88:	f7fc fc78 	bl	800657c <HAL_GetTick>
 8009c8c:	9b06      	ldr	r3, [sp, #24]
 8009c8e:	1ac0      	subs	r0, r0, r3
 8009c90:	42a8      	cmp	r0, r5
 8009c92:	d801      	bhi.n	8009c98 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8009c94:	2d00      	cmp	r5, #0
 8009c96:	d1e7      	bne.n	8009c68 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c98:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c9c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c9e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8009ca0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ca2:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8009ca4:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ca8:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009cac:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb0:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
        return HAL_ERROR;
 8009cb4:	e7e6      	b.n	8009c84 <I2C_WaitOnFlagUntilTimeout+0x28>
 8009cb6:	bf00      	nop

08009cb8 <I2C_RequestMemoryRead>:
{
 8009cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009cbc:	4f19      	ldr	r7, [pc, #100]	; (8009d24 <I2C_RequestMemoryRead+0x6c>)
{
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	461e      	mov	r6, r3
 8009cc2:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009cc4:	9700      	str	r7, [sp, #0]
{
 8009cc6:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009cc8:	2300      	movs	r3, #0
 8009cca:	b2f2      	uxtb	r2, r6
{
 8009ccc:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009cd0:	f7ff fe64 	bl	800999c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4642      	mov	r2, r8
 8009cd8:	4639      	mov	r1, r7
 8009cda:	f7ff ff6f 	bl	8009bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8009cde:	b9e0      	cbnz	r0, 8009d1a <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ce0:	2e01      	cmp	r6, #1
 8009ce2:	d110      	bne.n	8009d06 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009ce8:	4620      	mov	r0, r4
 8009cea:	2200      	movs	r2, #0
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cec:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009cee:	2140      	movs	r1, #64	; 0x40
 8009cf0:	463b      	mov	r3, r7
 8009cf2:	f8cd 8000 	str.w	r8, [sp]
 8009cf6:	f7ff ffb1 	bl	8009c5c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8009cfa:	3800      	subs	r0, #0
 8009cfc:	bf18      	it	ne
 8009cfe:	2001      	movne	r0, #1
}
 8009d00:	b002      	add	sp, #8
 8009d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d06:	6820      	ldr	r0, [r4, #0]
 8009d08:	0a2b      	lsrs	r3, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d0a:	4642      	mov	r2, r8
 8009d0c:	4639      	mov	r1, r7
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d0e:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d10:	4620      	mov	r0, r4
 8009d12:	f7ff ff53 	bl	8009bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d0e4      	beq.n	8009ce4 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 8009d1a:	2001      	movs	r0, #1
}
 8009d1c:	b002      	add	sp, #8
 8009d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d22:	bf00      	nop
 8009d24:	80002000 	.word	0x80002000

08009d28 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	f000 80c0 	beq.w	8009eae <HAL_I2C_Init+0x186>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009d2e:	6802      	ldr	r2, [r0, #0]
 8009d30:	4960      	ldr	r1, [pc, #384]	; (8009eb4 <HAL_I2C_Init+0x18c>)
{
 8009d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009d34:	4b60      	ldr	r3, [pc, #384]	; (8009eb8 <HAL_I2C_Init+0x190>)
 8009d36:	4604      	mov	r4, r0
 8009d38:	4860      	ldr	r0, [pc, #384]	; (8009ebc <HAL_I2C_Init+0x194>)
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	bf18      	it	ne
 8009d3e:	4282      	cmpne	r2, r0
 8009d40:	bf14      	ite	ne
 8009d42:	2301      	movne	r3, #1
 8009d44:	2300      	moveq	r3, #0
 8009d46:	428a      	cmp	r2, r1
 8009d48:	bf0c      	ite	eq
 8009d4a:	2300      	moveq	r3, #0
 8009d4c:	f003 0301 	andne.w	r3, r3, #1
 8009d50:	b11b      	cbz	r3, 8009d5a <HAL_I2C_Init+0x32>
 8009d52:	4b5b      	ldr	r3, [pc, #364]	; (8009ec0 <HAL_I2C_Init+0x198>)
 8009d54:	429a      	cmp	r2, r3
 8009d56:	f040 80a4 	bne.w	8009ea2 <HAL_I2C_Init+0x17a>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8009d5a:	68a3      	ldr	r3, [r4, #8]
 8009d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d60:	f080 8099 	bcs.w	8009e96 <HAL_I2C_Init+0x16e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8009d64:	68e3      	ldr	r3, [r4, #12]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d854      	bhi.n	8009e16 <HAL_I2C_Init+0xee>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8009d72:	d159      	bne.n	8009e28 <HAL_I2C_Init+0x100>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8009d74:	6963      	ldr	r3, [r4, #20]
 8009d76:	2bff      	cmp	r3, #255	; 0xff
 8009d78:	d85e      	bhi.n	8009e38 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8009d7a:	69a3      	ldr	r3, [r4, #24]
 8009d7c:	2b07      	cmp	r3, #7
 8009d7e:	d863      	bhi.n	8009e48 <HAL_I2C_Init+0x120>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8009d80:	69e3      	ldr	r3, [r4, #28]
 8009d82:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8009d86:	d168      	bne.n	8009e5a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8009d88:	6a23      	ldr	r3, [r4, #32]
 8009d8a:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8009d8e:	d16d      	bne.n	8009e6c <HAL_I2C_Init+0x144>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d90:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009d94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d072      	beq.n	8009e82 <HAL_I2C_Init+0x15a>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d9c:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d9e:	68e0      	ldr	r0, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009da0:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009da4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009da8:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8009daa:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8009db0:	f021 0101 	bic.w	r1, r1, #1
 8009db4:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009db6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009dbe:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009dc0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009dc2:	d064      	beq.n	8009e8e <HAL_I2C_Init+0x166>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009dc4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009dc8:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009dca:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009dcc:	d102      	bne.n	8009dd4 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009dd2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009dd4:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009dd6:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009dd8:	483a      	ldr	r0, [pc, #232]	; (8009ec4 <HAL_I2C_Init+0x19c>)
  hi2c->State = HAL_I2C_STATE_READY;
 8009dda:	2720      	movs	r7, #32
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009ddc:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009dde:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009de0:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009de4:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009de6:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009de8:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009dea:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009dec:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009df0:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009df2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009df6:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009df8:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8009dfa:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009dfc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009dfe:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	f042 0201 	orr.w	r2, r2, #1
 8009e06:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e08:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e0a:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e0e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8009e16:	f240 2117 	movw	r1, #535	; 0x217
 8009e1a:	482b      	ldr	r0, [pc, #172]	; (8009ec8 <HAL_I2C_Init+0x1a0>)
 8009e1c:	f7f9 fe94 	bl	8003b48 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8009e26:	d0a5      	beq.n	8009d74 <HAL_I2C_Init+0x4c>
 8009e28:	f44f 7106 	mov.w	r1, #536	; 0x218
 8009e2c:	4826      	ldr	r0, [pc, #152]	; (8009ec8 <HAL_I2C_Init+0x1a0>)
 8009e2e:	f7f9 fe8b 	bl	8003b48 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8009e32:	6963      	ldr	r3, [r4, #20]
 8009e34:	2bff      	cmp	r3, #255	; 0xff
 8009e36:	d9a0      	bls.n	8009d7a <HAL_I2C_Init+0x52>
 8009e38:	f240 2119 	movw	r1, #537	; 0x219
 8009e3c:	4822      	ldr	r0, [pc, #136]	; (8009ec8 <HAL_I2C_Init+0x1a0>)
 8009e3e:	f7f9 fe83 	bl	8003b48 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8009e42:	69a3      	ldr	r3, [r4, #24]
 8009e44:	2b07      	cmp	r3, #7
 8009e46:	d99b      	bls.n	8009d80 <HAL_I2C_Init+0x58>
 8009e48:	f240 211a 	movw	r1, #538	; 0x21a
 8009e4c:	481e      	ldr	r0, [pc, #120]	; (8009ec8 <HAL_I2C_Init+0x1a0>)
 8009e4e:	f7f9 fe7b 	bl	8003b48 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8009e52:	69e3      	ldr	r3, [r4, #28]
 8009e54:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8009e58:	d096      	beq.n	8009d88 <HAL_I2C_Init+0x60>
 8009e5a:	f240 211b 	movw	r1, #539	; 0x21b
 8009e5e:	481a      	ldr	r0, [pc, #104]	; (8009ec8 <HAL_I2C_Init+0x1a0>)
 8009e60:	f7f9 fe72 	bl	8003b48 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8009e64:	6a23      	ldr	r3, [r4, #32]
 8009e66:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8009e6a:	d091      	beq.n	8009d90 <HAL_I2C_Init+0x68>
 8009e6c:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8009e70:	4815      	ldr	r0, [pc, #84]	; (8009ec8 <HAL_I2C_Init+0x1a0>)
 8009e72:	f7f9 fe69 	bl	8003b48 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e76:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009e7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d18c      	bne.n	8009d9c <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 8009e82:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8009e84:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8009e88:	f7fa fed8 	bl	8004c3c <HAL_I2C_MspInit>
 8009e8c:	e786      	b.n	8009d9c <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e92:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e94:	e79e      	b.n	8009dd4 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8009e96:	f240 2116 	movw	r1, #534	; 0x216
 8009e9a:	480b      	ldr	r0, [pc, #44]	; (8009ec8 <HAL_I2C_Init+0x1a0>)
 8009e9c:	f7f9 fe54 	bl	8003b48 <assert_failed>
 8009ea0:	e760      	b.n	8009d64 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009ea2:	f240 2115 	movw	r1, #533	; 0x215
 8009ea6:	4808      	ldr	r0, [pc, #32]	; (8009ec8 <HAL_I2C_Init+0x1a0>)
 8009ea8:	f7f9 fe4e 	bl	8003b48 <assert_failed>
 8009eac:	e755      	b.n	8009d5a <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 8009eae:	2001      	movs	r0, #1
}
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	40005c00 	.word	0x40005c00
 8009eb8:	40005400 	.word	0x40005400
 8009ebc:	40005800 	.word	0x40005800
 8009ec0:	40006000 	.word	0x40006000
 8009ec4:	02008000 	.word	0x02008000
 8009ec8:	08028a58 	.word	0x08028a58

08009ecc <HAL_I2C_Master_Transmit>:
{
 8009ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed0:	461d      	mov	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ed2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009ed6:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ed8:	2b20      	cmp	r3, #32
{
 8009eda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009edc:	f040 808a 	bne.w	8009ff4 <HAL_I2C_Master_Transmit+0x128>
    __HAL_LOCK(hi2c);
 8009ee0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	f000 8084 	beq.w	8009ff4 <HAL_I2C_Master_Transmit+0x128>
 8009eec:	f04f 0a01 	mov.w	sl, #1
 8009ef0:	4688      	mov	r8, r1
 8009ef2:	4691      	mov	r9, r2
 8009ef4:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009ef8:	f7fc fb40 	bl	800657c <HAL_GetTick>
 8009efc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009efe:	4652      	mov	r2, sl
 8009f00:	2319      	movs	r3, #25
 8009f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f06:	4620      	mov	r0, r4
 8009f08:	9600      	str	r6, [sp, #0]
 8009f0a:	f7ff fea7 	bl	8009c5c <I2C_WaitOnFlagUntilTimeout>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d16c      	bne.n	8009fec <HAL_I2C_Master_Transmit+0x120>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009f12:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f14:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8009f16:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f1a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009f1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f22:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009f24:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009f28:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2bff      	cmp	r3, #255	; 0xff
 8009f2e:	d865      	bhi.n	8009ffc <HAL_I2C_Master_Transmit+0x130>
      hi2c->XferSize = hi2c->XferCount;
 8009f30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f36:	4d3c      	ldr	r5, [pc, #240]	; (800a028 <HAL_I2C_Master_Transmit+0x15c>)
 8009f38:	4641      	mov	r1, r8
      hi2c->XferSize = hi2c->XferCount;
 8009f3a:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009f40:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f42:	b2d2      	uxtb	r2, r2
 8009f44:	f7ff fd2a 	bl	800999c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009f48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f4a:	4632      	mov	r2, r6
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d039      	beq.n	8009fca <HAL_I2C_Master_Transmit+0xfe>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f56:	f7ff fe31 	bl	8009bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d146      	bne.n	8009fec <HAL_I2C_Master_Transmit+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009f5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009f60:	6821      	ldr	r1, [r4, #0]
 8009f62:	f812 5b01 	ldrb.w	r5, [r2], #1
      hi2c->XferSize--;
 8009f66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009f68:	628d      	str	r5, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8009f6a:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009f6c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8009f6e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009f70:	3d01      	subs	r5, #1
      hi2c->XferSize--;
 8009f72:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8009f74:	b2ad      	uxth	r5, r5
      hi2c->XferSize--;
 8009f76:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009f78:	8565      	strh	r5, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009f7c:	b292      	uxth	r2, r2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e2      	bne.n	8009f48 <HAL_I2C_Master_Transmit+0x7c>
 8009f82:	2a00      	cmp	r2, #0
 8009f84:	d0e0      	beq.n	8009f48 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f86:	4602      	mov	r2, r0
 8009f88:	463b      	mov	r3, r7
 8009f8a:	2180      	movs	r1, #128	; 0x80
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	9600      	str	r6, [sp, #0]
 8009f90:	f7ff fe64 	bl	8009c5c <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f94:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f98:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f9e:	4641      	mov	r1, r8
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4672      	mov	r2, lr
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009fa4:	bb15      	cbnz	r5, 8009fec <HAL_I2C_Master_Transmit+0x120>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fa6:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
 8009faa:	fa1f fc8c 	uxth.w	ip, ip
 8009fae:	45f4      	cmp	ip, lr
 8009fb0:	d92f      	bls.n	800a012 <HAL_I2C_Master_Transmit+0x146>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009fb2:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009fb6:	9500      	str	r5, [sp, #0]
 8009fb8:	f7ff fcf0 	bl	800999c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009fbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fbe:	4632      	mov	r2, r6
 8009fc0:	4639      	mov	r1, r7
    while (hi2c->XferCount > 0U)
 8009fc2:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fc4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1c5      	bne.n	8009f56 <HAL_I2C_Master_Transmit+0x8a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fca:	f7ff fe21 	bl	8009c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009fce:	b968      	cbnz	r0, 8009fec <HAL_I2C_Master_Transmit+0x120>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8009fd4:	4d15      	ldr	r5, [pc, #84]	; (800a02c <HAL_I2C_Master_Transmit+0x160>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fd6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	402a      	ands	r2, r5
 8009fdc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009fde:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009fe2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009fe6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009fea:	e000      	b.n	8009fee <HAL_I2C_Master_Transmit+0x122>
      return HAL_ERROR;
 8009fec:	2001      	movs	r0, #1
}
 8009fee:	b002      	add	sp, #8
 8009ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8009ff4:	2002      	movs	r0, #2
}
 8009ff6:	b002      	add	sp, #8
 8009ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ffc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ffe:	480a      	ldr	r0, [pc, #40]	; (800a028 <HAL_I2C_Master_Transmit+0x15c>)
 800a000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a004:	4641      	mov	r1, r8
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a006:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a008:	9000      	str	r0, [sp, #0]
 800a00a:	4620      	mov	r0, r4
 800a00c:	f7ff fcc6 	bl	800999c <I2C_TransferConfig>
 800a010:	e79a      	b.n	8009f48 <HAL_I2C_Master_Transmit+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 800a012:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a018:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800a01a:	b292      	uxth	r2, r2
 800a01c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a01e:	b2d2      	uxtb	r2, r2
 800a020:	f7ff fcbc 	bl	800999c <I2C_TransferConfig>
 800a024:	e790      	b.n	8009f48 <HAL_I2C_Master_Transmit+0x7c>
 800a026:	bf00      	nop
 800a028:	80002000 	.word	0x80002000
 800a02c:	fe00e800 	.word	0xfe00e800

0800a030 <HAL_I2C_Mem_Read>:
{
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	461d      	mov	r5, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800a036:	3b01      	subs	r3, #1
{
 800a038:	b085      	sub	sp, #20
 800a03a:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800a03c:	2b01      	cmp	r3, #1
{
 800a03e:	460e      	mov	r6, r1
 800a040:	4617      	mov	r7, r2
 800a042:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800a046:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800a04a:	d904      	bls.n	800a056 <HAL_I2C_Mem_Read+0x26>
 800a04c:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800a050:	4863      	ldr	r0, [pc, #396]	; (800a1e0 <HAL_I2C_Mem_Read+0x1b0>)
 800a052:	f7f9 fd79 	bl	8003b48 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a056:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	d125      	bne.n	800a0aa <HAL_I2C_Mem_Read+0x7a>
    if ((pData == NULL) || (Size == 0U))
 800a05e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a060:	b1e3      	cbz	r3, 800a09c <HAL_I2C_Mem_Read+0x6c>
 800a062:	f1bb 0f00 	cmp.w	fp, #0
 800a066:	d019      	beq.n	800a09c <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 800a068:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d01c      	beq.n	800a0aa <HAL_I2C_Mem_Read+0x7a>
 800a070:	f04f 0a01 	mov.w	sl, #1
 800a074:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a078:	f7fc fa80 	bl	800657c <HAL_GetTick>
 800a07c:	4680      	mov	r8, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a07e:	4652      	mov	r2, sl
 800a080:	2319      	movs	r3, #25
 800a082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a086:	4620      	mov	r0, r4
 800a088:	f8cd 8000 	str.w	r8, [sp]
 800a08c:	f7ff fde6 	bl	8009c5c <I2C_WaitOnFlagUntilTimeout>
 800a090:	9003      	str	r0, [sp, #12]
 800a092:	b170      	cbz	r0, 800a0b2 <HAL_I2C_Mem_Read+0x82>
      return HAL_ERROR;
 800a094:	2001      	movs	r0, #1
}
 800a096:	b005      	add	sp, #20
 800a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a09c:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800a0a0:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a0a2:	6463      	str	r3, [r4, #68]	; 0x44
}
 800a0a4:	b005      	add	sp, #20
 800a0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800a0aa:	2002      	movs	r0, #2
}
 800a0ac:	b005      	add	sp, #20
 800a0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
 800a0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a0b4:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a0b6:	2040      	movs	r0, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0b8:	463a      	mov	r2, r7
    hi2c->pBuffPtr  = pData;
 800a0ba:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0bc:	462b      	mov	r3, r5
    hi2c->XferISR   = NULL;
 800a0be:	9d03      	ldr	r5, [sp, #12]
 800a0c0:	6365      	str	r5, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0c2:	e9cd 9800 	strd	r9, r8, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a0c6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0ca:	4631      	mov	r1, r6
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a0cc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0d0:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0d2:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800a0d4:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0d8:	f7ff fdee 	bl	8009cb8 <I2C_RequestMemoryRead>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d157      	bne.n	800a190 <HAL_I2C_Mem_Read+0x160>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	2bff      	cmp	r3, #255	; 0xff
 800a0e6:	d958      	bls.n	800a19a <HAL_I2C_Mem_Read+0x16a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0e8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a0ea:	483e      	ldr	r0, [pc, #248]	; (800a1e4 <HAL_I2C_Mem_Read+0x1b4>)
 800a0ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0f0:	4631      	mov	r1, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0f2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a0f4:	9000      	str	r0, [sp, #0]
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7ff fc50 	bl	800999c <I2C_TransferConfig>
 800a0fc:	e003      	b.n	800a106 <HAL_I2C_Mem_Read+0xd6>
    } while (hi2c->XferCount > 0U);
 800a0fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a100:	b29b      	uxth	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d056      	beq.n	800a1b4 <HAL_I2C_Mem_Read+0x184>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a106:	464b      	mov	r3, r9
 800a108:	2200      	movs	r2, #0
 800a10a:	2104      	movs	r1, #4
 800a10c:	4620      	mov	r0, r4
 800a10e:	f8cd 8000 	str.w	r8, [sp]
 800a112:	f7ff fda3 	bl	8009c5c <I2C_WaitOnFlagUntilTimeout>
 800a116:	2800      	cmp	r0, #0
 800a118:	d1bc      	bne.n	800a094 <HAL_I2C_Mem_Read+0x64>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a11e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a120:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800a122:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a124:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a126:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 800a128:	6a65      	ldr	r5, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800a12a:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800a12c:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800a12e:	3501      	adds	r5, #1
      hi2c->XferSize--;
 800a130:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800a132:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a134:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a136:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a138:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800a13a:	6265      	str	r5, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1de      	bne.n	800a0fe <HAL_I2C_Mem_Read+0xce>
 800a140:	2a00      	cmp	r2, #0
 800a142:	d0dc      	beq.n	800a0fe <HAL_I2C_Mem_Read+0xce>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a144:	4602      	mov	r2, r0
 800a146:	464b      	mov	r3, r9
 800a148:	2180      	movs	r1, #128	; 0x80
 800a14a:	4620      	mov	r0, r4
 800a14c:	f8cd 8000 	str.w	r8, [sp]
 800a150:	f7ff fd84 	bl	8009c5c <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a154:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a158:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a15a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a15e:	4631      	mov	r1, r6
 800a160:	4620      	mov	r0, r4
 800a162:	4662      	mov	r2, ip
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a164:	2d00      	cmp	r5, #0
 800a166:	d195      	bne.n	800a094 <HAL_I2C_Mem_Read+0x64>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a168:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 800a16a:	b2bf      	uxth	r7, r7
 800a16c:	4567      	cmp	r7, ip
 800a16e:	d905      	bls.n	800a17c <HAL_I2C_Mem_Read+0x14c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a170:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a174:	9500      	str	r5, [sp, #0]
 800a176:	f7ff fc11 	bl	800999c <I2C_TransferConfig>
 800a17a:	e7c0      	b.n	800a0fe <HAL_I2C_Mem_Read+0xce>
          hi2c->XferSize = hi2c->XferCount;
 800a17c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a17e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a182:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800a184:	b292      	uxth	r2, r2
 800a186:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a188:	b2d2      	uxtb	r2, r2
 800a18a:	f7ff fc07 	bl	800999c <I2C_TransferConfig>
 800a18e:	e7b6      	b.n	800a0fe <HAL_I2C_Mem_Read+0xce>
      __HAL_UNLOCK(hi2c);
 800a190:	9b03      	ldr	r3, [sp, #12]
      return HAL_ERROR;
 800a192:	4650      	mov	r0, sl
      __HAL_UNLOCK(hi2c);
 800a194:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a198:	e77d      	b.n	800a096 <HAL_I2C_Mem_Read+0x66>
      hi2c->XferSize = hi2c->XferCount;
 800a19a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a19c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a1a0:	4d10      	ldr	r5, [pc, #64]	; (800a1e4 <HAL_I2C_Mem_Read+0x1b4>)
 800a1a2:	4631      	mov	r1, r6
      hi2c->XferSize = hi2c->XferCount;
 800a1a4:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800a1aa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1ac:	b2d2      	uxtb	r2, r2
 800a1ae:	f7ff fbf5 	bl	800999c <I2C_TransferConfig>
 800a1b2:	e7a8      	b.n	800a106 <HAL_I2C_Mem_Read+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f7ff fd29 	bl	8009c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f47f af68 	bne.w	800a094 <HAL_I2C_Mem_Read+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800a1c8:	4d07      	ldr	r5, [pc, #28]	; (800a1e8 <HAL_I2C_Mem_Read+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1ca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	402a      	ands	r2, r5
 800a1d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a1d2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a1d6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a1da:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a1de:	e75a      	b.n	800a096 <HAL_I2C_Mem_Read+0x66>
 800a1e0:	08028a58 	.word	0x08028a58
 800a1e4:	80002400 	.word	0x80002400
 800a1e8:	fe00e800 	.word	0xfe00e800

0800a1ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a1f0:	4b22      	ldr	r3, [pc, #136]	; (800a27c <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800a1f2:	4e23      	ldr	r6, [pc, #140]	; (800a280 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800a1f4:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a1f6:	6822      	ldr	r2, [r4, #0]
 800a1f8:	4822      	ldr	r0, [pc, #136]	; (800a284 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	bf18      	it	ne
 800a1fe:	42b2      	cmpne	r2, r6
 800a200:	bf14      	ite	ne
 800a202:	2301      	movne	r3, #1
 800a204:	2300      	moveq	r3, #0
 800a206:	4282      	cmp	r2, r0
 800a208:	bf0c      	ite	eq
 800a20a:	2300      	moveq	r3, #0
 800a20c:	f003 0301 	andne.w	r3, r3, #1
 800a210:	b113      	cbz	r3, 800a218 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800a212:	4b1d      	ldr	r3, [pc, #116]	; (800a288 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800a214:	429a      	cmp	r2, r3
 800a216:	d12c      	bne.n	800a272 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800a218:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800a21c:	d124      	bne.n	800a268 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a21e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a222:	2b20      	cmp	r3, #32
 800a224:	b2de      	uxtb	r6, r3
 800a226:	d11d      	bne.n	800a264 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a228:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d019      	beq.n	800a264 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a230:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a232:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a234:	2700      	movs	r7, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a236:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800a23a:	681a      	ldr	r2, [r3, #0]

    return HAL_OK;
 800a23c:	4638      	mov	r0, r7
    __HAL_I2C_DISABLE(hi2c);
 800a23e:	f022 0201 	bic.w	r2, r2, #1
 800a242:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a24a:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800a24c:	6819      	ldr	r1, [r3, #0]
 800a24e:	430d      	orrs	r5, r1
 800a250:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	f042 0201 	orr.w	r2, r2, #1
 800a258:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a25a:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a25e:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a264:	2002      	movs	r0, #2
}
 800a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800a268:	215f      	movs	r1, #95	; 0x5f
 800a26a:	4808      	ldr	r0, [pc, #32]	; (800a28c <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800a26c:	f7f9 fc6c 	bl	8003b48 <assert_failed>
 800a270:	e7d5      	b.n	800a21e <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a272:	215e      	movs	r1, #94	; 0x5e
 800a274:	4805      	ldr	r0, [pc, #20]	; (800a28c <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800a276:	f7f9 fc67 	bl	8003b48 <assert_failed>
 800a27a:	e7cd      	b.n	800a218 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800a27c:	40005400 	.word	0x40005400
 800a280:	40005800 	.word	0x40005800
 800a284:	40005c00 	.word	0x40005c00
 800a288:	40006000 	.word	0x40006000
 800a28c:	08028a90 	.word	0x08028a90

0800a290 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a292:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a294:	4b21      	ldr	r3, [pc, #132]	; (800a31c <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800a296:	4e22      	ldr	r6, [pc, #136]	; (800a320 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800a298:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a29a:	6822      	ldr	r2, [r4, #0]
 800a29c:	4821      	ldr	r0, [pc, #132]	; (800a324 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	bf18      	it	ne
 800a2a2:	42b2      	cmpne	r2, r6
 800a2a4:	bf14      	ite	ne
 800a2a6:	2301      	movne	r3, #1
 800a2a8:	2300      	moveq	r3, #0
 800a2aa:	4282      	cmp	r2, r0
 800a2ac:	bf0c      	ite	eq
 800a2ae:	2300      	moveq	r3, #0
 800a2b0:	f003 0301 	andne.w	r3, r3, #1
 800a2b4:	b113      	cbz	r3, 800a2bc <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800a2b6:	4b1c      	ldr	r3, [pc, #112]	; (800a328 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d12a      	bne.n	800a312 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800a2bc:	2d0f      	cmp	r5, #15
 800a2be:	d823      	bhi.n	800a308 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	b2df      	uxtb	r7, r3
 800a2c8:	d11c      	bne.n	800a304 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2ca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d018      	beq.n	800a304 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a2d2:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2d4:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2d6:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2d8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800a2dc:	681a      	ldr	r2, [r3, #0]

    return HAL_OK;
 800a2de:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 800a2e0:	f022 0201 	bic.w	r2, r2, #1
 800a2e4:	601a      	str	r2, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800a2e6:	6819      	ldr	r1, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800a2e8:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800a2ec:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800a2f0:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	f042 0201 	orr.w	r2, r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a2fa:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a2fe:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a304:	2002      	movs	r0, #2
}
 800a306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800a308:	218d      	movs	r1, #141	; 0x8d
 800a30a:	4808      	ldr	r0, [pc, #32]	; (800a32c <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800a30c:	f7f9 fc1c 	bl	8003b48 <assert_failed>
 800a310:	e7d6      	b.n	800a2c0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a312:	218c      	movs	r1, #140	; 0x8c
 800a314:	4805      	ldr	r0, [pc, #20]	; (800a32c <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800a316:	f7f9 fc17 	bl	8003b48 <assert_failed>
 800a31a:	e7cf      	b.n	800a2bc <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800a31c:	40005400 	.word	0x40005400
 800a320:	40005800 	.word	0x40005800
 800a324:	40005c00 	.word	0x40005c00
 800a328:	40006000 	.word	0x40006000
 800a32c:	08028a90 	.word	0x08028a90

0800a330 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a330:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a332:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800a336:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	601a      	str	r2, [r3, #0]
}
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop

0800a340 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a342:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a344:	2800      	cmp	r0, #0
 800a346:	f000 809d 	beq.w	800a484 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800a34a:	6804      	ldr	r4, [r0, #0]
 800a34c:	4605      	mov	r5, r0
 800a34e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800a352:	d003      	beq.n	800a35c <HAL_PCD_Init+0x1c>
 800a354:	4b4f      	ldr	r3, [pc, #316]	; (800a494 <HAL_PCD_Init+0x154>)
 800a356:	429c      	cmp	r4, r3
 800a358:	f040 8081 	bne.w	800a45e <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a35c:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800a360:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 8086 	beq.w	800a476 <HAL_PCD_Init+0x136>
 800a36a:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a36c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a36e:	462e      	mov	r6, r5
 800a370:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800a372:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a376:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a378:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a37a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800a37e:	bf08      	it	eq
 800a380:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800a382:	f006 fc85 	bl	8010c90 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a386:	f856 eb10 	ldr.w	lr, [r6], #16
 800a38a:	46b4      	mov	ip, r6
 800a38c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a392:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a398:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a39c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a3a0:	4670      	mov	r0, lr
 800a3a2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a3a6:	f006 fbb1 	bl	8010b0c <USB_CoreInit>
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	b130      	cbz	r0, 800a3bc <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800a3ae:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a3b0:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800a3b2:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a3b4:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800a3b8:	b00b      	add	sp, #44	; 0x2c
 800a3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a3bc:	4601      	mov	r1, r0
 800a3be:	6828      	ldr	r0, [r5, #0]
 800a3c0:	f006 fc6e 	bl	8010ca0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3c4:	6868      	ldr	r0, [r5, #4]
 800a3c6:	b358      	cbz	r0, 800a420 <HAL_PCD_Init+0xe0>
 800a3c8:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800a3ca:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a3ce:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800a3d0:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3d4:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800a3d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800a3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a3e0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3e4:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800a3e8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3ec:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a3ee:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800a3f2:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a3f4:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3f8:	d3ea      	bcc.n	800a3d0 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a400:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800a402:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800a406:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a40a:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800a40c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a410:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a412:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a416:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a41a:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a41e:	d3ed      	bcc.n	800a3fc <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a420:	466c      	mov	r4, sp
 800a422:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a426:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a42a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a42e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a432:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a436:	6828      	ldr	r0, [r5, #0]
 800a438:	f006 fcb6 	bl	8010da8 <USB_DevInit>
 800a43c:	4604      	mov	r4, r0
 800a43e:	2800      	cmp	r0, #0
 800a440:	d1b5      	bne.n	800a3ae <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800a442:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800a444:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800a446:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800a44a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800a44c:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800a450:	d01c      	beq.n	800a48c <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800a452:	6828      	ldr	r0, [r5, #0]
 800a454:	f007 f874 	bl	8011540 <USB_DevDisconnect>
}
 800a458:	4620      	mov	r0, r4
 800a45a:	b00b      	add	sp, #44	; 0x2c
 800a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800a45e:	2187      	movs	r1, #135	; 0x87
 800a460:	480d      	ldr	r0, [pc, #52]	; (800a498 <HAL_PCD_Init+0x158>)
 800a462:	f7f9 fb71 	bl	8003b48 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a466:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800a46a:	682c      	ldr	r4, [r5, #0]
 800a46c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a470:	2b00      	cmp	r3, #0
 800a472:	f47f af7a 	bne.w	800a36a <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800a476:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800a478:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800a47c:	f016 fd86 	bl	8020f8c <HAL_PCD_MspInit>
 800a480:	6828      	ldr	r0, [r5, #0]
 800a482:	e773      	b.n	800a36c <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800a484:	2401      	movs	r4, #1
}
 800a486:	4620      	mov	r0, r4
 800a488:	b00b      	add	sp, #44	; 0x2c
 800a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a48c:	4628      	mov	r0, r5
 800a48e:	f000 fcc3 	bl	800ae18 <HAL_PCDEx_ActivateLPM>
 800a492:	e7de      	b.n	800a452 <HAL_PCD_Init+0x112>
 800a494:	40040000 	.word	0x40040000
 800a498:	08028acc 	.word	0x08028acc

0800a49c <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800a49c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d00e      	beq.n	800a4c2 <HAL_PCD_Start+0x26>
 800a4a4:	2301      	movs	r3, #1
{
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800a4aa:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800a4ac:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800a4b0:	f006 fbe6 	bl	8010c80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a4b4:	6820      	ldr	r0, [r4, #0]
 800a4b6:	f007 f833 	bl	8011520 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800a4c0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800a4c2:	2002      	movs	r0, #2
}
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop

0800a4c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4cc:	6806      	ldr	r6, [r0, #0]
{
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f007 f874 	bl	80115c0 <USB_GetMode>
 800a4d8:	b110      	cbz	r0, 800a4e0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800a4da:	b007      	add	sp, #28
 800a4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a4e0:	4683      	mov	fp, r0
 800a4e2:	6820      	ldr	r0, [r4, #0]
 800a4e4:	f007 f83c 	bl	8011560 <USB_ReadInterrupts>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d0f6      	beq.n	800a4da <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a4ec:	6820      	ldr	r0, [r4, #0]
 800a4ee:	f007 f837 	bl	8011560 <USB_ReadInterrupts>
 800a4f2:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a4f6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a4f8:	d003      	beq.n	800a502 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a4fa:	6943      	ldr	r3, [r0, #20]
 800a4fc:	f003 0302 	and.w	r3, r3, #2
 800a500:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a502:	f007 f82d 	bl	8011560 <USB_ReadInterrupts>
 800a506:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a50a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a50c:	d012      	beq.n	800a534 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a50e:	6983      	ldr	r3, [r0, #24]
 800a510:	f023 0310 	bic.w	r3, r3, #16
 800a514:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800a516:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a518:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a51c:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a520:	2b02      	cmp	r3, #2
 800a522:	f000 8266 	beq.w	800a9f2 <HAL_PCD_IRQHandler+0x52a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a526:	2b06      	cmp	r3, #6
 800a528:	f000 81c5 	beq.w	800a8b6 <HAL_PCD_IRQHandler+0x3ee>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a52c:	6983      	ldr	r3, [r0, #24]
 800a52e:	f043 0310 	orr.w	r3, r3, #16
 800a532:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a534:	f007 f814 	bl	8011560 <USB_ReadInterrupts>
 800a538:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a53c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a53e:	f040 80df 	bne.w	800a700 <HAL_PCD_IRQHandler+0x238>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a542:	f007 f80d 	bl	8011560 <USB_ReadInterrupts>
 800a546:	0342      	lsls	r2, r0, #13
 800a548:	d478      	bmi.n	800a63c <HAL_PCD_IRQHandler+0x174>
 800a54a:	f8d4 8000 	ldr.w	r8, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a54e:	4640      	mov	r0, r8
 800a550:	f007 f806 	bl	8011560 <USB_ReadInterrupts>
 800a554:	2800      	cmp	r0, #0
 800a556:	db5d      	blt.n	800a614 <HAL_PCD_IRQHandler+0x14c>
 800a558:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a55a:	f007 f801 	bl	8011560 <USB_ReadInterrupts>
 800a55e:	0500      	lsls	r0, r0, #20
 800a560:	d44d      	bmi.n	800a5fe <HAL_PCD_IRQHandler+0x136>
 800a562:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a564:	f006 fffc 	bl	8011560 <USB_ReadInterrupts>
 800a568:	0102      	lsls	r2, r0, #4
 800a56a:	d514      	bpl.n	800a596 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a56c:	6822      	ldr	r2, [r4, #0]
 800a56e:	6953      	ldr	r3, [r2, #20]
 800a570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a574:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800a576:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f040 8185 	bne.w	800a88a <HAL_PCD_IRQHandler+0x3c2>
        hpcd->LPM_State = LPM_L1;
 800a580:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a582:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800a584:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a588:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a58a:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800a58e:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a592:	f016 fe69 	bl	8021268 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	f006 ffe2 	bl	8011560 <USB_ReadInterrupts>
 800a59c:	04c3      	lsls	r3, r0, #19
 800a59e:	f100 8129 	bmi.w	800a7f4 <HAL_PCD_IRQHandler+0x32c>
 800a5a2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a5a4:	f006 ffdc 	bl	8011560 <USB_ReadInterrupts>
 800a5a8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800a5ac:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a5ae:	f040 810a 	bne.w	800a7c6 <HAL_PCD_IRQHandler+0x2fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a5b2:	f006 ffd5 	bl	8011560 <USB_ReadInterrupts>
 800a5b6:	0707      	lsls	r7, r0, #28
 800a5b8:	f100 80fc 	bmi.w	800a7b4 <HAL_PCD_IRQHandler+0x2ec>
 800a5bc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a5be:	f006 ffcf 	bl	8011560 <USB_ReadInterrupts>
 800a5c2:	02c6      	lsls	r6, r0, #11
 800a5c4:	f100 80ec 	bmi.w	800a7a0 <HAL_PCD_IRQHandler+0x2d8>
 800a5c8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a5ca:	f006 ffc9 	bl	8011560 <USB_ReadInterrupts>
 800a5ce:	0285      	lsls	r5, r0, #10
 800a5d0:	f100 80dc 	bmi.w	800a78c <HAL_PCD_IRQHandler+0x2c4>
 800a5d4:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a5d6:	f006 ffc3 	bl	8011560 <USB_ReadInterrupts>
 800a5da:	0040      	lsls	r0, r0, #1
 800a5dc:	f100 80cd 	bmi.w	800a77a <HAL_PCD_IRQHandler+0x2b2>
 800a5e0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a5e2:	f006 ffbd 	bl	8011560 <USB_ReadInterrupts>
 800a5e6:	0741      	lsls	r1, r0, #29
 800a5e8:	f57f af77 	bpl.w	800a4da <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a5f0:	076a      	lsls	r2, r5, #29
 800a5f2:	f100 821f 	bmi.w	800aa34 <HAL_PCD_IRQHandler+0x56c>
      hpcd->Instance->GOTGINT |= temp;
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	432a      	orrs	r2, r5
 800a5fa:	605a      	str	r2, [r3, #4]
 800a5fc:	e76d      	b.n	800a4da <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a5fe:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800a602:	07d9      	lsls	r1, r3, #31
 800a604:	f100 8212 	bmi.w	800aa2c <HAL_PCD_IRQHandler+0x564>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a608:	6820      	ldr	r0, [r4, #0]
 800a60a:	6943      	ldr	r3, [r0, #20]
 800a60c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a610:	6143      	str	r3, [r0, #20]
 800a612:	e7a7      	b.n	800a564 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a614:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 800a618:	f023 0301 	bic.w	r3, r3, #1
 800a61c:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800a620:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800a624:	2b01      	cmp	r3, #1
 800a626:	f000 813f 	beq.w	800a8a8 <HAL_PCD_IRQHandler+0x3e0>
        HAL_PCD_ResumeCallback(hpcd);
 800a62a:	4620      	mov	r0, r4
 800a62c:	f016 fd4a 	bl	80210c4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a630:	6820      	ldr	r0, [r4, #0]
 800a632:	6943      	ldr	r3, [r0, #20]
 800a634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a638:	6143      	str	r3, [r0, #20]
 800a63a:	e78e      	b.n	800a55a <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a63c:	6820      	ldr	r0, [r4, #0]
 800a63e:	f006 ff9b 	bl	8011578 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800a642:	f8d4 8000 	ldr.w	r8, [r4]
 800a646:	4681      	mov	r9, r0
 800a648:	2800      	cmp	r0, #0
 800a64a:	d080      	beq.n	800a54e <HAL_PCD_IRQHandler+0x86>
 800a64c:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 800a650:	4625      	mov	r5, r4
      epnum = 0U;
 800a652:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a656:	f8cd b010 	str.w	fp, [sp, #16]
 800a65a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800a65e:	e007      	b.n	800a670 <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 800a660:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 800a664:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800a668:	f105 051c 	add.w	r5, r5, #28
 800a66c:	f000 8138 	beq.w	800a8e0 <HAL_PCD_IRQHandler+0x418>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a670:	f019 0f01 	tst.w	r9, #1
 800a674:	d0f4      	beq.n	800a660 <HAL_PCD_IRQHandler+0x198>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a676:	fa5f f78a 	uxtb.w	r7, sl
 800a67a:	4640      	mov	r0, r8
 800a67c:	4639      	mov	r1, r7
 800a67e:	f006 ff8d 	bl	801159c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a682:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a684:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a686:	d519      	bpl.n	800a6bc <HAL_PCD_IRQHandler+0x1f4>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a688:	f04f 0c01 	mov.w	ip, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a68c:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a68e:	f00a 010f 	and.w	r1, sl, #15
 800a692:	9a02      	ldr	r2, [sp, #8]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a694:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a698:	fa0c f101 	lsl.w	r1, ip, r1
 800a69c:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a6a0:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 800a6a4:	6921      	ldr	r1, [r4, #16]
 800a6a6:	4561      	cmp	r1, ip
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a6a8:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a6ac:	f8c2 c008 	str.w	ip, [r2, #8]
            if (hpcd->Init.dma_enable == 1U)
 800a6b0:	f000 81c5 	beq.w	800aa3e <HAL_PCD_IRQHandler+0x576>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f016 fcc8 	bl	802104c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a6bc:	0730      	lsls	r0, r6, #28
 800a6be:	d504      	bpl.n	800a6ca <HAL_PCD_IRQHandler+0x202>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a6c0:	9b02      	ldr	r3, [sp, #8]
 800a6c2:	2208      	movs	r2, #8
 800a6c4:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a6c8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a6ca:	06f1      	lsls	r1, r6, #27
 800a6cc:	d504      	bpl.n	800a6d8 <HAL_PCD_IRQHandler+0x210>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a6ce:	9b02      	ldr	r3, [sp, #8]
 800a6d0:	2210      	movs	r2, #16
 800a6d2:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a6d6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a6d8:	0672      	lsls	r2, r6, #25
 800a6da:	d504      	bpl.n	800a6e6 <HAL_PCD_IRQHandler+0x21e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a6dc:	9b02      	ldr	r3, [sp, #8]
 800a6de:	2240      	movs	r2, #64	; 0x40
 800a6e0:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a6e4:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a6e6:	07b3      	lsls	r3, r6, #30
 800a6e8:	d504      	bpl.n	800a6f4 <HAL_PCD_IRQHandler+0x22c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a6ea:	9b02      	ldr	r3, [sp, #8]
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a6f2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a6f4:	0636      	lsls	r6, r6, #24
 800a6f6:	f100 80f6 	bmi.w	800a8e6 <HAL_PCD_IRQHandler+0x41e>
 800a6fa:	f8d4 8000 	ldr.w	r8, [r4]
 800a6fe:	e7af      	b.n	800a660 <HAL_PCD_IRQHandler+0x198>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a700:	f006 ff32 	bl	8011568 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800a704:	4605      	mov	r5, r0
 800a706:	6820      	ldr	r0, [r4, #0]
 800a708:	2d00      	cmp	r5, #0
 800a70a:	f43f af1a 	beq.w	800a542 <HAL_PCD_IRQHandler+0x7a>
 800a70e:	f506 6330 	add.w	r3, r6, #2816	; 0xb00
 800a712:	f504 7901 	add.w	r9, r4, #516	; 0x204
      epnum = 0U;
 800a716:	2700      	movs	r7, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a718:	9602      	str	r6, [sp, #8]
 800a71a:	469a      	mov	sl, r3
 800a71c:	e006      	b.n	800a72c <HAL_PCD_IRQHandler+0x264>
      while (ep_intr != 0U)
 800a71e:	086d      	lsrs	r5, r5, #1
        epnum++;
 800a720:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 800a724:	f109 091c 	add.w	r9, r9, #28
 800a728:	f000 80d8 	beq.w	800a8dc <HAL_PCD_IRQHandler+0x414>
        if ((ep_intr & 0x1U) != 0U)
 800a72c:	07ee      	lsls	r6, r5, #31
 800a72e:	d5f6      	bpl.n	800a71e <HAL_PCD_IRQHandler+0x256>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a730:	b2fe      	uxtb	r6, r7
 800a732:	4631      	mov	r1, r6
 800a734:	f006 ff28 	bl	8011588 <USB_ReadDevOutEPInterrupt>
 800a738:	4680      	mov	r8, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a73a:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a73c:	f018 0f01 	tst.w	r8, #1
 800a740:	f040 8138 	bne.w	800a9b4 <HAL_PCD_IRQHandler+0x4ec>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a744:	f018 0f08 	tst.w	r8, #8
 800a748:	f040 811a 	bne.w	800a980 <HAL_PCD_IRQHandler+0x4b8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a74c:	f018 0f10 	tst.w	r8, #16
 800a750:	d003      	beq.n	800a75a <HAL_PCD_IRQHandler+0x292>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a752:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800a756:	2210      	movs	r2, #16
 800a758:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a75a:	f018 0f20 	tst.w	r8, #32
 800a75e:	d003      	beq.n	800a768 <HAL_PCD_IRQHandler+0x2a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a760:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800a764:	2220      	movs	r2, #32
 800a766:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a768:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 800a76c:	d0d7      	beq.n	800a71e <HAL_PCD_IRQHandler+0x256>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a76e:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800a772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a776:	609a      	str	r2, [r3, #8]
 800a778:	e7d1      	b.n	800a71e <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ConnectCallback(hpcd);
 800a77a:	4620      	mov	r0, r4
 800a77c:	f016 fcae 	bl	80210dc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a780:	6820      	ldr	r0, [r4, #0]
 800a782:	6943      	ldr	r3, [r0, #20]
 800a784:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a788:	6143      	str	r3, [r0, #20]
 800a78a:	e72a      	b.n	800a5e2 <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a78c:	4620      	mov	r0, r4
 800a78e:	2100      	movs	r1, #0
 800a790:	f016 fc9c 	bl	80210cc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a794:	6820      	ldr	r0, [r4, #0]
 800a796:	6943      	ldr	r3, [r0, #20]
 800a798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a79c:	6143      	str	r3, [r0, #20]
 800a79e:	e71a      	b.n	800a5d6 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	f016 fc96 	bl	80210d4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a7a8:	6820      	ldr	r0, [r4, #0]
 800a7aa:	6943      	ldr	r3, [r0, #20]
 800a7ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7b0:	6143      	str	r3, [r0, #20]
 800a7b2:	e70a      	b.n	800a5ca <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f016 fc53 	bl	8021060 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a7ba:	6820      	ldr	r0, [r4, #0]
 800a7bc:	6943      	ldr	r3, [r0, #20]
 800a7be:	f003 0308 	and.w	r3, r3, #8
 800a7c2:	6143      	str	r3, [r0, #20]
 800a7c4:	e6fb      	b.n	800a5be <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 800a7c6:	f006 feff 	bl	80115c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a7ca:	6820      	ldr	r0, [r4, #0]
 800a7cc:	f006 fbaa 	bl	8010f24 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a7d0:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a7d2:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a7d4:	f000 ff7a 	bl	800b6cc <HAL_RCC_GetHCLKFreq>
 800a7d8:	7b22      	ldrb	r2, [r4, #12]
 800a7da:	4601      	mov	r1, r0
 800a7dc:	4628      	mov	r0, r5
 800a7de:	f006 f9d3 	bl	8010b88 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f016 fc40 	bl	8021068 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a7e8:	6820      	ldr	r0, [r4, #0]
 800a7ea:	6943      	ldr	r3, [r0, #20]
 800a7ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7f0:	6143      	str	r3, [r0, #20]
 800a7f2:	e6de      	b.n	800a5b2 <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a7f4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a7f8:	2110      	movs	r1, #16
 800a7fa:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a7fc:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 800a800:	f023 0301 	bic.w	r3, r3, #1
 800a804:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a806:	f006 fa81 	bl	8010d0c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a80a:	6867      	ldr	r7, [r4, #4]
 800a80c:	b1e7      	cbz	r7, 800a848 <HAL_PCD_IRQHandler+0x380>
 800a80e:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a812:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800a816:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a818:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a820:	45bb      	cmp	fp, r7
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a822:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a826:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a82a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a82e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800a832:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a836:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a83a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800a83e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a842:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a846:	d1e6      	bne.n	800a816 <HAL_PCD_IRQHandler+0x34e>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a848:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a84a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a84c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a850:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a852:	b9f2      	cbnz	r2, 800a892 <HAL_PCD_IRQHandler+0x3ca>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a854:	696a      	ldr	r2, [r5, #20]
 800a856:	f242 032b 	movw	r3, #8235	; 0x202b
 800a85a:	4313      	orrs	r3, r2
 800a85c:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a85e:	692b      	ldr	r3, [r5, #16]
 800a860:	f043 030b 	orr.w	r3, r3, #11
 800a864:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a866:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a86a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a86e:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a870:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a874:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a876:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a87a:	f006 febb 	bl	80115f4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a87e:	6820      	ldr	r0, [r4, #0]
 800a880:	6943      	ldr	r3, [r0, #20]
 800a882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a886:	6143      	str	r3, [r0, #20]
 800a888:	e68c      	b.n	800a5a4 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 800a88a:	4620      	mov	r0, r4
 800a88c:	f016 fc02 	bl	8021094 <HAL_PCD_SuspendCallback>
 800a890:	e681      	b.n	800a596 <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a892:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800a896:	f043 030b 	orr.w	r3, r3, #11
 800a89a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a89e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a8a0:	f043 030b 	orr.w	r3, r3, #11
 800a8a4:	646b      	str	r3, [r5, #68]	; 0x44
 800a8a6:	e7de      	b.n	800a866 <HAL_PCD_IRQHandler+0x39e>
        hpcd->LPM_State = LPM_L0;
 800a8a8:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a8aa:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800a8ac:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a8b0:	f016 fcda 	bl	8021268 <HAL_PCDEx_LPM_Callback>
 800a8b4:	e6bc      	b.n	800a630 <HAL_PCD_IRQHandler+0x168>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a8b6:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a8ba:	2208      	movs	r2, #8
 800a8bc:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f006 fd95 	bl	80113f0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a8c6:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800a8ca:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 800a8ce:	6820      	ldr	r0, [r4, #0]
 800a8d0:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800a8d4:	440b      	add	r3, r1
 800a8d6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800a8da:	e627      	b.n	800a52c <HAL_PCD_IRQHandler+0x64>
 800a8dc:	9e02      	ldr	r6, [sp, #8]
 800a8de:	e630      	b.n	800a542 <HAL_PCD_IRQHandler+0x7a>
 800a8e0:	e9dd 6b03 	ldrd	r6, fp, [sp, #12]
 800a8e4:	e633      	b.n	800a54e <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800a8e6:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8ea:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800a8ee:	428b      	cmp	r3, r1
 800a8f0:	f63f aeb6 	bhi.w	800a660 <HAL_PCD_IRQHandler+0x198>
  len = ep->xfer_len - ep->xfer_count;
 800a8f4:	1aca      	subs	r2, r1, r3
  len32b = (len + 3U) / 4U;
 800a8f6:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a8f8:	f508 6b10 	add.w	fp, r8, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fc:	f8cd 8014 	str.w	r8, [sp, #20]
  len32b = (len + 3U) / 4U;
 800a900:	4282      	cmp	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a902:	eb0b 1b4a 	add.w	fp, fp, sl, lsl #5
  len32b = (len + 3U) / 4U;
 800a906:	bf28      	it	cs
 800a908:	4602      	movcs	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a90a:	f8db 0018 	ldr.w	r0, [fp, #24]
  len32b = (len + 3U) / 4U;
 800a90e:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a910:	b280      	uxth	r0, r0
 800a912:	ebb0 0f92 	cmp.w	r0, r2, lsr #2
 800a916:	d21b      	bcs.n	800a950 <HAL_PCD_IRQHandler+0x488>
 800a918:	e022      	b.n	800a960 <HAL_PCD_IRQHandler+0x498>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a91a:	b1f9      	cbz	r1, 800a95c <HAL_PCD_IRQHandler+0x494>
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a91c:	f894 c010 	ldrb.w	ip, [r4, #16]
 800a920:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 800a924:	f8cd c000 	str.w	ip, [sp]
 800a928:	429e      	cmp	r6, r3
 800a92a:	bf28      	it	cs
 800a92c:	461e      	movcs	r6, r3
 800a92e:	b2b3      	uxth	r3, r6
 800a930:	f006 fd48 	bl	80113c4 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a934:	f8db 2018 	ldr.w	r2, [fp, #24]
    ep->xfer_buff  += len;
 800a938:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 800a93a:	1cf0      	adds	r0, r6, #3
    ep->xfer_count += len;
 800a93c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a93e:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 800a940:	4431      	add	r1, r6
    ep->xfer_count += len;
 800a942:	4433      	add	r3, r6
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a944:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 800a948:	64a9      	str	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800a94a:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a94c:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800a94e:	d305      	bcc.n	800a95c <HAL_PCD_IRQHandler+0x494>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a950:	428b      	cmp	r3, r1
    len = ep->xfer_len - ep->xfer_count;
 800a952:	eba1 0603 	sub.w	r6, r1, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a956:	463a      	mov	r2, r7
 800a958:	4640      	mov	r0, r8
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a95a:	d3de      	bcc.n	800a91a <HAL_PCD_IRQHandler+0x452>
 800a95c:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 800a960:	428b      	cmp	r3, r1
 800a962:	f4ff ae7d 	bcc.w	800a660 <HAL_PCD_IRQHandler+0x198>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a966:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a968:	f00a 010f 	and.w	r1, sl, #15
 800a96c:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a96e:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a972:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a976:	ea22 0201 	bic.w	r2, r2, r1
 800a97a:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800a97e:	e66f      	b.n	800a660 <HAL_PCD_IRQHandler+0x198>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a980:	eb0a 1247 	add.w	r2, sl, r7, lsl #5
 800a984:	2108      	movs	r1, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a986:	eb00 1347 	add.w	r3, r0, r7, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a98a:	6091      	str	r1, [r2, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a98c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a992:	485e      	ldr	r0, [pc, #376]	; (800ab0c <HAL_PCD_IRQHandler+0x644>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a994:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a996:	4282      	cmp	r2, r0
 800a998:	d963      	bls.n	800aa62 <HAL_PCD_IRQHandler+0x59a>
 800a99a:	0409      	lsls	r1, r1, #16
 800a99c:	d502      	bpl.n	800a9a4 <HAL_PCD_IRQHandler+0x4dc>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a99e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a9a2:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f016 fb41 	bl	802102c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a9aa:	6921      	ldr	r1, [r4, #16]
 800a9ac:	2901      	cmp	r1, #1
 800a9ae:	d07b      	beq.n	800aaa8 <HAL_PCD_IRQHandler+0x5e0>
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	e6cb      	b.n	800a74c <HAL_PCD_IRQHandler+0x284>
  if (hpcd->Init.dma_enable == 1U)
 800a9b4:	f8d4 c010 	ldr.w	ip, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a9b8:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a9bc:	2301      	movs	r3, #1
 800a9be:	eb0a 1147 	add.w	r1, sl, r7, lsl #5
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a9c2:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 800a9c6:	f1bc 0f01 	cmp.w	ip, #1
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a9ca:	608b      	str	r3, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a9cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a9ce:	f8d2 e008 	ldr.w	lr, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800a9d2:	d04b      	beq.n	800aa6c <HAL_PCD_IRQHandler+0x5a4>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a9d4:	494e      	ldr	r1, [pc, #312]	; (800ab10 <HAL_PCD_IRQHandler+0x648>)
 800a9d6:	428b      	cmp	r3, r1
 800a9d8:	d057      	beq.n	800aa8a <HAL_PCD_IRQHandler+0x5c2>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a9da:	b927      	cbnz	r7, 800a9e6 <HAL_PCD_IRQHandler+0x51e>
 800a9dc:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	f000 808c 	beq.w	800aafe <HAL_PCD_IRQHandler+0x636>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	f016 fb25 	bl	8021038 <HAL_PCD_DataOutStageCallback>
 800a9ee:	6820      	ldr	r0, [r4, #0]
 800a9f0:	e6a8      	b.n	800a744 <HAL_PCD_IRQHandler+0x27c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a9f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a9f6:	421d      	tst	r5, r3
 800a9f8:	f43f ad98 	beq.w	800a52c <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a9fc:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 800aa00:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800aa04:	4630      	mov	r0, r6
 800aa06:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800aa0a:	4615      	mov	r5, r2
 800aa0c:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800aa10:	f006 fcee 	bl	80113f0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa14:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa18:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa1c:	442a      	add	r2, r5
 800aa1e:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa20:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa22:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa26:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 800aa2a:	e57f      	b.n	800a52c <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f016 fb31 	bl	8021094 <HAL_PCD_SuspendCallback>
 800aa32:	e5e9      	b.n	800a608 <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 800aa34:	4620      	mov	r0, r4
 800aa36:	f016 fb55 	bl	80210e4 <HAL_PCD_DisconnectCallback>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	e5db      	b.n	800a5f6 <HAL_PCD_IRQHandler+0x12e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800aa3e:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 800aa42:	4413      	add	r3, r2
 800aa44:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800aa46:	f1ba 0f00 	cmp.w	sl, #0
 800aa4a:	f47f ae33 	bne.w	800a6b4 <HAL_PCD_IRQHandler+0x1ec>
 800aa4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f47f ae2f 	bne.w	800a6b4 <HAL_PCD_IRQHandler+0x1ec>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa56:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800aa5a:	6820      	ldr	r0, [r4, #0]
 800aa5c:	f006 fdca 	bl	80115f4 <USB_EP0_OutStart>
 800aa60:	e628      	b.n	800a6b4 <HAL_PCD_IRQHandler+0x1ec>
  HAL_PCD_SetupStageCallback(hpcd);
 800aa62:	4620      	mov	r0, r4
 800aa64:	f016 fae2 	bl	802102c <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800aa68:	6820      	ldr	r0, [r4, #0]
 800aa6a:	e66f      	b.n	800a74c <HAL_PCD_IRQHandler+0x284>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800aa6c:	f01e 0f08 	tst.w	lr, #8
 800aa70:	d014      	beq.n	800aa9c <HAL_PCD_IRQHandler+0x5d4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa72:	4926      	ldr	r1, [pc, #152]	; (800ab0c <HAL_PCD_IRQHandler+0x644>)
 800aa74:	428b      	cmp	r3, r1
 800aa76:	f67f ae65 	bls.w	800a744 <HAL_PCD_IRQHandler+0x27c>
 800aa7a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800aa7e:	f43f ae61 	beq.w	800a744 <HAL_PCD_IRQHandler+0x27c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa86:	6093      	str	r3, [r2, #8]
 800aa88:	e65c      	b.n	800a744 <HAL_PCD_IRQHandler+0x27c>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aa8a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800aa8e:	d1f8      	bne.n	800aa82 <HAL_PCD_IRQHandler+0x5ba>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aa90:	f01e 0f20 	tst.w	lr, #32
 800aa94:	d0a7      	beq.n	800a9e6 <HAL_PCD_IRQHandler+0x51e>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aa96:	2120      	movs	r1, #32
 800aa98:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa9a:	e7a4      	b.n	800a9e6 <HAL_PCD_IRQHandler+0x51e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800aa9c:	f01e 0f20 	tst.w	lr, #32
 800aaa0:	d008      	beq.n	800aab4 <HAL_PCD_IRQHandler+0x5ec>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aaa2:	2320      	movs	r3, #32
 800aaa4:	6093      	str	r3, [r2, #8]
 800aaa6:	e64d      	b.n	800a744 <HAL_PCD_IRQHandler+0x27c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aaa8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800aaac:	6820      	ldr	r0, [r4, #0]
 800aaae:	f006 fda1 	bl	80115f4 <USB_EP0_OutStart>
 800aab2:	e77d      	b.n	800a9b0 <HAL_PCD_IRQHandler+0x4e8>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800aab4:	f01e 0f28 	tst.w	lr, #40	; 0x28
 800aab8:	f47f ae44 	bne.w	800a744 <HAL_PCD_IRQHandler+0x27c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aabc:	4913      	ldr	r1, [pc, #76]	; (800ab0c <HAL_PCD_IRQHandler+0x644>)
 800aabe:	428b      	cmp	r3, r1
 800aac0:	d902      	bls.n	800aac8 <HAL_PCD_IRQHandler+0x600>
 800aac2:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800aac6:	d1dc      	bne.n	800aa82 <HAL_PCD_IRQHandler+0x5ba>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800aac8:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800aaca:	f8d9 3000 	ldr.w	r3, [r9]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800aace:	f8d9 1004 	ldr.w	r1, [r9, #4]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800aad2:	f3c2 0212 	ubfx	r2, r2, #0, #19
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800aad6:	4419      	add	r1, r3
          hpcd->OUT_ep[epnum].maxpacket -
 800aad8:	1a9a      	subs	r2, r3, r2
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800aada:	f8c9 1004 	str.w	r1, [r9, #4]
        hpcd->OUT_ep[epnum].xfer_count =
 800aade:	f8c9 2010 	str.w	r2, [r9, #16]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aae2:	2f00      	cmp	r7, #0
 800aae4:	f47f af7f 	bne.w	800a9e6 <HAL_PCD_IRQHandler+0x51e>
 800aae8:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800aaec:	2a00      	cmp	r2, #0
 800aaee:	f47f af7a 	bne.w	800a9e6 <HAL_PCD_IRQHandler+0x51e>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aaf2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	f006 fd7c 	bl	80115f4 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aafc:	e773      	b.n	800a9e6 <HAL_PCD_IRQHandler+0x51e>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aafe:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800ab02:	4639      	mov	r1, r7
 800ab04:	f006 fd76 	bl	80115f4 <USB_EP0_OutStart>
 800ab08:	e76d      	b.n	800a9e6 <HAL_PCD_IRQHandler+0x51e>
 800ab0a:	bf00      	nop
 800ab0c:	4f54300a 	.word	0x4f54300a
 800ab10:	4f54310a 	.word	0x4f54310a

0800ab14 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800ab14:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800ab18:	2a01      	cmp	r2, #1
 800ab1a:	d00d      	beq.n	800ab38 <HAL_PCD_SetAddress+0x24>
 800ab1c:	2201      	movs	r2, #1
{
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 800ab22:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ab26:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800ab28:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ab2c:	f006 fce6 	bl	80114fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ab30:	2000      	movs	r0, #0
 800ab32:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800ab36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800ab38:	2002      	movs	r0, #2
}
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_PCD_EP_Open>:
{
 800ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3e:	f001 050f 	and.w	r5, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800ab42:	0609      	lsls	r1, r1, #24
{
 800ab44:	4606      	mov	r6, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab46:	f04f 041c 	mov.w	r4, #28
  if ((ep_addr & 0x80U) == 0x80U)
 800ab4a:	d422      	bmi.n	800ab92 <HAL_PCD_EP_Open+0x56>
    ep->is_in = 0U;
 800ab4c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab50:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 800ab54:	2700      	movs	r7, #0
 800ab56:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab5a:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 800ab5e:	f880 71fd 	strb.w	r7, [r0, #509]	; 0x1fd
  if (ep->is_in != 0U)
 800ab62:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab64:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 800ab66:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800ab68:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800ab6a:	b100      	cbz	r0, 800ab6e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 800ab6c:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d101      	bne.n	800ab76 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800ab76:	f896 33bc 	ldrb.w	r3, [r6, #956]	; 0x3bc
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d015      	beq.n	800abaa <HAL_PCD_EP_Open+0x6e>
 800ab7e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab80:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 800ab82:	f886 33bc 	strb.w	r3, [r6, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab86:	f006 f9d9 	bl	8010f3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f886 03bc 	strb.w	r0, [r6, #956]	; 0x3bc
}
 800ab90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 800ab92:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 800ab96:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab98:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 1U;
 800ab9c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aba0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 800aba4:	f880 703d 	strb.w	r7, [r0, #61]	; 0x3d
 800aba8:	e7db      	b.n	800ab62 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800abaa:	2002      	movs	r0, #2
}
 800abac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abae:	bf00      	nop

0800abb0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800abb0:	f011 0f80 	tst.w	r1, #128	; 0x80
 800abb4:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abb8:	f04f 011c 	mov.w	r1, #28
{
 800abbc:	b510      	push	{r4, lr}
 800abbe:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800abc0:	d119      	bne.n	800abf6 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abc2:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800abc6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800abca:	2000      	movs	r0, #0
 800abcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abd0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800abd4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800abd8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800abda:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d018      	beq.n	800ac14 <HAL_PCD_EP_Close+0x64>
 800abe2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800abe4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800abe6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800abea:	f006 f9ef 	bl	8010fcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800abee:	2000      	movs	r0, #0
 800abf0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800abf4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abf6:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800abfa:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800abfe:	2001      	movs	r0, #1
 800ac00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac04:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ac06:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ac0a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800ac0c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d1e6      	bne.n	800abe2 <HAL_PCD_EP_Close+0x32>
 800ac14:	2002      	movs	r0, #2
}
 800ac16:	bd10      	pop	{r4, pc}

0800ac18 <HAL_PCD_EP_Receive>:
{
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 800ac1e:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac20:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800ac22:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac26:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800ac2a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac2e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 800ac32:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 800ac36:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac3a:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800ac3e:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800ac42:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800ac46:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac48:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800ac4a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800ac4c:	bf08      	it	eq
 800ac4e:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac52:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac54:	b91d      	cbnz	r5, 800ac5e <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac56:	f006 fb2f 	bl	80112b8 <USB_EP0StartXfer>
}
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac5e:	f006 fa17 	bl	8011090 <USB_EPStartXfer>
}
 800ac62:	2000      	movs	r0, #0
 800ac64:	bd70      	pop	{r4, r5, r6, pc}
 800ac66:	bf00      	nop

0800ac68 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ac68:	f001 010f 	and.w	r1, r1, #15
 800ac6c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ac70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800ac74:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop

0800ac7c <HAL_PCD_EP_Transmit>:
{
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 800ac82:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 800ac84:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac86:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800ac88:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac8c:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800ac90:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac94:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 800ac96:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 800ac98:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac9a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800ac9e:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800aca0:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800aca4:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aca6:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800aca8:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 800acaa:	bf08      	it	eq
 800acac:	64e2      	streq	r2, [r4, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acae:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800acb0:	b91d      	cbnz	r5, 800acba <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acb2:	f006 fb01 	bl	80112b8 <USB_EP0StartXfer>
}
 800acb6:	2000      	movs	r0, #0
 800acb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acba:	f006 f9e9 	bl	8011090 <USB_EPStartXfer>
}
 800acbe:	2000      	movs	r0, #0
 800acc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acc2:	bf00      	nop

0800acc4 <HAL_PCD_EP_SetStall>:
{
 800acc4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800acc6:	6843      	ldr	r3, [r0, #4]
 800acc8:	f001 050f 	and.w	r5, r1, #15
 800accc:	429d      	cmp	r5, r3
 800acce:	d833      	bhi.n	800ad38 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 800acd0:	060b      	lsls	r3, r1, #24
 800acd2:	4604      	mov	r4, r0
 800acd4:	d41c      	bmi.n	800ad10 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 800acd6:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800acda:	201c      	movs	r0, #28
    ep->is_in = 0U;
 800acdc:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800acde:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 800ace2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 800ace6:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800acea:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800acee:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800acf0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800acf2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800acf4:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d01b      	beq.n	800ad34 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800acfc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800acfe:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ad02:	f006 fb9b 	bl	801143c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad06:	b1cd      	cbz	r5, 800ad3c <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 800ad08:	2000      	movs	r0, #0
 800ad0a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad10:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800ad12:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800ad16:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad18:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800ad1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad20:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ad22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800ad26:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad28:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800ad2a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800ad2c:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d1e3      	bne.n	800acfc <HAL_PCD_EP_SetStall+0x38>
 800ad34:	2002      	movs	r0, #2
}
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ad38:	2001      	movs	r0, #1
}
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ad3c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800ad40:	7c21      	ldrb	r1, [r4, #16]
 800ad42:	6820      	ldr	r0, [r4, #0]
 800ad44:	f006 fc56 	bl	80115f4 <USB_EP0_OutStart>
 800ad48:	e7de      	b.n	800ad08 <HAL_PCD_EP_SetStall+0x44>
 800ad4a:	bf00      	nop

0800ad4c <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ad4c:	6842      	ldr	r2, [r0, #4]
{
 800ad4e:	b538      	push	{r3, r4, r5, lr}
 800ad50:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d832      	bhi.n	800adbe <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800ad58:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ad5c:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad5e:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800ad62:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800ad66:	d119      	bne.n	800ad9c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad68:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800ad72:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad74:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800ad78:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad7c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800ad7e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800ad80:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d018      	beq.n	800adba <HAL_PCD_EP_ClrStall+0x6e>
 800ad88:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ad8a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800ad8c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ad90:	f006 fb88 	bl	80114a4 <USB_EPClearStall>
  return HAL_OK;
 800ad94:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800ad96:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad9c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800ada0:	2001      	movs	r0, #1
 800ada2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800ada6:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ada8:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800adaa:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800adae:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800adb0:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800adb2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d1e6      	bne.n	800ad88 <HAL_PCD_EP_ClrStall+0x3c>
 800adba:	2002      	movs	r0, #2
}
 800adbc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800adbe:	2001      	movs	r0, #1
}
 800adc0:	bd38      	pop	{r3, r4, r5, pc}
 800adc2:	bf00      	nop

0800adc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800adc4:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800adc6:	6805      	ldr	r5, [r0, #0]
 800adc8:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 800adca:	b929      	cbnz	r1, 800add8 <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800adcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800add0:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800add2:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800add4:	bc30      	pop	{r4, r5}
 800add6:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800add8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800adda:	1e4c      	subs	r4, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800addc:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800ade0:	d00b      	beq.n	800adfa <HAL_PCDEx_SetTxFiFo+0x36>
 800ade2:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ade4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800ade8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800adea:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800adee:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800adf0:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800adf2:	42a3      	cmp	r3, r4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800adf4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800adf8:	d3f4      	bcc.n	800ade4 <HAL_PCDEx_SetTxFiFo+0x20>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800adfa:	3440      	adds	r4, #64	; 0x40
 800adfc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800ae00:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800ae04:	6060      	str	r0, [r4, #4]
}
 800ae06:	2000      	movs	r0, #0
 800ae08:	bc30      	pop	{r4, r5}
 800ae0a:	4770      	bx	lr

0800ae0c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ae0c:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800ae0e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	6259      	str	r1, [r3, #36]	; 0x24
}
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop

0800ae18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ae18:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ae1a:	4909      	ldr	r1, [pc, #36]	; (800ae40 <HAL_PCDEx_ActivateLPM+0x28>)
{
 800ae1c:	b430      	push	{r4, r5}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae1e:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 800ae20:	2400      	movs	r4, #0
  hpcd->lpm_active = 1U;
 800ae22:	2501      	movs	r5, #1
  hpcd->LPM_State = LPM_L0;
 800ae24:	f883 43f4 	strb.w	r4, [r3, #1012]	; 0x3f4

  return HAL_OK;
}
 800ae28:	4620      	mov	r0, r4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ae2a:	6994      	ldr	r4, [r2, #24]
  hpcd->lpm_active = 1U;
 800ae2c:	f8c3 53fc 	str.w	r5, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ae30:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 800ae34:	6194      	str	r4, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ae36:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ae38:	4319      	orrs	r1, r3
}
 800ae3a:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ae3c:	6551      	str	r1, [r2, #84]	; 0x54
}
 800ae3e:	4770      	bx	lr
 800ae40:	10000003 	.word	0x10000003

0800ae44 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae44:	4a02      	ldr	r2, [pc, #8]	; (800ae50 <HAL_PWR_EnableBkUpAccess+0xc>)
 800ae46:	6813      	ldr	r3, [r2, #0]
 800ae48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae4c:	6013      	str	r3, [r2, #0]
}
 800ae4e:	4770      	bx	lr
 800ae50:	40007000 	.word	0x40007000

0800ae54 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800ae54:	4a1b      	ldr	r2, [pc, #108]	; (800aec4 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ae56:	4b1c      	ldr	r3, [pc, #112]	; (800aec8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae58:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ae5a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800ae5e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae60:	6411      	str	r1, [r2, #64]	; 0x40
{
 800ae62:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae64:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ae66:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae68:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800ae6c:	9201      	str	r2, [sp, #4]
 800ae6e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ae76:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800ae78:	f7fb fb80 	bl	800657c <HAL_GetTick>
 800ae7c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ae7e:	e005      	b.n	800ae8c <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ae80:	f7fb fb7c 	bl	800657c <HAL_GetTick>
 800ae84:	1b00      	subs	r0, r0, r4
 800ae86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ae8a:	d817      	bhi.n	800aebc <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ae8c:	686b      	ldr	r3, [r5, #4]
 800ae8e:	03da      	lsls	r2, r3, #15
 800ae90:	d5f6      	bpl.n	800ae80 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ae92:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ae94:	4e0c      	ldr	r6, [pc, #48]	; (800aec8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ae96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae9a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800ae9c:	f7fb fb6e 	bl	800657c <HAL_GetTick>
 800aea0:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aea2:	e005      	b.n	800aeb0 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aea4:	f7fb fb6a 	bl	800657c <HAL_GetTick>
 800aea8:	1b00      	subs	r0, r0, r4
 800aeaa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800aeae:	d805      	bhi.n	800aebc <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aeb0:	6873      	ldr	r3, [r6, #4]
 800aeb2:	039b      	lsls	r3, r3, #14
 800aeb4:	d5f6      	bpl.n	800aea4 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800aeb6:	2000      	movs	r0, #0
}
 800aeb8:	b002      	add	sp, #8
 800aeba:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800aebc:	2003      	movs	r0, #3
}
 800aebe:	b002      	add	sp, #8
 800aec0:	bd70      	pop	{r4, r5, r6, pc}
 800aec2:	bf00      	nop
 800aec4:	40023800 	.word	0x40023800
 800aec8:	40007000 	.word	0x40007000

0800aecc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aecc:	2800      	cmp	r0, #0
 800aece:	f000 8296 	beq.w	800b3fe <HAL_RCC_OscConfig+0x532>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800aed2:	6803      	ldr	r3, [r0, #0]
 800aed4:	2b0f      	cmp	r3, #15
{
 800aed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeda:	4604      	mov	r4, r0
 800aedc:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800aede:	f200 8126 	bhi.w	800b12e <HAL_RCC_OscConfig+0x262>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aee2:	07dd      	lsls	r5, r3, #31
 800aee4:	d534      	bpl.n	800af50 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800aee6:	6863      	ldr	r3, [r4, #4]
 800aee8:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800aeec:	d003      	beq.n	800aef6 <HAL_RCC_OscConfig+0x2a>
 800aeee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aef2:	f040 8179 	bne.w	800b1e8 <HAL_RCC_OscConfig+0x31c>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aef6:	4ab4      	ldr	r2, [pc, #720]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800aef8:	6893      	ldr	r3, [r2, #8]
 800aefa:	f003 030c 	and.w	r3, r3, #12
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d01d      	beq.n	800af3e <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af02:	6893      	ldr	r3, [r2, #8]
 800af04:	f003 030c 	and.w	r3, r3, #12
 800af08:	2b08      	cmp	r3, #8
 800af0a:	d015      	beq.n	800af38 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af0c:	6863      	ldr	r3, [r4, #4]
 800af0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af12:	f000 816f 	beq.w	800b1f4 <HAL_RCC_OscConfig+0x328>
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 81a1 	beq.w	800b25e <HAL_RCC_OscConfig+0x392>
 800af1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af20:	4ba9      	ldr	r3, [pc, #676]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	f000 8236 	beq.w	800b394 <HAL_RCC_OscConfig+0x4c8>
 800af28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	e162      	b.n	800b1fe <HAL_RCC_OscConfig+0x332>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af38:	6853      	ldr	r3, [r2, #4]
 800af3a:	0258      	lsls	r0, r3, #9
 800af3c:	d5e6      	bpl.n	800af0c <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af3e:	4ba2      	ldr	r3, [pc, #648]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	0399      	lsls	r1, r3, #14
 800af44:	d503      	bpl.n	800af4e <HAL_RCC_OscConfig+0x82>
 800af46:	6863      	ldr	r3, [r4, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 8102 	beq.w	800b152 <HAL_RCC_OscConfig+0x286>
 800af4e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af50:	079f      	lsls	r7, r3, #30
 800af52:	d532      	bpl.n	800afba <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800af54:	68e3      	ldr	r3, [r4, #12]
 800af56:	2b01      	cmp	r3, #1
 800af58:	f200 80ff 	bhi.w	800b15a <HAL_RCC_OscConfig+0x28e>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	2b1f      	cmp	r3, #31
 800af60:	f200 8104 	bhi.w	800b16c <HAL_RCC_OscConfig+0x2a0>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800af64:	4b98      	ldr	r3, [pc, #608]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800af66:	689a      	ldr	r2, [r3, #8]
 800af68:	f012 0f0c 	tst.w	r2, #12
 800af6c:	f000 80ea 	beq.w	800b144 <HAL_RCC_OscConfig+0x278>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af70:	689a      	ldr	r2, [r3, #8]
 800af72:	f002 020c 	and.w	r2, r2, #12
 800af76:	2a08      	cmp	r2, #8
 800af78:	f000 80e0 	beq.w	800b13c <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800af7c:	68e3      	ldr	r3, [r4, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 81a5 	beq.w	800b2ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af84:	4b90      	ldr	r3, [pc, #576]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800af86:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af88:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 800af8a:	f042 0201 	orr.w	r2, r2, #1
 800af8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800af90:	f7fb faf4 	bl	800657c <HAL_GetTick>
 800af94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af96:	e005      	b.n	800afa4 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af98:	f7fb faf0 	bl	800657c <HAL_GetTick>
 800af9c:	1b40      	subs	r0, r0, r5
 800af9e:	2802      	cmp	r0, #2
 800afa0:	f200 8159 	bhi.w	800b256 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afa4:	6833      	ldr	r3, [r6, #0]
 800afa6:	0798      	lsls	r0, r3, #30
 800afa8:	d5f6      	bpl.n	800af98 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afaa:	6833      	ldr	r3, [r6, #0]
 800afac:	6922      	ldr	r2, [r4, #16]
 800afae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800afb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800afb6:	6033      	str	r3, [r6, #0]
 800afb8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afba:	071a      	lsls	r2, r3, #28
 800afbc:	d42a      	bmi.n	800b014 <HAL_RCC_OscConfig+0x148>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afbe:	075e      	lsls	r6, r3, #29
 800afc0:	d545      	bpl.n	800b04e <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800afc2:	68a3      	ldr	r3, [r4, #8]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d906      	bls.n	800afd6 <HAL_RCC_OscConfig+0x10a>
 800afc8:	2b05      	cmp	r3, #5
 800afca:	d004      	beq.n	800afd6 <HAL_RCC_OscConfig+0x10a>
 800afcc:	f240 2106 	movw	r1, #518	; 0x206
 800afd0:	487e      	ldr	r0, [pc, #504]	; (800b1cc <HAL_RCC_OscConfig+0x300>)
 800afd2:	f7f8 fdb9 	bl	8003b48 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afd6:	4b7c      	ldr	r3, [pc, #496]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800afd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afda:	00d5      	lsls	r5, r2, #3
 800afdc:	f140 80e8 	bpl.w	800b1b0 <HAL_RCC_OscConfig+0x2e4>
  FlagStatus pwrclkchanged = RESET;
 800afe0:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800afe2:	4b7b      	ldr	r3, [pc, #492]	; (800b1d0 <HAL_RCC_OscConfig+0x304>)
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	05d0      	lsls	r0, r2, #23
 800afe8:	f140 8124 	bpl.w	800b234 <HAL_RCC_OscConfig+0x368>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800afec:	68a3      	ldr	r3, [r4, #8]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	f000 8181 	beq.w	800b2f6 <HAL_RCC_OscConfig+0x42a>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f000 8149 	beq.w	800b28c <HAL_RCC_OscConfig+0x3c0>
 800affa:	2b05      	cmp	r3, #5
 800affc:	4b72      	ldr	r3, [pc, #456]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800affe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b000:	f000 81d0 	beq.w	800b3a4 <HAL_RCC_OscConfig+0x4d8>
 800b004:	f022 0201 	bic.w	r2, r2, #1
 800b008:	671a      	str	r2, [r3, #112]	; 0x70
 800b00a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b00c:	f022 0204 	bic.w	r2, r2, #4
 800b010:	671a      	str	r2, [r3, #112]	; 0x70
 800b012:	e175      	b.n	800b300 <HAL_RCC_OscConfig+0x434>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800b014:	6963      	ldr	r3, [r4, #20]
 800b016:	2b01      	cmp	r3, #1
 800b018:	f200 80c1 	bhi.w	800b19e <HAL_RCC_OscConfig+0x2d2>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 80ab 	beq.w	800b178 <HAL_RCC_OscConfig+0x2ac>
      __HAL_RCC_LSI_ENABLE();
 800b022:	4b69      	ldr	r3, [pc, #420]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800b024:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b026:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 800b028:	f042 0201 	orr.w	r2, r2, #1
 800b02c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b02e:	f7fb faa5 	bl	800657c <HAL_GetTick>
 800b032:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b034:	e005      	b.n	800b042 <HAL_RCC_OscConfig+0x176>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b036:	f7fb faa1 	bl	800657c <HAL_GetTick>
 800b03a:	1b40      	subs	r0, r0, r5
 800b03c:	2802      	cmp	r0, #2
 800b03e:	f200 810a 	bhi.w	800b256 <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b042:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800b044:	079b      	lsls	r3, r3, #30
 800b046:	d5f6      	bpl.n	800b036 <HAL_RCC_OscConfig+0x16a>
 800b048:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b04a:	075e      	lsls	r6, r3, #29
 800b04c:	d4b9      	bmi.n	800afc2 <HAL_RCC_OscConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800b04e:	69a0      	ldr	r0, [r4, #24]
 800b050:	2802      	cmp	r0, #2
 800b052:	f200 80bf 	bhi.w	800b1d4 <HAL_RCC_OscConfig+0x308>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b056:	2800      	cmp	r0, #0
 800b058:	d065      	beq.n	800b126 <HAL_RCC_OscConfig+0x25a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b05a:	4a5b      	ldr	r2, [pc, #364]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800b05c:	6893      	ldr	r3, [r2, #8]
 800b05e:	f003 030c 	and.w	r3, r3, #12
 800b062:	2b08      	cmp	r3, #8
 800b064:	f000 815f 	beq.w	800b326 <HAL_RCC_OscConfig+0x45a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b068:	2802      	cmp	r0, #2
 800b06a:	f040 81b5 	bne.w	800b3d8 <HAL_RCC_OscConfig+0x50c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800b06e:	69e3      	ldr	r3, [r4, #28]
 800b070:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800b074:	f040 81aa 	bne.w	800b3cc <HAL_RCC_OscConfig+0x500>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800b078:	6a23      	ldr	r3, [r4, #32]
 800b07a:	3b02      	subs	r3, #2
 800b07c:	2b3d      	cmp	r3, #61	; 0x3d
 800b07e:	f200 819f 	bhi.w	800b3c0 <HAL_RCC_OscConfig+0x4f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800b082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b084:	3b32      	subs	r3, #50	; 0x32
 800b086:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800b08a:	f200 8193 	bhi.w	800b3b4 <HAL_RCC_OscConfig+0x4e8>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800b08e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b090:	2b08      	cmp	r3, #8
 800b092:	f200 8179 	bhi.w	800b388 <HAL_RCC_OscConfig+0x4bc>
 800b096:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800b09a:	fa22 f303 	lsr.w	r3, r2, r3
 800b09e:	07d8      	lsls	r0, r3, #31
 800b0a0:	f140 8172 	bpl.w	800b388 <HAL_RCC_OscConfig+0x4bc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800b0a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b0a6:	3b02      	subs	r3, #2
 800b0a8:	2b0d      	cmp	r3, #13
 800b0aa:	f200 81b0 	bhi.w	800b40e <HAL_RCC_OscConfig+0x542>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800b0ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0b0:	3b02      	subs	r3, #2
 800b0b2:	2b05      	cmp	r3, #5
 800b0b4:	f200 81a5 	bhi.w	800b402 <HAL_RCC_OscConfig+0x536>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0b8:	4b43      	ldr	r3, [pc, #268]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800b0ba:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0bc:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800b0be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b0c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b0c4:	f7fb fa5a 	bl	800657c <HAL_GetTick>
 800b0c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0ca:	e005      	b.n	800b0d8 <HAL_RCC_OscConfig+0x20c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0cc:	f7fb fa56 	bl	800657c <HAL_GetTick>
 800b0d0:	1b80      	subs	r0, r0, r6
 800b0d2:	2802      	cmp	r0, #2
 800b0d4:	f200 80bf 	bhi.w	800b256 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	0199      	lsls	r1, r3, #6
 800b0dc:	d4f6      	bmi.n	800b0cc <HAL_RCC_OscConfig+0x200>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0de:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800b0e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800b0ea:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800b0ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b0f0:	0852      	lsrs	r2, r2, #1

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0f2:	4c35      	ldr	r4, [pc, #212]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0f4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800b0f8:	3a01      	subs	r2, #1
 800b0fa:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800b0fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b102:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b10a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b10c:	f7fb fa36 	bl	800657c <HAL_GetTick>
 800b110:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b112:	e005      	b.n	800b120 <HAL_RCC_OscConfig+0x254>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b114:	f7fb fa32 	bl	800657c <HAL_GetTick>
 800b118:	1b40      	subs	r0, r0, r5
 800b11a:	2802      	cmp	r0, #2
 800b11c:	f200 809b 	bhi.w	800b256 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	019a      	lsls	r2, r3, #6
 800b124:	d5f6      	bpl.n	800b114 <HAL_RCC_OscConfig+0x248>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800b126:	2000      	movs	r0, #0
}
 800b128:	b002      	add	sp, #8
 800b12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800b12e:	f240 1163 	movw	r1, #355	; 0x163
 800b132:	4826      	ldr	r0, [pc, #152]	; (800b1cc <HAL_RCC_OscConfig+0x300>)
 800b134:	f7f8 fd08 	bl	8003b48 <assert_failed>
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	e6d2      	b.n	800aee2 <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	025e      	lsls	r6, r3, #9
 800b140:	f53f af1c 	bmi.w	800af7c <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b144:	4b20      	ldr	r3, [pc, #128]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	079d      	lsls	r5, r3, #30
 800b14a:	d566      	bpl.n	800b21a <HAL_RCC_OscConfig+0x34e>
 800b14c:	68e3      	ldr	r3, [r4, #12]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d063      	beq.n	800b21a <HAL_RCC_OscConfig+0x34e>
        return HAL_ERROR;
 800b152:	2001      	movs	r0, #1
}
 800b154:	b002      	add	sp, #8
 800b156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800b15a:	f240 119b 	movw	r1, #411	; 0x19b
 800b15e:	481b      	ldr	r0, [pc, #108]	; (800b1cc <HAL_RCC_OscConfig+0x300>)
 800b160:	f7f8 fcf2 	bl	8003b48 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	2b1f      	cmp	r3, #31
 800b168:	f67f aefc 	bls.w	800af64 <HAL_RCC_OscConfig+0x98>
 800b16c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800b170:	4816      	ldr	r0, [pc, #88]	; (800b1cc <HAL_RCC_OscConfig+0x300>)
 800b172:	f7f8 fce9 	bl	8003b48 <assert_failed>
 800b176:	e6f5      	b.n	800af64 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800b178:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <HAL_RCC_OscConfig+0x2fc>)
 800b17a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b17c:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 800b17e:	f022 0201 	bic.w	r2, r2, #1
 800b182:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b184:	f7fb f9fa 	bl	800657c <HAL_GetTick>
 800b188:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b18a:	e004      	b.n	800b196 <HAL_RCC_OscConfig+0x2ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b18c:	f7fb f9f6 	bl	800657c <HAL_GetTick>
 800b190:	1b40      	subs	r0, r0, r5
 800b192:	2802      	cmp	r0, #2
 800b194:	d85f      	bhi.n	800b256 <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b196:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800b198:	079f      	lsls	r7, r3, #30
 800b19a:	d4f7      	bmi.n	800b18c <HAL_RCC_OscConfig+0x2c0>
 800b19c:	e754      	b.n	800b048 <HAL_RCC_OscConfig+0x17c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800b19e:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800b1a2:	480a      	ldr	r0, [pc, #40]	; (800b1cc <HAL_RCC_OscConfig+0x300>)
 800b1a4:	f7f8 fcd0 	bl	8003b48 <assert_failed>
 800b1a8:	6963      	ldr	r3, [r4, #20]
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0e4      	beq.n	800b178 <HAL_RCC_OscConfig+0x2ac>
 800b1ae:	e738      	b.n	800b022 <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800b1b2:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b1b8:	641a      	str	r2, [r3, #64]	; 0x40
 800b1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b1c4:	e70d      	b.n	800afe2 <HAL_RCC_OscConfig+0x116>
 800b1c6:	bf00      	nop
 800b1c8:	40023800 	.word	0x40023800
 800b1cc:	08028b04 	.word	0x08028b04
 800b1d0:	40007000 	.word	0x40007000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800b1d4:	4891      	ldr	r0, [pc, #580]	; (800b41c <HAL_RCC_OscConfig+0x550>)
 800b1d6:	f240 214a 	movw	r1, #586	; 0x24a
 800b1da:	f7f8 fcb5 	bl	8003b48 <assert_failed>
 800b1de:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	f47f af3a 	bne.w	800b05a <HAL_RCC_OscConfig+0x18e>
 800b1e6:	e79e      	b.n	800b126 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800b1e8:	f240 1169 	movw	r1, #361	; 0x169
 800b1ec:	488b      	ldr	r0, [pc, #556]	; (800b41c <HAL_RCC_OscConfig+0x550>)
 800b1ee:	f7f8 fcab 	bl	8003b48 <assert_failed>
 800b1f2:	e680      	b.n	800aef6 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1f4:	4a8a      	ldr	r2, [pc, #552]	; (800b420 <HAL_RCC_OscConfig+0x554>)
 800b1f6:	6813      	ldr	r3, [r2, #0]
 800b1f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b1fe:	f7fb f9bd 	bl	800657c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b202:	4e87      	ldr	r6, [pc, #540]	; (800b420 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800b204:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b206:	e004      	b.n	800b212 <HAL_RCC_OscConfig+0x346>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b208:	f7fb f9b8 	bl	800657c <HAL_GetTick>
 800b20c:	1b40      	subs	r0, r0, r5
 800b20e:	2864      	cmp	r0, #100	; 0x64
 800b210:	d821      	bhi.n	800b256 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b212:	6833      	ldr	r3, [r6, #0]
 800b214:	039a      	lsls	r2, r3, #14
 800b216:	d5f7      	bpl.n	800b208 <HAL_RCC_OscConfig+0x33c>
 800b218:	e699      	b.n	800af4e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b21a:	4a81      	ldr	r2, [pc, #516]	; (800b420 <HAL_RCC_OscConfig+0x554>)
 800b21c:	6921      	ldr	r1, [r4, #16]
 800b21e:	6813      	ldr	r3, [r2, #0]
 800b220:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b224:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b228:	6013      	str	r3, [r2, #0]
 800b22a:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b22c:	071a      	lsls	r2, r3, #28
 800b22e:	f57f aec6 	bpl.w	800afbe <HAL_RCC_OscConfig+0xf2>
 800b232:	e6ef      	b.n	800b014 <HAL_RCC_OscConfig+0x148>
      PWR->CR1 |= PWR_CR1_DBP;
 800b234:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b236:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800b238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b23c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800b23e:	f7fb f99d 	bl	800657c <HAL_GetTick>
 800b242:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	05d9      	lsls	r1, r3, #23
 800b248:	f53f aed0 	bmi.w	800afec <HAL_RCC_OscConfig+0x120>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b24c:	f7fb f996 	bl	800657c <HAL_GetTick>
 800b250:	1b80      	subs	r0, r0, r6
 800b252:	2864      	cmp	r0, #100	; 0x64
 800b254:	d9f6      	bls.n	800b244 <HAL_RCC_OscConfig+0x378>
            return HAL_TIMEOUT;
 800b256:	2003      	movs	r0, #3
}
 800b258:	b002      	add	sp, #8
 800b25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b25e:	4b70      	ldr	r3, [pc, #448]	; (800b420 <HAL_RCC_OscConfig+0x554>)
 800b260:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b262:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b264:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b270:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b272:	f7fb f983 	bl	800657c <HAL_GetTick>
 800b276:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b278:	e004      	b.n	800b284 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b27a:	f7fb f97f 	bl	800657c <HAL_GetTick>
 800b27e:	1b40      	subs	r0, r0, r5
 800b280:	2864      	cmp	r0, #100	; 0x64
 800b282:	d8e8      	bhi.n	800b256 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b284:	6833      	ldr	r3, [r6, #0]
 800b286:	039b      	lsls	r3, r3, #14
 800b288:	d4f7      	bmi.n	800b27a <HAL_RCC_OscConfig+0x3ae>
 800b28a:	e660      	b.n	800af4e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b28c:	4b64      	ldr	r3, [pc, #400]	; (800b420 <HAL_RCC_OscConfig+0x554>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b28e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b294:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b296:	f022 0201 	bic.w	r2, r2, #1
 800b29a:	671a      	str	r2, [r3, #112]	; 0x70
 800b29c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b29e:	f022 0204 	bic.w	r2, r2, #4
 800b2a2:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b2a4:	f7fb f96a 	bl	800657c <HAL_GetTick>
 800b2a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2aa:	e004      	b.n	800b2b6 <HAL_RCC_OscConfig+0x3ea>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2ac:	f7fb f966 	bl	800657c <HAL_GetTick>
 800b2b0:	1b80      	subs	r0, r0, r6
 800b2b2:	4540      	cmp	r0, r8
 800b2b4:	d8cf      	bhi.n	800b256 <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2b8:	079b      	lsls	r3, r3, #30
 800b2ba:	d4f7      	bmi.n	800b2ac <HAL_RCC_OscConfig+0x3e0>
    if (pwrclkchanged == SET)
 800b2bc:	2d00      	cmp	r5, #0
 800b2be:	f43f aec6 	beq.w	800b04e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2c2:	4a57      	ldr	r2, [pc, #348]	; (800b420 <HAL_RCC_OscConfig+0x554>)
 800b2c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b2c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2ca:	6413      	str	r3, [r2, #64]	; 0x40
 800b2cc:	e6bf      	b.n	800b04e <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_DISABLE();
 800b2ce:	4b54      	ldr	r3, [pc, #336]	; (800b420 <HAL_RCC_OscConfig+0x554>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2d2:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800b2d4:	f022 0201 	bic.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b2da:	f7fb f94f 	bl	800657c <HAL_GetTick>
 800b2de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2e0:	e004      	b.n	800b2ec <HAL_RCC_OscConfig+0x420>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2e2:	f7fb f94b 	bl	800657c <HAL_GetTick>
 800b2e6:	1b40      	subs	r0, r0, r5
 800b2e8:	2802      	cmp	r0, #2
 800b2ea:	d8b4      	bhi.n	800b256 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2ec:	6833      	ldr	r3, [r6, #0]
 800b2ee:	0799      	lsls	r1, r3, #30
 800b2f0:	d4f7      	bmi.n	800b2e2 <HAL_RCC_OscConfig+0x416>
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	e661      	b.n	800afba <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2f6:	4a4a      	ldr	r2, [pc, #296]	; (800b420 <HAL_RCC_OscConfig+0x554>)
 800b2f8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b300:	f7fb f93c 	bl	800657c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b304:	4f46      	ldr	r7, [pc, #280]	; (800b420 <HAL_RCC_OscConfig+0x554>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b306:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b30a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b30c:	e004      	b.n	800b318 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b30e:	f7fb f935 	bl	800657c <HAL_GetTick>
 800b312:	1b80      	subs	r0, r0, r6
 800b314:	4540      	cmp	r0, r8
 800b316:	d89e      	bhi.n	800b256 <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b31a:	079a      	lsls	r2, r3, #30
 800b31c:	d5f7      	bpl.n	800b30e <HAL_RCC_OscConfig+0x442>
    if (pwrclkchanged == SET)
 800b31e:	2d00      	cmp	r5, #0
 800b320:	f43f ae95 	beq.w	800b04e <HAL_RCC_OscConfig+0x182>
 800b324:	e7cd      	b.n	800b2c2 <HAL_RCC_OscConfig+0x3f6>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b326:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800b328:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b32a:	f43f aefd 	beq.w	800b128 <HAL_RCC_OscConfig+0x25c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b32e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b332:	69e1      	ldr	r1, [r4, #28]
 800b334:	428b      	cmp	r3, r1
 800b336:	f47f af0c 	bne.w	800b152 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b33a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b33e:	6a21      	ldr	r1, [r4, #32]
 800b340:	428b      	cmp	r3, r1
 800b342:	f47f af06 	bne.w	800b152 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b346:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b34a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b34c:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b34e:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800b352:	f47f aefe 	bne.w	800b152 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b356:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b358:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800b35c:	085b      	lsrs	r3, r3, #1
 800b35e:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b360:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800b364:	f47f aef5 	bne.w	800b152 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b368:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800b36c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b36e:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800b372:	f47f aeee 	bne.w	800b152 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b376:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b378:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b37c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800b380:	bf14      	ite	ne
 800b382:	2001      	movne	r0, #1
 800b384:	2000      	moveq	r0, #0
 800b386:	e6cf      	b.n	800b128 <HAL_RCC_OscConfig+0x25c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800b388:	f240 2156 	movw	r1, #598	; 0x256
 800b38c:	4823      	ldr	r0, [pc, #140]	; (800b41c <HAL_RCC_OscConfig+0x550>)
 800b38e:	f7f8 fbdb 	bl	8003b48 <assert_failed>
 800b392:	e687      	b.n	800b0a4 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b394:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b398:	601a      	str	r2, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	e72c      	b.n	800b1fe <HAL_RCC_OscConfig+0x332>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3a4:	f042 0204 	orr.w	r2, r2, #4
 800b3a8:	671a      	str	r2, [r3, #112]	; 0x70
 800b3aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3ac:	f042 0201 	orr.w	r2, r2, #1
 800b3b0:	671a      	str	r2, [r3, #112]	; 0x70
 800b3b2:	e7a5      	b.n	800b300 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800b3b4:	f240 2155 	movw	r1, #597	; 0x255
 800b3b8:	4818      	ldr	r0, [pc, #96]	; (800b41c <HAL_RCC_OscConfig+0x550>)
 800b3ba:	f7f8 fbc5 	bl	8003b48 <assert_failed>
 800b3be:	e666      	b.n	800b08e <HAL_RCC_OscConfig+0x1c2>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800b3c0:	f44f 7115 	mov.w	r1, #596	; 0x254
 800b3c4:	4815      	ldr	r0, [pc, #84]	; (800b41c <HAL_RCC_OscConfig+0x550>)
 800b3c6:	f7f8 fbbf 	bl	8003b48 <assert_failed>
 800b3ca:	e65a      	b.n	800b082 <HAL_RCC_OscConfig+0x1b6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800b3cc:	f240 2153 	movw	r1, #595	; 0x253
 800b3d0:	4812      	ldr	r0, [pc, #72]	; (800b41c <HAL_RCC_OscConfig+0x550>)
 800b3d2:	f7f8 fbb9 	bl	8003b48 <assert_failed>
 800b3d6:	e64f      	b.n	800b078 <HAL_RCC_OscConfig+0x1ac>
        __HAL_RCC_PLL_DISABLE();
 800b3d8:	6813      	ldr	r3, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3da:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 800b3dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b3e2:	f7fb f8cb 	bl	800657c <HAL_GetTick>
 800b3e6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3e8:	e005      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3ea:	f7fb f8c7 	bl	800657c <HAL_GetTick>
 800b3ee:	1b00      	subs	r0, r0, r4
 800b3f0:	2802      	cmp	r0, #2
 800b3f2:	f63f af30 	bhi.w	800b256 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3f6:	682b      	ldr	r3, [r5, #0]
 800b3f8:	019b      	lsls	r3, r3, #6
 800b3fa:	d4f6      	bmi.n	800b3ea <HAL_RCC_OscConfig+0x51e>
 800b3fc:	e693      	b.n	800b126 <HAL_RCC_OscConfig+0x25a>
    return HAL_ERROR;
 800b3fe:	2001      	movs	r0, #1
}
 800b400:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800b402:	f240 2159 	movw	r1, #601	; 0x259
 800b406:	4805      	ldr	r0, [pc, #20]	; (800b41c <HAL_RCC_OscConfig+0x550>)
 800b408:	f7f8 fb9e 	bl	8003b48 <assert_failed>
 800b40c:	e654      	b.n	800b0b8 <HAL_RCC_OscConfig+0x1ec>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800b40e:	f240 2157 	movw	r1, #599	; 0x257
 800b412:	4802      	ldr	r0, [pc, #8]	; (800b41c <HAL_RCC_OscConfig+0x550>)
 800b414:	f7f8 fb98 	bl	8003b48 <assert_failed>
 800b418:	e649      	b.n	800b0ae <HAL_RCC_OscConfig+0x1e2>
 800b41a:	bf00      	nop
 800b41c:	08028b04 	.word	0x08028b04
 800b420:	40023800 	.word	0x40023800

0800b424 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b424:	4916      	ldr	r1, [pc, #88]	; (800b480 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800b426:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b428:	688b      	ldr	r3, [r1, #8]
 800b42a:	f003 030c 	and.w	r3, r3, #12
 800b42e:	2b04      	cmp	r3, #4
 800b430:	d01b      	beq.n	800b46a <HAL_RCC_GetSysClockFreq+0x46>
 800b432:	2b08      	cmp	r3, #8
 800b434:	d117      	bne.n	800b466 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b436:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b438:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b43a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b43e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b440:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800b444:	d113      	bne.n	800b46e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b446:	480f      	ldr	r0, [pc, #60]	; (800b484 <HAL_RCC_GetSysClockFreq+0x60>)
 800b448:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800b44c:	fba1 0100 	umull	r0, r1, r1, r0
 800b450:	f7f4 ffae 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b454:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <HAL_RCC_GetSysClockFreq+0x5c>)
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800b45c:	3301      	adds	r3, #1
 800b45e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800b460:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800b464:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800b466:	4807      	ldr	r0, [pc, #28]	; (800b484 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800b468:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b46a:	4807      	ldr	r0, [pc, #28]	; (800b488 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800b46c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b46e:	4806      	ldr	r0, [pc, #24]	; (800b488 <HAL_RCC_GetSysClockFreq+0x64>)
 800b470:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800b474:	2300      	movs	r3, #0
 800b476:	fba1 0100 	umull	r0, r1, r1, r0
 800b47a:	f7f4 ff99 	bl	80003b0 <__aeabi_uldivmod>
 800b47e:	e7e9      	b.n	800b454 <HAL_RCC_GetSysClockFreq+0x30>
 800b480:	40023800 	.word	0x40023800
 800b484:	00f42400 	.word	0x00f42400
 800b488:	007a1200 	.word	0x007a1200

0800b48c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800b48c:	2800      	cmp	r0, #0
 800b48e:	f000 80f7 	beq.w	800b680 <HAL_RCC_ClockConfig+0x1f4>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800b492:	6803      	ldr	r3, [r0, #0]
 800b494:	3b01      	subs	r3, #1
 800b496:	2b0e      	cmp	r3, #14
{
 800b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49c:	4604      	mov	r4, r0
 800b49e:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800b4a0:	f200 80d7 	bhi.w	800b652 <HAL_RCC_ClockConfig+0x1c6>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800b4a4:	2d0f      	cmp	r5, #15
 800b4a6:	f200 80c4 	bhi.w	800b632 <HAL_RCC_ClockConfig+0x1a6>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b4aa:	4a82      	ldr	r2, [pc, #520]	; (800b6b4 <HAL_RCC_ClockConfig+0x228>)
 800b4ac:	6813      	ldr	r3, [r2, #0]
 800b4ae:	f003 030f 	and.w	r3, r3, #15
 800b4b2:	42ab      	cmp	r3, r5
 800b4b4:	d370      	bcc.n	800b598 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	0798      	lsls	r0, r3, #30
 800b4ba:	d530      	bpl.n	800b51e <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4bc:	0759      	lsls	r1, r3, #29
 800b4be:	d504      	bpl.n	800b4ca <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4c0:	497d      	ldr	r1, [pc, #500]	; (800b6b8 <HAL_RCC_ClockConfig+0x22c>)
 800b4c2:	688a      	ldr	r2, [r1, #8]
 800b4c4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800b4c8:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4ca:	071a      	lsls	r2, r3, #28
 800b4cc:	d504      	bpl.n	800b4d8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4ce:	497a      	ldr	r1, [pc, #488]	; (800b6b8 <HAL_RCC_ClockConfig+0x22c>)
 800b4d0:	688a      	ldr	r2, [r1, #8]
 800b4d2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800b4d6:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800b4d8:	68a1      	ldr	r1, [r4, #8]
 800b4da:	f021 0220 	bic.w	r2, r1, #32
 800b4de:	f021 0680 	bic.w	r6, r1, #128	; 0x80
 800b4e2:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800b4e6:	2a90      	cmp	r2, #144	; 0x90
 800b4e8:	bf18      	it	ne
 800b4ea:	2e00      	cmpne	r6, #0
 800b4ec:	bf14      	ite	ne
 800b4ee:	2201      	movne	r2, #1
 800b4f0:	2200      	moveq	r2, #0
 800b4f2:	29f0      	cmp	r1, #240	; 0xf0
 800b4f4:	bf0c      	ite	eq
 800b4f6:	2200      	moveq	r2, #0
 800b4f8:	f002 0201 	andne.w	r2, r2, #1
 800b4fc:	28a0      	cmp	r0, #160	; 0xa0
 800b4fe:	bf0c      	ite	eq
 800b500:	2200      	moveq	r2, #0
 800b502:	f002 0201 	andne.w	r2, r2, #1
 800b506:	b122      	cbz	r2, 800b512 <HAL_RCC_ClockConfig+0x86>
 800b508:	f021 0210 	bic.w	r2, r1, #16
 800b50c:	2ac0      	cmp	r2, #192	; 0xc0
 800b50e:	f040 80b9 	bne.w	800b684 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b512:	4869      	ldr	r0, [pc, #420]	; (800b6b8 <HAL_RCC_ClockConfig+0x22c>)
 800b514:	6882      	ldr	r2, [r0, #8]
 800b516:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b51a:	4311      	orrs	r1, r2
 800b51c:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b51e:	07df      	lsls	r7, r3, #31
 800b520:	d527      	bpl.n	800b572 <HAL_RCC_ClockConfig+0xe6>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800b522:	6863      	ldr	r3, [r4, #4]
 800b524:	2b02      	cmp	r3, #2
 800b526:	f200 80a2 	bhi.w	800b66e <HAL_RCC_ClockConfig+0x1e2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b52a:	4a63      	ldr	r2, [pc, #396]	; (800b6b8 <HAL_RCC_ClockConfig+0x22c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b52c:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b52e:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b530:	f000 8099 	beq.w	800b666 <HAL_RCC_ClockConfig+0x1da>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b534:	2b02      	cmp	r3, #2
 800b536:	f000 8092 	beq.w	800b65e <HAL_RCC_ClockConfig+0x1d2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b53a:	0791      	lsls	r1, r2, #30
 800b53c:	d529      	bpl.n	800b592 <HAL_RCC_ClockConfig+0x106>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b53e:	495e      	ldr	r1, [pc, #376]	; (800b6b8 <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b540:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b544:	688a      	ldr	r2, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b546:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b548:	f022 0203 	bic.w	r2, r2, #3
 800b54c:	4313      	orrs	r3, r2
 800b54e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800b550:	f7fb f814 	bl	800657c <HAL_GetTick>
 800b554:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b556:	e005      	b.n	800b564 <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b558:	f7fb f810 	bl	800657c <HAL_GetTick>
 800b55c:	1b80      	subs	r0, r0, r6
 800b55e:	4540      	cmp	r0, r8
 800b560:	f200 808c 	bhi.w	800b67c <HAL_RCC_ClockConfig+0x1f0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	6862      	ldr	r2, [r4, #4]
 800b568:	f003 030c 	and.w	r3, r3, #12
 800b56c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800b570:	d1f2      	bne.n	800b558 <HAL_RCC_ClockConfig+0xcc>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b572:	4a50      	ldr	r2, [pc, #320]	; (800b6b4 <HAL_RCC_ClockConfig+0x228>)
 800b574:	6813      	ldr	r3, [r2, #0]
 800b576:	f003 030f 	and.w	r3, r3, #15
 800b57a:	42ab      	cmp	r3, r5
 800b57c:	d91a      	bls.n	800b5b4 <HAL_RCC_ClockConfig+0x128>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b57e:	6813      	ldr	r3, [r2, #0]
 800b580:	f023 030f 	bic.w	r3, r3, #15
 800b584:	432b      	orrs	r3, r5
 800b586:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b588:	6813      	ldr	r3, [r2, #0]
 800b58a:	f003 030f 	and.w	r3, r3, #15
 800b58e:	42ab      	cmp	r3, r5
 800b590:	d010      	beq.n	800b5b4 <HAL_RCC_ClockConfig+0x128>
    return HAL_ERROR;
 800b592:	2001      	movs	r0, #1
}
 800b594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b598:	6813      	ldr	r3, [r2, #0]
 800b59a:	f023 030f 	bic.w	r3, r3, #15
 800b59e:	432b      	orrs	r3, r5
 800b5a0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5a2:	6813      	ldr	r3, [r2, #0]
 800b5a4:	f003 030f 	and.w	r3, r3, #15
 800b5a8:	42ab      	cmp	r3, r5
 800b5aa:	d1f2      	bne.n	800b592 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	0798      	lsls	r0, r3, #30
 800b5b0:	d484      	bmi.n	800b4bc <HAL_RCC_ClockConfig+0x30>
 800b5b2:	e7b4      	b.n	800b51e <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	075a      	lsls	r2, r3, #29
 800b5b8:	d512      	bpl.n	800b5e0 <HAL_RCC_ClockConfig+0x154>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800b5ba:	68e1      	ldr	r1, [r4, #12]
 800b5bc:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800b5c0:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800b5c4:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800b5c8:	bf18      	it	ne
 800b5ca:	2a00      	cmpne	r2, #0
 800b5cc:	d002      	beq.n	800b5d4 <HAL_RCC_ClockConfig+0x148>
 800b5ce:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800b5d2:	d15f      	bne.n	800b694 <HAL_RCC_ClockConfig+0x208>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5d4:	4838      	ldr	r0, [pc, #224]	; (800b6b8 <HAL_RCC_ClockConfig+0x22c>)
 800b5d6:	6882      	ldr	r2, [r0, #8]
 800b5d8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5e0:	071b      	lsls	r3, r3, #28
 800b5e2:	d513      	bpl.n	800b60c <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800b5e4:	6922      	ldr	r2, [r4, #16]
 800b5e6:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800b5ea:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800b5ee:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800b5f2:	bf18      	it	ne
 800b5f4:	2b00      	cmpne	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <HAL_RCC_ClockConfig+0x172>
 800b5f8:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800b5fc:	d152      	bne.n	800b6a4 <HAL_RCC_ClockConfig+0x218>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b5fe:	492e      	ldr	r1, [pc, #184]	; (800b6b8 <HAL_RCC_ClockConfig+0x22c>)
 800b600:	688b      	ldr	r3, [r1, #8]
 800b602:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b606:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b60a:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b60c:	f7ff ff0a 	bl	800b424 <HAL_RCC_GetSysClockFreq>
 800b610:	4a29      	ldr	r2, [pc, #164]	; (800b6b8 <HAL_RCC_ClockConfig+0x22c>)
 800b612:	4c2a      	ldr	r4, [pc, #168]	; (800b6bc <HAL_RCC_ClockConfig+0x230>)
 800b614:	4603      	mov	r3, r0
 800b616:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800b618:	4829      	ldr	r0, [pc, #164]	; (800b6c0 <HAL_RCC_ClockConfig+0x234>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b61a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800b61e:	4929      	ldr	r1, [pc, #164]	; (800b6c4 <HAL_RCC_ClockConfig+0x238>)
  HAL_InitTick(uwTickPrio);
 800b620:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b622:	5ca2      	ldrb	r2, [r4, r2]
 800b624:	40d3      	lsrs	r3, r2
 800b626:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800b628:	f7fa f8a4 	bl	8005774 <HAL_InitTick>
  return HAL_OK;
 800b62c:	2000      	movs	r0, #0
}
 800b62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800b632:	f240 21de 	movw	r1, #734	; 0x2de
 800b636:	4824      	ldr	r0, [pc, #144]	; (800b6c8 <HAL_RCC_ClockConfig+0x23c>)
 800b638:	f7f8 fa86 	bl	8003b48 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b63c:	4b1d      	ldr	r3, [pc, #116]	; (800b6b4 <HAL_RCC_ClockConfig+0x228>)
      return HAL_ERROR;
 800b63e:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b640:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b642:	6819      	ldr	r1, [r3, #0]
 800b644:	f021 010f 	bic.w	r1, r1, #15
 800b648:	430d      	orrs	r5, r1
 800b64a:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b64c:	681b      	ldr	r3, [r3, #0]
}
 800b64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800b652:	f240 21dd 	movw	r1, #733	; 0x2dd
 800b656:	481c      	ldr	r0, [pc, #112]	; (800b6c8 <HAL_RCC_ClockConfig+0x23c>)
 800b658:	f7f8 fa76 	bl	8003b48 <assert_failed>
 800b65c:	e722      	b.n	800b4a4 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b65e:	0190      	lsls	r0, r2, #6
 800b660:	f53f af6d 	bmi.w	800b53e <HAL_RCC_ClockConfig+0xb2>
 800b664:	e795      	b.n	800b592 <HAL_RCC_ClockConfig+0x106>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b666:	0396      	lsls	r6, r2, #14
 800b668:	f53f af69 	bmi.w	800b53e <HAL_RCC_ClockConfig+0xb2>
 800b66c:	e791      	b.n	800b592 <HAL_RCC_ClockConfig+0x106>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800b66e:	f240 3109 	movw	r1, #777	; 0x309
 800b672:	4815      	ldr	r0, [pc, #84]	; (800b6c8 <HAL_RCC_ClockConfig+0x23c>)
 800b674:	f7f8 fa68 	bl	8003b48 <assert_failed>
 800b678:	6863      	ldr	r3, [r4, #4]
 800b67a:	e756      	b.n	800b52a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800b67c:	2003      	movs	r0, #3
 800b67e:	e789      	b.n	800b594 <HAL_RCC_ClockConfig+0x108>
    return HAL_ERROR;
 800b680:	2001      	movs	r0, #1
}
 800b682:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800b684:	f240 3102 	movw	r1, #770	; 0x302
 800b688:	480f      	ldr	r0, [pc, #60]	; (800b6c8 <HAL_RCC_ClockConfig+0x23c>)
 800b68a:	f7f8 fa5d 	bl	8003b48 <assert_failed>
 800b68e:	68a1      	ldr	r1, [r4, #8]
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	e73e      	b.n	800b512 <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800b694:	f240 3146 	movw	r1, #838	; 0x346
 800b698:	480b      	ldr	r0, [pc, #44]	; (800b6c8 <HAL_RCC_ClockConfig+0x23c>)
 800b69a:	f7f8 fa55 	bl	8003b48 <assert_failed>
 800b69e:	68e1      	ldr	r1, [r4, #12]
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	e797      	b.n	800b5d4 <HAL_RCC_ClockConfig+0x148>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800b6a4:	f240 314d 	movw	r1, #845	; 0x34d
 800b6a8:	4807      	ldr	r0, [pc, #28]	; (800b6c8 <HAL_RCC_ClockConfig+0x23c>)
 800b6aa:	f7f8 fa4d 	bl	8003b48 <assert_failed>
 800b6ae:	6922      	ldr	r2, [r4, #16]
 800b6b0:	e7a5      	b.n	800b5fe <HAL_RCC_ClockConfig+0x172>
 800b6b2:	bf00      	nop
 800b6b4:	40023c00 	.word	0x40023c00
 800b6b8:	40023800 	.word	0x40023800
 800b6bc:	08028264 	.word	0x08028264
 800b6c0:	200002d4 	.word	0x200002d4
 800b6c4:	20000274 	.word	0x20000274
 800b6c8:	08028b04 	.word	0x08028b04

0800b6cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800b6cc:	4b01      	ldr	r3, [pc, #4]	; (800b6d4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	20000274 	.word	0x20000274

0800b6d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b6d8:	4b04      	ldr	r3, [pc, #16]	; (800b6ec <HAL_RCC_GetPCLK1Freq+0x14>)
 800b6da:	4a05      	ldr	r2, [pc, #20]	; (800b6f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800b6dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800b6de:	4905      	ldr	r1, [pc, #20]	; (800b6f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b6e0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800b6e4:	6808      	ldr	r0, [r1, #0]
 800b6e6:	5cd3      	ldrb	r3, [r2, r3]
}
 800b6e8:	40d8      	lsrs	r0, r3
 800b6ea:	4770      	bx	lr
 800b6ec:	40023800 	.word	0x40023800
 800b6f0:	08028274 	.word	0x08028274
 800b6f4:	20000274 	.word	0x20000274

0800b6f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <HAL_RCC_GetPCLK2Freq+0x14>)
 800b6fa:	4a05      	ldr	r2, [pc, #20]	; (800b710 <HAL_RCC_GetPCLK2Freq+0x18>)
 800b6fc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800b6fe:	4905      	ldr	r1, [pc, #20]	; (800b714 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b700:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800b704:	6808      	ldr	r0, [r1, #0]
 800b706:	5cd3      	ldrb	r3, [r2, r3]
}
 800b708:	40d8      	lsrs	r0, r3
 800b70a:	4770      	bx	lr
 800b70c:	40023800 	.word	0x40023800
 800b710:	08028274 	.word	0x08028274
 800b714:	20000274 	.word	0x20000274

0800b718 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b718:	4b0e      	ldr	r3, [pc, #56]	; (800b754 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b71a:	220f      	movs	r2, #15
 800b71c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b71e:	689a      	ldr	r2, [r3, #8]
 800b720:	f002 0203 	and.w	r2, r2, #3
 800b724:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b726:	689a      	ldr	r2, [r3, #8]
 800b728:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b72c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800b734:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	08db      	lsrs	r3, r3, #3
{
 800b73a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b73c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b740:	4c05      	ldr	r4, [pc, #20]	; (800b758 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b742:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b744:	6823      	ldr	r3, [r4, #0]
}
 800b746:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b74a:	f003 030f 	and.w	r3, r3, #15
 800b74e:	600b      	str	r3, [r1, #0]
}
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	40023800 	.word	0x40023800
 800b758:	40023c00 	.word	0x40023c00

0800b75c <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800b75c:	4a56      	ldr	r2, [pc, #344]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800b75e:	6803      	ldr	r3, [r0, #0]
 800b760:	401a      	ands	r2, r3
{
 800b762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b766:	4604      	mov	r4, r0
 800b768:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800b76a:	2a00      	cmp	r2, #0
 800b76c:	f000 834a 	beq.w	800be04 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b770:	f013 0601 	ands.w	r6, r3, #1
 800b774:	d00f      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800b776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b778:	f431 0200 	bics.w	r2, r1, #8388608	; 0x800000
 800b77c:	f040 834d 	bne.w	800be1a <HAL_RCCEx_PeriphCLKConfig+0x6be>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b780:	4a4e      	ldr	r2, [pc, #312]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b782:	fab1 f681 	clz	r6, r1
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b786:	6890      	ldr	r0, [r2, #8]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b788:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b78a:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 800b78e:	6090      	str	r0, [r2, #8]
 800b790:	6890      	ldr	r0, [r2, #8]
 800b792:	4301      	orrs	r1, r0
 800b794:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b796:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800b79a:	d014      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800b79c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800b79e:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800b7a2:	f040 8393 	bne.w	800becc <HAL_RCCEx_PeriphCLKConfig+0x770>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b7a6:	4945      	ldr	r1, [pc, #276]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b7a8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b7ac:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800b7b0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800b7b4:	ea42 0205 	orr.w	r2, r2, r5
 800b7b8:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b7bc:	f000 832a 	beq.w	800be14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b7c0:	fab5 f585 	clz	r5, r5
 800b7c4:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b7c6:	02d9      	lsls	r1, r3, #11
 800b7c8:	d514      	bpl.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800b7ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b7cc:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800b7d0:	f040 8383 	bne.w	800beda <HAL_RCCEx_PeriphCLKConfig+0x77e>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b7d4:	4839      	ldr	r0, [pc, #228]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b7d6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b7da:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800b7de:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800b7e2:	ea42 0201 	orr.w	r2, r2, r1
 800b7e6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b7ea:	f000 8311 	beq.w	800be10 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800b7ee:	2900      	cmp	r1, #0
 800b7f0:	bf08      	it	eq
 800b7f2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800b7f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800b7f8:	bf18      	it	ne
 800b7fa:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b7fc:	069a      	lsls	r2, r3, #26
 800b7fe:	f140 809f 	bpl.w	800b940 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800b802:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b804:	492e      	ldr	r1, [pc, #184]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b806:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b80a:	bf18      	it	ne
 800b80c:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800b810:	f422 2ca0 	bic.w	ip, r2, #327680	; 0x50000
 800b814:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800b818:	482a      	ldr	r0, [pc, #168]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b81a:	bf14      	ite	ne
 800b81c:	2301      	movne	r3, #1
 800b81e:	2300      	moveq	r3, #0
 800b820:	458c      	cmp	ip, r1
 800b822:	bf0c      	ite	eq
 800b824:	2300      	moveq	r3, #0
 800b826:	f003 0301 	andne.w	r3, r3, #1
 800b82a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800b82e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800b832:	4287      	cmp	r7, r0
 800b834:	bf0c      	ite	eq
 800b836:	2300      	moveq	r3, #0
 800b838:	f003 0301 	andne.w	r3, r3, #1
 800b83c:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800b840:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800b844:	4561      	cmp	r1, ip
 800b846:	bf0c      	ite	eq
 800b848:	2300      	moveq	r3, #0
 800b84a:	f003 0301 	andne.w	r3, r3, #1
 800b84e:	f50c 2c00 	add.w	ip, ip, #524288	; 0x80000
 800b852:	4287      	cmp	r7, r0
 800b854:	bf0c      	ite	eq
 800b856:	2300      	moveq	r3, #0
 800b858:	f003 0301 	andne.w	r3, r3, #1
 800b85c:	4f1a      	ldr	r7, [pc, #104]	; (800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800b85e:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800b862:	4561      	cmp	r1, ip
 800b864:	bf0c      	ite	eq
 800b866:	2300      	moveq	r3, #0
 800b868:	f003 0301 	andne.w	r3, r3, #1
 800b86c:	42b9      	cmp	r1, r7
 800b86e:	bf0c      	ite	eq
 800b870:	2300      	moveq	r3, #0
 800b872:	f003 0301 	andne.w	r3, r3, #1
 800b876:	4281      	cmp	r1, r0
 800b878:	bf0c      	ite	eq
 800b87a:	2300      	moveq	r3, #0
 800b87c:	f003 0301 	andne.w	r3, r3, #1
 800b880:	b12b      	cbz	r3, 800b88e <HAL_RCCEx_PeriphCLKConfig+0x132>
 800b882:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b886:	4b11      	ldr	r3, [pc, #68]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800b888:	429a      	cmp	r2, r3
 800b88a:	f040 8446 	bne.w	800c11a <HAL_RCCEx_PeriphCLKConfig+0x9be>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b88e:	4a0b      	ldr	r2, [pc, #44]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800b892:	6c11      	ldr	r1, [r2, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b894:	4698      	mov	r8, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800b896:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800b89a:	6411      	str	r1, [r2, #64]	; 0x40
 800b89c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b89e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800b8a2:	9201      	str	r2, [sp, #4]
 800b8a4:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ac:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800b8ae:	f7fa fe65 	bl	800657c <HAL_GetTick>
 800b8b2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b8b4:	e016      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800b8b6:	bf00      	nop
 800b8b8:	1dfffff9 	.word	0x1dfffff9
 800b8bc:	40023800 	.word	0x40023800
 800b8c0:	00020300 	.word	0x00020300
 800b8c4:	00040300 	.word	0x00040300
 800b8c8:	00140300 	.word	0x00140300
 800b8cc:	001c0300 	.word	0x001c0300
 800b8d0:	40007000 	.word	0x40007000
 800b8d4:	00080300 	.word	0x00080300
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8d8:	f7fa fe50 	bl	800657c <HAL_GetTick>
 800b8dc:	1bc0      	subs	r0, r0, r7
 800b8de:	2864      	cmp	r0, #100	; 0x64
 800b8e0:	f200 828c 	bhi.w	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b8e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b8e8:	05db      	lsls	r3, r3, #23
 800b8ea:	d5f5      	bpl.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b8ec:	4fc0      	ldr	r7, [pc, #768]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b8ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b8f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b8f2:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800b8f6:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800b8fa:	d011      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800b8fc:	4291      	cmp	r1, r2
 800b8fe:	d00f      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b900:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b902:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b904:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800b908:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800b90c:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b90e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b910:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800b914:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b916:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b918:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b91a:	07d0      	lsls	r0, r2, #31
 800b91c:	f100 8372 	bmi.w	800c004 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b920:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800b924:	f000 82c9 	beq.w	800beba <HAL_RCCEx_PeriphCLKConfig+0x75e>
 800b928:	49b1      	ldr	r1, [pc, #708]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b92a:	688a      	ldr	r2, [r1, #8]
 800b92c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b930:	608a      	str	r2, [r1, #8]
 800b932:	4aaf      	ldr	r2, [pc, #700]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b938:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800b93a:	430b      	orrs	r3, r1
 800b93c:	6713      	str	r3, [r2, #112]	; 0x70
 800b93e:	6823      	ldr	r3, [r4, #0]
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b940:	06da      	lsls	r2, r3, #27
 800b942:	d510      	bpl.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800b944:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800b946:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800b94a:	f040 82db 	bne.w	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x7a8>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b94e:	4aa8      	ldr	r2, [pc, #672]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b950:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800b954:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800b958:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800b95c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800b960:	4339      	orrs	r1, r7
 800b962:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b966:	045f      	lsls	r7, r3, #17
 800b968:	d50f      	bpl.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800b96a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b96c:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800b970:	d003      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b972:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800b976:	f040 8299 	bne.w	800beac <HAL_RCCEx_PeriphCLKConfig+0x750>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b97a:	489d      	ldr	r0, [pc, #628]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b97c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b980:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800b984:	430a      	orrs	r2, r1
 800b986:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b98a:	0418      	lsls	r0, r3, #16
 800b98c:	d50f      	bpl.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800b98e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b990:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800b994:	d003      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800b996:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800b99a:	f040 826f 	bne.w	800be7c <HAL_RCCEx_PeriphCLKConfig+0x720>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b99e:	4894      	ldr	r0, [pc, #592]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9a0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b9a4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b9ae:	03d9      	lsls	r1, r3, #15
 800b9b0:	d50f      	bpl.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800b9b2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b9b4:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800b9b8:	d003      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800b9ba:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b9be:	f040 8265 	bne.w	800be8c <HAL_RCCEx_PeriphCLKConfig+0x730>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b9c2:	488b      	ldr	r0, [pc, #556]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9c4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b9c8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800b9cc:	430a      	orrs	r2, r1
 800b9ce:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b9d2:	039a      	lsls	r2, r3, #14
 800b9d4:	d50f      	bpl.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800b9d6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b9d8:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800b9dc:	d003      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800b9de:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b9e2:	f040 825b 	bne.w	800be9c <HAL_RCCEx_PeriphCLKConfig+0x740>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b9e6:	4882      	ldr	r0, [pc, #520]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9e8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b9ec:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b9f6:	065f      	lsls	r7, r3, #25
 800b9f8:	d50b      	bpl.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800b9fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b9fc:	2903      	cmp	r1, #3
 800b9fe:	f200 82b9 	bhi.w	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x818>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba02:	487b      	ldr	r0, [pc, #492]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba04:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ba08:	f022 0203 	bic.w	r2, r2, #3
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ba12:	0618      	lsls	r0, r3, #24
 800ba14:	d50c      	bpl.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800ba16:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba18:	f031 020c 	bics.w	r2, r1, #12
 800ba1c:	f040 82ba 	bne.w	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x838>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ba20:	4873      	ldr	r0, [pc, #460]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba22:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ba26:	f022 020c 	bic.w	r2, r2, #12
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ba30:	05d9      	lsls	r1, r3, #23
 800ba32:	d50c      	bpl.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800ba34:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ba36:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800ba3a:	f040 82b3 	bne.w	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x848>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ba3e:	486c      	ldr	r0, [pc, #432]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba40:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ba44:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800ba48:	430a      	orrs	r2, r1
 800ba4a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ba4e:	059a      	lsls	r2, r3, #22
 800ba50:	d50c      	bpl.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800ba52:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ba54:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800ba58:	f040 82ac 	bne.w	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x858>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ba5c:	4864      	ldr	r0, [pc, #400]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba5e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ba62:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ba66:	430a      	orrs	r2, r1
 800ba68:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ba6c:	055f      	lsls	r7, r3, #21
 800ba6e:	d50c      	bpl.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800ba70:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ba72:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800ba76:	f040 82a5 	bne.w	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ba7a:	485d      	ldr	r0, [pc, #372]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba7c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ba80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ba84:	430a      	orrs	r2, r1
 800ba86:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ba8a:	0518      	lsls	r0, r3, #20
 800ba8c:	d50c      	bpl.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800ba8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ba90:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800ba94:	f040 829e 	bne.w	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x878>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ba98:	4855      	ldr	r0, [pc, #340]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba9a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ba9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800baa2:	430a      	orrs	r2, r1
 800baa4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800baa8:	04d9      	lsls	r1, r3, #19
 800baaa:	d50c      	bpl.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800baac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800baae:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800bab2:	f040 8297 	bne.w	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x888>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bab6:	484e      	ldr	r0, [pc, #312]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bab8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800babc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bac0:	430a      	orrs	r2, r1
 800bac2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bac6:	049a      	lsls	r2, r3, #18
 800bac8:	d50c      	bpl.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800baca:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800bacc:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800bad0:	f040 8290 	bne.w	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x898>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bad4:	4846      	ldr	r0, [pc, #280]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bad6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800bada:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bade:	430a      	orrs	r2, r1
 800bae0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bae4:	025f      	lsls	r7, r3, #9
 800bae6:	d50c      	bpl.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800bae8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800baea:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800baee:	f040 8228 	bne.w	800bf42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800baf2:	483f      	ldr	r0, [pc, #252]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800baf4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800baf8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800bafc:	430a      	orrs	r2, r1
 800bafe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bb02:	0298      	lsls	r0, r3, #10
 800bb04:	d510      	bpl.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800bb06:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800bb08:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800bb0c:	f040 8221 	bne.w	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x7f6>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bb10:	4837      	ldr	r0, [pc, #220]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800bb12:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bb16:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800bb1a:	bf08      	it	eq
 800bb1c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bb1e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800bb22:	430a      	orrs	r2, r1
 800bb24:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800bb28:	f013 0f08 	tst.w	r3, #8
 800bb2c:	bf18      	it	ne
 800bb2e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb30:	0359      	lsls	r1, r3, #13
 800bb32:	d50c      	bpl.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800bb34:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800bb36:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800bb3a:	f040 8223 	bne.w	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x828>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb3e:	482c      	ldr	r0, [pc, #176]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bb40:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800bb44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bb48:	430a      	orrs	r2, r1
 800bb4a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bb4e:	021a      	lsls	r2, r3, #8
 800bb50:	d50d      	bpl.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800bb52:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800bb56:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800bb5a:	f040 8202 	bne.w	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x806>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bb5e:	4824      	ldr	r0, [pc, #144]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bb60:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800bb64:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bb68:	430a      	orrs	r2, r1
 800bb6a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bb6e:	015f      	lsls	r7, r3, #5
 800bb70:	d50d      	bpl.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800bb72:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800bb76:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800bb7a:	f040 81ca 	bne.w	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x7b6>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800bb7e:	481c      	ldr	r0, [pc, #112]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bb80:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800bb84:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800bb88:	430a      	orrs	r2, r1
 800bb8a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb8e:	0118      	lsls	r0, r3, #4
 800bb90:	d50d      	bpl.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800bb92:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800bb96:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800bb9a:	f040 81c9 	bne.w	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x7d4>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb9e:	4814      	ldr	r0, [pc, #80]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bba0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800bba4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800bba8:	430a      	orrs	r2, r1
 800bbaa:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800bbae:	00d9      	lsls	r1, r3, #3
 800bbb0:	d50d      	bpl.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800bbb2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800bbb6:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800bbba:	f040 819b 	bne.w	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x798>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bbbe:	490c      	ldr	r1, [pc, #48]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bbc0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800bbc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bbce:	2e01      	cmp	r6, #1
 800bbd0:	d003      	beq.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	019a      	lsls	r2, r3, #6
 800bbd6:	f140 8088 	bpl.w	800bcea <HAL_RCCEx_PeriphCLKConfig+0x58e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bbda:	4b05      	ldr	r3, [pc, #20]	; (800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bbdc:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bbde:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_DISABLE();
 800bbe0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800bbe4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800bbe6:	f7fa fcc9 	bl	800657c <HAL_GetTick>
 800bbea:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bbec:	e008      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800bbee:	bf00      	nop
 800bbf0:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bbf4:	f7fa fcc2 	bl	800657c <HAL_GetTick>
 800bbf8:	1b80      	subs	r0, r0, r6
 800bbfa:	2864      	cmp	r0, #100	; 0x64
 800bbfc:	f200 80fe 	bhi.w	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	d4f6      	bmi.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x498>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800bc06:	6863      	ldr	r3, [r4, #4]
 800bc08:	3b32      	subs	r3, #50	; 0x32
 800bc0a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800bc0e:	f200 816b 	bhi.w	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bc12:	6823      	ldr	r3, [r4, #0]
 800bc14:	07df      	lsls	r7, r3, #31
 800bc16:	d517      	bpl.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800bc18:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bc1a:	b9aa      	cbnz	r2, 800bc48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800bc1c:	68a7      	ldr	r7, [r4, #8]
 800bc1e:	1eba      	subs	r2, r7, #2
 800bc20:	2a05      	cmp	r2, #5
 800bc22:	f200 8211 	bhi.w	800c048 <HAL_RCCEx_PeriphCLKConfig+0x8ec>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bc26:	49bf      	ldr	r1, [pc, #764]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bc28:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bc2a:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc2e:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bc32:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800bc36:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800bc3a:	4332      	orrs	r2, r6
 800bc3c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800bc40:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800bc44:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bc48:	031e      	lsls	r6, r3, #12
 800bc4a:	f100 80ed 	bmi.w	800be28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bc4e:	02d8      	lsls	r0, r3, #11
 800bc50:	d504      	bpl.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bc52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bc54:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800bc58:	f000 80eb 	beq.w	800be32 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc5c:	01d9      	lsls	r1, r3, #7
 800bc5e:	d514      	bpl.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800bc60:	6927      	ldr	r7, [r4, #16]
 800bc62:	2f03      	cmp	r7, #3
 800bc64:	f200 81fe 	bhi.w	800c064 <HAL_RCCEx_PeriphCLKConfig+0x908>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc68:	49ae      	ldr	r1, [pc, #696]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bc6a:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc6c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bc70:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bc74:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800bc78:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800bc7c:	4332      	orrs	r2, r6
 800bc7e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800bc82:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800bc86:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bc8a:	019a      	lsls	r2, r3, #6
 800bc8c:	d51a      	bpl.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x568>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	f200 81e1 	bhi.w	800c058 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	3b02      	subs	r3, #2
 800bc9a:	2b05      	cmp	r3, #5
 800bc9c:	f200 81f1 	bhi.w	800c082 <HAL_RCCEx_PeriphCLKConfig+0x926>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800bca0:	68e2      	ldr	r2, [r4, #12]
 800bca2:	1e93      	subs	r3, r2, #2
 800bca4:	2b0d      	cmp	r3, #13
 800bca6:	f200 81e5 	bhi.w	800c074 <HAL_RCCEx_PeriphCLKConfig+0x918>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	6861      	ldr	r1, [r4, #4]
 800bcae:	041b      	lsls	r3, r3, #16
 800bcb0:	68a0      	ldr	r0, [r4, #8]
 800bcb2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800bcb6:	499b      	ldr	r1, [pc, #620]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800bcb8:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800bcbc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bcc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bcc4:	4b97      	ldr	r3, [pc, #604]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800bcc6:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bcc8:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800bcca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bcce:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800bcd0:	f7fa fc54 	bl	800657c <HAL_GetTick>
 800bcd4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bcd6:	e005      	b.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x588>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bcd8:	f7fa fc50 	bl	800657c <HAL_GetTick>
 800bcdc:	1b80      	subs	r0, r0, r6
 800bcde:	2864      	cmp	r0, #100	; 0x64
 800bce0:	f200 808c 	bhi.w	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	011b      	lsls	r3, r3, #4
 800bce8:	d5f6      	bpl.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bcea:	2d01      	cmp	r5, #1
 800bcec:	d003      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800bcee:	2000      	movs	r0, #0
}
 800bcf0:	b003      	add	sp, #12
 800bcf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800bcf6:	4b8b      	ldr	r3, [pc, #556]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800bcf8:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bcfa:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800bcfc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bd00:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800bd02:	f7fa fc3b 	bl	800657c <HAL_GetTick>
 800bd06:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd08:	e004      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bd0a:	f7fa fc37 	bl	800657c <HAL_GetTick>
 800bd0e:	1b40      	subs	r0, r0, r5
 800bd10:	2864      	cmp	r0, #100	; 0x64
 800bd12:	d873      	bhi.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd14:	6833      	ldr	r3, [r6, #0]
 800bd16:	009f      	lsls	r7, r3, #2
 800bd18:	d4f7      	bmi.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800bd1a:	6963      	ldr	r3, [r4, #20]
 800bd1c:	3b32      	subs	r3, #50	; 0x32
 800bd1e:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800bd22:	f200 81bc 	bhi.w	800c09e <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	031d      	lsls	r5, r3, #12
 800bd2a:	f140 81b0 	bpl.w	800c08e <HAL_RCCEx_PeriphCLKConfig+0x932>
 800bd2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bd30:	2a00      	cmp	r2, #0
 800bd32:	f040 81ac 	bne.w	800c08e <HAL_RCCEx_PeriphCLKConfig+0x932>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800bd36:	69a3      	ldr	r3, [r4, #24]
 800bd38:	3b02      	subs	r3, #2
 800bd3a:	2b0d      	cmp	r3, #13
 800bd3c:	f200 81d8 	bhi.w	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x994>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800bd40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd42:	1e59      	subs	r1, r3, #1
 800bd44:	291f      	cmp	r1, #31
 800bd46:	f200 81cb 	bhi.w	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x984>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd4a:	4a76      	ldr	r2, [pc, #472]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bd4c:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bd52:	f8d2 6088 	ldr.w	r6, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bd56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bd5a:	69a0      	ldr	r0, [r4, #24]
 800bd5c:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800bd60:	4333      	orrs	r3, r6
 800bd62:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800bd66:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800bd6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bd6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800bd72:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800bd76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bd7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800bd7e:	6823      	ldr	r3, [r4, #0]
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bd80:	0299      	lsls	r1, r3, #10
 800bd82:	d504      	bpl.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x632>
 800bd84:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800bd86:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800bd8a:	f000 818e 	beq.w	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x94e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bd8e:	071a      	lsls	r2, r3, #28
 800bd90:	d522      	bpl.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800bd92:	69e3      	ldr	r3, [r4, #28]
 800bd94:	3b02      	subs	r3, #2
 800bd96:	2b05      	cmp	r3, #5
 800bd98:	f200 819c 	bhi.w	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x978>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800bd9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bd9e:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800bda2:	f040 81ab 	bne.w	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bda6:	4a5f      	ldr	r2, [pc, #380]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bda8:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bdaa:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bdae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bdb2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800bdb6:	69e4      	ldr	r4, [r4, #28]
 800bdb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bdbc:	430b      	orrs	r3, r1
 800bdbe:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800bdc2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
 800bdc6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bdca:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800bdce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800bdd2:	4303      	orrs	r3, r0
 800bdd4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800bdd8:	4b52      	ldr	r3, [pc, #328]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800bdda:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bddc:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_ENABLE();
 800bdde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bde2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800bde4:	f7fa fbca 	bl	800657c <HAL_GetTick>
 800bde8:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bdea:	682b      	ldr	r3, [r5, #0]
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	f53f af7e 	bmi.w	800bcee <HAL_RCCEx_PeriphCLKConfig+0x592>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bdf2:	f7fa fbc3 	bl	800657c <HAL_GetTick>
 800bdf6:	1b00      	subs	r0, r0, r4
 800bdf8:	2864      	cmp	r0, #100	; 0x64
 800bdfa:	d9f6      	bls.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        return HAL_TIMEOUT;
 800bdfc:	2003      	movs	r0, #3
}
 800bdfe:	b003      	add	sp, #12
 800be00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800be04:	2172      	movs	r1, #114	; 0x72
 800be06:	4848      	ldr	r0, [pc, #288]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800be08:	f7f7 fe9e 	bl	8003b48 <assert_failed>
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	e4af      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800be10:	2601      	movs	r6, #1
 800be12:	e4ef      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800be14:	2500      	movs	r5, #0
      plli2sused = 1;
 800be16:	2601      	movs	r6, #1
 800be18:	e4d5      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800be1a:	2178      	movs	r1, #120	; 0x78
 800be1c:	4842      	ldr	r0, [pc, #264]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800be1e:	f7f7 fe93 	bl	8003b48 <assert_failed>
 800be22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	e4ab      	b.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800be28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800be2a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800be2e:	f47f af0e 	bne.w	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800be32:	68e3      	ldr	r3, [r4, #12]
 800be34:	3b02      	subs	r3, #2
 800be36:	2b0d      	cmp	r3, #13
 800be38:	f200 80f8 	bhi.w	800c02c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800be3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be3e:	1e5e      	subs	r6, r3, #1
 800be40:	2e1f      	cmp	r6, #31
 800be42:	f200 80f9 	bhi.w	800c038 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800be46:	4a37      	ldr	r2, [pc, #220]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800be48:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800be4a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800be4e:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800be52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be56:	68e1      	ldr	r1, [r4, #12]
 800be58:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800be5c:	433b      	orrs	r3, r7
 800be5e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800be62:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800be66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800be6a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800be6e:	f023 031f 	bic.w	r3, r3, #31
 800be72:	4333      	orrs	r3, r6
 800be74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800be78:	6823      	ldr	r3, [r4, #0]
 800be7a:	e6ef      	b.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x500>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800be7c:	f240 1105 	movw	r1, #261	; 0x105
 800be80:	4829      	ldr	r0, [pc, #164]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800be82:	f7f7 fe61 	bl	8003b48 <assert_failed>
 800be86:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	e588      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x242>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800be8c:	f240 110f 	movw	r1, #271	; 0x10f
 800be90:	4825      	ldr	r0, [pc, #148]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800be92:	f7f7 fe59 	bl	8003b48 <assert_failed>
 800be96:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	e592      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800be9c:	f240 1119 	movw	r1, #281	; 0x119
 800bea0:	4821      	ldr	r0, [pc, #132]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800bea2:	f7f7 fe51 	bl	8003b48 <assert_failed>
 800bea6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	e59c      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800beac:	21fb      	movs	r1, #251	; 0xfb
 800beae:	481e      	ldr	r0, [pc, #120]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800beb0:	f7f7 fe4a 	bl	8003b48 <assert_failed>
 800beb4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800beb6:	6823      	ldr	r3, [r4, #0]
 800beb8:	e55f      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800beba:	481a      	ldr	r0, [pc, #104]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800bebc:	491b      	ldr	r1, [pc, #108]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800bebe:	6882      	ldr	r2, [r0, #8]
 800bec0:	4019      	ands	r1, r3
 800bec2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800bec6:	430a      	orrs	r2, r1
 800bec8:	6082      	str	r2, [r0, #8]
 800beca:	e532      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800becc:	2188      	movs	r1, #136	; 0x88
 800bece:	4816      	ldr	r0, [pc, #88]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800bed0:	f7f7 fe3a 	bl	8003b48 <assert_failed>
 800bed4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	e465      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800beda:	219c      	movs	r1, #156	; 0x9c
 800bedc:	4812      	ldr	r0, [pc, #72]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800bede:	f7f7 fe33 	bl	8003b48 <assert_failed>
 800bee2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	e475      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800bee8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800beec:	480e      	ldr	r0, [pc, #56]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800beee:	f7f7 fe2b 	bl	8003b48 <assert_failed>
 800bef2:	e68e      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800bef4:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800bef8:	480b      	ldr	r0, [pc, #44]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800befa:	f7f7 fe25 	bl	8003b48 <assert_failed>
 800befe:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800bf02:	e65c      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x462>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800bf04:	21f1      	movs	r1, #241	; 0xf1
 800bf06:	4808      	ldr	r0, [pc, #32]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800bf08:	f7f7 fe1e 	bl	8003b48 <assert_failed>
 800bf0c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	e51d      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800bf12:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bf16:	4804      	ldr	r0, [pc, #16]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800bf18:	f7f7 fe16 	bl	8003b48 <assert_failed>
 800bf1c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	e62c      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x422>
 800bf24:	40023800 	.word	0x40023800
 800bf28:	08028b3c 	.word	0x08028b3c
 800bf2c:	0ffffcff 	.word	0x0ffffcff
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800bf30:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800bf34:	487c      	ldr	r0, [pc, #496]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bf36:	f7f7 fe07 	bl	8003b48 <assert_failed>
 800bf3a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	e62d      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800bf42:	f240 1173 	movw	r1, #371	; 0x173
 800bf46:	4878      	ldr	r0, [pc, #480]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bf48:	f7f7 fdfe 	bl	8003b48 <assert_failed>
 800bf4c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	e5cf      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800bf52:	f240 117d 	movw	r1, #381	; 0x17d
 800bf56:	4874      	ldr	r0, [pc, #464]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bf58:	f7f7 fdf6 	bl	8003b48 <assert_failed>
 800bf5c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	e5d6      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800bf62:	f240 119f 	movw	r1, #415	; 0x19f
 800bf66:	4870      	ldr	r0, [pc, #448]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bf68:	f7f7 fdee 	bl	8003b48 <assert_failed>
 800bf6c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800bf70:	6823      	ldr	r3, [r4, #0]
 800bf72:	e5f4      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x402>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800bf74:	f240 1123 	movw	r1, #291	; 0x123
 800bf78:	486b      	ldr	r0, [pc, #428]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bf7a:	f7f7 fde5 	bl	8003b48 <assert_failed>
 800bf7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	e53e      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800bf84:	f240 1195 	movw	r1, #405	; 0x195
 800bf88:	4867      	ldr	r0, [pc, #412]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bf8a:	f7f7 fddd 	bl	8003b48 <assert_failed>
 800bf8e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800bf90:	6823      	ldr	r3, [r4, #0]
 800bf92:	e5d4      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800bf94:	f240 112d 	movw	r1, #301	; 0x12d
 800bf98:	4863      	ldr	r0, [pc, #396]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bf9a:	f7f7 fdd5 	bl	8003b48 <assert_failed>
 800bf9e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	e53d      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800bfa4:	f240 1137 	movw	r1, #311	; 0x137
 800bfa8:	485f      	ldr	r0, [pc, #380]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bfaa:	f7f7 fdcd 	bl	8003b48 <assert_failed>
 800bfae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	e544      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800bfb4:	f240 1141 	movw	r1, #321	; 0x141
 800bfb8:	485b      	ldr	r0, [pc, #364]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bfba:	f7f7 fdc5 	bl	8003b48 <assert_failed>
 800bfbe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	e54b      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x300>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800bfc4:	f240 114b 	movw	r1, #331	; 0x14b
 800bfc8:	4857      	ldr	r0, [pc, #348]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bfca:	f7f7 fdbd 	bl	8003b48 <assert_failed>
 800bfce:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	e552      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800bfd4:	f240 1155 	movw	r1, #341	; 0x155
 800bfd8:	4853      	ldr	r0, [pc, #332]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bfda:	f7f7 fdb5 	bl	8003b48 <assert_failed>
 800bfde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	e559      	b.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800bfe4:	f240 115f 	movw	r1, #351	; 0x15f
 800bfe8:	484f      	ldr	r0, [pc, #316]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bfea:	f7f7 fdad 	bl	8003b48 <assert_failed>
 800bfee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	e560      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800bff4:	f240 1169 	movw	r1, #361	; 0x169
 800bff8:	484b      	ldr	r0, [pc, #300]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800bffa:	f7f7 fda5 	bl	8003b48 <assert_failed>
 800bffe:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	e567      	b.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x378>
        tickstart = HAL_GetTick();
 800c004:	f7fa faba 	bl	800657c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c008:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800c00c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c00e:	e006      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c010:	f7fa fab4 	bl	800657c <HAL_GetTick>
 800c014:	eba0 0008 	sub.w	r0, r0, r8
 800c018:	4548      	cmp	r0, r9
 800c01a:	f63f aeef 	bhi.w	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c01e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c020:	0799      	lsls	r1, r3, #30
 800c022:	d5f5      	bpl.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800c024:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c026:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800c02a:	e479      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800c02c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800c030:	483d      	ldr	r0, [pc, #244]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c032:	f7f7 fd89 	bl	8003b48 <assert_failed>
 800c036:	e701      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800c038:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800c03c:	483a      	ldr	r0, [pc, #232]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c03e:	f7f7 fd83 	bl	8003b48 <assert_failed>
 800c042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c044:	1e5e      	subs	r6, r3, #1
 800c046:	e6fe      	b.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800c048:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800c04c:	4836      	ldr	r0, [pc, #216]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c04e:	f7f7 fd7b 	bl	8003b48 <assert_failed>
 800c052:	68a7      	ldr	r7, [r4, #8]
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	e5e6      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800c058:	f44f 7105 	mov.w	r1, #532	; 0x214
 800c05c:	4832      	ldr	r0, [pc, #200]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c05e:	f7f7 fd73 	bl	8003b48 <assert_failed>
 800c062:	e618      	b.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800c064:	f240 2105 	movw	r1, #517	; 0x205
 800c068:	482f      	ldr	r0, [pc, #188]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c06a:	f7f7 fd6d 	bl	8003b48 <assert_failed>
 800c06e:	6927      	ldr	r7, [r4, #16]
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	e5f9      	b.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800c074:	f240 2116 	movw	r1, #534	; 0x216
 800c078:	482b      	ldr	r0, [pc, #172]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c07a:	f7f7 fd65 	bl	8003b48 <assert_failed>
 800c07e:	68e2      	ldr	r2, [r4, #12]
 800c080:	e613      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800c082:	f240 2115 	movw	r1, #533	; 0x215
 800c086:	4828      	ldr	r0, [pc, #160]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c088:	f7f7 fd5e 	bl	8003b48 <assert_failed>
 800c08c:	e608      	b.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c08e:	02d8      	lsls	r0, r3, #11
 800c090:	f57f ae76 	bpl.w	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x624>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c094:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c096:	2a00      	cmp	r2, #0
 800c098:	f47f ae72 	bne.w	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800c09c:	e64b      	b.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800c09e:	f44f 7111 	mov.w	r1, #580	; 0x244
 800c0a2:	4821      	ldr	r0, [pc, #132]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c0a4:	f7f7 fd50 	bl	8003b48 <assert_failed>
 800c0a8:	e63d      	b.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800c0aa:	6a20      	ldr	r0, [r4, #32]
 800c0ac:	2803      	cmp	r0, #3
 800c0ae:	d82c      	bhi.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c0b0:	491e      	ldr	r1, [pc, #120]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c0b2:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c0b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c0b8:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c0bc:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800c0c0:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800c0c4:	4332      	orrs	r2, r6
 800c0c6:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800c0ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c0ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800c0d2:	e65c      	b.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x632>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800c0d4:	f240 216f 	movw	r1, #623	; 0x26f
 800c0d8:	4813      	ldr	r0, [pc, #76]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c0da:	f7f7 fd35 	bl	8003b48 <assert_failed>
 800c0de:	e65d      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x640>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800c0e0:	f240 214d 	movw	r1, #589	; 0x24d
 800c0e4:	4810      	ldr	r0, [pc, #64]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c0e6:	f7f7 fd2f 	bl	8003b48 <assert_failed>
 800c0ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0ec:	1e59      	subs	r1, r3, #1
 800c0ee:	e62c      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800c0f0:	f240 214b 	movw	r1, #587	; 0x24b
 800c0f4:	480c      	ldr	r0, [pc, #48]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c0f6:	f7f7 fd27 	bl	8003b48 <assert_failed>
 800c0fa:	e621      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800c0fc:	480a      	ldr	r0, [pc, #40]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c0fe:	f44f 711c 	mov.w	r1, #624	; 0x270
 800c102:	f7f7 fd21 	bl	8003b48 <assert_failed>
 800c106:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c108:	e64d      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800c10a:	4807      	ldr	r0, [pc, #28]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c10c:	f44f 7118 	mov.w	r1, #608	; 0x260
 800c110:	f7f7 fd1a 	bl	8003b48 <assert_failed>
 800c114:	6a20      	ldr	r0, [r4, #32]
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	e7ca      	b.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x954>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800c11a:	21b7      	movs	r1, #183	; 0xb7
 800c11c:	4802      	ldr	r0, [pc, #8]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c11e:	f7f7 fd13 	bl	8003b48 <assert_failed>
 800c122:	f7ff bbb4 	b.w	800b88e <HAL_RCCEx_PeriphCLKConfig+0x132>
 800c126:	bf00      	nop
 800c128:	08028b3c 	.word	0x08028b3c
 800c12c:	40023800 	.word	0x40023800

0800c130 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c130:	b1f8      	cbz	r0, 800c172 <HAL_RNG_Init+0x42>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800c132:	6802      	ldr	r2, [r0, #0]
{
 800c134:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800c136:	4b10      	ldr	r3, [pc, #64]	; (800c178 <HAL_RNG_Init+0x48>)
 800c138:	4604      	mov	r4, r0
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d003      	beq.n	800c146 <HAL_RNG_Init+0x16>
 800c13e:	21a3      	movs	r1, #163	; 0xa3
 800c140:	480e      	ldr	r0, [pc, #56]	; (800c17c <HAL_RNG_Init+0x4c>)
 800c142:	f7f7 fd01 	bl	8003b48 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c146:	7963      	ldrb	r3, [r4, #5]
 800c148:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c14c:	b163      	cbz	r3, 800c168 <HAL_RNG_Init+0x38>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c14e:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800c150:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c152:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800c154:	2501      	movs	r5, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800c156:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800c158:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800c15a:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800c15c:	f043 0304 	orr.w	r3, r3, #4
 800c160:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800c162:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c164:	60a2      	str	r2, [r4, #8]
}
 800c166:	bd38      	pop	{r3, r4, r5, pc}
    HAL_RNG_MspInit(hrng);
 800c168:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800c16a:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800c16c:	f7f8 fe1a 	bl	8004da4 <HAL_RNG_MspInit>
 800c170:	e7ed      	b.n	800c14e <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800c172:	2001      	movs	r0, #1
}
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	50060800 	.word	0x50060800
 800c17c:	08028b78 	.word	0x08028b78

0800c180 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800c180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c182:	460c      	mov	r4, r1
 800c184:	4617      	mov	r7, r2
 800c186:	b083      	sub	sp, #12
 800c188:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c18a:	4427      	add	r7, r4
 800c18c:	f7fa f9f6 	bl	800657c <HAL_GetTick>
 800c190:	1a3d      	subs	r5, r7, r0
  tmp_tickstart = HAL_GetTick();
 800c192:	f7fa f9f3 	bl	800657c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c196:	4b25      	ldr	r3, [pc, #148]	; (800c22c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800c198:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800c1a0:	fb05 f303 	mul.w	r3, r5, r3
 800c1a4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1a6:	6832      	ldr	r2, [r6, #0]
 800c1a8:	e001      	b.n	800c1ae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c1aa:	1c63      	adds	r3, r4, #1
 800c1ac:	d106      	bne.n	800c1bc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1ae:	6893      	ldr	r3, [r2, #8]
 800c1b0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800c1b4:	d1f9      	bne.n	800c1aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800c1b6:	4618      	mov	r0, r3
}
 800c1b8:	b003      	add	sp, #12
 800c1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c1bc:	f7fa f9de 	bl	800657c <HAL_GetTick>
 800c1c0:	1bc0      	subs	r0, r0, r7
 800c1c2:	42a8      	cmp	r0, r5
 800c1c4:	d208      	bcs.n	800c1d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800c1c6:	9a01      	ldr	r2, [sp, #4]
      count--;
 800c1c8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800c1ca:	2a00      	cmp	r2, #0
      count--;
 800c1cc:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800c1d0:	bf08      	it	eq
 800c1d2:	2500      	moveq	r5, #0
      count--;
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	e7e6      	b.n	800c1a6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1d8:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c1dc:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1de:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c1e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c1e6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1e8:	d014      	beq.n	800c214 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c1ea:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800c1ec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c1f0:	d007      	beq.n	800c202 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800c1f2:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800c1f8:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800c1fc:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800c200:	e7da      	b.n	800c1b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c208:	601a      	str	r2, [r3, #0]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	e7ee      	b.n	800c1f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c214:	68b2      	ldr	r2, [r6, #8]
 800c216:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c21a:	d002      	beq.n	800c222 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800c21c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c220:	d1e3      	bne.n	800c1ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c228:	601a      	str	r2, [r3, #0]
 800c22a:	e7de      	b.n	800c1ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800c22c:	20000274 	.word	0x20000274

0800c230 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800c230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c234:	4615      	mov	r5, r2
 800c236:	4698      	mov	r8, r3
 800c238:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c23a:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c23c:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800c23e:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800c240:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800c244:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c246:	f7fa f999 	bl	800657c <HAL_GetTick>
 800c24a:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800c24e:	f7fa f995 	bl	800657c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c252:	4b2e      	ldr	r3, [pc, #184]	; (800c30c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c254:	f8d6 8000 	ldr.w	r8, [r6]
  tmp_tickstart = HAL_GetTick();
 800c258:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c25a:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800c25c:	4642      	mov	r2, r8
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c25e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c262:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c266:	0d1b      	lsrs	r3, r3, #20
 800c268:	fb07 f303 	mul.w	r3, r7, r3
 800c26c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800c26e:	e00b      	b.n	800c288 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c270:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800c274:	d106      	bne.n	800c284 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c276:	f898 300c 	ldrb.w	r3, [r8, #12]
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c280:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c284:	1c6b      	adds	r3, r5, #1
 800c286:	d106      	bne.n	800c296 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800c288:	6893      	ldr	r3, [r2, #8]
 800c28a:	4023      	ands	r3, r4
 800c28c:	d1f0      	bne.n	800c270 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800c28e:	4618      	mov	r0, r3
}
 800c290:	b003      	add	sp, #12
 800c292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c296:	f7fa f971 	bl	800657c <HAL_GetTick>
 800c29a:	eba0 0009 	sub.w	r0, r0, r9
 800c29e:	42b8      	cmp	r0, r7
 800c2a0:	d209      	bcs.n	800c2b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800c2a2:	9a01      	ldr	r2, [sp, #4]
      count--;
 800c2a4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800c2a6:	2a00      	cmp	r2, #0
 800c2a8:	6832      	ldr	r2, [r6, #0]
      count--;
 800c2aa:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800c2ae:	bf08      	it	eq
 800c2b0:	2700      	moveq	r7, #0
      count--;
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	e7e8      	b.n	800c288 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2b6:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2ba:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2bc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c2c4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2c6:	d014      	beq.n	800c2f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c2c8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800c2ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c2ce:	d007      	beq.n	800c2e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800c2d0:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800c2d2:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800c2d4:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800c2d6:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800c2da:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800c2de:	e7d7      	b.n	800c290 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	e7ee      	b.n	800c2d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2f2:	68b2      	ldr	r2, [r6, #8]
 800c2f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c2f8:	d002      	beq.n	800c300 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800c2fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c2fe:	d1e3      	bne.n	800c2c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c306:	601a      	str	r2, [r3, #0]
 800c308:	e7de      	b.n	800c2c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800c30a:	bf00      	nop
 800c30c:	20000274 	.word	0x20000274

0800c310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c312:	460f      	mov	r7, r1
 800c314:	b085      	sub	sp, #20
 800c316:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c318:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c31c:	9201      	str	r2, [sp, #4]
 800c31e:	463a      	mov	r2, r7
{
 800c320:	4606      	mov	r6, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c322:	f7ff ff85 	bl	800c230 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800c326:	9b01      	ldr	r3, [sp, #4]
 800c328:	bb58      	cbnz	r0, 800c382 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c32a:	4a19      	ldr	r2, [pc, #100]	; (800c390 <SPI_EndRxTxTransaction+0x80>)
 800c32c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c330:	4818      	ldr	r0, [pc, #96]	; (800c394 <SPI_EndRxTxTransaction+0x84>)
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	fba0 0202 	umull	r0, r2, r0, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c338:	6870      	ldr	r0, [r6, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c33a:	0d52      	lsrs	r2, r2, #21
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c33c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c340:	fb01 f202 	mul.w	r2, r1, r2
 800c344:	9203      	str	r2, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c346:	d107      	bne.n	800c358 <SPI_EndRxTxTransaction+0x48>
 800c348:	e012      	b.n	800c370 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800c34a:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c34c:	6835      	ldr	r5, [r6, #0]
      count--;
 800c34e:	3c01      	subs	r4, #1
 800c350:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c352:	68ac      	ldr	r4, [r5, #8]
 800c354:	0622      	lsls	r2, r4, #24
 800c356:	d502      	bpl.n	800c35e <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800c358:	9c03      	ldr	r4, [sp, #12]
 800c35a:	2c00      	cmp	r4, #0
 800c35c:	d1f5      	bne.n	800c34a <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c35e:	463a      	mov	r2, r7
 800c360:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c364:	4630      	mov	r0, r6
 800c366:	f7ff ff63 	bl	800c230 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800c36a:	b950      	cbnz	r0, 800c382 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800c36c:	b005      	add	sp, #20
 800c36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c370:	461a      	mov	r2, r3
 800c372:	4639      	mov	r1, r7
 800c374:	4630      	mov	r0, r6
 800c376:	9301      	str	r3, [sp, #4]
 800c378:	f7ff ff02 	bl	800c180 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800c37c:	9b01      	ldr	r3, [sp, #4]
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0ed      	beq.n	800c35e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c382:	6e33      	ldr	r3, [r6, #96]	; 0x60
    return HAL_TIMEOUT;
 800c384:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c386:	f043 0320 	orr.w	r3, r3, #32
 800c38a:	6633      	str	r3, [r6, #96]	; 0x60
}
 800c38c:	b005      	add	sp, #20
 800c38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c390:	20000274 	.word	0x20000274
 800c394:	165e9f81 	.word	0x165e9f81

0800c398 <HAL_SPI_Init>:
  if (hspi == NULL)
 800c398:	2800      	cmp	r0, #0
 800c39a:	f000 812d 	beq.w	800c5f8 <HAL_SPI_Init+0x260>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800c39e:	6802      	ldr	r2, [r0, #0]
 800c3a0:	4baa      	ldr	r3, [pc, #680]	; (800c64c <HAL_SPI_Init+0x2b4>)
 800c3a2:	49ab      	ldr	r1, [pc, #684]	; (800c650 <HAL_SPI_Init+0x2b8>)
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	bf18      	it	ne
 800c3a8:	428a      	cmpne	r2, r1
 800c3aa:	f501 318c 	add.w	r1, r1, #71680	; 0x11800
 800c3ae:	bf14      	ite	ne
 800c3b0:	2301      	movne	r3, #1
 800c3b2:	2300      	moveq	r3, #0
{
 800c3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800c3b6:	4da7      	ldr	r5, [pc, #668]	; (800c654 <HAL_SPI_Init+0x2bc>)
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	48a7      	ldr	r0, [pc, #668]	; (800c658 <HAL_SPI_Init+0x2c0>)
{
 800c3bc:	b083      	sub	sp, #12
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800c3be:	42aa      	cmp	r2, r5
 800c3c0:	bf0c      	ite	eq
 800c3c2:	2300      	moveq	r3, #0
 800c3c4:	f003 0301 	andne.w	r3, r3, #1
 800c3c8:	4282      	cmp	r2, r0
 800c3ca:	bf0c      	ite	eq
 800c3cc:	2300      	moveq	r3, #0
 800c3ce:	f003 0301 	andne.w	r3, r3, #1
 800c3d2:	428a      	cmp	r2, r1
 800c3d4:	bf0c      	ite	eq
 800c3d6:	2300      	moveq	r3, #0
 800c3d8:	f003 0301 	andne.w	r3, r3, #1
 800c3dc:	b11b      	cbz	r3, 800c3e6 <HAL_SPI_Init+0x4e>
 800c3de:	4b9f      	ldr	r3, [pc, #636]	; (800c65c <HAL_SPI_Init+0x2c4>)
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	f040 8103 	bne.w	800c5ec <HAL_SPI_Init+0x254>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800c3e6:	6863      	ldr	r3, [r4, #4]
 800c3e8:	b11b      	cbz	r3, 800c3f2 <HAL_SPI_Init+0x5a>
 800c3ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3ee:	f040 80d1 	bne.w	800c594 <HAL_SPI_Init+0x1fc>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800c3f2:	68a3      	ldr	r3, [r4, #8]
 800c3f4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800c3f8:	d003      	beq.n	800c402 <HAL_SPI_Init+0x6a>
 800c3fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3fe:	f040 80df 	bne.w	800c5c0 <HAL_SPI_Init+0x228>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800c402:	68e2      	ldr	r2, [r4, #12]
 800c404:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800c408:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800c40c:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800c410:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c414:	bf18      	it	ne
 800c416:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800c41a:	bf14      	ite	ne
 800c41c:	2301      	movne	r3, #1
 800c41e:	2300      	moveq	r3, #0
 800c420:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800c424:	bf0c      	ite	eq
 800c426:	2300      	moveq	r3, #0
 800c428:	f003 0301 	andne.w	r3, r3, #1
 800c42c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c430:	bf0c      	ite	eq
 800c432:	2300      	moveq	r3, #0
 800c434:	f003 0301 	andne.w	r3, r3, #1
 800c438:	b12b      	cbz	r3, 800c446 <HAL_SPI_Init+0xae>
 800c43a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c43e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c442:	f040 80fc 	bne.w	800c63e <HAL_SPI_Init+0x2a6>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800c446:	69a3      	ldr	r3, [r4, #24]
 800c448:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800c44c:	d003      	beq.n	800c456 <HAL_SPI_Init+0xbe>
 800c44e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c452:	f040 80a5 	bne.w	800c5a0 <HAL_SPI_Init+0x208>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800c456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c458:	f033 0308 	bics.w	r3, r3, #8
 800c45c:	f040 80aa 	bne.w	800c5b4 <HAL_SPI_Init+0x21c>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800c460:	69e3      	ldr	r3, [r4, #28]
 800c462:	f023 0318 	bic.w	r3, r3, #24
 800c466:	2b20      	cmp	r3, #32
 800c468:	d002      	beq.n	800c470 <HAL_SPI_Init+0xd8>
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f040 80db 	bne.w	800c626 <HAL_SPI_Init+0x28e>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800c470:	6a23      	ldr	r3, [r4, #32]
 800c472:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c476:	f040 80ad 	bne.w	800c5d4 <HAL_SPI_Init+0x23c>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800c47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c47c:	f033 0210 	bics.w	r2, r3, #16
 800c480:	d17f      	bne.n	800c582 <HAL_SPI_Init+0x1ea>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c482:	2b00      	cmp	r3, #0
 800c484:	d172      	bne.n	800c56c <HAL_SPI_Init+0x1d4>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800c486:	6923      	ldr	r3, [r4, #16]
 800c488:	f033 0302 	bics.w	r3, r3, #2
 800c48c:	f040 80c5 	bne.w	800c61a <HAL_SPI_Init+0x282>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800c490:	6963      	ldr	r3, [r4, #20]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d904      	bls.n	800c4a0 <HAL_SPI_Init+0x108>
 800c496:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800c49a:	4871      	ldr	r0, [pc, #452]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c49c:	f7f7 fb54 	bl	8003b48 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4a0:	6863      	ldr	r3, [r4, #4]
 800c4a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4a6:	f000 80a9 	beq.w	800c5fc <HAL_SPI_Init+0x264>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4ae:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4b0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4b4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 8090 	beq.w	800c5e0 <HAL_SPI_Init+0x248>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4c0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800c4c2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800c4c4:	6821      	ldr	r1, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c4c6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800c4ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c4ce:	f422 6000 	bic.w	r0, r2, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800c4d2:	680b      	ldr	r3, [r1, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c4d4:	bf8c      	ite	hi
 800c4d6:	2700      	movhi	r7, #0
 800c4d8:	f44f 5780 	movls.w	r7, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800c4dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c4e0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800c4e4:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c4e6:	d171      	bne.n	800c5cc <HAL_SPI_Init+0x234>
 800c4e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c4ea:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c4ee:	68a6      	ldr	r6, [r4, #8]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c4f0:	f402 6c70 	and.w	ip, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c4f4:	6863      	ldr	r3, [r4, #4]
 800c4f6:	f406 4e04 	and.w	lr, r6, #33792	; 0x8400
 800c4fa:	6926      	ldr	r6, [r4, #16]
 800c4fc:	f403 7382 	and.w	r3, r3, #260	; 0x104
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c500:	6a62      	ldr	r2, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c502:	f006 0602 	and.w	r6, r6, #2
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c506:	6b60      	ldr	r0, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c508:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c50c:	f002 0210 	and.w	r2, r2, #16
 800c510:	f000 0008 	and.w	r0, r0, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c514:	4333      	orrs	r3, r6
 800c516:	6966      	ldr	r6, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c518:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c51a:	f006 0e01 	and.w	lr, r6, #1
 800c51e:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c520:	ea42 020c 	orr.w	r2, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c524:	f406 7000 	and.w	r0, r6, #512	; 0x200
 800c528:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c52c:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c52e:	4303      	orrs	r3, r0
 800c530:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c532:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c536:	9001      	str	r0, [sp, #4]
 800c538:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c53a:	4332      	orrs	r2, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c53c:	2600      	movs	r6, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c53e:	f000 0c38 	and.w	ip, r0, #56	; 0x38
 800c542:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c544:	433a      	orrs	r2, r7
  hspi->State     = HAL_SPI_STATE_READY;
 800c546:	2701      	movs	r7, #1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c548:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800c54c:	ea43 030c 	orr.w	r3, r3, ip
 800c550:	4303      	orrs	r3, r0
  return HAL_OK;
 800c552:	4630      	mov	r0, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c554:	432b      	orrs	r3, r5
 800c556:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c558:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c55a:	69cb      	ldr	r3, [r1, #28]
 800c55c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c560:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c562:	6626      	str	r6, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c564:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
}
 800c568:	b003      	add	sp, #12
 800c56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800c56c:	69e3      	ldr	r3, [r4, #28]
 800c56e:	f023 0318 	bic.w	r3, r3, #24
 800c572:	2b20      	cmp	r3, #32
 800c574:	d001      	beq.n	800c57a <HAL_SPI_Init+0x1e2>
 800c576:	2b00      	cmp	r3, #0
 800c578:	d15b      	bne.n	800c632 <HAL_SPI_Init+0x29a>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c57a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c57c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800c580:	e795      	b.n	800c4ae <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800c582:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800c586:	4836      	ldr	r0, [pc, #216]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c588:	f7f7 fade 	bl	8003b48 <assert_failed>
 800c58c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1ec      	bne.n	800c56c <HAL_SPI_Init+0x1d4>
 800c592:	e778      	b.n	800c486 <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800c594:	f240 1147 	movw	r1, #327	; 0x147
 800c598:	4831      	ldr	r0, [pc, #196]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c59a:	f7f7 fad5 	bl	8003b48 <assert_failed>
 800c59e:	e728      	b.n	800c3f2 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800c5a0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800c5a4:	482e      	ldr	r0, [pc, #184]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c5a6:	f7f7 facf 	bl	8003b48 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800c5aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5ac:	f033 0308 	bics.w	r3, r3, #8
 800c5b0:	f43f af56 	beq.w	800c460 <HAL_SPI_Init+0xc8>
 800c5b4:	f240 114b 	movw	r1, #331	; 0x14b
 800c5b8:	4829      	ldr	r0, [pc, #164]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c5ba:	f7f7 fac5 	bl	8003b48 <assert_failed>
 800c5be:	e74f      	b.n	800c460 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800c5c0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800c5c4:	4826      	ldr	r0, [pc, #152]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c5c6:	f7f7 fabf 	bl	8003b48 <assert_failed>
 800c5ca:	e71a      	b.n	800c402 <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	461d      	mov	r5, r3
 800c5d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5d2:	e78c      	b.n	800c4ee <HAL_SPI_Init+0x156>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800c5d4:	f240 114d 	movw	r1, #333	; 0x14d
 800c5d8:	4821      	ldr	r0, [pc, #132]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c5da:	f7f7 fab5 	bl	8003b48 <assert_failed>
 800c5de:	e74c      	b.n	800c47a <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800c5e0:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800c5e2:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800c5e6:	f7f8 fbf3 	bl	8004dd0 <HAL_SPI_MspInit>
 800c5ea:	e769      	b.n	800c4c0 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800c5ec:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800c5f0:	481b      	ldr	r0, [pc, #108]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c5f2:	f7f7 faa9 	bl	8003b48 <assert_failed>
 800c5f6:	e6f6      	b.n	800c3e6 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800c5f8:	2001      	movs	r0, #1
}
 800c5fa:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800c5fc:	69e3      	ldr	r3, [r4, #28]
 800c5fe:	f023 0318 	bic.w	r3, r3, #24
 800c602:	2b20      	cmp	r3, #32
 800c604:	f43f af53 	beq.w	800c4ae <HAL_SPI_Init+0x116>
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f43f af50 	beq.w	800c4ae <HAL_SPI_Init+0x116>
 800c60e:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800c612:	4813      	ldr	r0, [pc, #76]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c614:	f7f7 fa98 	bl	8003b48 <assert_failed>
 800c618:	e749      	b.n	800c4ae <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800c61a:	f240 1151 	movw	r1, #337	; 0x151
 800c61e:	4810      	ldr	r0, [pc, #64]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c620:	f7f7 fa92 	bl	8003b48 <assert_failed>
 800c624:	e734      	b.n	800c490 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800c626:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800c62a:	480d      	ldr	r0, [pc, #52]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c62c:	f7f7 fa8c 	bl	8003b48 <assert_failed>
 800c630:	e71e      	b.n	800c470 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800c632:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c636:	480a      	ldr	r0, [pc, #40]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c638:	f7f7 fa86 	bl	8003b48 <assert_failed>
 800c63c:	e79d      	b.n	800c57a <HAL_SPI_Init+0x1e2>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800c63e:	f240 1149 	movw	r1, #329	; 0x149
 800c642:	4807      	ldr	r0, [pc, #28]	; (800c660 <HAL_SPI_Init+0x2c8>)
 800c644:	f7f7 fa80 	bl	8003b48 <assert_failed>
 800c648:	e6fd      	b.n	800c446 <HAL_SPI_Init+0xae>
 800c64a:	bf00      	nop
 800c64c:	40013000 	.word	0x40013000
 800c650:	40003800 	.word	0x40003800
 800c654:	40003c00 	.word	0x40003c00
 800c658:	40013400 	.word	0x40013400
 800c65c:	40015400 	.word	0x40015400
 800c660:	08028bb0 	.word	0x08028bb0

0800c664 <HAL_SPI_Transmit>:
{
 800c664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c668:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800c66a:	6883      	ldr	r3, [r0, #8]
{
 800c66c:	b082      	sub	sp, #8
 800c66e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800c670:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800c674:	460f      	mov	r7, r1
 800c676:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800c678:	d16b      	bne.n	800c752 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 800c67a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d070      	beq.n	800c764 <HAL_SPI_Transmit+0x100>
 800c682:	2301      	movs	r3, #1
 800c684:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800c688:	f7f9 ff78 	bl	800657c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800c68c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800c690:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800c692:	2b01      	cmp	r3, #1
 800c694:	b2d8      	uxtb	r0, r3
 800c696:	d009      	beq.n	800c6ac <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800c698:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c69a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800c69c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c69e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c6a2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800c6a6:	b002      	add	sp, #8
 800c6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800c6ac:	2f00      	cmp	r7, #0
 800c6ae:	d0f4      	beq.n	800c69a <HAL_SPI_Transmit+0x36>
 800c6b0:	fab8 f388 	clz	r3, r8
 800c6b4:	095b      	lsrs	r3, r3, #5
 800c6b6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ba:	d0ee      	beq.n	800c69a <HAL_SPI_Transmit+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6bc:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c6be:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c6c0:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c6c6:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = 0U;
 800c6ca:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6ce:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c6d0:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c6d2:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c6d6:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c6da:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800c6de:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    __HAL_SPI_DISABLE(hspi);
 800c6e2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6e4:	d072      	beq.n	800c7cc <HAL_SPI_Transmit+0x168>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	0652      	lsls	r2, r2, #25
 800c6ea:	d403      	bmi.n	800c6f4 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6f2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6f4:	68e2      	ldr	r2, [r4, #12]
 800c6f6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6fa:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6fc:	d936      	bls.n	800c76c <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6fe:	b112      	cbz	r2, 800c706 <HAL_SPI_Transmit+0xa2>
 800c700:	f1b8 0f01 	cmp.w	r8, #1
 800c704:	d107      	bne.n	800c716 <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c706:	f837 2b02 	ldrh.w	r2, [r7], #2
 800c70a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800c70c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c70e:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800c710:	3a01      	subs	r2, #1
 800c712:	b292      	uxth	r2, r2
 800c714:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800c716:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c718:	b292      	uxth	r2, r2
 800c71a:	b972      	cbnz	r2, 800c73a <HAL_SPI_Transmit+0xd6>
 800c71c:	e06a      	b.n	800c7f4 <HAL_SPI_Transmit+0x190>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c71e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c720:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c724:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800c726:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c728:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c72a:	3a01      	subs	r2, #1
 800c72c:	b292      	uxth	r2, r2
 800c72e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800c730:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c732:	b29b      	uxth	r3, r3
 800c734:	2b00      	cmp	r3, #0
 800c736:	d05d      	beq.n	800c7f4 <HAL_SPI_Transmit+0x190>
 800c738:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c73a:	689a      	ldr	r2, [r3, #8]
 800c73c:	0797      	lsls	r7, r2, #30
 800c73e:	d4ee      	bmi.n	800c71e <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c740:	f7f9 ff1c 	bl	800657c <HAL_GetTick>
 800c744:	1b80      	subs	r0, r0, r6
 800c746:	42a8      	cmp	r0, r5
 800c748:	d3f2      	bcc.n	800c730 <HAL_SPI_Transmit+0xcc>
 800c74a:	1c68      	adds	r0, r5, #1
 800c74c:	d0f0      	beq.n	800c730 <HAL_SPI_Transmit+0xcc>
          errorcode = HAL_TIMEOUT;
 800c74e:	2003      	movs	r0, #3
 800c750:	e7a3      	b.n	800c69a <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800c752:	f240 313d 	movw	r1, #829	; 0x33d
 800c756:	4837      	ldr	r0, [pc, #220]	; (800c834 <HAL_SPI_Transmit+0x1d0>)
 800c758:	f7f7 f9f6 	bl	8003b48 <assert_failed>
  __HAL_LOCK(hspi);
 800c75c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800c760:	2b01      	cmp	r3, #1
 800c762:	d18e      	bne.n	800c682 <HAL_SPI_Transmit+0x1e>
 800c764:	2002      	movs	r0, #2
}
 800c766:	b002      	add	sp, #8
 800c768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c76c:	b112      	cbz	r2, 800c774 <HAL_SPI_Transmit+0x110>
 800c76e:	f1b8 0f01 	cmp.w	r8, #1
 800c772:	d10b      	bne.n	800c78c <HAL_SPI_Transmit+0x128>
      if (hspi->TxXferCount > 1U)
 800c774:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c776:	b292      	uxth	r2, r2
 800c778:	2a01      	cmp	r2, #1
 800c77a:	d951      	bls.n	800c820 <HAL_SPI_Transmit+0x1bc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c77c:	f837 2b02 	ldrh.w	r2, [r7], #2
 800c780:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800c782:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c784:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c786:	3b02      	subs	r3, #2
 800c788:	b29b      	uxth	r3, r3
 800c78a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800c78c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c78e:	b29b      	uxth	r3, r3
 800c790:	b983      	cbnz	r3, 800c7b4 <HAL_SPI_Transmit+0x150>
 800c792:	e02f      	b.n	800c7f4 <HAL_SPI_Transmit+0x190>
        if (hspi->TxXferCount > 1U)
 800c794:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c796:	b29b      	uxth	r3, r3
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d920      	bls.n	800c7de <HAL_SPI_Transmit+0x17a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c79c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c79e:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c7a2:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800c7a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7a6:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c7a8:	3b02      	subs	r3, #2
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800c7ae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c7b0:	b292      	uxth	r2, r2
 800c7b2:	b1fa      	cbz	r2, 800c7f4 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c7b4:	6822      	ldr	r2, [r4, #0]
 800c7b6:	6893      	ldr	r3, [r2, #8]
 800c7b8:	0799      	lsls	r1, r3, #30
 800c7ba:	d4eb      	bmi.n	800c794 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7bc:	f7f9 fede 	bl	800657c <HAL_GetTick>
 800c7c0:	1b80      	subs	r0, r0, r6
 800c7c2:	42a8      	cmp	r0, r5
 800c7c4:	d3f3      	bcc.n	800c7ae <HAL_SPI_Transmit+0x14a>
 800c7c6:	1c6b      	adds	r3, r5, #1
 800c7c8:	d0f1      	beq.n	800c7ae <HAL_SPI_Transmit+0x14a>
 800c7ca:	e7c0      	b.n	800c74e <HAL_SPI_Transmit+0xea>
    __HAL_SPI_DISABLE(hspi);
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c7da:	601a      	str	r2, [r3, #0]
 800c7dc:	e783      	b.n	800c6e6 <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c7de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800c7e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800c7e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800c7e8:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c7ea:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c7ec:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c7ee:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800c7f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c7f2:	e7dc      	b.n	800c7ae <HAL_SPI_Transmit+0x14a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c7f4:	4632      	mov	r2, r6
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f7ff fd89 	bl	800c310 <SPI_EndRxTxTransaction>
 800c7fe:	b108      	cbz	r0, 800c804 <HAL_SPI_Transmit+0x1a0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c800:	2320      	movs	r3, #32
 800c802:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c804:	68a3      	ldr	r3, [r4, #8]
 800c806:	b933      	cbnz	r3, 800c816 <HAL_SPI_Transmit+0x1b2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c808:	6822      	ldr	r2, [r4, #0]
 800c80a:	9301      	str	r3, [sp, #4]
 800c80c:	68d3      	ldr	r3, [r2, #12]
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	6893      	ldr	r3, [r2, #8]
 800c812:	9301      	str	r3, [sp, #4]
 800c814:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c816:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800c818:	3800      	subs	r0, #0
 800c81a:	bf18      	it	ne
 800c81c:	2001      	movne	r0, #1
error:
 800c81e:	e73c      	b.n	800c69a <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c820:	783a      	ldrb	r2, [r7, #0]
 800c822:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800c824:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800c826:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c828:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800c82a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800c82c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800c82e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c830:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c832:	e7ab      	b.n	800c78c <HAL_SPI_Transmit+0x128>
 800c834:	08028bb0 	.word	0x08028bb0

0800c838 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c838:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c83a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c83c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c83e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 800c842:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c844:	4a10      	ldr	r2, [pc, #64]	; (800c888 <TIM_OC5_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c846:	6204      	str	r4, [r0, #32]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c848:	4d10      	ldr	r5, [pc, #64]	; (800c88c <TIM_OC5_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800c84a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c84c:	6844      	ldr	r4, [r0, #4]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c84e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR3;
 800c850:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 800c854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c858:	ea0c 0202 	and.w	r2, ip, r2
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c85c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800c860:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c864:	d00a      	beq.n	800c87c <TIM_OC5_SetConfig+0x44>
 800c866:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c86a:	42a8      	cmp	r0, r5
 800c86c:	d006      	beq.n	800c87c <TIM_OC5_SetConfig+0x44>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c86e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800c870:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800c872:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800c874:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c876:	6203      	str	r3, [r0, #32]
}
 800c878:	bcf0      	pop	{r4, r5, r6, r7}
 800c87a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c87c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c880:	694d      	ldr	r5, [r1, #20]
 800c882:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800c886:	e7f2      	b.n	800c86e <TIM_OC5_SetConfig+0x36>
 800c888:	fffeff8f 	.word	0xfffeff8f
 800c88c:	40010000 	.word	0x40010000

0800c890 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c890:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c892:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c894:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c896:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c89a:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c89c:	4a10      	ldr	r2, [pc, #64]	; (800c8e0 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c89e:	6204      	str	r4, [r0, #32]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8a0:	4d10      	ldr	r5, [pc, #64]	; (800c8e4 <TIM_OC6_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800c8a2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c8a4:	6844      	ldr	r4, [r0, #4]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8a6:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR3;
 800c8a8:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c8ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c8b0:	ea0c 0202 	and.w	r2, ip, r2
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c8b4:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8b8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8bc:	d00a      	beq.n	800c8d4 <TIM_OC6_SetConfig+0x44>
 800c8be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c8c2:	42a8      	cmp	r0, r5
 800c8c4:	d006      	beq.n	800c8d4 <TIM_OC6_SetConfig+0x44>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c8c6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800c8c8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800c8ca:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800c8cc:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ce:	6203      	str	r3, [r0, #32]
}
 800c8d0:	bcf0      	pop	{r4, r5, r6, r7}
 800c8d2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c8d4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c8d8:	694d      	ldr	r5, [r1, #20]
 800c8da:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800c8de:	e7f2      	b.n	800c8c6 <TIM_OC6_SetConfig+0x36>
 800c8e0:	feff8fff 	.word	0xfeff8fff
 800c8e4:	40010000 	.word	0x40010000

0800c8e8 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8e8:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c8ea:	4b2d      	ldr	r3, [pc, #180]	; (800c9a0 <TIM_OC1_SetConfig+0xb8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8ec:	f022 0201 	bic.w	r2, r2, #1
{
 800c8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	460e      	mov	r6, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c8f8:	492a      	ldr	r1, [pc, #168]	; (800c9a4 <TIM_OC1_SetConfig+0xbc>)
  tmpccer |= OC_Config->OCPolarity;
 800c8fa:	f8d6 c008 	ldr.w	ip, [r6, #8]
  tmpccmrx |= OC_Config->OCMode;
 800c8fe:	6830      	ldr	r0, [r6, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c900:	428c      	cmp	r4, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c902:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800c904:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800c906:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800c908:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800c90a:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c90e:	ea03 0302 	and.w	r3, r3, r2
  tmpccer |= OC_Config->OCPolarity;
 800c912:	ea45 050c 	orr.w	r5, r5, ip
  tmpccmrx |= OC_Config->OCMode;
 800c916:	ea43 0800 	orr.w	r8, r3, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c91a:	d00a      	beq.n	800c932 <TIM_OC1_SetConfig+0x4a>
 800c91c:	4b22      	ldr	r3, [pc, #136]	; (800c9a8 <TIM_OC1_SetConfig+0xc0>)
 800c91e:	429c      	cmp	r4, r3
 800c920:	d007      	beq.n	800c932 <TIM_OC1_SetConfig+0x4a>
  TIMx->CCR1 = OC_Config->Pulse;
 800c922:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800c924:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c926:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800c92a:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800c92c:	6225      	str	r5, [r4, #32]
}
 800c92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c932:	68f2      	ldr	r2, [r6, #12]
 800c934:	f032 0308 	bics.w	r3, r2, #8
 800c938:	d120      	bne.n	800c97c <TIM_OC1_SetConfig+0x94>
    tmpccer &= ~TIM_CCER_CC1NP;
 800c93a:	f025 0508 	bic.w	r5, r5, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c93e:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800c940:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c942:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800c946:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c94a:	d11e      	bne.n	800c98a <TIM_OC1_SetConfig+0xa2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c94c:	6973      	ldr	r3, [r6, #20]
 800c94e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c952:	d106      	bne.n	800c962 <TIM_OC1_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c954:	f427 7240 	bic.w	r2, r7, #768	; 0x300
 800c958:	69b1      	ldr	r1, [r6, #24]
 800c95a:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800c95c:	ea42 0703 	orr.w	r7, r2, r3
 800c960:	e7df      	b.n	800c922 <TIM_OC1_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c962:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800c966:	4811      	ldr	r0, [pc, #68]	; (800c9ac <TIM_OC1_SetConfig+0xc4>)
 800c968:	f7f7 f8ee 	bl	8003b48 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c96c:	f427 7240 	bic.w	r2, r7, #768	; 0x300
 800c970:	69b1      	ldr	r1, [r6, #24]
 800c972:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800c974:	430a      	orrs	r2, r1
 800c976:	ea42 0703 	orr.w	r7, r2, r3
 800c97a:	e7d2      	b.n	800c922 <TIM_OC1_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c97c:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800c980:	480a      	ldr	r0, [pc, #40]	; (800c9ac <TIM_OC1_SetConfig+0xc4>)
 800c982:	f7f7 f8e1 	bl	8003b48 <assert_failed>
 800c986:	68f2      	ldr	r2, [r6, #12]
 800c988:	e7d7      	b.n	800c93a <TIM_OC1_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c98a:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800c98e:	4807      	ldr	r0, [pc, #28]	; (800c9ac <TIM_OC1_SetConfig+0xc4>)
 800c990:	f7f7 f8da 	bl	8003b48 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c994:	6973      	ldr	r3, [r6, #20]
 800c996:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c99a:	d0db      	beq.n	800c954 <TIM_OC1_SetConfig+0x6c>
 800c99c:	e7e1      	b.n	800c962 <TIM_OC1_SetConfig+0x7a>
 800c99e:	bf00      	nop
 800c9a0:	fffeff8c 	.word	0xfffeff8c
 800c9a4:	40010000 	.word	0x40010000
 800c9a8:	40010400 	.word	0x40010400
 800c9ac:	08028be8 	.word	0x08028be8

0800c9b0 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9b0:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9b2:	4b2e      	ldr	r3, [pc, #184]	; (800ca6c <TIM_OC3_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
{
 800c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9bc:	4604      	mov	r4, r0
 800c9be:	460e      	mov	r6, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9c0:	492b      	ldr	r1, [pc, #172]	; (800ca70 <TIM_OC3_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9c2:	f8d6 c008 	ldr.w	ip, [r6, #8]
  tmpccmrx |= OC_Config->OCMode;
 800c9c6:	6830      	ldr	r0, [r6, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9c8:	428c      	cmp	r4, r1
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9ca:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800c9cc:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800c9ce:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800c9d0:	69e2      	ldr	r2, [r4, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800c9d2:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9d6:	ea03 0302 	and.w	r3, r3, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9da:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800c9de:	ea43 0800 	orr.w	r8, r3, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9e2:	d00a      	beq.n	800c9fa <TIM_OC3_SetConfig+0x4a>
 800c9e4:	4b23      	ldr	r3, [pc, #140]	; (800ca74 <TIM_OC3_SetConfig+0xc4>)
 800c9e6:	429c      	cmp	r4, r3
 800c9e8:	d007      	beq.n	800c9fa <TIM_OC3_SetConfig+0x4a>
  TIMx->CCR3 = OC_Config->Pulse;
 800c9ea:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800c9ec:	6067      	str	r7, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800c9ee:	f8c4 801c 	str.w	r8, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800c9f2:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800c9f4:	6225      	str	r5, [r4, #32]
}
 800c9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c9fa:	68f2      	ldr	r2, [r6, #12]
 800c9fc:	f032 0308 	bics.w	r3, r2, #8
 800ca00:	d123      	bne.n	800ca4a <TIM_OC3_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca02:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ca06:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca08:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ca0c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca10:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ca14:	d120      	bne.n	800ca58 <TIM_OC3_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ca16:	6973      	ldr	r3, [r6, #20]
 800ca18:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ca1c:	d107      	bne.n	800ca2e <TIM_OC3_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca1e:	f427 5240 	bic.w	r2, r7, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca22:	69b1      	ldr	r1, [r6, #24]
 800ca24:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ca28:	ea42 1703 	orr.w	r7, r2, r3, lsl #4
 800ca2c:	e7dd      	b.n	800c9ea <TIM_OC3_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ca2e:	f641 4103 	movw	r1, #7171	; 0x1c03
 800ca32:	4811      	ldr	r0, [pc, #68]	; (800ca78 <TIM_OC3_SetConfig+0xc8>)
 800ca34:	f7f7 f888 	bl	8003b48 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca38:	f427 5240 	bic.w	r2, r7, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca3c:	69b1      	ldr	r1, [r6, #24]
 800ca3e:	6973      	ldr	r3, [r6, #20]
 800ca40:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ca44:	ea42 1703 	orr.w	r7, r2, r3, lsl #4
 800ca48:	e7cf      	b.n	800c9ea <TIM_OC3_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ca4a:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 800ca4e:	480a      	ldr	r0, [pc, #40]	; (800ca78 <TIM_OC3_SetConfig+0xc8>)
 800ca50:	f7f7 f87a 	bl	8003b48 <assert_failed>
 800ca54:	68f2      	ldr	r2, [r6, #12]
 800ca56:	e7d4      	b.n	800ca02 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ca58:	f641 4102 	movw	r1, #7170	; 0x1c02
 800ca5c:	4806      	ldr	r0, [pc, #24]	; (800ca78 <TIM_OC3_SetConfig+0xc8>)
 800ca5e:	f7f7 f873 	bl	8003b48 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ca62:	6973      	ldr	r3, [r6, #20]
 800ca64:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ca68:	d0d9      	beq.n	800ca1e <TIM_OC3_SetConfig+0x6e>
 800ca6a:	e7e0      	b.n	800ca2e <TIM_OC3_SetConfig+0x7e>
 800ca6c:	fffeff8c 	.word	0xfffeff8c
 800ca70:	40010000 	.word	0x40010000
 800ca74:	40010400 	.word	0x40010400
 800ca78:	08028be8 	.word	0x08028be8

0800ca7c <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca7c:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca7e:	4a1d      	ldr	r2, [pc, #116]	; (800caf4 <TIM_OC4_SetConfig+0x78>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800ca84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca86:	4604      	mov	r4, r0
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca88:	4f1b      	ldr	r7, [pc, #108]	; (800caf8 <TIM_OC4_SetConfig+0x7c>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca8a:	6888      	ldr	r0, [r1, #8]
{
 800ca8c:	460d      	mov	r5, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca8e:	6809      	ldr	r1, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca90:	4294      	cmp	r4, r2
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca92:	6223      	str	r3, [r4, #32]
{
 800ca94:	b083      	sub	sp, #12
  tmpccer = TIMx->CCER;
 800ca96:	6a26      	ldr	r6, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800ca98:	6863      	ldr	r3, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800ca9a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800ca9e:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800caa2:	ea0c 0707 	and.w	r7, ip, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800caa6:	ea46 3600 	orr.w	r6, r6, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caaa:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caae:	d00a      	beq.n	800cac6 <TIM_OC4_SetConfig+0x4a>
 800cab0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cab4:	4294      	cmp	r4, r2
 800cab6:	d006      	beq.n	800cac6 <TIM_OC4_SetConfig+0x4a>
  TIMx->CCR4 = OC_Config->Pulse;
 800cab8:	686a      	ldr	r2, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800caba:	6063      	str	r3, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800cabc:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800cabe:	6422      	str	r2, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800cac0:	6226      	str	r6, [r4, #32]
}
 800cac2:	b003      	add	sp, #12
 800cac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cac6:	696a      	ldr	r2, [r5, #20]
 800cac8:	f432 7180 	bics.w	r1, r2, #256	; 0x100
 800cacc:	d104      	bne.n	800cad8 <TIM_OC4_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cad2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800cad6:	e7ef      	b.n	800cab8 <TIM_OC4_SetConfig+0x3c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cad8:	f641 4141 	movw	r1, #7233	; 0x1c41
 800cadc:	4807      	ldr	r0, [pc, #28]	; (800cafc <TIM_OC4_SetConfig+0x80>)
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	f7f7 f832 	bl	8003b48 <assert_failed>
 800cae4:	9b01      	ldr	r3, [sp, #4]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cae6:	696a      	ldr	r2, [r5, #20]
 800cae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800caec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800caf0:	e7e2      	b.n	800cab8 <TIM_OC4_SetConfig+0x3c>
 800caf2:	bf00      	nop
 800caf4:	40010000 	.word	0x40010000
 800caf8:	feff8cff 	.word	0xfeff8cff
 800cafc:	08028be8 	.word	0x08028be8

0800cb00 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb02:	6803      	ldr	r3, [r0, #0]
{
 800cb04:	460c      	mov	r4, r1

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800cb06:	684a      	ldr	r2, [r1, #4]
{
 800cb08:	4607      	mov	r7, r0
  tmpsmcr = htim->Instance->SMCR;
 800cb0a:	6899      	ldr	r1, [r3, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800cb0c:	4db4      	ldr	r5, [pc, #720]	; (800cde0 <TIM_SlaveTimer_SetConfig+0x2e0>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800cb0e:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb10:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800cb14:	6826      	ldr	r6, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800cb16:	ea41 0102 	orr.w	r1, r1, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800cb1a:	ea05 0501 	and.w	r5, r5, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800cb1e:	ea45 0506 	orr.w	r5, r5, r6
  htim->Instance->SMCR = tmpsmcr;
 800cb22:	609d      	str	r5, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800cb24:	f000 80f1 	beq.w	800cd0a <TIM_SlaveTimer_SetConfig+0x20a>
 800cb28:	d957      	bls.n	800cbda <TIM_SlaveTimer_SetConfig+0xda>
 800cb2a:	2a60      	cmp	r2, #96	; 0x60
 800cb2c:	f000 8168 	beq.w	800ce00 <TIM_SlaveTimer_SetConfig+0x300>
 800cb30:	2a70      	cmp	r2, #112	; 0x70
 800cb32:	d150      	bne.n	800cbd6 <TIM_SlaveTimer_SetConfig+0xd6>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800cb34:	4aab      	ldr	r2, [pc, #684]	; (800cde4 <TIM_SlaveTimer_SetConfig+0x2e4>)
 800cb36:	49ac      	ldr	r1, [pc, #688]	; (800cde8 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	bf18      	it	ne
 800cb3c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800cb40:	48aa      	ldr	r0, [pc, #680]	; (800cdec <TIM_SlaveTimer_SetConfig+0x2ec>)
 800cb42:	bf14      	ite	ne
 800cb44:	2201      	movne	r2, #1
 800cb46:	2200      	moveq	r2, #0
 800cb48:	428b      	cmp	r3, r1
 800cb4a:	bf0c      	ite	eq
 800cb4c:	2200      	moveq	r2, #0
 800cb4e:	f002 0201 	andne.w	r2, r2, #1
 800cb52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb56:	4283      	cmp	r3, r0
 800cb58:	bf0c      	ite	eq
 800cb5a:	2200      	moveq	r2, #0
 800cb5c:	f002 0201 	andne.w	r2, r2, #1
 800cb60:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800cb64:	428b      	cmp	r3, r1
 800cb66:	bf0c      	ite	eq
 800cb68:	2200      	moveq	r2, #0
 800cb6a:	f002 0201 	andne.w	r2, r2, #1
 800cb6e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800cb72:	4283      	cmp	r3, r0
 800cb74:	bf0c      	ite	eq
 800cb76:	2200      	moveq	r2, #0
 800cb78:	f002 0201 	andne.w	r2, r2, #1
 800cb7c:	428b      	cmp	r3, r1
 800cb7e:	bf0c      	ite	eq
 800cb80:	2200      	moveq	r2, #0
 800cb82:	f002 0201 	andne.w	r2, r2, #1
 800cb86:	b11a      	cbz	r2, 800cb90 <TIM_SlaveTimer_SetConfig+0x90>
 800cb88:	4a99      	ldr	r2, [pc, #612]	; (800cdf0 <TIM_SlaveTimer_SetConfig+0x2f0>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	f040 81b8 	bne.w	800cf00 <TIM_SlaveTimer_SetConfig+0x400>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800cb90:	68e3      	ldr	r3, [r4, #12]
 800cb92:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800cb96:	f040 819b 	bne.w	800ced0 <TIM_SlaveTimer_SetConfig+0x3d0>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cb9a:	68a3      	ldr	r3, [r4, #8]
 800cb9c:	2b0a      	cmp	r3, #10
 800cb9e:	bf18      	it	ne
 800cba0:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cba4:	d003      	beq.n	800cbae <TIM_SlaveTimer_SetConfig+0xae>
 800cba6:	f033 0302 	bics.w	r3, r3, #2
 800cbaa:	f040 81a3 	bne.w	800cef4 <TIM_SlaveTimer_SetConfig+0x3f4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cbae:	6921      	ldr	r1, [r4, #16]
 800cbb0:	290f      	cmp	r1, #15
 800cbb2:	f200 8172 	bhi.w	800ce9a <TIM_SlaveTimer_SetConfig+0x39a>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbb6:	683d      	ldr	r5, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cbb8:	2000      	movs	r0, #0
 800cbba:	68e3      	ldr	r3, [r4, #12]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbbc:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbbe:	68a4      	ldr	r4, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbc0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800cbc4:	4323      	orrs	r3, r4
 800cbc6:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbcc:	60ab      	str	r3, [r5, #8]
}
 800cbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800cbd0:	f032 0210 	bics.w	r2, r2, #16
 800cbd4:	d009      	beq.n	800cbea <TIM_SlaveTimer_SetConfig+0xea>
        return HAL_ERROR;
 800cbd6:	2001      	movs	r0, #1
}
 800cbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800cbda:	2a40      	cmp	r2, #64	; 0x40
 800cbdc:	d033      	beq.n	800cc46 <TIM_SlaveTimer_SetConfig+0x146>
 800cbde:	d8fa      	bhi.n	800cbd6 <TIM_SlaveTimer_SetConfig+0xd6>
 800cbe0:	2a20      	cmp	r2, #32
 800cbe2:	d002      	beq.n	800cbea <TIM_SlaveTimer_SetConfig+0xea>
 800cbe4:	d9f4      	bls.n	800cbd0 <TIM_SlaveTimer_SetConfig+0xd0>
 800cbe6:	2a30      	cmp	r2, #48	; 0x30
 800cbe8:	d1f5      	bne.n	800cbd6 <TIM_SlaveTimer_SetConfig+0xd6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cbea:	4a7e      	ldr	r2, [pc, #504]	; (800cde4 <TIM_SlaveTimer_SetConfig+0x2e4>)
 800cbec:	497e      	ldr	r1, [pc, #504]	; (800cde8 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	bf18      	it	ne
 800cbf2:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800cbf6:	4d7d      	ldr	r5, [pc, #500]	; (800cdec <TIM_SlaveTimer_SetConfig+0x2ec>)
 800cbf8:	4c7e      	ldr	r4, [pc, #504]	; (800cdf4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800cbfa:	bf14      	ite	ne
 800cbfc:	2201      	movne	r2, #1
 800cbfe:	2200      	moveq	r2, #0
 800cc00:	487d      	ldr	r0, [pc, #500]	; (800cdf8 <TIM_SlaveTimer_SetConfig+0x2f8>)
 800cc02:	428b      	cmp	r3, r1
 800cc04:	bf0c      	ite	eq
 800cc06:	2200      	moveq	r2, #0
 800cc08:	f002 0201 	andne.w	r2, r2, #1
 800cc0c:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 800cc10:	42ab      	cmp	r3, r5
 800cc12:	bf0c      	ite	eq
 800cc14:	2200      	moveq	r2, #0
 800cc16:	f002 0201 	andne.w	r2, r2, #1
 800cc1a:	42a3      	cmp	r3, r4
 800cc1c:	bf0c      	ite	eq
 800cc1e:	2200      	moveq	r2, #0
 800cc20:	f002 0201 	andne.w	r2, r2, #1
 800cc24:	4283      	cmp	r3, r0
 800cc26:	bf0c      	ite	eq
 800cc28:	2200      	moveq	r2, #0
 800cc2a:	f002 0201 	andne.w	r2, r2, #1
 800cc2e:	428b      	cmp	r3, r1
 800cc30:	bf0c      	ite	eq
 800cc32:	2200      	moveq	r2, #0
 800cc34:	f002 0201 	andne.w	r2, r2, #1
 800cc38:	b11a      	cbz	r2, 800cc42 <TIM_SlaveTimer_SetConfig+0x142>
 800cc3a:	4a6d      	ldr	r2, [pc, #436]	; (800cdf0 <TIM_SlaveTimer_SetConfig+0x2f0>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	f040 8165 	bne.w	800cf0c <TIM_SlaveTimer_SetConfig+0x40c>
  HAL_StatusTypeDef status = HAL_OK;
 800cc42:	2000      	movs	r0, #0
}
 800cc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cc46:	4a67      	ldr	r2, [pc, #412]	; (800cde4 <TIM_SlaveTimer_SetConfig+0x2e4>)
 800cc48:	4967      	ldr	r1, [pc, #412]	; (800cde8 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	bf18      	it	ne
 800cc4e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800cc52:	4866      	ldr	r0, [pc, #408]	; (800cdec <TIM_SlaveTimer_SetConfig+0x2ec>)
 800cc54:	bf14      	ite	ne
 800cc56:	2201      	movne	r2, #1
 800cc58:	2200      	moveq	r2, #0
 800cc5a:	428b      	cmp	r3, r1
 800cc5c:	bf0c      	ite	eq
 800cc5e:	2200      	moveq	r2, #0
 800cc60:	f002 0201 	andne.w	r2, r2, #1
 800cc64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc68:	4283      	cmp	r3, r0
 800cc6a:	bf0c      	ite	eq
 800cc6c:	2200      	moveq	r2, #0
 800cc6e:	f002 0201 	andne.w	r2, r2, #1
 800cc72:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800cc76:	428b      	cmp	r3, r1
 800cc78:	bf0c      	ite	eq
 800cc7a:	2200      	moveq	r2, #0
 800cc7c:	f002 0201 	andne.w	r2, r2, #1
 800cc80:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800cc84:	4283      	cmp	r3, r0
 800cc86:	bf0c      	ite	eq
 800cc88:	2200      	moveq	r2, #0
 800cc8a:	f002 0201 	andne.w	r2, r2, #1
 800cc8e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800cc92:	428b      	cmp	r3, r1
 800cc94:	bf0c      	ite	eq
 800cc96:	2200      	moveq	r2, #0
 800cc98:	f002 0201 	andne.w	r2, r2, #1
 800cc9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cca0:	4283      	cmp	r3, r0
 800cca2:	bf0c      	ite	eq
 800cca4:	2200      	moveq	r2, #0
 800cca6:	f002 0201 	andne.w	r2, r2, #1
 800ccaa:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800ccae:	428b      	cmp	r3, r1
 800ccb0:	bf0c      	ite	eq
 800ccb2:	2200      	moveq	r2, #0
 800ccb4:	f002 0201 	andne.w	r2, r2, #1
 800ccb8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ccbc:	4283      	cmp	r3, r0
 800ccbe:	bf0c      	ite	eq
 800ccc0:	2200      	moveq	r2, #0
 800ccc2:	f002 0201 	andne.w	r2, r2, #1
 800ccc6:	428b      	cmp	r3, r1
 800ccc8:	bf0c      	ite	eq
 800ccca:	2200      	moveq	r2, #0
 800cccc:	f002 0201 	andne.w	r2, r2, #1
 800ccd0:	b11a      	cbz	r2, 800ccda <TIM_SlaveTimer_SetConfig+0x1da>
 800ccd2:	4a4a      	ldr	r2, [pc, #296]	; (800cdfc <TIM_SlaveTimer_SetConfig+0x2fc>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	f040 8126 	bne.w	800cf26 <TIM_SlaveTimer_SetConfig+0x426>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ccda:	6923      	ldr	r3, [r4, #16]
 800ccdc:	2b0f      	cmp	r3, #15
 800ccde:	f200 80ea 	bhi.w	800ceb6 <TIM_SlaveTimer_SetConfig+0x3b6>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	2b05      	cmp	r3, #5
 800cce6:	f43f af76 	beq.w	800cbd6 <TIM_SlaveTimer_SetConfig+0xd6>
      tmpccer = htim->Instance->CCER;
 800ccea:	683b      	ldr	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccec:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ccee:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800ccf0:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ccf2:	6a19      	ldr	r1, [r3, #32]
 800ccf4:	f021 0101 	bic.w	r1, r1, #1
 800ccf8:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ccfa:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccfc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cd00:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800cd04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800cd06:	621c      	str	r4, [r3, #32]
}
 800cd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cd0a:	4a36      	ldr	r2, [pc, #216]	; (800cde4 <TIM_SlaveTimer_SetConfig+0x2e4>)
 800cd0c:	4936      	ldr	r1, [pc, #216]	; (800cde8 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	bf18      	it	ne
 800cd12:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800cd16:	4835      	ldr	r0, [pc, #212]	; (800cdec <TIM_SlaveTimer_SetConfig+0x2ec>)
 800cd18:	bf14      	ite	ne
 800cd1a:	2201      	movne	r2, #1
 800cd1c:	2200      	moveq	r2, #0
 800cd1e:	428b      	cmp	r3, r1
 800cd20:	bf0c      	ite	eq
 800cd22:	2200      	moveq	r2, #0
 800cd24:	f002 0201 	andne.w	r2, r2, #1
 800cd28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd2c:	4283      	cmp	r3, r0
 800cd2e:	bf0c      	ite	eq
 800cd30:	2200      	moveq	r2, #0
 800cd32:	f002 0201 	andne.w	r2, r2, #1
 800cd36:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800cd3a:	428b      	cmp	r3, r1
 800cd3c:	bf0c      	ite	eq
 800cd3e:	2200      	moveq	r2, #0
 800cd40:	f002 0201 	andne.w	r2, r2, #1
 800cd44:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800cd48:	4283      	cmp	r3, r0
 800cd4a:	bf0c      	ite	eq
 800cd4c:	2200      	moveq	r2, #0
 800cd4e:	f002 0201 	andne.w	r2, r2, #1
 800cd52:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800cd56:	428b      	cmp	r3, r1
 800cd58:	bf0c      	ite	eq
 800cd5a:	2200      	moveq	r2, #0
 800cd5c:	f002 0201 	andne.w	r2, r2, #1
 800cd60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd64:	4283      	cmp	r3, r0
 800cd66:	bf0c      	ite	eq
 800cd68:	2200      	moveq	r2, #0
 800cd6a:	f002 0201 	andne.w	r2, r2, #1
 800cd6e:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800cd72:	428b      	cmp	r3, r1
 800cd74:	bf0c      	ite	eq
 800cd76:	2200      	moveq	r2, #0
 800cd78:	f002 0201 	andne.w	r2, r2, #1
 800cd7c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800cd80:	4283      	cmp	r3, r0
 800cd82:	bf0c      	ite	eq
 800cd84:	2200      	moveq	r2, #0
 800cd86:	f002 0201 	andne.w	r2, r2, #1
 800cd8a:	428b      	cmp	r3, r1
 800cd8c:	bf0c      	ite	eq
 800cd8e:	2200      	moveq	r2, #0
 800cd90:	f002 0201 	andne.w	r2, r2, #1
 800cd94:	b11a      	cbz	r2, 800cd9e <TIM_SlaveTimer_SetConfig+0x29e>
 800cd96:	4a19      	ldr	r2, [pc, #100]	; (800cdfc <TIM_SlaveTimer_SetConfig+0x2fc>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	f040 80ca 	bne.w	800cf32 <TIM_SlaveTimer_SetConfig+0x432>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cd9e:	68a3      	ldr	r3, [r4, #8]
 800cda0:	2b0a      	cmp	r3, #10
 800cda2:	bf18      	it	ne
 800cda4:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cda8:	d003      	beq.n	800cdb2 <TIM_SlaveTimer_SetConfig+0x2b2>
 800cdaa:	f033 0302 	bics.w	r3, r3, #2
 800cdae:	f040 809b 	bne.w	800cee8 <TIM_SlaveTimer_SetConfig+0x3e8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cdb2:	6926      	ldr	r6, [r4, #16]
 800cdb4:	2e0f      	cmp	r6, #15
 800cdb6:	f200 8084 	bhi.w	800cec2 <TIM_SlaveTimer_SetConfig+0x3c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdba:	683b      	ldr	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cdbc:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdbe:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800cdc0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdc2:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdc4:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdc8:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800cdcc:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdce:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdd0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cdd6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800cdda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cddc:	6219      	str	r1, [r3, #32]
}
 800cdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cde0:	fffefff8 	.word	0xfffefff8
 800cde4:	40010000 	.word	0x40010000
 800cde8:	40000400 	.word	0x40000400
 800cdec:	40000800 	.word	0x40000800
 800cdf0:	40001800 	.word	0x40001800
 800cdf4:	40000c00 	.word	0x40000c00
 800cdf8:	40010400 	.word	0x40010400
 800cdfc:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ce00:	4a4f      	ldr	r2, [pc, #316]	; (800cf40 <TIM_SlaveTimer_SetConfig+0x440>)
 800ce02:	4950      	ldr	r1, [pc, #320]	; (800cf44 <TIM_SlaveTimer_SetConfig+0x444>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	bf18      	it	ne
 800ce08:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ce0c:	484e      	ldr	r0, [pc, #312]	; (800cf48 <TIM_SlaveTimer_SetConfig+0x448>)
 800ce0e:	bf14      	ite	ne
 800ce10:	2201      	movne	r2, #1
 800ce12:	2200      	moveq	r2, #0
 800ce14:	428b      	cmp	r3, r1
 800ce16:	bf0c      	ite	eq
 800ce18:	2200      	moveq	r2, #0
 800ce1a:	f002 0201 	andne.w	r2, r2, #1
 800ce1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce22:	4283      	cmp	r3, r0
 800ce24:	bf0c      	ite	eq
 800ce26:	2200      	moveq	r2, #0
 800ce28:	f002 0201 	andne.w	r2, r2, #1
 800ce2c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800ce30:	428b      	cmp	r3, r1
 800ce32:	bf0c      	ite	eq
 800ce34:	2200      	moveq	r2, #0
 800ce36:	f002 0201 	andne.w	r2, r2, #1
 800ce3a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800ce3e:	4283      	cmp	r3, r0
 800ce40:	bf0c      	ite	eq
 800ce42:	2200      	moveq	r2, #0
 800ce44:	f002 0201 	andne.w	r2, r2, #1
 800ce48:	428b      	cmp	r3, r1
 800ce4a:	bf0c      	ite	eq
 800ce4c:	2200      	moveq	r2, #0
 800ce4e:	f002 0201 	andne.w	r2, r2, #1
 800ce52:	b112      	cbz	r2, 800ce5a <TIM_SlaveTimer_SetConfig+0x35a>
 800ce54:	4a3d      	ldr	r2, [pc, #244]	; (800cf4c <TIM_SlaveTimer_SetConfig+0x44c>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d15f      	bne.n	800cf1a <TIM_SlaveTimer_SetConfig+0x41a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ce5a:	68a3      	ldr	r3, [r4, #8]
 800ce5c:	2b0a      	cmp	r3, #10
 800ce5e:	bf18      	it	ne
 800ce60:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800ce64:	d002      	beq.n	800ce6c <TIM_SlaveTimer_SetConfig+0x36c>
 800ce66:	f033 0302 	bics.w	r3, r3, #2
 800ce6a:	d137      	bne.n	800cedc <TIM_SlaveTimer_SetConfig+0x3dc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ce6c:	6925      	ldr	r5, [r4, #16]
 800ce6e:	2d0f      	cmp	r5, #15
 800ce70:	d81a      	bhi.n	800cea8 <TIM_SlaveTimer_SetConfig+0x3a8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce72:	683b      	ldr	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce74:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce76:	68a6      	ldr	r6, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce78:	6a1c      	ldr	r4, [r3, #32]
 800ce7a:	f024 0410 	bic.w	r4, r4, #16
 800ce7e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce80:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800ce82:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce84:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce8c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce90:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ce94:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce96:	621a      	str	r2, [r3, #32]
}
 800ce98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ce9a:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 800ce9e:	482c      	ldr	r0, [pc, #176]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cea0:	f7f6 fe52 	bl	8003b48 <assert_failed>
 800cea4:	6921      	ldr	r1, [r4, #16]
 800cea6:	e686      	b.n	800cbb6 <TIM_SlaveTimer_SetConfig+0xb6>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cea8:	f641 511f 	movw	r1, #7455	; 0x1d1f
 800ceac:	4828      	ldr	r0, [pc, #160]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800ceae:	f7f6 fe4b 	bl	8003b48 <assert_failed>
 800ceb2:	6925      	ldr	r5, [r4, #16]
 800ceb4:	e7dd      	b.n	800ce72 <TIM_SlaveTimer_SetConfig+0x372>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ceb6:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 800ceba:	4825      	ldr	r0, [pc, #148]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cebc:	f7f6 fe44 	bl	8003b48 <assert_failed>
 800cec0:	e70f      	b.n	800cce2 <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cec2:	f641 5111 	movw	r1, #7441	; 0x1d11
 800cec6:	4822      	ldr	r0, [pc, #136]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cec8:	f7f6 fe3e 	bl	8003b48 <assert_failed>
 800cecc:	6926      	ldr	r6, [r4, #16]
 800cece:	e774      	b.n	800cdba <TIM_SlaveTimer_SetConfig+0x2ba>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800ced0:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 800ced4:	481e      	ldr	r0, [pc, #120]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800ced6:	f7f6 fe37 	bl	8003b48 <assert_failed>
 800ceda:	e65e      	b.n	800cb9a <TIM_SlaveTimer_SetConfig+0x9a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cedc:	f641 511e 	movw	r1, #7454	; 0x1d1e
 800cee0:	481b      	ldr	r0, [pc, #108]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cee2:	f7f6 fe31 	bl	8003b48 <assert_failed>
 800cee6:	e7c1      	b.n	800ce6c <TIM_SlaveTimer_SetConfig+0x36c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cee8:	f641 5110 	movw	r1, #7440	; 0x1d10
 800ceec:	4818      	ldr	r0, [pc, #96]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800ceee:	f7f6 fe2b 	bl	8003b48 <assert_failed>
 800cef2:	e75e      	b.n	800cdb2 <TIM_SlaveTimer_SetConfig+0x2b2>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cef4:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800cef8:	4815      	ldr	r0, [pc, #84]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cefa:	f7f6 fe25 	bl	8003b48 <assert_failed>
 800cefe:	e656      	b.n	800cbae <TIM_SlaveTimer_SetConfig+0xae>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800cf00:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 800cf04:	4812      	ldr	r0, [pc, #72]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cf06:	f7f6 fe1f 	bl	8003b48 <assert_failed>
 800cf0a:	e641      	b.n	800cb90 <TIM_SlaveTimer_SetConfig+0x90>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cf0c:	f641 512e 	movw	r1, #7470	; 0x1d2e
 800cf10:	480f      	ldr	r0, [pc, #60]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cf12:	f7f6 fe19 	bl	8003b48 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800cf16:	2000      	movs	r0, #0
}
 800cf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cf1a:	f641 511d 	movw	r1, #7453	; 0x1d1d
 800cf1e:	480c      	ldr	r0, [pc, #48]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cf20:	f7f6 fe12 	bl	8003b48 <assert_failed>
 800cf24:	e799      	b.n	800ce5a <TIM_SlaveTimer_SetConfig+0x35a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cf26:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 800cf2a:	4809      	ldr	r0, [pc, #36]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cf2c:	f7f6 fe0c 	bl	8003b48 <assert_failed>
 800cf30:	e6d3      	b.n	800ccda <TIM_SlaveTimer_SetConfig+0x1da>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cf32:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800cf36:	4806      	ldr	r0, [pc, #24]	; (800cf50 <TIM_SlaveTimer_SetConfig+0x450>)
 800cf38:	f7f6 fe06 	bl	8003b48 <assert_failed>
 800cf3c:	e72f      	b.n	800cd9e <TIM_SlaveTimer_SetConfig+0x29e>
 800cf3e:	bf00      	nop
 800cf40:	40010000 	.word	0x40010000
 800cf44:	40000400 	.word	0x40000400
 800cf48:	40000800 	.word	0x40000800
 800cf4c:	40001800 	.word	0x40001800
 800cf50:	08028be8 	.word	0x08028be8

0800cf54 <HAL_TIM_Base_Start>:
{
 800cf54:	b570      	push	{r4, r5, r6, lr}
 800cf56:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cf58:	4b52      	ldr	r3, [pc, #328]	; (800d0a4 <HAL_TIM_Base_Start+0x150>)
 800cf5a:	4d53      	ldr	r5, [pc, #332]	; (800d0a8 <HAL_TIM_Base_Start+0x154>)
 800cf5c:	6822      	ldr	r2, [r4, #0]
 800cf5e:	4853      	ldr	r0, [pc, #332]	; (800d0ac <HAL_TIM_Base_Start+0x158>)
 800cf60:	429a      	cmp	r2, r3
 800cf62:	bf18      	it	ne
 800cf64:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cf68:	4951      	ldr	r1, [pc, #324]	; (800d0b0 <HAL_TIM_Base_Start+0x15c>)
 800cf6a:	4e52      	ldr	r6, [pc, #328]	; (800d0b4 <HAL_TIM_Base_Start+0x160>)
 800cf6c:	bf14      	ite	ne
 800cf6e:	2301      	movne	r3, #1
 800cf70:	2300      	moveq	r3, #0
 800cf72:	42aa      	cmp	r2, r5
 800cf74:	bf0c      	ite	eq
 800cf76:	2300      	moveq	r3, #0
 800cf78:	f003 0301 	andne.w	r3, r3, #1
 800cf7c:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800cf80:	4282      	cmp	r2, r0
 800cf82:	bf0c      	ite	eq
 800cf84:	2300      	moveq	r3, #0
 800cf86:	f003 0301 	andne.w	r3, r3, #1
 800cf8a:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800cf8e:	428a      	cmp	r2, r1
 800cf90:	bf0c      	ite	eq
 800cf92:	2300      	moveq	r3, #0
 800cf94:	f003 0301 	andne.w	r3, r3, #1
 800cf98:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800cf9c:	42b2      	cmp	r2, r6
 800cf9e:	bf0c      	ite	eq
 800cfa0:	2300      	moveq	r3, #0
 800cfa2:	f003 0301 	andne.w	r3, r3, #1
 800cfa6:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 800cfaa:	42aa      	cmp	r2, r5
 800cfac:	bf0c      	ite	eq
 800cfae:	2300      	moveq	r3, #0
 800cfb0:	f003 0301 	andne.w	r3, r3, #1
 800cfb4:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800cfb8:	4282      	cmp	r2, r0
 800cfba:	bf0c      	ite	eq
 800cfbc:	2300      	moveq	r3, #0
 800cfbe:	f003 0301 	andne.w	r3, r3, #1
 800cfc2:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800cfc6:	428a      	cmp	r2, r1
 800cfc8:	bf0c      	ite	eq
 800cfca:	2300      	moveq	r3, #0
 800cfcc:	f003 0301 	andne.w	r3, r3, #1
 800cfd0:	f5a1 3192 	sub.w	r1, r1, #74752	; 0x12400
 800cfd4:	42b2      	cmp	r2, r6
 800cfd6:	bf0c      	ite	eq
 800cfd8:	2300      	moveq	r3, #0
 800cfda:	f003 0301 	andne.w	r3, r3, #1
 800cfde:	42aa      	cmp	r2, r5
 800cfe0:	bf0c      	ite	eq
 800cfe2:	2300      	moveq	r3, #0
 800cfe4:	f003 0301 	andne.w	r3, r3, #1
 800cfe8:	4282      	cmp	r2, r0
 800cfea:	bf0c      	ite	eq
 800cfec:	2300      	moveq	r3, #0
 800cfee:	f003 0301 	andne.w	r3, r3, #1
 800cff2:	428a      	cmp	r2, r1
 800cff4:	bf0c      	ite	eq
 800cff6:	2300      	moveq	r3, #0
 800cff8:	f003 0301 	andne.w	r3, r3, #1
 800cffc:	b113      	cbz	r3, 800d004 <HAL_TIM_Base_Start+0xb0>
 800cffe:	4b2e      	ldr	r3, [pc, #184]	; (800d0b8 <HAL_TIM_Base_Start+0x164>)
 800d000:	429a      	cmp	r2, r3
 800d002:	d144      	bne.n	800d08e <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 800d004:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d13c      	bne.n	800d086 <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d00c:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d00e:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d010:	4b24      	ldr	r3, [pc, #144]	; (800d0a4 <HAL_TIM_Base_Start+0x150>)
 800d012:	4825      	ldr	r0, [pc, #148]	; (800d0a8 <HAL_TIM_Base_Start+0x154>)
 800d014:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d018:	bf18      	it	ne
 800d01a:	429a      	cmpne	r2, r3
 800d01c:	4923      	ldr	r1, [pc, #140]	; (800d0ac <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d01e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d022:	bf0c      	ite	eq
 800d024:	2301      	moveq	r3, #1
 800d026:	2300      	movne	r3, #0
 800d028:	4c21      	ldr	r4, [pc, #132]	; (800d0b0 <HAL_TIM_Base_Start+0x15c>)
 800d02a:	4282      	cmp	r2, r0
 800d02c:	bf08      	it	eq
 800d02e:	f043 0301 	orreq.w	r3, r3, #1
 800d032:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800d036:	428a      	cmp	r2, r1
 800d038:	bf08      	it	eq
 800d03a:	f043 0301 	orreq.w	r3, r3, #1
 800d03e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800d042:	42a2      	cmp	r2, r4
 800d044:	bf08      	it	eq
 800d046:	f043 0301 	orreq.w	r3, r3, #1
 800d04a:	4282      	cmp	r2, r0
 800d04c:	bf08      	it	eq
 800d04e:	f043 0301 	orreq.w	r3, r3, #1
 800d052:	428a      	cmp	r2, r1
 800d054:	bf08      	it	eq
 800d056:	f043 0301 	orreq.w	r3, r3, #1
 800d05a:	b933      	cbnz	r3, 800d06a <HAL_TIM_Base_Start+0x116>
 800d05c:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800d060:	1a10      	subs	r0, r2, r0
 800d062:	fab0 f080 	clz	r0, r0
 800d066:	0940      	lsrs	r0, r0, #5
 800d068:	b1b8      	cbz	r0, 800d09a <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d06a:	6891      	ldr	r1, [r2, #8]
 800d06c:	4b13      	ldr	r3, [pc, #76]	; (800d0bc <HAL_TIM_Base_Start+0x168>)
 800d06e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d070:	2b06      	cmp	r3, #6
 800d072:	d00a      	beq.n	800d08a <HAL_TIM_Base_Start+0x136>
 800d074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d078:	d007      	beq.n	800d08a <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 800d07a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d07c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800d07e:	f043 0301 	orr.w	r3, r3, #1
 800d082:	6013      	str	r3, [r2, #0]
}
 800d084:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800d086:	2001      	movs	r0, #1
}
 800d088:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800d08a:	2000      	movs	r0, #0
}
 800d08c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d08e:	f240 1197 	movw	r1, #407	; 0x197
 800d092:	480b      	ldr	r0, [pc, #44]	; (800d0c0 <HAL_TIM_Base_Start+0x16c>)
 800d094:	f7f6 fd58 	bl	8003b48 <assert_failed>
 800d098:	e7b4      	b.n	800d004 <HAL_TIM_Base_Start+0xb0>
    __HAL_TIM_ENABLE(htim);
 800d09a:	6813      	ldr	r3, [r2, #0]
 800d09c:	f043 0301 	orr.w	r3, r3, #1
 800d0a0:	6013      	str	r3, [r2, #0]
}
 800d0a2:	bd70      	pop	{r4, r5, r6, pc}
 800d0a4:	40010000 	.word	0x40010000
 800d0a8:	40000400 	.word	0x40000400
 800d0ac:	40000800 	.word	0x40000800
 800d0b0:	40000c00 	.word	0x40000c00
 800d0b4:	40001000 	.word	0x40001000
 800d0b8:	40002000 	.word	0x40002000
 800d0bc:	00010007 	.word	0x00010007
 800d0c0:	08028be8 	.word	0x08028be8

0800d0c4 <HAL_TIM_Base_Start_IT>:
{
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d0c8:	4b54      	ldr	r3, [pc, #336]	; (800d21c <HAL_TIM_Base_Start_IT+0x158>)
 800d0ca:	4d55      	ldr	r5, [pc, #340]	; (800d220 <HAL_TIM_Base_Start_IT+0x15c>)
 800d0cc:	6822      	ldr	r2, [r4, #0]
 800d0ce:	4855      	ldr	r0, [pc, #340]	; (800d224 <HAL_TIM_Base_Start_IT+0x160>)
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	bf18      	it	ne
 800d0d4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d0d8:	4953      	ldr	r1, [pc, #332]	; (800d228 <HAL_TIM_Base_Start_IT+0x164>)
 800d0da:	4e54      	ldr	r6, [pc, #336]	; (800d22c <HAL_TIM_Base_Start_IT+0x168>)
 800d0dc:	bf14      	ite	ne
 800d0de:	2301      	movne	r3, #1
 800d0e0:	2300      	moveq	r3, #0
 800d0e2:	42aa      	cmp	r2, r5
 800d0e4:	bf0c      	ite	eq
 800d0e6:	2300      	moveq	r3, #0
 800d0e8:	f003 0301 	andne.w	r3, r3, #1
 800d0ec:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800d0f0:	4282      	cmp	r2, r0
 800d0f2:	bf0c      	ite	eq
 800d0f4:	2300      	moveq	r3, #0
 800d0f6:	f003 0301 	andne.w	r3, r3, #1
 800d0fa:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800d0fe:	428a      	cmp	r2, r1
 800d100:	bf0c      	ite	eq
 800d102:	2300      	moveq	r3, #0
 800d104:	f003 0301 	andne.w	r3, r3, #1
 800d108:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800d10c:	42b2      	cmp	r2, r6
 800d10e:	bf0c      	ite	eq
 800d110:	2300      	moveq	r3, #0
 800d112:	f003 0301 	andne.w	r3, r3, #1
 800d116:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 800d11a:	42aa      	cmp	r2, r5
 800d11c:	bf0c      	ite	eq
 800d11e:	2300      	moveq	r3, #0
 800d120:	f003 0301 	andne.w	r3, r3, #1
 800d124:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800d128:	4282      	cmp	r2, r0
 800d12a:	bf0c      	ite	eq
 800d12c:	2300      	moveq	r3, #0
 800d12e:	f003 0301 	andne.w	r3, r3, #1
 800d132:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800d136:	428a      	cmp	r2, r1
 800d138:	bf0c      	ite	eq
 800d13a:	2300      	moveq	r3, #0
 800d13c:	f003 0301 	andne.w	r3, r3, #1
 800d140:	f5a1 3192 	sub.w	r1, r1, #74752	; 0x12400
 800d144:	42b2      	cmp	r2, r6
 800d146:	bf0c      	ite	eq
 800d148:	2300      	moveq	r3, #0
 800d14a:	f003 0301 	andne.w	r3, r3, #1
 800d14e:	42aa      	cmp	r2, r5
 800d150:	bf0c      	ite	eq
 800d152:	2300      	moveq	r3, #0
 800d154:	f003 0301 	andne.w	r3, r3, #1
 800d158:	4282      	cmp	r2, r0
 800d15a:	bf0c      	ite	eq
 800d15c:	2300      	moveq	r3, #0
 800d15e:	f003 0301 	andne.w	r3, r3, #1
 800d162:	428a      	cmp	r2, r1
 800d164:	bf0c      	ite	eq
 800d166:	2300      	moveq	r3, #0
 800d168:	f003 0301 	andne.w	r3, r3, #1
 800d16c:	b113      	cbz	r3, 800d174 <HAL_TIM_Base_Start_IT+0xb0>
 800d16e:	4b30      	ldr	r3, [pc, #192]	; (800d230 <HAL_TIM_Base_Start_IT+0x16c>)
 800d170:	429a      	cmp	r2, r3
 800d172:	d147      	bne.n	800d204 <HAL_TIM_Base_Start_IT+0x140>
  if (htim->State != HAL_TIM_STATE_READY)
 800d174:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d13f      	bne.n	800d1fc <HAL_TIM_Base_Start_IT+0x138>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d17c:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d17e:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d180:	4b26      	ldr	r3, [pc, #152]	; (800d21c <HAL_TIM_Base_Start_IT+0x158>)
 800d182:	4827      	ldr	r0, [pc, #156]	; (800d220 <HAL_TIM_Base_Start_IT+0x15c>)
 800d184:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d188:	bf18      	it	ne
 800d18a:	429a      	cmpne	r2, r3
 800d18c:	4925      	ldr	r1, [pc, #148]	; (800d224 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d18e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d192:	bf0c      	ite	eq
 800d194:	2301      	moveq	r3, #1
 800d196:	2300      	movne	r3, #0
 800d198:	4d23      	ldr	r5, [pc, #140]	; (800d228 <HAL_TIM_Base_Start_IT+0x164>)
 800d19a:	4282      	cmp	r2, r0
 800d19c:	bf08      	it	eq
 800d19e:	f043 0301 	orreq.w	r3, r3, #1
 800d1a2:	4c24      	ldr	r4, [pc, #144]	; (800d234 <HAL_TIM_Base_Start_IT+0x170>)
 800d1a4:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
 800d1a8:	428a      	cmp	r2, r1
 800d1aa:	bf08      	it	eq
 800d1ac:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d1b0:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1b2:	42aa      	cmp	r2, r5
 800d1b4:	bf08      	it	eq
 800d1b6:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d1ba:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1be:	42a2      	cmp	r2, r4
 800d1c0:	bf08      	it	eq
 800d1c2:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d1c6:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1c8:	4282      	cmp	r2, r0
 800d1ca:	bf08      	it	eq
 800d1cc:	f043 0301 	orreq.w	r3, r3, #1
 800d1d0:	b933      	cbnz	r3, 800d1e0 <HAL_TIM_Base_Start_IT+0x11c>
 800d1d2:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800d1d6:	1a10      	subs	r0, r2, r0
 800d1d8:	fab0 f080 	clz	r0, r0
 800d1dc:	0940      	lsrs	r0, r0, #5
 800d1de:	b1b8      	cbz	r0, 800d210 <HAL_TIM_Base_Start_IT+0x14c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1e0:	6891      	ldr	r1, [r2, #8]
 800d1e2:	4b15      	ldr	r3, [pc, #84]	; (800d238 <HAL_TIM_Base_Start_IT+0x174>)
 800d1e4:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1e6:	2b06      	cmp	r3, #6
 800d1e8:	d00a      	beq.n	800d200 <HAL_TIM_Base_Start_IT+0x13c>
 800d1ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ee:	d007      	beq.n	800d200 <HAL_TIM_Base_Start_IT+0x13c>
      __HAL_TIM_ENABLE(htim);
 800d1f0:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d1f2:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800d1f4:	f043 0301 	orr.w	r3, r3, #1
 800d1f8:	6013      	str	r3, [r2, #0]
}
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800d1fc:	2001      	movs	r0, #1
}
 800d1fe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800d200:	2000      	movs	r0, #0
}
 800d202:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d204:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800d208:	480c      	ldr	r0, [pc, #48]	; (800d23c <HAL_TIM_Base_Start_IT+0x178>)
 800d20a:	f7f6 fc9d 	bl	8003b48 <assert_failed>
 800d20e:	e7b1      	b.n	800d174 <HAL_TIM_Base_Start_IT+0xb0>
    __HAL_TIM_ENABLE(htim);
 800d210:	6813      	ldr	r3, [r2, #0]
 800d212:	f043 0301 	orr.w	r3, r3, #1
 800d216:	6013      	str	r3, [r2, #0]
}
 800d218:	bd70      	pop	{r4, r5, r6, pc}
 800d21a:	bf00      	nop
 800d21c:	40010000 	.word	0x40010000
 800d220:	40000400 	.word	0x40000400
 800d224:	40000800 	.word	0x40000800
 800d228:	40000c00 	.word	0x40000c00
 800d22c:	40001000 	.word	0x40001000
 800d230:	40002000 	.word	0x40002000
 800d234:	40010400 	.word	0x40010400
 800d238:	00010007 	.word	0x00010007
 800d23c:	08028be8 	.word	0x08028be8

0800d240 <HAL_TIM_OC_MspInit>:
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop

0800d244 <HAL_TIM_PWM_MspInit>:
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop

0800d248 <HAL_TIM_IC_MspInit>:
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop

0800d24c <HAL_TIM_ConfigClockSource>:
{
 800d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800d24e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d252:	2b01      	cmp	r3, #1
 800d254:	f000 8150 	beq.w	800d4f8 <HAL_TIM_ConfigClockSource+0x2ac>
 800d258:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d25a:	2302      	movs	r3, #2
 800d25c:	460d      	mov	r5, r1
 800d25e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800d260:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d264:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800d268:	680b      	ldr	r3, [r1, #0]
 800d26a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d26e:	bf18      	it	ne
 800d270:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800d274:	bf14      	ite	ne
 800d276:	2201      	movne	r2, #1
 800d278:	2200      	moveq	r2, #0
 800d27a:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800d27e:	bf08      	it	eq
 800d280:	2200      	moveq	r2, #0
 800d282:	b112      	cbz	r2, 800d28a <HAL_TIM_ConfigClockSource+0x3e>
 800d284:	2940      	cmp	r1, #64	; 0x40
 800d286:	f040 824a 	bne.w	800d71e <HAL_TIM_ConfigClockSource+0x4d2>
  tmpsmcr = htim->Instance->SMCR;
 800d28a:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800d28c:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d28e:	499b      	ldr	r1, [pc, #620]	; (800d4fc <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 800d290:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d292:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800d296:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800d298:	f000 813c 	beq.w	800d514 <HAL_TIM_ConfigClockSource+0x2c8>
 800d29c:	d854      	bhi.n	800d348 <HAL_TIM_ConfigClockSource+0xfc>
 800d29e:	2b40      	cmp	r3, #64	; 0x40
 800d2a0:	f000 81d9 	beq.w	800d656 <HAL_TIM_ConfigClockSource+0x40a>
 800d2a4:	f240 80a6 	bls.w	800d3f4 <HAL_TIM_ConfigClockSource+0x1a8>
 800d2a8:	2b50      	cmp	r3, #80	; 0x50
 800d2aa:	f040 809b 	bne.w	800d3e4 <HAL_TIM_ConfigClockSource+0x198>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d2ae:	4b94      	ldr	r3, [pc, #592]	; (800d500 <HAL_TIM_ConfigClockSource+0x2b4>)
 800d2b0:	4994      	ldr	r1, [pc, #592]	; (800d504 <HAL_TIM_ConfigClockSource+0x2b8>)
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	bf18      	it	ne
 800d2b6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d2ba:	4893      	ldr	r0, [pc, #588]	; (800d508 <HAL_TIM_ConfigClockSource+0x2bc>)
 800d2bc:	bf14      	ite	ne
 800d2be:	2301      	movne	r3, #1
 800d2c0:	2300      	moveq	r3, #0
 800d2c2:	428a      	cmp	r2, r1
 800d2c4:	bf0c      	ite	eq
 800d2c6:	2300      	moveq	r3, #0
 800d2c8:	f003 0301 	andne.w	r3, r3, #1
 800d2cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2d0:	4282      	cmp	r2, r0
 800d2d2:	bf0c      	ite	eq
 800d2d4:	2300      	moveq	r3, #0
 800d2d6:	f003 0301 	andne.w	r3, r3, #1
 800d2da:	428a      	cmp	r2, r1
 800d2dc:	bf0c      	ite	eq
 800d2de:	2300      	moveq	r3, #0
 800d2e0:	f003 0301 	andne.w	r3, r3, #1
 800d2e4:	b11b      	cbz	r3, 800d2ee <HAL_TIM_ConfigClockSource+0xa2>
 800d2e6:	4b89      	ldr	r3, [pc, #548]	; (800d50c <HAL_TIM_ConfigClockSource+0x2c0>)
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	f040 8212 	bne.w	800d712 <HAL_TIM_ConfigClockSource+0x4c6>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d2ee:	686b      	ldr	r3, [r5, #4]
 800d2f0:	2b0a      	cmp	r3, #10
 800d2f2:	bf18      	it	ne
 800d2f4:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d2f8:	d003      	beq.n	800d302 <HAL_TIM_ConfigClockSource+0xb6>
 800d2fa:	f033 0302 	bics.w	r3, r3, #2
 800d2fe:	f040 8256 	bne.w	800d7ae <HAL_TIM_ConfigClockSource+0x562>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d302:	68ef      	ldr	r7, [r5, #12]
 800d304:	2f0f      	cmp	r7, #15
 800d306:	f200 8226 	bhi.w	800d756 <HAL_TIM_ConfigClockSource+0x50a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d30a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d30c:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d30e:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800d310:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d312:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d314:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d318:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800d31c:	4331      	orrs	r1, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d31e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d320:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d322:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d326:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d32a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d32c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800d32e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d330:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d334:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800d338:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800d33a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800d33c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d33e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d342:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800d348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d34c:	f000 812a 	beq.w	800d5a4 <HAL_TIM_ConfigClockSource+0x358>
 800d350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d354:	d17c      	bne.n	800d450 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800d356:	4b6a      	ldr	r3, [pc, #424]	; (800d500 <HAL_TIM_ConfigClockSource+0x2b4>)
 800d358:	496a      	ldr	r1, [pc, #424]	; (800d504 <HAL_TIM_ConfigClockSource+0x2b8>)
 800d35a:	429a      	cmp	r2, r3
 800d35c:	bf18      	it	ne
 800d35e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d362:	4869      	ldr	r0, [pc, #420]	; (800d508 <HAL_TIM_ConfigClockSource+0x2bc>)
 800d364:	bf14      	ite	ne
 800d366:	2301      	movne	r3, #1
 800d368:	2300      	moveq	r3, #0
 800d36a:	428a      	cmp	r2, r1
 800d36c:	bf0c      	ite	eq
 800d36e:	2300      	moveq	r3, #0
 800d370:	f003 0301 	andne.w	r3, r3, #1
 800d374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d378:	4282      	cmp	r2, r0
 800d37a:	bf0c      	ite	eq
 800d37c:	2300      	moveq	r3, #0
 800d37e:	f003 0301 	andne.w	r3, r3, #1
 800d382:	428a      	cmp	r2, r1
 800d384:	bf0c      	ite	eq
 800d386:	2300      	moveq	r3, #0
 800d388:	f003 0301 	andne.w	r3, r3, #1
 800d38c:	b11b      	cbz	r3, 800d396 <HAL_TIM_ConfigClockSource+0x14a>
 800d38e:	4b5f      	ldr	r3, [pc, #380]	; (800d50c <HAL_TIM_ConfigClockSource+0x2c0>)
 800d390:	429a      	cmp	r2, r3
 800d392:	f040 81b0 	bne.w	800d6f6 <HAL_TIM_ConfigClockSource+0x4aa>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d396:	68ab      	ldr	r3, [r5, #8]
 800d398:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800d39c:	f040 81e9 	bne.w	800d772 <HAL_TIM_ConfigClockSource+0x526>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d3a0:	686b      	ldr	r3, [r5, #4]
 800d3a2:	2b0a      	cmp	r3, #10
 800d3a4:	bf18      	it	ne
 800d3a6:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d3aa:	d003      	beq.n	800d3b4 <HAL_TIM_ConfigClockSource+0x168>
 800d3ac:	f033 0302 	bics.w	r3, r3, #2
 800d3b0:	f040 8203 	bne.w	800d7ba <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d3b4:	68ee      	ldr	r6, [r5, #12]
 800d3b6:	2e0f      	cmp	r6, #15
 800d3b8:	f200 81c6 	bhi.w	800d748 <HAL_TIM_ConfigClockSource+0x4fc>
      TIM_ETR_SetConfig(htim->Instance,
 800d3bc:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d3be:	2000      	movs	r0, #0
 800d3c0:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800d3c2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3c4:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3c6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800d3ca:	432b      	orrs	r3, r5
 800d3cc:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3ce:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800d3d2:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3d4:	6893      	ldr	r3, [r2, #8]
 800d3d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d3da:	6093      	str	r3, [r2, #8]
      break;
 800d3dc:	e003      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x19a>
  switch (sClockSourceConfig->ClockSource)
 800d3de:	f033 0110 	bics.w	r1, r3, #16
 800d3e2:	d00c      	beq.n	800d3fe <HAL_TIM_ConfigClockSource+0x1b2>
 800d3e4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800d3e6:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800d3e8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d3ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d3ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800d3f4:	2b20      	cmp	r3, #32
 800d3f6:	d002      	beq.n	800d3fe <HAL_TIM_ConfigClockSource+0x1b2>
 800d3f8:	d9f1      	bls.n	800d3de <HAL_TIM_ConfigClockSource+0x192>
 800d3fa:	2b30      	cmp	r3, #48	; 0x30
 800d3fc:	d1f2      	bne.n	800d3e4 <HAL_TIM_ConfigClockSource+0x198>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800d3fe:	4940      	ldr	r1, [pc, #256]	; (800d500 <HAL_TIM_ConfigClockSource+0x2b4>)
 800d400:	4840      	ldr	r0, [pc, #256]	; (800d504 <HAL_TIM_ConfigClockSource+0x2b8>)
 800d402:	428a      	cmp	r2, r1
 800d404:	bf18      	it	ne
 800d406:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d40a:	4e3f      	ldr	r6, [pc, #252]	; (800d508 <HAL_TIM_ConfigClockSource+0x2bc>)
 800d40c:	bf14      	ite	ne
 800d40e:	2101      	movne	r1, #1
 800d410:	2100      	moveq	r1, #0
 800d412:	4282      	cmp	r2, r0
 800d414:	bf0c      	ite	eq
 800d416:	2100      	moveq	r1, #0
 800d418:	f001 0101 	andne.w	r1, r1, #1
 800d41c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800d420:	42b2      	cmp	r2, r6
 800d422:	bf0c      	ite	eq
 800d424:	2100      	moveq	r1, #0
 800d426:	f001 0101 	andne.w	r1, r1, #1
 800d42a:	4282      	cmp	r2, r0
 800d42c:	bf0c      	ite	eq
 800d42e:	2100      	moveq	r1, #0
 800d430:	f001 0101 	andne.w	r1, r1, #1
 800d434:	b119      	cbz	r1, 800d43e <HAL_TIM_ConfigClockSource+0x1f2>
 800d436:	4935      	ldr	r1, [pc, #212]	; (800d50c <HAL_TIM_ConfigClockSource+0x2c0>)
 800d438:	428a      	cmp	r2, r1
 800d43a:	f040 8162 	bne.w	800d702 <HAL_TIM_ConfigClockSource+0x4b6>
  tmpsmcr = TIMx->SMCR;
 800d43e:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d440:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800d442:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d446:	430b      	orrs	r3, r1
 800d448:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800d44c:	6093      	str	r3, [r2, #8]
}
 800d44e:	e7ca      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x19a>
  switch (sClockSourceConfig->ClockSource)
 800d450:	2b70      	cmp	r3, #112	; 0x70
 800d452:	d1c7      	bne.n	800d3e4 <HAL_TIM_ConfigClockSource+0x198>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d454:	4b2a      	ldr	r3, [pc, #168]	; (800d500 <HAL_TIM_ConfigClockSource+0x2b4>)
 800d456:	492b      	ldr	r1, [pc, #172]	; (800d504 <HAL_TIM_ConfigClockSource+0x2b8>)
 800d458:	429a      	cmp	r2, r3
 800d45a:	bf18      	it	ne
 800d45c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d460:	4829      	ldr	r0, [pc, #164]	; (800d508 <HAL_TIM_ConfigClockSource+0x2bc>)
 800d462:	bf14      	ite	ne
 800d464:	2301      	movne	r3, #1
 800d466:	2300      	moveq	r3, #0
 800d468:	428a      	cmp	r2, r1
 800d46a:	bf0c      	ite	eq
 800d46c:	2300      	moveq	r3, #0
 800d46e:	f003 0301 	andne.w	r3, r3, #1
 800d472:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d476:	4282      	cmp	r2, r0
 800d478:	bf0c      	ite	eq
 800d47a:	2300      	moveq	r3, #0
 800d47c:	f003 0301 	andne.w	r3, r3, #1
 800d480:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800d484:	428a      	cmp	r2, r1
 800d486:	bf0c      	ite	eq
 800d488:	2300      	moveq	r3, #0
 800d48a:	f003 0301 	andne.w	r3, r3, #1
 800d48e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800d492:	4282      	cmp	r2, r0
 800d494:	bf0c      	ite	eq
 800d496:	2300      	moveq	r3, #0
 800d498:	f003 0301 	andne.w	r3, r3, #1
 800d49c:	428a      	cmp	r2, r1
 800d49e:	bf0c      	ite	eq
 800d4a0:	2300      	moveq	r3, #0
 800d4a2:	f003 0301 	andne.w	r3, r3, #1
 800d4a6:	b11b      	cbz	r3, 800d4b0 <HAL_TIM_ConfigClockSource+0x264>
 800d4a8:	4b19      	ldr	r3, [pc, #100]	; (800d510 <HAL_TIM_ConfigClockSource+0x2c4>)
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	f040 818b 	bne.w	800d7c6 <HAL_TIM_ConfigClockSource+0x57a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d4b0:	68ab      	ldr	r3, [r5, #8]
 800d4b2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800d4b6:	f040 8162 	bne.w	800d77e <HAL_TIM_ConfigClockSource+0x532>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d4ba:	686b      	ldr	r3, [r5, #4]
 800d4bc:	2b0a      	cmp	r3, #10
 800d4be:	bf18      	it	ne
 800d4c0:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d4c4:	d003      	beq.n	800d4ce <HAL_TIM_ConfigClockSource+0x282>
 800d4c6:	f033 0302 	bics.w	r3, r3, #2
 800d4ca:	f040 815e 	bne.w	800d78a <HAL_TIM_ConfigClockSource+0x53e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d4ce:	68ee      	ldr	r6, [r5, #12]
 800d4d0:	2e0f      	cmp	r6, #15
 800d4d2:	f200 8147 	bhi.w	800d764 <HAL_TIM_ConfigClockSource+0x518>
      TIM_ETR_SetConfig(htim->Instance,
 800d4d6:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d4d8:	2000      	movs	r0, #0
 800d4da:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800d4dc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4de:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4e0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800d4e4:	432b      	orrs	r3, r5
 800d4e6:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4e8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800d4ec:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800d4ee:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d4f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d4f4:	6093      	str	r3, [r2, #8]
      break;
 800d4f6:	e776      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x19a>
  __HAL_LOCK(htim);
 800d4f8:	2002      	movs	r0, #2
}
 800d4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4fc:	fffe0088 	.word	0xfffe0088
 800d500:	40010000 	.word	0x40010000
 800d504:	40000400 	.word	0x40000400
 800d508:	40000800 	.word	0x40000800
 800d50c:	40010400 	.word	0x40010400
 800d510:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d514:	4bb2      	ldr	r3, [pc, #712]	; (800d7e0 <HAL_TIM_ConfigClockSource+0x594>)
 800d516:	49b3      	ldr	r1, [pc, #716]	; (800d7e4 <HAL_TIM_ConfigClockSource+0x598>)
 800d518:	429a      	cmp	r2, r3
 800d51a:	bf18      	it	ne
 800d51c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d520:	48b1      	ldr	r0, [pc, #708]	; (800d7e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800d522:	bf14      	ite	ne
 800d524:	2301      	movne	r3, #1
 800d526:	2300      	moveq	r3, #0
 800d528:	428a      	cmp	r2, r1
 800d52a:	bf0c      	ite	eq
 800d52c:	2300      	moveq	r3, #0
 800d52e:	f003 0301 	andne.w	r3, r3, #1
 800d532:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d536:	4282      	cmp	r2, r0
 800d538:	bf0c      	ite	eq
 800d53a:	2300      	moveq	r3, #0
 800d53c:	f003 0301 	andne.w	r3, r3, #1
 800d540:	428a      	cmp	r2, r1
 800d542:	bf0c      	ite	eq
 800d544:	2300      	moveq	r3, #0
 800d546:	f003 0301 	andne.w	r3, r3, #1
 800d54a:	b11b      	cbz	r3, 800d554 <HAL_TIM_ConfigClockSource+0x308>
 800d54c:	4ba7      	ldr	r3, [pc, #668]	; (800d7ec <HAL_TIM_ConfigClockSource+0x5a0>)
 800d54e:	429a      	cmp	r2, r3
 800d550:	f040 80cb 	bne.w	800d6ea <HAL_TIM_ConfigClockSource+0x49e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d554:	686b      	ldr	r3, [r5, #4]
 800d556:	2b0a      	cmp	r3, #10
 800d558:	bf18      	it	ne
 800d55a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d55e:	d003      	beq.n	800d568 <HAL_TIM_ConfigClockSource+0x31c>
 800d560:	f033 0302 	bics.w	r3, r3, #2
 800d564:	f040 811d 	bne.w	800d7a2 <HAL_TIM_ConfigClockSource+0x556>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d568:	68ee      	ldr	r6, [r5, #12]
 800d56a:	2e0f      	cmp	r6, #15
 800d56c:	f200 80e5 	bhi.w	800d73a <HAL_TIM_ConfigClockSource+0x4ee>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d570:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d572:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d574:	686f      	ldr	r7, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d576:	6a1d      	ldr	r5, [r3, #32]
 800d578:	f025 0510 	bic.w	r5, r5, #16
 800d57c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d57e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800d580:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d582:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d586:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d58a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800d58e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800d592:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800d594:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800d596:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d598:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d59c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800d5a0:	609a      	str	r2, [r3, #8]
}
 800d5a2:	e720      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x19a>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d5a4:	4b8e      	ldr	r3, [pc, #568]	; (800d7e0 <HAL_TIM_ConfigClockSource+0x594>)
 800d5a6:	488f      	ldr	r0, [pc, #572]	; (800d7e4 <HAL_TIM_ConfigClockSource+0x598>)
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	bf18      	it	ne
 800d5ac:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d5b0:	498d      	ldr	r1, [pc, #564]	; (800d7e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800d5b2:	4d8f      	ldr	r5, [pc, #572]	; (800d7f0 <HAL_TIM_ConfigClockSource+0x5a4>)
 800d5b4:	bf14      	ite	ne
 800d5b6:	2301      	movne	r3, #1
 800d5b8:	2300      	moveq	r3, #0
 800d5ba:	4282      	cmp	r2, r0
 800d5bc:	bf0c      	ite	eq
 800d5be:	2300      	moveq	r3, #0
 800d5c0:	f003 0301 	andne.w	r3, r3, #1
 800d5c4:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800d5c8:	428a      	cmp	r2, r1
 800d5ca:	bf0c      	ite	eq
 800d5cc:	2300      	moveq	r3, #0
 800d5ce:	f003 0301 	andne.w	r3, r3, #1
 800d5d2:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800d5d6:	42aa      	cmp	r2, r5
 800d5d8:	bf0c      	ite	eq
 800d5da:	2300      	moveq	r3, #0
 800d5dc:	f003 0301 	andne.w	r3, r3, #1
 800d5e0:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800d5e4:	4282      	cmp	r2, r0
 800d5e6:	bf0c      	ite	eq
 800d5e8:	2300      	moveq	r3, #0
 800d5ea:	f003 0301 	andne.w	r3, r3, #1
 800d5ee:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800d5f2:	428a      	cmp	r2, r1
 800d5f4:	bf0c      	ite	eq
 800d5f6:	2300      	moveq	r3, #0
 800d5f8:	f003 0301 	andne.w	r3, r3, #1
 800d5fc:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800d600:	42aa      	cmp	r2, r5
 800d602:	bf0c      	ite	eq
 800d604:	2300      	moveq	r3, #0
 800d606:	f003 0301 	andne.w	r3, r3, #1
 800d60a:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800d60e:	4282      	cmp	r2, r0
 800d610:	bf0c      	ite	eq
 800d612:	2300      	moveq	r3, #0
 800d614:	f003 0301 	andne.w	r3, r3, #1
 800d618:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800d61c:	428a      	cmp	r2, r1
 800d61e:	bf0c      	ite	eq
 800d620:	2300      	moveq	r3, #0
 800d622:	f003 0301 	andne.w	r3, r3, #1
 800d626:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800d62a:	42aa      	cmp	r2, r5
 800d62c:	bf0c      	ite	eq
 800d62e:	2300      	moveq	r3, #0
 800d630:	f003 0301 	andne.w	r3, r3, #1
 800d634:	4282      	cmp	r2, r0
 800d636:	bf0c      	ite	eq
 800d638:	2300      	moveq	r3, #0
 800d63a:	f003 0301 	andne.w	r3, r3, #1
 800d63e:	428a      	cmp	r2, r1
 800d640:	bf0c      	ite	eq
 800d642:	2300      	moveq	r3, #0
 800d644:	f003 0301 	andne.w	r3, r3, #1
 800d648:	b11b      	cbz	r3, 800d652 <HAL_TIM_ConfigClockSource+0x406>
 800d64a:	4b6a      	ldr	r3, [pc, #424]	; (800d7f4 <HAL_TIM_ConfigClockSource+0x5a8>)
 800d64c:	429a      	cmp	r2, r3
 800d64e:	f040 80c0 	bne.w	800d7d2 <HAL_TIM_ConfigClockSource+0x586>
  HAL_StatusTypeDef status = HAL_OK;
 800d652:	2000      	movs	r0, #0
 800d654:	e6c7      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x19a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d656:	4b62      	ldr	r3, [pc, #392]	; (800d7e0 <HAL_TIM_ConfigClockSource+0x594>)
 800d658:	4962      	ldr	r1, [pc, #392]	; (800d7e4 <HAL_TIM_ConfigClockSource+0x598>)
 800d65a:	429a      	cmp	r2, r3
 800d65c:	bf18      	it	ne
 800d65e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d662:	4861      	ldr	r0, [pc, #388]	; (800d7e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800d664:	bf14      	ite	ne
 800d666:	2301      	movne	r3, #1
 800d668:	2300      	moveq	r3, #0
 800d66a:	428a      	cmp	r2, r1
 800d66c:	bf0c      	ite	eq
 800d66e:	2300      	moveq	r3, #0
 800d670:	f003 0301 	andne.w	r3, r3, #1
 800d674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d678:	4282      	cmp	r2, r0
 800d67a:	bf0c      	ite	eq
 800d67c:	2300      	moveq	r3, #0
 800d67e:	f003 0301 	andne.w	r3, r3, #1
 800d682:	428a      	cmp	r2, r1
 800d684:	bf0c      	ite	eq
 800d686:	2300      	moveq	r3, #0
 800d688:	f003 0301 	andne.w	r3, r3, #1
 800d68c:	b113      	cbz	r3, 800d694 <HAL_TIM_ConfigClockSource+0x448>
 800d68e:	4b57      	ldr	r3, [pc, #348]	; (800d7ec <HAL_TIM_ConfigClockSource+0x5a0>)
 800d690:	429a      	cmp	r2, r3
 800d692:	d124      	bne.n	800d6de <HAL_TIM_ConfigClockSource+0x492>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d694:	686b      	ldr	r3, [r5, #4]
 800d696:	2b0a      	cmp	r3, #10
 800d698:	bf18      	it	ne
 800d69a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d69e:	d002      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x45a>
 800d6a0:	f033 0302 	bics.w	r3, r3, #2
 800d6a4:	d177      	bne.n	800d796 <HAL_TIM_ConfigClockSource+0x54a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d6a6:	68ef      	ldr	r7, [r5, #12]
 800d6a8:	2f0f      	cmp	r7, #15
 800d6aa:	d83f      	bhi.n	800d72c <HAL_TIM_ConfigClockSource+0x4e0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6ac:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6ae:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6b0:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800d6b2:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6b4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6b6:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6ba:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800d6be:	4331      	orrs	r1, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6c0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6c2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d6c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d6c8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d6cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6ce:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800d6d0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d6d6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800d6da:	609a      	str	r2, [r3, #8]
}
 800d6dc:	e683      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x19a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d6de:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800d6e2:	4845      	ldr	r0, [pc, #276]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d6e4:	f7f6 fa30 	bl	8003b48 <assert_failed>
 800d6e8:	e7d4      	b.n	800d694 <HAL_TIM_ConfigClockSource+0x448>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d6ea:	f241 5193 	movw	r1, #5523	; 0x1593
 800d6ee:	4842      	ldr	r0, [pc, #264]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d6f0:	f7f6 fa2a 	bl	8003b48 <assert_failed>
 800d6f4:	e72e      	b.n	800d554 <HAL_TIM_ConfigClockSource+0x308>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800d6f6:	f241 516f 	movw	r1, #5487	; 0x156f
 800d6fa:	483f      	ldr	r0, [pc, #252]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d6fc:	f7f6 fa24 	bl	8003b48 <assert_failed>
 800d700:	e649      	b.n	800d396 <HAL_TIM_ConfigClockSource+0x14a>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800d702:	f241 51b6 	movw	r1, #5558	; 0x15b6
 800d706:	483c      	ldr	r0, [pc, #240]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d708:	f7f6 fa1e 	bl	8003b48 <assert_failed>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	6822      	ldr	r2, [r4, #0]
 800d710:	e695      	b.n	800d43e <HAL_TIM_ConfigClockSource+0x1f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d712:	f241 5183 	movw	r1, #5507	; 0x1583
 800d716:	4838      	ldr	r0, [pc, #224]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d718:	f7f6 fa16 	bl	8003b48 <assert_failed>
 800d71c:	e5e7      	b.n	800d2ee <HAL_TIM_ConfigClockSource+0xa2>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800d71e:	f241 5144 	movw	r1, #5444	; 0x1544
 800d722:	4835      	ldr	r0, [pc, #212]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d724:	f7f6 fa10 	bl	8003b48 <assert_failed>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	e5ae      	b.n	800d28a <HAL_TIM_ConfigClockSource+0x3e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d72c:	f241 51a7 	movw	r1, #5543	; 0x15a7
 800d730:	4831      	ldr	r0, [pc, #196]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d732:	f7f6 fa09 	bl	8003b48 <assert_failed>
 800d736:	68ef      	ldr	r7, [r5, #12]
 800d738:	e7b8      	b.n	800d6ac <HAL_TIM_ConfigClockSource+0x460>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d73a:	f241 5197 	movw	r1, #5527	; 0x1597
 800d73e:	482e      	ldr	r0, [pc, #184]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d740:	f7f6 fa02 	bl	8003b48 <assert_failed>
 800d744:	68ee      	ldr	r6, [r5, #12]
 800d746:	e713      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x324>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d748:	f241 5174 	movw	r1, #5492	; 0x1574
 800d74c:	482a      	ldr	r0, [pc, #168]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d74e:	f7f6 f9fb 	bl	8003b48 <assert_failed>
 800d752:	68ee      	ldr	r6, [r5, #12]
 800d754:	e632      	b.n	800d3bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d756:	f241 5187 	movw	r1, #5511	; 0x1587
 800d75a:	4827      	ldr	r0, [pc, #156]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d75c:	f7f6 f9f4 	bl	8003b48 <assert_failed>
 800d760:	68ef      	ldr	r7, [r5, #12]
 800d762:	e5d2      	b.n	800d30a <HAL_TIM_ConfigClockSource+0xbe>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d764:	f241 515c 	movw	r1, #5468	; 0x155c
 800d768:	4823      	ldr	r0, [pc, #140]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d76a:	f7f6 f9ed 	bl	8003b48 <assert_failed>
 800d76e:	68ee      	ldr	r6, [r5, #12]
 800d770:	e6b1      	b.n	800d4d6 <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d772:	f241 5172 	movw	r1, #5490	; 0x1572
 800d776:	4820      	ldr	r0, [pc, #128]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d778:	f7f6 f9e6 	bl	8003b48 <assert_failed>
 800d77c:	e610      	b.n	800d3a0 <HAL_TIM_ConfigClockSource+0x154>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d77e:	f241 515a 	movw	r1, #5466	; 0x155a
 800d782:	481d      	ldr	r0, [pc, #116]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d784:	f7f6 f9e0 	bl	8003b48 <assert_failed>
 800d788:	e697      	b.n	800d4ba <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d78a:	f241 515b 	movw	r1, #5467	; 0x155b
 800d78e:	481a      	ldr	r0, [pc, #104]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d790:	f7f6 f9da 	bl	8003b48 <assert_failed>
 800d794:	e69b      	b.n	800d4ce <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d796:	f241 51a6 	movw	r1, #5542	; 0x15a6
 800d79a:	4817      	ldr	r0, [pc, #92]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d79c:	f7f6 f9d4 	bl	8003b48 <assert_failed>
 800d7a0:	e781      	b.n	800d6a6 <HAL_TIM_ConfigClockSource+0x45a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d7a2:	f241 5196 	movw	r1, #5526	; 0x1596
 800d7a6:	4814      	ldr	r0, [pc, #80]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d7a8:	f7f6 f9ce 	bl	8003b48 <assert_failed>
 800d7ac:	e6dc      	b.n	800d568 <HAL_TIM_ConfigClockSource+0x31c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d7ae:	f241 5186 	movw	r1, #5510	; 0x1586
 800d7b2:	4811      	ldr	r0, [pc, #68]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d7b4:	f7f6 f9c8 	bl	8003b48 <assert_failed>
 800d7b8:	e5a3      	b.n	800d302 <HAL_TIM_ConfigClockSource+0xb6>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d7ba:	f241 5173 	movw	r1, #5491	; 0x1573
 800d7be:	480e      	ldr	r0, [pc, #56]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d7c0:	f7f6 f9c2 	bl	8003b48 <assert_failed>
 800d7c4:	e5f6      	b.n	800d3b4 <HAL_TIM_ConfigClockSource+0x168>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d7c6:	f241 5157 	movw	r1, #5463	; 0x1557
 800d7ca:	480b      	ldr	r0, [pc, #44]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d7cc:	f7f6 f9bc 	bl	8003b48 <assert_failed>
 800d7d0:	e66e      	b.n	800d4b0 <HAL_TIM_ConfigClockSource+0x264>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d7d2:	4809      	ldr	r0, [pc, #36]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x5ac>)
 800d7d4:	f241 5150 	movw	r1, #5456	; 0x1550
 800d7d8:	f7f6 f9b6 	bl	8003b48 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800d7dc:	2000      	movs	r0, #0
 800d7de:	e602      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x19a>
 800d7e0:	40010000 	.word	0x40010000
 800d7e4:	40000400 	.word	0x40000400
 800d7e8:	40000800 	.word	0x40000800
 800d7ec:	40010400 	.word	0x40010400
 800d7f0:	40000c00 	.word	0x40000c00
 800d7f4:	40002000 	.word	0x40002000
 800d7f8:	08028be8 	.word	0x08028be8

0800d7fc <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d7fc:	6802      	ldr	r2, [r0, #0]
 800d7fe:	f8df c100 	ldr.w	ip, [pc, #256]	; 800d900 <HAL_TIM_SlaveConfigSynchro+0x104>
{
 800d802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d804:	4b37      	ldr	r3, [pc, #220]	; (800d8e4 <HAL_TIM_SlaveConfigSynchro+0xe8>)
{
 800d806:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d808:	4f37      	ldr	r7, [pc, #220]	; (800d8e8 <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800d80a:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d80c:	429a      	cmp	r2, r3
 800d80e:	bf18      	it	ne
 800d810:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d814:	4e35      	ldr	r6, [pc, #212]	; (800d8ec <HAL_TIM_SlaveConfigSynchro+0xf0>)
 800d816:	4836      	ldr	r0, [pc, #216]	; (800d8f0 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800d818:	bf14      	ite	ne
 800d81a:	2301      	movne	r3, #1
 800d81c:	2300      	moveq	r3, #0
 800d81e:	4935      	ldr	r1, [pc, #212]	; (800d8f4 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800d820:	4562      	cmp	r2, ip
 800d822:	bf0c      	ite	eq
 800d824:	2300      	moveq	r3, #0
 800d826:	f003 0301 	andne.w	r3, r3, #1
 800d82a:	42ba      	cmp	r2, r7
 800d82c:	bf0c      	ite	eq
 800d82e:	2300      	moveq	r3, #0
 800d830:	f003 0301 	andne.w	r3, r3, #1
 800d834:	42b2      	cmp	r2, r6
 800d836:	bf0c      	ite	eq
 800d838:	2300      	moveq	r3, #0
 800d83a:	f003 0301 	andne.w	r3, r3, #1
 800d83e:	4282      	cmp	r2, r0
 800d840:	bf0c      	ite	eq
 800d842:	2300      	moveq	r3, #0
 800d844:	f003 0301 	andne.w	r3, r3, #1
 800d848:	428a      	cmp	r2, r1
 800d84a:	bf0c      	ite	eq
 800d84c:	2300      	moveq	r3, #0
 800d84e:	f003 0301 	andne.w	r3, r3, #1
 800d852:	b113      	cbz	r3, 800d85a <HAL_TIM_SlaveConfigSynchro+0x5e>
 800d854:	4b28      	ldr	r3, [pc, #160]	; (800d8f8 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800d856:	429a      	cmp	r2, r3
 800d858:	d138      	bne.n	800d8cc <HAL_TIM_SlaveConfigSynchro+0xd0>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800d85a:	682b      	ldr	r3, [r5, #0]
 800d85c:	1f1a      	subs	r2, r3, #4
 800d85e:	2a03      	cmp	r2, #3
 800d860:	d902      	bls.n	800d868 <HAL_TIM_SlaveConfigSynchro+0x6c>
 800d862:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800d866:	d12b      	bne.n	800d8c0 <HAL_TIM_SlaveConfigSynchro+0xc4>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800d868:	686b      	ldr	r3, [r5, #4]
 800d86a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d86e:	2b40      	cmp	r3, #64	; 0x40
 800d870:	d000      	beq.n	800d874 <HAL_TIM_SlaveConfigSynchro+0x78>
 800d872:	bb8b      	cbnz	r3, 800d8d8 <HAL_TIM_SlaveConfigSynchro+0xdc>
  __HAL_LOCK(htim);
 800d874:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d01f      	beq.n	800d8bc <HAL_TIM_SlaveConfigSynchro+0xc0>
 800d87c:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d87e:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d880:	4629      	mov	r1, r5
 800d882:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800d884:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d888:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d88c:	f7ff f938 	bl	800cb00 <TIM_SlaveTimer_SetConfig>
 800d890:	b968      	cbnz	r0, 800d8ae <HAL_TIM_SlaveConfigSynchro+0xb2>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d892:	6823      	ldr	r3, [r4, #0]
 800d894:	68da      	ldr	r2, [r3, #12]
 800d896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d89a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d89c:	68da      	ldr	r2, [r3, #12]
 800d89e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d8a2:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800d8a4:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d8a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800d8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800d8ae:	2300      	movs	r3, #0
    return HAL_ERROR;
 800d8b0:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800d8b2:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800d8b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800d8bc:	2002      	movs	r0, #2
}
 800d8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800d8c0:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800d8c4:	480d      	ldr	r0, [pc, #52]	; (800d8fc <HAL_TIM_SlaveConfigSynchro+0x100>)
 800d8c6:	f7f6 f93f 	bl	8003b48 <assert_failed>
 800d8ca:	e7cd      	b.n	800d868 <HAL_TIM_SlaveConfigSynchro+0x6c>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d8cc:	f241 51f6 	movw	r1, #5622	; 0x15f6
 800d8d0:	480a      	ldr	r0, [pc, #40]	; (800d8fc <HAL_TIM_SlaveConfigSynchro+0x100>)
 800d8d2:	f7f6 f939 	bl	8003b48 <assert_failed>
 800d8d6:	e7c0      	b.n	800d85a <HAL_TIM_SlaveConfigSynchro+0x5e>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800d8d8:	f241 51f8 	movw	r1, #5624	; 0x15f8
 800d8dc:	4807      	ldr	r0, [pc, #28]	; (800d8fc <HAL_TIM_SlaveConfigSynchro+0x100>)
 800d8de:	f7f6 f933 	bl	8003b48 <assert_failed>
 800d8e2:	e7c7      	b.n	800d874 <HAL_TIM_SlaveConfigSynchro+0x78>
 800d8e4:	40010000 	.word	0x40010000
 800d8e8:	40000800 	.word	0x40000800
 800d8ec:	40000c00 	.word	0x40000c00
 800d8f0:	40010400 	.word	0x40010400
 800d8f4:	40014000 	.word	0x40014000
 800d8f8:	40001800 	.word	0x40001800
 800d8fc:	08028be8 	.word	0x08028be8
 800d900:	40000400 	.word	0x40000400

0800d904 <HAL_TIM_OC_DelayElapsedCallback>:
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop

0800d908 <TIM_DMACaptureCplt>:
{
 800d908:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d90a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d90c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d90e:	4283      	cmp	r3, r0
 800d910:	d01e      	beq.n	800d950 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d914:	4283      	cmp	r3, r0
 800d916:	d00b      	beq.n	800d930 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d91a:	4283      	cmp	r3, r0
 800d91c:	d027      	beq.n	800d96e <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d91e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d920:	4283      	cmp	r3, r0
 800d922:	d02f      	beq.n	800d984 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 800d924:	4620      	mov	r0, r4
 800d926:	f7f5 f87b 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d92a:	2300      	movs	r3, #0
 800d92c:	7723      	strb	r3, [r4, #28]
}
 800d92e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d930:	2202      	movs	r2, #2
 800d932:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800d934:	69db      	ldr	r3, [r3, #28]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1f4      	bne.n	800d924 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d93a:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 800d93c:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d93e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800d946:	f7f5 f86b 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d94a:	2300      	movs	r3, #0
 800d94c:	7723      	strb	r3, [r4, #28]
}
 800d94e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d950:	2201      	movs	r2, #1
 800d952:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800d954:	69db      	ldr	r3, [r3, #28]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1e4      	bne.n	800d924 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d95a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 800d95e:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d960:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800d964:	f7f5 f85c 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d968:	2300      	movs	r3, #0
 800d96a:	7723      	strb	r3, [r4, #28]
}
 800d96c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d96e:	2204      	movs	r2, #4
 800d970:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800d972:	69db      	ldr	r3, [r3, #28]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1d5      	bne.n	800d924 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800d978:	2301      	movs	r3, #1
 800d97a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800d97e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800d982:	e7cf      	b.n	800d924 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d984:	2208      	movs	r2, #8
 800d986:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1ca      	bne.n	800d924 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800d98e:	2301      	movs	r3, #1
 800d990:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800d994:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800d998:	e7c4      	b.n	800d924 <TIM_DMACaptureCplt+0x1c>
 800d99a:	bf00      	nop

0800d99c <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop

0800d9a0 <TIM_DMACaptureHalfCplt>:
{
 800d9a0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d9a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d9a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9a6:	4283      	cmp	r3, r0
 800d9a8:	d016      	beq.n	800d9d8 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d9aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d9ac:	4283      	cmp	r3, r0
 800d9ae:	d00b      	beq.n	800d9c8 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d9b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d9b2:	4283      	cmp	r3, r0
 800d9b4:	d018      	beq.n	800d9e8 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d9b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d9b8:	4283      	cmp	r3, r0
 800d9ba:	d01d      	beq.n	800d9f8 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f7ff ffed 	bl	800d99c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	7723      	strb	r3, [r4, #28]
}
 800d9c6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9c8:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d9ca:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9cc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d9ce:	f7ff ffe5 	bl	800d99c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	7723      	strb	r3, [r4, #28]
}
 800d9d6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d9d8:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d9da:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d9dc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d9de:	f7ff ffdd 	bl	800d99c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	7723      	strb	r3, [r4, #28]
}
 800d9e6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9e8:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d9ea:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9ec:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d9ee:	f7ff ffd5 	bl	800d99c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	7723      	strb	r3, [r4, #28]
}
 800d9f6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d9f8:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d9fa:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d9fc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d9fe:	f7ff ffcd 	bl	800d99c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da02:	2300      	movs	r3, #0
 800da04:	7723      	strb	r3, [r4, #28]
}
 800da06:	bd10      	pop	{r4, pc}

0800da08 <HAL_TIM_PWM_PulseFinishedCallback>:
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop

0800da0c <HAL_TIM_TriggerCallback>:
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop

0800da10 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da10:	6803      	ldr	r3, [r0, #0]
 800da12:	691a      	ldr	r2, [r3, #16]
 800da14:	0791      	lsls	r1, r2, #30
{
 800da16:	b510      	push	{r4, lr}
 800da18:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da1a:	d502      	bpl.n	800da22 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da1c:	68da      	ldr	r2, [r3, #12]
 800da1e:	0792      	lsls	r2, r2, #30
 800da20:	d468      	bmi.n	800daf4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da22:	691a      	ldr	r2, [r3, #16]
 800da24:	0752      	lsls	r2, r2, #29
 800da26:	d502      	bpl.n	800da2e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da28:	68da      	ldr	r2, [r3, #12]
 800da2a:	0750      	lsls	r0, r2, #29
 800da2c:	d44f      	bmi.n	800dace <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800da2e:	691a      	ldr	r2, [r3, #16]
 800da30:	0711      	lsls	r1, r2, #28
 800da32:	d502      	bpl.n	800da3a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800da34:	68da      	ldr	r2, [r3, #12]
 800da36:	0712      	lsls	r2, r2, #28
 800da38:	d437      	bmi.n	800daaa <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da3a:	691a      	ldr	r2, [r3, #16]
 800da3c:	06d0      	lsls	r0, r2, #27
 800da3e:	d502      	bpl.n	800da46 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da40:	68da      	ldr	r2, [r3, #12]
 800da42:	06d1      	lsls	r1, r2, #27
 800da44:	d41e      	bmi.n	800da84 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da46:	691a      	ldr	r2, [r3, #16]
 800da48:	07d2      	lsls	r2, r2, #31
 800da4a:	d502      	bpl.n	800da52 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da4c:	68da      	ldr	r2, [r3, #12]
 800da4e:	07d0      	lsls	r0, r2, #31
 800da50:	d469      	bmi.n	800db26 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da52:	691a      	ldr	r2, [r3, #16]
 800da54:	0611      	lsls	r1, r2, #24
 800da56:	d502      	bpl.n	800da5e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da58:	68da      	ldr	r2, [r3, #12]
 800da5a:	0612      	lsls	r2, r2, #24
 800da5c:	d46b      	bmi.n	800db36 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da5e:	691a      	ldr	r2, [r3, #16]
 800da60:	05d0      	lsls	r0, r2, #23
 800da62:	d502      	bpl.n	800da6a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da64:	68da      	ldr	r2, [r3, #12]
 800da66:	0611      	lsls	r1, r2, #24
 800da68:	d46d      	bmi.n	800db46 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da6a:	691a      	ldr	r2, [r3, #16]
 800da6c:	0652      	lsls	r2, r2, #25
 800da6e:	d502      	bpl.n	800da76 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da70:	68da      	ldr	r2, [r3, #12]
 800da72:	0650      	lsls	r0, r2, #25
 800da74:	d46f      	bmi.n	800db56 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	0691      	lsls	r1, r2, #26
 800da7a:	d502      	bpl.n	800da82 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da7c:	68da      	ldr	r2, [r3, #12]
 800da7e:	0692      	lsls	r2, r2, #26
 800da80:	d449      	bmi.n	800db16 <HAL_TIM_IRQHandler+0x106>
}
 800da82:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da84:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da88:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800da8a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da8c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da8e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da90:	69db      	ldr	r3, [r3, #28]
 800da92:	f413 7f40 	tst.w	r3, #768	; 0x300
 800da96:	d16f      	bne.n	800db78 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da98:	f7ff ff34 	bl	800d904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da9c:	4620      	mov	r0, r4
 800da9e:	f7ff ffb3 	bl	800da08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daa2:	2200      	movs	r2, #0
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	7722      	strb	r2, [r4, #28]
 800daa8:	e7cd      	b.n	800da46 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800daaa:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800daae:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800dab0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dab2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dab4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dab6:	69db      	ldr	r3, [r3, #28]
 800dab8:	079b      	lsls	r3, r3, #30
 800daba:	d15a      	bne.n	800db72 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dabc:	f7ff ff22 	bl	800d904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dac0:	4620      	mov	r0, r4
 800dac2:	f7ff ffa1 	bl	800da08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dac6:	2200      	movs	r2, #0
 800dac8:	6823      	ldr	r3, [r4, #0]
 800daca:	7722      	strb	r2, [r4, #28]
 800dacc:	e7b5      	b.n	800da3a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dace:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dad2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800dad4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dad6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dad8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	f413 7f40 	tst.w	r3, #768	; 0x300
 800dae0:	d144      	bne.n	800db6c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dae2:	f7ff ff0f 	bl	800d904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dae6:	4620      	mov	r0, r4
 800dae8:	f7ff ff8e 	bl	800da08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daec:	2200      	movs	r2, #0
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	7722      	strb	r2, [r4, #28]
 800daf2:	e79c      	b.n	800da2e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800daf4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800daf8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dafa:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dafc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	0799      	lsls	r1, r3, #30
 800db02:	d130      	bne.n	800db66 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db04:	f7ff fefe 	bl	800d904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db08:	4620      	mov	r0, r4
 800db0a:	f7ff ff7d 	bl	800da08 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db0e:	2200      	movs	r2, #0
 800db10:	6823      	ldr	r3, [r4, #0]
 800db12:	7722      	strb	r2, [r4, #28]
 800db14:	e785      	b.n	800da22 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db16:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800db1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db1c:	611a      	str	r2, [r3, #16]
}
 800db1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800db22:	f001 be4b 	b.w	800f7bc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db26:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800db2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800db2e:	f7f4 ffc7 	bl	8002ac0 <HAL_TIM_PeriodElapsedCallback>
 800db32:	6823      	ldr	r3, [r4, #0]
 800db34:	e78d      	b.n	800da52 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db36:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800db3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800db3e:	f001 fe3f 	bl	800f7c0 <HAL_TIMEx_BreakCallback>
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	e78b      	b.n	800da5e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db46:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800db4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db4c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800db4e:	f001 fe39 	bl	800f7c4 <HAL_TIMEx_Break2Callback>
 800db52:	6823      	ldr	r3, [r4, #0]
 800db54:	e789      	b.n	800da6a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db56:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800db5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800db5e:	f7ff ff55 	bl	800da0c <HAL_TIM_TriggerCallback>
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	e787      	b.n	800da76 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800db66:	f7f4 ff5b 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 800db6a:	e7d0      	b.n	800db0e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800db6c:	f7f4 ff58 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 800db70:	e7bc      	b.n	800daec <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800db72:	f7f4 ff55 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 800db76:	e7a6      	b.n	800dac6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800db78:	f7f4 ff52 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 800db7c:	e791      	b.n	800daa2 <HAL_TIM_IRQHandler+0x92>
 800db7e:	bf00      	nop

0800db80 <HAL_TIM_ErrorCallback>:
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop

0800db84 <TIM_DMAError>:
{
 800db84:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db86:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800db88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db8a:	4283      	cmp	r3, r0
 800db8c:	d01c      	beq.n	800dbc8 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800db8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800db90:	4283      	cmp	r3, r0
 800db92:	d00e      	beq.n	800dbb2 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800db94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800db96:	4283      	cmp	r3, r0
 800db98:	d020      	beq.n	800dbdc <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800db9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800db9c:	4283      	cmp	r3, r0
 800db9e:	d028      	beq.n	800dbf2 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 800dba0:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800dba2:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 800dba4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800dba8:	f7ff ffea 	bl	800db80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbac:	2300      	movs	r3, #0
 800dbae:	7723      	strb	r3, [r4, #28]
}
 800dbb0:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbb2:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dbb4:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 800dbb6:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbb8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dbbc:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800dbbe:	f7ff ffdf 	bl	800db80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	7723      	strb	r3, [r4, #28]
}
 800dbc6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbc8:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800dbca:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbcc:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800dbd2:	f7ff ffd5 	bl	800db80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	7723      	strb	r3, [r4, #28]
}
 800dbda:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800dbdc:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbde:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 800dbe0:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800dbe2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbe6:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800dbe8:	f7ff ffca 	bl	800db80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbec:	2300      	movs	r3, #0
 800dbee:	7723      	strb	r3, [r4, #28]
}
 800dbf0:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800dbf2:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbf4:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 800dbf6:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800dbf8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbfc:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800dbfe:	f7ff ffbf 	bl	800db80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc02:	2300      	movs	r3, #0
 800dc04:	7723      	strb	r3, [r4, #28]
}
 800dc06:	bd10      	pop	{r4, pc}

0800dc08 <TIM_Base_SetConfig>:
{
 800dc08:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc0a:	4c38      	ldr	r4, [pc, #224]	; (800dcec <TIM_Base_SetConfig+0xe4>)
 800dc0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800dc10:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc12:	eba0 0404 	sub.w	r4, r0, r4
 800dc16:	fab4 f484 	clz	r4, r4
 800dc1a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800dc1e:	d006      	beq.n	800dc2e <TIM_Base_SetConfig+0x26>
 800dc20:	b92c      	cbnz	r4, 800dc2e <TIM_Base_SetConfig+0x26>
 800dc22:	4d33      	ldr	r5, [pc, #204]	; (800dcf0 <TIM_Base_SetConfig+0xe8>)
 800dc24:	4a33      	ldr	r2, [pc, #204]	; (800dcf4 <TIM_Base_SetConfig+0xec>)
 800dc26:	4290      	cmp	r0, r2
 800dc28:	bf18      	it	ne
 800dc2a:	42a8      	cmpne	r0, r5
 800dc2c:	d121      	bne.n	800dc72 <TIM_Base_SetConfig+0x6a>
 800dc2e:	4a32      	ldr	r2, [pc, #200]	; (800dcf8 <TIM_Base_SetConfig+0xf0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800dc34:	684d      	ldr	r5, [r1, #4]
 800dc36:	1a82      	subs	r2, r0, r2
 800dc38:	432b      	orrs	r3, r5
 800dc3a:	fab2 f282 	clz	r2, r2
 800dc3e:	0952      	lsrs	r2, r2, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc40:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc46:	694d      	ldr	r5, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc48:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc4a:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800dc4c:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc52:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800dc54:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc56:	62c7      	str	r7, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800dc58:	6286      	str	r6, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc5a:	b924      	cbnz	r4, 800dc66 <TIM_Base_SetConfig+0x5e>
 800dc5c:	b91a      	cbnz	r2, 800dc66 <TIM_Base_SetConfig+0x5e>
  TIMx->EGR = TIM_EGR_UG;
 800dc5e:	2301      	movs	r3, #1
}
 800dc60:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800dc62:	6143      	str	r3, [r0, #20]
}
 800dc64:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800dc66:	690b      	ldr	r3, [r1, #16]
 800dc68:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800dc6a:	2301      	movs	r3, #1
}
 800dc6c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800dc6e:	6143      	str	r3, [r0, #20]
}
 800dc70:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc76:	4290      	cmp	r0, r2
 800dc78:	d024      	beq.n	800dcc4 <TIM_Base_SetConfig+0xbc>
 800dc7a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800dc7e:	4290      	cmp	r0, r2
 800dc80:	d020      	beq.n	800dcc4 <TIM_Base_SetConfig+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc82:	4a1e      	ldr	r2, [pc, #120]	; (800dcfc <TIM_Base_SetConfig+0xf4>)
 800dc84:	4d1e      	ldr	r5, [pc, #120]	; (800dd00 <TIM_Base_SetConfig+0xf8>)
 800dc86:	4290      	cmp	r0, r2
 800dc88:	bf18      	it	ne
 800dc8a:	42a8      	cmpne	r0, r5
 800dc8c:	bf0c      	ite	eq
 800dc8e:	2201      	moveq	r2, #1
 800dc90:	2200      	movne	r2, #0
 800dc92:	d028      	beq.n	800dce6 <TIM_Base_SetConfig+0xde>
 800dc94:	4e1b      	ldr	r6, [pc, #108]	; (800dd04 <TIM_Base_SetConfig+0xfc>)
 800dc96:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800dc9a:	42a8      	cmp	r0, r5
 800dc9c:	bf18      	it	ne
 800dc9e:	42b0      	cmpne	r0, r6
 800dca0:	d0ce      	beq.n	800dc40 <TIM_Base_SetConfig+0x38>
 800dca2:	4a19      	ldr	r2, [pc, #100]	; (800dd08 <TIM_Base_SetConfig+0x100>)
 800dca4:	4290      	cmp	r0, r2
 800dca6:	d01e      	beq.n	800dce6 <TIM_Base_SetConfig+0xde>
 800dca8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dcac:	4290      	cmp	r0, r2
 800dcae:	d01a      	beq.n	800dce6 <TIM_Base_SetConfig+0xde>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dcb0:	694a      	ldr	r2, [r1, #20]
 800dcb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcb6:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dcb8:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800dcba:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800dcbc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcbe:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800dcc0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dcc2:	e7cc      	b.n	800dc5e <TIM_Base_SetConfig+0x56>
 800dcc4:	4a0c      	ldr	r2, [pc, #48]	; (800dcf8 <TIM_Base_SetConfig+0xf0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dcc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcca:	4d10      	ldr	r5, [pc, #64]	; (800dd0c <TIM_Base_SetConfig+0x104>)
 800dccc:	1a82      	subs	r2, r0, r2
    tmpcr1 |= Structure->CounterMode;
 800dcce:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcd0:	42a8      	cmp	r0, r5
 800dcd2:	fab2 f282 	clz	r2, r2
    tmpcr1 |= Structure->CounterMode;
 800dcd6:	ea43 0306 	orr.w	r3, r3, r6
 800dcda:	ea4f 1252 	mov.w	r2, r2, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcde:	d0af      	beq.n	800dc40 <TIM_Base_SetConfig+0x38>
 800dce0:	2a00      	cmp	r2, #0
 800dce2:	d1ad      	bne.n	800dc40 <TIM_Base_SetConfig+0x38>
 800dce4:	e7cd      	b.n	800dc82 <TIM_Base_SetConfig+0x7a>
 800dce6:	2200      	movs	r2, #0
 800dce8:	e7aa      	b.n	800dc40 <TIM_Base_SetConfig+0x38>
 800dcea:	bf00      	nop
 800dcec:	40010000 	.word	0x40010000
 800dcf0:	40000400 	.word	0x40000400
 800dcf4:	40000800 	.word	0x40000800
 800dcf8:	40010400 	.word	0x40010400
 800dcfc:	40014400 	.word	0x40014400
 800dd00:	40014000 	.word	0x40014000
 800dd04:	40014800 	.word	0x40014800
 800dd08:	40001c00 	.word	0x40001c00
 800dd0c:	40000c00 	.word	0x40000c00

0800dd10 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800dd10:	2800      	cmp	r0, #0
 800dd12:	f000 80b7 	beq.w	800de84 <HAL_TIM_Base_Init+0x174>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dd16:	6802      	ldr	r2, [r0, #0]
 800dd18:	495e      	ldr	r1, [pc, #376]	; (800de94 <HAL_TIM_Base_Init+0x184>)
{
 800dd1a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dd1c:	4b5e      	ldr	r3, [pc, #376]	; (800de98 <HAL_TIM_Base_Init+0x188>)
 800dd1e:	4604      	mov	r4, r0
 800dd20:	485e      	ldr	r0, [pc, #376]	; (800de9c <HAL_TIM_Base_Init+0x18c>)
 800dd22:	429a      	cmp	r2, r3
 800dd24:	bf18      	it	ne
 800dd26:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800dd2a:	4d5d      	ldr	r5, [pc, #372]	; (800dea0 <HAL_TIM_Base_Init+0x190>)
 800dd2c:	bf14      	ite	ne
 800dd2e:	2301      	movne	r3, #1
 800dd30:	2300      	moveq	r3, #0
 800dd32:	4282      	cmp	r2, r0
 800dd34:	bf0c      	ite	eq
 800dd36:	2300      	moveq	r3, #0
 800dd38:	f003 0301 	andne.w	r3, r3, #1
 800dd3c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800dd40:	428a      	cmp	r2, r1
 800dd42:	bf0c      	ite	eq
 800dd44:	2300      	moveq	r3, #0
 800dd46:	f003 0301 	andne.w	r3, r3, #1
 800dd4a:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800dd4e:	42aa      	cmp	r2, r5
 800dd50:	bf0c      	ite	eq
 800dd52:	2300      	moveq	r3, #0
 800dd54:	f003 0301 	andne.w	r3, r3, #1
 800dd58:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800dd5c:	4282      	cmp	r2, r0
 800dd5e:	bf0c      	ite	eq
 800dd60:	2300      	moveq	r3, #0
 800dd62:	f003 0301 	andne.w	r3, r3, #1
 800dd66:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800dd6a:	428a      	cmp	r2, r1
 800dd6c:	bf0c      	ite	eq
 800dd6e:	2300      	moveq	r3, #0
 800dd70:	f003 0301 	andne.w	r3, r3, #1
 800dd74:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800dd78:	42aa      	cmp	r2, r5
 800dd7a:	bf0c      	ite	eq
 800dd7c:	2300      	moveq	r3, #0
 800dd7e:	f003 0301 	andne.w	r3, r3, #1
 800dd82:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800dd86:	4282      	cmp	r2, r0
 800dd88:	bf0c      	ite	eq
 800dd8a:	2300      	moveq	r3, #0
 800dd8c:	f003 0301 	andne.w	r3, r3, #1
 800dd90:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800dd94:	428a      	cmp	r2, r1
 800dd96:	bf0c      	ite	eq
 800dd98:	2300      	moveq	r3, #0
 800dd9a:	f003 0301 	andne.w	r3, r3, #1
 800dd9e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800dda2:	42aa      	cmp	r2, r5
 800dda4:	bf0c      	ite	eq
 800dda6:	2300      	moveq	r3, #0
 800dda8:	f003 0301 	andne.w	r3, r3, #1
 800ddac:	4282      	cmp	r2, r0
 800ddae:	bf0c      	ite	eq
 800ddb0:	2300      	moveq	r3, #0
 800ddb2:	f003 0301 	andne.w	r3, r3, #1
 800ddb6:	428a      	cmp	r2, r1
 800ddb8:	bf0c      	ite	eq
 800ddba:	2300      	moveq	r3, #0
 800ddbc:	f003 0301 	andne.w	r3, r3, #1
 800ddc0:	b113      	cbz	r3, 800ddc8 <HAL_TIM_Base_Init+0xb8>
 800ddc2:	4b38      	ldr	r3, [pc, #224]	; (800dea4 <HAL_TIM_Base_Init+0x194>)
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d15f      	bne.n	800de88 <HAL_TIM_Base_Init+0x178>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ddc8:	68a3      	ldr	r3, [r4, #8]
 800ddca:	f023 0210 	bic.w	r2, r3, #16
 800ddce:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800ddd2:	2920      	cmp	r1, #32
 800ddd4:	bf18      	it	ne
 800ddd6:	2a00      	cmpne	r2, #0
 800ddd8:	d001      	beq.n	800ddde <HAL_TIM_Base_Init+0xce>
 800ddda:	2b40      	cmp	r3, #64	; 0x40
 800dddc:	d14c      	bne.n	800de78 <HAL_TIM_Base_Init+0x168>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ddde:	6923      	ldr	r3, [r4, #16]
 800dde0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800dde4:	d002      	beq.n	800ddec <HAL_TIM_Base_Init+0xdc>
 800dde6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddea:	d12b      	bne.n	800de44 <HAL_TIM_Base_Init+0x134>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ddec:	69a3      	ldr	r3, [r4, #24]
 800ddee:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ddf2:	d130      	bne.n	800de56 <HAL_TIM_Base_Init+0x146>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ddf4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ddf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ddfc:	b3b3      	cbz	r3, 800de6c <HAL_TIM_Base_Init+0x15c>
  htim->State = HAL_TIM_STATE_BUSY;
 800ddfe:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de00:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800de02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de06:	f851 0b04 	ldr.w	r0, [r1], #4
 800de0a:	f7ff fefd 	bl	800dc08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de0e:	2301      	movs	r3, #1
  return HAL_OK;
 800de10:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de12:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800de1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800de1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800de22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800de26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800de32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de36:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800de3a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800de3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800de42:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800de44:	f44f 718c 	mov.w	r1, #280	; 0x118
 800de48:	4817      	ldr	r0, [pc, #92]	; (800dea8 <HAL_TIM_Base_Init+0x198>)
 800de4a:	f7f5 fe7d 	bl	8003b48 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800de4e:	69a3      	ldr	r3, [r4, #24]
 800de50:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800de54:	d0ce      	beq.n	800ddf4 <HAL_TIM_Base_Init+0xe4>
 800de56:	f240 1119 	movw	r1, #281	; 0x119
 800de5a:	4813      	ldr	r0, [pc, #76]	; (800dea8 <HAL_TIM_Base_Init+0x198>)
 800de5c:	f7f5 fe74 	bl	8003b48 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800de60:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800de64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1c8      	bne.n	800ddfe <HAL_TIM_Base_Init+0xee>
    HAL_TIM_Base_MspInit(htim);
 800de6c:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800de6e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800de72:	f7f7 f86d 	bl	8004f50 <HAL_TIM_Base_MspInit>
 800de76:	e7c2      	b.n	800ddfe <HAL_TIM_Base_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800de78:	f240 1117 	movw	r1, #279	; 0x117
 800de7c:	480a      	ldr	r0, [pc, #40]	; (800dea8 <HAL_TIM_Base_Init+0x198>)
 800de7e:	f7f5 fe63 	bl	8003b48 <assert_failed>
 800de82:	e7ac      	b.n	800ddde <HAL_TIM_Base_Init+0xce>
    return HAL_ERROR;
 800de84:	2001      	movs	r0, #1
}
 800de86:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800de88:	f44f 718b 	mov.w	r1, #278	; 0x116
 800de8c:	4806      	ldr	r0, [pc, #24]	; (800dea8 <HAL_TIM_Base_Init+0x198>)
 800de8e:	f7f5 fe5b 	bl	8003b48 <assert_failed>
 800de92:	e799      	b.n	800ddc8 <HAL_TIM_Base_Init+0xb8>
 800de94:	40000800 	.word	0x40000800
 800de98:	40010000 	.word	0x40010000
 800de9c:	40000400 	.word	0x40000400
 800dea0:	40000c00 	.word	0x40000c00
 800dea4:	40002000 	.word	0x40002000
 800dea8:	08028be8 	.word	0x08028be8

0800deac <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800deac:	2800      	cmp	r0, #0
 800deae:	f000 80b7 	beq.w	800e020 <HAL_TIM_OC_Init+0x174>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800deb2:	6802      	ldr	r2, [r0, #0]
 800deb4:	495e      	ldr	r1, [pc, #376]	; (800e030 <HAL_TIM_OC_Init+0x184>)
{
 800deb6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800deb8:	4b5e      	ldr	r3, [pc, #376]	; (800e034 <HAL_TIM_OC_Init+0x188>)
 800deba:	4604      	mov	r4, r0
 800debc:	485e      	ldr	r0, [pc, #376]	; (800e038 <HAL_TIM_OC_Init+0x18c>)
 800debe:	429a      	cmp	r2, r3
 800dec0:	bf18      	it	ne
 800dec2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800dec6:	4d5d      	ldr	r5, [pc, #372]	; (800e03c <HAL_TIM_OC_Init+0x190>)
 800dec8:	bf14      	ite	ne
 800deca:	2301      	movne	r3, #1
 800decc:	2300      	moveq	r3, #0
 800dece:	4282      	cmp	r2, r0
 800ded0:	bf0c      	ite	eq
 800ded2:	2300      	moveq	r3, #0
 800ded4:	f003 0301 	andne.w	r3, r3, #1
 800ded8:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800dedc:	428a      	cmp	r2, r1
 800dede:	bf0c      	ite	eq
 800dee0:	2300      	moveq	r3, #0
 800dee2:	f003 0301 	andne.w	r3, r3, #1
 800dee6:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800deea:	42aa      	cmp	r2, r5
 800deec:	bf0c      	ite	eq
 800deee:	2300      	moveq	r3, #0
 800def0:	f003 0301 	andne.w	r3, r3, #1
 800def4:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800def8:	4282      	cmp	r2, r0
 800defa:	bf0c      	ite	eq
 800defc:	2300      	moveq	r3, #0
 800defe:	f003 0301 	andne.w	r3, r3, #1
 800df02:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800df06:	428a      	cmp	r2, r1
 800df08:	bf0c      	ite	eq
 800df0a:	2300      	moveq	r3, #0
 800df0c:	f003 0301 	andne.w	r3, r3, #1
 800df10:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800df14:	42aa      	cmp	r2, r5
 800df16:	bf0c      	ite	eq
 800df18:	2300      	moveq	r3, #0
 800df1a:	f003 0301 	andne.w	r3, r3, #1
 800df1e:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800df22:	4282      	cmp	r2, r0
 800df24:	bf0c      	ite	eq
 800df26:	2300      	moveq	r3, #0
 800df28:	f003 0301 	andne.w	r3, r3, #1
 800df2c:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800df30:	428a      	cmp	r2, r1
 800df32:	bf0c      	ite	eq
 800df34:	2300      	moveq	r3, #0
 800df36:	f003 0301 	andne.w	r3, r3, #1
 800df3a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800df3e:	42aa      	cmp	r2, r5
 800df40:	bf0c      	ite	eq
 800df42:	2300      	moveq	r3, #0
 800df44:	f003 0301 	andne.w	r3, r3, #1
 800df48:	4282      	cmp	r2, r0
 800df4a:	bf0c      	ite	eq
 800df4c:	2300      	moveq	r3, #0
 800df4e:	f003 0301 	andne.w	r3, r3, #1
 800df52:	428a      	cmp	r2, r1
 800df54:	bf0c      	ite	eq
 800df56:	2300      	moveq	r3, #0
 800df58:	f003 0301 	andne.w	r3, r3, #1
 800df5c:	b113      	cbz	r3, 800df64 <HAL_TIM_OC_Init+0xb8>
 800df5e:	4b38      	ldr	r3, [pc, #224]	; (800e040 <HAL_TIM_OC_Init+0x194>)
 800df60:	429a      	cmp	r2, r3
 800df62:	d15f      	bne.n	800e024 <HAL_TIM_OC_Init+0x178>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800df64:	68a3      	ldr	r3, [r4, #8]
 800df66:	f023 0210 	bic.w	r2, r3, #16
 800df6a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800df6e:	2920      	cmp	r1, #32
 800df70:	bf18      	it	ne
 800df72:	2a00      	cmpne	r2, #0
 800df74:	d001      	beq.n	800df7a <HAL_TIM_OC_Init+0xce>
 800df76:	2b40      	cmp	r3, #64	; 0x40
 800df78:	d14c      	bne.n	800e014 <HAL_TIM_OC_Init+0x168>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800df80:	d002      	beq.n	800df88 <HAL_TIM_OC_Init+0xdc>
 800df82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df86:	d12b      	bne.n	800dfe0 <HAL_TIM_OC_Init+0x134>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800df88:	69a3      	ldr	r3, [r4, #24]
 800df8a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800df8e:	d130      	bne.n	800dff2 <HAL_TIM_OC_Init+0x146>
  if (htim->State == HAL_TIM_STATE_RESET)
 800df90:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800df94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800df98:	b3b3      	cbz	r3, 800e008 <HAL_TIM_OC_Init+0x15c>
  htim->State = HAL_TIM_STATE_BUSY;
 800df9a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800df9c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800df9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800dfa2:	f851 0b04 	ldr.w	r0, [r1], #4
 800dfa6:	f7ff fe2f 	bl	800dc08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfaa:	2301      	movs	r3, #1
  return HAL_OK;
 800dfac:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfb2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800dfb6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800dfba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dfbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800dfc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800dfce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfd2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800dfd6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800dfda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800dfe0:	f240 2197 	movw	r1, #663	; 0x297
 800dfe4:	4817      	ldr	r0, [pc, #92]	; (800e044 <HAL_TIM_OC_Init+0x198>)
 800dfe6:	f7f5 fdaf 	bl	8003b48 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800dfea:	69a3      	ldr	r3, [r4, #24]
 800dfec:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800dff0:	d0ce      	beq.n	800df90 <HAL_TIM_OC_Init+0xe4>
 800dff2:	f44f 7126 	mov.w	r1, #664	; 0x298
 800dff6:	4813      	ldr	r0, [pc, #76]	; (800e044 <HAL_TIM_OC_Init+0x198>)
 800dff8:	f7f5 fda6 	bl	8003b48 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800dffc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e000:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e004:	2b00      	cmp	r3, #0
 800e006:	d1c8      	bne.n	800df9a <HAL_TIM_OC_Init+0xee>
    HAL_TIM_OC_MspInit(htim);
 800e008:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800e00a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800e00e:	f7ff f917 	bl	800d240 <HAL_TIM_OC_MspInit>
 800e012:	e7c2      	b.n	800df9a <HAL_TIM_OC_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e014:	f240 2196 	movw	r1, #662	; 0x296
 800e018:	480a      	ldr	r0, [pc, #40]	; (800e044 <HAL_TIM_OC_Init+0x198>)
 800e01a:	f7f5 fd95 	bl	8003b48 <assert_failed>
 800e01e:	e7ac      	b.n	800df7a <HAL_TIM_OC_Init+0xce>
    return HAL_ERROR;
 800e020:	2001      	movs	r0, #1
}
 800e022:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e024:	f240 2195 	movw	r1, #661	; 0x295
 800e028:	4806      	ldr	r0, [pc, #24]	; (800e044 <HAL_TIM_OC_Init+0x198>)
 800e02a:	f7f5 fd8d 	bl	8003b48 <assert_failed>
 800e02e:	e799      	b.n	800df64 <HAL_TIM_OC_Init+0xb8>
 800e030:	40000800 	.word	0x40000800
 800e034:	40010000 	.word	0x40010000
 800e038:	40000400 	.word	0x40000400
 800e03c:	40000c00 	.word	0x40000c00
 800e040:	40002000 	.word	0x40002000
 800e044:	08028be8 	.word	0x08028be8

0800e048 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800e048:	2800      	cmp	r0, #0
 800e04a:	f000 80b7 	beq.w	800e1bc <HAL_TIM_PWM_Init+0x174>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e04e:	6802      	ldr	r2, [r0, #0]
 800e050:	495e      	ldr	r1, [pc, #376]	; (800e1cc <HAL_TIM_PWM_Init+0x184>)
{
 800e052:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e054:	4b5e      	ldr	r3, [pc, #376]	; (800e1d0 <HAL_TIM_PWM_Init+0x188>)
 800e056:	4604      	mov	r4, r0
 800e058:	485e      	ldr	r0, [pc, #376]	; (800e1d4 <HAL_TIM_PWM_Init+0x18c>)
 800e05a:	429a      	cmp	r2, r3
 800e05c:	bf18      	it	ne
 800e05e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e062:	4d5d      	ldr	r5, [pc, #372]	; (800e1d8 <HAL_TIM_PWM_Init+0x190>)
 800e064:	bf14      	ite	ne
 800e066:	2301      	movne	r3, #1
 800e068:	2300      	moveq	r3, #0
 800e06a:	4282      	cmp	r2, r0
 800e06c:	bf0c      	ite	eq
 800e06e:	2300      	moveq	r3, #0
 800e070:	f003 0301 	andne.w	r3, r3, #1
 800e074:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800e078:	428a      	cmp	r2, r1
 800e07a:	bf0c      	ite	eq
 800e07c:	2300      	moveq	r3, #0
 800e07e:	f003 0301 	andne.w	r3, r3, #1
 800e082:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800e086:	42aa      	cmp	r2, r5
 800e088:	bf0c      	ite	eq
 800e08a:	2300      	moveq	r3, #0
 800e08c:	f003 0301 	andne.w	r3, r3, #1
 800e090:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800e094:	4282      	cmp	r2, r0
 800e096:	bf0c      	ite	eq
 800e098:	2300      	moveq	r3, #0
 800e09a:	f003 0301 	andne.w	r3, r3, #1
 800e09e:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800e0a2:	428a      	cmp	r2, r1
 800e0a4:	bf0c      	ite	eq
 800e0a6:	2300      	moveq	r3, #0
 800e0a8:	f003 0301 	andne.w	r3, r3, #1
 800e0ac:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800e0b0:	42aa      	cmp	r2, r5
 800e0b2:	bf0c      	ite	eq
 800e0b4:	2300      	moveq	r3, #0
 800e0b6:	f003 0301 	andne.w	r3, r3, #1
 800e0ba:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800e0be:	4282      	cmp	r2, r0
 800e0c0:	bf0c      	ite	eq
 800e0c2:	2300      	moveq	r3, #0
 800e0c4:	f003 0301 	andne.w	r3, r3, #1
 800e0c8:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800e0cc:	428a      	cmp	r2, r1
 800e0ce:	bf0c      	ite	eq
 800e0d0:	2300      	moveq	r3, #0
 800e0d2:	f003 0301 	andne.w	r3, r3, #1
 800e0d6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800e0da:	42aa      	cmp	r2, r5
 800e0dc:	bf0c      	ite	eq
 800e0de:	2300      	moveq	r3, #0
 800e0e0:	f003 0301 	andne.w	r3, r3, #1
 800e0e4:	4282      	cmp	r2, r0
 800e0e6:	bf0c      	ite	eq
 800e0e8:	2300      	moveq	r3, #0
 800e0ea:	f003 0301 	andne.w	r3, r3, #1
 800e0ee:	428a      	cmp	r2, r1
 800e0f0:	bf0c      	ite	eq
 800e0f2:	2300      	moveq	r3, #0
 800e0f4:	f003 0301 	andne.w	r3, r3, #1
 800e0f8:	b113      	cbz	r3, 800e100 <HAL_TIM_PWM_Init+0xb8>
 800e0fa:	4b38      	ldr	r3, [pc, #224]	; (800e1dc <HAL_TIM_PWM_Init+0x194>)
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d15f      	bne.n	800e1c0 <HAL_TIM_PWM_Init+0x178>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e100:	68a3      	ldr	r3, [r4, #8]
 800e102:	f023 0210 	bic.w	r2, r3, #16
 800e106:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800e10a:	2920      	cmp	r1, #32
 800e10c:	bf18      	it	ne
 800e10e:	2a00      	cmpne	r2, #0
 800e110:	d001      	beq.n	800e116 <HAL_TIM_PWM_Init+0xce>
 800e112:	2b40      	cmp	r3, #64	; 0x40
 800e114:	d14c      	bne.n	800e1b0 <HAL_TIM_PWM_Init+0x168>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e116:	6923      	ldr	r3, [r4, #16]
 800e118:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e11c:	d002      	beq.n	800e124 <HAL_TIM_PWM_Init+0xdc>
 800e11e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e122:	d12b      	bne.n	800e17c <HAL_TIM_PWM_Init+0x134>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e124:	69a3      	ldr	r3, [r4, #24]
 800e126:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e12a:	d130      	bne.n	800e18e <HAL_TIM_PWM_Init+0x146>
  if (htim->State == HAL_TIM_STATE_RESET)
 800e12c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e130:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e134:	b3b3      	cbz	r3, 800e1a4 <HAL_TIM_PWM_Init+0x15c>
  htim->State = HAL_TIM_STATE_BUSY;
 800e136:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e138:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800e13a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e13e:	f851 0b04 	ldr.w	r0, [r1], #4
 800e142:	f7ff fd61 	bl	800dc08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e146:	2301      	movs	r3, #1
  return HAL_OK;
 800e148:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e14a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e14e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800e152:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800e156:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800e15a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e15e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e166:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800e16a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e16e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800e172:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800e176:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e17a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e17c:	f240 5132 	movw	r1, #1330	; 0x532
 800e180:	4817      	ldr	r0, [pc, #92]	; (800e1e0 <HAL_TIM_PWM_Init+0x198>)
 800e182:	f7f5 fce1 	bl	8003b48 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e186:	69a3      	ldr	r3, [r4, #24]
 800e188:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e18c:	d0ce      	beq.n	800e12c <HAL_TIM_PWM_Init+0xe4>
 800e18e:	f240 5133 	movw	r1, #1331	; 0x533
 800e192:	4813      	ldr	r0, [pc, #76]	; (800e1e0 <HAL_TIM_PWM_Init+0x198>)
 800e194:	f7f5 fcd8 	bl	8003b48 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800e198:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e19c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d1c8      	bne.n	800e136 <HAL_TIM_PWM_Init+0xee>
    HAL_TIM_PWM_MspInit(htim);
 800e1a4:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800e1a6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800e1aa:	f7ff f84b 	bl	800d244 <HAL_TIM_PWM_MspInit>
 800e1ae:	e7c2      	b.n	800e136 <HAL_TIM_PWM_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e1b0:	f240 5131 	movw	r1, #1329	; 0x531
 800e1b4:	480a      	ldr	r0, [pc, #40]	; (800e1e0 <HAL_TIM_PWM_Init+0x198>)
 800e1b6:	f7f5 fcc7 	bl	8003b48 <assert_failed>
 800e1ba:	e7ac      	b.n	800e116 <HAL_TIM_PWM_Init+0xce>
    return HAL_ERROR;
 800e1bc:	2001      	movs	r0, #1
}
 800e1be:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e1c0:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 800e1c4:	4806      	ldr	r0, [pc, #24]	; (800e1e0 <HAL_TIM_PWM_Init+0x198>)
 800e1c6:	f7f5 fcbf 	bl	8003b48 <assert_failed>
 800e1ca:	e799      	b.n	800e100 <HAL_TIM_PWM_Init+0xb8>
 800e1cc:	40000800 	.word	0x40000800
 800e1d0:	40010000 	.word	0x40010000
 800e1d4:	40000400 	.word	0x40000400
 800e1d8:	40000c00 	.word	0x40000c00
 800e1dc:	40002000 	.word	0x40002000
 800e1e0:	08028be8 	.word	0x08028be8

0800e1e4 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	f000 80b7 	beq.w	800e358 <HAL_TIM_IC_Init+0x174>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e1ea:	6802      	ldr	r2, [r0, #0]
 800e1ec:	495e      	ldr	r1, [pc, #376]	; (800e368 <HAL_TIM_IC_Init+0x184>)
{
 800e1ee:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e1f0:	4b5e      	ldr	r3, [pc, #376]	; (800e36c <HAL_TIM_IC_Init+0x188>)
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	485e      	ldr	r0, [pc, #376]	; (800e370 <HAL_TIM_IC_Init+0x18c>)
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	bf18      	it	ne
 800e1fa:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e1fe:	4d5d      	ldr	r5, [pc, #372]	; (800e374 <HAL_TIM_IC_Init+0x190>)
 800e200:	bf14      	ite	ne
 800e202:	2301      	movne	r3, #1
 800e204:	2300      	moveq	r3, #0
 800e206:	4282      	cmp	r2, r0
 800e208:	bf0c      	ite	eq
 800e20a:	2300      	moveq	r3, #0
 800e20c:	f003 0301 	andne.w	r3, r3, #1
 800e210:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800e214:	428a      	cmp	r2, r1
 800e216:	bf0c      	ite	eq
 800e218:	2300      	moveq	r3, #0
 800e21a:	f003 0301 	andne.w	r3, r3, #1
 800e21e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800e222:	42aa      	cmp	r2, r5
 800e224:	bf0c      	ite	eq
 800e226:	2300      	moveq	r3, #0
 800e228:	f003 0301 	andne.w	r3, r3, #1
 800e22c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800e230:	4282      	cmp	r2, r0
 800e232:	bf0c      	ite	eq
 800e234:	2300      	moveq	r3, #0
 800e236:	f003 0301 	andne.w	r3, r3, #1
 800e23a:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800e23e:	428a      	cmp	r2, r1
 800e240:	bf0c      	ite	eq
 800e242:	2300      	moveq	r3, #0
 800e244:	f003 0301 	andne.w	r3, r3, #1
 800e248:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800e24c:	42aa      	cmp	r2, r5
 800e24e:	bf0c      	ite	eq
 800e250:	2300      	moveq	r3, #0
 800e252:	f003 0301 	andne.w	r3, r3, #1
 800e256:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800e25a:	4282      	cmp	r2, r0
 800e25c:	bf0c      	ite	eq
 800e25e:	2300      	moveq	r3, #0
 800e260:	f003 0301 	andne.w	r3, r3, #1
 800e264:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800e268:	428a      	cmp	r2, r1
 800e26a:	bf0c      	ite	eq
 800e26c:	2300      	moveq	r3, #0
 800e26e:	f003 0301 	andne.w	r3, r3, #1
 800e272:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800e276:	42aa      	cmp	r2, r5
 800e278:	bf0c      	ite	eq
 800e27a:	2300      	moveq	r3, #0
 800e27c:	f003 0301 	andne.w	r3, r3, #1
 800e280:	4282      	cmp	r2, r0
 800e282:	bf0c      	ite	eq
 800e284:	2300      	moveq	r3, #0
 800e286:	f003 0301 	andne.w	r3, r3, #1
 800e28a:	428a      	cmp	r2, r1
 800e28c:	bf0c      	ite	eq
 800e28e:	2300      	moveq	r3, #0
 800e290:	f003 0301 	andne.w	r3, r3, #1
 800e294:	b113      	cbz	r3, 800e29c <HAL_TIM_IC_Init+0xb8>
 800e296:	4b38      	ldr	r3, [pc, #224]	; (800e378 <HAL_TIM_IC_Init+0x194>)
 800e298:	429a      	cmp	r2, r3
 800e29a:	d15f      	bne.n	800e35c <HAL_TIM_IC_Init+0x178>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e29c:	68a3      	ldr	r3, [r4, #8]
 800e29e:	f023 0210 	bic.w	r2, r3, #16
 800e2a2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800e2a6:	2920      	cmp	r1, #32
 800e2a8:	bf18      	it	ne
 800e2aa:	2a00      	cmpne	r2, #0
 800e2ac:	d001      	beq.n	800e2b2 <HAL_TIM_IC_Init+0xce>
 800e2ae:	2b40      	cmp	r3, #64	; 0x40
 800e2b0:	d14c      	bne.n	800e34c <HAL_TIM_IC_Init+0x168>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e2b2:	6923      	ldr	r3, [r4, #16]
 800e2b4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e2b8:	d002      	beq.n	800e2c0 <HAL_TIM_IC_Init+0xdc>
 800e2ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2be:	d12b      	bne.n	800e318 <HAL_TIM_IC_Init+0x134>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e2c0:	69a3      	ldr	r3, [r4, #24]
 800e2c2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e2c6:	d130      	bne.n	800e32a <HAL_TIM_IC_Init+0x146>
  if (htim->State == HAL_TIM_STATE_RESET)
 800e2c8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e2cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e2d0:	b3b3      	cbz	r3, 800e340 <HAL_TIM_IC_Init+0x15c>
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2d4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2da:	f851 0b04 	ldr.w	r0, [r1], #4
 800e2de:	f7ff fc93 	bl	800dc08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2e2:	2301      	movs	r3, #1
  return HAL_OK;
 800e2e4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2e6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800e2ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800e2f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800e2f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e2fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e302:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800e306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e30a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800e30e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800e312:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e316:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e318:	f240 71cc 	movw	r1, #1996	; 0x7cc
 800e31c:	4817      	ldr	r0, [pc, #92]	; (800e37c <HAL_TIM_IC_Init+0x198>)
 800e31e:	f7f5 fc13 	bl	8003b48 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e322:	69a3      	ldr	r3, [r4, #24]
 800e324:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e328:	d0ce      	beq.n	800e2c8 <HAL_TIM_IC_Init+0xe4>
 800e32a:	f240 71cd 	movw	r1, #1997	; 0x7cd
 800e32e:	4813      	ldr	r0, [pc, #76]	; (800e37c <HAL_TIM_IC_Init+0x198>)
 800e330:	f7f5 fc0a 	bl	8003b48 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800e334:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e338:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d1c8      	bne.n	800e2d2 <HAL_TIM_IC_Init+0xee>
    HAL_TIM_IC_MspInit(htim);
 800e340:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800e342:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800e346:	f7fe ff7f 	bl	800d248 <HAL_TIM_IC_MspInit>
 800e34a:	e7c2      	b.n	800e2d2 <HAL_TIM_IC_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e34c:	f240 71cb 	movw	r1, #1995	; 0x7cb
 800e350:	480a      	ldr	r0, [pc, #40]	; (800e37c <HAL_TIM_IC_Init+0x198>)
 800e352:	f7f5 fbf9 	bl	8003b48 <assert_failed>
 800e356:	e7ac      	b.n	800e2b2 <HAL_TIM_IC_Init+0xce>
    return HAL_ERROR;
 800e358:	2001      	movs	r0, #1
}
 800e35a:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e35c:	f240 71ca 	movw	r1, #1994	; 0x7ca
 800e360:	4806      	ldr	r0, [pc, #24]	; (800e37c <HAL_TIM_IC_Init+0x198>)
 800e362:	f7f5 fbf1 	bl	8003b48 <assert_failed>
 800e366:	e799      	b.n	800e29c <HAL_TIM_IC_Init+0xb8>
 800e368:	40000800 	.word	0x40000800
 800e36c:	40010000 	.word	0x40010000
 800e370:	40000400 	.word	0x40000400
 800e374:	40000c00 	.word	0x40000c00
 800e378:	40002000 	.word	0x40002000
 800e37c:	08028be8 	.word	0x08028be8

0800e380 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e380:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e382:	4b2e      	ldr	r3, [pc, #184]	; (800e43c <TIM_OC2_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e384:	f022 0210 	bic.w	r2, r2, #16
{
 800e388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38c:	4604      	mov	r4, r0
 800e38e:	460e      	mov	r6, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e390:	492b      	ldr	r1, [pc, #172]	; (800e440 <TIM_OC2_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e392:	f8d6 c008 	ldr.w	ip, [r6, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e396:	6830      	ldr	r0, [r6, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e398:	428c      	cmp	r4, r1
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e39a:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800e39c:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800e39e:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800e3a0:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800e3a2:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e3a6:	ea03 0302 	and.w	r3, r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e3aa:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3ae:	ea43 2800 	orr.w	r8, r3, r0, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e3b2:	d00a      	beq.n	800e3ca <TIM_OC2_SetConfig+0x4a>
 800e3b4:	4b23      	ldr	r3, [pc, #140]	; (800e444 <TIM_OC2_SetConfig+0xc4>)
 800e3b6:	429c      	cmp	r4, r3
 800e3b8:	d007      	beq.n	800e3ca <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 800e3ba:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800e3bc:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800e3be:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800e3c2:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800e3c4:	6225      	str	r5, [r4, #32]
}
 800e3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e3ca:	68f2      	ldr	r2, [r6, #12]
 800e3cc:	f032 0308 	bics.w	r3, r2, #8
 800e3d0:	d123      	bne.n	800e41a <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800e3d2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e3d6:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e3d8:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e3dc:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800e3e0:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e3e4:	d120      	bne.n	800e428 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e3e6:	6973      	ldr	r3, [r6, #20]
 800e3e8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e3ec:	d107      	bne.n	800e3fe <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e3ee:	f427 6240 	bic.w	r2, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e3f2:	69b1      	ldr	r1, [r6, #24]
 800e3f4:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800e3f8:	ea42 0783 	orr.w	r7, r2, r3, lsl #2
 800e3fc:	e7dd      	b.n	800e3ba <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e3fe:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 800e402:	4811      	ldr	r0, [pc, #68]	; (800e448 <TIM_OC2_SetConfig+0xc8>)
 800e404:	f7f5 fba0 	bl	8003b48 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e408:	f427 6240 	bic.w	r2, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e40c:	69b1      	ldr	r1, [r6, #24]
 800e40e:	6973      	ldr	r3, [r6, #20]
 800e410:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800e414:	ea42 0783 	orr.w	r7, r2, r3, lsl #2
 800e418:	e7cf      	b.n	800e3ba <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e41a:	f641 31aa 	movw	r1, #7082	; 0x1baa
 800e41e:	480a      	ldr	r0, [pc, #40]	; (800e448 <TIM_OC2_SetConfig+0xc8>)
 800e420:	f7f5 fb92 	bl	8003b48 <assert_failed>
 800e424:	68f2      	ldr	r2, [r6, #12]
 800e426:	e7d4      	b.n	800e3d2 <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e428:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 800e42c:	4806      	ldr	r0, [pc, #24]	; (800e448 <TIM_OC2_SetConfig+0xc8>)
 800e42e:	f7f5 fb8b 	bl	8003b48 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e432:	6973      	ldr	r3, [r6, #20]
 800e434:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e438:	d0d9      	beq.n	800e3ee <TIM_OC2_SetConfig+0x6e>
 800e43a:	e7e0      	b.n	800e3fe <TIM_OC2_SetConfig+0x7e>
 800e43c:	feff8cff 	.word	0xfeff8cff
 800e440:	40010000 	.word	0x40010000
 800e444:	40010400 	.word	0x40010400
 800e448:	08028be8 	.word	0x08028be8

0800e44c <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800e44c:	2a14      	cmp	r2, #20
{
 800e44e:	b570      	push	{r4, r5, r6, lr}
 800e450:	4614      	mov	r4, r2
 800e452:	4605      	mov	r5, r0
 800e454:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800e456:	d937      	bls.n	800e4c8 <HAL_TIM_OC_ConfigChannel+0x7c>
 800e458:	2a3c      	cmp	r2, #60	; 0x3c
 800e45a:	d139      	bne.n	800e4d0 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800e45c:	6833      	ldr	r3, [r6, #0]
 800e45e:	f023 0210 	bic.w	r2, r3, #16
 800e462:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800e466:	2a40      	cmp	r2, #64	; 0x40
 800e468:	bf18      	it	ne
 800e46a:	2b00      	cmpne	r3, #0
 800e46c:	d003      	beq.n	800e476 <HAL_TIM_OC_ConfigChannel+0x2a>
 800e46e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e472:	f040 8134 	bne.w	800e6de <HAL_TIM_OC_ConfigChannel+0x292>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800e476:	68b3      	ldr	r3, [r6, #8]
 800e478:	f033 0302 	bics.w	r3, r3, #2
 800e47c:	d12e      	bne.n	800e4dc <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 800e47e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800e482:	2b01      	cmp	r3, #1
 800e484:	d033      	beq.n	800e4ee <HAL_TIM_OC_ConfigChannel+0xa2>
 800e486:	2301      	movs	r3, #1
 800e488:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 800e48c:	2c14      	cmp	r4, #20
 800e48e:	d816      	bhi.n	800e4be <HAL_TIM_OC_ConfigChannel+0x72>
 800e490:	e8df f014 	tbh	[pc, r4, lsl #1]
 800e494:	0015002f 	.word	0x0015002f
 800e498:	00150015 	.word	0x00150015
 800e49c:	0015007f 	.word	0x0015007f
 800e4a0:	00150015 	.word	0x00150015
 800e4a4:	001500b3 	.word	0x001500b3
 800e4a8:	00150015 	.word	0x00150015
 800e4ac:	001500d8 	.word	0x001500d8
 800e4b0:	00150015 	.word	0x00150015
 800e4b4:	001500fd 	.word	0x001500fd
 800e4b8:	00150015 	.word	0x00150015
 800e4bc:	010a      	.short	0x010a
  __HAL_LOCK(htim);
 800e4be:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800e4c8:	4b96      	ldr	r3, [pc, #600]	; (800e724 <HAL_TIM_OC_ConfigChannel+0x2d8>)
 800e4ca:	40d3      	lsrs	r3, r2
 800e4cc:	07db      	lsls	r3, r3, #31
 800e4ce:	d4c5      	bmi.n	800e45c <HAL_TIM_OC_ConfigChannel+0x10>
 800e4d0:	f640 71df 	movw	r1, #4063	; 0xfdf
 800e4d4:	4894      	ldr	r0, [pc, #592]	; (800e728 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800e4d6:	f7f5 fb37 	bl	8003b48 <assert_failed>
 800e4da:	e7bf      	b.n	800e45c <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800e4dc:	f640 71e1 	movw	r1, #4065	; 0xfe1
 800e4e0:	4891      	ldr	r0, [pc, #580]	; (800e728 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800e4e2:	f7f5 fb31 	bl	8003b48 <assert_failed>
  __HAL_LOCK(htim);
 800e4e6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d1cb      	bne.n	800e486 <HAL_TIM_OC_ConfigChannel+0x3a>
 800e4ee:	2002      	movs	r0, #2
}
 800e4f0:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e4f2:	6828      	ldr	r0, [r5, #0]
 800e4f4:	4b8d      	ldr	r3, [pc, #564]	; (800e72c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800e4f6:	4a8e      	ldr	r2, [pc, #568]	; (800e730 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800e4f8:	4298      	cmp	r0, r3
 800e4fa:	bf18      	it	ne
 800e4fc:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e500:	498c      	ldr	r1, [pc, #560]	; (800e734 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800e502:	bf14      	ite	ne
 800e504:	2301      	movne	r3, #1
 800e506:	2300      	moveq	r3, #0
 800e508:	4290      	cmp	r0, r2
 800e50a:	bf0c      	ite	eq
 800e50c:	2300      	moveq	r3, #0
 800e50e:	f003 0301 	andne.w	r3, r3, #1
 800e512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e516:	4288      	cmp	r0, r1
 800e518:	bf0c      	ite	eq
 800e51a:	2300      	moveq	r3, #0
 800e51c:	f003 0301 	andne.w	r3, r3, #1
 800e520:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800e524:	4290      	cmp	r0, r2
 800e526:	bf0c      	ite	eq
 800e528:	2300      	moveq	r3, #0
 800e52a:	f003 0301 	andne.w	r3, r3, #1
 800e52e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800e532:	4288      	cmp	r0, r1
 800e534:	bf0c      	ite	eq
 800e536:	2300      	moveq	r3, #0
 800e538:	f003 0301 	andne.w	r3, r3, #1
 800e53c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800e540:	4290      	cmp	r0, r2
 800e542:	bf0c      	ite	eq
 800e544:	2300      	moveq	r3, #0
 800e546:	f003 0301 	andne.w	r3, r3, #1
 800e54a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e54e:	4288      	cmp	r0, r1
 800e550:	bf0c      	ite	eq
 800e552:	2300      	moveq	r3, #0
 800e554:	f003 0301 	andne.w	r3, r3, #1
 800e558:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800e55c:	4290      	cmp	r0, r2
 800e55e:	bf0c      	ite	eq
 800e560:	2300      	moveq	r3, #0
 800e562:	f003 0301 	andne.w	r3, r3, #1
 800e566:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800e56a:	4288      	cmp	r0, r1
 800e56c:	bf0c      	ite	eq
 800e56e:	2300      	moveq	r3, #0
 800e570:	f003 0301 	andne.w	r3, r3, #1
 800e574:	4290      	cmp	r0, r2
 800e576:	bf0c      	ite	eq
 800e578:	2300      	moveq	r3, #0
 800e57a:	f003 0301 	andne.w	r3, r3, #1
 800e57e:	b11b      	cbz	r3, 800e588 <HAL_TIM_OC_ConfigChannel+0x13c>
 800e580:	4b6d      	ldr	r3, [pc, #436]	; (800e738 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800e582:	4298      	cmp	r0, r3
 800e584:	f040 80c6 	bne.w	800e714 <HAL_TIM_OC_ConfigChannel+0x2c8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e588:	4631      	mov	r1, r6
 800e58a:	f7fe f9ad 	bl	800c8e8 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800e58e:	2000      	movs	r0, #0
      break;
 800e590:	e796      	b.n	800e4c0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e592:	6828      	ldr	r0, [r5, #0]
 800e594:	4b65      	ldr	r3, [pc, #404]	; (800e72c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800e596:	4a66      	ldr	r2, [pc, #408]	; (800e730 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800e598:	4298      	cmp	r0, r3
 800e59a:	bf18      	it	ne
 800e59c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e5a0:	4964      	ldr	r1, [pc, #400]	; (800e734 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800e5a2:	bf14      	ite	ne
 800e5a4:	2301      	movne	r3, #1
 800e5a6:	2300      	moveq	r3, #0
 800e5a8:	4290      	cmp	r0, r2
 800e5aa:	bf0c      	ite	eq
 800e5ac:	2300      	moveq	r3, #0
 800e5ae:	f003 0301 	andne.w	r3, r3, #1
 800e5b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5b6:	4288      	cmp	r0, r1
 800e5b8:	bf0c      	ite	eq
 800e5ba:	2300      	moveq	r3, #0
 800e5bc:	f003 0301 	andne.w	r3, r3, #1
 800e5c0:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800e5c4:	4290      	cmp	r0, r2
 800e5c6:	bf0c      	ite	eq
 800e5c8:	2300      	moveq	r3, #0
 800e5ca:	f003 0301 	andne.w	r3, r3, #1
 800e5ce:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800e5d2:	4288      	cmp	r0, r1
 800e5d4:	bf0c      	ite	eq
 800e5d6:	2300      	moveq	r3, #0
 800e5d8:	f003 0301 	andne.w	r3, r3, #1
 800e5dc:	4290      	cmp	r0, r2
 800e5de:	bf0c      	ite	eq
 800e5e0:	2300      	moveq	r3, #0
 800e5e2:	f003 0301 	andne.w	r3, r3, #1
 800e5e6:	b11b      	cbz	r3, 800e5f0 <HAL_TIM_OC_ConfigChannel+0x1a4>
 800e5e8:	4b54      	ldr	r3, [pc, #336]	; (800e73c <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800e5ea:	4298      	cmp	r0, r3
 800e5ec:	f040 808b 	bne.w	800e706 <HAL_TIM_OC_ConfigChannel+0x2ba>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e5f0:	4631      	mov	r1, r6
 800e5f2:	f7ff fec5 	bl	800e380 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800e5f6:	2000      	movs	r0, #0
      break;
 800e5f8:	e762      	b.n	800e4c0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800e5fa:	6828      	ldr	r0, [r5, #0]
 800e5fc:	4b4b      	ldr	r3, [pc, #300]	; (800e72c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800e5fe:	4a4c      	ldr	r2, [pc, #304]	; (800e730 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800e600:	4298      	cmp	r0, r3
 800e602:	bf18      	it	ne
 800e604:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e608:	494a      	ldr	r1, [pc, #296]	; (800e734 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800e60a:	bf14      	ite	ne
 800e60c:	2301      	movne	r3, #1
 800e60e:	2300      	moveq	r3, #0
 800e610:	4290      	cmp	r0, r2
 800e612:	bf0c      	ite	eq
 800e614:	2300      	moveq	r3, #0
 800e616:	f003 0301 	andne.w	r3, r3, #1
 800e61a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e61e:	4288      	cmp	r0, r1
 800e620:	bf0c      	ite	eq
 800e622:	2300      	moveq	r3, #0
 800e624:	f003 0301 	andne.w	r3, r3, #1
 800e628:	4290      	cmp	r0, r2
 800e62a:	bf0c      	ite	eq
 800e62c:	2300      	moveq	r3, #0
 800e62e:	f003 0301 	andne.w	r3, r3, #1
 800e632:	b113      	cbz	r3, 800e63a <HAL_TIM_OC_ConfigChannel+0x1ee>
 800e634:	4b42      	ldr	r3, [pc, #264]	; (800e740 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800e636:	4298      	cmp	r0, r3
 800e638:	d15e      	bne.n	800e6f8 <HAL_TIM_OC_ConfigChannel+0x2ac>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e63a:	4631      	mov	r1, r6
 800e63c:	f7fe f9b8 	bl	800c9b0 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800e640:	2000      	movs	r0, #0
      break;
 800e642:	e73d      	b.n	800e4c0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800e644:	6828      	ldr	r0, [r5, #0]
 800e646:	4b39      	ldr	r3, [pc, #228]	; (800e72c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800e648:	4a39      	ldr	r2, [pc, #228]	; (800e730 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800e64a:	4298      	cmp	r0, r3
 800e64c:	bf18      	it	ne
 800e64e:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e652:	4938      	ldr	r1, [pc, #224]	; (800e734 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800e654:	bf14      	ite	ne
 800e656:	2301      	movne	r3, #1
 800e658:	2300      	moveq	r3, #0
 800e65a:	4290      	cmp	r0, r2
 800e65c:	bf0c      	ite	eq
 800e65e:	2300      	moveq	r3, #0
 800e660:	f003 0301 	andne.w	r3, r3, #1
 800e664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e668:	4288      	cmp	r0, r1
 800e66a:	bf0c      	ite	eq
 800e66c:	2300      	moveq	r3, #0
 800e66e:	f003 0301 	andne.w	r3, r3, #1
 800e672:	4290      	cmp	r0, r2
 800e674:	bf0c      	ite	eq
 800e676:	2300      	moveq	r3, #0
 800e678:	f003 0301 	andne.w	r3, r3, #1
 800e67c:	b113      	cbz	r3, 800e684 <HAL_TIM_OC_ConfigChannel+0x238>
 800e67e:	4b30      	ldr	r3, [pc, #192]	; (800e740 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800e680:	4298      	cmp	r0, r3
 800e682:	d132      	bne.n	800e6ea <HAL_TIM_OC_ConfigChannel+0x29e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e684:	4631      	mov	r1, r6
 800e686:	f7fe f9f9 	bl	800ca7c <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800e68a:	2000      	movs	r0, #0
      break;
 800e68c:	e718      	b.n	800e4c0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800e68e:	6828      	ldr	r0, [r5, #0]
 800e690:	4b26      	ldr	r3, [pc, #152]	; (800e72c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800e692:	4298      	cmp	r0, r3
 800e694:	d003      	beq.n	800e69e <HAL_TIM_OC_ConfigChannel+0x252>
 800e696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e69a:	4298      	cmp	r0, r3
 800e69c:	d118      	bne.n	800e6d0 <HAL_TIM_OC_ConfigChannel+0x284>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e69e:	4631      	mov	r1, r6
 800e6a0:	f7fe f8ca 	bl	800c838 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800e6a4:	2000      	movs	r0, #0
      break;
 800e6a6:	e70b      	b.n	800e4c0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800e6a8:	6828      	ldr	r0, [r5, #0]
 800e6aa:	4b20      	ldr	r3, [pc, #128]	; (800e72c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800e6ac:	4298      	cmp	r0, r3
 800e6ae:	d003      	beq.n	800e6b8 <HAL_TIM_OC_ConfigChannel+0x26c>
 800e6b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e6b4:	4298      	cmp	r0, r3
 800e6b6:	d104      	bne.n	800e6c2 <HAL_TIM_OC_ConfigChannel+0x276>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	f7fe f8e9 	bl	800c890 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800e6be:	2000      	movs	r0, #0
      break;
 800e6c0:	e6fe      	b.n	800e4c0 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800e6c2:	4819      	ldr	r0, [pc, #100]	; (800e728 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800e6c4:	f241 011d 	movw	r1, #4125	; 0x101d
 800e6c8:	f7f5 fa3e 	bl	8003b48 <assert_failed>
 800e6cc:	6828      	ldr	r0, [r5, #0]
 800e6ce:	e7f3      	b.n	800e6b8 <HAL_TIM_OC_ConfigChannel+0x26c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800e6d0:	4815      	ldr	r0, [pc, #84]	; (800e728 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800e6d2:	f241 0113 	movw	r1, #4115	; 0x1013
 800e6d6:	f7f5 fa37 	bl	8003b48 <assert_failed>
 800e6da:	6828      	ldr	r0, [r5, #0]
 800e6dc:	e7df      	b.n	800e69e <HAL_TIM_OC_ConfigChannel+0x252>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800e6de:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 800e6e2:	4811      	ldr	r0, [pc, #68]	; (800e728 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800e6e4:	f7f5 fa30 	bl	8003b48 <assert_failed>
 800e6e8:	e6c5      	b.n	800e476 <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800e6ea:	480f      	ldr	r0, [pc, #60]	; (800e728 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800e6ec:	f241 0109 	movw	r1, #4105	; 0x1009
 800e6f0:	f7f5 fa2a 	bl	8003b48 <assert_failed>
 800e6f4:	6828      	ldr	r0, [r5, #0]
 800e6f6:	e7c5      	b.n	800e684 <HAL_TIM_OC_ConfigChannel+0x238>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800e6f8:	480b      	ldr	r0, [pc, #44]	; (800e728 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800e6fa:	f640 71ff 	movw	r1, #4095	; 0xfff
 800e6fe:	f7f5 fa23 	bl	8003b48 <assert_failed>
 800e702:	6828      	ldr	r0, [r5, #0]
 800e704:	e799      	b.n	800e63a <HAL_TIM_OC_ConfigChannel+0x1ee>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e706:	4808      	ldr	r0, [pc, #32]	; (800e728 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800e708:	f640 71f5 	movw	r1, #4085	; 0xff5
 800e70c:	f7f5 fa1c 	bl	8003b48 <assert_failed>
 800e710:	6828      	ldr	r0, [r5, #0]
 800e712:	e76d      	b.n	800e5f0 <HAL_TIM_OC_ConfigChannel+0x1a4>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e714:	4804      	ldr	r0, [pc, #16]	; (800e728 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800e716:	f640 71eb 	movw	r1, #4075	; 0xfeb
 800e71a:	f7f5 fa15 	bl	8003b48 <assert_failed>
 800e71e:	6828      	ldr	r0, [r5, #0]
 800e720:	e732      	b.n	800e588 <HAL_TIM_OC_ConfigChannel+0x13c>
 800e722:	bf00      	nop
 800e724:	00111111 	.word	0x00111111
 800e728:	08028be8 	.word	0x08028be8
 800e72c:	40010000 	.word	0x40010000
 800e730:	40000400 	.word	0x40000400
 800e734:	40000800 	.word	0x40000800
 800e738:	40002000 	.word	0x40002000
 800e73c:	40001800 	.word	0x40001800
 800e740:	40010400 	.word	0x40010400

0800e744 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800e744:	2a14      	cmp	r2, #20
{
 800e746:	b570      	push	{r4, r5, r6, lr}
 800e748:	4616      	mov	r6, r2
 800e74a:	4605      	mov	r5, r0
 800e74c:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800e74e:	d938      	bls.n	800e7c2 <HAL_TIM_PWM_ConfigChannel+0x7e>
 800e750:	2a3c      	cmp	r2, #60	; 0x3c
 800e752:	d13a      	bne.n	800e7ca <HAL_TIM_PWM_ConfigChannel+0x86>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800e754:	6822      	ldr	r2, [r4, #0]
 800e756:	4baa      	ldr	r3, [pc, #680]	; (800ea00 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800e758:	4013      	ands	r3, r2
 800e75a:	2b60      	cmp	r3, #96	; 0x60
 800e75c:	d004      	beq.n	800e768 <HAL_TIM_PWM_ConfigChannel+0x24>
 800e75e:	f022 0210 	bic.w	r2, r2, #16
 800e762:	4ba8      	ldr	r3, [pc, #672]	; (800ea04 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 800e764:	429a      	cmp	r2, r3
 800e766:	d14a      	bne.n	800e7fe <HAL_TIM_PWM_ConfigChannel+0xba>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800e768:	68a3      	ldr	r3, [r4, #8]
 800e76a:	f033 0302 	bics.w	r3, r3, #2
 800e76e:	d132      	bne.n	800e7d6 <HAL_TIM_PWM_ConfigChannel+0x92>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800e770:	6923      	ldr	r3, [r4, #16]
 800e772:	f033 0304 	bics.w	r3, r3, #4
 800e776:	d137      	bne.n	800e7e8 <HAL_TIM_PWM_ConfigChannel+0xa4>
  __HAL_LOCK(htim);
 800e778:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d03c      	beq.n	800e7fa <HAL_TIM_PWM_ConfigChannel+0xb6>
 800e780:	2301      	movs	r3, #1
 800e782:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 800e786:	2e14      	cmp	r6, #20
 800e788:	d816      	bhi.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x74>
 800e78a:	e8df f016 	tbh	[pc, r6, lsl #1]
 800e78e:	0075      	.short	0x0075
 800e790:	00150015 	.word	0x00150015
 800e794:	014b0015 	.word	0x014b0015
 800e798:	00150015 	.word	0x00150015
 800e79c:	00d20015 	.word	0x00d20015
 800e7a0:	00150015 	.word	0x00150015
 800e7a4:	01050015 	.word	0x01050015
 800e7a8:	00150015 	.word	0x00150015
 800e7ac:	003e0015 	.word	0x003e0015
 800e7b0:	00150015 	.word	0x00150015
 800e7b4:	00590015 	.word	0x00590015
  __HAL_LOCK(htim);
 800e7b8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800e7c0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800e7c2:	4b91      	ldr	r3, [pc, #580]	; (800ea08 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800e7c4:	40d3      	lsrs	r3, r2
 800e7c6:	07db      	lsls	r3, r3, #31
 800e7c8:	d4c4      	bmi.n	800e754 <HAL_TIM_PWM_ConfigChannel+0x10>
 800e7ca:	f241 01a7 	movw	r1, #4263	; 0x10a7
 800e7ce:	488f      	ldr	r0, [pc, #572]	; (800ea0c <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800e7d0:	f7f5 f9ba 	bl	8003b48 <assert_failed>
 800e7d4:	e7be      	b.n	800e754 <HAL_TIM_PWM_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800e7d6:	f241 01a9 	movw	r1, #4265	; 0x10a9
 800e7da:	488c      	ldr	r0, [pc, #560]	; (800ea0c <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800e7dc:	f7f5 f9b4 	bl	8003b48 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800e7e0:	6923      	ldr	r3, [r4, #16]
 800e7e2:	f033 0304 	bics.w	r3, r3, #4
 800e7e6:	d0c7      	beq.n	800e778 <HAL_TIM_PWM_ConfigChannel+0x34>
 800e7e8:	f241 01aa 	movw	r1, #4266	; 0x10aa
 800e7ec:	4887      	ldr	r0, [pc, #540]	; (800ea0c <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800e7ee:	f7f5 f9ab 	bl	8003b48 <assert_failed>
  __HAL_LOCK(htim);
 800e7f2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d1c2      	bne.n	800e780 <HAL_TIM_PWM_ConfigChannel+0x3c>
 800e7fa:	2002      	movs	r0, #2
}
 800e7fc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800e7fe:	f241 01a8 	movw	r1, #4264	; 0x10a8
 800e802:	4882      	ldr	r0, [pc, #520]	; (800ea0c <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800e804:	f7f5 f9a0 	bl	8003b48 <assert_failed>
 800e808:	e7ae      	b.n	800e768 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800e80a:	6828      	ldr	r0, [r5, #0]
 800e80c:	4b80      	ldr	r3, [pc, #512]	; (800ea10 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e80e:	4298      	cmp	r0, r3
 800e810:	d004      	beq.n	800e81c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800e812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e816:	4298      	cmp	r0, r3
 800e818:	f040 814c 	bne.w	800eab4 <HAL_TIM_PWM_ConfigChannel+0x370>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e81c:	4621      	mov	r1, r4
 800e81e:	f7fe f80b 	bl	800c838 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e822:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e824:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800e826:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e82a:	f041 0108 	orr.w	r1, r1, #8
 800e82e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e830:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e832:	f021 0104 	bic.w	r1, r1, #4
 800e836:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e83a:	4322      	orrs	r2, r4
 800e83c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e83e:	e7bc      	b.n	800e7ba <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800e840:	6828      	ldr	r0, [r5, #0]
 800e842:	4b73      	ldr	r3, [pc, #460]	; (800ea10 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e844:	4298      	cmp	r0, r3
 800e846:	d004      	beq.n	800e852 <HAL_TIM_PWM_ConfigChannel+0x10e>
 800e848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e84c:	4298      	cmp	r0, r3
 800e84e:	f040 812a 	bne.w	800eaa6 <HAL_TIM_PWM_ConfigChannel+0x362>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e852:	4621      	mov	r1, r4
 800e854:	f7fe f81c 	bl	800c890 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e858:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e85a:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800e85c:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e85e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e860:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800e864:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e866:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e868:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800e86c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e86e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e870:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800e874:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e876:	e7a0      	b.n	800e7ba <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e878:	6828      	ldr	r0, [r5, #0]
 800e87a:	4b65      	ldr	r3, [pc, #404]	; (800ea10 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e87c:	4a65      	ldr	r2, [pc, #404]	; (800ea14 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800e87e:	4298      	cmp	r0, r3
 800e880:	bf18      	it	ne
 800e882:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e886:	4964      	ldr	r1, [pc, #400]	; (800ea18 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800e888:	bf14      	ite	ne
 800e88a:	2301      	movne	r3, #1
 800e88c:	2300      	moveq	r3, #0
 800e88e:	4290      	cmp	r0, r2
 800e890:	bf0c      	ite	eq
 800e892:	2300      	moveq	r3, #0
 800e894:	f003 0301 	andne.w	r3, r3, #1
 800e898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e89c:	4288      	cmp	r0, r1
 800e89e:	bf0c      	ite	eq
 800e8a0:	2300      	moveq	r3, #0
 800e8a2:	f003 0301 	andne.w	r3, r3, #1
 800e8a6:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800e8aa:	4290      	cmp	r0, r2
 800e8ac:	bf0c      	ite	eq
 800e8ae:	2300      	moveq	r3, #0
 800e8b0:	f003 0301 	andne.w	r3, r3, #1
 800e8b4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800e8b8:	4288      	cmp	r0, r1
 800e8ba:	bf0c      	ite	eq
 800e8bc:	2300      	moveq	r3, #0
 800e8be:	f003 0301 	andne.w	r3, r3, #1
 800e8c2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800e8c6:	4290      	cmp	r0, r2
 800e8c8:	bf0c      	ite	eq
 800e8ca:	2300      	moveq	r3, #0
 800e8cc:	f003 0301 	andne.w	r3, r3, #1
 800e8d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8d4:	4288      	cmp	r0, r1
 800e8d6:	bf0c      	ite	eq
 800e8d8:	2300      	moveq	r3, #0
 800e8da:	f003 0301 	andne.w	r3, r3, #1
 800e8de:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800e8e2:	4290      	cmp	r0, r2
 800e8e4:	bf0c      	ite	eq
 800e8e6:	2300      	moveq	r3, #0
 800e8e8:	f003 0301 	andne.w	r3, r3, #1
 800e8ec:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800e8f0:	4288      	cmp	r0, r1
 800e8f2:	bf0c      	ite	eq
 800e8f4:	2300      	moveq	r3, #0
 800e8f6:	f003 0301 	andne.w	r3, r3, #1
 800e8fa:	4290      	cmp	r0, r2
 800e8fc:	bf0c      	ite	eq
 800e8fe:	2300      	moveq	r3, #0
 800e900:	f003 0301 	andne.w	r3, r3, #1
 800e904:	b11b      	cbz	r3, 800e90e <HAL_TIM_PWM_ConfigChannel+0x1ca>
 800e906:	4b45      	ldr	r3, [pc, #276]	; (800ea1c <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 800e908:	4298      	cmp	r0, r3
 800e90a:	f040 80ef 	bne.w	800eaec <HAL_TIM_PWM_ConfigChannel+0x3a8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e90e:	4621      	mov	r1, r4
 800e910:	f7fd ffea 	bl	800c8e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e914:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e916:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800e918:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e91a:	6999      	ldr	r1, [r3, #24]
 800e91c:	f041 0108 	orr.w	r1, r1, #8
 800e920:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e922:	6999      	ldr	r1, [r3, #24]
 800e924:	f021 0104 	bic.w	r1, r1, #4
 800e928:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e92a:	699a      	ldr	r2, [r3, #24]
 800e92c:	4322      	orrs	r2, r4
 800e92e:	619a      	str	r2, [r3, #24]
      break;
 800e930:	e743      	b.n	800e7ba <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800e932:	6828      	ldr	r0, [r5, #0]
 800e934:	4b36      	ldr	r3, [pc, #216]	; (800ea10 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e936:	4a37      	ldr	r2, [pc, #220]	; (800ea14 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800e938:	4298      	cmp	r0, r3
 800e93a:	bf18      	it	ne
 800e93c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e940:	4935      	ldr	r1, [pc, #212]	; (800ea18 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800e942:	bf14      	ite	ne
 800e944:	2301      	movne	r3, #1
 800e946:	2300      	moveq	r3, #0
 800e948:	4290      	cmp	r0, r2
 800e94a:	bf0c      	ite	eq
 800e94c:	2300      	moveq	r3, #0
 800e94e:	f003 0301 	andne.w	r3, r3, #1
 800e952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e956:	4288      	cmp	r0, r1
 800e958:	bf0c      	ite	eq
 800e95a:	2300      	moveq	r3, #0
 800e95c:	f003 0301 	andne.w	r3, r3, #1
 800e960:	4290      	cmp	r0, r2
 800e962:	bf0c      	ite	eq
 800e964:	2300      	moveq	r3, #0
 800e966:	f003 0301 	andne.w	r3, r3, #1
 800e96a:	b11b      	cbz	r3, 800e974 <HAL_TIM_PWM_ConfigChannel+0x230>
 800e96c:	4b2c      	ldr	r3, [pc, #176]	; (800ea20 <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 800e96e:	4298      	cmp	r0, r3
 800e970:	f040 80ae 	bne.w	800ead0 <HAL_TIM_PWM_ConfigChannel+0x38c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e974:	4621      	mov	r1, r4
 800e976:	f7fe f81b 	bl	800c9b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e97a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e97c:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800e97e:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e980:	69d9      	ldr	r1, [r3, #28]
 800e982:	f041 0108 	orr.w	r1, r1, #8
 800e986:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e988:	69d9      	ldr	r1, [r3, #28]
 800e98a:	f021 0104 	bic.w	r1, r1, #4
 800e98e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e990:	69da      	ldr	r2, [r3, #28]
 800e992:	4322      	orrs	r2, r4
 800e994:	61da      	str	r2, [r3, #28]
      break;
 800e996:	e710      	b.n	800e7ba <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800e998:	6828      	ldr	r0, [r5, #0]
 800e99a:	4b1d      	ldr	r3, [pc, #116]	; (800ea10 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e99c:	4a1d      	ldr	r2, [pc, #116]	; (800ea14 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800e99e:	4298      	cmp	r0, r3
 800e9a0:	bf18      	it	ne
 800e9a2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e9a6:	491c      	ldr	r1, [pc, #112]	; (800ea18 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800e9a8:	bf14      	ite	ne
 800e9aa:	2301      	movne	r3, #1
 800e9ac:	2300      	moveq	r3, #0
 800e9ae:	4290      	cmp	r0, r2
 800e9b0:	bf0c      	ite	eq
 800e9b2:	2300      	moveq	r3, #0
 800e9b4:	f003 0301 	andne.w	r3, r3, #1
 800e9b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9bc:	4288      	cmp	r0, r1
 800e9be:	bf0c      	ite	eq
 800e9c0:	2300      	moveq	r3, #0
 800e9c2:	f003 0301 	andne.w	r3, r3, #1
 800e9c6:	4290      	cmp	r0, r2
 800e9c8:	bf0c      	ite	eq
 800e9ca:	2300      	moveq	r3, #0
 800e9cc:	f003 0301 	andne.w	r3, r3, #1
 800e9d0:	b113      	cbz	r3, 800e9d8 <HAL_TIM_PWM_ConfigChannel+0x294>
 800e9d2:	4b13      	ldr	r3, [pc, #76]	; (800ea20 <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 800e9d4:	4298      	cmp	r0, r3
 800e9d6:	d174      	bne.n	800eac2 <HAL_TIM_PWM_ConfigChannel+0x37e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e9d8:	4621      	mov	r1, r4
 800e9da:	f7fe f84f 	bl	800ca7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e9de:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e9e0:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800e9e2:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e9e4:	69d9      	ldr	r1, [r3, #28]
 800e9e6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800e9ea:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e9ec:	69d9      	ldr	r1, [r3, #28]
 800e9ee:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800e9f2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e9f4:	69da      	ldr	r2, [r3, #28]
 800e9f6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800e9fa:	61da      	str	r2, [r3, #28]
      break;
 800e9fc:	e6dd      	b.n	800e7ba <HAL_TIM_PWM_ConfigChannel+0x76>
 800e9fe:	bf00      	nop
 800ea00:	fffeffef 	.word	0xfffeffef
 800ea04:	00010040 	.word	0x00010040
 800ea08:	00111111 	.word	0x00111111
 800ea0c:	08028be8 	.word	0x08028be8
 800ea10:	40010000 	.word	0x40010000
 800ea14:	40000400 	.word	0x40000400
 800ea18:	40000800 	.word	0x40000800
 800ea1c:	40002000 	.word	0x40002000
 800ea20:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ea24:	6828      	ldr	r0, [r5, #0]
 800ea26:	4b35      	ldr	r3, [pc, #212]	; (800eafc <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 800ea28:	4a35      	ldr	r2, [pc, #212]	; (800eb00 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 800ea2a:	4298      	cmp	r0, r3
 800ea2c:	bf18      	it	ne
 800ea2e:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800ea32:	4934      	ldr	r1, [pc, #208]	; (800eb04 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 800ea34:	bf14      	ite	ne
 800ea36:	2301      	movne	r3, #1
 800ea38:	2300      	moveq	r3, #0
 800ea3a:	4290      	cmp	r0, r2
 800ea3c:	bf0c      	ite	eq
 800ea3e:	2300      	moveq	r3, #0
 800ea40:	f003 0301 	andne.w	r3, r3, #1
 800ea44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea48:	4288      	cmp	r0, r1
 800ea4a:	bf0c      	ite	eq
 800ea4c:	2300      	moveq	r3, #0
 800ea4e:	f003 0301 	andne.w	r3, r3, #1
 800ea52:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800ea56:	4290      	cmp	r0, r2
 800ea58:	bf0c      	ite	eq
 800ea5a:	2300      	moveq	r3, #0
 800ea5c:	f003 0301 	andne.w	r3, r3, #1
 800ea60:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800ea64:	4288      	cmp	r0, r1
 800ea66:	bf0c      	ite	eq
 800ea68:	2300      	moveq	r3, #0
 800ea6a:	f003 0301 	andne.w	r3, r3, #1
 800ea6e:	4290      	cmp	r0, r2
 800ea70:	bf0c      	ite	eq
 800ea72:	2300      	moveq	r3, #0
 800ea74:	f003 0301 	andne.w	r3, r3, #1
 800ea78:	b113      	cbz	r3, 800ea80 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800ea7a:	4b23      	ldr	r3, [pc, #140]	; (800eb08 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800ea7c:	4298      	cmp	r0, r3
 800ea7e:	d12e      	bne.n	800eade <HAL_TIM_PWM_ConfigChannel+0x39a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ea80:	4621      	mov	r1, r4
 800ea82:	f7ff fc7d 	bl	800e380 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ea86:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ea88:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800ea8a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ea8c:	6999      	ldr	r1, [r3, #24]
 800ea8e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800ea92:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ea94:	6999      	ldr	r1, [r3, #24]
 800ea96:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800ea9a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ea9c:	699a      	ldr	r2, [r3, #24]
 800ea9e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800eaa2:	619a      	str	r2, [r3, #24]
      break;
 800eaa4:	e689      	b.n	800e7ba <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800eaa6:	4819      	ldr	r0, [pc, #100]	; (800eb0c <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800eaa8:	f241 1109 	movw	r1, #4361	; 0x1109
 800eaac:	f7f5 f84c 	bl	8003b48 <assert_failed>
 800eab0:	6828      	ldr	r0, [r5, #0]
 800eab2:	e6ce      	b.n	800e852 <HAL_TIM_PWM_ConfigChannel+0x10e>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800eab4:	4815      	ldr	r0, [pc, #84]	; (800eb0c <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800eab6:	f241 01f8 	movw	r1, #4344	; 0x10f8
 800eaba:	f7f5 f845 	bl	8003b48 <assert_failed>
 800eabe:	6828      	ldr	r0, [r5, #0]
 800eac0:	e6ac      	b.n	800e81c <HAL_TIM_PWM_ConfigChannel+0xd8>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800eac2:	4812      	ldr	r0, [pc, #72]	; (800eb0c <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800eac4:	f241 01e7 	movw	r1, #4327	; 0x10e7
 800eac8:	f7f5 f83e 	bl	8003b48 <assert_failed>
 800eacc:	6828      	ldr	r0, [r5, #0]
 800eace:	e783      	b.n	800e9d8 <HAL_TIM_PWM_ConfigChannel+0x294>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800ead0:	480e      	ldr	r0, [pc, #56]	; (800eb0c <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800ead2:	f241 01d6 	movw	r1, #4310	; 0x10d6
 800ead6:	f7f5 f837 	bl	8003b48 <assert_failed>
 800eada:	6828      	ldr	r0, [r5, #0]
 800eadc:	e74a      	b.n	800e974 <HAL_TIM_PWM_ConfigChannel+0x230>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800eade:	480b      	ldr	r0, [pc, #44]	; (800eb0c <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800eae0:	f241 01c5 	movw	r1, #4293	; 0x10c5
 800eae4:	f7f5 f830 	bl	8003b48 <assert_failed>
 800eae8:	6828      	ldr	r0, [r5, #0]
 800eaea:	e7c9      	b.n	800ea80 <HAL_TIM_PWM_ConfigChannel+0x33c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800eaec:	4807      	ldr	r0, [pc, #28]	; (800eb0c <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800eaee:	f241 01b4 	movw	r1, #4276	; 0x10b4
 800eaf2:	f7f5 f829 	bl	8003b48 <assert_failed>
 800eaf6:	6828      	ldr	r0, [r5, #0]
 800eaf8:	e709      	b.n	800e90e <HAL_TIM_PWM_ConfigChannel+0x1ca>
 800eafa:	bf00      	nop
 800eafc:	40010000 	.word	0x40010000
 800eb00:	40000400 	.word	0x40000400
 800eb04:	40000800 	.word	0x40000800
 800eb08:	40001800 	.word	0x40001800
 800eb0c:	08028be8 	.word	0x08028be8

0800eb10 <TIM_TI1_SetConfig>:
{
 800eb10:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb12:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800eb14:	4e1b      	ldr	r6, [pc, #108]	; (800eb84 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb16:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800eb1a:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb1c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb1e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800eb20:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800eb22:	d01d      	beq.n	800eb60 <TIM_TI1_SetConfig+0x50>
 800eb24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800eb28:	d01a      	beq.n	800eb60 <TIM_TI1_SetConfig+0x50>
 800eb2a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800eb2e:	42b0      	cmp	r0, r6
 800eb30:	d016      	beq.n	800eb60 <TIM_TI1_SetConfig+0x50>
 800eb32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800eb36:	42b0      	cmp	r0, r6
 800eb38:	d012      	beq.n	800eb60 <TIM_TI1_SetConfig+0x50>
 800eb3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800eb3e:	42b0      	cmp	r0, r6
 800eb40:	d00e      	beq.n	800eb60 <TIM_TI1_SetConfig+0x50>
 800eb42:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800eb46:	42b0      	cmp	r0, r6
 800eb48:	d00a      	beq.n	800eb60 <TIM_TI1_SetConfig+0x50>
 800eb4a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800eb4e:	42b0      	cmp	r0, r6
 800eb50:	d006      	beq.n	800eb60 <TIM_TI1_SetConfig+0x50>
 800eb52:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800eb56:	42b0      	cmp	r0, r6
 800eb58:	d002      	beq.n	800eb60 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800eb5a:	f044 0201 	orr.w	r2, r4, #1
 800eb5e:	e002      	b.n	800eb66 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800eb60:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800eb64:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800eb66:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eb68:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eb6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800eb70:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800eb74:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800eb76:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800eb78:	4313      	orrs	r3, r2
}
 800eb7a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 800eb7c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800eb7e:	6201      	str	r1, [r0, #32]
}
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	40010000 	.word	0x40010000

0800eb88 <HAL_TIM_IC_ConfigChannel>:
{
 800eb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb8a:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800eb8c:	4ba5      	ldr	r3, [pc, #660]	; (800ee24 <HAL_TIM_IC_ConfigChannel+0x29c>)
{
 800eb8e:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800eb90:	4fa5      	ldr	r7, [pc, #660]	; (800ee28 <HAL_TIM_IC_ConfigChannel+0x2a0>)
 800eb92:	6829      	ldr	r1, [r5, #0]
{
 800eb94:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800eb96:	48a5      	ldr	r0, [pc, #660]	; (800ee2c <HAL_TIM_IC_ConfigChannel+0x2a4>)
 800eb98:	4299      	cmp	r1, r3
 800eb9a:	bf18      	it	ne
 800eb9c:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800eba0:	4aa3      	ldr	r2, [pc, #652]	; (800ee30 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 800eba2:	bf14      	ite	ne
 800eba4:	2301      	movne	r3, #1
 800eba6:	2300      	moveq	r3, #0
 800eba8:	42b9      	cmp	r1, r7
 800ebaa:	bf0c      	ite	eq
 800ebac:	2300      	moveq	r3, #0
 800ebae:	f003 0301 	andne.w	r3, r3, #1
 800ebb2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800ebb6:	4281      	cmp	r1, r0
 800ebb8:	bf0c      	ite	eq
 800ebba:	2300      	moveq	r3, #0
 800ebbc:	f003 0301 	andne.w	r3, r3, #1
 800ebc0:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
 800ebc4:	4291      	cmp	r1, r2
 800ebc6:	bf0c      	ite	eq
 800ebc8:	2300      	moveq	r3, #0
 800ebca:	f003 0301 	andne.w	r3, r3, #1
 800ebce:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800ebd2:	42b9      	cmp	r1, r7
 800ebd4:	bf0c      	ite	eq
 800ebd6:	2300      	moveq	r3, #0
 800ebd8:	f003 0301 	andne.w	r3, r3, #1
 800ebdc:	f507 4788 	add.w	r7, r7, #17408	; 0x4400
 800ebe0:	4281      	cmp	r1, r0
 800ebe2:	bf0c      	ite	eq
 800ebe4:	2300      	moveq	r3, #0
 800ebe6:	f003 0301 	andne.w	r3, r3, #1
 800ebea:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800ebee:	4291      	cmp	r1, r2
 800ebf0:	bf0c      	ite	eq
 800ebf2:	2300      	moveq	r3, #0
 800ebf4:	f003 0301 	andne.w	r3, r3, #1
 800ebf8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ebfc:	42b9      	cmp	r1, r7
 800ebfe:	bf0c      	ite	eq
 800ec00:	2300      	moveq	r3, #0
 800ec02:	f003 0301 	andne.w	r3, r3, #1
 800ec06:	4281      	cmp	r1, r0
 800ec08:	bf0c      	ite	eq
 800ec0a:	2300      	moveq	r3, #0
 800ec0c:	f003 0301 	andne.w	r3, r3, #1
 800ec10:	4291      	cmp	r1, r2
 800ec12:	bf0c      	ite	eq
 800ec14:	2300      	moveq	r3, #0
 800ec16:	f003 0301 	andne.w	r3, r3, #1
 800ec1a:	b11b      	cbz	r3, 800ec24 <HAL_TIM_IC_ConfigChannel+0x9c>
 800ec1c:	4b85      	ldr	r3, [pc, #532]	; (800ee34 <HAL_TIM_IC_ConfigChannel+0x2ac>)
 800ec1e:	4299      	cmp	r1, r3
 800ec20:	f040 8156 	bne.w	800eed0 <HAL_TIM_IC_ConfigChannel+0x348>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	f033 0202 	bics.w	r2, r3, #2
 800ec2a:	d001      	beq.n	800ec30 <HAL_TIM_IC_ConfigChannel+0xa8>
 800ec2c:	2b0a      	cmp	r3, #10
 800ec2e:	d11e      	bne.n	800ec6e <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800ec30:	6863      	ldr	r3, [r4, #4]
 800ec32:	3b01      	subs	r3, #1
 800ec34:	2b02      	cmp	r3, #2
 800ec36:	d823      	bhi.n	800ec80 <HAL_TIM_IC_ConfigChannel+0xf8>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800ec38:	68a3      	ldr	r3, [r4, #8]
 800ec3a:	f033 030c 	bics.w	r3, r3, #12
 800ec3e:	d128      	bne.n	800ec92 <HAL_TIM_IC_ConfigChannel+0x10a>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800ec40:	68e3      	ldr	r3, [r4, #12]
 800ec42:	2b0f      	cmp	r3, #15
 800ec44:	d82d      	bhi.n	800eca2 <HAL_TIM_IC_ConfigChannel+0x11a>
  __HAL_LOCK(htim);
 800ec46:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d032      	beq.n	800ecb4 <HAL_TIM_IC_ConfigChannel+0x12c>
 800ec4e:	2001      	movs	r0, #1
 800ec50:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800ec54:	b386      	cbz	r6, 800ecb8 <HAL_TIM_IC_ConfigChannel+0x130>
  else if (Channel == TIM_CHANNEL_2)
 800ec56:	2e04      	cmp	r6, #4
 800ec58:	d042      	beq.n	800ece0 <HAL_TIM_IC_ConfigChannel+0x158>
  else if (Channel == TIM_CHANNEL_3)
 800ec5a:	2e08      	cmp	r6, #8
 800ec5c:	f000 80f2 	beq.w	800ee44 <HAL_TIM_IC_ConfigChannel+0x2bc>
  else if (Channel == TIM_CHANNEL_4)
 800ec60:	2e0c      	cmp	r6, #12
 800ec62:	f000 8094 	beq.w	800ed8e <HAL_TIM_IC_ConfigChannel+0x206>
  __HAL_UNLOCK(htim);
 800ec66:	2300      	movs	r3, #0
 800ec68:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800ec6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800ec6e:	f241 0141 	movw	r1, #4161	; 0x1041
 800ec72:	4871      	ldr	r0, [pc, #452]	; (800ee38 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800ec74:	f7f4 ff68 	bl	8003b48 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800ec78:	6863      	ldr	r3, [r4, #4]
 800ec7a:	3b01      	subs	r3, #1
 800ec7c:	2b02      	cmp	r3, #2
 800ec7e:	d9db      	bls.n	800ec38 <HAL_TIM_IC_ConfigChannel+0xb0>
 800ec80:	f241 0142 	movw	r1, #4162	; 0x1042
 800ec84:	486c      	ldr	r0, [pc, #432]	; (800ee38 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800ec86:	f7f4 ff5f 	bl	8003b48 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800ec8a:	68a3      	ldr	r3, [r4, #8]
 800ec8c:	f033 030c 	bics.w	r3, r3, #12
 800ec90:	d0d6      	beq.n	800ec40 <HAL_TIM_IC_ConfigChannel+0xb8>
 800ec92:	f241 0143 	movw	r1, #4163	; 0x1043
 800ec96:	4868      	ldr	r0, [pc, #416]	; (800ee38 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800ec98:	f7f4 ff56 	bl	8003b48 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800ec9c:	68e3      	ldr	r3, [r4, #12]
 800ec9e:	2b0f      	cmp	r3, #15
 800eca0:	d9d1      	bls.n	800ec46 <HAL_TIM_IC_ConfigChannel+0xbe>
 800eca2:	f241 0144 	movw	r1, #4164	; 0x1044
 800eca6:	4864      	ldr	r0, [pc, #400]	; (800ee38 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800eca8:	f7f4 ff4e 	bl	8003b48 <assert_failed>
  __HAL_LOCK(htim);
 800ecac:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d1cc      	bne.n	800ec4e <HAL_TIM_IC_ConfigChannel+0xc6>
 800ecb4:	2002      	movs	r0, #2
}
 800ecb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800ecb8:	e9d4 1200 	ldrd	r1, r2, [r4]
 800ecbc:	68e3      	ldr	r3, [r4, #12]
 800ecbe:	6828      	ldr	r0, [r5, #0]
 800ecc0:	f7ff ff26 	bl	800eb10 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ecc4:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ecc6:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ecc8:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ecca:	6999      	ldr	r1, [r3, #24]
 800eccc:	f021 010c 	bic.w	r1, r1, #12
 800ecd0:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ecd2:	699a      	ldr	r2, [r3, #24]
 800ecd4:	4322      	orrs	r2, r4
 800ecd6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800ecd8:	2300      	movs	r3, #0
 800ecda:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 800ecde:	e7c5      	b.n	800ec6c <HAL_TIM_IC_ConfigChannel+0xe4>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ece0:	682a      	ldr	r2, [r5, #0]
 800ece2:	4b50      	ldr	r3, [pc, #320]	; (800ee24 <HAL_TIM_IC_ConfigChannel+0x29c>)
 800ece4:	4950      	ldr	r1, [pc, #320]	; (800ee28 <HAL_TIM_IC_ConfigChannel+0x2a0>)
 800ece6:	429a      	cmp	r2, r3
 800ece8:	bf18      	it	ne
 800ecea:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ecee:	484f      	ldr	r0, [pc, #316]	; (800ee2c <HAL_TIM_IC_ConfigChannel+0x2a4>)
 800ecf0:	bf14      	ite	ne
 800ecf2:	2301      	movne	r3, #1
 800ecf4:	2300      	moveq	r3, #0
 800ecf6:	428a      	cmp	r2, r1
 800ecf8:	bf0c      	ite	eq
 800ecfa:	2300      	moveq	r3, #0
 800ecfc:	f003 0301 	andne.w	r3, r3, #1
 800ed00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed04:	4282      	cmp	r2, r0
 800ed06:	bf0c      	ite	eq
 800ed08:	2300      	moveq	r3, #0
 800ed0a:	f003 0301 	andne.w	r3, r3, #1
 800ed0e:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800ed12:	428a      	cmp	r2, r1
 800ed14:	bf0c      	ite	eq
 800ed16:	2300      	moveq	r3, #0
 800ed18:	f003 0301 	andne.w	r3, r3, #1
 800ed1c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800ed20:	4282      	cmp	r2, r0
 800ed22:	bf0c      	ite	eq
 800ed24:	2300      	moveq	r3, #0
 800ed26:	f003 0301 	andne.w	r3, r3, #1
 800ed2a:	428a      	cmp	r2, r1
 800ed2c:	bf0c      	ite	eq
 800ed2e:	2300      	moveq	r3, #0
 800ed30:	f003 0301 	andne.w	r3, r3, #1
 800ed34:	b11b      	cbz	r3, 800ed3e <HAL_TIM_IC_ConfigChannel+0x1b6>
 800ed36:	4b41      	ldr	r3, [pc, #260]	; (800ee3c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	f040 80d6 	bne.w	800eeea <HAL_TIM_IC_ConfigChannel+0x362>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed3e:	6a11      	ldr	r1, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800ed40:	2000      	movs	r0, #0
    TIM_TI2_SetConfig(htim->Instance,
 800ed42:	6867      	ldr	r7, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed44:	f021 0110 	bic.w	r1, r1, #16
    TIM_TI2_SetConfig(htim->Instance,
 800ed48:	6826      	ldr	r6, [r4, #0]
 800ed4a:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed4c:	6211      	str	r1, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ed4e:	0136      	lsls	r6, r6, #4
  tmpccmr1 = TIMx->CCMR1;
 800ed50:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ed52:	031b      	lsls	r3, r3, #12
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ed54:	f006 06a0 	and.w	r6, r6, #160	; 0xa0
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ed58:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ed5a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ed5e:	b29b      	uxth	r3, r3
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ed60:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer = TIMx->CCER;
 800ed64:	6a17      	ldr	r7, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed66:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed6a:	f027 07a0 	bic.w	r7, r7, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ed6e:	430b      	orrs	r3, r1
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ed70:	433e      	orrs	r6, r7
  TIMx->CCMR1 = tmpccmr1 ;
 800ed72:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800ed74:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ed76:	6991      	ldr	r1, [r2, #24]
 800ed78:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800ed7c:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ed7e:	6993      	ldr	r3, [r2, #24]
 800ed80:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800ed84:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800ed86:	2300      	movs	r3, #0
 800ed88:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 800ed8c:	e76e      	b.n	800ec6c <HAL_TIM_IC_ConfigChannel+0xe4>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800ed8e:	682b      	ldr	r3, [r5, #0]
 800ed90:	4a24      	ldr	r2, [pc, #144]	; (800ee24 <HAL_TIM_IC_ConfigChannel+0x29c>)
 800ed92:	4925      	ldr	r1, [pc, #148]	; (800ee28 <HAL_TIM_IC_ConfigChannel+0x2a0>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	bf18      	it	ne
 800ed98:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ed9c:	4823      	ldr	r0, [pc, #140]	; (800ee2c <HAL_TIM_IC_ConfigChannel+0x2a4>)
 800ed9e:	bf14      	ite	ne
 800eda0:	2201      	movne	r2, #1
 800eda2:	2200      	moveq	r2, #0
 800eda4:	428b      	cmp	r3, r1
 800eda6:	bf0c      	ite	eq
 800eda8:	2200      	moveq	r2, #0
 800edaa:	f002 0201 	andne.w	r2, r2, #1
 800edae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edb2:	4283      	cmp	r3, r0
 800edb4:	bf0c      	ite	eq
 800edb6:	2200      	moveq	r2, #0
 800edb8:	f002 0201 	andne.w	r2, r2, #1
 800edbc:	428b      	cmp	r3, r1
 800edbe:	bf0c      	ite	eq
 800edc0:	2200      	moveq	r2, #0
 800edc2:	f002 0201 	andne.w	r2, r2, #1
 800edc6:	b142      	cbz	r2, 800edda <HAL_TIM_IC_ConfigChannel+0x252>
 800edc8:	4a1d      	ldr	r2, [pc, #116]	; (800ee40 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d005      	beq.n	800edda <HAL_TIM_IC_ConfigChannel+0x252>
 800edce:	f241 017a 	movw	r1, #4218	; 0x107a
 800edd2:	4819      	ldr	r0, [pc, #100]	; (800ee38 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800edd4:	f7f4 feb8 	bl	8003b48 <assert_failed>
 800edd8:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800edda:	6a19      	ldr	r1, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800eddc:	2000      	movs	r0, #0
    TIM_TI4_SetConfig(htim->Instance,
 800edde:	6867      	ldr	r7, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ede0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800ede4:	6826      	ldr	r6, [r4, #0]
 800ede6:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ede8:	6219      	str	r1, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800edea:	0336      	lsls	r6, r6, #12
  tmpccmr2 = TIMx->CCMR2;
 800edec:	69d9      	ldr	r1, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800edee:	0312      	lsls	r2, r2, #12
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800edf0:	f406 4620 	and.w	r6, r6, #40960	; 0xa000
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800edf4:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800edf6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800edfa:	b292      	uxth	r2, r2
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800edfc:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer = TIMx->CCER;
 800ee00:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ee02:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ee06:	f427 4720 	bic.w	r7, r7, #40960	; 0xa000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ee0a:	430a      	orrs	r2, r1
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ee0c:	433e      	orrs	r6, r7
  TIMx->CCMR2 = tmpccmr2;
 800ee0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ee10:	621e      	str	r6, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ee12:	69d9      	ldr	r1, [r3, #28]
 800ee14:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800ee18:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ee1a:	69da      	ldr	r2, [r3, #28]
 800ee1c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800ee20:	61da      	str	r2, [r3, #28]
 800ee22:	e720      	b.n	800ec66 <HAL_TIM_IC_ConfigChannel+0xde>
 800ee24:	40010000 	.word	0x40010000
 800ee28:	40000400 	.word	0x40000400
 800ee2c:	40000800 	.word	0x40000800
 800ee30:	40000c00 	.word	0x40000c00
 800ee34:	40002000 	.word	0x40002000
 800ee38:	08028be8 	.word	0x08028be8
 800ee3c:	40001800 	.word	0x40001800
 800ee40:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800ee44:	682b      	ldr	r3, [r5, #0]
 800ee46:	4a2c      	ldr	r2, [pc, #176]	; (800eef8 <HAL_TIM_IC_ConfigChannel+0x370>)
 800ee48:	492c      	ldr	r1, [pc, #176]	; (800eefc <HAL_TIM_IC_ConfigChannel+0x374>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	bf18      	it	ne
 800ee4e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ee52:	482b      	ldr	r0, [pc, #172]	; (800ef00 <HAL_TIM_IC_ConfigChannel+0x378>)
 800ee54:	bf14      	ite	ne
 800ee56:	2201      	movne	r2, #1
 800ee58:	2200      	moveq	r2, #0
 800ee5a:	428b      	cmp	r3, r1
 800ee5c:	bf0c      	ite	eq
 800ee5e:	2200      	moveq	r2, #0
 800ee60:	f002 0201 	andne.w	r2, r2, #1
 800ee64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee68:	4283      	cmp	r3, r0
 800ee6a:	bf0c      	ite	eq
 800ee6c:	2200      	moveq	r2, #0
 800ee6e:	f002 0201 	andne.w	r2, r2, #1
 800ee72:	428b      	cmp	r3, r1
 800ee74:	bf0c      	ite	eq
 800ee76:	2200      	moveq	r2, #0
 800ee78:	f002 0201 	andne.w	r2, r2, #1
 800ee7c:	b112      	cbz	r2, 800ee84 <HAL_TIM_IC_ConfigChannel+0x2fc>
 800ee7e:	4a21      	ldr	r2, [pc, #132]	; (800ef04 <HAL_TIM_IC_ConfigChannel+0x37c>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d12b      	bne.n	800eedc <HAL_TIM_IC_ConfigChannel+0x354>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee84:	6a1f      	ldr	r7, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800ee86:	2000      	movs	r0, #0
    TIM_TI3_SetConfig(htim->Instance,
 800ee88:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee8a:	f427 7780 	bic.w	r7, r7, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800ee8e:	6861      	ldr	r1, [r4, #4]
 800ee90:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ee92:	0236      	lsls	r6, r6, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee94:	621f      	str	r7, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ee96:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ee98:	0112      	lsls	r2, r2, #4
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ee9a:	f406 6620 	and.w	r6, r6, #2560	; 0xa00
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ee9e:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800eea0:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800eea4:	b2d2      	uxtb	r2, r2
  tmpccmr2 |= TIM_ICSelection;
 800eea6:	4339      	orrs	r1, r7
  tmpccer = TIMx->CCER;
 800eea8:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800eeaa:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800eeae:	f427 6720 	bic.w	r7, r7, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800eeb2:	430a      	orrs	r2, r1
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800eeb4:	433e      	orrs	r6, r7
  TIMx->CCMR2 = tmpccmr2;
 800eeb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800eeb8:	621e      	str	r6, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800eeba:	69d9      	ldr	r1, [r3, #28]
 800eebc:	f021 010c 	bic.w	r1, r1, #12
 800eec0:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800eec2:	69da      	ldr	r2, [r3, #28]
 800eec4:	4322      	orrs	r2, r4
 800eec6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800eec8:	2300      	movs	r3, #0
 800eeca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 800eece:	e6cd      	b.n	800ec6c <HAL_TIM_IC_ConfigChannel+0xe4>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800eed0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800eed4:	480c      	ldr	r0, [pc, #48]	; (800ef08 <HAL_TIM_IC_ConfigChannel+0x380>)
 800eed6:	f7f4 fe37 	bl	8003b48 <assert_failed>
 800eeda:	e6a3      	b.n	800ec24 <HAL_TIM_IC_ConfigChannel+0x9c>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800eedc:	f241 016a 	movw	r1, #4202	; 0x106a
 800eee0:	4809      	ldr	r0, [pc, #36]	; (800ef08 <HAL_TIM_IC_ConfigChannel+0x380>)
 800eee2:	f7f4 fe31 	bl	8003b48 <assert_failed>
 800eee6:	682b      	ldr	r3, [r5, #0]
 800eee8:	e7cc      	b.n	800ee84 <HAL_TIM_IC_ConfigChannel+0x2fc>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800eeea:	f241 015a 	movw	r1, #4186	; 0x105a
 800eeee:	4806      	ldr	r0, [pc, #24]	; (800ef08 <HAL_TIM_IC_ConfigChannel+0x380>)
 800eef0:	f7f4 fe2a 	bl	8003b48 <assert_failed>
 800eef4:	682a      	ldr	r2, [r5, #0]
 800eef6:	e722      	b.n	800ed3e <HAL_TIM_IC_ConfigChannel+0x1b6>
 800eef8:	40010000 	.word	0x40010000
 800eefc:	40000400 	.word	0x40000400
 800ef00:	40000800 	.word	0x40000800
 800ef04:	40010400 	.word	0x40010400
 800ef08:	08028be8 	.word	0x08028be8

0800ef0c <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800ef0c:	4b2b      	ldr	r3, [pc, #172]	; (800efbc <TIM_CCxChannelCmd+0xb0>)
 800ef0e:	4298      	cmp	r0, r3
{
 800ef10:	b530      	push	{r4, r5, lr}
 800ef12:	4604      	mov	r4, r0
 800ef14:	b083      	sub	sp, #12
 800ef16:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800ef18:	d031      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef1a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ef1e:	d02e      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef20:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800ef24:	4298      	cmp	r0, r3
 800ef26:	d02a      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef2c:	4298      	cmp	r0, r3
 800ef2e:	d026      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef34:	4298      	cmp	r0, r3
 800ef36:	d022      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef38:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800ef3c:	4298      	cmp	r0, r3
 800ef3e:	d01e      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef40:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800ef44:	4298      	cmp	r0, r3
 800ef46:	d01a      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef4c:	4298      	cmp	r0, r3
 800ef4e:	d016      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef54:	4298      	cmp	r0, r3
 800ef56:	d012      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef58:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800ef5c:	4298      	cmp	r0, r3
 800ef5e:	d00e      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef64:	4298      	cmp	r0, r3
 800ef66:	d00a      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef6c:	4298      	cmp	r0, r3
 800ef6e:	d006      	beq.n	800ef7e <TIM_CCxChannelCmd+0x72>
 800ef70:	f641 6199 	movw	r1, #7833	; 0x1e99
 800ef74:	4812      	ldr	r0, [pc, #72]	; (800efc0 <TIM_CCxChannelCmd+0xb4>)
 800ef76:	9201      	str	r2, [sp, #4]
 800ef78:	f7f4 fde6 	bl	8003b48 <assert_failed>
 800ef7c:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800ef7e:	2d14      	cmp	r5, #20
 800ef80:	d90f      	bls.n	800efa2 <TIM_CCxChannelCmd+0x96>
 800ef82:	2d3c      	cmp	r5, #60	; 0x3c
 800ef84:	d111      	bne.n	800efaa <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef86:	f005 051f 	and.w	r5, r5, #31
 800ef8a:	2001      	movs	r0, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ef8c:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef8e:	40a8      	lsls	r0, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef90:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 800ef92:	ea23 0300 	bic.w	r3, r3, r0
 800ef96:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef98:	6a25      	ldr	r5, [r4, #32]
 800ef9a:	4315      	orrs	r5, r2
 800ef9c:	6225      	str	r5, [r4, #32]
}
 800ef9e:	b003      	add	sp, #12
 800efa0:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800efa2:	4b08      	ldr	r3, [pc, #32]	; (800efc4 <TIM_CCxChannelCmd+0xb8>)
 800efa4:	40eb      	lsrs	r3, r5
 800efa6:	07db      	lsls	r3, r3, #31
 800efa8:	d4ed      	bmi.n	800ef86 <TIM_CCxChannelCmd+0x7a>
 800efaa:	f641 619a 	movw	r1, #7834	; 0x1e9a
 800efae:	4804      	ldr	r0, [pc, #16]	; (800efc0 <TIM_CCxChannelCmd+0xb4>)
 800efb0:	9201      	str	r2, [sp, #4]
 800efb2:	f7f4 fdc9 	bl	8003b48 <assert_failed>
 800efb6:	9a01      	ldr	r2, [sp, #4]
 800efb8:	e7e5      	b.n	800ef86 <TIM_CCxChannelCmd+0x7a>
 800efba:	bf00      	nop
 800efbc:	40010000 	.word	0x40010000
 800efc0:	08028be8 	.word	0x08028be8
 800efc4:	00111111 	.word	0x00111111

0800efc8 <HAL_TIM_IC_Start_DMA>:
{
 800efc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efcc:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800efce:	460d      	mov	r5, r1
{
 800efd0:	4617      	mov	r7, r2
 800efd2:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800efd4:	2900      	cmp	r1, #0
 800efd6:	f040 8089 	bne.w	800f0ec <HAL_TIM_IC_Start_DMA+0x124>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800efda:	6803      	ldr	r3, [r0, #0]
 800efdc:	4a97      	ldr	r2, [pc, #604]	; (800f23c <HAL_TIM_IC_Start_DMA+0x274>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800efde:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800efe2:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800efe4:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800efe8:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800efea:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800efee:	d036      	beq.n	800f05e <HAL_TIM_IC_Start_DMA+0x96>
 800eff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eff4:	d033      	beq.n	800f05e <HAL_TIM_IC_Start_DMA+0x96>
 800eff6:	4a92      	ldr	r2, [pc, #584]	; (800f240 <HAL_TIM_IC_Start_DMA+0x278>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d030      	beq.n	800f05e <HAL_TIM_IC_Start_DMA+0x96>
 800effc:	4a91      	ldr	r2, [pc, #580]	; (800f244 <HAL_TIM_IC_Start_DMA+0x27c>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d068      	beq.n	800f0d4 <HAL_TIM_IC_Start_DMA+0x10c>
 800f002:	4a91      	ldr	r2, [pc, #580]	; (800f248 <HAL_TIM_IC_Start_DMA+0x280>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d065      	beq.n	800f0d4 <HAL_TIM_IC_Start_DMA+0x10c>
 800f008:	4a90      	ldr	r2, [pc, #576]	; (800f24c <HAL_TIM_IC_Start_DMA+0x284>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	f040 80be 	bne.w	800f18c <HAL_TIM_IC_Start_DMA+0x1c4>
 800f010:	2d14      	cmp	r5, #20
 800f012:	d864      	bhi.n	800f0de <HAL_TIM_IC_Start_DMA+0x116>
 800f014:	4a8e      	ldr	r2, [pc, #568]	; (800f250 <HAL_TIM_IC_Start_DMA+0x288>)
 800f016:	40ea      	lsrs	r2, r5
 800f018:	07d2      	lsls	r2, r2, #31
 800f01a:	d560      	bpl.n	800f0de <HAL_TIM_IC_Start_DMA+0x116>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800f01c:	4987      	ldr	r1, [pc, #540]	; (800f23c <HAL_TIM_IC_Start_DMA+0x274>)
 800f01e:	4a88      	ldr	r2, [pc, #544]	; (800f240 <HAL_TIM_IC_Start_DMA+0x278>)
 800f020:	428b      	cmp	r3, r1
 800f022:	bf18      	it	ne
 800f024:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f028:	4886      	ldr	r0, [pc, #536]	; (800f244 <HAL_TIM_IC_Start_DMA+0x27c>)
 800f02a:	bf14      	ite	ne
 800f02c:	2101      	movne	r1, #1
 800f02e:	2100      	moveq	r1, #0
 800f030:	4293      	cmp	r3, r2
 800f032:	bf0c      	ite	eq
 800f034:	2100      	moveq	r1, #0
 800f036:	f001 0101 	andne.w	r1, r1, #1
 800f03a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f03e:	4283      	cmp	r3, r0
 800f040:	bf0c      	ite	eq
 800f042:	2100      	moveq	r1, #0
 800f044:	f001 0101 	andne.w	r1, r1, #1
 800f048:	4293      	cmp	r3, r2
 800f04a:	bf0c      	ite	eq
 800f04c:	2100      	moveq	r1, #0
 800f04e:	f001 0101 	andne.w	r1, r1, #1
 800f052:	b121      	cbz	r1, 800f05e <HAL_TIM_IC_Start_DMA+0x96>
 800f054:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800f058:	4293      	cmp	r3, r2
 800f05a:	f040 808d 	bne.w	800f178 <HAL_TIM_IC_Start_DMA+0x1b0>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800f05e:	2e02      	cmp	r6, #2
 800f060:	d069      	beq.n	800f136 <HAL_TIM_IC_Start_DMA+0x16e>
 800f062:	f1b9 0f02 	cmp.w	r9, #2
 800f066:	d066      	beq.n	800f136 <HAL_TIM_IC_Start_DMA+0x16e>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800f068:	2e01      	cmp	r6, #1
 800f06a:	d106      	bne.n	800f07a <HAL_TIM_IC_Start_DMA+0xb2>
 800f06c:	f1b9 0f01 	cmp.w	r9, #1
 800f070:	d103      	bne.n	800f07a <HAL_TIM_IC_Start_DMA+0xb2>
    if ((pData == NULL) && (Length > 0U))
 800f072:	b92f      	cbnz	r7, 800f080 <HAL_TIM_IC_Start_DMA+0xb8>
 800f074:	f1b8 0f00 	cmp.w	r8, #0
 800f078:	d002      	beq.n	800f080 <HAL_TIM_IC_Start_DMA+0xb8>
    return HAL_ERROR;
 800f07a:	2001      	movs	r0, #1
}
 800f07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f080:	2302      	movs	r3, #2
 800f082:	2d00      	cmp	r5, #0
 800f084:	d05a      	beq.n	800f13c <HAL_TIM_IC_Start_DMA+0x174>
 800f086:	2d04      	cmp	r5, #4
 800f088:	f000 80b9 	beq.w	800f1fe <HAL_TIM_IC_Start_DMA+0x236>
 800f08c:	2d08      	cmp	r5, #8
 800f08e:	f000 8156 	beq.w	800f33e <HAL_TIM_IC_Start_DMA+0x376>
 800f092:	2d0c      	cmp	r5, #12
 800f094:	f000 8134 	beq.w	800f300 <HAL_TIM_IC_Start_DMA+0x338>
 800f098:	2d10      	cmp	r5, #16
 800f09a:	f000 80ef 	beq.w	800f27c <HAL_TIM_IC_Start_DMA+0x2b4>
 800f09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	4629      	mov	r1, r5
 800f0a6:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f0a8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f0ac:	f7ff ff2e 	bl	800ef0c <TIM_CCxChannelCmd>
  switch (Channel)
 800f0b0:	2d0c      	cmp	r5, #12
 800f0b2:	f200 80ec 	bhi.w	800f28e <HAL_TIM_IC_Start_DMA+0x2c6>
 800f0b6:	e8df f015 	tbh	[pc, r5, lsl #1]
 800f0ba:	004a      	.short	0x004a
 800f0bc:	00ea00ea 	.word	0x00ea00ea
 800f0c0:	00ab00ea 	.word	0x00ab00ea
 800f0c4:	00ea00ea 	.word	0x00ea00ea
 800f0c8:	014b00ea 	.word	0x014b00ea
 800f0cc:	00ea00ea 	.word	0x00ea00ea
 800f0d0:	012c00ea 	.word	0x012c00ea
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f0d4:	f035 0204 	bics.w	r2, r5, #4
 800f0d8:	d0a0      	beq.n	800f01c <HAL_TIM_IC_Start_DMA+0x54>
 800f0da:	2a08      	cmp	r2, #8
 800f0dc:	d09e      	beq.n	800f01c <HAL_TIM_IC_Start_DMA+0x54>
 800f0de:	f640 114a 	movw	r1, #2378	; 0x94a
 800f0e2:	485c      	ldr	r0, [pc, #368]	; (800f254 <HAL_TIM_IC_Start_DMA+0x28c>)
 800f0e4:	f7f4 fd30 	bl	8003b48 <assert_failed>
 800f0e8:	6823      	ldr	r3, [r4, #0]
 800f0ea:	e797      	b.n	800f01c <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f0ec:	2904      	cmp	r1, #4
 800f0ee:	d054      	beq.n	800f19a <HAL_TIM_IC_Start_DMA+0x1d2>
 800f0f0:	2908      	cmp	r1, #8
 800f0f2:	d07e      	beq.n	800f1f2 <HAL_TIM_IC_Start_DMA+0x22a>
 800f0f4:	290c      	cmp	r1, #12
 800f0f6:	d045      	beq.n	800f184 <HAL_TIM_IC_Start_DMA+0x1bc>
 800f0f8:	2910      	cmp	r1, #16
 800f0fa:	f000 813f 	beq.w	800f37c <HAL_TIM_IC_Start_DMA+0x3b4>
 800f0fe:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 800f102:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f104:	6823      	ldr	r3, [r4, #0]
 800f106:	4a4d      	ldr	r2, [pc, #308]	; (800f23c <HAL_TIM_IC_Start_DMA+0x274>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f108:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f10c:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f10e:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f112:	d05c      	beq.n	800f1ce <HAL_TIM_IC_Start_DMA+0x206>
 800f114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f118:	d04e      	beq.n	800f1b8 <HAL_TIM_IC_Start_DMA+0x1f0>
 800f11a:	4a49      	ldr	r2, [pc, #292]	; (800f240 <HAL_TIM_IC_Start_DMA+0x278>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	f47f af6d 	bne.w	800effc <HAL_TIM_IC_Start_DMA+0x34>
 800f122:	f035 020c 	bics.w	r2, r5, #12
 800f126:	d09a      	beq.n	800f05e <HAL_TIM_IC_Start_DMA+0x96>
 800f128:	4a4b      	ldr	r2, [pc, #300]	; (800f258 <HAL_TIM_IC_Start_DMA+0x290>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d1d7      	bne.n	800f0de <HAL_TIM_IC_Start_DMA+0x116>
 800f12e:	2d00      	cmp	r5, #0
 800f130:	f43f af74 	beq.w	800f01c <HAL_TIM_IC_Start_DMA+0x54>
 800f134:	e7d3      	b.n	800f0de <HAL_TIM_IC_Start_DMA+0x116>
    return HAL_BUSY;
 800f136:	2002      	movs	r0, #2
}
 800f138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f13c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f140:	4629      	mov	r1, r5
 800f142:	2201      	movs	r2, #1
 800f144:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f146:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f14a:	f7ff fedf 	bl	800ef0c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800f14e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800f150:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800f152:	4d42      	ldr	r5, [pc, #264]	; (800f25c <HAL_TIM_IC_Start_DMA+0x294>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800f154:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800f156:	4942      	ldr	r1, [pc, #264]	; (800f260 <HAL_TIM_IC_Start_DMA+0x298>)
 800f158:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800f15c:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f15e:	4d41      	ldr	r5, [pc, #260]	; (800f264 <HAL_TIM_IC_Start_DMA+0x29c>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800f160:	3134      	adds	r1, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f162:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800f164:	f7f8 fbe0 	bl	8007928 <HAL_DMA_Start_IT>
 800f168:	2800      	cmp	r0, #0
 800f16a:	d186      	bne.n	800f07a <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f16c:	6822      	ldr	r2, [r4, #0]
 800f16e:	68d3      	ldr	r3, [r2, #12]
 800f170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f174:	60d3      	str	r3, [r2, #12]
      break;
 800f176:	e08c      	b.n	800f292 <HAL_TIM_IC_Start_DMA+0x2ca>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800f178:	f640 114b 	movw	r1, #2379	; 0x94b
 800f17c:	4835      	ldr	r0, [pc, #212]	; (800f254 <HAL_TIM_IC_Start_DMA+0x28c>)
 800f17e:	f7f4 fce3 	bl	8003b48 <assert_failed>
 800f182:	e76c      	b.n	800f05e <HAL_TIM_IC_Start_DMA+0x96>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f184:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 800f188:	b2f6      	uxtb	r6, r6
 800f18a:	e7bb      	b.n	800f104 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f18c:	4a36      	ldr	r2, [pc, #216]	; (800f268 <HAL_TIM_IC_Start_DMA+0x2a0>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d125      	bne.n	800f1de <HAL_TIM_IC_Start_DMA+0x216>
 800f192:	f035 0204 	bics.w	r2, r5, #4
 800f196:	d1a2      	bne.n	800f0de <HAL_TIM_IC_Start_DMA+0x116>
 800f198:	e740      	b.n	800f01c <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f19a:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f19e:	6803      	ldr	r3, [r0, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f1a0:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f1a4:	4a25      	ldr	r2, [pc, #148]	; (800f23c <HAL_TIM_IC_Start_DMA+0x274>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f1a6:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f1a8:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	f43f af56 	beq.w	800f05e <HAL_TIM_IC_Start_DMA+0x96>
 800f1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1b6:	d1b0      	bne.n	800f11a <HAL_TIM_IC_Start_DMA+0x152>
 800f1b8:	f035 020c 	bics.w	r2, r5, #12
 800f1bc:	f43f af4f 	beq.w	800f05e <HAL_TIM_IC_Start_DMA+0x96>
 800f1c0:	4a2a      	ldr	r2, [pc, #168]	; (800f26c <HAL_TIM_IC_Start_DMA+0x2a4>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d1b0      	bne.n	800f128 <HAL_TIM_IC_Start_DMA+0x160>
 800f1c6:	2d00      	cmp	r5, #0
 800f1c8:	f43f af28 	beq.w	800f01c <HAL_TIM_IC_Start_DMA+0x54>
 800f1cc:	e787      	b.n	800f0de <HAL_TIM_IC_Start_DMA+0x116>
 800f1ce:	f025 0204 	bic.w	r2, r5, #4
 800f1d2:	2a08      	cmp	r2, #8
 800f1d4:	f43f af43 	beq.w	800f05e <HAL_TIM_IC_Start_DMA+0x96>
 800f1d8:	2a10      	cmp	r2, #16
 800f1da:	f43f af40 	beq.w	800f05e <HAL_TIM_IC_Start_DMA+0x96>
 800f1de:	4a24      	ldr	r2, [pc, #144]	; (800f270 <HAL_TIM_IC_Start_DMA+0x2a8>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d0a4      	beq.n	800f12e <HAL_TIM_IC_Start_DMA+0x166>
 800f1e4:	4a23      	ldr	r2, [pc, #140]	; (800f274 <HAL_TIM_IC_Start_DMA+0x2ac>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d0a1      	beq.n	800f12e <HAL_TIM_IC_Start_DMA+0x166>
 800f1ea:	4a23      	ldr	r2, [pc, #140]	; (800f278 <HAL_TIM_IC_Start_DMA+0x2b0>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d0d0      	beq.n	800f192 <HAL_TIM_IC_Start_DMA+0x1ca>
 800f1f0:	e7e6      	b.n	800f1c0 <HAL_TIM_IC_Start_DMA+0x1f8>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f1f2:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f1f6:	6803      	ldr	r3, [r0, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f1f8:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
 800f1fc:	e7d2      	b.n	800f1a4 <HAL_TIM_IC_Start_DMA+0x1dc>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1fe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f202:	4629      	mov	r1, r5
 800f204:	2201      	movs	r2, #1
 800f206:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f208:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f20c:	f7ff fe7e 	bl	800ef0c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800f210:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800f212:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800f214:	4d11      	ldr	r5, [pc, #68]	; (800f25c <HAL_TIM_IC_Start_DMA+0x294>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800f216:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800f218:	4911      	ldr	r1, [pc, #68]	; (800f260 <HAL_TIM_IC_Start_DMA+0x298>)
 800f21a:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800f21e:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f220:	4d10      	ldr	r5, [pc, #64]	; (800f264 <HAL_TIM_IC_Start_DMA+0x29c>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800f222:	3138      	adds	r1, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f224:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800f226:	f7f8 fb7f 	bl	8007928 <HAL_DMA_Start_IT>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	f47f af25 	bne.w	800f07a <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f230:	6822      	ldr	r2, [r4, #0]
 800f232:	68d3      	ldr	r3, [r2, #12]
 800f234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f238:	60d3      	str	r3, [r2, #12]
      break;
 800f23a:	e02a      	b.n	800f292 <HAL_TIM_IC_Start_DMA+0x2ca>
 800f23c:	40010000 	.word	0x40010000
 800f240:	40000400 	.word	0x40000400
 800f244:	40000800 	.word	0x40000800
 800f248:	40000c00 	.word	0x40000c00
 800f24c:	40010400 	.word	0x40010400
 800f250:	00111111 	.word	0x00111111
 800f254:	08028be8 	.word	0x08028be8
 800f258:	40002000 	.word	0x40002000
 800f25c:	0800d909 	.word	0x0800d909
 800f260:	0800d9a1 	.word	0x0800d9a1
 800f264:	0800db85 	.word	0x0800db85
 800f268:	40014000 	.word	0x40014000
 800f26c:	40001c00 	.word	0x40001c00
 800f270:	40014400 	.word	0x40014400
 800f274:	40014800 	.word	0x40014800
 800f278:	40001800 	.word	0x40001800
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f27c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f280:	4629      	mov	r1, r5
 800f282:	2201      	movs	r2, #1
 800f284:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f286:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f28a:	f7ff fe3f 	bl	800ef0c <TIM_CCxChannelCmd>
  switch (Channel)
 800f28e:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 800f290:	2001      	movs	r0, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f292:	4b3c      	ldr	r3, [pc, #240]	; (800f384 <HAL_TIM_IC_Start_DMA+0x3bc>)
 800f294:	4c3c      	ldr	r4, [pc, #240]	; (800f388 <HAL_TIM_IC_Start_DMA+0x3c0>)
 800f296:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f29a:	bf18      	it	ne
 800f29c:	429a      	cmpne	r2, r3
 800f29e:	493b      	ldr	r1, [pc, #236]	; (800f38c <HAL_TIM_IC_Start_DMA+0x3c4>)
 800f2a0:	4d3b      	ldr	r5, [pc, #236]	; (800f390 <HAL_TIM_IC_Start_DMA+0x3c8>)
 800f2a2:	bf0c      	ite	eq
 800f2a4:	2301      	moveq	r3, #1
 800f2a6:	2300      	movne	r3, #0
 800f2a8:	42a2      	cmp	r2, r4
 800f2aa:	bf08      	it	eq
 800f2ac:	f043 0301 	orreq.w	r3, r3, #1
 800f2b0:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800f2b4:	428a      	cmp	r2, r1
 800f2b6:	bf08      	it	eq
 800f2b8:	f043 0301 	orreq.w	r3, r3, #1
 800f2bc:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800f2c0:	42aa      	cmp	r2, r5
 800f2c2:	bf08      	it	eq
 800f2c4:	f043 0301 	orreq.w	r3, r3, #1
 800f2c8:	42a2      	cmp	r2, r4
 800f2ca:	bf08      	it	eq
 800f2cc:	f043 0301 	orreq.w	r3, r3, #1
 800f2d0:	428a      	cmp	r2, r1
 800f2d2:	bf08      	it	eq
 800f2d4:	f043 0301 	orreq.w	r3, r3, #1
 800f2d8:	b913      	cbnz	r3, 800f2e0 <HAL_TIM_IC_Start_DMA+0x318>
 800f2da:	4b2e      	ldr	r3, [pc, #184]	; (800f394 <HAL_TIM_IC_Start_DMA+0x3cc>)
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d109      	bne.n	800f2f4 <HAL_TIM_IC_Start_DMA+0x32c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2e0:	6891      	ldr	r1, [r2, #8]
 800f2e2:	4b2d      	ldr	r3, [pc, #180]	; (800f398 <HAL_TIM_IC_Start_DMA+0x3d0>)
 800f2e4:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2e6:	2b06      	cmp	r3, #6
 800f2e8:	f43f aec8 	beq.w	800f07c <HAL_TIM_IC_Start_DMA+0xb4>
 800f2ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2f0:	f43f aec4 	beq.w	800f07c <HAL_TIM_IC_Start_DMA+0xb4>
    __HAL_TIM_ENABLE(htim);
 800f2f4:	6813      	ldr	r3, [r2, #0]
 800f2f6:	f043 0301 	orr.w	r3, r3, #1
 800f2fa:	6013      	str	r3, [r2, #0]
}
 800f2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f300:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f304:	4629      	mov	r1, r5
 800f306:	2201      	movs	r2, #1
 800f308:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f30a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f30e:	f7ff fdfd 	bl	800ef0c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800f312:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800f314:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800f316:	4d21      	ldr	r5, [pc, #132]	; (800f39c <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800f318:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800f31a:	4921      	ldr	r1, [pc, #132]	; (800f3a0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 800f31c:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800f320:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f322:	4d20      	ldr	r5, [pc, #128]	; (800f3a4 <HAL_TIM_IC_Start_DMA+0x3dc>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800f324:	3140      	adds	r1, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f326:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800f328:	f7f8 fafe 	bl	8007928 <HAL_DMA_Start_IT>
 800f32c:	2800      	cmp	r0, #0
 800f32e:	f47f aea4 	bne.w	800f07a <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f332:	6822      	ldr	r2, [r4, #0]
 800f334:	68d3      	ldr	r3, [r2, #12]
 800f336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f33a:	60d3      	str	r3, [r2, #12]
      break;
 800f33c:	e7a9      	b.n	800f292 <HAL_TIM_IC_Start_DMA+0x2ca>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f33e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f342:	4629      	mov	r1, r5
 800f344:	2201      	movs	r2, #1
 800f346:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f348:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f34c:	f7ff fdde 	bl	800ef0c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800f350:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800f352:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800f354:	4d11      	ldr	r5, [pc, #68]	; (800f39c <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800f356:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800f358:	4911      	ldr	r1, [pc, #68]	; (800f3a0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 800f35a:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800f35e:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f360:	4d10      	ldr	r5, [pc, #64]	; (800f3a4 <HAL_TIM_IC_Start_DMA+0x3dc>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800f362:	313c      	adds	r1, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f364:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800f366:	f7f8 fadf 	bl	8007928 <HAL_DMA_Start_IT>
 800f36a:	2800      	cmp	r0, #0
 800f36c:	f47f ae85 	bne.w	800f07a <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f370:	6822      	ldr	r2, [r4, #0]
 800f372:	68d3      	ldr	r3, [r2, #12]
 800f374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f378:	60d3      	str	r3, [r2, #12]
      break;
 800f37a:	e78a      	b.n	800f292 <HAL_TIM_IC_Start_DMA+0x2ca>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f37c:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 800f380:	b2f6      	uxtb	r6, r6
 800f382:	e6bf      	b.n	800f104 <HAL_TIM_IC_Start_DMA+0x13c>
 800f384:	40010000 	.word	0x40010000
 800f388:	40000400 	.word	0x40000400
 800f38c:	40000800 	.word	0x40000800
 800f390:	40000c00 	.word	0x40000c00
 800f394:	40001800 	.word	0x40001800
 800f398:	00010007 	.word	0x00010007
 800f39c:	0800d909 	.word	0x0800d909
 800f3a0:	0800d9a1 	.word	0x0800d9a1
 800f3a4:	0800db85 	.word	0x0800db85

0800f3a8 <HAL_TIM_IC_Stop_DMA>:
{
 800f3a8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f3aa:	4b81      	ldr	r3, [pc, #516]	; (800f5b0 <HAL_TIM_IC_Stop_DMA+0x208>)
{
 800f3ac:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f3ae:	6800      	ldr	r0, [r0, #0]
{
 800f3b0:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f3b2:	4298      	cmp	r0, r3
 800f3b4:	f000 80cb 	beq.w	800f54e <HAL_TIM_IC_Stop_DMA+0x1a6>
 800f3b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800f3bc:	d055      	beq.n	800f46a <HAL_TIM_IC_Stop_DMA+0xc2>
 800f3be:	4b7d      	ldr	r3, [pc, #500]	; (800f5b4 <HAL_TIM_IC_Stop_DMA+0x20c>)
 800f3c0:	4298      	cmp	r0, r3
 800f3c2:	d052      	beq.n	800f46a <HAL_TIM_IC_Stop_DMA+0xc2>
 800f3c4:	4b7c      	ldr	r3, [pc, #496]	; (800f5b8 <HAL_TIM_IC_Stop_DMA+0x210>)
 800f3c6:	4298      	cmp	r0, r3
 800f3c8:	d04f      	beq.n	800f46a <HAL_TIM_IC_Stop_DMA+0xc2>
 800f3ca:	4b7c      	ldr	r3, [pc, #496]	; (800f5bc <HAL_TIM_IC_Stop_DMA+0x214>)
 800f3cc:	4298      	cmp	r0, r3
 800f3ce:	d04c      	beq.n	800f46a <HAL_TIM_IC_Stop_DMA+0xc2>
 800f3d0:	4b7b      	ldr	r3, [pc, #492]	; (800f5c0 <HAL_TIM_IC_Stop_DMA+0x218>)
 800f3d2:	4298      	cmp	r0, r3
 800f3d4:	f000 80bb 	beq.w	800f54e <HAL_TIM_IC_Stop_DMA+0x1a6>
 800f3d8:	4b7a      	ldr	r3, [pc, #488]	; (800f5c4 <HAL_TIM_IC_Stop_DMA+0x21c>)
 800f3da:	4298      	cmp	r0, r3
 800f3dc:	d00c      	beq.n	800f3f8 <HAL_TIM_IC_Stop_DMA+0x50>
 800f3de:	4b7a      	ldr	r3, [pc, #488]	; (800f5c8 <HAL_TIM_IC_Stop_DMA+0x220>)
 800f3e0:	4298      	cmp	r0, r3
 800f3e2:	f000 80d8 	beq.w	800f596 <HAL_TIM_IC_Stop_DMA+0x1ee>
 800f3e6:	4b79      	ldr	r3, [pc, #484]	; (800f5cc <HAL_TIM_IC_Stop_DMA+0x224>)
 800f3e8:	4298      	cmp	r0, r3
 800f3ea:	f000 80d4 	beq.w	800f596 <HAL_TIM_IC_Stop_DMA+0x1ee>
 800f3ee:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800f3f2:	4298      	cmp	r0, r3
 800f3f4:	f040 80c8 	bne.w	800f588 <HAL_TIM_IC_Stop_DMA+0x1e0>
 800f3f8:	f035 0304 	bics.w	r3, r5, #4
 800f3fc:	f000 80ce 	beq.w	800f59c <HAL_TIM_IC_Stop_DMA+0x1f4>
 800f400:	f640 11e5 	movw	r1, #2533	; 0x9e5
 800f404:	4872      	ldr	r0, [pc, #456]	; (800f5d0 <HAL_TIM_IC_Stop_DMA+0x228>)
 800f406:	f7f4 fb9f 	bl	8003b48 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800f40a:	6820      	ldr	r0, [r4, #0]
 800f40c:	4b68      	ldr	r3, [pc, #416]	; (800f5b0 <HAL_TIM_IC_Stop_DMA+0x208>)
 800f40e:	4a69      	ldr	r2, [pc, #420]	; (800f5b4 <HAL_TIM_IC_Stop_DMA+0x20c>)
 800f410:	4298      	cmp	r0, r3
 800f412:	bf18      	it	ne
 800f414:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f418:	4967      	ldr	r1, [pc, #412]	; (800f5b8 <HAL_TIM_IC_Stop_DMA+0x210>)
 800f41a:	bf14      	ite	ne
 800f41c:	2301      	movne	r3, #1
 800f41e:	2300      	moveq	r3, #0
 800f420:	4290      	cmp	r0, r2
 800f422:	bf0c      	ite	eq
 800f424:	2300      	moveq	r3, #0
 800f426:	f003 0301 	andne.w	r3, r3, #1
 800f42a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f42e:	4288      	cmp	r0, r1
 800f430:	bf0c      	ite	eq
 800f432:	2300      	moveq	r3, #0
 800f434:	f003 0301 	andne.w	r3, r3, #1
 800f438:	4290      	cmp	r0, r2
 800f43a:	bf0c      	ite	eq
 800f43c:	2300      	moveq	r3, #0
 800f43e:	f003 0301 	andne.w	r3, r3, #1
 800f442:	b11b      	cbz	r3, 800f44c <HAL_TIM_IC_Stop_DMA+0xa4>
 800f444:	4b5e      	ldr	r3, [pc, #376]	; (800f5c0 <HAL_TIM_IC_Stop_DMA+0x218>)
 800f446:	4298      	cmp	r0, r3
 800f448:	f040 80a8 	bne.w	800f59c <HAL_TIM_IC_Stop_DMA+0x1f4>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f44c:	2200      	movs	r2, #0
 800f44e:	4629      	mov	r1, r5
 800f450:	f7ff fd5c 	bl	800ef0c <TIM_CCxChannelCmd>
  switch (Channel)
 800f454:	2d0c      	cmp	r5, #12
 800f456:	d80c      	bhi.n	800f472 <HAL_TIM_IC_Stop_DMA+0xca>
 800f458:	e8df f005 	tbb	[pc, r5]
 800f45c:	0b0b0b0d 	.word	0x0b0b0b0d
 800f460:	0b0b0b64 	.word	0x0b0b0b64
 800f464:	0b0b0b4a 	.word	0x0b0b0b4a
 800f468:	22          	.byte	0x22
 800f469:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f46a:	f035 030c 	bics.w	r3, r5, #12
 800f46e:	d1c7      	bne.n	800f400 <HAL_TIM_IC_Stop_DMA+0x58>
 800f470:	e7ec      	b.n	800f44c <HAL_TIM_IC_Stop_DMA+0xa4>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f472:	2001      	movs	r0, #1
}
 800f474:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f476:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800f478:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f47a:	68d3      	ldr	r3, [r2, #12]
 800f47c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f480:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800f482:	f7f8 faf5 	bl	8007a70 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	f241 1211 	movw	r2, #4369	; 0x1111
 800f48c:	6a19      	ldr	r1, [r3, #32]
 800f48e:	4211      	tst	r1, r2
 800f490:	d06c      	beq.n	800f56c <HAL_TIM_IC_Stop_DMA+0x1c4>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f492:	2301      	movs	r3, #1
 800f494:	2000      	movs	r0, #0
 800f496:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f49a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800f49e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800f4a0:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800f4a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800f4a4:	68d3      	ldr	r3, [r2, #12]
 800f4a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4aa:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800f4ac:	f7f8 fae0 	bl	8007a70 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	f241 1211 	movw	r2, #4369	; 0x1111
 800f4b6:	6a19      	ldr	r1, [r3, #32]
 800f4b8:	4211      	tst	r1, r2
 800f4ba:	d161      	bne.n	800f580 <HAL_TIM_IC_Stop_DMA+0x1d8>
 800f4bc:	6a19      	ldr	r1, [r3, #32]
 800f4be:	f240 4244 	movw	r2, #1092	; 0x444
 800f4c2:	4211      	tst	r1, r2
 800f4c4:	d15c      	bne.n	800f580 <HAL_TIM_IC_Stop_DMA+0x1d8>
 800f4c6:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f4c8:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 800f4ca:	f022 0201 	bic.w	r2, r2, #1
 800f4ce:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f4d0:	d036      	beq.n	800f540 <HAL_TIM_IC_Stop_DMA+0x198>
 800f4d2:	2d08      	cmp	r5, #8
 800f4d4:	d01f      	beq.n	800f516 <HAL_TIM_IC_Stop_DMA+0x16e>
 800f4d6:	2d0c      	cmp	r5, #12
 800f4d8:	d052      	beq.n	800f580 <HAL_TIM_IC_Stop_DMA+0x1d8>
 800f4da:	2d10      	cmp	r5, #16
 800f4dc:	f04f 0301 	mov.w	r3, #1
 800f4e0:	d063      	beq.n	800f5aa <HAL_TIM_IC_Stop_DMA+0x202>
 800f4e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 800f4ee:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800f4f0:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800f4f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800f4f4:	68d3      	ldr	r3, [r2, #12]
 800f4f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4fa:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800f4fc:	f7f8 fab8 	bl	8007a70 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800f500:	6823      	ldr	r3, [r4, #0]
 800f502:	f241 1211 	movw	r2, #4369	; 0x1111
 800f506:	6a19      	ldr	r1, [r3, #32]
 800f508:	4211      	tst	r1, r2
 800f50a:	d104      	bne.n	800f516 <HAL_TIM_IC_Stop_DMA+0x16e>
 800f50c:	6a19      	ldr	r1, [r3, #32]
 800f50e:	f240 4244 	movw	r2, #1092	; 0x444
 800f512:	4211      	tst	r1, r2
 800f514:	d0d7      	beq.n	800f4c6 <HAL_TIM_IC_Stop_DMA+0x11e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f516:	2301      	movs	r3, #1
 800f518:	2000      	movs	r0, #0
 800f51a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f51e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 800f522:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800f524:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800f526:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800f528:	68d3      	ldr	r3, [r2, #12]
 800f52a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f52e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800f530:	f7f8 fa9e 	bl	8007a70 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800f534:	6823      	ldr	r3, [r4, #0]
 800f536:	f241 1211 	movw	r2, #4369	; 0x1111
 800f53a:	6a19      	ldr	r1, [r3, #32]
 800f53c:	4211      	tst	r1, r2
 800f53e:	d00f      	beq.n	800f560 <HAL_TIM_IC_Stop_DMA+0x1b8>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f540:	2301      	movs	r3, #1
 800f542:	2000      	movs	r0, #0
 800f544:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f548:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800f54c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f54e:	2d14      	cmp	r5, #20
 800f550:	f63f af56 	bhi.w	800f400 <HAL_TIM_IC_Stop_DMA+0x58>
 800f554:	4b1f      	ldr	r3, [pc, #124]	; (800f5d4 <HAL_TIM_IC_Stop_DMA+0x22c>)
 800f556:	40eb      	lsrs	r3, r5
 800f558:	07db      	lsls	r3, r3, #31
 800f55a:	f53f af77 	bmi.w	800f44c <HAL_TIM_IC_Stop_DMA+0xa4>
 800f55e:	e74f      	b.n	800f400 <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 800f560:	6a19      	ldr	r1, [r3, #32]
 800f562:	f240 4244 	movw	r2, #1092	; 0x444
 800f566:	4211      	tst	r1, r2
 800f568:	d0ad      	beq.n	800f4c6 <HAL_TIM_IC_Stop_DMA+0x11e>
 800f56a:	e7e9      	b.n	800f540 <HAL_TIM_IC_Stop_DMA+0x198>
 800f56c:	6a19      	ldr	r1, [r3, #32]
 800f56e:	f240 4244 	movw	r2, #1092	; 0x444
 800f572:	4211      	tst	r1, r2
 800f574:	d18d      	bne.n	800f492 <HAL_TIM_IC_Stop_DMA+0xea>
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	f022 0201 	bic.w	r2, r2, #1
 800f57c:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f57e:	e788      	b.n	800f492 <HAL_TIM_IC_Stop_DMA+0xea>
 800f580:	2301      	movs	r3, #1
 800f582:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f586:	e7ae      	b.n	800f4e6 <HAL_TIM_IC_Stop_DMA+0x13e>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800f588:	4b13      	ldr	r3, [pc, #76]	; (800f5d8 <HAL_TIM_IC_Stop_DMA+0x230>)
 800f58a:	4298      	cmp	r0, r3
 800f58c:	d003      	beq.n	800f596 <HAL_TIM_IC_Stop_DMA+0x1ee>
 800f58e:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <HAL_TIM_IC_Stop_DMA+0x234>)
 800f590:	4298      	cmp	r0, r3
 800f592:	f47f af35 	bne.w	800f400 <HAL_TIM_IC_Stop_DMA+0x58>
 800f596:	2d00      	cmp	r5, #0
 800f598:	f47f af32 	bne.w	800f400 <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800f59c:	480c      	ldr	r0, [pc, #48]	; (800f5d0 <HAL_TIM_IC_Stop_DMA+0x228>)
 800f59e:	f640 11e6 	movw	r1, #2534	; 0x9e6
 800f5a2:	f7f4 fad1 	bl	8003b48 <assert_failed>
 800f5a6:	6820      	ldr	r0, [r4, #0]
 800f5a8:	e750      	b.n	800f44c <HAL_TIM_IC_Stop_DMA+0xa4>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f5aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f5ae:	e79a      	b.n	800f4e6 <HAL_TIM_IC_Stop_DMA+0x13e>
 800f5b0:	40010000 	.word	0x40010000
 800f5b4:	40000400 	.word	0x40000400
 800f5b8:	40000800 	.word	0x40000800
 800f5bc:	40000c00 	.word	0x40000c00
 800f5c0:	40010400 	.word	0x40010400
 800f5c4:	40014000 	.word	0x40014000
 800f5c8:	40014400 	.word	0x40014400
 800f5cc:	40014800 	.word	0x40014800
 800f5d0:	08028be8 	.word	0x08028be8
 800f5d4:	00111111 	.word	0x00111111
 800f5d8:	40001c00 	.word	0x40001c00
 800f5dc:	40002000 	.word	0x40002000

0800f5e0 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800f5e0:	6802      	ldr	r2, [r0, #0]
 800f5e2:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 800f7b0 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
{
 800f5e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800f5ea:	4b6b      	ldr	r3, [pc, #428]	; (800f798 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
{
 800f5ec:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800f5ee:	4f6b      	ldr	r7, [pc, #428]	; (800f79c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 800f5f0:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	bf18      	it	ne
 800f5f6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f5fa:	4e69      	ldr	r6, [pc, #420]	; (800f7a0 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 800f5fc:	4869      	ldr	r0, [pc, #420]	; (800f7a4 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 800f5fe:	bf14      	ite	ne
 800f600:	2301      	movne	r3, #1
 800f602:	2300      	moveq	r3, #0
 800f604:	4968      	ldr	r1, [pc, #416]	; (800f7a8 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 800f606:	4562      	cmp	r2, ip
 800f608:	bf0c      	ite	eq
 800f60a:	2300      	moveq	r3, #0
 800f60c:	f003 0301 	andne.w	r3, r3, #1
 800f610:	42ba      	cmp	r2, r7
 800f612:	bf0c      	ite	eq
 800f614:	2300      	moveq	r3, #0
 800f616:	f003 0301 	andne.w	r3, r3, #1
 800f61a:	42b2      	cmp	r2, r6
 800f61c:	bf0c      	ite	eq
 800f61e:	2300      	moveq	r3, #0
 800f620:	f003 0301 	andne.w	r3, r3, #1
 800f624:	4282      	cmp	r2, r0
 800f626:	bf0c      	ite	eq
 800f628:	2300      	moveq	r3, #0
 800f62a:	f003 0301 	andne.w	r3, r3, #1
 800f62e:	428a      	cmp	r2, r1
 800f630:	bf0c      	ite	eq
 800f632:	2300      	moveq	r3, #0
 800f634:	f003 0301 	andne.w	r3, r3, #1
 800f638:	b11b      	cbz	r3, 800f642 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800f63a:	4b5c      	ldr	r3, [pc, #368]	; (800f7ac <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 800f63c:	429a      	cmp	r2, r3
 800f63e:	f040 808c 	bne.w	800f75a <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800f642:	682b      	ldr	r3, [r5, #0]
 800f644:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800f648:	2b40      	cmp	r3, #64	; 0x40
 800f64a:	d002      	beq.n	800f652 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f040 808a 	bne.w	800f766 <HAL_TIMEx_MasterConfigSynchronization+0x186>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800f652:	68ab      	ldr	r3, [r5, #8]
 800f654:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f658:	d173      	bne.n	800f742 <HAL_TIMEx_MasterConfigSynchronization+0x162>

  /* Check input state */
  __HAL_LOCK(htim);
 800f65a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d078      	beq.n	800f754 <HAL_TIMEx_MasterConfigSynchronization+0x174>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f662:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 800f664:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f666:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800f798 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>
  htim->State = HAL_TIM_STATE_BUSY;
 800f66a:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f66c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800f7ac <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 800f670:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f674:	eba2 0009 	sub.w	r0, r2, r9
 800f678:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 800f67c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f680:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 800f684:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f686:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 800f68a:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f68c:	0940      	lsrs	r0, r0, #5
 800f68e:	0949      	lsrs	r1, r1, #5
 800f690:	ea50 0301 	orrs.w	r3, r0, r1
 800f694:	d135      	bne.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0x122>
 800f696:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f698:	430b      	orrs	r3, r1
 800f69a:	4845      	ldr	r0, [pc, #276]	; (800f7b0 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 800f69c:	493f      	ldr	r1, [pc, #252]	; (800f79c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800f69e:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6a2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f6a6:	bf08      	it	eq
 800f6a8:	f043 0301 	orreq.w	r3, r3, #1
 800f6ac:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 800f7a0 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>
 800f6b0:	4282      	cmp	r2, r0
 800f6b2:	bf08      	it	eq
 800f6b4:	f043 0301 	orreq.w	r3, r3, #1
 800f6b8:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
 800f6bc:	428a      	cmp	r2, r1
 800f6be:	bf08      	it	eq
 800f6c0:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6c4:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6c6:	4562      	cmp	r2, ip
 800f6c8:	bf08      	it	eq
 800f6ca:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6ce:	430f      	orrs	r7, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6d0:	4282      	cmp	r2, r0
 800f6d2:	bf08      	it	eq
 800f6d4:	f043 0301 	orreq.w	r3, r3, #1
  htim->Instance->CR2 = tmpcr2;
 800f6d8:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6da:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f6de:	d102      	bne.n	800f6e6 <HAL_TIMEx_MasterConfigSynchronization+0x106>
 800f6e0:	4b34      	ldr	r3, [pc, #208]	; (800f7b4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d104      	bne.n	800f6f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6e6:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6e8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6ec:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6ee:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800f6f0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800f6f2:	2201      	movs	r2, #1

  return HAL_OK;
 800f6f4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800f6f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f6fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800f702:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800f706:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 800f70a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f70e:	bf18      	it	ne
 800f710:	2b00      	cmpne	r3, #0
 800f712:	bf14      	ite	ne
 800f714:	f04f 0c01 	movne.w	ip, #1
 800f718:	f04f 0c00 	moveq.w	ip, #0
 800f71c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f720:	bf0c      	ite	eq
 800f722:	f04f 0c00 	moveq.w	ip, #0
 800f726:	f00c 0c01 	andne.w	ip, ip, #1
 800f72a:	f1bc 0f00 	cmp.w	ip, #0
 800f72e:	d002      	beq.n	800f736 <HAL_TIMEx_MasterConfigSynchronization+0x156>
 800f730:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800f734:	d11d      	bne.n	800f772 <HAL_TIMEx_MasterConfigSynchronization+0x192>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f736:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f73a:	4603      	mov	r3, r0
 800f73c:	ea47 070e 	orr.w	r7, r7, lr
 800f740:	e7aa      	b.n	800f698 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800f742:	f240 71b5 	movw	r1, #1973	; 0x7b5
 800f746:	481c      	ldr	r0, [pc, #112]	; (800f7b8 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 800f748:	f7f4 f9fe 	bl	8003b48 <assert_failed>
  __HAL_LOCK(htim);
 800f74c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f750:	2b01      	cmp	r3, #1
 800f752:	d186      	bne.n	800f662 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f754:	2002      	movs	r0, #2
}
 800f756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800f75a:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800f75e:	4816      	ldr	r0, [pc, #88]	; (800f7b8 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 800f760:	f7f4 f9f2 	bl	8003b48 <assert_failed>
 800f764:	e76d      	b.n	800f642 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800f766:	f240 71b4 	movw	r1, #1972	; 0x7b4
 800f76a:	4813      	ldr	r0, [pc, #76]	; (800f7b8 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 800f76c:	f7f4 f9ec 	bl	8003b48 <assert_failed>
 800f770:	e76f      	b.n	800f652 <HAL_TIMEx_MasterConfigSynchronization+0x72>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800f772:	f240 71c7 	movw	r1, #1991	; 0x7c7
 800f776:	4810      	ldr	r0, [pc, #64]	; (800f7b8 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 800f778:	f7f4 f9e6 	bl	8003b48 <assert_failed>
 800f77c:	6822      	ldr	r2, [r4, #0]
 800f77e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800f782:	eba2 0309 	sub.w	r3, r2, r9
 800f786:	eba2 0c08 	sub.w	ip, r2, r8
 800f78a:	4258      	negs	r0, r3
 800f78c:	4158      	adcs	r0, r3
 800f78e:	f1dc 0100 	rsbs	r1, ip, #0
 800f792:	eb41 010c 	adc.w	r1, r1, ip
 800f796:	e7ce      	b.n	800f736 <HAL_TIMEx_MasterConfigSynchronization+0x156>
 800f798:	40010000 	.word	0x40010000
 800f79c:	40000800 	.word	0x40000800
 800f7a0:	40000c00 	.word	0x40000c00
 800f7a4:	40001000 	.word	0x40001000
 800f7a8:	40001400 	.word	0x40001400
 800f7ac:	40010400 	.word	0x40010400
 800f7b0:	40000400 	.word	0x40000400
 800f7b4:	40001800 	.word	0x40001800
 800f7b8:	08028c20 	.word	0x08028c20

0800f7bc <HAL_TIMEx_CommutCallback>:
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop

0800f7c0 <HAL_TIMEx_BreakCallback>:
 800f7c0:	4770      	bx	lr
 800f7c2:	bf00      	nop

0800f7c4 <HAL_TIMEx_Break2Callback>:
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop

0800f7c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f7c8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ca:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f7ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d2:	e842 3100 	strex	r1, r3, [r2]
 800f7d6:	2900      	cmp	r1, #0
 800f7d8:	d1f7      	bne.n	800f7ca <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7da:	f102 0308 	add.w	r3, r2, #8
 800f7de:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7e2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7e6:	f102 0c08 	add.w	ip, r2, #8
 800f7ea:	e84c 3100 	strex	r1, r3, [ip]
 800f7ee:	2900      	cmp	r1, #0
 800f7f0:	d1f3      	bne.n	800f7da <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7f2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d005      	beq.n	800f804 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7f8:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800f7fa:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7fc:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 800f7fe:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f800:	6603      	str	r3, [r0, #96]	; 0x60
}
 800f802:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f804:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f808:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f80c:	e842 3100 	strex	r1, r3, [r2]
 800f810:	2900      	cmp	r1, #0
 800f812:	d0f1      	beq.n	800f7f8 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f814:	e852 3f00 	ldrex	r3, [r2]
 800f818:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f81c:	e842 3100 	strex	r1, r3, [r2]
 800f820:	2900      	cmp	r1, #0
 800f822:	d1ef      	bne.n	800f804 <UART_EndRxTransfer+0x3c>
 800f824:	e7e8      	b.n	800f7f8 <UART_EndRxTransfer+0x30>
 800f826:	bf00      	nop

0800f828 <HAL_UART_DeInit>:
  if (huart == NULL)
 800f828:	2800      	cmp	r0, #0
 800f82a:	d045      	beq.n	800f8b8 <HAL_UART_DeInit+0x90>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800f82c:	6802      	ldr	r2, [r0, #0]
 800f82e:	4927      	ldr	r1, [pc, #156]	; (800f8cc <HAL_UART_DeInit+0xa4>)
{
 800f830:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800f832:	4b27      	ldr	r3, [pc, #156]	; (800f8d0 <HAL_UART_DeInit+0xa8>)
 800f834:	4604      	mov	r4, r0
 800f836:	4827      	ldr	r0, [pc, #156]	; (800f8d4 <HAL_UART_DeInit+0xac>)
 800f838:	429a      	cmp	r2, r3
 800f83a:	bf18      	it	ne
 800f83c:	428a      	cmpne	r2, r1
 800f83e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f842:	4d25      	ldr	r5, [pc, #148]	; (800f8d8 <HAL_UART_DeInit+0xb0>)
 800f844:	bf14      	ite	ne
 800f846:	2301      	movne	r3, #1
 800f848:	2300      	moveq	r3, #0
 800f84a:	4282      	cmp	r2, r0
 800f84c:	bf0c      	ite	eq
 800f84e:	2300      	moveq	r3, #0
 800f850:	f003 0301 	andne.w	r3, r3, #1
 800f854:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 800f858:	428a      	cmp	r2, r1
 800f85a:	bf0c      	ite	eq
 800f85c:	2300      	moveq	r3, #0
 800f85e:	f003 0301 	andne.w	r3, r3, #1
 800f862:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 800f866:	42aa      	cmp	r2, r5
 800f868:	bf0c      	ite	eq
 800f86a:	2300      	moveq	r3, #0
 800f86c:	f003 0301 	andne.w	r3, r3, #1
 800f870:	4282      	cmp	r2, r0
 800f872:	bf0c      	ite	eq
 800f874:	2300      	moveq	r3, #0
 800f876:	f003 0301 	andne.w	r3, r3, #1
 800f87a:	428a      	cmp	r2, r1
 800f87c:	bf0c      	ite	eq
 800f87e:	2300      	moveq	r3, #0
 800f880:	f003 0301 	andne.w	r3, r3, #1
 800f884:	b113      	cbz	r3, 800f88c <HAL_UART_DeInit+0x64>
 800f886:	4b15      	ldr	r3, [pc, #84]	; (800f8dc <HAL_UART_DeInit+0xb4>)
 800f888:	429a      	cmp	r2, r3
 800f88a:	d117      	bne.n	800f8bc <HAL_UART_DeInit+0x94>
  huart->gState = HAL_UART_STATE_BUSY;
 800f88c:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 800f88e:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 800f890:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800f892:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800f894:	6813      	ldr	r3, [r2, #0]
 800f896:	f023 0301 	bic.w	r3, r3, #1
 800f89a:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800f89c:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 800f89e:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 800f8a0:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 800f8a2:	f7f5 fec7 	bl	8005634 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8a6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 800f8aa:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 800f8ac:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800f8ae:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800f8b2:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8b4:	6625      	str	r5, [r4, #96]	; 0x60
}
 800f8b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f8b8:	2001      	movs	r0, #1
}
 800f8ba:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800f8bc:	f240 2167 	movw	r1, #615	; 0x267
 800f8c0:	4807      	ldr	r0, [pc, #28]	; (800f8e0 <HAL_UART_DeInit+0xb8>)
 800f8c2:	f7f4 f941 	bl	8003b48 <assert_failed>
 800f8c6:	6822      	ldr	r2, [r4, #0]
 800f8c8:	e7e0      	b.n	800f88c <HAL_UART_DeInit+0x64>
 800f8ca:	bf00      	nop
 800f8cc:	40004400 	.word	0x40004400
 800f8d0:	40011000 	.word	0x40011000
 800f8d4:	40004800 	.word	0x40004800
 800f8d8:	40005000 	.word	0x40005000
 800f8dc:	40007c00 	.word	0x40007c00
 800f8e0:	08028c5c 	.word	0x08028c5c

0800f8e4 <HAL_UART_Transmit_DMA>:
{
 800f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800f8e6:	6f87      	ldr	r7, [r0, #120]	; 0x78
 800f8e8:	2f20      	cmp	r7, #32
 800f8ea:	d140      	bne.n	800f96e <HAL_UART_Transmit_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 800f8ec:	2900      	cmp	r1, #0
 800f8ee:	d03c      	beq.n	800f96a <HAL_UART_Transmit_DMA+0x86>
 800f8f0:	fab2 f682 	clz	r6, r2
 800f8f4:	0976      	lsrs	r6, r6, #5
 800f8f6:	2a00      	cmp	r2, #0
 800f8f8:	d037      	beq.n	800f96a <HAL_UART_Transmit_DMA+0x86>
 800f8fa:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 800f8fc:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 800f900:	2801      	cmp	r0, #1
 800f902:	d034      	beq.n	800f96e <HAL_UART_Transmit_DMA+0x8a>
 800f904:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f906:	f04f 0c21 	mov.w	ip, #33	; 0x21
    if (huart->hdmatx != NULL)
 800f90a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 800f90c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 800f910:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f912:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 800f916:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 800f91a:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f91e:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800f922:	b178      	cbz	r0, 800f944 <HAL_UART_Transmit_DMA+0x60>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f924:	f8df c060 	ldr.w	ip, [pc, #96]	; 800f988 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f928:	4613      	mov	r3, r2
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f92a:	4a16      	ldr	r2, [pc, #88]	; (800f984 <HAL_UART_Transmit_DMA+0xa0>)
      huart->hdmatx->XferAbortCallback = NULL;
 800f92c:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f92e:	e9c0 c20f 	strd	ip, r2, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f932:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f934:	f8df c054 	ldr.w	ip, [pc, #84]	; 800f98c <HAL_UART_Transmit_DMA+0xa8>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f938:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f93a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f93e:	f7f7 fff3 	bl	8007928 <HAL_DMA_Start_IT>
 800f942:	b9b0      	cbnz	r0, 800f972 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f944:	6822      	ldr	r2, [r4, #0]
 800f946:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 800f948:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f94a:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 800f94c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f950:	f102 0308 	add.w	r3, r2, #8
 800f954:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f95c:	f102 0108 	add.w	r1, r2, #8
 800f960:	e841 3000 	strex	r0, r3, [r1]
 800f964:	2800      	cmp	r0, #0
 800f966:	d1f3      	bne.n	800f950 <HAL_UART_Transmit_DMA+0x6c>
}
 800f968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800f96a:	2001      	movs	r0, #1
}
 800f96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800f96e:	2002      	movs	r0, #2
}
 800f970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f972:	2310      	movs	r3, #16
        return HAL_ERROR;
 800f974:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 800f976:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f97a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800f97e:	67a7      	str	r7, [r4, #120]	; 0x78
}
 800f980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f982:	bf00      	nop
 800f984:	0800fadd 	.word	0x0800fadd
 800f988:	0800fa95 	.word	0x0800fa95
 800f98c:	0800faed 	.word	0x0800faed

0800f990 <HAL_UART_Abort>:
{
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	4604      	mov	r4, r0
 800f994:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f996:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f99a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f99e:	e843 2100 	strex	r1, r2, [r3]
 800f9a2:	2900      	cmp	r1, #0
 800f9a4:	d1f7      	bne.n	800f996 <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a6:	f103 0208 	add.w	r2, r3, #8
 800f9aa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b2:	f103 0008 	add.w	r0, r3, #8
 800f9b6:	e840 2100 	strex	r1, r2, [r0]
 800f9ba:	2900      	cmp	r1, #0
 800f9bc:	d1f3      	bne.n	800f9a6 <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9be:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800f9c0:	2a01      	cmp	r2, #1
 800f9c2:	d043      	beq.n	800fa4c <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f9c4:	6899      	ldr	r1, [r3, #8]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	0608      	lsls	r0, r1, #24
 800f9ca:	d42a      	bmi.n	800fa22 <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9cc:	6899      	ldr	r1, [r3, #8]
 800f9ce:	0649      	lsls	r1, r1, #25
 800f9d0:	d514      	bpl.n	800f9fc <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d2:	f103 0208 	add.w	r2, r3, #8
 800f9d6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9de:	f103 0008 	add.w	r0, r3, #8
 800f9e2:	e840 2100 	strex	r1, r2, [r0]
 800f9e6:	2900      	cmp	r1, #0
 800f9e8:	d1f3      	bne.n	800f9d2 <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 800f9ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	d03e      	beq.n	800fa6e <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 800f9f0:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f9f2:	f7f7 fff5 	bl	80079e0 <HAL_DMA_Abort>
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	d145      	bne.n	800fa86 <HAL_UART_Abort+0xf6>
 800f9fa:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 800f9fc:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f9fe:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 800fa00:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 800fa02:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 800fa06:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 800fa08:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fa0c:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa0e:	6991      	ldr	r1, [r2, #24]
 800fa10:	f041 0108 	orr.w	r1, r1, #8
 800fa14:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800fa16:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800fa18:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa1a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa1c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800fa20:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa22:	f103 0208 	add.w	r2, r3, #8
 800fa26:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fa2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2e:	f103 0008 	add.w	r0, r3, #8
 800fa32:	e840 2100 	strex	r1, r2, [r0]
 800fa36:	2900      	cmp	r1, #0
 800fa38:	d1f3      	bne.n	800fa22 <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 800fa3a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800fa3c:	b120      	cbz	r0, 800fa48 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 800fa3e:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fa40:	f7f7 ffce 	bl	80079e0 <HAL_DMA_Abort>
 800fa44:	b9a8      	cbnz	r0, 800fa72 <HAL_UART_Abort+0xe2>
 800fa46:	6823      	ldr	r3, [r4, #0]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	e7bf      	b.n	800f9cc <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa4c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fa50:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa54:	e843 2100 	strex	r1, r2, [r3]
 800fa58:	2900      	cmp	r1, #0
 800fa5a:	d0b3      	beq.n	800f9c4 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa5c:	e853 2f00 	ldrex	r2, [r3]
 800fa60:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa64:	e843 2100 	strex	r1, r2, [r3]
 800fa68:	2900      	cmp	r1, #0
 800fa6a:	d1ef      	bne.n	800fa4c <HAL_UART_Abort+0xbc>
 800fa6c:	e7aa      	b.n	800f9c4 <HAL_UART_Abort+0x34>
 800fa6e:	461a      	mov	r2, r3
 800fa70:	e7c4      	b.n	800f9fc <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fa72:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800fa74:	f7f8 f900 	bl	8007c78 <HAL_DMA_GetError>
 800fa78:	2820      	cmp	r0, #32
 800fa7a:	d1e4      	bne.n	800fa46 <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa7c:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800fa7e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa80:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800fa84:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fa86:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800fa88:	f7f8 f8f6 	bl	8007c78 <HAL_DMA_GetError>
 800fa8c:	2820      	cmp	r0, #32
 800fa8e:	d1b4      	bne.n	800f9fa <HAL_UART_Abort+0x6a>
 800fa90:	e7f4      	b.n	800fa7c <HAL_UART_Abort+0xec>
 800fa92:	bf00      	nop

0800fa94 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fa94:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fa96:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa98:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fa9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa9e:	d018      	beq.n	800fad2 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800faa0:	2300      	movs	r3, #0
 800faa2:	6802      	ldr	r2, [r0, #0]
 800faa4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa8:	f102 0308 	add.w	r3, r2, #8
 800faac:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab4:	f102 0008 	add.w	r0, r2, #8
 800fab8:	e840 3100 	strex	r1, r3, [r0]
 800fabc:	2900      	cmp	r1, #0
 800fabe:	d1f3      	bne.n	800faa8 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac0:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac8:	e842 3100 	strex	r1, r3, [r2]
 800facc:	2900      	cmp	r1, #0
 800face:	d1f7      	bne.n	800fac0 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fad0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800fad2:	f7f1 fab5 	bl	8001040 <HAL_UART_TxCpltCallback>
}
 800fad6:	bd08      	pop	{r3, pc}

0800fad8 <HAL_UART_TxHalfCpltCallback>:
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop

0800fadc <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fadc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800fade:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800fae0:	f7ff fffa 	bl	800fad8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fae4:	bd08      	pop	{r3, pc}
 800fae6:	bf00      	nop

0800fae8 <HAL_UART_RxHalfCpltCallback>:
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop

0800faec <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800faec:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800faee:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800faf0:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 800faf2:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800faf4:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800faf6:	6893      	ldr	r3, [r2, #8]
 800faf8:	061b      	lsls	r3, r3, #24
 800fafa:	d501      	bpl.n	800fb00 <UART_DMAError+0x14>
 800fafc:	2921      	cmp	r1, #33	; 0x21
 800fafe:	d00d      	beq.n	800fb1c <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fb00:	6893      	ldr	r3, [r2, #8]
 800fb02:	065b      	lsls	r3, r3, #25
 800fb04:	d501      	bpl.n	800fb0a <UART_DMAError+0x1e>
 800fb06:	2c22      	cmp	r4, #34	; 0x22
 800fb08:	d016      	beq.n	800fb38 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fb0a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800fb0e:	f043 0310 	orr.w	r3, r3, #16
 800fb12:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb16:	f7f4 fab7 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb1a:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb22:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fb26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb2a:	e842 3100 	strex	r1, r3, [r2]
 800fb2e:	2900      	cmp	r1, #0
 800fb30:	d1f7      	bne.n	800fb22 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 800fb32:	2320      	movs	r3, #32
 800fb34:	6783      	str	r3, [r0, #120]	; 0x78
}
 800fb36:	e7e3      	b.n	800fb00 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800fb3e:	f7ff fe43 	bl	800f7c8 <UART_EndRxTransfer>
 800fb42:	e7e2      	b.n	800fb0a <UART_DMAError+0x1e>

0800fb44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fb44:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb46:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800fb4e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb52:	f7f4 fa99 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb56:	bd08      	pop	{r3, pc}

0800fb58 <HAL_UARTEx_RxEventCallback>:
}
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop

0800fb5c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb5c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800fb5e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb60:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d002      	beq.n	800fb6c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800fb66:	f7ff ffbf 	bl	800fae8 <HAL_UART_RxHalfCpltCallback>
}
 800fb6a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fb6c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800fb70:	0849      	lsrs	r1, r1, #1
 800fb72:	f7ff fff1 	bl	800fb58 <HAL_UARTEx_RxEventCallback>
}
 800fb76:	bd08      	pop	{r3, pc}

0800fb78 <UART_DMAReceiveCplt>:
{
 800fb78:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fb7a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb7c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fb7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb82:	d028      	beq.n	800fbd6 <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 800fb84:	2200      	movs	r2, #0
 800fb86:	6803      	ldr	r3, [r0, #0]
 800fb88:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb94:	e843 2100 	strex	r1, r2, [r3]
 800fb98:	2900      	cmp	r1, #0
 800fb9a:	d1f7      	bne.n	800fb8c <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9c:	f103 0208 	add.w	r2, r3, #8
 800fba0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fba4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba8:	f103 0c08 	add.w	ip, r3, #8
 800fbac:	e84c 2100 	strex	r1, r2, [ip]
 800fbb0:	2900      	cmp	r1, #0
 800fbb2:	d1f3      	bne.n	800fb9c <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbb4:	f103 0208 	add.w	r2, r3, #8
 800fbb8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc0:	f103 0c08 	add.w	ip, r3, #8
 800fbc4:	e84c 2100 	strex	r1, r2, [ip]
 800fbc8:	2900      	cmp	r1, #0
 800fbca:	d1f3      	bne.n	800fbb4 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 800fbcc:	2220      	movs	r2, #32
 800fbce:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbd0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800fbd2:	2a01      	cmp	r2, #1
 800fbd4:	d005      	beq.n	800fbe2 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbd6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d013      	beq.n	800fc04 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 800fbdc:	f7f4 f9d2 	bl	8003f84 <HAL_UART_RxCpltCallback>
}
 800fbe0:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbe6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbea:	e843 2100 	strex	r1, r2, [r3]
 800fbee:	2900      	cmp	r1, #0
 800fbf0:	d0f1      	beq.n	800fbd6 <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf2:	e853 2f00 	ldrex	r2, [r3]
 800fbf6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbfa:	e843 2100 	strex	r1, r2, [r3]
 800fbfe:	2900      	cmp	r1, #0
 800fc00:	d1ef      	bne.n	800fbe2 <UART_DMAReceiveCplt+0x6a>
 800fc02:	e7e8      	b.n	800fbd6 <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc04:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800fc08:	f7ff ffa6 	bl	800fb58 <HAL_UARTEx_RxEventCallback>
}
 800fc0c:	bd08      	pop	{r3, pc}
 800fc0e:	bf00      	nop

0800fc10 <HAL_UARTEx_WakeupCallback>:
}
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop

0800fc14 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fc14:	6803      	ldr	r3, [r0, #0]
{
 800fc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fc1a:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fc1c:	f640 050f 	movw	r5, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fc20:	6819      	ldr	r1, [r3, #0]
{
 800fc22:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800fc24:	422a      	tst	r2, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fc26:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 800fc28:	d17d      	bne.n	800fd26 <HAL_UART_IRQHandler+0x112>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fc2a:	0697      	lsls	r7, r2, #26
 800fc2c:	d502      	bpl.n	800fc34 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fc2e:	068d      	lsls	r5, r1, #26
 800fc30:	f100 80f4 	bmi.w	800fe1c <HAL_UART_IRQHandler+0x208>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc34:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800fc36:	2801      	cmp	r0, #1
 800fc38:	d024      	beq.n	800fc84 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fc3a:	02d0      	lsls	r0, r2, #11
 800fc3c:	d502      	bpl.n	800fc44 <HAL_UART_IRQHandler+0x30>
 800fc3e:	0277      	lsls	r7, r6, #9
 800fc40:	f100 80f1 	bmi.w	800fe26 <HAL_UART_IRQHandler+0x212>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fc44:	0616      	lsls	r6, r2, #24
 800fc46:	d414      	bmi.n	800fc72 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fc48:	0650      	lsls	r0, r2, #25
 800fc4a:	d501      	bpl.n	800fc50 <HAL_UART_IRQHandler+0x3c>
 800fc4c:	064a      	lsls	r2, r1, #25
 800fc4e:	d401      	bmi.n	800fc54 <HAL_UART_IRQHandler+0x40>
}
 800fc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc54:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc5c:	e843 2100 	strex	r1, r2, [r3]
 800fc60:	2900      	cmp	r1, #0
 800fc62:	d1f7      	bne.n	800fc54 <HAL_UART_IRQHandler+0x40>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc64:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fc66:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800fc68:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800fc6a:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800fc6c:	f7f1 f9e8 	bl	8001040 <HAL_UART_TxCpltCallback>
    return;
 800fc70:	e7ee      	b.n	800fc50 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fc72:	060d      	lsls	r5, r1, #24
 800fc74:	d5e8      	bpl.n	800fc48 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 800fc76:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d0e9      	beq.n	800fc50 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 800fc7c:	4620      	mov	r0, r4
}
 800fc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800fc82:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fc84:	06d0      	lsls	r0, r2, #27
 800fc86:	d5d8      	bpl.n	800fc3a <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fc88:	06cf      	lsls	r7, r1, #27
 800fc8a:	d5d6      	bpl.n	800fc3a <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc8c:	2210      	movs	r2, #16
 800fc8e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc90:	689a      	ldr	r2, [r3, #8]
 800fc92:	0655      	lsls	r5, r2, #25
 800fc94:	f140 80d9 	bpl.w	800fe4a <HAL_UART_IRQHandler+0x236>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fc98:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800fc9a:	6802      	ldr	r2, [r0, #0]
 800fc9c:	6852      	ldr	r2, [r2, #4]
 800fc9e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800fca0:	2a00      	cmp	r2, #0
 800fca2:	d0d5      	beq.n	800fc50 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fca4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800fca8:	4291      	cmp	r1, r2
 800fcaa:	d9d1      	bls.n	800fc50 <HAL_UART_IRQHandler+0x3c>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fcac:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800fcae:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fcb2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800fcb6:	d02e      	beq.n	800fd16 <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc0:	e843 2100 	strex	r1, r2, [r3]
 800fcc4:	2900      	cmp	r1, #0
 800fcc6:	d1f7      	bne.n	800fcb8 <HAL_UART_IRQHandler+0xa4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc8:	f103 0208 	add.w	r2, r3, #8
 800fccc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcd0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd4:	f103 0508 	add.w	r5, r3, #8
 800fcd8:	e845 2100 	strex	r1, r2, [r5]
 800fcdc:	2900      	cmp	r1, #0
 800fcde:	d1f3      	bne.n	800fcc8 <HAL_UART_IRQHandler+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce0:	f103 0208 	add.w	r2, r3, #8
 800fce4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcec:	f103 0508 	add.w	r5, r3, #8
 800fcf0:	e845 2100 	strex	r1, r2, [r5]
 800fcf4:	2900      	cmp	r1, #0
 800fcf6:	d1f3      	bne.n	800fce0 <HAL_UART_IRQHandler+0xcc>
          huart->RxState = HAL_UART_STATE_READY;
 800fcf8:	2220      	movs	r2, #32
 800fcfa:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcfc:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcfe:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd02:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd06:	e843 2100 	strex	r1, r2, [r3]
 800fd0a:	2900      	cmp	r1, #0
 800fd0c:	d1f7      	bne.n	800fcfe <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fd0e:	f7f7 fe67 	bl	80079e0 <HAL_DMA_Abort>
 800fd12:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fd16:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	1ac9      	subs	r1, r1, r3
 800fd1e:	b289      	uxth	r1, r1
 800fd20:	f7ff ff1a 	bl	800fb58 <HAL_UARTEx_RxEventCallback>
 800fd24:	e794      	b.n	800fc50 <HAL_UART_IRQHandler+0x3c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800fd26:	4865      	ldr	r0, [pc, #404]	; (800febc <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800fd28:	f006 0501 	and.w	r5, r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800fd2c:	4008      	ands	r0, r1
 800fd2e:	4328      	orrs	r0, r5
 800fd30:	d080      	beq.n	800fc34 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd32:	07d0      	lsls	r0, r2, #31
 800fd34:	461f      	mov	r7, r3
 800fd36:	d509      	bpl.n	800fd4c <HAL_UART_IRQHandler+0x138>
 800fd38:	05ce      	lsls	r6, r1, #23
 800fd3a:	d507      	bpl.n	800fd4c <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd3c:	2001      	movs	r0, #1
 800fd3e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd40:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800fd44:	f040 0001 	orr.w	r0, r0, #1
 800fd48:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd4c:	0790      	lsls	r0, r2, #30
 800fd4e:	d558      	bpl.n	800fe02 <HAL_UART_IRQHandler+0x1ee>
 800fd50:	b14d      	cbz	r5, 800fd66 <HAL_UART_IRQHandler+0x152>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd52:	2002      	movs	r0, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd54:	0756      	lsls	r6, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd56:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fd58:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800fd5c:	f040 0004 	orr.w	r0, r0, #4
 800fd60:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd64:	d451      	bmi.n	800fe0a <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fd66:	0716      	lsls	r6, r2, #28
 800fd68:	d50b      	bpl.n	800fd82 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fd6a:	f001 0020 	and.w	r0, r1, #32
 800fd6e:	4328      	orrs	r0, r5
 800fd70:	d007      	beq.n	800fd82 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd72:	2008      	movs	r0, #8
 800fd74:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd76:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800fd7a:	f040 0008 	orr.w	r0, r0, #8
 800fd7e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fd82:	0515      	lsls	r5, r2, #20
 800fd84:	d50a      	bpl.n	800fd9c <HAL_UART_IRQHandler+0x188>
 800fd86:	0148      	lsls	r0, r1, #5
 800fd88:	d508      	bpl.n	800fd9c <HAL_UART_IRQHandler+0x188>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fd8e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fd90:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800fd94:	f043 0320 	orr.w	r3, r3, #32
 800fd98:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd9c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	f43f af55 	beq.w	800fc50 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800fda6:	0693      	lsls	r3, r2, #26
 800fda8:	d501      	bpl.n	800fdae <HAL_UART_IRQHandler+0x19a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fdaa:	068e      	lsls	r6, r1, #26
 800fdac:	d446      	bmi.n	800fe3c <HAL_UART_IRQHandler+0x228>
      errorcode = huart->ErrorCode;
 800fdae:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 800fdb2:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdb4:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fdb6:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdbe:	431d      	orrs	r5, r3
 800fdc0:	d076      	beq.n	800feb0 <HAL_UART_IRQHandler+0x29c>
        UART_EndRxTransfer(huart);
 800fdc2:	f7ff fd01 	bl	800f7c8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdc6:	6823      	ldr	r3, [r4, #0]
 800fdc8:	689a      	ldr	r2, [r3, #8]
 800fdca:	0655      	lsls	r5, r2, #25
 800fdcc:	d532      	bpl.n	800fe34 <HAL_UART_IRQHandler+0x220>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdce:	f103 0208 	add.w	r2, r3, #8
 800fdd2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdda:	f103 0008 	add.w	r0, r3, #8
 800fdde:	e840 2100 	strex	r1, r2, [r0]
 800fde2:	2900      	cmp	r1, #0
 800fde4:	d1f3      	bne.n	800fdce <HAL_UART_IRQHandler+0x1ba>
          if (huart->hdmarx != NULL)
 800fde6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800fde8:	b320      	cbz	r0, 800fe34 <HAL_UART_IRQHandler+0x220>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fdea:	4b35      	ldr	r3, [pc, #212]	; (800fec0 <HAL_UART_IRQHandler+0x2ac>)
 800fdec:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fdee:	f7f7 fe3f 	bl	8007a70 <HAL_DMA_Abort_IT>
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	f43f af2c 	beq.w	800fc50 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fdf8:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 800fdfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fdfe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fe00:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe02:	0750      	lsls	r0, r2, #29
 800fe04:	d5af      	bpl.n	800fd66 <HAL_UART_IRQHandler+0x152>
 800fe06:	2d00      	cmp	r5, #0
 800fe08:	d0ad      	beq.n	800fd66 <HAL_UART_IRQHandler+0x152>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe0a:	2004      	movs	r0, #4
 800fe0c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe0e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800fe12:	f040 0002 	orr.w	r0, r0, #2
 800fe16:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800fe1a:	e7a4      	b.n	800fd66 <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 800fe1c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	f47f af2d 	bne.w	800fc7e <HAL_UART_IRQHandler+0x6a>
 800fe24:	e714      	b.n	800fc50 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fe26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800fe2a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fe2c:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800fe2e:	f7ff feef 	bl	800fc10 <HAL_UARTEx_WakeupCallback>
    return;
 800fe32:	e70d      	b.n	800fc50 <HAL_UART_IRQHandler+0x3c>
            HAL_UART_ErrorCallback(huart);
 800fe34:	4620      	mov	r0, r4
 800fe36:	f7f4 f927 	bl	8004088 <HAL_UART_ErrorCallback>
 800fe3a:	e709      	b.n	800fc50 <HAL_UART_IRQHandler+0x3c>
        if (huart->RxISR != NULL)
 800fe3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d0b5      	beq.n	800fdae <HAL_UART_IRQHandler+0x19a>
          huart->RxISR(huart);
 800fe42:	4620      	mov	r0, r4
 800fe44:	4798      	blx	r3
 800fe46:	6827      	ldr	r7, [r4, #0]
 800fe48:	e7b1      	b.n	800fdae <HAL_UART_IRQHandler+0x19a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fe4a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800fe4e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 800fe52:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fe56:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800fe58:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fe5a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800fe5c:	2900      	cmp	r1, #0
 800fe5e:	f43f aef7 	beq.w	800fc50 <HAL_UART_IRQHandler+0x3c>
 800fe62:	2a00      	cmp	r2, #0
 800fe64:	f43f aef4 	beq.w	800fc50 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe68:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fe6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe70:	e843 2000 	strex	r0, r2, [r3]
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d1f7      	bne.n	800fe68 <HAL_UART_IRQHandler+0x254>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe78:	f103 0208 	add.w	r2, r3, #8
 800fe7c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe80:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe84:	f103 0508 	add.w	r5, r3, #8
 800fe88:	e845 2000 	strex	r0, r2, [r5]
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	d1f3      	bne.n	800fe78 <HAL_UART_IRQHandler+0x264>
        huart->RxState = HAL_UART_STATE_READY;
 800fe90:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800fe92:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 800fe94:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe96:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe98:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe9c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea0:	e843 2000 	strex	r0, r2, [r3]
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d1f7      	bne.n	800fe98 <HAL_UART_IRQHandler+0x284>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fea8:	4620      	mov	r0, r4
 800feaa:	f7ff fe55 	bl	800fb58 <HAL_UARTEx_RxEventCallback>
 800feae:	e6cf      	b.n	800fc50 <HAL_UART_IRQHandler+0x3c>
        HAL_UART_ErrorCallback(huart);
 800feb0:	f7f4 f8ea 	bl	8004088 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800feb4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800feb8:	e6ca      	b.n	800fc50 <HAL_UART_IRQHandler+0x3c>
 800feba:	bf00      	nop
 800febc:	04000120 	.word	0x04000120
 800fec0:	0800fb45 	.word	0x0800fb45

0800fec4 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800fec4:	4bbd      	ldr	r3, [pc, #756]	; (80101bc <UART_SetConfig+0x2f8>)
 800fec6:	6842      	ldr	r2, [r0, #4]
 800fec8:	429a      	cmp	r2, r3
{
 800feca:	b570      	push	{r4, r5, r6, lr}
 800fecc:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800fece:	f200 811b 	bhi.w	8010108 <UART_SetConfig+0x244>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800fed2:	68a3      	ldr	r3, [r4, #8]
 800fed4:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800fed8:	d002      	beq.n	800fee0 <UART_SetConfig+0x1c>
 800feda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fede:	d17d      	bne.n	800ffdc <UART_SetConfig+0x118>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800fee0:	68e3      	ldr	r3, [r4, #12]
 800fee2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800fee6:	f040 8083 	bne.w	800fff0 <UART_SetConfig+0x12c>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800feea:	6a23      	ldr	r3, [r4, #32]
 800feec:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800fef0:	f040 8088 	bne.w	8010004 <UART_SetConfig+0x140>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800fef4:	6923      	ldr	r3, [r4, #16]
 800fef6:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800fefa:	d002      	beq.n	800ff02 <UART_SetConfig+0x3e>
 800fefc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ff00:	d166      	bne.n	800ffd0 <UART_SetConfig+0x10c>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800ff02:	6963      	ldr	r3, [r4, #20]
 800ff04:	f033 020c 	bics.w	r2, r3, #12
 800ff08:	d149      	bne.n	800ff9e <UART_SetConfig+0xda>
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d047      	beq.n	800ff9e <UART_SetConfig+0xda>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800ff0e:	69a3      	ldr	r3, [r4, #24]
 800ff10:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800ff14:	d14c      	bne.n	800ffb0 <UART_SetConfig+0xec>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800ff16:	69e0      	ldr	r0, [r4, #28]
 800ff18:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800ff1c:	d151      	bne.n	800ffc2 <UART_SetConfig+0xfe>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff1e:	6823      	ldr	r3, [r4, #0]
 800ff20:	6921      	ldr	r1, [r4, #16]
 800ff22:	68a2      	ldr	r2, [r4, #8]
 800ff24:	681e      	ldr	r6, [r3, #0]
 800ff26:	430a      	orrs	r2, r1
 800ff28:	4da5      	ldr	r5, [pc, #660]	; (80101c0 <UART_SetConfig+0x2fc>)
 800ff2a:	6961      	ldr	r1, [r4, #20]
 800ff2c:	4035      	ands	r5, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff2e:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff30:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff32:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff34:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800ff36:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff38:	4302      	orrs	r2, r0
  tmpreg |= huart->Init.OneBitSampling;
 800ff3a:	4329      	orrs	r1, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff3c:	4da1      	ldr	r5, [pc, #644]	; (80101c4 <UART_SetConfig+0x300>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff3e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff40:	685a      	ldr	r2, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff42:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ff48:	ea42 0206 	orr.w	r2, r2, r6
 800ff4c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff4e:	689a      	ldr	r2, [r3, #8]
 800ff50:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800ff54:	ea41 0102 	orr.w	r1, r1, r2
 800ff58:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff5a:	f000 80db 	beq.w	8010114 <UART_SetConfig+0x250>
 800ff5e:	4a9a      	ldr	r2, [pc, #616]	; (80101c8 <UART_SetConfig+0x304>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d055      	beq.n	8010010 <UART_SetConfig+0x14c>
 800ff64:	4a99      	ldr	r2, [pc, #612]	; (80101cc <UART_SetConfig+0x308>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	f000 8116 	beq.w	8010198 <UART_SetConfig+0x2d4>
 800ff6c:	4a98      	ldr	r2, [pc, #608]	; (80101d0 <UART_SetConfig+0x30c>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	f000 8144 	beq.w	80101fc <UART_SetConfig+0x338>
 800ff74:	4a97      	ldr	r2, [pc, #604]	; (80101d4 <UART_SetConfig+0x310>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	f000 80e0 	beq.w	801013c <UART_SetConfig+0x278>
 800ff7c:	4a96      	ldr	r2, [pc, #600]	; (80101d8 <UART_SetConfig+0x314>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	f000 8082 	beq.w	8010088 <UART_SetConfig+0x1c4>
 800ff84:	4a95      	ldr	r2, [pc, #596]	; (80101dc <UART_SetConfig+0x318>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	f000 8169 	beq.w	801025e <UART_SetConfig+0x39a>
 800ff8c:	4a94      	ldr	r2, [pc, #592]	; (80101e0 <UART_SetConfig+0x31c>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	f000 8153 	beq.w	801023a <UART_SetConfig+0x376>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff94:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800ff96:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800ff98:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 800ff9c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800ff9e:	f640 3176 	movw	r1, #2934	; 0xb76
 800ffa2:	4890      	ldr	r0, [pc, #576]	; (80101e4 <UART_SetConfig+0x320>)
 800ffa4:	f7f3 fdd0 	bl	8003b48 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800ffa8:	69a3      	ldr	r3, [r4, #24]
 800ffaa:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800ffae:	d0b2      	beq.n	800ff16 <UART_SetConfig+0x52>
 800ffb0:	488c      	ldr	r0, [pc, #560]	; (80101e4 <UART_SetConfig+0x320>)
 800ffb2:	f640 3177 	movw	r1, #2935	; 0xb77
 800ffb6:	f7f3 fdc7 	bl	8003b48 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800ffba:	69e0      	ldr	r0, [r4, #28]
 800ffbc:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800ffc0:	d0ad      	beq.n	800ff1e <UART_SetConfig+0x5a>
 800ffc2:	4888      	ldr	r0, [pc, #544]	; (80101e4 <UART_SetConfig+0x320>)
 800ffc4:	f640 3178 	movw	r1, #2936	; 0xb78
 800ffc8:	f7f3 fdbe 	bl	8003b48 <assert_failed>
 800ffcc:	69e0      	ldr	r0, [r4, #28]
 800ffce:	e7a6      	b.n	800ff1e <UART_SetConfig+0x5a>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ffd0:	f640 3175 	movw	r1, #2933	; 0xb75
 800ffd4:	4883      	ldr	r0, [pc, #524]	; (80101e4 <UART_SetConfig+0x320>)
 800ffd6:	f7f3 fdb7 	bl	8003b48 <assert_failed>
 800ffda:	e792      	b.n	800ff02 <UART_SetConfig+0x3e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800ffdc:	f640 3171 	movw	r1, #2929	; 0xb71
 800ffe0:	4880      	ldr	r0, [pc, #512]	; (80101e4 <UART_SetConfig+0x320>)
 800ffe2:	f7f3 fdb1 	bl	8003b48 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ffe6:	68e3      	ldr	r3, [r4, #12]
 800ffe8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800ffec:	f43f af7d 	beq.w	800feea <UART_SetConfig+0x26>
 800fff0:	f640 3172 	movw	r1, #2930	; 0xb72
 800fff4:	487b      	ldr	r0, [pc, #492]	; (80101e4 <UART_SetConfig+0x320>)
 800fff6:	f7f3 fda7 	bl	8003b48 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800fffa:	6a23      	ldr	r3, [r4, #32]
 800fffc:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8010000:	f43f af78 	beq.w	800fef4 <UART_SetConfig+0x30>
 8010004:	f640 3173 	movw	r1, #2931	; 0xb73
 8010008:	4876      	ldr	r0, [pc, #472]	; (80101e4 <UART_SetConfig+0x320>)
 801000a:	f7f3 fd9d 	bl	8003b48 <assert_failed>
 801000e:	e771      	b.n	800fef4 <UART_SetConfig+0x30>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010010:	4b75      	ldr	r3, [pc, #468]	; (80101e8 <UART_SetConfig+0x324>)
 8010012:	4a76      	ldr	r2, [pc, #472]	; (80101ec <UART_SetConfig+0x328>)
 8010014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010018:	f003 030c 	and.w	r3, r3, #12
 801001c:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801001e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010022:	d03f      	beq.n	80100a4 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8010024:	2b08      	cmp	r3, #8
 8010026:	d8b5      	bhi.n	800ff94 <UART_SetConfig+0xd0>
 8010028:	a201      	add	r2, pc, #4	; (adr r2, 8010030 <UART_SetConfig+0x16c>)
 801002a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002e:	bf00      	nop
 8010030:	0801016b 	.word	0x0801016b
 8010034:	0801012b 	.word	0x0801012b
 8010038:	080100a1 	.word	0x080100a1
 801003c:	0800ff95 	.word	0x0800ff95
 8010040:	0801015f 	.word	0x0801015f
 8010044:	0800ff95 	.word	0x0800ff95
 8010048:	0800ff95 	.word	0x0800ff95
 801004c:	0800ff95 	.word	0x0800ff95
 8010050:	08010061 	.word	0x08010061
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010054:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010058:	d19c      	bne.n	800ff94 <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801005a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801005e:	d039      	beq.n	80100d4 <UART_SetConfig+0x210>
        pclk = (uint32_t) LSE_VALUE;
 8010060:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010064:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010066:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801006a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 801006e:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010072:	f1a3 0110 	sub.w	r1, r3, #16
 8010076:	4291      	cmp	r1, r2
 8010078:	d88c      	bhi.n	800ff94 <UART_SetConfig+0xd0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 801007a:	6822      	ldr	r2, [r4, #0]
 801007c:	2000      	movs	r0, #0
 801007e:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8010080:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8010082:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8010086:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010088:	4b57      	ldr	r3, [pc, #348]	; (80101e8 <UART_SetConfig+0x324>)
 801008a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801008e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010096:	f040 80c3 	bne.w	8010220 <UART_SetConfig+0x35c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801009a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801009e:	d031      	beq.n	8010104 <UART_SetConfig+0x240>
 80100a0:	4853      	ldr	r0, [pc, #332]	; (80101f0 <UART_SetConfig+0x32c>)
 80100a2:	e7df      	b.n	8010064 <UART_SetConfig+0x1a0>
    switch (clocksource)
 80100a4:	2b08      	cmp	r3, #8
 80100a6:	f63f af75 	bhi.w	800ff94 <UART_SetConfig+0xd0>
 80100aa:	a201      	add	r2, pc, #4	; (adr r2, 80100b0 <UART_SetConfig+0x1ec>)
 80100ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b0:	08010183 	.word	0x08010183
 80100b4:	0801017d 	.word	0x0801017d
 80100b8:	08010105 	.word	0x08010105
 80100bc:	0800ff95 	.word	0x0800ff95
 80100c0:	08010171 	.word	0x08010171
 80100c4:	0800ff95 	.word	0x0800ff95
 80100c8:	0800ff95 	.word	0x0800ff95
 80100cc:	0800ff95 	.word	0x0800ff95
 80100d0:	080100d5 	.word	0x080100d5
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80100d8:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100da:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80100de:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80100e2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100e6:	f1a0 0310 	sub.w	r3, r0, #16
 80100ea:	4293      	cmp	r3, r2
 80100ec:	f63f af52 	bhi.w	800ff94 <UART_SetConfig+0xd0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80100f0:	f020 020f 	bic.w	r2, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80100f4:	f3c0 0342 	ubfx	r3, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80100f8:	6821      	ldr	r1, [r4, #0]
 80100fa:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80100fc:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80100fe:	4313      	orrs	r3, r2
 8010100:	60cb      	str	r3, [r1, #12]
 8010102:	e748      	b.n	800ff96 <UART_SetConfig+0xd2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010104:	483b      	ldr	r0, [pc, #236]	; (80101f4 <UART_SetConfig+0x330>)
 8010106:	e7e7      	b.n	80100d8 <UART_SetConfig+0x214>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010108:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 801010c:	4835      	ldr	r0, [pc, #212]	; (80101e4 <UART_SetConfig+0x320>)
 801010e:	f7f3 fd1b 	bl	8003b48 <assert_failed>
 8010112:	e6de      	b.n	800fed2 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010114:	4b34      	ldr	r3, [pc, #208]	; (80101e8 <UART_SetConfig+0x324>)
 8010116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801011a:	f003 0303 	and.w	r3, r3, #3
 801011e:	3b01      	subs	r3, #1
 8010120:	2b02      	cmp	r3, #2
 8010122:	d931      	bls.n	8010188 <UART_SetConfig+0x2c4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010124:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010128:	d028      	beq.n	801017c <UART_SetConfig+0x2b8>
        pclk = HAL_RCC_GetPCLK2Freq();
 801012a:	f7fb fae5 	bl	800b6f8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801012e:	2800      	cmp	r0, #0
 8010130:	d198      	bne.n	8010064 <UART_SetConfig+0x1a0>
  huart->RxISR = NULL;
 8010132:	2300      	movs	r3, #0
 8010134:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8010136:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 801013a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 801013c:	4b2a      	ldr	r3, [pc, #168]	; (80101e8 <UART_SetConfig+0x324>)
 801013e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801014a:	d0a6      	beq.n	801009a <UART_SetConfig+0x1d6>
 801014c:	d81f      	bhi.n	801018e <UART_SetConfig+0x2ca>
 801014e:	b14b      	cbz	r3, 8010164 <UART_SetConfig+0x2a0>
 8010150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010154:	f47f af1e 	bne.w	800ff94 <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010158:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801015c:	d008      	beq.n	8010170 <UART_SetConfig+0x2ac>
        pclk = HAL_RCC_GetSysClockFreq();
 801015e:	f7fb f961 	bl	800b424 <HAL_RCC_GetSysClockFreq>
        break;
 8010162:	e7e4      	b.n	801012e <UART_SetConfig+0x26a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010164:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010168:	d00b      	beq.n	8010182 <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetPCLK1Freq();
 801016a:	f7fb fab5 	bl	800b6d8 <HAL_RCC_GetPCLK1Freq>
        break;
 801016e:	e7de      	b.n	801012e <UART_SetConfig+0x26a>
        pclk = HAL_RCC_GetSysClockFreq();
 8010170:	f7fb f958 	bl	800b424 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8010174:	2800      	cmp	r0, #0
 8010176:	d0dc      	beq.n	8010132 <UART_SetConfig+0x26e>
 8010178:	0040      	lsls	r0, r0, #1
 801017a:	e7ad      	b.n	80100d8 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetPCLK2Freq();
 801017c:	f7fb fabc 	bl	800b6f8 <HAL_RCC_GetPCLK2Freq>
        break;
 8010180:	e7f8      	b.n	8010174 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010182:	f7fb faa9 	bl	800b6d8 <HAL_RCC_GetPCLK1Freq>
        break;
 8010186:	e7f5      	b.n	8010174 <UART_SetConfig+0x2b0>
 8010188:	4a1b      	ldr	r2, [pc, #108]	; (80101f8 <UART_SetConfig+0x334>)
 801018a:	5cd3      	ldrb	r3, [r2, r3]
 801018c:	e747      	b.n	801001e <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801018e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010192:	f43f af62 	beq.w	801005a <UART_SetConfig+0x196>
 8010196:	e6fd      	b.n	800ff94 <UART_SetConfig+0xd0>
 8010198:	4b13      	ldr	r3, [pc, #76]	; (80101e8 <UART_SetConfig+0x324>)
 801019a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801019e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80101a2:	2b20      	cmp	r3, #32
 80101a4:	f43f af79 	beq.w	801009a <UART_SetConfig+0x1d6>
 80101a8:	d804      	bhi.n	80101b4 <UART_SetConfig+0x2f0>
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d0da      	beq.n	8010164 <UART_SetConfig+0x2a0>
 80101ae:	2b10      	cmp	r3, #16
 80101b0:	d0d2      	beq.n	8010158 <UART_SetConfig+0x294>
 80101b2:	e6ef      	b.n	800ff94 <UART_SetConfig+0xd0>
 80101b4:	2b30      	cmp	r3, #48	; 0x30
 80101b6:	f43f af50 	beq.w	801005a <UART_SetConfig+0x196>
 80101ba:	e6eb      	b.n	800ff94 <UART_SetConfig+0xd0>
 80101bc:	019bfcc0 	.word	0x019bfcc0
 80101c0:	efff69f3 	.word	0xefff69f3
 80101c4:	40011000 	.word	0x40011000
 80101c8:	40004400 	.word	0x40004400
 80101cc:	40004800 	.word	0x40004800
 80101d0:	40004c00 	.word	0x40004c00
 80101d4:	40005000 	.word	0x40005000
 80101d8:	40011400 	.word	0x40011400
 80101dc:	40007800 	.word	0x40007800
 80101e0:	40007c00 	.word	0x40007c00
 80101e4:	08028c5c 	.word	0x08028c5c
 80101e8:	40023800 	.word	0x40023800
 80101ec:	08028c9c 	.word	0x08028c9c
 80101f0:	00f42400 	.word	0x00f42400
 80101f4:	01e84800 	.word	0x01e84800
 80101f8:	08028c98 	.word	0x08028c98
 80101fc:	4b23      	ldr	r3, [pc, #140]	; (801028c <UART_SetConfig+0x3c8>)
 80101fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010202:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010206:	2b80      	cmp	r3, #128	; 0x80
 8010208:	f43f af47 	beq.w	801009a <UART_SetConfig+0x1d6>
 801020c:	d804      	bhi.n	8010218 <UART_SetConfig+0x354>
 801020e:	2b00      	cmp	r3, #0
 8010210:	d0a8      	beq.n	8010164 <UART_SetConfig+0x2a0>
 8010212:	2b40      	cmp	r3, #64	; 0x40
 8010214:	d0a0      	beq.n	8010158 <UART_SetConfig+0x294>
 8010216:	e6bd      	b.n	800ff94 <UART_SetConfig+0xd0>
 8010218:	2bc0      	cmp	r3, #192	; 0xc0
 801021a:	f43f af1e 	beq.w	801005a <UART_SetConfig+0x196>
 801021e:	e6b9      	b.n	800ff94 <UART_SetConfig+0xd0>
 8010220:	d806      	bhi.n	8010230 <UART_SetConfig+0x36c>
 8010222:	2b00      	cmp	r3, #0
 8010224:	f43f af7e 	beq.w	8010124 <UART_SetConfig+0x260>
 8010228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801022c:	d094      	beq.n	8010158 <UART_SetConfig+0x294>
 801022e:	e6b1      	b.n	800ff94 <UART_SetConfig+0xd0>
 8010230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010234:	f43f af11 	beq.w	801005a <UART_SetConfig+0x196>
 8010238:	e6ac      	b.n	800ff94 <UART_SetConfig+0xd0>
 801023a:	4b14      	ldr	r3, [pc, #80]	; (801028c <UART_SetConfig+0x3c8>)
 801023c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010248:	f43f af27 	beq.w	801009a <UART_SetConfig+0x1d6>
 801024c:	f63f af02 	bhi.w	8010054 <UART_SetConfig+0x190>
 8010250:	2b00      	cmp	r3, #0
 8010252:	d087      	beq.n	8010164 <UART_SetConfig+0x2a0>
 8010254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010258:	f43f af7e 	beq.w	8010158 <UART_SetConfig+0x294>
 801025c:	e69a      	b.n	800ff94 <UART_SetConfig+0xd0>
 801025e:	4b0b      	ldr	r3, [pc, #44]	; (801028c <UART_SetConfig+0x3c8>)
 8010260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010264:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801026c:	f43f af15 	beq.w	801009a <UART_SetConfig+0x1d6>
 8010270:	d807      	bhi.n	8010282 <UART_SetConfig+0x3be>
 8010272:	2b00      	cmp	r3, #0
 8010274:	f43f af76 	beq.w	8010164 <UART_SetConfig+0x2a0>
 8010278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801027c:	f43f af6c 	beq.w	8010158 <UART_SetConfig+0x294>
 8010280:	e688      	b.n	800ff94 <UART_SetConfig+0xd0>
 8010282:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010286:	f43f aee8 	beq.w	801005a <UART_SetConfig+0x196>
 801028a:	e683      	b.n	800ff94 <UART_SetConfig+0xd0>
 801028c:	40023800 	.word	0x40023800

08010290 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010290:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010292:	2bff      	cmp	r3, #255	; 0xff
{
 8010294:	b510      	push	{r4, lr}
 8010296:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010298:	d87b      	bhi.n	8010392 <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801029a:	07da      	lsls	r2, r3, #31
 801029c:	d50a      	bpl.n	80102b4 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 801029e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80102a0:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 80102a4:	f040 808e 	bne.w	80103c4 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80102a8:	6820      	ldr	r0, [r4, #0]
 80102aa:	6842      	ldr	r2, [r0, #4]
 80102ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80102b0:	430a      	orrs	r2, r1
 80102b2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80102b4:	0798      	lsls	r0, r3, #30
 80102b6:	d50a      	bpl.n	80102ce <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80102b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80102ba:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 80102be:	f040 8089 	bne.w	80103d4 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80102c2:	6820      	ldr	r0, [r4, #0]
 80102c4:	6842      	ldr	r2, [r0, #4]
 80102c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80102ca:	430a      	orrs	r2, r1
 80102cc:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80102ce:	0759      	lsls	r1, r3, #29
 80102d0:	d50a      	bpl.n	80102e8 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80102d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80102d4:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 80102d8:	f040 8084 	bne.w	80103e4 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80102dc:	6820      	ldr	r0, [r4, #0]
 80102de:	6842      	ldr	r2, [r0, #4]
 80102e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80102e4:	430a      	orrs	r2, r1
 80102e6:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80102e8:	071a      	lsls	r2, r3, #28
 80102ea:	d509      	bpl.n	8010300 <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80102ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102ee:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 80102f2:	d17f      	bne.n	80103f4 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80102f4:	6820      	ldr	r0, [r4, #0]
 80102f6:	6842      	ldr	r2, [r0, #4]
 80102f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80102fc:	430a      	orrs	r2, r1
 80102fe:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010300:	06d8      	lsls	r0, r3, #27
 8010302:	d509      	bpl.n	8010318 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8010304:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010306:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 801030a:	d17b      	bne.n	8010404 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801030c:	6820      	ldr	r0, [r4, #0]
 801030e:	6882      	ldr	r2, [r0, #8]
 8010310:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010314:	430a      	orrs	r2, r1
 8010316:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010318:	0699      	lsls	r1, r3, #26
 801031a:	d509      	bpl.n	8010330 <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 801031c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801031e:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8010322:	d177      	bne.n	8010414 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010324:	6820      	ldr	r0, [r4, #0]
 8010326:	6882      	ldr	r2, [r0, #8]
 8010328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801032c:	430a      	orrs	r2, r1
 801032e:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010330:	065a      	lsls	r2, r3, #25
 8010332:	d521      	bpl.n	8010378 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8010334:	4b46      	ldr	r3, [pc, #280]	; (8010450 <UART_AdvFeatureConfig+0x1c0>)
 8010336:	6822      	ldr	r2, [r4, #0]
 8010338:	4846      	ldr	r0, [pc, #280]	; (8010454 <UART_AdvFeatureConfig+0x1c4>)
 801033a:	4947      	ldr	r1, [pc, #284]	; (8010458 <UART_AdvFeatureConfig+0x1c8>)
 801033c:	429a      	cmp	r2, r3
 801033e:	bf18      	it	ne
 8010340:	4282      	cmpne	r2, r0
 8010342:	bf14      	ite	ne
 8010344:	2301      	movne	r3, #1
 8010346:	2300      	moveq	r3, #0
 8010348:	428a      	cmp	r2, r1
 801034a:	bf0c      	ite	eq
 801034c:	2300      	moveq	r3, #0
 801034e:	f003 0301 	andne.w	r3, r3, #1
 8010352:	b113      	cbz	r3, 801035a <UART_AdvFeatureConfig+0xca>
 8010354:	4b41      	ldr	r3, [pc, #260]	; (801045c <UART_AdvFeatureConfig+0x1cc>)
 8010356:	429a      	cmp	r2, r3
 8010358:	d16b      	bne.n	8010432 <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 801035a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801035c:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8010360:	d160      	bne.n	8010424 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010362:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010364:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010368:	684b      	ldr	r3, [r1, #4]
 801036a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801036e:	ea43 0302 	orr.w	r3, r3, r2
 8010372:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010374:	d014      	beq.n	80103a0 <UART_AdvFeatureConfig+0x110>
 8010376:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010378:	061b      	lsls	r3, r3, #24
 801037a:	d509      	bpl.n	8010390 <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 801037c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801037e:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8010382:	d118      	bne.n	80103b6 <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010384:	6821      	ldr	r1, [r4, #0]
 8010386:	684b      	ldr	r3, [r1, #4]
 8010388:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801038c:	4313      	orrs	r3, r2
 801038e:	604b      	str	r3, [r1, #4]
}
 8010390:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010392:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8010396:	4832      	ldr	r0, [pc, #200]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 8010398:	f7f3 fbd6 	bl	8003b48 <assert_failed>
 801039c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801039e:	e77c      	b.n	801029a <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80103a0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80103a2:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 80103a6:	d14a      	bne.n	801043e <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80103a8:	684a      	ldr	r2, [r1, #4]
 80103aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103ac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80103b0:	4302      	orrs	r2, r0
 80103b2:	604a      	str	r2, [r1, #4]
 80103b4:	e7e0      	b.n	8010378 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80103b6:	f640 4136 	movw	r1, #3126	; 0xc36
 80103ba:	4829      	ldr	r0, [pc, #164]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 80103bc:	f7f3 fbc4 	bl	8003b48 <assert_failed>
 80103c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80103c2:	e7df      	b.n	8010384 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80103c4:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80103c8:	4825      	ldr	r0, [pc, #148]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 80103ca:	f7f3 fbbd 	bl	8003b48 <assert_failed>
 80103ce:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 80103d2:	e769      	b.n	80102a8 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80103d4:	f640 4105 	movw	r1, #3077	; 0xc05
 80103d8:	4821      	ldr	r0, [pc, #132]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 80103da:	f7f3 fbb5 	bl	8003b48 <assert_failed>
 80103de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80103e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103e2:	e76e      	b.n	80102c2 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80103e4:	f640 410c 	movw	r1, #3084	; 0xc0c
 80103e8:	481d      	ldr	r0, [pc, #116]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 80103ea:	f7f3 fbad 	bl	8003b48 <assert_failed>
 80103ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80103f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103f2:	e773      	b.n	80102dc <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80103f4:	f640 4113 	movw	r1, #3091	; 0xc13
 80103f8:	4819      	ldr	r0, [pc, #100]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 80103fa:	f7f3 fba5 	bl	8003b48 <assert_failed>
 80103fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010402:	e777      	b.n	80102f4 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8010404:	f640 411a 	movw	r1, #3098	; 0xc1a
 8010408:	4815      	ldr	r0, [pc, #84]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 801040a:	f7f3 fb9d 	bl	8003b48 <assert_failed>
 801040e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010412:	e77b      	b.n	801030c <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8010414:	f640 4121 	movw	r1, #3105	; 0xc21
 8010418:	4811      	ldr	r0, [pc, #68]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 801041a:	f7f3 fb95 	bl	8003b48 <assert_failed>
 801041e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010422:	e77f      	b.n	8010324 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8010424:	f640 4129 	movw	r1, #3113	; 0xc29
 8010428:	480d      	ldr	r0, [pc, #52]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 801042a:	f7f3 fb8d 	bl	8003b48 <assert_failed>
 801042e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010430:	e797      	b.n	8010362 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8010432:	f640 4128 	movw	r1, #3112	; 0xc28
 8010436:	480a      	ldr	r0, [pc, #40]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 8010438:	f7f3 fb86 	bl	8003b48 <assert_failed>
 801043c:	e78d      	b.n	801035a <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 801043e:	f640 412e 	movw	r1, #3118	; 0xc2e
 8010442:	4807      	ldr	r0, [pc, #28]	; (8010460 <UART_AdvFeatureConfig+0x1d0>)
 8010444:	f7f3 fb80 	bl	8003b48 <assert_failed>
 8010448:	6821      	ldr	r1, [r4, #0]
 801044a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801044c:	e7ac      	b.n	80103a8 <UART_AdvFeatureConfig+0x118>
 801044e:	bf00      	nop
 8010450:	40011000 	.word	0x40011000
 8010454:	40004400 	.word	0x40004400
 8010458:	40004800 	.word	0x40004800
 801045c:	40011400 	.word	0x40011400
 8010460:	08028c5c 	.word	0x08028c5c

08010464 <UART_WaitOnFlagUntilTimeout>:
{
 8010464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801046c:	4681      	mov	r9, r0
 801046e:	460f      	mov	r7, r1
 8010470:	4616      	mov	r6, r2
 8010472:	469a      	mov	sl, r3
 8010474:	6805      	ldr	r5, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010476:	e002      	b.n	801047e <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8010478:	f1b8 3fff 	cmp.w	r8, #4294967295
 801047c:	d10a      	bne.n	8010494 <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801047e:	69ec      	ldr	r4, [r5, #28]
 8010480:	ea37 0304 	bics.w	r3, r7, r4
 8010484:	bf0c      	ite	eq
 8010486:	2401      	moveq	r4, #1
 8010488:	2400      	movne	r4, #0
 801048a:	42b4      	cmp	r4, r6
 801048c:	d0f4      	beq.n	8010478 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 801048e:	2000      	movs	r0, #0
}
 8010490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010494:	f7f6 f872 	bl	800657c <HAL_GetTick>
 8010498:	eba0 000a 	sub.w	r0, r0, sl
 801049c:	4540      	cmp	r0, r8
 801049e:	d82d      	bhi.n	80104fc <UART_WaitOnFlagUntilTimeout+0x98>
 80104a0:	f1b8 0f00 	cmp.w	r8, #0
 80104a4:	d02a      	beq.n	80104fc <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80104a6:	f8d9 5000 	ldr.w	r5, [r9]
 80104aa:	682b      	ldr	r3, [r5, #0]
 80104ac:	462a      	mov	r2, r5
 80104ae:	0759      	lsls	r1, r3, #29
 80104b0:	d5e5      	bpl.n	801047e <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104b2:	69eb      	ldr	r3, [r5, #28]
 80104b4:	051b      	lsls	r3, r3, #20
 80104b6:	d5e2      	bpl.n	801047e <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104bc:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104be:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80104c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c6:	e842 3100 	strex	r1, r3, [r2]
 80104ca:	2900      	cmp	r1, #0
 80104cc:	d1f7      	bne.n	80104be <UART_WaitOnFlagUntilTimeout+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ce:	f102 0308 	add.w	r3, r2, #8
 80104d2:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104da:	f102 0008 	add.w	r0, r2, #8
 80104de:	e840 3100 	strex	r1, r3, [r0]
 80104e2:	2900      	cmp	r1, #0
 80104e4:	d1f3      	bne.n	80104ce <UART_WaitOnFlagUntilTimeout+0x6a>
          huart->gState = HAL_UART_STATE_READY;
 80104e6:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80104e8:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80104ea:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 80104ee:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80104f2:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80104f6:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 80104fa:	e7c9      	b.n	8010490 <UART_WaitOnFlagUntilTimeout+0x2c>
 80104fc:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010500:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010508:	e842 3100 	strex	r1, r3, [r2]
 801050c:	2900      	cmp	r1, #0
 801050e:	d1f7      	bne.n	8010500 <UART_WaitOnFlagUntilTimeout+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010510:	f102 0308 	add.w	r3, r2, #8
 8010514:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010518:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801051c:	f102 0008 	add.w	r0, r2, #8
 8010520:	e840 3100 	strex	r1, r3, [r0]
 8010524:	2900      	cmp	r1, #0
 8010526:	d1f3      	bne.n	8010510 <UART_WaitOnFlagUntilTimeout+0xac>
        huart->gState = HAL_UART_STATE_READY;
 8010528:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 801052a:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 801052c:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8010530:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010534:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8010538:	e7aa      	b.n	8010490 <UART_WaitOnFlagUntilTimeout+0x2c>
 801053a:	bf00      	nop

0801053c <HAL_UART_Transmit>:
{
 801053c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010540:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8010542:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8010544:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8010546:	2b20      	cmp	r3, #32
 8010548:	d14b      	bne.n	80105e2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 801054a:	460d      	mov	r5, r1
 801054c:	2900      	cmp	r1, #0
 801054e:	d044      	beq.n	80105da <HAL_UART_Transmit+0x9e>
 8010550:	fab2 f982 	clz	r9, r2
 8010554:	4617      	mov	r7, r2
 8010556:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801055a:	2a00      	cmp	r2, #0
 801055c:	d03d      	beq.n	80105da <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 801055e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8010562:	4604      	mov	r4, r0
 8010564:	2b01      	cmp	r3, #1
 8010566:	d03c      	beq.n	80105e2 <HAL_UART_Transmit+0xa6>
 8010568:	2201      	movs	r2, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801056a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801056c:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8010570:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010574:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8010576:	f7f6 f801 	bl	800657c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801057a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 801057c:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 801057e:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010582:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8010586:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801058a:	d040      	beq.n	801060e <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 801058c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8010590:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8010592:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8010594:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8010598:	b973      	cbnz	r3, 80105b8 <HAL_UART_Transmit+0x7c>
 801059a:	e02a      	b.n	80105f2 <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801059c:	6823      	ldr	r3, [r4, #0]
 801059e:	f815 2b01 	ldrb.w	r2, [r5], #1
 80105a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80105a4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80105a8:	3a01      	subs	r2, #1
 80105aa:	b292      	uxth	r2, r2
 80105ac:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80105b0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80105b4:	b292      	uxth	r2, r2
 80105b6:	b1e2      	cbz	r2, 80105f2 <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80105b8:	4643      	mov	r3, r8
 80105ba:	2200      	movs	r2, #0
 80105bc:	2180      	movs	r1, #128	; 0x80
 80105be:	4620      	mov	r0, r4
 80105c0:	9600      	str	r6, [sp, #0]
 80105c2:	f7ff ff4f 	bl	8010464 <UART_WaitOnFlagUntilTimeout>
 80105c6:	b980      	cbnz	r0, 80105ea <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 80105c8:	2d00      	cmp	r5, #0
 80105ca:	d1e7      	bne.n	801059c <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80105cc:	f839 3b02 	ldrh.w	r3, [r9], #2
 80105d0:	6822      	ldr	r2, [r4, #0]
 80105d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105d6:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80105d8:	e7e4      	b.n	80105a4 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 80105da:	2001      	movs	r0, #1
}
 80105dc:	b003      	add	sp, #12
 80105de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80105e2:	2002      	movs	r0, #2
}
 80105e4:	b003      	add	sp, #12
 80105e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80105ea:	2003      	movs	r0, #3
}
 80105ec:	b003      	add	sp, #12
 80105ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80105f2:	4643      	mov	r3, r8
 80105f4:	2200      	movs	r2, #0
 80105f6:	2140      	movs	r1, #64	; 0x40
 80105f8:	4620      	mov	r0, r4
 80105fa:	9600      	str	r6, [sp, #0]
 80105fc:	f7ff ff32 	bl	8010464 <UART_WaitOnFlagUntilTimeout>
 8010600:	2800      	cmp	r0, #0
 8010602:	d1f2      	bne.n	80105ea <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8010604:	2320      	movs	r3, #32
 8010606:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8010608:	b003      	add	sp, #12
 801060a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801060e:	6923      	ldr	r3, [r4, #16]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1bb      	bne.n	801058c <HAL_UART_Transmit+0x50>
 8010614:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8010616:	461d      	mov	r5, r3
 8010618:	e7b8      	b.n	801058c <HAL_UART_Transmit+0x50>
 801061a:	bf00      	nop

0801061c <UART_CheckIdleState>:
{
 801061c:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801061e:	2600      	movs	r6, #0
{
 8010620:	4604      	mov	r4, r0
 8010622:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010624:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8010628:	f7f5 ffa8 	bl	800657c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801062c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 801062e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010630:	681a      	ldr	r2, [r3, #0]
 8010632:	0712      	lsls	r2, r2, #28
 8010634:	d40c      	bmi.n	8010650 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	075b      	lsls	r3, r3, #29
 801063a:	d418      	bmi.n	801066e <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801063c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 801063e:	2220      	movs	r2, #32
  return HAL_OK;
 8010640:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8010642:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8010644:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8010648:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801064a:	6623      	str	r3, [r4, #96]	; 0x60
}
 801064c:	b002      	add	sp, #8
 801064e:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010650:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8010654:	4632      	mov	r2, r6
 8010656:	462b      	mov	r3, r5
 8010658:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801065c:	9000      	str	r0, [sp, #0]
 801065e:	4620      	mov	r0, r4
 8010660:	f7ff ff00 	bl	8010464 <UART_WaitOnFlagUntilTimeout>
 8010664:	b978      	cbnz	r0, 8010686 <UART_CheckIdleState+0x6a>
 8010666:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	075b      	lsls	r3, r3, #29
 801066c:	d5e6      	bpl.n	801063c <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801066e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8010672:	462b      	mov	r3, r5
 8010674:	2200      	movs	r2, #0
 8010676:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801067a:	9000      	str	r0, [sp, #0]
 801067c:	4620      	mov	r0, r4
 801067e:	f7ff fef1 	bl	8010464 <UART_WaitOnFlagUntilTimeout>
 8010682:	2800      	cmp	r0, #0
 8010684:	d0da      	beq.n	801063c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8010686:	2003      	movs	r0, #3
}
 8010688:	b002      	add	sp, #8
 801068a:	bd70      	pop	{r4, r5, r6, pc}

0801068c <HAL_UART_Init>:
  if (huart == NULL)
 801068c:	2800      	cmp	r0, #0
 801068e:	f000 8097 	beq.w	80107c0 <HAL_UART_Init+0x134>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8010692:	6802      	ldr	r2, [r0, #0]
{
 8010694:	b538      	push	{r3, r4, r5, lr}
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8010696:	6983      	ldr	r3, [r0, #24]
 8010698:	4604      	mov	r4, r0
 801069a:	2b00      	cmp	r3, #0
 801069c:	d050      	beq.n	8010740 <HAL_UART_Init+0xb4>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 801069e:	4b4c      	ldr	r3, [pc, #304]	; (80107d0 <HAL_UART_Init+0x144>)
 80106a0:	494c      	ldr	r1, [pc, #304]	; (80107d4 <HAL_UART_Init+0x148>)
 80106a2:	484d      	ldr	r0, [pc, #308]	; (80107d8 <HAL_UART_Init+0x14c>)
 80106a4:	429a      	cmp	r2, r3
 80106a6:	bf18      	it	ne
 80106a8:	428a      	cmpne	r2, r1
 80106aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106ae:	4d4b      	ldr	r5, [pc, #300]	; (80107dc <HAL_UART_Init+0x150>)
 80106b0:	bf14      	ite	ne
 80106b2:	2301      	movne	r3, #1
 80106b4:	2300      	moveq	r3, #0
 80106b6:	4282      	cmp	r2, r0
 80106b8:	bf0c      	ite	eq
 80106ba:	2300      	moveq	r3, #0
 80106bc:	f003 0301 	andne.w	r3, r3, #1
 80106c0:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 80106c4:	428a      	cmp	r2, r1
 80106c6:	bf0c      	ite	eq
 80106c8:	2300      	moveq	r3, #0
 80106ca:	f003 0301 	andne.w	r3, r3, #1
 80106ce:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 80106d2:	42aa      	cmp	r2, r5
 80106d4:	bf0c      	ite	eq
 80106d6:	2300      	moveq	r3, #0
 80106d8:	f003 0301 	andne.w	r3, r3, #1
 80106dc:	4282      	cmp	r2, r0
 80106de:	bf0c      	ite	eq
 80106e0:	2300      	moveq	r3, #0
 80106e2:	f003 0301 	andne.w	r3, r3, #1
 80106e6:	428a      	cmp	r2, r1
 80106e8:	bf0c      	ite	eq
 80106ea:	2300      	moveq	r3, #0
 80106ec:	f003 0301 	andne.w	r3, r3, #1
 80106f0:	b113      	cbz	r3, 80106f8 <HAL_UART_Init+0x6c>
 80106f2:	4b3b      	ldr	r3, [pc, #236]	; (80107e0 <HAL_UART_Init+0x154>)
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d165      	bne.n	80107c4 <HAL_UART_Init+0x138>
  if (huart->gState == HAL_UART_STATE_RESET)
 80106f8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d056      	beq.n	80107ac <HAL_UART_Init+0x120>
  __HAL_UART_DISABLE(huart);
 80106fe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010700:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010702:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8010704:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8010706:	6813      	ldr	r3, [r2, #0]
 8010708:	f023 0301 	bic.w	r3, r3, #1
 801070c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801070e:	f7ff fbd9 	bl	800fec4 <UART_SetConfig>
 8010712:	2801      	cmp	r0, #1
 8010714:	d048      	beq.n	80107a8 <HAL_UART_Init+0x11c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010718:	2b00      	cmp	r3, #0
 801071a:	d14d      	bne.n	80107b8 <HAL_UART_Init+0x12c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801071c:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 801071e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010720:	685a      	ldr	r2, [r3, #4]
 8010722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010728:	689a      	ldr	r2, [r3, #8]
 801072a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801072e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	f042 0201 	orr.w	r2, r2, #1
 8010736:	601a      	str	r2, [r3, #0]
}
 8010738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 801073c:	f7ff bf6e 	b.w	801061c <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8010740:	4b23      	ldr	r3, [pc, #140]	; (80107d0 <HAL_UART_Init+0x144>)
 8010742:	4924      	ldr	r1, [pc, #144]	; (80107d4 <HAL_UART_Init+0x148>)
 8010744:	4824      	ldr	r0, [pc, #144]	; (80107d8 <HAL_UART_Init+0x14c>)
 8010746:	429a      	cmp	r2, r3
 8010748:	bf18      	it	ne
 801074a:	428a      	cmpne	r2, r1
 801074c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010750:	4d22      	ldr	r5, [pc, #136]	; (80107dc <HAL_UART_Init+0x150>)
 8010752:	bf14      	ite	ne
 8010754:	2301      	movne	r3, #1
 8010756:	2300      	moveq	r3, #0
 8010758:	4282      	cmp	r2, r0
 801075a:	bf0c      	ite	eq
 801075c:	2300      	moveq	r3, #0
 801075e:	f003 0301 	andne.w	r3, r3, #1
 8010762:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 8010766:	428a      	cmp	r2, r1
 8010768:	bf0c      	ite	eq
 801076a:	2300      	moveq	r3, #0
 801076c:	f003 0301 	andne.w	r3, r3, #1
 8010770:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 8010774:	42aa      	cmp	r2, r5
 8010776:	bf0c      	ite	eq
 8010778:	2300      	moveq	r3, #0
 801077a:	f003 0301 	andne.w	r3, r3, #1
 801077e:	4282      	cmp	r2, r0
 8010780:	bf0c      	ite	eq
 8010782:	2300      	moveq	r3, #0
 8010784:	f003 0301 	andne.w	r3, r3, #1
 8010788:	428a      	cmp	r2, r1
 801078a:	bf0c      	ite	eq
 801078c:	2300      	moveq	r3, #0
 801078e:	f003 0301 	andne.w	r3, r3, #1
 8010792:	2b00      	cmp	r3, #0
 8010794:	d0b0      	beq.n	80106f8 <HAL_UART_Init+0x6c>
 8010796:	4b12      	ldr	r3, [pc, #72]	; (80107e0 <HAL_UART_Init+0x154>)
 8010798:	429a      	cmp	r2, r3
 801079a:	d0ad      	beq.n	80106f8 <HAL_UART_Init+0x6c>
 801079c:	f240 1131 	movw	r1, #305	; 0x131
 80107a0:	4810      	ldr	r0, [pc, #64]	; (80107e4 <HAL_UART_Init+0x158>)
 80107a2:	f7f3 f9d1 	bl	8003b48 <assert_failed>
 80107a6:	e7a7      	b.n	80106f8 <HAL_UART_Init+0x6c>
}
 80107a8:	2001      	movs	r0, #1
 80107aa:	bd38      	pop	{r3, r4, r5, pc}
    HAL_UART_MspInit(huart);
 80107ac:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 80107ae:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80107b2:	f7f4 fd1f 	bl	80051f4 <HAL_UART_MspInit>
 80107b6:	e7a2      	b.n	80106fe <HAL_UART_Init+0x72>
    UART_AdvFeatureConfig(huart);
 80107b8:	4620      	mov	r0, r4
 80107ba:	f7ff fd69 	bl	8010290 <UART_AdvFeatureConfig>
 80107be:	e7ad      	b.n	801071c <HAL_UART_Init+0x90>
}
 80107c0:	2001      	movs	r0, #1
 80107c2:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80107c4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80107c8:	4806      	ldr	r0, [pc, #24]	; (80107e4 <HAL_UART_Init+0x158>)
 80107ca:	f7f3 f9bd 	bl	8003b48 <assert_failed>
 80107ce:	e793      	b.n	80106f8 <HAL_UART_Init+0x6c>
 80107d0:	40011000 	.word	0x40011000
 80107d4:	40004400 	.word	0x40004400
 80107d8:	40004800 	.word	0x40004800
 80107dc:	40005000 	.word	0x40005000
 80107e0:	40007c00 	.word	0x40007c00
 80107e4:	08028c5c 	.word	0x08028c5c

080107e8 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d04a      	beq.n	8010882 <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80107ec:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 80107f0:	b570      	push	{r4, r5, r6, lr}
 80107f2:	460e      	mov	r6, r1
 80107f4:	4604      	mov	r4, r0
 80107f6:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80107f8:	d13d      	bne.n	8010876 <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 80107fa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d034      	beq.n	801086a <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 8010800:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010802:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010804:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8010806:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8010808:	6813      	ldr	r3, [r2, #0]
 801080a:	f023 0301 	bic.w	r3, r3, #1
 801080e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010810:	f7ff fb58 	bl	800fec4 <UART_SetConfig>
 8010814:	2801      	cmp	r0, #1
 8010816:	d026      	beq.n	8010866 <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801081a:	bb03      	cbnz	r3, 801085e <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801081c:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 801081e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010822:	685a      	ldr	r2, [r3, #4]
 8010824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010828:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801082a:	689a      	ldr	r2, [r3, #8]
 801082c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010830:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8010832:	d00d      	beq.n	8010850 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8010834:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8010836:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8010838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801083c:	4315      	orrs	r5, r2
 801083e:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	f042 0201 	orr.w	r2, r2, #1
}
 8010846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 801084a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801084c:	f7ff bee6 	b.w	801061c <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8010850:	6859      	ldr	r1, [r3, #4]
 8010852:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8010856:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 801085a:	605e      	str	r6, [r3, #4]
 801085c:	e7ea      	b.n	8010834 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 801085e:	4620      	mov	r0, r4
 8010860:	f7ff fd16 	bl	8010290 <UART_AdvFeatureConfig>
 8010864:	e7da      	b.n	801081c <HAL_MultiProcessor_Init+0x34>
}
 8010866:	2001      	movs	r0, #1
 8010868:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 801086a:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 801086c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8010870:	f7f4 fcc0 	bl	80051f4 <HAL_UART_MspInit>
 8010874:	e7c4      	b.n	8010800 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8010876:	f240 211d 	movw	r1, #541	; 0x21d
 801087a:	4803      	ldr	r0, [pc, #12]	; (8010888 <HAL_MultiProcessor_Init+0xa0>)
 801087c:	f7f3 f964 	bl	8003b48 <assert_failed>
 8010880:	e7bb      	b.n	80107fa <HAL_MultiProcessor_Init+0x12>
}
 8010882:	2001      	movs	r0, #1
 8010884:	4770      	bx	lr
 8010886:	bf00      	nop
 8010888:	08028c5c 	.word	0x08028c5c

0801088c <UART_Start_Receive_DMA>:
{
 801088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010890:	2500      	movs	r5, #0
  if (huart->hdmarx != NULL)
 8010892:	6f00      	ldr	r0, [r0, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010894:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010896:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->pRxBuffPtr = pData;
 801089a:	6561      	str	r1, [r4, #84]	; 0x54
  huart->RxXferSize = Size;
 801089c:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80108a0:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80108a2:	b168      	cbz	r0, 80108c0 <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80108a4:	4e1f      	ldr	r6, [pc, #124]	; (8010924 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80108a6:	4613      	mov	r3, r2
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80108a8:	4f1f      	ldr	r7, [pc, #124]	; (8010928 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80108aa:	460a      	mov	r2, r1
 80108ac:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 80108ae:	6505      	str	r5, [r0, #80]	; 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80108b0:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80108b2:	e9c0 760f 	strd	r7, r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80108b6:	4e1d      	ldr	r6, [pc, #116]	; (801092c <UART_Start_Receive_DMA+0xa0>)
 80108b8:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80108ba:	f7f7 f835 	bl	8007928 <HAL_DMA_Start_IT>
 80108be:	bb40      	cbnz	r0, 8010912 <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 80108c0:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 80108c2:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 80108c4:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 80108c8:	b14b      	cbz	r3, 80108de <UART_Start_Receive_DMA+0x52>
 80108ca:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108cc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108d4:	e843 2100 	strex	r1, r2, [r3]
 80108d8:	2900      	cmp	r1, #0
 80108da:	d1f7      	bne.n	80108cc <UART_Start_Receive_DMA+0x40>
 80108dc:	e000      	b.n	80108e0 <UART_Start_Receive_DMA+0x54>
 80108de:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e0:	f103 0208 	add.w	r2, r3, #8
 80108e4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108e8:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ec:	f103 0008 	add.w	r0, r3, #8
 80108f0:	e840 2100 	strex	r1, r2, [r0]
 80108f4:	2900      	cmp	r1, #0
 80108f6:	d1f3      	bne.n	80108e0 <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f8:	f103 0208 	add.w	r2, r3, #8
 80108fc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010904:	f103 0108 	add.w	r1, r3, #8
 8010908:	e841 2000 	strex	r0, r2, [r1]
 801090c:	2800      	cmp	r0, #0
 801090e:	d1f3      	bne.n	80108f8 <UART_Start_Receive_DMA+0x6c>
}
 8010910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010912:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8010914:	2320      	movs	r3, #32
      return HAL_ERROR;
 8010916:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8010918:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801091c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8010920:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8010922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010924:	0800fb5d 	.word	0x0800fb5d
 8010928:	0800fb79 	.word	0x0800fb79
 801092c:	0800faed 	.word	0x0800faed

08010930 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8010930:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8010932:	2b20      	cmp	r3, #32
 8010934:	d11e      	bne.n	8010974 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 8010936:	b1d9      	cbz	r1, 8010970 <HAL_UART_Receive_DMA+0x40>
 8010938:	fab2 f382 	clz	r3, r2
 801093c:	095b      	lsrs	r3, r3, #5
 801093e:	b1ba      	cbz	r2, 8010970 <HAL_UART_Receive_DMA+0x40>
{
 8010940:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8010942:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8010946:	2c01      	cmp	r4, #1
 8010948:	d016      	beq.n	8010978 <HAL_UART_Receive_DMA+0x48>
 801094a:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801094c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801094e:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8010950:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010954:	6863      	ldr	r3, [r4, #4]
 8010956:	021b      	lsls	r3, r3, #8
 8010958:	d507      	bpl.n	801096a <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801095a:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801095e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010962:	e844 3500 	strex	r5, r3, [r4]
 8010966:	2d00      	cmp	r5, #0
 8010968:	d1f7      	bne.n	801095a <HAL_UART_Receive_DMA+0x2a>
}
 801096a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 801096c:	f7ff bf8e 	b.w	801088c <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8010970:	2001      	movs	r0, #1
}
 8010972:	4770      	bx	lr
    return HAL_BUSY;
 8010974:	2002      	movs	r0, #2
 8010976:	4770      	bx	lr
 8010978:	2002      	movs	r0, #2
}
 801097a:	bc30      	pop	{r4, r5}
 801097c:	4770      	bx	lr
 801097e:	bf00      	nop

08010980 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8010980:	2800      	cmp	r0, #0
 8010982:	f000 8089 	beq.w	8010a98 <HAL_RS485Ex_Init+0x118>
{
 8010986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 801098a:	4c47      	ldr	r4, [pc, #284]	; (8010aa8 <HAL_RS485Ex_Init+0x128>)
 801098c:	460e      	mov	r6, r1
 801098e:	461d      	mov	r5, r3
 8010990:	4946      	ldr	r1, [pc, #280]	; (8010aac <HAL_RS485Ex_Init+0x12c>)
 8010992:	6803      	ldr	r3, [r0, #0]
 8010994:	4617      	mov	r7, r2
 8010996:	4a46      	ldr	r2, [pc, #280]	; (8010ab0 <HAL_RS485Ex_Init+0x130>)
 8010998:	4680      	mov	r8, r0
 801099a:	42a3      	cmp	r3, r4
 801099c:	bf18      	it	ne
 801099e:	428b      	cmpne	r3, r1
 80109a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80109a4:	bf14      	ite	ne
 80109a6:	2401      	movne	r4, #1
 80109a8:	2400      	moveq	r4, #0
 80109aa:	4293      	cmp	r3, r2
 80109ac:	bf0c      	ite	eq
 80109ae:	2400      	moveq	r4, #0
 80109b0:	f004 0401 	andne.w	r4, r4, #1
 80109b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109b8:	428b      	cmp	r3, r1
 80109ba:	bf0c      	ite	eq
 80109bc:	2400      	moveq	r4, #0
 80109be:	f004 0401 	andne.w	r4, r4, #1
 80109c2:	f501 4148 	add.w	r1, r1, #51200	; 0xc800
 80109c6:	4293      	cmp	r3, r2
 80109c8:	bf0c      	ite	eq
 80109ca:	2400      	moveq	r4, #0
 80109cc:	f004 0401 	andne.w	r4, r4, #1
 80109d0:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 80109d4:	428b      	cmp	r3, r1
 80109d6:	bf0c      	ite	eq
 80109d8:	2400      	moveq	r4, #0
 80109da:	f004 0401 	andne.w	r4, r4, #1
 80109de:	4293      	cmp	r3, r2
 80109e0:	bf0c      	ite	eq
 80109e2:	2400      	moveq	r4, #0
 80109e4:	f004 0401 	andne.w	r4, r4, #1
 80109e8:	b11c      	cbz	r4, 80109f2 <HAL_RS485Ex_Init+0x72>
 80109ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d154      	bne.n	8010a9c <HAL_RS485Ex_Init+0x11c>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 80109f2:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 80109f6:	d14a      	bne.n	8010a8e <HAL_RS485Ex_Init+0x10e>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80109f8:	2f1f      	cmp	r7, #31
 80109fa:	d843      	bhi.n	8010a84 <HAL_RS485Ex_Init+0x104>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 80109fc:	2d1f      	cmp	r5, #31
 80109fe:	d83c      	bhi.n	8010a7a <HAL_RS485Ex_Init+0xfa>

  if (huart->gState == HAL_UART_STATE_RESET)
 8010a00:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8010a04:	b39b      	cbz	r3, 8010a6e <HAL_RS485Ex_Init+0xee>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010a06:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 8010a0a:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010a0c:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 8010a0e:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8010a12:	6813      	ldr	r3, [r2, #0]
 8010a14:	f023 0301 	bic.w	r3, r3, #1
 8010a18:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010a1a:	f7ff fa53 	bl	800fec4 <UART_SetConfig>
 8010a1e:	2801      	cmp	r0, #1
 8010a20:	d022      	beq.n	8010a68 <HAL_RS485Ex_Init+0xe8>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010a22:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8010a26:	b9db      	cbnz	r3, 8010a60 <HAL_RS485Ex_Init+0xe0>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8010a28:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8010a2c:	042d      	lsls	r5, r5, #16
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8010a2e:	4a21      	ldr	r2, [pc, #132]	; (8010ab4 <HAL_RS485Ex_Init+0x134>)

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a30:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8010a32:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8010a34:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8010a38:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8010a3c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8010a3e:	6899      	ldr	r1, [r3, #8]
 8010a40:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8010a44:	430e      	orrs	r6, r1
 8010a46:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8010a48:	6819      	ldr	r1, [r3, #0]
 8010a4a:	400a      	ands	r2, r1
 8010a4c:	4317      	orrs	r7, r2
 8010a4e:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8010a50:	681a      	ldr	r2, [r3, #0]
 8010a52:	f042 0201 	orr.w	r2, r2, #1
}
 8010a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 8010a5a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8010a5c:	f7ff bdde 	b.w	801061c <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8010a60:	4640      	mov	r0, r8
 8010a62:	f7ff fc15 	bl	8010290 <UART_AdvFeatureConfig>
 8010a66:	e7df      	b.n	8010a28 <HAL_RS485Ex_Init+0xa8>
}
 8010a68:	2001      	movs	r0, #1
 8010a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 8010a6e:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 8010a70:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8010a74:	f7f4 fbbe 	bl	80051f4 <HAL_UART_MspInit>
 8010a78:	e7c5      	b.n	8010a06 <HAL_RS485Ex_Init+0x86>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8010a7a:	21aa      	movs	r1, #170	; 0xaa
 8010a7c:	480e      	ldr	r0, [pc, #56]	; (8010ab8 <HAL_RS485Ex_Init+0x138>)
 8010a7e:	f7f3 f863 	bl	8003b48 <assert_failed>
 8010a82:	e7bd      	b.n	8010a00 <HAL_RS485Ex_Init+0x80>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8010a84:	21a7      	movs	r1, #167	; 0xa7
 8010a86:	480c      	ldr	r0, [pc, #48]	; (8010ab8 <HAL_RS485Ex_Init+0x138>)
 8010a88:	f7f3 f85e 	bl	8003b48 <assert_failed>
 8010a8c:	e7b6      	b.n	80109fc <HAL_RS485Ex_Init+0x7c>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8010a8e:	21a4      	movs	r1, #164	; 0xa4
 8010a90:	4809      	ldr	r0, [pc, #36]	; (8010ab8 <HAL_RS485Ex_Init+0x138>)
 8010a92:	f7f3 f859 	bl	8003b48 <assert_failed>
 8010a96:	e7af      	b.n	80109f8 <HAL_RS485Ex_Init+0x78>
}
 8010a98:	2001      	movs	r0, #1
 8010a9a:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8010a9c:	21a1      	movs	r1, #161	; 0xa1
 8010a9e:	4806      	ldr	r0, [pc, #24]	; (8010ab8 <HAL_RS485Ex_Init+0x138>)
 8010aa0:	f7f3 f852 	bl	8003b48 <assert_failed>
 8010aa4:	e7a5      	b.n	80109f2 <HAL_RS485Ex_Init+0x72>
 8010aa6:	bf00      	nop
 8010aa8:	40011000 	.word	0x40011000
 8010aac:	40004400 	.word	0x40004400
 8010ab0:	40004800 	.word	0x40004800
 8010ab4:	fc00ffff 	.word	0xfc00ffff
 8010ab8:	08028cac 	.word	0x08028cac

08010abc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010abc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8010abe:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010ac0:	4a11      	ldr	r2, [pc, #68]	; (8010b08 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 8010ac2:	9301      	str	r3, [sp, #4]
 8010ac4:	e002      	b.n	8010acc <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010ac6:	6903      	ldr	r3, [r0, #16]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	db07      	blt.n	8010adc <USB_CoreReset+0x20>
    if (++count > 200000U)
 8010acc:	9b01      	ldr	r3, [sp, #4]
 8010ace:	3301      	adds	r3, #1
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	9301      	str	r3, [sp, #4]
 8010ad4:	d9f7      	bls.n	8010ac6 <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 8010ad6:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8010ad8:	b002      	add	sp, #8
 8010ada:	4770      	bx	lr
  count = 0U;
 8010adc:	2300      	movs	r3, #0
    if (++count > 200000U)
 8010ade:	4a0a      	ldr	r2, [pc, #40]	; (8010b08 <USB_CoreReset+0x4c>)
  count = 0U;
 8010ae0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010ae2:	6903      	ldr	r3, [r0, #16]
 8010ae4:	f043 0301 	orr.w	r3, r3, #1
 8010ae8:	6103      	str	r3, [r0, #16]
 8010aea:	e003      	b.n	8010af4 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010aec:	6903      	ldr	r3, [r0, #16]
 8010aee:	f013 0301 	ands.w	r3, r3, #1
 8010af2:	d005      	beq.n	8010b00 <USB_CoreReset+0x44>
    if (++count > 200000U)
 8010af4:	9b01      	ldr	r3, [sp, #4]
 8010af6:	3301      	adds	r3, #1
 8010af8:	4293      	cmp	r3, r2
 8010afa:	9301      	str	r3, [sp, #4]
 8010afc:	d9f6      	bls.n	8010aec <USB_CoreReset+0x30>
 8010afe:	e7ea      	b.n	8010ad6 <USB_CoreReset+0x1a>
  return HAL_OK;
 8010b00:	4618      	mov	r0, r3
}
 8010b02:	b002      	add	sp, #8
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	00030d40 	.word	0x00030d40

08010b0c <USB_CoreInit>:
{
 8010b0c:	b084      	sub	sp, #16
 8010b0e:	b570      	push	{r4, r5, r6, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b10:	9e0a      	ldr	r6, [sp, #40]	; 0x28
{
 8010b12:	ad05      	add	r5, sp, #20
 8010b14:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b16:	2e01      	cmp	r6, #1
{
 8010b18:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b1c:	d121      	bne.n	8010b62 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b1e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010b20:	4b18      	ldr	r3, [pc, #96]	; (8010b84 <USB_CoreInit+0x78>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8010b26:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b28:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8010b2a:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010b2c:	68c2      	ldr	r2, [r0, #12]
 8010b2e:	ea03 0302 	and.w	r3, r3, r2
 8010b32:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010b34:	68c3      	ldr	r3, [r0, #12]
 8010b36:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8010b3a:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8010b3c:	d01c      	beq.n	8010b78 <USB_CoreInit+0x6c>
    ret = USB_CoreReset(USBx);
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f7ff ffbc 	bl	8010abc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8010b44:	9b08      	ldr	r3, [sp, #32]
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d107      	bne.n	8010b5a <USB_CoreInit+0x4e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010b4a:	68a3      	ldr	r3, [r4, #8]
 8010b4c:	f043 0306 	orr.w	r3, r3, #6
 8010b50:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010b52:	68a3      	ldr	r3, [r4, #8]
 8010b54:	f043 0320 	orr.w	r3, r3, #32
 8010b58:	60a3      	str	r3, [r4, #8]
}
 8010b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b5e:	b004      	add	sp, #16
 8010b60:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010b62:	68c3      	ldr	r3, [r0, #12]
 8010b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b68:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8010b6a:	f7ff ffa7 	bl	8010abc <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010b6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b74:	63a3      	str	r3, [r4, #56]	; 0x38
 8010b76:	e7e5      	b.n	8010b44 <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010b78:	68c3      	ldr	r3, [r0, #12]
 8010b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b7e:	60c3      	str	r3, [r0, #12]
 8010b80:	e7dd      	b.n	8010b3e <USB_CoreInit+0x32>
 8010b82:	bf00      	nop
 8010b84:	ffbdffbf 	.word	0xffbdffbf

08010b88 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8010b88:	2a02      	cmp	r2, #2
{
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 8010b8e:	d00c      	beq.n	8010baa <USB_SetTurnaroundTime+0x22>
 8010b90:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010b94:	68d9      	ldr	r1, [r3, #12]
}
 8010b96:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010b98:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8010b9c:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010b9e:	68da      	ldr	r2, [r3, #12]
 8010ba0:	4322      	orrs	r2, r4
}
 8010ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010ba6:	60da      	str	r2, [r3, #12]
}
 8010ba8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010baa:	4a23      	ldr	r2, [pc, #140]	; (8010c38 <USB_SetTurnaroundTime+0xb0>)
 8010bac:	4823      	ldr	r0, [pc, #140]	; (8010c3c <USB_SetTurnaroundTime+0xb4>)
 8010bae:	440a      	add	r2, r1
 8010bb0:	4282      	cmp	r2, r0
 8010bb2:	d92c      	bls.n	8010c0e <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010bb4:	4a22      	ldr	r2, [pc, #136]	; (8010c40 <USB_SetTurnaroundTime+0xb8>)
 8010bb6:	4823      	ldr	r0, [pc, #140]	; (8010c44 <USB_SetTurnaroundTime+0xbc>)
 8010bb8:	440a      	add	r2, r1
 8010bba:	4282      	cmp	r2, r0
 8010bbc:	d92a      	bls.n	8010c14 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010bbe:	4a22      	ldr	r2, [pc, #136]	; (8010c48 <USB_SetTurnaroundTime+0xc0>)
 8010bc0:	4822      	ldr	r0, [pc, #136]	; (8010c4c <USB_SetTurnaroundTime+0xc4>)
 8010bc2:	440a      	add	r2, r1
 8010bc4:	4282      	cmp	r2, r0
 8010bc6:	d928      	bls.n	8010c1a <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010bc8:	4a21      	ldr	r2, [pc, #132]	; (8010c50 <USB_SetTurnaroundTime+0xc8>)
 8010bca:	4822      	ldr	r0, [pc, #136]	; (8010c54 <USB_SetTurnaroundTime+0xcc>)
 8010bcc:	440a      	add	r2, r1
 8010bce:	4282      	cmp	r2, r0
 8010bd0:	d326      	bcc.n	8010c20 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010bd2:	4a21      	ldr	r2, [pc, #132]	; (8010c58 <USB_SetTurnaroundTime+0xd0>)
 8010bd4:	4821      	ldr	r0, [pc, #132]	; (8010c5c <USB_SetTurnaroundTime+0xd4>)
 8010bd6:	440a      	add	r2, r1
 8010bd8:	4282      	cmp	r2, r0
 8010bda:	d924      	bls.n	8010c26 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010bdc:	4a20      	ldr	r2, [pc, #128]	; (8010c60 <USB_SetTurnaroundTime+0xd8>)
 8010bde:	4821      	ldr	r0, [pc, #132]	; (8010c64 <USB_SetTurnaroundTime+0xdc>)
 8010be0:	440a      	add	r2, r1
 8010be2:	4282      	cmp	r2, r0
 8010be4:	d322      	bcc.n	8010c2c <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010be6:	4a20      	ldr	r2, [pc, #128]	; (8010c68 <USB_SetTurnaroundTime+0xe0>)
 8010be8:	4820      	ldr	r0, [pc, #128]	; (8010c6c <USB_SetTurnaroundTime+0xe4>)
 8010bea:	440a      	add	r2, r1
 8010bec:	4282      	cmp	r2, r0
 8010bee:	d3cf      	bcc.n	8010b90 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010bf0:	4a1f      	ldr	r2, [pc, #124]	; (8010c70 <USB_SetTurnaroundTime+0xe8>)
 8010bf2:	4820      	ldr	r0, [pc, #128]	; (8010c74 <USB_SetTurnaroundTime+0xec>)
 8010bf4:	440a      	add	r2, r1
 8010bf6:	4282      	cmp	r2, r0
 8010bf8:	d31b      	bcc.n	8010c32 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010bfa:	4a1f      	ldr	r2, [pc, #124]	; (8010c78 <USB_SetTurnaroundTime+0xf0>)
 8010bfc:	4c1f      	ldr	r4, [pc, #124]	; (8010c7c <USB_SetTurnaroundTime+0xf4>)
 8010bfe:	440a      	add	r2, r1
 8010c00:	42a2      	cmp	r2, r4
 8010c02:	bf34      	ite	cc
 8010c04:	f44f 54e0 	movcc.w	r4, #7168	; 0x1c00
 8010c08:	f44f 54c0 	movcs.w	r4, #6144	; 0x1800
 8010c0c:	e7c2      	b.n	8010b94 <USB_SetTurnaroundTime+0xc>
 8010c0e:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 8010c12:	e7bf      	b.n	8010b94 <USB_SetTurnaroundTime+0xc>
 8010c14:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8010c18:	e7bc      	b.n	8010b94 <USB_SetTurnaroundTime+0xc>
 8010c1a:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 8010c1e:	e7b9      	b.n	8010b94 <USB_SetTurnaroundTime+0xc>
 8010c20:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8010c24:	e7b6      	b.n	8010b94 <USB_SetTurnaroundTime+0xc>
 8010c26:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8010c2a:	e7b3      	b.n	8010b94 <USB_SetTurnaroundTime+0xc>
 8010c2c:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8010c30:	e7b0      	b.n	8010b94 <USB_SetTurnaroundTime+0xc>
 8010c32:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8010c36:	e7ad      	b.n	8010b94 <USB_SetTurnaroundTime+0xc>
 8010c38:	ff275340 	.word	0xff275340
 8010c3c:	000c34ff 	.word	0x000c34ff
 8010c40:	ff1b1e40 	.word	0xff1b1e40
 8010c44:	000f423f 	.word	0x000f423f
 8010c48:	ff0bdc00 	.word	0xff0bdc00
 8010c4c:	00124f7f 	.word	0x00124f7f
 8010c50:	fef98c80 	.word	0xfef98c80
 8010c54:	0013d620 	.word	0x0013d620
 8010c58:	fee5b660 	.word	0xfee5b660
 8010c5c:	0016e35f 	.word	0x0016e35f
 8010c60:	feced300 	.word	0xfeced300
 8010c64:	001b7740 	.word	0x001b7740
 8010c68:	feb35bc0 	.word	0xfeb35bc0
 8010c6c:	002191c0 	.word	0x002191c0
 8010c70:	fe91ca00 	.word	0xfe91ca00
 8010c74:	00387520 	.word	0x00387520
 8010c78:	fe5954e0 	.word	0xfe5954e0
 8010c7c:	00419ce0 	.word	0x00419ce0

08010c80 <USB_EnableGlobalInt>:
{
 8010c80:	4603      	mov	r3, r0
}
 8010c82:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010c84:	689a      	ldr	r2, [r3, #8]
 8010c86:	f042 0201 	orr.w	r2, r2, #1
 8010c8a:	609a      	str	r2, [r3, #8]
}
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop

08010c90 <USB_DisableGlobalInt>:
{
 8010c90:	4603      	mov	r3, r0
}
 8010c92:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010c94:	689a      	ldr	r2, [r3, #8]
 8010c96:	f022 0201 	bic.w	r2, r2, #1
 8010c9a:	609a      	str	r2, [r3, #8]
}
 8010c9c:	4770      	bx	lr
 8010c9e:	bf00      	nop

08010ca0 <USB_SetCurrentMode>:
{
 8010ca0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010ca2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8010ca4:	2901      	cmp	r1, #1
{
 8010ca6:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010ca8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010cac:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8010cae:	d017      	beq.n	8010ce0 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8010cb0:	b9a1      	cbnz	r1, 8010cdc <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010cb2:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8010cb4:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010cba:	60c3      	str	r3, [r0, #12]
 8010cbc:	e001      	b.n	8010cc2 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010cbe:	2c32      	cmp	r4, #50	; 0x32
 8010cc0:	d00c      	beq.n	8010cdc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8010cc2:	2001      	movs	r0, #1
      ms++;
 8010cc4:	4404      	add	r4, r0
      HAL_Delay(1U);
 8010cc6:	f7f5 fc5f 	bl	8006588 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8010cca:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010ccc:	07db      	lsls	r3, r3, #31
 8010cce:	d4f6      	bmi.n	8010cbe <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8010cd0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8010cd4:	fab0 f080 	clz	r0, r0
 8010cd8:	0940      	lsrs	r0, r0, #5
}
 8010cda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010cdc:	2001      	movs	r0, #1
}
 8010cde:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010ce0:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8010ce2:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010ce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010ce8:	60c3      	str	r3, [r0, #12]
 8010cea:	e001      	b.n	8010cf0 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010cec:	2c32      	cmp	r4, #50	; 0x32
 8010cee:	d0f5      	beq.n	8010cdc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8010cf0:	2001      	movs	r0, #1
      ms++;
 8010cf2:	4404      	add	r4, r0
      HAL_Delay(1U);
 8010cf4:	f7f5 fc48 	bl	8006588 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8010cf8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010cfa:	07da      	lsls	r2, r3, #31
 8010cfc:	d5f6      	bpl.n	8010cec <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 8010cfe:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8010d02:	fab0 f080 	clz	r0, r0
 8010d06:	0940      	lsrs	r0, r0, #5
 8010d08:	e7e7      	b.n	8010cda <USB_SetCurrentMode+0x3a>
 8010d0a:	bf00      	nop

08010d0c <USB_FlushTxFifo>:
{
 8010d0c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8010d0e:	2300      	movs	r3, #0
    if (++count > 200000U)
 8010d10:	4a11      	ldr	r2, [pc, #68]	; (8010d58 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 8010d12:	9301      	str	r3, [sp, #4]
 8010d14:	e002      	b.n	8010d1c <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010d16:	6903      	ldr	r3, [r0, #16]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	db07      	blt.n	8010d2c <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8010d1c:	9b01      	ldr	r3, [sp, #4]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	4293      	cmp	r3, r2
 8010d22:	9301      	str	r3, [sp, #4]
 8010d24:	d9f7      	bls.n	8010d16 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8010d26:	2003      	movs	r0, #3
}
 8010d28:	b002      	add	sp, #8
 8010d2a:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010d2c:	0189      	lsls	r1, r1, #6
  count = 0U;
 8010d2e:	2300      	movs	r3, #0
    if (++count > 200000U)
 8010d30:	4a09      	ldr	r2, [pc, #36]	; (8010d58 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010d32:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8010d36:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010d38:	6101      	str	r1, [r0, #16]
 8010d3a:	e003      	b.n	8010d44 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010d3c:	6903      	ldr	r3, [r0, #16]
 8010d3e:	f013 0320 	ands.w	r3, r3, #32
 8010d42:	d005      	beq.n	8010d50 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 8010d44:	9b01      	ldr	r3, [sp, #4]
 8010d46:	3301      	adds	r3, #1
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	9301      	str	r3, [sp, #4]
 8010d4c:	d9f6      	bls.n	8010d3c <USB_FlushTxFifo+0x30>
 8010d4e:	e7ea      	b.n	8010d26 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 8010d50:	4618      	mov	r0, r3
}
 8010d52:	b002      	add	sp, #8
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	00030d40 	.word	0x00030d40

08010d5c <USB_FlushRxFifo>:
{
 8010d5c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8010d5e:	2300      	movs	r3, #0
    if (++count > 200000U)
 8010d60:	4a10      	ldr	r2, [pc, #64]	; (8010da4 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 8010d62:	9301      	str	r3, [sp, #4]
 8010d64:	e002      	b.n	8010d6c <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010d66:	6903      	ldr	r3, [r0, #16]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	db07      	blt.n	8010d7c <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 8010d6c:	9b01      	ldr	r3, [sp, #4]
 8010d6e:	3301      	adds	r3, #1
 8010d70:	4293      	cmp	r3, r2
 8010d72:	9301      	str	r3, [sp, #4]
 8010d74:	d9f7      	bls.n	8010d66 <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 8010d76:	2003      	movs	r0, #3
}
 8010d78:	b002      	add	sp, #8
 8010d7a:	4770      	bx	lr
  count = 0U;
 8010d7c:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010d7e:	2310      	movs	r3, #16
    if (++count > 200000U)
 8010d80:	4a08      	ldr	r2, [pc, #32]	; (8010da4 <USB_FlushRxFifo+0x48>)
  count = 0U;
 8010d82:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010d84:	6103      	str	r3, [r0, #16]
 8010d86:	e003      	b.n	8010d90 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010d88:	6903      	ldr	r3, [r0, #16]
 8010d8a:	f013 0310 	ands.w	r3, r3, #16
 8010d8e:	d005      	beq.n	8010d9c <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 8010d90:	9b01      	ldr	r3, [sp, #4]
 8010d92:	3301      	adds	r3, #1
 8010d94:	4293      	cmp	r3, r2
 8010d96:	9301      	str	r3, [sp, #4]
 8010d98:	d9f6      	bls.n	8010d88 <USB_FlushRxFifo+0x2c>
 8010d9a:	e7ec      	b.n	8010d76 <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 8010d9c:	4618      	mov	r0, r3
}
 8010d9e:	b002      	add	sp, #8
 8010da0:	4770      	bx	lr
 8010da2:	bf00      	nop
 8010da4:	00030d40 	.word	0x00030d40

08010da8 <USB_DevInit>:
{
 8010da8:	b084      	sub	sp, #16
 8010daa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  for (i = 0U; i < 15U; i++)
 8010dae:	2400      	movs	r4, #0
{
 8010db0:	ae09      	add	r6, sp, #36	; 0x24
 8010db2:	4605      	mov	r5, r0
 8010db4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8010db8:	4622      	mov	r2, r4
 8010dba:	460e      	mov	r6, r1
 8010dbc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8010dbe:	f104 0340 	add.w	r3, r4, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8010dc2:	3401      	adds	r4, #1
    USBx->DIEPTXF[i] = 0U;
 8010dc4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 8010dc8:	2c0f      	cmp	r4, #15
    USBx->DIEPTXF[i] = 0U;
 8010dca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010dcc:	d1f7      	bne.n	8010dbe <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8010dce:	2f00      	cmp	r7, #0
 8010dd0:	f040 8092 	bne.w	8010ef8 <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010dd4:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8010dd8:	f505 6400 	add.w	r4, r5, #2048	; 0x800
 8010ddc:	f043 0302 	orr.w	r3, r3, #2
 8010de0:	6063      	str	r3, [r4, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010de2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8010de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010de8:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010dea:	682b      	ldr	r3, [r5, #0]
 8010dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010df0:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010df2:	682b      	ldr	r3, [r5, #0]
 8010df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010df8:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0U;
 8010dfa:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8010dfe:	f8c5 2e00 	str.w	r2, [r5, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010e02:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010e04:	6822      	ldr	r2, [r4, #0]
 8010e06:	6022      	str	r2, [r4, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010e08:	d07d      	beq.n	8010f06 <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 8010e0a:	6823      	ldr	r3, [r4, #0]
 8010e0c:	f043 0303 	orr.w	r3, r3, #3
 8010e10:	6023      	str	r3, [r4, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010e12:	2110      	movs	r1, #16
 8010e14:	4628      	mov	r0, r5
 8010e16:	f7ff ff79 	bl	8010d0c <USB_FlushTxFifo>
 8010e1a:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	f7ff ff9d 	bl	8010d5c <USB_FlushRxFifo>
 8010e22:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8010e26:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010e28:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8010e2a:	6122      	str	r2, [r4, #16]
    ret = HAL_ERROR;
 8010e2c:	1a80      	subs	r0, r0, r2
  USBx_DEVICE->DOEPMSK = 0U;
 8010e2e:	6162      	str	r2, [r4, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010e30:	61e2      	str	r2, [r4, #28]
    ret = HAL_ERROR;
 8010e32:	bf18      	it	ne
 8010e34:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e36:	b1ee      	cbz	r6, 8010e74 <USB_DevInit+0xcc>
 8010e38:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010e3c:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010e40:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8010e44:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010e46:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8010e4a:	e009      	b.n	8010e60 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8010e4c:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e50:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010e52:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010e56:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e5a:	3320      	adds	r3, #32
 8010e5c:	42b2      	cmp	r2, r6
 8010e5e:	d02c      	beq.n	8010eba <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010e60:	6819      	ldr	r1, [r3, #0]
 8010e62:	2900      	cmp	r1, #0
 8010e64:	daf2      	bge.n	8010e4c <USB_DevInit+0xa4>
      if (i == 0U)
 8010e66:	b112      	cbz	r2, 8010e6e <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010e68:	f8c3 8000 	str.w	r8, [r3]
 8010e6c:	e7f0      	b.n	8010e50 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010e6e:	f8c3 9000 	str.w	r9, [r3]
 8010e72:	e7ed      	b.n	8010e50 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010e74:	6923      	ldr	r3, [r4, #16]
  USBx->GINTMSK = 0U;
 8010e76:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010e78:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 8010e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e82:	6123      	str	r3, [r4, #16]
  USBx->GINTMSK = 0U;
 8010e84:	61ae      	str	r6, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010e86:	6169      	str	r1, [r5, #20]
  if (cfg.dma_enable == 0U)
 8010e88:	b91a      	cbnz	r2, 8010e92 <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010e8a:	69ab      	ldr	r3, [r5, #24]
 8010e8c:	f043 0310 	orr.w	r3, r3, #16
 8010e90:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010e92:	69a9      	ldr	r1, [r5, #24]
 8010e94:	4b21      	ldr	r3, [pc, #132]	; (8010f1c <USB_DevInit+0x174>)
  if (cfg.Sof_enable != 0U)
 8010e96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010e98:	430b      	orrs	r3, r1
 8010e9a:	61ab      	str	r3, [r5, #24]
  if (cfg.Sof_enable != 0U)
 8010e9c:	b11a      	cbz	r2, 8010ea6 <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010e9e:	69ab      	ldr	r3, [r5, #24]
 8010ea0:	f043 0308 	orr.w	r3, r3, #8
 8010ea4:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8010ea6:	2f01      	cmp	r7, #1
 8010ea8:	d103      	bne.n	8010eb2 <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010eaa:	69aa      	ldr	r2, [r5, #24]
 8010eac:	4b1c      	ldr	r3, [pc, #112]	; (8010f20 <USB_DevInit+0x178>)
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	61ab      	str	r3, [r5, #24]
}
 8010eb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eb6:	b004      	add	sp, #16
 8010eb8:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010ec0:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010ec4:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010ec8:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010eca:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8010ece:	e009      	b.n	8010ee4 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010ed0:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ed4:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010ed6:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010eda:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ede:	3320      	adds	r3, #32
 8010ee0:	42b2      	cmp	r2, r6
 8010ee2:	d0c7      	beq.n	8010e74 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010ee4:	6819      	ldr	r1, [r3, #0]
 8010ee6:	2900      	cmp	r1, #0
 8010ee8:	daf2      	bge.n	8010ed0 <USB_DevInit+0x128>
      if (i == 0U)
 8010eea:	b112      	cbz	r2, 8010ef2 <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010eec:	f8c3 8000 	str.w	r8, [r3]
 8010ef0:	e7f0      	b.n	8010ed4 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010ef2:	f8c3 9000 	str.w	r9, [r3]
 8010ef6:	e7ed      	b.n	8010ed4 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010ef8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8010efa:	f505 6400 	add.w	r4, r5, #2048	; 0x800
 8010efe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010f02:	63ab      	str	r3, [r5, #56]	; 0x38
 8010f04:	e779      	b.n	8010dfa <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 8010f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f08:	b913      	cbnz	r3, 8010f10 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 8010f0a:	6823      	ldr	r3, [r4, #0]
 8010f0c:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8010f0e:	e780      	b.n	8010e12 <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8010f10:	6823      	ldr	r3, [r4, #0]
 8010f12:	f043 0301 	orr.w	r3, r3, #1
 8010f16:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8010f18:	e77b      	b.n	8010e12 <USB_DevInit+0x6a>
 8010f1a:	bf00      	nop
 8010f1c:	803c3800 	.word	0x803c3800
 8010f20:	40000004 	.word	0x40000004

08010f24 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010f24:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010f28:	f013 0006 	ands.w	r0, r3, #6
 8010f2c:	d004      	beq.n	8010f38 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010f2e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8010f32:	bf14      	ite	ne
 8010f34:	2002      	movne	r0, #2
 8010f36:	200f      	moveq	r0, #15
}
 8010f38:	4770      	bx	lr
 8010f3a:	bf00      	nop

08010f3c <USB_ActivateEndpoint>:
{
 8010f3c:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 8010f3e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8010f40:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d01f      	beq.n	8010f86 <USB_ActivateEndpoint+0x4a>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010f46:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8010f4a:	f002 050f 	and.w	r5, r2, #15
 8010f4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010f52:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010f56:	69e2      	ldr	r2, [r4, #28]
 8010f58:	40ab      	lsls	r3, r5
 8010f5a:	4313      	orrs	r3, r2
 8010f5c:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010f5e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8010f62:	041b      	lsls	r3, r3, #16
 8010f64:	d40c      	bmi.n	8010f80 <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010f66:	688b      	ldr	r3, [r1, #8]
 8010f68:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 8010f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010f70:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010f72:	4a15      	ldr	r2, [pc, #84]	; (8010fc8 <USB_ActivateEndpoint+0x8c>)
 8010f74:	4323      	orrs	r3, r4
 8010f76:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8010f7a:	431a      	orrs	r2, r3
 8010f7c:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 8010f80:	2000      	movs	r0, #0
 8010f82:	bc70      	pop	{r4, r5, r6}
 8010f84:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010f86:	f002 040f 	and.w	r4, r2, #15
 8010f8a:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8010f8e:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010f92:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010f96:	40a3      	lsls	r3, r4
 8010f98:	4333      	orrs	r3, r6
 8010f9a:	61eb      	str	r3, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010f9c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8010fa0:	041c      	lsls	r4, r3, #16
 8010fa2:	d4ed      	bmi.n	8010f80 <USB_ActivateEndpoint+0x44>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010fa4:	688b      	ldr	r3, [r1, #8]
 8010fa6:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8010faa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010fae:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010fb0:	4905      	ldr	r1, [pc, #20]	; (8010fc8 <USB_ActivateEndpoint+0x8c>)
 8010fb2:	432b      	orrs	r3, r5
 8010fb4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8010fb8:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8010fbc:	4311      	orrs	r1, r2
}
 8010fbe:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010fc0:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	4770      	bx	lr
 8010fc8:	10008000 	.word	0x10008000

08010fcc <USB_DeactivateEndpoint>:
{
 8010fcc:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8010fce:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8010fd0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8010fd2:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010fd4:	eb00 1543 	add.w	r5, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8010fd8:	d02b      	beq.n	8011032 <USB_DeactivateEndpoint+0x66>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010fda:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 8010fde:	2a00      	cmp	r2, #0
 8010fe0:	db1a      	blt.n	8011018 <USB_DeactivateEndpoint+0x4c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010fe6:	f003 030f 	and.w	r3, r3, #15
 8010fea:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8010fee:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010ff2:	4925      	ldr	r1, [pc, #148]	; (8011088 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010ff4:	ea24 0403 	bic.w	r4, r4, r3
 8010ff8:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010ffc:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8011000:	ea22 0303 	bic.w	r3, r2, r3
 8011004:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8011008:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801100a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 801100e:	4019      	ands	r1, r3
 8011010:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
}
 8011014:	bc30      	pop	{r4, r5}
 8011016:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011018:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 801101c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8011020:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011024:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 8011028:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801102c:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
 8011030:	e7d7      	b.n	8010fe2 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011032:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 8011036:	2a00      	cmp	r2, #0
 8011038:	da0b      	bge.n	8011052 <USB_DeactivateEndpoint+0x86>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801103a:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 801103e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8011042:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011046:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 801104a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801104e:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011052:	2201      	movs	r2, #1
 8011054:	f003 030f 	and.w	r3, r3, #15
 8011058:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 801105c:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011060:	490a      	ldr	r1, [pc, #40]	; (801108c <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011062:	ea24 0403 	bic.w	r4, r4, r3
 8011066:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801106a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 801106e:	ea22 0303 	bic.w	r3, r2, r3
 8011072:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8011076:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011078:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 801107c:	4019      	ands	r1, r3
 801107e:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
}
 8011082:	bc30      	pop	{r4, r5}
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop
 8011088:	eff37800 	.word	0xeff37800
 801108c:	ec337800 	.word	0xec337800

08011090 <USB_EPStartXfer>:
{
 8011090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8011094:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8011096:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8011098:	2d01      	cmp	r5, #1
 801109a:	d054      	beq.n	8011146 <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801109c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80110a0:	4f82      	ldr	r7, [pc, #520]	; (80112ac <USB_EPStartXfer+0x21c>)
    if (ep->xfer_len == 0U)
 80110a2:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80110a4:	f8d4 cb10 	ldr.w	ip, [r4, #2832]	; 0xb10
 80110a8:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80110ac:	4e80      	ldr	r6, [pc, #512]	; (80112b0 <USB_EPStartXfer+0x220>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80110ae:	ea0c 0707 	and.w	r7, ip, r7
 80110b2:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80110b4:	691f      	ldr	r7, [r3, #16]
 80110b6:	403e      	ands	r6, r7
 80110b8:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 80110ba:	b395      	cbz	r5, 8011122 <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80110bc:	688e      	ldr	r6, [r1, #8]
    if (dma == 1U)
 80110be:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80110c0:	4f7c      	ldr	r7, [pc, #496]	; (80112b4 <USB_EPStartXfer+0x224>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80110c2:	4435      	add	r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80110c4:	f8d3 c010 	ldr.w	ip, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80110c8:	f105 35ff 	add.w	r5, r5, #4294967295
 80110cc:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80110d0:	fa1f fe85 	uxth.w	lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80110d4:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80110d8:	fb06 f60e 	mul.w	r6, r6, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80110dc:	ea45 050c 	orr.w	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80110e0:	f3c6 0612 	ubfx	r6, r6, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80110e4:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80110e6:	691d      	ldr	r5, [r3, #16]
 80110e8:	ea46 0605 	orr.w	r6, r6, r5
 80110ec:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 80110ee:	d025      	beq.n	801113c <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 80110f0:	78cb      	ldrb	r3, [r1, #3]
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d10c      	bne.n	8011110 <USB_EPStartXfer+0x80>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80110f6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80110fa:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80110fe:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8011102:	bf0c      	ite	eq
 8011104:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011108:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 801110c:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011110:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8011114:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011118:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 801111c:	2000      	movs	r0, #0
 801111e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011122:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8011124:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011126:	691e      	ldr	r6, [r3, #16]
 8011128:	f3c5 0512 	ubfx	r5, r5, #0, #19
 801112c:	ea45 0506 	orr.w	r5, r5, r6
 8011130:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011132:	691d      	ldr	r5, [r3, #16]
 8011134:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8011138:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 801113a:	d1d9      	bne.n	80110f0 <USB_EPStartXfer+0x60>
      if ((uint32_t)ep->xfer_buff != 0U)
 801113c:	68ca      	ldr	r2, [r1, #12]
 801113e:	2a00      	cmp	r2, #0
 8011140:	d0d6      	beq.n	80110f0 <USB_EPStartXfer+0x60>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011142:	615a      	str	r2, [r3, #20]
 8011144:	e7d4      	b.n	80110f0 <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 8011146:	694e      	ldr	r6, [r1, #20]
 8011148:	2e00      	cmp	r6, #0
 801114a:	d040      	beq.n	80111ce <USB_EPStartXfer+0x13e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801114c:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011150:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011154:	f8df a154 	ldr.w	sl, [pc, #340]	; 80112ac <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011158:	f3c6 0712 	ubfx	r7, r6, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801115c:	f8de 9910 	ldr.w	r9, [lr, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011160:	eb06 0c08 	add.w	ip, r6, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011164:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
 8011168:	ea09 0a0a 	and.w	sl, r9, sl
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801116c:	f10c 3cff 	add.w	ip, ip, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011170:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80112b0 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011174:	f8c3 a010 	str.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011178:	f8d3 a010 	ldr.w	sl, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801117c:	fbbc f8f8 	udiv	r8, ip, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011180:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011184:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80112b4 <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011188:	f8c3 9010 	str.w	r9, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801118c:	ea0c 4cc8 	and.w	ip, ip, r8, lsl #19
 8011190:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8011194:	ea4c 0c08 	orr.w	ip, ip, r8
 8011198:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801119c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80111a0:	ea47 070c 	orr.w	r7, r7, ip
 80111a4:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 80111a6:	78cf      	ldrb	r7, [r1, #3]
 80111a8:	2f01      	cmp	r7, #1
 80111aa:	d04e      	beq.n	801124a <USB_EPStartXfer+0x1ba>
    if (dma == 1U)
 80111ac:	2a01      	cmp	r2, #1
 80111ae:	d068      	beq.n	8011282 <USB_EPStartXfer+0x1f2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80111b0:	f8de 3900 	ldr.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80111b4:	f004 040f 	and.w	r4, r4, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80111b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80111bc:	40a5      	lsls	r5, r4
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80111be:	f8ce 3900 	str.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80111c2:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80111c6:	4325      	orrs	r5, r4
 80111c8:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 80111cc:	e7a6      	b.n	801111c <USB_EPStartXfer+0x8c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80111ce:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 80111d2:	4f37      	ldr	r7, [pc, #220]	; (80112b0 <USB_EPStartXfer+0x220>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80111d4:	4d35      	ldr	r5, [pc, #212]	; (80112ac <USB_EPStartXfer+0x21c>)
    if (dma == 1U)
 80111d6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80111d8:	f8dc e910 	ldr.w	lr, [ip, #2320]	; 0x910
 80111dc:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 80111e0:	ea0e 0707 	and.w	r7, lr, r7
 80111e4:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80111e6:	691f      	ldr	r7, [r3, #16]
 80111e8:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 80111ec:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80111ee:	691f      	ldr	r7, [r3, #16]
 80111f0:	ea05 0507 	and.w	r5, r5, r7
 80111f4:	611d      	str	r5, [r3, #16]
 80111f6:	78cf      	ldrb	r7, [r1, #3]
    if (dma == 1U)
 80111f8:	d038      	beq.n	801126c <USB_EPStartXfer+0x1dc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80111fa:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80111fe:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011200:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8011204:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8011208:	d188      	bne.n	801111c <USB_EPStartXfer+0x8c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801120a:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 801120e:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011212:	681d      	ldr	r5, [r3, #0]
 8011214:	bf0c      	ite	eq
 8011216:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801121a:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 801121e:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 8011220:	2a00      	cmp	r2, #0
 8011222:	f47f af7b 	bne.w	801111c <USB_EPStartXfer+0x8c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8011226:	b2b6      	uxth	r6, r6
 8011228:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 801122a:	08b6      	lsrs	r6, r6, #2
 801122c:	f43f af76 	beq.w	801111c <USB_EPStartXfer+0x8c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011230:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011232:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8011236:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 801123a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801123e:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8011242:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011244:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8011246:	d1fa      	bne.n	801123e <USB_EPStartXfer+0x1ae>
 8011248:	e768      	b.n	801111c <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801124a:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 801124c:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801124e:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8011252:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011254:	691d      	ldr	r5, [r3, #16]
 8011256:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801125a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 801125c:	d016      	beq.n	801128c <USB_EPStartXfer+0x1fc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801125e:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
 8011262:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8011266:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 801126a:	e7ce      	b.n	801120a <USB_EPStartXfer+0x17a>
      if ((uint32_t)ep->dma_addr != 0U)
 801126c:	690a      	ldr	r2, [r1, #16]
 801126e:	b95a      	cbnz	r2, 8011288 <USB_EPStartXfer+0x1f8>
      if (ep->type == EP_TYPE_ISOC)
 8011270:	2f01      	cmp	r7, #1
 8011272:	d00e      	beq.n	8011292 <USB_EPStartXfer+0x202>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011274:	681a      	ldr	r2, [r3, #0]
}
 8011276:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011278:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 801127c:	601a      	str	r2, [r3, #0]
}
 801127e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8011282:	690a      	ldr	r2, [r1, #16]
 8011284:	2a00      	cmp	r2, #0
 8011286:	d0f5      	beq.n	8011274 <USB_EPStartXfer+0x1e4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011288:	615a      	str	r2, [r3, #20]
 801128a:	e7f1      	b.n	8011270 <USB_EPStartXfer+0x1e0>
      if ((uint32_t)ep->dma_addr != 0U)
 801128c:	690a      	ldr	r2, [r1, #16]
 801128e:	2a00      	cmp	r2, #0
 8011290:	d1fa      	bne.n	8011288 <USB_EPStartXfer+0x1f8>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011292:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8011296:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	bf0c      	ite	eq
 801129e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80112a2:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80112a6:	601a      	str	r2, [r3, #0]
 80112a8:	e7e4      	b.n	8011274 <USB_EPStartXfer+0x1e4>
 80112aa:	bf00      	nop
 80112ac:	fff80000 	.word	0xfff80000
 80112b0:	e007ffff 	.word	0xe007ffff
 80112b4:	1ff80000 	.word	0x1ff80000

080112b8 <USB_EP0StartXfer>:
{
 80112b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80112ba:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80112bc:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d029      	beq.n	8011316 <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80112c2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80112c6:	4d3d      	ldr	r5, [pc, #244]	; (80113bc <USB_EP0StartXfer+0x104>)
    if (ep->xfer_len > 0U)
 80112c8:	694e      	ldr	r6, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80112ca:	f8d0 7b10 	ldr.w	r7, [r0, #2832]	; 0xb10
 80112ce:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80112d2:	4c3b      	ldr	r4, [pc, #236]	; (80113c0 <USB_EP0StartXfer+0x108>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80112d4:	403d      	ands	r5, r7
 80112d6:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80112d8:	691d      	ldr	r5, [r3, #16]
 80112da:	402c      	ands	r4, r5
 80112dc:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 80112de:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 80112e0:	b106      	cbz	r6, 80112e4 <USB_EP0StartXfer+0x2c>
      ep->xfer_len = ep->maxpacket;
 80112e2:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80112e4:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80112e6:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 80112ea:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80112ec:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80112f0:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80112f2:	691d      	ldr	r5, [r3, #16]
 80112f4:	ea44 0405 	orr.w	r4, r4, r5
 80112f8:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80112fa:	d007      	beq.n	801130c <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80112fc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011300:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011304:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8011308:	2000      	movs	r0, #0
 801130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 801130c:	68ca      	ldr	r2, [r1, #12]
 801130e:	2a00      	cmp	r2, #0
 8011310:	d0f4      	beq.n	80112fc <USB_EP0StartXfer+0x44>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011312:	615a      	str	r2, [r3, #20]
 8011314:	e7f2      	b.n	80112fc <USB_EP0StartXfer+0x44>
    if (ep->xfer_len == 0U)
 8011316:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011318:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 801131c:	b38d      	cbz	r5, 8011382 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801131e:	f8d3 e910 	ldr.w	lr, [r3, #2320]	; 0x910
 8011322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011326:	4f25      	ldr	r7, [pc, #148]	; (80113bc <USB_EP0StartXfer+0x104>)
      if (ep->xfer_len > ep->maxpacket)
 8011328:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801132c:	ea0e 0707 	and.w	r7, lr, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011330:	4e23      	ldr	r6, [pc, #140]	; (80113c0 <USB_EP0StartXfer+0x108>)
      if (ep->xfer_len > ep->maxpacket)
 8011332:	4565      	cmp	r5, ip
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011334:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011336:	691f      	ldr	r7, [r3, #16]
 8011338:	ea06 0607 	and.w	r6, r6, r7
 801133c:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 801133e:	d902      	bls.n	8011346 <USB_EP0StartXfer+0x8e>
        ep->xfer_len = ep->maxpacket;
 8011340:	4665      	mov	r5, ip
 8011342:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011346:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011348:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 801134c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801134e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8011352:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011354:	691e      	ldr	r6, [r3, #16]
 8011356:	ea45 0506 	orr.w	r5, r5, r6
 801135a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 801135c:	d025      	beq.n	80113aa <USB_EP0StartXfer+0xf2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801135e:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8011360:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011362:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8011366:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8011368:	2900      	cmp	r1, #0
 801136a:	d0cd      	beq.n	8011308 <USB_EP0StartXfer+0x50>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801136c:	f004 020f 	and.w	r2, r4, #15
 8011370:	2401      	movs	r4, #1
 8011372:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8011376:	4094      	lsls	r4, r2
 8011378:	431c      	orrs	r4, r3
 801137a:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 801137e:	2000      	movs	r0, #0
 8011380:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011382:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011386:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801138a:	4e0d      	ldr	r6, [pc, #52]	; (80113c0 <USB_EP0StartXfer+0x108>)
    if (dma == 1U)
 801138c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801138e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011392:	ea06 0607 	and.w	r6, r6, r7
 8011396:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011398:	691e      	ldr	r6, [r3, #16]
 801139a:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 801139e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80113a0:	691e      	ldr	r6, [r3, #16]
 80113a2:	ea05 0506 	and.w	r5, r5, r6
 80113a6:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80113a8:	d1d9      	bne.n	801135e <USB_EP0StartXfer+0xa6>
      if ((uint32_t)ep->dma_addr != 0U)
 80113aa:	690a      	ldr	r2, [r1, #16]
 80113ac:	b102      	cbz	r2, 80113b0 <USB_EP0StartXfer+0xf8>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80113ae:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80113b0:	681a      	ldr	r2, [r3, #0]
}
 80113b2:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80113b4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80113b8:	601a      	str	r2, [r3, #0]
}
 80113ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113bc:	fff80000 	.word	0xfff80000
 80113c0:	e007ffff 	.word	0xe007ffff

080113c4 <USB_WritePacket>:
{
 80113c4:	b410      	push	{r4}
 80113c6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 80113ca:	b964      	cbnz	r4, 80113e6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 80113cc:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 80113ce:	089b      	lsrs	r3, r3, #2
 80113d0:	d009      	beq.n	80113e6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80113d2:	3201      	adds	r2, #1
 80113d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80113d8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80113dc:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 80113e0:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80113e2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80113e4:	d1fa      	bne.n	80113dc <USB_WritePacket+0x18>
}
 80113e6:	2000      	movs	r0, #0
 80113e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113ec:	4770      	bx	lr
 80113ee:	bf00      	nop

080113f0 <USB_ReadPacket>:
{
 80113f0:	b4f0      	push	{r4, r5, r6, r7}
  for (i = 0U; i < count32b; i++)
 80113f2:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 80113f4:	f002 0703 	and.w	r7, r2, #3
  for (i = 0U; i < count32b; i++)
 80113f8:	d01e      	beq.n	8011438 <USB_ReadPacket+0x48>
 80113fa:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 80113fe:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8011400:	2300      	movs	r3, #0
 8011402:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011404:	6834      	ldr	r4, [r6, #0]
  for (i = 0U; i < count32b; i++)
 8011406:	429d      	cmp	r5, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011408:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 801140c:	d1f9      	bne.n	8011402 <USB_ReadPacket+0x12>
 801140e:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  if (remaining_bytes != 0U)
 8011412:	b177      	cbz	r7, 8011432 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011414:	1e7b      	subs	r3, r7, #1
 8011416:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801141a:	2100      	movs	r1, #0
 801141c:	b29b      	uxth	r3, r3
 801141e:	6800      	ldr	r0, [r0, #0]
 8011420:	3301      	adds	r3, #1
 8011422:	442b      	add	r3, r5
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011424:	fa20 f201 	lsr.w	r2, r0, r1
 8011428:	3108      	adds	r1, #8
 801142a:	f805 2b01 	strb.w	r2, [r5], #1
    } while (remaining_bytes != 0U);
 801142e:	429d      	cmp	r5, r3
 8011430:	d1f8      	bne.n	8011424 <USB_ReadPacket+0x34>
}
 8011432:	4628      	mov	r0, r5
 8011434:	bcf0      	pop	{r4, r5, r6, r7}
 8011436:	4770      	bx	lr
  uint8_t *pDest = dest;
 8011438:	460d      	mov	r5, r1
 801143a:	e7ea      	b.n	8011412 <USB_ReadPacket+0x22>

0801143c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 801143c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801143e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8011440:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011442:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8011446:	d00c      	beq.n	8011462 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011448:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 801144c:	b10b      	cbz	r3, 8011452 <USB_EPSetStall+0x16>
 801144e:	2a00      	cmp	r2, #0
 8011450:	da14      	bge.n	801147c <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011452:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801145a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801145e:	2000      	movs	r0, #0
 8011460:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011462:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8011466:	2a00      	cmp	r2, #0
 8011468:	db00      	blt.n	801146c <USB_EPSetStall+0x30>
 801146a:	b973      	cbnz	r3, 801148a <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801146c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8011470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011474:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8011478:	2000      	movs	r0, #0
 801147a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801147c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011480:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011484:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8011488:	e7e3      	b.n	8011452 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801148a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801148e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011492:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011496:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801149a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801149e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80114a2:	e7e9      	b.n	8011478 <USB_EPSetStall+0x3c>

080114a4 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80114a4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80114a6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80114a8:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80114aa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80114ae:	d013      	beq.n	80114d8 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80114b0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80114b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80114b8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80114bc:	78cb      	ldrb	r3, [r1, #3]
 80114be:	3b02      	subs	r3, #2
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d901      	bls.n	80114c8 <USB_EPClearStall+0x24>
}
 80114c4:	2000      	movs	r0, #0
 80114c6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80114c8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80114cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114d0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80114d4:	2000      	movs	r0, #0
 80114d6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80114d8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80114dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80114e0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80114e4:	78cb      	ldrb	r3, [r1, #3]
 80114e6:	3b02      	subs	r3, #2
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	d8eb      	bhi.n	80114c4 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80114ec:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80114f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114f4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80114f8:	2000      	movs	r0, #0
 80114fa:	4770      	bx	lr

080114fc <USB_SetDevAddress>:
{
 80114fc:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80114fe:	0109      	lsls	r1, r1, #4
}
 8011500:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011502:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011506:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801150a:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 801150e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011512:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8011516:	4311      	orrs	r1, r2
 8011518:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop

08011520 <USB_DevConnect>:
{
 8011520:	4603      	mov	r3, r0
}
 8011522:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011524:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011528:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801152c:	f022 0203 	bic.w	r2, r2, #3
 8011530:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011534:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8011538:	f023 0302 	bic.w	r3, r3, #2
 801153c:	604b      	str	r3, [r1, #4]
}
 801153e:	4770      	bx	lr

08011540 <USB_DevDisconnect>:
{
 8011540:	4603      	mov	r3, r0
}
 8011542:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011544:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011548:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801154c:	f022 0203 	bic.w	r2, r2, #3
 8011550:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011554:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8011558:	f043 0302 	orr.w	r3, r3, #2
 801155c:	604b      	str	r3, [r1, #4]
}
 801155e:	4770      	bx	lr

08011560 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8011560:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8011562:	6980      	ldr	r0, [r0, #24]
}
 8011564:	4010      	ands	r0, r2
 8011566:	4770      	bx	lr

08011568 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8011568:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 801156c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011570:	69c0      	ldr	r0, [r0, #28]
 8011572:	4018      	ands	r0, r3
}
 8011574:	0c00      	lsrs	r0, r0, #16
 8011576:	4770      	bx	lr

08011578 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8011578:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 801157c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011580:	69c0      	ldr	r0, [r0, #28]
 8011582:	4018      	ands	r0, r3
}
 8011584:	b280      	uxth	r0, r0
 8011586:	4770      	bx	lr

08011588 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011588:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801158c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011590:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011594:	6940      	ldr	r0, [r0, #20]
}
 8011596:	4010      	ands	r0, r2
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop

0801159c <USB_ReadDevInEPInterrupt>:
{
 801159c:	b430      	push	{r4, r5}
  msk = USBx_DEVICE->DIEPMSK;
 801159e:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80115a2:	f001 050f 	and.w	r5, r1, #15
  emp = USBx_DEVICE->DIEPEMPMSK;
 80115a6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80115aa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80115ae:	40eb      	lsrs	r3, r5
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80115b0:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80115b4:	01db      	lsls	r3, r3, #7
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	4323      	orrs	r3, r4
}
 80115ba:	bc30      	pop	{r4, r5}
 80115bc:	4018      	ands	r0, r3
 80115be:	4770      	bx	lr

080115c0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80115c0:	6940      	ldr	r0, [r0, #20]
}
 80115c2:	f000 0001 	and.w	r0, r0, #1
 80115c6:	4770      	bx	lr

080115c8 <USB_ActivateSetup>:
{
 80115c8:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80115ca:	4a09      	ldr	r2, [pc, #36]	; (80115f0 <USB_ActivateSetup+0x28>)
}
 80115cc:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80115ce:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 80115d2:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80115d4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80115d8:	4022      	ands	r2, r4
}
 80115da:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80115de:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80115e2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80115e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80115ea:	604b      	str	r3, [r1, #4]
}
 80115ec:	4770      	bx	lr
 80115ee:	bf00      	nop
 80115f0:	fffff800 	.word	0xfffff800

080115f4 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80115f4:	4b14      	ldr	r3, [pc, #80]	; (8011648 <USB_EP0_OutStart+0x54>)
{
 80115f6:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80115f8:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80115fa:	429c      	cmp	r4, r3
 80115fc:	d81a      	bhi.n	8011634 <USB_EP0_OutStart+0x40>
 80115fe:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011602:	2300      	movs	r3, #0
  if (dma == 1U)
 8011604:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011606:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011608:	6903      	ldr	r3, [r0, #16]
 801160a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801160e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011610:	6903      	ldr	r3, [r0, #16]
 8011612:	f043 0318 	orr.w	r3, r3, #24
 8011616:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011618:	6903      	ldr	r3, [r0, #16]
 801161a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801161e:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8011620:	d104      	bne.n	801162c <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011622:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011624:	6803      	ldr	r3, [r0, #0]
 8011626:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801162a:	6003      	str	r3, [r0, #0]
}
 801162c:	2000      	movs	r0, #0
 801162e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011632:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011634:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011638:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 801163c:	2b00      	cmp	r3, #0
 801163e:	dae0      	bge.n	8011602 <USB_EP0_OutStart+0xe>
}
 8011640:	2000      	movs	r0, #0
 8011642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011646:	4770      	bx	lr
 8011648:	4f54300a 	.word	0x4f54300a

0801164c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801164c:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801164e:	4903      	ldr	r1, [pc, #12]	; (801165c <MX_FATFS_Init+0x10>)
 8011650:	4803      	ldr	r0, [pc, #12]	; (8011660 <MX_FATFS_Init+0x14>)
 8011652:	f001 f973 	bl	801293c <FATFS_LinkDriver>
 8011656:	4b03      	ldr	r3, [pc, #12]	; (8011664 <MX_FATFS_Init+0x18>)
 8011658:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801165a:	bd08      	pop	{r3, pc}
 801165c:	2001bb7c 	.word	0x2001bb7c
 8011660:	200002dc 	.word	0x200002dc
 8011664:	2001bb80 	.word	0x2001bb80

08011668 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8011668:	4b02      	ldr	r3, [pc, #8]	; (8011674 <USER_initialize+0xc>)
 801166a:	2201      	movs	r2, #1
 801166c:	701a      	strb	r2, [r3, #0]
    return Stat;
 801166e:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop
 8011674:	200002d8 	.word	0x200002d8

08011678 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8011678:	2000      	movs	r0, #0
 801167a:	4770      	bx	lr

0801167c <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 801167c:	2001      	movs	r0, #1
 801167e:	4770      	bx	lr

08011680 <USER_write>:
 8011680:	2000      	movs	r0, #0
 8011682:	4770      	bx	lr

08011684 <USER_status>:
 8011684:	4b02      	ldr	r3, [pc, #8]	; (8011690 <USER_status+0xc>)
 8011686:	2201      	movs	r2, #1
 8011688:	701a      	strb	r2, [r3, #0]
 801168a:	7818      	ldrb	r0, [r3, #0]
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop
 8011690:	200002d8 	.word	0x200002d8

08011694 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8011694:	2100      	movs	r1, #0
{
 8011696:	b5f0      	push	{r4, r5, r6, r7, lr}
  tcpip_init( NULL, NULL );
 8011698:	4608      	mov	r0, r1
{
 801169a:	b08f      	sub	sp, #60	; 0x3c
  tcpip_init( NULL, NULL );
 801169c:	f003 fde8 	bl	8015270 <tcpip_init>
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80116a0:	4e1e      	ldr	r6, [pc, #120]	; (801171c <MX_LWIP_Init+0x88>)
  ipaddr.addr = 0;
 80116a2:	2400      	movs	r4, #0
  gw.addr = 0;
 80116a4:	4b1e      	ldr	r3, [pc, #120]	; (8011720 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 80116a6:	491f      	ldr	r1, [pc, #124]	; (8011724 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 80116a8:	4a1f      	ldr	r2, [pc, #124]	; (8011728 <MX_LWIP_Init+0x94>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80116aa:	4820      	ldr	r0, [pc, #128]	; (801172c <MX_LWIP_Init+0x98>)
 80116ac:	4d20      	ldr	r5, [pc, #128]	; (8011730 <MX_LWIP_Init+0x9c>)
 80116ae:	9002      	str	r0, [sp, #8]
 80116b0:	4630      	mov	r0, r6
 80116b2:	9400      	str	r4, [sp, #0]
  gw.addr = 0;
 80116b4:	601c      	str	r4, [r3, #0]
  ipaddr.addr = 0;
 80116b6:	600c      	str	r4, [r1, #0]
  netmask.addr = 0;
 80116b8:	6014      	str	r4, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80116ba:	9501      	str	r5, [sp, #4]
 80116bc:	f006 fbce 	bl	8017e5c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80116c0:	4630      	mov	r0, r6
 80116c2:	f006 fc75 	bl	8017fb0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80116c6:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80116ca:	4630      	mov	r0, r6
  if (netif_is_link_up(&gnetif))
 80116cc:	075b      	lsls	r3, r3, #29
 80116ce:	d522      	bpl.n	8011716 <MX_LWIP_Init+0x82>
    netif_set_up(&gnetif);
 80116d0:	f006 fc74 	bl	8017fbc <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80116d4:	4917      	ldr	r1, [pc, #92]	; (8011734 <MX_LWIP_Init+0xa0>)

  link_arg.netif = &gnetif;
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80116d6:	ac07      	add	r4, sp, #28
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80116d8:	4810      	ldr	r0, [pc, #64]	; (801171c <MX_LWIP_Init+0x88>)
 80116da:	f006 fcf9 	bl	80180d0 <netif_set_link_callback>
  osSemaphoreDef(Netif_SEM);
 80116de:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80116e0:	2101      	movs	r1, #1
 80116e2:	a805      	add	r0, sp, #20
  link_arg.netif = &gnetif;
 80116e4:	4f14      	ldr	r7, [pc, #80]	; (8011738 <MX_LWIP_Init+0xa4>)
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80116e6:	4d15      	ldr	r5, [pc, #84]	; (801173c <MX_LWIP_Init+0xa8>)
  osSemaphoreDef(Netif_SEM);
 80116e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80116ec:	f001 fa0c 	bl	8012b08 <osSemaphoreCreate>
 80116f0:	4b13      	ldr	r3, [pc, #76]	; (8011740 <MX_LWIP_Init+0xac>)
  link_arg.semaphore = Netif_LinkSemaphore;
 80116f2:	6078      	str	r0, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80116f4:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 80116f6:	603e      	str	r6, [r7, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80116f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80116fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8011704:	4639      	mov	r1, r7
 8011706:	a807      	add	r0, sp, #28
 8011708:	f001 f94a 	bl	80129a0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 801170c:	4803      	ldr	r0, [pc, #12]	; (801171c <MX_LWIP_Init+0x88>)
 801170e:	f00d fa77 	bl	801ec00 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8011712:	b00f      	add	sp, #60	; 0x3c
 8011714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 8011716:	f006 fc73 	bl	8018000 <netif_set_down>
 801171a:	e7db      	b.n	80116d4 <MX_LWIP_Init+0x40>
 801171c:	2001bff0 	.word	0x2001bff0
 8011720:	2001c034 	.word	0x2001c034
 8011724:	2001c02c 	.word	0x2001c02c
 8011728:	2001c030 	.word	0x2001c030
 801172c:	080151e9 	.word	0x080151e9
 8011730:	08011a49 	.word	0x08011a49
 8011734:	08011c29 	.word	0x08011c29
 8011738:	2001bfe8 	.word	0x2001bfe8
 801173c:	080267e4 	.word	0x080267e4
 8011740:	20001ce4 	.word	0x20001ce4

08011744 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8011744:	4b2d      	ldr	r3, [pc, #180]	; (80117fc <low_level_output+0xb8>)
{
 8011746:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801174a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 801174c:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801174e:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8011750:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 8011752:	2900      	cmp	r1, #0
 8011754:	d04f      	beq.n	80117f6 <low_level_output+0xb2>
  bufferoffset = 0;
 8011756:	2500      	movs	r5, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011758:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 801175c:	46a8      	mov	r8, r5
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801175e:	6822      	ldr	r2, [r4, #0]
 8011760:	2a00      	cmp	r2, #0
 8011762:	db1b      	blt.n	801179c <low_level_output+0x58>
      byteslefttocopy = q->len;
 8011764:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011768:	1956      	adds	r6, r2, r5
 801176a:	454e      	cmp	r6, r9
 801176c:	d93e      	bls.n	80117ec <low_level_output+0xa8>
      payloadoffset = 0;
 801176e:	2700      	movs	r7, #0
 8011770:	e002      	b.n	8011778 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011772:	454e      	cmp	r6, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8011774:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011776:	d923      	bls.n	80117c0 <low_level_output+0x7c>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8011778:	eba9 0a05 	sub.w	sl, r9, r5
 801177c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8011780:	1958      	adds	r0, r3, r5

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 8011782:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8011784:	4439      	add	r1, r7
 8011786:	4652      	mov	r2, sl
 8011788:	f00f ff02 	bl	8021590 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801178c:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801178e:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8011792:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011794:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8011796:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011798:	42ab      	cmp	r3, r5
 801179a:	daea      	bge.n	8011772 <low_level_output+0x2e>
        errval = ERR_USE;
 801179c:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80117a0:	4b16      	ldr	r3, [pc, #88]	; (80117fc <low_level_output+0xb8>)
 80117a2:	f241 0214 	movw	r2, #4116	; 0x1014
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	5899      	ldr	r1, [r3, r2]
 80117aa:	0689      	lsls	r1, r1, #26
 80117ac:	d505      	bpl.n	80117ba <low_level_output+0x76>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80117ae:	2520      	movs	r5, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80117b0:	f241 0104 	movw	r1, #4100	; 0x1004
 80117b4:	2400      	movs	r4, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80117b6:	509d      	str	r5, [r3, r2]
    heth.Instance->DMATPDR = 0;
 80117b8:	505c      	str	r4, [r3, r1]
  }
  return errval;
}
 80117ba:	b003      	add	sp, #12
 80117bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c0:	4618      	mov	r0, r3
 80117c2:	4635      	mov	r5, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80117c4:	f8db 1004 	ldr.w	r1, [fp, #4]
 80117c8:	4632      	mov	r2, r6
 80117ca:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80117cc:	44b0      	add	r8, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80117ce:	4439      	add	r1, r7
 80117d0:	f00f fede 	bl	8021590 <memcpy>
  for(q = p; q != NULL; q = q->next)
 80117d4:	f8db b000 	ldr.w	fp, [fp]
 80117d8:	9b01      	ldr	r3, [sp, #4]
 80117da:	f1bb 0f00 	cmp.w	fp, #0
 80117de:	d1be      	bne.n	801175e <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 80117e0:	4641      	mov	r1, r8
 80117e2:	4806      	ldr	r0, [pc, #24]	; (80117fc <low_level_output+0xb8>)
 80117e4:	f7f7 f826 	bl	8008834 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 80117e8:	2000      	movs	r0, #0
 80117ea:	e7d9      	b.n	80117a0 <low_level_output+0x5c>
 80117ec:	1958      	adds	r0, r3, r5
      payloadoffset = 0;
 80117ee:	2700      	movs	r7, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80117f0:	4635      	mov	r5, r6
      byteslefttocopy = q->len;
 80117f2:	4616      	mov	r6, r2
 80117f4:	e7e6      	b.n	80117c4 <low_level_output+0x80>
  uint32_t framelength = 0;
 80117f6:	4688      	mov	r8, r1
 80117f8:	e7f2      	b.n	80117e0 <low_level_output+0x9c>
 80117fa:	bf00      	nop
 80117fc:	2001d908 	.word	0x2001d908

08011800 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8011800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011804:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8011918 <ethernetif_input+0x118>
 8011808:	b083      	sub	sp, #12
 801180a:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801180c:	4b40      	ldr	r3, [pc, #256]	; (8011910 <ethernetif_input+0x110>)
 801180e:	f04f 31ff 	mov.w	r1, #4294967295
 8011812:	6818      	ldr	r0, [r3, #0]
 8011814:	f001 f99e 	bl	8012b54 <osSemaphoreWait>
 8011818:	2800      	cmp	r0, #0
 801181a:	d1f7      	bne.n	801180c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 801181c:	483d      	ldr	r0, [pc, #244]	; (8011914 <ethernetif_input+0x114>)
 801181e:	f00f faaf 	bl	8020d80 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8011822:	483d      	ldr	r0, [pc, #244]	; (8011918 <ethernetif_input+0x118>)
 8011824:	f7f7 f886 	bl	8008934 <HAL_ETH_GetReceivedFrame_IT>
 8011828:	4604      	mov	r4, r0
 801182a:	2800      	cmp	r0, #0
 801182c:	d167      	bne.n	80118fe <ethernetif_input+0xfe>
  len = heth.RxFrameInfos.length;
 801182e:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 8011832:	bb59      	cbnz	r1, 801188c <ethernetif_input+0x8c>
  struct pbuf *p = NULL;
 8011834:	2300      	movs	r3, #0
 8011836:	9300      	str	r3, [sp, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8011838:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801183c:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8011840:	b140      	cbz	r0, 8011854 <ethernetif_input+0x54>
 8011842:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8011844:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8011846:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8011848:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801184c:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801184e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8011850:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8011852:	d1f7      	bne.n	8011844 <ethernetif_input+0x44>
    heth.RxFrameInfos.SegCount =0;
 8011854:	2100      	movs	r1, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8011856:	f8d9 3000 	ldr.w	r3, [r9]
 801185a:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
 801185e:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8011862:	5899      	ldr	r1, [r3, r2]
 8011864:	0609      	lsls	r1, r1, #24
 8011866:	d505      	bpl.n	8011874 <ethernetif_input+0x74>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8011868:	2080      	movs	r0, #128	; 0x80
    heth.Instance->DMARPDR = 0;
 801186a:	f241 0108 	movw	r1, #4104	; 0x1008
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801186e:	5098      	str	r0, [r3, r2]
    heth.Instance->DMARPDR = 0;
 8011870:	2200      	movs	r2, #0
 8011872:	505a      	str	r2, [r3, r1]
        p = low_level_input( netif );
        if   (p != NULL)
 8011874:	9800      	ldr	r0, [sp, #0]
 8011876:	2800      	cmp	r0, #0
 8011878:	d041      	beq.n	80118fe <ethernetif_input+0xfe>
        {
          if (netif->input( p, netif) != ERR_OK )
 801187a:	9901      	ldr	r1, [sp, #4]
 801187c:	690b      	ldr	r3, [r1, #16]
 801187e:	4798      	blx	r3
 8011880:	2800      	cmp	r0, #0
 8011882:	d140      	bne.n	8011906 <ethernetif_input+0x106>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8011884:	4823      	ldr	r0, [pc, #140]	; (8011914 <ethernetif_input+0x114>)
 8011886:	f00f fa81 	bl	8020d8c <sys_mutex_unlock>
      } while(p!=NULL);
 801188a:	e7c7      	b.n	801181c <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801188c:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8011890:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8011894:	f006 fd6c 	bl	8018370 <pbuf_alloc>
  if (p != NULL)
 8011898:	4606      	mov	r6, r0
 801189a:	9000      	str	r0, [sp, #0]
 801189c:	2800      	cmp	r0, #0
 801189e:	d0c9      	beq.n	8011834 <ethernetif_input+0x34>
    bufferoffset = 0;
 80118a0:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 80118a2:	8972      	ldrh	r2, [r6, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80118a4:	f240 58f4 	movw	r8, #1524	; 0x5f4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80118a8:	46ab      	mov	fp, r5
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80118aa:	1854      	adds	r4, r2, r1
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80118ac:	f8d9 7030 	ldr.w	r7, [r9, #48]	; 0x30
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80118b0:	4544      	cmp	r4, r8
 80118b2:	d921      	bls.n	80118f8 <ethernetif_input+0xf8>
      payloadoffset = 0;
 80118b4:	2500      	movs	r5, #0
 80118b6:	465b      	mov	r3, fp
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80118b8:	eba8 0a01 	sub.w	sl, r8, r1
 80118bc:	6870      	ldr	r0, [r6, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80118be:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80118c2:	4419      	add	r1, r3
 80118c4:	4428      	add	r0, r5
 80118c6:	4652      	mov	r2, sl
 80118c8:	f00f fe62 	bl	8021590 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80118cc:	68ff      	ldr	r7, [r7, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80118ce:	4544      	cmp	r4, r8
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80118d0:	4455      	add	r5, sl
        bufferoffset = 0;
 80118d2:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80118d6:	68bb      	ldr	r3, [r7, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80118d8:	d8ee      	bhi.n	80118b8 <ethernetif_input+0xb8>
 80118da:	469b      	mov	fp, r3
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80118dc:	4619      	mov	r1, r3
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80118de:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80118e0:	6870      	ldr	r0, [r6, #4]
 80118e2:	4428      	add	r0, r5
 80118e4:	f00f fe54 	bl	8021590 <memcpy>
    for(q = p; q != NULL; q = q->next)
 80118e8:	6836      	ldr	r6, [r6, #0]
 80118ea:	2e00      	cmp	r6, #0
 80118ec:	d0a4      	beq.n	8011838 <ethernetif_input+0x38>
 80118ee:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 80118f0:	8972      	ldrh	r2, [r6, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80118f2:	1854      	adds	r4, r2, r1
 80118f4:	4544      	cmp	r4, r8
 80118f6:	d8dd      	bhi.n	80118b4 <ethernetif_input+0xb4>
 80118f8:	4459      	add	r1, fp
      payloadoffset = 0;
 80118fa:	2500      	movs	r5, #0
 80118fc:	e7f0      	b.n	80118e0 <ethernetif_input+0xe0>
        UNLOCK_TCPIP_CORE();
 80118fe:	4805      	ldr	r0, [pc, #20]	; (8011914 <ethernetif_input+0x114>)
 8011900:	f00f fa44 	bl	8020d8c <sys_mutex_unlock>
      } while(p!=NULL);
 8011904:	e782      	b.n	801180c <ethernetif_input+0xc>
            pbuf_free(p);
 8011906:	9800      	ldr	r0, [sp, #0]
 8011908:	f006 fcc4 	bl	8018294 <pbuf_free>
 801190c:	e7ba      	b.n	8011884 <ethernetif_input+0x84>
 801190e:	bf00      	nop
 8011910:	20001ce8 	.word	0x20001ce8
 8011914:	2001f160 	.word	0x2001f160
 8011918:	2001d908 	.word	0x2001d908

0801191c <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 801191c:	4b42      	ldr	r3, [pc, #264]	; (8011a28 <HAL_ETH_MspInit+0x10c>)
 801191e:	6802      	ldr	r2, [r0, #0]
{
 8011920:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8011922:	429a      	cmp	r2, r3
{
 8011924:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011926:	f04f 0400 	mov.w	r4, #0
 801192a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801192e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8011932:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8011934:	d001      	beq.n	801193a <HAL_ETH_MspInit+0x1e>
}
 8011936:	b00d      	add	sp, #52	; 0x34
 8011938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 801193a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801193e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8011940:	2032      	movs	r0, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011942:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8011944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011946:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011948:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH_CLK_ENABLE();
 801194a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801194e:	631a      	str	r2, [r3, #48]	; 0x30
 8011950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011952:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8011956:	9200      	str	r2, [sp, #0]
 8011958:	9a00      	ldr	r2, [sp, #0]
 801195a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801195c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011960:	631a      	str	r2, [r3, #48]	; 0x30
 8011962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011964:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8011968:	9201      	str	r2, [sp, #4]
 801196a:	9a01      	ldr	r2, [sp, #4]
 801196c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801196e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8011972:	631a      	str	r2, [r3, #48]	; 0x30
 8011974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011976:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801197a:	9202      	str	r2, [sp, #8]
 801197c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801197e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011980:	f042 0204 	orr.w	r2, r2, #4
 8011984:	631a      	str	r2, [r3, #48]	; 0x30
 8011986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011988:	f002 0204 	and.w	r2, r2, #4
 801198c:	9203      	str	r2, [sp, #12]
 801198e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011992:	f042 0201 	orr.w	r2, r2, #1
 8011996:	631a      	str	r2, [r3, #48]	; 0x30
 8011998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801199a:	f002 0201 	and.w	r2, r2, #1
 801199e:	9204      	str	r2, [sp, #16]
 80119a0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80119a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119a4:	433a      	orrs	r2, r7
 80119a6:	631a      	str	r2, [r3, #48]	; 0x30
 80119a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119aa:	403a      	ands	r2, r7
 80119ac:	9205      	str	r2, [sp, #20]
 80119ae:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80119b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80119b6:	631a      	str	r2, [r3, #48]	; 0x30
 80119b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80119ba:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80119bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80119c0:	481a      	ldr	r0, [pc, #104]	; (8011a2c <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119c2:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80119c4:	9306      	str	r3, [sp, #24]
 80119c6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119c8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80119ca:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80119ce:	f7f7 fcf9 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80119d2:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80119d4:	a907      	add	r1, sp, #28
 80119d6:	4816      	ldr	r0, [pc, #88]	; (8011a30 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80119d8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119da:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119dc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80119de:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80119e2:	f7f7 fcef 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80119e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80119ea:	a907      	add	r1, sp, #28
 80119ec:	4811      	ldr	r0, [pc, #68]	; (8011a34 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80119ee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119f0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119f2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80119f4:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80119f8:	f7f7 fce4 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80119fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011a00:	a907      	add	r1, sp, #28
 8011a02:	480d      	ldr	r0, [pc, #52]	; (8011a38 <HAL_ETH_MspInit+0x11c>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8011a04:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a06:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a08:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011a0a:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011a0e:	f7f7 fcd9 	bl	80093c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8011a12:	4622      	mov	r2, r4
 8011a14:	2106      	movs	r1, #6
 8011a16:	203d      	movs	r0, #61	; 0x3d
 8011a18:	f7f5 fa0a 	bl	8006e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8011a1c:	203d      	movs	r0, #61	; 0x3d
 8011a1e:	f7f5 fa51 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
}
 8011a22:	b00d      	add	sp, #52	; 0x34
 8011a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a26:	bf00      	nop
 8011a28:	40028000 	.word	0x40028000
 8011a2c:	40020800 	.word	0x40020800
 8011a30:	40020000 	.word	0x40020000
 8011a34:	40020400 	.word	0x40020400
 8011a38:	40021800 	.word	0x40021800

08011a3c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8011a3c:	4b01      	ldr	r3, [pc, #4]	; (8011a44 <HAL_ETH_RxCpltCallback+0x8>)
 8011a3e:	6818      	ldr	r0, [r3, #0]
 8011a40:	f001 b8b4 	b.w	8012bac <osSemaphoreRelease>
 8011a44:	20001ce8 	.word	0x20001ce8

08011a48 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8011a48:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011a4a:	4604      	mov	r4, r0
{
 8011a4c:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	f000 8097 	beq.w	8011b82 <ethernetif_init+0x13a>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8011a54:	f247 4173 	movw	r1, #29811	; 0x7473
  heth.Instance = ETH;
 8011a58:	4d4e      	ldr	r5, [pc, #312]	; (8011b94 <ethernetif_init+0x14c>)
  uint32_t regvalue = 0;
 8011a5a:	2600      	movs	r6, #0
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8011a5c:	484e      	ldr	r0, [pc, #312]	; (8011b98 <ethernetif_init+0x150>)
  netif->name[0] = IFNAME0;
 8011a5e:	86e1      	strh	r1, [r4, #54]	; 0x36
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8011a60:	f44f 6700 	mov.w	r7, #2048	; 0x800
  heth.Instance = ETH;
 8011a64:	4a4d      	ldr	r2, [pc, #308]	; (8011b9c <ethernetif_init+0x154>)
  heth.Init.Speed = ETH_SPEED_100M;
 8011a66:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  MACAddr[0] = 0x00;
 8011a6a:	4b4d      	ldr	r3, [pc, #308]	; (8011ba0 <ethernetif_init+0x158>)
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8011a6c:	494d      	ldr	r1, [pc, #308]	; (8011ba4 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 8011a6e:	9600      	str	r6, [sp, #0]
  MACAddr[0] = 0x00;
 8011a70:	9301      	str	r3, [sp, #4]
  heth.Instance = ETH;
 8011a72:	602a      	str	r2, [r5, #0]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8011a74:	6803      	ldr	r3, [r0, #0]
 8011a76:	4a4c      	ldr	r2, [pc, #304]	; (8011ba8 <ethernetif_init+0x160>)
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8011a78:	822e      	strh	r6, [r5, #16]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8011a7a:	680e      	ldr	r6, [r1, #0]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011a7c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8011bd0 <ethernetif_init+0x188>
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8011a80:	4073      	eors	r3, r6
 8011a82:	6816      	ldr	r6, [r2, #0]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8011a84:	60ef      	str	r7, [r5, #12]
  heth.Init.MACAddr = &MACAddr[0];
 8011a86:	af01      	add	r7, sp, #4
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8011a88:	4073      	eors	r3, r6
  heth.Init.Speed = ETH_SPEED_100M;
 8011a8a:	f8c5 e008 	str.w	lr, [r5, #8]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8011a8e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8011a92:	f88d 3009 	strb.w	r3, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8011a96:	6803      	ldr	r3, [r0, #0]
 8011a98:	6809      	ldr	r1, [r1, #0]
 8011a9a:	6810      	ldr	r0, [r2, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8011a9c:	2201      	movs	r2, #1
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8011a9e:	404b      	eors	r3, r1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8011aa0:	4942      	ldr	r1, [pc, #264]	; (8011bac <ethernetif_init+0x164>)
  netif->output = etharp_output;
 8011aa2:	f8c4 c014 	str.w	ip, [r4, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8011aa6:	4043      	eors	r3, r0
  netif->linkoutput = low_level_output;
 8011aa8:	61a1      	str	r1, [r4, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011aaa:	4628      	mov	r0, r5
  heth.Init.MACAddr = &MACAddr[0];
 8011aac:	616f      	str	r7, [r5, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8011aae:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8011ab2:	622e      	str	r6, [r5, #32]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8011ab4:	606a      	str	r2, [r5, #4]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 8011ab6:	e9c5 2206 	strd	r2, r2, [r5, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011aba:	f7f7 f85b 	bl	8008b74 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8011abe:	b928      	cbnz	r0, 8011acc <ethernetif_init+0x84>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8011ac0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8011ac4:	f043 0304 	orr.w	r3, r3, #4
 8011ac8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8011acc:	2304      	movs	r3, #4
 8011ace:	4a38      	ldr	r2, [pc, #224]	; (8011bb0 <ethernetif_init+0x168>)
 8011ad0:	4938      	ldr	r1, [pc, #224]	; (8011bb4 <ethernetif_init+0x16c>)
  osSemaphoreDef(SEM);
 8011ad2:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8011ad4:	482f      	ldr	r0, [pc, #188]	; (8011b94 <ethernetif_init+0x14c>)
 8011ad6:	f7f6 fe1f 	bl	8008718 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8011ada:	2304      	movs	r3, #4
 8011adc:	4a36      	ldr	r2, [pc, #216]	; (8011bb8 <ethernetif_init+0x170>)
 8011ade:	4937      	ldr	r1, [pc, #220]	; (8011bbc <ethernetif_init+0x174>)
 8011ae0:	482c      	ldr	r0, [pc, #176]	; (8011b94 <ethernetif_init+0x14c>)
 8011ae2:	f7f6 fe69 	bl	80087b8 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011ae6:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011ae8:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011aea:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 8011aee:	f240 55dc 	movw	r5, #1500	; 0x5dc
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011af2:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011af4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011af8:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011afc:	781e      	ldrb	r6, [r3, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011afe:	a803      	add	r0, sp, #12
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011b00:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011b04:	785e      	ldrb	r6, [r3, #1]
 8011b06:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011b0a:	789e      	ldrb	r6, [r3, #2]
 8011b0c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011b10:	78de      	ldrb	r6, [r3, #3]
  osSemaphoreDef(SEM);
 8011b12:	9703      	str	r7, [sp, #12]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011b14:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011b18:	791e      	ldrb	r6, [r3, #4]
 8011b1a:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011b1e:	795b      	ldrb	r3, [r3, #5]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011b20:	4e27      	ldr	r6, [pc, #156]	; (8011bc0 <ethernetif_init+0x178>)
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011b22:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011b26:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  netif->mtu = 1500;
 8011b2a:	85a5      	strh	r5, [r4, #44]	; 0x2c
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011b2c:	ad05      	add	r5, sp, #20
  osSemaphoreDef(SEM);
 8011b2e:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011b30:	f000 ffea 	bl	8012b08 <osSemaphoreCreate>
 8011b34:	4686      	mov	lr, r0
 8011b36:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8011bd4 <ethernetif_init+0x18c>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011b3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b3e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8011b42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8011b46:	4621      	mov	r1, r4
 8011b48:	a805      	add	r0, sp, #20
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011b4a:	f8cc e000 	str.w	lr, [ip]
  osThreadCreate (osThread(EthIf), netif);
 8011b4e:	f000 ff27 	bl	80129a0 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8011b52:	4810      	ldr	r0, [pc, #64]	; (8011b94 <ethernetif_init+0x14c>)
 8011b54:	f7f7 f962 	bl	8008e1c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8011b58:	466a      	mov	r2, sp
 8011b5a:	211d      	movs	r1, #29
 8011b5c:	480d      	ldr	r0, [pc, #52]	; (8011b94 <ethernetif_init+0x14c>)
 8011b5e:	f7f6 ff77 	bl	8008a50 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8011b62:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8011b64:	211d      	movs	r1, #29
 8011b66:	480b      	ldr	r0, [pc, #44]	; (8011b94 <ethernetif_init+0x14c>)
  regvalue |= (PHY_ISFR_INT4);
 8011b68:	f042 020b 	orr.w	r2, r2, #11
 8011b6c:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8011b6e:	f7f6 ffb9 	bl	8008ae4 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8011b72:	466a      	mov	r2, sp
 8011b74:	211d      	movs	r1, #29
 8011b76:	4807      	ldr	r0, [pc, #28]	; (8011b94 <ethernetif_init+0x14c>)
 8011b78:	f7f6 ff6a 	bl	8008a50 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8011b7c:	4638      	mov	r0, r7
 8011b7e:	b00d      	add	sp, #52	; 0x34
 8011b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011b82:	4b10      	ldr	r3, [pc, #64]	; (8011bc4 <ethernetif_init+0x17c>)
 8011b84:	f240 223a 	movw	r2, #570	; 0x23a
 8011b88:	490f      	ldr	r1, [pc, #60]	; (8011bc8 <ethernetif_init+0x180>)
 8011b8a:	4810      	ldr	r0, [pc, #64]	; (8011bcc <ethernetif_init+0x184>)
 8011b8c:	f010 fc9a 	bl	80224c4 <iprintf>
 8011b90:	e760      	b.n	8011a54 <ethernetif_init+0xc>
 8011b92:	bf00      	nop
 8011b94:	2001d908 	.word	0x2001d908
 8011b98:	1ff0f420 	.word	0x1ff0f420
 8011b9c:	40028000 	.word	0x40028000
 8011ba0:	00e18000 	.word	0x00e18000
 8011ba4:	1ff0f424 	.word	0x1ff0f424
 8011ba8:	1ff0f428 	.word	0x1ff0f428
 8011bac:	08011745 	.word	0x08011745
 8011bb0:	2001d950 	.word	0x2001d950
 8011bb4:	2001c038 	.word	0x2001c038
 8011bb8:	2001c0b8 	.word	0x2001c0b8
 8011bbc:	2001d888 	.word	0x2001d888
 8011bc0:	08026800 	.word	0x08026800
 8011bc4:	08028cf8 	.word	0x08028cf8
 8011bc8:	08028d14 	.word	0x08028d14
 8011bcc:	08028d24 	.word	0x08028d24
 8011bd0:	0801f769 	.word	0x0801f769
 8011bd4:	20001ce8 	.word	0x20001ce8

08011bd8 <sys_now>:
 8011bd8:	f7f4 bcd0 	b.w	800657c <HAL_GetTick>

08011bdc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8011bdc:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 8011bde:	2300      	movs	r3, #0
{
 8011be0:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011be2:	4d0f      	ldr	r5, [pc, #60]	; (8011c20 <ethernetif_set_link+0x44>)
{
 8011be4:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 8011be6:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 8011be8:	e003      	b.n	8011bf2 <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8011bea:	b1b3      	cbz	r3, 8011c1a <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8011bec:	20c8      	movs	r0, #200	; 0xc8
 8011bee:	f000 ff03 	bl	80129f8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011bf2:	aa01      	add	r2, sp, #4
 8011bf4:	2101      	movs	r1, #1
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	f7f6 ff2a 	bl	8008a50 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8011bfc:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 8011bfe:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8011c00:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 8011c04:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8011c08:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 8011c0a:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8011c0c:	d4ed      	bmi.n	8011bea <ethernetif_set_link+0xe>
 8011c0e:	b113      	cbz	r3, 8011c16 <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 8011c10:	f006 fa1e 	bl	8018050 <netif_set_link_up>
 8011c14:	e7ea      	b.n	8011bec <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8011c16:	0753      	lsls	r3, r2, #29
 8011c18:	d5e8      	bpl.n	8011bec <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 8011c1a:	f006 fa3f 	bl	801809c <netif_set_link_down>
 8011c1e:	e7e5      	b.n	8011bec <ethernetif_set_link+0x10>
 8011c20:	2001d908 	.word	0x2001d908

08011c24 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8011c24:	4770      	bx	lr
 8011c26:	bf00      	nop

08011c28 <ethernetif_update_config>:
{
 8011c28:	b570      	push	{r4, r5, r6, lr}
  if(netif_is_link_up(netif))
 8011c2a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8011c2e:	b082      	sub	sp, #8
  __IO uint32_t tickstart = 0;
 8011c30:	2100      	movs	r1, #0
{
 8011c32:	4604      	mov	r4, r0
  if(netif_is_link_up(netif))
 8011c34:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8011c36:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8011c38:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8011c3a:	d539      	bpl.n	8011cb0 <ethernetif_update_config+0x88>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8011c3c:	4d32      	ldr	r5, [pc, #200]	; (8011d08 <ethernetif_update_config+0xe0>)
 8011c3e:	686b      	ldr	r3, [r5, #4]
 8011c40:	b9e3      	cbnz	r3, 8011c7c <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8011c42:	68ab      	ldr	r3, [r5, #8]
 8011c44:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8011c48:	d141      	bne.n	8011cce <ethernetif_update_config+0xa6>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8011c4a:	68eb      	ldr	r3, [r5, #12]
 8011c4c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8011c50:	d136      	bne.n	8011cc0 <ethernetif_update_config+0x98>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8011c52:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8011c54:	08db      	lsrs	r3, r3, #3
 8011c56:	2100      	movs	r1, #0
 8011c58:	482b      	ldr	r0, [pc, #172]	; (8011d08 <ethernetif_update_config+0xe0>)
 8011c5a:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8011c5e:	b292      	uxth	r2, r2
 8011c60:	f7f6 ff40 	bl	8008ae4 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8011c64:	2100      	movs	r1, #0
 8011c66:	4828      	ldr	r0, [pc, #160]	; (8011d08 <ethernetif_update_config+0xe0>)
 8011c68:	f7f7 f958 	bl	8008f1c <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8011c6c:	4826      	ldr	r0, [pc, #152]	; (8011d08 <ethernetif_update_config+0xe0>)
 8011c6e:	f7f7 f8d5 	bl	8008e1c <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8011c72:	4620      	mov	r0, r4
 8011c74:	f7ff ffd6 	bl	8011c24 <ethernetif_notify_conn_changed>
}
 8011c78:	b002      	add	sp, #8
 8011c7a:	bd70      	pop	{r4, r5, r6, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8011c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011c80:	4628      	mov	r0, r5
 8011c82:	f7f6 ff2f 	bl	8008ae4 <HAL_ETH_WritePHYRegister>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011c86:	462e      	mov	r6, r5
      tickstart = HAL_GetTick();
 8011c88:	f7f4 fc78 	bl	800657c <HAL_GetTick>
 8011c8c:	9000      	str	r0, [sp, #0]
 8011c8e:	e002      	b.n	8011c96 <ethernetif_update_config+0x6e>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8011c90:	9b01      	ldr	r3, [sp, #4]
 8011c92:	069a      	lsls	r2, r3, #26
 8011c94:	d425      	bmi.n	8011ce2 <ethernetif_update_config+0xba>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011c96:	aa01      	add	r2, sp, #4
 8011c98:	2101      	movs	r1, #1
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	f7f6 fed8 	bl	8008a50 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8011ca0:	f7f4 fc6c 	bl	800657c <HAL_GetTick>
 8011ca4:	9b00      	ldr	r3, [sp, #0]
 8011ca6:	1ac3      	subs	r3, r0, r3
 8011ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011cac:	d9f0      	bls.n	8011c90 <ethernetif_update_config+0x68>
 8011cae:	e7c8      	b.n	8011c42 <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 8011cb0:	4815      	ldr	r0, [pc, #84]	; (8011d08 <ethernetif_update_config+0xe0>)
 8011cb2:	f7f7 f8f3 	bl	8008e9c <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f7ff ffb4 	bl	8011c24 <ethernetif_notify_conn_changed>
}
 8011cbc:	b002      	add	sp, #8
 8011cbe:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8011cc0:	f240 21e3 	movw	r1, #739	; 0x2e3
 8011cc4:	4811      	ldr	r0, [pc, #68]	; (8011d0c <ethernetif_update_config+0xe4>)
 8011cc6:	f7f1 ff3f 	bl	8003b48 <assert_failed>
 8011cca:	68eb      	ldr	r3, [r5, #12]
 8011ccc:	e7c1      	b.n	8011c52 <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8011cce:	f240 21e2 	movw	r1, #738	; 0x2e2
 8011cd2:	480e      	ldr	r0, [pc, #56]	; (8011d0c <ethernetif_update_config+0xe4>)
 8011cd4:	f7f1 ff38 	bl	8003b48 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8011cd8:	68eb      	ldr	r3, [r5, #12]
 8011cda:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8011cde:	d0b8      	beq.n	8011c52 <ethernetif_update_config+0x2a>
 8011ce0:	e7ee      	b.n	8011cc0 <ethernetif_update_config+0x98>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8011ce2:	aa01      	add	r2, sp, #4
 8011ce4:	2110      	movs	r1, #16
 8011ce6:	4808      	ldr	r0, [pc, #32]	; (8011d08 <ethernetif_update_config+0xe0>)
 8011ce8:	f7f6 feb2 	bl	8008a50 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011cec:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8011cee:	f013 0204 	ands.w	r2, r3, #4
 8011cf2:	bf18      	it	ne
 8011cf4:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 8011cf8:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8011cfa:	bf4c      	ite	mi
 8011cfc:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8011cfe:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8011d02:	60ea      	str	r2, [r5, #12]
 8011d04:	60ab      	str	r3, [r5, #8]
 8011d06:	e7ad      	b.n	8011c64 <ethernetif_update_config+0x3c>
 8011d08:	2001d908 	.word	0x2001d908
 8011d0c:	08028cf8 	.word	0x08028cf8

08011d10 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011d10:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8011d14:	b183      	cbz	r3, 8011d38 <USBD_CDC_EP0_RxReady+0x28>
{
 8011d16:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d18:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011d1c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8011d20:	28ff      	cmp	r0, #255	; 0xff
 8011d22:	d007      	beq.n	8011d34 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011d24:	689b      	ldr	r3, [r3, #8]
 8011d26:	4621      	mov	r1, r4
 8011d28:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8011d2c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8011d2e:	23ff      	movs	r3, #255	; 0xff
 8011d30:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8011d34:	2000      	movs	r0, #0
 8011d36:	bd10      	pop	{r4, pc}
 8011d38:	2000      	movs	r0, #0
 8011d3a:	4770      	bx	lr

08011d3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011d3c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011d3e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8011d40:	4801      	ldr	r0, [pc, #4]	; (8011d48 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011d42:	801a      	strh	r2, [r3, #0]
}
 8011d44:	4770      	bx	lr
 8011d46:	bf00      	nop
 8011d48:	20000328 	.word	0x20000328

08011d4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011d4c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011d4e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 8011d50:	4801      	ldr	r0, [pc, #4]	; (8011d58 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011d52:	801a      	strh	r2, [r3, #0]
}
 8011d54:	4770      	bx	lr
 8011d56:	bf00      	nop
 8011d58:	2000036c 	.word	0x2000036c

08011d5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011d5c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011d5e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8011d60:	4801      	ldr	r0, [pc, #4]	; (8011d68 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011d62:	801a      	strh	r2, [r3, #0]
}
 8011d64:	4770      	bx	lr
 8011d66:	bf00      	nop
 8011d68:	200003bc 	.word	0x200003bc

08011d6c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011d6c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011d6e:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8011d70:	4801      	ldr	r0, [pc, #4]	; (8011d78 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011d72:	801a      	strh	r2, [r3, #0]
}
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	200003b0 	.word	0x200003b0

08011d7c <USBD_CDC_DataOut>:
{
 8011d7c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d7e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8011d82:	b175      	cbz	r5, 8011da2 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011d84:	4604      	mov	r4, r0
 8011d86:	f00f fa6b 	bl	8021260 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011d8a:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8011d8e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011d92:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8011d9c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8011d9e:	2000      	movs	r0, #0
}
 8011da0:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8011da2:	2003      	movs	r0, #3
}
 8011da4:	bd38      	pop	{r3, r4, r5, pc}
 8011da6:	bf00      	nop

08011da8 <USBD_CDC_DataIn>:
{
 8011da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 8011daa:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 8011dae:	b347      	cbz	r7, 8011e02 <USBD_CDC_DataIn+0x5a>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011db0:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8011db4:	4605      	mov	r5, r0
 8011db6:	460a      	mov	r2, r1
 8011db8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8011dbc:	69b3      	ldr	r3, [r6, #24]
 8011dbe:	b163      	cbz	r3, 8011dda <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011dc0:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 8011dc4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 8011dc8:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8011dcc:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8011dd0:	fbb3 f4fc 	udiv	r4, r3, ip
 8011dd4:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011dd8:	b164      	cbz	r4, 8011df4 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011dda:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
    hcdc->TxState = 0U;
 8011dde:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011de0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8011de4:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8011de8:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8011dea:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011dee:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8011df0:	4620      	mov	r0, r4
}
 8011df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011df4:	4623      	mov	r3, r4
 8011df6:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8011df8:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011dfa:	f00f fa15 	bl	8021228 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8011dfe:	4620      	mov	r0, r4
}
 8011e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8011e02:	2003      	movs	r0, #3
}
 8011e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e06:	bf00      	nop

08011e08 <USBD_CDC_Setup>:
{
 8011e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e0c:	780f      	ldrb	r7, [r1, #0]
{
 8011e0e:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8011e10:	2300      	movs	r3, #0
{
 8011e12:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e14:	f017 0660 	ands.w	r6, r7, #96	; 0x60
{
 8011e18:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011e1a:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8011e1e:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8011e22:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e26:	d01c      	beq.n	8011e62 <USBD_CDC_Setup+0x5a>
 8011e28:	2e20      	cmp	r6, #32
 8011e2a:	d111      	bne.n	8011e50 <USBD_CDC_Setup+0x48>
    if (req->wLength != 0U)
 8011e2c:	88ca      	ldrh	r2, [r1, #6]
 8011e2e:	2a00      	cmp	r2, #0
 8011e30:	d036      	beq.n	8011ea0 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8011e32:	0639      	lsls	r1, r7, #24
 8011e34:	d557      	bpl.n	8011ee6 <USBD_CDC_Setup+0xde>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011e36:	f8d0 62c0 	ldr.w	r6, [r0, #704]	; 0x2c0
 8011e3a:	4641      	mov	r1, r8
 8011e3c:	7860      	ldrb	r0, [r4, #1]
 8011e3e:	68b7      	ldr	r7, [r6, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e40:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011e42:	47b8      	blx	r7
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011e44:	88e2      	ldrh	r2, [r4, #6]
 8011e46:	4641      	mov	r1, r8
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f000 fd2f 	bl	80128ac <USBD_CtlSendData>
 8011e4e:	e004      	b.n	8011e5a <USBD_CDC_Setup+0x52>
      USBD_CtlError(pdev, req);
 8011e50:	4621      	mov	r1, r4
 8011e52:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 8011e54:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 8011e56:	f000 fcf7 	bl	8012848 <USBD_CtlError>
}
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	b002      	add	sp, #8
 8011e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8011e62:	784b      	ldrb	r3, [r1, #1]
 8011e64:	2b0b      	cmp	r3, #11
 8011e66:	d8f3      	bhi.n	8011e50 <USBD_CDC_Setup+0x48>
 8011e68:	a201      	add	r2, pc, #4	; (adr r2, 8011e70 <USBD_CDC_Setup+0x68>)
 8011e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e6e:	bf00      	nop
 8011e70:	08011eb5 	.word	0x08011eb5
 8011e74:	08011e5b 	.word	0x08011e5b
 8011e78:	08011e51 	.word	0x08011e51
 8011e7c:	08011e51 	.word	0x08011e51
 8011e80:	08011e51 	.word	0x08011e51
 8011e84:	08011e51 	.word	0x08011e51
 8011e88:	08011e51 	.word	0x08011e51
 8011e8c:	08011e51 	.word	0x08011e51
 8011e90:	08011e51 	.word	0x08011e51
 8011e94:	08011e51 	.word	0x08011e51
 8011e98:	08011ed3 	.word	0x08011ed3
 8011e9c:	08011ec9 	.word	0x08011ec9
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011ea0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 8011ea4:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011ea6:	7848      	ldrb	r0, [r1, #1]
 8011ea8:	689b      	ldr	r3, [r3, #8]
 8011eaa:	4798      	blx	r3
}
 8011eac:	4630      	mov	r0, r6
 8011eae:	b002      	add	sp, #8
 8011eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eb4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8011eb8:	2a03      	cmp	r2, #3
 8011eba:	d01e      	beq.n	8011efa <USBD_CDC_Setup+0xf2>
        USBD_CtlError(pdev, req);
 8011ebc:	4621      	mov	r1, r4
 8011ebe:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 8011ec0:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 8011ec2:	f000 fcc1 	bl	8012848 <USBD_CtlError>
        ret = USBD_FAIL;
 8011ec6:	e7c8      	b.n	8011e5a <USBD_CDC_Setup+0x52>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011ec8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8011ecc:	2b03      	cmp	r3, #3
 8011ece:	d0c4      	beq.n	8011e5a <USBD_CDC_Setup+0x52>
 8011ed0:	e7f4      	b.n	8011ebc <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ed2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8011ed6:	2b03      	cmp	r3, #3
 8011ed8:	d1f0      	bne.n	8011ebc <USBD_CDC_Setup+0xb4>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011eda:	2201      	movs	r2, #1
 8011edc:	f10d 0105 	add.w	r1, sp, #5
 8011ee0:	f000 fce4 	bl	80128ac <USBD_CtlSendData>
 8011ee4:	e7b9      	b.n	8011e5a <USBD_CDC_Setup+0x52>
        hcdc->CmdOpCode = req->bRequest;
 8011ee6:	7864      	ldrb	r4, [r4, #1]
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011ee8:	4641      	mov	r1, r8
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011eea:	f888 2201 	strb.w	r2, [r8, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 8011eee:	461e      	mov	r6, r3
        hcdc->CmdOpCode = req->bRequest;
 8011ef0:	f888 4200 	strb.w	r4, [r8, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011ef4:	f000 fcf2 	bl	80128dc <USBD_CtlPrepareRx>
 8011ef8:	e7af      	b.n	8011e5a <USBD_CDC_Setup+0x52>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011efa:	2202      	movs	r2, #2
 8011efc:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8011f00:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011f02:	f000 fcd3 	bl	80128ac <USBD_CtlSendData>
 8011f06:	e7a8      	b.n	8011e5a <USBD_CDC_Setup+0x52>

08011f08 <USBD_CDC_DeInit>:
{
 8011f08:	b538      	push	{r3, r4, r5, lr}
 8011f0a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011f0c:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011f0e:	2181      	movs	r1, #129	; 0x81
 8011f10:	f00f f93e 	bl	8021190 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011f14:	2101      	movs	r1, #1
 8011f16:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011f18:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011f1a:	f00f f939 	bl	8021190 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011f1e:	4620      	mov	r0, r4
 8011f20:	2182      	movs	r1, #130	; 0x82
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011f22:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011f26:	f00f f933 	bl	8021190 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8011f2a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011f2e:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8011f30:	b14b      	cbz	r3, 8011f46 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011f32:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011f3a:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8011f3e:	f00f fb11 	bl	8021564 <free>
    pdev->pClassData = NULL;
 8011f42:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8011f46:	2000      	movs	r0, #0
 8011f48:	bd38      	pop	{r3, r4, r5, pc}
 8011f4a:	bf00      	nop

08011f4c <USBD_CDC_Init>:
{
 8011f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f50:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011f52:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011f56:	f00f fafd 	bl	8021554 <malloc>
  if (hcdc == NULL)
 8011f5a:	4605      	mov	r5, r0
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	d04d      	beq.n	8011ffc <USBD_CDC_Init+0xb0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f60:	7c23      	ldrb	r3, [r4, #16]
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011f62:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 8011f64:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f68:	b38b      	cbz	r3, 8011fce <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011f6a:	2340      	movs	r3, #64	; 0x40
 8011f6c:	2181      	movs	r1, #129	; 0x81
 8011f6e:	2202      	movs	r2, #2
 8011f70:	4620      	mov	r0, r4
 8011f72:	f00f f8fb 	bl	802116c <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011f76:	4631      	mov	r1, r6
 8011f78:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011f7a:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011f7c:	2202      	movs	r2, #2
 8011f7e:	4620      	mov	r0, r4
 8011f80:	f00f f8f4 	bl	802116c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011f84:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011f86:	2203      	movs	r2, #3
 8011f88:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011f8a:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011f8e:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011f90:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011f94:	2308      	movs	r3, #8
 8011f96:	f00f f8e9 	bl	802116c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011f9a:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011f9e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8011fa2:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011fa4:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fac:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 8011fae:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8011fb2:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fb6:	b9b6      	cbnz	r6, 8011fe6 <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011fb8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8011fbc:	4641      	mov	r1, r8
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011fc4:	f00f f93e 	bl	8021244 <USBD_LL_PrepareReceive>
}
 8011fc8:	4630      	mov	r0, r6
 8011fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011fd2:	2181      	movs	r1, #129	; 0x81
 8011fd4:	2202      	movs	r2, #2
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f00f f8c8 	bl	802116c <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011fdc:	4631      	mov	r1, r6
 8011fde:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011fe2:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011fe4:	e7ca      	b.n	8011f7c <USBD_CDC_Init+0x30>
  return (uint8_t)USBD_OK;
 8011fe6:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011fe8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8011fec:	4641      	mov	r1, r8
 8011fee:	4620      	mov	r0, r4
 8011ff0:	2340      	movs	r3, #64	; 0x40
 8011ff2:	f00f f927 	bl	8021244 <USBD_LL_PrepareReceive>
}
 8011ff6:	4630      	mov	r0, r6
 8011ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8011ffc:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8011ffe:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012002:	e7e1      	b.n	8011fc8 <USBD_CDC_Init+0x7c>

08012004 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8012004:	b119      	cbz	r1, 801200e <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8012006:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801200a:	2000      	movs	r0, #0
 801200c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 801200e:	2003      	movs	r0, #3
}
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop

08012014 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012014:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8012016:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 801201c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012020:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop

08012028 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012028:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 801202a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 801202c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012030:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8012034:	4770      	bx	lr
 8012036:	bf00      	nop

08012038 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012038:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 801203c:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 801203e:	b18a      	cbz	r2, 8012064 <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012040:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012042:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012046:	b134      	cbz	r4, 8012056 <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012048:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801204a:	2340      	movs	r3, #64	; 0x40
 801204c:	2101      	movs	r1, #1
 801204e:	f00f f8f9 	bl	8021244 <USBD_LL_PrepareReceive>
}
 8012052:	4620      	mov	r0, r4
 8012054:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012056:	f44f 7300 	mov.w	r3, #512	; 0x200
 801205a:	2101      	movs	r1, #1
 801205c:	f00f f8f2 	bl	8021244 <USBD_LL_PrepareReceive>
}
 8012060:	4620      	mov	r0, r4
 8012062:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8012064:	2403      	movs	r4, #3
}
 8012066:	4620      	mov	r0, r4
 8012068:	bd10      	pop	{r4, pc}
 801206a:	bf00      	nop

0801206c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801206c:	b1a0      	cbz	r0, 8012098 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801206e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012072:	b113      	cbz	r3, 801207a <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8012074:	2300      	movs	r3, #0
 8012076:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801207a:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 801207e:	b113      	cbz	r3, 8012086 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8012080:	2300      	movs	r3, #0
 8012082:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012086:	b109      	cbz	r1, 801208c <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8012088:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801208c:	2301      	movs	r3, #1
  pdev->id = id;
 801208e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012090:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012094:	f00f b82a 	b.w	80210ec <USBD_LL_Init>

  return ret;
}
 8012098:	2003      	movs	r0, #3
 801209a:	4770      	bx	lr

0801209c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801209c:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 801209e:	2400      	movs	r4, #0
{
 80120a0:	b083      	sub	sp, #12
  uint16_t len = 0U;
 80120a2:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 80120a6:	b159      	cbz	r1, 80120c0 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80120a8:	4605      	mov	r5, r0
 80120aa:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80120ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80120b0:	f10d 0006 	add.w	r0, sp, #6
 80120b4:	4798      	blx	r3
 80120b6:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 80120ba:	4620      	mov	r0, r4
 80120bc:	b003      	add	sp, #12
 80120be:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80120c0:	2403      	movs	r4, #3
}
 80120c2:	4620      	mov	r0, r4
 80120c4:	b003      	add	sp, #12
 80120c6:	bd30      	pop	{r4, r5, pc}

080120c8 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80120c8:	f00f b842 	b.w	8021150 <USBD_LL_Start>

080120cc <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80120cc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80120d0:	b10b      	cbz	r3, 80120d6 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4718      	bx	r3
  }

  return ret;
}
 80120d6:	2003      	movs	r0, #3
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop

080120dc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80120dc:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80120de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80120e2:	b10b      	cbz	r3, 80120e8 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80120e8:	2000      	movs	r0, #0
 80120ea:	bd08      	pop	{r3, pc}

080120ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80120ec:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80120ee:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 80120f2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80120f4:	4628      	mov	r0, r5
 80120f6:	f000 fb93 	bl	8012820 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80120fa:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 80120fe:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 8012100:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 8012104:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8012108:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 801210a:	e9c4 02a5 	strd	r0, r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 801210e:	d009      	beq.n	8012124 <USBD_LL_SetupStage+0x38>
 8012110:	2b02      	cmp	r3, #2
 8012112:	d013      	beq.n	801213c <USBD_LL_SetupStage+0x50>
 8012114:	b163      	cbz	r3, 8012130 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012116:	4620      	mov	r0, r4
 8012118:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 801211c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012120:	f00f b844 	b.w	80211ac <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012124:	4629      	mov	r1, r5
 8012126:	4620      	mov	r0, r4
}
 8012128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801212c:	f000 ba9e 	b.w	801266c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012130:	4629      	mov	r1, r5
 8012132:	4620      	mov	r0, r4
}
 8012134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012138:	f000 b8f4 	b.w	8012324 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801213c:	4629      	mov	r1, r5
 801213e:	4620      	mov	r0, r4
}
 8012140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012144:	f000 baca 	b.w	80126dc <USBD_StdEPReq>

08012148 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012148:	b570      	push	{r4, r5, r6, lr}
 801214a:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801214c:	b931      	cbnz	r1, 801215c <USBD_LL_DataOutStage+0x14>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801214e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8012152:	460c      	mov	r4, r1
 8012154:	2b03      	cmp	r3, #3
 8012156:	d00e      	beq.n	8012176 <USBD_LL_DataOutStage+0x2e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8012158:	2000      	movs	r0, #0
}
 801215a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 801215c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012160:	699b      	ldr	r3, [r3, #24]
 8012162:	b133      	cbz	r3, 8012172 <USBD_LL_DataOutStage+0x2a>
 8012164:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8012168:	2a03      	cmp	r2, #3
 801216a:	d102      	bne.n	8012172 <USBD_LL_DataOutStage+0x2a>
}
 801216c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012170:	4718      	bx	r3
    return USBD_FAIL;
 8012172:	2003      	movs	r0, #3
}
 8012174:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8012176:	e9d0 3657 	ldrd	r3, r6, [r0, #348]	; 0x15c
 801217a:	42b3      	cmp	r3, r6
 801217c:	d80d      	bhi.n	801219a <USBD_LL_DataOutStage+0x52>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801217e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012182:	691b      	ldr	r3, [r3, #16]
 8012184:	b123      	cbz	r3, 8012190 <USBD_LL_DataOutStage+0x48>
 8012186:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801218a:	2a03      	cmp	r2, #3
 801218c:	d100      	bne.n	8012190 <USBD_LL_DataOutStage+0x48>
          pdev->pClass->EP0_RxReady(pdev);
 801218e:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8012190:	4628      	mov	r0, r5
 8012192:	f000 fbbb 	bl	801290c <USBD_CtlSendStatus>
  return USBD_OK;
 8012196:	2000      	movs	r0, #0
 8012198:	e7df      	b.n	801215a <USBD_LL_DataOutStage+0x12>
        pep->rem_length -= pep->maxpacket;
 801219a:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801219c:	4611      	mov	r1, r2
 801219e:	4632      	mov	r2, r6
 80121a0:	429e      	cmp	r6, r3
        pep->rem_length -= pep->maxpacket;
 80121a2:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80121a6:	bf28      	it	cs
 80121a8:	461a      	movcs	r2, r3
 80121aa:	f000 fba5 	bl	80128f8 <USBD_CtlContinueRx>
  return USBD_OK;
 80121ae:	4620      	mov	r0, r4
}
 80121b0:	bd70      	pop	{r4, r5, r6, pc}
 80121b2:	bf00      	nop

080121b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80121b4:	b570      	push	{r4, r5, r6, lr}
 80121b6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80121b8:	b949      	cbnz	r1, 80121ce <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80121ba:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80121be:	2b02      	cmp	r3, #2
 80121c0:	d015      	beq.n	80121ee <USBD_LL_DataInStage+0x3a>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80121c2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80121c6:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d00d      	beq.n	80121e8 <USBD_LL_DataInStage+0x34>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80121cc:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80121ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80121d2:	695b      	ldr	r3, [r3, #20]
 80121d4:	b133      	cbz	r3, 80121e4 <USBD_LL_DataInStage+0x30>
 80121d6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80121da:	2a03      	cmp	r2, #3
 80121dc:	d102      	bne.n	80121e4 <USBD_LL_DataInStage+0x30>
}
 80121de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80121e2:	4718      	bx	r3
    return USBD_FAIL;
 80121e4:	2003      	movs	r0, #3
}
 80121e6:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 80121e8:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 80121ec:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80121ee:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 80121f2:	460d      	mov	r5, r1
 80121f4:	42b3      	cmp	r3, r6
 80121f6:	d815      	bhi.n	8012224 <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 80121f8:	d024      	beq.n	8012244 <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80121fa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	b11b      	cbz	r3, 801220a <USBD_LL_DataInStage+0x56>
 8012202:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8012206:	2a03      	cmp	r2, #3
 8012208:	d019      	beq.n	801223e <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801220a:	2180      	movs	r1, #128	; 0x80
 801220c:	4620      	mov	r0, r4
 801220e:	f00e ffcd 	bl	80211ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012212:	4620      	mov	r0, r4
 8012214:	f000 fb86 	bl	8012924 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8012218:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 801221c:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 801221e:	2b01      	cmp	r3, #1
 8012220:	d1d4      	bne.n	80121cc <USBD_LL_DataInStage+0x18>
 8012222:	e7e1      	b.n	80121e8 <USBD_LL_DataInStage+0x34>
        pep->rem_length -= pep->maxpacket;
 8012224:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012226:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8012228:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801222a:	461a      	mov	r2, r3
 801222c:	f000 fb4c 	bl	80128c8 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012230:	462b      	mov	r3, r5
 8012232:	462a      	mov	r2, r5
 8012234:	4629      	mov	r1, r5
 8012236:	4620      	mov	r0, r4
 8012238:	f00f f804 	bl	8021244 <USBD_LL_PrepareReceive>
 801223c:	e7c1      	b.n	80121c2 <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 801223e:	4620      	mov	r0, r4
 8012240:	4798      	blx	r3
 8012242:	e7e2      	b.n	801220a <USBD_LL_DataInStage+0x56>
            (pep->total_length >= pep->maxpacket) &&
 8012244:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8012246:	4293      	cmp	r3, r2
 8012248:	d8d7      	bhi.n	80121fa <USBD_LL_DataInStage+0x46>
            (pep->total_length >= pep->maxpacket) &&
 801224a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801224e:	429a      	cmp	r2, r3
 8012250:	d2d3      	bcs.n	80121fa <USBD_LL_DataInStage+0x46>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012252:	460a      	mov	r2, r1
 8012254:	f000 fb38 	bl	80128c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012258:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 801225c:	e7e8      	b.n	8012230 <USBD_LL_DataInStage+0x7c>
 801225e:	bf00      	nop

08012260 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8012260:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012262:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8012264:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8012268:	b570      	push	{r4, r5, r6, lr}
 801226a:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 801226c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012270:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8012274:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8012276:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 801227a:	b11b      	cbz	r3, 8012284 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801227c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012284:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012286:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012288:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801228a:	4620      	mov	r0, r4
 801228c:	462b      	mov	r3, r5
 801228e:	4611      	mov	r1, r2
 8012290:	f00e ff6c 	bl	802116c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012294:	462b      	mov	r3, r5
 8012296:	2200      	movs	r2, #0
 8012298:	2180      	movs	r1, #128	; 0x80
 801229a:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801229c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80122a0:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80122a4:	f00e ff62 	bl	802116c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 80122a8:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80122aa:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80122ac:	6225      	str	r5, [r4, #32]
}
 80122ae:	bd70      	pop	{r4, r5, r6, pc}

080122b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80122b0:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 80122b2:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80122b4:	7419      	strb	r1, [r3, #16]
}
 80122b6:	4770      	bx	lr

080122b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80122b8:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80122ba:	2104      	movs	r1, #4

  return USBD_OK;
}
 80122bc:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 80122be:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80122c2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 80122c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 80122ca:	4770      	bx	lr

080122cc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80122cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80122d0:	2b04      	cmp	r3, #4
 80122d2:	d103      	bne.n	80122dc <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80122d4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80122d8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80122dc:	2000      	movs	r0, #0
 80122de:	4770      	bx	lr

080122e0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122e0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80122e4:	2a03      	cmp	r2, #3
 80122e6:	d001      	beq.n	80122ec <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80122e8:	2000      	movs	r0, #0
 80122ea:	4770      	bx	lr
{
 80122ec:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 80122ee:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80122f2:	69db      	ldr	r3, [r3, #28]
 80122f4:	b103      	cbz	r3, 80122f8 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80122f6:	4798      	blx	r3
}
 80122f8:	2000      	movs	r0, #0
 80122fa:	bd08      	pop	{r3, pc}

080122fc <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80122fc:	2000      	movs	r0, #0
 80122fe:	4770      	bx	lr

08012300 <USBD_LL_IsoOUTIncomplete>:
 8012300:	2000      	movs	r0, #0
 8012302:	4770      	bx	lr

08012304 <USBD_LL_DevConnected>:
 8012304:	2000      	movs	r0, #0
 8012306:	4770      	bx	lr

08012308 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012308:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 801230a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 801230e:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8012312:	b12a      	cbz	r2, 8012320 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012314:	6852      	ldr	r2, [r2, #4]
 8012316:	7901      	ldrb	r1, [r0, #4]
{
 8012318:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801231a:	4790      	blx	r2
  }

  return USBD_OK;
}
 801231c:	2000      	movs	r0, #0
 801231e:	bd08      	pop	{r3, pc}
 8012320:	2000      	movs	r0, #0
 8012322:	4770      	bx	lr

08012324 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012324:	b570      	push	{r4, r5, r6, lr}
 8012326:	780c      	ldrb	r4, [r1, #0]
 8012328:	b082      	sub	sp, #8
 801232a:	460e      	mov	r6, r1
 801232c:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801232e:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8012332:	2c20      	cmp	r4, #32
 8012334:	d00e      	beq.n	8012354 <USBD_StdDevReq+0x30>
 8012336:	2c40      	cmp	r4, #64	; 0x40
 8012338:	d00c      	beq.n	8012354 <USBD_StdDevReq+0x30>
 801233a:	b1ac      	cbz	r4, 8012368 <USBD_StdDevReq+0x44>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801233c:	2180      	movs	r1, #128	; 0x80
 801233e:	4628      	mov	r0, r5
 8012340:	f00e ff34 	bl	80211ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012344:	2100      	movs	r1, #0
 8012346:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8012348:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 801234a:	f00e ff2f 	bl	80211ac <USBD_LL_StallEP>
}
 801234e:	4620      	mov	r0, r4
 8012350:	b002      	add	sp, #8
 8012352:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012354:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8012358:	4631      	mov	r1, r6
 801235a:	4628      	mov	r0, r5
 801235c:	689b      	ldr	r3, [r3, #8]
 801235e:	4798      	blx	r3
 8012360:	4604      	mov	r4, r0
}
 8012362:	4620      	mov	r0, r4
 8012364:	b002      	add	sp, #8
 8012366:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8012368:	784b      	ldrb	r3, [r1, #1]
 801236a:	2b09      	cmp	r3, #9
 801236c:	d8e6      	bhi.n	801233c <USBD_StdDevReq+0x18>
 801236e:	a201      	add	r2, pc, #4	; (adr r2, 8012374 <USBD_StdDevReq+0x50>)
 8012370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012374:	080123d3 	.word	0x080123d3
 8012378:	08012401 	.word	0x08012401
 801237c:	0801233d 	.word	0x0801233d
 8012380:	0801241d 	.word	0x0801241d
 8012384:	0801233d 	.word	0x0801233d
 8012388:	0801242f 	.word	0x0801242f
 801238c:	08012467 	.word	0x08012467
 8012390:	0801233d 	.word	0x0801233d
 8012394:	0801248b 	.word	0x0801248b
 8012398:	0801239d 	.word	0x0801239d
  cfgidx = (uint8_t)(req->wValue);
 801239c:	7889      	ldrb	r1, [r1, #2]
 801239e:	4eb2      	ldr	r6, [pc, #712]	; (8012668 <USBD_StdDevReq+0x344>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80123a0:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80123a2:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80123a4:	f200 8142 	bhi.w	801262c <USBD_StdDevReq+0x308>
  switch (pdev->dev_state)
 80123a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80123ac:	2b02      	cmp	r3, #2
 80123ae:	f000 812b 	beq.w	8012608 <USBD_StdDevReq+0x2e4>
 80123b2:	2b03      	cmp	r3, #3
 80123b4:	f000 8105 	beq.w	80125c2 <USBD_StdDevReq+0x29e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80123b8:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 80123ba:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80123bc:	f00e fef6 	bl	80211ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80123c0:	2100      	movs	r1, #0
 80123c2:	4628      	mov	r0, r5
 80123c4:	f00e fef2 	bl	80211ac <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80123c8:	7831      	ldrb	r1, [r6, #0]
 80123ca:	4628      	mov	r0, r5
 80123cc:	f7ff fe86 	bl	80120dc <USBD_ClrClassConfig>
    break;
 80123d0:	e7bd      	b.n	801234e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80123d2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80123d6:	3a01      	subs	r2, #1
 80123d8:	2a02      	cmp	r2, #2
 80123da:	d86c      	bhi.n	80124b6 <USBD_StdDevReq+0x192>
    if (req->wLength != 0x2U)
 80123dc:	88ca      	ldrh	r2, [r1, #6]
 80123de:	2a02      	cmp	r2, #2
 80123e0:	d169      	bne.n	80124b6 <USBD_StdDevReq+0x192>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80123e2:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 80123e4:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80123e8:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 80123ea:	b10a      	cbz	r2, 80123f0 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80123ec:	2203      	movs	r2, #3
 80123ee:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80123f0:	2202      	movs	r2, #2
 80123f2:	f105 010c 	add.w	r1, r5, #12
 80123f6:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 80123f8:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80123fa:	f000 fa57 	bl	80128ac <USBD_CtlSendData>
    break;
 80123fe:	e7a6      	b.n	801234e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8012400:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012404:	3b01      	subs	r3, #1
 8012406:	2b02      	cmp	r3, #2
 8012408:	d855      	bhi.n	80124b6 <USBD_StdDevReq+0x192>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801240a:	884b      	ldrh	r3, [r1, #2]
 801240c:	2b01      	cmp	r3, #1
 801240e:	d19e      	bne.n	801234e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8012410:	2300      	movs	r3, #0
 8012412:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012416:	f000 fa79 	bl	801290c <USBD_CtlSendStatus>
 801241a:	e798      	b.n	801234e <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801241c:	884b      	ldrh	r3, [r1, #2]
 801241e:	2b01      	cmp	r3, #1
 8012420:	d195      	bne.n	801234e <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8012422:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012426:	4628      	mov	r0, r5
 8012428:	f000 fa70 	bl	801290c <USBD_CtlSendStatus>
 801242c:	e78f      	b.n	801234e <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801242e:	888b      	ldrh	r3, [r1, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d140      	bne.n	80124b6 <USBD_StdDevReq+0x192>
 8012434:	88cb      	ldrh	r3, [r1, #6]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d13d      	bne.n	80124b6 <USBD_StdDevReq+0x192>
 801243a:	884e      	ldrh	r6, [r1, #2]
 801243c:	2e7f      	cmp	r6, #127	; 0x7f
 801243e:	d83a      	bhi.n	80124b6 <USBD_StdDevReq+0x192>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012440:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012444:	2b03      	cmp	r3, #3
 8012446:	d036      	beq.n	80124b6 <USBD_StdDevReq+0x192>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012448:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 801244a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801244e:	f00e fedd 	bl	802120c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012452:	4628      	mov	r0, r5
 8012454:	f000 fa5a 	bl	801290c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8012458:	2e00      	cmp	r6, #0
 801245a:	f040 80d1 	bne.w	8012600 <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_DEFAULT;
 801245e:	2301      	movs	r3, #1
 8012460:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8012464:	e773      	b.n	801234e <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 8012466:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8012468:	2100      	movs	r1, #0
 801246a:	0a13      	lsrs	r3, r2, #8
 801246c:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8012470:	3b01      	subs	r3, #1
 8012472:	2b0e      	cmp	r3, #14
 8012474:	d81f      	bhi.n	80124b6 <USBD_StdDevReq+0x192>
 8012476:	e8df f003 	tbb	[pc, r3]
 801247a:	6b77      	.short	0x6b77
 801247c:	4f1e1e59 	.word	0x4f1e1e59
 8012480:	1e1e1e43 	.word	0x1e1e1e43
 8012484:	1e1e1e1e 	.word	0x1e1e1e1e
 8012488:	29          	.byte	0x29
 8012489:	00          	.byte	0x00
  if (req->wLength != 1U)
 801248a:	88ca      	ldrh	r2, [r1, #6]
 801248c:	2a01      	cmp	r2, #1
 801248e:	d112      	bne.n	80124b6 <USBD_StdDevReq+0x192>
    switch (pdev->dev_state)
 8012490:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012494:	2b02      	cmp	r3, #2
 8012496:	f200 808d 	bhi.w	80125b4 <USBD_StdDevReq+0x290>
 801249a:	2b00      	cmp	r3, #0
 801249c:	f43f af4e 	beq.w	801233c <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 80124a0:	2300      	movs	r3, #0
 80124a2:	4601      	mov	r1, r0
 80124a4:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80124a8:	f000 fa00 	bl	80128ac <USBD_CtlSendData>
      break;
 80124ac:	e74f      	b.n	801234e <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80124ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	b97b      	cbnz	r3, 80124d6 <USBD_StdDevReq+0x1b2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80124b6:	2180      	movs	r1, #128	; 0x80
 80124b8:	4628      	mov	r0, r5
 80124ba:	f00e fe77 	bl	80211ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80124be:	4628      	mov	r0, r5
 80124c0:	2100      	movs	r1, #0
 80124c2:	f00e fe73 	bl	80211ac <USBD_LL_StallEP>
}
 80124c6:	4620      	mov	r0, r4
 80124c8:	b002      	add	sp, #8
 80124ca:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80124cc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80124d0:	69db      	ldr	r3, [r3, #28]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d0ef      	beq.n	80124b6 <USBD_StdDevReq+0x192>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80124d6:	f10d 0106 	add.w	r1, sp, #6
 80124da:	7c28      	ldrb	r0, [r5, #16]
 80124dc:	4798      	blx	r3
    if (req->wLength != 0U)
 80124de:	88f2      	ldrh	r2, [r6, #6]
 80124e0:	2a00      	cmp	r2, #0
 80124e2:	d0a0      	beq.n	8012426 <USBD_StdDevReq+0x102>
      if (len != 0U)
 80124e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d0e4      	beq.n	80124b6 <USBD_StdDevReq+0x192>
        len = MIN(len, req->wLength);
 80124ec:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80124ee:	4601      	mov	r1, r0
 80124f0:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 80124f2:	bf28      	it	cs
 80124f4:	461a      	movcs	r2, r3
 80124f6:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80124fa:	f000 f9d7 	bl	80128ac <USBD_CtlSendData>
 80124fe:	e726      	b.n	801234e <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012500:	7c03      	ldrb	r3, [r0, #16]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d1d7      	bne.n	80124b6 <USBD_StdDevReq+0x192>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012506:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801250a:	f10d 0006 	add.w	r0, sp, #6
 801250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012510:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012512:	2307      	movs	r3, #7
 8012514:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8012516:	e7e2      	b.n	80124de <USBD_StdDevReq+0x1ba>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012518:	7c03      	ldrb	r3, [r0, #16]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d1cb      	bne.n	80124b6 <USBD_StdDevReq+0x192>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801251e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012522:	f10d 0006 	add.w	r0, sp, #6
 8012526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012528:	4798      	blx	r3
  if (err != 0U)
 801252a:	e7d8      	b.n	80124de <USBD_StdDevReq+0x1ba>
    switch ((uint8_t)(req->wValue))
 801252c:	b2d2      	uxtb	r2, r2
 801252e:	2a05      	cmp	r2, #5
 8012530:	d8c1      	bhi.n	80124b6 <USBD_StdDevReq+0x192>
 8012532:	a301      	add	r3, pc, #4	; (adr r3, 8012538 <USBD_StdDevReq+0x214>)
 8012534:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8012538:	080124af 	.word	0x080124af
 801253c:	080125a9 	.word	0x080125a9
 8012540:	0801259d 	.word	0x0801259d
 8012544:	08012591 	.word	0x08012591
 8012548:	08012585 	.word	0x08012585
 801254c:	08012579 	.word	0x08012579
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012550:	7c03      	ldrb	r3, [r0, #16]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d17e      	bne.n	8012654 <USBD_StdDevReq+0x330>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012556:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801255a:	f10d 0006 	add.w	r0, sp, #6
 801255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012560:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012562:	2302      	movs	r3, #2
 8012564:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8012566:	e7ba      	b.n	80124de <USBD_StdDevReq+0x1ba>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012568:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801256c:	f10d 0106 	add.w	r1, sp, #6
 8012570:	7c00      	ldrb	r0, [r0, #16]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	4798      	blx	r3
  if (err != 0U)
 8012576:	e7b2      	b.n	80124de <USBD_StdDevReq+0x1ba>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012578:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801257c:	699b      	ldr	r3, [r3, #24]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d1a9      	bne.n	80124d6 <USBD_StdDevReq+0x1b2>
 8012582:	e798      	b.n	80124b6 <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012584:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8012588:	695b      	ldr	r3, [r3, #20]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d1a3      	bne.n	80124d6 <USBD_StdDevReq+0x1b2>
 801258e:	e792      	b.n	80124b6 <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012590:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d19d      	bne.n	80124d6 <USBD_StdDevReq+0x1b2>
 801259a:	e78c      	b.n	80124b6 <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801259c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d197      	bne.n	80124d6 <USBD_StdDevReq+0x1b2>
 80125a6:	e786      	b.n	80124b6 <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80125a8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80125ac:	689b      	ldr	r3, [r3, #8]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d191      	bne.n	80124d6 <USBD_StdDevReq+0x1b2>
 80125b2:	e780      	b.n	80124b6 <USBD_StdDevReq+0x192>
    switch (pdev->dev_state)
 80125b4:	2b03      	cmp	r3, #3
 80125b6:	f47f aec1 	bne.w	801233c <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80125ba:	1d01      	adds	r1, r0, #4
 80125bc:	f000 f976 	bl	80128ac <USBD_CtlSendData>
      break;
 80125c0:	e6c5      	b.n	801234e <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 80125c2:	2900      	cmp	r1, #0
 80125c4:	d03b      	beq.n	801263e <USBD_StdDevReq+0x31a>
    else if (cfgidx != pdev->dev_config)
 80125c6:	6841      	ldr	r1, [r0, #4]
 80125c8:	2901      	cmp	r1, #1
 80125ca:	f43f af2c 	beq.w	8012426 <USBD_StdDevReq+0x102>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80125ce:	b2c9      	uxtb	r1, r1
 80125d0:	f7ff fd84 	bl	80120dc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80125d4:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80125d6:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 80125d8:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80125da:	f7ff fd77 	bl	80120cc <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80125de:	4606      	mov	r6, r0
 80125e0:	2800      	cmp	r0, #0
 80125e2:	f43f af20 	beq.w	8012426 <USBD_StdDevReq+0x102>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80125e6:	2180      	movs	r1, #128	; 0x80
 80125e8:	4628      	mov	r0, r5
 80125ea:	f00e fddf 	bl	80211ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80125ee:	2100      	movs	r1, #0
 80125f0:	4628      	mov	r0, r5
 80125f2:	4634      	mov	r4, r6
 80125f4:	f00e fdda 	bl	80211ac <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80125f8:	7929      	ldrb	r1, [r5, #4]
 80125fa:	4628      	mov	r0, r5
 80125fc:	f7ff fd6e 	bl	80120dc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012600:	2302      	movs	r3, #2
 8012602:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8012606:	e6a2      	b.n	801234e <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8012608:	2900      	cmp	r1, #0
 801260a:	f43f af0c 	beq.w	8012426 <USBD_StdDevReq+0x102>
      pdev->dev_config = cfgidx;
 801260e:	2101      	movs	r1, #1
 8012610:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012612:	f7ff fd5b 	bl	80120cc <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8012616:	4604      	mov	r4, r0
 8012618:	2800      	cmp	r0, #0
 801261a:	f47f af4c 	bne.w	80124b6 <USBD_StdDevReq+0x192>
        (void)USBD_CtlSendStatus(pdev);
 801261e:	4628      	mov	r0, r5
 8012620:	f000 f974 	bl	801290c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012624:	2303      	movs	r3, #3
 8012626:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 801262a:	e690      	b.n	801234e <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801262c:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 801262e:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012630:	f00e fdbc 	bl	80211ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012634:	4628      	mov	r0, r5
 8012636:	2100      	movs	r1, #0
 8012638:	f00e fdb8 	bl	80211ac <USBD_LL_StallEP>
    return USBD_FAIL;
 801263c:	e687      	b.n	801234e <USBD_StdDevReq+0x2a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801263e:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8012640:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012642:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012644:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012648:	f7ff fd48 	bl	80120dc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801264c:	4628      	mov	r0, r5
 801264e:	f000 f95d 	bl	801290c <USBD_CtlSendStatus>
 8012652:	e67c      	b.n	801234e <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012654:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012658:	f10d 0006 	add.w	r0, sp, #6
 801265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801265e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012660:	2302      	movs	r3, #2
 8012662:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8012664:	e73b      	b.n	80124de <USBD_StdDevReq+0x1ba>
 8012666:	bf00      	nop
 8012668:	20001cec 	.word	0x20001cec

0801266c <USBD_StdItfReq>:
{
 801266c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801266e:	780b      	ldrb	r3, [r1, #0]
{
 8012670:	460d      	mov	r5, r1
 8012672:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012674:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8012678:	2a40      	cmp	r2, #64	; 0x40
 801267a:	d00b      	beq.n	8012694 <USBD_StdItfReq+0x28>
 801267c:	065b      	lsls	r3, r3, #25
 801267e:	d509      	bpl.n	8012694 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8012680:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012682:	2180      	movs	r1, #128	; 0x80
 8012684:	f00e fd92 	bl	80211ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012688:	4620      	mov	r0, r4
 801268a:	4629      	mov	r1, r5
 801268c:	f00e fd8e 	bl	80211ac <USBD_LL_StallEP>
}
 8012690:	4628      	mov	r0, r5
 8012692:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8012694:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8012698:	3b01      	subs	r3, #1
 801269a:	2b02      	cmp	r3, #2
 801269c:	d812      	bhi.n	80126c4 <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801269e:	792b      	ldrb	r3, [r5, #4]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d80f      	bhi.n	80126c4 <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80126a4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80126a8:	4629      	mov	r1, r5
 80126aa:	4620      	mov	r0, r4
 80126ac:	689b      	ldr	r3, [r3, #8]
 80126ae:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80126b0:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80126b2:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d1eb      	bne.n	8012690 <USBD_StdItfReq+0x24>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	d1e9      	bne.n	8012690 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 80126bc:	4620      	mov	r0, r4
 80126be:	f000 f925 	bl	801290c <USBD_CtlSendStatus>
 80126c2:	e7e5      	b.n	8012690 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80126c4:	2180      	movs	r1, #128	; 0x80
 80126c6:	4620      	mov	r0, r4
 80126c8:	f00e fd70 	bl	80211ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80126cc:	2100      	movs	r1, #0
 80126ce:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80126d0:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80126d2:	f00e fd6b 	bl	80211ac <USBD_LL_StallEP>
}
 80126d6:	4628      	mov	r0, r5
 80126d8:	bd38      	pop	{r3, r4, r5, pc}
 80126da:	bf00      	nop

080126dc <USBD_StdEPReq>:
{
 80126dc:	b570      	push	{r4, r5, r6, lr}
 80126de:	780b      	ldrb	r3, [r1, #0]
 80126e0:	460d      	mov	r5, r1
 80126e2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80126e8:	2b20      	cmp	r3, #32
 80126ea:	d00c      	beq.n	8012706 <USBD_StdEPReq+0x2a>
 80126ec:	2b40      	cmp	r3, #64	; 0x40
 80126ee:	d00a      	beq.n	8012706 <USBD_StdEPReq+0x2a>
 80126f0:	b18b      	cbz	r3, 8012716 <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80126f2:	2180      	movs	r1, #128	; 0x80
 80126f4:	4620      	mov	r0, r4
 80126f6:	f00e fd59 	bl	80211ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80126fa:	4620      	mov	r0, r4
 80126fc:	2100      	movs	r1, #0
 80126fe:	f00e fd55 	bl	80211ac <USBD_LL_StallEP>
}
 8012702:	2000      	movs	r0, #0
 8012704:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012706:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 801270a:	4629      	mov	r1, r5
 801270c:	4620      	mov	r0, r4
 801270e:	689b      	ldr	r3, [r3, #8]
}
 8012710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012714:	4718      	bx	r3
    switch (req->bRequest)
 8012716:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8012718:	888a      	ldrh	r2, [r1, #4]
 801271a:	2b01      	cmp	r3, #1
 801271c:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 801271e:	d036      	beq.n	801278e <USBD_StdEPReq+0xb2>
 8012720:	2b03      	cmp	r3, #3
 8012722:	d023      	beq.n	801276c <USBD_StdEPReq+0x90>
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1e4      	bne.n	80126f2 <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8012728:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801272c:	2b02      	cmp	r3, #2
 801272e:	d04c      	beq.n	80127ca <USBD_StdEPReq+0xee>
 8012730:	2b03      	cmp	r3, #3
 8012732:	d1de      	bne.n	80126f2 <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012734:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8012738:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801273a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801273e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8012742:	d453      	bmi.n	80127ec <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012744:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8012748:	2b00      	cmp	r3, #0
 801274a:	d0d2      	beq.n	80126f2 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801274c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8012750:	2514      	movs	r5, #20
 8012752:	fb05 0503 	mla	r5, r5, r3, r0
 8012756:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801275a:	2b00      	cmp	r3, #0
 801275c:	d152      	bne.n	8012804 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 801275e:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012760:	4629      	mov	r1, r5
 8012762:	4620      	mov	r0, r4
 8012764:	2202      	movs	r2, #2
 8012766:	f000 f8a1 	bl	80128ac <USBD_CtlSendData>
          break;
 801276a:	e7ca      	b.n	8012702 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 801276c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012770:	2b02      	cmp	r3, #2
 8012772:	d021      	beq.n	80127b8 <USBD_StdEPReq+0xdc>
 8012774:	2b03      	cmp	r3, #3
 8012776:	d1bc      	bne.n	80126f2 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012778:	886b      	ldrh	r3, [r5, #2]
 801277a:	b923      	cbnz	r3, 8012786 <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801277c:	064a      	lsls	r2, r1, #25
 801277e:	d002      	beq.n	8012786 <USBD_StdEPReq+0xaa>
 8012780:	88eb      	ldrh	r3, [r5, #6]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d049      	beq.n	801281a <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 8012786:	4620      	mov	r0, r4
 8012788:	f000 f8c0 	bl	801290c <USBD_CtlSendStatus>
        break;
 801278c:	e7b9      	b.n	8012702 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 801278e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012792:	2b02      	cmp	r3, #2
 8012794:	d010      	beq.n	80127b8 <USBD_StdEPReq+0xdc>
 8012796:	2b03      	cmp	r3, #3
 8012798:	d1ab      	bne.n	80126f2 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 801279a:	886b      	ldrh	r3, [r5, #2]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d1b0      	bne.n	8012702 <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 80127a0:	064e      	lsls	r6, r1, #25
 80127a2:	d135      	bne.n	8012810 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 80127a4:	4620      	mov	r0, r4
 80127a6:	f000 f8b1 	bl	801290c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80127aa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80127ae:	4629      	mov	r1, r5
 80127b0:	4620      	mov	r0, r4
 80127b2:	689b      	ldr	r3, [r3, #8]
 80127b4:	4798      	blx	r3
 80127b6:	e7a4      	b.n	8012702 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80127b8:	064b      	lsls	r3, r1, #25
 80127ba:	d09a      	beq.n	80126f2 <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80127bc:	f00e fcf6 	bl	80211ac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80127c0:	4620      	mov	r0, r4
 80127c2:	2180      	movs	r1, #128	; 0x80
 80127c4:	f00e fcf2 	bl	80211ac <USBD_LL_StallEP>
 80127c8:	e79b      	b.n	8012702 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80127ca:	0648      	lsls	r0, r1, #25
 80127cc:	d191      	bne.n	80126f2 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80127ce:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 80127d0:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80127d4:	4620      	mov	r0, r4
 80127d6:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80127da:	bf4c      	ite	mi
 80127dc:	f104 0114 	addmi.w	r1, r4, #20
 80127e0:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 80127e4:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80127e6:	f000 f861 	bl	80128ac <USBD_CtlSendData>
        break;
 80127ea:	e78a      	b.n	8012702 <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80127ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	f43f af7f 	beq.w	80126f2 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80127f4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80127f8:	1c5d      	adds	r5, r3, #1
 80127fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80127fe:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012802:	e7aa      	b.n	801275a <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012804:	4620      	mov	r0, r4
 8012806:	f00e fced 	bl	80211e4 <USBD_LL_IsStallEP>
 801280a:	b120      	cbz	r0, 8012816 <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 801280c:	2301      	movs	r3, #1
 801280e:	e7a6      	b.n	801275e <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012810:	f00e fcda 	bl	80211c8 <USBD_LL_ClearStallEP>
 8012814:	e7c6      	b.n	80127a4 <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 8012816:	6028      	str	r0, [r5, #0]
 8012818:	e7a2      	b.n	8012760 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801281a:	f00e fcc7 	bl	80211ac <USBD_LL_StallEP>
 801281e:	e7b2      	b.n	8012786 <USBD_StdEPReq+0xaa>

08012820 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8012820:	780b      	ldrb	r3, [r1, #0]
 8012822:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8012824:	784b      	ldrb	r3, [r1, #1]
 8012826:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012828:	78ca      	ldrb	r2, [r1, #3]
 801282a:	788b      	ldrb	r3, [r1, #2]
 801282c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8012830:	8043      	strh	r3, [r0, #2]
 8012832:	794a      	ldrb	r2, [r1, #5]
 8012834:	790b      	ldrb	r3, [r1, #4]
 8012836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 801283a:	8083      	strh	r3, [r0, #4]
 801283c:	79ca      	ldrb	r2, [r1, #7]
 801283e:	798b      	ldrb	r3, [r1, #6]
 8012840:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8012844:	80c3      	strh	r3, [r0, #6]
}
 8012846:	4770      	bx	lr

08012848 <USBD_CtlError>:
{
 8012848:	b510      	push	{r4, lr}
 801284a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801284c:	2180      	movs	r1, #128	; 0x80
 801284e:	f00e fcad 	bl	80211ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012852:	2100      	movs	r1, #0
 8012854:	4620      	mov	r0, r4
}
 8012856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 801285a:	f00e bca7 	b.w	80211ac <USBD_LL_StallEP>
 801285e:	bf00      	nop

08012860 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8012860:	b308      	cbz	r0, 80128a6 <USBD_GetString+0x46>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8012862:	7803      	ldrb	r3, [r0, #0]
{
 8012864:	b470      	push	{r4, r5, r6}
  while (*pbuff != (uint8_t)'\0')
 8012866:	b1fb      	cbz	r3, 80128a8 <USBD_GetString+0x48>
 8012868:	4604      	mov	r4, r0
 801286a:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 801286e:	19a3      	adds	r3, r4, r6
  while (*pbuff != (uint8_t)'\0')
 8012870:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8012874:	b2db      	uxtb	r3, r3
 8012876:	2d00      	cmp	r5, #0
 8012878:	d1f9      	bne.n	801286e <USBD_GetString+0xe>
 801287a:	3301      	adds	r3, #1
 801287c:	005b      	lsls	r3, r3, #1
  unicode[idx] = USB_DESC_TYPE_STRING;
 801287e:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012880:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8012882:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012884:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8012886:	7804      	ldrb	r4, [r0, #0]
 8012888:	b15c      	cbz	r4, 80128a2 <USBD_GetString+0x42>
  idx++;
 801288a:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 801288c:	2500      	movs	r5, #0
    idx++;
 801288e:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8012890:	54cc      	strb	r4, [r1, r3]
    idx++;
 8012892:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8012894:	b2d2      	uxtb	r2, r2
    idx++;
 8012896:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8012898:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 801289a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801289e:	2c00      	cmp	r4, #0
 80128a0:	d1f5      	bne.n	801288e <USBD_GetString+0x2e>
}
 80128a2:	bc70      	pop	{r4, r5, r6}
 80128a4:	4770      	bx	lr
 80128a6:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80128a8:	2302      	movs	r3, #2
 80128aa:	e7e8      	b.n	801287e <USBD_GetString+0x1e>

080128ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80128ac:	b538      	push	{r3, r4, r5, lr}
 80128ae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80128b0:	2502      	movs	r5, #2
{
 80128b2:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80128b4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80128b6:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 80128ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80128be:	f00e fcb3 	bl	8021228 <USBD_LL_Transmit>

  return USBD_OK;
}
 80128c2:	2000      	movs	r0, #0
 80128c4:	bd38      	pop	{r3, r4, r5, pc}
 80128c6:	bf00      	nop

080128c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80128c8:	b510      	push	{r4, lr}
 80128ca:	460c      	mov	r4, r1
 80128cc:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80128ce:	2100      	movs	r1, #0
 80128d0:	4622      	mov	r2, r4
 80128d2:	f00e fca9 	bl	8021228 <USBD_LL_Transmit>

  return USBD_OK;
}
 80128d6:	2000      	movs	r0, #0
 80128d8:	bd10      	pop	{r4, pc}
 80128da:	bf00      	nop

080128dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80128dc:	b538      	push	{r3, r4, r5, lr}
 80128de:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80128e0:	2503      	movs	r5, #3
{
 80128e2:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128e4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80128e6:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 80128ea:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128ee:	f00e fca9 	bl	8021244 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80128f2:	2000      	movs	r0, #0
 80128f4:	bd38      	pop	{r3, r4, r5, pc}
 80128f6:	bf00      	nop

080128f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80128f8:	b510      	push	{r4, lr}
 80128fa:	460c      	mov	r4, r1
 80128fc:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128fe:	2100      	movs	r1, #0
 8012900:	4622      	mov	r2, r4
 8012902:	f00e fc9f 	bl	8021244 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8012906:	2000      	movs	r0, #0
 8012908:	bd10      	pop	{r4, pc}
 801290a:	bf00      	nop

0801290c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801290c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801290e:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012910:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012912:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012916:	4619      	mov	r1, r3
 8012918:	461a      	mov	r2, r3
 801291a:	f00e fc85 	bl	8021228 <USBD_LL_Transmit>

  return USBD_OK;
}
 801291e:	2000      	movs	r0, #0
 8012920:	bd08      	pop	{r3, pc}
 8012922:	bf00      	nop

08012924 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012924:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012926:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012928:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801292a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801292e:	4619      	mov	r1, r3
 8012930:	461a      	mov	r2, r3
 8012932:	f00e fc87 	bl	8021244 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8012936:	2000      	movs	r0, #0
 8012938:	bd08      	pop	{r3, pc}
 801293a:	bf00      	nop

0801293c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801293c:	4b10      	ldr	r3, [pc, #64]	; (8012980 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801293e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(disk.nbr < _VOLUMES)
 8012940:	7a5c      	ldrb	r4, [r3, #9]
 8012942:	b9dc      	cbnz	r4, 801297c <FATFS_LinkDriver+0x40>
    disk.is_initialized[disk.nbr] = 0;
 8012944:	f893 e009 	ldrb.w	lr, [r3, #9]
 8012948:	4602      	mov	r2, r0
    disk.drv[disk.nbr] = drv;
 801294a:	7a5e      	ldrb	r6, [r3, #9]
 801294c:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    disk.lun[disk.nbr] = lun;
 8012950:	7a5d      	ldrb	r5, [r3, #9]
    path[1] = ':';
 8012952:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    DiskNum = disk.nbr++;
 8012956:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8012958:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    path[2] = '/';
 801295c:	272f      	movs	r7, #47	; 0x2f
    disk.lun[disk.nbr] = lun;
 801295e:	441d      	add	r5, r3
    disk.drv[disk.nbr] = drv;
 8012960:	6072      	str	r2, [r6, #4]
    DiskNum = disk.nbr++;
 8012962:	1c62      	adds	r2, r4, #1
    path[0] = DiskNum + '0';
 8012964:	3430      	adds	r4, #48	; 0x30
    disk.lun[disk.nbr] = lun;
 8012966:	7228      	strb	r0, [r5, #8]
    DiskNum = disk.nbr++;
 8012968:	b2d2      	uxtb	r2, r2
    disk.is_initialized[disk.nbr] = 0;
 801296a:	f803 000e 	strb.w	r0, [r3, lr]
    DiskNum = disk.nbr++;
 801296e:	725a      	strb	r2, [r3, #9]
    path[0] = DiskNum + '0';
 8012970:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 8012972:	70c8      	strb	r0, [r1, #3]
    path[1] = ':';
 8012974:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8012978:	708f      	strb	r7, [r1, #2]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 801297a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t ret = 1;
 801297c:	2001      	movs	r0, #1
}
 801297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012980:	20001cf0 	.word	0x20001cf0

08012984 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012984:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8012986:	f001 f94f 	bl	8013c28 <vTaskStartScheduler>
  
  return osOK;
}
 801298a:	2000      	movs	r0, #0
 801298c:	bd08      	pop	{r3, pc}
 801298e:	bf00      	nop

08012990 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012990:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8012994:	b10b      	cbz	r3, 801299a <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8012996:	f001 b99d 	b.w	8013cd4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 801299a:	f001 b995 	b.w	8013cc8 <xTaskGetTickCount>
 801299e:	bf00      	nop

080129a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80129a0:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80129a2:	6944      	ldr	r4, [r0, #20]
{
 80129a4:	b086      	sub	sp, #24
 80129a6:	4602      	mov	r2, r0
 80129a8:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80129aa:	b18c      	cbz	r4, 80129d0 <osThreadCreate+0x30>
 80129ac:	6986      	ldr	r6, [r0, #24]
 80129ae:	b17e      	cbz	r6, 80129d0 <osThreadCreate+0x30>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80129b0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80129b4:	6912      	ldr	r2, [r2, #16]
  if (priority != osPriorityError) {
 80129b6:	2d84      	cmp	r5, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80129b8:	bf14      	ite	ne
 80129ba:	3503      	addne	r5, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80129bc:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80129be:	e9d0 1000 	ldrd	r1, r0, [r0]
 80129c2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80129c6:	9500      	str	r5, [sp, #0]
 80129c8:	f001 f8bc 	bl	8013b44 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80129cc:	b006      	add	sp, #24
 80129ce:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80129d0:	f9b2 4008 	ldrsh.w	r4, [r2, #8]
 80129d4:	ad05      	add	r5, sp, #20
  if (priority != osPriorityError) {
 80129d6:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80129d8:	bf14      	ite	ne
 80129da:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80129dc:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80129de:	e9d2 1000 	ldrd	r1, r0, [r2]
 80129e2:	8a12      	ldrh	r2, [r2, #16]
 80129e4:	e9cd 4500 	strd	r4, r5, [sp]
 80129e8:	f001 f8ea 	bl	8013bc0 <xTaskCreate>
 80129ec:	2801      	cmp	r0, #1
 80129ee:	bf0c      	ite	eq
 80129f0:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 80129f2:	2000      	movne	r0, #0
}
 80129f4:	b006      	add	sp, #24
 80129f6:	bd70      	pop	{r4, r5, r6, pc}

080129f8 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80129f8:	2801      	cmp	r0, #1
{
 80129fa:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80129fc:	bf38      	it	cc
 80129fe:	2001      	movcc	r0, #1
 8012a00:	f001 fab0 	bl	8013f64 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012a04:	2000      	movs	r0, #0
 8012a06:	bd08      	pop	{r3, pc}

08012a08 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8012a08:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
 8012a0a:	e9d0 0200 	ldrd	r0, r2, [r0]
{
 8012a0e:	b500      	push	{lr}
 8012a10:	b083      	sub	sp, #12
  if(timer_def->controlblock != NULL) {
 8012a12:	b16a      	cbz	r2, 8012a30 <osTimerCreate+0x28>
    return xTimerCreateStatic((const char *)"",
 8012a14:	9201      	str	r2, [sp, #4]
 8012a16:	f1a1 0201 	sub.w	r2, r1, #1
 8012a1a:	2101      	movs	r1, #1
 8012a1c:	9000      	str	r0, [sp, #0]
 8012a1e:	fab2 f282 	clz	r2, r2
 8012a22:	480a      	ldr	r0, [pc, #40]	; (8012a4c <osTimerCreate+0x44>)
 8012a24:	0952      	lsrs	r2, r2, #5
 8012a26:	f001 feb1 	bl	801478c <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8012a2a:	b003      	add	sp, #12
 8012a2c:	f85d fb04 	ldr.w	pc, [sp], #4
    return xTimerCreate((const char *)"",
 8012a30:	f1a1 0201 	sub.w	r2, r1, #1
 8012a34:	2101      	movs	r1, #1
 8012a36:	9000      	str	r0, [sp, #0]
 8012a38:	fab2 f282 	clz	r2, r2
 8012a3c:	4803      	ldr	r0, [pc, #12]	; (8012a4c <osTimerCreate+0x44>)
 8012a3e:	0952      	lsrs	r2, r2, #5
 8012a40:	f001 fe86 	bl	8014750 <xTimerCreate>
}
 8012a44:	b003      	add	sp, #12
 8012a46:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a4a:	bf00      	nop
 8012a4c:	08026944 	.word	0x08026944

08012a50 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012a50:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012a52:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8012a54:	b109      	cbz	r1, 8012a5a <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012a56:	f000 bbb9 	b.w	80131cc <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012a5a:	f000 bbcf 	b.w	80131fc <xQueueCreateMutex>
 8012a5e:	bf00      	nop

08012a60 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8012a60:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012a62:	2400      	movs	r4, #0
{
 8012a64:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8012a66:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8012a68:	b300      	cbz	r0, 8012aac <osMutexWait+0x4c>
 8012a6a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012a6e:	b933      	cbnz	r3, 8012a7e <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012a70:	f000 fd62 	bl	8013538 <xQueueSemaphoreTake>
 8012a74:	2801      	cmp	r0, #1
 8012a76:	d116      	bne.n	8012aa6 <osMutexWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 8012a78:	2000      	movs	r0, #0
}
 8012a7a:	b002      	add	sp, #8
 8012a7c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012a7e:	aa01      	add	r2, sp, #4
 8012a80:	4621      	mov	r1, r4
 8012a82:	f000 fe3b 	bl	80136fc <xQueueReceiveFromISR>
 8012a86:	2801      	cmp	r0, #1
 8012a88:	d10d      	bne.n	8012aa6 <osMutexWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 8012a8a:	9b01      	ldr	r3, [sp, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d0f3      	beq.n	8012a78 <osMutexWait+0x18>
 8012a90:	4b08      	ldr	r3, [pc, #32]	; (8012ab4 <osMutexWait+0x54>)
 8012a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a96:	601a      	str	r2, [r3, #0]
 8012a98:	f3bf 8f4f 	dsb	sy
 8012a9c:	f3bf 8f6f 	isb	sy
  return osOK;
 8012aa0:	4620      	mov	r0, r4
}
 8012aa2:	b002      	add	sp, #8
 8012aa4:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8012aa6:	20ff      	movs	r0, #255	; 0xff
}
 8012aa8:	b002      	add	sp, #8
 8012aaa:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8012aac:	2080      	movs	r0, #128	; 0x80
}
 8012aae:	b002      	add	sp, #8
 8012ab0:	bd10      	pop	{r4, pc}
 8012ab2:	bf00      	nop
 8012ab4:	e000ed04 	.word	0xe000ed04

08012ab8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8012ab8:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012aba:	2400      	movs	r4, #0
{
 8012abc:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 8012abe:	9401      	str	r4, [sp, #4]
 8012ac0:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8012ac4:	b18b      	cbz	r3, 8012aea <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012ac6:	a901      	add	r1, sp, #4
 8012ac8:	f000 fc1c 	bl	8013304 <xQueueGiveFromISR>
 8012acc:	2801      	cmp	r0, #1
 8012ace:	d112      	bne.n	8012af6 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012ad0:	9b01      	ldr	r3, [sp, #4]
 8012ad2:	b19b      	cbz	r3, 8012afc <osMutexRelease+0x44>
 8012ad4:	4b0b      	ldr	r3, [pc, #44]	; (8012b04 <osMutexRelease+0x4c>)
 8012ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ada:	601a      	str	r2, [r3, #0]
 8012adc:	f3bf 8f4f 	dsb	sy
 8012ae0:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8012ae4:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8012ae6:	b002      	add	sp, #8
 8012ae8:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012aea:	461a      	mov	r2, r3
 8012aec:	4619      	mov	r1, r3
 8012aee:	f000 fa9d 	bl	801302c <xQueueGenericSend>
 8012af2:	2801      	cmp	r0, #1
 8012af4:	d002      	beq.n	8012afc <osMutexRelease+0x44>
    result = osErrorOS;
 8012af6:	20ff      	movs	r0, #255	; 0xff
}
 8012af8:	b002      	add	sp, #8
 8012afa:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8012afc:	2000      	movs	r0, #0
}
 8012afe:	b002      	add	sp, #8
 8012b00:	bd10      	pop	{r4, pc}
 8012b02:	bf00      	nop
 8012b04:	e000ed04 	.word	0xe000ed04

08012b08 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012b08:	b510      	push	{r4, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012b0a:	6844      	ldr	r4, [r0, #4]
{ 
 8012b0c:	b082      	sub	sp, #8
 8012b0e:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8012b10:	b184      	cbz	r4, 8012b34 <osSemaphoreCreate+0x2c>
    if (count == 1) {
 8012b12:	2901      	cmp	r1, #1
 8012b14:	d003      	beq.n	8012b1e <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012b16:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012b18:	4620      	mov	r0, r4
 8012b1a:	b002      	add	sp, #8
 8012b1c:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012b1e:	2200      	movs	r2, #0
 8012b20:	2103      	movs	r1, #3
 8012b22:	4623      	mov	r3, r4
 8012b24:	9100      	str	r1, [sp, #0]
 8012b26:	4611      	mov	r1, r2
 8012b28:	f000 fa1c 	bl	8012f64 <xQueueGenericCreateStatic>
 8012b2c:	4604      	mov	r4, r0
}
 8012b2e:	4620      	mov	r0, r4
 8012b30:	b002      	add	sp, #8
 8012b32:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8012b34:	2901      	cmp	r1, #1
 8012b36:	d1ef      	bne.n	8012b18 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8012b38:	4621      	mov	r1, r4
 8012b3a:	2203      	movs	r2, #3
 8012b3c:	f000 fa68 	bl	8013010 <xQueueGenericCreate>
 8012b40:	4604      	mov	r4, r0
 8012b42:	2800      	cmp	r0, #0
 8012b44:	d0e8      	beq.n	8012b18 <osSemaphoreCreate+0x10>
 8012b46:	2300      	movs	r3, #0
 8012b48:	461a      	mov	r2, r3
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	f000 fa6e 	bl	801302c <xQueueGenericSend>
 8012b50:	e7e2      	b.n	8012b18 <osSemaphoreCreate+0x10>
 8012b52:	bf00      	nop

08012b54 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012b54:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012b56:	2400      	movs	r4, #0
{
 8012b58:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8012b5a:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8012b5c:	b300      	cbz	r0, 8012ba0 <osSemaphoreWait+0x4c>
 8012b5e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012b62:	b933      	cbnz	r3, 8012b72 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012b64:	f000 fce8 	bl	8013538 <xQueueSemaphoreTake>
 8012b68:	2801      	cmp	r0, #1
 8012b6a:	d116      	bne.n	8012b9a <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 8012b6c:	2000      	movs	r0, #0
}
 8012b6e:	b002      	add	sp, #8
 8012b70:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012b72:	aa01      	add	r2, sp, #4
 8012b74:	4621      	mov	r1, r4
 8012b76:	f000 fdc1 	bl	80136fc <xQueueReceiveFromISR>
 8012b7a:	2801      	cmp	r0, #1
 8012b7c:	d10d      	bne.n	8012b9a <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 8012b7e:	9b01      	ldr	r3, [sp, #4]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d0f3      	beq.n	8012b6c <osSemaphoreWait+0x18>
 8012b84:	4b08      	ldr	r3, [pc, #32]	; (8012ba8 <osSemaphoreWait+0x54>)
 8012b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b8a:	601a      	str	r2, [r3, #0]
 8012b8c:	f3bf 8f4f 	dsb	sy
 8012b90:	f3bf 8f6f 	isb	sy
  return osOK;
 8012b94:	4620      	mov	r0, r4
}
 8012b96:	b002      	add	sp, #8
 8012b98:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8012b9a:	20ff      	movs	r0, #255	; 0xff
}
 8012b9c:	b002      	add	sp, #8
 8012b9e:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8012ba0:	2080      	movs	r0, #128	; 0x80
}
 8012ba2:	b002      	add	sp, #8
 8012ba4:	bd10      	pop	{r4, pc}
 8012ba6:	bf00      	nop
 8012ba8:	e000ed04 	.word	0xe000ed04

08012bac <osSemaphoreRelease>:
 8012bac:	f7ff bf84 	b.w	8012ab8 <osMutexRelease>

08012bb0 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012bb0:	6882      	ldr	r2, [r0, #8]
 8012bb2:	b15a      	cbz	r2, 8012bcc <osMessageCreate+0x1c>
 8012bb4:	68c3      	ldr	r3, [r0, #12]
 8012bb6:	b14b      	cbz	r3, 8012bcc <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012bb8:	6841      	ldr	r1, [r0, #4]
{
 8012bba:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012bbc:	2400      	movs	r4, #0
{
 8012bbe:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012bc0:	9400      	str	r4, [sp, #0]
 8012bc2:	6800      	ldr	r0, [r0, #0]
 8012bc4:	f000 f9ce 	bl	8012f64 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012bc8:	b002      	add	sp, #8
 8012bca:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012bcc:	2200      	movs	r2, #0
 8012bce:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012bd2:	f000 ba1d 	b.w	8013010 <xQueueGenericCreate>
 8012bd6:	bf00      	nop

08012bd8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012bd8:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8012bda:	2400      	movs	r4, #0
{
 8012bdc:	b084      	sub	sp, #16
 8012bde:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012be0:	9403      	str	r4, [sp, #12]
 8012be2:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8012be6:	b15b      	cbz	r3, 8012c00 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012be8:	4623      	mov	r3, r4
 8012bea:	aa03      	add	r2, sp, #12
 8012bec:	a901      	add	r1, sp, #4
 8012bee:	f000 fb17 	bl	8013220 <xQueueGenericSendFromISR>
 8012bf2:	2801      	cmp	r0, #1
 8012bf4:	d10c      	bne.n	8012c10 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012bf6:	9b03      	ldr	r3, [sp, #12]
 8012bf8:	b96b      	cbnz	r3, 8012c16 <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8012bfa:	2000      	movs	r0, #0
}
 8012bfc:	b004      	add	sp, #16
 8012bfe:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012c00:	2a01      	cmp	r2, #1
 8012c02:	a901      	add	r1, sp, #4
 8012c04:	bf38      	it	cc
 8012c06:	2201      	movcc	r2, #1
 8012c08:	f000 fa10 	bl	801302c <xQueueGenericSend>
 8012c0c:	2801      	cmp	r0, #1
 8012c0e:	d0f4      	beq.n	8012bfa <osMessagePut+0x22>
      return osErrorOS;
 8012c10:	20ff      	movs	r0, #255	; 0xff
}
 8012c12:	b004      	add	sp, #16
 8012c14:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012c16:	4b05      	ldr	r3, [pc, #20]	; (8012c2c <osMessagePut+0x54>)
 8012c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c1c:	601a      	str	r2, [r3, #0]
 8012c1e:	f3bf 8f4f 	dsb	sy
 8012c22:	f3bf 8f6f 	isb	sy
  return osOK;
 8012c26:	4620      	mov	r0, r4
}
 8012c28:	b004      	add	sp, #16
 8012c2a:	bd10      	pop	{r4, pc}
 8012c2c:	e000ed04 	.word	0xe000ed04

08012c30 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012c30:	b530      	push	{r4, r5, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8012c32:	2300      	movs	r3, #0
{
 8012c34:	b085      	sub	sp, #20
 8012c36:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 8012c38:	e9cd 3102 	strd	r3, r1, [sp, #8]
  
  if (queue_id == NULL) {
 8012c3c:	b361      	cbz	r1, 8012c98 <osMessageGet+0x68>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8012c3e:	9300      	str	r3, [sp, #0]
 8012c40:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012c44:	b993      	cbnz	r3, 8012c6c <osMessageGet+0x3c>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012c46:	4608      	mov	r0, r1
 8012c48:	a902      	add	r1, sp, #8
 8012c4a:	4615      	mov	r5, r2
 8012c4c:	f000 fbb8 	bl	80133c0 <xQueueReceive>
 8012c50:	2801      	cmp	r0, #1
 8012c52:	d02b      	beq.n	8012cac <osMessageGet+0x7c>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012c54:	2d00      	cmp	r5, #0
 8012c56:	bf18      	it	ne
 8012c58:	2540      	movne	r5, #64	; 0x40
 8012c5a:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 8012c5c:	ab04      	add	r3, sp, #16
 8012c5e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012c66:	4620      	mov	r0, r4
 8012c68:	b005      	add	sp, #20
 8012c6a:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012c6c:	466a      	mov	r2, sp
 8012c6e:	4608      	mov	r0, r1
 8012c70:	a902      	add	r1, sp, #8
 8012c72:	f000 fd43 	bl	80136fc <xQueueReceiveFromISR>
      event.status = osOK;
 8012c76:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 8012c78:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8012c7a:	bf0c      	ite	eq
 8012c7c:	2210      	moveq	r2, #16
 8012c7e:	2200      	movne	r2, #0
 8012c80:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d0ea      	beq.n	8012c5c <osMessageGet+0x2c>
 8012c86:	4b0b      	ldr	r3, [pc, #44]	; (8012cb4 <osMessageGet+0x84>)
 8012c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c8c:	601a      	str	r2, [r3, #0]
 8012c8e:	f3bf 8f4f 	dsb	sy
 8012c92:	f3bf 8f6f 	isb	sy
 8012c96:	e7e1      	b.n	8012c5c <osMessageGet+0x2c>
    event.status = osErrorParameter;
 8012c98:	2380      	movs	r3, #128	; 0x80
 8012c9a:	9301      	str	r3, [sp, #4]
    return event;
 8012c9c:	ab04      	add	r3, sp, #16
 8012c9e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012ca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	b005      	add	sp, #20
 8012caa:	bd30      	pop	{r4, r5, pc}
      event.status = osEventMessage;
 8012cac:	2310      	movs	r3, #16
 8012cae:	9301      	str	r3, [sp, #4]
 8012cb0:	e7d4      	b.n	8012c5c <osMessageGet+0x2c>
 8012cb2:	bf00      	nop
 8012cb4:	e000ed04 	.word	0xe000ed04

08012cb8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cb8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012cbc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012cc0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012cc2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012cc4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cc6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ccc:	4770      	bx	lr
 8012cce:	bf00      	nop

08012cd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012cd4:	4770      	bx	lr
 8012cd6:	bf00      	nop

08012cd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cd8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8012cda:	6802      	ldr	r2, [r0, #0]
{
 8012cdc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012cde:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8012ce0:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012ce2:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012ce6:	689c      	ldr	r4, [r3, #8]
 8012ce8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012cea:	6099      	str	r1, [r3, #8]
}
 8012cec:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8012cf0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8012cf2:	6002      	str	r2, [r0, #0]
}
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop

08012cf8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cf8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012cfa:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012cfc:	1c6b      	adds	r3, r5, #1
 8012cfe:	d010      	beq.n	8012d22 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d00:	f100 0308 	add.w	r3, r0, #8
 8012d04:	461c      	mov	r4, r3
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	42aa      	cmp	r2, r5
 8012d0c:	d9fa      	bls.n	8012d04 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8012d0e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d10:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8012d12:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d14:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d16:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d18:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8012d1a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8012d1c:	6002      	str	r2, [r0, #0]
}
 8012d1e:	bc30      	pop	{r4, r5}
 8012d20:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d22:	6904      	ldr	r4, [r0, #16]
 8012d24:	6863      	ldr	r3, [r4, #4]
 8012d26:	e7f2      	b.n	8012d0e <vListInsert+0x16>

08012d28 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012d28:	6903      	ldr	r3, [r0, #16]
{
 8012d2a:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012d2c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d2e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8012d32:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8012d34:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d38:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012d3a:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8012d3c:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012d40:	bf08      	it	eq
 8012d42:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8012d44:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8012d46:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8012d48:	3a01      	subs	r2, #1
 8012d4a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8012d4c:	6818      	ldr	r0, [r3, #0]
}
 8012d4e:	4770      	bx	lr

08012d50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012d50:	b570      	push	{r4, r5, r6, lr}
 8012d52:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012d54:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8012d56:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d58:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012d5a:	b92a      	cbnz	r2, 8012d68 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d5c:	6805      	ldr	r5, [r0, #0]
 8012d5e:	b365      	cbz	r5, 8012dba <prvCopyDataToQueue+0x6a>
 8012d60:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8012d62:	4610      	mov	r0, r2
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012d64:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8012d66:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8012d68:	b97d      	cbnz	r5, 8012d8a <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012d6a:	6840      	ldr	r0, [r0, #4]
 8012d6c:	f00e fc10 	bl	8021590 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012d70:	6863      	ldr	r3, [r4, #4]
 8012d72:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d74:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012d76:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d78:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012d7a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d7c:	d319      	bcc.n	8012db2 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d7e:	6822      	ldr	r2, [r4, #0]
 8012d80:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8012d82:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d84:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012d86:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8012d88:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012d8a:	68c0      	ldr	r0, [r0, #12]
 8012d8c:	f00e fc00 	bl	8021590 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012d90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012d92:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d94:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012d96:	4250      	negs	r0, r2
 8012d98:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d9a:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012d9c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d9e:	d202      	bcs.n	8012da6 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012da0:	68a3      	ldr	r3, [r4, #8]
 8012da2:	4403      	add	r3, r0
 8012da4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8012da6:	2d02      	cmp	r5, #2
 8012da8:	d00d      	beq.n	8012dc6 <prvCopyDataToQueue+0x76>
 8012daa:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8012dac:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012dae:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8012db0:	bd70      	pop	{r4, r5, r6, pc}
 8012db2:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8012db4:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012db6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8012db8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012dba:	6880      	ldr	r0, [r0, #8]
 8012dbc:	3601      	adds	r6, #1
 8012dbe:	f001 fa93 	bl	80142e8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012dc2:	60a5      	str	r5, [r4, #8]
 8012dc4:	e7ce      	b.n	8012d64 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012dc6:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8012dc8:	f04f 0000 	mov.w	r0, #0
 8012dcc:	bf38      	it	cc
 8012dce:	2601      	movcc	r6, #1
 8012dd0:	e7c8      	b.n	8012d64 <prvCopyDataToQueue+0x14>
 8012dd2:	bf00      	nop

08012dd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012dd4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012dd6:	b172      	cbz	r2, 8012df6 <prvCopyDataFromQueue+0x22>
 8012dd8:	460b      	mov	r3, r1
{
 8012dda:	b410      	push	{r4}
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012ddc:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012de0:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012de2:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012de4:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012de6:	d301      	bcc.n	8012dec <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012de8:	6801      	ldr	r1, [r0, #0]
 8012dea:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012dec:	4618      	mov	r0, r3
	}
}
 8012dee:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012df2:	f00e bbcd 	b.w	8021590 <memcpy>
 8012df6:	4770      	bx	lr

08012df8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012df8:	b570      	push	{r4, r5, r6, lr}
 8012dfa:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012dfc:	f001 fef2 	bl	8014be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012e00:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8012e04:	b26d      	sxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e06:	2d00      	cmp	r5, #0
 8012e08:	dd15      	ble.n	8012e36 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e0a:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8012e0e:	e004      	b.n	8012e1a <prvUnlockQueue+0x22>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012e10:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012e16:	b25d      	sxtb	r5, r3
 8012e18:	d00d      	beq.n	8012e36 <prvUnlockQueue+0x3e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e1c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e1e:	b153      	cbz	r3, 8012e36 <prvUnlockQueue+0x3e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e20:	f001 f94a 	bl	80140b8 <xTaskRemoveFromEventList>
 8012e24:	2800      	cmp	r0, #0
 8012e26:	d0f3      	beq.n	8012e10 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8012e28:	f001 f9ea 	bl	8014200 <vTaskMissedYield>
			--cTxLock;
 8012e2c:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012e32:	b25d      	sxtb	r5, r3
 8012e34:	d1f1      	bne.n	8012e1a <prvUnlockQueue+0x22>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012e36:	23ff      	movs	r3, #255	; 0xff
 8012e38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012e3c:	f001 fef8 	bl	8014c30 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012e40:	f001 fed0 	bl	8014be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012e44:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8012e48:	b26d      	sxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e4a:	2d00      	cmp	r5, #0
 8012e4c:	dd15      	ble.n	8012e7a <prvUnlockQueue+0x82>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e4e:	f104 0610 	add.w	r6, r4, #16
 8012e52:	e004      	b.n	8012e5e <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012e54:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012e5a:	b25d      	sxtb	r5, r3
 8012e5c:	d00d      	beq.n	8012e7a <prvUnlockQueue+0x82>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e5e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e60:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e62:	b153      	cbz	r3, 8012e7a <prvUnlockQueue+0x82>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e64:	f001 f928 	bl	80140b8 <xTaskRemoveFromEventList>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d0f3      	beq.n	8012e54 <prvUnlockQueue+0x5c>
					vTaskMissedYield();
 8012e6c:	f001 f9c8 	bl	8014200 <vTaskMissedYield>
				--cRxLock;
 8012e70:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012e76:	b25d      	sxtb	r5, r3
 8012e78:	d1f1      	bne.n	8012e5e <prvUnlockQueue+0x66>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012e7a:	23ff      	movs	r3, #255	; 0xff
 8012e7c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8012e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8012e84:	f001 bed4 	b.w	8014c30 <vPortExitCritical>

08012e88 <xQueueGenericReset>:
{
 8012e88:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8012e8a:	b1e0      	cbz	r0, 8012ec6 <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	460d      	mov	r5, r1
 8012e90:	f001 fea8 	bl	8014be4 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e94:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e96:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e98:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8012e9a:	21ff      	movs	r1, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e9c:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e9e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012ea2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012ea6:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8012eaa:	fb03 f300 	mul.w	r3, r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012eae:	1a18      	subs	r0, r3, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012eb0:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012eb2:	4402      	add	r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012eb4:	60a3      	str	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012eb6:	60e2      	str	r2, [r4, #12]
		if( xNewQueue == pdFALSE )
 8012eb8:	b9fd      	cbnz	r5, 8012efa <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012eba:	6923      	ldr	r3, [r4, #16]
 8012ebc:	b973      	cbnz	r3, 8012edc <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 8012ebe:	f001 feb7 	bl	8014c30 <vPortExitCritical>
}
 8012ec2:	2001      	movs	r0, #1
 8012ec4:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012ec6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012eca:	b672      	cpsid	i
 8012ecc:	f383 8811 	msr	BASEPRI, r3
 8012ed0:	f3bf 8f6f 	isb	sy
 8012ed4:	f3bf 8f4f 	dsb	sy
 8012ed8:	b662      	cpsie	i
	configASSERT( pxQueue );
 8012eda:	e7fe      	b.n	8012eda <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012edc:	f104 0010 	add.w	r0, r4, #16
 8012ee0:	f001 f8ea 	bl	80140b8 <xTaskRemoveFromEventList>
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d0ea      	beq.n	8012ebe <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8012ee8:	4b0a      	ldr	r3, [pc, #40]	; (8012f14 <xQueueGenericReset+0x8c>)
 8012eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012eee:	601a      	str	r2, [r3, #0]
 8012ef0:	f3bf 8f4f 	dsb	sy
 8012ef4:	f3bf 8f6f 	isb	sy
 8012ef8:	e7e1      	b.n	8012ebe <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012efa:	f104 0010 	add.w	r0, r4, #16
 8012efe:	f7ff fedb 	bl	8012cb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012f02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012f06:	f7ff fed7 	bl	8012cb8 <vListInitialise>
	taskEXIT_CRITICAL();
 8012f0a:	f001 fe91 	bl	8014c30 <vPortExitCritical>
}
 8012f0e:	2001      	movs	r0, #1
 8012f10:	bd38      	pop	{r3, r4, r5, pc}
 8012f12:	bf00      	nop
 8012f14:	e000ed04 	.word	0xe000ed04

08012f18 <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 8012f18:	b570      	push	{r4, r5, r6, lr}
 8012f1a:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8012f1c:	460d      	mov	r5, r1
 8012f1e:	b169      	cbz	r1, 8012f3c <xQueueGenericCreate.part.0+0x24>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f20:	fb00 f001 	mul.w	r0, r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012f24:	3048      	adds	r0, #72	; 0x48
 8012f26:	f001 ffcb 	bl	8014ec0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	b1b0      	cbz	r0, 8012f5c <xQueueGenericCreate.part.0+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012f2e:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012f30:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012f34:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012f38:	6003      	str	r3, [r0, #0]
 8012f3a:	e007      	b.n	8012f4c <xQueueGenericCreate.part.0+0x34>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012f3c:	2048      	movs	r0, #72	; 0x48
 8012f3e:	f001 ffbf 	bl	8014ec0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8012f42:	4604      	mov	r4, r0
 8012f44:	b150      	cbz	r0, 8012f5c <xQueueGenericCreate.part.0+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012f46:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012f4a:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012f4c:	2101      	movs	r1, #1
 8012f4e:	4620      	mov	r0, r4
	pxNewQueue->uxLength = uxQueueLength;
 8012f50:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012f52:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012f54:	f7ff ff98 	bl	8012e88 <xQueueGenericReset>
	}
 8012f58:	4620      	mov	r0, r4
 8012f5a:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012f5c:	2400      	movs	r4, #0
	}
 8012f5e:	4620      	mov	r0, r4
 8012f60:	bd70      	pop	{r4, r5, r6, pc}
 8012f62:	bf00      	nop

08012f64 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012f64:	b950      	cbnz	r0, 8012f7c <xQueueGenericCreateStatic+0x18>
 8012f66:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f6a:	b672      	cpsid	i
 8012f6c:	f383 8811 	msr	BASEPRI, r3
 8012f70:	f3bf 8f6f 	isb	sy
 8012f74:	f3bf 8f4f 	dsb	sy
 8012f78:	b662      	cpsie	i
 8012f7a:	e7fe      	b.n	8012f7a <xQueueGenericCreateStatic+0x16>
	{
 8012f7c:	b530      	push	{r4, r5, lr}
 8012f7e:	461c      	mov	r4, r3
 8012f80:	b083      	sub	sp, #12
		configASSERT( pxStaticQueue != NULL );
 8012f82:	b353      	cbz	r3, 8012fda <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012f84:	460d      	mov	r5, r1
 8012f86:	b162      	cbz	r2, 8012fa2 <xQueueGenericCreateStatic+0x3e>
 8012f88:	b951      	cbnz	r1, 8012fa0 <xQueueGenericCreateStatic+0x3c>
 8012f8a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f8e:	b672      	cpsid	i
 8012f90:	f383 8811 	msr	BASEPRI, r3
 8012f94:	f3bf 8f6f 	isb	sy
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	b662      	cpsie	i
 8012f9e:	e7fe      	b.n	8012f9e <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012fa0:	b95a      	cbnz	r2, 8012fba <xQueueGenericCreateStatic+0x56>
 8012fa2:	b155      	cbz	r5, 8012fba <xQueueGenericCreateStatic+0x56>
 8012fa4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fa8:	b672      	cpsid	i
 8012faa:	f383 8811 	msr	BASEPRI, r3
 8012fae:	f3bf 8f6f 	isb	sy
 8012fb2:	f3bf 8f4f 	dsb	sy
 8012fb6:	b662      	cpsie	i
 8012fb8:	e7fe      	b.n	8012fb8 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012fba:	2348      	movs	r3, #72	; 0x48
 8012fbc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012fbe:	9b01      	ldr	r3, [sp, #4]
 8012fc0:	2b48      	cmp	r3, #72	; 0x48
 8012fc2:	d015      	beq.n	8012ff0 <xQueueGenericCreateStatic+0x8c>
 8012fc4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fc8:	b672      	cpsid	i
 8012fca:	f383 8811 	msr	BASEPRI, r3
 8012fce:	f3bf 8f6f 	isb	sy
 8012fd2:	f3bf 8f4f 	dsb	sy
 8012fd6:	b662      	cpsie	i
 8012fd8:	e7fe      	b.n	8012fd8 <xQueueGenericCreateStatic+0x74>
 8012fda:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fde:	b672      	cpsid	i
 8012fe0:	f383 8811 	msr	BASEPRI, r3
 8012fe4:	f3bf 8f6f 	isb	sy
 8012fe8:	f3bf 8f4f 	dsb	sy
 8012fec:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8012fee:	e7fe      	b.n	8012fee <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012ff0:	2d00      	cmp	r5, #0
 8012ff2:	bf08      	it	eq
 8012ff4:	4622      	moveq	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012ff6:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8012ff8:	63e0      	str	r0, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012ffa:	4620      	mov	r0, r4
 8012ffc:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8012ffe:	6425      	str	r5, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013000:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013004:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013006:	f7ff ff3f 	bl	8012e88 <xQueueGenericReset>
	}
 801300a:	4620      	mov	r0, r4
 801300c:	b003      	add	sp, #12
 801300e:	bd30      	pop	{r4, r5, pc}

08013010 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013010:	b950      	cbnz	r0, 8013028 <xQueueGenericCreate+0x18>
 8013012:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013016:	b672      	cpsid	i
 8013018:	f383 8811 	msr	BASEPRI, r3
 801301c:	f3bf 8f6f 	isb	sy
 8013020:	f3bf 8f4f 	dsb	sy
 8013024:	b662      	cpsie	i
 8013026:	e7fe      	b.n	8013026 <xQueueGenericCreate+0x16>
 8013028:	f7ff bf76 	b.w	8012f18 <xQueueGenericCreate.part.0>

0801302c <xQueueGenericSend>:
{
 801302c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013030:	b084      	sub	sp, #16
 8013032:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8013034:	2800      	cmp	r0, #0
 8013036:	f000 8085 	beq.w	8013144 <xQueueGenericSend+0x118>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801303a:	460f      	mov	r7, r1
 801303c:	4604      	mov	r4, r0
 801303e:	461e      	mov	r6, r3
 8013040:	2900      	cmp	r1, #0
 8013042:	d06d      	beq.n	8013120 <xQueueGenericSend+0xf4>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013044:	2e02      	cmp	r6, #2
 8013046:	d10d      	bne.n	8013064 <xQueueGenericSend+0x38>
 8013048:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801304a:	2b01      	cmp	r3, #1
 801304c:	d00a      	beq.n	8013064 <xQueueGenericSend+0x38>
 801304e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013052:	b672      	cpsid	i
 8013054:	f383 8811 	msr	BASEPRI, r3
 8013058:	f3bf 8f6f 	isb	sy
 801305c:	f3bf 8f4f 	dsb	sy
 8013060:	b662      	cpsie	i
 8013062:	e7fe      	b.n	8013062 <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013064:	f001 f8d8 	bl	8014218 <xTaskGetSchedulerState>
 8013068:	2800      	cmp	r0, #0
 801306a:	d076      	beq.n	801315a <xQueueGenericSend+0x12e>
 801306c:	f1a6 0502 	sub.w	r5, r6, #2
{
 8013070:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8013074:	f8df a150 	ldr.w	sl, [pc, #336]	; 80131c8 <xQueueGenericSend+0x19c>
 8013078:	fab5 f585 	clz	r5, r5
		prvLockQueue( pxQueue );
 801307c:	46c1      	mov	r9, r8
 801307e:	096d      	lsrs	r5, r5, #5
 8013080:	e008      	b.n	8013094 <xQueueGenericSend+0x68>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8013082:	f001 fdd5 	bl	8014c30 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8013086:	4620      	mov	r0, r4
 8013088:	f7ff feb6 	bl	8012df8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801308c:	f000 fedc 	bl	8013e48 <xTaskResumeAll>
{
 8013090:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8013094:	f001 fda6 	bl	8014be4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013098:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801309a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801309c:	429a      	cmp	r2, r3
 801309e:	d36a      	bcc.n	8013176 <xQueueGenericSend+0x14a>
 80130a0:	2d00      	cmp	r5, #0
 80130a2:	d168      	bne.n	8013176 <xQueueGenericSend+0x14a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80130a4:	9b01      	ldr	r3, [sp, #4]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	f000 8082 	beq.w	80131b0 <xQueueGenericSend+0x184>
				else if( xEntryTimeSet == pdFALSE )
 80130ac:	f1b8 0f00 	cmp.w	r8, #0
 80130b0:	d044      	beq.n	801313c <xQueueGenericSend+0x110>
		taskEXIT_CRITICAL();
 80130b2:	f001 fdbd 	bl	8014c30 <vPortExitCritical>
		vTaskSuspendAll();
 80130b6:	f000 fdff 	bl	8013cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80130ba:	f001 fd93 	bl	8014be4 <vPortEnterCritical>
 80130be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80130c2:	2bff      	cmp	r3, #255	; 0xff
 80130c4:	d101      	bne.n	80130ca <xQueueGenericSend+0x9e>
 80130c6:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80130ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80130ce:	2bff      	cmp	r3, #255	; 0xff
 80130d0:	d101      	bne.n	80130d6 <xQueueGenericSend+0xaa>
 80130d2:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80130d6:	f001 fdab 	bl	8014c30 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130da:	a901      	add	r1, sp, #4
 80130dc:	a802      	add	r0, sp, #8
 80130de:	f001 f843 	bl	8014168 <xTaskCheckForTimeOut>
 80130e2:	2800      	cmp	r0, #0
 80130e4:	d168      	bne.n	80131b8 <xQueueGenericSend+0x18c>
	taskENTER_CRITICAL();
 80130e6:	f001 fd7d 	bl	8014be4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80130ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80130ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d1c7      	bne.n	8013082 <xQueueGenericSend+0x56>
	taskEXIT_CRITICAL();
 80130f2:	f001 fd9d 	bl	8014c30 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80130f6:	9901      	ldr	r1, [sp, #4]
 80130f8:	f104 0010 	add.w	r0, r4, #16
 80130fc:	f000 ffa0 	bl	8014040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013100:	4620      	mov	r0, r4
 8013102:	f7ff fe79 	bl	8012df8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013106:	f000 fe9f 	bl	8013e48 <xTaskResumeAll>
 801310a:	2800      	cmp	r0, #0
 801310c:	d1c0      	bne.n	8013090 <xQueueGenericSend+0x64>
					portYIELD_WITHIN_API();
 801310e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013112:	f8ca 3000 	str.w	r3, [sl]
 8013116:	f3bf 8f4f 	dsb	sy
 801311a:	f3bf 8f6f 	isb	sy
 801311e:	e7b7      	b.n	8013090 <xQueueGenericSend+0x64>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013120:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013122:	2b00      	cmp	r3, #0
 8013124:	d08e      	beq.n	8013044 <xQueueGenericSend+0x18>
 8013126:	f04f 0330 	mov.w	r3, #48	; 0x30
 801312a:	b672      	cpsid	i
 801312c:	f383 8811 	msr	BASEPRI, r3
 8013130:	f3bf 8f6f 	isb	sy
 8013134:	f3bf 8f4f 	dsb	sy
 8013138:	b662      	cpsie	i
 801313a:	e7fe      	b.n	801313a <xQueueGenericSend+0x10e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801313c:	a802      	add	r0, sp, #8
 801313e:	f001 f807 	bl	8014150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013142:	e7b6      	b.n	80130b2 <xQueueGenericSend+0x86>
 8013144:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013148:	b672      	cpsid	i
 801314a:	f383 8811 	msr	BASEPRI, r3
 801314e:	f3bf 8f6f 	isb	sy
 8013152:	f3bf 8f4f 	dsb	sy
 8013156:	b662      	cpsie	i
	configASSERT( pxQueue );
 8013158:	e7fe      	b.n	8013158 <xQueueGenericSend+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801315a:	9b01      	ldr	r3, [sp, #4]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d085      	beq.n	801306c <xQueueGenericSend+0x40>
 8013160:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013164:	b672      	cpsid	i
 8013166:	f383 8811 	msr	BASEPRI, r3
 801316a:	f3bf 8f6f 	isb	sy
 801316e:	f3bf 8f4f 	dsb	sy
 8013172:	b662      	cpsie	i
 8013174:	e7fe      	b.n	8013174 <xQueueGenericSend+0x148>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013176:	4632      	mov	r2, r6
 8013178:	4639      	mov	r1, r7
 801317a:	4620      	mov	r0, r4
 801317c:	f7ff fde8 	bl	8012d50 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013182:	b973      	cbnz	r3, 80131a2 <xQueueGenericSend+0x176>
					else if( xYieldRequired != pdFALSE )
 8013184:	b138      	cbz	r0, 8013196 <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8013186:	4b10      	ldr	r3, [pc, #64]	; (80131c8 <xQueueGenericSend+0x19c>)
 8013188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801318c:	601a      	str	r2, [r3, #0]
 801318e:	f3bf 8f4f 	dsb	sy
 8013192:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013196:	f001 fd4b 	bl	8014c30 <vPortExitCritical>
				return pdPASS;
 801319a:	2001      	movs	r0, #1
}
 801319c:	b004      	add	sp, #16
 801319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80131a6:	f000 ff87 	bl	80140b8 <xTaskRemoveFromEventList>
 80131aa:	2800      	cmp	r0, #0
 80131ac:	d0f3      	beq.n	8013196 <xQueueGenericSend+0x16a>
 80131ae:	e7ea      	b.n	8013186 <xQueueGenericSend+0x15a>
					taskEXIT_CRITICAL();
 80131b0:	f001 fd3e 	bl	8014c30 <vPortExitCritical>
					return errQUEUE_FULL;
 80131b4:	4628      	mov	r0, r5
 80131b6:	e7f1      	b.n	801319c <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 80131b8:	4620      	mov	r0, r4
 80131ba:	f7ff fe1d 	bl	8012df8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80131be:	f000 fe43 	bl	8013e48 <xTaskResumeAll>
			return errQUEUE_FULL;
 80131c2:	2000      	movs	r0, #0
 80131c4:	e7ea      	b.n	801319c <xQueueGenericSend+0x170>
 80131c6:	bf00      	nop
 80131c8:	e000ed04 	.word	0xe000ed04

080131cc <xQueueCreateMutexStatic>:
	{
 80131cc:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80131ce:	2200      	movs	r2, #0
	{
 80131d0:	4604      	mov	r4, r0
 80131d2:	b082      	sub	sp, #8
 80131d4:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80131d6:	2001      	movs	r0, #1
 80131d8:	4611      	mov	r1, r2
 80131da:	9400      	str	r4, [sp, #0]
 80131dc:	f7ff fec2 	bl	8012f64 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80131e0:	4604      	mov	r4, r0
 80131e2:	b138      	cbz	r0, 80131f4 <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80131e4:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80131e6:	461a      	mov	r2, r3
 80131e8:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80131ea:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80131ec:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80131ee:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80131f0:	f7ff ff1c 	bl	801302c <xQueueGenericSend>
	}
 80131f4:	4620      	mov	r0, r4
 80131f6:	b002      	add	sp, #8
 80131f8:	bd10      	pop	{r4, pc}
 80131fa:	bf00      	nop

080131fc <xQueueCreateMutex>:
	{
 80131fc:	b510      	push	{r4, lr}
 80131fe:	2100      	movs	r1, #0
 8013200:	2001      	movs	r0, #1
 8013202:	f7ff fe89 	bl	8012f18 <xQueueGenericCreate.part.0>
		if( pxNewQueue != NULL )
 8013206:	4604      	mov	r4, r0
 8013208:	b138      	cbz	r0, 801321a <xQueueCreateMutex+0x1e>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801320a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801320c:	461a      	mov	r2, r3
 801320e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013210:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013212:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013214:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013216:	f7ff ff09 	bl	801302c <xQueueGenericSend>
	}
 801321a:	4620      	mov	r0, r4
 801321c:	bd10      	pop	{r4, pc}
 801321e:	bf00      	nop

08013220 <xQueueGenericSendFromISR>:
{
 8013220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013224:	2800      	cmp	r0, #0
 8013226:	d051      	beq.n	80132cc <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013228:	4689      	mov	r9, r1
 801322a:	4604      	mov	r4, r0
 801322c:	4690      	mov	r8, r2
 801322e:	461f      	mov	r7, r3
 8013230:	b359      	cbz	r1, 801328a <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013232:	2f02      	cmp	r7, #2
 8013234:	d10d      	bne.n	8013252 <xQueueGenericSendFromISR+0x32>
 8013236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013238:	2b01      	cmp	r3, #1
 801323a:	d00a      	beq.n	8013252 <xQueueGenericSendFromISR+0x32>
 801323c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013240:	b672      	cpsid	i
 8013242:	f383 8811 	msr	BASEPRI, r3
 8013246:	f3bf 8f6f 	isb	sy
 801324a:	f3bf 8f4f 	dsb	sy
 801324e:	b662      	cpsie	i
 8013250:	e7fe      	b.n	8013250 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013252:	f001 fdd3 	bl	8014dfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013256:	f3ef 8611 	mrs	r6, BASEPRI
 801325a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801325e:	b672      	cpsid	i
 8013260:	f383 8811 	msr	BASEPRI, r3
 8013264:	f3bf 8f6f 	isb	sy
 8013268:	f3bf 8f4f 	dsb	sy
 801326c:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801326e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013270:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013272:	429a      	cmp	r2, r3
 8013274:	d317      	bcc.n	80132a6 <xQueueGenericSendFromISR+0x86>
 8013276:	f1a7 0002 	sub.w	r0, r7, #2
 801327a:	fab0 f080 	clz	r0, r0
 801327e:	0940      	lsrs	r0, r0, #5
 8013280:	b988      	cbnz	r0, 80132a6 <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013282:	f386 8811 	msr	BASEPRI, r6
}
 8013286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801328a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801328c:	2b00      	cmp	r3, #0
 801328e:	d0d0      	beq.n	8013232 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8013290:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013294:	b672      	cpsid	i
 8013296:	f383 8811 	msr	BASEPRI, r3
 801329a:	f3bf 8f6f 	isb	sy
 801329e:	f3bf 8f4f 	dsb	sy
 80132a2:	b662      	cpsie	i
 80132a4:	e7fe      	b.n	80132a4 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 80132a6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80132aa:	463a      	mov	r2, r7
 80132ac:	4649      	mov	r1, r9
 80132ae:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80132b0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80132b2:	f7ff fd4d 	bl	8012d50 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80132b6:	1c6b      	adds	r3, r5, #1
 80132b8:	d013      	beq.n	80132e2 <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80132ba:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 80132bc:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80132be:	b25b      	sxtb	r3, r3
 80132c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80132c4:	f386 8811 	msr	BASEPRI, r6
}
 80132c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80132cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80132d0:	b672      	cpsid	i
 80132d2:	f383 8811 	msr	BASEPRI, r3
 80132d6:	f3bf 8f6f 	isb	sy
 80132da:	f3bf 8f4f 	dsb	sy
 80132de:	b662      	cpsie	i
	configASSERT( pxQueue );
 80132e0:	e7fe      	b.n	80132e0 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132e4:	b90b      	cbnz	r3, 80132ea <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 80132e6:	2001      	movs	r0, #1
 80132e8:	e7cb      	b.n	8013282 <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80132ee:	f000 fee3 	bl	80140b8 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80132f2:	2800      	cmp	r0, #0
 80132f4:	d0f7      	beq.n	80132e6 <xQueueGenericSendFromISR+0xc6>
 80132f6:	f1b8 0f00 	cmp.w	r8, #0
 80132fa:	d0f4      	beq.n	80132e6 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80132fc:	2001      	movs	r0, #1
 80132fe:	f8c8 0000 	str.w	r0, [r8]
 8013302:	e7be      	b.n	8013282 <xQueueGenericSendFromISR+0x62>

08013304 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8013304:	b380      	cbz	r0, 8013368 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8013306:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8013308:	b570      	push	{r4, r5, r6, lr}
 801330a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 801330c:	b153      	cbz	r3, 8013324 <xQueueGiveFromISR+0x20>
 801330e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013312:	b672      	cpsid	i
 8013314:	f383 8811 	msr	BASEPRI, r3
 8013318:	f3bf 8f6f 	isb	sy
 801331c:	f3bf 8f4f 	dsb	sy
 8013320:	b662      	cpsie	i
 8013322:	e7fe      	b.n	8013322 <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013324:	6803      	ldr	r3, [r0, #0]
 8013326:	460d      	mov	r5, r1
 8013328:	b34b      	cbz	r3, 801337e <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801332a:	f001 fd67 	bl	8014dfc <vPortValidateInterruptPriority>
	__asm volatile
 801332e:	f3ef 8611 	mrs	r6, BASEPRI
 8013332:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013336:	b672      	cpsid	i
 8013338:	f383 8811 	msr	BASEPRI, r3
 801333c:	f3bf 8f6f 	isb	sy
 8013340:	f3bf 8f4f 	dsb	sy
 8013344:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013346:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013348:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801334a:	429a      	cmp	r2, r3
 801334c:	d925      	bls.n	801339a <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 801334e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013352:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8013354:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013356:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8013358:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 801335a:	d022      	beq.n	80133a2 <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801335c:	3301      	adds	r3, #1
			xReturn = pdPASS;
 801335e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013360:	b25b      	sxtb	r3, r3
 8013362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013366:	e019      	b.n	801339c <xQueueGiveFromISR+0x98>
	__asm volatile
 8013368:	f04f 0330 	mov.w	r3, #48	; 0x30
 801336c:	b672      	cpsid	i
 801336e:	f383 8811 	msr	BASEPRI, r3
 8013372:	f3bf 8f6f 	isb	sy
 8013376:	f3bf 8f4f 	dsb	sy
 801337a:	b662      	cpsie	i
	configASSERT( pxQueue );
 801337c:	e7fe      	b.n	801337c <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801337e:	6883      	ldr	r3, [r0, #8]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d0d2      	beq.n	801332a <xQueueGiveFromISR+0x26>
 8013384:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013388:	b672      	cpsid	i
 801338a:	f383 8811 	msr	BASEPRI, r3
 801338e:	f3bf 8f6f 	isb	sy
 8013392:	f3bf 8f4f 	dsb	sy
 8013396:	b662      	cpsie	i
 8013398:	e7fe      	b.n	8013398 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 801339a:	2000      	movs	r0, #0
	__asm volatile
 801339c:	f386 8811 	msr	BASEPRI, r6
}
 80133a0:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133a4:	b90b      	cbnz	r3, 80133aa <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 80133a6:	2001      	movs	r0, #1
 80133a8:	e7f8      	b.n	801339c <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80133ae:	f000 fe83 	bl	80140b8 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80133b2:	2d00      	cmp	r5, #0
 80133b4:	d0f7      	beq.n	80133a6 <xQueueGiveFromISR+0xa2>
 80133b6:	2800      	cmp	r0, #0
 80133b8:	d0f5      	beq.n	80133a6 <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80133ba:	2001      	movs	r0, #1
 80133bc:	6028      	str	r0, [r5, #0]
 80133be:	e7ed      	b.n	801339c <xQueueGiveFromISR+0x98>

080133c0 <xQueueReceive>:
{
 80133c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133c4:	b085      	sub	sp, #20
 80133c6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80133c8:	2800      	cmp	r0, #0
 80133ca:	f000 808c 	beq.w	80134e6 <xQueueReceive+0x126>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133ce:	460e      	mov	r6, r1
 80133d0:	4604      	mov	r4, r0
 80133d2:	2900      	cmp	r1, #0
 80133d4:	d056      	beq.n	8013484 <xQueueReceive+0xc4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80133d6:	f000 ff1f 	bl	8014218 <xTaskGetSchedulerState>
 80133da:	2800      	cmp	r0, #0
 80133dc:	d044      	beq.n	8013468 <xQueueReceive+0xa8>
		taskENTER_CRITICAL();
 80133de:	f001 fc01 	bl	8014be4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133e4:	2d00      	cmp	r5, #0
 80133e6:	f040 8089 	bne.w	80134fc <xQueueReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80133ea:	9b01      	ldr	r3, [sp, #4]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d035      	beq.n	801345c <xQueueReceive+0x9c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133f0:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 80133f2:	462f      	mov	r7, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80133f4:	f104 0924 	add.w	r9, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 80133f8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8013534 <xQueueReceive+0x174>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133fc:	f000 fea8 	bl	8014150 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8013400:	f001 fc16 	bl	8014c30 <vPortExitCritical>
		vTaskSuspendAll();
 8013404:	f000 fc58 	bl	8013cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013408:	f001 fbec 	bl	8014be4 <vPortEnterCritical>
 801340c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013410:	2bff      	cmp	r3, #255	; 0xff
 8013412:	d101      	bne.n	8013418 <xQueueReceive+0x58>
 8013414:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8013418:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801341c:	2bff      	cmp	r3, #255	; 0xff
 801341e:	d101      	bne.n	8013424 <xQueueReceive+0x64>
 8013420:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013424:	f001 fc04 	bl	8014c30 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013428:	a901      	add	r1, sp, #4
 801342a:	a802      	add	r0, sp, #8
 801342c:	f000 fe9c 	bl	8014168 <xTaskCheckForTimeOut>
 8013430:	2800      	cmp	r0, #0
 8013432:	d135      	bne.n	80134a0 <xQueueReceive+0xe0>
	taskENTER_CRITICAL();
 8013434:	f001 fbd6 	bl	8014be4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801343a:	2b00      	cmp	r3, #0
 801343c:	d03d      	beq.n	80134ba <xQueueReceive+0xfa>
	taskEXIT_CRITICAL();
 801343e:	f001 fbf7 	bl	8014c30 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8013442:	4620      	mov	r0, r4
 8013444:	f7ff fcd8 	bl	8012df8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013448:	f000 fcfe 	bl	8013e48 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801344c:	f001 fbca 	bl	8014be4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013450:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013452:	2d00      	cmp	r5, #0
 8013454:	d152      	bne.n	80134fc <xQueueReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013456:	9b01      	ldr	r3, [sp, #4]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1d1      	bne.n	8013400 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 801345c:	f001 fbe8 	bl	8014c30 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8013460:	2000      	movs	r0, #0
}
 8013462:	b005      	add	sp, #20
 8013464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013468:	9b01      	ldr	r3, [sp, #4]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d0b7      	beq.n	80133de <xQueueReceive+0x1e>
	__asm volatile
 801346e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013472:	b672      	cpsid	i
 8013474:	f383 8811 	msr	BASEPRI, r3
 8013478:	f3bf 8f6f 	isb	sy
 801347c:	f3bf 8f4f 	dsb	sy
 8013480:	b662      	cpsie	i
 8013482:	e7fe      	b.n	8013482 <xQueueReceive+0xc2>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013484:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013486:	2b00      	cmp	r3, #0
 8013488:	d0a5      	beq.n	80133d6 <xQueueReceive+0x16>
 801348a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801348e:	b672      	cpsid	i
 8013490:	f383 8811 	msr	BASEPRI, r3
 8013494:	f3bf 8f6f 	isb	sy
 8013498:	f3bf 8f4f 	dsb	sy
 801349c:	b662      	cpsie	i
 801349e:	e7fe      	b.n	801349e <xQueueReceive+0xde>
			prvUnlockQueue( pxQueue );
 80134a0:	4620      	mov	r0, r4
 80134a2:	f7ff fca9 	bl	8012df8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134a6:	f000 fccf 	bl	8013e48 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80134aa:	f001 fb9b 	bl	8014be4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80134ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d0d3      	beq.n	801345c <xQueueReceive+0x9c>
	taskEXIT_CRITICAL();
 80134b4:	f001 fbbc 	bl	8014c30 <vPortExitCritical>
 80134b8:	e7c8      	b.n	801344c <xQueueReceive+0x8c>
 80134ba:	f001 fbb9 	bl	8014c30 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80134be:	9901      	ldr	r1, [sp, #4]
 80134c0:	4648      	mov	r0, r9
 80134c2:	f000 fdbd 	bl	8014040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80134c6:	4620      	mov	r0, r4
 80134c8:	f7ff fc96 	bl	8012df8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80134cc:	f000 fcbc 	bl	8013e48 <xTaskResumeAll>
 80134d0:	2800      	cmp	r0, #0
 80134d2:	d1bb      	bne.n	801344c <xQueueReceive+0x8c>
					portYIELD_WITHIN_API();
 80134d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80134d8:	f8c8 3000 	str.w	r3, [r8]
 80134dc:	f3bf 8f4f 	dsb	sy
 80134e0:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80134e4:	e7b2      	b.n	801344c <xQueueReceive+0x8c>
 80134e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80134ea:	b672      	cpsid	i
 80134ec:	f383 8811 	msr	BASEPRI, r3
 80134f0:	f3bf 8f6f 	isb	sy
 80134f4:	f3bf 8f4f 	dsb	sy
 80134f8:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 80134fa:	e7fe      	b.n	80134fa <xQueueReceive+0x13a>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80134fc:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80134fe:	4631      	mov	r1, r6
 8013500:	4620      	mov	r0, r4
 8013502:	f7ff fc67 	bl	8012dd4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013506:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013508:	6923      	ldr	r3, [r4, #16]
 801350a:	b91b      	cbnz	r3, 8013514 <xQueueReceive+0x154>
				taskEXIT_CRITICAL();
 801350c:	f001 fb90 	bl	8014c30 <vPortExitCritical>
				return pdPASS;
 8013510:	2001      	movs	r0, #1
 8013512:	e7a6      	b.n	8013462 <xQueueReceive+0xa2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013514:	f104 0010 	add.w	r0, r4, #16
 8013518:	f000 fdce 	bl	80140b8 <xTaskRemoveFromEventList>
 801351c:	2800      	cmp	r0, #0
 801351e:	d0f5      	beq.n	801350c <xQueueReceive+0x14c>
						queueYIELD_IF_USING_PREEMPTION();
 8013520:	4b04      	ldr	r3, [pc, #16]	; (8013534 <xQueueReceive+0x174>)
 8013522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013526:	601a      	str	r2, [r3, #0]
 8013528:	f3bf 8f4f 	dsb	sy
 801352c:	f3bf 8f6f 	isb	sy
 8013530:	e7ec      	b.n	801350c <xQueueReceive+0x14c>
 8013532:	bf00      	nop
 8013534:	e000ed04 	.word	0xe000ed04

08013538 <xQueueSemaphoreTake>:
{
 8013538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801353c:	b084      	sub	sp, #16
 801353e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8013540:	b168      	cbz	r0, 801355e <xQueueSemaphoreTake+0x26>
	configASSERT( pxQueue->uxItemSize == 0 );
 8013542:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8013544:	4604      	mov	r4, r0
 8013546:	b1ad      	cbz	r5, 8013574 <xQueueSemaphoreTake+0x3c>
 8013548:	f04f 0330 	mov.w	r3, #48	; 0x30
 801354c:	b672      	cpsid	i
 801354e:	f383 8811 	msr	BASEPRI, r3
 8013552:	f3bf 8f6f 	isb	sy
 8013556:	f3bf 8f4f 	dsb	sy
 801355a:	b662      	cpsie	i
 801355c:	e7fe      	b.n	801355c <xQueueSemaphoreTake+0x24>
 801355e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013562:	b672      	cpsid	i
 8013564:	f383 8811 	msr	BASEPRI, r3
 8013568:	f3bf 8f6f 	isb	sy
 801356c:	f3bf 8f4f 	dsb	sy
 8013570:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8013572:	e7fe      	b.n	8013572 <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013574:	f000 fe50 	bl	8014218 <xTaskGetSchedulerState>
 8013578:	4606      	mov	r6, r0
 801357a:	2800      	cmp	r0, #0
 801357c:	d074      	beq.n	8013668 <xQueueSemaphoreTake+0x130>
 801357e:	462e      	mov	r6, r5
		taskENTER_CRITICAL();
 8013580:	f001 fb30 	bl	8014be4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8013586:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8013588:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80136f8 <xQueueSemaphoreTake+0x1c0>
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801358c:	bb7b      	cbnz	r3, 80135ee <xQueueSemaphoreTake+0xb6>
				if( xTicksToWait == ( TickType_t ) 0 )
 801358e:	9b01      	ldr	r3, [sp, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	f000 80a3 	beq.w	80136dc <xQueueSemaphoreTake+0x1a4>
				else if( xEntryTimeSet == pdFALSE )
 8013596:	2e00      	cmp	r6, #0
 8013598:	d062      	beq.n	8013660 <xQueueSemaphoreTake+0x128>
		taskEXIT_CRITICAL();
 801359a:	f001 fb49 	bl	8014c30 <vPortExitCritical>
		vTaskSuspendAll();
 801359e:	f000 fb8b 	bl	8013cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80135a2:	f001 fb1f 	bl	8014be4 <vPortEnterCritical>
 80135a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80135aa:	2bff      	cmp	r3, #255	; 0xff
 80135ac:	d101      	bne.n	80135b2 <xQueueSemaphoreTake+0x7a>
 80135ae:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80135b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80135b6:	2bff      	cmp	r3, #255	; 0xff
 80135b8:	d101      	bne.n	80135be <xQueueSemaphoreTake+0x86>
 80135ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80135be:	f001 fb37 	bl	8014c30 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80135c2:	a901      	add	r1, sp, #4
 80135c4:	a802      	add	r0, sp, #8
 80135c6:	f000 fdcf 	bl	8014168 <xTaskCheckForTimeOut>
 80135ca:	b9e0      	cbnz	r0, 8013606 <xQueueSemaphoreTake+0xce>
	taskENTER_CRITICAL();
 80135cc:	f001 fb0a 	bl	8014be4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80135d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80135d2:	b323      	cbz	r3, 801361e <xQueueSemaphoreTake+0xe6>
	taskEXIT_CRITICAL();
 80135d4:	f001 fb2c 	bl	8014c30 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80135d8:	4620      	mov	r0, r4
 80135da:	f7ff fc0d 	bl	8012df8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80135de:	f000 fc33 	bl	8013e48 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80135e2:	f001 faff 	bl	8014be4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80135e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80135e8:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d0cf      	beq.n	801358e <xQueueSemaphoreTake+0x56>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80135ee:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135f0:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80135f2:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135f4:	2a00      	cmp	r2, #0
 80135f6:	d064      	beq.n	80136c2 <xQueueSemaphoreTake+0x18a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135f8:	6923      	ldr	r3, [r4, #16]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d152      	bne.n	80136a4 <xQueueSemaphoreTake+0x16c>
				return pdPASS;
 80135fe:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8013600:	f001 fb16 	bl	8014c30 <vPortExitCritical>
				return pdPASS;
 8013604:	e028      	b.n	8013658 <xQueueSemaphoreTake+0x120>
			prvUnlockQueue( pxQueue );
 8013606:	4620      	mov	r0, r4
 8013608:	f7ff fbf6 	bl	8012df8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801360c:	f000 fc1c 	bl	8013e48 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8013610:	f001 fae8 	bl	8014be4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013616:	b1e3      	cbz	r3, 8013652 <xQueueSemaphoreTake+0x11a>
	taskEXIT_CRITICAL();
 8013618:	f001 fb0a 	bl	8014c30 <vPortExitCritical>
	return xReturn;
 801361c:	e7e1      	b.n	80135e2 <xQueueSemaphoreTake+0xaa>
	taskEXIT_CRITICAL();
 801361e:	f001 fb07 	bl	8014c30 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013622:	6823      	ldr	r3, [r4, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d050      	beq.n	80136ca <xQueueSemaphoreTake+0x192>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013628:	9901      	ldr	r1, [sp, #4]
 801362a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801362e:	f000 fd07 	bl	8014040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013632:	4620      	mov	r0, r4
 8013634:	f7ff fbe0 	bl	8012df8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013638:	f000 fc06 	bl	8013e48 <xTaskResumeAll>
 801363c:	2800      	cmp	r0, #0
 801363e:	d1d0      	bne.n	80135e2 <xQueueSemaphoreTake+0xaa>
					portYIELD_WITHIN_API();
 8013640:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013644:	f8c8 3000 	str.w	r3, [r8]
 8013648:	f3bf 8f4f 	dsb	sy
 801364c:	f3bf 8f6f 	isb	sy
 8013650:	e7c7      	b.n	80135e2 <xQueueSemaphoreTake+0xaa>
	taskEXIT_CRITICAL();
 8013652:	f001 faed 	bl	8014c30 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8013656:	b9b5      	cbnz	r5, 8013686 <xQueueSemaphoreTake+0x14e>
}
 8013658:	4628      	mov	r0, r5
 801365a:	b004      	add	sp, #16
 801365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013660:	a802      	add	r0, sp, #8
 8013662:	f000 fd75 	bl	8014150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013666:	e798      	b.n	801359a <xQueueSemaphoreTake+0x62>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013668:	9b01      	ldr	r3, [sp, #4]
 801366a:	b153      	cbz	r3, 8013682 <xQueueSemaphoreTake+0x14a>
 801366c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013670:	b672      	cpsid	i
 8013672:	f383 8811 	msr	BASEPRI, r3
 8013676:	f3bf 8f6f 	isb	sy
 801367a:	f3bf 8f4f 	dsb	sy
 801367e:	b662      	cpsie	i
 8013680:	e7fe      	b.n	8013680 <xQueueSemaphoreTake+0x148>
 8013682:	4605      	mov	r5, r0
 8013684:	e77c      	b.n	8013580 <xQueueSemaphoreTake+0x48>
						taskENTER_CRITICAL();
 8013686:	f001 faad 	bl	8014be4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801368a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801368c:	b119      	cbz	r1, 8013696 <xQueueSemaphoreTake+0x15e>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801368e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013690:	6819      	ldr	r1, [r3, #0]
 8013692:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013696:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8013698:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801369a:	f000 fe85 	bl	80143a8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801369e:	f001 fac7 	bl	8014c30 <vPortExitCritical>
 80136a2:	e7d9      	b.n	8013658 <xQueueSemaphoreTake+0x120>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136a4:	f104 0010 	add.w	r0, r4, #16
 80136a8:	f000 fd06 	bl	80140b8 <xTaskRemoveFromEventList>
 80136ac:	2800      	cmp	r0, #0
 80136ae:	d0a6      	beq.n	80135fe <xQueueSemaphoreTake+0xc6>
						queueYIELD_IF_USING_PREEMPTION();
 80136b0:	4b11      	ldr	r3, [pc, #68]	; (80136f8 <xQueueSemaphoreTake+0x1c0>)
 80136b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136b6:	601a      	str	r2, [r3, #0]
 80136b8:	f3bf 8f4f 	dsb	sy
 80136bc:	f3bf 8f6f 	isb	sy
 80136c0:	e79d      	b.n	80135fe <xQueueSemaphoreTake+0xc6>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80136c2:	f000 fedd 	bl	8014480 <pvTaskIncrementMutexHeldCount>
 80136c6:	60a0      	str	r0, [r4, #8]
 80136c8:	e796      	b.n	80135f8 <xQueueSemaphoreTake+0xc0>
						taskENTER_CRITICAL();
 80136ca:	f001 fa8b 	bl	8014be4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80136ce:	68a0      	ldr	r0, [r4, #8]
 80136d0:	f000 fdb2 	bl	8014238 <xTaskPriorityInherit>
 80136d4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80136d6:	f001 faab 	bl	8014c30 <vPortExitCritical>
 80136da:	e7a5      	b.n	8013628 <xQueueSemaphoreTake+0xf0>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80136dc:	2d00      	cmp	r5, #0
 80136de:	d0de      	beq.n	801369e <xQueueSemaphoreTake+0x166>
 80136e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80136e4:	b672      	cpsid	i
 80136e6:	f383 8811 	msr	BASEPRI, r3
 80136ea:	f3bf 8f6f 	isb	sy
 80136ee:	f3bf 8f4f 	dsb	sy
 80136f2:	b662      	cpsie	i
 80136f4:	e7fe      	b.n	80136f4 <xQueueSemaphoreTake+0x1bc>
 80136f6:	bf00      	nop
 80136f8:	e000ed04 	.word	0xe000ed04

080136fc <xQueueReceiveFromISR>:
{
 80136fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013700:	b330      	cbz	r0, 8013750 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013702:	4689      	mov	r9, r1
 8013704:	4605      	mov	r5, r0
 8013706:	4690      	mov	r8, r2
 8013708:	b1a1      	cbz	r1, 8013734 <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801370a:	f001 fb77 	bl	8014dfc <vPortValidateInterruptPriority>
	__asm volatile
 801370e:	f3ef 8711 	mrs	r7, BASEPRI
 8013712:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013716:	b672      	cpsid	i
 8013718:	f383 8811 	msr	BASEPRI, r3
 801371c:	f3bf 8f6f 	isb	sy
 8013720:	f3bf 8f4f 	dsb	sy
 8013724:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013726:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013728:	b9ec      	cbnz	r4, 8013766 <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 801372a:	4620      	mov	r0, r4
	__asm volatile
 801372c:	f387 8811 	msr	BASEPRI, r7
}
 8013730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013734:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013736:	2b00      	cmp	r3, #0
 8013738:	d0e7      	beq.n	801370a <xQueueReceiveFromISR+0xe>
	__asm volatile
 801373a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801373e:	b672      	cpsid	i
 8013740:	f383 8811 	msr	BASEPRI, r3
 8013744:	f3bf 8f6f 	isb	sy
 8013748:	f3bf 8f4f 	dsb	sy
 801374c:	b662      	cpsie	i
 801374e:	e7fe      	b.n	801374e <xQueueReceiveFromISR+0x52>
 8013750:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013754:	b672      	cpsid	i
 8013756:	f383 8811 	msr	BASEPRI, r3
 801375a:	f3bf 8f6f 	isb	sy
 801375e:	f3bf 8f4f 	dsb	sy
 8013762:	b662      	cpsie	i
	configASSERT( pxQueue );
 8013764:	e7fe      	b.n	8013764 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 8013766:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801376a:	4649      	mov	r1, r9
 801376c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801376e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8013770:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013772:	f7ff fb2f 	bl	8012dd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013776:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8013778:	1c73      	adds	r3, r6, #1
 801377a:	d008      	beq.n	801378e <xQueueReceiveFromISR+0x92>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801377c:	1c72      	adds	r2, r6, #1
			xReturn = pdPASS;
 801377e:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013780:	b252      	sxtb	r2, r2
 8013782:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
	__asm volatile
 8013786:	f387 8811 	msr	BASEPRI, r7
}
 801378a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801378e:	692b      	ldr	r3, [r5, #16]
 8013790:	b90b      	cbnz	r3, 8013796 <xQueueReceiveFromISR+0x9a>
			xReturn = pdPASS;
 8013792:	2001      	movs	r0, #1
 8013794:	e7ca      	b.n	801372c <xQueueReceiveFromISR+0x30>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013796:	f105 0010 	add.w	r0, r5, #16
 801379a:	f000 fc8d 	bl	80140b8 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 801379e:	f1b8 0f00 	cmp.w	r8, #0
 80137a2:	d0f6      	beq.n	8013792 <xQueueReceiveFromISR+0x96>
 80137a4:	2800      	cmp	r0, #0
 80137a6:	d0f4      	beq.n	8013792 <xQueueReceiveFromISR+0x96>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80137a8:	2001      	movs	r0, #1
 80137aa:	f8c8 0000 	str.w	r0, [r8]
 80137ae:	e7bd      	b.n	801372c <xQueueReceiveFromISR+0x30>

080137b0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80137b0:	2300      	movs	r3, #0
 80137b2:	4a08      	ldr	r2, [pc, #32]	; (80137d4 <vQueueAddToRegistry+0x24>)
	{
 80137b4:	b430      	push	{r4, r5}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80137b6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80137ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80137be:	b124      	cbz	r4, 80137ca <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80137c0:	3301      	adds	r3, #1
 80137c2:	2b08      	cmp	r3, #8
 80137c4:	d1f7      	bne.n	80137b6 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80137c6:	bc30      	pop	{r4, r5}
 80137c8:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 80137ca:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80137cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 80137d0:	bc30      	pop	{r4, r5}
 80137d2:	4770      	bx	lr
 80137d4:	2001f120 	.word	0x2001f120

080137d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80137d8:	b570      	push	{r4, r5, r6, lr}
 80137da:	4604      	mov	r4, r0
 80137dc:	460e      	mov	r6, r1
 80137de:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80137e0:	f001 fa00 	bl	8014be4 <vPortEnterCritical>
 80137e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80137e8:	2bff      	cmp	r3, #255	; 0xff
 80137ea:	d102      	bne.n	80137f2 <vQueueWaitForMessageRestricted+0x1a>
 80137ec:	2300      	movs	r3, #0
 80137ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80137f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80137f6:	2bff      	cmp	r3, #255	; 0xff
 80137f8:	d102      	bne.n	8013800 <vQueueWaitForMessageRestricted+0x28>
 80137fa:	2300      	movs	r3, #0
 80137fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013800:	f001 fa16 	bl	8014c30 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013804:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013806:	b123      	cbz	r3, 8013812 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013808:	4620      	mov	r0, r4
	}
 801380a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 801380e:	f7ff baf3 	b.w	8012df8 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013812:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013816:	462a      	mov	r2, r5
 8013818:	4631      	mov	r1, r6
 801381a:	f000 fc2d 	bl	8014078 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 801381e:	4620      	mov	r0, r4
	}
 8013820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8013824:	f7ff bae8 	b.w	8012df8 <prvUnlockQueue>

08013828 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801382a:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801382c:	f001 f9da 	bl	8014be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013830:	4a36      	ldr	r2, [pc, #216]	; (801390c <prvAddNewTaskToReadyList+0xe4>)
		if( pxCurrentTCB == NULL )
 8013832:	4d37      	ldr	r5, [pc, #220]	; (8013910 <prvAddNewTaskToReadyList+0xe8>)
		uxCurrentNumberOfTasks++;
 8013834:	6813      	ldr	r3, [r2, #0]
 8013836:	3301      	adds	r3, #1
 8013838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801383a:	682b      	ldr	r3, [r5, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d031      	beq.n	80138a4 <prvAddNewTaskToReadyList+0x7c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013840:	4e34      	ldr	r6, [pc, #208]	; (8013914 <prvAddNewTaskToReadyList+0xec>)
 8013842:	6833      	ldr	r3, [r6, #0]
 8013844:	b33b      	cbz	r3, 8013896 <prvAddNewTaskToReadyList+0x6e>
 8013846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013848:	4833      	ldr	r0, [pc, #204]	; (8013918 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801384a:	2201      	movs	r2, #1
 801384c:	4f33      	ldr	r7, [pc, #204]	; (801391c <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 801384e:	6801      	ldr	r1, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8013850:	409a      	lsls	r2, r3
 8013852:	f8d7 c000 	ldr.w	ip, [r7]
 8013856:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 801385a:	3101      	adds	r1, #1
		prvAddTaskToReadyList( pxNewTCB );
 801385c:	ea42 020c 	orr.w	r2, r2, ip
 8013860:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8013924 <prvAddNewTaskToReadyList+0xfc>
		uxTaskNumber++;
 8013864:	6001      	str	r1, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8013866:	1d21      	adds	r1, r4, #4
 8013868:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
 801386c:	603a      	str	r2, [r7, #0]
 801386e:	f7ff fa33 	bl	8012cd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013872:	f001 f9dd 	bl	8014c30 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013876:	6833      	ldr	r3, [r6, #0]
 8013878:	b163      	cbz	r3, 8013894 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801387a:	682a      	ldr	r2, [r5, #0]
 801387c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801387e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013880:	429a      	cmp	r2, r3
 8013882:	d207      	bcs.n	8013894 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013884:	4b26      	ldr	r3, [pc, #152]	; (8013920 <prvAddNewTaskToReadyList+0xf8>)
 8013886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801388a:	601a      	str	r2, [r3, #0]
 801388c:	f3bf 8f4f 	dsb	sy
 8013890:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013896:	682a      	ldr	r2, [r5, #0]
 8013898:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801389a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801389c:	429a      	cmp	r2, r3
 801389e:	d8d3      	bhi.n	8013848 <prvAddNewTaskToReadyList+0x20>
					pxCurrentTCB = pxNewTCB;
 80138a0:	602c      	str	r4, [r5, #0]
 80138a2:	e7d1      	b.n	8013848 <prvAddNewTaskToReadyList+0x20>
			pxCurrentTCB = pxNewTCB;
 80138a4:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80138a6:	6813      	ldr	r3, [r2, #0]
 80138a8:	2b01      	cmp	r3, #1
 80138aa:	d002      	beq.n	80138b2 <prvAddNewTaskToReadyList+0x8a>
 80138ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80138ae:	4e19      	ldr	r6, [pc, #100]	; (8013914 <prvAddNewTaskToReadyList+0xec>)
 80138b0:	e7ca      	b.n	8013848 <prvAddNewTaskToReadyList+0x20>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80138b2:	481c      	ldr	r0, [pc, #112]	; (8013924 <prvAddNewTaskToReadyList+0xfc>)
 80138b4:	f7ff fa00 	bl	8012cb8 <vListInitialise>
 80138b8:	481b      	ldr	r0, [pc, #108]	; (8013928 <prvAddNewTaskToReadyList+0x100>)
 80138ba:	f7ff f9fd 	bl	8012cb8 <vListInitialise>
 80138be:	481b      	ldr	r0, [pc, #108]	; (801392c <prvAddNewTaskToReadyList+0x104>)
 80138c0:	f7ff f9fa 	bl	8012cb8 <vListInitialise>
 80138c4:	481a      	ldr	r0, [pc, #104]	; (8013930 <prvAddNewTaskToReadyList+0x108>)
 80138c6:	f7ff f9f7 	bl	8012cb8 <vListInitialise>
 80138ca:	481a      	ldr	r0, [pc, #104]	; (8013934 <prvAddNewTaskToReadyList+0x10c>)
 80138cc:	f7ff f9f4 	bl	8012cb8 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
 80138d0:	4f19      	ldr	r7, [pc, #100]	; (8013938 <prvAddNewTaskToReadyList+0x110>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80138d2:	481a      	ldr	r0, [pc, #104]	; (801393c <prvAddNewTaskToReadyList+0x114>)
 80138d4:	f7ff f9f0 	bl	8012cb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80138d8:	4e19      	ldr	r6, [pc, #100]	; (8013940 <prvAddNewTaskToReadyList+0x118>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80138da:	481a      	ldr	r0, [pc, #104]	; (8013944 <prvAddNewTaskToReadyList+0x11c>)
 80138dc:	f7ff f9ec 	bl	8012cb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 80138e0:	4638      	mov	r0, r7
 80138e2:	f7ff f9e9 	bl	8012cb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80138e6:	4630      	mov	r0, r6
 80138e8:	f7ff f9e6 	bl	8012cb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80138ec:	4816      	ldr	r0, [pc, #88]	; (8013948 <prvAddNewTaskToReadyList+0x120>)
 80138ee:	f7ff f9e3 	bl	8012cb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80138f2:	4816      	ldr	r0, [pc, #88]	; (801394c <prvAddNewTaskToReadyList+0x124>)
 80138f4:	f7ff f9e0 	bl	8012cb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80138f8:	4815      	ldr	r0, [pc, #84]	; (8013950 <prvAddNewTaskToReadyList+0x128>)
 80138fa:	f7ff f9dd 	bl	8012cb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80138fe:	4b15      	ldr	r3, [pc, #84]	; (8013954 <prvAddNewTaskToReadyList+0x12c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013900:	4a15      	ldr	r2, [pc, #84]	; (8013958 <prvAddNewTaskToReadyList+0x130>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8013902:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013904:	6016      	str	r6, [r2, #0]
 8013906:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013908:	4e02      	ldr	r6, [pc, #8]	; (8013914 <prvAddNewTaskToReadyList+0xec>)
}
 801390a:	e79d      	b.n	8013848 <prvAddNewTaskToReadyList+0x20>
 801390c:	20001d94 	.word	0x20001d94
 8013910:	20001cfc 	.word	0x20001cfc
 8013914:	20001df0 	.word	0x20001df0
 8013918:	20001da4 	.word	0x20001da4
 801391c:	20001da8 	.word	0x20001da8
 8013920:	e000ed04 	.word	0xe000ed04
 8013924:	20001d08 	.word	0x20001d08
 8013928:	20001d1c 	.word	0x20001d1c
 801392c:	20001d30 	.word	0x20001d30
 8013930:	20001d44 	.word	0x20001d44
 8013934:	20001d58 	.word	0x20001d58
 8013938:	20001dac 	.word	0x20001dac
 801393c:	20001d6c 	.word	0x20001d6c
 8013940:	20001dc0 	.word	0x20001dc0
 8013944:	20001d80 	.word	0x20001d80
 8013948:	20001ddc 	.word	0x20001ddc
 801394c:	20001e08 	.word	0x20001e08
 8013950:	20001df4 	.word	0x20001df4
 8013954:	20001d00 	.word	0x20001d00
 8013958:	20001d04 	.word	0x20001d04

0801395c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801395e:	4b1a      	ldr	r3, [pc, #104]	; (80139c8 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 8013960:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013962:	4e1a      	ldr	r6, [pc, #104]	; (80139cc <prvAddCurrentTaskToDelayedList+0x70>)
{
 8013964:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8013966:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013968:	6830      	ldr	r0, [r6, #0]
 801396a:	3004      	adds	r0, #4
 801396c:	f7ff f9dc 	bl	8012d28 <uxListRemove>
 8013970:	b940      	cbnz	r0, 8013984 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013972:	6833      	ldr	r3, [r6, #0]
 8013974:	2201      	movs	r2, #1
 8013976:	4916      	ldr	r1, [pc, #88]	; (80139d0 <prvAddCurrentTaskToDelayedList+0x74>)
 8013978:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801397a:	680b      	ldr	r3, [r1, #0]
 801397c:	4082      	lsls	r2, r0
 801397e:	ea23 0302 	bic.w	r3, r3, r2
 8013982:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013984:	1c63      	adds	r3, r4, #1
 8013986:	d100      	bne.n	801398a <prvAddCurrentTaskToDelayedList+0x2e>
 8013988:	b9bf      	cbnz	r7, 80139ba <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 801398a:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801398c:	6833      	ldr	r3, [r6, #0]
 801398e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8013990:	d307      	bcc.n	80139a2 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013992:	4b10      	ldr	r3, [pc, #64]	; (80139d4 <prvAddCurrentTaskToDelayedList+0x78>)
 8013994:	6818      	ldr	r0, [r3, #0]
 8013996:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013998:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801399c:	3104      	adds	r1, #4
 801399e:	f7ff b9ab 	b.w	8012cf8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139a2:	4b0d      	ldr	r3, [pc, #52]	; (80139d8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80139a4:	6818      	ldr	r0, [r3, #0]
 80139a6:	6831      	ldr	r1, [r6, #0]
 80139a8:	3104      	adds	r1, #4
 80139aa:	f7ff f9a5 	bl	8012cf8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80139ae:	4b0b      	ldr	r3, [pc, #44]	; (80139dc <prvAddCurrentTaskToDelayedList+0x80>)
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	42a2      	cmp	r2, r4
 80139b4:	d900      	bls.n	80139b8 <prvAddCurrentTaskToDelayedList+0x5c>
					xNextTaskUnblockTime = xTimeToWake;
 80139b6:	601c      	str	r4, [r3, #0]
}
 80139b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139ba:	6831      	ldr	r1, [r6, #0]
 80139bc:	4808      	ldr	r0, [pc, #32]	; (80139e0 <prvAddCurrentTaskToDelayedList+0x84>)
 80139be:	3104      	adds	r1, #4
}
 80139c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139c4:	f7ff b988 	b.w	8012cd8 <vListInsertEnd>
 80139c8:	20001e1c 	.word	0x20001e1c
 80139cc:	20001cfc 	.word	0x20001cfc
 80139d0:	20001da8 	.word	0x20001da8
 80139d4:	20001d04 	.word	0x20001d04
 80139d8:	20001d00 	.word	0x20001d00
 80139dc:	20001dd4 	.word	0x20001dd4
 80139e0:	20001df4 	.word	0x20001df4

080139e4 <prvResetNextTaskUnblockTime.part.0>:
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139e4:	4a03      	ldr	r2, [pc, #12]	; (80139f4 <prvResetNextTaskUnblockTime.part.0+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80139e6:	4b04      	ldr	r3, [pc, #16]	; (80139f8 <prvResetNextTaskUnblockTime.part.0+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139e8:	6812      	ldr	r2, [r2, #0]
 80139ea:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80139ec:	68d2      	ldr	r2, [r2, #12]
 80139ee:	6852      	ldr	r2, [r2, #4]
 80139f0:	601a      	str	r2, [r3, #0]
}
 80139f2:	4770      	bx	lr
 80139f4:	20001d00 	.word	0x20001d00
 80139f8:	20001dd4 	.word	0x20001dd4

080139fc <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80139fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a00:	b083      	sub	sp, #12
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013a02:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8013a06:	460f      	mov	r7, r1
 8013a08:	4601      	mov	r1, r0
 8013a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013a0c:	4490      	add	r8, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8013a0e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8013a12:	461a      	mov	r2, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013a14:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8013a16:	eb04 0488 	add.w	r4, r4, r8, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013a1a:	f024 0807 	bic.w	r8, r4, #7
	if( pcName != NULL )
 8013a1e:	2f00      	cmp	r7, #0
 8013a20:	d035      	beq.n	8013a8e <prvInitialiseNewTask.isra.0+0x92>
 8013a22:	1e7c      	subs	r4, r7, #1
 8013a24:	f105 0633 	add.w	r6, r5, #51	; 0x33
 8013a28:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013a2a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013a2e:	f806 3f01 	strb.w	r3, [r6, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8013a32:	7820      	ldrb	r0, [r4, #0]
 8013a34:	b108      	cbz	r0, 8013a3a <prvInitialiseNewTask.isra.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013a36:	42bc      	cmp	r4, r7
 8013a38:	d1f7      	bne.n	8013a2a <prvInitialiseNewTask.isra.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013a40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8013a42:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013a44:	1d28      	adds	r0, r5, #4
 8013a46:	2c06      	cmp	r4, #6
 8013a48:	bf28      	it	cs
 8013a4a:	2406      	movcs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 8013a4c:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8013a4e:	e9c5 4611 	strd	r4, r6, [r5, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a52:	f1c4 0407 	rsb	r4, r4, #7
 8013a56:	e9cd 1200 	strd	r1, r2, [sp]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013a5a:	f7ff f939 	bl	8012cd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013a5e:	f105 0018 	add.w	r0, r5, #24
 8013a62:	f7ff f935 	bl	8012cd0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8013a66:	64ee      	str	r6, [r5, #76]	; 0x4c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a68:	9a01      	ldr	r2, [sp, #4]
 8013a6a:	4640      	mov	r0, r8
 8013a6c:	9900      	ldr	r1, [sp, #0]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a6e:	61ac      	str	r4, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a70:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a74:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a76:	626d      	str	r5, [r5, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a78:	f001 f884 	bl	8014b84 <pxPortInitialiseStack>
 8013a7c:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8013a7e:	f1b9 0f00 	cmp.w	r9, #0
 8013a82:	d001      	beq.n	8013a88 <prvInitialiseNewTask.isra.0+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a84:	f8c9 5000 	str.w	r5, [r9]
}
 8013a88:	b003      	add	sp, #12
 8013a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013a8e:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 8013a92:	e7d5      	b.n	8013a40 <prvInitialiseNewTask.isra.0+0x44>

08013a94 <prvDeleteTCB>:
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013a94:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8013a98:	b173      	cbz	r3, 8013ab8 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013a9a:	2b01      	cmp	r3, #1
 8013a9c:	d017      	beq.n	8013ace <prvDeleteTCB+0x3a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013a9e:	2b02      	cmp	r3, #2
 8013aa0:	d014      	beq.n	8013acc <prvDeleteTCB+0x38>
	__asm volatile
 8013aa2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013aa6:	b672      	cpsid	i
 8013aa8:	f383 8811 	msr	BASEPRI, r3
 8013aac:	f3bf 8f6f 	isb	sy
 8013ab0:	f3bf 8f4f 	dsb	sy
 8013ab4:	b662      	cpsie	i
 8013ab6:	e7fe      	b.n	8013ab6 <prvDeleteTCB+0x22>
	{
 8013ab8:	b510      	push	{r4, lr}
 8013aba:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 8013abc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013abe:	f001 fa9d 	bl	8014ffc <vPortFree>
				vPortFree( pxTCB );
 8013ac2:	4620      	mov	r0, r4
	}
 8013ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8013ac8:	f001 ba98 	b.w	8014ffc <vPortFree>
 8013acc:	4770      	bx	lr
				vPortFree( pxTCB );
 8013ace:	f001 ba95 	b.w	8014ffc <vPortFree>
 8013ad2:	bf00      	nop

08013ad4 <prvIdleTask>:
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	4c16      	ldr	r4, [pc, #88]	; (8013b30 <prvIdleTask+0x5c>)
				taskYIELD();
 8013ad8:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8013adc:	4f15      	ldr	r7, [pc, #84]	; (8013b34 <prvIdleTask+0x60>)
 8013ade:	4d16      	ldr	r5, [pc, #88]	; (8013b38 <prvIdleTask+0x64>)
 8013ae0:	4e16      	ldr	r6, [pc, #88]	; (8013b3c <prvIdleTask+0x68>)
 8013ae2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8013b40 <prvIdleTask+0x6c>
 8013ae6:	e013      	b.n	8013b10 <prvIdleTask+0x3c>
			taskENTER_CRITICAL();
 8013ae8:	f001 f87c 	bl	8014be4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013af2:	f10a 0004 	add.w	r0, sl, #4
 8013af6:	f7ff f917 	bl	8012d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013afa:	682b      	ldr	r3, [r5, #0]
 8013afc:	3b01      	subs	r3, #1
 8013afe:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013b00:	6823      	ldr	r3, [r4, #0]
 8013b02:	3b01      	subs	r3, #1
 8013b04:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8013b06:	f001 f893 	bl	8014c30 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8013b0a:	4650      	mov	r0, sl
 8013b0c:	f7ff ffc2 	bl	8013a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013b10:	6823      	ldr	r3, [r4, #0]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d1e8      	bne.n	8013ae8 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013b16:	6833      	ldr	r3, [r6, #0]
 8013b18:	2b01      	cmp	r3, #1
 8013b1a:	d905      	bls.n	8013b28 <prvIdleTask+0x54>
				taskYIELD();
 8013b1c:	f8c8 9000 	str.w	r9, [r8]
 8013b20:	f3bf 8f4f 	dsb	sy
 8013b24:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8013b28:	f7ed f846 	bl	8000bb8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013b2c:	e7f0      	b.n	8013b10 <prvIdleTask+0x3c>
 8013b2e:	bf00      	nop
 8013b30:	20001d98 	.word	0x20001d98
 8013b34:	20001e08 	.word	0x20001e08
 8013b38:	20001d94 	.word	0x20001d94
 8013b3c:	20001d08 	.word	0x20001d08
 8013b40:	e000ed04 	.word	0xe000ed04

08013b44 <xTaskCreateStatic>:
	{
 8013b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b46:	b087      	sub	sp, #28
 8013b48:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8013b4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 8013b4e:	b1dd      	cbz	r5, 8013b88 <xTaskCreateStatic+0x44>
		configASSERT( pxTaskBuffer != NULL );
 8013b50:	b17c      	cbz	r4, 8013b72 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8013b52:	2754      	movs	r7, #84	; 0x54
 8013b54:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013b56:	9f05      	ldr	r7, [sp, #20]
 8013b58:	2f54      	cmp	r7, #84	; 0x54
 8013b5a:	d020      	beq.n	8013b9e <xTaskCreateStatic+0x5a>
 8013b5c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b60:	b672      	cpsid	i
 8013b62:	f383 8811 	msr	BASEPRI, r3
 8013b66:	f3bf 8f6f 	isb	sy
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	b662      	cpsie	i
 8013b70:	e7fe      	b.n	8013b70 <xTaskCreateStatic+0x2c>
 8013b72:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b76:	b672      	cpsid	i
 8013b78:	f383 8811 	msr	BASEPRI, r3
 8013b7c:	f3bf 8f6f 	isb	sy
 8013b80:	f3bf 8f4f 	dsb	sy
 8013b84:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8013b86:	e7fe      	b.n	8013b86 <xTaskCreateStatic+0x42>
 8013b88:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b8c:	b672      	cpsid	i
 8013b8e:	f383 8811 	msr	BASEPRI, r3
 8013b92:	f3bf 8f6f 	isb	sy
 8013b96:	f3bf 8f4f 	dsb	sy
 8013b9a:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8013b9c:	e7fe      	b.n	8013b9c <xTaskCreateStatic+0x58>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013b9e:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013ba0:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013ba2:	ad04      	add	r5, sp, #16
 8013ba4:	9402      	str	r4, [sp, #8]
 8013ba6:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013ba8:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013bac:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013bae:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013bb0:	f7ff ff24 	bl	80139fc <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f7ff fe37 	bl	8013828 <prvAddNewTaskToReadyList>
	}
 8013bba:	9804      	ldr	r0, [sp, #16]
 8013bbc:	b007      	add	sp, #28
 8013bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013bc0 <xTaskCreate>:
	{
 8013bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bc4:	4607      	mov	r7, r0
 8013bc6:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013bc8:	0090      	lsls	r0, r2, #2
	{
 8013bca:	4615      	mov	r5, r2
 8013bcc:	4688      	mov	r8, r1
 8013bce:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013bd0:	f001 f976 	bl	8014ec0 <pvPortMalloc>
			if( pxStack != NULL )
 8013bd4:	b1e0      	cbz	r0, 8013c10 <xTaskCreate+0x50>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	2054      	movs	r0, #84	; 0x54
 8013bda:	f001 f971 	bl	8014ec0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8013bde:	4606      	mov	r6, r0
 8013be0:	b1d8      	cbz	r0, 8013c1a <xTaskCreate+0x5a>
					pxNewTCB->pxStack = pxStack;
 8013be2:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013be4:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013be8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013bea:	464b      	mov	r3, r9
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013bec:	f886 c051 	strb.w	ip, [r6, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013bf0:	462a      	mov	r2, r5
 8013bf2:	9401      	str	r4, [sp, #4]
 8013bf4:	4641      	mov	r1, r8
 8013bf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013bf8:	4638      	mov	r0, r7
 8013bfa:	9602      	str	r6, [sp, #8]
 8013bfc:	9400      	str	r4, [sp, #0]
 8013bfe:	f7ff fefd 	bl	80139fc <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c02:	4630      	mov	r0, r6
 8013c04:	f7ff fe10 	bl	8013828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013c08:	2001      	movs	r0, #1
	}
 8013c0a:	b005      	add	sp, #20
 8013c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013c10:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8013c14:	b005      	add	sp, #20
 8013c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	f001 f9ee 	bl	8014ffc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013c20:	f04f 30ff 	mov.w	r0, #4294967295
 8013c24:	e7f1      	b.n	8013c0a <xTaskCreate+0x4a>
 8013c26:	bf00      	nop

08013c28 <vTaskStartScheduler>:
{
 8013c28:	b530      	push	{r4, r5, lr}
 8013c2a:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013c2c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013c2e:	aa07      	add	r2, sp, #28
 8013c30:	a906      	add	r1, sp, #24
 8013c32:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013c34:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013c38:	f7ec ffc4 	bl	8000bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013c3c:	9905      	ldr	r1, [sp, #20]
 8013c3e:	9a06      	ldr	r2, [sp, #24]
 8013c40:	4623      	mov	r3, r4
 8013c42:	4818      	ldr	r0, [pc, #96]	; (8013ca4 <vTaskStartScheduler+0x7c>)
 8013c44:	9400      	str	r4, [sp, #0]
 8013c46:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013c4a:	9a07      	ldr	r2, [sp, #28]
 8013c4c:	4916      	ldr	r1, [pc, #88]	; (8013ca8 <vTaskStartScheduler+0x80>)
 8013c4e:	f7ff ff79 	bl	8013b44 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8013c52:	b1b8      	cbz	r0, 8013c84 <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8013c54:	f000 fd48 	bl	80146e8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8013c58:	2801      	cmp	r0, #1
 8013c5a:	d115      	bne.n	8013c88 <vTaskStartScheduler+0x60>
 8013c5c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c60:	b672      	cpsid	i
 8013c62:	f383 8811 	msr	BASEPRI, r3
 8013c66:	f3bf 8f6f 	isb	sy
 8013c6a:	f3bf 8f4f 	dsb	sy
 8013c6e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8013c70:	490e      	ldr	r1, [pc, #56]	; (8013cac <vTaskStartScheduler+0x84>)
 8013c72:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8013c76:	4a0e      	ldr	r2, [pc, #56]	; (8013cb0 <vTaskStartScheduler+0x88>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013c78:	4b0e      	ldr	r3, [pc, #56]	; (8013cb4 <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8013c7a:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8013c7c:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013c7e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8013c80:	f001 f856 	bl	8014d30 <xPortStartScheduler>
}
 8013c84:	b009      	add	sp, #36	; 0x24
 8013c86:	bd30      	pop	{r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013c88:	3001      	adds	r0, #1
 8013c8a:	d1fb      	bne.n	8013c84 <vTaskStartScheduler+0x5c>
 8013c8c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c90:	b672      	cpsid	i
 8013c92:	f383 8811 	msr	BASEPRI, r3
 8013c96:	f3bf 8f6f 	isb	sy
 8013c9a:	f3bf 8f4f 	dsb	sy
 8013c9e:	b662      	cpsie	i
 8013ca0:	e7fe      	b.n	8013ca0 <vTaskStartScheduler+0x78>
 8013ca2:	bf00      	nop
 8013ca4:	08013ad5 	.word	0x08013ad5
 8013ca8:	08028d4c 	.word	0x08028d4c
 8013cac:	20001dd4 	.word	0x20001dd4
 8013cb0:	20001df0 	.word	0x20001df0
 8013cb4:	20001e1c 	.word	0x20001e1c

08013cb8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8013cb8:	4a02      	ldr	r2, [pc, #8]	; (8013cc4 <vTaskSuspendAll+0xc>)
 8013cba:	6813      	ldr	r3, [r2, #0]
 8013cbc:	3301      	adds	r3, #1
 8013cbe:	6013      	str	r3, [r2, #0]
}
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop
 8013cc4:	20001da0 	.word	0x20001da0

08013cc8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8013cc8:	4b01      	ldr	r3, [pc, #4]	; (8013cd0 <xTaskGetTickCount+0x8>)
 8013cca:	6818      	ldr	r0, [r3, #0]
}
 8013ccc:	4770      	bx	lr
 8013cce:	bf00      	nop
 8013cd0:	20001e1c 	.word	0x20001e1c

08013cd4 <xTaskGetTickCountFromISR>:
{
 8013cd4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cd6:	f001 f891 	bl	8014dfc <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8013cda:	4b01      	ldr	r3, [pc, #4]	; (8013ce0 <xTaskGetTickCountFromISR+0xc>)
 8013cdc:	6818      	ldr	r0, [r3, #0]
}
 8013cde:	bd08      	pop	{r3, pc}
 8013ce0:	20001e1c 	.word	0x20001e1c

08013ce4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ce4:	4b4d      	ldr	r3, [pc, #308]	; (8013e1c <xTaskIncrementTick+0x138>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
{
 8013ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cec:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d14d      	bne.n	8013d8e <xTaskIncrementTick+0xaa>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013cf2:	4b4b      	ldr	r3, [pc, #300]	; (8013e20 <xTaskIncrementTick+0x13c>)
 8013cf4:	681e      	ldr	r6, [r3, #0]
 8013cf6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8013cf8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013cfa:	2e00      	cmp	r6, #0
 8013cfc:	d055      	beq.n	8013daa <xTaskIncrementTick+0xc6>
 8013cfe:	4d49      	ldr	r5, [pc, #292]	; (8013e24 <xTaskIncrementTick+0x140>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d00:	682b      	ldr	r3, [r5, #0]
 8013d02:	42b3      	cmp	r3, r6
 8013d04:	d866      	bhi.n	8013dd4 <xTaskIncrementTick+0xf0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d06:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8013e34 <xTaskIncrementTick+0x150>
 8013d0a:	f8d9 3000 	ldr.w	r3, [r9]
 8013d0e:	681c      	ldr	r4, [r3, #0]
 8013d10:	2c00      	cmp	r4, #0
 8013d12:	d079      	beq.n	8013e08 <xTaskIncrementTick+0x124>
BaseType_t xSwitchRequired = pdFALSE;
 8013d14:	2400      	movs	r4, #0
 8013d16:	4f44      	ldr	r7, [pc, #272]	; (8013e28 <xTaskIncrementTick+0x144>)
 8013d18:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8013e40 <xTaskIncrementTick+0x15c>
					prvAddTaskToReadyList( pxTCB );
 8013d1c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8013e44 <xTaskIncrementTick+0x160>
 8013d20:	e027      	b.n	8013d72 <xTaskIncrementTick+0x8e>
 8013d22:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d24:	f7ff f800 	bl	8012d28 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d28:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d2c:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d30:	9901      	ldr	r1, [sp, #4]
 8013d32:	b112      	cbz	r2, 8013d3a <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d34:	f7fe fff8 	bl	8012d28 <uxListRemove>
 8013d38:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8013d3a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8013d3e:	2201      	movs	r2, #1
 8013d40:	f8da 3000 	ldr.w	r3, [sl]
 8013d44:	4082      	lsls	r2, r0
 8013d46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013d4a:	431a      	orrs	r2, r3
 8013d4c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8013d50:	f8ca 2000 	str.w	r2, [sl]
 8013d54:	f7fe ffc0 	bl	8012cd8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d58:	f8d8 2000 	ldr.w	r2, [r8]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d5c:	f8d9 0000 	ldr.w	r0, [r9]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d60:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 8013d64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d66:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 8013d68:	4291      	cmp	r1, r2
 8013d6a:	bf28      	it	cs
 8013d6c:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d04d      	beq.n	8013e0e <xTaskIncrementTick+0x12a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d72:	f8d9 3000 	ldr.w	r3, [r9]
 8013d76:	68db      	ldr	r3, [r3, #12]
 8013d78:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d7c:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d80:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8013d84:	4296      	cmp	r6, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d86:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8013d88:	d2cb      	bcs.n	8013d22 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 8013d8a:	602a      	str	r2, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d8c:	e026      	b.n	8013ddc <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 8013d8e:	4a27      	ldr	r2, [pc, #156]	; (8013e2c <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 8013d90:	2400      	movs	r4, #0
		++uxPendedTicks;
 8013d92:	6813      	ldr	r3, [r2, #0]
 8013d94:	3301      	adds	r3, #1
 8013d96:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8013d98:	4b25      	ldr	r3, [pc, #148]	; (8013e30 <xTaskIncrementTick+0x14c>)
 8013d9a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8013d9c:	2b00      	cmp	r3, #0
}
 8013d9e:	bf0c      	ite	eq
 8013da0:	4620      	moveq	r0, r4
 8013da2:	2001      	movne	r0, #1
 8013da4:	b003      	add	sp, #12
 8013da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8013daa:	4b22      	ldr	r3, [pc, #136]	; (8013e34 <xTaskIncrementTick+0x150>)
 8013dac:	681a      	ldr	r2, [r3, #0]
 8013dae:	6812      	ldr	r2, [r2, #0]
 8013db0:	b9fa      	cbnz	r2, 8013df2 <xTaskIncrementTick+0x10e>
 8013db2:	4a21      	ldr	r2, [pc, #132]	; (8013e38 <xTaskIncrementTick+0x154>)
 8013db4:	6818      	ldr	r0, [r3, #0]
 8013db6:	4921      	ldr	r1, [pc, #132]	; (8013e3c <xTaskIncrementTick+0x158>)
 8013db8:	6814      	ldr	r4, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8013dba:	4d1a      	ldr	r5, [pc, #104]	; (8013e24 <xTaskIncrementTick+0x140>)
			taskSWITCH_DELAYED_LISTS();
 8013dbc:	601c      	str	r4, [r3, #0]
 8013dbe:	6010      	str	r0, [r2, #0]
 8013dc0:	680a      	ldr	r2, [r1, #0]
 8013dc2:	3201      	adds	r2, #1
 8013dc4:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	bb23      	cbnz	r3, 8013e16 <xTaskIncrementTick+0x132>
		xNextTaskUnblockTime = portMAX_DELAY;
 8013dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8013dd0:	602b      	str	r3, [r5, #0]
 8013dd2:	e795      	b.n	8013d00 <xTaskIncrementTick+0x1c>
BaseType_t xSwitchRequired = pdFALSE;
 8013dd4:	2400      	movs	r4, #0
 8013dd6:	4f14      	ldr	r7, [pc, #80]	; (8013e28 <xTaskIncrementTick+0x144>)
 8013dd8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8013e40 <xTaskIncrementTick+0x15c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8013de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013de2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013de6:	009b      	lsls	r3, r3, #2
 8013de8:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8013dea:	2b02      	cmp	r3, #2
 8013dec:	bf28      	it	cs
 8013dee:	2401      	movcs	r4, #1
 8013df0:	e7d2      	b.n	8013d98 <xTaskIncrementTick+0xb4>
 8013df2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013df6:	b672      	cpsid	i
 8013df8:	f383 8811 	msr	BASEPRI, r3
 8013dfc:	f3bf 8f6f 	isb	sy
 8013e00:	f3bf 8f4f 	dsb	sy
 8013e04:	b662      	cpsie	i
			taskSWITCH_DELAYED_LISTS();
 8013e06:	e7fe      	b.n	8013e06 <xTaskIncrementTick+0x122>
 8013e08:	4f07      	ldr	r7, [pc, #28]	; (8013e28 <xTaskIncrementTick+0x144>)
 8013e0a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8013e40 <xTaskIncrementTick+0x15c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e12:	602b      	str	r3, [r5, #0]
					break;
 8013e14:	e7e2      	b.n	8013ddc <xTaskIncrementTick+0xf8>
 8013e16:	f7ff fde5 	bl	80139e4 <prvResetNextTaskUnblockTime.part.0>
 8013e1a:	e771      	b.n	8013d00 <xTaskIncrementTick+0x1c>
 8013e1c:	20001da0 	.word	0x20001da0
 8013e20:	20001e1c 	.word	0x20001e1c
 8013e24:	20001dd4 	.word	0x20001dd4
 8013e28:	20001d08 	.word	0x20001d08
 8013e2c:	20001d9c 	.word	0x20001d9c
 8013e30:	20001e20 	.word	0x20001e20
 8013e34:	20001d00 	.word	0x20001d00
 8013e38:	20001d04 	.word	0x20001d04
 8013e3c:	20001dd8 	.word	0x20001dd8
 8013e40:	20001cfc 	.word	0x20001cfc
 8013e44:	20001da8 	.word	0x20001da8

08013e48 <xTaskResumeAll>:
{
 8013e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8013e4c:	4c3a      	ldr	r4, [pc, #232]	; (8013f38 <xTaskResumeAll+0xf0>)
 8013e4e:	6823      	ldr	r3, [r4, #0]
 8013e50:	b953      	cbnz	r3, 8013e68 <xTaskResumeAll+0x20>
 8013e52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013e56:	b672      	cpsid	i
 8013e58:	f383 8811 	msr	BASEPRI, r3
 8013e5c:	f3bf 8f6f 	isb	sy
 8013e60:	f3bf 8f4f 	dsb	sy
 8013e64:	b662      	cpsie	i
 8013e66:	e7fe      	b.n	8013e66 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8013e68:	f000 febc 	bl	8014be4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8013e6c:	6823      	ldr	r3, [r4, #0]
 8013e6e:	3b01      	subs	r3, #1
 8013e70:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e72:	6823      	ldr	r3, [r4, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d13c      	bne.n	8013ef2 <xTaskResumeAll+0xaa>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013e78:	4b30      	ldr	r3, [pc, #192]	; (8013f3c <xTaskResumeAll+0xf4>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d038      	beq.n	8013ef2 <xTaskResumeAll+0xaa>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013e80:	4e2f      	ldr	r6, [pc, #188]	; (8013f40 <xTaskResumeAll+0xf8>)
 8013e82:	6833      	ldr	r3, [r6, #0]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d03a      	beq.n	8013efe <xTaskResumeAll+0xb6>
 8013e88:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8013f58 <xTaskResumeAll+0x110>
					prvAddTaskToReadyList( pxTCB );
 8013e8c:	2701      	movs	r7, #1
 8013e8e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8013f5c <xTaskResumeAll+0x114>
 8013e92:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8013f60 <xTaskResumeAll+0x118>
 8013e96:	4d2b      	ldr	r5, [pc, #172]	; (8013f44 <xTaskResumeAll+0xfc>)
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e98:	68f3      	ldr	r3, [r6, #12]
 8013e9a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e9c:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ea0:	f104 0018 	add.w	r0, r4, #24
 8013ea4:	f7fe ff40 	bl	8012d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ea8:	4658      	mov	r0, fp
 8013eaa:	f7fe ff3d 	bl	8012d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013eae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013eb0:	f8d8 2000 	ldr.w	r2, [r8]
 8013eb4:	4659      	mov	r1, fp
 8013eb6:	fa07 f300 	lsl.w	r3, r7, r0
 8013eba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013ebe:	4313      	orrs	r3, r2
 8013ec0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013ec4:	f8c8 3000 	str.w	r3, [r8]
 8013ec8:	f7fe ff06 	bl	8012cd8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ecc:	f8da 3000 	ldr.w	r3, [sl]
 8013ed0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	d300      	bcc.n	8013eda <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 8013ed8:	602f      	str	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013eda:	6833      	ldr	r3, [r6, #0]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d1db      	bne.n	8013e98 <xTaskResumeAll+0x50>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ee0:	4b19      	ldr	r3, [pc, #100]	; (8013f48 <xTaskResumeAll+0x100>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	bb1b      	cbnz	r3, 8013f30 <xTaskResumeAll+0xe8>
		xNextTaskUnblockTime = portMAX_DELAY;
 8013ee8:	4b18      	ldr	r3, [pc, #96]	; (8013f4c <xTaskResumeAll+0x104>)
 8013eea:	f04f 32ff 	mov.w	r2, #4294967295
 8013eee:	601a      	str	r2, [r3, #0]
 8013ef0:	e006      	b.n	8013f00 <xTaskResumeAll+0xb8>
BaseType_t xAlreadyYielded = pdFALSE;
 8013ef2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8013ef4:	f000 fe9c 	bl	8014c30 <vPortExitCritical>
}
 8013ef8:	4620      	mov	r0, r4
 8013efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013efe:	4d11      	ldr	r5, [pc, #68]	; (8013f44 <xTaskResumeAll+0xfc>)
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013f00:	4e13      	ldr	r6, [pc, #76]	; (8013f50 <xTaskResumeAll+0x108>)
 8013f02:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013f04:	b13c      	cbz	r4, 8013f16 <xTaskResumeAll+0xce>
								xYieldPending = pdTRUE;
 8013f06:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8013f08:	f7ff feec 	bl	8013ce4 <xTaskIncrementTick>
 8013f0c:	b100      	cbz	r0, 8013f10 <xTaskResumeAll+0xc8>
								xYieldPending = pdTRUE;
 8013f0e:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013f10:	3c01      	subs	r4, #1
 8013f12:	d1f9      	bne.n	8013f08 <xTaskResumeAll+0xc0>
						uxPendedTicks = 0;
 8013f14:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8013f16:	682b      	ldr	r3, [r5, #0]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d0ea      	beq.n	8013ef2 <xTaskResumeAll+0xaa>
					taskYIELD_IF_USING_PREEMPTION();
 8013f1c:	4b0d      	ldr	r3, [pc, #52]	; (8013f54 <xTaskResumeAll+0x10c>)
 8013f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f22:	601a      	str	r2, [r3, #0]
 8013f24:	f3bf 8f4f 	dsb	sy
 8013f28:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8013f2c:	2401      	movs	r4, #1
 8013f2e:	e7e1      	b.n	8013ef4 <xTaskResumeAll+0xac>
 8013f30:	f7ff fd58 	bl	80139e4 <prvResetNextTaskUnblockTime.part.0>
 8013f34:	e7e4      	b.n	8013f00 <xTaskResumeAll+0xb8>
 8013f36:	bf00      	nop
 8013f38:	20001da0 	.word	0x20001da0
 8013f3c:	20001d94 	.word	0x20001d94
 8013f40:	20001ddc 	.word	0x20001ddc
 8013f44:	20001e20 	.word	0x20001e20
 8013f48:	20001d00 	.word	0x20001d00
 8013f4c:	20001dd4 	.word	0x20001dd4
 8013f50:	20001d9c 	.word	0x20001d9c
 8013f54:	e000ed04 	.word	0xe000ed04
 8013f58:	20001da8 	.word	0x20001da8
 8013f5c:	20001d08 	.word	0x20001d08
 8013f60:	20001cfc 	.word	0x20001cfc

08013f64 <vTaskDelay>:
	{
 8013f64:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013f66:	b1a8      	cbz	r0, 8013f94 <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 8013f68:	4b0f      	ldr	r3, [pc, #60]	; (8013fa8 <vTaskDelay+0x44>)
 8013f6a:	6819      	ldr	r1, [r3, #0]
 8013f6c:	b151      	cbz	r1, 8013f84 <vTaskDelay+0x20>
 8013f6e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f72:	b672      	cpsid	i
 8013f74:	f383 8811 	msr	BASEPRI, r3
 8013f78:	f3bf 8f6f 	isb	sy
 8013f7c:	f3bf 8f4f 	dsb	sy
 8013f80:	b662      	cpsie	i
 8013f82:	e7fe      	b.n	8013f82 <vTaskDelay+0x1e>
	++uxSchedulerSuspended;
 8013f84:	681a      	ldr	r2, [r3, #0]
 8013f86:	3201      	adds	r2, #1
 8013f88:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013f8a:	f7ff fce7 	bl	801395c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8013f8e:	f7ff ff5b 	bl	8013e48 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8013f92:	b938      	cbnz	r0, 8013fa4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8013f94:	4b05      	ldr	r3, [pc, #20]	; (8013fac <vTaskDelay+0x48>)
 8013f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f9a:	601a      	str	r2, [r3, #0]
 8013f9c:	f3bf 8f4f 	dsb	sy
 8013fa0:	f3bf 8f6f 	isb	sy
	}
 8013fa4:	bd08      	pop	{r3, pc}
 8013fa6:	bf00      	nop
 8013fa8:	20001da0 	.word	0x20001da0
 8013fac:	e000ed04 	.word	0xe000ed04

08013fb0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013fb0:	4b1e      	ldr	r3, [pc, #120]	; (801402c <vTaskSwitchContext+0x7c>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	b11b      	cbz	r3, 8013fbe <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8013fb6:	4b1e      	ldr	r3, [pc, #120]	; (8014030 <vTaskSwitchContext+0x80>)
 8013fb8:	2201      	movs	r2, #1
 8013fba:	601a      	str	r2, [r3, #0]
 8013fbc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8013fbe:	4a1c      	ldr	r2, [pc, #112]	; (8014030 <vTaskSwitchContext+0x80>)
{
 8013fc0:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 8013fc2:	4c1c      	ldr	r4, [pc, #112]	; (8014034 <vTaskSwitchContext+0x84>)
		xYieldPending = pdFALSE;
 8013fc4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013fc6:	6822      	ldr	r2, [r4, #0]
 8013fc8:	6823      	ldr	r3, [r4, #0]
 8013fca:	6812      	ldr	r2, [r2, #0]
 8013fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d923      	bls.n	801401a <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fd2:	4b19      	ldr	r3, [pc, #100]	; (8014038 <vTaskSwitchContext+0x88>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013fd6:	fab3 f383 	clz	r3, r3
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	4a17      	ldr	r2, [pc, #92]	; (801403c <vTaskSwitchContext+0x8c>)
 8013fde:	f1c3 031f 	rsb	r3, r3, #31
 8013fe2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013fe6:	0099      	lsls	r1, r3, #2
 8013fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013fec:	5850      	ldr	r0, [r2, r1]
 8013fee:	b950      	cbnz	r0, 8014006 <vTaskSwitchContext+0x56>
	__asm volatile
 8013ff0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ff4:	b672      	cpsid	i
 8013ff6:	f383 8811 	msr	BASEPRI, r3
 8013ffa:	f3bf 8f6f 	isb	sy
 8013ffe:	f3bf 8f4f 	dsb	sy
 8014002:	b662      	cpsie	i
 8014004:	e7fe      	b.n	8014004 <vTaskSwitchContext+0x54>
 8014006:	6858      	ldr	r0, [r3, #4]
 8014008:	3108      	adds	r1, #8
 801400a:	4411      	add	r1, r2
 801400c:	6842      	ldr	r2, [r0, #4]
 801400e:	428a      	cmp	r2, r1
 8014010:	605a      	str	r2, [r3, #4]
 8014012:	d008      	beq.n	8014026 <vTaskSwitchContext+0x76>
 8014014:	68d3      	ldr	r3, [r2, #12]
 8014016:	6023      	str	r3, [r4, #0]
}
 8014018:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 801401a:	6820      	ldr	r0, [r4, #0]
 801401c:	6821      	ldr	r1, [r4, #0]
 801401e:	3134      	adds	r1, #52	; 0x34
 8014020:	f7ec fdcc 	bl	8000bbc <vApplicationStackOverflowHook>
 8014024:	e7d5      	b.n	8013fd2 <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014026:	6852      	ldr	r2, [r2, #4]
 8014028:	605a      	str	r2, [r3, #4]
 801402a:	e7f3      	b.n	8014014 <vTaskSwitchContext+0x64>
 801402c:	20001da0 	.word	0x20001da0
 8014030:	20001e20 	.word	0x20001e20
 8014034:	20001cfc 	.word	0x20001cfc
 8014038:	20001da8 	.word	0x20001da8
 801403c:	20001d08 	.word	0x20001d08

08014040 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8014040:	b160      	cbz	r0, 801405c <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014042:	4b0c      	ldr	r3, [pc, #48]	; (8014074 <vTaskPlaceOnEventList+0x34>)
{
 8014044:	b510      	push	{r4, lr}
 8014046:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014048:	6819      	ldr	r1, [r3, #0]
 801404a:	3118      	adds	r1, #24
 801404c:	f7fe fe54 	bl	8012cf8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014050:	4620      	mov	r0, r4
 8014052:	2101      	movs	r1, #1
}
 8014054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014058:	f7ff bc80 	b.w	801395c <prvAddCurrentTaskToDelayedList>
 801405c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014060:	b672      	cpsid	i
 8014062:	f383 8811 	msr	BASEPRI, r3
 8014066:	f3bf 8f6f 	isb	sy
 801406a:	f3bf 8f4f 	dsb	sy
 801406e:	b662      	cpsie	i
	configASSERT( pxEventList );
 8014070:	e7fe      	b.n	8014070 <vTaskPlaceOnEventList+0x30>
 8014072:	bf00      	nop
 8014074:	20001cfc 	.word	0x20001cfc

08014078 <vTaskPlaceOnEventListRestricted>:
	{
 8014078:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 801407a:	b180      	cbz	r0, 801409e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801407c:	4b0d      	ldr	r3, [pc, #52]	; (80140b4 <vTaskPlaceOnEventListRestricted+0x3c>)
 801407e:	460d      	mov	r5, r1
 8014080:	4614      	mov	r4, r2
 8014082:	6819      	ldr	r1, [r3, #0]
 8014084:	3118      	adds	r1, #24
 8014086:	f7fe fe27 	bl	8012cd8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 801408a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801408c:	4621      	mov	r1, r4
 801408e:	bf0c      	ite	eq
 8014090:	4628      	moveq	r0, r5
 8014092:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8014096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801409a:	f7ff bc5f 	b.w	801395c <prvAddCurrentTaskToDelayedList>
 801409e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80140a2:	b672      	cpsid	i
 80140a4:	f383 8811 	msr	BASEPRI, r3
 80140a8:	f3bf 8f6f 	isb	sy
 80140ac:	f3bf 8f4f 	dsb	sy
 80140b0:	b662      	cpsie	i
		configASSERT( pxEventList );
 80140b2:	e7fe      	b.n	80140b2 <vTaskPlaceOnEventListRestricted+0x3a>
 80140b4:	20001cfc 	.word	0x20001cfc

080140b8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140b8:	68c3      	ldr	r3, [r0, #12]
{
 80140ba:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140bc:	68dc      	ldr	r4, [r3, #12]
{
 80140be:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 80140c0:	b364      	cbz	r4, 801411c <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80140c2:	f104 0118 	add.w	r1, r4, #24
 80140c6:	4608      	mov	r0, r1
 80140c8:	9101      	str	r1, [sp, #4]
 80140ca:	f7fe fe2d 	bl	8012d28 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80140ce:	4b1a      	ldr	r3, [pc, #104]	; (8014138 <xTaskRemoveFromEventList+0x80>)
 80140d0:	9901      	ldr	r1, [sp, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	b16b      	cbz	r3, 80140f2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80140d6:	4819      	ldr	r0, [pc, #100]	; (801413c <xTaskRemoveFromEventList+0x84>)
 80140d8:	f7fe fdfe 	bl	8012cd8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80140dc:	4b18      	ldr	r3, [pc, #96]	; (8014140 <xTaskRemoveFromEventList+0x88>)
 80140de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d924      	bls.n	8014132 <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 80140e8:	2001      	movs	r0, #1
 80140ea:	4b16      	ldr	r3, [pc, #88]	; (8014144 <xTaskRemoveFromEventList+0x8c>)
 80140ec:	6018      	str	r0, [r3, #0]
}
 80140ee:	b002      	add	sp, #8
 80140f0:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80140f2:	1d21      	adds	r1, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 80140f4:	4d14      	ldr	r5, [pc, #80]	; (8014148 <xTaskRemoveFromEventList+0x90>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80140f6:	4608      	mov	r0, r1
 80140f8:	9101      	str	r1, [sp, #4]
 80140fa:	f7fe fe15 	bl	8012d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80140fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014100:	2301      	movs	r3, #1
 8014102:	682e      	ldr	r6, [r5, #0]
 8014104:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8014108:	9901      	ldr	r1, [sp, #4]
 801410a:	4093      	lsls	r3, r2
 801410c:	4a0f      	ldr	r2, [pc, #60]	; (801414c <xTaskRemoveFromEventList+0x94>)
 801410e:	4333      	orrs	r3, r6
 8014110:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8014114:	602b      	str	r3, [r5, #0]
 8014116:	f7fe fddf 	bl	8012cd8 <vListInsertEnd>
 801411a:	e7df      	b.n	80140dc <xTaskRemoveFromEventList+0x24>
 801411c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014120:	b672      	cpsid	i
 8014122:	f383 8811 	msr	BASEPRI, r3
 8014126:	f3bf 8f6f 	isb	sy
 801412a:	f3bf 8f4f 	dsb	sy
 801412e:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8014130:	e7fe      	b.n	8014130 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8014132:	2000      	movs	r0, #0
}
 8014134:	b002      	add	sp, #8
 8014136:	bd70      	pop	{r4, r5, r6, pc}
 8014138:	20001da0 	.word	0x20001da0
 801413c:	20001ddc 	.word	0x20001ddc
 8014140:	20001cfc 	.word	0x20001cfc
 8014144:	20001e20 	.word	0x20001e20
 8014148:	20001da8 	.word	0x20001da8
 801414c:	20001d08 	.word	0x20001d08

08014150 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014150:	4a03      	ldr	r2, [pc, #12]	; (8014160 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014152:	4b04      	ldr	r3, [pc, #16]	; (8014164 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014154:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	e9c0 2300 	strd	r2, r3, [r0]
}
 801415c:	4770      	bx	lr
 801415e:	bf00      	nop
 8014160:	20001dd8 	.word	0x20001dd8
 8014164:	20001e1c 	.word	0x20001e1c

08014168 <xTaskCheckForTimeOut>:
{
 8014168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801416a:	b318      	cbz	r0, 80141b4 <xTaskCheckForTimeOut+0x4c>
	configASSERT( pxTicksToWait );
 801416c:	460d      	mov	r5, r1
 801416e:	b1b1      	cbz	r1, 801419e <xTaskCheckForTimeOut+0x36>
 8014170:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8014172:	f000 fd37 	bl	8014be4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8014176:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8014178:	f8df c080 	ldr.w	ip, [pc, #128]	; 80141fc <xTaskCheckForTimeOut+0x94>
			if( *pxTicksToWait == portMAX_DELAY )
 801417c:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 801417e:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8014182:	d02f      	beq.n	80141e4 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014184:	4e1c      	ldr	r6, [pc, #112]	; (80141f8 <xTaskCheckForTimeOut+0x90>)
 8014186:	e9d4 0200 	ldrd	r0, r2, [r4]
 801418a:	6837      	ldr	r7, [r6, #0]
 801418c:	42b8      	cmp	r0, r7
 801418e:	d01c      	beq.n	80141ca <xTaskCheckForTimeOut+0x62>
 8014190:	428a      	cmp	r2, r1
 8014192:	d81a      	bhi.n	80141ca <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 8014194:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 8014196:	f000 fd4b 	bl	8014c30 <vPortExitCritical>
}
 801419a:	4630      	mov	r0, r6
 801419c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801419e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80141a2:	b672      	cpsid	i
 80141a4:	f383 8811 	msr	BASEPRI, r3
 80141a8:	f3bf 8f6f 	isb	sy
 80141ac:	f3bf 8f4f 	dsb	sy
 80141b0:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 80141b2:	e7fe      	b.n	80141b2 <xTaskCheckForTimeOut+0x4a>
 80141b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80141b8:	b672      	cpsid	i
 80141ba:	f383 8811 	msr	BASEPRI, r3
 80141be:	f3bf 8f6f 	isb	sy
 80141c2:	f3bf 8f4f 	dsb	sy
 80141c6:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 80141c8:	e7fe      	b.n	80141c8 <xTaskCheckForTimeOut+0x60>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80141ca:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80141cc:	42bb      	cmp	r3, r7
 80141ce:	d90e      	bls.n	80141ee <xTaskCheckForTimeOut+0x86>
			*pxTicksToWait -= xElapsedTime;
 80141d0:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80141d2:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80141d4:	f8dc 1000 	ldr.w	r1, [ip]
			xReturn = pdFALSE;
 80141d8:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 80141da:	4413      	add	r3, r2
 80141dc:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80141de:	e9c4 7100 	strd	r7, r1, [r4]
			xReturn = pdFALSE;
 80141e2:	e7d8      	b.n	8014196 <xTaskCheckForTimeOut+0x2e>
				xReturn = pdFALSE;
 80141e4:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 80141e6:	f000 fd23 	bl	8014c30 <vPortExitCritical>
}
 80141ea:	4630      	mov	r0, r6
 80141ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 80141ee:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80141f0:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 80141f2:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80141f4:	e7cf      	b.n	8014196 <xTaskCheckForTimeOut+0x2e>
 80141f6:	bf00      	nop
 80141f8:	20001dd8 	.word	0x20001dd8
 80141fc:	20001e1c 	.word	0x20001e1c

08014200 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8014200:	4b01      	ldr	r3, [pc, #4]	; (8014208 <vTaskMissedYield+0x8>)
 8014202:	2201      	movs	r2, #1
 8014204:	601a      	str	r2, [r3, #0]
}
 8014206:	4770      	bx	lr
 8014208:	20001e20 	.word	0x20001e20

0801420c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801420c:	4b01      	ldr	r3, [pc, #4]	; (8014214 <xTaskGetCurrentTaskHandle+0x8>)
 801420e:	6818      	ldr	r0, [r3, #0]
	}
 8014210:	4770      	bx	lr
 8014212:	bf00      	nop
 8014214:	20001cfc 	.word	0x20001cfc

08014218 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8014218:	4b05      	ldr	r3, [pc, #20]	; (8014230 <xTaskGetSchedulerState+0x18>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	b133      	cbz	r3, 801422c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801421e:	4b05      	ldr	r3, [pc, #20]	; (8014234 <xTaskGetSchedulerState+0x1c>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8014224:	bf0c      	ite	eq
 8014226:	2002      	moveq	r0, #2
 8014228:	2000      	movne	r0, #0
 801422a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801422c:	2001      	movs	r0, #1
	}
 801422e:	4770      	bx	lr
 8014230:	20001df0 	.word	0x20001df0
 8014234:	20001da0 	.word	0x20001da0

08014238 <xTaskPriorityInherit>:
	{
 8014238:	b5f0      	push	{r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 801423a:	4604      	mov	r4, r0
	{
 801423c:	b083      	sub	sp, #12
		if( pxMutexHolder != NULL )
 801423e:	b1c8      	cbz	r0, 8014274 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014240:	4d26      	ldr	r5, [pc, #152]	; (80142dc <xTaskPriorityInherit+0xa4>)
 8014242:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014244:	682a      	ldr	r2, [r5, #0]
 8014246:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014248:	4293      	cmp	r3, r2
 801424a:	d215      	bcs.n	8014278 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801424c:	6982      	ldr	r2, [r0, #24]
 801424e:	2a00      	cmp	r2, #0
 8014250:	db04      	blt.n	801425c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014252:	682a      	ldr	r2, [r5, #0]
 8014254:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014256:	f1c2 0207 	rsb	r2, r2, #7
 801425a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801425c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014260:	4e1f      	ldr	r6, [pc, #124]	; (80142e0 <xTaskPriorityInherit+0xa8>)
 8014262:	6962      	ldr	r2, [r4, #20]
 8014264:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014268:	429a      	cmp	r2, r3
 801426a:	d00e      	beq.n	801428a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801426c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 801426e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014272:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8014274:	b003      	add	sp, #12
 8014276:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014278:	682b      	ldr	r3, [r5, #0]
 801427a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801427e:	4298      	cmp	r0, r3
 8014280:	bf2c      	ite	cs
 8014282:	2000      	movcs	r0, #0
 8014284:	2001      	movcc	r0, #1
	}
 8014286:	b003      	add	sp, #12
 8014288:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801428a:	1d21      	adds	r1, r4, #4
 801428c:	4608      	mov	r0, r1
 801428e:	9101      	str	r1, [sp, #4]
 8014290:	f7fe fd4a 	bl	8012d28 <uxListRemove>
 8014294:	9901      	ldr	r1, [sp, #4]
 8014296:	b970      	cbnz	r0, 80142b6 <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8014298:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801429a:	4a12      	ldr	r2, [pc, #72]	; (80142e4 <xTaskPriorityInherit+0xac>)
 801429c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80142a0:	009b      	lsls	r3, r3, #2
 80142a2:	58f3      	ldr	r3, [r6, r3]
 80142a4:	b943      	cbnz	r3, 80142b8 <xTaskPriorityInherit+0x80>
 80142a6:	2701      	movs	r7, #1
 80142a8:	6813      	ldr	r3, [r2, #0]
 80142aa:	fa07 f000 	lsl.w	r0, r7, r0
 80142ae:	ea23 0300 	bic.w	r3, r3, r0
 80142b2:	6013      	str	r3, [r2, #0]
 80142b4:	e000      	b.n	80142b8 <xTaskPriorityInherit+0x80>
 80142b6:	4a0b      	ldr	r2, [pc, #44]	; (80142e4 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80142b8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80142ba:	2501      	movs	r5, #1
 80142bc:	6817      	ldr	r7, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80142be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80142c0:	fa05 f300 	lsl.w	r3, r5, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80142c4:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80142c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80142ca:	433b      	orrs	r3, r7
 80142cc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80142d0:	6013      	str	r3, [r2, #0]
 80142d2:	f7fe fd01 	bl	8012cd8 <vListInsertEnd>
				xReturn = pdTRUE;
 80142d6:	4628      	mov	r0, r5
 80142d8:	e7cc      	b.n	8014274 <xTaskPriorityInherit+0x3c>
 80142da:	bf00      	nop
 80142dc:	20001cfc 	.word	0x20001cfc
 80142e0:	20001d08 	.word	0x20001d08
 80142e4:	20001da8 	.word	0x20001da8

080142e8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80142e8:	b1e8      	cbz	r0, 8014326 <xTaskPriorityDisinherit+0x3e>
			configASSERT( pxTCB == pxCurrentTCB );
 80142ea:	4b2c      	ldr	r3, [pc, #176]	; (801439c <xTaskPriorityDisinherit+0xb4>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	4283      	cmp	r3, r0
	{
 80142f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142f2:	4604      	mov	r4, r0
 80142f4:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 80142f6:	d00a      	beq.n	801430e <xTaskPriorityDisinherit+0x26>
 80142f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80142fc:	b672      	cpsid	i
 80142fe:	f383 8811 	msr	BASEPRI, r3
 8014302:	f3bf 8f6f 	isb	sy
 8014306:	f3bf 8f4f 	dsb	sy
 801430a:	b662      	cpsie	i
 801430c:	e7fe      	b.n	801430c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014310:	b15b      	cbz	r3, 801432a <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014312:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8014314:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014316:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8014318:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801431a:	4291      	cmp	r1, r2
 801431c:	d000      	beq.n	8014320 <xTaskPriorityDisinherit+0x38>
 801431e:	b17b      	cbz	r3, 8014340 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8014320:	2000      	movs	r0, #0
	}
 8014322:	b003      	add	sp, #12
 8014324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 8014326:	2000      	movs	r0, #0
	}
 8014328:	4770      	bx	lr
 801432a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801432e:	b672      	cpsid	i
 8014330:	f383 8811 	msr	BASEPRI, r3
 8014334:	f3bf 8f6f 	isb	sy
 8014338:	f3bf 8f4f 	dsb	sy
 801433c:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 801433e:	e7fe      	b.n	801433e <xTaskPriorityDisinherit+0x56>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014340:	1d01      	adds	r1, r0, #4
 8014342:	4608      	mov	r0, r1
 8014344:	9101      	str	r1, [sp, #4]
 8014346:	f7fe fcef 	bl	8012d28 <uxListRemove>
 801434a:	9901      	ldr	r1, [sp, #4]
 801434c:	b1b0      	cbz	r0, 801437c <xTaskPriorityDisinherit+0x94>
 801434e:	4814      	ldr	r0, [pc, #80]	; (80143a0 <xTaskPriorityDisinherit+0xb8>)
 8014350:	4a14      	ldr	r2, [pc, #80]	; (80143a4 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014352:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8014354:	2501      	movs	r5, #1
 8014356:	f8d2 c000 	ldr.w	ip, [r2]
 801435a:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801435e:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014362:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8014364:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014368:	ea46 060c 	orr.w	r6, r6, ip
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801436c:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801436e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014372:	6016      	str	r6, [r2, #0]
 8014374:	f7fe fcb0 	bl	8012cd8 <vListInsertEnd>
					xReturn = pdTRUE;
 8014378:	4628      	mov	r0, r5
		return xReturn;
 801437a:	e7d2      	b.n	8014322 <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801437c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801437e:	4808      	ldr	r0, [pc, #32]	; (80143a0 <xTaskPriorityDisinherit+0xb8>)
 8014380:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8014384:	4a07      	ldr	r2, [pc, #28]	; (80143a4 <xTaskPriorityDisinherit+0xbc>)
 8014386:	009b      	lsls	r3, r3, #2
 8014388:	58c3      	ldr	r3, [r0, r3]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d1e1      	bne.n	8014352 <xTaskPriorityDisinherit+0x6a>
 801438e:	2501      	movs	r5, #1
 8014390:	6813      	ldr	r3, [r2, #0]
 8014392:	40b5      	lsls	r5, r6
 8014394:	ea23 0305 	bic.w	r3, r3, r5
 8014398:	6013      	str	r3, [r2, #0]
 801439a:	e7da      	b.n	8014352 <xTaskPriorityDisinherit+0x6a>
 801439c:	20001cfc 	.word	0x20001cfc
 80143a0:	20001d08 	.word	0x20001d08
 80143a4:	20001da8 	.word	0x20001da8

080143a8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80143a8:	b1d8      	cbz	r0, 80143e2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			configASSERT( pxTCB->uxMutexesHeld );
 80143aa:	460b      	mov	r3, r1
 80143ac:	6c81      	ldr	r1, [r0, #72]	; 0x48
	{
 80143ae:	b570      	push	{r4, r5, r6, lr}
 80143b0:	4604      	mov	r4, r0
 80143b2:	b082      	sub	sp, #8
			configASSERT( pxTCB->uxMutexesHeld );
 80143b4:	b151      	cbz	r1, 80143cc <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80143b6:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 80143b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80143ba:	4283      	cmp	r3, r0
 80143bc:	bf38      	it	cc
 80143be:	4603      	movcc	r3, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d001      	beq.n	80143c8 <vTaskPriorityDisinheritAfterTimeout+0x20>
 80143c4:	2901      	cmp	r1, #1
 80143c6:	d00d      	beq.n	80143e4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	}
 80143c8:	b002      	add	sp, #8
 80143ca:	bd70      	pop	{r4, r5, r6, pc}
 80143cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80143d0:	b672      	cpsid	i
 80143d2:	f383 8811 	msr	BASEPRI, r3
 80143d6:	f3bf 8f6f 	isb	sy
 80143da:	f3bf 8f4f 	dsb	sy
 80143de:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 80143e0:	e7fe      	b.n	80143e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 80143e2:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 80143e4:	4923      	ldr	r1, [pc, #140]	; (8014474 <vTaskPriorityDisinheritAfterTimeout+0xcc>)
 80143e6:	6809      	ldr	r1, [r1, #0]
 80143e8:	42a1      	cmp	r1, r4
 80143ea:	d025      	beq.n	8014438 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80143ec:	69a1      	ldr	r1, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 80143ee:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80143f0:	2900      	cmp	r1, #0
 80143f2:	db02      	blt.n	80143fa <vTaskPriorityDisinheritAfterTimeout+0x52>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143f4:	f1c3 0307 	rsb	r3, r3, #7
 80143f8:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80143fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80143fe:	4d1e      	ldr	r5, [pc, #120]	; (8014478 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8014400:	6961      	ldr	r1, [r4, #20]
 8014402:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8014406:	4299      	cmp	r1, r3
 8014408:	d1de      	bne.n	80143c8 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801440a:	1d21      	adds	r1, r4, #4
 801440c:	4608      	mov	r0, r1
 801440e:	9101      	str	r1, [sp, #4]
 8014410:	f7fe fc8a 	bl	8012d28 <uxListRemove>
 8014414:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014418:	b1c8      	cbz	r0, 801444e <vTaskPriorityDisinheritAfterTimeout+0xa6>
 801441a:	2301      	movs	r3, #1
 801441c:	4c17      	ldr	r4, [pc, #92]	; (801447c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 801441e:	0090      	lsls	r0, r2, #2
 8014420:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8014422:	6826      	ldr	r6, [r4, #0]
 8014424:	4410      	add	r0, r2
 8014426:	4333      	orrs	r3, r6
 8014428:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 801442c:	6023      	str	r3, [r4, #0]
	}
 801442e:	b002      	add	sp, #8
 8014430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8014434:	f7fe bc50 	b.w	8012cd8 <vListInsertEnd>
 8014438:	f04f 0330 	mov.w	r3, #48	; 0x30
 801443c:	b672      	cpsid	i
 801443e:	f383 8811 	msr	BASEPRI, r3
 8014442:	f3bf 8f6f 	isb	sy
 8014446:	f3bf 8f4f 	dsb	sy
 801444a:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 801444c:	e7fe      	b.n	801444c <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801444e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8014452:	0090      	lsls	r0, r2, #2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	58eb      	ldr	r3, [r5, r3]
 8014458:	b11b      	cbz	r3, 8014462 <vTaskPriorityDisinheritAfterTimeout+0xba>
 801445a:	2301      	movs	r3, #1
 801445c:	4c07      	ldr	r4, [pc, #28]	; (801447c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 801445e:	4093      	lsls	r3, r2
 8014460:	e7df      	b.n	8014422 <vTaskPriorityDisinheritAfterTimeout+0x7a>
 8014462:	4c06      	ldr	r4, [pc, #24]	; (801447c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8014464:	2301      	movs	r3, #1
 8014466:	6826      	ldr	r6, [r4, #0]
 8014468:	4093      	lsls	r3, r2
 801446a:	ea26 0603 	bic.w	r6, r6, r3
 801446e:	6026      	str	r6, [r4, #0]
 8014470:	e7d7      	b.n	8014422 <vTaskPriorityDisinheritAfterTimeout+0x7a>
 8014472:	bf00      	nop
 8014474:	20001cfc 	.word	0x20001cfc
 8014478:	20001d08 	.word	0x20001d08
 801447c:	20001da8 	.word	0x20001da8

08014480 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8014480:	4b04      	ldr	r3, [pc, #16]	; (8014494 <pvTaskIncrementMutexHeldCount+0x14>)
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	b11a      	cbz	r2, 801448e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8014486:	6819      	ldr	r1, [r3, #0]
 8014488:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 801448a:	3201      	adds	r2, #1
 801448c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 801448e:	6818      	ldr	r0, [r3, #0]
	}
 8014490:	4770      	bx	lr
 8014492:	bf00      	nop
 8014494:	20001cfc 	.word	0x20001cfc

08014498 <ulTaskNotifyTake>:
	{
 8014498:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801449a:	4c17      	ldr	r4, [pc, #92]	; (80144f8 <ulTaskNotifyTake+0x60>)
	{
 801449c:	4606      	mov	r6, r0
 801449e:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 80144a0:	f000 fba0 	bl	8014be4 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80144a4:	6823      	ldr	r3, [r4, #0]
 80144a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144a8:	b923      	cbnz	r3, 80144b4 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80144aa:	6823      	ldr	r3, [r4, #0]
 80144ac:	2101      	movs	r1, #1
 80144ae:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80144b2:	b9ad      	cbnz	r5, 80144e0 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 80144b4:	f000 fbbc 	bl	8014c30 <vPortExitCritical>
		taskENTER_CRITICAL();
 80144b8:	f000 fb94 	bl	8014be4 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80144bc:	6823      	ldr	r3, [r4, #0]
 80144be:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 80144c0:	b11d      	cbz	r5, 80144ca <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80144c2:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80144c4:	b14e      	cbz	r6, 80144da <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80144c6:	2200      	movs	r2, #0
 80144c8:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80144ca:	6823      	ldr	r3, [r4, #0]
 80144cc:	2200      	movs	r2, #0
 80144ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 80144d2:	f000 fbad 	bl	8014c30 <vPortExitCritical>
	}
 80144d6:	4628      	mov	r0, r5
 80144d8:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80144da:	1e6a      	subs	r2, r5, #1
 80144dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80144de:	e7f4      	b.n	80144ca <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80144e0:	4628      	mov	r0, r5
 80144e2:	f7ff fa3b 	bl	801395c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80144e6:	4b05      	ldr	r3, [pc, #20]	; (80144fc <ulTaskNotifyTake+0x64>)
 80144e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144ec:	601a      	str	r2, [r3, #0]
 80144ee:	f3bf 8f4f 	dsb	sy
 80144f2:	f3bf 8f6f 	isb	sy
 80144f6:	e7dd      	b.n	80144b4 <ulTaskNotifyTake+0x1c>
 80144f8:	20001cfc 	.word	0x20001cfc
 80144fc:	e000ed04 	.word	0xe000ed04

08014500 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8014500:	b308      	cbz	r0, 8014546 <vTaskNotifyGiveFromISR+0x46>
	{
 8014502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014504:	b083      	sub	sp, #12
 8014506:	4604      	mov	r4, r0
 8014508:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801450a:	f000 fc77 	bl	8014dfc <vPortValidateInterruptPriority>
	__asm volatile
 801450e:	f3ef 8711 	mrs	r7, BASEPRI
 8014512:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014516:	b672      	cpsid	i
 8014518:	f383 8811 	msr	BASEPRI, r3
 801451c:	f3bf 8f6f 	isb	sy
 8014520:	f3bf 8f4f 	dsb	sy
 8014524:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014526:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014528:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801452c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014530:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8014532:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014534:	b2d5      	uxtb	r5, r2
			( pxTCB->ulNotifiedValue )++;
 8014536:	f103 0301 	add.w	r3, r3, #1
 801453a:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801453c:	d00e      	beq.n	801455c <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
 801453e:	f387 8811 	msr	BASEPRI, r7
	}
 8014542:	b003      	add	sp, #12
 8014544:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 8014546:	f04f 0330 	mov.w	r3, #48	; 0x30
 801454a:	b672      	cpsid	i
 801454c:	f383 8811 	msr	BASEPRI, r3
 8014550:	f3bf 8f6f 	isb	sy
 8014554:	f3bf 8f4f 	dsb	sy
 8014558:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 801455a:	e7fe      	b.n	801455a <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801455c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801455e:	b153      	cbz	r3, 8014576 <vTaskNotifyGiveFromISR+0x76>
 8014560:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014564:	b672      	cpsid	i
 8014566:	f383 8811 	msr	BASEPRI, r3
 801456a:	f3bf 8f6f 	isb	sy
 801456e:	f3bf 8f4f 	dsb	sy
 8014572:	b662      	cpsie	i
 8014574:	e7fe      	b.n	8014574 <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014576:	4b16      	ldr	r3, [pc, #88]	; (80145d0 <vTaskNotifyGiveFromISR+0xd0>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	bb13      	cbnz	r3, 80145c2 <vTaskNotifyGiveFromISR+0xc2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801457c:	1d21      	adds	r1, r4, #4
 801457e:	4608      	mov	r0, r1
 8014580:	9101      	str	r1, [sp, #4]
 8014582:	f7fe fbd1 	bl	8012d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014586:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014588:	4a12      	ldr	r2, [pc, #72]	; (80145d4 <vTaskNotifyGiveFromISR+0xd4>)
 801458a:	fa05 f300 	lsl.w	r3, r5, r0
 801458e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014592:	f8d2 c000 	ldr.w	ip, [r2]
 8014596:	4d10      	ldr	r5, [pc, #64]	; (80145d8 <vTaskNotifyGiveFromISR+0xd8>)
 8014598:	ea43 030c 	orr.w	r3, r3, ip
 801459c:	9901      	ldr	r1, [sp, #4]
 801459e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80145a2:	6013      	str	r3, [r2, #0]
 80145a4:	f7fe fb98 	bl	8012cd8 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80145a8:	4b0c      	ldr	r3, [pc, #48]	; (80145dc <vTaskNotifyGiveFromISR+0xdc>)
 80145aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d9c4      	bls.n	801453e <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
 80145b4:	b10e      	cbz	r6, 80145ba <vTaskNotifyGiveFromISR+0xba>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80145b6:	2301      	movs	r3, #1
 80145b8:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 80145ba:	4b09      	ldr	r3, [pc, #36]	; (80145e0 <vTaskNotifyGiveFromISR+0xe0>)
 80145bc:	2201      	movs	r2, #1
 80145be:	601a      	str	r2, [r3, #0]
 80145c0:	e7bd      	b.n	801453e <vTaskNotifyGiveFromISR+0x3e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80145c2:	f104 0118 	add.w	r1, r4, #24
 80145c6:	4807      	ldr	r0, [pc, #28]	; (80145e4 <vTaskNotifyGiveFromISR+0xe4>)
 80145c8:	f7fe fb86 	bl	8012cd8 <vListInsertEnd>
 80145cc:	e7ec      	b.n	80145a8 <vTaskNotifyGiveFromISR+0xa8>
 80145ce:	bf00      	nop
 80145d0:	20001da0 	.word	0x20001da0
 80145d4:	20001da8 	.word	0x20001da8
 80145d8:	20001d08 	.word	0x20001d08
 80145dc:	20001cfc 	.word	0x20001cfc
 80145e0:	20001e20 	.word	0x20001e20
 80145e4:	20001ddc 	.word	0x20001ddc

080145e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80145e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80145ea:	4c12      	ldr	r4, [pc, #72]	; (8014634 <prvCheckForValidListAndQueue+0x4c>)
{
 80145ec:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80145ee:	f000 faf9 	bl	8014be4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80145f2:	6825      	ldr	r5, [r4, #0]
 80145f4:	b125      	cbz	r5, 8014600 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80145f6:	b003      	add	sp, #12
 80145f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80145fc:	f000 bb18 	b.w	8014c30 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8014600:	4f0d      	ldr	r7, [pc, #52]	; (8014638 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8014602:	4e0e      	ldr	r6, [pc, #56]	; (801463c <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8014604:	4638      	mov	r0, r7
 8014606:	f7fe fb57 	bl	8012cb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801460a:	4630      	mov	r0, r6
 801460c:	f7fe fb54 	bl	8012cb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014610:	4b0b      	ldr	r3, [pc, #44]	; (8014640 <prvCheckForValidListAndQueue+0x58>)
			pxOverflowTimerList = &xActiveTimerList2;
 8014612:	4a0c      	ldr	r2, [pc, #48]	; (8014644 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014614:	2110      	movs	r1, #16
 8014616:	9500      	str	r5, [sp, #0]
 8014618:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 801461a:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801461c:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801461e:	4b0a      	ldr	r3, [pc, #40]	; (8014648 <prvCheckForValidListAndQueue+0x60>)
 8014620:	4a0a      	ldr	r2, [pc, #40]	; (801464c <prvCheckForValidListAndQueue+0x64>)
 8014622:	f7fe fc9f 	bl	8012f64 <xQueueGenericCreateStatic>
 8014626:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8014628:	2800      	cmp	r0, #0
 801462a:	d0e4      	beq.n	80145f6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801462c:	4908      	ldr	r1, [pc, #32]	; (8014650 <prvCheckForValidListAndQueue+0x68>)
 801462e:	f7ff f8bf 	bl	80137b0 <vQueueAddToRegistry>
 8014632:	e7e0      	b.n	80145f6 <prvCheckForValidListAndQueue+0xe>
 8014634:	20001f40 	.word	0x20001f40
 8014638:	20001ecc 	.word	0x20001ecc
 801463c:	20001ee0 	.word	0x20001ee0
 8014640:	20001e24 	.word	0x20001e24
 8014644:	20001e28 	.word	0x20001e28
 8014648:	20001ef8 	.word	0x20001ef8
 801464c:	20001e2c 	.word	0x20001e2c
 8014650:	08028d54 	.word	0x08028d54

08014654 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8014654:	4291      	cmp	r1, r2
{
 8014656:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014658:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801465a:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 801465c:	d805      	bhi.n	801466a <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801465e:	1ad2      	subs	r2, r2, r3
 8014660:	6983      	ldr	r3, [r0, #24]
 8014662:	429a      	cmp	r2, r3
 8014664:	d30c      	bcc.n	8014680 <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 8014666:	2001      	movs	r0, #1
}
 8014668:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801466a:	429a      	cmp	r2, r3
 801466c:	d201      	bcs.n	8014672 <prvInsertTimerInActiveList+0x1e>
 801466e:	4299      	cmp	r1, r3
 8014670:	d2f9      	bcs.n	8014666 <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014672:	4b07      	ldr	r3, [pc, #28]	; (8014690 <prvInsertTimerInActiveList+0x3c>)
 8014674:	1d01      	adds	r1, r0, #4
 8014676:	6818      	ldr	r0, [r3, #0]
 8014678:	f7fe fb3e 	bl	8012cf8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801467c:	2000      	movs	r0, #0
}
 801467e:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014680:	4b04      	ldr	r3, [pc, #16]	; (8014694 <prvInsertTimerInActiveList+0x40>)
 8014682:	1d01      	adds	r1, r0, #4
 8014684:	6818      	ldr	r0, [r3, #0]
 8014686:	f7fe fb37 	bl	8012cf8 <vListInsert>
 801468a:	2000      	movs	r0, #0
}
 801468c:	bd08      	pop	{r3, pc}
 801468e:	bf00      	nop
 8014690:	20001e24 	.word	0x20001e24
 8014694:	20001e28 	.word	0x20001e28

08014698 <prvInitialiseNewTimer>:
{
 8014698:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 801469c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801469e:	b951      	cbnz	r1, 80146b6 <prvInitialiseNewTimer+0x1e>
 80146a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80146a4:	b672      	cpsid	i
 80146a6:	f383 8811 	msr	BASEPRI, r3
 80146aa:	f3bf 8f6f 	isb	sy
 80146ae:	f3bf 8f4f 	dsb	sy
 80146b2:	b662      	cpsie	i
 80146b4:	e7fe      	b.n	80146b4 <prvInitialiseNewTimer+0x1c>
	if( pxNewTimer != NULL )
 80146b6:	b1ac      	cbz	r4, 80146e4 <prvInitialiseNewTimer+0x4c>
 80146b8:	4681      	mov	r9, r0
 80146ba:	461f      	mov	r7, r3
 80146bc:	460d      	mov	r5, r1
 80146be:	4616      	mov	r6, r2
		prvCheckForValidListAndQueue();
 80146c0:	f7ff ff92 	bl	80145e8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80146c4:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80146c6:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 80146c8:	f8c4 9000 	str.w	r9, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80146cc:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80146ce:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80146d0:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80146d2:	f7fe fafd 	bl	8012cd0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80146d6:	b12e      	cbz	r6, 80146e4 <prvInitialiseNewTimer+0x4c>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80146d8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80146dc:	f043 0304 	orr.w	r3, r3, #4
 80146e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80146e4:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

080146e8 <xTimerCreateTimerTask>:
{
 80146e8:	b510      	push	{r4, lr}
 80146ea:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80146ec:	f7ff ff7c 	bl	80145e8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80146f0:	4b13      	ldr	r3, [pc, #76]	; (8014740 <xTimerCreateTimerTask+0x58>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	b1cb      	cbz	r3, 801472a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80146f6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80146f8:	aa07      	add	r2, sp, #28
 80146fa:	a906      	add	r1, sp, #24
 80146fc:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80146fe:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014702:	f7ec fa6d 	bl	8000be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014706:	9805      	ldr	r0, [sp, #20]
 8014708:	9906      	ldr	r1, [sp, #24]
 801470a:	2202      	movs	r2, #2
 801470c:	4623      	mov	r3, r4
 801470e:	9200      	str	r2, [sp, #0]
 8014710:	9a07      	ldr	r2, [sp, #28]
 8014712:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8014716:	490b      	ldr	r1, [pc, #44]	; (8014744 <xTimerCreateTimerTask+0x5c>)
 8014718:	480b      	ldr	r0, [pc, #44]	; (8014748 <xTimerCreateTimerTask+0x60>)
 801471a:	f7ff fa13 	bl	8013b44 <xTaskCreateStatic>
 801471e:	4b0b      	ldr	r3, [pc, #44]	; (801474c <xTimerCreateTimerTask+0x64>)
 8014720:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8014722:	b110      	cbz	r0, 801472a <xTimerCreateTimerTask+0x42>
}
 8014724:	2001      	movs	r0, #1
 8014726:	b008      	add	sp, #32
 8014728:	bd10      	pop	{r4, pc}
 801472a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801472e:	b672      	cpsid	i
 8014730:	f383 8811 	msr	BASEPRI, r3
 8014734:	f3bf 8f6f 	isb	sy
 8014738:	f3bf 8f4f 	dsb	sy
 801473c:	b662      	cpsie	i
	configASSERT( xReturn );
 801473e:	e7fe      	b.n	801473e <xTimerCreateTimerTask+0x56>
 8014740:	20001f40 	.word	0x20001f40
 8014744:	08028d5c 	.word	0x08028d5c
 8014748:	080148d9 	.word	0x080148d9
 801474c:	20001f44 	.word	0x20001f44

08014750 <xTimerCreate>:
	{
 8014750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014754:	4605      	mov	r5, r0
 8014756:	b082      	sub	sp, #8
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8014758:	2028      	movs	r0, #40	; 0x28
	{
 801475a:	460e      	mov	r6, r1
 801475c:	4617      	mov	r7, r2
 801475e:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8014760:	f000 fbae 	bl	8014ec0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8014764:	4604      	mov	r4, r0
 8014766:	b160      	cbz	r0, 8014782 <xTimerCreate+0x32>
			pxNewTimer->ucStatus = 0x00;
 8014768:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801476c:	4628      	mov	r0, r5
 801476e:	9d08      	ldr	r5, [sp, #32]
 8014770:	4643      	mov	r3, r8
			pxNewTimer->ucStatus = 0x00;
 8014772:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014776:	463a      	mov	r2, r7
 8014778:	4631      	mov	r1, r6
 801477a:	9401      	str	r4, [sp, #4]
 801477c:	9500      	str	r5, [sp, #0]
 801477e:	f7ff ff8b 	bl	8014698 <prvInitialiseNewTimer>
	}
 8014782:	4620      	mov	r0, r4
 8014784:	b002      	add	sp, #8
 8014786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801478a:	bf00      	nop

0801478c <xTimerCreateStatic>:
	{
 801478c:	b570      	push	{r4, r5, r6, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 801478e:	2528      	movs	r5, #40	; 0x28
	{
 8014790:	b084      	sub	sp, #16
			volatile size_t xSize = sizeof( StaticTimer_t );
 8014792:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8014794:	9d03      	ldr	r5, [sp, #12]
 8014796:	2d28      	cmp	r5, #40	; 0x28
	{
 8014798:	e9dd 6408 	ldrd	r6, r4, [sp, #32]
			configASSERT( xSize == sizeof( Timer_t ) );
 801479c:	d00a      	beq.n	80147b4 <xTimerCreateStatic+0x28>
 801479e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147a2:	b672      	cpsid	i
 80147a4:	f383 8811 	msr	BASEPRI, r3
 80147a8:	f3bf 8f6f 	isb	sy
 80147ac:	f3bf 8f4f 	dsb	sy
 80147b0:	b662      	cpsie	i
 80147b2:	e7fe      	b.n	80147b2 <xTimerCreateStatic+0x26>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80147b4:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 80147b6:	b14c      	cbz	r4, 80147cc <xTimerCreateStatic+0x40>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80147b8:	2502      	movs	r5, #2
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80147ba:	e9cd 6400 	strd	r6, r4, [sp]
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80147be:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80147c2:	f7ff ff69 	bl	8014698 <prvInitialiseNewTimer>
	}
 80147c6:	4620      	mov	r0, r4
 80147c8:	b004      	add	sp, #16
 80147ca:	bd70      	pop	{r4, r5, r6, pc}
 80147cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147d0:	b672      	cpsid	i
 80147d2:	f383 8811 	msr	BASEPRI, r3
 80147d6:	f3bf 8f6f 	isb	sy
 80147da:	f3bf 8f4f 	dsb	sy
 80147de:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 80147e0:	e7fe      	b.n	80147e0 <xTimerCreateStatic+0x54>
 80147e2:	bf00      	nop

080147e4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80147e4:	b1b0      	cbz	r0, 8014814 <xTimerGenericCommand+0x30>
{
 80147e6:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 80147e8:	4d17      	ldr	r5, [pc, #92]	; (8014848 <xTimerGenericCommand+0x64>)
 80147ea:	4604      	mov	r4, r0
{
 80147ec:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 80147ee:	6828      	ldr	r0, [r5, #0]
 80147f0:	b170      	cbz	r0, 8014810 <xTimerGenericCommand+0x2c>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80147f2:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80147f4:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80147f6:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80147fa:	dc16      	bgt.n	801482a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80147fc:	f7ff fd0c 	bl	8014218 <xTaskGetSchedulerState>
 8014800:	2802      	cmp	r0, #2
 8014802:	d019      	beq.n	8014838 <xTimerGenericCommand+0x54>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014804:	2300      	movs	r3, #0
 8014806:	6828      	ldr	r0, [r5, #0]
 8014808:	4669      	mov	r1, sp
 801480a:	461a      	mov	r2, r3
 801480c:	f7fe fc0e 	bl	801302c <xQueueGenericSend>
}
 8014810:	b004      	add	sp, #16
 8014812:	bd70      	pop	{r4, r5, r6, pc}
 8014814:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014818:	b672      	cpsid	i
 801481a:	f383 8811 	msr	BASEPRI, r3
 801481e:	f3bf 8f6f 	isb	sy
 8014822:	f3bf 8f4f 	dsb	sy
 8014826:	b662      	cpsie	i
	configASSERT( xTimer );
 8014828:	e7fe      	b.n	8014828 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801482a:	461a      	mov	r2, r3
 801482c:	4669      	mov	r1, sp
 801482e:	2300      	movs	r3, #0
 8014830:	f7fe fcf6 	bl	8013220 <xQueueGenericSendFromISR>
}
 8014834:	b004      	add	sp, #16
 8014836:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014838:	6828      	ldr	r0, [r5, #0]
 801483a:	2300      	movs	r3, #0
 801483c:	9a08      	ldr	r2, [sp, #32]
 801483e:	4669      	mov	r1, sp
 8014840:	f7fe fbf4 	bl	801302c <xQueueGenericSend>
 8014844:	e7e4      	b.n	8014810 <xTimerGenericCommand+0x2c>
 8014846:	bf00      	nop
 8014848:	20001f40 	.word	0x20001f40

0801484c <prvSwitchTimerLists>:
{
 801484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014850:	4e1f      	ldr	r6, [pc, #124]	; (80148d0 <prvSwitchTimerLists+0x84>)
 8014852:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014854:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014858:	e00d      	b.n	8014876 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801485a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801485c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801485e:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014860:	1d25      	adds	r5, r4, #4
 8014862:	4628      	mov	r0, r5
 8014864:	f7fe fa60 	bl	8012d28 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014868:	6a23      	ldr	r3, [r4, #32]
 801486a:	4620      	mov	r0, r4
 801486c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801486e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8014872:	075b      	lsls	r3, r3, #29
 8014874:	d40a      	bmi.n	801488c <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014876:	6833      	ldr	r3, [r6, #0]
 8014878:	681a      	ldr	r2, [r3, #0]
 801487a:	2a00      	cmp	r2, #0
 801487c:	d1ed      	bne.n	801485a <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 801487e:	4a15      	ldr	r2, [pc, #84]	; (80148d4 <prvSwitchTimerLists+0x88>)
 8014880:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014882:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8014884:	6031      	str	r1, [r6, #0]
}
 8014886:	b002      	add	sp, #8
 8014888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801488c:	69a1      	ldr	r1, [r4, #24]
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801488e:	2300      	movs	r3, #0
 8014890:	463a      	mov	r2, r7
 8014892:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014894:	eb07 0c01 	add.w	ip, r7, r1
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014898:	4619      	mov	r1, r3
			if( xReloadTime > xNextExpireTime )
 801489a:	4567      	cmp	r7, ip
 801489c:	d207      	bcs.n	80148ae <prvSwitchTimerLists+0x62>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801489e:	6830      	ldr	r0, [r6, #0]
 80148a0:	4629      	mov	r1, r5
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80148a2:	f8c4 c004 	str.w	ip, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80148a6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80148a8:	f7fe fa26 	bl	8012cf8 <vListInsert>
 80148ac:	e7e3      	b.n	8014876 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80148ae:	f8cd 8000 	str.w	r8, [sp]
 80148b2:	f7ff ff97 	bl	80147e4 <xTimerGenericCommand>
				configASSERT( xResult );
 80148b6:	2800      	cmp	r0, #0
 80148b8:	d1dd      	bne.n	8014876 <prvSwitchTimerLists+0x2a>
 80148ba:	f04f 0330 	mov.w	r3, #48	; 0x30
 80148be:	b672      	cpsid	i
 80148c0:	f383 8811 	msr	BASEPRI, r3
 80148c4:	f3bf 8f6f 	isb	sy
 80148c8:	f3bf 8f4f 	dsb	sy
 80148cc:	b662      	cpsie	i
 80148ce:	e7fe      	b.n	80148ce <prvSwitchTimerLists+0x82>
 80148d0:	20001e24 	.word	0x20001e24
 80148d4:	20001e28 	.word	0x20001e28

080148d8 <prvTimerTask>:
{
 80148d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148dc:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8014af8 <prvTimerTask+0x220>
 80148e0:	b087      	sub	sp, #28
 80148e2:	4e82      	ldr	r6, [pc, #520]	; (8014aec <prvTimerTask+0x214>)
 80148e4:	f04f 0900 	mov.w	r9, #0
 80148e8:	4c81      	ldr	r4, [pc, #516]	; (8014af0 <prvTimerTask+0x218>)
 80148ea:	f8df a210 	ldr.w	sl, [pc, #528]	; 8014afc <prvTimerTask+0x224>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80148ee:	f8d8 3000 	ldr.w	r3, [r8]
 80148f2:	681d      	ldr	r5, [r3, #0]
 80148f4:	2d00      	cmp	r5, #0
 80148f6:	f000 809b 	beq.w	8014a30 <prvTimerTask+0x158>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 80148fe:	f7ff f9db 	bl	8013cb8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8014902:	f7ff f9e1 	bl	8013cc8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8014906:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8014908:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 801490a:	4298      	cmp	r0, r3
 801490c:	f0c0 8098 	bcc.w	8014a40 <prvTimerTask+0x168>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014910:	4285      	cmp	r5, r0
	xLastTime = xTimeNow;
 8014912:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014914:	f200 80b9 	bhi.w	8014a8a <prvTimerTask+0x1b2>
				( void ) xTaskResumeAll();
 8014918:	f7ff fa96 	bl	8013e48 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801491c:	f8d8 3000 	ldr.w	r3, [r8]
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014924:	1d38      	adds	r0, r7, #4
 8014926:	f7fe f9ff 	bl	8012d28 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801492a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801492e:	0758      	lsls	r0, r3, #29
 8014930:	f100 80ad 	bmi.w	8014a8e <prvTimerTask+0x1b6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014934:	f023 0301 	bic.w	r3, r3, #1
 8014938:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801493c:	6a3b      	ldr	r3, [r7, #32]
 801493e:	4638      	mov	r0, r7
 8014940:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014942:	2200      	movs	r2, #0
 8014944:	a902      	add	r1, sp, #8
 8014946:	6820      	ldr	r0, [r4, #0]
 8014948:	f7fe fd3a 	bl	80133c0 <xQueueReceive>
 801494c:	2800      	cmp	r0, #0
 801494e:	d0ce      	beq.n	80148ee <prvTimerTask+0x16>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014950:	9b02      	ldr	r3, [sp, #8]
 8014952:	2b00      	cmp	r3, #0
 8014954:	db64      	blt.n	8014a20 <prvTimerTask+0x148>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014956:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014958:	696b      	ldr	r3, [r5, #20]
 801495a:	b113      	cbz	r3, 8014962 <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801495c:	1d28      	adds	r0, r5, #4
 801495e:	f7fe f9e3 	bl	8012d28 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8014962:	f7ff f9b1 	bl	8013cc8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8014966:	6831      	ldr	r1, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8014968:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
 801496a:	4288      	cmp	r0, r1
 801496c:	d36f      	bcc.n	8014a4e <prvTimerTask+0x176>
	xLastTime = xTimeNow;
 801496e:	9b02      	ldr	r3, [sp, #8]
 8014970:	6037      	str	r7, [r6, #0]
			switch( xMessage.xMessageID )
 8014972:	2b09      	cmp	r3, #9
 8014974:	d8e5      	bhi.n	8014942 <prvTimerTask+0x6a>
 8014976:	e8df f003 	tbb	[pc, r3]
 801497a:	0505      	.short	0x0505
 801497c:	4a324305 	.word	0x4a324305
 8014980:	32430505 	.word	0x32430505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014984:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014988:	463a      	mov	r2, r7
 801498a:	9b03      	ldr	r3, [sp, #12]
 801498c:	4628      	mov	r0, r5
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801498e:	f041 0101 	orr.w	r1, r1, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014992:	69af      	ldr	r7, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014994:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014998:	19d9      	adds	r1, r3, r7
 801499a:	f7ff fe5b 	bl	8014654 <prvInsertTimerInActiveList>
 801499e:	2800      	cmp	r0, #0
 80149a0:	d0cf      	beq.n	8014942 <prvTimerTask+0x6a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80149a2:	6a2b      	ldr	r3, [r5, #32]
 80149a4:	4628      	mov	r0, r5
 80149a6:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80149a8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80149ac:	0759      	lsls	r1, r3, #29
 80149ae:	d5c8      	bpl.n	8014942 <prvTimerTask+0x6a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80149b0:	69aa      	ldr	r2, [r5, #24]
 80149b2:	2300      	movs	r3, #0
 80149b4:	9f03      	ldr	r7, [sp, #12]
 80149b6:	4628      	mov	r0, r5
 80149b8:	4619      	mov	r1, r3
 80149ba:	f8cd 9000 	str.w	r9, [sp]
 80149be:	443a      	add	r2, r7
 80149c0:	f7ff ff10 	bl	80147e4 <xTimerGenericCommand>
							configASSERT( xResult );
 80149c4:	2800      	cmp	r0, #0
 80149c6:	d1bc      	bne.n	8014942 <prvTimerTask+0x6a>
 80149c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80149cc:	b672      	cpsid	i
 80149ce:	f383 8811 	msr	BASEPRI, r3
 80149d2:	f3bf 8f6f 	isb	sy
 80149d6:	f3bf 8f4f 	dsb	sy
 80149da:	b662      	cpsie	i
 80149dc:	e7fe      	b.n	80149dc <prvTimerTask+0x104>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80149de:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80149e2:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80149e4:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80149e8:	61a9      	str	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80149ea:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80149ee:	2900      	cmp	r1, #0
 80149f0:	d071      	beq.n	8014ad6 <prvTimerTask+0x1fe>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80149f2:	4439      	add	r1, r7
 80149f4:	4628      	mov	r0, r5
 80149f6:	463b      	mov	r3, r7
 80149f8:	463a      	mov	r2, r7
 80149fa:	f7ff fe2b 	bl	8014654 <prvInsertTimerInActiveList>
					break;
 80149fe:	e7a0      	b.n	8014942 <prvTimerTask+0x6a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014a00:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8014a04:	f023 0301 	bic.w	r3, r3, #1
 8014a08:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
					break;
 8014a0c:	e799      	b.n	8014942 <prvTimerTask+0x6a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014a0e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8014a12:	079a      	lsls	r2, r3, #30
 8014a14:	d55b      	bpl.n	8014ace <prvTimerTask+0x1f6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014a16:	f023 0301 	bic.w	r3, r3, #1
 8014a1a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8014a1e:	e790      	b.n	8014942 <prvTimerTask+0x6a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014a20:	9b03      	ldr	r3, [sp, #12]
 8014a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014a26:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014a28:	9b02      	ldr	r3, [sp, #8]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	db89      	blt.n	8014942 <prvTimerTask+0x6a>
 8014a2e:	e792      	b.n	8014956 <prvTimerTask+0x7e>
	vTaskSuspendAll();
 8014a30:	f7ff f942 	bl	8013cb8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8014a34:	f7ff f948 	bl	8013cc8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8014a38:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8014a3a:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8014a3c:	4283      	cmp	r3, r0
 8014a3e:	d909      	bls.n	8014a54 <prvTimerTask+0x17c>
		prvSwitchTimerLists();
 8014a40:	f7ff ff04 	bl	801484c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8014a44:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 8014a48:	f7ff f9fe 	bl	8013e48 <xTaskResumeAll>
 8014a4c:	e779      	b.n	8014942 <prvTimerTask+0x6a>
		prvSwitchTimerLists();
 8014a4e:	f7ff fefd 	bl	801484c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014a52:	e78c      	b.n	801496e <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014a54:	f8da 3000 	ldr.w	r3, [sl]
	xLastTime = xTimeNow;
 8014a58:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014a5c:	681a      	ldr	r2, [r3, #0]
 8014a5e:	fab2 f282 	clz	r2, r2
 8014a62:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014a64:	eba5 010b 	sub.w	r1, r5, fp
 8014a68:	6820      	ldr	r0, [r4, #0]
 8014a6a:	f7fe feb5 	bl	80137d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014a6e:	f7ff f9eb 	bl	8013e48 <xTaskResumeAll>
 8014a72:	2800      	cmp	r0, #0
 8014a74:	f47f af65 	bne.w	8014942 <prvTimerTask+0x6a>
					portYIELD_WITHIN_API();
 8014a78:	4b1e      	ldr	r3, [pc, #120]	; (8014af4 <prvTimerTask+0x21c>)
 8014a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a7e:	601a      	str	r2, [r3, #0]
 8014a80:	f3bf 8f4f 	dsb	sy
 8014a84:	f3bf 8f6f 	isb	sy
 8014a88:	e75b      	b.n	8014942 <prvTimerTask+0x6a>
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	e7ea      	b.n	8014a64 <prvTimerTask+0x18c>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014a8e:	69b9      	ldr	r1, [r7, #24]
 8014a90:	465a      	mov	r2, fp
 8014a92:	462b      	mov	r3, r5
 8014a94:	4638      	mov	r0, r7
 8014a96:	4429      	add	r1, r5
 8014a98:	f7ff fddc 	bl	8014654 <prvInsertTimerInActiveList>
 8014a9c:	2800      	cmp	r0, #0
 8014a9e:	f43f af4d 	beq.w	801493c <prvTimerTask+0x64>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	462a      	mov	r2, r5
 8014aa6:	4638      	mov	r0, r7
 8014aa8:	f8cd 9000 	str.w	r9, [sp]
 8014aac:	4619      	mov	r1, r3
 8014aae:	f7ff fe99 	bl	80147e4 <xTimerGenericCommand>
			configASSERT( xResult );
 8014ab2:	2800      	cmp	r0, #0
 8014ab4:	f47f af42 	bne.w	801493c <prvTimerTask+0x64>
 8014ab8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014abc:	b672      	cpsid	i
 8014abe:	f383 8811 	msr	BASEPRI, r3
 8014ac2:	f3bf 8f6f 	isb	sy
 8014ac6:	f3bf 8f4f 	dsb	sy
 8014aca:	b662      	cpsie	i
 8014acc:	e7fe      	b.n	8014acc <prvTimerTask+0x1f4>
							vPortFree( pxTimer );
 8014ace:	4628      	mov	r0, r5
 8014ad0:	f000 fa94 	bl	8014ffc <vPortFree>
 8014ad4:	e735      	b.n	8014942 <prvTimerTask+0x6a>
 8014ad6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014ada:	b672      	cpsid	i
 8014adc:	f383 8811 	msr	BASEPRI, r3
 8014ae0:	f3bf 8f6f 	isb	sy
 8014ae4:	f3bf 8f4f 	dsb	sy
 8014ae8:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014aea:	e7fe      	b.n	8014aea <prvTimerTask+0x212>
 8014aec:	20001ef4 	.word	0x20001ef4
 8014af0:	20001f40 	.word	0x20001f40
 8014af4:	e000ed04 	.word	0xe000ed04
 8014af8:	20001e24 	.word	0x20001e24
 8014afc:	20001e28 	.word	0x20001e28

08014b00 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b00:	4808      	ldr	r0, [pc, #32]	; (8014b24 <prvPortStartFirstTask+0x24>)
 8014b02:	6800      	ldr	r0, [r0, #0]
 8014b04:	6800      	ldr	r0, [r0, #0]
 8014b06:	f380 8808 	msr	MSP, r0
 8014b0a:	f04f 0000 	mov.w	r0, #0
 8014b0e:	f380 8814 	msr	CONTROL, r0
 8014b12:	b662      	cpsie	i
 8014b14:	b661      	cpsie	f
 8014b16:	f3bf 8f4f 	dsb	sy
 8014b1a:	f3bf 8f6f 	isb	sy
 8014b1e:	df00      	svc	0
 8014b20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014b22:	0000      	.short	0x0000
 8014b24:	e000ed08 	.word	0xe000ed08

08014b28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014b28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014b38 <vPortEnableVFP+0x10>
 8014b2c:	6801      	ldr	r1, [r0, #0]
 8014b2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014b32:	6001      	str	r1, [r0, #0]
 8014b34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014b36:	0000      	.short	0x0000
 8014b38:	e000ed88 	.word	0xe000ed88

08014b3c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8014b3c:	4b10      	ldr	r3, [pc, #64]	; (8014b80 <prvTaskExitError+0x44>)
{
 8014b3e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8014b40:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8014b42:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8014b44:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8014b46:	3301      	adds	r3, #1
 8014b48:	d00a      	beq.n	8014b60 <prvTaskExitError+0x24>
 8014b4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b4e:	b672      	cpsid	i
 8014b50:	f383 8811 	msr	BASEPRI, r3
 8014b54:	f3bf 8f6f 	isb	sy
 8014b58:	f3bf 8f4f 	dsb	sy
 8014b5c:	b662      	cpsie	i
 8014b5e:	e7fe      	b.n	8014b5e <prvTaskExitError+0x22>
 8014b60:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b64:	b672      	cpsid	i
 8014b66:	f383 8811 	msr	BASEPRI, r3
 8014b6a:	f3bf 8f6f 	isb	sy
 8014b6e:	f3bf 8f4f 	dsb	sy
 8014b72:	b662      	cpsie	i
	while( ulDummy == 0 )
 8014b74:	9b01      	ldr	r3, [sp, #4]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d0fc      	beq.n	8014b74 <prvTaskExitError+0x38>
}
 8014b7a:	b002      	add	sp, #8
 8014b7c:	4770      	bx	lr
 8014b7e:	bf00      	nop
 8014b80:	20000400 	.word	0x20000400

08014b84 <pxPortInitialiseStack>:
{
 8014b84:	b470      	push	{r4, r5, r6}
 8014b86:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b88:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b8c:	4d08      	ldr	r5, [pc, #32]	; (8014bb0 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b8e:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b92:	f021 0101 	bic.w	r1, r1, #1
}
 8014b96:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b98:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b9a:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b9e:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014ba2:	f843 4c24 	str.w	r4, [r3, #-36]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014ba6:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8014baa:	bc70      	pop	{r4, r5, r6}
 8014bac:	4770      	bx	lr
 8014bae:	bf00      	nop
 8014bb0:	08014b3d 	.word	0x08014b3d
	...

08014bc0 <SVC_Handler>:
	__asm volatile (
 8014bc0:	4b07      	ldr	r3, [pc, #28]	; (8014be0 <pxCurrentTCBConst2>)
 8014bc2:	6819      	ldr	r1, [r3, #0]
 8014bc4:	6808      	ldr	r0, [r1, #0]
 8014bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bca:	f380 8809 	msr	PSP, r0
 8014bce:	f3bf 8f6f 	isb	sy
 8014bd2:	f04f 0000 	mov.w	r0, #0
 8014bd6:	f380 8811 	msr	BASEPRI, r0
 8014bda:	4770      	bx	lr
 8014bdc:	f3af 8000 	nop.w

08014be0 <pxCurrentTCBConst2>:
 8014be0:	20001cfc 	.word	0x20001cfc

08014be4 <vPortEnterCritical>:
 8014be4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014be8:	b672      	cpsid	i
 8014bea:	f383 8811 	msr	BASEPRI, r3
 8014bee:	f3bf 8f6f 	isb	sy
 8014bf2:	f3bf 8f4f 	dsb	sy
 8014bf6:	b662      	cpsie	i
	uxCriticalNesting++;
 8014bf8:	4a0b      	ldr	r2, [pc, #44]	; (8014c28 <vPortEnterCritical+0x44>)
 8014bfa:	6813      	ldr	r3, [r2, #0]
 8014bfc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8014bfe:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8014c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8014c02:	d000      	beq.n	8014c06 <vPortEnterCritical+0x22>
}
 8014c04:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014c06:	4b09      	ldr	r3, [pc, #36]	; (8014c2c <vPortEnterCritical+0x48>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014c0e:	d0f9      	beq.n	8014c04 <vPortEnterCritical+0x20>
 8014c10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014c14:	b672      	cpsid	i
 8014c16:	f383 8811 	msr	BASEPRI, r3
 8014c1a:	f3bf 8f6f 	isb	sy
 8014c1e:	f3bf 8f4f 	dsb	sy
 8014c22:	b662      	cpsie	i
 8014c24:	e7fe      	b.n	8014c24 <vPortEnterCritical+0x40>
 8014c26:	bf00      	nop
 8014c28:	20000400 	.word	0x20000400
 8014c2c:	e000ed04 	.word	0xe000ed04

08014c30 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8014c30:	4a09      	ldr	r2, [pc, #36]	; (8014c58 <vPortExitCritical+0x28>)
 8014c32:	6813      	ldr	r3, [r2, #0]
 8014c34:	b953      	cbnz	r3, 8014c4c <vPortExitCritical+0x1c>
 8014c36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014c3a:	b672      	cpsid	i
 8014c3c:	f383 8811 	msr	BASEPRI, r3
 8014c40:	f3bf 8f6f 	isb	sy
 8014c44:	f3bf 8f4f 	dsb	sy
 8014c48:	b662      	cpsie	i
 8014c4a:	e7fe      	b.n	8014c4a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8014c4c:	3b01      	subs	r3, #1
 8014c4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014c50:	b90b      	cbnz	r3, 8014c56 <vPortExitCritical+0x26>
	__asm volatile
 8014c52:	f383 8811 	msr	BASEPRI, r3
}
 8014c56:	4770      	bx	lr
 8014c58:	20000400 	.word	0x20000400
 8014c5c:	00000000 	.word	0x00000000

08014c60 <PendSV_Handler>:
	__asm volatile
 8014c60:	f3ef 8009 	mrs	r0, PSP
 8014c64:	f3bf 8f6f 	isb	sy
 8014c68:	4b15      	ldr	r3, [pc, #84]	; (8014cc0 <pxCurrentTCBConst>)
 8014c6a:	681a      	ldr	r2, [r3, #0]
 8014c6c:	f01e 0f10 	tst.w	lr, #16
 8014c70:	bf08      	it	eq
 8014c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c7a:	6010      	str	r0, [r2, #0]
 8014c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014c80:	f04f 0030 	mov.w	r0, #48	; 0x30
 8014c84:	b672      	cpsid	i
 8014c86:	f380 8811 	msr	BASEPRI, r0
 8014c8a:	f3bf 8f4f 	dsb	sy
 8014c8e:	f3bf 8f6f 	isb	sy
 8014c92:	b662      	cpsie	i
 8014c94:	f7ff f98c 	bl	8013fb0 <vTaskSwitchContext>
 8014c98:	f04f 0000 	mov.w	r0, #0
 8014c9c:	f380 8811 	msr	BASEPRI, r0
 8014ca0:	bc09      	pop	{r0, r3}
 8014ca2:	6819      	ldr	r1, [r3, #0]
 8014ca4:	6808      	ldr	r0, [r1, #0]
 8014ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014caa:	f01e 0f10 	tst.w	lr, #16
 8014cae:	bf08      	it	eq
 8014cb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014cb4:	f380 8809 	msr	PSP, r0
 8014cb8:	f3bf 8f6f 	isb	sy
 8014cbc:	4770      	bx	lr
 8014cbe:	bf00      	nop

08014cc0 <pxCurrentTCBConst>:
 8014cc0:	20001cfc 	.word	0x20001cfc

08014cc4 <SysTick_Handler>:
{
 8014cc4:	b508      	push	{r3, lr}
	__asm volatile
 8014cc6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014cca:	b672      	cpsid	i
 8014ccc:	f383 8811 	msr	BASEPRI, r3
 8014cd0:	f3bf 8f6f 	isb	sy
 8014cd4:	f3bf 8f4f 	dsb	sy
 8014cd8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8014cda:	f7ff f803 	bl	8013ce4 <xTaskIncrementTick>
 8014cde:	b118      	cbz	r0, 8014ce8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014ce0:	4b03      	ldr	r3, [pc, #12]	; (8014cf0 <SysTick_Handler+0x2c>)
 8014ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ce6:	601a      	str	r2, [r3, #0]
	__asm volatile
 8014ce8:	2300      	movs	r3, #0
 8014cea:	f383 8811 	msr	BASEPRI, r3
}
 8014cee:	bd08      	pop	{r3, pc}
 8014cf0:	e000ed04 	.word	0xe000ed04

08014cf4 <vPortSetupTimerInterrupt>:
{
 8014cf4:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	4a08      	ldr	r2, [pc, #32]	; (8014d1c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014cfa:	4c09      	ldr	r4, [pc, #36]	; (8014d20 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014cfc:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014cfe:	4809      	ldr	r0, [pc, #36]	; (8014d24 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014d02:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014d04:	4c08      	ldr	r4, [pc, #32]	; (8014d28 <vPortSetupTimerInterrupt+0x34>)
 8014d06:	6803      	ldr	r3, [r0, #0]
 8014d08:	4808      	ldr	r0, [pc, #32]	; (8014d2c <vPortSetupTimerInterrupt+0x38>)
 8014d0a:	fba4 4303 	umull	r4, r3, r4, r3
}
 8014d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014d12:	099b      	lsrs	r3, r3, #6
 8014d14:	3b01      	subs	r3, #1
 8014d16:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014d18:	6011      	str	r1, [r2, #0]
}
 8014d1a:	4770      	bx	lr
 8014d1c:	e000e010 	.word	0xe000e010
 8014d20:	e000e018 	.word	0xe000e018
 8014d24:	20000274 	.word	0x20000274
 8014d28:	10624dd3 	.word	0x10624dd3
 8014d2c:	e000e014 	.word	0xe000e014

08014d30 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014d30:	4b2c      	ldr	r3, [pc, #176]	; (8014de4 <xPortStartScheduler+0xb4>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014d32:	482d      	ldr	r0, [pc, #180]	; (8014de8 <xPortStartScheduler+0xb8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014d34:	492d      	ldr	r1, [pc, #180]	; (8014dec <xPortStartScheduler+0xbc>)
{
 8014d36:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014d38:	781a      	ldrb	r2, [r3, #0]
{
 8014d3a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014d3c:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014d3e:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014d40:	b2d2      	uxtb	r2, r2
 8014d42:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014d44:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014d46:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014d48:	600c      	str	r4, [r1, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014d50:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d54:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014d58:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d5c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014d5e:	7003      	strb	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d60:	d50f      	bpl.n	8014d82 <xPortStartScheduler+0x52>
 8014d62:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014d64:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014d68:	4610      	mov	r0, r2
 8014d6a:	3a01      	subs	r2, #1
 8014d6c:	005b      	lsls	r3, r3, #1
 8014d6e:	b2db      	uxtb	r3, r3
 8014d70:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d74:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014d78:	061b      	lsls	r3, r3, #24
 8014d7a:	d4f3      	bmi.n	8014d64 <xPortStartScheduler+0x34>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014d7c:	2803      	cmp	r0, #3
 8014d7e:	d00b      	beq.n	8014d98 <xPortStartScheduler+0x68>
 8014d80:	6008      	str	r0, [r1, #0]
	__asm volatile
 8014d82:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d86:	b672      	cpsid	i
 8014d88:	f383 8811 	msr	BASEPRI, r3
 8014d8c:	f3bf 8f6f 	isb	sy
 8014d90:	f3bf 8f4f 	dsb	sy
 8014d94:	b662      	cpsie	i
 8014d96:	e7fe      	b.n	8014d96 <xPortStartScheduler+0x66>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014d98:	9a01      	ldr	r2, [sp, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014d9a:	f44f 7540 	mov.w	r5, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014d9e:	4811      	ldr	r0, [pc, #68]	; (8014de4 <xPortStartScheduler+0xb4>)
	uxCriticalNesting = 0;
 8014da0:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014da2:	4b13      	ldr	r3, [pc, #76]	; (8014df0 <xPortStartScheduler+0xc0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014da4:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014da6:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014da8:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014daa:	681a      	ldr	r2, [r3, #0]
 8014dac:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8014db0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8014db8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8014dba:	f7ff ff9b 	bl	8014cf4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8014dbe:	4b0d      	ldr	r3, [pc, #52]	; (8014df4 <xPortStartScheduler+0xc4>)
 8014dc0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8014dc2:	f7ff feb1 	bl	8014b28 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014dc6:	4a0c      	ldr	r2, [pc, #48]	; (8014df8 <xPortStartScheduler+0xc8>)
 8014dc8:	6813      	ldr	r3, [r2, #0]
 8014dca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014dce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8014dd0:	f7ff fe96 	bl	8014b00 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8014dd4:	f7ff f8ec 	bl	8013fb0 <vTaskSwitchContext>
	prvTaskExitError();
 8014dd8:	f7ff feb0 	bl	8014b3c <prvTaskExitError>
}
 8014ddc:	4620      	mov	r0, r4
 8014dde:	b003      	add	sp, #12
 8014de0:	bd30      	pop	{r4, r5, pc}
 8014de2:	bf00      	nop
 8014de4:	e000e400 	.word	0xe000e400
 8014de8:	20001f48 	.word	0x20001f48
 8014dec:	20001f4c 	.word	0x20001f4c
 8014df0:	e000ed20 	.word	0xe000ed20
 8014df4:	20000400 	.word	0x20000400
 8014df8:	e000ef34 	.word	0xe000ef34

08014dfc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014dfc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014e00:	2b0f      	cmp	r3, #15
 8014e02:	d910      	bls.n	8014e26 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e04:	4912      	ldr	r1, [pc, #72]	; (8014e50 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e06:	4a13      	ldr	r2, [pc, #76]	; (8014e54 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e08:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e0a:	7812      	ldrb	r2, [r2, #0]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d90a      	bls.n	8014e26 <vPortValidateInterruptPriority+0x2a>
 8014e10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014e14:	b672      	cpsid	i
 8014e16:	f383 8811 	msr	BASEPRI, r3
 8014e1a:	f3bf 8f6f 	isb	sy
 8014e1e:	f3bf 8f4f 	dsb	sy
 8014e22:	b662      	cpsie	i
 8014e24:	e7fe      	b.n	8014e24 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014e26:	4b0c      	ldr	r3, [pc, #48]	; (8014e58 <vPortValidateInterruptPriority+0x5c>)
 8014e28:	4a0c      	ldr	r2, [pc, #48]	; (8014e5c <vPortValidateInterruptPriority+0x60>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	6812      	ldr	r2, [r2, #0]
 8014e2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014e32:	4293      	cmp	r3, r2
 8014e34:	d90a      	bls.n	8014e4c <vPortValidateInterruptPriority+0x50>
 8014e36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014e3a:	b672      	cpsid	i
 8014e3c:	f383 8811 	msr	BASEPRI, r3
 8014e40:	f3bf 8f6f 	isb	sy
 8014e44:	f3bf 8f4f 	dsb	sy
 8014e48:	b662      	cpsie	i
 8014e4a:	e7fe      	b.n	8014e4a <vPortValidateInterruptPriority+0x4e>
	}
 8014e4c:	4770      	bx	lr
 8014e4e:	bf00      	nop
 8014e50:	e000e3f0 	.word	0xe000e3f0
 8014e54:	20001f48 	.word	0x20001f48
 8014e58:	e000ed0c 	.word	0xe000ed0c
 8014e5c:	20001f4c 	.word	0x20001f4c

08014e60 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014e60:	4b15      	ldr	r3, [pc, #84]	; (8014eb8 <prvInsertBlockIntoFreeList+0x58>)
{
 8014e62:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014e64:	461a      	mov	r2, r3
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	4283      	cmp	r3, r0
 8014e6a:	d3fb      	bcc.n	8014e64 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014e6c:	6851      	ldr	r1, [r2, #4]
 8014e6e:	1854      	adds	r4, r2, r1
 8014e70:	42a0      	cmp	r0, r4
 8014e72:	d00a      	beq.n	8014e8a <prvInsertBlockIntoFreeList+0x2a>
 8014e74:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014e76:	1844      	adds	r4, r0, r1
 8014e78:	42a3      	cmp	r3, r4
 8014e7a:	d00d      	beq.n	8014e98 <prvInsertBlockIntoFreeList+0x38>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014e7c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014e7e:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e80:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014e84:	bf18      	it	ne
 8014e86:	6010      	strne	r0, [r2, #0]
}
 8014e88:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014e8a:	6844      	ldr	r4, [r0, #4]
 8014e8c:	4610      	mov	r0, r2
 8014e8e:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014e90:	1844      	adds	r4, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014e92:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014e94:	42a3      	cmp	r3, r4
 8014e96:	d1f1      	bne.n	8014e7c <prvInsertBlockIntoFreeList+0x1c>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014e98:	4c08      	ldr	r4, [pc, #32]	; (8014ebc <prvInsertBlockIntoFreeList+0x5c>)
 8014e9a:	6824      	ldr	r4, [r4, #0]
 8014e9c:	42a3      	cmp	r3, r4
 8014e9e:	d0ed      	beq.n	8014e7c <prvInsertBlockIntoFreeList+0x1c>
	if( pxIterator != pxBlockToInsert )
 8014ea0:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014ea2:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014ea6:	4421      	add	r1, r4
}
 8014ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014eac:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014eb0:	bf18      	it	ne
 8014eb2:	6010      	strne	r0, [r2, #0]
}
 8014eb4:	4770      	bx	lr
 8014eb6:	bf00      	nop
 8014eb8:	20019f60 	.word	0x20019f60
 8014ebc:	20001f50 	.word	0x20001f50

08014ec0 <pvPortMalloc>:
{
 8014ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ec4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8014ec6:	f7fe fef7 	bl	8013cb8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8014eca:	4946      	ldr	r1, [pc, #280]	; (8014fe4 <pvPortMalloc+0x124>)
 8014ecc:	680b      	ldr	r3, [r1, #0]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d040      	beq.n	8014f54 <pvPortMalloc+0x94>
 8014ed2:	4b45      	ldr	r3, [pc, #276]	; (8014fe8 <pvPortMalloc+0x128>)
 8014ed4:	681f      	ldr	r7, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014ed6:	423c      	tst	r4, r7
 8014ed8:	d134      	bne.n	8014f44 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 8014eda:	2c00      	cmp	r4, #0
 8014edc:	d032      	beq.n	8014f44 <pvPortMalloc+0x84>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ede:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8014ee0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ee4:	d002      	beq.n	8014eec <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014ee6:	f023 0307 	bic.w	r3, r3, #7
 8014eea:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014eec:	b353      	cbz	r3, 8014f44 <pvPortMalloc+0x84>
 8014eee:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8014ff8 <pvPortMalloc+0x138>
 8014ef2:	f8d8 5000 	ldr.w	r5, [r8]
 8014ef6:	429d      	cmp	r5, r3
 8014ef8:	d324      	bcc.n	8014f44 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 8014efa:	483c      	ldr	r0, [pc, #240]	; (8014fec <pvPortMalloc+0x12c>)
 8014efc:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014efe:	e003      	b.n	8014f08 <pvPortMalloc+0x48>
 8014f00:	6826      	ldr	r6, [r4, #0]
 8014f02:	b126      	cbz	r6, 8014f0e <pvPortMalloc+0x4e>
 8014f04:	4620      	mov	r0, r4
 8014f06:	4634      	mov	r4, r6
 8014f08:	6862      	ldr	r2, [r4, #4]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d3f8      	bcc.n	8014f00 <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 8014f0e:	6809      	ldr	r1, [r1, #0]
 8014f10:	42a1      	cmp	r1, r4
 8014f12:	d017      	beq.n	8014f44 <pvPortMalloc+0x84>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f14:	eba2 0c03 	sub.w	ip, r2, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014f18:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f1a:	6821      	ldr	r1, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f1c:	f1bc 0f10 	cmp.w	ip, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014f20:	f106 0608 	add.w	r6, r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f24:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f26:	d93b      	bls.n	8014fa0 <pvPortMalloc+0xe0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014f28:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f2a:	0742      	lsls	r2, r0, #29
 8014f2c:	d032      	beq.n	8014f94 <pvPortMalloc+0xd4>
 8014f2e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f32:	b672      	cpsid	i
 8014f34:	f383 8811 	msr	BASEPRI, r3
 8014f38:	f3bf 8f6f 	isb	sy
 8014f3c:	f3bf 8f4f 	dsb	sy
 8014f40:	b662      	cpsie	i
 8014f42:	e7fe      	b.n	8014f42 <pvPortMalloc+0x82>
			vApplicationMallocFailedHook();
 8014f44:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8014f46:	f7fe ff7f 	bl	8013e48 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8014f4a:	f7eb fe39 	bl	8000bc0 <vApplicationMallocFailedHook>
}
 8014f4e:	4630      	mov	r0, r6
 8014f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 8014f54:	4b26      	ldr	r3, [pc, #152]	; (8014ff0 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014f56:	075d      	lsls	r5, r3, #29
 8014f58:	d13d      	bne.n	8014fd6 <pvPortMalloc+0x116>
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8014f60:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8014f62:	3b08      	subs	r3, #8
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f64:	4f23      	ldr	r7, [pc, #140]	; (8014ff4 <pvPortMalloc+0x134>)
	xStart.xBlockSize = ( size_t ) 0;
 8014f66:	2500      	movs	r5, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f68:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8014ff8 <pvPortMalloc+0x138>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f6c:	f023 0307 	bic.w	r3, r3, #7
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014f70:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014f74:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8014f76:	600b      	str	r3, [r1, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8014f78:	e9c3 5500 	strd	r5, r5, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f7c:	603a      	str	r2, [r7, #0]
}
 8014f7e:	4637      	mov	r7, r6
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f80:	f8cc 2000 	str.w	r2, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014f84:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014f88:	4b18      	ldr	r3, [pc, #96]	; (8014fec <pvPortMalloc+0x12c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014f8a:	4a17      	ldr	r2, [pc, #92]	; (8014fe8 <pvPortMalloc+0x128>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014f8c:	e9c3 0500 	strd	r0, r5, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014f90:	6016      	str	r6, [r2, #0]
}
 8014f92:	e7a0      	b.n	8014ed6 <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014f94:	f8c0 c004 	str.w	ip, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014f98:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014f9a:	f7ff ff61 	bl	8014e60 <prvInsertBlockIntoFreeList>
 8014f9e:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014fa0:	4914      	ldr	r1, [pc, #80]	; (8014ff4 <pvPortMalloc+0x134>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014fa2:	1aad      	subs	r5, r5, r2
					pxBlock->pxNextFreeBlock = NULL;
 8014fa4:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014fa6:	433a      	orrs	r2, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014fa8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014faa:	f8c8 5000 	str.w	r5, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014fae:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 8014fb0:	e9c4 3200 	strd	r3, r2, [r4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014fb4:	bf38      	it	cc
 8014fb6:	600d      	strcc	r5, [r1, #0]
	( void ) xTaskResumeAll();
 8014fb8:	f7fe ff46 	bl	8013e48 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fbc:	0773      	lsls	r3, r6, #29
 8014fbe:	d0c6      	beq.n	8014f4e <pvPortMalloc+0x8e>
 8014fc0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014fc4:	b672      	cpsid	i
 8014fc6:	f383 8811 	msr	BASEPRI, r3
 8014fca:	f3bf 8f6f 	isb	sy
 8014fce:	f3bf 8f4f 	dsb	sy
 8014fd2:	b662      	cpsie	i
 8014fd4:	e7fe      	b.n	8014fd4 <pvPortMalloc+0x114>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014fd6:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014fd8:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8014fdc:	f022 0207 	bic.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014fe0:	4610      	mov	r0, r2
 8014fe2:	e7be      	b.n	8014f62 <pvPortMalloc+0xa2>
 8014fe4:	20001f50 	.word	0x20001f50
 8014fe8:	20019f54 	.word	0x20019f54
 8014fec:	20019f60 	.word	0x20019f60
 8014ff0:	20001f54 	.word	0x20001f54
 8014ff4:	20019f5c 	.word	0x20019f5c
 8014ff8:	20019f58 	.word	0x20019f58

08014ffc <vPortFree>:
	if( pv != NULL )
 8014ffc:	b300      	cbz	r0, 8015040 <vPortFree+0x44>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014ffe:	4a1b      	ldr	r2, [pc, #108]	; (801506c <vPortFree+0x70>)
 8015000:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015004:	6812      	ldr	r2, [r2, #0]
 8015006:	4213      	tst	r3, r2
{
 8015008:	b510      	push	{r4, lr}
 801500a:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801500c:	d00d      	beq.n	801502a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801500e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8015012:	b1b1      	cbz	r1, 8015042 <vPortFree+0x46>
 8015014:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015018:	b672      	cpsid	i
 801501a:	f383 8811 	msr	BASEPRI, r3
 801501e:	f3bf 8f6f 	isb	sy
 8015022:	f3bf 8f4f 	dsb	sy
 8015026:	b662      	cpsie	i
 8015028:	e7fe      	b.n	8015028 <vPortFree+0x2c>
 801502a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801502e:	b672      	cpsid	i
 8015030:	f383 8811 	msr	BASEPRI, r3
 8015034:	f3bf 8f6f 	isb	sy
 8015038:	f3bf 8f4f 	dsb	sy
 801503c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801503e:	e7fe      	b.n	801503e <vPortFree+0x42>
 8015040:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015042:	ea23 0302 	bic.w	r3, r3, r2
 8015046:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801504a:	f7fe fe35 	bl	8013cb8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801504e:	4a08      	ldr	r2, [pc, #32]	; (8015070 <vPortFree+0x74>)
 8015050:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015054:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015058:	6811      	ldr	r1, [r2, #0]
 801505a:	440b      	add	r3, r1
 801505c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801505e:	f7ff feff 	bl	8014e60 <prvInsertBlockIntoFreeList>
}
 8015062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8015066:	f7fe beef 	b.w	8013e48 <xTaskResumeAll>
 801506a:	bf00      	nop
 801506c:	20019f54 	.word	0x20019f54
 8015070:	20019f58 	.word	0x20019f58

08015074 <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8015074:	f003 b90e 	b.w	8018294 <pbuf_free>

08015078 <tcpip_thread>:
{
 8015078:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 801507a:	483a      	ldr	r0, [pc, #232]	; (8015164 <tcpip_thread+0xec>)
{
 801507c:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 801507e:	f00b fe7f 	bl	8020d80 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8015082:	4b39      	ldr	r3, [pc, #228]	; (8015168 <tcpip_thread+0xf0>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	b113      	cbz	r3, 801508e <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8015088:	4a38      	ldr	r2, [pc, #224]	; (801516c <tcpip_thread+0xf4>)
 801508a:	6810      	ldr	r0, [r2, #0]
 801508c:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801508e:	4d35      	ldr	r5, [pc, #212]	; (8015164 <tcpip_thread+0xec>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8015090:	4e37      	ldr	r6, [pc, #220]	; (8015170 <tcpip_thread+0xf8>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015092:	4f38      	ldr	r7, [pc, #224]	; (8015174 <tcpip_thread+0xfc>)
 8015094:	e010      	b.n	80150b8 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8015096:	b168      	cbz	r0, 80150b4 <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8015098:	4628      	mov	r0, r5
 801509a:	f00b fe77 	bl	8020d8c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801509e:	4622      	mov	r2, r4
 80150a0:	a901      	add	r1, sp, #4
 80150a2:	4630      	mov	r0, r6
 80150a4:	f00b fe12 	bl	8020ccc <sys_arch_mbox_fetch>
 80150a8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80150aa:	4628      	mov	r0, r5
 80150ac:	f00b fe68 	bl	8020d80 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80150b0:	3401      	adds	r4, #1
 80150b2:	d111      	bne.n	80150d8 <tcpip_thread+0x60>
    sys_check_timeouts();
 80150b4:	f008 f820 	bl	801d0f8 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 80150b8:	f008 f842 	bl	801d140 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80150bc:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80150be:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80150c0:	d1e9      	bne.n	8015096 <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 80150c2:	4628      	mov	r0, r5
 80150c4:	f00b fe62 	bl	8020d8c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80150c8:	2200      	movs	r2, #0
 80150ca:	a901      	add	r1, sp, #4
 80150cc:	4630      	mov	r0, r6
 80150ce:	f00b fdfd 	bl	8020ccc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80150d2:	4628      	mov	r0, r5
 80150d4:	f00b fe54 	bl	8020d80 <sys_mutex_lock>
    if (msg == NULL) {
 80150d8:	9c01      	ldr	r4, [sp, #4]
 80150da:	b384      	cbz	r4, 801513e <tcpip_thread+0xc6>
  switch (msg->type) {
 80150dc:	7823      	ldrb	r3, [r4, #0]
 80150de:	2b04      	cmp	r3, #4
 80150e0:	d838      	bhi.n	8015154 <tcpip_thread+0xdc>
 80150e2:	e8df f003 	tbb	[pc, r3]
 80150e6:	1822      	.short	0x1822
 80150e8:	070f      	.short	0x070f
 80150ea:	03          	.byte	0x03
 80150eb:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 80150ec:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80150f0:	4798      	blx	r3
      break;
 80150f2:	e7e1      	b.n	80150b8 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80150f4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80150f8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80150fa:	4621      	mov	r1, r4
 80150fc:	2009      	movs	r0, #9
 80150fe:	f002 fdf9 	bl	8017cf4 <memp_free>
      break;
 8015102:	e7d9      	b.n	80150b8 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8015104:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8015108:	f007 ffd8 	bl	801d0bc <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801510c:	4621      	mov	r1, r4
 801510e:	2009      	movs	r0, #9
 8015110:	f002 fdf0 	bl	8017cf4 <memp_free>
      break;
 8015114:	e7d0      	b.n	80150b8 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8015116:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801511a:	6860      	ldr	r0, [r4, #4]
 801511c:	f007 ff96 	bl	801d04c <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015120:	4621      	mov	r1, r4
 8015122:	2009      	movs	r0, #9
 8015124:	f002 fde6 	bl	8017cf4 <memp_free>
      break;
 8015128:	e7c6      	b.n	80150b8 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801512a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801512e:	6860      	ldr	r0, [r4, #4]
 8015130:	4798      	blx	r3
 8015132:	b958      	cbnz	r0, 801514c <tcpip_thread+0xd4>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015134:	4621      	mov	r1, r4
 8015136:	200a      	movs	r0, #10
 8015138:	f002 fddc 	bl	8017cf4 <memp_free>
      break;
 801513c:	e7bc      	b.n	80150b8 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801513e:	463b      	mov	r3, r7
 8015140:	2291      	movs	r2, #145	; 0x91
 8015142:	490d      	ldr	r1, [pc, #52]	; (8015178 <tcpip_thread+0x100>)
 8015144:	480d      	ldr	r0, [pc, #52]	; (801517c <tcpip_thread+0x104>)
 8015146:	f00d f9bd 	bl	80224c4 <iprintf>
      continue;
 801514a:	e7b5      	b.n	80150b8 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 801514c:	6860      	ldr	r0, [r4, #4]
 801514e:	f003 f8a1 	bl	8018294 <pbuf_free>
 8015152:	e7ef      	b.n	8015134 <tcpip_thread+0xbc>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015154:	463b      	mov	r3, r7
 8015156:	22cf      	movs	r2, #207	; 0xcf
 8015158:	4907      	ldr	r1, [pc, #28]	; (8015178 <tcpip_thread+0x100>)
 801515a:	4808      	ldr	r0, [pc, #32]	; (801517c <tcpip_thread+0x104>)
 801515c:	f00d f9b2 	bl	80224c4 <iprintf>
      break;
 8015160:	e7aa      	b.n	80150b8 <tcpip_thread+0x40>
 8015162:	bf00      	nop
 8015164:	2001f160 	.word	0x2001f160
 8015168:	20019f68 	.word	0x20019f68
 801516c:	20019f6c 	.word	0x20019f6c
 8015170:	20019f70 	.word	0x20019f70
 8015174:	08028d64 	.word	0x08028d64
 8015178:	08028d94 	.word	0x08028d94
 801517c:	08028d24 	.word	0x08028d24

08015180 <tcpip_inpkt>:
{
 8015180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015182:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015184:	4814      	ldr	r0, [pc, #80]	; (80151d8 <tcpip_inpkt+0x58>)
{
 8015186:	460e      	mov	r6, r1
 8015188:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801518a:	f00b fdc1 	bl	8020d10 <sys_mbox_valid>
 801518e:	b188      	cbz	r0, 80151b4 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015190:	22fe      	movs	r2, #254	; 0xfe
 8015192:	4912      	ldr	r1, [pc, #72]	; (80151dc <tcpip_inpkt+0x5c>)
 8015194:	200a      	movs	r0, #10
 8015196:	f002 fd89 	bl	8017cac <memp_malloc_fn>
  if (msg == NULL) {
 801519a:	4604      	mov	r4, r0
 801519c:	b1c0      	cbz	r0, 80151d0 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 801519e:	2300      	movs	r3, #0
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80151a0:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 80151a2:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 80151a4:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 80151a6:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80151aa:	480b      	ldr	r0, [pc, #44]	; (80151d8 <tcpip_inpkt+0x58>)
 80151ac:	f00b fd7c 	bl	8020ca8 <sys_mbox_trypost>
 80151b0:	b938      	cbnz	r0, 80151c2 <tcpip_inpkt+0x42>
}
 80151b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80151b4:	4b09      	ldr	r3, [pc, #36]	; (80151dc <tcpip_inpkt+0x5c>)
 80151b6:	22fc      	movs	r2, #252	; 0xfc
 80151b8:	4909      	ldr	r1, [pc, #36]	; (80151e0 <tcpip_inpkt+0x60>)
 80151ba:	480a      	ldr	r0, [pc, #40]	; (80151e4 <tcpip_inpkt+0x64>)
 80151bc:	f00d f982 	bl	80224c4 <iprintf>
 80151c0:	e7e6      	b.n	8015190 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80151c2:	4621      	mov	r1, r4
 80151c4:	200a      	movs	r0, #10
 80151c6:	f002 fd95 	bl	8017cf4 <memp_free>
    return ERR_MEM;
 80151ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80151ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80151d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80151d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151d6:	bf00      	nop
 80151d8:	20019f70 	.word	0x20019f70
 80151dc:	08028d64 	.word	0x08028d64
 80151e0:	08028db4 	.word	0x08028db4
 80151e4:	08028d24 	.word	0x08028d24

080151e8 <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80151e8:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 80151ec:	f013 0f18 	tst.w	r3, #24
 80151f0:	d002      	beq.n	80151f8 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 80151f2:	4a03      	ldr	r2, [pc, #12]	; (8015200 <tcpip_input+0x18>)
 80151f4:	f7ff bfc4 	b.w	8015180 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 80151f8:	4a02      	ldr	r2, [pc, #8]	; (8015204 <tcpip_input+0x1c>)
 80151fa:	f7ff bfc1 	b.w	8015180 <tcpip_inpkt>
 80151fe:	bf00      	nop
 8015200:	08020b1d 	.word	0x08020b1d
 8015204:	0801fc91 	.word	0x0801fc91

08015208 <tcpip_try_callback>:
{
 8015208:	b570      	push	{r4, r5, r6, lr}
 801520a:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801520c:	4814      	ldr	r0, [pc, #80]	; (8015260 <tcpip_try_callback+0x58>)
{
 801520e:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015210:	f00b fd7e 	bl	8020d10 <sys_mbox_valid>
 8015214:	b188      	cbz	r0, 801523a <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015216:	f240 125f 	movw	r2, #351	; 0x15f
 801521a:	4912      	ldr	r1, [pc, #72]	; (8015264 <tcpip_try_callback+0x5c>)
 801521c:	2009      	movs	r0, #9
 801521e:	f002 fd45 	bl	8017cac <memp_malloc_fn>
  if (msg == NULL) {
 8015222:	4604      	mov	r4, r0
 8015224:	b1c0      	cbz	r0, 8015258 <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8015226:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015228:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 801522a:	e9c0 6501 	strd	r6, r5, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 801522e:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015230:	480b      	ldr	r0, [pc, #44]	; (8015260 <tcpip_try_callback+0x58>)
 8015232:	f00b fd39 	bl	8020ca8 <sys_mbox_trypost>
 8015236:	b940      	cbnz	r0, 801524a <tcpip_try_callback+0x42>
}
 8015238:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801523a:	4b0a      	ldr	r3, [pc, #40]	; (8015264 <tcpip_try_callback+0x5c>)
 801523c:	f240 125d 	movw	r2, #349	; 0x15d
 8015240:	4909      	ldr	r1, [pc, #36]	; (8015268 <tcpip_try_callback+0x60>)
 8015242:	480a      	ldr	r0, [pc, #40]	; (801526c <tcpip_try_callback+0x64>)
 8015244:	f00d f93e 	bl	80224c4 <iprintf>
 8015248:	e7e5      	b.n	8015216 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801524a:	4621      	mov	r1, r4
 801524c:	2009      	movs	r0, #9
 801524e:	f002 fd51 	bl	8017cf4 <memp_free>
    return ERR_MEM;
 8015252:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015256:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8015258:	f04f 30ff 	mov.w	r0, #4294967295
}
 801525c:	bd70      	pop	{r4, r5, r6, pc}
 801525e:	bf00      	nop
 8015260:	20019f70 	.word	0x20019f70
 8015264:	08028d64 	.word	0x08028d64
 8015268:	08028db4 	.word	0x08028db4
 801526c:	08028d24 	.word	0x08028d24

08015270 <tcpip_init>:
{
 8015270:	b530      	push	{r4, r5, lr}
 8015272:	b083      	sub	sp, #12
 8015274:	4605      	mov	r5, r0
 8015276:	460c      	mov	r4, r1
  lwip_init();
 8015278:	f001 ff9e 	bl	80171b8 <lwip_init>
  tcpip_init_done = initfunc;
 801527c:	4a15      	ldr	r2, [pc, #84]	; (80152d4 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801527e:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8015280:	4b15      	ldr	r3, [pc, #84]	; (80152d8 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015282:	4816      	ldr	r0, [pc, #88]	; (80152dc <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8015284:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8015286:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015288:	f00b fce8 	bl	8020c5c <sys_mbox_new>
 801528c:	b968      	cbnz	r0, 80152aa <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801528e:	4814      	ldr	r0, [pc, #80]	; (80152e0 <tcpip_init+0x70>)
 8015290:	f00b fd50 	bl	8020d34 <sys_mutex_new>
 8015294:	b9a8      	cbnz	r0, 80152c2 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8015296:	2200      	movs	r2, #0
 8015298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801529c:	4911      	ldr	r1, [pc, #68]	; (80152e4 <tcpip_init+0x74>)
 801529e:	9200      	str	r2, [sp, #0]
 80152a0:	4811      	ldr	r0, [pc, #68]	; (80152e8 <tcpip_init+0x78>)
 80152a2:	f00b fd77 	bl	8020d94 <sys_thread_new>
}
 80152a6:	b003      	add	sp, #12
 80152a8:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80152aa:	4b10      	ldr	r3, [pc, #64]	; (80152ec <tcpip_init+0x7c>)
 80152ac:	f240 2261 	movw	r2, #609	; 0x261
 80152b0:	490f      	ldr	r1, [pc, #60]	; (80152f0 <tcpip_init+0x80>)
 80152b2:	4810      	ldr	r0, [pc, #64]	; (80152f4 <tcpip_init+0x84>)
 80152b4:	f00d f906 	bl	80224c4 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80152b8:	4809      	ldr	r0, [pc, #36]	; (80152e0 <tcpip_init+0x70>)
 80152ba:	f00b fd3b 	bl	8020d34 <sys_mutex_new>
 80152be:	2800      	cmp	r0, #0
 80152c0:	d0e9      	beq.n	8015296 <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80152c2:	4b0a      	ldr	r3, [pc, #40]	; (80152ec <tcpip_init+0x7c>)
 80152c4:	f240 2265 	movw	r2, #613	; 0x265
 80152c8:	490b      	ldr	r1, [pc, #44]	; (80152f8 <tcpip_init+0x88>)
 80152ca:	480a      	ldr	r0, [pc, #40]	; (80152f4 <tcpip_init+0x84>)
 80152cc:	f00d f8fa 	bl	80224c4 <iprintf>
 80152d0:	e7e1      	b.n	8015296 <tcpip_init+0x26>
 80152d2:	bf00      	nop
 80152d4:	20019f68 	.word	0x20019f68
 80152d8:	20019f6c 	.word	0x20019f6c
 80152dc:	20019f70 	.word	0x20019f70
 80152e0:	2001f160 	.word	0x2001f160
 80152e4:	08015079 	.word	0x08015079
 80152e8:	08028e0c 	.word	0x08028e0c
 80152ec:	08028d64 	.word	0x08028d64
 80152f0:	08028dc4 	.word	0x08028dc4
 80152f4:	08028d24 	.word	0x08028d24
 80152f8:	08028de8 	.word	0x08028de8

080152fc <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 80152fc:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 80152fe:	4801      	ldr	r0, [pc, #4]	; (8015304 <pbuf_free_callback+0x8>)
 8015300:	f7ff bf82 	b.w	8015208 <tcpip_try_callback>
 8015304:	08015075 	.word	0x08015075

08015308 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8015308:	b300      	cbz	r0, 801534c <fs_open+0x44>
{
 801530a:	b570      	push	{r4, r5, r6, lr}
 801530c:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 801530e:	b1d1      	cbz	r1, 8015346 <fs_open+0x3e>
 8015310:	4606      	mov	r6, r0
 8015312:	4910      	ldr	r1, [pc, #64]	; (8015354 <fs_open+0x4c>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015314:	4c10      	ldr	r4, [pc, #64]	; (8015358 <fs_open+0x50>)
 8015316:	e000      	b.n	801531a <fs_open+0x12>
 8015318:	6861      	ldr	r1, [r4, #4]
    if (!strcmp(name, (const char *)f->name)) {
 801531a:	4628      	mov	r0, r5
 801531c:	f7ea ff90 	bl	8000240 <strcmp>
 8015320:	b130      	cbz	r0, 8015330 <fs_open+0x28>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015322:	6824      	ldr	r4, [r4, #0]
 8015324:	2c00      	cmp	r4, #0
 8015326:	d1f7      	bne.n	8015318 <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8015328:	f06f 0305 	mvn.w	r3, #5
}
 801532c:	4618      	mov	r0, r3
 801532e:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8015330:	68e2      	ldr	r2, [r4, #12]
      return ERR_OK;
 8015332:	4603      	mov	r3, r0
      file->data = (const char *)f->data;
 8015334:	68a1      	ldr	r1, [r4, #8]
      file->pextension = NULL;
 8015336:	e9c6 2002 	strd	r2, r0, [r6, #8]
      file->len = f->len;
 801533a:	e9c6 1200 	strd	r1, r2, [r6]
      file->flags = f->flags;
 801533e:	7c22      	ldrb	r2, [r4, #16]
}
 8015340:	4618      	mov	r0, r3
      file->flags = f->flags;
 8015342:	7432      	strb	r2, [r6, #16]
}
 8015344:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8015346:	f06f 030f 	mvn.w	r3, #15
 801534a:	e7ef      	b.n	801532c <fs_open+0x24>
 801534c:	f06f 030f 	mvn.w	r3, #15
}
 8015350:	4618      	mov	r0, r3
 8015352:	4770      	bx	lr
 8015354:	08033ca0 	.word	0x08033ca0
 8015358:	0803ee0c 	.word	0x0803ee0c

0801535c <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801535c:	4770      	bx	lr
 801535e:	bf00      	nop

08015360 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8015360:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8015364:	1a10      	subs	r0, r2, r0
 8015366:	4770      	bx	lr

08015368 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8015368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 801536c:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 801536e:	b364      	cbz	r4, 80153ca <http_write+0x62>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8015370:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 8015372:	4690      	mov	r8, r2
 8015374:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8015378:	4606      	mov	r6, r0
 801537a:	006d      	lsls	r5, r5, #1
 801537c:	460f      	mov	r7, r1
 801537e:	4699      	mov	r9, r3
 8015380:	b2ad      	uxth	r5, r5
 8015382:	4295      	cmp	r5, r2
 8015384:	bf28      	it	cs
 8015386:	4615      	movcs	r5, r2
 8015388:	42ac      	cmp	r4, r5
 801538a:	bf28      	it	cs
 801538c:	462c      	movcs	r4, r5
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 801538e:	464b      	mov	r3, r9
 8015390:	4622      	mov	r2, r4
 8015392:	4639      	mov	r1, r7
 8015394:	4630      	mov	r0, r6
 8015396:	f006 fc9f 	bl	801bcd8 <tcp_write>
    if (err == ERR_MEM) {
 801539a:	1c43      	adds	r3, r0, #1
 801539c:	d008      	beq.n	80153b0 <http_write+0x48>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 801539e:	b978      	cbnz	r0, 80153c0 <http_write+0x58>
 80153a0:	f8a8 4000 	strh.w	r4, [r8]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 80153a4:	8b73      	ldrh	r3, [r6, #26]
 80153a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80153aa:	8373      	strh	r3, [r6, #26]
#endif

  return err;
}
 80153ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 80153b0:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80153b4:	b123      	cbz	r3, 80153c0 <http_write+0x58>
 80153b6:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
        len /= 2;
 80153ba:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 80153bc:	2b08      	cmp	r3, #8
 80153be:	d901      	bls.n	80153c4 <http_write+0x5c>
    *length = 0;
 80153c0:	2400      	movs	r4, #0
 80153c2:	e7ed      	b.n	80153a0 <http_write+0x38>
  } while ((err == ERR_MEM) && (len > 1));
 80153c4:	2c01      	cmp	r4, #1
 80153c6:	d8e2      	bhi.n	801538e <http_write+0x26>
 80153c8:	e7fa      	b.n	80153c0 <http_write+0x58>
    return ERR_OK;
 80153ca:	4620      	mov	r0, r4
}
 80153cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080153d0 <http_state_eof>:
{
 80153d0:	b510      	push	{r4, lr}
 80153d2:	4604      	mov	r4, r0
  if (hs->handle) {
 80153d4:	6940      	ldr	r0, [r0, #20]
 80153d6:	b118      	cbz	r0, 80153e0 <http_state_eof+0x10>
    fs_close(hs->handle);
 80153d8:	f7ff ffc0 	bl	801535c <fs_close>
    hs->handle = NULL;
 80153dc:	2300      	movs	r3, #0
 80153de:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80153e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80153e2:	b118      	cbz	r0, 80153ec <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 80153e4:	f002 f89a 	bl	801751c <mem_free>
    hs->ssi = NULL;
 80153e8:	2300      	movs	r3, #0
 80153ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80153ec:	6a20      	ldr	r0, [r4, #32]
 80153ee:	b118      	cbz	r0, 80153f8 <http_state_eof+0x28>
    pbuf_free(hs->req);
 80153f0:	f002 ff50 	bl	8018294 <pbuf_free>
    hs->req = NULL;
 80153f4:	2300      	movs	r3, #0
 80153f6:	6223      	str	r3, [r4, #32]
}
 80153f8:	bd10      	pop	{r4, pc}
 80153fa:	bf00      	nop

080153fc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80153fc:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 80153fe:	4b0e      	ldr	r3, [pc, #56]	; (8015438 <http_get_404_file+0x3c>)
{
 8015400:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8015402:	4604      	mov	r4, r0
 8015404:	4619      	mov	r1, r3
  *uri = "/404.html";
 8015406:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8015408:	f7ff ff7e 	bl	8015308 <fs_open>
  if (err != ERR_OK) {
 801540c:	b908      	cbnz	r0, 8015412 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 801540e:	4620      	mov	r0, r4
 8015410:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8015412:	490a      	ldr	r1, [pc, #40]	; (801543c <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8015414:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8015416:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8015418:	f7ff ff76 	bl	8015308 <fs_open>
    if (err != ERR_OK) {
 801541c:	2800      	cmp	r0, #0
 801541e:	d0f6      	beq.n	801540e <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8015420:	4907      	ldr	r1, [pc, #28]	; (8015440 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8015422:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8015424:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8015426:	f7ff ff6f 	bl	8015308 <fs_open>
      if (err != ERR_OK) {
 801542a:	2800      	cmp	r0, #0
 801542c:	d0ef      	beq.n	801540e <http_get_404_file+0x12>
        *uri = NULL;
 801542e:	2300      	movs	r3, #0
        return NULL;
 8015430:	461c      	mov	r4, r3
        *uri = NULL;
 8015432:	602b      	str	r3, [r5, #0]
        return NULL;
 8015434:	e7eb      	b.n	801540e <http_get_404_file+0x12>
 8015436:	bf00      	nop
 8015438:	0803ee20 	.word	0x0803ee20
 801543c:	0803ee2c 	.word	0x0803ee2c
 8015440:	0803ee38 	.word	0x0803ee38

08015444 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8015444:	bb82      	cbnz	r2, 80154a8 <http_accept+0x64>
{
 8015446:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8015448:	fab1 f581 	clz	r5, r1
 801544c:	460c      	mov	r4, r1
 801544e:	096d      	lsrs	r5, r5, #5
 8015450:	b339      	cbz	r1, 80154a2 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8015452:	2101      	movs	r1, #1
 8015454:	4620      	mov	r0, r4
 8015456:	f003 fd5f 	bl	8018f18 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 801545a:	2034      	movs	r0, #52	; 0x34
 801545c:	f002 fa38 	bl	80178d0 <mem_malloc>
  if (ret != NULL) {
 8015460:	4606      	mov	r6, r0
 8015462:	b1d8      	cbz	r0, 801549c <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8015464:	2234      	movs	r2, #52	; 0x34
 8015466:	4629      	mov	r1, r5
 8015468:	f00c f8ba 	bl	80215e0 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801546c:	4631      	mov	r1, r6
 801546e:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8015470:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8015472:	f003 fd87 	bl	8018f84 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8015476:	4620      	mov	r0, r4
 8015478:	490d      	ldr	r1, [pc, #52]	; (80154b0 <http_accept+0x6c>)
 801547a:	f003 fd87 	bl	8018f8c <tcp_recv>
  altcp_err(pcb, http_err);
 801547e:	4620      	mov	r0, r4
 8015480:	490c      	ldr	r1, [pc, #48]	; (80154b4 <http_accept+0x70>)
 8015482:	f003 fdbb 	bl	8018ffc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8015486:	2204      	movs	r2, #4
 8015488:	4620      	mov	r0, r4
 801548a:	490b      	ldr	r1, [pc, #44]	; (80154b8 <http_accept+0x74>)
 801548c:	f003 fdd8 	bl	8019040 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8015490:	4620      	mov	r0, r4
 8015492:	490a      	ldr	r1, [pc, #40]	; (80154bc <http_accept+0x78>)
 8015494:	f003 fd96 	bl	8018fc4 <tcp_sent>

  return ERR_OK;
 8015498:	4628      	mov	r0, r5
}
 801549a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 801549c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80154a0:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80154a2:	f06f 0005 	mvn.w	r0, #5
}
 80154a6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80154a8:	f06f 0005 	mvn.w	r0, #5
}
 80154ac:	4770      	bx	lr
 80154ae:	bf00      	nop
 80154b0:	0801608d 	.word	0x0801608d
 80154b4:	080164d5 	.word	0x080164d5
 80154b8:	08016035 	.word	0x08016035
 80154bc:	0801601d 	.word	0x0801601d

080154c0 <http_init_file>:
{
 80154c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c4:	b089      	sub	sp, #36	; 0x24
 80154c6:	4604      	mov	r4, r0
  if (file != NULL) {
 80154c8:	460d      	mov	r5, r1
{
 80154ca:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80154ce:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80154d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (file != NULL) {
 80154d4:	2900      	cmp	r1, #0
 80154d6:	f000 80b0 	beq.w	801563a <http_init_file+0x17a>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80154da:	680b      	ldr	r3, [r1, #0]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	f000 80b2 	beq.w	8015646 <http_init_file+0x186>
    if (tag_check) {
 80154e2:	2e00      	cmp	r6, #0
 80154e4:	d171      	bne.n	80155ca <http_init_file+0x10a>
    hs->handle = file;
 80154e6:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 80154e8:	2f00      	cmp	r7, #0
 80154ea:	d051      	beq.n	8015590 <http_init_file+0xd0>
  if (!params || (params[0] == '\0')) {
 80154ec:	4b64      	ldr	r3, [pc, #400]	; (8015680 <http_init_file+0x1c0>)
 80154ee:	783a      	ldrb	r2, [r7, #0]
 80154f0:	9305      	str	r3, [sp, #20]
 80154f2:	2a00      	cmp	r2, #0
 80154f4:	d045      	beq.n	8015582 <http_init_file+0xc2>
 80154f6:	f04f 0801 	mov.w	r8, #1
 80154fa:	f8df b188 	ldr.w	fp, [pc, #392]	; 8015684 <http_init_file+0x1c4>
        *pair = '\0';
 80154fe:	f04f 0a00 	mov.w	sl, #0
 8015502:	4699      	mov	r9, r3
 8015504:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015508:	463c      	mov	r4, r7
 801550a:	e014      	b.n	8015536 <http_init_file+0x76>
 801550c:	2a0e      	cmp	r2, #14
      *pair = '\0';
 801550e:	f807 ab01 	strb.w	sl, [r7], #1
      pair++;
 8015512:	bfcc      	ite	gt
 8015514:	2500      	movgt	r5, #0
 8015516:	2501      	movle	r5, #1
    equals = strchr(equals, '=');
 8015518:	4620      	mov	r0, r4
 801551a:	213d      	movs	r1, #61	; 0x3d
 801551c:	f00d f9e4 	bl	80228e8 <strchr>
    if (equals) {
 8015520:	b318      	cbz	r0, 801556a <http_init_file+0xaa>
      *equals = '\0';
 8015522:	f800 ab01 	strb.w	sl, [r0], #1
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8015526:	f109 0904 	add.w	r9, r9, #4
      http_cgi_param_vals[loop] = equals + 1;
 801552a:	f849 0c04 	str.w	r0, [r9, #-4]
 801552e:	f108 0801 	add.w	r8, r8, #1
 8015532:	463c      	mov	r4, r7
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8015534:	b315      	cbz	r5, 801557c <http_init_file+0xbc>
    pair = strchr(pair, '&');
 8015536:	2126      	movs	r1, #38	; 0x26
 8015538:	4620      	mov	r0, r4
    http_cgi_params[loop] = pair;
 801553a:	f84b 4b04 	str.w	r4, [fp], #4
    pair = strchr(pair, '&');
 801553e:	4646      	mov	r6, r8
 8015540:	f00d f9d2 	bl	80228e8 <strchr>
    if (pair) {
 8015544:	f108 32ff 	add.w	r2, r8, #4294967295
 8015548:	4607      	mov	r7, r0
 801554a:	2800      	cmp	r0, #0
 801554c:	d1de      	bne.n	801550c <http_init_file+0x4c>
      pair = strchr(equals, ' ');
 801554e:	2120      	movs	r1, #32
 8015550:	4620      	mov	r0, r4
        *pair = '\0';
 8015552:	463d      	mov	r5, r7
      pair = strchr(equals, ' ');
 8015554:	f00d f9c8 	bl	80228e8 <strchr>
      if (pair) {
 8015558:	2800      	cmp	r0, #0
 801555a:	d0dd      	beq.n	8015518 <http_init_file+0x58>
        *pair = '\0';
 801555c:	7007      	strb	r7, [r0, #0]
    equals = strchr(equals, '=');
 801555e:	213d      	movs	r1, #61	; 0x3d
 8015560:	4620      	mov	r0, r4
 8015562:	f00d f9c1 	bl	80228e8 <strchr>
    if (equals) {
 8015566:	2800      	cmp	r0, #0
 8015568:	d1db      	bne.n	8015522 <http_init_file+0x62>
      http_cgi_param_vals[loop] = NULL;
 801556a:	f8c9 0000 	str.w	r0, [r9]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 801556e:	f108 0801 	add.w	r8, r8, #1
 8015572:	f109 0904 	add.w	r9, r9, #4
 8015576:	463c      	mov	r4, r7
 8015578:	2d00      	cmp	r5, #0
 801557a:	d1dc      	bne.n	8015536 <http_init_file+0x76>
 801557c:	4632      	mov	r2, r6
 801557e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8015582:	9b05      	ldr	r3, [sp, #20]
 8015584:	4628      	mov	r0, r5
 8015586:	9904      	ldr	r1, [sp, #16]
 8015588:	9300      	str	r3, [sp, #0]
 801558a:	4b3e      	ldr	r3, [pc, #248]	; (8015684 <http_init_file+0x1c4>)
 801558c:	f7f0 fdf4 	bl	8006178 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8015590:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015594:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8015596:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8015598:	db60      	blt.n	801565c <http_init_file+0x19c>
    hs->retries = 0;
 801559a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 801559c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 801559e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 80155a0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80155a4:	7c1b      	ldrb	r3, [r3, #16]
 80155a6:	07d9      	lsls	r1, r3, #31
 80155a8:	d52a      	bpl.n	8015600 <http_init_file+0x140>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80155aa:	9b03      	ldr	r3, [sp, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d136      	bne.n	801561e <http_init_file+0x15e>
  if (hs->keepalive) {
 80155b0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80155b4:	b12b      	cbz	r3, 80155c2 <http_init_file+0x102>
    if (hs->ssi != NULL) {
 80155b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d058      	beq.n	801566e <http_init_file+0x1ae>
      hs->keepalive = 0;
 80155bc:	2300      	movs	r3, #0
 80155be:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80155c2:	2000      	movs	r0, #0
 80155c4:	b009      	add	sp, #36	; 0x24
 80155c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80155ca:	f44f 7090 	mov.w	r0, #288	; 0x120
 80155ce:	f002 f97f 	bl	80178d0 <mem_malloc>
  if (ret != NULL) {
 80155d2:	4606      	mov	r6, r0
 80155d4:	2800      	cmp	r0, #0
 80155d6:	d086      	beq.n	80154e6 <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80155d8:	f44f 7290 	mov.w	r2, #288	; 0x120
 80155dc:	2100      	movs	r1, #0
 80155de:	f00b ffff 	bl	80215e0 <memset>
        ssi->tag_index = 0;
 80155e2:	2200      	movs	r2, #0
        ssi->tag_state = TAG_NONE;
 80155e4:	f886 211e 	strb.w	r2, [r6, #286]	; 0x11e
        ssi->parse_left = file->len;
 80155e8:	e9d5 3100 	ldrd	r3, r1, [r5]
        ssi->tag_index = 0;
 80155ec:	8232      	strh	r2, [r6, #16]
        ssi->parsed = file->data;
 80155ee:	6033      	str	r3, [r6, #0]
        ssi->parse_left = file->len;
 80155f0:	e9c6 3102 	strd	r3, r1, [r6, #8]
        hs->ssi = ssi;
 80155f4:	62e6      	str	r6, [r4, #44]	; 0x2c
    hs->handle = file;
 80155f6:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 80155f8:	2f00      	cmp	r7, #0
 80155fa:	f47f af77 	bne.w	80154ec <http_init_file+0x2c>
 80155fe:	e7c7      	b.n	8015590 <http_init_file+0xd0>
    LWIP_ASSERT("HTTP headers not included in file system",
 8015600:	4b21      	ldr	r3, [pc, #132]	; (8015688 <http_init_file+0x1c8>)
 8015602:	f640 1243 	movw	r2, #2371	; 0x943
 8015606:	4921      	ldr	r1, [pc, #132]	; (801568c <http_init_file+0x1cc>)
 8015608:	4821      	ldr	r0, [pc, #132]	; (8015690 <http_init_file+0x1d0>)
 801560a:	f00c ff5b 	bl	80224c4 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801560e:	9b03      	ldr	r3, [sp, #12]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d0cd      	beq.n	80155b0 <http_init_file+0xf0>
 8015614:	6963      	ldr	r3, [r4, #20]
 8015616:	7c1b      	ldrb	r3, [r3, #16]
 8015618:	07db      	lsls	r3, r3, #31
 801561a:	d5c9      	bpl.n	80155b0 <http_init_file+0xf0>
 801561c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 801561e:	491d      	ldr	r1, [pc, #116]	; (8015694 <http_init_file+0x1d4>)
 8015620:	69a0      	ldr	r0, [r4, #24]
 8015622:	f000 ffe9 	bl	80165f8 <lwip_strnstr>
      if (file_start != NULL) {
 8015626:	2800      	cmp	r0, #0
 8015628:	d0c2      	beq.n	80155b0 <http_init_file+0xf0>
        int diff = file_start + 4 - hs->file;
 801562a:	3004      	adds	r0, #4
 801562c:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 801562e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8015630:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 8015632:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8015634:	1a9b      	subs	r3, r3, r2
 8015636:	6263      	str	r3, [r4, #36]	; 0x24
 8015638:	e7ba      	b.n	80155b0 <http_init_file+0xf0>
    hs->file = NULL;
 801563a:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 801563e:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8015640:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8015644:	e7b4      	b.n	80155b0 <http_init_file+0xf0>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8015646:	4b10      	ldr	r3, [pc, #64]	; (8015688 <http_init_file+0x1c8>)
 8015648:	f640 120b 	movw	r2, #2315	; 0x90b
 801564c:	4912      	ldr	r1, [pc, #72]	; (8015698 <http_init_file+0x1d8>)
 801564e:	4810      	ldr	r0, [pc, #64]	; (8015690 <http_init_file+0x1d0>)
 8015650:	f00c ff38 	bl	80224c4 <iprintf>
    if (tag_check) {
 8015654:	2e00      	cmp	r6, #0
 8015656:	f43f af46 	beq.w	80154e6 <http_init_file+0x26>
 801565a:	e7b6      	b.n	80155ca <http_init_file+0x10a>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 801565c:	f640 1234 	movw	r2, #2356	; 0x934
 8015660:	4b09      	ldr	r3, [pc, #36]	; (8015688 <http_init_file+0x1c8>)
 8015662:	490e      	ldr	r1, [pc, #56]	; (801569c <http_init_file+0x1dc>)
 8015664:	480a      	ldr	r0, [pc, #40]	; (8015690 <http_init_file+0x1d0>)
 8015666:	f00c ff2d 	bl	80224c4 <iprintf>
 801566a:	686a      	ldr	r2, [r5, #4]
 801566c:	e795      	b.n	801559a <http_init_file+0xda>
      if ((hs->handle != NULL) &&
 801566e:	6963      	ldr	r3, [r4, #20]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d0a6      	beq.n	80155c2 <http_init_file+0x102>
 8015674:	7c1b      	ldrb	r3, [r3, #16]
 8015676:	f003 0303 	and.w	r3, r3, #3
 801567a:	2b01      	cmp	r3, #1
 801567c:	d1a1      	bne.n	80155c2 <http_init_file+0x102>
 801567e:	e79d      	b.n	80155bc <http_init_file+0xfc>
 8015680:	20019f74 	.word	0x20019f74
 8015684:	20019fb4 	.word	0x20019fb4
 8015688:	0803ee44 	.word	0x0803ee44
 801568c:	0803eeb0 	.word	0x0803eeb0
 8015690:	08028d24 	.word	0x08028d24
 8015694:	08026940 	.word	0x08026940
 8015698:	0803ee7c 	.word	0x0803ee7c
 801569c:	0803ee90 	.word	0x0803ee90

080156a0 <http_find_file>:
{
 80156a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156a4:	ed2d 8b02 	vpush	{d8}
 80156a8:	b087      	sub	sp, #28
 80156aa:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 80156ac:	4608      	mov	r0, r1
 80156ae:	460c      	mov	r4, r1
{
 80156b0:	4690      	mov	r8, r2
 80156b2:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 80156b4:	f7ea fdce 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80156b8:	4606      	mov	r6, r0
 80156ba:	b138      	cbz	r0, 80156cc <http_find_file+0x2c>
 80156bc:	1e43      	subs	r3, r0, #1
 80156be:	5ce2      	ldrb	r2, [r4, r3]
 80156c0:	2a2f      	cmp	r2, #47	; 0x2f
 80156c2:	d06a      	beq.n	801579a <http_find_file+0xfa>
 80156c4:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80156c6:	f04f 0900 	mov.w	r9, #0
 80156ca:	e001      	b.n	80156d0 <http_find_file+0x30>
 80156cc:	4681      	mov	r9, r0
 80156ce:	462f      	mov	r7, r5
    params = (char *)strchr(uri, '?');
 80156d0:	213f      	movs	r1, #63	; 0x3f
 80156d2:	4620      	mov	r0, r4
 80156d4:	f00d f908 	bl	80228e8 <strchr>
    if (params != NULL) {
 80156d8:	4606      	mov	r6, r0
 80156da:	b118      	cbz	r0, 80156e4 <http_find_file+0x44>
      *params = '\0';
 80156dc:	2300      	movs	r3, #0
 80156de:	f806 3b01 	strb.w	r3, [r6], #1
      params++;
 80156e2:	9c05      	ldr	r4, [sp, #20]
    err = fs_open(&hs->file_handle, uri);
 80156e4:	4621      	mov	r1, r4
 80156e6:	4628      	mov	r0, r5
 80156e8:	f7ff fe0e 	bl	8015308 <fs_open>
    if (err == ERR_OK) {
 80156ec:	b9b0      	cbnz	r0, 801571c <http_find_file+0x7c>
    if (file != NULL) {
 80156ee:	b1e7      	cbz	r7, 801572a <http_find_file+0x8a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80156f0:	f897 9010 	ldrb.w	r9, [r7, #16]
 80156f4:	9c05      	ldr	r4, [sp, #20]
 80156f6:	f019 0908 	ands.w	r9, r9, #8
 80156fa:	d01d      	beq.n	8015738 <http_find_file+0x98>
        tag_check = 1;
 80156fc:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8015700:	4623      	mov	r3, r4
 8015702:	4642      	mov	r2, r8
 8015704:	4639      	mov	r1, r7
 8015706:	4628      	mov	r0, r5
 8015708:	9601      	str	r6, [sp, #4]
 801570a:	f8cd 9000 	str.w	r9, [sp]
 801570e:	f7ff fed7 	bl	80154c0 <http_init_file>
}
 8015712:	b007      	add	sp, #28
 8015714:	ecbd 8b02 	vpop	{d8}
 8015718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 801571c:	a905      	add	r1, sp, #20
 801571e:	4628      	mov	r0, r5
 8015720:	f7ff fe6c 	bl	80153fc <http_get_404_file>
 8015724:	4607      	mov	r7, r0
    if (file != NULL) {
 8015726:	2f00      	cmp	r7, #0
 8015728:	d1e2      	bne.n	80156f0 <http_find_file+0x50>
    file = http_get_404_file(hs, &uri);
 801572a:	a905      	add	r1, sp, #20
 801572c:	4628      	mov	r0, r5
 801572e:	f7ff fe65 	bl	80153fc <http_get_404_file>
 8015732:	9c05      	ldr	r4, [sp, #20]
 8015734:	4607      	mov	r7, r0
 8015736:	e7e3      	b.n	8015700 <http_find_file+0x60>
    char *param = (char *)strstr(uri, "?");
 8015738:	213f      	movs	r1, #63	; 0x3f
 801573a:	4620      	mov	r0, r4
 801573c:	f00d f8d4 	bl	80228e8 <strchr>
    if (param != NULL) {
 8015740:	4682      	mov	sl, r0
 8015742:	b108      	cbz	r0, 8015748 <http_find_file+0xa8>
      *param = 0;
 8015744:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8015748:	212e      	movs	r1, #46	; 0x2e
 801574a:	4620      	mov	r0, r4
 801574c:	f00d f8cc 	bl	80228e8 <strchr>
 8015750:	4603      	mov	r3, r0
 8015752:	b138      	cbz	r0, 8015764 <http_find_file+0xc4>
 8015754:	1c58      	adds	r0, r3, #1
 8015756:	212e      	movs	r1, #46	; 0x2e
 8015758:	461c      	mov	r4, r3
 801575a:	f00d f8c5 	bl	80228e8 <strchr>
 801575e:	4603      	mov	r3, r0
 8015760:	2800      	cmp	r0, #0
 8015762:	d1f7      	bne.n	8015754 <http_find_file+0xb4>
  u8_t tag_check = 0;
 8015764:	4940      	ldr	r1, [pc, #256]	; (8015868 <http_find_file+0x1c8>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8015766:	4620      	mov	r0, r4
 8015768:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8015878 <http_find_file+0x1d8>
 801576c:	f000 ff6c 	bl	8016648 <lwip_stricmp>
 8015770:	b148      	cbz	r0, 8015786 <http_find_file+0xe6>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8015772:	4b3e      	ldr	r3, [pc, #248]	; (801586c <http_find_file+0x1cc>)
 8015774:	459b      	cmp	fp, r3
 8015776:	d008      	beq.n	801578a <http_find_file+0xea>
 8015778:	f85b 1b04 	ldr.w	r1, [fp], #4
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801577c:	4620      	mov	r0, r4
 801577e:	f000 ff63 	bl	8016648 <lwip_stricmp>
 8015782:	2800      	cmp	r0, #0
 8015784:	d1f5      	bne.n	8015772 <http_find_file+0xd2>
        tag_check = 1;
 8015786:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 801578a:	f1ba 0f00 	cmp.w	sl, #0
 801578e:	d002      	beq.n	8015796 <http_find_file+0xf6>
      *param = '?';
 8015790:	233f      	movs	r3, #63	; 0x3f
 8015792:	f88a 3000 	strb.w	r3, [sl]
 8015796:	9c05      	ldr	r4, [sp, #20]
 8015798:	e7b2      	b.n	8015700 <http_find_file+0x60>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801579a:	4a35      	ldr	r2, [pc, #212]	; (8015870 <http_find_file+0x1d0>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 801579c:	4294      	cmp	r4, r2
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801579e:	9203      	str	r2, [sp, #12]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80157a0:	d106      	bne.n	80157b0 <http_find_file+0x110>
 80157a2:	f1a0 0001 	sub.w	r0, r0, #1
 80157a6:	fab0 f080 	clz	r0, r0
 80157aa:	0940      	lsrs	r0, r0, #5
 80157ac:	2800      	cmp	r0, #0
 80157ae:	d057      	beq.n	8015860 <http_find_file+0x1c0>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80157b0:	2b3f      	cmp	r3, #63	; 0x3f
 80157b2:	bf28      	it	cs
 80157b4:	233f      	movcs	r3, #63	; 0x3f
    if (copy_len > 0) {
 80157b6:	2e01      	cmp	r6, #1
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80157b8:	469a      	mov	sl, r3
    if (copy_len > 0) {
 80157ba:	d008      	beq.n	80157ce <http_find_file+0x12e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80157bc:	461a      	mov	r2, r3
 80157be:	4621      	mov	r1, r4
 80157c0:	482b      	ldr	r0, [pc, #172]	; (8015870 <http_find_file+0x1d0>)
 80157c2:	f00b fee5 	bl	8021590 <memcpy>
      http_uri_buf[copy_len] = 0;
 80157c6:	2300      	movs	r3, #0
 80157c8:	9a03      	ldr	r2, [sp, #12]
 80157ca:	f802 300a 	strb.w	r3, [r2, sl]
 80157ce:	462f      	mov	r7, r5
{
 80157d0:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 80157d4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8015870 <http_find_file+0x1d0>
 80157d8:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 80157dc:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 80157de:	46c8      	mov	r8, r9
      if (copy_len > 0) {
 80157e0:	d012      	beq.n	8015808 <http_find_file+0x168>
        if (len_left > 0) {
 80157e2:	f1da 033f 	rsbs	r3, sl, #63	; 0x3f
 80157e6:	d113      	bne.n	8015810 <http_find_file+0x170>
      err = fs_open(&hs->file_handle, file_name);
 80157e8:	4641      	mov	r1, r8
 80157ea:	4628      	mov	r0, r5
 80157ec:	f7ff fd8c 	bl	8015308 <fs_open>
      if (err == ERR_OK) {
 80157f0:	b340      	cbz	r0, 8015844 <http_find_file+0x1a4>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80157f2:	f10b 0b01 	add.w	fp, fp, #1
 80157f6:	f1bb 0f05 	cmp.w	fp, #5
 80157fa:	d1ef      	bne.n	80157dc <http_find_file+0x13c>
 80157fc:	ee18 8a10 	vmov	r8, s16
 8015800:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8015802:	f04f 0900 	mov.w	r9, #0
 8015806:	e763      	b.n	80156d0 <http_find_file+0x30>
        file_name = httpd_default_filenames[loop].name;
 8015808:	4b1a      	ldr	r3, [pc, #104]	; (8015874 <http_find_file+0x1d4>)
 801580a:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 801580e:	e7eb      	b.n	80157e8 <http_find_file+0x148>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8015810:	9304      	str	r3, [sp, #16]
 8015812:	4b18      	ldr	r3, [pc, #96]	; (8015874 <http_find_file+0x1d4>)
 8015814:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8015818:	9b03      	ldr	r3, [sp, #12]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801581a:	4608      	mov	r0, r1
 801581c:	9103      	str	r1, [sp, #12]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 801581e:	4453      	add	r3, sl
 8015820:	461c      	mov	r4, r3
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8015822:	f7ea fd17 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8015826:	9b04      	ldr	r3, [sp, #16]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8015828:	4602      	mov	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 801582a:	9903      	ldr	r1, [sp, #12]
 801582c:	4620      	mov	r0, r4
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801582e:	429a      	cmp	r2, r3
 8015830:	bf28      	it	cs
 8015832:	461a      	movcs	r2, r3
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8015834:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8015838:	f00b feaa 	bl	8021590 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 801583c:	2300      	movs	r3, #0
 801583e:	9a04      	ldr	r2, [sp, #16]
 8015840:	54a3      	strb	r3, [r4, r2]
 8015842:	e7d1      	b.n	80157e8 <http_find_file+0x148>
        tag_check = httpd_default_filenames[loop].shtml;
 8015844:	4a0b      	ldr	r2, [pc, #44]	; (8015874 <http_find_file+0x1d4>)
 8015846:	4644      	mov	r4, r8
 8015848:	ee18 8a10 	vmov	r8, s16
 801584c:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8015850:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8015852:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 8015856:	2d00      	cmp	r5, #0
 8015858:	f43f af3a 	beq.w	80156d0 <http_find_file+0x30>
  char *params = NULL;
 801585c:	4606      	mov	r6, r0
 801585e:	e74f      	b.n	8015700 <http_find_file+0x60>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8015860:	4614      	mov	r4, r2
  u8_t tag_check = 0;
 8015862:	4681      	mov	r9, r0
 8015864:	462f      	mov	r7, r5
 8015866:	e733      	b.n	80156d0 <http_find_file+0x30>
 8015868:	0803ef04 	.word	0x0803ef04
 801586c:	0803f164 	.word	0x0803f164
 8015870:	20019ff4 	.word	0x20019ff4
 8015874:	0803f174 	.word	0x0803f174
 8015878:	0803f154 	.word	0x0803f154

0801587c <http_post_rxpbuf>:
{
 801587c:	b538      	push	{r3, r4, r5, lr}
 801587e:	4604      	mov	r4, r0
  if (p != NULL) {
 8015880:	b1c9      	cbz	r1, 80158b6 <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 8015882:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015884:	890a      	ldrh	r2, [r1, #8]
 8015886:	4293      	cmp	r3, r2
 8015888:	d31a      	bcc.n	80158c0 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 801588a:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 801588c:	4620      	mov	r0, r4
 801588e:	6323      	str	r3, [r4, #48]	; 0x30
 8015890:	f7f0 fd7c 	bl	800638c <httpd_post_receive_data>
  if (err != ERR_OK) {
 8015894:	b178      	cbz	r0, 80158b6 <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 8015896:	2300      	movs	r3, #0
 8015898:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 801589a:	490a      	ldr	r1, [pc, #40]	; (80158c4 <http_post_rxpbuf+0x48>)
 801589c:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801589e:	4620      	mov	r0, r4
 80158a0:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 80158a2:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80158a4:	f7f0 fd82 	bl	80063ac <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 80158a8:	462a      	mov	r2, r5
 80158aa:	4620      	mov	r0, r4
 80158ac:	4905      	ldr	r1, [pc, #20]	; (80158c4 <http_post_rxpbuf+0x48>)
}
 80158ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 80158b2:	f7ff bef5 	b.w	80156a0 <http_find_file>
  if (hs->post_content_len_left == 0) {
 80158b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d0ee      	beq.n	801589a <http_post_rxpbuf+0x1e>
}
 80158bc:	2000      	movs	r0, #0
 80158be:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 80158c0:	2300      	movs	r3, #0
 80158c2:	e7e3      	b.n	801588c <http_post_rxpbuf+0x10>
 80158c4:	20019ff4 	.word	0x20019ff4

080158c8 <http_find_error_file>:
  if (error_nr == 501) {
 80158c8:	f240 12f5 	movw	r2, #501	; 0x1f5
    uri3 = "/400.shtml";
 80158cc:	4b17      	ldr	r3, [pc, #92]	; (801592c <http_find_error_file+0x64>)
 80158ce:	4291      	cmp	r1, r2
 80158d0:	4917      	ldr	r1, [pc, #92]	; (8015930 <http_find_error_file+0x68>)
 80158d2:	4a18      	ldr	r2, [pc, #96]	; (8015934 <http_find_error_file+0x6c>)
 80158d4:	bf18      	it	ne
 80158d6:	460b      	movne	r3, r1
 80158d8:	4917      	ldr	r1, [pc, #92]	; (8015938 <http_find_error_file+0x70>)
{
 80158da:	b570      	push	{r4, r5, r6, lr}
 80158dc:	b084      	sub	sp, #16
    uri3 = "/400.shtml";
 80158de:	4e17      	ldr	r6, [pc, #92]	; (801593c <http_find_error_file+0x74>)
 80158e0:	bf18      	it	ne
 80158e2:	460e      	movne	r6, r1
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80158e4:	4619      	mov	r1, r3
 80158e6:	9303      	str	r3, [sp, #12]
{
 80158e8:	4604      	mov	r4, r0
    uri3 = "/400.shtml";
 80158ea:	4d15      	ldr	r5, [pc, #84]	; (8015940 <http_find_error_file+0x78>)
 80158ec:	bf08      	it	eq
 80158ee:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80158f0:	f7ff fd0a 	bl	8015308 <fs_open>
 80158f4:	9b03      	ldr	r3, [sp, #12]
 80158f6:	b128      	cbz	r0, 8015904 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 80158f8:	4629      	mov	r1, r5
 80158fa:	4620      	mov	r0, r4
 80158fc:	f7ff fd04 	bl	8015308 <fs_open>
 8015900:	b948      	cbnz	r0, 8015916 <http_find_error_file+0x4e>
    uri = uri2;
 8015902:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8015904:	2200      	movs	r2, #0
 8015906:	4621      	mov	r1, r4
 8015908:	4620      	mov	r0, r4
 801590a:	e9cd 2200 	strd	r2, r2, [sp]
 801590e:	f7ff fdd7 	bl	80154c0 <http_init_file>
}
 8015912:	b004      	add	sp, #16
 8015914:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 8015916:	4631      	mov	r1, r6
 8015918:	4620      	mov	r0, r4
 801591a:	f7ff fcf5 	bl	8015308 <fs_open>
 801591e:	b908      	cbnz	r0, 8015924 <http_find_error_file+0x5c>
    uri = uri3;
 8015920:	4633      	mov	r3, r6
 8015922:	e7ef      	b.n	8015904 <http_find_error_file+0x3c>
    return ERR_ARG;
 8015924:	f06f 000f 	mvn.w	r0, #15
 8015928:	e7f3      	b.n	8015912 <http_find_error_file+0x4a>
 801592a:	bf00      	nop
 801592c:	0803eef4 	.word	0x0803eef4
 8015930:	0803ef18 	.word	0x0803ef18
 8015934:	0803eee8 	.word	0x0803eee8
 8015938:	0803ef00 	.word	0x0803ef00
 801593c:	0803eedc 	.word	0x0803eedc
 8015940:	0803ef0c 	.word	0x0803ef0c

08015944 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8015944:	b538      	push	{r3, r4, r5, lr}
 8015946:	4604      	mov	r4, r0
  if (hs != NULL) {
 8015948:	460d      	mov	r5, r1
 801594a:	b391      	cbz	r1, 80159b2 <http_close_or_abort_conn.constprop.0+0x6e>
    if ((hs->post_content_len_left != 0)
 801594c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801594e:	bb0b      	cbnz	r3, 8015994 <http_close_or_abort_conn.constprop.0+0x50>
  altcp_arg(pcb, NULL);
 8015950:	2100      	movs	r1, #0
 8015952:	4620      	mov	r0, r4
 8015954:	f003 fb16 	bl	8018f84 <tcp_arg>
  altcp_recv(pcb, NULL);
 8015958:	2100      	movs	r1, #0
 801595a:	4620      	mov	r0, r4
 801595c:	f003 fb16 	bl	8018f8c <tcp_recv>
  altcp_err(pcb, NULL);
 8015960:	2100      	movs	r1, #0
 8015962:	4620      	mov	r0, r4
 8015964:	f003 fb4a 	bl	8018ffc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8015968:	2200      	movs	r2, #0
 801596a:	4620      	mov	r0, r4
 801596c:	4611      	mov	r1, r2
 801596e:	f003 fb67 	bl	8019040 <tcp_poll>
  altcp_sent(pcb, NULL);
 8015972:	2100      	movs	r1, #0
 8015974:	4620      	mov	r0, r4
 8015976:	f003 fb25 	bl	8018fc4 <tcp_sent>
    http_state_eof(hs);
 801597a:	4628      	mov	r0, r5
 801597c:	f7ff fd28 	bl	80153d0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8015980:	4628      	mov	r0, r5
 8015982:	f001 fdcb 	bl	801751c <mem_free>
  err = altcp_close(pcb);
 8015986:	4620      	mov	r0, r4
 8015988:	f004 f94e 	bl	8019c28 <tcp_close>
  if (err != ERR_OK) {
 801598c:	4605      	mov	r5, r0
 801598e:	b948      	cbnz	r0, 80159a4 <http_close_or_abort_conn.constprop.0+0x60>
}
 8015990:	4628      	mov	r0, r5
 8015992:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8015994:	4911      	ldr	r1, [pc, #68]	; (80159dc <http_close_or_abort_conn.constprop.0+0x98>)
 8015996:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8015998:	223f      	movs	r2, #63	; 0x3f
 801599a:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 801599c:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801599e:	f7f0 fd05 	bl	80063ac <httpd_post_finished>
 80159a2:	e7d5      	b.n	8015950 <http_close_or_abort_conn.constprop.0+0xc>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80159a4:	4620      	mov	r0, r4
 80159a6:	2204      	movs	r2, #4
 80159a8:	490d      	ldr	r1, [pc, #52]	; (80159e0 <http_close_or_abort_conn.constprop.0+0x9c>)
 80159aa:	f003 fb49 	bl	8019040 <tcp_poll>
}
 80159ae:	4628      	mov	r0, r5
 80159b0:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 80159b2:	f003 fae7 	bl	8018f84 <tcp_arg>
  altcp_recv(pcb, NULL);
 80159b6:	4629      	mov	r1, r5
 80159b8:	4620      	mov	r0, r4
 80159ba:	f003 fae7 	bl	8018f8c <tcp_recv>
  altcp_err(pcb, NULL);
 80159be:	4629      	mov	r1, r5
 80159c0:	4620      	mov	r0, r4
 80159c2:	f003 fb1b 	bl	8018ffc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80159c6:	4629      	mov	r1, r5
 80159c8:	4620      	mov	r0, r4
 80159ca:	462a      	mov	r2, r5
 80159cc:	f003 fb38 	bl	8019040 <tcp_poll>
  altcp_sent(pcb, NULL);
 80159d0:	4629      	mov	r1, r5
 80159d2:	4620      	mov	r0, r4
 80159d4:	f003 faf6 	bl	8018fc4 <tcp_sent>
  if (hs != NULL) {
 80159d8:	e7d5      	b.n	8015986 <http_close_or_abort_conn.constprop.0+0x42>
 80159da:	bf00      	nop
 80159dc:	20019ff4 	.word	0x20019ff4
 80159e0:	08016035 	.word	0x08016035

080159e4 <http_eof>:
{
 80159e4:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 80159e6:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 80159ea:	b193      	cbz	r3, 8015a12 <http_eof+0x2e>
 80159ec:	460c      	mov	r4, r1
 80159ee:	4605      	mov	r5, r0
    http_state_eof(hs);
 80159f0:	4608      	mov	r0, r1
 80159f2:	f7ff fced 	bl	80153d0 <http_state_eof>
  memset(hs, 0, sizeof(struct http_state));
 80159f6:	2234      	movs	r2, #52	; 0x34
 80159f8:	2100      	movs	r1, #0
 80159fa:	4620      	mov	r0, r4
 80159fc:	f00b fdf0 	bl	80215e0 <memset>
    hs->keepalive = 1;
 8015a00:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8015a02:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 8015a04:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 8015a08:	8b6b      	ldrh	r3, [r5, #26]
 8015a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a0e:	836b      	strh	r3, [r5, #26]
}
 8015a10:	bd38      	pop	{r3, r4, r5, pc}
 8015a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 8015a16:	f7ff bf95 	b.w	8015944 <http_close_or_abort_conn.constprop.0>
 8015a1a:	bf00      	nop

08015a1c <http_send>:
{
 8015a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8015a20:	460d      	mov	r5, r1
{
 8015a22:	b087      	sub	sp, #28
  if (hs == NULL) {
 8015a24:	2900      	cmp	r1, #0
 8015a26:	f000 8157 	beq.w	8015cd8 <http_send+0x2bc>
  if (hs->left == 0) {
 8015a2a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8015a2c:	4681      	mov	r9, r0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	f000 8196 	beq.w	8015d60 <http_send+0x344>
  if (hs->ssi) {
 8015a34:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8015a36:	2c00      	cmp	r4, #0
 8015a38:	f000 812b 	beq.w	8015c92 <http_send+0x276>
  if (ssi->parsed > hs->file) {
 8015a3c:	6826      	ldr	r6, [r4, #0]
 8015a3e:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8015a40:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8015a44:	428e      	cmp	r6, r1
  len = altcp_sndbuf(pcb);
 8015a46:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (ssi->parsed > hs->file) {
 8015a4a:	f200 80bb 	bhi.w	8015bc4 <http_send+0x1a8>
  u8_t data_to_send = 0;
 8015a4e:	2600      	movs	r6, #0
  err_t err = ERR_OK;
 8015a50:	46b2      	mov	sl, r6
 8015a52:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 8015a56:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8015a5a:	2a04      	cmp	r2, #4
 8015a5c:	d003      	beq.n	8015a66 <http_send+0x4a>
 8015a5e:	68e1      	ldr	r1, [r4, #12]
 8015a60:	2900      	cmp	r1, #0
 8015a62:	f000 8089 	beq.w	8015b78 <http_send+0x15c>
 8015a66:	f1ba 0f00 	cmp.w	sl, #0
 8015a6a:	f040 8215 	bne.w	8015e98 <http_send+0x47c>
    if (len == 0) {
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	f000 8124 	beq.w	8015cbc <http_send+0x2a0>
    switch (ssi->tag_state) {
 8015a74:	2a04      	cmp	r2, #4
 8015a76:	d8f0      	bhi.n	8015a5a <http_send+0x3e>
 8015a78:	e8df f002 	tbb	[pc, r2]
 8015a7c:	253f6d5e 	.word	0x253f6d5e
 8015a80:	03          	.byte	0x03
 8015a81:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8015a82:	68a0      	ldr	r0, [r4, #8]
 8015a84:	69a9      	ldr	r1, [r5, #24]
 8015a86:	4288      	cmp	r0, r1
 8015a88:	f240 80e8 	bls.w	8015c5c <http_send+0x240>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8015a8c:	6862      	ldr	r2, [r4, #4]
 8015a8e:	4291      	cmp	r1, r2
 8015a90:	f200 81e9 	bhi.w	8015e66 <http_send+0x44a>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8015a94:	1a53      	subs	r3, r2, r1
 8015a96:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8015a9a:	4283      	cmp	r3, r0
 8015a9c:	f340 8121 	ble.w	8015ce2 <http_send+0x2c6>
 8015aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015aa4:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	f10d 0216 	add.w	r2, sp, #22
 8015aae:	4648      	mov	r0, r9
 8015ab0:	f7ff fc5a 	bl	8015368 <http_write>
          if (err == ERR_OK) {
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	f000 81ea 	beq.w	8015e8e <http_send+0x472>
 8015aba:	4682      	mov	sl, r0
 8015abc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015ac0:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 8015ac4:	e7c9      	b.n	8015a5a <http_send+0x3e>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8015ac6:	6821      	ldr	r1, [r4, #0]
 8015ac8:	8a20      	ldrh	r0, [r4, #16]
 8015aca:	f891 e000 	ldrb.w	lr, [r1]
 8015ace:	2800      	cmp	r0, #0
 8015ad0:	f040 8096 	bne.w	8015c00 <http_send+0x1e4>
 8015ad4:	f1ae 0709 	sub.w	r7, lr, #9
 8015ad8:	b2ff      	uxtb	r7, r7
 8015ada:	2f17      	cmp	r7, #23
 8015adc:	f200 8090 	bhi.w	8015c00 <http_send+0x1e4>
 8015ae0:	f8df c34c 	ldr.w	ip, [pc, #844]	; 8015e30 <http_send+0x414>
 8015ae4:	fa2c f707 	lsr.w	r7, ip, r7
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8015ae8:	07ff      	lsls	r7, r7, #31
 8015aea:	f140 8089 	bpl.w	8015c00 <http_send+0x1e4>
          ssi->parse_left--;
 8015aee:	68e0      	ldr	r0, [r4, #12]
          ssi->parsed++;
 8015af0:	3101      	adds	r1, #1
          ssi->parse_left--;
 8015af2:	3801      	subs	r0, #1
          ssi->parsed++;
 8015af4:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8015af6:	60e0      	str	r0, [r4, #12]
          break;
 8015af8:	e7af      	b.n	8015a5a <http_send+0x3e>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8015afa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015afe:	f1bc 0f00 	cmp.w	ip, #0
 8015b02:	f040 8092 	bne.w	8015c2a <http_send+0x20e>
 8015b06:	6821      	ldr	r1, [r4, #0]
 8015b08:	780f      	ldrb	r7, [r1, #0]
 8015b0a:	f1a7 0009 	sub.w	r0, r7, #9
 8015b0e:	b2c0      	uxtb	r0, r0
 8015b10:	2817      	cmp	r0, #23
 8015b12:	f240 811d 	bls.w	8015d50 <http_send+0x334>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8015b16:	48bf      	ldr	r0, [pc, #764]	; (8015e14 <http_send+0x3f8>)
 8015b18:	f894 e014 	ldrb.w	lr, [r4, #20]
 8015b1c:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 8015b20:	6840      	ldr	r0, [r0, #4]
 8015b22:	7800      	ldrb	r0, [r0, #0]
 8015b24:	42b8      	cmp	r0, r7
 8015b26:	d067      	beq.n	8015bf8 <http_send+0x1dc>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8015b28:	f10c 0001 	add.w	r0, ip, #1
 8015b2c:	44a4      	add	ip, r4
 8015b2e:	8220      	strh	r0, [r4, #16]
 8015b30:	7808      	ldrb	r0, [r1, #0]
 8015b32:	f88c 0016 	strb.w	r0, [ip, #22]
 8015b36:	e7da      	b.n	8015aee <http_send+0xd2>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8015b38:	6821      	ldr	r1, [r4, #0]
 8015b3a:	7808      	ldrb	r0, [r1, #0]
 8015b3c:	283c      	cmp	r0, #60	; 0x3c
 8015b3e:	d002      	beq.n	8015b46 <http_send+0x12a>
 8015b40:	282f      	cmp	r0, #47	; 0x2f
 8015b42:	d1d4      	bne.n	8015aee <http_send+0xd2>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8015b44:	2201      	movs	r2, #1
            ssi->tag_state = TAG_LEADIN;
 8015b46:	2001      	movs	r0, #1
            ssi->tag_type = tag_type;
 8015b48:	7522      	strb	r2, [r4, #20]
            ssi->tag_started = ssi->parsed;
 8015b4a:	6061      	str	r1, [r4, #4]
            break;
 8015b4c:	4602      	mov	r2, r0
            ssi->tag_state = TAG_LEADIN;
 8015b4e:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8015b52:	8220      	strh	r0, [r4, #16]
            break;
 8015b54:	e7cb      	b.n	8015aee <http_send+0xd2>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8015b56:	49af      	ldr	r1, [pc, #700]	; (8015e14 <http_send+0x3f8>)
 8015b58:	7d20      	ldrb	r0, [r4, #20]
 8015b5a:	8a27      	ldrh	r7, [r4, #16]
 8015b5c:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8015b60:	5dc9      	ldrb	r1, [r1, r7]
 8015b62:	2900      	cmp	r1, #0
 8015b64:	f040 8086 	bne.w	8015c74 <http_send+0x258>
          ssi->tag_state = TAG_FOUND;
 8015b68:	2202      	movs	r2, #2
          ssi->tag_index = 0;
 8015b6a:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8015b6c:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8015b6e:	f884 211e 	strb.w	r2, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8015b72:	2900      	cmp	r1, #0
 8015b74:	f47f af77 	bne.w	8015a66 <http_send+0x4a>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8015b78:	6824      	ldr	r4, [r4, #0]
 8015b7a:	69a9      	ldr	r1, [r5, #24]
 8015b7c:	428c      	cmp	r4, r1
 8015b7e:	f240 809d 	bls.w	8015cbc <http_send+0x2a0>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8015b82:	1a64      	subs	r4, r4, r1
 8015b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015b88:	2300      	movs	r3, #0
 8015b8a:	4648      	mov	r0, r9
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8015b8c:	4294      	cmp	r4, r2
 8015b8e:	bfa8      	it	ge
 8015b90:	4614      	movge	r4, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015b92:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8015b96:	f8ad 4016 	strh.w	r4, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015b9a:	f7ff fbe5 	bl	8015368 <http_write>
    if (err == ERR_OK) {
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	f040 808c 	bne.w	8015cbc <http_send+0x2a0>
    hs->file += len;
 8015ba4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 8015ba8:	2601      	movs	r6, #1
    hs->file += len;
 8015baa:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8015bac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8015bae:	440a      	add	r2, r1
    hs->left -= len;
 8015bb0:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8015bb2:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8015bb4:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	f000 8084 	beq.w	8015cc4 <http_send+0x2a8>
}
 8015bbc:	4630      	mov	r0, r6
 8015bbe:	b007      	add	sp, #28
 8015bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8015bc4:	1a76      	subs	r6, r6, r1
 8015bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015bca:	2300      	movs	r3, #0
 8015bcc:	4648      	mov	r0, r9
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8015bce:	4296      	cmp	r6, r2
 8015bd0:	bfa8      	it	ge
 8015bd2:	4616      	movge	r6, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015bd4:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8015bd8:	f8ad 6016 	strh.w	r6, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015bdc:	f7ff fbc4 	bl	8015368 <http_write>
    if (err == ERR_OK) {
 8015be0:	4682      	mov	sl, r0
 8015be2:	2800      	cmp	r0, #0
 8015be4:	f000 8149 	beq.w	8015e7a <http_send+0x45e>
  u8_t data_to_send = 0;
 8015be8:	2600      	movs	r6, #0
    if (altcp_sndbuf(pcb) == 0) {
 8015bea:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d064      	beq.n	8015cbc <http_send+0x2a0>
 8015bf2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015bf6:	e72c      	b.n	8015a52 <http_send+0x36>
            ssi->tag_state = TAG_NONE;
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8015bfe:	e776      	b.n	8015aee <http_send+0xd2>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8015c00:	f894 c014 	ldrb.w	ip, [r4, #20]
 8015c04:	4f83      	ldr	r7, [pc, #524]	; (8015e14 <http_send+0x3f8>)
 8015c06:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8015c0a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8015c0e:	f81c 7000 	ldrb.w	r7, [ip, r0]
 8015c12:	4577      	cmp	r7, lr
 8015c14:	f000 80b3 	beq.w	8015d7e <http_send+0x362>
          ssi->parse_left--;
 8015c18:	68e2      	ldr	r2, [r4, #12]
          ssi->parsed++;
 8015c1a:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8015c1c:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8015c20:	1e50      	subs	r0, r2, #1
          ssi->parsed++;
 8015c22:	6021      	str	r1, [r4, #0]
          ssi->tag_state = TAG_NONE;
 8015c24:	2200      	movs	r2, #0
          ssi->parse_left--;
 8015c26:	60e0      	str	r0, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8015c28:	e719      	b.n	8015a5e <http_send+0x42>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8015c2a:	4f7a      	ldr	r7, [pc, #488]	; (8015e14 <http_send+0x3f8>)
 8015c2c:	f894 e014 	ldrb.w	lr, [r4, #20]
 8015c30:	6821      	ldr	r1, [r4, #0]
 8015c32:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
 8015c36:	7808      	ldrb	r0, [r1, #0]
 8015c38:	f8de e004 	ldr.w	lr, [lr, #4]
 8015c3c:	f89e 8000 	ldrb.w	r8, [lr]
 8015c40:	4580      	cmp	r8, r0
 8015c42:	d06b      	beq.n	8015d1c <http_send+0x300>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8015c44:	3809      	subs	r0, #9
 8015c46:	b2c0      	uxtb	r0, r0
 8015c48:	2817      	cmp	r0, #23
 8015c4a:	d961      	bls.n	8015d10 <http_send+0x2f4>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8015c4c:	f1bc 0f07 	cmp.w	ip, #7
 8015c50:	f67f af6a 	bls.w	8015b28 <http_send+0x10c>
            ssi->tag_state = TAG_NONE;
 8015c54:	2200      	movs	r2, #0
 8015c56:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
        ssi->parse_left--;
 8015c5a:	e748      	b.n	8015aee <http_send+0xd2>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8015c5c:	8a27      	ldrh	r7, [r4, #16]
 8015c5e:	8a62      	ldrh	r2, [r4, #18]
 8015c60:	4297      	cmp	r7, r2
 8015c62:	f0c0 80e7 	bcc.w	8015e34 <http_send+0x418>
              ssi->parsed = ssi->tag_end;
 8015c66:	2200      	movs	r2, #0
              ssi->tag_index = 0;
 8015c68:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8015c6c:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8015c70:	6020      	str	r0, [r4, #0]
 8015c72:	e6f4      	b.n	8015a5e <http_send+0x42>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8015c74:	6820      	ldr	r0, [r4, #0]
 8015c76:	f890 c000 	ldrb.w	ip, [r0]
 8015c7a:	458c      	cmp	ip, r1
 8015c7c:	f000 80c7 	beq.w	8015e0e <http_send+0x3f2>
            ssi->tag_state = TAG_NONE;
 8015c80:	2200      	movs	r2, #0
 8015c82:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8015c86:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 8015c88:	3001      	adds	r0, #1
          ssi->parse_left--;
 8015c8a:	3901      	subs	r1, #1
          ssi->parsed++;
 8015c8c:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8015c8e:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8015c90:	e6e3      	b.n	8015a5a <http_send+0x3e>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8015c92:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8015c96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c9a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015c9c:	4623      	mov	r3, r4
 8015c9e:	f10d 0216 	add.w	r2, sp, #22
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8015ca2:	4286      	cmp	r6, r0
 8015ca4:	bf88      	it	hi
 8015ca6:	460e      	movhi	r6, r1
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015ca8:	69a9      	ldr	r1, [r5, #24]
 8015caa:	4648      	mov	r0, r9
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8015cac:	f8ad 6016 	strh.w	r6, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015cb0:	f7ff fb5a 	bl	8015368 <http_write>
  if (err == ERR_OK) {
 8015cb4:	2800      	cmp	r0, #0
 8015cb6:	f43f af75 	beq.w	8015ba4 <http_send+0x188>
  u8_t data_to_send = 0;
 8015cba:	4626      	mov	r6, r4
 8015cbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	f47f af7c 	bne.w	8015bbc <http_send+0x1a0>
 8015cc4:	6968      	ldr	r0, [r5, #20]
 8015cc6:	f7ff fb4b 	bl	8015360 <fs_bytes_left>
 8015cca:	2800      	cmp	r0, #0
 8015ccc:	f73f af76 	bgt.w	8015bbc <http_send+0x1a0>
    http_eof(pcb, hs);
 8015cd0:	4629      	mov	r1, r5
 8015cd2:	4648      	mov	r0, r9
 8015cd4:	f7ff fe86 	bl	80159e4 <http_eof>
      return 0;
 8015cd8:	2600      	movs	r6, #0
}
 8015cda:	4630      	mov	r0, r6
 8015cdc:	b007      	add	sp, #28
 8015cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ce2:	b29b      	uxth	r3, r3
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8015ce4:	f8ad 3016 	strh.w	r3, [sp, #22]
          if (len != 0) {
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	f47f aedd 	bne.w	8015aa8 <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 8015cee:	4291      	cmp	r1, r2
 8015cf0:	d305      	bcc.n	8015cfe <http_send+0x2e2>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8015cf2:	68a0      	ldr	r0, [r4, #8]
 8015cf4:	1a82      	subs	r2, r0, r2
 8015cf6:	4413      	add	r3, r2
 8015cf8:	b29b      	uxth	r3, r3
 8015cfa:	f8ad 3016 	strh.w	r3, [sp, #22]
            hs->left -= len;
 8015cfe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            hs->file += len;
 8015d00:	4419      	add	r1, r3
            data_to_send = 1;
 8015d02:	2601      	movs	r6, #1
            hs->left -= len;
 8015d04:	1ad2      	subs	r2, r2, r3
            hs->file += len;
 8015d06:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8015d08:	626a      	str	r2, [r5, #36]	; 0x24
 8015d0a:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 8015d0e:	e6a4      	b.n	8015a5a <http_send+0x3e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8015d10:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8015e30 <http_send+0x414>
 8015d14:	fa28 f000 	lsr.w	r0, r8, r0
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8015d18:	07c0      	lsls	r0, r0, #31
 8015d1a:	d597      	bpl.n	8015c4c <http_send+0x230>
            ssi->tag_state = TAG_LEADOUT;
 8015d1c:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8015d1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8015d22:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8015d26:	f200 80c2 	bhi.w	8015eae <http_send+0x492>
            ssi->tag_name[ssi->tag_index] = '\0';
 8015d2a:	eb04 030c 	add.w	r3, r4, ip
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8015d2e:	f884 c015 	strb.w	ip, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 8015d32:	f883 b016 	strb.w	fp, [r3, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8015d36:	f89e 3000 	ldrb.w	r3, [lr]
 8015d3a:	780a      	ldrb	r2, [r1, #0]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	f000 80af 	beq.w	8015ea0 <http_send+0x484>
              ssi->tag_index = 0;
 8015d42:	f8a4 b010 	strh.w	fp, [r4, #16]
 8015d46:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 8015d4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015d4e:	e6ce      	b.n	8015aee <http_send+0xd2>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8015d50:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8015e30 <http_send+0x414>
 8015d54:	fa2e f000 	lsr.w	r0, lr, r0
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8015d58:	07c0      	lsls	r0, r0, #31
 8015d5a:	f57f aedc 	bpl.w	8015b16 <http_send+0xfa>
 8015d5e:	e6c6      	b.n	8015aee <http_send+0xd2>
  if (hs->handle == NULL) {
 8015d60:	6948      	ldr	r0, [r1, #20]
 8015d62:	2800      	cmp	r0, #0
 8015d64:	d0b4      	beq.n	8015cd0 <http_send+0x2b4>
  bytes_left = fs_bytes_left(hs->handle);
 8015d66:	f7ff fafb 	bl	8015360 <fs_bytes_left>
  if (bytes_left <= 0) {
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	ddb0      	ble.n	8015cd0 <http_send+0x2b4>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8015d6e:	4b2a      	ldr	r3, [pc, #168]	; (8015e18 <http_send+0x3fc>)
 8015d70:	f240 429d 	movw	r2, #1181	; 0x49d
 8015d74:	4929      	ldr	r1, [pc, #164]	; (8015e1c <http_send+0x400>)
 8015d76:	482a      	ldr	r0, [pc, #168]	; (8015e20 <http_send+0x404>)
 8015d78:	f00c fba4 	bl	80224c4 <iprintf>
  return 1;
 8015d7c:	e65a      	b.n	8015a34 <http_send+0x18>
          ssi->parse_left--;
 8015d7e:	68e7      	ldr	r7, [r4, #12]
          ssi->tag_index++;
 8015d80:	3001      	adds	r0, #1
          ssi->parsed++;
 8015d82:	3101      	adds	r1, #1
          ssi->tag_index++;
 8015d84:	b280      	uxth	r0, r0
          ssi->parse_left--;
 8015d86:	3f01      	subs	r7, #1
          ssi->parsed++;
 8015d88:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 8015d8a:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 8015d8c:	60e7      	str	r7, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8015d8e:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8015d92:	2900      	cmp	r1, #0
 8015d94:	f47f ae61 	bne.w	8015a5a <http_send+0x3e>
  ssi = hs->ssi;
 8015d98:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8015d9c:	f1b8 0f00 	cmp.w	r8, #0
 8015da0:	f000 8116 	beq.w	8015fd0 <http_send+0x5b4>
  if (httpd_ssi_handler
 8015da4:	4b1f      	ldr	r3, [pc, #124]	; (8015e24 <http_send+0x408>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	9300      	str	r3, [sp, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	f000 808f 	beq.w	8015ece <http_send+0x4b2>
      && httpd_tags && httpd_num_tags
 8015db0:	4b1d      	ldr	r3, [pc, #116]	; (8015e28 <http_send+0x40c>)
 8015db2:	681a      	ldr	r2, [r3, #0]
 8015db4:	2a00      	cmp	r2, #0
 8015db6:	f000 808a 	beq.w	8015ece <http_send+0x4b2>
 8015dba:	4b1c      	ldr	r3, [pc, #112]	; (8015e2c <http_send+0x410>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8015dbe:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 8015dc0:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8015dc2:	f340 8084 	ble.w	8015ece <http_send+0x4b2>
 8015dc6:	f108 0716 	add.w	r7, r8, #22
 8015dca:	3a04      	subs	r2, #4
 8015dcc:	2300      	movs	r3, #0
 8015dce:	9401      	str	r4, [sp, #4]
 8015dd0:	9602      	str	r6, [sp, #8]
 8015dd2:	463e      	mov	r6, r7
 8015dd4:	9503      	str	r5, [sp, #12]
 8015dd6:	461c      	mov	r4, r3
 8015dd8:	4617      	mov	r7, r2
 8015dda:	460d      	mov	r5, r1
 8015ddc:	e003      	b.n	8015de6 <http_send+0x3ca>
 8015dde:	3401      	adds	r4, #1
 8015de0:	42a5      	cmp	r5, r4
 8015de2:	f000 8106 	beq.w	8015ff2 <http_send+0x5d6>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8015de6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8015dea:	4630      	mov	r0, r6
 8015dec:	f7ea fa28 	bl	8000240 <strcmp>
 8015df0:	2800      	cmp	r0, #0
 8015df2:	d1f4      	bne.n	8015dde <http_send+0x3c2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8015df4:	4623      	mov	r3, r4
 8015df6:	22fe      	movs	r2, #254	; 0xfe
 8015df8:	f108 011f 	add.w	r1, r8, #31
 8015dfc:	9d03      	ldr	r5, [sp, #12]
 8015dfe:	4618      	mov	r0, r3
 8015e00:	9b00      	ldr	r3, [sp, #0]
 8015e02:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 8015e06:	4798      	blx	r3
 8015e08:	f8a8 0012 	strh.w	r0, [r8, #18]
          return;
 8015e0c:	e0a0      	b.n	8015f50 <http_send+0x534>
            ssi->tag_index++;
 8015e0e:	3701      	adds	r7, #1
 8015e10:	8227      	strh	r7, [r4, #16]
 8015e12:	e738      	b.n	8015c86 <http_send+0x26a>
 8015e14:	0803f164 	.word	0x0803f164
 8015e18:	0803ee44 	.word	0x0803ee44
 8015e1c:	0803ef24 	.word	0x0803ef24
 8015e20:	08028d24 	.word	0x08028d24
 8015e24:	2001a438 	.word	0x2001a438
 8015e28:	2001a43c 	.word	0x2001a43c
 8015e2c:	2001a034 	.word	0x2001a034
 8015e30:	00800013 	.word	0x00800013
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8015e34:	f107 011f 	add.w	r1, r7, #31
            len = (ssi->tag_insert_len - ssi->tag_index);
 8015e38:	1bd7      	subs	r7, r2, r7
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8015e3a:	2301      	movs	r3, #1
 8015e3c:	f10d 0216 	add.w	r2, sp, #22
 8015e40:	4421      	add	r1, r4
 8015e42:	4648      	mov	r0, r9
            len = (ssi->tag_insert_len - ssi->tag_index);
 8015e44:	f8ad 7016 	strh.w	r7, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8015e48:	f7ff fa8e 	bl	8015368 <http_write>
              ssi->tag_index += len;
 8015e4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
            if (err == ERR_OK) {
 8015e50:	4682      	mov	sl, r0
 8015e52:	2800      	cmp	r0, #0
 8015e54:	f47f ae34 	bne.w	8015ac0 <http_send+0xa4>
              ssi->tag_index += len;
 8015e58:	8a21      	ldrh	r1, [r4, #16]
              data_to_send = 1;
 8015e5a:	2601      	movs	r6, #1
 8015e5c:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
              ssi->tag_index += len;
 8015e60:	4419      	add	r1, r3
 8015e62:	8221      	strh	r1, [r4, #16]
 8015e64:	e5f9      	b.n	8015a5a <http_send+0x3e>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8015e66:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8015e6a:	4964      	ldr	r1, [pc, #400]	; (8015ffc <http_send+0x5e0>)
 8015e6c:	4b64      	ldr	r3, [pc, #400]	; (8016000 <http_send+0x5e4>)
 8015e6e:	4865      	ldr	r0, [pc, #404]	; (8016004 <http_send+0x5e8>)
 8015e70:	f00c fb28 	bl	80224c4 <iprintf>
 8015e74:	6862      	ldr	r2, [r4, #4]
 8015e76:	69a9      	ldr	r1, [r5, #24]
 8015e78:	e60c      	b.n	8015a94 <http_send+0x78>
      hs->file += len;
 8015e7a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
      data_to_send = 1;
 8015e7e:	2601      	movs	r6, #1
      hs->file += len;
 8015e80:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 8015e82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 8015e84:	440a      	add	r2, r1
      hs->left -= len;
 8015e86:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 8015e88:	61aa      	str	r2, [r5, #24]
      hs->left -= len;
 8015e8a:	626b      	str	r3, [r5, #36]	; 0x24
 8015e8c:	e6ad      	b.n	8015bea <http_send+0x1ce>
 8015e8e:	6862      	ldr	r2, [r4, #4]
 8015e90:	69a9      	ldr	r1, [r5, #24]
 8015e92:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015e96:	e72a      	b.n	8015cee <http_send+0x2d2>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8015e98:	2a04      	cmp	r2, #4
 8015e9a:	f43f af0f 	beq.w	8015cbc <http_send+0x2a0>
 8015e9e:	e66b      	b.n	8015b78 <http_send+0x15c>
              ssi->tag_index = 1;
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 8015ea6:	8223      	strh	r3, [r4, #16]
 8015ea8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015eac:	e61f      	b.n	8015aee <http_send+0xd2>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8015eae:	4b54      	ldr	r3, [pc, #336]	; (8016000 <http_send+0x5e4>)
 8015eb0:	f240 523a 	movw	r2, #1338	; 0x53a
 8015eb4:	4954      	ldr	r1, [pc, #336]	; (8016008 <http_send+0x5ec>)
 8015eb6:	4853      	ldr	r0, [pc, #332]	; (8016004 <http_send+0x5e8>)
 8015eb8:	f00c fb04 	bl	80224c4 <iprintf>
 8015ebc:	7d23      	ldrb	r3, [r4, #20]
 8015ebe:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015ec2:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8015ec6:	6821      	ldr	r1, [r4, #0]
 8015ec8:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8015ecc:	e72d      	b.n	8015d2a <http_send+0x30e>
 8015ece:	f108 0716 	add.w	r7, r8, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8015ed2:	4638      	mov	r0, r7
 8015ed4:	f7ea f9be 	bl	8000254 <strlen>
 8015ed8:	28e4      	cmp	r0, #228	; 0xe4
 8015eda:	d869      	bhi.n	8015fb0 <http_send+0x594>
 8015edc:	2809      	cmp	r0, #9
 8015ede:	bf28      	it	cs
 8015ee0:	2009      	movcs	r0, #9
 8015ee2:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8015ee6:	4686      	mov	lr, r0
 8015ee8:	9300      	str	r3, [sp, #0]
 8015eea:	f100 0319 	add.w	r3, r0, #25
 8015eee:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8015ef0:	f8df c124 	ldr.w	ip, [pc, #292]	; 8016018 <http_send+0x5fc>
 8015ef4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015ef8:	f8bc c000 	ldrh.w	ip, [ip]
 8015efc:	f8c8 001f 	str.w	r0, [r8, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8015f00:	f108 0031 	add.w	r0, r8, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8015f04:	f8a8 c02f 	strh.w	ip, [r8, #47]	; 0x2f
 8015f08:	f8c8 1023 	str.w	r1, [r8, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8015f0c:	4639      	mov	r1, r7
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8015f0e:	f8c8 2027 	str.w	r2, [r8, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8015f12:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8015f14:	f8c8 302b 	str.w	r3, [r8, #43]	; 0x2b
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8015f18:	f00b fb3a 	bl	8021590 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8015f1c:	9a01      	ldr	r2, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8015f1e:	4b3b      	ldr	r3, [pc, #236]	; (801600c <http_send+0x5f0>)
 8015f20:	9900      	ldr	r1, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8015f22:	4442      	add	r2, r8
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8015f24:	6818      	ldr	r0, [r3, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8015f26:	4694      	mov	ip, r2
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8015f28:	889f      	ldrh	r7, [r3, #4]
 8015f2a:	eb08 0201 	add.w	r2, r8, r1
 8015f2e:	799b      	ldrb	r3, [r3, #6]
 8015f30:	f848 0001 	str.w	r0, [r8, r1]
  len = strlen(ssi->tag_insert);
 8015f34:	f108 001f 	add.w	r0, r8, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8015f38:	8097      	strh	r7, [r2, #4]
 8015f3a:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8015f3c:	f88c b01f 	strb.w	fp, [ip, #31]
  len = strlen(ssi->tag_insert);
 8015f40:	f7ea f988 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8015f44:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8015f48:	4607      	mov	r7, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8015f4a:	d239      	bcs.n	8015fc0 <http_send+0x5a4>
  ssi->tag_insert_len = (u16_t)len;
 8015f4c:	f8a8 7012 	strh.w	r7, [r8, #18]
            ssi->tag_state = TAG_SENDING;
 8015f50:	2204      	movs	r2, #4
            ssi->parsed = ssi->tag_started;
 8015f52:	e9d4 3700 	ldrd	r3, r7, [r4]
            ssi->tag_state = TAG_SENDING;
 8015f56:	f884 211e 	strb.w	r2, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 8015f5a:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 8015f5c:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8015f60:	428b      	cmp	r3, r1
            ssi->tag_end = ssi->parsed;
 8015f62:	60a3      	str	r3, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8015f64:	6027      	str	r7, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8015f66:	d802      	bhi.n	8015f6e <http_send+0x552>
 8015f68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015f6c:	e57b      	b.n	8015a66 <http_send+0x4a>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8015f6e:	1a7f      	subs	r7, r7, r1
 8015f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015f74:	2300      	movs	r3, #0
 8015f76:	4648      	mov	r0, r9
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8015f78:	4297      	cmp	r7, r2
 8015f7a:	bfa8      	it	ge
 8015f7c:	4617      	movge	r7, r2
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015f7e:	f10d 0216 	add.w	r2, sp, #22
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8015f82:	f8ad 7016 	strh.w	r7, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015f86:	f7ff f9ef 	bl	8015368 <http_write>
              if (err == ERR_OK) {
 8015f8a:	4682      	mov	sl, r0
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	f47f ad95 	bne.w	8015abc <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8015f92:	6861      	ldr	r1, [r4, #4]
 8015f94:	69aa      	ldr	r2, [r5, #24]
 8015f96:	4291      	cmp	r1, r2
 8015f98:	d922      	bls.n	8015fe0 <http_send+0x5c4>
 8015f9a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
                hs->left -= len;
 8015f9e:	6a69      	ldr	r1, [r5, #36]	; 0x24
                hs->file += len;
 8015fa0:	441a      	add	r2, r3
                data_to_send = 1;
 8015fa2:	2601      	movs	r6, #1
                hs->left -= len;
 8015fa4:	1ac9      	subs	r1, r1, r3
                hs->file += len;
 8015fa6:	61aa      	str	r2, [r5, #24]
                hs->left -= len;
 8015fa8:	6269      	str	r1, [r5, #36]	; 0x24
 8015faa:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 8015fae:	e554      	b.n	8015a5a <http_send+0x3e>
 8015fb0:	233a      	movs	r3, #58	; 0x3a
 8015fb2:	f04f 0c22 	mov.w	ip, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8015fb6:	f04f 0e09 	mov.w	lr, #9
 8015fba:	e9cd 3c00 	strd	r3, ip, [sp]
 8015fbe:	e797      	b.n	8015ef0 <http_send+0x4d4>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8015fc0:	4b0f      	ldr	r3, [pc, #60]	; (8016000 <http_send+0x5e4>)
 8015fc2:	f240 323f 	movw	r2, #831	; 0x33f
 8015fc6:	4912      	ldr	r1, [pc, #72]	; (8016010 <http_send+0x5f4>)
 8015fc8:	480e      	ldr	r0, [pc, #56]	; (8016004 <http_send+0x5e8>)
 8015fca:	f00c fa7b 	bl	80224c4 <iprintf>
 8015fce:	e7bd      	b.n	8015f4c <http_send+0x530>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8015fd0:	4b0b      	ldr	r3, [pc, #44]	; (8016000 <http_send+0x5e4>)
 8015fd2:	f240 3206 	movw	r2, #774	; 0x306
 8015fd6:	490f      	ldr	r1, [pc, #60]	; (8016014 <http_send+0x5f8>)
 8015fd8:	480a      	ldr	r0, [pc, #40]	; (8016004 <http_send+0x5e8>)
 8015fda:	f00c fa73 	bl	80224c4 <iprintf>
 8015fde:	e6e1      	b.n	8015da4 <http_send+0x388>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8015fe0:	68a3      	ldr	r3, [r4, #8]
 8015fe2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8015fe6:	1a5b      	subs	r3, r3, r1
 8015fe8:	4403      	add	r3, r0
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015ff0:	e7d5      	b.n	8015f9e <http_send+0x582>
 8015ff2:	4637      	mov	r7, r6
 8015ff4:	9c01      	ldr	r4, [sp, #4]
 8015ff6:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 8015ffa:	e76a      	b.n	8015ed2 <http_send+0x4b6>
 8015ffc:	0803efac 	.word	0x0803efac
 8016000:	0803ee44 	.word	0x0803ee44
 8016004:	08028d24 	.word	0x08028d24
 8016008:	0803ef5c 	.word	0x0803ef5c
 801600c:	0803ef94 	.word	0x0803ef94
 8016010:	0803ef9c 	.word	0x0803ef9c
 8016014:	0803ef74 	.word	0x0803ef74
 8016018:	0803ef80 	.word	0x0803ef80

0801601c <http_sent>:
{
 801601c:	b508      	push	{r3, lr}
  if (hs == NULL) {
 801601e:	4603      	mov	r3, r0
 8016020:	b130      	cbz	r0, 8016030 <http_sent+0x14>
  hs->retries = 0;
 8016022:	2200      	movs	r2, #0
 8016024:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8016026:	4619      	mov	r1, r3
  hs->retries = 0;
 8016028:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 801602c:	f7ff fcf6 	bl	8015a1c <http_send>
}
 8016030:	2000      	movs	r0, #0
 8016032:	bd08      	pop	{r3, pc}

08016034 <http_poll>:
{
 8016034:	b510      	push	{r4, lr}
 8016036:	460c      	mov	r4, r1
  if (hs == NULL) {
 8016038:	b1a8      	cbz	r0, 8016066 <http_poll+0x32>
    hs->retries++;
 801603a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801603e:	3301      	adds	r3, #1
 8016040:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8016042:	2b04      	cmp	r3, #4
    hs->retries++;
 8016044:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8016048:	d019      	beq.n	801607e <http_poll+0x4a>
    if (hs->handle) {
 801604a:	6943      	ldr	r3, [r0, #20]
 801604c:	b123      	cbz	r3, 8016058 <http_poll+0x24>
      if (http_send(pcb, hs)) {
 801604e:	4601      	mov	r1, r0
 8016050:	4620      	mov	r0, r4
 8016052:	f7ff fce3 	bl	8015a1c <http_send>
 8016056:	b908      	cbnz	r0, 801605c <http_poll+0x28>
  return ERR_OK;
 8016058:	2000      	movs	r0, #0
}
 801605a:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 801605c:	4620      	mov	r0, r4
 801605e:	f006 fca1 	bl	801c9a4 <tcp_output>
  return ERR_OK;
 8016062:	2000      	movs	r0, #0
 8016064:	e7f9      	b.n	801605a <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8016066:	4601      	mov	r1, r0
 8016068:	4620      	mov	r0, r4
 801606a:	f7ff fc6b 	bl	8015944 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 801606e:	3001      	adds	r0, #1
 8016070:	d1f2      	bne.n	8016058 <http_poll+0x24>
      altcp_abort(pcb);
 8016072:	4620      	mov	r0, r4
 8016074:	f003 fbd2 	bl	801981c <tcp_abort>
      return ERR_ABRT;
 8016078:	f06f 000c 	mvn.w	r0, #12
}
 801607c:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 801607e:	4601      	mov	r1, r0
 8016080:	4620      	mov	r0, r4
 8016082:	f7ff fc5f 	bl	8015944 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 8016086:	2000      	movs	r0, #0
}
 8016088:	bd10      	pop	{r4, pc}
 801608a:	bf00      	nop

0801608c <http_recv>:
{
 801608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016090:	4605      	mov	r5, r0
 8016092:	b08d      	sub	sp, #52	; 0x34
 8016094:	460e      	mov	r6, r1
 8016096:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8016098:	b9ab      	cbnz	r3, 80160c6 <http_recv+0x3a>
 801609a:	fab2 f782 	clz	r7, r2
 801609e:	097f      	lsrs	r7, r7, #5
 80160a0:	b1ca      	cbz	r2, 80160d6 <http_recv+0x4a>
 80160a2:	b188      	cbz	r0, 80160c8 <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 80160a4:	8911      	ldrh	r1, [r2, #8]
 80160a6:	4630      	mov	r0, r6
 80160a8:	f002 fee2 	bl	8018e70 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 80160ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	f040 8140 	bne.w	8016334 <http_recv+0x2a8>
    if (hs->handle == NULL) {
 80160b4:	696b      	ldr	r3, [r5, #20]
 80160b6:	b1b3      	cbz	r3, 80160e6 <http_recv+0x5a>
      pbuf_free(p);
 80160b8:	4620      	mov	r0, r4
 80160ba:	f002 f8eb 	bl	8018294 <pbuf_free>
}
 80160be:	2000      	movs	r0, #0
 80160c0:	b00d      	add	sp, #52	; 0x34
 80160c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 80160c6:	b132      	cbz	r2, 80160d6 <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 80160c8:	4630      	mov	r0, r6
 80160ca:	8921      	ldrh	r1, [r4, #8]
 80160cc:	f002 fed0 	bl	8018e70 <tcp_recved>
      pbuf_free(p);
 80160d0:	4620      	mov	r0, r4
 80160d2:	f002 f8df 	bl	8018294 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 80160d6:	4629      	mov	r1, r5
 80160d8:	4630      	mov	r0, r6
 80160da:	f7ff fc33 	bl	8015944 <http_close_or_abort_conn.constprop.0>
}
 80160de:	2000      	movs	r0, #0
 80160e0:	b00d      	add	sp, #52	; 0x34
 80160e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80160e6:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 80160e8:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	f040 8179 	bne.w	80163e2 <http_recv+0x356>
  if (hs->req == NULL) {
 80160f0:	2800      	cmp	r0, #0
 80160f2:	f000 813a 	beq.w	801636a <http_recv+0x2de>
    pbuf_cat(hs->req, p);
 80160f6:	4621      	mov	r1, r4
 80160f8:	f002 fa4e 	bl	8018598 <pbuf_cat>
  pbuf_ref(p);
 80160fc:	4620      	mov	r0, r4
 80160fe:	f002 fa37 	bl	8018570 <pbuf_ref>
  if (hs->req->next != NULL) {
 8016102:	6a28      	ldr	r0, [r5, #32]
 8016104:	6803      	ldr	r3, [r0, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	f000 8131 	beq.w	801636e <http_recv+0x2e2>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801610c:	8907      	ldrh	r7, [r0, #8]
 801610e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8016112:	49bf      	ldr	r1, [pc, #764]	; (8016410 <http_recv+0x384>)
 8016114:	2300      	movs	r3, #0
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8016116:	4297      	cmp	r7, r2
    data = httpd_req_buf;
 8016118:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801611a:	bf28      	it	cs
 801611c:	4617      	movcs	r7, r2
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801611e:	463a      	mov	r2, r7
 8016120:	f002 fb50 	bl	80187c4 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8016124:	2f06      	cmp	r7, #6
 8016126:	f240 80f3 	bls.w	8016310 <http_recv+0x284>
    crlf = lwip_strnstr(data, CRLF, data_len);
 801612a:	463a      	mov	r2, r7
 801612c:	49b9      	ldr	r1, [pc, #740]	; (8016414 <http_recv+0x388>)
 801612e:	4640      	mov	r0, r8
 8016130:	f000 fa62 	bl	80165f8 <lwip_strnstr>
    if (crlf != NULL) {
 8016134:	2800      	cmp	r0, #0
 8016136:	f000 80eb 	beq.w	8016310 <http_recv+0x284>
      if (!strncmp(data, "GET ", 4)) {
 801613a:	2204      	movs	r2, #4
 801613c:	49b6      	ldr	r1, [pc, #728]	; (8016418 <http_recv+0x38c>)
 801613e:	4640      	mov	r0, r8
 8016140:	f00d f944 	bl	80233cc <strncmp>
 8016144:	4682      	mov	sl, r0
 8016146:	2800      	cmp	r0, #0
 8016148:	f040 811c 	bne.w	8016384 <http_recv+0x2f8>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801614c:	1f3a      	subs	r2, r7, #4
 801614e:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8016152:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8016156:	49b1      	ldr	r1, [pc, #708]	; (801641c <http_recv+0x390>)
 8016158:	b292      	uxth	r2, r2
 801615a:	4658      	mov	r0, fp
        sp1 = data + 3;
 801615c:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801615e:	9205      	str	r2, [sp, #20]
 8016160:	f000 fa4a 	bl	80165f8 <lwip_strnstr>
      if (sp2 == NULL) {
 8016164:	9a05      	ldr	r2, [sp, #20]
 8016166:	4681      	mov	r9, r0
 8016168:	2800      	cmp	r0, #0
 801616a:	f000 8127 	beq.w	80163bc <http_recv+0x330>
      int is_09 = 0;
 801616e:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 8016170:	9305      	str	r3, [sp, #20]
 8016172:	f1b9 0f00 	cmp.w	r9, #0
 8016176:	f000 80cb 	beq.w	8016310 <http_recv+0x284>
 801617a:	9b04      	ldr	r3, [sp, #16]
 801617c:	4599      	cmp	r9, r3
 801617e:	f240 80c7 	bls.w	8016310 <http_recv+0x284>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8016182:	463a      	mov	r2, r7
 8016184:	49a6      	ldr	r1, [pc, #664]	; (8016420 <http_recv+0x394>)
 8016186:	4640      	mov	r0, r8
 8016188:	f000 fa36 	bl	80165f8 <lwip_strnstr>
 801618c:	2800      	cmp	r0, #0
 801618e:	f000 80bf 	beq.w	8016310 <http_recv+0x284>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8016192:	9b05      	ldr	r3, [sp, #20]
 8016194:	2b00      	cmp	r3, #0
 8016196:	f000 8131 	beq.w	80163fc <http_recv+0x370>
            hs->keepalive = 0;
 801619a:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 801619c:	eba9 020b 	sub.w	r2, r9, fp
 80161a0:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 80161a4:	2100      	movs	r1, #0
 80161a6:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 80161a8:	b292      	uxth	r2, r2
          *sp1 = 0;
 80161aa:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 80161ac:	eb0b 0002 	add.w	r0, fp, r2
 80161b0:	f80b 1002 	strb.w	r1, [fp, r2]
 80161b4:	9006      	str	r0, [sp, #24]
          if (is_post) {
 80161b6:	f1ba 0f00 	cmp.w	sl, #0
 80161ba:	f000 8118 	beq.w	80163ee <http_recv+0x362>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80161be:	f109 0301 	add.w	r3, r9, #1
 80161c2:	4997      	ldr	r1, [pc, #604]	; (8016420 <http_recv+0x394>)
            struct pbuf *q = hs->req;
 80161c4:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80161c8:	eba3 0208 	sub.w	r2, r3, r8
 80161cc:	4618      	mov	r0, r3
 80161ce:	9305      	str	r3, [sp, #20]
 80161d0:	1aba      	subs	r2, r7, r2
 80161d2:	f000 fa11 	bl	80165f8 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 80161d6:	9007      	str	r0, [sp, #28]
 80161d8:	2800      	cmp	r0, #0
 80161da:	f000 816d 	beq.w	80164b8 <http_recv+0x42c>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 80161de:	9b05      	ldr	r3, [sp, #20]
 80161e0:	4990      	ldr	r1, [pc, #576]	; (8016424 <http_recv+0x398>)
 80161e2:	1ac2      	subs	r2, r0, r3
 80161e4:	4618      	mov	r0, r3
 80161e6:	f000 fa07 	bl	80165f8 <lwip_strnstr>
    if (scontent_len != NULL) {
 80161ea:	9008      	str	r0, [sp, #32]
 80161ec:	2800      	cmp	r0, #0
 80161ee:	f000 8135 	beq.w	801645c <http_recv+0x3d0>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 80161f2:	f100 0310 	add.w	r3, r0, #16
 80161f6:	220a      	movs	r2, #10
 80161f8:	4986      	ldr	r1, [pc, #536]	; (8016414 <http_recv+0x388>)
 80161fa:	4618      	mov	r0, r3
 80161fc:	9309      	str	r3, [sp, #36]	; 0x24
 80161fe:	f000 f9fb 	bl	80165f8 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8016202:	2800      	cmp	r0, #0
 8016204:	f000 812a 	beq.w	801645c <http_recv+0x3d0>
        content_len = atoi(content_len_num);
 8016208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801620a:	4618      	mov	r0, r3
 801620c:	f00b f85e 	bl	80212cc <atoi>
        if (content_len == 0) {
 8016210:	1e01      	subs	r1, r0, #0
 8016212:	9109      	str	r1, [sp, #36]	; 0x24
 8016214:	f040 8120 	bne.w	8016458 <http_recv+0x3cc>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8016218:	9b08      	ldr	r3, [sp, #32]
 801621a:	7c1b      	ldrb	r3, [r3, #16]
 801621c:	2b30      	cmp	r3, #48	; 0x30
 801621e:	f040 811d 	bne.w	801645c <http_recv+0x3d0>
 8016222:	9b08      	ldr	r3, [sp, #32]
 8016224:	7c5b      	ldrb	r3, [r3, #17]
 8016226:	2b0d      	cmp	r3, #13
 8016228:	f040 8118 	bne.w	801645c <http_recv+0x3d0>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801622c:	9b07      	ldr	r3, [sp, #28]
          u8_t post_auto_wnd = 1;
 801622e:	f04f 0c01 	mov.w	ip, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8016232:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8016234:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8016238:	3304      	adds	r3, #4
          u8_t post_auto_wnd = 1;
 801623a:	f88d c02f 	strb.w	ip, [sp, #47]	; 0x2f
          http_uri_buf[0] = 0;
 801623e:	f04f 0c00 	mov.w	ip, #0
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8016242:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8016244:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8016248:	1a9b      	subs	r3, r3, r2
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801624a:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
 801624e:	9a05      	ldr	r2, [sp, #20]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8016250:	4547      	cmp	r7, r8
 8016252:	bfb4      	ite	lt
 8016254:	46b8      	movlt	r8, r7
 8016256:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801625a:	429f      	cmp	r7, r3
 801625c:	bfa8      	it	ge
 801625e:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8016260:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8016262:	4f71      	ldr	r7, [pc, #452]	; (8016428 <http_recv+0x39c>)
 8016264:	f887 c000 	strb.w	ip, [r7]
          *crlfcrlf = 0;
 8016268:	9f07      	ldr	r7, [sp, #28]
 801626a:	f887 c000 	strb.w	ip, [r7]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801626e:	4f6e      	ldr	r7, [pc, #440]	; (8016428 <http_recv+0x39c>)
 8016270:	9003      	str	r0, [sp, #12]
 8016272:	4628      	mov	r0, r5
 8016274:	9701      	str	r7, [sp, #4]
 8016276:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016278:	f8cd b008 	str.w	fp, [sp, #8]
 801627c:	9700      	str	r7, [sp, #0]
 801627e:	f7f0 f88d 	bl	800639c <httpd_post_begin>
          if (err == ERR_OK) {
 8016282:	2800      	cmp	r0, #0
 8016284:	f040 80f8 	bne.w	8016478 <http_recv+0x3ec>
            hs->post_content_len_left = (u32_t)content_len;
 8016288:	632f      	str	r7, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 801628a:	f1ba 0f00 	cmp.w	sl, #0
 801628e:	f000 80d7 	beq.w	8016440 <http_recv+0x3b4>
 8016292:	4652      	mov	r2, sl
 8016294:	e005      	b.n	80162a2 <http_recv+0x216>
              q = q->next;
 8016296:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8016298:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 801629c:	2a00      	cmp	r2, #0
 801629e:	f000 80cf 	beq.w	8016440 <http_recv+0x3b4>
 80162a2:	8953      	ldrh	r3, [r2, #10]
 80162a4:	4543      	cmp	r3, r8
              start_offset -= q->len;
 80162a6:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 80162aa:	d9f4      	bls.n	8016296 <http_recv+0x20a>
 80162ac:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 80162ae:	4641      	mov	r1, r8
 80162b0:	4610      	mov	r0, r2
 80162b2:	f001 ffb3 	bl	801821c <pbuf_remove_header>
              pbuf_ref(q);
 80162b6:	4650      	mov	r0, sl
 80162b8:	f002 f95a 	bl	8018570 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80162bc:	4651      	mov	r1, sl
 80162be:	4628      	mov	r0, r5
 80162c0:	f7ff fadc 	bl	801587c <http_post_rxpbuf>
 80162c4:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 80162c6:	2f00      	cmp	r7, #0
 80162c8:	f000 80bc 	beq.w	8016444 <http_recv+0x3b8>
              *sp1 = ' ';
 80162cc:	2320      	movs	r3, #32
 80162ce:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 80162d0:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 80162d4:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80162d6:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 80162d8:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 80162dc:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 80162de:	d022      	beq.n	8016326 <http_recv+0x29a>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80162e0:	2f00      	cmp	r7, #0
 80162e2:	d048      	beq.n	8016376 <http_recv+0x2ea>
 80162e4:	1d7a      	adds	r2, r7, #5
 80162e6:	f43f aee7 	beq.w	80160b8 <http_recv+0x2c>
 80162ea:	f027 0308 	bic.w	r3, r7, #8
 80162ee:	b25b      	sxtb	r3, r3
 80162f0:	3310      	adds	r3, #16
 80162f2:	d12e      	bne.n	8016352 <http_recv+0x2c6>
        if (hs->req != NULL) {
 80162f4:	6a28      	ldr	r0, [r5, #32]
 80162f6:	b3a0      	cbz	r0, 8016362 <http_recv+0x2d6>
          pbuf_free(hs->req);
 80162f8:	f001 ffcc 	bl	8018294 <pbuf_free>
          hs->req = NULL;
 80162fc:	2300      	movs	r3, #0
 80162fe:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8016300:	4620      	mov	r0, r4
 8016302:	f001 ffc7 	bl	8018294 <pbuf_free>
      if (parsed == ERR_OK) {
 8016306:	b1df      	cbz	r7, 8016340 <http_recv+0x2b4>
      } else if (parsed == ERR_ARG) {
 8016308:	3710      	adds	r7, #16
 801630a:	f43f aee4 	beq.w	80160d6 <http_recv+0x4a>
 801630e:	e6e6      	b.n	80160de <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 8016310:	6a28      	ldr	r0, [r5, #32]
 8016312:	f002 f923 	bl	801855c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8016316:	6a2b      	ldr	r3, [r5, #32]
 8016318:	891b      	ldrh	r3, [r3, #8]
 801631a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801631e:	d202      	bcs.n	8016326 <http_recv+0x29a>
 8016320:	2805      	cmp	r0, #5
 8016322:	f67f aec9 	bls.w	80160b8 <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8016326:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801632a:	4628      	mov	r0, r5
 801632c:	f7ff facc 	bl	80158c8 <http_find_error_file>
 8016330:	4607      	mov	r7, r0
 8016332:	e7d5      	b.n	80162e0 <http_recv+0x254>
    http_post_rxpbuf(hs, p);
 8016334:	4621      	mov	r1, r4
 8016336:	4628      	mov	r0, r5
    hs->retries = 0;
 8016338:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 801633c:	f7ff fa9e 	bl	801587c <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8016340:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016342:	2b00      	cmp	r3, #0
 8016344:	f47f aecb 	bne.w	80160de <http_recv+0x52>
      http_send(pcb, hs);
 8016348:	4629      	mov	r1, r5
 801634a:	4630      	mov	r0, r6
 801634c:	f7ff fb66 	bl	8015a1c <http_send>
 8016350:	e6c5      	b.n	80160de <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8016352:	4b36      	ldr	r3, [pc, #216]	; (801642c <http_recv+0x3a0>)
 8016354:	f640 2204 	movw	r2, #2564	; 0xa04
 8016358:	4935      	ldr	r1, [pc, #212]	; (8016430 <http_recv+0x3a4>)
 801635a:	4836      	ldr	r0, [pc, #216]	; (8016434 <http_recv+0x3a8>)
 801635c:	f00c f8b2 	bl	80224c4 <iprintf>
 8016360:	e7c8      	b.n	80162f4 <http_recv+0x268>
      pbuf_free(p);
 8016362:	4620      	mov	r0, r4
 8016364:	f001 ff96 	bl	8018294 <pbuf_free>
      if (parsed == ERR_OK) {
 8016368:	e7ce      	b.n	8016308 <http_recv+0x27c>
    hs->req = p;
 801636a:	622c      	str	r4, [r5, #32]
 801636c:	e6c6      	b.n	80160fc <http_recv+0x70>
    data = (char *)p->payload;
 801636e:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8016372:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8016374:	e6d6      	b.n	8016124 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8016376:	1d7b      	adds	r3, r7, #5
 8016378:	f43f ae9e 	beq.w	80160b8 <http_recv+0x2c>
        if (hs->req != NULL) {
 801637c:	6a28      	ldr	r0, [r5, #32]
 801637e:	2800      	cmp	r0, #0
 8016380:	d0be      	beq.n	8016300 <http_recv+0x274>
 8016382:	e7b9      	b.n	80162f8 <http_recv+0x26c>
      } else if (!strncmp(data, "POST ", 5)) {
 8016384:	2205      	movs	r2, #5
 8016386:	492c      	ldr	r1, [pc, #176]	; (8016438 <http_recv+0x3ac>)
 8016388:	4640      	mov	r0, r8
 801638a:	f00d f81f 	bl	80233cc <strncmp>
 801638e:	9005      	str	r0, [sp, #20]
 8016390:	b9e8      	cbnz	r0, 80163ce <http_recv+0x342>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8016392:	f1a7 0a05 	sub.w	sl, r7, #5
 8016396:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 801639a:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801639e:	491f      	ldr	r1, [pc, #124]	; (801641c <http_recv+0x390>)
 80163a0:	fa1f fa8a 	uxth.w	sl, sl
 80163a4:	4658      	mov	r0, fp
        sp1 = data + 4;
 80163a6:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80163a8:	4652      	mov	r2, sl
 80163aa:	f000 f925 	bl	80165f8 <lwip_strnstr>
      if (sp2 == NULL) {
 80163ae:	4681      	mov	r9, r0
 80163b0:	2800      	cmp	r0, #0
 80163b2:	d05b      	beq.n	801646c <http_recv+0x3e0>
        is_post = 1;
 80163b4:	f04f 0a01 	mov.w	sl, #1
 80163b8:	9b05      	ldr	r3, [sp, #20]
 80163ba:	e6d9      	b.n	8016170 <http_recv+0xe4>
        is_09 = 1;
 80163bc:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80163be:	4915      	ldr	r1, [pc, #84]	; (8016414 <http_recv+0x388>)
 80163c0:	4658      	mov	r0, fp
        is_09 = 1;
 80163c2:	9305      	str	r3, [sp, #20]
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80163c4:	f000 f918 	bl	80165f8 <lwip_strnstr>
 80163c8:	9b05      	ldr	r3, [sp, #20]
 80163ca:	4681      	mov	r9, r0
        if (is_post) {
 80163cc:	e6d0      	b.n	8016170 <http_recv+0xe4>
        data[4] = 0;
 80163ce:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 80163d0:	f240 11f5 	movw	r1, #501	; 0x1f5
 80163d4:	4628      	mov	r0, r5
        data[4] = 0;
 80163d6:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 80163da:	f7ff fa75 	bl	80158c8 <http_find_error_file>
 80163de:	4607      	mov	r7, r0
 80163e0:	e77e      	b.n	80162e0 <http_recv+0x254>
        if (hs->req != NULL) {
 80163e2:	2800      	cmp	r0, #0
 80163e4:	f43f ae68 	beq.w	80160b8 <http_recv+0x2c>
 80163e8:	f06f 0707 	mvn.w	r7, #7
 80163ec:	e784      	b.n	80162f8 <http_recv+0x26c>
            return http_find_file(hs, uri, is_09);
 80163ee:	461a      	mov	r2, r3
 80163f0:	4659      	mov	r1, fp
 80163f2:	4628      	mov	r0, r5
 80163f4:	f7ff f954 	bl	80156a0 <http_find_file>
 80163f8:	4607      	mov	r7, r0
 80163fa:	e771      	b.n	80162e0 <http_recv+0x254>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 80163fc:	463a      	mov	r2, r7
 80163fe:	490f      	ldr	r1, [pc, #60]	; (801643c <http_recv+0x3b0>)
 8016400:	4640      	mov	r0, r8
 8016402:	f000 f8f9 	bl	80165f8 <lwip_strnstr>
 8016406:	9b05      	ldr	r3, [sp, #20]
 8016408:	2800      	cmp	r0, #0
 801640a:	d047      	beq.n	801649c <http_recv+0x410>
            hs->keepalive = 1;
 801640c:	2001      	movs	r0, #1
 801640e:	e6c5      	b.n	801619c <http_recv+0x110>
 8016410:	2001a038 	.word	0x2001a038
 8016414:	08027de0 	.word	0x08027de0
 8016418:	0803efc4 	.word	0x0803efc4
 801641c:	0802871c 	.word	0x0802871c
 8016420:	08026940 	.word	0x08026940
 8016424:	0803f004 	.word	0x0803f004
 8016428:	20019ff4 	.word	0x20019ff4
 801642c:	0803ee44 	.word	0x0803ee44
 8016430:	0803f018 	.word	0x0803f018
 8016434:	08028d24 	.word	0x08028d24
 8016438:	0803efcc 	.word	0x0803efcc
 801643c:	0803efd4 	.word	0x0803efd4
            } else if (hs->post_content_len_left == 0) {
 8016440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016442:	b303      	cbz	r3, 8016486 <http_recv+0x3fa>
        if (hs->req != NULL) {
 8016444:	6a28      	ldr	r0, [r5, #32]
 8016446:	b398      	cbz	r0, 80164b0 <http_recv+0x424>
          pbuf_free(hs->req);
 8016448:	f001 ff24 	bl	8018294 <pbuf_free>
          hs->req = NULL;
 801644c:	2300      	movs	r3, #0
      pbuf_free(p);
 801644e:	4620      	mov	r0, r4
          hs->req = NULL;
 8016450:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8016452:	f001 ff1f 	bl	8018294 <pbuf_free>
      if (parsed == ERR_OK) {
 8016456:	e773      	b.n	8016340 <http_recv+0x2b4>
        if (content_len >= 0) {
 8016458:	f6bf aee8 	bge.w	801622c <http_recv+0x1a0>
              *sp1 = ' ';
 801645c:	2320      	movs	r3, #32
 801645e:	9a04      	ldr	r2, [sp, #16]
 8016460:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8016462:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8016464:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8016468:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801646a:	e75c      	b.n	8016326 <http_recv+0x29a>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801646c:	4652      	mov	r2, sl
 801646e:	4658      	mov	r0, fp
 8016470:	4915      	ldr	r1, [pc, #84]	; (80164c8 <http_recv+0x43c>)
 8016472:	f000 f8c1 	bl	80165f8 <lwip_strnstr>
        if (is_post) {
 8016476:	e756      	b.n	8016326 <http_recv+0x29a>
            return http_find_file(hs, http_uri_buf, 0);
 8016478:	2200      	movs	r2, #0
 801647a:	4914      	ldr	r1, [pc, #80]	; (80164cc <http_recv+0x440>)
 801647c:	4628      	mov	r0, r5
 801647e:	f7ff f90f 	bl	80156a0 <http_find_file>
 8016482:	4607      	mov	r7, r0
 8016484:	e71f      	b.n	80162c6 <http_recv+0x23a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8016486:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016488:	2241      	movs	r2, #65	; 0x41
 801648a:	4608      	mov	r0, r1
 801648c:	f001 ff70 	bl	8018370 <pbuf_alloc>
 8016490:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 8016492:	4628      	mov	r0, r5
 8016494:	f7ff f9f2 	bl	801587c <http_post_rxpbuf>
 8016498:	4607      	mov	r7, r0
 801649a:	e714      	b.n	80162c6 <http_recv+0x23a>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 801649c:	463a      	mov	r2, r7
 801649e:	490c      	ldr	r1, [pc, #48]	; (80164d0 <http_recv+0x444>)
 80164a0:	4640      	mov	r0, r8
 80164a2:	f000 f8a9 	bl	80165f8 <lwip_strnstr>
            hs->keepalive = 1;
 80164a6:	3800      	subs	r0, #0
 80164a8:	9b05      	ldr	r3, [sp, #20]
 80164aa:	bf18      	it	ne
 80164ac:	2001      	movne	r0, #1
 80164ae:	e675      	b.n	801619c <http_recv+0x110>
      pbuf_free(p);
 80164b0:	4620      	mov	r0, r4
 80164b2:	f001 feef 	bl	8018294 <pbuf_free>
      if (parsed == ERR_OK) {
 80164b6:	e743      	b.n	8016340 <http_recv+0x2b4>
              *sp1 = ' ';
 80164b8:	2320      	movs	r3, #32
 80164ba:	9a04      	ldr	r2, [sp, #16]
 80164bc:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80164be:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 80164c0:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 80164c4:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 80164c6:	e5f7      	b.n	80160b8 <http_recv+0x2c>
 80164c8:	08027de0 	.word	0x08027de0
 80164cc:	20019ff4 	.word	0x20019ff4
 80164d0:	0803efec 	.word	0x0803efec

080164d4 <http_err>:
  if (hs != NULL) {
 80164d4:	b140      	cbz	r0, 80164e8 <http_err+0x14>
{
 80164d6:	b510      	push	{r4, lr}
 80164d8:	4604      	mov	r4, r0
    http_state_eof(hs);
 80164da:	f7fe ff79 	bl	80153d0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80164de:	4620      	mov	r0, r4
}
 80164e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 80164e4:	f001 b81a 	b.w	801751c <mem_free>
 80164e8:	4770      	bx	lr
 80164ea:	bf00      	nop

080164ec <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80164ec:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80164ee:	202e      	movs	r0, #46	; 0x2e
 80164f0:	f003 fad4 	bl	8019a9c <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80164f4:	b358      	cbz	r0, 801654e <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80164f6:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80164f8:	2101      	movs	r1, #1
 80164fa:	f002 fd0d 	bl	8018f18 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80164fe:	2250      	movs	r2, #80	; 0x50
 8016500:	4917      	ldr	r1, [pc, #92]	; (8016560 <httpd_init+0x74>)
 8016502:	4620      	mov	r0, r4
 8016504:	f002 fba8 	bl	8018c58 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8016508:	b958      	cbnz	r0, 8016522 <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 801650a:	4620      	mov	r0, r4
 801650c:	21ff      	movs	r1, #255	; 0xff
 801650e:	f002 fc73 	bl	8018df8 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8016512:	4604      	mov	r4, r0
 8016514:	b198      	cbz	r0, 801653e <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 8016516:	4620      	mov	r0, r4
 8016518:	4912      	ldr	r1, [pc, #72]	; (8016564 <httpd_init+0x78>)
}
 801651a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801651e:	f002 bd89 	b.w	8019034 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8016522:	4b11      	ldr	r3, [pc, #68]	; (8016568 <httpd_init+0x7c>)
 8016524:	f640 2257 	movw	r2, #2647	; 0xa57
 8016528:	4910      	ldr	r1, [pc, #64]	; (801656c <httpd_init+0x80>)
 801652a:	4811      	ldr	r0, [pc, #68]	; (8016570 <httpd_init+0x84>)
 801652c:	f00b ffca 	bl	80224c4 <iprintf>
    pcb = altcp_listen(pcb);
 8016530:	4620      	mov	r0, r4
 8016532:	21ff      	movs	r1, #255	; 0xff
 8016534:	f002 fc60 	bl	8018df8 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8016538:	4604      	mov	r4, r0
 801653a:	2800      	cmp	r0, #0
 801653c:	d1eb      	bne.n	8016516 <httpd_init+0x2a>
 801653e:	4b0a      	ldr	r3, [pc, #40]	; (8016568 <httpd_init+0x7c>)
 8016540:	f640 2259 	movw	r2, #2649	; 0xa59
 8016544:	490b      	ldr	r1, [pc, #44]	; (8016574 <httpd_init+0x88>)
 8016546:	480a      	ldr	r0, [pc, #40]	; (8016570 <httpd_init+0x84>)
 8016548:	f00b ffbc 	bl	80224c4 <iprintf>
 801654c:	e7e3      	b.n	8016516 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801654e:	4b06      	ldr	r3, [pc, #24]	; (8016568 <httpd_init+0x7c>)
 8016550:	f640 2272 	movw	r2, #2674	; 0xa72
 8016554:	4908      	ldr	r1, [pc, #32]	; (8016578 <httpd_init+0x8c>)
 8016556:	4806      	ldr	r0, [pc, #24]	; (8016570 <httpd_init+0x84>)
}
 8016558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801655c:	f00b bfb2 	b.w	80224c4 <iprintf>
 8016560:	08041a0c 	.word	0x08041a0c
 8016564:	08015445 	.word	0x08015445
 8016568:	0803ee44 	.word	0x0803ee44
 801656c:	0803f060 	.word	0x0803f060
 8016570:	08028d24 	.word	0x08028d24
 8016574:	0803f07c 	.word	0x0803f07c
 8016578:	0803f044 	.word	0x0803f044

0801657c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 801657c:	b570      	push	{r4, r5, r6, lr}
 801657e:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8016580:	4606      	mov	r6, r0
{
 8016582:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8016584:	b1c8      	cbz	r0, 80165ba <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 8016586:	4b11      	ldr	r3, [pc, #68]	; (80165cc <http_set_ssi_handler+0x50>)
 8016588:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 801658a:	b175      	cbz	r5, 80165aa <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801658c:	2c00      	cmp	r4, #0
 801658e:	dd04      	ble.n	801659a <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 8016590:	4a0f      	ldr	r2, [pc, #60]	; (80165d0 <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 8016592:	4b10      	ldr	r3, [pc, #64]	; (80165d4 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 8016594:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 8016596:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8016598:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801659a:	4b0f      	ldr	r3, [pc, #60]	; (80165d8 <http_set_ssi_handler+0x5c>)
 801659c:	f640 229f 	movw	r2, #2719	; 0xa9f
 80165a0:	490e      	ldr	r1, [pc, #56]	; (80165dc <http_set_ssi_handler+0x60>)
 80165a2:	480f      	ldr	r0, [pc, #60]	; (80165e0 <http_set_ssi_handler+0x64>)
 80165a4:	f00b ff8e 	bl	80224c4 <iprintf>
 80165a8:	e7f2      	b.n	8016590 <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 80165aa:	4b0b      	ldr	r3, [pc, #44]	; (80165d8 <http_set_ssi_handler+0x5c>)
 80165ac:	f640 229e 	movw	r2, #2718	; 0xa9e
 80165b0:	490c      	ldr	r1, [pc, #48]	; (80165e4 <http_set_ssi_handler+0x68>)
 80165b2:	480b      	ldr	r0, [pc, #44]	; (80165e0 <http_set_ssi_handler+0x64>)
 80165b4:	f00b ff86 	bl	80224c4 <iprintf>
 80165b8:	e7e8      	b.n	801658c <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80165ba:	4b07      	ldr	r3, [pc, #28]	; (80165d8 <http_set_ssi_handler+0x5c>)
 80165bc:	f640 2297 	movw	r2, #2711	; 0xa97
 80165c0:	4909      	ldr	r1, [pc, #36]	; (80165e8 <http_set_ssi_handler+0x6c>)
 80165c2:	4807      	ldr	r0, [pc, #28]	; (80165e0 <http_set_ssi_handler+0x64>)
 80165c4:	f00b ff7e 	bl	80224c4 <iprintf>
 80165c8:	e7dd      	b.n	8016586 <http_set_ssi_handler+0xa>
 80165ca:	bf00      	nop
 80165cc:	2001a438 	.word	0x2001a438
 80165d0:	2001a43c 	.word	0x2001a43c
 80165d4:	2001a034 	.word	0x2001a034
 80165d8:	0803ee44 	.word	0x0803ee44
 80165dc:	0803f0c4 	.word	0x0803f0c4
 80165e0:	08028d24 	.word	0x08028d24
 80165e4:	0803f0b4 	.word	0x0803f0b4
 80165e8:	0803f09c 	.word	0x0803f09c

080165ec <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80165ec:	ba40      	rev16	r0, r0
}
 80165ee:	b280      	uxth	r0, r0
 80165f0:	4770      	bx	lr
 80165f2:	bf00      	nop

080165f4 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80165f4:	ba00      	rev	r0, r0
 80165f6:	4770      	bx	lr

080165f8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80165f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165fc:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 80165fe:	4608      	mov	r0, r1
{
 8016600:	4688      	mov	r8, r1
 8016602:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8016604:	f7e9 fe26 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8016608:	b1c0      	cbz	r0, 801663c <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801660a:	4605      	mov	r5, r0
 801660c:	7820      	ldrb	r0, [r4, #0]
 801660e:	b1b0      	cbz	r0, 801663e <lwip_strnstr+0x46>
 8016610:	4426      	add	r6, r4
 8016612:	1962      	adds	r2, r4, r5
 8016614:	4296      	cmp	r6, r2
 8016616:	d314      	bcc.n	8016642 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8016618:	f898 7000 	ldrb.w	r7, [r8]
 801661c:	e005      	b.n	801662a <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801661e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8016622:	1962      	adds	r2, r4, r5
 8016624:	b158      	cbz	r0, 801663e <lwip_strnstr+0x46>
 8016626:	4296      	cmp	r6, r2
 8016628:	d30b      	bcc.n	8016642 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801662a:	4287      	cmp	r7, r0
 801662c:	d1f7      	bne.n	801661e <lwip_strnstr+0x26>
 801662e:	462a      	mov	r2, r5
 8016630:	4641      	mov	r1, r8
 8016632:	4620      	mov	r0, r4
 8016634:	f00c feca 	bl	80233cc <strncmp>
 8016638:	2800      	cmp	r0, #0
 801663a:	d1f0      	bne.n	801661e <lwip_strnstr+0x26>
 801663c:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 801663e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8016642:	2000      	movs	r0, #0
}
 8016644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016648 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8016648:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801664c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8016650:	4293      	cmp	r3, r2
 8016652:	d01c      	beq.n	801668e <lwip_stricmp+0x46>
{
 8016654:	b430      	push	{r4, r5}
 8016656:	f043 0420 	orr.w	r4, r3, #32
 801665a:	f042 0520 	orr.w	r5, r2, #32
 801665e:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8016662:	2a19      	cmp	r2, #25
 8016664:	d810      	bhi.n	8016688 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8016666:	42ac      	cmp	r4, r5
 8016668:	d10e      	bne.n	8016688 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 801666a:	b1a3      	cbz	r3, 8016696 <lwip_stricmp+0x4e>
    c1 = *str1++;
 801666c:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8016670:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8016674:	4293      	cmp	r3, r2
 8016676:	d0f8      	beq.n	801666a <lwip_stricmp+0x22>
 8016678:	f043 0420 	orr.w	r4, r3, #32
 801667c:	f042 0520 	orr.w	r5, r2, #32
 8016680:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8016684:	2a19      	cmp	r2, #25
 8016686:	d9ee      	bls.n	8016666 <lwip_stricmp+0x1e>
        return 1;
 8016688:	2001      	movs	r0, #1
  return 0;
}
 801668a:	bc30      	pop	{r4, r5}
 801668c:	4770      	bx	lr
  } while (c1 != 0);
 801668e:	2b00      	cmp	r3, #0
 8016690:	d1da      	bne.n	8016648 <lwip_stricmp>
  return 0;
 8016692:	4618      	mov	r0, r3
}
 8016694:	4770      	bx	lr
  return 0;
 8016696:	4618      	mov	r0, r3
}
 8016698:	bc30      	pop	{r4, r5}
 801669a:	4770      	bx	lr

0801669c <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 801669c:	b4f0      	push	{r4, r5, r6, r7}
 801669e:	4604      	mov	r4, r0
 80166a0:	e004      	b.n	80166ac <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80166a2:	4566      	cmp	r6, ip
 80166a4:	d111      	bne.n	80166ca <lwip_strnicmp+0x2e>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 80166a6:	42f8      	cmn	r0, r7
 80166a8:	d012      	beq.n	80166d0 <lwip_strnicmp+0x34>
 80166aa:	b18b      	cbz	r3, 80166d0 <lwip_strnicmp+0x34>
    c1 = *str1++;
 80166ac:	f814 3b01 	ldrb.w	r3, [r4], #1
    c2 = *str2++;
 80166b0:	f811 5b01 	ldrb.w	r5, [r1], #1
      char c1_upc = c1 | 0x20;
 80166b4:	f043 0620 	orr.w	r6, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80166b8:	1b17      	subs	r7, r2, r4
    if (c1 != c2) {
 80166ba:	42ab      	cmp	r3, r5
        if (c1_upc != c2_upc) {
 80166bc:	f045 0c20 	orr.w	ip, r5, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80166c0:	f1a6 0561 	sub.w	r5, r6, #97	; 0x61
    if (c1 != c2) {
 80166c4:	d0ef      	beq.n	80166a6 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80166c6:	2d19      	cmp	r5, #25
 80166c8:	d9eb      	bls.n	80166a2 <lwip_strnicmp+0x6>
        return 1;
 80166ca:	2001      	movs	r0, #1
  return 0;
}
 80166cc:	bcf0      	pop	{r4, r5, r6, r7}
 80166ce:	4770      	bx	lr
  return 0;
 80166d0:	2000      	movs	r0, #0
}
 80166d2:	bcf0      	pop	{r4, r5, r6, r7}
 80166d4:	4770      	bx	lr
 80166d6:	bf00      	nop

080166d8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80166d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166dc:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80166de:	4f24      	ldr	r7, [pc, #144]	; (8016770 <dns_call_found+0x98>)
 80166e0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80166e4:	4c23      	ldr	r4, [pc, #140]	; (8016774 <dns_call_found+0x9c>)
      /* flush this entry */
      dns_requests[i].found = NULL;
 80166e6:	f04f 0900 	mov.w	r9, #0
{
 80166ea:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80166ec:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 80166f0:	f104 0830 	add.w	r8, r4, #48	; 0x30
 80166f4:	012e      	lsls	r6, r5, #4
 80166f6:	f100 0b10 	add.w	fp, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80166fa:	6823      	ldr	r3, [r4, #0]
 80166fc:	b143      	cbz	r3, 8016710 <dns_call_found+0x38>
 80166fe:	7a22      	ldrb	r2, [r4, #8]
 8016700:	42aa      	cmp	r2, r5
 8016702:	d105      	bne.n	8016710 <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8016704:	6862      	ldr	r2, [r4, #4]
 8016706:	4651      	mov	r1, sl
 8016708:	4658      	mov	r0, fp
 801670a:	4798      	blx	r3
      dns_requests[i].found = NULL;
 801670c:	f8c4 9000 	str.w	r9, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8016710:	340c      	adds	r4, #12
 8016712:	4544      	cmp	r4, r8
 8016714:	d1f1      	bne.n	80166fa <dns_call_found+0x22>
 8016716:	1973      	adds	r3, r6, r5
 8016718:	2400      	movs	r4, #0
 801671a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 801671e:	4f14      	ldr	r7, [pc, #80]	; (8016770 <dns_call_found+0x98>)
 8016720:	7bd9      	ldrb	r1, [r3, #15]
 8016722:	463a      	mov	r2, r7
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
 8016724:	b2e3      	uxtb	r3, r4
 8016726:	3401      	adds	r4, #1
 8016728:	429d      	cmp	r5, r3
 801672a:	d002      	beq.n	8016732 <dns_call_found+0x5a>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801672c:	7a93      	ldrb	r3, [r2, #10]
 801672e:	2b02      	cmp	r3, #2
 8016730:	d015      	beq.n	801675e <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8016732:	2c04      	cmp	r4, #4
 8016734:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8016738:	d1f4      	bne.n	8016724 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801673a:	2903      	cmp	r1, #3
 801673c:	d80d      	bhi.n	801675a <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801673e:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8016740:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8016778 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8016744:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8016748:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 801674c:	f007 f87e 	bl	801d84c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8016750:	2200      	movs	r2, #0
 8016752:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8016754:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8016756:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 801675a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801675e:	7bd3      	ldrb	r3, [r2, #15]
 8016760:	428b      	cmp	r3, r1
 8016762:	d1e6      	bne.n	8016732 <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8016764:	4435      	add	r5, r6
 8016766:	2304      	movs	r3, #4
 8016768:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 801676c:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801676e:	e7f4      	b.n	801675a <dns_call_found+0x82>
 8016770:	2001a490 	.word	0x2001a490
 8016774:	2001a454 	.word	0x2001a454
 8016778:	2001a444 	.word	0x2001a444

0801677c <dns_send>:
{
 801677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8016780:	0103      	lsls	r3, r0, #4
{
 8016782:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8016784:	eb00 1400 	add.w	r4, r0, r0, lsl #4
{
 8016788:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801678a:	9301      	str	r3, [sp, #4]
 801678c:	4b60      	ldr	r3, [pc, #384]	; (8016910 <dns_send+0x194>)
 801678e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8016792:	7ae3      	ldrb	r3, [r4, #11]
 8016794:	2b01      	cmp	r3, #1
 8016796:	d907      	bls.n	80167a8 <dns_send+0x2c>
 8016798:	4b5e      	ldr	r3, [pc, #376]	; (8016914 <dns_send+0x198>)
 801679a:	f240 22fa 	movw	r2, #762	; 0x2fa
 801679e:	495e      	ldr	r1, [pc, #376]	; (8016918 <dns_send+0x19c>)
 80167a0:	485e      	ldr	r0, [pc, #376]	; (801691c <dns_send+0x1a0>)
 80167a2:	f00b fe8f 	bl	80224c4 <iprintf>
 80167a6:	7ae3      	ldrb	r3, [r4, #11]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80167a8:	4a5d      	ldr	r2, [pc, #372]	; (8016920 <dns_send+0x1a4>)
 80167aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80167ae:	2c00      	cmp	r4, #0
 80167b0:	f000 8099 	beq.w	80168e6 <dns_send+0x16a>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80167b4:	9b01      	ldr	r3, [sp, #4]
 80167b6:	4e56      	ldr	r6, [pc, #344]	; (8016910 <dns_send+0x194>)
 80167b8:	eb03 0409 	add.w	r4, r3, r9
 80167bc:	0124      	lsls	r4, r4, #4
 80167be:	f104 0510 	add.w	r5, r4, #16
 80167c2:	4435      	add	r5, r6
 80167c4:	4628      	mov	r0, r5
 80167c6:	f7e9 fd45 	bl	8000254 <strlen>
 80167ca:	4601      	mov	r1, r0
 80167cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167d0:	2036      	movs	r0, #54	; 0x36
 80167d2:	3112      	adds	r1, #18
 80167d4:	b289      	uxth	r1, r1
 80167d6:	f001 fdcb 	bl	8018370 <pbuf_alloc>
  if (p != NULL) {
 80167da:	4680      	mov	r8, r0
 80167dc:	2800      	cmp	r0, #0
 80167de:	f000 8093 	beq.w	8016908 <dns_send+0x18c>
    hdr.id = lwip_htons(entry->txid);
 80167e2:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80167e4:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 80167e6:	260c      	movs	r6, #12
    --hostname;
 80167e8:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 80167ea:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 80167ec:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80167f0:	9304      	str	r3, [sp, #16]
 80167f2:	9303      	str	r3, [sp, #12]
 80167f4:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
 80167f6:	f7ff fef9 	bl	80165ec <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 80167fa:	2201      	movs	r2, #1
    hdr.numquestions = PP_HTONS(1);
 80167fc:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.id = lwip_htons(entry->txid);
 8016800:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8016804:	eb0d 0106 	add.w	r1, sp, r6
    hdr.flags1 = DNS_FLAG1_RD;
 8016808:	f88d 200e 	strb.w	r2, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801680c:	4640      	mov	r0, r8
 801680e:	4632      	mov	r2, r6
    hdr.numquestions = PP_HTONS(1);
 8016810:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8016814:	f002 f822 	bl	801885c <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8016818:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 801681a:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801681c:	2b2e      	cmp	r3, #46	; 0x2e
 801681e:	d051      	beq.n	80168c4 <dns_send+0x148>
 8016820:	2b00      	cmp	r3, #0
 8016822:	d04f      	beq.n	80168c4 <dns_send+0x148>
      ++hostname;
 8016824:	463d      	mov	r5, r7
 8016826:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 801682a:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801682c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8016830:	2b2e      	cmp	r3, #46	; 0x2e
 8016832:	b2e4      	uxtb	r4, r4
 8016834:	d001      	beq.n	801683a <dns_send+0xbe>
 8016836:	2b00      	cmp	r3, #0
 8016838:	d1f7      	bne.n	801682a <dns_send+0xae>
 801683a:	4623      	mov	r3, r4
 801683c:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8016840:	4433      	add	r3, r6
 8016842:	fa1f fb8b 	uxth.w	fp, fp
 8016846:	4553      	cmp	r3, sl
 8016848:	dc44      	bgt.n	80168d4 <dns_send+0x158>
      pbuf_put_at(p, query_idx, n);
 801684a:	4622      	mov	r2, r4
 801684c:	4631      	mov	r1, r6
 801684e:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8016850:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8016852:	f002 f8cf 	bl	80189f4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8016856:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 8016858:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801685a:	465a      	mov	r2, fp
 801685c:	4639      	mov	r1, r7
 801685e:	b29b      	uxth	r3, r3
 8016860:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8016862:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8016864:	f002 f860 	bl	8018928 <pbuf_take_at>
    } while (*hostname != 0);
 8016868:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 801686a:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 801686c:	2a00      	cmp	r2, #0
 801686e:	d1d3      	bne.n	8016818 <dns_send+0x9c>
    pbuf_put_at(p, query_idx, 0);
 8016870:	4631      	mov	r1, r6
 8016872:	4640      	mov	r0, r8
 8016874:	f002 f8be 	bl	80189f4 <pbuf_put_at>
    query_idx++;
 8016878:	1ca3      	adds	r3, r4, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801687a:	f04f 2401 	mov.w	r4, #16777472	; 0x1000100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801687e:	2204      	movs	r2, #4
 8016880:	b29b      	uxth	r3, r3
 8016882:	a902      	add	r1, sp, #8
 8016884:	4640      	mov	r0, r8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8016886:	9402      	str	r4, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8016888:	f002 f84e 	bl	8018928 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 801688c:	9b01      	ldr	r3, [sp, #4]
 801688e:	4a20      	ldr	r2, [pc, #128]	; (8016910 <dns_send+0x194>)
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8016890:	4641      	mov	r1, r8
      dst = &dns_servers[entry->server_idx];
 8016892:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8016894:	4d22      	ldr	r5, [pc, #136]	; (8016920 <dns_send+0x1a4>)
 8016896:	4823      	ldr	r0, [pc, #140]	; (8016924 <dns_send+0x1a8>)
      dst = &dns_servers[entry->server_idx];
 8016898:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801689a:	2335      	movs	r3, #53	; 0x35
      dst = &dns_servers[entry->server_idx];
 801689c:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 80168a0:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80168a4:	f89b 400f 	ldrb.w	r4, [fp, #15]
 80168a8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80168ac:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80168b0:	f006 ff26 	bl	801d700 <udp_sendto>
 80168b4:	4605      	mov	r5, r0
    pbuf_free(p);
 80168b6:	4640      	mov	r0, r8
 80168b8:	f001 fcec 	bl	8018294 <pbuf_free>
}
 80168bc:	4628      	mov	r0, r5
 80168be:	b007      	add	sp, #28
 80168c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80168c4:	f04f 0b00 	mov.w	fp, #0
      ++hostname;
 80168c8:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80168ca:	465b      	mov	r3, fp
 80168cc:	465c      	mov	r4, fp
      if (query_idx + n + 1 > 0xFFFF) {
 80168ce:	4433      	add	r3, r6
 80168d0:	4553      	cmp	r3, sl
 80168d2:	ddba      	ble.n	801684a <dns_send+0xce>
  return ERR_VAL;
 80168d4:	f06f 0505 	mvn.w	r5, #5
  pbuf_free(p);
 80168d8:	4640      	mov	r0, r8
 80168da:	f001 fcdb 	bl	8018294 <pbuf_free>
}
 80168de:	4628      	mov	r0, r5
 80168e0:	b007      	add	sp, #28
 80168e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dns_call_found(idx, NULL);
 80168e6:	4648      	mov	r0, r9
 80168e8:	4621      	mov	r1, r4
 80168ea:	f7ff fef5 	bl	80166d8 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 80168ee:	9b01      	ldr	r3, [sp, #4]
    return ERR_OK;
 80168f0:	4625      	mov	r5, r4
    entry->state = DNS_STATE_UNUSED;
 80168f2:	444b      	add	r3, r9
}
 80168f4:	4628      	mov	r0, r5
    entry->state = DNS_STATE_UNUSED;
 80168f6:	4699      	mov	r9, r3
 80168f8:	4b05      	ldr	r3, [pc, #20]	; (8016910 <dns_send+0x194>)
 80168fa:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 80168fe:	f88b 400a 	strb.w	r4, [fp, #10]
}
 8016902:	b007      	add	sp, #28
 8016904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ERR_MEM;
 8016908:	f04f 35ff 	mov.w	r5, #4294967295
 801690c:	e7d6      	b.n	80168bc <dns_send+0x140>
 801690e:	bf00      	nop
 8016910:	2001a490 	.word	0x2001a490
 8016914:	0803f19c 	.word	0x0803f19c
 8016918:	0803f1cc 	.word	0x0803f1cc
 801691c:	08028d24 	.word	0x08028d24
 8016920:	2001a488 	.word	0x2001a488
 8016924:	2001a444 	.word	0x2001a444

08016928 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8016928:	2803      	cmp	r0, #3
{
 801692a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801692e:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8016930:	d835      	bhi.n	801699e <dns_check_entry+0x76>

  switch (entry->state) {
 8016932:	4e39      	ldr	r6, [pc, #228]	; (8016a18 <dns_check_entry+0xf0>)
 8016934:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8016938:	0125      	lsls	r5, r4, #4
 801693a:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 801693e:	7a9b      	ldrb	r3, [r3, #10]
 8016940:	2b03      	cmp	r3, #3
 8016942:	d860      	bhi.n	8016a06 <dns_check_entry+0xde>
 8016944:	e8df f003 	tbb	[pc, r3]
 8016948:	0237100e 	.word	0x0237100e
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801694c:	192b      	adds	r3, r5, r4
 801694e:	011b      	lsls	r3, r3, #4
 8016950:	58f2      	ldr	r2, [r6, r3]
 8016952:	b112      	cbz	r2, 801695a <dns_check_entry+0x32>
 8016954:	3a01      	subs	r2, #1
 8016956:	50f2      	str	r2, [r6, r3]
 8016958:	b922      	cbnz	r2, 8016964 <dns_check_entry+0x3c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801695a:	442c      	add	r4, r5
 801695c:	2300      	movs	r3, #0
 801695e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8016962:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8016964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016968:	4f2c      	ldr	r7, [pc, #176]	; (8016a1c <dns_check_entry+0xf4>)
  txid = (u16_t)DNS_RAND_TXID();
 801696a:	f00b fe4f 	bl	802260c <rand>
 801696e:	4b2a      	ldr	r3, [pc, #168]	; (8016a18 <dns_check_entry+0xf0>)
 8016970:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8016972:	7a9a      	ldrb	r2, [r3, #10]
 8016974:	2a02      	cmp	r2, #2
 8016976:	d01a      	beq.n	80169ae <dns_check_entry+0x86>
 8016978:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801697c:	429f      	cmp	r7, r3
 801697e:	d1f8      	bne.n	8016972 <dns_check_entry+0x4a>
      entry->txid = dns_create_txid();
 8016980:	4425      	add	r5, r4
      err = dns_send(i);
 8016982:	4620      	mov	r0, r4
      entry->tmr = 1;
 8016984:	2201      	movs	r2, #1
      entry->state = DNS_STATE_ASKING;
 8016986:	2402      	movs	r4, #2
 8016988:	eb06 1305 	add.w	r3, r6, r5, lsl #4
      entry->txid = dns_create_txid();
 801698c:	461d      	mov	r5, r3
 801698e:	3308      	adds	r3, #8
 8016990:	8129      	strh	r1, [r5, #8]
      entry->state = DNS_STATE_ASKING;
 8016992:	805c      	strh	r4, [r3, #2]
      entry->tmr = 1;
 8016994:	809a      	strh	r2, [r3, #4]
}
 8016996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 801699a:	f7ff beef 	b.w	801677c <dns_send>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801699e:	4b20      	ldr	r3, [pc, #128]	; (8016a20 <dns_check_entry+0xf8>)
 80169a0:	f240 421c 	movw	r2, #1052	; 0x41c
 80169a4:	491f      	ldr	r1, [pc, #124]	; (8016a24 <dns_check_entry+0xfc>)
 80169a6:	4820      	ldr	r0, [pc, #128]	; (8016a28 <dns_check_entry+0x100>)
 80169a8:	f00b fd8c 	bl	80224c4 <iprintf>
 80169ac:	e7c1      	b.n	8016932 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80169ae:	891a      	ldrh	r2, [r3, #8]
 80169b0:	428a      	cmp	r2, r1
 80169b2:	d1e1      	bne.n	8016978 <dns_check_entry+0x50>
 80169b4:	e7d9      	b.n	801696a <dns_check_entry+0x42>
      if (--entry->tmr == 0) {
 80169b6:	192a      	adds	r2, r5, r4
 80169b8:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 80169bc:	7b13      	ldrb	r3, [r2, #12]
 80169be:	3b01      	subs	r3, #1
 80169c0:	b2db      	uxtb	r3, r3
 80169c2:	7313      	strb	r3, [r2, #12]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d1cd      	bne.n	8016964 <dns_check_entry+0x3c>
        if (++entry->retries == DNS_MAX_RETRIES) {
 80169c8:	7b53      	ldrb	r3, [r2, #13]
 80169ca:	3301      	adds	r3, #1
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	2b04      	cmp	r3, #4
 80169d0:	7353      	strb	r3, [r2, #13]
 80169d2:	d005      	beq.n	80169e0 <dns_check_entry+0xb8>
          entry->tmr = entry->retries;
 80169d4:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 80169d6:	4620      	mov	r0, r4
}
 80169d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 80169dc:	f7ff bece 	b.w	801677c <dns_send>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80169e0:	7ad3      	ldrb	r3, [r2, #11]
 80169e2:	b933      	cbnz	r3, 80169f2 <dns_check_entry+0xca>
 80169e4:	4b11      	ldr	r3, [pc, #68]	; (8016a2c <dns_check_entry+0x104>)
 80169e6:	685b      	ldr	r3, [r3, #4]
 80169e8:	b11b      	cbz	r3, 80169f2 <dns_check_entry+0xca>
            entry->server_idx++;
 80169ea:	2301      	movs	r3, #1
 80169ec:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 80169ee:	8193      	strh	r3, [r2, #12]
 80169f0:	e7f1      	b.n	80169d6 <dns_check_entry+0xae>
            dns_call_found(i, NULL);
 80169f2:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 80169f4:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 80169f6:	2100      	movs	r1, #0
 80169f8:	f7ff fe6e 	bl	80166d8 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 80169fc:	2300      	movs	r3, #0
 80169fe:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8016a02:	72b3      	strb	r3, [r6, #10]
            break;
 8016a04:	e7ae      	b.n	8016964 <dns_check_entry+0x3c>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8016a06:	4b06      	ldr	r3, [pc, #24]	; (8016a20 <dns_check_entry+0xf8>)
 8016a08:	f240 425b 	movw	r2, #1115	; 0x45b
 8016a0c:	4908      	ldr	r1, [pc, #32]	; (8016a30 <dns_check_entry+0x108>)
 8016a0e:	4806      	ldr	r0, [pc, #24]	; (8016a28 <dns_check_entry+0x100>)
}
 8016a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8016a14:	f00b bd56 	b.w	80224c4 <iprintf>
 8016a18:	2001a490 	.word	0x2001a490
 8016a1c:	2001a8d0 	.word	0x2001a8d0
 8016a20:	0803f19c 	.word	0x0803f19c
 8016a24:	0803f1e4 	.word	0x0803f1e4
 8016a28:	08028d24 	.word	0x08028d24
 8016a2c:	2001a488 	.word	0x2001a488
 8016a30:	0803f200 	.word	0x0803f200

08016a34 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a38:	4699      	mov	r9, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8016a3a:	8913      	ldrh	r3, [r2, #8]
{
 8016a3c:	b08d      	sub	sp, #52	; 0x34
 8016a3e:	4614      	mov	r4, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8016a40:	2b0f      	cmp	r3, #15
 8016a42:	d805      	bhi.n	8016a50 <dns_recv+0x1c>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 8016a44:	4620      	mov	r0, r4
 8016a46:	f001 fc25 	bl	8018294 <pbuf_free>
  return;
}
 8016a4a:	b00d      	add	sp, #52	; 0x34
 8016a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8016a50:	2300      	movs	r3, #0
 8016a52:	220c      	movs	r2, #12
 8016a54:	a906      	add	r1, sp, #24
 8016a56:	4620      	mov	r0, r4
 8016a58:	f001 feb4 	bl	80187c4 <pbuf_copy_partial>
 8016a5c:	280c      	cmp	r0, #12
 8016a5e:	4605      	mov	r5, r0
 8016a60:	d1f0      	bne.n	8016a44 <dns_recv+0x10>
    txid = lwip_htons(hdr.id);
 8016a62:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8016d58 <dns_recv+0x324>
 8016a66:	2600      	movs	r6, #0
 8016a68:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8016a6c:	f7ff fdbe 	bl	80165ec <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8016a70:	4643      	mov	r3, r8
 8016a72:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 8016a74:	7a9a      	ldrb	r2, [r3, #10]
 8016a76:	2a02      	cmp	r2, #2
 8016a78:	d008      	beq.n	8016a8c <dns_recv+0x58>
 8016a7a:	3601      	adds	r6, #1
 8016a7c:	f503 7388 	add.w	r3, r3, #272	; 0x110
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8016a80:	2e04      	cmp	r6, #4
 8016a82:	d0df      	beq.n	8016a44 <dns_recv+0x10>
      if ((entry->state == DNS_STATE_ASKING) &&
 8016a84:	7a9a      	ldrb	r2, [r3, #10]
 8016a86:	b2f7      	uxtb	r7, r6
 8016a88:	2a02      	cmp	r2, #2
 8016a8a:	d1f6      	bne.n	8016a7a <dns_recv+0x46>
 8016a8c:	891a      	ldrh	r2, [r3, #8]
 8016a8e:	4282      	cmp	r2, r0
 8016a90:	d1f3      	bne.n	8016a7a <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 8016a92:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8016a96:	f7ff fda9 	bl	80165ec <lwip_htons>
 8016a9a:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8016a9c:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8016aa0:	f7ff fda4 	bl	80165ec <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8016aa4:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 8016aa8:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 8016aaa:	09db      	lsrs	r3, r3, #7
 8016aac:	d0ca      	beq.n	8016a44 <dns_recv+0x10>
 8016aae:	f1ba 0f01 	cmp.w	sl, #1
 8016ab2:	d1c7      	bne.n	8016a44 <dns_recv+0x10>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8016ab4:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8016ab8:	49a5      	ldr	r1, [pc, #660]	; (8016d50 <dns_recv+0x31c>)
 8016aba:	f8d9 2000 	ldr.w	r2, [r9]
 8016abe:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 8016ac2:	7adb      	ldrb	r3, [r3, #11]
 8016ac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d1bb      	bne.n	8016a44 <dns_recv+0x10>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8016acc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016ad0:	9602      	str	r6, [sp, #8]
 8016ad2:	9703      	str	r7, [sp, #12]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8016ad4:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8016ad8:	fb03 f306 	mul.w	r3, r3, r6
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8016adc:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8016d5c <dns_recv+0x328>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8016ae0:	462e      	mov	r6, r5
 8016ae2:	4627      	mov	r7, r4
 8016ae4:	f103 0210 	add.w	r2, r3, #16
 8016ae8:	9301      	str	r3, [sp, #4]
 8016aea:	4442      	add	r2, r8
 8016aec:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 8016aee:	4631      	mov	r1, r6
 8016af0:	4638      	mov	r0, r7
 8016af2:	f001 ff6f 	bl	80189d4 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8016af6:	2800      	cmp	r0, #0
 8016af8:	db2d      	blt.n	8016b56 <dns_recv+0x122>
 8016afa:	455e      	cmp	r6, fp
 8016afc:	d02b      	beq.n	8016b56 <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 8016afe:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 8016b02:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 8016b04:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 8016b06:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 8016b08:	d025      	beq.n	8016b56 <dns_recv+0x122>
      while (n > 0) {
 8016b0a:	b330      	cbz	r0, 8016b5a <dns_recv+0x126>
 8016b0c:	46aa      	mov	sl, r5
 8016b0e:	182c      	adds	r4, r5, r0
 8016b10:	e01b      	b.n	8016b4a <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8016b12:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 8016b16:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8016b18:	f819 2000 	ldrb.w	r2, [r9, r0]
 8016b1c:	4601      	mov	r1, r0
        ++query;
 8016b1e:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8016b20:	f002 0203 	and.w	r2, r2, #3
 8016b24:	2a01      	cmp	r2, #1
 8016b26:	f819 2003 	ldrb.w	r2, [r9, r3]
 8016b2a:	f002 0203 	and.w	r2, r2, #3
 8016b2e:	bf08      	it	eq
 8016b30:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 8016b34:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8016b36:	2a01      	cmp	r2, #1
 8016b38:	bf08      	it	eq
 8016b3a:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 8016b3c:	4299      	cmp	r1, r3
 8016b3e:	d10a      	bne.n	8016b56 <dns_recv+0x122>
 8016b40:	455e      	cmp	r6, fp
        response_offset++;
 8016b42:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 8016b44:	d007      	beq.n	8016b56 <dns_recv+0x122>
      while (n > 0) {
 8016b46:	4554      	cmp	r4, sl
 8016b48:	d007      	beq.n	8016b5a <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 8016b4a:	4631      	mov	r1, r6
 8016b4c:	4638      	mov	r0, r7
 8016b4e:	f001 ff41 	bl	80189d4 <pbuf_try_get_at>
        if (c < 0) {
 8016b52:	1e03      	subs	r3, r0, #0
 8016b54:	dadd      	bge.n	8016b12 <dns_recv+0xde>
 8016b56:	463c      	mov	r4, r7
 8016b58:	e774      	b.n	8016a44 <dns_recv+0x10>
    n = pbuf_try_get_at(p, response_offset);
 8016b5a:	4631      	mov	r1, r6
 8016b5c:	4638      	mov	r0, r7
 8016b5e:	f001 ff39 	bl	80189d4 <pbuf_try_get_at>
    if (n < 0) {
 8016b62:	2800      	cmp	r0, #0
      ++query;
 8016b64:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 8016b68:	dbf5      	blt.n	8016b56 <dns_recv+0x122>
  } while (n != 0);
 8016b6a:	d1c0      	bne.n	8016aee <dns_recv+0xba>
 8016b6c:	4635      	mov	r5, r6
  if (response_offset == 0xFFFF) {
 8016b6e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8016b72:	463c      	mov	r4, r7
 8016b74:	9e02      	ldr	r6, [sp, #8]
 8016b76:	454d      	cmp	r5, r9
 8016b78:	9f03      	ldr	r7, [sp, #12]
 8016b7a:	f43f af63 	beq.w	8016a44 <dns_recv+0x10>
  return (u16_t)(response_offset + 1);
 8016b7e:	f105 0a01 	add.w	sl, r5, #1
 8016b82:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 8016b86:	45ca      	cmp	sl, r9
 8016b88:	f43f af5c 	beq.w	8016a44 <dns_recv+0x10>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8016b8c:	4653      	mov	r3, sl
 8016b8e:	2204      	movs	r2, #4
 8016b90:	a904      	add	r1, sp, #16
 8016b92:	4620      	mov	r0, r4
 8016b94:	f001 fe16 	bl	80187c4 <pbuf_copy_partial>
 8016b98:	2804      	cmp	r0, #4
 8016b9a:	f47f af53 	bne.w	8016a44 <dns_recv+0x10>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8016b9e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ba6:	f47f af4d 	bne.w	8016a44 <dns_recv+0x10>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8016baa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8016bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016bb2:	f47f af47 	bne.w	8016a44 <dns_recv+0x10>
 8016bb6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8016bba:	459a      	cmp	sl, r3
 8016bbc:	f63f af42 	bhi.w	8016a44 <dns_recv+0x10>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8016bc0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8016bc4:	071b      	lsls	r3, r3, #28
 8016bc6:	f040 80ac 	bne.w	8016d22 <dns_recv+0x2ee>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8016bca:	3505      	adds	r5, #5
 8016bcc:	f8dd a000 	ldr.w	sl, [sp]
 8016bd0:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8016bd2:	f1ba 0f00 	cmp.w	sl, #0
 8016bd6:	f000 8096 	beq.w	8016d06 <dns_recv+0x2d2>
 8016bda:	8923      	ldrh	r3, [r4, #8]
 8016bdc:	42ab      	cmp	r3, r5
 8016bde:	d80a      	bhi.n	8016bf6 <dns_recv+0x1c2>
 8016be0:	e091      	b.n	8016d06 <dns_recv+0x2d2>
      if (offset + n >= p->tot_len) {
 8016be2:	8922      	ldrh	r2, [r4, #8]
 8016be4:	4293      	cmp	r3, r2
 8016be6:	f6bf af2d 	bge.w	8016a44 <dns_recv+0x10>
    n = pbuf_try_get_at(p, offset);
 8016bea:	f001 fef3 	bl	80189d4 <pbuf_try_get_at>
    if (n < 0) {
 8016bee:	2800      	cmp	r0, #0
 8016bf0:	f6ff af28 	blt.w	8016a44 <dns_recv+0x10>
  } while (n != 0);
 8016bf4:	d018      	beq.n	8016c28 <dns_recv+0x1f4>
    n = pbuf_try_get_at(p, offset++);
 8016bf6:	4629      	mov	r1, r5
 8016bf8:	4620      	mov	r0, r4
 8016bfa:	f001 feeb 	bl	80189d4 <pbuf_try_get_at>
 8016bfe:	f105 0b01 	add.w	fp, r5, #1
 8016c02:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 8016c04:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 8016c06:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 8016c0a:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 8016c0c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8016c10:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 8016c12:	f6ff af17 	blt.w	8016a44 <dns_recv+0x10>
      offset = (u16_t)(offset + n);
 8016c16:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 8016c18:	f1bb 0f00 	cmp.w	fp, #0
 8016c1c:	f43f af12 	beq.w	8016a44 <dns_recv+0x10>
    if ((n & 0xc0) == 0xc0) {
 8016c20:	2ac0      	cmp	r2, #192	; 0xc0
    n = pbuf_try_get_at(p, offset);
 8016c22:	4629      	mov	r1, r5
    if ((n & 0xc0) == 0xc0) {
 8016c24:	d1dd      	bne.n	8016be2 <dns_recv+0x1ae>
    n = pbuf_try_get_at(p, offset++);
 8016c26:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 8016c28:	454d      	cmp	r5, r9
 8016c2a:	f43f af0b 	beq.w	8016a44 <dns_recv+0x10>
  return (u16_t)(offset + 1);
 8016c2e:	f105 0b01 	add.w	fp, r5, #1
 8016c32:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 8016c36:	45cb      	cmp	fp, r9
 8016c38:	f43f af04 	beq.w	8016a44 <dns_recv+0x10>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8016c3c:	465b      	mov	r3, fp
 8016c3e:	220a      	movs	r2, #10
 8016c40:	a909      	add	r1, sp, #36	; 0x24
 8016c42:	4620      	mov	r0, r4
 8016c44:	f001 fdbe 	bl	80187c4 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8016c48:	280a      	cmp	r0, #10
 8016c4a:	f47f aefb 	bne.w	8016a44 <dns_recv+0x10>
 8016c4e:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8016c52:	459b      	cmp	fp, r3
 8016c54:	f63f aef6 	bhi.w	8016a44 <dns_recv+0x10>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8016c58:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8016c5c:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8016c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8016c62:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8016c64:	d013      	beq.n	8016c8e <dns_recv+0x25a>
 8016c66:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8016c6a:	f7ff fcbf 	bl	80165ec <lwip_htons>
 8016c6e:	4428      	add	r0, r5
 8016c70:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016c74:	f6bf aee6 	bge.w	8016a44 <dns_recv+0x10>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8016c78:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 8016c7c:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8016c80:	f7ff fcb4 	bl	80165ec <lwip_htons>
 8016c84:	4405      	add	r5, r0
            --nanswers;
 8016c86:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8016c8a:	b2ad      	uxth	r5, r5
            --nanswers;
 8016c8c:	e7a1      	b.n	8016bd2 <dns_recv+0x19e>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8016c8e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8016c92:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8016c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016c9a:	d1e6      	bne.n	8016c6a <dns_recv+0x236>
 8016c9c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016ca0:	d1e3      	bne.n	8016c6a <dns_recv+0x236>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8016ca2:	462b      	mov	r3, r5
 8016ca4:	2204      	movs	r2, #4
 8016ca6:	a905      	add	r1, sp, #20
 8016ca8:	4620      	mov	r0, r4
 8016caa:	f001 fd8b 	bl	80187c4 <pbuf_copy_partial>
 8016cae:	2804      	cmp	r0, #4
 8016cb0:	f47f aec8 	bne.w	8016a44 <dns_recv+0x10>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8016cb4:	f44f 7288 	mov.w	r2, #272	; 0x110
 8016cb8:	9b05      	ldr	r3, [sp, #20]
                  pbuf_free(p);
 8016cba:	4620      	mov	r0, r4
  if (entry->ttl > DNS_MAX_TTL) {
 8016cbc:	4d25      	ldr	r5, [pc, #148]	; (8016d54 <dns_recv+0x320>)
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8016cbe:	fb02 f606 	mul.w	r6, r2, r6
 8016cc2:	eb08 0406 	add.w	r4, r8, r6
 8016cc6:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 8016cc8:	f001 fae4 	bl	8018294 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8016ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cce:	f7ff fc91 	bl	80165f4 <lwip_htonl>
 8016cd2:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 8016cd4:	9901      	ldr	r1, [sp, #4]
  entry->state = DNS_STATE_DONE;
 8016cd6:	2203      	movs	r2, #3
  entry->ttl = ttl;
 8016cd8:	42ab      	cmp	r3, r5
  dns_call_found(idx, &entry->ipaddr);
 8016cda:	4638      	mov	r0, r7
 8016cdc:	f101 0104 	add.w	r1, r1, #4
  entry->state = DNS_STATE_DONE;
 8016ce0:	72a2      	strb	r2, [r4, #10]
  entry->ttl = ttl;
 8016ce2:	bf28      	it	cs
 8016ce4:	462b      	movcs	r3, r5
  dns_call_found(idx, &entry->ipaddr);
 8016ce6:	4441      	add	r1, r8
  entry->ttl = ttl;
 8016ce8:	f848 3006 	str.w	r3, [r8, r6]
  dns_call_found(idx, &entry->ipaddr);
 8016cec:	f7ff fcf4 	bl	80166d8 <dns_call_found>
  if (entry->ttl == 0) {
 8016cf0:	f858 3006 	ldr.w	r3, [r8, r6]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	f47f aea8 	bne.w	8016a4a <dns_recv+0x16>
    if (entry->state == DNS_STATE_DONE) {
 8016cfa:	7aa2      	ldrb	r2, [r4, #10]
 8016cfc:	2a03      	cmp	r2, #3
 8016cfe:	f47f aea4 	bne.w	8016a4a <dns_recv+0x16>
      entry->state = DNS_STATE_UNUSED;
 8016d02:	72a3      	strb	r3, [r4, #10]
                  return;
 8016d04:	e6a1      	b.n	8016a4a <dns_recv+0x16>
        pbuf_free(p);
 8016d06:	4620      	mov	r0, r4
 8016d08:	f001 fac4 	bl	8018294 <pbuf_free>
        dns_call_found(i, NULL);
 8016d0c:	4638      	mov	r0, r7
 8016d0e:	2100      	movs	r1, #0
 8016d10:	f7ff fce2 	bl	80166d8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8016d14:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016d18:	2200      	movs	r2, #0
 8016d1a:	fb03 8606 	mla	r6, r3, r6, r8
 8016d1e:	72b2      	strb	r2, [r6, #10]
        return;
 8016d20:	e693      	b.n	8016a4a <dns_recv+0x16>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8016d22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016d26:	fb03 8306 	mla	r3, r3, r6, r8
 8016d2a:	7adb      	ldrb	r3, [r3, #11]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d1ea      	bne.n	8016d06 <dns_recv+0x2d2>
 8016d30:	4b07      	ldr	r3, [pc, #28]	; (8016d50 <dns_recv+0x31c>)
 8016d32:	685b      	ldr	r3, [r3, #4]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d0e6      	beq.n	8016d06 <dns_recv+0x2d2>
            entry->tmr     = 1;
 8016d38:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016d3c:	f240 3201 	movw	r2, #769	; 0x301
            dns_check_entry(i);
 8016d40:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8016d42:	fb03 8606 	mla	r6, r3, r6, r8
 8016d46:	81b2      	strh	r2, [r6, #12]
            dns_check_entry(i);
 8016d48:	f7ff fdee 	bl	8016928 <dns_check_entry>
            goto ignore_packet;
 8016d4c:	e67a      	b.n	8016a44 <dns_recv+0x10>
 8016d4e:	bf00      	nop
 8016d50:	2001a488 	.word	0x2001a488
 8016d54:	00093a80 	.word	0x00093a80
 8016d58:	2001a490 	.word	0x2001a490
 8016d5c:	08041c69 	.word	0x08041c69

08016d60 <dns_init>:
}
 8016d60:	4770      	bx	lr
 8016d62:	bf00      	nop

08016d64 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8016d64:	2801      	cmp	r0, #1
 8016d66:	d900      	bls.n	8016d6a <dns_setserver+0x6>
}
 8016d68:	4770      	bx	lr
    if (dnsserver != NULL) {
 8016d6a:	b121      	cbz	r1, 8016d76 <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8016d6c:	680a      	ldr	r2, [r1, #0]
 8016d6e:	4b05      	ldr	r3, [pc, #20]	; (8016d84 <dns_setserver+0x20>)
 8016d70:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8016d74:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 8016d76:	4a04      	ldr	r2, [pc, #16]	; (8016d88 <dns_setserver+0x24>)
 8016d78:	4b02      	ldr	r3, [pc, #8]	; (8016d84 <dns_setserver+0x20>)
 8016d7a:	6812      	ldr	r2, [r2, #0]
 8016d7c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8016d80:	4770      	bx	lr
 8016d82:	bf00      	nop
 8016d84:	2001a488 	.word	0x2001a488
 8016d88:	08041a0c 	.word	0x08041a0c

08016d8c <dns_tmr>:
{
 8016d8c:	b508      	push	{r3, lr}
    dns_check_entry(i);
 8016d8e:	2000      	movs	r0, #0
 8016d90:	f7ff fdca 	bl	8016928 <dns_check_entry>
 8016d94:	2001      	movs	r0, #1
 8016d96:	f7ff fdc7 	bl	8016928 <dns_check_entry>
 8016d9a:	2002      	movs	r0, #2
 8016d9c:	f7ff fdc4 	bl	8016928 <dns_check_entry>
 8016da0:	2003      	movs	r0, #3
}
 8016da2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 8016da6:	f7ff bdbf 	b.w	8016928 <dns_check_entry>
 8016daa:	bf00      	nop

08016dac <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 8016dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db0:	b083      	sub	sp, #12
 8016db2:	9201      	str	r2, [sp, #4]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8016db4:	2900      	cmp	r1, #0
 8016db6:	f000 810b 	beq.w	8016fd0 <dns_gethostbyname_addrtype+0x224>
 8016dba:	fab0 f480 	clz	r4, r0
 8016dbe:	4607      	mov	r7, r0
 8016dc0:	0964      	lsrs	r4, r4, #5
 8016dc2:	2800      	cmp	r0, #0
 8016dc4:	f000 8104 	beq.w	8016fd0 <dns_gethostbyname_addrtype+0x224>
      (!hostname) || (!hostname[0])) {
 8016dc8:	7802      	ldrb	r2, [r0, #0]
 8016dca:	2a00      	cmp	r2, #0
 8016dcc:	f000 8100 	beq.w	8016fd0 <dns_gethostbyname_addrtype+0x224>
 8016dd0:	4688      	mov	r8, r1
 8016dd2:	4699      	mov	r9, r3
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8016dd4:	f7e9 fa3e 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8016dd8:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 8016dda:	4605      	mov	r5, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8016ddc:	f200 80f8 	bhi.w	8016fd0 <dns_gethostbyname_addrtype+0x224>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8016de0:	4641      	mov	r1, r8
 8016de2:	4638      	mov	r0, r7
 8016de4:	f009 f964 	bl	80200b0 <ip4addr_aton>
 8016de8:	b118      	cbz	r0, 8016df2 <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8016dea:	4620      	mov	r0, r4
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8016dec:	b003      	add	sp, #12
 8016dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016df2:	4c89      	ldr	r4, [pc, #548]	; (8017018 <dns_gethostbyname_addrtype+0x26c>)
  if (ipaddr_aton(hostname, addr)) {
 8016df4:	4606      	mov	r6, r0
 8016df6:	46a2      	mov	sl, r4
 8016df8:	46a3      	mov	fp, r4
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8016dfa:	f89b 300a 	ldrb.w	r3, [fp, #10]
 8016dfe:	2b03      	cmp	r3, #3
 8016e00:	d037      	beq.n	8016e72 <dns_gethostbyname_addrtype+0xc6>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8016e02:	3601      	adds	r6, #1
 8016e04:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
 8016e08:	2e04      	cmp	r6, #4
 8016e0a:	d1f6      	bne.n	8016dfa <dns_gethostbyname_addrtype+0x4e>
    if (ip_addr_isany_val(dns_servers[0])) {
 8016e0c:	4a83      	ldr	r2, [pc, #524]	; (801701c <dns_gethostbyname_addrtype+0x270>)
 8016e0e:	6812      	ldr	r2, [r2, #0]
 8016e10:	2a00      	cmp	r2, #0
 8016e12:	f000 80f9 	beq.w	8017008 <dns_gethostbyname_addrtype+0x25c>
 8016e16:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8017018 <dns_gethostbyname_addrtype+0x26c>
 8016e1a:	2600      	movs	r6, #0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8016e1c:	f898 300a 	ldrb.w	r3, [r8, #10]
 8016e20:	fa5f fb86 	uxtb.w	fp, r6
 8016e24:	2b02      	cmp	r3, #2
 8016e26:	d03e      	beq.n	8016ea6 <dns_gethostbyname_addrtype+0xfa>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8016e28:	3601      	adds	r6, #1
 8016e2a:	f508 7888 	add.w	r8, r8, #272	; 0x110
 8016e2e:	2e04      	cmp	r6, #4
 8016e30:	d1f4      	bne.n	8016e1c <dns_gethostbyname_addrtype+0x70>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8016e32:	2200      	movs	r2, #0
 8016e34:	4b7a      	ldr	r3, [pc, #488]	; (8017020 <dns_gethostbyname_addrtype+0x274>)
  lseq = 0;
 8016e36:	4694      	mov	ip, r2
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8016e38:	7818      	ldrb	r0, [r3, #0]
    if (entry->state == DNS_STATE_UNUSED) {
 8016e3a:	7aa3      	ldrb	r3, [r4, #10]
 8016e3c:	fa5f f882 	uxtb.w	r8, r2
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d043      	beq.n	8016ecc <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 8016e44:	2b03      	cmp	r3, #3
 8016e46:	f102 0201 	add.w	r2, r2, #1
 8016e4a:	d024      	beq.n	8016e96 <dns_gethostbyname_addrtype+0xea>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8016e4c:	2a04      	cmp	r2, #4
 8016e4e:	f504 7488 	add.w	r4, r4, #272	; 0x110
 8016e52:	d1f2      	bne.n	8016e3a <dns_gethostbyname_addrtype+0x8e>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8016e54:	2e04      	cmp	r6, #4
 8016e56:	d007      	beq.n	8016e68 <dns_gethostbyname_addrtype+0xbc>
 8016e58:	eb06 1406 	add.w	r4, r6, r6, lsl #4
 8016e5c:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
 8016e60:	7aa2      	ldrb	r2, [r4, #10]
 8016e62:	2a03      	cmp	r2, #3
 8016e64:	f000 80b2 	beq.w	8016fcc <dns_gethostbyname_addrtype+0x220>
      return ERR_MEM;
 8016e68:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016e6c:	b003      	add	sp, #12
 8016e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8016e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016e76:	f10b 0110 	add.w	r1, fp, #16
 8016e7a:	4638      	mov	r0, r7
 8016e7c:	f7ff fc0e 	bl	801669c <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8016e80:	2800      	cmp	r0, #0
 8016e82:	d1be      	bne.n	8016e02 <dns_gethostbyname_addrtype+0x56>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8016e84:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8016e88:	eb0a 1a06 	add.w	sl, sl, r6, lsl #4
 8016e8c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016e90:	f8c8 3000 	str.w	r3, [r8]
 8016e94:	e7aa      	b.n	8016dec <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8016e96:	7ba3      	ldrb	r3, [r4, #14]
 8016e98:	1ac3      	subs	r3, r0, r3
 8016e9a:	b2db      	uxtb	r3, r3
      if (age > lseq) {
 8016e9c:	4563      	cmp	r3, ip
 8016e9e:	d9d5      	bls.n	8016e4c <dns_gethostbyname_addrtype+0xa0>
 8016ea0:	4646      	mov	r6, r8
 8016ea2:	469c      	mov	ip, r3
 8016ea4:	e7d2      	b.n	8016e4c <dns_gethostbyname_addrtype+0xa0>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8016ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016eaa:	f108 0110 	add.w	r1, r8, #16
 8016eae:	4638      	mov	r0, r7
 8016eb0:	f7ff fbf4 	bl	801669c <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8016eb4:	2800      	cmp	r0, #0
 8016eb6:	d1b7      	bne.n	8016e28 <dns_gethostbyname_addrtype+0x7c>
 8016eb8:	4b5a      	ldr	r3, [pc, #360]	; (8017024 <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 8016eba:	681a      	ldr	r2, [r3, #0]
 8016ebc:	330c      	adds	r3, #12
 8016ebe:	2a00      	cmp	r2, #0
 8016ec0:	f000 8093 	beq.w	8016fea <dns_gethostbyname_addrtype+0x23e>
 8016ec4:	3001      	adds	r0, #1
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8016ec6:	2804      	cmp	r0, #4
 8016ec8:	d1f7      	bne.n	8016eba <dns_gethostbyname_addrtype+0x10e>
 8016eca:	e7ad      	b.n	8016e28 <dns_gethostbyname_addrtype+0x7c>
    entry = &dns_table[i];
 8016ecc:	eb02 1402 	add.w	r4, r2, r2, lsl #4
 8016ed0:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8016ed4:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8017024 <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 8016ed8:	2600      	movs	r6, #0
 8016eda:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 8016edc:	6813      	ldr	r3, [r2, #0]
 8016ede:	320c      	adds	r2, #12
 8016ee0:	b12b      	cbz	r3, 8016eee <dns_gethostbyname_addrtype+0x142>
 8016ee2:	3601      	adds	r6, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8016ee4:	2e04      	cmp	r6, #4
 8016ee6:	d1f9      	bne.n	8016edc <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 8016ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8016eec:	e7be      	b.n	8016e6c <dns_gethostbyname_addrtype+0xc0>
  req->dns_table_idx = i;
 8016eee:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8016ef2:	469b      	mov	fp, r3
  entry->seqno = dns_seqno;
 8016ef4:	73a0      	strb	r0, [r4, #14]
  entry->state = DNS_STATE_NEW;
 8016ef6:	2001      	movs	r0, #1
  req->found = found;
 8016ef8:	4613      	mov	r3, r2
 8016efa:	9a01      	ldr	r2, [sp, #4]
  MEMCPY(entry->name, name, namelen);
 8016efc:	4639      	mov	r1, r7
  entry->state = DNS_STATE_NEW;
 8016efe:	72a0      	strb	r0, [r4, #10]
  req->found = found;
 8016f00:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
  req->dns_table_idx = i;
 8016f04:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  MEMCPY(entry->name, name, namelen);
 8016f08:	462a      	mov	r2, r5
 8016f0a:	f104 0010 	add.w	r0, r4, #16
  req->dns_table_idx = i;
 8016f0e:	f883 8008 	strb.w	r8, [r3, #8]
  entry->name[namelen] = 0;
 8016f12:	4425      	add	r5, r4
  req->arg   = callback_arg;
 8016f14:	f8c3 9004 	str.w	r9, [r3, #4]
  entry->name[namelen] = 0;
 8016f18:	465f      	mov	r7, fp
  MEMCPY(entry->name, name, namelen);
 8016f1a:	f00a fb39 	bl	8021590 <memcpy>
  entry->name[namelen] = 0;
 8016f1e:	f885 b010 	strb.w	fp, [r5, #16]
  req->dns_table_idx = i;
 8016f22:	0073      	lsls	r3, r6, #1
 8016f24:	9301      	str	r3, [sp, #4]
 8016f26:	4b40      	ldr	r3, [pc, #256]	; (8017028 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 8016f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f2c:	b2fd      	uxtb	r5, r7
 8016f2e:	b312      	cbz	r2, 8016f76 <dns_gethostbyname_addrtype+0x1ca>
 8016f30:	3701      	adds	r7, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8016f32:	2f04      	cmp	r7, #4
 8016f34:	d1f8      	bne.n	8016f28 <dns_gethostbyname_addrtype+0x17c>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8016f36:	483d      	ldr	r0, [pc, #244]	; (801702c <dns_gethostbyname_addrtype+0x280>)
 8016f38:	2304      	movs	r3, #4
 8016f3a:	7805      	ldrb	r5, [r0, #0]
 8016f3c:	3501      	adds	r5, #1
 8016f3e:	b2ed      	uxtb	r5, r5
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8016f40:	2d03      	cmp	r5, #3
 8016f42:	462a      	mov	r2, r5
 8016f44:	d901      	bls.n	8016f4a <dns_gethostbyname_addrtype+0x19e>
 8016f46:	2500      	movs	r5, #0
      idx = 0;
 8016f48:	462a      	mov	r2, r5
    if (dns_pcbs[idx] != NULL) {
 8016f4a:	4f37      	ldr	r7, [pc, #220]	; (8017028 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8016f4c:	1c69      	adds	r1, r5, #1
 8016f4e:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8016f50:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8016f54:	2a00      	cmp	r2, #0
 8016f56:	d13e      	bne.n	8016fd6 <dns_gethostbyname_addrtype+0x22a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8016f58:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016f5c:	b2cd      	uxtb	r5, r1
 8016f5e:	d1ef      	bne.n	8016f40 <dns_gethostbyname_addrtype+0x194>
    req->found = NULL;
 8016f60:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 8016f62:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 8016f66:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 8016f68:	4432      	add	r2, r6
 8016f6a:	4616      	mov	r6, r2
  entry->pcb_idx = dns_alloc_pcb();
 8016f6c:	2204      	movs	r2, #4
    req->found = NULL;
 8016f6e:	f84a 3026 	str.w	r3, [sl, r6, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8016f72:	73e2      	strb	r2, [r4, #15]
    return ERR_MEM;
 8016f74:	e73a      	b.n	8016dec <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8016f76:	202e      	movs	r0, #46	; 0x2e
 8016f78:	f006 fca2 	bl	801d8c0 <udp_new_ip_type>
  if (pcb == NULL) {
 8016f7c:	4681      	mov	r9, r0
 8016f7e:	2800      	cmp	r0, #0
 8016f80:	d045      	beq.n	801700e <dns_gethostbyname_addrtype+0x262>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8016f82:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8017034 <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 8016f86:	f00b fb41 	bl	802260c <rand>
 8016f8a:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 8016f8c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8016f90:	d3f9      	bcc.n	8016f86 <dns_gethostbyname_addrtype+0x1da>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8016f92:	4659      	mov	r1, fp
 8016f94:	4648      	mov	r0, r9
 8016f96:	f006 fa1f 	bl	801d3d8 <udp_bind>
  } while (err == ERR_USE);
 8016f9a:	f110 0f08 	cmn.w	r0, #8
 8016f9e:	d0f2      	beq.n	8016f86 <dns_gethostbyname_addrtype+0x1da>
  if (err != ERR_OK) {
 8016fa0:	b9d8      	cbnz	r0, 8016fda <dns_gethostbyname_addrtype+0x22e>
  udp_recv(pcb, dns_recv, NULL);
 8016fa2:	4602      	mov	r2, r0
 8016fa4:	4922      	ldr	r1, [pc, #136]	; (8017030 <dns_gethostbyname_addrtype+0x284>)
 8016fa6:	4648      	mov	r0, r9
 8016fa8:	f006 fc3e 	bl	801d828 <udp_recv>
      dns_last_pcb_idx = i;
 8016fac:	4b1f      	ldr	r3, [pc, #124]	; (801702c <dns_gethostbyname_addrtype+0x280>)
    dns_pcbs[i] = dns_alloc_random_port();
 8016fae:	4a1e      	ldr	r2, [pc, #120]	; (8017028 <dns_gethostbyname_addrtype+0x27c>)
      dns_last_pcb_idx = i;
 8016fb0:	701d      	strb	r5, [r3, #0]
    dns_pcbs[i] = dns_alloc_random_port();
 8016fb2:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
  dns_seqno++;
 8016fb6:	4a1a      	ldr	r2, [pc, #104]	; (8017020 <dns_gethostbyname_addrtype+0x274>)
  dns_check_entry(i);
 8016fb8:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 8016fba:	73e5      	strb	r5, [r4, #15]
  dns_seqno++;
 8016fbc:	7813      	ldrb	r3, [r2, #0]
 8016fbe:	3301      	adds	r3, #1
 8016fc0:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8016fc2:	f7ff fcb1 	bl	8016928 <dns_check_entry>
  return ERR_INPROGRESS;
 8016fc6:	f06f 0004 	mvn.w	r0, #4
 8016fca:	e70f      	b.n	8016dec <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 8016fcc:	46b0      	mov	r8, r6
 8016fce:	e781      	b.n	8016ed4 <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 8016fd0:	f06f 000f 	mvn.w	r0, #15
 8016fd4:	e70a      	b.n	8016dec <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 8016fd6:	7005      	strb	r5, [r0, #0]
      return idx;
 8016fd8:	e7ed      	b.n	8016fb6 <dns_gethostbyname_addrtype+0x20a>
    udp_remove(pcb);
 8016fda:	4648      	mov	r0, r9
 8016fdc:	f006 fc36 	bl	801d84c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	4a11      	ldr	r2, [pc, #68]	; (8017028 <dns_gethostbyname_addrtype+0x27c>)
 8016fe4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8016fe8:	e7a5      	b.n	8016f36 <dns_gethostbyname_addrtype+0x18a>
          dns_requests[r].found = found;
 8016fea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8016fee:	4a0d      	ldr	r2, [pc, #52]	; (8017024 <dns_gethostbyname_addrtype+0x278>)
 8016ff0:	9901      	ldr	r1, [sp, #4]
          return ERR_INPROGRESS;
 8016ff2:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].found = found;
 8016ff6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8016ffa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
          dns_requests[r].arg = callback_arg;
 8016ffe:	f8c3 9004 	str.w	r9, [r3, #4]
          dns_requests[r].dns_table_idx = i;
 8017002:	f883 b008 	strb.w	fp, [r3, #8]
          return ERR_INPROGRESS;
 8017006:	e6f1      	b.n	8016dec <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 8017008:	f06f 0005 	mvn.w	r0, #5
 801700c:	e6ee      	b.n	8016dec <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 801700e:	4b06      	ldr	r3, [pc, #24]	; (8017028 <dns_gethostbyname_addrtype+0x27c>)
 8017010:	f843 9027 	str.w	r9, [r3, r7, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8017014:	e78f      	b.n	8016f36 <dns_gethostbyname_addrtype+0x18a>
 8017016:	bf00      	nop
 8017018:	2001a490 	.word	0x2001a490
 801701c:	2001a488 	.word	0x2001a488
 8017020:	2001a484 	.word	0x2001a484
 8017024:	2001a454 	.word	0x2001a454
 8017028:	2001a444 	.word	0x2001a444
 801702c:	2001a440 	.word	0x2001a440
 8017030:	08016a35 	.word	0x08016a35
 8017034:	08041a0c 	.word	0x08041a0c

08017038 <dns_gethostbyname>:
{
 8017038:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801703a:	2400      	movs	r4, #0
{
 801703c:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801703e:	9400      	str	r4, [sp, #0]
 8017040:	f7ff feb4 	bl	8016dac <dns_gethostbyname_addrtype>
}
 8017044:	b002      	add	sp, #8
 8017046:	bd10      	pop	{r4, pc}

08017048 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8017048:	2300      	movs	r3, #0
{
 801704a:	b470      	push	{r4, r5, r6}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801704c:	4299      	cmp	r1, r3
{
 801704e:	b083      	sub	sp, #12
  int odd = ((mem_ptr_t)pb & 1);
 8017050:	f000 0601 	and.w	r6, r0, #1
  u16_t t = 0;
 8017054:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8017058:	dd05      	ble.n	8017066 <lwip_standard_chksum+0x1e>
 801705a:	b126      	cbz	r6, 8017066 <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 801705c:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8017060:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8017062:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8017066:	2901      	cmp	r1, #1
 8017068:	dd26      	ble.n	80170b8 <lwip_standard_chksum+0x70>
 801706a:	3902      	subs	r1, #2
  u32_t sum = 0;
 801706c:	2300      	movs	r3, #0
 801706e:	084d      	lsrs	r5, r1, #1
 8017070:	1c6c      	adds	r4, r5, #1
 8017072:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    sum += *ps++;
 8017076:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 801707a:	4284      	cmp	r4, r0
    sum += *ps++;
 801707c:	4413      	add	r3, r2
  while (len > 1) {
 801707e:	d1fa      	bne.n	8017076 <lwip_standard_chksum+0x2e>
 8017080:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8017084:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8017088:	2901      	cmp	r1, #1
 801708a:	d102      	bne.n	8017092 <lwip_standard_chksum+0x4a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 801708c:	7822      	ldrb	r2, [r4, #0]
 801708e:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8017092:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017096:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8017098:	b298      	uxth	r0, r3
 801709a:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 801709e:	b298      	uxth	r0, r3
 80170a0:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80170a4:	b126      	cbz	r6, 80170b0 <lwip_standard_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
 80170a6:	0203      	lsls	r3, r0, #8
 80170a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80170ac:	b29b      	uxth	r3, r3
 80170ae:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80170b0:	b280      	uxth	r0, r0
 80170b2:	b003      	add	sp, #12
 80170b4:	bc70      	pop	{r4, r5, r6}
 80170b6:	4770      	bx	lr
  ps = (const u16_t *)(const void *)pb;
 80170b8:	4604      	mov	r4, r0
  u32_t sum = 0;
 80170ba:	2300      	movs	r3, #0
 80170bc:	e7e4      	b.n	8017088 <lwip_standard_chksum+0x40>
 80170be:	bf00      	nop

080170c0 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 80170c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170c4:	9c06      	ldr	r4, [sp, #24]
 80170c6:	4688      	mov	r8, r1
 80170c8:	4617      	mov	r7, r2
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
  addr = ip4_addr_get_u32(dest);
 80170ca:	6826      	ldr	r6, [r4, #0]
  addr = ip4_addr_get_u32(src);
 80170cc:	681c      	ldr	r4, [r3, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80170ce:	0c33      	lsrs	r3, r6, #16
 80170d0:	fa13 f686 	uxtah	r6, r3, r6
 80170d4:	fa16 f684 	uxtah	r6, r6, r4
 80170d8:	eb06 4614 	add.w	r6, r6, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80170dc:	b2b4      	uxth	r4, r6
 80170de:	eb04 4616 	add.w	r6, r4, r6, lsr #16
  acc = FOLD_U32T(acc);
 80170e2:	b2b4      	uxth	r4, r6
 80170e4:	eb04 4416 	add.w	r4, r4, r6, lsr #16
  for (q = p; q != NULL; q = q->next) {
 80170e8:	b1f0      	cbz	r0, 8017128 <inet_chksum_pseudo+0x68>
 80170ea:	4605      	mov	r5, r0
  int swapped = 0;
 80170ec:	2600      	movs	r6, #0
    acc += LWIP_CHKSUM(q->payload, q->len);
 80170ee:	8969      	ldrh	r1, [r5, #10]
 80170f0:	6868      	ldr	r0, [r5, #4]
 80170f2:	f7ff ffa9 	bl	8017048 <lwip_standard_chksum>
 80170f6:	4420      	add	r0, r4
    if (q->len % 2 != 0) {
 80170f8:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 80170fa:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 80170fc:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8017100:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8017104:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8017108:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 801710c:	d003      	beq.n	8017116 <inet_chksum_pseudo+0x56>
      acc = SWAP_BYTES_IN_WORD(acc);
 801710e:	b284      	uxth	r4, r0
 8017110:	f086 0601 	eor.w	r6, r6, #1
 8017114:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8017116:	682d      	ldr	r5, [r5, #0]
 8017118:	2d00      	cmp	r5, #0
 801711a:	d1e8      	bne.n	80170ee <inet_chksum_pseudo+0x2e>
  if (swapped) {
 801711c:	b126      	cbz	r6, 8017128 <inet_chksum_pseudo+0x68>
    acc = SWAP_BYTES_IN_WORD(acc);
 801711e:	0223      	lsls	r3, r4, #8
 8017120:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8017124:	b29b      	uxth	r3, r3
 8017126:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 8017128:	4640      	mov	r0, r8
 801712a:	f7ff fa5f 	bl	80165ec <lwip_htons>
 801712e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8017130:	4638      	mov	r0, r7
 8017132:	f7ff fa5b 	bl	80165ec <lwip_htons>
 8017136:	4428      	add	r0, r5
 8017138:	4404      	add	r4, r0
  acc = FOLD_U32T(acc);
 801713a:	b2a0      	uxth	r0, r4
 801713c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8017140:	b2a0      	uxth	r0, r4
 8017142:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 8017146:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
 8017148:	b280      	uxth	r0, r0
 801714a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801714e:	bf00      	nop

08017150 <ip_chksum_pseudo>:
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8017150:	f7ff bfb6 	b.w	80170c0 <inet_chksum_pseudo>

08017154 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8017154:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8017156:	f7ff ff77 	bl	8017048 <lwip_standard_chksum>
 801715a:	43c0      	mvns	r0, r0
}
 801715c:	b280      	uxth	r0, r0
 801715e:	bd08      	pop	{r3, pc}

08017160 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8017160:	b330      	cbz	r0, 80171b0 <inet_chksum_pbuf+0x50>
{
 8017162:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8017164:	2600      	movs	r6, #0
 8017166:	4605      	mov	r5, r0
  acc = 0;
 8017168:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 801716a:	8969      	ldrh	r1, [r5, #10]
 801716c:	6868      	ldr	r0, [r5, #4]
 801716e:	f7ff ff6b 	bl	8017048 <lwip_standard_chksum>
 8017172:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8017174:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8017176:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8017178:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 801717c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8017180:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8017184:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8017188:	d003      	beq.n	8017192 <inet_chksum_pbuf+0x32>
      acc = SWAP_BYTES_IN_WORD(acc);
 801718a:	b284      	uxth	r4, r0
 801718c:	f086 0601 	eor.w	r6, r6, #1
 8017190:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8017192:	682d      	ldr	r5, [r5, #0]
 8017194:	2d00      	cmp	r5, #0
 8017196:	d1e8      	bne.n	801716a <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8017198:	b13e      	cbz	r6, 80171aa <inet_chksum_pbuf+0x4a>
    acc = SWAP_BYTES_IN_WORD(acc);
 801719a:	0220      	lsls	r0, r4, #8
 801719c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80171a0:	b280      	uxth	r0, r0
 80171a2:	4320      	orrs	r0, r4
 80171a4:	43c0      	mvns	r0, r0
 80171a6:	b280      	uxth	r0, r0
  }
  return (u16_t)~(acc & 0xffffUL);
}
 80171a8:	bd70      	pop	{r4, r5, r6, pc}
 80171aa:	43e0      	mvns	r0, r4
 80171ac:	b280      	uxth	r0, r0
 80171ae:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 80171b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80171b4:	4770      	bx	lr
 80171b6:	bf00      	nop

080171b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80171b8:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80171ba:	f001 fcb9 	bl	8018b30 <stats_init>
#if !NO_SYS
  sys_init();
 80171be:	f009 fdad 	bl	8020d1c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80171c2:	f000 f96f 	bl	80174a4 <mem_init>
  memp_init();
 80171c6:	f000 fd55 	bl	8017c74 <memp_init>
  pbuf_init();
  netif_init();
 80171ca:	f000 fe17 	bl	8017dfc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80171ce:	f005 ffc9 	bl	801d164 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80171d2:	f001 fd17 	bl	8018c04 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80171d6:	f7ff fdc3 	bl	8016d60 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80171da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80171de:	f005 bf53 	b.w	801d088 <sys_timeouts_init>
 80171e2:	bf00      	nop

080171e4 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80171e4:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 80171e8:	8841      	ldrh	r1, [r0, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80171ea:	4299      	cmp	r1, r3
{
 80171ec:	b430      	push	{r4, r5}
  nmem = ptr_to_mem(mem->next);
 80171ee:	8805      	ldrh	r5, [r0, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80171f0:	d80d      	bhi.n	801720e <mem_link_valid+0x2a>
 80171f2:	429d      	cmp	r5, r3
 80171f4:	bf94      	ite	ls
 80171f6:	2200      	movls	r2, #0
 80171f8:	2201      	movhi	r2, #1
 80171fa:	b942      	cbnz	r2, 801720e <mem_link_valid+0x2a>
  return (mem_size_t)((u8_t *)mem - ram);
 80171fc:	4b0c      	ldr	r3, [pc, #48]	; (8017230 <mem_link_valid+0x4c>)
 80171fe:	681c      	ldr	r4, [r3, #0]
 8017200:	1b03      	subs	r3, r0, r4
 8017202:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017204:	4299      	cmp	r1, r3
 8017206:	d005      	beq.n	8017214 <mem_link_valid+0x30>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017208:	5a61      	ldrh	r1, [r4, r1]
 801720a:	4299      	cmp	r1, r3
 801720c:	d002      	beq.n	8017214 <mem_link_valid+0x30>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
    return 0;
 801720e:	2000      	movs	r0, #0
  }
  return 1;
}
 8017210:	bc30      	pop	{r4, r5}
 8017212:	4770      	bx	lr
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017214:	4a07      	ldr	r2, [pc, #28]	; (8017234 <mem_link_valid+0x50>)
  return (struct mem *)(void *)&ram[ptr];
 8017216:	442c      	add	r4, r5
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017218:	6812      	ldr	r2, [r2, #0]
 801721a:	42a2      	cmp	r2, r4
 801721c:	d006      	beq.n	801722c <mem_link_valid+0x48>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801721e:	8860      	ldrh	r0, [r4, #2]
 8017220:	1ac0      	subs	r0, r0, r3
 8017222:	fab0 f080 	clz	r0, r0
}
 8017226:	bc30      	pop	{r4, r5}
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017228:	0940      	lsrs	r0, r0, #5
}
 801722a:	4770      	bx	lr
  return 1;
 801722c:	2001      	movs	r0, #1
 801722e:	e7ef      	b.n	8017210 <mem_link_valid+0x2c>
 8017230:	2001a8dc 	.word	0x2001a8dc
 8017234:	2001a8e0 	.word	0x2001a8e0

08017238 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8017238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 801723c:	4f5f      	ldr	r7, [pc, #380]	; (80173bc <mem_sanity+0x184>)
 801723e:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8017240:	7935      	ldrb	r5, [r6, #4]
 8017242:	2d01      	cmp	r5, #1
 8017244:	d907      	bls.n	8017256 <mem_sanity+0x1e>
 8017246:	4b5e      	ldr	r3, [pc, #376]	; (80173c0 <mem_sanity+0x188>)
 8017248:	f240 223f 	movw	r2, #575	; 0x23f
 801724c:	495d      	ldr	r1, [pc, #372]	; (80173c4 <mem_sanity+0x18c>)
 801724e:	485e      	ldr	r0, [pc, #376]	; (80173c8 <mem_sanity+0x190>)
 8017250:	f00b f938 	bl	80224c4 <iprintf>
 8017254:	7935      	ldrb	r5, [r6, #4]
  last_used = mem->used;
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8017256:	8873      	ldrh	r3, [r6, #2]
 8017258:	2b00      	cmp	r3, #0
 801725a:	f040 80a7 	bne.w	80173ac <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801725e:	8834      	ldrh	r4, [r6, #0]
 8017260:	f242 7310 	movw	r3, #10000	; 0x2710
 8017264:	429c      	cmp	r4, r3
 8017266:	f200 8098 	bhi.w	801739a <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 801726e:	429c      	cmp	r4, r3
 8017270:	d961      	bls.n	8017336 <mem_sanity+0xfe>
 8017272:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80173e4 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8017276:	f8df a148 	ldr.w	sl, [pc, #328]	; 80173c0 <mem_sanity+0x188>
 801727a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80173e8 <mem_sanity+0x1b0>
 801727e:	4e52      	ldr	r6, [pc, #328]	; (80173c8 <mem_sanity+0x190>)
 8017280:	e012      	b.n	80172a8 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8017282:	2b01      	cmp	r3, #1
 8017284:	d006      	beq.n	8017294 <mem_sanity+0x5c>
 8017286:	4653      	mov	r3, sl
 8017288:	f240 2251 	movw	r2, #593	; 0x251
 801728c:	494f      	ldr	r1, [pc, #316]	; (80173cc <mem_sanity+0x194>)
 801728e:	4630      	mov	r0, r6
 8017290:	f00b f918 	bl	80224c4 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8017294:	4620      	mov	r0, r4
 8017296:	f7ff ffa5 	bl	80171e4 <mem_link_valid>
 801729a:	b380      	cbz	r0, 80172fe <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 80172a0:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 80172a2:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 80172a4:	42a3      	cmp	r3, r4
 80172a6:	d246      	bcs.n	8017336 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 80172a8:	f8d8 2000 	ldr.w	r2, [r8]
 80172ac:	42a2      	cmp	r2, r4
 80172ae:	d942      	bls.n	8017336 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 80172b0:	1ce2      	adds	r2, r4, #3
 80172b2:	f022 0203 	bic.w	r2, r2, #3
 80172b6:	4294      	cmp	r4, r2
 80172b8:	d006      	beq.n	80172c8 <mem_sanity+0x90>
 80172ba:	4653      	mov	r3, sl
 80172bc:	f240 2249 	movw	r2, #585	; 0x249
 80172c0:	4649      	mov	r1, r9
 80172c2:	4630      	mov	r0, r6
 80172c4:	f00b f8fe 	bl	80224c4 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 80172c8:	8862      	ldrh	r2, [r4, #2]
 80172ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d81d      	bhi.n	801730e <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80172d2:	8822      	ldrh	r2, [r4, #0]
 80172d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80172d8:	429a      	cmp	r2, r3
 80172da:	d824      	bhi.n	8017326 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 80172dc:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 80172de:	2d00      	cmp	r5, #0
 80172e0:	d0cf      	beq.n	8017282 <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 80172e2:	2b01      	cmp	r3, #1
 80172e4:	d9d6      	bls.n	8017294 <mem_sanity+0x5c>
 80172e6:	4653      	mov	r3, sl
 80172e8:	f240 2253 	movw	r2, #595	; 0x253
 80172ec:	4938      	ldr	r1, [pc, #224]	; (80173d0 <mem_sanity+0x198>)
 80172ee:	4630      	mov	r0, r6
 80172f0:	f00b f8e8 	bl	80224c4 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 80172f4:	4620      	mov	r0, r4
 80172f6:	f7ff ff75 	bl	80171e4 <mem_link_valid>
 80172fa:	2800      	cmp	r0, #0
 80172fc:	d1ce      	bne.n	801729c <mem_sanity+0x64>
 80172fe:	4653      	mov	r3, sl
 8017300:	f240 2256 	movw	r2, #598	; 0x256
 8017304:	4933      	ldr	r1, [pc, #204]	; (80173d4 <mem_sanity+0x19c>)
 8017306:	4630      	mov	r0, r6
 8017308:	f00b f8dc 	bl	80224c4 <iprintf>
 801730c:	e7c6      	b.n	801729c <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801730e:	4653      	mov	r3, sl
 8017310:	f240 224a 	movw	r2, #586	; 0x24a
 8017314:	4930      	ldr	r1, [pc, #192]	; (80173d8 <mem_sanity+0x1a0>)
 8017316:	4630      	mov	r0, r6
 8017318:	f00b f8d4 	bl	80224c4 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801731c:	8822      	ldrh	r2, [r4, #0]
 801731e:	f242 7310 	movw	r3, #10000	; 0x2710
 8017322:	429a      	cmp	r2, r3
 8017324:	d9da      	bls.n	80172dc <mem_sanity+0xa4>
 8017326:	4653      	mov	r3, sl
 8017328:	f240 224b 	movw	r2, #587	; 0x24b
 801732c:	492b      	ldr	r1, [pc, #172]	; (80173dc <mem_sanity+0x1a4>)
 801732e:	4630      	mov	r0, r6
 8017330:	f00b f8c8 	bl	80224c4 <iprintf>
 8017334:	e7d2      	b.n	80172dc <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8017336:	f242 7210 	movw	r2, #10000	; 0x2710
 801733a:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 801733c:	4294      	cmp	r4, r2
 801733e:	d006      	beq.n	801734e <mem_sanity+0x116>
 8017340:	4b1f      	ldr	r3, [pc, #124]	; (80173c0 <mem_sanity+0x188>)
 8017342:	f240 225b 	movw	r2, #603	; 0x25b
 8017346:	4926      	ldr	r1, [pc, #152]	; (80173e0 <mem_sanity+0x1a8>)
 8017348:	481f      	ldr	r0, [pc, #124]	; (80173c8 <mem_sanity+0x190>)
 801734a:	f00b f8bb 	bl	80224c4 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 801734e:	7923      	ldrb	r3, [r4, #4]
 8017350:	2b01      	cmp	r3, #1
 8017352:	d006      	beq.n	8017362 <mem_sanity+0x12a>
 8017354:	4b1a      	ldr	r3, [pc, #104]	; (80173c0 <mem_sanity+0x188>)
 8017356:	f44f 7217 	mov.w	r2, #604	; 0x25c
 801735a:	491a      	ldr	r1, [pc, #104]	; (80173c4 <mem_sanity+0x18c>)
 801735c:	481a      	ldr	r0, [pc, #104]	; (80173c8 <mem_sanity+0x190>)
 801735e:	f00b f8b1 	bl	80224c4 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 8017362:	8862      	ldrh	r2, [r4, #2]
 8017364:	f242 7310 	movw	r3, #10000	; 0x2710
 8017368:	429a      	cmp	r2, r3
 801736a:	d006      	beq.n	801737a <mem_sanity+0x142>
 801736c:	4b14      	ldr	r3, [pc, #80]	; (80173c0 <mem_sanity+0x188>)
 801736e:	f240 225d 	movw	r2, #605	; 0x25d
 8017372:	4919      	ldr	r1, [pc, #100]	; (80173d8 <mem_sanity+0x1a0>)
 8017374:	4814      	ldr	r0, [pc, #80]	; (80173c8 <mem_sanity+0x190>)
 8017376:	f00b f8a5 	bl	80224c4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801737a:	8822      	ldrh	r2, [r4, #0]
 801737c:	f242 7310 	movw	r3, #10000	; 0x2710
 8017380:	429a      	cmp	r2, r3
 8017382:	d101      	bne.n	8017388 <mem_sanity+0x150>
}
 8017384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8017388:	4b0d      	ldr	r3, [pc, #52]	; (80173c0 <mem_sanity+0x188>)
 801738a:	f240 225e 	movw	r2, #606	; 0x25e
 801738e:	4913      	ldr	r1, [pc, #76]	; (80173dc <mem_sanity+0x1a4>)
 8017390:	480d      	ldr	r0, [pc, #52]	; (80173c8 <mem_sanity+0x190>)
}
 8017392:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8017396:	f00b b895 	b.w	80224c4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801739a:	4b09      	ldr	r3, [pc, #36]	; (80173c0 <mem_sanity+0x188>)
 801739c:	f240 2242 	movw	r2, #578	; 0x242
 80173a0:	490e      	ldr	r1, [pc, #56]	; (80173dc <mem_sanity+0x1a4>)
 80173a2:	4809      	ldr	r0, [pc, #36]	; (80173c8 <mem_sanity+0x190>)
 80173a4:	f00b f88e 	bl	80224c4 <iprintf>
 80173a8:	8834      	ldrh	r4, [r6, #0]
 80173aa:	e75e      	b.n	801726a <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 80173ac:	4b04      	ldr	r3, [pc, #16]	; (80173c0 <mem_sanity+0x188>)
 80173ae:	f240 2241 	movw	r2, #577	; 0x241
 80173b2:	4909      	ldr	r1, [pc, #36]	; (80173d8 <mem_sanity+0x1a0>)
 80173b4:	4804      	ldr	r0, [pc, #16]	; (80173c8 <mem_sanity+0x190>)
 80173b6:	f00b f885 	bl	80224c4 <iprintf>
 80173ba:	e750      	b.n	801725e <mem_sanity+0x26>
 80173bc:	2001a8dc 	.word	0x2001a8dc
 80173c0:	0803f220 	.word	0x0803f220
 80173c4:	0803f250 	.word	0x0803f250
 80173c8:	08028d24 	.word	0x08028d24
 80173cc:	0803f2b8 	.word	0x0803f2b8
 80173d0:	0803f2d0 	.word	0x0803f2d0
 80173d4:	0803f2ec 	.word	0x0803f2ec
 80173d8:	0803f268 	.word	0x0803f268
 80173dc:	0803f284 	.word	0x0803f284
 80173e0:	0803f304 	.word	0x0803f304
 80173e4:	2001a8e0 	.word	0x2001a8e0
 80173e8:	0803f2a0 	.word	0x0803f2a0

080173ec <mem_overflow_check_raw>:
{
 80173ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f0:	1e4c      	subs	r4, r1, #1
 80173f2:	310f      	adds	r1, #15
 80173f4:	b0a3      	sub	sp, #140	; 0x8c
 80173f6:	4606      	mov	r6, r0
 80173f8:	4615      	mov	r5, r2
 80173fa:	4698      	mov	r8, r3
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 80173fc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8017478 <mem_overflow_check_raw+0x8c>
 8017400:	4404      	add	r4, r0
 8017402:	180f      	adds	r7, r1, r0
      LWIP_ASSERT(errstr, 0);
 8017404:	f8df b074 	ldr.w	fp, [pc, #116]	; 801747c <mem_overflow_check_raw+0x90>
 8017408:	f8df a074 	ldr.w	sl, [pc, #116]	; 8017480 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801740c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8017410:	464a      	mov	r2, r9
 8017412:	2180      	movs	r1, #128	; 0x80
 8017414:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8017416:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8017418:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801741a:	d009      	beq.n	8017430 <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801741c:	f8cd 8000 	str.w	r8, [sp]
 8017420:	f00b f994 	bl	802274c <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8017424:	465b      	mov	r3, fp
 8017426:	a902      	add	r1, sp, #8
 8017428:	226d      	movs	r2, #109	; 0x6d
 801742a:	4650      	mov	r0, sl
 801742c:	f00b f84a 	bl	80224c4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8017430:	42bc      	cmp	r4, r7
 8017432:	d1eb      	bne.n	801740c <mem_overflow_check_raw+0x20>
 8017434:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8017438:	4f0e      	ldr	r7, [pc, #56]	; (8017474 <mem_overflow_check_raw+0x88>)
 801743a:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 801743c:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801747c <mem_overflow_check_raw+0x90>
 8017440:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8017480 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8017444:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8017448:	463a      	mov	r2, r7
 801744a:	2180      	movs	r1, #128	; 0x80
 801744c:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801744e:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8017450:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8017452:	d009      	beq.n	8017468 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8017454:	f8cd 8000 	str.w	r8, [sp]
 8017458:	f00b f978 	bl	802274c <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801745c:	4653      	mov	r3, sl
 801745e:	a902      	add	r1, sp, #8
 8017460:	2278      	movs	r2, #120	; 0x78
 8017462:	4648      	mov	r0, r9
 8017464:	f00b f82e 	bl	80224c4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8017468:	42b4      	cmp	r4, r6
 801746a:	d1eb      	bne.n	8017444 <mem_overflow_check_raw+0x58>
}
 801746c:	b023      	add	sp, #140	; 0x8c
 801746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017472:	bf00      	nop
 8017474:	0803f338 	.word	0x0803f338
 8017478:	0803f318 	.word	0x0803f318
 801747c:	0803f220 	.word	0x0803f220
 8017480:	08028d24 	.word	0x08028d24

08017484 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8017484:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8017488:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801748a:	f840 3c10 	str.w	r3, [r0, #-16]
 801748e:	f840 3c0c 	str.w	r3, [r0, #-12]
 8017492:	f840 3c08 	str.w	r3, [r0, #-8]
 8017496:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801749a:	5043      	str	r3, [r0, r1]
 801749c:	6053      	str	r3, [r2, #4]
 801749e:	6093      	str	r3, [r2, #8]
 80174a0:	60d3      	str	r3, [r2, #12]
}
 80174a2:	4770      	bx	lr

080174a4 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80174a4:	4b13      	ldr	r3, [pc, #76]	; (80174f4 <mem_init+0x50>)
  mem->used = 0;
 80174a6:	2200      	movs	r2, #0
  ram_end->used = 1;
 80174a8:	2101      	movs	r1, #1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80174aa:	4813      	ldr	r0, [pc, #76]	; (80174f8 <mem_init+0x54>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80174ac:	f023 0303 	bic.w	r3, r3, #3
{
 80174b0:	b570      	push	{r4, r5, r6, lr}
  mem->next = MEM_SIZE_ALIGNED;
 80174b2:	f242 7410 	movw	r4, #10000	; 0x2710
  mem->used = 0;
 80174b6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80174b8:	4e10      	ldr	r6, [pc, #64]	; (80174fc <mem_init+0x58>)
  return (struct mem *)(void *)&ram[ptr];
 80174ba:	191a      	adds	r2, r3, r4
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80174bc:	4d10      	ldr	r5, [pc, #64]	; (8017500 <mem_init+0x5c>)
  mem->next = MEM_SIZE_ALIGNED;
 80174be:	601c      	str	r4, [r3, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 80174c0:	511e      	str	r6, [r3, r4]
  ram_end->used = 1;
 80174c2:	7111      	strb	r1, [r2, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80174c4:	6002      	str	r2, [r0, #0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80174c6:	602b      	str	r3, [r5, #0]
  MEM_SANITY();
 80174c8:	f7ff feb6 	bl	8017238 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 80174cc:	682a      	ldr	r2, [r5, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80174ce:	490d      	ldr	r1, [pc, #52]	; (8017504 <mem_init+0x60>)
  lfree = (struct mem *)(void *)ram;
 80174d0:	4b0d      	ldr	r3, [pc, #52]	; (8017508 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80174d2:	480e      	ldr	r0, [pc, #56]	; (801750c <mem_init+0x68>)
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80174d4:	f8a1 40aa 	strh.w	r4, [r1, #170]	; 0xaa
  lfree = (struct mem *)(void *)ram;
 80174d8:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80174da:	f009 fc2b 	bl	8020d34 <sys_mutex_new>
 80174de:	b900      	cbnz	r0, 80174e2 <mem_init+0x3e>
}
 80174e0:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80174e2:	4b0b      	ldr	r3, [pc, #44]	; (8017510 <mem_init+0x6c>)
 80174e4:	f240 221f 	movw	r2, #543	; 0x21f
 80174e8:	490a      	ldr	r1, [pc, #40]	; (8017514 <mem_init+0x70>)
 80174ea:	480b      	ldr	r0, [pc, #44]	; (8017518 <mem_init+0x74>)
}
 80174ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80174f0:	f00a bfe8 	b.w	80224c4 <iprintf>
 80174f4:	2001f17f 	.word	0x2001f17f
 80174f8:	2001a8e0 	.word	0x2001a8e0
 80174fc:	27102710 	.word	0x27102710
 8017500:	2001a8dc 	.word	0x2001a8dc
 8017504:	2002e08c 	.word	0x2002e08c
 8017508:	2001a8d0 	.word	0x2001a8d0
 801750c:	2001a8d8 	.word	0x2001a8d8
 8017510:	0803f220 	.word	0x0803f220
 8017514:	0803f358 	.word	0x0803f358
 8017518:	08028d24 	.word	0x08028d24

0801751c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801751c:	2800      	cmp	r0, #0
 801751e:	f000 8087 	beq.w	8017630 <mem_free+0x114>
{
 8017522:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8017526:	f010 0803 	ands.w	r8, r0, #3
 801752a:	4604      	mov	r4, r0
 801752c:	f040 8081 	bne.w	8017632 <mem_free+0x116>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8017530:	4e5e      	ldr	r6, [pc, #376]	; (80176ac <mem_free+0x190>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017532:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8017536:	6833      	ldr	r3, [r6, #0]
 8017538:	42ab      	cmp	r3, r5
 801753a:	d805      	bhi.n	8017548 <mem_free+0x2c>
 801753c:	4f5c      	ldr	r7, [pc, #368]	; (80176b0 <mem_free+0x194>)
 801753e:	f100 030c 	add.w	r3, r0, #12
 8017542:	683a      	ldr	r2, [r7, #0]
 8017544:	429a      	cmp	r2, r3
 8017546:	d20e      	bcs.n	8017566 <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8017548:	4b5a      	ldr	r3, [pc, #360]	; (80176b4 <mem_free+0x198>)
 801754a:	f240 227f 	movw	r2, #639	; 0x27f
 801754e:	495a      	ldr	r1, [pc, #360]	; (80176b8 <mem_free+0x19c>)
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8017550:	485a      	ldr	r0, [pc, #360]	; (80176bc <mem_free+0x1a0>)
 8017552:	f00a ffb7 	bl	80224c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017556:	4a5a      	ldr	r2, [pc, #360]	; (80176c0 <mem_free+0x1a4>)
 8017558:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 801755c:	3301      	adds	r3, #1
 801755e:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8017562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8017566:	4b57      	ldr	r3, [pc, #348]	; (80176c4 <mem_free+0x1a8>)
 8017568:	4a57      	ldr	r2, [pc, #348]	; (80176c8 <mem_free+0x1ac>)
 801756a:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801756e:	f7ff ff3d 	bl	80173ec <mem_overflow_check_raw>
  if (!mem->used) {
 8017572:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8017576:	2b00      	cmp	r3, #0
 8017578:	f000 8088 	beq.w	801768c <mem_free+0x170>
  if (!mem_link_valid(mem)) {
 801757c:	4628      	mov	r0, r5
 801757e:	f7ff fe31 	bl	80171e4 <mem_link_valid>
 8017582:	2800      	cmp	r0, #0
 8017584:	f000 8087 	beq.w	8017696 <mem_free+0x17a>
  if (mem < lfree) {
 8017588:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80176ec <mem_free+0x1d0>
  mem->used = 0;
 801758c:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 8017590:	f8d9 3000 	ldr.w	r3, [r9]
 8017594:	42ab      	cmp	r3, r5
 8017596:	d901      	bls.n	801759c <mem_free+0x80>
    lfree = mem;
 8017598:	f8c9 5000 	str.w	r5, [r9]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 801759c:	4848      	ldr	r0, [pc, #288]	; (80176c0 <mem_free+0x1a4>)
 801759e:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 80175a2:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
 80175a6:	6831      	ldr	r1, [r6, #0]
 80175a8:	1ad2      	subs	r2, r2, r3
 80175aa:	eba5 0c01 	sub.w	ip, r5, r1
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80175ae:	42a9      	cmp	r1, r5
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 80175b0:	4462      	add	r2, ip
 80175b2:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80175b6:	d84b      	bhi.n	8017650 <mem_free+0x134>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80175b8:	683a      	ldr	r2, [r7, #0]
 80175ba:	4295      	cmp	r5, r2
 80175bc:	d252      	bcs.n	8017664 <mem_free+0x148>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80175be:	f242 7210 	movw	r2, #10000	; 0x2710
 80175c2:	4293      	cmp	r3, r2
 80175c4:	d83a      	bhi.n	801763c <mem_free+0x120>
  return (struct mem *)(void *)&ram[ptr];
 80175c6:	6832      	ldr	r2, [r6, #0]
 80175c8:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80175ca:	429d      	cmp	r5, r3
 80175cc:	d013      	beq.n	80175f6 <mem_free+0xda>
 80175ce:	7919      	ldrb	r1, [r3, #4]
 80175d0:	b989      	cbnz	r1, 80175f6 <mem_free+0xda>
 80175d2:	6839      	ldr	r1, [r7, #0]
 80175d4:	428b      	cmp	r3, r1
 80175d6:	d00e      	beq.n	80175f6 <mem_free+0xda>
    if (lfree == nmem) {
 80175d8:	f8d9 1000 	ldr.w	r1, [r9]
 80175dc:	428b      	cmp	r3, r1
 80175de:	d062      	beq.n	80176a6 <mem_free+0x18a>
    mem->next = nmem->next;
 80175e0:	8818      	ldrh	r0, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80175e2:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = nmem->next;
 80175e6:	f824 0c18 	strh.w	r0, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80175ea:	881b      	ldrh	r3, [r3, #0]
 80175ec:	428b      	cmp	r3, r1
 80175ee:	d002      	beq.n	80175f6 <mem_free+0xda>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80175f0:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 80175f2:	1aa9      	subs	r1, r5, r2
 80175f4:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 80175f6:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 80175fa:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 80175fc:	429d      	cmp	r5, r3
 80175fe:	d010      	beq.n	8017622 <mem_free+0x106>
 8017600:	7918      	ldrb	r0, [r3, #4]
 8017602:	b970      	cbnz	r0, 8017622 <mem_free+0x106>
    if (lfree == mem) {
 8017604:	f8d9 0000 	ldr.w	r0, [r9]
 8017608:	4285      	cmp	r5, r0
 801760a:	d049      	beq.n	80176a0 <mem_free+0x184>
    pmem->next = mem->next;
 801760c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8017610:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 8017614:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8017616:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801761a:	4283      	cmp	r3, r0
 801761c:	d001      	beq.n	8017622 <mem_free+0x106>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801761e:	441a      	add	r2, r3
 8017620:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 8017622:	f7ff fe09 	bl	8017238 <mem_sanity>
  mem_free_count = 1;
 8017626:	4b29      	ldr	r3, [pc, #164]	; (80176cc <mem_free+0x1b0>)
 8017628:	2201      	movs	r2, #1
 801762a:	701a      	strb	r2, [r3, #0]
}
 801762c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017630:	4770      	bx	lr
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8017632:	4b20      	ldr	r3, [pc, #128]	; (80176b4 <mem_free+0x198>)
 8017634:	f240 2273 	movw	r2, #627	; 0x273
 8017638:	4925      	ldr	r1, [pc, #148]	; (80176d0 <mem_free+0x1b4>)
 801763a:	e789      	b.n	8017550 <mem_free+0x34>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801763c:	4b1d      	ldr	r3, [pc, #116]	; (80176b4 <mem_free+0x198>)
 801763e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8017642:	4924      	ldr	r1, [pc, #144]	; (80176d4 <mem_free+0x1b8>)
 8017644:	481d      	ldr	r0, [pc, #116]	; (80176bc <mem_free+0x1a0>)
 8017646:	f00a ff3d 	bl	80224c4 <iprintf>
 801764a:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801764e:	e7ba      	b.n	80175c6 <mem_free+0xaa>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017650:	4b18      	ldr	r3, [pc, #96]	; (80176b4 <mem_free+0x198>)
 8017652:	f240 12df 	movw	r2, #479	; 0x1df
 8017656:	4920      	ldr	r1, [pc, #128]	; (80176d8 <mem_free+0x1bc>)
 8017658:	4818      	ldr	r0, [pc, #96]	; (80176bc <mem_free+0x1a0>)
 801765a:	f00a ff33 	bl	80224c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801765e:	683b      	ldr	r3, [r7, #0]
 8017660:	429d      	cmp	r5, r3
 8017662:	d306      	bcc.n	8017672 <mem_free+0x156>
 8017664:	4b13      	ldr	r3, [pc, #76]	; (80176b4 <mem_free+0x198>)
 8017666:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801766a:	491c      	ldr	r1, [pc, #112]	; (80176dc <mem_free+0x1c0>)
 801766c:	4813      	ldr	r0, [pc, #76]	; (80176bc <mem_free+0x1a0>)
 801766e:	f00a ff29 	bl	80224c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017672:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8017676:	b133      	cbz	r3, 8017686 <mem_free+0x16a>
 8017678:	4b0e      	ldr	r3, [pc, #56]	; (80176b4 <mem_free+0x198>)
 801767a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801767e:	4918      	ldr	r1, [pc, #96]	; (80176e0 <mem_free+0x1c4>)
 8017680:	480e      	ldr	r0, [pc, #56]	; (80176bc <mem_free+0x1a0>)
 8017682:	f00a ff1f 	bl	80224c4 <iprintf>
 8017686:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801768a:	e798      	b.n	80175be <mem_free+0xa2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801768c:	4b09      	ldr	r3, [pc, #36]	; (80176b4 <mem_free+0x198>)
 801768e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8017692:	4914      	ldr	r1, [pc, #80]	; (80176e4 <mem_free+0x1c8>)
 8017694:	e75c      	b.n	8017550 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8017696:	4b07      	ldr	r3, [pc, #28]	; (80176b4 <mem_free+0x198>)
 8017698:	f240 2295 	movw	r2, #661	; 0x295
 801769c:	4912      	ldr	r1, [pc, #72]	; (80176e8 <mem_free+0x1cc>)
 801769e:	e757      	b.n	8017550 <mem_free+0x34>
      lfree = pmem;
 80176a0:	f8c9 3000 	str.w	r3, [r9]
 80176a4:	e7b2      	b.n	801760c <mem_free+0xf0>
      lfree = mem;
 80176a6:	f8c9 5000 	str.w	r5, [r9]
 80176aa:	e799      	b.n	80175e0 <mem_free+0xc4>
 80176ac:	2001a8dc 	.word	0x2001a8dc
 80176b0:	2001a8e0 	.word	0x2001a8e0
 80176b4:	0803f220 	.word	0x0803f220
 80176b8:	0803f398 	.word	0x0803f398
 80176bc:	08028d24 	.word	0x08028d24
 80176c0:	2002e08c 	.word	0x2002e08c
 80176c4:	08026944 	.word	0x08026944
 80176c8:	0803f3b4 	.word	0x0803f3b4
 80176cc:	2001a8d4 	.word	0x2001a8d4
 80176d0:	0803f374 	.word	0x0803f374
 80176d4:	0803f468 	.word	0x0803f468
 80176d8:	0803f418 	.word	0x0803f418
 80176dc:	0803f430 	.word	0x0803f430
 80176e0:	0803f44c 	.word	0x0803f44c
 80176e4:	0803f3bc 	.word	0x0803f3bc
 80176e8:	0803f3e4 	.word	0x0803f3e4
 80176ec:	2001a8d0 	.word	0x2001a8d0

080176f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80176f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80176f4:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80176f6:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80176fa:	f024 0403 	bic.w	r4, r4, #3
 80176fe:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8017700:	2c0c      	cmp	r4, #12
 8017702:	bf38      	it	cc
 8017704:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8017706:	3420      	adds	r4, #32
 8017708:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801770a:	429c      	cmp	r4, r3
 801770c:	f200 8086 	bhi.w	801781c <mem_trim+0x12c>
 8017710:	42a1      	cmp	r1, r4
 8017712:	460e      	mov	r6, r1
 8017714:	f200 8082 	bhi.w	801781c <mem_trim+0x12c>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017718:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80178cc <mem_trim+0x1dc>
 801771c:	4605      	mov	r5, r0
 801771e:	f8d9 3000 	ldr.w	r3, [r9]
 8017722:	4283      	cmp	r3, r0
 8017724:	d803      	bhi.n	801772e <mem_trim+0x3e>
 8017726:	4b5e      	ldr	r3, [pc, #376]	; (80178a0 <mem_trim+0x1b0>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	4283      	cmp	r3, r0
 801772c:	d817      	bhi.n	801775e <mem_trim+0x6e>
 801772e:	4b5d      	ldr	r3, [pc, #372]	; (80178a4 <mem_trim+0x1b4>)
 8017730:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017734:	495c      	ldr	r1, [pc, #368]	; (80178a8 <mem_trim+0x1b8>)
 8017736:	485d      	ldr	r0, [pc, #372]	; (80178ac <mem_trim+0x1bc>)
 8017738:	f00a fec4 	bl	80224c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801773c:	f8d9 3000 	ldr.w	r3, [r9]
 8017740:	42ab      	cmp	r3, r5
 8017742:	d908      	bls.n	8017756 <mem_trim+0x66>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017744:	4a5a      	ldr	r2, [pc, #360]	; (80178b0 <mem_trim+0x1c0>)
    return rmem;
 8017746:	4628      	mov	r0, r5
    MEM_STATS_INC_LOCKED(illegal);
 8017748:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 801774c:	3301      	adds	r3, #1
 801774e:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8017752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017756:	4b52      	ldr	r3, [pc, #328]	; (80178a0 <mem_trim+0x1b0>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	429d      	cmp	r5, r3
 801775c:	d2f2      	bcs.n	8017744 <mem_trim+0x54>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801775e:	4b55      	ldr	r3, [pc, #340]	; (80178b4 <mem_trim+0x1c4>)
 8017760:	4628      	mov	r0, r5
 8017762:	4a55      	ldr	r2, [pc, #340]	; (80178b8 <mem_trim+0x1c8>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017764:	f1a5 0718 	sub.w	r7, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8017768:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 801776c:	f7ff fe3e 	bl	80173ec <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8017770:	f8d9 2000 	ldr.w	r2, [r9]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8017774:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 8017778:	1abf      	subs	r7, r7, r2
 801777a:	f1a1 0828 	sub.w	r8, r1, #40	; 0x28
 801777e:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8017780:	fa1f f888 	uxth.w	r8, r8
 8017784:	eba8 0307 	sub.w	r3, r8, r7
 8017788:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801778a:	429c      	cmp	r4, r3
 801778c:	d83d      	bhi.n	801780a <mem_trim+0x11a>
  if (newsize == size) {
 801778e:	d06c      	beq.n	801786a <mem_trim+0x17a>
  return (struct mem *)(void *)&ram[ptr];
 8017790:	eb02 0a01 	add.w	sl, r2, r1
  if (mem2->used == 0) {
 8017794:	f89a 0004 	ldrb.w	r0, [sl, #4]
 8017798:	2800      	cmp	r0, #0
 801779a:	d142      	bne.n	8017822 <mem_trim+0x132>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801779c:	f242 7310 	movw	r3, #10000	; 0x2710
 80177a0:	4299      	cmp	r1, r3
 80177a2:	d066      	beq.n	8017872 <mem_trim+0x182>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80177a4:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 80177a8:	4844      	ldr	r0, [pc, #272]	; (80178bc <mem_trim+0x1cc>)
    next = mem2->next;
 80177aa:	f8ba c000 	ldrh.w	ip, [sl]
    if (lfree == mem2) {
 80177ae:	6801      	ldr	r1, [r0, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80177b0:	4423      	add	r3, r4
    if (lfree == mem2) {
 80177b2:	4551      	cmp	r1, sl
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80177b4:	b29b      	uxth	r3, r3
  return (struct mem *)(void *)&ram[ptr];
 80177b6:	eb02 0103 	add.w	r1, r2, r3
    if (lfree == mem2) {
 80177ba:	d058      	beq.n	801786e <mem_trim+0x17e>
    mem2->used = 0;
 80177bc:	f04f 0e00 	mov.w	lr, #0
    mem2->next = next;
 80177c0:	f8a1 c000 	strh.w	ip, [r1]
    mem2->prev = ptr;
 80177c4:	804f      	strh	r7, [r1, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80177c6:	f242 7010 	movw	r0, #10000	; 0x2710
    mem2->used = 0;
 80177ca:	f881 e004 	strb.w	lr, [r1, #4]
    mem->next = ptr2;
 80177ce:	f825 3c18 	strh.w	r3, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80177d2:	8809      	ldrh	r1, [r1, #0]
 80177d4:	4281      	cmp	r1, r0
 80177d6:	d001      	beq.n	80177dc <mem_trim+0xec>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80177d8:	440a      	add	r2, r1
 80177da:	8053      	strh	r3, [r2, #2]
    MEM_STATS_DEC_USED(used, (size - newsize));
 80177dc:	4b34      	ldr	r3, [pc, #208]	; (80178b0 <mem_trim+0x1c0>)
 80177de:	eba7 0708 	sub.w	r7, r7, r8
 80177e2:	f8b3 80ac 	ldrh.w	r8, [r3, #172]	; 0xac
 80177e6:	4447      	add	r7, r8
 80177e8:	443c      	add	r4, r7
 80177ea:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
  mem_overflow_init_raw(p, user_size);
 80177ee:	4628      	mov	r0, r5
 80177f0:	4631      	mov	r1, r6
  mem->user_size = user_size;
 80177f2:	f825 6c12 	strh.w	r6, [r5, #-18]
  mem_overflow_init_raw(p, user_size);
 80177f6:	f7ff fe45 	bl	8017484 <mem_overflow_init_raw>
  MEM_SANITY();
 80177fa:	f7ff fd1d 	bl	8017238 <mem_sanity>
  mem_free_count = 1;
 80177fe:	4b30      	ldr	r3, [pc, #192]	; (80178c0 <mem_trim+0x1d0>)
 8017800:	2201      	movs	r2, #1
  return rmem;
 8017802:	4628      	mov	r0, r5
  mem_free_count = 1;
 8017804:	701a      	strb	r2, [r3, #0]
}
 8017806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801780a:	4b26      	ldr	r3, [pc, #152]	; (80178a4 <mem_trim+0x1b4>)
 801780c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8017810:	492c      	ldr	r1, [pc, #176]	; (80178c4 <mem_trim+0x1d4>)
 8017812:	4826      	ldr	r0, [pc, #152]	; (80178ac <mem_trim+0x1bc>)
 8017814:	f00a fe56 	bl	80224c4 <iprintf>
    return NULL;
 8017818:	2000      	movs	r0, #0
 801781a:	e79a      	b.n	8017752 <mem_trim+0x62>
    return NULL;
 801781c:	2000      	movs	r0, #0
}
 801781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017822:	f104 0014 	add.w	r0, r4, #20
 8017826:	4298      	cmp	r0, r3
 8017828:	d8e1      	bhi.n	80177ee <mem_trim+0xfe>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801782a:	f107 0a08 	add.w	sl, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801782e:	f242 7310 	movw	r3, #10000	; 0x2710
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017832:	44a2      	add	sl, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017834:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017836:	fa1f fa8a 	uxth.w	sl, sl
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801783a:	d024      	beq.n	8017886 <mem_trim+0x196>
    if (mem2 < lfree) {
 801783c:	481f      	ldr	r0, [pc, #124]	; (80178bc <mem_trim+0x1cc>)
  return (struct mem *)(void *)&ram[ptr];
 801783e:	eb02 030a 	add.w	r3, r2, sl
    if (mem2 < lfree) {
 8017842:	f8d0 c000 	ldr.w	ip, [r0]
 8017846:	459c      	cmp	ip, r3
 8017848:	d900      	bls.n	801784c <mem_trim+0x15c>
      lfree = mem2;
 801784a:	6003      	str	r3, [r0, #0]
    mem2->used = 0;
 801784c:	2000      	movs	r0, #0
    mem2->next = mem->next;
 801784e:	8019      	strh	r1, [r3, #0]
    mem2->prev = ptr;
 8017850:	805f      	strh	r7, [r3, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017852:	f242 7110 	movw	r1, #10000	; 0x2710
    mem2->used = 0;
 8017856:	7118      	strb	r0, [r3, #4]
    mem->next = ptr2;
 8017858:	f825 ac18 	strh.w	sl, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801785c:	881b      	ldrh	r3, [r3, #0]
 801785e:	428b      	cmp	r3, r1
 8017860:	d0bc      	beq.n	80177dc <mem_trim+0xec>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017862:	441a      	add	r2, r3
 8017864:	f8a2 a002 	strh.w	sl, [r2, #2]
 8017868:	e7b8      	b.n	80177dc <mem_trim+0xec>
 801786a:	4628      	mov	r0, r5
 801786c:	e771      	b.n	8017752 <mem_trim+0x62>
      lfree = ptr_to_mem(ptr2);
 801786e:	6001      	str	r1, [r0, #0]
 8017870:	e7a4      	b.n	80177bc <mem_trim+0xcc>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017872:	f240 22f5 	movw	r2, #757	; 0x2f5
 8017876:	4b0b      	ldr	r3, [pc, #44]	; (80178a4 <mem_trim+0x1b4>)
 8017878:	4913      	ldr	r1, [pc, #76]	; (80178c8 <mem_trim+0x1d8>)
 801787a:	480c      	ldr	r0, [pc, #48]	; (80178ac <mem_trim+0x1bc>)
 801787c:	f00a fe22 	bl	80224c4 <iprintf>
 8017880:	f8d9 2000 	ldr.w	r2, [r9]
 8017884:	e78e      	b.n	80177a4 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017886:	f240 3216 	movw	r2, #790	; 0x316
 801788a:	490f      	ldr	r1, [pc, #60]	; (80178c8 <mem_trim+0x1d8>)
 801788c:	4b05      	ldr	r3, [pc, #20]	; (80178a4 <mem_trim+0x1b4>)
 801788e:	4807      	ldr	r0, [pc, #28]	; (80178ac <mem_trim+0x1bc>)
 8017890:	f00a fe18 	bl	80224c4 <iprintf>
 8017894:	f8d9 2000 	ldr.w	r2, [r9]
 8017898:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 801789c:	e7ce      	b.n	801783c <mem_trim+0x14c>
 801789e:	bf00      	nop
 80178a0:	2001a8e0 	.word	0x2001a8e0
 80178a4:	0803f220 	.word	0x0803f220
 80178a8:	0803f494 	.word	0x0803f494
 80178ac:	08028d24 	.word	0x08028d24
 80178b0:	2002e08c 	.word	0x2002e08c
 80178b4:	08026944 	.word	0x08026944
 80178b8:	0803f3b4 	.word	0x0803f3b4
 80178bc:	2001a8d0 	.word	0x2001a8d0
 80178c0:	2001a8d4 	.word	0x2001a8d4
 80178c4:	0803f4ac 	.word	0x0803f4ac
 80178c8:	0803f4cc 	.word	0x0803f4cc
 80178cc:	2001a8dc 	.word	0x2001a8dc

080178d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80178d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80178d4:	4680      	mov	r8, r0
 80178d6:	2800      	cmp	r0, #0
 80178d8:	f000 80cb 	beq.w	8017a72 <mem_malloc+0x1a2>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80178dc:	f100 0a03 	add.w	sl, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80178e0:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80178e4:	f02a 0a03 	bic.w	sl, sl, #3
 80178e8:	fa1f fa8a 	uxth.w	sl, sl
  if (size < MIN_SIZE_ALIGNED) {
 80178ec:	f1ba 0f0c 	cmp.w	sl, #12
 80178f0:	bf38      	it	cc
 80178f2:	f04f 0a0c 	movcc.w	sl, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 80178f6:	f10a 0720 	add.w	r7, sl, #32
 80178fa:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80178fc:	42a7      	cmp	r7, r4
 80178fe:	f200 80b8 	bhi.w	8017a72 <mem_malloc+0x1a2>
 8017902:	42b8      	cmp	r0, r7
 8017904:	bf94      	ite	ls
 8017906:	2500      	movls	r5, #0
 8017908:	2501      	movhi	r5, #1
 801790a:	2d00      	cmp	r5, #0
 801790c:	f040 80b1 	bne.w	8017a72 <mem_malloc+0x1a2>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017910:	4871      	ldr	r0, [pc, #452]	; (8017ad8 <mem_malloc+0x208>)
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017912:	f06f 0b07 	mvn.w	fp, #7
  sys_mutex_lock(&mem_mutex);
 8017916:	f009 fa33 	bl	8020d80 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 801791a:	4b70      	ldr	r3, [pc, #448]	; (8017adc <mem_malloc+0x20c>)
      mem_free_count = 0;
 801791c:	46ae      	mov	lr, r5
 801791e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8017b08 <mem_malloc+0x238>
 8017922:	eba4 0c07 	sub.w	ip, r4, r7
  return (mem_size_t)((u8_t *)mem - ram);
 8017926:	6818      	ldr	r0, [r3, #0]
 8017928:	4d6d      	ldr	r5, [pc, #436]	; (8017ae0 <mem_malloc+0x210>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801792a:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 801792e:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017930:	b2b3      	uxth	r3, r6
 8017932:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8017934:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017936:	d97e      	bls.n	8017a36 <mem_malloc+0x166>
      mem_free_count = 0;
 8017938:	f885 e000 	strb.w	lr, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801793c:	ebab 0203 	sub.w	r2, fp, r3
      if (mem_free_count != 0) {
 8017940:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8017942:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 8017944:	2900      	cmp	r1, #0
 8017946:	d1f0      	bne.n	801792a <mem_malloc+0x5a>
      if ((!mem->used) &&
 8017948:	7923      	ldrb	r3, [r4, #4]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d16f      	bne.n	8017a2e <mem_malloc+0x15e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801794e:	8821      	ldrh	r1, [r4, #0]
 8017950:	440a      	add	r2, r1
 8017952:	460b      	mov	r3, r1
      if ((!mem->used) &&
 8017954:	42ba      	cmp	r2, r7
 8017956:	d3ec      	bcc.n	8017932 <mem_malloc+0x62>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017958:	f107 0314 	add.w	r3, r7, #20
 801795c:	429a      	cmp	r2, r3
 801795e:	d377      	bcc.n	8017a50 <mem_malloc+0x180>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8017960:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017964:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8017968:	44b2      	add	sl, r6
 801796a:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801796e:	459a      	cmp	sl, r3
 8017970:	f000 80a7 	beq.w	8017ac2 <mem_malloc+0x1f2>
  return (struct mem *)(void *)&ram[ptr];
 8017974:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 8017978:	2200      	movs	r2, #0
          mem2->next = mem->next;
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;
 801797a:	f04f 0c01 	mov.w	ip, #1
          mem2->used = 0;
 801797e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017980:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 8017984:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 8017988:	805e      	strh	r6, [r3, #2]
          mem->next = ptr2;
 801798a:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 801798e:	f884 c004 	strb.w	ip, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017992:	f830 300a 	ldrh.w	r3, [r0, sl]
 8017996:	4293      	cmp	r3, r2
 8017998:	d002      	beq.n	80179a0 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801799a:	4418      	add	r0, r3
 801799c:	f8a0 a002 	strh.w	sl, [r0, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80179a0:	4a50      	ldr	r2, [pc, #320]	; (8017ae4 <mem_malloc+0x214>)
 80179a2:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 80179a6:	f8b2 10ae 	ldrh.w	r1, [r2, #174]	; 0xae
 80179aa:	3308      	adds	r3, #8
 80179ac:	443b      	add	r3, r7
 80179ae:	b29b      	uxth	r3, r3
 80179b0:	4299      	cmp	r1, r3
 80179b2:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 80179b6:	d359      	bcc.n	8017a6c <mem_malloc+0x19c>
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80179b8:	f8d9 3000 	ldr.w	r3, [r9]
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80179bc:	4e4a      	ldr	r6, [pc, #296]	; (8017ae8 <mem_malloc+0x218>)
        if (mem == lfree) {
 80179be:	42a3      	cmp	r3, r4
 80179c0:	d11e      	bne.n	8017a00 <mem_malloc+0x130>
  return (struct mem *)(void *)&ram[ptr];
 80179c2:	4b46      	ldr	r3, [pc, #280]	; (8017adc <mem_malloc+0x20c>)
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 80179c4:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 80179c6:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 80179c8:	f8d3 c000 	ldr.w	ip, [r3]
          struct mem *cur = lfree;
 80179cc:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 80179d0:	791a      	ldrb	r2, [r3, #4]
 80179d2:	b942      	cbnz	r2, 80179e6 <mem_malloc+0x116>
 80179d4:	e009      	b.n	80179ea <mem_malloc+0x11a>
            mem_free_count = 0;
 80179d6:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 80179d8:	782a      	ldrb	r2, [r5, #0]
 80179da:	2a00      	cmp	r2, #0
 80179dc:	d14d      	bne.n	8017a7a <mem_malloc+0x1aa>
  return (struct mem *)(void *)&ram[ptr];
 80179de:	881b      	ldrh	r3, [r3, #0]
 80179e0:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 80179e2:	791a      	ldrb	r2, [r3, #4]
 80179e4:	b10a      	cbz	r2, 80179ea <mem_malloc+0x11a>
 80179e6:	4299      	cmp	r1, r3
 80179e8:	d1f5      	bne.n	80179d6 <mem_malloc+0x106>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 80179ea:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80179ee:	f8d9 3000 	ldr.w	r3, [r9]
 80179f2:	4299      	cmp	r1, r3
 80179f4:	d004      	beq.n	8017a00 <mem_malloc+0x130>
 80179f6:	f8d9 3000 	ldr.w	r3, [r9]
 80179fa:	791b      	ldrb	r3, [r3, #4]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d158      	bne.n	8017ab2 <mem_malloc+0x1e2>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017a00:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 8017a02:	4835      	ldr	r0, [pc, #212]	; (8017ad8 <mem_malloc+0x208>)
 8017a04:	f009 f9c2 	bl	8020d8c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017a08:	6833      	ldr	r3, [r6, #0]
 8017a0a:	4427      	add	r7, r4
 8017a0c:	42bb      	cmp	r3, r7
 8017a0e:	d348      	bcc.n	8017aa2 <mem_malloc+0x1d2>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017a10:	07a3      	lsls	r3, r4, #30
 8017a12:	d137      	bne.n	8017a84 <mem_malloc+0x1b4>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017a14:	f104 0518 	add.w	r5, r4, #24
  mem_overflow_init_raw(p, user_size);
 8017a18:	4641      	mov	r1, r8
  mem->user_size = user_size;
 8017a1a:	f8a4 8006 	strh.w	r8, [r4, #6]
  mem_overflow_init_raw(p, user_size);
 8017a1e:	4628      	mov	r0, r5
 8017a20:	f7ff fd30 	bl	8017484 <mem_overflow_init_raw>
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 8017a24:	f7ff fc08 	bl	8017238 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8017a28:	4628      	mov	r0, r5
 8017a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a2e:	8826      	ldrh	r6, [r4, #0]
 8017a30:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017a32:	459c      	cmp	ip, r3
 8017a34:	d880      	bhi.n	8017938 <mem_malloc+0x68>
  MEM_STATS_INC(err);
 8017a36:	4a2b      	ldr	r2, [pc, #172]	; (8017ae4 <mem_malloc+0x214>)
  return NULL;
 8017a38:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 8017a3a:	4827      	ldr	r0, [pc, #156]	; (8017ad8 <mem_malloc+0x208>)
  MEM_STATS_INC(err);
 8017a3c:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
 8017a40:	3301      	adds	r3, #1
 8017a42:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
  sys_mutex_unlock(&mem_mutex);
 8017a46:	f009 f9a1 	bl	8020d8c <sys_mutex_unlock>
}
 8017a4a:	4628      	mov	r0, r5
 8017a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8017a50:	4a24      	ldr	r2, [pc, #144]	; (8017ae4 <mem_malloc+0x214>)
          mem->used = 1;
 8017a52:	2301      	movs	r3, #1
 8017a54:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8017a56:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 8017a5a:	f8b2 00ae 	ldrh.w	r0, [r2, #174]	; 0xae
 8017a5e:	440b      	add	r3, r1
 8017a60:	1b9b      	subs	r3, r3, r6
 8017a62:	b29b      	uxth	r3, r3
 8017a64:	4298      	cmp	r0, r3
 8017a66:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 8017a6a:	d2a5      	bcs.n	80179b8 <mem_malloc+0xe8>
 8017a6c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8017a70:	e7a2      	b.n	80179b8 <mem_malloc+0xe8>
    return NULL;
 8017a72:	2500      	movs	r5, #0
}
 8017a74:	4628      	mov	r0, r5
 8017a76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem == lfree) {
 8017a7a:	f8d9 3000 	ldr.w	r3, [r9]
 8017a7e:	42a3      	cmp	r3, r4
 8017a80:	d0a4      	beq.n	80179cc <mem_malloc+0xfc>
 8017a82:	e7bd      	b.n	8017a00 <mem_malloc+0x130>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017a84:	4b19      	ldr	r3, [pc, #100]	; (8017aec <mem_malloc+0x21c>)
 8017a86:	f240 32bb 	movw	r2, #955	; 0x3bb
 8017a8a:	4919      	ldr	r1, [pc, #100]	; (8017af0 <mem_malloc+0x220>)
 8017a8c:	4819      	ldr	r0, [pc, #100]	; (8017af4 <mem_malloc+0x224>)
 8017a8e:	f00a fd19 	bl	80224c4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017a92:	4b16      	ldr	r3, [pc, #88]	; (8017aec <mem_malloc+0x21c>)
 8017a94:	f240 32bd 	movw	r2, #957	; 0x3bd
 8017a98:	4917      	ldr	r1, [pc, #92]	; (8017af8 <mem_malloc+0x228>)
 8017a9a:	4816      	ldr	r0, [pc, #88]	; (8017af4 <mem_malloc+0x224>)
 8017a9c:	f00a fd12 	bl	80224c4 <iprintf>
 8017aa0:	e7b8      	b.n	8017a14 <mem_malloc+0x144>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017aa2:	4b12      	ldr	r3, [pc, #72]	; (8017aec <mem_malloc+0x21c>)
 8017aa4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8017aa8:	4914      	ldr	r1, [pc, #80]	; (8017afc <mem_malloc+0x22c>)
 8017aaa:	4812      	ldr	r0, [pc, #72]	; (8017af4 <mem_malloc+0x224>)
 8017aac:	f00a fd0a 	bl	80224c4 <iprintf>
 8017ab0:	e7ae      	b.n	8017a10 <mem_malloc+0x140>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017ab2:	4b0e      	ldr	r3, [pc, #56]	; (8017aec <mem_malloc+0x21c>)
 8017ab4:	f240 32b5 	movw	r2, #949	; 0x3b5
 8017ab8:	4911      	ldr	r1, [pc, #68]	; (8017b00 <mem_malloc+0x230>)
 8017aba:	480e      	ldr	r0, [pc, #56]	; (8017af4 <mem_malloc+0x224>)
 8017abc:	f00a fd02 	bl	80224c4 <iprintf>
 8017ac0:	e79e      	b.n	8017a00 <mem_malloc+0x130>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017ac2:	4b0a      	ldr	r3, [pc, #40]	; (8017aec <mem_malloc+0x21c>)
 8017ac4:	f240 3287 	movw	r2, #903	; 0x387
 8017ac8:	490e      	ldr	r1, [pc, #56]	; (8017b04 <mem_malloc+0x234>)
 8017aca:	480a      	ldr	r0, [pc, #40]	; (8017af4 <mem_malloc+0x224>)
 8017acc:	f00a fcfa 	bl	80224c4 <iprintf>
 8017ad0:	4b02      	ldr	r3, [pc, #8]	; (8017adc <mem_malloc+0x20c>)
 8017ad2:	8821      	ldrh	r1, [r4, #0]
 8017ad4:	6818      	ldr	r0, [r3, #0]
 8017ad6:	e74d      	b.n	8017974 <mem_malloc+0xa4>
 8017ad8:	2001a8d8 	.word	0x2001a8d8
 8017adc:	2001a8dc 	.word	0x2001a8dc
 8017ae0:	2001a8d4 	.word	0x2001a8d4
 8017ae4:	2002e08c 	.word	0x2002e08c
 8017ae8:	2001a8e0 	.word	0x2001a8e0
 8017aec:	0803f220 	.word	0x0803f220
 8017af0:	0803f52c 	.word	0x0803f52c
 8017af4:	08028d24 	.word	0x08028d24
 8017af8:	0803f55c 	.word	0x0803f55c
 8017afc:	0803f4fc 	.word	0x0803f4fc
 8017b00:	0803f4e0 	.word	0x0803f4e0
 8017b04:	0803f4cc 	.word	0x0803f4cc
 8017b08:	2001a8d0 	.word	0x2001a8d0

08017b0c <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 8017b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b10:	4f12      	ldr	r7, [pc, #72]	; (8017b5c <memp_overflow_check_all+0x50>)
 8017b12:	2308      	movs	r3, #8
 8017b14:	4c12      	ldr	r4, [pc, #72]	; (8017b60 <memp_overflow_check_all+0x54>)
 8017b16:	f107 083c 	add.w	r8, r7, #60	; 0x3c
 8017b1a:	4d12      	ldr	r5, [pc, #72]	; (8017b64 <memp_overflow_check_all+0x58>)
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8017b1c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8017b68 <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8017b20:	3403      	adds	r4, #3
 8017b22:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8017b26:	b183      	cbz	r3, 8017b4a <memp_overflow_check_all+0x3e>
 8017b28:	8929      	ldrh	r1, [r5, #8]
 8017b2a:	2600      	movs	r6, #0
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8017b2c:	3601      	adds	r6, #1
 8017b2e:	f104 001c 	add.w	r0, r4, #28
 8017b32:	682b      	ldr	r3, [r5, #0]
 8017b34:	464a      	mov	r2, r9
 8017b36:	f7ff fc59 	bl	80173ec <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8017b3a:	8929      	ldrh	r1, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8017b3c:	b2b3      	uxth	r3, r6
 8017b3e:	8968      	ldrh	r0, [r5, #10]
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8017b40:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8017b44:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8017b46:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8017b48:	d8f0      	bhi.n	8017b2c <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 8017b4a:	45b8      	cmp	r8, r7
 8017b4c:	d004      	beq.n	8017b58 <memp_overflow_check_all+0x4c>
 8017b4e:	f857 5b04 	ldr.w	r5, [r7], #4
 8017b52:	68ec      	ldr	r4, [r5, #12]
 8017b54:	896b      	ldrh	r3, [r5, #10]
 8017b56:	e7e3      	b.n	8017b20 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 8017b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b5c:	0803f83c 	.word	0x0803f83c
 8017b60:	20022280 	.word	0x20022280
 8017b64:	0803f784 	.word	0x0803f784
 8017b68:	0803f580 	.word	0x0803f580

08017b6c <do_memp_malloc_pool_fn.isra.0>:

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
 8017b6c:	b570      	push	{r4, r5, r6, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8017b6e:	680c      	ldr	r4, [r1, #0]
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
 8017b70:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8017b72:	b19c      	cbz	r4, 8017b9c <do_memp_malloc_pool_fn.isra.0+0x30>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017b74:	6826      	ldr	r6, [r4, #0]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 8017b76:	2000      	movs	r0, #0
    *desc->tab = memp->next;
 8017b78:	600e      	str	r6, [r1, #0]
    memp->next = NULL;
 8017b7a:	6020      	str	r0, [r4, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 8017b7c:	e9c4 2301 	strd	r2, r3, [r4, #4]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017b80:	07a3      	lsls	r3, r4, #30
 8017b82:	d111      	bne.n	8017ba8 <do_memp_malloc_pool_fn.isra.0+0x3c>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8017b84:	682a      	ldr	r2, [r5, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8017b86:	341c      	adds	r4, #28
    desc->stats->used++;
 8017b88:	8893      	ldrh	r3, [r2, #4]
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8017b8a:	4620      	mov	r0, r4
    if (desc->stats->used > desc->stats->max) {
 8017b8c:	88d1      	ldrh	r1, [r2, #6]
    desc->stats->used++;
 8017b8e:	3301      	adds	r3, #1
 8017b90:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 8017b92:	4299      	cmp	r1, r3
    desc->stats->used++;
 8017b94:	8093      	strh	r3, [r2, #4]
      desc->stats->max = desc->stats->used;
 8017b96:	bf38      	it	cc
 8017b98:	80d3      	strhcc	r3, [r2, #6]
}
 8017b9a:	bd70      	pop	{r4, r5, r6, pc}
    desc->stats->err++;
 8017b9c:	6802      	ldr	r2, [r0, #0]
}
 8017b9e:	4620      	mov	r0, r4
    desc->stats->err++;
 8017ba0:	8813      	ldrh	r3, [r2, #0]
 8017ba2:	3301      	adds	r3, #1
 8017ba4:	8013      	strh	r3, [r2, #0]
}
 8017ba6:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017ba8:	4b03      	ldr	r3, [pc, #12]	; (8017bb8 <do_memp_malloc_pool_fn.isra.0+0x4c>)
 8017baa:	f44f 728c 	mov.w	r2, #280	; 0x118
 8017bae:	4903      	ldr	r1, [pc, #12]	; (8017bbc <do_memp_malloc_pool_fn.isra.0+0x50>)
 8017bb0:	4803      	ldr	r0, [pc, #12]	; (8017bc0 <do_memp_malloc_pool_fn.isra.0+0x54>)
 8017bb2:	f00a fc87 	bl	80224c4 <iprintf>
 8017bb6:	e7e5      	b.n	8017b84 <do_memp_malloc_pool_fn.isra.0+0x18>
 8017bb8:	0803f588 	.word	0x0803f588
 8017bbc:	0803f5b8 	.word	0x0803f5b8
 8017bc0:	08028d24 	.word	0x08028d24

08017bc4 <do_memp_free_pool.isra.0>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8017bc4:	0793      	lsls	r3, r2, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8017bc6:	b570      	push	{r4, r5, r6, lr}
 8017bc8:	4614      	mov	r4, r2
 8017bca:	4606      	mov	r6, r0
 8017bcc:	460d      	mov	r5, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8017bce:	d116      	bne.n	8017bfe <do_memp_free_pool.isra.0+0x3a>
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8017bd0:	6830      	ldr	r0, [r6, #0]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8017bd2:	f1a4 031c 	sub.w	r3, r4, #28
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017bd6:	6829      	ldr	r1, [r5, #0]
  desc->stats->used--;
 8017bd8:	8882      	ldrh	r2, [r0, #4]
  memp->next = *desc->tab;
 8017bda:	680d      	ldr	r5, [r1, #0]
  desc->stats->used--;
 8017bdc:	3a01      	subs	r2, #1
 8017bde:	8082      	strh	r2, [r0, #4]
  memp->next = *desc->tab;
 8017be0:	f844 5c1c 	str.w	r5, [r4, #-28]
  *desc->tab = memp;
 8017be4:	600b      	str	r3, [r1, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8017be6:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 8017bea:	b13a      	cbz	r2, 8017bfc <do_memp_free_pool.isra.0+0x38>
      if (t == h) {
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d00e      	beq.n	8017c0e <do_memp_free_pool.isra.0+0x4a>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8017bf0:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8017bf2:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8017bf4:	b112      	cbz	r2, 8017bfc <do_memp_free_pool.isra.0+0x38>
 8017bf6:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d1f6      	bne.n	8017bea <do_memp_free_pool.isra.0+0x26>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8017bfc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8017bfe:	4b08      	ldr	r3, [pc, #32]	; (8017c20 <do_memp_free_pool.isra.0+0x5c>)
 8017c00:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8017c04:	4907      	ldr	r1, [pc, #28]	; (8017c24 <do_memp_free_pool.isra.0+0x60>)
 8017c06:	4808      	ldr	r0, [pc, #32]	; (8017c28 <do_memp_free_pool.isra.0+0x64>)
 8017c08:	f00a fc5c 	bl	80224c4 <iprintf>
 8017c0c:	e7e0      	b.n	8017bd0 <do_memp_free_pool.isra.0+0xc>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8017c0e:	4b04      	ldr	r3, [pc, #16]	; (8017c20 <do_memp_free_pool.isra.0+0x5c>)
 8017c10:	f240 1285 	movw	r2, #389	; 0x185
 8017c14:	4905      	ldr	r1, [pc, #20]	; (8017c2c <do_memp_free_pool.isra.0+0x68>)
 8017c16:	4804      	ldr	r0, [pc, #16]	; (8017c28 <do_memp_free_pool.isra.0+0x64>)
}
 8017c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8017c1c:	f00a bc52 	b.w	80224c4 <iprintf>
 8017c20:	0803f588 	.word	0x0803f588
 8017c24:	0803f5dc 	.word	0x0803f5dc
 8017c28:	08028d24 	.word	0x08028d24
 8017c2c:	0803f5fc 	.word	0x0803f5fc

08017c30 <memp_init_pool>:
{
 8017c30:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 8017c32:	2200      	movs	r2, #0
{
 8017c34:	4605      	mov	r5, r0
  *desc->tab = NULL;
 8017c36:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
  for (i = 0; i < desc->num; ++i) {
 8017c3a:	8940      	ldrh	r0, [r0, #10]
  *desc->tab = NULL;
 8017c3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8017c3e:	b1a8      	cbz	r0, 8017c6c <memp_init_pool+0x3c>
 8017c40:	3403      	adds	r4, #3
 8017c42:	8929      	ldrh	r1, [r5, #8]
 8017c44:	4616      	mov	r6, r2
 8017c46:	f024 0403 	bic.w	r4, r4, #3
 8017c4a:	e001      	b.n	8017c50 <memp_init_pool+0x20>
 8017c4c:	692b      	ldr	r3, [r5, #16]
 8017c4e:	681a      	ldr	r2, [r3, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8017c50:	f104 001c 	add.w	r0, r4, #28
    memp->next = *desc->tab;
 8017c54:	6022      	str	r2, [r4, #0]
    *desc->tab = memp;
 8017c56:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8017c58:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8017c5a:	f7ff fc13 	bl	8017484 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8017c5e:	8929      	ldrh	r1, [r5, #8]
  for (i = 0; i < desc->num; ++i) {
 8017c60:	8968      	ldrh	r0, [r5, #10]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 8017c62:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 8017c66:	42b0      	cmp	r0, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8017c68:	441c      	add	r4, r3
  for (i = 0; i < desc->num; ++i) {
 8017c6a:	dcef      	bgt.n	8017c4c <memp_init_pool+0x1c>
  desc->stats->avail = desc->num;
 8017c6c:	686b      	ldr	r3, [r5, #4]
 8017c6e:	8058      	strh	r0, [r3, #2]
}
 8017c70:	bd70      	pop	{r4, r5, r6, pc}
 8017c72:	bf00      	nop

08017c74 <memp_init>:
{
 8017c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c76:	4c0a      	ldr	r4, [pc, #40]	; (8017ca0 <memp_init+0x2c>)
 8017c78:	4e0a      	ldr	r6, [pc, #40]	; (8017ca4 <memp_init+0x30>)
 8017c7a:	f104 0740 	add.w	r7, r4, #64	; 0x40
 8017c7e:	4d0a      	ldr	r5, [pc, #40]	; (8017ca8 <memp_init+0x34>)
 8017c80:	e001      	b.n	8017c86 <memp_init+0x12>
 8017c82:	f856 5b04 	ldr.w	r5, [r6], #4
    memp_init_pool(memp_pools[i]);
 8017c86:	4628      	mov	r0, r5
 8017c88:	f7ff ffd2 	bl	8017c30 <memp_init_pool>
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8017c8c:	686b      	ldr	r3, [r5, #4]
 8017c8e:	f844 3b04 	str.w	r3, [r4], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017c92:	42bc      	cmp	r4, r7
 8017c94:	d1f5      	bne.n	8017c82 <memp_init+0xe>
}
 8017c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memp_overflow_check_all();
 8017c9a:	f7ff bf37 	b.w	8017b0c <memp_overflow_check_all>
 8017c9e:	bf00      	nop
 8017ca0:	2002e140 	.word	0x2002e140
 8017ca4:	0803f83c 	.word	0x0803f83c
 8017ca8:	0803f784 	.word	0x0803f784

08017cac <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017cac:	280f      	cmp	r0, #15
{
 8017cae:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017cb0:	d80f      	bhi.n	8017cd2 <memp_malloc_fn+0x26>
  memp_overflow_check_all();
 8017cb2:	460d      	mov	r5, r1
 8017cb4:	4616      	mov	r6, r2
 8017cb6:	4604      	mov	r4, r0
 8017cb8:	f7ff ff28 	bl	8017b0c <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8017cbc:	4909      	ldr	r1, [pc, #36]	; (8017ce4 <memp_malloc_fn+0x38>)
 8017cbe:	4633      	mov	r3, r6
 8017cc0:	462a      	mov	r2, r5
 8017cc2:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
}
 8017cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8017cca:	6901      	ldr	r1, [r0, #16]
 8017ccc:	3004      	adds	r0, #4
 8017cce:	f7ff bf4d 	b.w	8017b6c <do_memp_malloc_pool_fn.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017cd2:	4b05      	ldr	r3, [pc, #20]	; (8017ce8 <memp_malloc_fn+0x3c>)
 8017cd4:	f240 1257 	movw	r2, #343	; 0x157
 8017cd8:	4904      	ldr	r1, [pc, #16]	; (8017cec <memp_malloc_fn+0x40>)
 8017cda:	4805      	ldr	r0, [pc, #20]	; (8017cf0 <memp_malloc_fn+0x44>)
 8017cdc:	f00a fbf2 	bl	80224c4 <iprintf>
}
 8017ce0:	2000      	movs	r0, #0
 8017ce2:	bd70      	pop	{r4, r5, r6, pc}
 8017ce4:	0803f838 	.word	0x0803f838
 8017ce8:	0803f588 	.word	0x0803f588
 8017cec:	0803f608 	.word	0x0803f608
 8017cf0:	08028d24 	.word	0x08028d24

08017cf4 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017cf4:	280f      	cmp	r0, #15
 8017cf6:	d811      	bhi.n	8017d1c <memp_free+0x28>
{
 8017cf8:	b570      	push	{r4, r5, r6, lr}
 8017cfa:	460d      	mov	r5, r1

  if (mem == NULL) {
 8017cfc:	b169      	cbz	r1, 8017d1a <memp_free+0x26>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 8017cfe:	4604      	mov	r4, r0
 8017d00:	f7ff ff04 	bl	8017b0c <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017d04:	4b09      	ldr	r3, [pc, #36]	; (8017d2c <memp_free+0x38>)
 8017d06:	462a      	mov	r2, r5
 8017d08:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8017d10:	f100 0110 	add.w	r1, r0, #16
 8017d14:	3004      	adds	r0, #4
 8017d16:	f7ff bf55 	b.w	8017bc4 <do_memp_free_pool.isra.0>
}
 8017d1a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017d1c:	4b04      	ldr	r3, [pc, #16]	; (8017d30 <memp_free+0x3c>)
 8017d1e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8017d22:	4904      	ldr	r1, [pc, #16]	; (8017d34 <memp_free+0x40>)
 8017d24:	4804      	ldr	r0, [pc, #16]	; (8017d38 <memp_free+0x44>)
 8017d26:	f00a bbcd 	b.w	80224c4 <iprintf>
 8017d2a:	bf00      	nop
 8017d2c:	0803f838 	.word	0x0803f838
 8017d30:	0803f588 	.word	0x0803f588
 8017d34:	0803f628 	.word	0x0803f628
 8017d38:	08028d24 	.word	0x08028d24

08017d3c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8017d3c:	f06f 000b 	mvn.w	r0, #11
 8017d40:	4770      	bx	lr
 8017d42:	bf00      	nop

08017d44 <netif_issue_reports>:
{
 8017d44:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8017d46:	4604      	mov	r4, r0
{
 8017d48:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8017d4a:	b160      	cbz	r0, 8017d66 <netif_issue_reports+0x22>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017d4c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8017d50:	f003 0205 	and.w	r2, r3, #5
 8017d54:	2a05      	cmp	r2, #5
 8017d56:	d105      	bne.n	8017d64 <netif_issue_reports+0x20>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017d58:	07ea      	lsls	r2, r5, #31
 8017d5a:	d503      	bpl.n	8017d64 <netif_issue_reports+0x20>
 8017d5c:	6862      	ldr	r2, [r4, #4]
 8017d5e:	b10a      	cbz	r2, 8017d64 <netif_issue_reports+0x20>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8017d60:	071b      	lsls	r3, r3, #28
 8017d62:	d408      	bmi.n	8017d76 <netif_issue_reports+0x32>
}
 8017d64:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8017d66:	4b07      	ldr	r3, [pc, #28]	; (8017d84 <netif_issue_reports+0x40>)
 8017d68:	f240 326d 	movw	r2, #877	; 0x36d
 8017d6c:	4906      	ldr	r1, [pc, #24]	; (8017d88 <netif_issue_reports+0x44>)
 8017d6e:	4807      	ldr	r0, [pc, #28]	; (8017d8c <netif_issue_reports+0x48>)
 8017d70:	f00a fba8 	bl	80224c4 <iprintf>
 8017d74:	e7ea      	b.n	8017d4c <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8017d76:	1d21      	adds	r1, r4, #4
 8017d78:	4620      	mov	r0, r4
}
 8017d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 8017d7e:	f007 bdb7 	b.w	801f8f0 <etharp_request>
 8017d82:	bf00      	nop
 8017d84:	0803f878 	.word	0x0803f878
 8017d88:	0803f8ac 	.word	0x0803f8ac
 8017d8c:	08028d24 	.word	0x08028d24

08017d90 <netif_do_set_ipaddr>:
{
 8017d90:	b570      	push	{r4, r5, r6, lr}
 8017d92:	4605      	mov	r5, r0
 8017d94:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8017d96:	460c      	mov	r4, r1
{
 8017d98:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8017d9a:	b309      	cbz	r1, 8017de0 <netif_do_set_ipaddr+0x50>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8017d9c:	686b      	ldr	r3, [r5, #4]
 8017d9e:	6822      	ldr	r2, [r4, #0]
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d102      	bne.n	8017daa <netif_do_set_ipaddr+0x1a>
  return 0; /* address unchanged */
 8017da4:	2000      	movs	r0, #0
}
 8017da6:	b002      	add	sp, #8
 8017da8:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8017daa:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8017dac:	4630      	mov	r0, r6
 8017dae:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 8017db0:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8017db2:	f002 f8f9 	bl	8019fa8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8017db6:	a901      	add	r1, sp, #4
 8017db8:	4630      	mov	r0, r6
 8017dba:	f005 fd83 	bl	801d8c4 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8017dbe:	a901      	add	r1, sp, #4
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	f000 fe99 	bl	8018af8 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8017dc6:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017dc8:	2101      	movs	r1, #1
 8017dca:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8017dcc:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017dce:	f7ff ffb9 	bl	8017d44 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 8017dd2:	69eb      	ldr	r3, [r5, #28]
 8017dd4:	b10b      	cbz	r3, 8017dda <netif_do_set_ipaddr+0x4a>
 8017dd6:	4628      	mov	r0, r5
 8017dd8:	4798      	blx	r3
    return 1; /* address changed */
 8017dda:	2001      	movs	r0, #1
}
 8017ddc:	b002      	add	sp, #8
 8017dde:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8017de0:	4b03      	ldr	r3, [pc, #12]	; (8017df0 <netif_do_set_ipaddr+0x60>)
 8017de2:	f240 12cb 	movw	r2, #459	; 0x1cb
 8017de6:	4903      	ldr	r1, [pc, #12]	; (8017df4 <netif_do_set_ipaddr+0x64>)
 8017de8:	4803      	ldr	r0, [pc, #12]	; (8017df8 <netif_do_set_ipaddr+0x68>)
 8017dea:	f00a fb6b 	bl	80224c4 <iprintf>
 8017dee:	e7d5      	b.n	8017d9c <netif_do_set_ipaddr+0xc>
 8017df0:	0803f878 	.word	0x0803f878
 8017df4:	0803f8d0 	.word	0x0803f8d0
 8017df8:	08028d24 	.word	0x08028d24

08017dfc <netif_init>:
}
 8017dfc:	4770      	bx	lr
 8017dfe:	bf00      	nop

08017e00 <netif_set_addr>:
{
 8017e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8017e02:	4e15      	ldr	r6, [pc, #84]	; (8017e58 <netif_set_addr+0x58>)
{
 8017e04:	b083      	sub	sp, #12
 8017e06:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8017e08:	2900      	cmp	r1, #0
 8017e0a:	bf14      	ite	ne
 8017e0c:	460f      	movne	r7, r1
 8017e0e:	4637      	moveq	r7, r6
    netmask = IP4_ADDR_ANY4;
 8017e10:	2a00      	cmp	r2, #0
 8017e12:	bf14      	ite	ne
 8017e14:	4615      	movne	r5, r2
 8017e16:	4635      	moveq	r5, r6
    gw = IP4_ADDR_ANY4;
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	bf18      	it	ne
 8017e1c:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	b16b      	cbz	r3, 8017e3e <netif_set_addr+0x3e>
 8017e22:	2100      	movs	r1, #0
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8017e24:	682b      	ldr	r3, [r5, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8017e26:	68a2      	ldr	r2, [r4, #8]
 8017e28:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8017e2a:	68e2      	ldr	r2, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8017e2c:	bf18      	it	ne
 8017e2e:	60a3      	strne	r3, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017e30:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8017e32:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8017e34:	bf18      	it	ne
 8017e36:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8017e38:	b139      	cbz	r1, 8017e4a <netif_set_addr+0x4a>
}
 8017e3a:	b003      	add	sp, #12
 8017e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017e3e:	4639      	mov	r1, r7
 8017e40:	aa01      	add	r2, sp, #4
 8017e42:	f7ff ffa5 	bl	8017d90 <netif_do_set_ipaddr>
 8017e46:	2101      	movs	r1, #1
 8017e48:	e7ec      	b.n	8017e24 <netif_set_addr+0x24>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017e4a:	4639      	mov	r1, r7
 8017e4c:	aa01      	add	r2, sp, #4
 8017e4e:	4620      	mov	r0, r4
 8017e50:	f7ff ff9e 	bl	8017d90 <netif_do_set_ipaddr>
}
 8017e54:	b003      	add	sp, #12
 8017e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e58:	08041a0c 	.word	0x08041a0c

08017e5c <netif_add>:
{
 8017e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8017e62:	4606      	mov	r6, r0
 8017e64:	2800      	cmp	r0, #0
 8017e66:	d07d      	beq.n	8017f64 <netif_add+0x108>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017e68:	2f00      	cmp	r7, #0
 8017e6a:	f000 8084 	beq.w	8017f76 <netif_add+0x11a>
  if (ipaddr == NULL) {
 8017e6e:	4688      	mov	r8, r1
  netif->num = netif_num;
 8017e70:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8017fa0 <netif_add+0x144>
  netif->state = state;
 8017e74:	990a      	ldr	r1, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017e76:	2400      	movs	r4, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017e78:	4d43      	ldr	r5, [pc, #268]	; (8017f88 <netif_add+0x12c>)
  netif->state = state;
 8017e7a:	6241      	str	r1, [r0, #36]	; 0x24
  netif->num = netif_num;
 8017e7c:	f89a e000 	ldrb.w	lr, [sl]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017e80:	42a3      	cmp	r3, r4
 8017e82:	bf08      	it	eq
 8017e84:	462b      	moveq	r3, r5
  netif->input = input;
 8017e86:	990c      	ldr	r1, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017e88:	42a2      	cmp	r2, r4
 8017e8a:	bf08      	it	eq
 8017e8c:	462a      	moveq	r2, r5
  netif->output = netif_null_output_ip4;
 8017e8e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8017fa4 <netif_add+0x148>
  netif->input = input;
 8017e92:	6101      	str	r1, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017e94:	45a0      	cmp	r8, r4
 8017e96:	bf14      	ite	ne
 8017e98:	4641      	movne	r1, r8
 8017e9a:	4629      	moveq	r1, r5
  netif->num = netif_num;
 8017e9c:	f880 e038 	strb.w	lr, [r0, #56]	; 0x38
  ip_addr_set_zero_ip4(&netif->gw);
 8017ea0:	60c4      	str	r4, [r0, #12]
  netif->mtu = 0;
 8017ea2:	8584      	strh	r4, [r0, #44]	; 0x2c
  netif->flags = 0;
 8017ea4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8017ea8:	6284      	str	r4, [r0, #40]	; 0x28
  netif->output = netif_null_output_ip4;
 8017eaa:	f8c0 c014 	str.w	ip, [r0, #20]
  ip_addr_set_zero_ip4(&netif->netmask);
 8017eae:	e9c0 4401 	strd	r4, r4, [r0, #4]
  netif->link_callback = NULL;
 8017eb2:	e9c0 4407 	strd	r4, r4, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017eb6:	f7ff ffa3 	bl	8017e00 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8017eba:	4630      	mov	r0, r6
 8017ebc:	47b8      	blx	r7
 8017ebe:	2800      	cmp	r0, #0
 8017ec0:	d14d      	bne.n	8017f5e <netif_add+0x102>
 8017ec2:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 8017ec6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8017fa8 <netif_add+0x14c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017eca:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8017f94 <netif_add+0x138>
 8017ece:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8017fac <netif_add+0x150>
 8017ed2:	4f2e      	ldr	r7, [pc, #184]	; (8017f8c <netif_add+0x130>)
      if (netif->num == 255) {
 8017ed4:	2aff      	cmp	r2, #255	; 0xff
 8017ed6:	d102      	bne.n	8017ede <netif_add+0x82>
        netif->num = 0;
 8017ed8:	2300      	movs	r3, #0
 8017eda:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017ede:	f8d8 4000 	ldr.w	r4, [r8]
 8017ee2:	b3cc      	cbz	r4, 8017f58 <netif_add+0xfc>
      num_netifs = 0;
 8017ee4:	2500      	movs	r5, #0
 8017ee6:	e007      	b.n	8017ef8 <netif_add+0x9c>
        if (netif2->num == netif->num) {
 8017ee8:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8017eec:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8017ef0:	429a      	cmp	r2, r3
 8017ef2:	d014      	beq.n	8017f1e <netif_add+0xc2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017ef4:	6824      	ldr	r4, [r4, #0]
 8017ef6:	b1fc      	cbz	r4, 8017f38 <netif_add+0xdc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017ef8:	42a6      	cmp	r6, r4
        num_netifs++;
 8017efa:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017efe:	d013      	beq.n	8017f28 <netif_add+0xcc>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8017f00:	2dff      	cmp	r5, #255	; 0xff
 8017f02:	ddf1      	ble.n	8017ee8 <netif_add+0x8c>
 8017f04:	465b      	mov	r3, fp
 8017f06:	f240 128d 	movw	r2, #397	; 0x18d
 8017f0a:	4921      	ldr	r1, [pc, #132]	; (8017f90 <netif_add+0x134>)
 8017f0c:	4638      	mov	r0, r7
 8017f0e:	f00a fad9 	bl	80224c4 <iprintf>
        if (netif2->num == netif->num) {
 8017f12:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8017f16:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d1ea      	bne.n	8017ef4 <netif_add+0x98>
          netif->num++;
 8017f1e:	3201      	adds	r2, #1
 8017f20:	b2d2      	uxtb	r2, r2
 8017f22:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 8017f26:	e7d5      	b.n	8017ed4 <netif_add+0x78>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017f28:	465b      	mov	r3, fp
 8017f2a:	f240 128b 	movw	r2, #395	; 0x18b
 8017f2e:	4649      	mov	r1, r9
 8017f30:	4638      	mov	r0, r7
 8017f32:	f00a fac7 	bl	80224c4 <iprintf>
 8017f36:	e7e3      	b.n	8017f00 <netif_add+0xa4>
 8017f38:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 8017f3c:	2bfe      	cmp	r3, #254	; 0xfe
 8017f3e:	d009      	beq.n	8017f54 <netif_add+0xf8>
    netif_num = (u8_t)(netif->num + 1);
 8017f40:	3301      	adds	r3, #1
 8017f42:	b2db      	uxtb	r3, r3
  return netif;
 8017f44:	4630      	mov	r0, r6
  netif->next = netif_list;
 8017f46:	6034      	str	r4, [r6, #0]
 8017f48:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 8017f4c:	f8c8 6000 	str.w	r6, [r8]
}
 8017f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netif_num = 0;
 8017f54:	2300      	movs	r3, #0
 8017f56:	e7f5      	b.n	8017f44 <netif_add+0xe8>
 8017f58:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8017f5c:	e7ee      	b.n	8017f3c <netif_add+0xe0>
    return NULL;
 8017f5e:	4620      	mov	r0, r4
}
 8017f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8017f64:	4b0b      	ldr	r3, [pc, #44]	; (8017f94 <netif_add+0x138>)
 8017f66:	f240 1227 	movw	r2, #295	; 0x127
 8017f6a:	490b      	ldr	r1, [pc, #44]	; (8017f98 <netif_add+0x13c>)
 8017f6c:	4807      	ldr	r0, [pc, #28]	; (8017f8c <netif_add+0x130>)
 8017f6e:	f00a faa9 	bl	80224c4 <iprintf>
 8017f72:	4630      	mov	r0, r6
 8017f74:	e7ec      	b.n	8017f50 <netif_add+0xf4>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017f76:	4b07      	ldr	r3, [pc, #28]	; (8017f94 <netif_add+0x138>)
 8017f78:	f44f 7294 	mov.w	r2, #296	; 0x128
 8017f7c:	4907      	ldr	r1, [pc, #28]	; (8017f9c <netif_add+0x140>)
 8017f7e:	4803      	ldr	r0, [pc, #12]	; (8017f8c <netif_add+0x130>)
 8017f80:	f00a faa0 	bl	80224c4 <iprintf>
 8017f84:	4638      	mov	r0, r7
 8017f86:	e7e3      	b.n	8017f50 <netif_add+0xf4>
 8017f88:	08041a0c 	.word	0x08041a0c
 8017f8c:	08028d24 	.word	0x08028d24
 8017f90:	0803f934 	.word	0x0803f934
 8017f94:	0803f878 	.word	0x0803f878
 8017f98:	0803f8e0 	.word	0x0803f8e0
 8017f9c:	0803f8fc 	.word	0x0803f8fc
 8017fa0:	2001a9e4 	.word	0x2001a9e4
 8017fa4:	08017d3d 	.word	0x08017d3d
 8017fa8:	2002e080 	.word	0x2002e080
 8017fac:	0803f920 	.word	0x0803f920

08017fb0 <netif_set_default>:
  netif_default = netif;
 8017fb0:	4b01      	ldr	r3, [pc, #4]	; (8017fb8 <netif_set_default+0x8>)
 8017fb2:	6018      	str	r0, [r3, #0]
}
 8017fb4:	4770      	bx	lr
 8017fb6:	bf00      	nop
 8017fb8:	2002e084 	.word	0x2002e084

08017fbc <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8017fbc:	b198      	cbz	r0, 8017fe6 <netif_set_up+0x2a>
{
 8017fbe:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8017fc0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8017fc4:	4604      	mov	r4, r0
 8017fc6:	07da      	lsls	r2, r3, #31
 8017fc8:	d40c      	bmi.n	8017fe4 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8017fca:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 8017fce:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 8017fd0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 8017fd4:	b102      	cbz	r2, 8017fd8 <netif_set_up+0x1c>
 8017fd6:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017fd8:	4620      	mov	r0, r4
 8017fda:	2103      	movs	r1, #3
}
 8017fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017fe0:	f7ff beb0 	b.w	8017d44 <netif_issue_reports>
}
 8017fe4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8017fe6:	4b03      	ldr	r3, [pc, #12]	; (8017ff4 <netif_set_up+0x38>)
 8017fe8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8017fec:	4902      	ldr	r1, [pc, #8]	; (8017ff8 <netif_set_up+0x3c>)
 8017fee:	4803      	ldr	r0, [pc, #12]	; (8017ffc <netif_set_up+0x40>)
 8017ff0:	f00a ba68 	b.w	80224c4 <iprintf>
 8017ff4:	0803f878 	.word	0x0803f878
 8017ff8:	0803f964 	.word	0x0803f964
 8017ffc:	08028d24 	.word	0x08028d24

08018000 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8018000:	b1a8      	cbz	r0, 801802e <netif_set_down+0x2e>
{
 8018002:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8018004:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8018008:	4604      	mov	r4, r0
 801800a:	07da      	lsls	r2, r3, #31
 801800c:	d50b      	bpl.n	8018026 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801800e:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018012:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8018014:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018018:	d406      	bmi.n	8018028 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801801a:	69e3      	ldr	r3, [r4, #28]
 801801c:	b11b      	cbz	r3, 8018026 <netif_set_down+0x26>
 801801e:	4620      	mov	r0, r4
}
 8018020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 8018024:	4718      	bx	r3
}
 8018026:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8018028:	f007 f998 	bl	801f35c <etharp_cleanup_netif>
 801802c:	e7f5      	b.n	801801a <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801802e:	4b03      	ldr	r3, [pc, #12]	; (801803c <netif_set_down+0x3c>)
 8018030:	f240 329b 	movw	r2, #923	; 0x39b
 8018034:	4902      	ldr	r1, [pc, #8]	; (8018040 <netif_set_down+0x40>)
 8018036:	4803      	ldr	r0, [pc, #12]	; (8018044 <netif_set_down+0x44>)
 8018038:	f00a ba44 	b.w	80224c4 <iprintf>
 801803c:	0803f878 	.word	0x0803f878
 8018040:	0803f980 	.word	0x0803f980
 8018044:	08028d24 	.word	0x08028d24

08018048 <netif_set_status_callback>:
  if (netif) {
 8018048:	b100      	cbz	r0, 801804c <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801804a:	61c1      	str	r1, [r0, #28]
}
 801804c:	4770      	bx	lr
 801804e:	bf00      	nop

08018050 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018050:	b1b8      	cbz	r0, 8018082 <netif_set_link_up+0x32>
{
 8018052:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8018054:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8018058:	4604      	mov	r4, r0
 801805a:	075a      	lsls	r2, r3, #29
 801805c:	d500      	bpl.n	8018060 <netif_set_link_up+0x10>
}
 801805e:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8018060:	f043 0304 	orr.w	r3, r3, #4
 8018064:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 8018068:	f006 fc4a 	bl	801e900 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801806c:	2103      	movs	r1, #3
 801806e:	4620      	mov	r0, r4
 8018070:	f7ff fe68 	bl	8017d44 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8018074:	6a23      	ldr	r3, [r4, #32]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d0f1      	beq.n	801805e <netif_set_link_up+0xe>
 801807a:	4620      	mov	r0, r4
}
 801807c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8018080:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018082:	4b03      	ldr	r3, [pc, #12]	; (8018090 <netif_set_link_up+0x40>)
 8018084:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8018088:	4902      	ldr	r1, [pc, #8]	; (8018094 <netif_set_link_up+0x44>)
 801808a:	4803      	ldr	r0, [pc, #12]	; (8018098 <netif_set_link_up+0x48>)
 801808c:	f00a ba1a 	b.w	80224c4 <iprintf>
 8018090:	0803f878 	.word	0x0803f878
 8018094:	0803f9a0 	.word	0x0803f9a0
 8018098:	08028d24 	.word	0x08028d24

0801809c <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801809c:	b158      	cbz	r0, 80180b6 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801809e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80180a2:	0751      	lsls	r1, r2, #29
 80180a4:	d506      	bpl.n	80180b4 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80180a6:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 80180aa:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80180ac:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 80180b0:	b101      	cbz	r1, 80180b4 <netif_set_link_down+0x18>
 80180b2:	4708      	bx	r1
}
 80180b4:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80180b6:	4b03      	ldr	r3, [pc, #12]	; (80180c4 <netif_set_link_down+0x28>)
 80180b8:	f240 4206 	movw	r2, #1030	; 0x406
 80180bc:	4902      	ldr	r1, [pc, #8]	; (80180c8 <netif_set_link_down+0x2c>)
 80180be:	4803      	ldr	r0, [pc, #12]	; (80180cc <netif_set_link_down+0x30>)
 80180c0:	f00a ba00 	b.w	80224c4 <iprintf>
 80180c4:	0803f878 	.word	0x0803f878
 80180c8:	0803f9c4 	.word	0x0803f9c4
 80180cc:	08028d24 	.word	0x08028d24

080180d0 <netif_set_link_callback>:
  if (netif) {
 80180d0:	b100      	cbz	r0, 80180d4 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80180d2:	6201      	str	r1, [r0, #32]
}
 80180d4:	4770      	bx	lr
 80180d6:	bf00      	nop

080180d8 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80180d8:	4602      	mov	r2, r0
 80180da:	b158      	cbz	r0, 80180f4 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80180dc:	4b06      	ldr	r3, [pc, #24]	; (80180f8 <netif_get_by_index+0x20>)
 80180de:	6818      	ldr	r0, [r3, #0]
 80180e0:	b910      	cbnz	r0, 80180e8 <netif_get_by_index+0x10>
 80180e2:	e007      	b.n	80180f4 <netif_get_by_index+0x1c>
 80180e4:	6800      	ldr	r0, [r0, #0]
 80180e6:	b130      	cbz	r0, 80180f6 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 80180e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80180ec:	3301      	adds	r3, #1
 80180ee:	b2db      	uxtb	r3, r3
 80180f0:	4293      	cmp	r3, r2
 80180f2:	d1f7      	bne.n	80180e4 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 80180f4:	4770      	bx	lr
 80180f6:	4770      	bx	lr
 80180f8:	2002e080 	.word	0x2002e080

080180fc <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80180fc:	4907      	ldr	r1, [pc, #28]	; (801811c <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80180fe:	2200      	movs	r2, #0
 8018100:	4b07      	ldr	r3, [pc, #28]	; (8018120 <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018102:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018104:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018106:	b910      	cbnz	r0, 801810e <pbuf_free_ooseq_callback+0x12>
 8018108:	e006      	b.n	8018118 <pbuf_free_ooseq_callback+0x1c>
 801810a:	68c0      	ldr	r0, [r0, #12]
 801810c:	b120      	cbz	r0, 8018118 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801810e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8018110:	2b00      	cmp	r3, #0
 8018112:	d0fa      	beq.n	801810a <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8018114:	f001 bf72 	b.w	8019ffc <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8018118:	4770      	bx	lr
 801811a:	bf00      	nop
 801811c:	2002e198 	.word	0x2002e198
 8018120:	2002e088 	.word	0x2002e088

08018124 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8018124:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018126:	b310      	cbz	r0, 801816e <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8018128:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801812c:	d21d      	bcs.n	801816a <pbuf_add_header_impl+0x46>
    return 1;
  }
  if (header_size_increment == 0) {
 801812e:	b1a1      	cbz	r1, 801815a <pbuf_add_header_impl+0x36>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8018130:	b28d      	uxth	r5, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8018132:	8904      	ldrh	r4, [r0, #8]
 8018134:	4603      	mov	r3, r0
 8018136:	442c      	add	r4, r5
 8018138:	b2a4      	uxth	r4, r4
 801813a:	42a5      	cmp	r5, r4
 801813c:	d815      	bhi.n	801816a <pbuf_add_header_impl+0x46>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801813e:	f990 000c 	ldrsb.w	r0, [r0, #12]
 8018142:	2800      	cmp	r0, #0
 8018144:	db0b      	blt.n	801815e <pbuf_add_header_impl+0x3a>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018146:	b182      	cbz	r2, 801816a <pbuf_add_header_impl+0x46>
      payload = (u8_t *)p->payload - header_size_increment;
 8018148:	6858      	ldr	r0, [r3, #4]
 801814a:	1a41      	subs	r1, r0, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 801814c:	895a      	ldrh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);


  return 0;
 801814e:	2000      	movs	r0, #0
  p->payload = payload;
 8018150:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8018152:	4415      	add	r5, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8018154:	811c      	strh	r4, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8018156:	815d      	strh	r5, [r3, #10]
}
 8018158:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 801815a:	4608      	mov	r0, r1
}
 801815c:	bd38      	pop	{r3, r4, r5, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801815e:	6858      	ldr	r0, [r3, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018160:	f103 0210 	add.w	r2, r3, #16
    payload = (u8_t *)p->payload - header_size_increment;
 8018164:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018166:	4291      	cmp	r1, r2
 8018168:	d2f0      	bcs.n	801814c <pbuf_add_header_impl+0x28>
    return 1;
 801816a:	2001      	movs	r0, #1
}
 801816c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801816e:	4b04      	ldr	r3, [pc, #16]	; (8018180 <pbuf_add_header_impl+0x5c>)
 8018170:	f240 12df 	movw	r2, #479	; 0x1df
 8018174:	4903      	ldr	r1, [pc, #12]	; (8018184 <pbuf_add_header_impl+0x60>)
 8018176:	4804      	ldr	r0, [pc, #16]	; (8018188 <pbuf_add_header_impl+0x64>)
 8018178:	f00a f9a4 	bl	80224c4 <iprintf>
    return 1;
 801817c:	2001      	movs	r0, #1
}
 801817e:	bd38      	pop	{r3, r4, r5, pc}
 8018180:	0803f9e8 	.word	0x0803f9e8
 8018184:	08041480 	.word	0x08041480
 8018188:	08028d24 	.word	0x08028d24

0801818c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801818c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8018190:	2b01      	cmp	r3, #1
{
 8018192:	b570      	push	{r4, r5, r6, lr}
 8018194:	4614      	mov	r4, r2
 8018196:	4606      	mov	r6, r0
 8018198:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801819a:	d110      	bne.n	80181be <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801819c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80181a0:	490b      	ldr	r1, [pc, #44]	; (80181d0 <pbuf_alloc_reference+0x44>)
 80181a2:	200e      	movs	r0, #14
 80181a4:	f7ff fd82 	bl	8017cac <memp_malloc_fn>
  if (p == NULL) {
 80181a8:	b140      	cbz	r0, 80181bc <pbuf_alloc_reference+0x30>
  p->next = NULL;
 80181aa:	2300      	movs	r3, #0
  p->ref = 1;
 80181ac:	2201      	movs	r2, #1
  p->payload = payload;
 80181ae:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 80181b0:	8105      	strh	r5, [r0, #8]
  p->len = len;
 80181b2:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 80181b4:	7304      	strb	r4, [r0, #12]
  p->next = NULL;
 80181b6:	6003      	str	r3, [r0, #0]
  p->flags = flags;
 80181b8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80181ba:	81c2      	strh	r2, [r0, #14]
}
 80181bc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80181be:	4b04      	ldr	r3, [pc, #16]	; (80181d0 <pbuf_alloc_reference+0x44>)
 80181c0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80181c4:	4903      	ldr	r1, [pc, #12]	; (80181d4 <pbuf_alloc_reference+0x48>)
 80181c6:	4804      	ldr	r0, [pc, #16]	; (80181d8 <pbuf_alloc_reference+0x4c>)
 80181c8:	f00a f97c 	bl	80224c4 <iprintf>
 80181cc:	e7e6      	b.n	801819c <pbuf_alloc_reference+0x10>
 80181ce:	bf00      	nop
 80181d0:	0803f9e8 	.word	0x0803f9e8
 80181d4:	0803fa18 	.word	0x0803fa18
 80181d8:	08028d24 	.word	0x08028d24

080181dc <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80181dc:	3003      	adds	r0, #3
{
 80181de:	b470      	push	{r4, r5, r6}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80181e0:	f020 0403 	bic.w	r4, r0, #3
{
 80181e4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80181e8:	4618      	mov	r0, r3
 80181ea:	9b03      	ldr	r3, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80181ec:	190e      	adds	r6, r1, r4
 80181ee:	42ae      	cmp	r6, r5
 80181f0:	d80d      	bhi.n	801820e <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 80181f2:	b103      	cbz	r3, 80181f6 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80181f4:	4423      	add	r3, r4
  p->next = NULL;
 80181f6:	2600      	movs	r6, #0
  p->flags = flags;
 80181f8:	2502      	movs	r5, #2
  p->ref = 1;
 80181fa:	2401      	movs	r4, #1
  p->type_internal = (u8_t)type;
 80181fc:	7302      	strb	r2, [r0, #12]
  p->next = NULL;
 80181fe:	6006      	str	r6, [r0, #0]
  p->flags = flags;
 8018200:	7345      	strb	r5, [r0, #13]
  p->ref = 1;
 8018202:	81c4      	strh	r4, [r0, #14]
  p->payload = payload;
 8018204:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 8018206:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8018208:	8141      	strh	r1, [r0, #10]
}
 801820a:	bc70      	pop	{r4, r5, r6}
 801820c:	4770      	bx	lr
    return NULL;
 801820e:	2000      	movs	r0, #0
}
 8018210:	bc70      	pop	{r4, r5, r6}
 8018212:	4770      	bx	lr

08018214 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8018214:	2200      	movs	r2, #0
 8018216:	f7ff bf85 	b.w	8018124 <pbuf_add_header_impl>
 801821a:	bf00      	nop

0801821c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801821c:	b538      	push	{r3, r4, r5, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801821e:	b1a0      	cbz	r0, 801824a <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8018220:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8018224:	d21a      	bcs.n	801825c <pbuf_remove_header+0x40>
    return 1;
  }
  if (header_size_decrement == 0) {
 8018226:	b171      	cbz	r1, 8018246 <pbuf_remove_header+0x2a>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018228:	b28c      	uxth	r4, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801822a:	8942      	ldrh	r2, [r0, #10]
 801822c:	4603      	mov	r3, r0
 801822e:	42a2      	cmp	r2, r4
 8018230:	d316      	bcc.n	8018260 <pbuf_remove_header+0x44>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018232:	6840      	ldr	r0, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8018234:	1b12      	subs	r2, r2, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018236:	891d      	ldrh	r5, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018238:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801823a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801823c:	1b2c      	subs	r4, r5, r4

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801823e:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018240:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018242:	811c      	strh	r4, [r3, #8]
}
 8018244:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 8018246:	4608      	mov	r0, r1
}
 8018248:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801824a:	4b0a      	ldr	r3, [pc, #40]	; (8018274 <pbuf_remove_header+0x58>)
 801824c:	f240 224b 	movw	r2, #587	; 0x24b
 8018250:	4909      	ldr	r1, [pc, #36]	; (8018278 <pbuf_remove_header+0x5c>)
 8018252:	480a      	ldr	r0, [pc, #40]	; (801827c <pbuf_remove_header+0x60>)
 8018254:	f00a f936 	bl	80224c4 <iprintf>
    return 1;
 8018258:	2001      	movs	r0, #1
}
 801825a:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 801825c:	2001      	movs	r0, #1
}
 801825e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018260:	4b04      	ldr	r3, [pc, #16]	; (8018274 <pbuf_remove_header+0x58>)
 8018262:	f240 2255 	movw	r2, #597	; 0x255
 8018266:	4906      	ldr	r1, [pc, #24]	; (8018280 <pbuf_remove_header+0x64>)
 8018268:	4804      	ldr	r0, [pc, #16]	; (801827c <pbuf_remove_header+0x60>)
 801826a:	f00a f92b 	bl	80224c4 <iprintf>
 801826e:	2001      	movs	r0, #1
}
 8018270:	bd38      	pop	{r3, r4, r5, pc}
 8018272:	bf00      	nop
 8018274:	0803f9e8 	.word	0x0803f9e8
 8018278:	08041480 	.word	0x08041480
 801827c:	08028d24 	.word	0x08028d24
 8018280:	0803fa2c 	.word	0x0803fa2c

08018284 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8018284:	1e0b      	subs	r3, r1, #0
 8018286:	db02      	blt.n	801828e <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8018288:	2201      	movs	r2, #1
 801828a:	f7ff bf4b 	b.w	8018124 <pbuf_add_header_impl>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801828e:	4259      	negs	r1, r3
 8018290:	f7ff bfc4 	b.w	801821c <pbuf_remove_header>

08018294 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8018298:	4604      	mov	r4, r0
 801829a:	2800      	cmp	r0, #0
 801829c:	d052      	beq.n	8018344 <pbuf_free+0xb0>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801829e:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80182a0:	4f2d      	ldr	r7, [pc, #180]	; (8018358 <pbuf_free+0xc4>)
 80182a2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 801836c <pbuf_free+0xd8>
 80182a6:	4e2d      	ldr	r6, [pc, #180]	; (801835c <pbuf_free+0xc8>)
 80182a8:	e00a      	b.n	80182c0 <pbuf_free+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80182aa:	6923      	ldr	r3, [r4, #16]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d03b      	beq.n	8018328 <pbuf_free+0x94>
        pc->custom_free_function(p);
 80182b0:	4620      	mov	r0, r4
 80182b2:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 80182b4:	3501      	adds	r5, #1
 80182b6:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80182b8:	f1b9 0f00 	cmp.w	r9, #0
 80182bc:	d01b      	beq.n	80182f6 <pbuf_free+0x62>
 80182be:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80182c0:	7ba3      	ldrb	r3, [r4, #14]
 80182c2:	b1db      	cbz	r3, 80182fc <pbuf_free+0x68>
    ref = --(p->ref);
 80182c4:	3b01      	subs	r3, #1
 80182c6:	b2db      	uxtb	r3, r3
 80182c8:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 80182ca:	b9a3      	cbnz	r3, 80182f6 <pbuf_free+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80182cc:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 80182ce:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80182d2:	079b      	lsls	r3, r3, #30
 80182d4:	d4e9      	bmi.n	80182aa <pbuf_free+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 80182d6:	7b23      	ldrb	r3, [r4, #12]
 80182d8:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80182dc:	2b02      	cmp	r3, #2
 80182de:	d01e      	beq.n	801831e <pbuf_free+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80182e0:	2b01      	cmp	r3, #1
 80182e2:	d02a      	beq.n	801833a <pbuf_free+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80182e4:	b99b      	cbnz	r3, 801830e <pbuf_free+0x7a>
      count++;
 80182e6:	3501      	adds	r5, #1
          mem_free(p);
 80182e8:	4620      	mov	r0, r4
 80182ea:	f7ff f917 	bl	801751c <mem_free>
      count++;
 80182ee:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80182f0:	f1b9 0f00 	cmp.w	r9, #0
 80182f4:	d1e3      	bne.n	80182be <pbuf_free+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80182f6:	4628      	mov	r0, r5
 80182f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80182fc:	463b      	mov	r3, r7
 80182fe:	f240 22f1 	movw	r2, #753	; 0x2f1
 8018302:	4641      	mov	r1, r8
 8018304:	4630      	mov	r0, r6
 8018306:	f00a f8dd 	bl	80224c4 <iprintf>
 801830a:	7ba3      	ldrb	r3, [r4, #14]
 801830c:	e7da      	b.n	80182c4 <pbuf_free+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801830e:	463b      	mov	r3, r7
 8018310:	f240 320f 	movw	r2, #783	; 0x30f
 8018314:	4912      	ldr	r1, [pc, #72]	; (8018360 <pbuf_free+0xcc>)
 8018316:	4630      	mov	r0, r6
 8018318:	f00a f8d4 	bl	80224c4 <iprintf>
 801831c:	e7ca      	b.n	80182b4 <pbuf_free+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801831e:	4621      	mov	r1, r4
 8018320:	200f      	movs	r0, #15
 8018322:	f7ff fce7 	bl	8017cf4 <memp_free>
 8018326:	e7c5      	b.n	80182b4 <pbuf_free+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8018328:	463b      	mov	r3, r7
 801832a:	f240 22ff 	movw	r2, #767	; 0x2ff
 801832e:	490d      	ldr	r1, [pc, #52]	; (8018364 <pbuf_free+0xd0>)
 8018330:	4630      	mov	r0, r6
 8018332:	f00a f8c7 	bl	80224c4 <iprintf>
 8018336:	6923      	ldr	r3, [r4, #16]
 8018338:	e7ba      	b.n	80182b0 <pbuf_free+0x1c>
          memp_free(MEMP_PBUF, p);
 801833a:	4621      	mov	r1, r4
 801833c:	200e      	movs	r0, #14
 801833e:	f7ff fcd9 	bl	8017cf4 <memp_free>
 8018342:	e7b7      	b.n	80182b4 <pbuf_free+0x20>
    return 0;
 8018344:	4605      	mov	r5, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 8018346:	4b04      	ldr	r3, [pc, #16]	; (8018358 <pbuf_free+0xc4>)
 8018348:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801834c:	4906      	ldr	r1, [pc, #24]	; (8018368 <pbuf_free+0xd4>)
 801834e:	4803      	ldr	r0, [pc, #12]	; (801835c <pbuf_free+0xc8>)
 8018350:	f00a f8b8 	bl	80224c4 <iprintf>
    return 0;
 8018354:	e7cf      	b.n	80182f6 <pbuf_free+0x62>
 8018356:	bf00      	nop
 8018358:	0803f9e8 	.word	0x0803f9e8
 801835c:	08028d24 	.word	0x08028d24
 8018360:	0803fa88 	.word	0x0803fa88
 8018364:	0803fa64 	.word	0x0803fa64
 8018368:	08041480 	.word	0x08041480
 801836c:	0803fa4c 	.word	0x0803fa4c

08018370 <pbuf_alloc>:
  switch (type) {
 8018370:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8018374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018378:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801837a:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801837e:	d03d      	beq.n	80183fc <pbuf_alloc+0x8c>
 8018380:	d80e      	bhi.n	80183a0 <pbuf_alloc+0x30>
 8018382:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 8018386:	2c01      	cmp	r4, #1
 8018388:	d033      	beq.n	80183f2 <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801838a:	4b41      	ldr	r3, [pc, #260]	; (8018490 <pbuf_alloc+0x120>)
 801838c:	f240 1227 	movw	r2, #295	; 0x127
 8018390:	4940      	ldr	r1, [pc, #256]	; (8018494 <pbuf_alloc+0x124>)
      return NULL;
 8018392:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018394:	4840      	ldr	r0, [pc, #256]	; (8018498 <pbuf_alloc+0x128>)
 8018396:	f00a f895 	bl	80224c4 <iprintf>
}
 801839a:	4628      	mov	r0, r5
 801839c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 80183a0:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80183a4:	d1f1      	bne.n	801838a <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80183a6:	f10a 0303 	add.w	r3, sl, #3
 80183aa:	1cca      	adds	r2, r1, #3
 80183ac:	4606      	mov	r6, r0
 80183ae:	f022 0203 	bic.w	r2, r2, #3
 80183b2:	f023 0303 	bic.w	r3, r3, #3
 80183b6:	4413      	add	r3, r2
 80183b8:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80183ba:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80183be:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80183c0:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80183c2:	d34d      	bcc.n	8018460 <pbuf_alloc+0xf0>
 80183c4:	4282      	cmp	r2, r0
 80183c6:	d84b      	bhi.n	8018460 <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80183c8:	f7ff fa82 	bl	80178d0 <mem_malloc>
      if (p == NULL) {
 80183cc:	4605      	mov	r5, r0
 80183ce:	2800      	cmp	r0, #0
 80183d0:	d0e3      	beq.n	801839a <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80183d2:	1983      	adds	r3, r0, r6
  p->next = NULL;
 80183d4:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 80183d6:	4a31      	ldr	r2, [pc, #196]	; (801849c <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80183d8:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 80183da:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->len = len;
 80183de:	f8a0 900a 	strh.w	r9, [r0, #10]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80183e2:	f023 0303 	bic.w	r3, r3, #3
  p->next = NULL;
 80183e6:	6001      	str	r1, [r0, #0]
  p->type_internal = (u8_t)type;
 80183e8:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 80183ea:	6043      	str	r3, [r0, #4]
}
 80183ec:	4628      	mov	r0, r5
 80183ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 80183f2:	2000      	movs	r0, #0
}
 80183f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 80183f8:	f7ff bec8 	b.w	801818c <pbuf_alloc_reference>
  switch (type) {
 80183fc:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80183fe:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8018490 <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 8018402:	4f27      	ldr	r7, [pc, #156]	; (80184a0 <pbuf_alloc+0x130>)
  switch (type) {
 8018404:	4625      	mov	r5, r4
 8018406:	e009      	b.n	801841c <pbuf_alloc+0xac>
          last->next = q;
 8018408:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801840a:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801840e:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 8018412:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 8018416:	f1b9 0f00 	cmp.w	r9, #0
 801841a:	d0be      	beq.n	801839a <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801841c:	22f3      	movs	r2, #243	; 0xf3
 801841e:	4641      	mov	r1, r8
 8018420:	200f      	movs	r0, #15
 8018422:	4626      	mov	r6, r4
 8018424:	f7ff fc42 	bl	8017cac <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018428:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801842c:	2100      	movs	r1, #0
        if (q == NULL) {
 801842e:	4604      	mov	r4, r0
 8018430:	b1d0      	cbz	r0, 8018468 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018432:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018436:	eb00 020a 	add.w	r2, r0, sl
  p->next = NULL;
 801843a:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801843c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018440:	3213      	adds	r2, #19
  p->tot_len = tot_len;
 8018442:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018446:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018448:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801844c:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801844e:	454b      	cmp	r3, r9
  p->payload = payload;
 8018450:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018452:	bf28      	it	cs
 8018454:	464b      	movcs	r3, r9
  p->len = len;
 8018456:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8018458:	2d00      	cmp	r5, #0
 801845a:	d1d5      	bne.n	8018408 <pbuf_alloc+0x98>
 801845c:	4605      	mov	r5, r0
 801845e:	e7d4      	b.n	801840a <pbuf_alloc+0x9a>
          return NULL;
 8018460:	2500      	movs	r5, #0
}
 8018462:	4628      	mov	r0, r5
 8018464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 8018468:	4e0e      	ldr	r6, [pc, #56]	; (80184a4 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801846a:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801846c:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801846e:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 8018470:	b133      	cbz	r3, 8018480 <pbuf_alloc+0x110>
          if (p) {
 8018472:	2d00      	cmp	r5, #0
 8018474:	d0f4      	beq.n	8018460 <pbuf_alloc+0xf0>
            pbuf_free(p);
 8018476:	4628      	mov	r0, r5
          return NULL;
 8018478:	2500      	movs	r5, #0
            pbuf_free(p);
 801847a:	f7ff ff0b 	bl	8018294 <pbuf_free>
 801847e:	e78c      	b.n	801839a <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018480:	4601      	mov	r1, r0
 8018482:	4809      	ldr	r0, [pc, #36]	; (80184a8 <pbuf_alloc+0x138>)
 8018484:	f7fc fec0 	bl	8015208 <tcpip_try_callback>
 8018488:	2800      	cmp	r0, #0
 801848a:	d0f2      	beq.n	8018472 <pbuf_alloc+0x102>
 801848c:	7034      	strb	r4, [r6, #0]
 801848e:	e7f0      	b.n	8018472 <pbuf_alloc+0x102>
 8018490:	0803f9e8 	.word	0x0803f9e8
 8018494:	0803fa9c 	.word	0x0803fa9c
 8018498:	08028d24 	.word	0x08028d24
 801849c:	00010080 	.word	0x00010080
 80184a0:	00010082 	.word	0x00010082
 80184a4:	2002e088 	.word	0x2002e088
 80184a8:	080180fd 	.word	0x080180fd

080184ac <pbuf_realloc>:
{
 80184ac:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80184ae:	4604      	mov	r4, r0
{
 80184b0:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80184b2:	2800      	cmp	r0, #0
 80184b4:	d02d      	beq.n	8018512 <pbuf_realloc+0x66>
  if (new_len >= p->tot_len) {
 80184b6:	8922      	ldrh	r2, [r4, #8]
 80184b8:	42aa      	cmp	r2, r5
 80184ba:	d929      	bls.n	8018510 <pbuf_realloc+0x64>
  while (rem_len > q->len) {
 80184bc:	8963      	ldrh	r3, [r4, #10]
 80184be:	429d      	cmp	r5, r3
 80184c0:	d90d      	bls.n	80184de <pbuf_realloc+0x32>
 80184c2:	1aa9      	subs	r1, r5, r2
 80184c4:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80184c6:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 80184c8:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80184ca:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 80184cc:	b29d      	uxth	r5, r3
    q = q->next;
 80184ce:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80184d0:	2c00      	cmp	r4, #0
 80184d2:	d02f      	beq.n	8018534 <pbuf_realloc+0x88>
  while (rem_len > q->len) {
 80184d4:	8963      	ldrh	r3, [r4, #10]
 80184d6:	42ab      	cmp	r3, r5
 80184d8:	d201      	bcs.n	80184de <pbuf_realloc+0x32>
 80184da:	8922      	ldrh	r2, [r4, #8]
 80184dc:	e7f3      	b.n	80184c6 <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80184de:	7b22      	ldrb	r2, [r4, #12]
 80184e0:	0712      	lsls	r2, r2, #28
 80184e2:	d10d      	bne.n	8018500 <pbuf_realloc+0x54>
 80184e4:	42ab      	cmp	r3, r5
 80184e6:	d00b      	beq.n	8018500 <pbuf_realloc+0x54>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80184e8:	7b63      	ldrb	r3, [r4, #13]
 80184ea:	079b      	lsls	r3, r3, #30
 80184ec:	d408      	bmi.n	8018500 <pbuf_realloc+0x54>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80184ee:	6863      	ldr	r3, [r4, #4]
 80184f0:	4620      	mov	r0, r4
 80184f2:	1b1b      	subs	r3, r3, r4
 80184f4:	18e9      	adds	r1, r5, r3
 80184f6:	b289      	uxth	r1, r1
 80184f8:	f7ff f8fa 	bl	80176f0 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80184fc:	4604      	mov	r4, r0
 80184fe:	b180      	cbz	r0, 8018522 <pbuf_realloc+0x76>
  if (q->next != NULL) {
 8018500:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8018502:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8018504:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8018506:	b108      	cbz	r0, 801850c <pbuf_realloc+0x60>
    pbuf_free(q->next);
 8018508:	f7ff fec4 	bl	8018294 <pbuf_free>
  q->next = NULL;
 801850c:	2300      	movs	r3, #0
 801850e:	6023      	str	r3, [r4, #0]
}
 8018510:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018512:	4b0d      	ldr	r3, [pc, #52]	; (8018548 <pbuf_realloc+0x9c>)
 8018514:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8018518:	490c      	ldr	r1, [pc, #48]	; (801854c <pbuf_realloc+0xa0>)
 801851a:	480d      	ldr	r0, [pc, #52]	; (8018550 <pbuf_realloc+0xa4>)
 801851c:	f009 ffd2 	bl	80224c4 <iprintf>
 8018520:	e7c9      	b.n	80184b6 <pbuf_realloc+0xa>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018522:	4b09      	ldr	r3, [pc, #36]	; (8018548 <pbuf_realloc+0x9c>)
 8018524:	f240 12bd 	movw	r2, #445	; 0x1bd
 8018528:	490a      	ldr	r1, [pc, #40]	; (8018554 <pbuf_realloc+0xa8>)
 801852a:	4809      	ldr	r0, [pc, #36]	; (8018550 <pbuf_realloc+0xa4>)
 801852c:	f009 ffca 	bl	80224c4 <iprintf>
  q->len = rem_len;
 8018530:	8164      	strh	r4, [r4, #10]
 8018532:	deff      	udf	#255	; 0xff
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018534:	4b04      	ldr	r3, [pc, #16]	; (8018548 <pbuf_realloc+0x9c>)
 8018536:	f240 12af 	movw	r2, #431	; 0x1af
 801853a:	4907      	ldr	r1, [pc, #28]	; (8018558 <pbuf_realloc+0xac>)
 801853c:	4804      	ldr	r0, [pc, #16]	; (8018550 <pbuf_realloc+0xa4>)
 801853e:	f009 ffc1 	bl	80224c4 <iprintf>
  while (rem_len > q->len) {
 8018542:	8963      	ldrh	r3, [r4, #10]
 8018544:	deff      	udf	#255	; 0xff
 8018546:	bf00      	nop
 8018548:	0803f9e8 	.word	0x0803f9e8
 801854c:	0803fab8 	.word	0x0803fab8
 8018550:	08028d24 	.word	0x08028d24
 8018554:	0803fae8 	.word	0x0803fae8
 8018558:	0803fad0 	.word	0x0803fad0

0801855c <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 801855c:	4603      	mov	r3, r0
 801855e:	b130      	cbz	r0, 801856e <pbuf_clen+0x12>
  len = 0;
 8018560:	2000      	movs	r0, #0
    ++len;
 8018562:	3001      	adds	r0, #1
    p = p->next;
 8018564:	681b      	ldr	r3, [r3, #0]
    ++len;
 8018566:	b280      	uxth	r0, r0
  while (p != NULL) {
 8018568:	2b00      	cmp	r3, #0
 801856a:	d1fa      	bne.n	8018562 <pbuf_clen+0x6>
 801856c:	4770      	bx	lr
  }
  return len;
}
 801856e:	4770      	bx	lr

08018570 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8018570:	b120      	cbz	r0, 801857c <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8018572:	7b83      	ldrb	r3, [r0, #14]
 8018574:	3301      	adds	r3, #1
 8018576:	b2db      	uxtb	r3, r3
 8018578:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801857a:	b103      	cbz	r3, 801857e <pbuf_ref+0xe>
  }
}
 801857c:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801857e:	4b03      	ldr	r3, [pc, #12]	; (801858c <pbuf_ref+0x1c>)
 8018580:	f240 3242 	movw	r2, #834	; 0x342
 8018584:	4902      	ldr	r1, [pc, #8]	; (8018590 <pbuf_ref+0x20>)
 8018586:	4803      	ldr	r0, [pc, #12]	; (8018594 <pbuf_ref+0x24>)
 8018588:	f009 bf9c 	b.w	80224c4 <iprintf>
 801858c:	0803f9e8 	.word	0x0803f9e8
 8018590:	0803fb04 	.word	0x0803fb04
 8018594:	08028d24 	.word	0x08028d24

08018598 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018598:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801859a:	b338      	cbz	r0, 80185ec <pbuf_cat+0x54>
 801859c:	460e      	mov	r6, r1
 801859e:	b329      	cbz	r1, 80185ec <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80185a0:	6804      	ldr	r4, [r0, #0]
 80185a2:	b90c      	cbnz	r4, 80185a8 <pbuf_cat+0x10>
 80185a4:	e02b      	b.n	80185fe <pbuf_cat+0x66>
 80185a6:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80185a8:	8903      	ldrh	r3, [r0, #8]
 80185aa:	8935      	ldrh	r5, [r6, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80185ac:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80185ae:	442b      	add	r3, r5
 80185b0:	8103      	strh	r3, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80185b2:	4620      	mov	r0, r4
 80185b4:	2a00      	cmp	r2, #0
 80185b6:	d1f6      	bne.n	80185a6 <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80185b8:	8963      	ldrh	r3, [r4, #10]
 80185ba:	8922      	ldrh	r2, [r4, #8]
 80185bc:	429a      	cmp	r2, r3
 80185be:	d010      	beq.n	80185e2 <pbuf_cat+0x4a>
 80185c0:	4b10      	ldr	r3, [pc, #64]	; (8018604 <pbuf_cat+0x6c>)
 80185c2:	f240 3262 	movw	r2, #866	; 0x362
 80185c6:	4910      	ldr	r1, [pc, #64]	; (8018608 <pbuf_cat+0x70>)
 80185c8:	4810      	ldr	r0, [pc, #64]	; (801860c <pbuf_cat+0x74>)
 80185ca:	f009 ff7b 	bl	80224c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80185ce:	6823      	ldr	r3, [r4, #0]
 80185d0:	b133      	cbz	r3, 80185e0 <pbuf_cat+0x48>
 80185d2:	4b0c      	ldr	r3, [pc, #48]	; (8018604 <pbuf_cat+0x6c>)
 80185d4:	f240 3263 	movw	r2, #867	; 0x363
 80185d8:	490d      	ldr	r1, [pc, #52]	; (8018610 <pbuf_cat+0x78>)
 80185da:	480c      	ldr	r0, [pc, #48]	; (801860c <pbuf_cat+0x74>)
 80185dc:	f009 ff72 	bl	80224c4 <iprintf>
 80185e0:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80185e2:	8932      	ldrh	r2, [r6, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80185e4:	6026      	str	r6, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80185e6:	4413      	add	r3, r2
 80185e8:	8123      	strh	r3, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80185ea:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80185ec:	4b05      	ldr	r3, [pc, #20]	; (8018604 <pbuf_cat+0x6c>)
 80185ee:	f240 3259 	movw	r2, #857	; 0x359
 80185f2:	4908      	ldr	r1, [pc, #32]	; (8018614 <pbuf_cat+0x7c>)
 80185f4:	4805      	ldr	r0, [pc, #20]	; (801860c <pbuf_cat+0x74>)
}
 80185f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80185fa:	f009 bf63 	b.w	80224c4 <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 80185fe:	4604      	mov	r4, r0
 8018600:	e7da      	b.n	80185b8 <pbuf_cat+0x20>
 8018602:	bf00      	nop
 8018604:	0803f9e8 	.word	0x0803f9e8
 8018608:	0803fb50 	.word	0x0803fb50
 801860c:	08028d24 	.word	0x08028d24
 8018610:	0803fb80 	.word	0x0803fb80
 8018614:	0803fb18 	.word	0x0803fb18

08018618 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8018618:	b510      	push	{r4, lr}
 801861a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801861c:	f7ff ffbc 	bl	8018598 <pbuf_cat>
  if (p != NULL) {
 8018620:	b124      	cbz	r4, 801862c <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8018622:	7ba3      	ldrb	r3, [r4, #14]
 8018624:	3301      	adds	r3, #1
 8018626:	b2db      	uxtb	r3, r3
 8018628:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801862a:	b103      	cbz	r3, 801862e <pbuf_chain+0x16>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801862c:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801862e:	4b04      	ldr	r3, [pc, #16]	; (8018640 <pbuf_chain+0x28>)
 8018630:	f240 3242 	movw	r2, #834	; 0x342
 8018634:	4903      	ldr	r1, [pc, #12]	; (8018644 <pbuf_chain+0x2c>)
 8018636:	4804      	ldr	r0, [pc, #16]	; (8018648 <pbuf_chain+0x30>)
}
 8018638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801863c:	f009 bf42 	b.w	80224c4 <iprintf>
 8018640:	0803f9e8 	.word	0x0803f9e8
 8018644:	0803fb04 	.word	0x0803fb04
 8018648:	08028d24 	.word	0x08028d24

0801864c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801864c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8018650:	2800      	cmp	r0, #0
 8018652:	f000 809a 	beq.w	801878a <pbuf_copy+0x13e>
 8018656:	fab1 f681 	clz	r6, r1
 801865a:	4688      	mov	r8, r1
 801865c:	0976      	lsrs	r6, r6, #5
 801865e:	2900      	cmp	r1, #0
 8018660:	f000 8093 	beq.w	801878a <pbuf_copy+0x13e>
 8018664:	8902      	ldrh	r2, [r0, #8]
 8018666:	4605      	mov	r5, r0
 8018668:	890b      	ldrh	r3, [r1, #8]
 801866a:	429a      	cmp	r2, r3
 801866c:	f0c0 808d 	bcc.w	801878a <pbuf_copy+0x13e>
 8018670:	8944      	ldrh	r4, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 8018672:	4637      	mov	r7, r6
 8018674:	894b      	ldrh	r3, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018676:	f8df a130 	ldr.w	sl, [pc, #304]	; 80187a8 <pbuf_copy+0x15c>
 801867a:	f8df b144 	ldr.w	fp, [pc, #324]	; 80187c0 <pbuf_copy+0x174>
 801867e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80187b0 <pbuf_copy+0x164>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8018682:	1b9a      	subs	r2, r3, r6
 8018684:	1be4      	subs	r4, r4, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8018686:	6868      	ldr	r0, [r5, #4]
 8018688:	4294      	cmp	r4, r2
 801868a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801868e:	4438      	add	r0, r7
 8018690:	bf28      	it	cs
 8018692:	4614      	movcs	r4, r2
 8018694:	4431      	add	r1, r6
 8018696:	4622      	mov	r2, r4
    offset_to += len;
 8018698:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801869a:	f008 ff79 	bl	8021590 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801869e:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 80186a0:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80186a2:	429f      	cmp	r7, r3
 80186a4:	d838      	bhi.n	8018718 <pbuf_copy+0xcc>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80186a6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80186aa:	429e      	cmp	r6, r3
 80186ac:	d82a      	bhi.n	8018704 <pbuf_copy+0xb8>
    if (offset_from >= p_from->len) {
 80186ae:	429e      	cmp	r6, r3
 80186b0:	d318      	bcc.n	80186e4 <pbuf_copy+0x98>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80186b2:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 80186b4:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 80186b8:	429f      	cmp	r7, r3
 80186ba:	d04c      	beq.n	8018756 <pbuf_copy+0x10a>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80186bc:	f1b8 0f00 	cmp.w	r8, #0
 80186c0:	d145      	bne.n	801874e <pbuf_copy+0x102>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80186c2:	892a      	ldrh	r2, [r5, #8]
 80186c4:	896b      	ldrh	r3, [r5, #10]
 80186c6:	429a      	cmp	r2, r3
 80186c8:	d14d      	bne.n	8018766 <pbuf_copy+0x11a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80186ca:	6828      	ldr	r0, [r5, #0]
 80186cc:	b140      	cbz	r0, 80186e0 <pbuf_copy+0x94>
 80186ce:	4b36      	ldr	r3, [pc, #216]	; (80187a8 <pbuf_copy+0x15c>)
 80186d0:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80186d4:	4935      	ldr	r1, [pc, #212]	; (80187ac <pbuf_copy+0x160>)
 80186d6:	4836      	ldr	r0, [pc, #216]	; (80187b0 <pbuf_copy+0x164>)
 80186d8:	f009 fef4 	bl	80224c4 <iprintf>
 80186dc:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 80186e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 80186e4:	896a      	ldrh	r2, [r5, #10]
 80186e6:	42ba      	cmp	r2, r7
 80186e8:	d040      	beq.n	801876c <pbuf_copy+0x120>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80186ea:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 80186ee:	429a      	cmp	r2, r3
 80186f0:	d01a      	beq.n	8018728 <pbuf_copy+0xdc>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80186f2:	896c      	ldrh	r4, [r5, #10]
 80186f4:	2d00      	cmp	r5, #0
 80186f6:	d0c4      	beq.n	8018682 <pbuf_copy+0x36>
 80186f8:	892b      	ldrh	r3, [r5, #8]
 80186fa:	42a3      	cmp	r3, r4
 80186fc:	d04f      	beq.n	801879e <pbuf_copy+0x152>
 80186fe:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8018702:	e7be      	b.n	8018682 <pbuf_copy+0x36>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8018704:	4653      	mov	r3, sl
 8018706:	f240 32da 	movw	r2, #986	; 0x3da
 801870a:	492a      	ldr	r1, [pc, #168]	; (80187b4 <pbuf_copy+0x168>)
 801870c:	4648      	mov	r0, r9
 801870e:	f009 fed9 	bl	80224c4 <iprintf>
 8018712:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8018716:	e7ca      	b.n	80186ae <pbuf_copy+0x62>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018718:	4653      	mov	r3, sl
 801871a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801871e:	4659      	mov	r1, fp
 8018720:	4648      	mov	r0, r9
 8018722:	f009 fecf 	bl	80224c4 <iprintf>
 8018726:	e7be      	b.n	80186a6 <pbuf_copy+0x5a>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018728:	f8d8 2000 	ldr.w	r2, [r8]
 801872c:	2a00      	cmp	r2, #0
 801872e:	d0e0      	beq.n	80186f2 <pbuf_copy+0xa6>
 8018730:	4b1d      	ldr	r3, [pc, #116]	; (80187a8 <pbuf_copy+0x15c>)
 8018732:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8018736:	491d      	ldr	r1, [pc, #116]	; (80187ac <pbuf_copy+0x160>)
 8018738:	481d      	ldr	r0, [pc, #116]	; (80187b0 <pbuf_copy+0x164>)
 801873a:	f009 fec3 	bl	80224c4 <iprintf>
 801873e:	f06f 0005 	mvn.w	r0, #5
}
 8018742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8018746:	f1b8 0f00 	cmp.w	r8, #0
 801874a:	d00a      	beq.n	8018762 <pbuf_copy+0x116>
      offset_to = 0;
 801874c:	2700      	movs	r7, #0
 801874e:	2600      	movs	r6, #0
 8018750:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8018754:	e7c9      	b.n	80186ea <pbuf_copy+0x9e>
      p_to = p_to->next;
 8018756:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018758:	2d00      	cmp	r5, #0
 801875a:	d1f4      	bne.n	8018746 <pbuf_copy+0xfa>
 801875c:	f1b8 0f00 	cmp.w	r8, #0
 8018760:	d108      	bne.n	8018774 <pbuf_copy+0x128>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8018762:	2d00      	cmp	r5, #0
 8018764:	d1ad      	bne.n	80186c2 <pbuf_copy+0x76>
  return ERR_OK;
 8018766:	2000      	movs	r0, #0
}
 8018768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801876c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801876e:	b10d      	cbz	r5, 8018774 <pbuf_copy+0x128>
      offset_to = 0;
 8018770:	2700      	movs	r7, #0
 8018772:	e7ed      	b.n	8018750 <pbuf_copy+0x104>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018774:	4b0c      	ldr	r3, [pc, #48]	; (80187a8 <pbuf_copy+0x15c>)
 8018776:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801877a:	490f      	ldr	r1, [pc, #60]	; (80187b8 <pbuf_copy+0x16c>)
 801877c:	480c      	ldr	r0, [pc, #48]	; (80187b0 <pbuf_copy+0x164>)
 801877e:	f009 fea1 	bl	80224c4 <iprintf>
 8018782:	f06f 000f 	mvn.w	r0, #15
}
 8018786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801878a:	4b07      	ldr	r3, [pc, #28]	; (80187a8 <pbuf_copy+0x15c>)
 801878c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8018790:	490a      	ldr	r1, [pc, #40]	; (80187bc <pbuf_copy+0x170>)
 8018792:	4807      	ldr	r0, [pc, #28]	; (80187b0 <pbuf_copy+0x164>)
 8018794:	f009 fe96 	bl	80224c4 <iprintf>
 8018798:	f06f 000f 	mvn.w	r0, #15
 801879c:	e7a0      	b.n	80186e0 <pbuf_copy+0x94>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801879e:	682b      	ldr	r3, [r5, #0]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d0ac      	beq.n	80186fe <pbuf_copy+0xb2>
 80187a4:	e793      	b.n	80186ce <pbuf_copy+0x82>
 80187a6:	bf00      	nop
 80187a8:	0803f9e8 	.word	0x0803f9e8
 80187ac:	0803fc04 	.word	0x0803fc04
 80187b0:	08028d24 	.word	0x08028d24
 80187b4:	0803fbd8 	.word	0x0803fbd8
 80187b8:	0803fbf4 	.word	0x0803fbf4
 80187bc:	0803fb90 	.word	0x0803fb90
 80187c0:	0803fbc0 	.word	0x0803fbc0

080187c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80187c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80187c8:	4605      	mov	r5, r0
 80187ca:	b350      	cbz	r0, 8018822 <pbuf_copy_partial+0x5e>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80187cc:	460f      	mov	r7, r1
 80187ce:	b399      	cbz	r1, 8018838 <pbuf_copy_partial+0x74>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80187d0:	4690      	mov	r8, r2
 80187d2:	b37a      	cbz	r2, 8018834 <pbuf_copy_partial+0x70>
  u16_t left = 0;
 80187d4:	2600      	movs	r6, #0
 80187d6:	e005      	b.n	80187e4 <pbuf_copy_partial+0x20>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80187d8:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80187da:	682d      	ldr	r5, [r5, #0]
 80187dc:	f1b8 0f00 	cmp.w	r8, #0
 80187e0:	d01c      	beq.n	801881c <pbuf_copy_partial+0x58>
 80187e2:	b1dd      	cbz	r5, 801881c <pbuf_copy_partial+0x58>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80187e4:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 80187e6:	896c      	ldrh	r4, [r5, #10]
 80187e8:	b11b      	cbz	r3, 80187f2 <pbuf_copy_partial+0x2e>
 80187ea:	429c      	cmp	r4, r3
      offset = (u16_t)(offset - p->len);
 80187ec:	eba3 0204 	sub.w	r2, r3, r4
    if ((offset != 0) && (offset >= p->len)) {
 80187f0:	d9f2      	bls.n	80187d8 <pbuf_copy_partial+0x14>
      buf_copy_len = (u16_t)(p->len - offset);
 80187f2:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80187f4:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 80187f6:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80187f8:	4419      	add	r1, r3
 80187fa:	4544      	cmp	r4, r8
 80187fc:	bf28      	it	cs
 80187fe:	4644      	movcs	r4, r8
 8018800:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8018802:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 8018804:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8018808:	f008 fec2 	bl	8021590 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801880c:	b2b6      	uxth	r6, r6
      offset = 0;
 801880e:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8018810:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018814:	682d      	ldr	r5, [r5, #0]
 8018816:	f1b8 0f00 	cmp.w	r8, #0
 801881a:	d1e2      	bne.n	80187e2 <pbuf_copy_partial+0x1e>
    }
  }
  return copied_total;
}
 801881c:	4630      	mov	r0, r6
 801881e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8018822:	4606      	mov	r6, r0
 8018824:	4b09      	ldr	r3, [pc, #36]	; (801884c <pbuf_copy_partial+0x88>)
 8018826:	f240 420a 	movw	r2, #1034	; 0x40a
 801882a:	4909      	ldr	r1, [pc, #36]	; (8018850 <pbuf_copy_partial+0x8c>)
 801882c:	4809      	ldr	r0, [pc, #36]	; (8018854 <pbuf_copy_partial+0x90>)
 801882e:	f009 fe49 	bl	80224c4 <iprintf>
 8018832:	e7f3      	b.n	801881c <pbuf_copy_partial+0x58>
  u16_t left = 0;
 8018834:	4616      	mov	r6, r2
 8018836:	e7f1      	b.n	801881c <pbuf_copy_partial+0x58>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018838:	4b04      	ldr	r3, [pc, #16]	; (801884c <pbuf_copy_partial+0x88>)
 801883a:	f240 420b 	movw	r2, #1035	; 0x40b
 801883e:	4906      	ldr	r1, [pc, #24]	; (8018858 <pbuf_copy_partial+0x94>)
 8018840:	463e      	mov	r6, r7
 8018842:	4804      	ldr	r0, [pc, #16]	; (8018854 <pbuf_copy_partial+0x90>)
 8018844:	f009 fe3e 	bl	80224c4 <iprintf>
 8018848:	e7e8      	b.n	801881c <pbuf_copy_partial+0x58>
 801884a:	bf00      	nop
 801884c:	0803f9e8 	.word	0x0803f9e8
 8018850:	0803fc30 	.word	0x0803fc30
 8018854:	08028d24 	.word	0x08028d24
 8018858:	0803fc50 	.word	0x0803fc50

0801885c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801885c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8018860:	2800      	cmp	r0, #0
 8018862:	d049      	beq.n	80188f8 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8018864:	460f      	mov	r7, r1
 8018866:	2900      	cmp	r1, #0
 8018868:	d03c      	beq.n	80188e4 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801886a:	8903      	ldrh	r3, [r0, #8]
 801886c:	4604      	mov	r4, r0
 801886e:	4690      	mov	r8, r2
 8018870:	4293      	cmp	r3, r2
 8018872:	d32d      	bcc.n	80188d0 <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8018874:	b34a      	cbz	r2, 80188ca <pbuf_take+0x6e>
 8018876:	4615      	mov	r5, r2
  size_t copied_total = 0;
 8018878:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801887a:	f8df b094 	ldr.w	fp, [pc, #148]	; 8018910 <pbuf_take+0xb4>
 801887e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8018924 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 8018882:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8018884:	19b9      	adds	r1, r7, r6
 8018886:	6860      	ldr	r0, [r4, #4]
 8018888:	42aa      	cmp	r2, r5
 801888a:	bf28      	it	cs
 801888c:	462a      	movcs	r2, r5
 801888e:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 8018890:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8018892:	f008 fe7d 	bl	8021590 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 8018896:	6824      	ldr	r4, [r4, #0]
 8018898:	ebb5 0509 	subs.w	r5, r5, r9
 801889c:	d009      	beq.n	80188b2 <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801889e:	2c00      	cmp	r4, #0
 80188a0:	d1ef      	bne.n	8018882 <pbuf_take+0x26>
 80188a2:	465b      	mov	r3, fp
 80188a4:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80188a8:	4651      	mov	r1, sl
 80188aa:	4818      	ldr	r0, [pc, #96]	; (801890c <pbuf_take+0xb0>)
 80188ac:	f009 fe0a 	bl	80224c4 <iprintf>
 80188b0:	e7e7      	b.n	8018882 <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80188b2:	45b0      	cmp	r8, r6
 80188b4:	d009      	beq.n	80188ca <pbuf_take+0x6e>
 80188b6:	4b16      	ldr	r3, [pc, #88]	; (8018910 <pbuf_take+0xb4>)
 80188b8:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80188bc:	4915      	ldr	r1, [pc, #84]	; (8018914 <pbuf_take+0xb8>)
 80188be:	4813      	ldr	r0, [pc, #76]	; (801890c <pbuf_take+0xb0>)
 80188c0:	f009 fe00 	bl	80224c4 <iprintf>
  return ERR_OK;
 80188c4:	4628      	mov	r0, r5
}
 80188c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 80188ca:	2000      	movs	r0, #0
}
 80188cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80188d0:	4b0f      	ldr	r3, [pc, #60]	; (8018910 <pbuf_take+0xb4>)
 80188d2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80188d6:	4910      	ldr	r1, [pc, #64]	; (8018918 <pbuf_take+0xbc>)
 80188d8:	480c      	ldr	r0, [pc, #48]	; (801890c <pbuf_take+0xb0>)
 80188da:	f009 fdf3 	bl	80224c4 <iprintf>
 80188de:	f04f 30ff 	mov.w	r0, #4294967295
 80188e2:	e7f3      	b.n	80188cc <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80188e4:	4b0a      	ldr	r3, [pc, #40]	; (8018910 <pbuf_take+0xb4>)
 80188e6:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80188ea:	490c      	ldr	r1, [pc, #48]	; (801891c <pbuf_take+0xc0>)
 80188ec:	4807      	ldr	r0, [pc, #28]	; (801890c <pbuf_take+0xb0>)
 80188ee:	f009 fde9 	bl	80224c4 <iprintf>
 80188f2:	f06f 000f 	mvn.w	r0, #15
 80188f6:	e7e9      	b.n	80188cc <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80188f8:	4b05      	ldr	r3, [pc, #20]	; (8018910 <pbuf_take+0xb4>)
 80188fa:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80188fe:	4908      	ldr	r1, [pc, #32]	; (8018920 <pbuf_take+0xc4>)
 8018900:	4802      	ldr	r0, [pc, #8]	; (801890c <pbuf_take+0xb0>)
 8018902:	f009 fddf 	bl	80224c4 <iprintf>
 8018906:	f06f 000f 	mvn.w	r0, #15
 801890a:	e7df      	b.n	80188cc <pbuf_take+0x70>
 801890c:	08028d24 	.word	0x08028d24
 8018910:	0803f9e8 	.word	0x0803f9e8
 8018914:	0803fce0 	.word	0x0803fce0
 8018918:	0803fca8 	.word	0x0803fca8
 801891c:	0803fc8c 	.word	0x0803fc8c
 8018920:	0803fc74 	.word	0x0803fc74
 8018924:	0803fcc8 	.word	0x0803fcc8

08018928 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8018928:	b390      	cbz	r0, 8018990 <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801892a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801892e:	460f      	mov	r7, r1
 8018930:	4604      	mov	r4, r0
 8018932:	e002      	b.n	801893a <pbuf_take_at+0x12>
    q = q->next;
 8018934:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8018936:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 8018938:	b334      	cbz	r4, 8018988 <pbuf_take_at+0x60>
 801893a:	8965      	ldrh	r5, [r4, #10]
 801893c:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801893e:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 8018942:	d9f7      	bls.n	8018934 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8018944:	8921      	ldrh	r1, [r4, #8]
 8018946:	189e      	adds	r6, r3, r2
 8018948:	42b1      	cmp	r1, r6
 801894a:	db1d      	blt.n	8018988 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801894c:	1ae9      	subs	r1, r5, r3
 801894e:	428a      	cmp	r2, r1
 8018950:	dc07      	bgt.n	8018962 <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8018952:	6860      	ldr	r0, [r4, #4]
 8018954:	4639      	mov	r1, r7
 8018956:	4418      	add	r0, r3
 8018958:	f008 fe1a 	bl	8021590 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801895c:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801895e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8018962:	fa1f f881 	uxth.w	r8, r1
 8018966:	6860      	ldr	r0, [r4, #4]
 8018968:	4639      	mov	r1, r7
 801896a:	4642      	mov	r2, r8
 801896c:	4418      	add	r0, r3
 801896e:	f008 fe0f 	bl	8021590 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8018972:	1b70      	subs	r0, r6, r5
 8018974:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 8018976:	2a00      	cmp	r2, #0
 8018978:	d0f0      	beq.n	801895c <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801897a:	eb07 0108 	add.w	r1, r7, r8
 801897e:	6820      	ldr	r0, [r4, #0]
}
 8018980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8018984:	f7ff bf6a 	b.w	801885c <pbuf_take>
  return ERR_MEM;
 8018988:	f04f 30ff 	mov.w	r0, #4294967295
}
 801898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 8018990:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018994:	4770      	bx	lr
 8018996:	bf00      	nop

08018998 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8018998:	b538      	push	{r3, r4, r5, lr}
 801899a:	4615      	mov	r5, r2
 801899c:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801899e:	8929      	ldrh	r1, [r5, #8]
 80189a0:	f7ff fce6 	bl	8018370 <pbuf_alloc>
  if (q == NULL) {
 80189a4:	4604      	mov	r4, r0
 80189a6:	b118      	cbz	r0, 80189b0 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 80189a8:	4629      	mov	r1, r5
 80189aa:	f7ff fe4f 	bl	801864c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80189ae:	b908      	cbnz	r0, 80189b4 <pbuf_clone+0x1c>
  return q;
}
 80189b0:	4620      	mov	r0, r4
 80189b2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80189b4:	4b04      	ldr	r3, [pc, #16]	; (80189c8 <pbuf_clone+0x30>)
 80189b6:	f240 5224 	movw	r2, #1316	; 0x524
 80189ba:	4904      	ldr	r1, [pc, #16]	; (80189cc <pbuf_clone+0x34>)
 80189bc:	4804      	ldr	r0, [pc, #16]	; (80189d0 <pbuf_clone+0x38>)
 80189be:	f009 fd81 	bl	80224c4 <iprintf>
}
 80189c2:	4620      	mov	r0, r4
 80189c4:	bd38      	pop	{r3, r4, r5, pc}
 80189c6:	bf00      	nop
 80189c8:	0803f9e8 	.word	0x0803f9e8
 80189cc:	0803fcf8 	.word	0x0803fcf8
 80189d0:	08028d24 	.word	0x08028d24

080189d4 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 80189d4:	b140      	cbz	r0, 80189e8 <pbuf_try_get_at+0x14>
 80189d6:	8943      	ldrh	r3, [r0, #10]
 80189d8:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 80189da:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 80189de:	d806      	bhi.n	80189ee <pbuf_try_get_at+0x1a>
    q = q->next;
 80189e0:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 80189e2:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 80189e4:	2800      	cmp	r0, #0
 80189e6:	d1f6      	bne.n	80189d6 <pbuf_try_get_at+0x2>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
  }
  return -1;
 80189e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80189ec:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 80189ee:	6843      	ldr	r3, [r0, #4]
 80189f0:	5c58      	ldrb	r0, [r3, r1]
 80189f2:	4770      	bx	lr

080189f4 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 80189f4:	b918      	cbnz	r0, 80189fe <pbuf_put_at+0xa>
 80189f6:	e00a      	b.n	8018a0e <pbuf_put_at+0x1a>
    q = q->next;
 80189f8:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 80189fa:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 80189fc:	b130      	cbz	r0, 8018a0c <pbuf_put_at+0x18>
 80189fe:	8943      	ldrh	r3, [r0, #10]
 8018a00:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 8018a02:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8018a06:	d9f7      	bls.n	80189f8 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 8018a08:	6843      	ldr	r3, [r0, #4]
 8018a0a:	545a      	strb	r2, [r3, r1]
  }
}
 8018a0c:	4770      	bx	lr
 8018a0e:	4770      	bx	lr

08018a10 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8018a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018a14:	4e33      	ldr	r6, [pc, #204]	; (8018ae4 <raw_input+0xd4>)
{
 8018a16:	4681      	mov	r9, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018a18:	6831      	ldr	r1, [r6, #0]
 8018a1a:	6970      	ldr	r0, [r6, #20]
 8018a1c:	f007 fb2c 	bl	8020078 <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 8018a20:	4a31      	ldr	r2, [pc, #196]	; (8018ae8 <raw_input+0xd8>)
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8018a22:	f8d9 3004 	ldr.w	r3, [r9, #4]
  pcb = raw_pcbs;
 8018a26:	6814      	ldr	r4, [r2, #0]
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8018a28:	7a5d      	ldrb	r5, [r3, #9]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8018a2a:	2c00      	cmp	r4, #0
 8018a2c:	d04d      	beq.n	8018aca <raw_input+0xba>
 8018a2e:	4680      	mov	r8, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 8018a30:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8018a32:	f106 0b10 	add.w	fp, r6, #16
 8018a36:	46ca      	mov	sl, r9
  prev = NULL;
 8018a38:	4606      	mov	r6, r0
 8018a3a:	e004      	b.n	8018a46 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 8018a3c:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 8018a3e:	4626      	mov	r6, r4
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d037      	beq.n	8018ab4 <raw_input+0xa4>
 8018a44:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8018a46:	7c23      	ldrb	r3, [r4, #16]
 8018a48:	42ab      	cmp	r3, r5
 8018a4a:	d1f7      	bne.n	8018a3c <raw_input+0x2c>
 8018a4c:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018a4e:	b13a      	cbz	r2, 8018a60 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018a50:	4b24      	ldr	r3, [pc, #144]	; (8018ae4 <raw_input+0xd4>)
 8018a52:	685b      	ldr	r3, [r3, #4]
 8018a54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018a58:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	429a      	cmp	r2, r3
 8018a5e:	d1ed      	bne.n	8018a3c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8018a60:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8018a62:	f1b8 0f00 	cmp.w	r8, #0
 8018a66:	d027      	beq.n	8018ab8 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d1e7      	bne.n	8018a3c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8018a6c:	7c63      	ldrb	r3, [r4, #17]
 8018a6e:	07db      	lsls	r3, r3, #31
 8018a70:	d504      	bpl.n	8018a7c <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8018a72:	4b1c      	ldr	r3, [pc, #112]	; (8018ae4 <raw_input+0xd4>)
 8018a74:	6862      	ldr	r2, [r4, #4]
 8018a76:	691b      	ldr	r3, [r3, #16]
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	d1df      	bne.n	8018a3c <raw_input+0x2c>
      if (pcb->recv != NULL) {
 8018a7c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8018a80:	f1b9 0f00 	cmp.w	r9, #0
 8018a84:	d0da      	beq.n	8018a3c <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8018a86:	465b      	mov	r3, fp
 8018a88:	4652      	mov	r2, sl
 8018a8a:	4621      	mov	r1, r4
 8018a8c:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 8018a8e:	f8da 7004 	ldr.w	r7, [sl, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8018a92:	47c8      	blx	r9
        if (eaten != 0) {
 8018a94:	b9d8      	cbnz	r0, 8018ace <raw_input+0xbe>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8018a96:	f8da 3004 	ldr.w	r3, [sl, #4]
 8018a9a:	42bb      	cmp	r3, r7
 8018a9c:	d013      	beq.n	8018ac6 <raw_input+0xb6>
 8018a9e:	4b13      	ldr	r3, [pc, #76]	; (8018aec <raw_input+0xdc>)
 8018aa0:	22c0      	movs	r2, #192	; 0xc0
 8018aa2:	4913      	ldr	r1, [pc, #76]	; (8018af0 <raw_input+0xe0>)
 8018aa4:	4626      	mov	r6, r4
 8018aa6:	4813      	ldr	r0, [pc, #76]	; (8018af4 <raw_input+0xe4>)
 8018aa8:	f009 fd0c 	bl	80224c4 <iprintf>
    pcb = pcb->next;
 8018aac:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 8018aae:	2002      	movs	r0, #2
  while (pcb != NULL) {
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d1c7      	bne.n	8018a44 <raw_input+0x34>
  }
  return ret;
}
 8018ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d0d7      	beq.n	8018a6c <raw_input+0x5c>
 8018abc:	4a09      	ldr	r2, [pc, #36]	; (8018ae4 <raw_input+0xd4>)
 8018abe:	6952      	ldr	r2, [r2, #20]
 8018ac0:	4293      	cmp	r3, r2
 8018ac2:	d1bb      	bne.n	8018a3c <raw_input+0x2c>
 8018ac4:	e7d2      	b.n	8018a6c <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 8018ac6:	2002      	movs	r0, #2
 8018ac8:	e7b8      	b.n	8018a3c <raw_input+0x2c>
  raw_input_state_t ret = RAW_INPUT_NONE;
 8018aca:	4620      	mov	r0, r4
 8018acc:	e7f2      	b.n	8018ab4 <raw_input+0xa4>
          if (prev != NULL) {
 8018ace:	b13e      	cbz	r6, 8018ae0 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 8018ad0:	4905      	ldr	r1, [pc, #20]	; (8018ae8 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 8018ad2:	2001      	movs	r0, #1
            prev->next = pcb->next;
 8018ad4:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 8018ad6:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 8018ad8:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 8018ada:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 8018adc:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 8018ade:	e7e9      	b.n	8018ab4 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 8018ae0:	2001      	movs	r0, #1
 8018ae2:	e7e7      	b.n	8018ab4 <raw_input+0xa4>
 8018ae4:	2001f164 	.word	0x2001f164
 8018ae8:	2001a9e8 	.word	0x2001a9e8
 8018aec:	0803fd0c 	.word	0x0803fd0c
 8018af0:	0803fd3c 	.word	0x0803fd3c
 8018af4:	08028d24 	.word	0x08028d24

08018af8 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018af8:	b110      	cbz	r0, 8018b00 <raw_netif_ip_addr_changed+0x8>
 8018afa:	6802      	ldr	r2, [r0, #0]
 8018afc:	b101      	cbz	r1, 8018b00 <raw_netif_ip_addr_changed+0x8>
 8018afe:	b902      	cbnz	r2, 8018b02 <raw_netif_ip_addr_changed+0xa>
 8018b00:	4770      	bx	lr
 8018b02:	680b      	ldr	r3, [r1, #0]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d0fb      	beq.n	8018b00 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8018b08:	4b08      	ldr	r3, [pc, #32]	; (8018b2c <raw_netif_ip_addr_changed+0x34>)
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d0f7      	beq.n	8018b00 <raw_netif_ip_addr_changed+0x8>
{
 8018b10:	b410      	push	{r4}
 8018b12:	e000      	b.n	8018b16 <raw_netif_ip_addr_changed+0x1e>
 8018b14:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8018b16:	681c      	ldr	r4, [r3, #0]
 8018b18:	4294      	cmp	r4, r2
 8018b1a:	d101      	bne.n	8018b20 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8018b1c:	680a      	ldr	r2, [r1, #0]
 8018b1e:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8018b20:	68db      	ldr	r3, [r3, #12]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d1f6      	bne.n	8018b14 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 8018b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b2a:	4770      	bx	lr
 8018b2c:	2001a9e8 	.word	0x2001a9e8

08018b30 <stats_init>:
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8018b30:	4770      	bx	lr
 8018b32:	bf00      	nop

08018b34 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 8018b34:	f8df c060 	ldr.w	ip, [pc, #96]	; 8018b98 <tcp_new_port+0x64>
{
 8018b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018b3c:	b4f0      	push	{r4, r5, r6, r7}
 8018b3e:	f8bc 0000 	ldrh.w	r0, [ip]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8018b42:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8018b46:	4f11      	ldr	r7, [pc, #68]	; (8018b8c <tcp_new_port+0x58>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018b48:	4d11      	ldr	r5, [pc, #68]	; (8018b90 <tcp_new_port+0x5c>)
  tcp_port++;
 8018b4a:	3001      	adds	r0, #1
 8018b4c:	4c11      	ldr	r4, [pc, #68]	; (8018b94 <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018b4e:	462b      	mov	r3, r5
  tcp_port++;
 8018b50:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018b52:	42b0      	cmp	r0, r6
 8018b54:	bf08      	it	eq
 8018b56:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	b913      	cbnz	r3, 8018b64 <tcp_new_port+0x30>
 8018b5e:	e00c      	b.n	8018b7a <tcp_new_port+0x46>
 8018b60:	68db      	ldr	r3, [r3, #12]
 8018b62:	b153      	cbz	r3, 8018b7a <tcp_new_port+0x46>
      if (pcb->local_port == tcp_port) {
 8018b64:	8ada      	ldrh	r2, [r3, #22]
 8018b66:	4282      	cmp	r2, r0
 8018b68:	d1fa      	bne.n	8018b60 <tcp_new_port+0x2c>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018b6a:	3901      	subs	r1, #1
 8018b6c:	b289      	uxth	r1, r1
 8018b6e:	2900      	cmp	r1, #0
 8018b70:	d1eb      	bne.n	8018b4a <tcp_new_port+0x16>
 8018b72:	f8ac 0000 	strh.w	r0, [ip]
          return 0;
 8018b76:	4608      	mov	r0, r1
 8018b78:	e006      	b.n	8018b88 <tcp_new_port+0x54>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018b7a:	42bc      	cmp	r4, r7
 8018b7c:	d002      	beq.n	8018b84 <tcp_new_port+0x50>
 8018b7e:	f854 3b04 	ldr.w	r3, [r4], #4
 8018b82:	e7ea      	b.n	8018b5a <tcp_new_port+0x26>
 8018b84:	f8ac 0000 	strh.w	r0, [ip]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8018b88:	bcf0      	pop	{r4, r5, r6, r7}
 8018b8a:	4770      	bx	lr
 8018b8c:	0804047c 	.word	0x0804047c
 8018b90:	2002e1a0 	.word	0x2002e1a0
 8018b94:	08040470 	.word	0x08040470
 8018b98:	20000408 	.word	0x20000408

08018b9c <tcp_close_shutdown_fin>:
{
 8018b9c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018b9e:	4604      	mov	r4, r0
 8018ba0:	b310      	cbz	r0, 8018be8 <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 8018ba2:	7d23      	ldrb	r3, [r4, #20]
 8018ba4:	2b04      	cmp	r3, #4
 8018ba6:	d005      	beq.n	8018bb4 <tcp_close_shutdown_fin+0x18>
 8018ba8:	2b07      	cmp	r3, #7
 8018baa:	d00e      	beq.n	8018bca <tcp_close_shutdown_fin+0x2e>
 8018bac:	2b03      	cmp	r3, #3
 8018bae:	d001      	beq.n	8018bb4 <tcp_close_shutdown_fin+0x18>
 8018bb0:	2000      	movs	r0, #0
}
 8018bb2:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8018bb4:	4620      	mov	r0, r4
 8018bb6:	f003 fd83 	bl	801c6c0 <tcp_send_fin>
      if (err == ERR_OK) {
 8018bba:	b950      	cbnz	r0, 8018bd2 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 8018bbc:	2305      	movs	r3, #5
 8018bbe:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	f003 feef 	bl	801c9a4 <tcp_output>
 8018bc6:	2000      	movs	r0, #0
}
 8018bc8:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8018bca:	4620      	mov	r0, r4
 8018bcc:	f003 fd78 	bl	801c6c0 <tcp_send_fin>
      if (err == ERR_OK) {
 8018bd0:	b138      	cbz	r0, 8018be2 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 8018bd2:	1c43      	adds	r3, r0, #1
 8018bd4:	d1ed      	bne.n	8018bb2 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8018bd6:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 8018bd8:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8018bda:	f043 0308 	orr.w	r3, r3, #8
 8018bde:	8363      	strh	r3, [r4, #26]
}
 8018be0:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 8018be2:	2309      	movs	r3, #9
 8018be4:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8018be6:	e7eb      	b.n	8018bc0 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018be8:	4b03      	ldr	r3, [pc, #12]	; (8018bf8 <tcp_close_shutdown_fin+0x5c>)
 8018bea:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8018bee:	4903      	ldr	r1, [pc, #12]	; (8018bfc <tcp_close_shutdown_fin+0x60>)
 8018bf0:	4803      	ldr	r0, [pc, #12]	; (8018c00 <tcp_close_shutdown_fin+0x64>)
 8018bf2:	f009 fc67 	bl	80224c4 <iprintf>
 8018bf6:	e7d4      	b.n	8018ba2 <tcp_close_shutdown_fin+0x6>
 8018bf8:	0803fd88 	.word	0x0803fd88
 8018bfc:	0803fdb8 	.word	0x0803fdb8
 8018c00:	08028d24 	.word	0x08028d24

08018c04 <tcp_init>:
{
 8018c04:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018c06:	f009 fd01 	bl	802260c <rand>
 8018c0a:	4b02      	ldr	r3, [pc, #8]	; (8018c14 <tcp_init+0x10>)
 8018c0c:	4a02      	ldr	r2, [pc, #8]	; (8018c18 <tcp_init+0x14>)
 8018c0e:	4303      	orrs	r3, r0
 8018c10:	8013      	strh	r3, [r2, #0]
}
 8018c12:	bd08      	pop	{r3, pc}
 8018c14:	ffffc000 	.word	0xffffc000
 8018c18:	20000408 	.word	0x20000408

08018c1c <tcp_free>:
{
 8018c1c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018c1e:	7d03      	ldrb	r3, [r0, #20]
{
 8018c20:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	d005      	beq.n	8018c32 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8018c26:	4621      	mov	r1, r4
 8018c28:	2002      	movs	r0, #2
}
 8018c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8018c2e:	f7ff b861 	b.w	8017cf4 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018c32:	4906      	ldr	r1, [pc, #24]	; (8018c4c <tcp_free+0x30>)
 8018c34:	22d4      	movs	r2, #212	; 0xd4
 8018c36:	4b06      	ldr	r3, [pc, #24]	; (8018c50 <tcp_free+0x34>)
 8018c38:	4806      	ldr	r0, [pc, #24]	; (8018c54 <tcp_free+0x38>)
 8018c3a:	f009 fc43 	bl	80224c4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8018c3e:	4621      	mov	r1, r4
 8018c40:	2002      	movs	r0, #2
}
 8018c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8018c46:	f7ff b855 	b.w	8017cf4 <memp_free>
 8018c4a:	bf00      	nop
 8018c4c:	0803fdc4 	.word	0x0803fdc4
 8018c50:	0803fd88 	.word	0x0803fd88
 8018c54:	08028d24 	.word	0x08028d24

08018c58 <tcp_bind>:
{
 8018c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8018c5a:	4e26      	ldr	r6, [pc, #152]	; (8018cf4 <tcp_bind+0x9c>)
 8018c5c:	2900      	cmp	r1, #0
 8018c5e:	bf18      	it	ne
 8018c60:	460e      	movne	r6, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018c62:	2800      	cmp	r0, #0
 8018c64:	d03b      	beq.n	8018cde <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018c66:	7d03      	ldrb	r3, [r0, #20]
 8018c68:	4607      	mov	r7, r0
 8018c6a:	bb73      	cbnz	r3, 8018cca <tcp_bind+0x72>
  if (port == 0) {
 8018c6c:	b312      	cbz	r2, 8018cb4 <tcp_bind+0x5c>
 8018c6e:	4922      	ldr	r1, [pc, #136]	; (8018cf8 <tcp_bind+0xa0>)
 8018c70:	4b22      	ldr	r3, [pc, #136]	; (8018cfc <tcp_bind+0xa4>)
 8018c72:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	b913      	cbnz	r3, 8018c80 <tcp_bind+0x28>
 8018c7a:	e00d      	b.n	8018c98 <tcp_bind+0x40>
 8018c7c:	68db      	ldr	r3, [r3, #12]
 8018c7e:	b15b      	cbz	r3, 8018c98 <tcp_bind+0x40>
        if (cpcb->local_port == port) {
 8018c80:	8adc      	ldrh	r4, [r3, #22]
 8018c82:	4294      	cmp	r4, r2
 8018c84:	d1fa      	bne.n	8018c7c <tcp_bind+0x24>
                (ip_addr_isany(&cpcb->local_ip) ||
 8018c86:	681c      	ldr	r4, [r3, #0]
 8018c88:	b11c      	cbz	r4, 8018c92 <tcp_bind+0x3a>
                 ip_addr_isany(ipaddr) ||
 8018c8a:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018c8c:	b10d      	cbz	r5, 8018c92 <tcp_bind+0x3a>
 8018c8e:	42ac      	cmp	r4, r5
 8018c90:	d1f4      	bne.n	8018c7c <tcp_bind+0x24>
              return ERR_USE;
 8018c92:	f06f 0007 	mvn.w	r0, #7
}
 8018c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8018c98:	4281      	cmp	r1, r0
 8018c9a:	d113      	bne.n	8018cc4 <tcp_bind+0x6c>
  if (!ip_addr_isany(ipaddr)
 8018c9c:	6833      	ldr	r3, [r6, #0]
 8018c9e:	b103      	cbz	r3, 8018ca2 <tcp_bind+0x4a>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018ca0:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018ca2:	4b17      	ldr	r3, [pc, #92]	; (8018d00 <tcp_bind+0xa8>)
  pcb->local_port = port;
 8018ca4:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018ca6:	681a      	ldr	r2, [r3, #0]
 8018ca8:	601f      	str	r7, [r3, #0]
 8018caa:	60fa      	str	r2, [r7, #12]
 8018cac:	f004 f9ae 	bl	801d00c <tcp_timer_needed>
  return ERR_OK;
 8018cb0:	2000      	movs	r0, #0
}
 8018cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 8018cb4:	f7ff ff3e 	bl	8018b34 <tcp_new_port>
    if (port == 0) {
 8018cb8:	4602      	mov	r2, r0
 8018cba:	2800      	cmp	r0, #0
 8018cbc:	d1ee      	bne.n	8018c9c <tcp_bind+0x44>
      return ERR_BUF;
 8018cbe:	f06f 0001 	mvn.w	r0, #1
}
 8018cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cc4:	f851 3b04 	ldr.w	r3, [r1], #4
 8018cc8:	e7d5      	b.n	8018c76 <tcp_bind+0x1e>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018cca:	4b0e      	ldr	r3, [pc, #56]	; (8018d04 <tcp_bind+0xac>)
 8018ccc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018cd0:	490d      	ldr	r1, [pc, #52]	; (8018d08 <tcp_bind+0xb0>)
 8018cd2:	480e      	ldr	r0, [pc, #56]	; (8018d0c <tcp_bind+0xb4>)
 8018cd4:	f009 fbf6 	bl	80224c4 <iprintf>
 8018cd8:	f06f 0005 	mvn.w	r0, #5
}
 8018cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018cde:	4b09      	ldr	r3, [pc, #36]	; (8018d04 <tcp_bind+0xac>)
 8018ce0:	f240 22a9 	movw	r2, #681	; 0x2a9
 8018ce4:	490a      	ldr	r1, [pc, #40]	; (8018d10 <tcp_bind+0xb8>)
 8018ce6:	4809      	ldr	r0, [pc, #36]	; (8018d0c <tcp_bind+0xb4>)
 8018ce8:	f009 fbec 	bl	80224c4 <iprintf>
 8018cec:	f06f 000f 	mvn.w	r0, #15
}
 8018cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cf2:	bf00      	nop
 8018cf4:	08041a0c 	.word	0x08041a0c
 8018cf8:	08040470 	.word	0x08040470
 8018cfc:	2002e1a0 	.word	0x2002e1a0
 8018d00:	2002e1a4 	.word	0x2002e1a4
 8018d04:	0803fd88 	.word	0x0803fd88
 8018d08:	0803fdf0 	.word	0x0803fdf0
 8018d0c:	08028d24 	.word	0x08028d24
 8018d10:	0803fdd8 	.word	0x0803fdd8

08018d14 <tcp_listen_with_backlog_and_err>:
{
 8018d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8018d16:	4604      	mov	r4, r0
{
 8018d18:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8018d1a:	2800      	cmp	r0, #0
 8018d1c:	d052      	beq.n	8018dc4 <tcp_listen_with_backlog_and_err+0xb0>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018d1e:	7d05      	ldrb	r5, [r0, #20]
 8018d20:	2d00      	cmp	r5, #0
 8018d22:	d13c      	bne.n	8018d9e <tcp_listen_with_backlog_and_err+0x8a>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018d24:	f240 3272 	movw	r2, #882	; 0x372
 8018d28:	492c      	ldr	r1, [pc, #176]	; (8018ddc <tcp_listen_with_backlog_and_err+0xc8>)
 8018d2a:	2003      	movs	r0, #3
 8018d2c:	f7fe ffbe 	bl	8017cac <memp_malloc_fn>
  if (lpcb == NULL) {
 8018d30:	4606      	mov	r6, r0
 8018d32:	2800      	cmp	r0, #0
 8018d34:	d043      	beq.n	8018dbe <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 8018d36:	6921      	ldr	r1, [r4, #16]
  lpcb->state = LISTEN;
 8018d38:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 8018d3a:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 8018d3c:	7502      	strb	r2, [r0, #20]
  lpcb->callback_arg = pcb->callback_arg;
 8018d3e:	6101      	str	r1, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8018d40:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8018d42:	7d62      	ldrb	r2, [r4, #21]
 8018d44:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8018d46:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8018d48:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8018d4a:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8018d4c:	7ae2      	ldrb	r2, [r4, #11]
 8018d4e:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8018d50:	7aa2      	ldrb	r2, [r4, #10]
 8018d52:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018d54:	6822      	ldr	r2, [r4, #0]
 8018d56:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8018d58:	b163      	cbz	r3, 8018d74 <tcp_listen_with_backlog_and_err+0x60>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018d5a:	4a21      	ldr	r2, [pc, #132]	; (8018de0 <tcp_listen_with_backlog_and_err+0xcc>)
 8018d5c:	6813      	ldr	r3, [r2, #0]
 8018d5e:	42a3      	cmp	r3, r4
 8018d60:	d018      	beq.n	8018d94 <tcp_listen_with_backlog_and_err+0x80>
 8018d62:	b12b      	cbz	r3, 8018d70 <tcp_listen_with_backlog_and_err+0x5c>
 8018d64:	68d9      	ldr	r1, [r3, #12]
 8018d66:	42a1      	cmp	r1, r4
 8018d68:	d024      	beq.n	8018db4 <tcp_listen_with_backlog_and_err+0xa0>
 8018d6a:	460b      	mov	r3, r1
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d1f9      	bne.n	8018d64 <tcp_listen_with_backlog_and_err+0x50>
 8018d70:	2300      	movs	r3, #0
 8018d72:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 8018d74:	4620      	mov	r0, r4
 8018d76:	f7ff ff51 	bl	8018c1c <tcp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018d7a:	4b1a      	ldr	r3, [pc, #104]	; (8018de4 <tcp_listen_with_backlog_and_err+0xd0>)
  lpcb->accept = tcp_accept_null;
 8018d7c:	491a      	ldr	r1, [pc, #104]	; (8018de8 <tcp_listen_with_backlog_and_err+0xd4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018d7e:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 8018d80:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018d82:	60f2      	str	r2, [r6, #12]
 8018d84:	601e      	str	r6, [r3, #0]
 8018d86:	f004 f941 	bl	801d00c <tcp_timer_needed>
  res = ERR_OK;
 8018d8a:	2300      	movs	r3, #0
  if (err != NULL) {
 8018d8c:	b107      	cbz	r7, 8018d90 <tcp_listen_with_backlog_and_err+0x7c>
    *err = res;
 8018d8e:	703b      	strb	r3, [r7, #0]
}
 8018d90:	4630      	mov	r0, r6
 8018d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018d94:	68e3      	ldr	r3, [r4, #12]
 8018d96:	6013      	str	r3, [r2, #0]
 8018d98:	2300      	movs	r3, #0
 8018d9a:	60e3      	str	r3, [r4, #12]
 8018d9c:	e7ea      	b.n	8018d74 <tcp_listen_with_backlog_and_err+0x60>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018d9e:	4b0f      	ldr	r3, [pc, #60]	; (8018ddc <tcp_listen_with_backlog_and_err+0xc8>)
 8018da0:	f240 325a 	movw	r2, #858	; 0x35a
 8018da4:	4911      	ldr	r1, [pc, #68]	; (8018dec <tcp_listen_with_backlog_and_err+0xd8>)
  struct tcp_pcb_listen *lpcb = NULL;
 8018da6:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018da8:	4811      	ldr	r0, [pc, #68]	; (8018df0 <tcp_listen_with_backlog_and_err+0xdc>)
 8018daa:	f009 fb8b 	bl	80224c4 <iprintf>
 8018dae:	f06f 030e 	mvn.w	r3, #14
 8018db2:	e7eb      	b.n	8018d8c <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018db4:	68e2      	ldr	r2, [r4, #12]
 8018db6:	60da      	str	r2, [r3, #12]
 8018db8:	2300      	movs	r3, #0
 8018dba:	60e3      	str	r3, [r4, #12]
 8018dbc:	e7da      	b.n	8018d74 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 8018dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8018dc2:	e7e3      	b.n	8018d8c <tcp_listen_with_backlog_and_err+0x78>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8018dc4:	4b05      	ldr	r3, [pc, #20]	; (8018ddc <tcp_listen_with_backlog_and_err+0xc8>)
 8018dc6:	f240 3259 	movw	r2, #857	; 0x359
 8018dca:	490a      	ldr	r1, [pc, #40]	; (8018df4 <tcp_listen_with_backlog_and_err+0xe0>)
  struct tcp_pcb_listen *lpcb = NULL;
 8018dcc:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8018dce:	4808      	ldr	r0, [pc, #32]	; (8018df0 <tcp_listen_with_backlog_and_err+0xdc>)
 8018dd0:	f009 fb78 	bl	80224c4 <iprintf>
 8018dd4:	f06f 030f 	mvn.w	r3, #15
 8018dd8:	e7d8      	b.n	8018d8c <tcp_listen_with_backlog_and_err+0x78>
 8018dda:	bf00      	nop
 8018ddc:	0803fd88 	.word	0x0803fd88
 8018de0:	2002e1a4 	.word	0x2002e1a4
 8018de4:	2002e1a0 	.word	0x2002e1a0
 8018de8:	08019825 	.word	0x08019825
 8018dec:	0803fe48 	.word	0x0803fe48
 8018df0:	08028d24 	.word	0x08028d24
 8018df4:	0803fe18 	.word	0x0803fe18

08018df8 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8018df8:	2200      	movs	r2, #0
 8018dfa:	f7ff bf8b 	b.w	8018d14 <tcp_listen_with_backlog_and_err>
 8018dfe:	bf00      	nop

08018e00 <tcp_update_rcv_ann_wnd>:
{
 8018e00:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8018e02:	4604      	mov	r4, r0
 8018e04:	b1a8      	cbz	r0, 8018e32 <tcp_update_rcv_ann_wnd+0x32>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018e06:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018e08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018e0a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018e0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018e0e:	1a88      	subs	r0, r1, r2
 8018e10:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8018e14:	4428      	add	r0, r5
 8018e16:	bf94      	ite	ls
 8018e18:	1ac3      	subls	r3, r0, r3
 8018e1a:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	db01      	blt.n	8018e26 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018e22:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8018e24:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018e26:	1aab      	subs	r3, r5, r2
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	dd0a      	ble.n	8018e42 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 8018e2c:	2000      	movs	r0, #0
 8018e2e:	8560      	strh	r0, [r4, #42]	; 0x2a
}
 8018e30:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8018e32:	4b0b      	ldr	r3, [pc, #44]	; (8018e60 <tcp_update_rcv_ann_wnd+0x60>)
 8018e34:	f240 32a6 	movw	r2, #934	; 0x3a6
 8018e38:	490a      	ldr	r1, [pc, #40]	; (8018e64 <tcp_update_rcv_ann_wnd+0x64>)
 8018e3a:	480b      	ldr	r0, [pc, #44]	; (8018e68 <tcp_update_rcv_ann_wnd+0x68>)
 8018e3c:	f009 fb42 	bl	80224c4 <iprintf>
 8018e40:	e7e1      	b.n	8018e06 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8018e42:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018e44:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8018e48:	d202      	bcs.n	8018e50 <tcp_update_rcv_ann_wnd+0x50>
    return 0;
 8018e4a:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018e4c:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 8018e4e:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018e50:	4b03      	ldr	r3, [pc, #12]	; (8018e60 <tcp_update_rcv_ann_wnd+0x60>)
 8018e52:	f240 32b6 	movw	r2, #950	; 0x3b6
 8018e56:	4905      	ldr	r1, [pc, #20]	; (8018e6c <tcp_update_rcv_ann_wnd+0x6c>)
 8018e58:	4803      	ldr	r0, [pc, #12]	; (8018e68 <tcp_update_rcv_ann_wnd+0x68>)
 8018e5a:	f009 fb33 	bl	80224c4 <iprintf>
 8018e5e:	e7f4      	b.n	8018e4a <tcp_update_rcv_ann_wnd+0x4a>
 8018e60:	0803fd88 	.word	0x0803fd88
 8018e64:	0803fe80 	.word	0x0803fe80
 8018e68:	08028d24 	.word	0x08028d24
 8018e6c:	0803fea4 	.word	0x0803fea4

08018e70 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8018e70:	b340      	cbz	r0, 8018ec4 <tcp_recved+0x54>
{
 8018e72:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018e74:	7d03      	ldrb	r3, [r0, #20]
 8018e76:	4605      	mov	r5, r0
 8018e78:	460c      	mov	r4, r1
 8018e7a:	2b01      	cmp	r3, #1
 8018e7c:	d01a      	beq.n	8018eb4 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8018e7e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8018e80:	1919      	adds	r1, r3, r4
 8018e82:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8018e84:	428b      	cmp	r3, r1
 8018e86:	d802      	bhi.n	8018e8e <tcp_recved+0x1e>
 8018e88:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8018e8c:	d901      	bls.n	8018e92 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018e8e:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8018e92:	4628      	mov	r0, r5
 8018e94:	8529      	strh	r1, [r5, #40]	; 0x28
 8018e96:	f7ff ffb3 	bl	8018e00 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8018e9a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8018e9e:	d200      	bcs.n	8018ea2 <tcp_recved+0x32>
}
 8018ea0:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 8018ea2:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8018ea4:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8018ea6:	f043 0302 	orr.w	r3, r3, #2
 8018eaa:	836b      	strh	r3, [r5, #26]
}
 8018eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8018eb0:	f003 bd78 	b.w	801c9a4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018eb4:	4b07      	ldr	r3, [pc, #28]	; (8018ed4 <tcp_recved+0x64>)
 8018eb6:	f240 32d2 	movw	r2, #978	; 0x3d2
 8018eba:	4907      	ldr	r1, [pc, #28]	; (8018ed8 <tcp_recved+0x68>)
 8018ebc:	4807      	ldr	r0, [pc, #28]	; (8018edc <tcp_recved+0x6c>)
 8018ebe:	f009 fb01 	bl	80224c4 <iprintf>
 8018ec2:	e7dc      	b.n	8018e7e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8018ec4:	4b03      	ldr	r3, [pc, #12]	; (8018ed4 <tcp_recved+0x64>)
 8018ec6:	f240 32cf 	movw	r2, #975	; 0x3cf
 8018eca:	4905      	ldr	r1, [pc, #20]	; (8018ee0 <tcp_recved+0x70>)
 8018ecc:	4803      	ldr	r0, [pc, #12]	; (8018edc <tcp_recved+0x6c>)
 8018ece:	f009 baf9 	b.w	80224c4 <iprintf>
 8018ed2:	bf00      	nop
 8018ed4:	0803fd88 	.word	0x0803fd88
 8018ed8:	0803fed8 	.word	0x0803fed8
 8018edc:	08028d24 	.word	0x08028d24
 8018ee0:	0803fec0 	.word	0x0803fec0

08018ee4 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8018ee4:	b158      	cbz	r0, 8018efe <tcp_seg_free+0x1a>
{
 8018ee6:	b510      	push	{r4, lr}
 8018ee8:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8018eea:	6840      	ldr	r0, [r0, #4]
 8018eec:	b108      	cbz	r0, 8018ef2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8018eee:	f7ff f9d1 	bl	8018294 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018ef2:	4621      	mov	r1, r4
 8018ef4:	2004      	movs	r0, #4
  }
}
 8018ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8018efa:	f7fe befb 	b.w	8017cf4 <memp_free>
 8018efe:	4770      	bx	lr

08018f00 <tcp_segs_free>:
  while (seg != NULL) {
 8018f00:	b140      	cbz	r0, 8018f14 <tcp_segs_free+0x14>
{
 8018f02:	b510      	push	{r4, lr}
 8018f04:	4604      	mov	r4, r0
    struct tcp_seg *next = seg->next;
 8018f06:	4620      	mov	r0, r4
 8018f08:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8018f0a:	f7ff ffeb 	bl	8018ee4 <tcp_seg_free>
  while (seg != NULL) {
 8018f0e:	2c00      	cmp	r4, #0
 8018f10:	d1f9      	bne.n	8018f06 <tcp_segs_free+0x6>
}
 8018f12:	bd10      	pop	{r4, pc}
 8018f14:	4770      	bx	lr
 8018f16:	bf00      	nop

08018f18 <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8018f18:	b108      	cbz	r0, 8018f1e <tcp_setprio+0x6>

  pcb->prio = prio;
 8018f1a:	7541      	strb	r1, [r0, #21]
}
 8018f1c:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8018f1e:	4b03      	ldr	r3, [pc, #12]	; (8018f2c <tcp_setprio+0x14>)
 8018f20:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8018f24:	4902      	ldr	r1, [pc, #8]	; (8018f30 <tcp_setprio+0x18>)
 8018f26:	4803      	ldr	r0, [pc, #12]	; (8018f34 <tcp_setprio+0x1c>)
 8018f28:	f009 bacc 	b.w	80224c4 <iprintf>
 8018f2c:	0803fd88 	.word	0x0803fd88
 8018f30:	0803ff00 	.word	0x0803ff00
 8018f34:	08028d24 	.word	0x08028d24

08018f38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018f38:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018f3a:	4605      	mov	r5, r0
 8018f3c:	b1a0      	cbz	r0, 8018f68 <tcp_seg_copy+0x30>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018f3e:	f240 6284 	movw	r2, #1668	; 0x684
 8018f42:	490d      	ldr	r1, [pc, #52]	; (8018f78 <tcp_seg_copy+0x40>)
 8018f44:	2004      	movs	r0, #4
 8018f46:	f7fe feb1 	bl	8017cac <memp_malloc_fn>
  if (cseg == NULL) {
 8018f4a:	4604      	mov	r4, r0
 8018f4c:	b150      	cbz	r0, 8018f64 <tcp_seg_copy+0x2c>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8018f4e:	6828      	ldr	r0, [r5, #0]
 8018f50:	6869      	ldr	r1, [r5, #4]
 8018f52:	68aa      	ldr	r2, [r5, #8]
 8018f54:	68eb      	ldr	r3, [r5, #12]
 8018f56:	6020      	str	r0, [r4, #0]
 8018f58:	6061      	str	r1, [r4, #4]
 8018f5a:	60a2      	str	r2, [r4, #8]
  pbuf_ref(cseg->p);
 8018f5c:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8018f5e:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8018f60:	f7ff fb06 	bl	8018570 <pbuf_ref>
  return cseg;
}
 8018f64:	4620      	mov	r0, r4
 8018f66:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018f68:	4b03      	ldr	r3, [pc, #12]	; (8018f78 <tcp_seg_copy+0x40>)
 8018f6a:	f240 6282 	movw	r2, #1666	; 0x682
 8018f6e:	4903      	ldr	r1, [pc, #12]	; (8018f7c <tcp_seg_copy+0x44>)
 8018f70:	4803      	ldr	r0, [pc, #12]	; (8018f80 <tcp_seg_copy+0x48>)
 8018f72:	f009 faa7 	bl	80224c4 <iprintf>
 8018f76:	e7e2      	b.n	8018f3e <tcp_seg_copy+0x6>
 8018f78:	0803fd88 	.word	0x0803fd88
 8018f7c:	0803ff1c 	.word	0x0803ff1c
 8018f80:	08028d24 	.word	0x08028d24

08018f84 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8018f84:	b100      	cbz	r0, 8018f88 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8018f86:	6101      	str	r1, [r0, #16]
  }
}
 8018f88:	4770      	bx	lr
 8018f8a:	bf00      	nop

08018f8c <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018f8c:	b140      	cbz	r0, 8018fa0 <tcp_recv+0x14>
{
 8018f8e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018f90:	7d03      	ldrb	r3, [r0, #20]
 8018f92:	4604      	mov	r4, r0
 8018f94:	460d      	mov	r5, r1
 8018f96:	2b01      	cmp	r3, #1
 8018f98:	d003      	beq.n	8018fa2 <tcp_recv+0x16>
    pcb->recv = recv;
 8018f9a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  }
}
 8018f9e:	bd38      	pop	{r3, r4, r5, pc}
 8018fa0:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018fa2:	4b05      	ldr	r3, [pc, #20]	; (8018fb8 <tcp_recv+0x2c>)
 8018fa4:	f240 72df 	movw	r2, #2015	; 0x7df
 8018fa8:	4904      	ldr	r1, [pc, #16]	; (8018fbc <tcp_recv+0x30>)
 8018faa:	4805      	ldr	r0, [pc, #20]	; (8018fc0 <tcp_recv+0x34>)
 8018fac:	f009 fa8a 	bl	80224c4 <iprintf>
    pcb->recv = recv;
 8018fb0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8018fb4:	bd38      	pop	{r3, r4, r5, pc}
 8018fb6:	bf00      	nop
 8018fb8:	0803fd88 	.word	0x0803fd88
 8018fbc:	0803ff38 	.word	0x0803ff38
 8018fc0:	08028d24 	.word	0x08028d24

08018fc4 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018fc4:	b140      	cbz	r0, 8018fd8 <tcp_sent+0x14>
{
 8018fc6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018fc8:	7d03      	ldrb	r3, [r0, #20]
 8018fca:	4604      	mov	r4, r0
 8018fcc:	460d      	mov	r5, r1
 8018fce:	2b01      	cmp	r3, #1
 8018fd0:	d003      	beq.n	8018fda <tcp_sent+0x16>
    pcb->sent = sent;
 8018fd2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 8018fd6:	bd38      	pop	{r3, r4, r5, pc}
 8018fd8:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018fda:	4b05      	ldr	r3, [pc, #20]	; (8018ff0 <tcp_sent+0x2c>)
 8018fdc:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8018fe0:	4904      	ldr	r1, [pc, #16]	; (8018ff4 <tcp_sent+0x30>)
 8018fe2:	4805      	ldr	r0, [pc, #20]	; (8018ff8 <tcp_sent+0x34>)
 8018fe4:	f009 fa6e 	bl	80224c4 <iprintf>
    pcb->sent = sent;
 8018fe8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8018fec:	bd38      	pop	{r3, r4, r5, pc}
 8018fee:	bf00      	nop
 8018ff0:	0803fd88 	.word	0x0803fd88
 8018ff4:	0803ff60 	.word	0x0803ff60
 8018ff8:	08028d24 	.word	0x08028d24

08018ffc <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018ffc:	b140      	cbz	r0, 8019010 <tcp_err+0x14>
{
 8018ffe:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8019000:	7d03      	ldrb	r3, [r0, #20]
 8019002:	4604      	mov	r4, r0
 8019004:	460d      	mov	r5, r1
 8019006:	2b01      	cmp	r3, #1
 8019008:	d003      	beq.n	8019012 <tcp_err+0x16>
    pcb->errf = err;
 801900a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  }
}
 801900e:	bd38      	pop	{r3, r4, r5, pc}
 8019010:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8019012:	4b05      	ldr	r3, [pc, #20]	; (8019028 <tcp_err+0x2c>)
 8019014:	f640 020d 	movw	r2, #2061	; 0x80d
 8019018:	4904      	ldr	r1, [pc, #16]	; (801902c <tcp_err+0x30>)
 801901a:	4805      	ldr	r0, [pc, #20]	; (8019030 <tcp_err+0x34>)
 801901c:	f009 fa52 	bl	80224c4 <iprintf>
    pcb->errf = err;
 8019020:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 8019024:	bd38      	pop	{r3, r4, r5, pc}
 8019026:	bf00      	nop
 8019028:	0803fd88 	.word	0x0803fd88
 801902c:	0803ff88 	.word	0x0803ff88
 8019030:	08028d24 	.word	0x08028d24

08019034 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8019034:	b118      	cbz	r0, 801903e <tcp_accept+0xa>
 8019036:	7d03      	ldrb	r3, [r0, #20]
 8019038:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 801903a:	bf08      	it	eq
 801903c:	6181      	streq	r1, [r0, #24]
  }
}
 801903e:	4770      	bx	lr

08019040 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8019040:	b1a8      	cbz	r0, 801906e <tcp_poll+0x2e>
{
 8019042:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019044:	7d03      	ldrb	r3, [r0, #20]
 8019046:	460e      	mov	r6, r1
 8019048:	4604      	mov	r4, r0
 801904a:	4615      	mov	r5, r2
 801904c:	2b01      	cmp	r3, #1
 801904e:	d003      	beq.n	8019058 <tcp_poll+0x18>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8019050:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8019054:	7765      	strb	r5, [r4, #29]
}
 8019056:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019058:	4b08      	ldr	r3, [pc, #32]	; (801907c <tcp_poll+0x3c>)
 801905a:	f640 023e 	movw	r2, #2110	; 0x83e
 801905e:	4908      	ldr	r1, [pc, #32]	; (8019080 <tcp_poll+0x40>)
 8019060:	4808      	ldr	r0, [pc, #32]	; (8019084 <tcp_poll+0x44>)
 8019062:	f009 fa2f 	bl	80224c4 <iprintf>
  pcb->poll = poll;
 8019066:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801906a:	7765      	strb	r5, [r4, #29]
}
 801906c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801906e:	4b03      	ldr	r3, [pc, #12]	; (801907c <tcp_poll+0x3c>)
 8019070:	f640 023d 	movw	r2, #2109	; 0x83d
 8019074:	4904      	ldr	r1, [pc, #16]	; (8019088 <tcp_poll+0x48>)
 8019076:	4803      	ldr	r0, [pc, #12]	; (8019084 <tcp_poll+0x44>)
 8019078:	f009 ba24 	b.w	80224c4 <iprintf>
 801907c:	0803fd88 	.word	0x0803fd88
 8019080:	0803ffc8 	.word	0x0803ffc8
 8019084:	08028d24 	.word	0x08028d24
 8019088:	0803ffb0 	.word	0x0803ffb0

0801908c <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801908c:	2800      	cmp	r0, #0
 801908e:	d02f      	beq.n	80190f0 <tcp_pcb_purge+0x64>
{
 8019090:	b570      	push	{r4, r5, r6, lr}

  if (pcb->state != CLOSED &&
 8019092:	7d03      	ldrb	r3, [r0, #20]
 8019094:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 8019096:	2b0a      	cmp	r3, #10
 8019098:	d001      	beq.n	801909e <tcp_pcb_purge+0x12>
 801909a:	2b01      	cmp	r3, #1
 801909c:	d800      	bhi.n	80190a0 <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 801909e:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 80190a0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80190a2:	b118      	cbz	r0, 80190ac <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 80190a4:	f7ff f8f6 	bl	8018294 <pbuf_free>
      pcb->refused_data = NULL;
 80190a8:	2300      	movs	r3, #0
 80190aa:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 80190ac:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 80190ae:	b134      	cbz	r4, 80190be <tcp_pcb_purge+0x32>
    struct tcp_seg *next = seg->next;
 80190b0:	4620      	mov	r0, r4
 80190b2:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 80190b4:	f7ff ff16 	bl	8018ee4 <tcp_seg_free>
  while (seg != NULL) {
 80190b8:	2c00      	cmp	r4, #0
 80190ba:	d1f9      	bne.n	80190b0 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 80190bc:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 80190be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 80190c2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 80190c4:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 80190c6:	b12c      	cbz	r4, 80190d4 <tcp_pcb_purge+0x48>
    struct tcp_seg *next = seg->next;
 80190c8:	4620      	mov	r0, r4
 80190ca:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 80190cc:	f7ff ff0a 	bl	8018ee4 <tcp_seg_free>
  while (seg != NULL) {
 80190d0:	2c00      	cmp	r4, #0
 80190d2:	d1f9      	bne.n	80190c8 <tcp_pcb_purge+0x3c>
    tcp_segs_free(pcb->unacked);
 80190d4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 80190d6:	b12c      	cbz	r4, 80190e4 <tcp_pcb_purge+0x58>
    struct tcp_seg *next = seg->next;
 80190d8:	4620      	mov	r0, r4
 80190da:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 80190dc:	f7ff ff02 	bl	8018ee4 <tcp_seg_free>
  while (seg != NULL) {
 80190e0:	2c00      	cmp	r4, #0
 80190e2:	d1f9      	bne.n	80190d8 <tcp_pcb_purge+0x4c>
    pcb->unacked = pcb->unsent = NULL;
 80190e4:	2300      	movs	r3, #0
 80190e6:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 80190ea:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 80190ee:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80190f0:	4b03      	ldr	r3, [pc, #12]	; (8019100 <tcp_pcb_purge+0x74>)
 80190f2:	f640 0251 	movw	r2, #2129	; 0x851
 80190f6:	4903      	ldr	r1, [pc, #12]	; (8019104 <tcp_pcb_purge+0x78>)
 80190f8:	4803      	ldr	r0, [pc, #12]	; (8019108 <tcp_pcb_purge+0x7c>)
 80190fa:	f009 b9e3 	b.w	80224c4 <iprintf>
 80190fe:	bf00      	nop
 8019100:	0803fd88 	.word	0x0803fd88
 8019104:	0803ffe8 	.word	0x0803ffe8
 8019108:	08028d24 	.word	0x08028d24

0801910c <tcp_slowtmr>:
{
 801910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8019110:	4fb8      	ldr	r7, [pc, #736]	; (80193f4 <tcp_slowtmr+0x2e8>)
{
 8019112:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 8019114:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8019418 <tcp_slowtmr+0x30c>
  ++tcp_ticks;
 8019118:	683a      	ldr	r2, [r7, #0]
  ++tcp_timer_ctr;
 801911a:	f899 3000 	ldrb.w	r3, [r9]
  ++tcp_ticks;
 801911e:	3201      	adds	r2, #1
 8019120:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 801941c <tcp_slowtmr+0x310>
  ++tcp_timer_ctr;
 8019124:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019126:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 8019420 <tcp_slowtmr+0x314>
  ++tcp_ticks;
 801912a:	603a      	str	r2, [r7, #0]
  ++tcp_timer_ctr;
 801912c:	f889 3000 	strb.w	r3, [r9]
  pcb = tcp_active_pcbs;
 8019130:	f8db 4000 	ldr.w	r4, [fp]
  while (pcb != NULL) {
 8019134:	2c00      	cmp	r4, #0
 8019136:	f000 8081 	beq.w	801923c <tcp_slowtmr+0x130>
  prev = NULL;
 801913a:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801913e:	7d23      	ldrb	r3, [r4, #20]
 8019140:	2b00      	cmp	r3, #0
 8019142:	f000 80f7 	beq.w	8019334 <tcp_slowtmr+0x228>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019146:	2b01      	cmp	r3, #1
 8019148:	f000 80ff 	beq.w	801934a <tcp_slowtmr+0x23e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801914c:	2b0a      	cmp	r3, #10
 801914e:	f000 8107 	beq.w	8019360 <tcp_slowtmr+0x254>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019152:	f899 2000 	ldrb.w	r2, [r9]
 8019156:	7fa3      	ldrb	r3, [r4, #30]
 8019158:	4293      	cmp	r3, r2
 801915a:	f000 810e 	beq.w	801937a <tcp_slowtmr+0x26e>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801915e:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8019160:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019162:	2b02      	cmp	r3, #2
 8019164:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8019168:	f000 810d 	beq.w	8019386 <tcp_slowtmr+0x27a>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801916c:	2a0b      	cmp	r2, #11
 801916e:	f240 80c8 	bls.w	8019302 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 8019172:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8019174:	2b06      	cmp	r3, #6
 8019176:	f000 80b7 	beq.w	80192e8 <tcp_slowtmr+0x1dc>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801917a:	7a66      	ldrb	r6, [r4, #9]
 801917c:	f016 0208 	ands.w	r2, r6, #8
 8019180:	9205      	str	r2, [sp, #20]
 8019182:	d01b      	beq.n	80191bc <tcp_slowtmr+0xb0>
 8019184:	2b04      	cmp	r3, #4
 8019186:	d007      	beq.n	8019198 <tcp_slowtmr+0x8c>
 8019188:	f1a3 0307 	sub.w	r3, r3, #7
 801918c:	fab3 f383 	clz	r3, r3
 8019190:	095b      	lsrs	r3, r3, #5
 8019192:	2b00      	cmp	r3, #0
 8019194:	f000 80b3 	beq.w	80192fe <tcp_slowtmr+0x1f2>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019198:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801919c:	4b96      	ldr	r3, [pc, #600]	; (80193f8 <tcp_slowtmr+0x2ec>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801919e:	683a      	ldr	r2, [r7, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80191a0:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80191a2:	6a21      	ldr	r1, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80191a4:	4e95      	ldr	r6, [pc, #596]	; (80193fc <tcp_slowtmr+0x2f0>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80191a6:	1a52      	subs	r2, r2, r1
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80191a8:	fba6 6303 	umull	r6, r3, r6, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80191ac:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80191b0:	f240 8145 	bls.w	801943e <tcp_slowtmr+0x332>
        ++pcb_remove;
 80191b4:	3501      	adds	r5, #1
        ++pcb_reset;
 80191b6:	2301      	movs	r3, #1
        ++pcb_remove;
 80191b8:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 80191ba:	9305      	str	r3, [sp, #20]
    if (pcb->ooseq != NULL &&
 80191bc:	6f66      	ldr	r6, [r4, #116]	; 0x74
 80191be:	b14e      	cbz	r6, 80191d4 <tcp_slowtmr+0xc8>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80191c0:	6839      	ldr	r1, [r7, #0]
 80191c2:	6a20      	ldr	r0, [r4, #32]
 80191c4:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
 80191c8:	1a09      	subs	r1, r1, r0
 80191ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (pcb->ooseq != NULL &&
 80191ce:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 80191d2:	d255      	bcs.n	8019280 <tcp_slowtmr+0x174>
    if (pcb->state == SYN_RCVD) {
 80191d4:	7d23      	ldrb	r3, [r4, #20]
 80191d6:	2b03      	cmp	r3, #3
 80191d8:	d05c      	beq.n	8019294 <tcp_slowtmr+0x188>
    if (pcb->state == LAST_ACK) {
 80191da:	2b09      	cmp	r3, #9
 80191dc:	d15f      	bne.n	801929e <tcp_slowtmr+0x192>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80191de:	683b      	ldr	r3, [r7, #0]
 80191e0:	6a22      	ldr	r2, [r4, #32]
 80191e2:	1a9b      	subs	r3, r3, r2
 80191e4:	2bf0      	cmp	r3, #240	; 0xf0
 80191e6:	d95a      	bls.n	801929e <tcp_slowtmr+0x192>
      tcp_pcb_purge(pcb);
 80191e8:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80191ea:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 80191ee:	f7ff ff4d 	bl	801908c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80191f2:	f8db 3000 	ldr.w	r3, [fp]
      if (prev != NULL) {
 80191f6:	f1b8 0f00 	cmp.w	r8, #0
 80191fa:	f000 8159 	beq.w	80194b0 <tcp_slowtmr+0x3a4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80191fe:	42a3      	cmp	r3, r4
 8019200:	f000 81b2 	beq.w	8019568 <tcp_slowtmr+0x45c>
        prev->next = pcb->next;
 8019204:	68e3      	ldr	r3, [r4, #12]
 8019206:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 801920a:	9b05      	ldr	r3, [sp, #20]
 801920c:	2b00      	cmp	r3, #0
 801920e:	f040 812f 	bne.w	8019470 <tcp_slowtmr+0x364>
      err_arg = pcb->callback_arg;
 8019212:	6922      	ldr	r2, [r4, #16]
      tcp_free(pcb2);
 8019214:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 8019216:	4e7a      	ldr	r6, [pc, #488]	; (8019400 <tcp_slowtmr+0x2f4>)
      pcb = pcb->next;
 8019218:	68e4      	ldr	r4, [r4, #12]
      err_arg = pcb->callback_arg;
 801921a:	9205      	str	r2, [sp, #20]
      tcp_free(pcb2);
 801921c:	f7ff fcfe 	bl	8018c1c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8019220:	2300      	movs	r3, #0
 8019222:	7033      	strb	r3, [r6, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8019224:	b145      	cbz	r5, 8019238 <tcp_slowtmr+0x12c>
 8019226:	9a05      	ldr	r2, [sp, #20]
 8019228:	f06f 010c 	mvn.w	r1, #12
 801922c:	4610      	mov	r0, r2
 801922e:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8019230:	7833      	ldrb	r3, [r6, #0]
 8019232:	2b00      	cmp	r3, #0
 8019234:	f47f af7c 	bne.w	8019130 <tcp_slowtmr+0x24>
  while (pcb != NULL) {
 8019238:	2c00      	cmp	r4, #0
 801923a:	d180      	bne.n	801913e <tcp_slowtmr+0x32>
  pcb = tcp_tw_pcbs;
 801923c:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8019424 <tcp_slowtmr+0x318>
 8019240:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 8019244:	b1cc      	cbz	r4, 801927a <tcp_slowtmr+0x16e>
  prev = NULL;
 8019246:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019248:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8019420 <tcp_slowtmr+0x314>
 801924c:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8019428 <tcp_slowtmr+0x31c>
 8019250:	4e6c      	ldr	r6, [pc, #432]	; (8019404 <tcp_slowtmr+0x2f8>)
 8019252:	7d23      	ldrb	r3, [r4, #20]
 8019254:	2b0a      	cmp	r3, #10
 8019256:	d006      	beq.n	8019266 <tcp_slowtmr+0x15a>
 8019258:	4643      	mov	r3, r8
 801925a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801925e:	4651      	mov	r1, sl
 8019260:	4630      	mov	r0, r6
 8019262:	f009 f92f 	bl	80224c4 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019266:	683b      	ldr	r3, [r7, #0]
 8019268:	6a22      	ldr	r2, [r4, #32]
 801926a:	1a9b      	subs	r3, r3, r2
 801926c:	2bf0      	cmp	r3, #240	; 0xf0
 801926e:	f200 80ab 	bhi.w	80193c8 <tcp_slowtmr+0x2bc>
      pcb = pcb->next;
 8019272:	4625      	mov	r5, r4
 8019274:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8019276:	2c00      	cmp	r4, #0
 8019278:	d1eb      	bne.n	8019252 <tcp_slowtmr+0x146>
}
 801927a:	b007      	add	sp, #28
 801927c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct tcp_seg *next = seg->next;
 8019280:	4630      	mov	r0, r6
 8019282:	6836      	ldr	r6, [r6, #0]
    tcp_seg_free(seg);
 8019284:	f7ff fe2e 	bl	8018ee4 <tcp_seg_free>
  while (seg != NULL) {
 8019288:	2e00      	cmp	r6, #0
 801928a:	d1f9      	bne.n	8019280 <tcp_slowtmr+0x174>
    if (pcb->state == SYN_RCVD) {
 801928c:	7d23      	ldrb	r3, [r4, #20]
    pcb->ooseq = NULL;
 801928e:	6766      	str	r6, [r4, #116]	; 0x74
    if (pcb->state == SYN_RCVD) {
 8019290:	2b03      	cmp	r3, #3
 8019292:	d1a2      	bne.n	80191da <tcp_slowtmr+0xce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019294:	683b      	ldr	r3, [r7, #0]
 8019296:	6a22      	ldr	r2, [r4, #32]
 8019298:	1a9b      	subs	r3, r3, r2
 801929a:	2b28      	cmp	r3, #40	; 0x28
 801929c:	d8a4      	bhi.n	80191e8 <tcp_slowtmr+0xdc>
    if (pcb_remove) {
 801929e:	2d00      	cmp	r5, #0
 80192a0:	d1a2      	bne.n	80191e8 <tcp_slowtmr+0xdc>
      ++prev->polltmr;
 80192a2:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80192a4:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 80192a6:	3301      	adds	r3, #1
      pcb = pcb->next;
 80192a8:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 80192aa:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80192ac:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80192ae:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80192b0:	d814      	bhi.n	80192dc <tcp_slowtmr+0x1d0>
        tcp_active_pcbs_changed = 0;
 80192b2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8019400 <tcp_slowtmr+0x2f4>
        TCP_EVENT_POLL(prev, err);
 80192b6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 80192ba:	7725      	strb	r5, [r4, #28]
        tcp_active_pcbs_changed = 0;
 80192bc:	f888 5000 	strb.w	r5, [r8]
        TCP_EVENT_POLL(prev, err);
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	f000 80b3 	beq.w	801942c <tcp_slowtmr+0x320>
 80192c6:	4621      	mov	r1, r4
 80192c8:	6920      	ldr	r0, [r4, #16]
 80192ca:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80192cc:	f898 3000 	ldrb.w	r3, [r8]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	f47f af2d 	bne.w	8019130 <tcp_slowtmr+0x24>
        if (err == ERR_OK) {
 80192d6:	2800      	cmp	r0, #0
 80192d8:	f000 80a8 	beq.w	801942c <tcp_slowtmr+0x320>
 80192dc:	46a0      	mov	r8, r4
      pcb = pcb->next;
 80192de:	4634      	mov	r4, r6
  while (pcb != NULL) {
 80192e0:	2c00      	cmp	r4, #0
 80192e2:	f47f af2c 	bne.w	801913e <tcp_slowtmr+0x32>
 80192e6:	e7a9      	b.n	801923c <tcp_slowtmr+0x130>
      if (pcb->flags & TF_RXCLOSED) {
 80192e8:	8b63      	ldrh	r3, [r4, #26]
 80192ea:	06db      	lsls	r3, r3, #27
 80192ec:	d506      	bpl.n	80192fc <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	6a22      	ldr	r2, [r4, #32]
 80192f2:	1a9b      	subs	r3, r3, r2
 80192f4:	2b28      	cmp	r3, #40	; 0x28
 80192f6:	d901      	bls.n	80192fc <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 80192f8:	3501      	adds	r5, #1
 80192fa:	b2ed      	uxtb	r5, r5
    pcb_reset = 0;
 80192fc:	2300      	movs	r3, #0
 80192fe:	9305      	str	r3, [sp, #20]
 8019300:	e75c      	b.n	80191bc <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 8019302:	f894 5099 	ldrb.w	r5, [r4, #153]	; 0x99
 8019306:	2d00      	cmp	r5, #0
 8019308:	d043      	beq.n	8019392 <tcp_slowtmr+0x286>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801930a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801930c:	b133      	cbz	r3, 801931c <tcp_slowtmr+0x210>
 801930e:	4653      	mov	r3, sl
 8019310:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019314:	493c      	ldr	r1, [pc, #240]	; (8019408 <tcp_slowtmr+0x2fc>)
 8019316:	483b      	ldr	r0, [pc, #236]	; (8019404 <tcp_slowtmr+0x2f8>)
 8019318:	f009 f8d4 	bl	80224c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801931c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801931e:	2b00      	cmp	r3, #0
 8019320:	f000 8139 	beq.w	8019596 <tcp_slowtmr+0x48a>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019324:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8019328:	2b0b      	cmp	r3, #11
 801932a:	f240 80ae 	bls.w	801948a <tcp_slowtmr+0x37e>
 801932e:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 8019330:	2501      	movs	r5, #1
 8019332:	e71f      	b.n	8019174 <tcp_slowtmr+0x68>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019334:	4653      	mov	r3, sl
 8019336:	f240 42be 	movw	r2, #1214	; 0x4be
 801933a:	4934      	ldr	r1, [pc, #208]	; (801940c <tcp_slowtmr+0x300>)
 801933c:	4831      	ldr	r0, [pc, #196]	; (8019404 <tcp_slowtmr+0x2f8>)
 801933e:	f009 f8c1 	bl	80224c4 <iprintf>
 8019342:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019344:	2b01      	cmp	r3, #1
 8019346:	f47f af01 	bne.w	801914c <tcp_slowtmr+0x40>
 801934a:	4653      	mov	r3, sl
 801934c:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019350:	492f      	ldr	r1, [pc, #188]	; (8019410 <tcp_slowtmr+0x304>)
 8019352:	482c      	ldr	r0, [pc, #176]	; (8019404 <tcp_slowtmr+0x2f8>)
 8019354:	f009 f8b6 	bl	80224c4 <iprintf>
 8019358:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801935a:	2b0a      	cmp	r3, #10
 801935c:	f47f aef9 	bne.w	8019152 <tcp_slowtmr+0x46>
 8019360:	4653      	mov	r3, sl
 8019362:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019366:	492b      	ldr	r1, [pc, #172]	; (8019414 <tcp_slowtmr+0x308>)
 8019368:	4826      	ldr	r0, [pc, #152]	; (8019404 <tcp_slowtmr+0x2f8>)
 801936a:	f009 f8ab 	bl	80224c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801936e:	f899 2000 	ldrb.w	r2, [r9]
 8019372:	7fa3      	ldrb	r3, [r4, #30]
 8019374:	4293      	cmp	r3, r2
 8019376:	f47f aef2 	bne.w	801915e <tcp_slowtmr+0x52>
      continue;
 801937a:	46a0      	mov	r8, r4
      pcb = pcb->next;
 801937c:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801937e:	2c00      	cmp	r4, #0
 8019380:	f47f aedd 	bne.w	801913e <tcp_slowtmr+0x32>
 8019384:	e75a      	b.n	801923c <tcp_slowtmr+0x130>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019386:	2a05      	cmp	r2, #5
 8019388:	d9bb      	bls.n	8019302 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801938a:	2300      	movs	r3, #0
      ++pcb_remove;
 801938c:	2501      	movs	r5, #1
    pcb_reset = 0;
 801938e:	9305      	str	r3, [sp, #20]
 8019390:	e714      	b.n	80191bc <tcp_slowtmr+0xb0>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019392:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8019396:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801939a:	b291      	uxth	r1, r2
 801939c:	4281      	cmp	r1, r0
 801939e:	d802      	bhi.n	80193a6 <tcp_slowtmr+0x29a>
          ++pcb->rtime;
 80193a0:	1c4a      	adds	r2, r1, #1
 80193a2:	b212      	sxth	r2, r2
 80193a4:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 80193a6:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80193aa:	4291      	cmp	r1, r2
 80193ac:	f73f aee2 	bgt.w	8019174 <tcp_slowtmr+0x68>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80193b0:	4620      	mov	r0, r4
 80193b2:	f003 f9b7 	bl	801c724 <tcp_rexmit_rto_prepare>
 80193b6:	2800      	cmp	r0, #0
 80193b8:	f000 80a2 	beq.w	8019500 <tcp_slowtmr+0x3f4>
 80193bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80193be:	2b00      	cmp	r3, #0
 80193c0:	f000 809a 	beq.w	80194f8 <tcp_slowtmr+0x3ec>
 80193c4:	7d23      	ldrb	r3, [r4, #20]
 80193c6:	e6d5      	b.n	8019174 <tcp_slowtmr+0x68>
      tcp_pcb_purge(pcb);
 80193c8:	4620      	mov	r0, r4
 80193ca:	f7ff fe5f 	bl	801908c <tcp_pcb_purge>
      if (prev != NULL) {
 80193ce:	2d00      	cmp	r5, #0
 80193d0:	f000 80d2 	beq.w	8019578 <tcp_slowtmr+0x46c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80193d4:	f8d9 3000 	ldr.w	r3, [r9]
 80193d8:	42a3      	cmp	r3, r4
 80193da:	f000 80f2 	beq.w	80195c2 <tcp_slowtmr+0x4b6>
        prev->next = pcb->next;
 80193de:	68e3      	ldr	r3, [r4, #12]
 80193e0:	60eb      	str	r3, [r5, #12]
 80193e2:	68e3      	ldr	r3, [r4, #12]
      tcp_free(pcb2);
 80193e4:	4620      	mov	r0, r4
      pcb = pcb->next;
 80193e6:	461c      	mov	r4, r3
      tcp_free(pcb2);
 80193e8:	f7ff fc18 	bl	8018c1c <tcp_free>
  while (pcb != NULL) {
 80193ec:	2c00      	cmp	r4, #0
 80193ee:	f47f af30 	bne.w	8019252 <tcp_slowtmr+0x146>
 80193f2:	e742      	b.n	801927a <tcp_slowtmr+0x16e>
 80193f4:	2002e19c 	.word	0x2002e19c
 80193f8:	000a4cb8 	.word	0x000a4cb8
 80193fc:	10624dd3 	.word	0x10624dd3
 8019400:	2002e194 	.word	0x2002e194
 8019404:	08028d24 	.word	0x08028d24
 8019408:	0804008c 	.word	0x0804008c
 801940c:	08040004 	.word	0x08040004
 8019410:	08040030 	.word	0x08040030
 8019414:	0804005c 	.word	0x0804005c
 8019418:	2001a9ed 	.word	0x2001a9ed
 801941c:	2002e198 	.word	0x2002e198
 8019420:	0803fd88 	.word	0x0803fd88
 8019424:	2002e1a8 	.word	0x2002e1a8
 8019428:	08040150 	.word	0x08040150
          tcp_output(prev);
 801942c:	4620      	mov	r0, r4
 801942e:	46a0      	mov	r8, r4
      pcb = pcb->next;
 8019430:	4634      	mov	r4, r6
          tcp_output(prev);
 8019432:	f003 fab7 	bl	801c9a4 <tcp_output>
  while (pcb != NULL) {
 8019436:	2c00      	cmp	r4, #0
 8019438:	f47f ae81 	bne.w	801913e <tcp_slowtmr+0x32>
 801943c:	e6fe      	b.n	801923c <tcp_slowtmr+0x130>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801943e:	4965      	ldr	r1, [pc, #404]	; (80195d4 <tcp_slowtmr+0x4c8>)
 8019440:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8019444:	fb01 0303 	mla	r3, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 8019448:	4963      	ldr	r1, [pc, #396]	; (80195d8 <tcp_slowtmr+0x4cc>)
 801944a:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801944e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8019452:	f67f af53 	bls.w	80192fc <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 8019456:	4620      	mov	r0, r4
 8019458:	f003 fcdc 	bl	801ce14 <tcp_keepalive>
        if (err == ERR_OK) {
 801945c:	2800      	cmp	r0, #0
 801945e:	f47f af4d 	bne.w	80192fc <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 8019462:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8019466:	9005      	str	r0, [sp, #20]
          pcb->keep_cnt_sent++;
 8019468:	3301      	adds	r3, #1
 801946a:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801946e:	e6a5      	b.n	80191bc <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019470:	8b26      	ldrh	r6, [r4, #24]
 8019472:	1d20      	adds	r0, r4, #4
 8019474:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019476:	4623      	mov	r3, r4
 8019478:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801947a:	9602      	str	r6, [sp, #8]
 801947c:	8ae6      	ldrh	r6, [r4, #22]
 801947e:	9000      	str	r0, [sp, #0]
 8019480:	4620      	mov	r0, r4
 8019482:	9601      	str	r6, [sp, #4]
 8019484:	f003 fa0e 	bl	801c8a4 <tcp_rst>
 8019488:	e6c3      	b.n	8019212 <tcp_slowtmr+0x106>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801948a:	4a54      	ldr	r2, [pc, #336]	; (80195dc <tcp_slowtmr+0x4d0>)
 801948c:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
          if (pcb->persist_cnt < backoff_cnt) {
 8019490:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8019494:	440a      	add	r2, r1
 8019496:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801949a:	4293      	cmp	r3, r2
 801949c:	d215      	bcs.n	80194ca <tcp_slowtmr+0x3be>
            pcb->persist_cnt++;
 801949e:	3301      	adds	r3, #1
 80194a0:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80194a2:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80194a4:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80194a8:	d20f      	bcs.n	80194ca <tcp_slowtmr+0x3be>
 80194aa:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 80194ac:	2500      	movs	r5, #0
 80194ae:	e661      	b.n	8019174 <tcp_slowtmr+0x68>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80194b0:	42a3      	cmp	r3, r4
 80194b2:	d006      	beq.n	80194c2 <tcp_slowtmr+0x3b6>
 80194b4:	4653      	mov	r3, sl
 80194b6:	f240 5271 	movw	r2, #1393	; 0x571
 80194ba:	4949      	ldr	r1, [pc, #292]	; (80195e0 <tcp_slowtmr+0x4d4>)
 80194bc:	4849      	ldr	r0, [pc, #292]	; (80195e4 <tcp_slowtmr+0x4d8>)
 80194be:	f009 f801 	bl	80224c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80194c2:	68e3      	ldr	r3, [r4, #12]
 80194c4:	f8cb 3000 	str.w	r3, [fp]
 80194c8:	e69f      	b.n	801920a <tcp_slowtmr+0xfe>
            if (pcb->snd_wnd == 0) {
 80194ca:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80194ce:	2d00      	cmp	r5, #0
 80194d0:	d169      	bne.n	80195a6 <tcp_slowtmr+0x49a>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80194d2:	4620      	mov	r0, r4
 80194d4:	f003 fcc8 	bl	801ce68 <tcp_zero_window_probe>
 80194d8:	2800      	cmp	r0, #0
 80194da:	f47f af73 	bne.w	80193c4 <tcp_slowtmr+0x2b8>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80194de:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 80194e2:	2500      	movs	r5, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80194e4:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 80194e6:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80194ea:	f63f af6b 	bhi.w	80193c4 <tcp_slowtmr+0x2b8>
                pcb->persist_backoff++;
 80194ee:	1c5a      	adds	r2, r3, #1
 80194f0:	7d23      	ldrb	r3, [r4, #20]
 80194f2:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 80194f6:	e63d      	b.n	8019174 <tcp_slowtmr+0x68>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80194f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	f43f af62 	beq.w	80193c4 <tcp_slowtmr+0x2b8>
            if (pcb->state != SYN_SENT) {
 8019500:	7d23      	ldrb	r3, [r4, #20]
 8019502:	2b02      	cmp	r3, #2
 8019504:	d014      	beq.n	8019530 <tcp_slowtmr+0x424>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8019506:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801950a:	f647 71ff 	movw	r1, #32767	; 0x7fff
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801950e:	4e36      	ldr	r6, [pc, #216]	; (80195e8 <tcp_slowtmr+0x4dc>)
 8019510:	2a0c      	cmp	r2, #12
 8019512:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8019516:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801951a:	bf28      	it	cs
 801951c:	220c      	movcs	r2, #12
 801951e:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8019522:	5cb2      	ldrb	r2, [r6, r2]
 8019524:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019526:	428b      	cmp	r3, r1
 8019528:	bfa8      	it	ge
 801952a:	460b      	movge	r3, r1
 801952c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8019530:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->rtime = 0;
 8019534:	2100      	movs	r1, #0
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8019536:	8e60      	ldrh	r0, [r4, #50]	; 0x32
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8019538:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801953c:	0042      	lsls	r2, r0, #1
            pcb->cwnd = pcb->mss;
 801953e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8019542:	42b3      	cmp	r3, r6
            tcp_rexmit_rto_commit(pcb);
 8019544:	4620      	mov	r0, r4
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8019546:	b292      	uxth	r2, r2
            pcb->rtime = 0;
 8019548:	8621      	strh	r1, [r4, #48]	; 0x30
            pcb->ssthresh = eff_wnd >> 1;
 801954a:	bf28      	it	cs
 801954c:	4633      	movcs	r3, r6
            pcb->bytes_acked = 0;
 801954e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8019552:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 8019556:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801955a:	bf88      	it	hi
 801955c:	4613      	movhi	r3, r2
 801955e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 8019562:	f003 fc1d 	bl	801cda0 <tcp_rexmit_rto_commit>
 8019566:	e72d      	b.n	80193c4 <tcp_slowtmr+0x2b8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019568:	4653      	mov	r3, sl
 801956a:	f240 526d 	movw	r2, #1389	; 0x56d
 801956e:	491f      	ldr	r1, [pc, #124]	; (80195ec <tcp_slowtmr+0x4e0>)
 8019570:	481c      	ldr	r0, [pc, #112]	; (80195e4 <tcp_slowtmr+0x4d8>)
 8019572:	f008 ffa7 	bl	80224c4 <iprintf>
 8019576:	e645      	b.n	8019204 <tcp_slowtmr+0xf8>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8019578:	f8d9 3000 	ldr.w	r3, [r9]
 801957c:	42a3      	cmp	r3, r4
 801957e:	d006      	beq.n	801958e <tcp_slowtmr+0x482>
 8019580:	4643      	mov	r3, r8
 8019582:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8019586:	491a      	ldr	r1, [pc, #104]	; (80195f0 <tcp_slowtmr+0x4e4>)
 8019588:	4630      	mov	r0, r6
 801958a:	f008 ff9b 	bl	80224c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801958e:	68e3      	ldr	r3, [r4, #12]
 8019590:	f8c9 3000 	str.w	r3, [r9]
 8019594:	e726      	b.n	80193e4 <tcp_slowtmr+0x2d8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8019596:	4653      	mov	r3, sl
 8019598:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801959c:	4915      	ldr	r1, [pc, #84]	; (80195f4 <tcp_slowtmr+0x4e8>)
 801959e:	4811      	ldr	r0, [pc, #68]	; (80195e4 <tcp_slowtmr+0x4d8>)
 80195a0:	f008 ff90 	bl	80224c4 <iprintf>
 80195a4:	e6be      	b.n	8019324 <tcp_slowtmr+0x218>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80195a6:	4629      	mov	r1, r5
 80195a8:	4620      	mov	r0, r4
 80195aa:	f002 fee5 	bl	801c378 <tcp_split_unsent_seg>
 80195ae:	2800      	cmp	r0, #0
 80195b0:	d195      	bne.n	80194de <tcp_slowtmr+0x3d2>
                if (tcp_output(pcb) == ERR_OK) {
 80195b2:	4620      	mov	r0, r4
 80195b4:	f003 f9f6 	bl	801c9a4 <tcp_output>
 80195b8:	2800      	cmp	r0, #0
 80195ba:	d190      	bne.n	80194de <tcp_slowtmr+0x3d2>
    pcb_remove = 0;
 80195bc:	4605      	mov	r5, r0
 80195be:	7d23      	ldrb	r3, [r4, #20]
 80195c0:	e5d8      	b.n	8019174 <tcp_slowtmr+0x68>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80195c2:	4643      	mov	r3, r8
 80195c4:	f240 52af 	movw	r2, #1455	; 0x5af
 80195c8:	490b      	ldr	r1, [pc, #44]	; (80195f8 <tcp_slowtmr+0x4ec>)
 80195ca:	4630      	mov	r0, r6
 80195cc:	f008 ff7a 	bl	80224c4 <iprintf>
 80195d0:	e705      	b.n	80193de <tcp_slowtmr+0x2d2>
 80195d2:	bf00      	nop
 80195d4:	000124f8 	.word	0x000124f8
 80195d8:	10624dd3 	.word	0x10624dd3
 80195dc:	0804047c 	.word	0x0804047c
 80195e0:	08040124 	.word	0x08040124
 80195e4:	08028d24 	.word	0x08028d24
 80195e8:	0804045c 	.word	0x0804045c
 80195ec:	080400f8 	.word	0x080400f8
 80195f0:	080401a8 	.word	0x080401a8
 80195f4:	080400c0 	.word	0x080400c0
 80195f8:	08040180 	.word	0x08040180

080195fc <tcp_pcb_remove>:
{
 80195fc:	b538      	push	{r3, r4, r5, lr}
 80195fe:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8019600:	460c      	mov	r4, r1
 8019602:	2900      	cmp	r1, #0
 8019604:	d04a      	beq.n	801969c <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8019606:	2d00      	cmp	r5, #0
 8019608:	d051      	beq.n	80196ae <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801960a:	682b      	ldr	r3, [r5, #0]
 801960c:	42a3      	cmp	r3, r4
 801960e:	d032      	beq.n	8019676 <tcp_pcb_remove+0x7a>
 8019610:	b12b      	cbz	r3, 801961e <tcp_pcb_remove+0x22>
 8019612:	68da      	ldr	r2, [r3, #12]
 8019614:	42a2      	cmp	r2, r4
 8019616:	d03e      	beq.n	8019696 <tcp_pcb_remove+0x9a>
 8019618:	4613      	mov	r3, r2
 801961a:	2b00      	cmp	r3, #0
 801961c:	d1f9      	bne.n	8019612 <tcp_pcb_remove+0x16>
 801961e:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8019620:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8019622:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8019624:	f7ff fd32 	bl	801908c <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8019628:	7d23      	ldrb	r3, [r4, #20]
 801962a:	2b0a      	cmp	r3, #10
 801962c:	d02d      	beq.n	801968a <tcp_pcb_remove+0x8e>
 801962e:	2b01      	cmp	r3, #1
 8019630:	d01d      	beq.n	801966e <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 8019632:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8019634:	07da      	lsls	r2, r3, #31
 8019636:	d421      	bmi.n	801967c <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8019638:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801963a:	b133      	cbz	r3, 801964a <tcp_pcb_remove+0x4e>
 801963c:	4b20      	ldr	r3, [pc, #128]	; (80196c0 <tcp_pcb_remove+0xc4>)
 801963e:	f640 0293 	movw	r2, #2195	; 0x893
 8019642:	4920      	ldr	r1, [pc, #128]	; (80196c4 <tcp_pcb_remove+0xc8>)
 8019644:	4820      	ldr	r0, [pc, #128]	; (80196c8 <tcp_pcb_remove+0xcc>)
 8019646:	f008 ff3d 	bl	80224c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801964a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801964c:	b133      	cbz	r3, 801965c <tcp_pcb_remove+0x60>
 801964e:	4b1c      	ldr	r3, [pc, #112]	; (80196c0 <tcp_pcb_remove+0xc4>)
 8019650:	f640 0294 	movw	r2, #2196	; 0x894
 8019654:	491d      	ldr	r1, [pc, #116]	; (80196cc <tcp_pcb_remove+0xd0>)
 8019656:	481c      	ldr	r0, [pc, #112]	; (80196c8 <tcp_pcb_remove+0xcc>)
 8019658:	f008 ff34 	bl	80224c4 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801965c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801965e:	b133      	cbz	r3, 801966e <tcp_pcb_remove+0x72>
 8019660:	4b17      	ldr	r3, [pc, #92]	; (80196c0 <tcp_pcb_remove+0xc4>)
 8019662:	f640 0296 	movw	r2, #2198	; 0x896
 8019666:	491a      	ldr	r1, [pc, #104]	; (80196d0 <tcp_pcb_remove+0xd4>)
 8019668:	4817      	ldr	r0, [pc, #92]	; (80196c8 <tcp_pcb_remove+0xcc>)
 801966a:	f008 ff2b 	bl	80224c4 <iprintf>
  pcb->state = CLOSED;
 801966e:	2300      	movs	r3, #0
 8019670:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8019672:	82e3      	strh	r3, [r4, #22]
}
 8019674:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 8019676:	68e3      	ldr	r3, [r4, #12]
 8019678:	602b      	str	r3, [r5, #0]
 801967a:	e7d0      	b.n	801961e <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801967c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8019680:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8019682:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8019684:	f003 f98e 	bl	801c9a4 <tcp_output>
 8019688:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state != LISTEN) {
 801968a:	2b01      	cmp	r3, #1
 801968c:	d0ef      	beq.n	801966e <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801968e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019690:	2b00      	cmp	r3, #0
 8019692:	d1d3      	bne.n	801963c <tcp_pcb_remove+0x40>
 8019694:	e7d9      	b.n	801964a <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 8019696:	68e2      	ldr	r2, [r4, #12]
 8019698:	60da      	str	r2, [r3, #12]
 801969a:	e7c0      	b.n	801961e <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801969c:	4b08      	ldr	r3, [pc, #32]	; (80196c0 <tcp_pcb_remove+0xc4>)
 801969e:	f640 0283 	movw	r2, #2179	; 0x883
 80196a2:	490c      	ldr	r1, [pc, #48]	; (80196d4 <tcp_pcb_remove+0xd8>)
 80196a4:	4808      	ldr	r0, [pc, #32]	; (80196c8 <tcp_pcb_remove+0xcc>)
 80196a6:	f008 ff0d 	bl	80224c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80196aa:	2d00      	cmp	r5, #0
 80196ac:	d1ad      	bne.n	801960a <tcp_pcb_remove+0xe>
 80196ae:	4b04      	ldr	r3, [pc, #16]	; (80196c0 <tcp_pcb_remove+0xc4>)
 80196b0:	f640 0284 	movw	r2, #2180	; 0x884
 80196b4:	4908      	ldr	r1, [pc, #32]	; (80196d8 <tcp_pcb_remove+0xdc>)
 80196b6:	4804      	ldr	r0, [pc, #16]	; (80196c8 <tcp_pcb_remove+0xcc>)
 80196b8:	f008 ff04 	bl	80224c4 <iprintf>
 80196bc:	e7a5      	b.n	801960a <tcp_pcb_remove+0xe>
 80196be:	bf00      	nop
 80196c0:	0803fd88 	.word	0x0803fd88
 80196c4:	0804020c 	.word	0x0804020c
 80196c8:	08028d24 	.word	0x08028d24
 80196cc:	08040224 	.word	0x08040224
 80196d0:	08040240 	.word	0x08040240
 80196d4:	080401d0 	.word	0x080401d0
 80196d8:	080401ec 	.word	0x080401ec

080196dc <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80196dc:	2800      	cmp	r0, #0
 80196de:	f000 8082 	beq.w	80197e6 <tcp_abandon+0x10a>
{
 80196e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80196e6:	7d03      	ldrb	r3, [r0, #20]
{
 80196e8:	b085      	sub	sp, #20
 80196ea:	4605      	mov	r5, r0
 80196ec:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80196ee:	2b01      	cmp	r3, #1
 80196f0:	d065      	beq.n	80197be <tcp_abandon+0xe2>
  if (pcb->state == TIME_WAIT) {
 80196f2:	2b0a      	cmp	r3, #10
 80196f4:	d06d      	beq.n	80197d2 <tcp_abandon+0xf6>
    seqno = pcb->snd_nxt;
 80196f6:	f8d5 a050 	ldr.w	sl, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 80196fa:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 80196fe:	f8d5 7090 	ldr.w	r7, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8019702:	f8d5 9010 	ldr.w	r9, [r5, #16]
    if (pcb->state == CLOSED) {
 8019706:	b97b      	cbnz	r3, 8019728 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 8019708:	f8b5 8016 	ldrh.w	r8, [r5, #22]
 801970c:	f1b8 0f00 	cmp.w	r8, #0
 8019710:	d038      	beq.n	8019784 <tcp_abandon+0xa8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019712:	4a3a      	ldr	r2, [pc, #232]	; (80197fc <tcp_abandon+0x120>)
 8019714:	6813      	ldr	r3, [r2, #0]
 8019716:	42ab      	cmp	r3, r5
 8019718:	d036      	beq.n	8019788 <tcp_abandon+0xac>
 801971a:	2b00      	cmp	r3, #0
 801971c:	d036      	beq.n	801978c <tcp_abandon+0xb0>
 801971e:	68da      	ldr	r2, [r3, #12]
 8019720:	42aa      	cmp	r2, r5
 8019722:	d067      	beq.n	80197f4 <tcp_abandon+0x118>
 8019724:	4613      	mov	r3, r2
 8019726:	e7f8      	b.n	801971a <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019728:	4629      	mov	r1, r5
 801972a:	4835      	ldr	r0, [pc, #212]	; (8019800 <tcp_abandon+0x124>)
      local_port = pcb->local_port;
 801972c:	f8b5 8016 	ldrh.w	r8, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019730:	f7ff ff64 	bl	80195fc <tcp_pcb_remove>
 8019734:	4b33      	ldr	r3, [pc, #204]	; (8019804 <tcp_abandon+0x128>)
 8019736:	2201      	movs	r2, #1
 8019738:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801973a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801973c:	b12c      	cbz	r4, 801974a <tcp_abandon+0x6e>
    struct tcp_seg *next = seg->next;
 801973e:	4620      	mov	r0, r4
 8019740:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8019742:	f7ff fbcf 	bl	8018ee4 <tcp_seg_free>
  while (seg != NULL) {
 8019746:	2c00      	cmp	r4, #0
 8019748:	d1f9      	bne.n	801973e <tcp_abandon+0x62>
    if (pcb->unsent != NULL) {
 801974a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801974c:	b12c      	cbz	r4, 801975a <tcp_abandon+0x7e>
    struct tcp_seg *next = seg->next;
 801974e:	4620      	mov	r0, r4
 8019750:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8019752:	f7ff fbc7 	bl	8018ee4 <tcp_seg_free>
  while (seg != NULL) {
 8019756:	2c00      	cmp	r4, #0
 8019758:	d1f9      	bne.n	801974e <tcp_abandon+0x72>
    if (pcb->ooseq != NULL) {
 801975a:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801975c:	b12c      	cbz	r4, 801976a <tcp_abandon+0x8e>
    struct tcp_seg *next = seg->next;
 801975e:	4620      	mov	r0, r4
 8019760:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8019762:	f7ff fbbf 	bl	8018ee4 <tcp_seg_free>
  while (seg != NULL) {
 8019766:	2c00      	cmp	r4, #0
 8019768:	d1f9      	bne.n	801975e <tcp_abandon+0x82>
    if (send_rst) {
 801976a:	b9a6      	cbnz	r6, 8019796 <tcp_abandon+0xba>
    tcp_free(pcb);
 801976c:	4628      	mov	r0, r5
 801976e:	f7ff fa55 	bl	8018c1c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019772:	b30f      	cbz	r7, 80197b8 <tcp_abandon+0xdc>
 8019774:	4648      	mov	r0, r9
 8019776:	f06f 010c 	mvn.w	r1, #12
 801977a:	463b      	mov	r3, r7
}
 801977c:	b005      	add	sp, #20
 801977e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019782:	4718      	bx	r3
    int send_rst = 0;
 8019784:	461e      	mov	r6, r3
 8019786:	e7d8      	b.n	801973a <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019788:	68eb      	ldr	r3, [r5, #12]
 801978a:	6013      	str	r3, [r2, #0]
 801978c:	2300      	movs	r3, #0
    u16_t local_port = 0;
 801978e:	4698      	mov	r8, r3
    int send_rst = 0;
 8019790:	461e      	mov	r6, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019792:	60eb      	str	r3, [r5, #12]
 8019794:	e7d1      	b.n	801973a <tcp_abandon+0x5e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8019796:	8b28      	ldrh	r0, [r5, #24]
 8019798:	1d2b      	adds	r3, r5, #4
 801979a:	465a      	mov	r2, fp
 801979c:	4651      	mov	r1, sl
 801979e:	9002      	str	r0, [sp, #8]
 80197a0:	4628      	mov	r0, r5
 80197a2:	9300      	str	r3, [sp, #0]
 80197a4:	462b      	mov	r3, r5
 80197a6:	f8cd 8004 	str.w	r8, [sp, #4]
 80197aa:	f003 f87b 	bl	801c8a4 <tcp_rst>
    tcp_free(pcb);
 80197ae:	4628      	mov	r0, r5
 80197b0:	f7ff fa34 	bl	8018c1c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80197b4:	2f00      	cmp	r7, #0
 80197b6:	d1dd      	bne.n	8019774 <tcp_abandon+0x98>
}
 80197b8:	b005      	add	sp, #20
 80197ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80197be:	4b12      	ldr	r3, [pc, #72]	; (8019808 <tcp_abandon+0x12c>)
 80197c0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80197c4:	4911      	ldr	r1, [pc, #68]	; (801980c <tcp_abandon+0x130>)
 80197c6:	4812      	ldr	r0, [pc, #72]	; (8019810 <tcp_abandon+0x134>)
 80197c8:	f008 fe7c 	bl	80224c4 <iprintf>
 80197cc:	7d2b      	ldrb	r3, [r5, #20]
  if (pcb->state == TIME_WAIT) {
 80197ce:	2b0a      	cmp	r3, #10
 80197d0:	d191      	bne.n	80196f6 <tcp_abandon+0x1a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80197d2:	4629      	mov	r1, r5
 80197d4:	480f      	ldr	r0, [pc, #60]	; (8019814 <tcp_abandon+0x138>)
 80197d6:	f7ff ff11 	bl	80195fc <tcp_pcb_remove>
    tcp_free(pcb);
 80197da:	4628      	mov	r0, r5
}
 80197dc:	b005      	add	sp, #20
 80197de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 80197e2:	f7ff ba1b 	b.w	8018c1c <tcp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80197e6:	4b08      	ldr	r3, [pc, #32]	; (8019808 <tcp_abandon+0x12c>)
 80197e8:	f240 223d 	movw	r2, #573	; 0x23d
 80197ec:	490a      	ldr	r1, [pc, #40]	; (8019818 <tcp_abandon+0x13c>)
 80197ee:	4808      	ldr	r0, [pc, #32]	; (8019810 <tcp_abandon+0x134>)
 80197f0:	f008 be68 	b.w	80224c4 <iprintf>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80197f4:	68ea      	ldr	r2, [r5, #12]
 80197f6:	60da      	str	r2, [r3, #12]
 80197f8:	e7c8      	b.n	801978c <tcp_abandon+0xb0>
 80197fa:	bf00      	nop
 80197fc:	2002e1a4 	.word	0x2002e1a4
 8019800:	2002e198 	.word	0x2002e198
 8019804:	2002e194 	.word	0x2002e194
 8019808:	0803fd88 	.word	0x0803fd88
 801980c:	08040274 	.word	0x08040274
 8019810:	08028d24 	.word	0x08028d24
 8019814:	2002e1a8 	.word	0x2002e1a8
 8019818:	08040258 	.word	0x08040258

0801981c <tcp_abort>:
  tcp_abandon(pcb, 1);
 801981c:	2101      	movs	r1, #1
 801981e:	f7ff bf5d 	b.w	80196dc <tcp_abandon>
 8019822:	bf00      	nop

08019824 <tcp_accept_null>:
{
 8019824:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8019826:	460c      	mov	r4, r1
 8019828:	b131      	cbz	r1, 8019838 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801982a:	4620      	mov	r0, r4
 801982c:	2101      	movs	r1, #1
 801982e:	f7ff ff55 	bl	80196dc <tcp_abandon>
}
 8019832:	f06f 000c 	mvn.w	r0, #12
 8019836:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8019838:	4b06      	ldr	r3, [pc, #24]	; (8019854 <tcp_accept_null+0x30>)
 801983a:	f240 320f 	movw	r2, #783	; 0x30f
 801983e:	4906      	ldr	r1, [pc, #24]	; (8019858 <tcp_accept_null+0x34>)
 8019840:	4806      	ldr	r0, [pc, #24]	; (801985c <tcp_accept_null+0x38>)
 8019842:	f008 fe3f 	bl	80224c4 <iprintf>
  tcp_abandon(pcb, 1);
 8019846:	4620      	mov	r0, r4
 8019848:	2101      	movs	r1, #1
 801984a:	f7ff ff47 	bl	80196dc <tcp_abandon>
}
 801984e:	f06f 000c 	mvn.w	r0, #12
 8019852:	bd10      	pop	{r4, pc}
 8019854:	0803fd88 	.word	0x0803fd88
 8019858:	080402a8 	.word	0x080402a8
 801985c:	08028d24 	.word	0x08028d24

08019860 <tcp_netif_ip_addr_changed_pcblist>:
{
 8019860:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8019862:	4605      	mov	r5, r0
{
 8019864:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8019866:	b178      	cbz	r0, 8019888 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 8019868:	b134      	cbz	r4, 8019878 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801986a:	6822      	ldr	r2, [r4, #0]
 801986c:	682b      	ldr	r3, [r5, #0]
 801986e:	429a      	cmp	r2, r3
 8019870:	d003      	beq.n	801987a <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 8019872:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8019874:	2c00      	cmp	r4, #0
 8019876:	d1f8      	bne.n	801986a <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8019878:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801987a:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801987c:	4620      	mov	r0, r4
 801987e:	2101      	movs	r1, #1
      pcb = next;
 8019880:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 8019882:	f7ff ff2b 	bl	80196dc <tcp_abandon>
      pcb = next;
 8019886:	e7ef      	b.n	8019868 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8019888:	4b03      	ldr	r3, [pc, #12]	; (8019898 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801988a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801988e:	4903      	ldr	r1, [pc, #12]	; (801989c <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8019890:	4803      	ldr	r0, [pc, #12]	; (80198a0 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8019892:	f008 fe17 	bl	80224c4 <iprintf>
 8019896:	e7e7      	b.n	8019868 <tcp_netif_ip_addr_changed_pcblist+0x8>
 8019898:	0803fd88 	.word	0x0803fd88
 801989c:	080402c8 	.word	0x080402c8
 80198a0:	08028d24 	.word	0x08028d24

080198a4 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80198a4:	4b0f      	ldr	r3, [pc, #60]	; (80198e4 <tcp_kill_state+0x40>)
 80198a6:	6819      	ldr	r1, [r3, #0]
 80198a8:	b1d1      	cbz	r1, 80198e0 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80198aa:	4b0f      	ldr	r3, [pc, #60]	; (80198e8 <tcp_kill_state+0x44>)
  inactivity = 0;
 80198ac:	2200      	movs	r2, #0
{
 80198ae:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80198b0:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 80198b2:	4614      	mov	r4, r2
 80198b4:	e001      	b.n	80198ba <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80198b6:	68c9      	ldr	r1, [r1, #12]
 80198b8:	b159      	cbz	r1, 80198d2 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 80198ba:	7d0b      	ldrb	r3, [r1, #20]
 80198bc:	4283      	cmp	r3, r0
 80198be:	d1fa      	bne.n	80198b6 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80198c0:	6a0b      	ldr	r3, [r1, #32]
 80198c2:	1aeb      	subs	r3, r5, r3
 80198c4:	4293      	cmp	r3, r2
 80198c6:	d3f6      	bcc.n	80198b6 <tcp_kill_state+0x12>
 80198c8:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80198ca:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80198cc:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80198ce:	2900      	cmp	r1, #0
 80198d0:	d1f3      	bne.n	80198ba <tcp_kill_state+0x16>
  if (inactive != NULL) {
 80198d2:	b11c      	cbz	r4, 80198dc <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 80198d4:	4620      	mov	r0, r4
}
 80198d6:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 80198d8:	f7ff bf00 	b.w	80196dc <tcp_abandon>
}
 80198dc:	bc30      	pop	{r4, r5}
 80198de:	4770      	bx	lr
 80198e0:	4770      	bx	lr
 80198e2:	bf00      	nop
 80198e4:	2002e198 	.word	0x2002e198
 80198e8:	2002e19c 	.word	0x2002e19c

080198ec <tcp_alloc>:
{
 80198ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80198ee:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 80198f2:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80198f4:	495c      	ldr	r1, [pc, #368]	; (8019a68 <tcp_alloc+0x17c>)
 80198f6:	2002      	movs	r0, #2
 80198f8:	f7fe f9d8 	bl	8017cac <memp_malloc_fn>
  if (pcb == NULL) {
 80198fc:	b328      	cbz	r0, 801994a <tcp_alloc+0x5e>
 80198fe:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8019900:	229c      	movs	r2, #156	; 0x9c
 8019902:	2100      	movs	r1, #0
 8019904:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 8019906:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801990a:	f007 fe69 	bl	80215e0 <memset>
    pcb->tmr = tcp_ticks;
 801990e:	4957      	ldr	r1, [pc, #348]	; (8019a6c <tcp_alloc+0x180>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8019910:	4603      	mov	r3, r0
    pcb->last_timer = tcp_timer_ctr;
 8019912:	4a57      	ldr	r2, [pc, #348]	; (8019a70 <tcp_alloc+0x184>)
    pcb->tmr = tcp_ticks;
 8019914:	6808      	ldr	r0, [r1, #0]
    pcb->ttl = TCP_TTL;
 8019916:	21ff      	movs	r1, #255	; 0xff
    pcb->last_timer = tcp_timer_ctr;
 8019918:	7816      	ldrb	r6, [r2, #0]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801991a:	2206      	movs	r2, #6
    pcb->tmr = tcp_ticks;
 801991c:	6218      	str	r0, [r3, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801991e:	4855      	ldr	r0, [pc, #340]	; (8019a74 <tcp_alloc+0x188>)
    pcb->prio = prio;
 8019920:	755d      	strb	r5, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8019922:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->rtime = -1;
 8019926:	4d54      	ldr	r5, [pc, #336]	; (8019a78 <tcp_alloc+0x18c>)
    pcb->cwnd = 1;
 8019928:	4c54      	ldr	r4, [pc, #336]	; (8019a7c <tcp_alloc+0x190>)
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801992a:	6298      	str	r0, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801992c:	72d9      	strb	r1, [r3, #11]
    pcb->recv = tcp_recv_null;
 801992e:	4854      	ldr	r0, [pc, #336]	; (8019a80 <tcp_alloc+0x194>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8019930:	4954      	ldr	r1, [pc, #336]	; (8019a84 <tcp_alloc+0x198>)
    pcb->last_timer = tcp_timer_ctr;
 8019932:	779e      	strb	r6, [r3, #30]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8019934:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019938:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801993a:	631d      	str	r5, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801993c:	649c      	str	r4, [r3, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 801993e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8019942:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8019946:	4618      	mov	r0, r3
 8019948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801994a:	4e4f      	ldr	r6, [pc, #316]	; (8019a88 <tcp_alloc+0x19c>)
 801994c:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801994e:	b15c      	cbz	r4, 8019968 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 8019950:	4620      	mov	r0, r4
 8019952:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8019954:	8b43      	ldrh	r3, [r0, #26]
 8019956:	0719      	lsls	r1, r3, #28
 8019958:	d5f9      	bpl.n	801994e <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801995a:	f023 0308 	bic.w	r3, r3, #8
 801995e:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8019960:	f7ff f91c 	bl	8018b9c <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8019964:	2c00      	cmp	r4, #0
 8019966:	d1f3      	bne.n	8019950 <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019968:	4b48      	ldr	r3, [pc, #288]	; (8019a8c <tcp_alloc+0x1a0>)
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	b193      	cbz	r3, 8019994 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801996e:	4a3f      	ldr	r2, [pc, #252]	; (8019a6c <tcp_alloc+0x180>)
 8019970:	4618      	mov	r0, r3
 8019972:	6a19      	ldr	r1, [r3, #32]
 8019974:	6814      	ldr	r4, [r2, #0]
 8019976:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019978:	68db      	ldr	r3, [r3, #12]
 801997a:	b143      	cbz	r3, 801998e <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801997c:	6a1a      	ldr	r2, [r3, #32]
 801997e:	1aa2      	subs	r2, r4, r2
 8019980:	428a      	cmp	r2, r1
 8019982:	d3f9      	bcc.n	8019978 <tcp_alloc+0x8c>
 8019984:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019986:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019988:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801998a:	2b00      	cmp	r3, #0
 801998c:	d1f6      	bne.n	801997c <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801998e:	2101      	movs	r1, #1
 8019990:	f7ff fea4 	bl	80196dc <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019994:	f240 7239 	movw	r2, #1849	; 0x739
 8019998:	4933      	ldr	r1, [pc, #204]	; (8019a68 <tcp_alloc+0x17c>)
 801999a:	2002      	movs	r0, #2
 801999c:	f7fe f986 	bl	8017cac <memp_malloc_fn>
    if (pcb == NULL) {
 80199a0:	4603      	mov	r3, r0
 80199a2:	b130      	cbz	r0, 80199b2 <tcp_alloc+0xc6>
 80199a4:	4a3a      	ldr	r2, [pc, #232]	; (8019a90 <tcp_alloc+0x1a4>)
 80199a6:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 80199aa:	880a      	ldrh	r2, [r1, #0]
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80199ac:	3a01      	subs	r2, #1
 80199ae:	800a      	strh	r2, [r1, #0]
 80199b0:	e7a6      	b.n	8019900 <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 80199b2:	2009      	movs	r0, #9
 80199b4:	f7ff ff76 	bl	80198a4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80199b8:	f240 723f 	movw	r2, #1855	; 0x73f
 80199bc:	492a      	ldr	r1, [pc, #168]	; (8019a68 <tcp_alloc+0x17c>)
 80199be:	2002      	movs	r0, #2
 80199c0:	f7fe f974 	bl	8017cac <memp_malloc_fn>
      if (pcb == NULL) {
 80199c4:	4603      	mov	r3, r0
 80199c6:	b138      	cbz	r0, 80199d8 <tcp_alloc+0xec>
 80199c8:	4a31      	ldr	r2, [pc, #196]	; (8019a90 <tcp_alloc+0x1a4>)
 80199ca:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 80199ce:	880a      	ldrh	r2, [r1, #0]
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80199d0:	3a01      	subs	r2, #1
 80199d2:	b292      	uxth	r2, r2
 80199d4:	800a      	strh	r2, [r1, #0]
 80199d6:	e7e9      	b.n	80199ac <tcp_alloc+0xc0>
        tcp_kill_state(CLOSING);
 80199d8:	2008      	movs	r0, #8
 80199da:	f7ff ff63 	bl	80198a4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80199de:	f240 7245 	movw	r2, #1861	; 0x745
 80199e2:	4921      	ldr	r1, [pc, #132]	; (8019a68 <tcp_alloc+0x17c>)
 80199e4:	2002      	movs	r0, #2
 80199e6:	f7fe f961 	bl	8017cac <memp_malloc_fn>
        if (pcb == NULL) {
 80199ea:	4603      	mov	r3, r0
 80199ec:	b138      	cbz	r0, 80199fe <tcp_alloc+0x112>
 80199ee:	4a28      	ldr	r2, [pc, #160]	; (8019a90 <tcp_alloc+0x1a4>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80199f0:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 80199f4:	880a      	ldrh	r2, [r1, #0]
 80199f6:	3a01      	subs	r2, #1
 80199f8:	b292      	uxth	r2, r2
 80199fa:	800a      	strh	r2, [r1, #0]
 80199fc:	e7e8      	b.n	80199d0 <tcp_alloc+0xe4>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80199fe:	062a      	lsls	r2, r5, #24
 8019a00:	d42f      	bmi.n	8019a62 <tcp_alloc+0x176>
  if (mprio == 0) {
 8019a02:	b1ed      	cbz	r5, 8019a40 <tcp_alloc+0x154>
 8019a04:	462a      	mov	r2, r5
  mprio--;
 8019a06:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019a08:	6832      	ldr	r2, [r6, #0]
  mprio--;
 8019a0a:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019a0c:	b1c2      	cbz	r2, 8019a40 <tcp_alloc+0x154>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019a0e:	4817      	ldr	r0, [pc, #92]	; (8019a6c <tcp_alloc+0x180>)
  inactivity = 0;
 8019a10:	2700      	movs	r7, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019a12:	6806      	ldr	r6, [r0, #0]
 8019a14:	e005      	b.n	8019a22 <tcp_alloc+0x136>
 8019a16:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 8019a18:	1b37      	subs	r7, r6, r4
    if ((pcb->prio < mprio) ||
 8019a1a:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 8019a1c:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019a1e:	68d2      	ldr	r2, [r2, #12]
 8019a20:	b14a      	cbz	r2, 8019a36 <tcp_alloc+0x14a>
    if ((pcb->prio < mprio) ||
 8019a22:	7d50      	ldrb	r0, [r2, #21]
 8019a24:	4281      	cmp	r1, r0
 8019a26:	d8f6      	bhi.n	8019a16 <tcp_alloc+0x12a>
 8019a28:	d1f9      	bne.n	8019a1e <tcp_alloc+0x132>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019a2a:	6a14      	ldr	r4, [r2, #32]
 8019a2c:	eba6 0c04 	sub.w	ip, r6, r4
 8019a30:	4567      	cmp	r7, ip
 8019a32:	d8f4      	bhi.n	8019a1e <tcp_alloc+0x132>
 8019a34:	e7f0      	b.n	8019a18 <tcp_alloc+0x12c>
  if (inactive != NULL) {
 8019a36:	b11b      	cbz	r3, 8019a40 <tcp_alloc+0x154>
  tcp_abandon(pcb, 1);
 8019a38:	4618      	mov	r0, r3
 8019a3a:	2101      	movs	r1, #1
 8019a3c:	f7ff fe4e 	bl	80196dc <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019a40:	f240 724b 	movw	r2, #1867	; 0x74b
 8019a44:	4908      	ldr	r1, [pc, #32]	; (8019a68 <tcp_alloc+0x17c>)
 8019a46:	2002      	movs	r0, #2
 8019a48:	f7fe f930 	bl	8017cac <memp_malloc_fn>
          if (pcb != NULL) {
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	f43f af79 	beq.w	8019946 <tcp_alloc+0x5a>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8019a54:	4a0e      	ldr	r2, [pc, #56]	; (8019a90 <tcp_alloc+0x1a4>)
 8019a56:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 8019a5a:	8801      	ldrh	r1, [r0, #0]
 8019a5c:	3901      	subs	r1, #1
 8019a5e:	8001      	strh	r1, [r0, #0]
 8019a60:	e7c6      	b.n	80199f0 <tcp_alloc+0x104>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8019a62:	227f      	movs	r2, #127	; 0x7f
 8019a64:	e7cf      	b.n	8019a06 <tcp_alloc+0x11a>
 8019a66:	bf00      	nop
 8019a68:	0803fd88 	.word	0x0803fd88
 8019a6c:	2002e19c 	.word	0x2002e19c
 8019a70:	2001a9ed 	.word	0x2001a9ed
 8019a74:	08600860 	.word	0x08600860
 8019a78:	0218ffff 	.word	0x0218ffff
 8019a7c:	04300001 	.word	0x04300001
 8019a80:	08019c65 	.word	0x08019c65
 8019a84:	006ddd00 	.word	0x006ddd00
 8019a88:	2002e198 	.word	0x2002e198
 8019a8c:	2002e1a8 	.word	0x2002e1a8
 8019a90:	2002e08c 	.word	0x2002e08c

08019a94 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8019a94:	2040      	movs	r0, #64	; 0x40
 8019a96:	f7ff bf29 	b.w	80198ec <tcp_alloc>
 8019a9a:	bf00      	nop

08019a9c <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8019a9c:	2040      	movs	r0, #64	; 0x40
 8019a9e:	f7ff bf25 	b.w	80198ec <tcp_alloc>
 8019aa2:	bf00      	nop

08019aa4 <tcp_close_shutdown>:
{
 8019aa4:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019aa6:	4604      	mov	r4, r0
{
 8019aa8:	b085      	sub	sp, #20
 8019aaa:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019aac:	2800      	cmp	r0, #0
 8019aae:	d062      	beq.n	8019b76 <tcp_close_shutdown+0xd2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8019ab0:	7d23      	ldrb	r3, [r4, #20]
 8019ab2:	b11d      	cbz	r5, 8019abc <tcp_close_shutdown+0x18>
 8019ab4:	2b04      	cmp	r3, #4
 8019ab6:	d00c      	beq.n	8019ad2 <tcp_close_shutdown+0x2e>
 8019ab8:	2b07      	cmp	r3, #7
 8019aba:	d00a      	beq.n	8019ad2 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 8019abc:	2b01      	cmp	r3, #1
 8019abe:	d062      	beq.n	8019b86 <tcp_close_shutdown+0xe2>
 8019ac0:	2b02      	cmp	r3, #2
 8019ac2:	d02d      	beq.n	8019b20 <tcp_close_shutdown+0x7c>
 8019ac4:	b323      	cbz	r3, 8019b10 <tcp_close_shutdown+0x6c>
      return tcp_close_shutdown_fin(pcb);
 8019ac6:	4620      	mov	r0, r4
}
 8019ac8:	b005      	add	sp, #20
 8019aca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8019ace:	f7ff b865 	b.w	8018b9c <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019ad2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8019ad4:	2a00      	cmp	r2, #0
 8019ad6:	d030      	beq.n	8019b3a <tcp_close_shutdown+0x96>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019ad8:	8b63      	ldrh	r3, [r4, #26]
 8019ada:	06db      	lsls	r3, r3, #27
 8019adc:	d57c      	bpl.n	8019bd8 <tcp_close_shutdown+0x134>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019ade:	8b20      	ldrh	r0, [r4, #24]
 8019ae0:	1d22      	adds	r2, r4, #4
 8019ae2:	8ae1      	ldrh	r1, [r4, #22]
 8019ae4:	4623      	mov	r3, r4
 8019ae6:	9002      	str	r0, [sp, #8]
 8019ae8:	4620      	mov	r0, r4
 8019aea:	e9cd 2100 	strd	r2, r1, [sp]
 8019aee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019af0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8019af2:	f002 fed7 	bl	801c8a4 <tcp_rst>
      tcp_pcb_purge(pcb);
 8019af6:	4620      	mov	r0, r4
 8019af8:	f7ff fac8 	bl	801908c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019afc:	4a3f      	ldr	r2, [pc, #252]	; (8019bfc <tcp_close_shutdown+0x158>)
 8019afe:	6813      	ldr	r3, [r2, #0]
 8019b00:	42a3      	cmp	r3, r4
 8019b02:	d02a      	beq.n	8019b5a <tcp_close_shutdown+0xb6>
 8019b04:	b35b      	cbz	r3, 8019b5e <tcp_close_shutdown+0xba>
 8019b06:	68da      	ldr	r2, [r3, #12]
 8019b08:	42a2      	cmp	r2, r4
 8019b0a:	d062      	beq.n	8019bd2 <tcp_close_shutdown+0x12e>
 8019b0c:	4613      	mov	r3, r2
 8019b0e:	e7f9      	b.n	8019b04 <tcp_close_shutdown+0x60>
      if (pcb->local_port != 0) {
 8019b10:	8ae3      	ldrh	r3, [r4, #22]
 8019b12:	b9bb      	cbnz	r3, 8019b44 <tcp_close_shutdown+0xa0>
        tcp_free(pcb);
 8019b14:	4620      	mov	r0, r4
 8019b16:	f7ff f881 	bl	8018c1c <tcp_free>
}
 8019b1a:	2000      	movs	r0, #0
 8019b1c:	b005      	add	sp, #20
 8019b1e:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019b20:	4621      	mov	r1, r4
 8019b22:	4836      	ldr	r0, [pc, #216]	; (8019bfc <tcp_close_shutdown+0x158>)
 8019b24:	f7ff fd6a 	bl	80195fc <tcp_pcb_remove>
 8019b28:	4b35      	ldr	r3, [pc, #212]	; (8019c00 <tcp_close_shutdown+0x15c>)
 8019b2a:	2201      	movs	r2, #1
      tcp_free(pcb);
 8019b2c:	4620      	mov	r0, r4
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019b2e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8019b30:	f7ff f874 	bl	8018c1c <tcp_free>
}
 8019b34:	2000      	movs	r0, #0
 8019b36:	b005      	add	sp, #20
 8019b38:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019b3a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8019b3c:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8019b40:	d0bc      	beq.n	8019abc <tcp_close_shutdown+0x18>
 8019b42:	e7c9      	b.n	8019ad8 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019b44:	4a2f      	ldr	r2, [pc, #188]	; (8019c04 <tcp_close_shutdown+0x160>)
 8019b46:	6813      	ldr	r3, [r2, #0]
 8019b48:	42a3      	cmp	r3, r4
 8019b4a:	d03d      	beq.n	8019bc8 <tcp_close_shutdown+0x124>
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d03d      	beq.n	8019bcc <tcp_close_shutdown+0x128>
 8019b50:	68da      	ldr	r2, [r3, #12]
 8019b52:	42a2      	cmp	r2, r4
 8019b54:	d04f      	beq.n	8019bf6 <tcp_close_shutdown+0x152>
 8019b56:	4613      	mov	r3, r2
 8019b58:	e7f8      	b.n	8019b4c <tcp_close_shutdown+0xa8>
      TCP_RMV_ACTIVE(pcb);
 8019b5a:	68e3      	ldr	r3, [r4, #12]
 8019b5c:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 8019b5e:	4b2a      	ldr	r3, [pc, #168]	; (8019c08 <tcp_close_shutdown+0x164>)
      TCP_RMV_ACTIVE(pcb);
 8019b60:	2000      	movs	r0, #0
 8019b62:	4a27      	ldr	r2, [pc, #156]	; (8019c00 <tcp_close_shutdown+0x15c>)
 8019b64:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 8019b66:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 8019b68:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 8019b6a:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 8019b6c:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 8019b6e:	d1d1      	bne.n	8019b14 <tcp_close_shutdown+0x70>
        tcp_trigger_input_pcb_close();
 8019b70:	f001 fed2 	bl	801b918 <tcp_trigger_input_pcb_close>
 8019b74:	e7d1      	b.n	8019b1a <tcp_close_shutdown+0x76>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019b76:	4b25      	ldr	r3, [pc, #148]	; (8019c0c <tcp_close_shutdown+0x168>)
 8019b78:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019b7c:	4924      	ldr	r1, [pc, #144]	; (8019c10 <tcp_close_shutdown+0x16c>)
 8019b7e:	4825      	ldr	r0, [pc, #148]	; (8019c14 <tcp_close_shutdown+0x170>)
 8019b80:	f008 fca0 	bl	80224c4 <iprintf>
 8019b84:	e794      	b.n	8019ab0 <tcp_close_shutdown+0xc>
 8019b86:	4924      	ldr	r1, [pc, #144]	; (8019c18 <tcp_close_shutdown+0x174>)
      pcb->listener = NULL;
 8019b88:	2000      	movs	r0, #0
  switch (pcb->state) {
 8019b8a:	4b1e      	ldr	r3, [pc, #120]	; (8019c04 <tcp_close_shutdown+0x160>)
 8019b8c:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8019b90:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019b92:	b133      	cbz	r3, 8019ba2 <tcp_close_shutdown+0xfe>
    if (pcb->listener == lpcb) {
 8019b94:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8019b96:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8019b98:	bf08      	it	eq
 8019b9a:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019b9c:	68db      	ldr	r3, [r3, #12]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d1f8      	bne.n	8019b94 <tcp_close_shutdown+0xf0>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019ba2:	428d      	cmp	r5, r1
 8019ba4:	d002      	beq.n	8019bac <tcp_close_shutdown+0x108>
 8019ba6:	f851 3b04 	ldr.w	r3, [r1], #4
 8019baa:	e7f1      	b.n	8019b90 <tcp_close_shutdown+0xec>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019bac:	4621      	mov	r1, r4
 8019bae:	481b      	ldr	r0, [pc, #108]	; (8019c1c <tcp_close_shutdown+0x178>)
 8019bb0:	f7ff fd24 	bl	80195fc <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8019bb4:	7d23      	ldrb	r3, [r4, #20]
 8019bb6:	2b01      	cmp	r3, #1
 8019bb8:	d016      	beq.n	8019be8 <tcp_close_shutdown+0x144>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019bba:	4621      	mov	r1, r4
 8019bbc:	2003      	movs	r0, #3
 8019bbe:	f7fe f899 	bl	8017cf4 <memp_free>
}
 8019bc2:	2000      	movs	r0, #0
 8019bc4:	b005      	add	sp, #20
 8019bc6:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019bc8:	68e3      	ldr	r3, [r4, #12]
 8019bca:	6013      	str	r3, [r2, #0]
 8019bcc:	2300      	movs	r3, #0
 8019bce:	60e3      	str	r3, [r4, #12]
 8019bd0:	e7a0      	b.n	8019b14 <tcp_close_shutdown+0x70>
      TCP_RMV_ACTIVE(pcb);
 8019bd2:	68e2      	ldr	r2, [r4, #12]
 8019bd4:	60da      	str	r2, [r3, #12]
 8019bd6:	e7c2      	b.n	8019b5e <tcp_close_shutdown+0xba>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019bd8:	4b0c      	ldr	r3, [pc, #48]	; (8019c0c <tcp_close_shutdown+0x168>)
 8019bda:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8019bde:	4910      	ldr	r1, [pc, #64]	; (8019c20 <tcp_close_shutdown+0x17c>)
 8019be0:	480c      	ldr	r0, [pc, #48]	; (8019c14 <tcp_close_shutdown+0x170>)
 8019be2:	f008 fc6f 	bl	80224c4 <iprintf>
 8019be6:	e77a      	b.n	8019ade <tcp_close_shutdown+0x3a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8019be8:	4b08      	ldr	r3, [pc, #32]	; (8019c0c <tcp_close_shutdown+0x168>)
 8019bea:	22df      	movs	r2, #223	; 0xdf
 8019bec:	490d      	ldr	r1, [pc, #52]	; (8019c24 <tcp_close_shutdown+0x180>)
 8019bee:	4809      	ldr	r0, [pc, #36]	; (8019c14 <tcp_close_shutdown+0x170>)
 8019bf0:	f008 fc68 	bl	80224c4 <iprintf>
 8019bf4:	e7e1      	b.n	8019bba <tcp_close_shutdown+0x116>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019bf6:	68e2      	ldr	r2, [r4, #12]
 8019bf8:	60da      	str	r2, [r3, #12]
 8019bfa:	e7e7      	b.n	8019bcc <tcp_close_shutdown+0x128>
 8019bfc:	2002e198 	.word	0x2002e198
 8019c00:	2002e194 	.word	0x2002e194
 8019c04:	2002e1a4 	.word	0x2002e1a4
 8019c08:	2002e1ac 	.word	0x2002e1ac
 8019c0c:	0803fd88 	.word	0x0803fd88
 8019c10:	080402fc 	.word	0x080402fc
 8019c14:	08028d24 	.word	0x08028d24
 8019c18:	08040474 	.word	0x08040474
 8019c1c:	2002e1a0 	.word	0x2002e1a0
 8019c20:	0804031c 	.word	0x0804031c
 8019c24:	08040338 	.word	0x08040338

08019c28 <tcp_close>:
{
 8019c28:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c2a:	b158      	cbz	r0, 8019c44 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8019c2c:	7d03      	ldrb	r3, [r0, #20]
 8019c2e:	2b01      	cmp	r3, #1
 8019c30:	d003      	beq.n	8019c3a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019c32:	8b43      	ldrh	r3, [r0, #26]
 8019c34:	f043 0310 	orr.w	r3, r3, #16
 8019c38:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8019c3a:	2101      	movs	r1, #1
}
 8019c3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8019c40:	f7ff bf30 	b.w	8019aa4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c44:	4b04      	ldr	r3, [pc, #16]	; (8019c58 <tcp_close+0x30>)
 8019c46:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019c4a:	4904      	ldr	r1, [pc, #16]	; (8019c5c <tcp_close+0x34>)
 8019c4c:	4804      	ldr	r0, [pc, #16]	; (8019c60 <tcp_close+0x38>)
 8019c4e:	f008 fc39 	bl	80224c4 <iprintf>
}
 8019c52:	f06f 000f 	mvn.w	r0, #15
 8019c56:	bd08      	pop	{r3, pc}
 8019c58:	0803fd88 	.word	0x0803fd88
 8019c5c:	08040354 	.word	0x08040354
 8019c60:	08028d24 	.word	0x08028d24

08019c64 <tcp_recv_null>:
{
 8019c64:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c66:	b189      	cbz	r1, 8019c8c <tcp_recv_null+0x28>
  if (p != NULL) {
 8019c68:	4614      	mov	r4, r2
 8019c6a:	4608      	mov	r0, r1
 8019c6c:	b13a      	cbz	r2, 8019c7e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 8019c6e:	8911      	ldrh	r1, [r2, #8]
 8019c70:	f7ff f8fe 	bl	8018e70 <tcp_recved>
    pbuf_free(p);
 8019c74:	4620      	mov	r0, r4
 8019c76:	f7fe fb0d 	bl	8018294 <pbuf_free>
  return ERR_OK;
 8019c7a:	2000      	movs	r0, #0
}
 8019c7c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8019c7e:	b10b      	cbz	r3, 8019c84 <tcp_recv_null+0x20>
  return ERR_OK;
 8019c80:	4610      	mov	r0, r2
}
 8019c82:	bd10      	pop	{r4, pc}
 8019c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8019c88:	f7ff bfce 	b.w	8019c28 <tcp_close>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c8c:	4b04      	ldr	r3, [pc, #16]	; (8019ca0 <tcp_recv_null+0x3c>)
 8019c8e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8019c92:	4904      	ldr	r1, [pc, #16]	; (8019ca4 <tcp_recv_null+0x40>)
 8019c94:	4804      	ldr	r0, [pc, #16]	; (8019ca8 <tcp_recv_null+0x44>)
 8019c96:	f008 fc15 	bl	80224c4 <iprintf>
 8019c9a:	f06f 000f 	mvn.w	r0, #15
}
 8019c9e:	bd10      	pop	{r4, pc}
 8019ca0:	0803fd88 	.word	0x0803fd88
 8019ca4:	0804036c 	.word	0x0804036c
 8019ca8:	08028d24 	.word	0x08028d24

08019cac <tcp_process_refused_data>:
{
 8019cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8019cae:	2800      	cmp	r0, #0
 8019cb0:	d035      	beq.n	8019d1e <tcp_process_refused_data+0x72>
    u8_t refused_flags = pcb->refused_data->flags;
 8019cb2:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 8019cb4:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019cb6:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8019cba:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8019cbc:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8019cbe:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019cc0:	b31d      	cbz	r5, 8019d0a <tcp_process_refused_data+0x5e>
 8019cc2:	4601      	mov	r1, r0
 8019cc4:	4632      	mov	r2, r6
 8019cc6:	6900      	ldr	r0, [r0, #16]
 8019cc8:	47a8      	blx	r5
 8019cca:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8019ccc:	b135      	cbz	r5, 8019cdc <tcp_process_refused_data+0x30>
    } else if (err == ERR_ABRT) {
 8019cce:	350d      	adds	r5, #13
 8019cd0:	d017      	beq.n	8019d02 <tcp_process_refused_data+0x56>
      return ERR_INPROGRESS;
 8019cd2:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8019cd6:	67a6      	str	r6, [r4, #120]	; 0x78
}
 8019cd8:	4628      	mov	r0, r5
 8019cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8019cdc:	06bb      	lsls	r3, r7, #26
 8019cde:	d5fb      	bpl.n	8019cd8 <tcp_process_refused_data+0x2c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019ce0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8019ce2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019ce6:	d001      	beq.n	8019cec <tcp_process_refused_data+0x40>
          pcb->rcv_wnd++;
 8019ce8:	3301      	adds	r3, #1
 8019cea:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8019cec:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8019cf0:	2e00      	cmp	r6, #0
 8019cf2:	d0f1      	beq.n	8019cd8 <tcp_process_refused_data+0x2c>
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	4621      	mov	r1, r4
 8019cf8:	6920      	ldr	r0, [r4, #16]
 8019cfa:	461a      	mov	r2, r3
 8019cfc:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8019cfe:	300d      	adds	r0, #13
 8019d00:	d1ea      	bne.n	8019cd8 <tcp_process_refused_data+0x2c>
          return ERR_ABRT;
 8019d02:	f06f 050c 	mvn.w	r5, #12
}
 8019d06:	4628      	mov	r0, r5
 8019d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019d0a:	462b      	mov	r3, r5
 8019d0c:	4628      	mov	r0, r5
 8019d0e:	4632      	mov	r2, r6
 8019d10:	4621      	mov	r1, r4
 8019d12:	f7ff ffa7 	bl	8019c64 <tcp_recv_null>
 8019d16:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8019d18:	2d00      	cmp	r5, #0
 8019d1a:	d1d8      	bne.n	8019cce <tcp_process_refused_data+0x22>
 8019d1c:	e7de      	b.n	8019cdc <tcp_process_refused_data+0x30>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8019d1e:	4b05      	ldr	r3, [pc, #20]	; (8019d34 <tcp_process_refused_data+0x88>)
 8019d20:	f240 6209 	movw	r2, #1545	; 0x609
 8019d24:	4904      	ldr	r1, [pc, #16]	; (8019d38 <tcp_process_refused_data+0x8c>)
 8019d26:	f06f 050f 	mvn.w	r5, #15
 8019d2a:	4804      	ldr	r0, [pc, #16]	; (8019d3c <tcp_process_refused_data+0x90>)
 8019d2c:	f008 fbca 	bl	80224c4 <iprintf>
 8019d30:	e7d2      	b.n	8019cd8 <tcp_process_refused_data+0x2c>
 8019d32:	bf00      	nop
 8019d34:	0803fd88 	.word	0x0803fd88
 8019d38:	08040388 	.word	0x08040388
 8019d3c:	08028d24 	.word	0x08028d24

08019d40 <tcp_fasttmr>:
{
 8019d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8019d44:	4d1c      	ldr	r5, [pc, #112]	; (8019db8 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 8019d46:	2700      	movs	r7, #0
 8019d48:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8019dc0 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 8019d4c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8019d4e:	4e1b      	ldr	r6, [pc, #108]	; (8019dbc <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8019d50:	3301      	adds	r3, #1
 8019d52:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8019d54:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 8019d58:	b1bc      	cbz	r4, 8019d8a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 8019d5a:	782a      	ldrb	r2, [r5, #0]
 8019d5c:	7fa3      	ldrb	r3, [r4, #30]
 8019d5e:	4293      	cmp	r3, r2
 8019d60:	d015      	beq.n	8019d8e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 8019d62:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 8019d64:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8019d66:	07d9      	lsls	r1, r3, #31
 8019d68:	d41a      	bmi.n	8019da0 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 8019d6a:	071a      	lsls	r2, r3, #28
 8019d6c:	d411      	bmi.n	8019d92 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 8019d6e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 8019d70:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8019d74:	b133      	cbz	r3, 8019d84 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 8019d76:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8019d78:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 8019d7a:	f7ff ff97 	bl	8019cac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8019d7e:	7833      	ldrb	r3, [r6, #0]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d1e7      	bne.n	8019d54 <tcp_fasttmr+0x14>
      pcb = next;
 8019d84:	464c      	mov	r4, r9
  while (pcb != NULL) {
 8019d86:	2c00      	cmp	r4, #0
 8019d88:	d1e7      	bne.n	8019d5a <tcp_fasttmr+0x1a>
}
 8019d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 8019d8e:	68e4      	ldr	r4, [r4, #12]
 8019d90:	e7e2      	b.n	8019d58 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8019d92:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8019d96:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8019d98:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8019d9a:	f7fe feff 	bl	8018b9c <tcp_close_shutdown_fin>
 8019d9e:	e7e6      	b.n	8019d6e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 8019da0:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8019da4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8019da6:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8019da8:	f002 fdfc 	bl	801c9a4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019dac:	8b63      	ldrh	r3, [r4, #26]
 8019dae:	f023 0303 	bic.w	r3, r3, #3
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	8363      	strh	r3, [r4, #26]
 8019db6:	e7d8      	b.n	8019d6a <tcp_fasttmr+0x2a>
 8019db8:	2001a9ed 	.word	0x2001a9ed
 8019dbc:	2002e194 	.word	0x2002e194
 8019dc0:	2002e198 	.word	0x2002e198

08019dc4 <tcp_tmr>:
{
 8019dc4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8019dc6:	f7ff ffbb 	bl	8019d40 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8019dca:	4a06      	ldr	r2, [pc, #24]	; (8019de4 <tcp_tmr+0x20>)
 8019dcc:	7813      	ldrb	r3, [r2, #0]
 8019dce:	3301      	adds	r3, #1
 8019dd0:	b2db      	uxtb	r3, r3
 8019dd2:	7013      	strb	r3, [r2, #0]
 8019dd4:	07db      	lsls	r3, r3, #31
 8019dd6:	d400      	bmi.n	8019dda <tcp_tmr+0x16>
}
 8019dd8:	bd08      	pop	{r3, pc}
 8019dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8019dde:	f7ff b995 	b.w	801910c <tcp_slowtmr>
 8019de2:	bf00      	nop
 8019de4:	2001a9ec 	.word	0x2001a9ec

08019de8 <tcp_next_iss>:
{
 8019de8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8019dea:	b130      	cbz	r0, 8019dfa <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 8019dec:	4b07      	ldr	r3, [pc, #28]	; (8019e0c <tcp_next_iss+0x24>)
 8019dee:	4a08      	ldr	r2, [pc, #32]	; (8019e10 <tcp_next_iss+0x28>)
 8019df0:	6818      	ldr	r0, [r3, #0]
 8019df2:	6812      	ldr	r2, [r2, #0]
 8019df4:	4410      	add	r0, r2
 8019df6:	6018      	str	r0, [r3, #0]
}
 8019df8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8019dfa:	4b06      	ldr	r3, [pc, #24]	; (8019e14 <tcp_next_iss+0x2c>)
 8019dfc:	f640 02af 	movw	r2, #2223	; 0x8af
 8019e00:	4905      	ldr	r1, [pc, #20]	; (8019e18 <tcp_next_iss+0x30>)
 8019e02:	4806      	ldr	r0, [pc, #24]	; (8019e1c <tcp_next_iss+0x34>)
 8019e04:	f008 fb5e 	bl	80224c4 <iprintf>
 8019e08:	e7f0      	b.n	8019dec <tcp_next_iss+0x4>
 8019e0a:	bf00      	nop
 8019e0c:	20000404 	.word	0x20000404
 8019e10:	2002e19c 	.word	0x2002e19c
 8019e14:	0803fd88 	.word	0x0803fd88
 8019e18:	080403b0 	.word	0x080403b0
 8019e1c:	08028d24 	.word	0x08028d24

08019e20 <tcp_eff_send_mss_netif>:
{
 8019e20:	b538      	push	{r3, r4, r5, lr}
 8019e22:	4605      	mov	r5, r0
 8019e24:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8019e26:	b172      	cbz	r2, 8019e46 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 8019e28:	b144      	cbz	r4, 8019e3c <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 8019e2a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 8019e2c:	b133      	cbz	r3, 8019e3c <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8019e2e:	2b28      	cmp	r3, #40	; 0x28
 8019e30:	d906      	bls.n	8019e40 <tcp_eff_send_mss_netif+0x20>
 8019e32:	3b28      	subs	r3, #40	; 0x28
 8019e34:	b29b      	uxth	r3, r3
 8019e36:	429d      	cmp	r5, r3
 8019e38:	bf28      	it	cs
 8019e3a:	461d      	movcs	r5, r3
}
 8019e3c:	4628      	mov	r0, r5
 8019e3e:	bd38      	pop	{r3, r4, r5, pc}
 8019e40:	2500      	movs	r5, #0
 8019e42:	4628      	mov	r0, r5
 8019e44:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8019e46:	4b04      	ldr	r3, [pc, #16]	; (8019e58 <tcp_eff_send_mss_netif+0x38>)
 8019e48:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8019e4c:	4903      	ldr	r1, [pc, #12]	; (8019e5c <tcp_eff_send_mss_netif+0x3c>)
 8019e4e:	4804      	ldr	r0, [pc, #16]	; (8019e60 <tcp_eff_send_mss_netif+0x40>)
 8019e50:	f008 fb38 	bl	80224c4 <iprintf>
 8019e54:	e7e8      	b.n	8019e28 <tcp_eff_send_mss_netif+0x8>
 8019e56:	bf00      	nop
 8019e58:	0803fd88 	.word	0x0803fd88
 8019e5c:	080403cc 	.word	0x080403cc
 8019e60:	08028d24 	.word	0x08028d24

08019e64 <tcp_connect>:
{
 8019e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e66:	2800      	cmp	r0, #0
 8019e68:	f000 8082 	beq.w	8019f70 <tcp_connect+0x10c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019e6c:	2900      	cmp	r1, #0
 8019e6e:	d075      	beq.n	8019f5c <tcp_connect+0xf8>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8019e70:	461e      	mov	r6, r3
 8019e72:	7d03      	ldrb	r3, [r0, #20]
 8019e74:	4604      	mov	r4, r0
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d160      	bne.n	8019f3c <tcp_connect+0xd8>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8019e7a:	680b      	ldr	r3, [r1, #0]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019e7c:	7a00      	ldrb	r0, [r0, #8]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8019e7e:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 8019e80:	8322      	strh	r2, [r4, #24]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019e82:	2800      	cmp	r0, #0
 8019e84:	d042      	beq.n	8019f0c <tcp_connect+0xa8>
    netif = netif_get_by_index(pcb->netif_idx);
 8019e86:	f7fe f927 	bl	80180d8 <netif_get_by_index>
 8019e8a:	4605      	mov	r5, r0
  if (netif == NULL) {
 8019e8c:	2d00      	cmp	r5, #0
 8019e8e:	d062      	beq.n	8019f56 <tcp_connect+0xf2>
  if (ip_addr_isany(&pcb->local_ip)) {
 8019e90:	6823      	ldr	r3, [r4, #0]
 8019e92:	b90b      	cbnz	r3, 8019e98 <tcp_connect+0x34>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019e94:	686b      	ldr	r3, [r5, #4]
 8019e96:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8019e98:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 8019e9a:	b927      	cbnz	r7, 8019ea6 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 8019e9c:	f7fe fe4a 	bl	8018b34 <tcp_new_port>
 8019ea0:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8019ea2:	2800      	cmp	r0, #0
 8019ea4:	d054      	beq.n	8019f50 <tcp_connect+0xec>
  iss = tcp_next_iss(pcb);
 8019ea6:	4620      	mov	r0, r4
 8019ea8:	f7ff ff9e 	bl	8019de8 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 8019eac:	2300      	movs	r3, #0
  pcb->lastack = iss - 1;
 8019eae:	1e42      	subs	r2, r0, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8019eb0:	4629      	mov	r1, r5
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019eb2:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8019fa4 <tcp_connect+0x140>
  pcb->snd_wnd = TCP_WND;
 8019eb6:	f44f 6506 	mov.w	r5, #2144	; 0x860
  pcb->snd_nxt = iss;
 8019eba:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->mss = INITIAL_MSS;
 8019ebc:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->rcv_nxt = 0;
 8019ec0:	6263      	str	r3, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019ec2:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->lastack = iss - 1;
 8019ec4:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019ec6:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
  pcb->snd_wnd = TCP_WND;
 8019eca:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 8019ece:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->snd_lbb = iss - 1;
 8019ed0:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8019ed4:	1d22      	adds	r2, r4, #4
 8019ed6:	f7ff ffa3 	bl	8019e20 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 8019eda:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8019edc:	8660      	strh	r0, [r4, #50]	; 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8019ede:	2102      	movs	r1, #2
 8019ee0:	4620      	mov	r0, r4
  pcb->connected = connected;
 8019ee2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 8019ee6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8019eea:	f002 fb35 	bl	801c558 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8019eee:	4605      	mov	r5, r0
 8019ef0:	b9f8      	cbnz	r0, 8019f32 <tcp_connect+0xce>
    pcb->state = SYN_SENT;
 8019ef2:	2302      	movs	r3, #2
 8019ef4:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8019ef6:	b187      	cbz	r7, 8019f1a <tcp_connect+0xb6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019ef8:	4a22      	ldr	r2, [pc, #136]	; (8019f84 <tcp_connect+0x120>)
 8019efa:	6813      	ldr	r3, [r2, #0]
 8019efc:	42a3      	cmp	r3, r4
 8019efe:	d00a      	beq.n	8019f16 <tcp_connect+0xb2>
 8019f00:	b15b      	cbz	r3, 8019f1a <tcp_connect+0xb6>
 8019f02:	68da      	ldr	r2, [r3, #12]
 8019f04:	42a2      	cmp	r2, r4
 8019f06:	d016      	beq.n	8019f36 <tcp_connect+0xd2>
 8019f08:	4613      	mov	r3, r2
 8019f0a:	e7f9      	b.n	8019f00 <tcp_connect+0x9c>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019f0c:	1d20      	adds	r0, r4, #4
 8019f0e:	f005 fe87 	bl	801fc20 <ip4_route>
 8019f12:	4605      	mov	r5, r0
 8019f14:	e7ba      	b.n	8019e8c <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019f16:	68e3      	ldr	r3, [r4, #12]
 8019f18:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 8019f1a:	4b1b      	ldr	r3, [pc, #108]	; (8019f88 <tcp_connect+0x124>)
 8019f1c:	681a      	ldr	r2, [r3, #0]
 8019f1e:	601c      	str	r4, [r3, #0]
 8019f20:	60e2      	str	r2, [r4, #12]
 8019f22:	f003 f873 	bl	801d00c <tcp_timer_needed>
 8019f26:	4b19      	ldr	r3, [pc, #100]	; (8019f8c <tcp_connect+0x128>)
 8019f28:	2201      	movs	r2, #1
    tcp_output(pcb);
 8019f2a:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8019f2c:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8019f2e:	f002 fd39 	bl	801c9a4 <tcp_output>
}
 8019f32:	4628      	mov	r0, r5
 8019f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019f36:	68e2      	ldr	r2, [r4, #12]
 8019f38:	60da      	str	r2, [r3, #12]
 8019f3a:	e7ee      	b.n	8019f1a <tcp_connect+0xb6>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8019f3c:	4b14      	ldr	r3, [pc, #80]	; (8019f90 <tcp_connect+0x12c>)
 8019f3e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8019f42:	4914      	ldr	r1, [pc, #80]	; (8019f94 <tcp_connect+0x130>)
 8019f44:	f06f 0509 	mvn.w	r5, #9
 8019f48:	4813      	ldr	r0, [pc, #76]	; (8019f98 <tcp_connect+0x134>)
 8019f4a:	f008 fabb 	bl	80224c4 <iprintf>
 8019f4e:	e7f0      	b.n	8019f32 <tcp_connect+0xce>
      return ERR_BUF;
 8019f50:	f06f 0501 	mvn.w	r5, #1
 8019f54:	e7ed      	b.n	8019f32 <tcp_connect+0xce>
    return ERR_RTE;
 8019f56:	f06f 0503 	mvn.w	r5, #3
 8019f5a:	e7ea      	b.n	8019f32 <tcp_connect+0xce>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019f5c:	4b0c      	ldr	r3, [pc, #48]	; (8019f90 <tcp_connect+0x12c>)
 8019f5e:	f240 4236 	movw	r2, #1078	; 0x436
 8019f62:	490e      	ldr	r1, [pc, #56]	; (8019f9c <tcp_connect+0x138>)
 8019f64:	f06f 050f 	mvn.w	r5, #15
 8019f68:	480b      	ldr	r0, [pc, #44]	; (8019f98 <tcp_connect+0x134>)
 8019f6a:	f008 faab 	bl	80224c4 <iprintf>
 8019f6e:	e7e0      	b.n	8019f32 <tcp_connect+0xce>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019f70:	4b07      	ldr	r3, [pc, #28]	; (8019f90 <tcp_connect+0x12c>)
 8019f72:	f240 4235 	movw	r2, #1077	; 0x435
 8019f76:	490a      	ldr	r1, [pc, #40]	; (8019fa0 <tcp_connect+0x13c>)
 8019f78:	f06f 050f 	mvn.w	r5, #15
 8019f7c:	4806      	ldr	r0, [pc, #24]	; (8019f98 <tcp_connect+0x134>)
 8019f7e:	f008 faa1 	bl	80224c4 <iprintf>
 8019f82:	e7d6      	b.n	8019f32 <tcp_connect+0xce>
 8019f84:	2002e1a4 	.word	0x2002e1a4
 8019f88:	2002e198 	.word	0x2002e198
 8019f8c:	2002e194 	.word	0x2002e194
 8019f90:	0803fd88 	.word	0x0803fd88
 8019f94:	0804042c 	.word	0x0804042c
 8019f98:	08028d24 	.word	0x08028d24
 8019f9c:	08040410 	.word	0x08040410
 8019fa0:	080403f4 	.word	0x080403f4
 8019fa4:	08600860 	.word	0x08600860

08019fa8 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8019fa8:	b308      	cbz	r0, 8019fee <tcp_netif_ip_addr_changed+0x46>
{
 8019faa:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 8019fac:	6803      	ldr	r3, [r0, #0]
 8019fae:	4604      	mov	r4, r0
 8019fb0:	b903      	cbnz	r3, 8019fb4 <tcp_netif_ip_addr_changed+0xc>
}
 8019fb2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019fb4:	4b0e      	ldr	r3, [pc, #56]	; (8019ff0 <tcp_netif_ip_addr_changed+0x48>)
 8019fb6:	460d      	mov	r5, r1
 8019fb8:	6819      	ldr	r1, [r3, #0]
 8019fba:	f7ff fc51 	bl	8019860 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8019fbe:	4b0d      	ldr	r3, [pc, #52]	; (8019ff4 <tcp_netif_ip_addr_changed+0x4c>)
 8019fc0:	4620      	mov	r0, r4
 8019fc2:	6819      	ldr	r1, [r3, #0]
 8019fc4:	f7ff fc4c 	bl	8019860 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8019fc8:	2d00      	cmp	r5, #0
 8019fca:	d0f2      	beq.n	8019fb2 <tcp_netif_ip_addr_changed+0xa>
 8019fcc:	682b      	ldr	r3, [r5, #0]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d0ef      	beq.n	8019fb2 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019fd2:	4b09      	ldr	r3, [pc, #36]	; (8019ff8 <tcp_netif_ip_addr_changed+0x50>)
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d0eb      	beq.n	8019fb2 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8019fda:	6819      	ldr	r1, [r3, #0]
 8019fdc:	6822      	ldr	r2, [r4, #0]
 8019fde:	4291      	cmp	r1, r2
 8019fe0:	d101      	bne.n	8019fe6 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8019fe2:	682a      	ldr	r2, [r5, #0]
 8019fe4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019fe6:	68db      	ldr	r3, [r3, #12]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d1f6      	bne.n	8019fda <tcp_netif_ip_addr_changed+0x32>
}
 8019fec:	bd38      	pop	{r3, r4, r5, pc}
 8019fee:	4770      	bx	lr
 8019ff0:	2002e198 	.word	0x2002e198
 8019ff4:	2002e1a4 	.word	0x2002e1a4
 8019ff8:	2002e1a0 	.word	0x2002e1a0

08019ffc <tcp_free_ooseq>:
{
 8019ffc:	b538      	push	{r3, r4, r5, lr}
  if (pcb->ooseq) {
 8019ffe:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801a000:	b13c      	cbz	r4, 801a012 <tcp_free_ooseq+0x16>
 801a002:	4605      	mov	r5, r0
    struct tcp_seg *next = seg->next;
 801a004:	4620      	mov	r0, r4
 801a006:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 801a008:	f7fe ff6c 	bl	8018ee4 <tcp_seg_free>
  while (seg != NULL) {
 801a00c:	2c00      	cmp	r4, #0
 801a00e:	d1f9      	bne.n	801a004 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801a010:	676c      	str	r4, [r5, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801a012:	bd38      	pop	{r3, r4, r5, pc}

0801a014 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a018:	4606      	mov	r6, r0
 801a01a:	2800      	cmp	r0, #0
 801a01c:	f000 8082 	beq.w	801a124 <tcp_parseopt+0x110>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a020:	4b4b      	ldr	r3, [pc, #300]	; (801a150 <tcp_parseopt+0x13c>)
 801a022:	8818      	ldrh	r0, [r3, #0]
 801a024:	2800      	cmp	r0, #0
 801a026:	d039      	beq.n	801a09c <tcp_parseopt+0x88>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a028:	4a4a      	ldr	r2, [pc, #296]	; (801a154 <tcp_parseopt+0x140>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a02a:	2300      	movs	r3, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a02c:	4d4a      	ldr	r5, [pc, #296]	; (801a158 <tcp_parseopt+0x144>)
 801a02e:	8817      	ldrh	r7, [r2, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a030:	4619      	mov	r1, r3
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a032:	4c4a      	ldr	r4, [pc, #296]	; (801a15c <tcp_parseopt+0x148>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a034:	461a      	mov	r2, r3
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a036:	fa5f f887 	uxtb.w	r8, r7
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a03a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 801a16c <tcp_parseopt+0x158>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a03e:	682d      	ldr	r5, [r5, #0]
    return tcphdr_opt2[idx];
 801a040:	ea6f 0e08 	mvn.w	lr, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a044:	f8d4 c000 	ldr.w	ip, [r4]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a048:	f8a9 3000 	strh.w	r3, [r9]
 801a04c:	f102 0414 	add.w	r4, r2, #20
 801a050:	4464      	add	r4, ip
 801a052:	4290      	cmp	r0, r2
  u16_t optidx = tcp_optidx++;
 801a054:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a058:	d91d      	bls.n	801a096 <tcp_parseopt+0x82>
  u16_t optidx = tcp_optidx++;
 801a05a:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a05c:	b1ad      	cbz	r5, 801a08a <tcp_parseopt+0x76>
    return tcphdr_opt2[idx];
 801a05e:	eb0e 0103 	add.w	r1, lr, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a062:	4297      	cmp	r7, r2
    return tcphdr_opt2[idx];
 801a064:	b2c9      	uxtb	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a066:	d810      	bhi.n	801a08a <tcp_parseopt+0x76>
    return tcphdr_opt2[idx];
 801a068:	5c69      	ldrb	r1, [r5, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801a06a:	2901      	cmp	r1, #1
 801a06c:	d010      	beq.n	801a090 <tcp_parseopt+0x7c>
 801a06e:	2902      	cmp	r1, #2
 801a070:	d01a      	beq.n	801a0a8 <tcp_parseopt+0x94>
 801a072:	b1a9      	cbz	r1, 801a0a0 <tcp_parseopt+0x8c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a074:	b10d      	cbz	r5, 801a07a <tcp_parseopt+0x66>
 801a076:	42bb      	cmp	r3, r7
 801a078:	d244      	bcs.n	801a104 <tcp_parseopt+0xf0>
    return opts[optidx];
 801a07a:	4463      	add	r3, ip
 801a07c:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801a07e:	2b01      	cmp	r3, #1
 801a080:	d961      	bls.n	801a146 <tcp_parseopt+0x132>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a082:	441a      	add	r2, r3
 801a084:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a086:	2101      	movs	r1, #1
 801a088:	e7e0      	b.n	801a04c <tcp_parseopt+0x38>
    return opts[optidx];
 801a08a:	7821      	ldrb	r1, [r4, #0]
      switch (opt) {
 801a08c:	2901      	cmp	r1, #1
 801a08e:	d1ee      	bne.n	801a06e <tcp_parseopt+0x5a>
 801a090:	3401      	adds	r4, #1
  u16_t optidx = tcp_optidx++;
 801a092:	461a      	mov	r2, r3
 801a094:	e7dd      	b.n	801a052 <tcp_parseopt+0x3e>
 801a096:	b109      	cbz	r1, 801a09c <tcp_parseopt+0x88>
 801a098:	f8a9 2000 	strh.w	r2, [r9]
      }
    }
  }
}
 801a09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0a0:	f8a9 3000 	strh.w	r3, [r9]
 801a0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801a0a8:	1c91      	adds	r1, r2, #2
 801a0aa:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a0ac:	b10d      	cbz	r5, 801a0b2 <tcp_parseopt+0x9e>
 801a0ae:	42bb      	cmp	r3, r7
 801a0b0:	d223      	bcs.n	801a0fa <tcp_parseopt+0xe6>
    return opts[optidx];
 801a0b2:	4463      	add	r3, ip
 801a0b4:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a0b6:	2b04      	cmp	r3, #4
 801a0b8:	d142      	bne.n	801a140 <tcp_parseopt+0x12c>
 801a0ba:	1c4b      	adds	r3, r1, #1
 801a0bc:	4283      	cmp	r3, r0
 801a0be:	da3f      	bge.n	801a140 <tcp_parseopt+0x12c>
  u16_t optidx = tcp_optidx++;
 801a0c0:	1cd3      	adds	r3, r2, #3
 801a0c2:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a0c4:	2d00      	cmp	r5, #0
 801a0c6:	d035      	beq.n	801a134 <tcp_parseopt+0x120>
 801a0c8:	428f      	cmp	r7, r1
 801a0ca:	d820      	bhi.n	801a10e <tcp_parseopt+0xfa>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a0cc:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801a0d0:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a0d2:	429f      	cmp	r7, r3
    return tcphdr_opt2[idx];
 801a0d4:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801a0d6:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a0d8:	5c6c      	ldrb	r4, [r5, r1]
 801a0da:	ea4f 2404 	mov.w	r4, r4, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a0de:	d81e      	bhi.n	801a11e <tcp_parseopt+0x10a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a0e0:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801a0e4:	b2c9      	uxtb	r1, r1
 801a0e6:	5c6b      	ldrb	r3, [r5, r1]
          mss |= tcp_get_next_optbyte();
 801a0e8:	4323      	orrs	r3, r4
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a0ea:	1e59      	subs	r1, r3, #1
 801a0ec:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801a0f0:	bf28      	it	cs
 801a0f2:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801a0f6:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 801a0f8:	e7c5      	b.n	801a086 <tcp_parseopt+0x72>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a0fa:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801a0fe:	b2db      	uxtb	r3, r3
 801a100:	5ceb      	ldrb	r3, [r5, r3]
 801a102:	e7d8      	b.n	801a0b6 <tcp_parseopt+0xa2>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a104:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801a108:	b2db      	uxtb	r3, r3
 801a10a:	5ceb      	ldrb	r3, [r5, r3]
 801a10c:	e7b7      	b.n	801a07e <tcp_parseopt+0x6a>
    return opts[optidx];
 801a10e:	4461      	add	r1, ip
  u16_t optidx = tcp_optidx++;
 801a110:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a112:	429f      	cmp	r7, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a114:	7d0c      	ldrb	r4, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801a116:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a118:	ea4f 2404 	mov.w	r4, r4, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a11c:	d9e0      	bls.n	801a0e0 <tcp_parseopt+0xcc>
    return opts[optidx];
 801a11e:	4463      	add	r3, ip
 801a120:	7d1b      	ldrb	r3, [r3, #20]
 801a122:	e7e1      	b.n	801a0e8 <tcp_parseopt+0xd4>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a124:	4b0e      	ldr	r3, [pc, #56]	; (801a160 <tcp_parseopt+0x14c>)
 801a126:	f240 727d 	movw	r2, #1917	; 0x77d
 801a12a:	490e      	ldr	r1, [pc, #56]	; (801a164 <tcp_parseopt+0x150>)
 801a12c:	480e      	ldr	r0, [pc, #56]	; (801a168 <tcp_parseopt+0x154>)
 801a12e:	f008 f9c9 	bl	80224c4 <iprintf>
 801a132:	e775      	b.n	801a020 <tcp_parseopt+0xc>
    return opts[optidx];
 801a134:	4461      	add	r1, ip
  u16_t optidx = tcp_optidx++;
 801a136:	3204      	adds	r2, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a138:	7d0c      	ldrb	r4, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801a13a:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a13c:	0224      	lsls	r4, r4, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a13e:	e7ee      	b.n	801a11e <tcp_parseopt+0x10a>
 801a140:	f8a9 1000 	strh.w	r1, [r9]
 801a144:	e7aa      	b.n	801a09c <tcp_parseopt+0x88>
  u16_t optidx = tcp_optidx++;
 801a146:	3202      	adds	r2, #2
 801a148:	f8a9 2000 	strh.w	r2, [r9]
 801a14c:	e7a6      	b.n	801a09c <tcp_parseopt+0x88>
 801a14e:	bf00      	nop
 801a150:	2001aa28 	.word	0x2001aa28
 801a154:	2001aa20 	.word	0x2001aa20
 801a158:	2001aa24 	.word	0x2001aa24
 801a15c:	2001aa1c 	.word	0x2001aa1c
 801a160:	08040484 	.word	0x08040484
 801a164:	080404b8 	.word	0x080404b8
 801a168:	08028d24 	.word	0x08028d24
 801a16c:	2001aa18 	.word	0x2001aa18

0801a170 <tcp_oos_insert_segment>:
{
 801a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801a172:	4605      	mov	r5, r0
{
 801a174:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801a176:	2800      	cmp	r0, #0
 801a178:	d03e      	beq.n	801a1f8 <tcp_oos_insert_segment+0x88>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a17a:	68eb      	ldr	r3, [r5, #12]
 801a17c:	8998      	ldrh	r0, [r3, #12]
 801a17e:	f7fc fa35 	bl	80165ec <lwip_htons>
 801a182:	07c2      	lsls	r2, r0, #31
 801a184:	d432      	bmi.n	801a1ec <tcp_oos_insert_segment+0x7c>
 801a186:	4e20      	ldr	r6, [pc, #128]	; (801a208 <tcp_oos_insert_segment+0x98>)
 801a188:	e005      	b.n	801a196 <tcp_oos_insert_segment+0x26>
      next = next->next;
 801a18a:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801a18c:	4620      	mov	r0, r4
 801a18e:	f7fe fea9 	bl	8018ee4 <tcp_seg_free>
    while (next &&
 801a192:	463c      	mov	r4, r7
 801a194:	b1ef      	cbz	r7, 801a1d2 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801a196:	68e1      	ldr	r1, [r4, #12]
 801a198:	8923      	ldrh	r3, [r4, #8]
 801a19a:	6848      	ldr	r0, [r1, #4]
 801a19c:	6837      	ldr	r7, [r6, #0]
 801a19e:	892a      	ldrh	r2, [r5, #8]
 801a1a0:	4403      	add	r3, r0
 801a1a2:	443a      	add	r2, r7
 801a1a4:	1ad3      	subs	r3, r2, r3
    while (next &&
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	db15      	blt.n	801a1d6 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a1aa:	8988      	ldrh	r0, [r1, #12]
 801a1ac:	f7fc fa1e 	bl	80165ec <lwip_htons>
 801a1b0:	07c3      	lsls	r3, r0, #31
 801a1b2:	d5ea      	bpl.n	801a18a <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801a1b4:	68eb      	ldr	r3, [r5, #12]
 801a1b6:	2001      	movs	r0, #1
 801a1b8:	899f      	ldrh	r7, [r3, #12]
 801a1ba:	f7fc fa17 	bl	80165ec <lwip_htons>
 801a1be:	68eb      	ldr	r3, [r5, #12]
 801a1c0:	4338      	orrs	r0, r7
      next = next->next;
 801a1c2:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801a1c4:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801a1c6:	4620      	mov	r0, r4
 801a1c8:	f7fe fe8c 	bl	8018ee4 <tcp_seg_free>
    while (next &&
 801a1cc:	463c      	mov	r4, r7
 801a1ce:	2f00      	cmp	r7, #0
 801a1d0:	d1e1      	bne.n	801a196 <tcp_oos_insert_segment+0x26>
  cseg->next = next;
 801a1d2:	602c      	str	r4, [r5, #0]
}
 801a1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801a1d6:	1a12      	subs	r2, r2, r0
    if (next &&
 801a1d8:	2a00      	cmp	r2, #0
 801a1da:	ddfa      	ble.n	801a1d2 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801a1dc:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801a1de:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801a1e0:	b289      	uxth	r1, r1
 801a1e2:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801a1e4:	f7fe f962 	bl	80184ac <pbuf_realloc>
  cseg->next = next;
 801a1e8:	602c      	str	r4, [r5, #0]
}
 801a1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801a1ec:	4620      	mov	r0, r4
    next = NULL;
 801a1ee:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801a1f0:	f7fe fe86 	bl	8018f00 <tcp_segs_free>
  cseg->next = next;
 801a1f4:	602c      	str	r4, [r5, #0]
}
 801a1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801a1f8:	4b04      	ldr	r3, [pc, #16]	; (801a20c <tcp_oos_insert_segment+0x9c>)
 801a1fa:	f240 421f 	movw	r2, #1055	; 0x41f
 801a1fe:	4904      	ldr	r1, [pc, #16]	; (801a210 <tcp_oos_insert_segment+0xa0>)
 801a200:	4804      	ldr	r0, [pc, #16]	; (801a214 <tcp_oos_insert_segment+0xa4>)
 801a202:	f008 f95f 	bl	80224c4 <iprintf>
 801a206:	e7b8      	b.n	801a17a <tcp_oos_insert_segment+0xa>
 801a208:	2001aa14 	.word	0x2001aa14
 801a20c:	08040484 	.word	0x08040484
 801a210:	080404d4 	.word	0x080404d4
 801a214:	08028d24 	.word	0x08028d24

0801a218 <tcp_input_delayed_close>:
{
 801a218:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801a21a:	4604      	mov	r4, r0
 801a21c:	b1c8      	cbz	r0, 801a252 <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801a21e:	4b11      	ldr	r3, [pc, #68]	; (801a264 <tcp_input_delayed_close+0x4c>)
 801a220:	781b      	ldrb	r3, [r3, #0]
 801a222:	f013 0310 	ands.w	r3, r3, #16
 801a226:	d101      	bne.n	801a22c <tcp_input_delayed_close+0x14>
  return 0;
 801a228:	4618      	mov	r0, r3
}
 801a22a:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801a22c:	8b63      	ldrh	r3, [r4, #26]
 801a22e:	06db      	lsls	r3, r3, #27
 801a230:	d406      	bmi.n	801a240 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801a232:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801a236:	b11b      	cbz	r3, 801a240 <tcp_input_delayed_close+0x28>
 801a238:	f06f 010e 	mvn.w	r1, #14
 801a23c:	6920      	ldr	r0, [r4, #16]
 801a23e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a240:	4621      	mov	r1, r4
 801a242:	4809      	ldr	r0, [pc, #36]	; (801a268 <tcp_input_delayed_close+0x50>)
 801a244:	f7ff f9da 	bl	80195fc <tcp_pcb_remove>
    tcp_free(pcb);
 801a248:	4620      	mov	r0, r4
 801a24a:	f7fe fce7 	bl	8018c1c <tcp_free>
 801a24e:	2001      	movs	r0, #1
}
 801a250:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801a252:	4b06      	ldr	r3, [pc, #24]	; (801a26c <tcp_input_delayed_close+0x54>)
 801a254:	f240 225a 	movw	r2, #602	; 0x25a
 801a258:	4905      	ldr	r1, [pc, #20]	; (801a270 <tcp_input_delayed_close+0x58>)
 801a25a:	4806      	ldr	r0, [pc, #24]	; (801a274 <tcp_input_delayed_close+0x5c>)
 801a25c:	f008 f932 	bl	80224c4 <iprintf>
 801a260:	e7dd      	b.n	801a21e <tcp_input_delayed_close+0x6>
 801a262:	bf00      	nop
 801a264:	2001aa10 	.word	0x2001aa10
 801a268:	2002e198 	.word	0x2002e198
 801a26c:	08040484 	.word	0x08040484
 801a270:	080404fc 	.word	0x080404fc
 801a274:	08028d24 	.word	0x08028d24

0801a278 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a27c:	b083      	sub	sp, #12
 801a27e:	9201      	str	r2, [sp, #4]
  while (seg_list != NULL &&
 801a280:	2900      	cmp	r1, #0
 801a282:	d03a      	beq.n	801a2fa <tcp_free_acked_segments.isra.0+0x82>
 801a284:	4607      	mov	r7, r0
 801a286:	460c      	mov	r4, r1
 801a288:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 801a348 <tcp_free_acked_segments.isra.0+0xd0>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801a28c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801a33c <tcp_free_acked_segments.isra.0+0xc4>
 801a290:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801a34c <tcp_free_acked_segments.isra.0+0xd4>
 801a294:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 801a344 <tcp_free_acked_segments.isra.0+0xcc>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801a298:	68e3      	ldr	r3, [r4, #12]
 801a29a:	6858      	ldr	r0, [r3, #4]
 801a29c:	f7fc f9aa 	bl	80165f4 <lwip_htonl>
 801a2a0:	68e3      	ldr	r3, [r4, #12]
 801a2a2:	4605      	mov	r5, r0
 801a2a4:	8926      	ldrh	r6, [r4, #8]
 801a2a6:	8998      	ldrh	r0, [r3, #12]
 801a2a8:	f7fc f9a0 	bl	80165ec <lwip_htons>
 801a2ac:	f8d8 3000 	ldr.w	r3, [r8]
 801a2b0:	f010 0003 	ands.w	r0, r0, #3
 801a2b4:	eba5 0503 	sub.w	r5, r5, r3
 801a2b8:	bf18      	it	ne
 801a2ba:	2001      	movne	r0, #1
 801a2bc:	4435      	add	r5, r6
 801a2be:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801a2c0:	2800      	cmp	r0, #0
 801a2c2:	dc33      	bgt.n	801a32c <tcp_free_acked_segments.isra.0+0xb4>
    seg_list = seg_list->next;
 801a2c4:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801a2c8:	f7fe f948 	bl	801855c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801a2cc:	883b      	ldrh	r3, [r7, #0]
    clen = pbuf_clen(next->p);
 801a2ce:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801a2d0:	4298      	cmp	r0, r3
 801a2d2:	d822      	bhi.n	801a31a <tcp_free_acked_segments.isra.0+0xa2>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801a2d4:	4a18      	ldr	r2, [pc, #96]	; (801a338 <tcp_free_acked_segments.isra.0+0xc0>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801a2d6:	1b5d      	subs	r5, r3, r5
    tcp_seg_free(next);
 801a2d8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801a2da:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801a2dc:	803d      	strh	r5, [r7, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801a2de:	8923      	ldrh	r3, [r4, #8]
 801a2e0:	4634      	mov	r4, r6
 801a2e2:	440b      	add	r3, r1
 801a2e4:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 801a2e6:	f7fe fdfd 	bl	8018ee4 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 801a2ea:	883b      	ldrh	r3, [r7, #0]
 801a2ec:	b11b      	cbz	r3, 801a2f6 <tcp_free_acked_segments.isra.0+0x7e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801a2ee:	9b01      	ldr	r3, [sp, #4]
 801a2f0:	ea56 0503 	orrs.w	r5, r6, r3
 801a2f4:	d006      	beq.n	801a304 <tcp_free_acked_segments.isra.0+0x8c>
  while (seg_list != NULL &&
 801a2f6:	2e00      	cmp	r6, #0
 801a2f8:	d1ce      	bne.n	801a298 <tcp_free_acked_segments.isra.0+0x20>
 801a2fa:	2500      	movs	r5, #0
}
 801a2fc:	4628      	mov	r0, r5
 801a2fe:	b003      	add	sp, #12
 801a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801a304:	4b0d      	ldr	r3, [pc, #52]	; (801a33c <tcp_free_acked_segments.isra.0+0xc4>)
 801a306:	f240 4261 	movw	r2, #1121	; 0x461
 801a30a:	490d      	ldr	r1, [pc, #52]	; (801a340 <tcp_free_acked_segments.isra.0+0xc8>)
 801a30c:	480d      	ldr	r0, [pc, #52]	; (801a344 <tcp_free_acked_segments.isra.0+0xcc>)
 801a30e:	f008 f8d9 	bl	80224c4 <iprintf>
}
 801a312:	4628      	mov	r0, r5
 801a314:	b003      	add	sp, #12
 801a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801a31a:	465b      	mov	r3, fp
 801a31c:	f240 4257 	movw	r2, #1111	; 0x457
 801a320:	4651      	mov	r1, sl
 801a322:	4648      	mov	r0, r9
 801a324:	f008 f8ce 	bl	80224c4 <iprintf>
 801a328:	883b      	ldrh	r3, [r7, #0]
 801a32a:	e7d3      	b.n	801a2d4 <tcp_free_acked_segments.isra.0+0x5c>
 801a32c:	4625      	mov	r5, r4
}
 801a32e:	4628      	mov	r0, r5
 801a330:	b003      	add	sp, #12
 801a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a336:	bf00      	nop
 801a338:	2001aa08 	.word	0x2001aa08
 801a33c:	08040484 	.word	0x08040484
 801a340:	0804054c 	.word	0x0804054c
 801a344:	08028d24 	.word	0x08028d24
 801a348:	2001a9f0 	.word	0x2001a9f0
 801a34c:	08040524 	.word	0x08040524

0801a350 <tcp_receive>:
{
 801a350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801a354:	4604      	mov	r4, r0
 801a356:	2800      	cmp	r0, #0
 801a358:	f000 8205 	beq.w	801a766 <tcp_receive+0x416>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801a35c:	7d23      	ldrb	r3, [r4, #20]
 801a35e:	2b03      	cmp	r3, #3
 801a360:	f240 8124 	bls.w	801a5ac <tcp_receive+0x25c>
  if (flags & TCP_ACK) {
 801a364:	4bc2      	ldr	r3, [pc, #776]	; (801a670 <tcp_receive+0x320>)
 801a366:	781b      	ldrb	r3, [r3, #0]
 801a368:	06dd      	lsls	r5, r3, #27
 801a36a:	f100 809b 	bmi.w	801a4a4 <tcp_receive+0x154>
 801a36e:	4fc1      	ldr	r7, [pc, #772]	; (801a674 <tcp_receive+0x324>)
 801a370:	4ec1      	ldr	r6, [pc, #772]	; (801a678 <tcp_receive+0x328>)
 801a372:	8839      	ldrh	r1, [r7, #0]
 801a374:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801a376:	2900      	cmp	r1, #0
 801a378:	f000 8083 	beq.w	801a482 <tcp_receive+0x132>
 801a37c:	7d22      	ldrb	r2, [r4, #20]
 801a37e:	2a06      	cmp	r2, #6
 801a380:	d87f      	bhi.n	801a482 <tcp_receive+0x132>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a382:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a384:	eba0 0803 	sub.w	r8, r0, r3
 801a388:	f1b8 0f01 	cmp.w	r8, #1
 801a38c:	d405      	bmi.n	801a39a <tcp_receive+0x4a>
 801a38e:	1c42      	adds	r2, r0, #1
 801a390:	1ad2      	subs	r2, r2, r3
 801a392:	1a51      	subs	r1, r2, r1
 801a394:	2900      	cmp	r1, #0
 801a396:	f340 81f7 	ble.w	801a788 <tcp_receive+0x438>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801a39a:	1a1a      	subs	r2, r3, r0
 801a39c:	2a00      	cmp	r2, #0
 801a39e:	f2c0 81ee 	blt.w	801a77e <tcp_receive+0x42e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a3a2:	f103 0c01 	add.w	ip, r3, #1
 801a3a6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a3a8:	ebac 0200 	sub.w	r2, ip, r0
 801a3ac:	1a52      	subs	r2, r2, r1
 801a3ae:	2a00      	cmp	r2, #0
 801a3b0:	dc3c      	bgt.n	801a42c <tcp_receive+0xdc>
      if (pcb->rcv_nxt == seqno) {
 801a3b2:	4298      	cmp	r0, r3
 801a3b4:	f000 8476 	beq.w	801aca4 <tcp_receive+0x954>
        if (pcb->ooseq == NULL) {
 801a3b8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801a3ba:	2d00      	cmp	r5, #0
 801a3bc:	f000 837b 	beq.w	801aab6 <tcp_receive+0x766>
            if (seqno == next->tcphdr->seqno) {
 801a3c0:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801a3c2:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a3c6:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801a3ca:	6842      	ldr	r2, [r0, #4]
 801a3cc:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a3ce:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 801a3d2:	d01a      	beq.n	801a40a <tcp_receive+0xba>
              if (prev == NULL) {
 801a3d4:	f1b8 0f00 	cmp.w	r8, #0
 801a3d8:	f000 8160 	beq.w	801a69c <tcp_receive+0x34c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a3dc:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801a3e0:	6849      	ldr	r1, [r1, #4]
 801a3e2:	ebae 0101 	sub.w	r1, lr, r1
 801a3e6:	2900      	cmp	r1, #0
 801a3e8:	db03      	blt.n	801a3f2 <tcp_receive+0xa2>
 801a3ea:	f1b9 0f00 	cmp.w	r9, #0
 801a3ee:	f340 836b 	ble.w	801aac8 <tcp_receive+0x778>
              if (next->next == NULL &&
 801a3f2:	6829      	ldr	r1, [r5, #0]
 801a3f4:	46a8      	mov	r8, r5
 801a3f6:	2900      	cmp	r1, #0
 801a3f8:	f000 815c 	beq.w	801a6b4 <tcp_receive+0x364>
 801a3fc:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801a3fe:	68e8      	ldr	r0, [r5, #12]
 801a400:	6842      	ldr	r2, [r0, #4]
 801a402:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a404:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 801a408:	d1e4      	bne.n	801a3d4 <tcp_receive+0x84>
              if (inseg.len > next->len) {
 801a40a:	489c      	ldr	r0, [pc, #624]	; (801a67c <tcp_receive+0x32c>)
 801a40c:	892b      	ldrh	r3, [r5, #8]
 801a40e:	8902      	ldrh	r2, [r0, #8]
 801a410:	429a      	cmp	r2, r3
 801a412:	d90b      	bls.n	801a42c <tcp_receive+0xdc>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a414:	f7fe fd90 	bl	8018f38 <tcp_seg_copy>
                if (cseg != NULL) {
 801a418:	b140      	cbz	r0, 801a42c <tcp_receive+0xdc>
                  if (prev != NULL) {
 801a41a:	f1b8 0f00 	cmp.w	r8, #0
 801a41e:	f000 8415 	beq.w	801ac4c <tcp_receive+0x8fc>
                    prev->next = cseg;
 801a422:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801a426:	4629      	mov	r1, r5
 801a428:	f7ff fea2 	bl	801a170 <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 801a42c:	4620      	mov	r0, r4
}
 801a42e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801a432:	f002 ba83 	b.w	801c93c <tcp_send_empty_ack>
      if (tcplen == 0) {
 801a436:	4f8f      	ldr	r7, [pc, #572]	; (801a674 <tcp_receive+0x324>)
 801a438:	8839      	ldrh	r1, [r7, #0]
 801a43a:	2900      	cmp	r1, #0
 801a43c:	f040 8104 	bne.w	801a648 <tcp_receive+0x2f8>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801a440:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801a444:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801a446:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a448:	4448      	add	r0, r9
 801a44a:	4560      	cmp	r0, ip
 801a44c:	f040 80fc 	bne.w	801a648 <tcp_receive+0x2f8>
          if (pcb->rtime >= 0) {
 801a450:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801a452:	0400      	lsls	r0, r0, #16
 801a454:	f100 80f8 	bmi.w	801a648 <tcp_receive+0x2f8>
 801a458:	4590      	cmp	r8, r2
 801a45a:	f040 80f5 	bne.w	801a648 <tcp_receive+0x2f8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801a45e:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801a462:	28ff      	cmp	r0, #255	; 0xff
 801a464:	f000 8393 	beq.w	801ab8e <tcp_receive+0x83e>
                ++pcb->dupacks;
 801a468:	3001      	adds	r0, #1
 801a46a:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801a46c:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801a46e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801a472:	f200 838c 	bhi.w	801ab8e <tcp_receive+0x83e>
              if (pcb->dupacks >= 3) {
 801a476:	f000 8396 	beq.w	801aba6 <tcp_receive+0x856>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a47a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801a47c:	2800      	cmp	r0, #0
 801a47e:	f040 80b8 	bne.w	801a5f2 <tcp_receive+0x2a2>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a482:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a484:	1a99      	subs	r1, r3, r2
 801a486:	2900      	cmp	r1, #0
 801a488:	db06      	blt.n	801a498 <tcp_receive+0x148>
 801a48a:	f1c2 0201 	rsb	r2, r2, #1
 801a48e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a490:	1a52      	subs	r2, r2, r1
 801a492:	4413      	add	r3, r2
 801a494:	2b00      	cmp	r3, #0
 801a496:	dd03      	ble.n	801a4a0 <tcp_receive+0x150>
      tcp_ack_now(pcb);
 801a498:	8b63      	ldrh	r3, [r4, #26]
 801a49a:	f043 0302 	orr.w	r3, r3, #2
 801a49e:	8363      	strh	r3, [r4, #26]
}
 801a4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a4a4:	4e74      	ldr	r6, [pc, #464]	; (801a678 <tcp_receive+0x328>)
 801a4a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801a4a8:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801a4aa:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a4ae:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801a4b0:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a4b4:	2900      	cmp	r1, #0
 801a4b6:	f2c0 8081 	blt.w	801a5bc <tcp_receive+0x26c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a4ba:	4d71      	ldr	r5, [pc, #452]	; (801a680 <tcp_receive+0x330>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a4bc:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a4be:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a4c0:	f000 80c6 	beq.w	801a650 <tcp_receive+0x300>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a4c4:	4594      	cmp	ip, r2
 801a4c6:	f000 80cc 	beq.w	801a662 <tcp_receive+0x312>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801a4ca:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801a4ce:	eba2 0108 	sub.w	r1, r2, r8
 801a4d2:	2900      	cmp	r1, #0
 801a4d4:	ddaf      	ble.n	801a436 <tcp_receive+0xe6>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a4d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801a4d8:	1ad3      	subs	r3, r2, r3
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	dc7e      	bgt.n	801a5dc <tcp_receive+0x28c>
      if (pcb->flags & TF_INFR) {
 801a4de:	8b63      	ldrh	r3, [r4, #26]
 801a4e0:	0758      	lsls	r0, r3, #29
 801a4e2:	d509      	bpl.n	801a4f8 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 801a4e4:	f023 0304 	bic.w	r3, r3, #4
        pcb->cwnd = pcb->ssthresh;
 801a4e8:	f8b4 704a 	ldrh.w	r7, [r4, #74]	; 0x4a
        pcb->bytes_acked = 0;
 801a4ec:	2000      	movs	r0, #0
        tcp_clear_flags(pcb, TF_INFR);
 801a4ee:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801a4f0:	f8a4 7048 	strh.w	r7, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801a4f4:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a4f8:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 801a4fc:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a4fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801a500:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 801a502:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a504:	eb03 03e7 	add.w	r3, r3, r7, asr #3
      pcb->nrtx = 0;
 801a508:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801a50c:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a50e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801a512:	d913      	bls.n	801a53c <tcp_receive+0x1ec>
        if (pcb->cwnd < pcb->ssthresh) {
 801a514:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801a518:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801a51a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801a51e:	4293      	cmp	r3, r2
 801a520:	f200 81ca 	bhi.w	801a8b8 <tcp_receive+0x568>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801a524:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 801a528:	4419      	add	r1, r3
 801a52a:	b289      	uxth	r1, r1
 801a52c:	428b      	cmp	r3, r1
 801a52e:	f200 82ac 	bhi.w	801aa8a <tcp_receive+0x73a>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801a532:	428a      	cmp	r2, r1
 801a534:	f240 82ab 	bls.w	801aa8e <tcp_receive+0x73e>
 801a538:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801a53c:	f104 0766 	add.w	r7, r4, #102	; 0x66
 801a540:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801a544:	4638      	mov	r0, r7
 801a546:	f7ff fe97 	bl	801a278 <tcp_free_acked_segments.isra.0>
 801a54a:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801a54c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801a54e:	4638      	mov	r0, r7
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801a550:	6722      	str	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801a552:	f7ff fe91 	bl	801a278 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 801a556:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->polltmr = 0;
 801a558:	2100      	movs	r1, #0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801a55a:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801a55c:	fab2 f382 	clz	r3, r2
      pcb->polltmr = 0;
 801a560:	7721      	strb	r1, [r4, #28]
      if (pcb->unacked == NULL) {
 801a562:	095b      	lsrs	r3, r3, #5
 801a564:	425b      	negs	r3, r3
 801a566:	8623      	strh	r3, [r4, #48]	; 0x30
      if (pcb->unsent == NULL) {
 801a568:	2800      	cmp	r0, #0
 801a56a:	f000 81a2 	beq.w	801a8b2 <tcp_receive+0x562>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801a56e:	4945      	ldr	r1, [pc, #276]	; (801a684 <tcp_receive+0x334>)
 801a570:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801a574:	880f      	ldrh	r7, [r1, #0]
      if (pcb->flags & TF_RTO) {
 801a576:	8b61      	ldrh	r1, [r4, #26]
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801a578:	443b      	add	r3, r7
 801a57a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801a57e:	050b      	lsls	r3, r1, #20
 801a580:	f140 80f9 	bpl.w	801a776 <tcp_receive+0x426>
        if (pcb->unacked == NULL) {
 801a584:	2a00      	cmp	r2, #0
 801a586:	f000 81ac 	beq.w	801a8e2 <tcp_receive+0x592>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801a58a:	68d3      	ldr	r3, [r2, #12]
 801a58c:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801a58e:	6858      	ldr	r0, [r3, #4]
 801a590:	f7fc f830 	bl	80165f4 <lwip_htonl>
 801a594:	1a38      	subs	r0, r7, r0
 801a596:	2800      	cmp	r0, #0
 801a598:	f300 80ed 	bgt.w	801a776 <tcp_receive+0x426>
          tcp_clear_flags(pcb, TF_RTO);
 801a59c:	8b62      	ldrh	r2, [r4, #26]
 801a59e:	4f35      	ldr	r7, [pc, #212]	; (801a674 <tcp_receive+0x324>)
 801a5a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801a5a4:	6833      	ldr	r3, [r6, #0]
 801a5a6:	8839      	ldrh	r1, [r7, #0]
 801a5a8:	8362      	strh	r2, [r4, #26]
 801a5aa:	e01d      	b.n	801a5e8 <tcp_receive+0x298>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801a5ac:	4b36      	ldr	r3, [pc, #216]	; (801a688 <tcp_receive+0x338>)
 801a5ae:	f240 427c 	movw	r2, #1148	; 0x47c
 801a5b2:	4936      	ldr	r1, [pc, #216]	; (801a68c <tcp_receive+0x33c>)
 801a5b4:	4836      	ldr	r0, [pc, #216]	; (801a690 <tcp_receive+0x340>)
 801a5b6:	f007 ff85 	bl	80224c4 <iprintf>
 801a5ba:	e6d3      	b.n	801a364 <tcp_receive+0x14>
 801a5bc:	4a35      	ldr	r2, [pc, #212]	; (801a694 <tcp_receive+0x344>)
 801a5be:	4d30      	ldr	r5, [pc, #192]	; (801a680 <tcp_receive+0x330>)
 801a5c0:	6811      	ldr	r1, [r2, #0]
 801a5c2:	682a      	ldr	r2, [r5, #0]
 801a5c4:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801a5c6:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801a5ca:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801a5ce:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801a5d0:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a5d4:	bf38      	it	cc
 801a5d6:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801a5da:	e776      	b.n	801a4ca <tcp_receive+0x17a>
      tcp_send_empty_ack(pcb);
 801a5dc:	4f25      	ldr	r7, [pc, #148]	; (801a674 <tcp_receive+0x324>)
 801a5de:	4620      	mov	r0, r4
 801a5e0:	f002 f9ac 	bl	801c93c <tcp_send_empty_ack>
 801a5e4:	6833      	ldr	r3, [r6, #0]
 801a5e6:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a5e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801a5ea:	2800      	cmp	r0, #0
 801a5ec:	f43f aec3 	beq.w	801a376 <tcp_receive+0x26>
 801a5f0:	682a      	ldr	r2, [r5, #0]
 801a5f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801a5f4:	1aaa      	subs	r2, r5, r2
 801a5f6:	2a00      	cmp	r2, #0
 801a5f8:	f6bf aebd 	bge.w	801a376 <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801a5fc:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a600:	b280      	uxth	r0, r0
 801a602:	4a25      	ldr	r2, [pc, #148]	; (801a698 <tcp_receive+0x348>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801a604:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a608:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801a60c:	ebae 020c 	sub.w	r2, lr, ip
 801a610:	1a12      	subs	r2, r2, r0
 801a612:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801a614:	4415      	add	r5, r2
      if (m < 0) {
 801a616:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801a61a:	b22d      	sxth	r5, r5
 801a61c:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801a61e:	d003      	beq.n	801a628 <tcp_receive+0x2d8>
        m = (s16_t) - m;
 801a620:	ebac 0c0e 	sub.w	ip, ip, lr
 801a624:	4460      	add	r0, ip
 801a626:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801a628:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 801a62c:	f04f 0c00 	mov.w	ip, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801a630:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
      pcb->rttest = 0;
 801a634:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
      pcb->sv = (s16_t)(pcb->sv + m);
 801a638:	4410      	add	r0, r2
 801a63a:	b280      	uxth	r0, r0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a63c:	eb00 02e5 	add.w	r2, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801a640:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a642:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801a646:	e696      	b.n	801a376 <tcp_receive+0x26>
        pcb->dupacks = 0;
 801a648:	2200      	movs	r2, #0
 801a64a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a64e:	e7cb      	b.n	801a5e8 <tcp_receive+0x298>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a650:	ebac 0102 	sub.w	r1, ip, r2
 801a654:	2900      	cmp	r1, #0
 801a656:	f6bf af35 	bge.w	801a4c4 <tcp_receive+0x174>
 801a65a:	490e      	ldr	r1, [pc, #56]	; (801a694 <tcp_receive+0x344>)
 801a65c:	6809      	ldr	r1, [r1, #0]
 801a65e:	89c9      	ldrh	r1, [r1, #14]
 801a660:	e7b1      	b.n	801a5c6 <tcp_receive+0x276>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a662:	490c      	ldr	r1, [pc, #48]	; (801a694 <tcp_receive+0x344>)
 801a664:	6809      	ldr	r1, [r1, #0]
 801a666:	89c9      	ldrh	r1, [r1, #14]
 801a668:	458e      	cmp	lr, r1
 801a66a:	f4bf af2e 	bcs.w	801a4ca <tcp_receive+0x17a>
 801a66e:	e7aa      	b.n	801a5c6 <tcp_receive+0x276>
 801a670:	2001a9f4 	.word	0x2001a9f4
 801a674:	2001aa2a 	.word	0x2001aa2a
 801a678:	2001aa14 	.word	0x2001aa14
 801a67c:	2001a9f8 	.word	0x2001a9f8
 801a680:	2001a9f0 	.word	0x2001a9f0
 801a684:	2001aa08 	.word	0x2001aa08
 801a688:	08040484 	.word	0x08040484
 801a68c:	08040588 	.word	0x08040588
 801a690:	08028d24 	.word	0x08028d24
 801a694:	2001aa1c 	.word	0x2001aa1c
 801a698:	2002e19c 	.word	0x2002e19c
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a69c:	1a99      	subs	r1, r3, r2
 801a69e:	2900      	cmp	r1, #0
 801a6a0:	f6bf aea7 	bge.w	801a3f2 <tcp_receive+0xa2>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a6a4:	48a1      	ldr	r0, [pc, #644]	; (801a92c <tcp_receive+0x5dc>)
 801a6a6:	f7fe fc47 	bl	8018f38 <tcp_seg_copy>
                  if (cseg != NULL) {
 801a6aa:	2800      	cmp	r0, #0
 801a6ac:	f43f aebe 	beq.w	801a42c <tcp_receive+0xdc>
                    pcb->ooseq = cseg;
 801a6b0:	6760      	str	r0, [r4, #116]	; 0x74
 801a6b2:	e6b8      	b.n	801a426 <tcp_receive+0xd6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a6b4:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	f77f aeb8 	ble.w	801a42c <tcp_receive+0xdc>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a6bc:	8980      	ldrh	r0, [r0, #12]
 801a6be:	f7fb ff95 	bl	80165ec <lwip_htons>
 801a6c2:	07c2      	lsls	r2, r0, #31
 801a6c4:	f53f aeb2 	bmi.w	801a42c <tcp_receive+0xdc>
                next->next = tcp_seg_copy(&inseg);
 801a6c8:	4898      	ldr	r0, [pc, #608]	; (801a92c <tcp_receive+0x5dc>)
 801a6ca:	f7fe fc35 	bl	8018f38 <tcp_seg_copy>
 801a6ce:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801a6d0:	2800      	cmp	r0, #0
 801a6d2:	f43f aeab 	beq.w	801a42c <tcp_receive+0xdc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a6d6:	68eb      	ldr	r3, [r5, #12]
 801a6d8:	892a      	ldrh	r2, [r5, #8]
 801a6da:	6859      	ldr	r1, [r3, #4]
 801a6dc:	6833      	ldr	r3, [r6, #0]
 801a6de:	440a      	add	r2, r1
 801a6e0:	1ad2      	subs	r2, r2, r3
 801a6e2:	2a00      	cmp	r2, #0
 801a6e4:	dd05      	ble.n	801a6f2 <tcp_receive+0x3a2>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a6e6:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801a6e8:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a6ea:	b299      	uxth	r1, r3
 801a6ec:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801a6ee:	f7fd fedd 	bl	80184ac <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a6f2:	6832      	ldr	r2, [r6, #0]
 801a6f4:	883b      	ldrh	r3, [r7, #0]
 801a6f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a6f8:	4413      	add	r3, r2
 801a6fa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a6fc:	1a5b      	subs	r3, r3, r1
 801a6fe:	1a9b      	subs	r3, r3, r2
 801a700:	2b00      	cmp	r3, #0
 801a702:	f77f ae93 	ble.w	801a42c <tcp_receive+0xdc>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a706:	682b      	ldr	r3, [r5, #0]
 801a708:	68db      	ldr	r3, [r3, #12]
 801a70a:	8998      	ldrh	r0, [r3, #12]
 801a70c:	f7fb ff6e 	bl	80165ec <lwip_htons>
 801a710:	07c3      	lsls	r3, r0, #31
 801a712:	f100 82b3 	bmi.w	801ac7c <tcp_receive+0x92c>
 801a716:	682a      	ldr	r2, [r5, #0]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a718:	6830      	ldr	r0, [r6, #0]
 801a71a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a71e:	1a09      	subs	r1, r1, r0
                    pbuf_realloc(next->next->p, next->next->len);
 801a720:	6850      	ldr	r0, [r2, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a722:	4419      	add	r1, r3
 801a724:	b289      	uxth	r1, r1
 801a726:	8111      	strh	r1, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a728:	f7fd fec0 	bl	80184ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a72c:	682b      	ldr	r3, [r5, #0]
 801a72e:	68da      	ldr	r2, [r3, #12]
 801a730:	891d      	ldrh	r5, [r3, #8]
 801a732:	8990      	ldrh	r0, [r2, #12]
 801a734:	f7fb ff5a 	bl	80165ec <lwip_htons>
 801a738:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a73c:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801a73e:	bf18      	it	ne
 801a740:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a742:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a744:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 801a746:	442b      	add	r3, r5
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a748:	4402      	add	r2, r0
                    tcplen = TCP_TCPLEN(next->next);
 801a74a:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a74c:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801a74e:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a750:	4291      	cmp	r1, r2
 801a752:	f43f ae6b 	beq.w	801a42c <tcp_receive+0xdc>
 801a756:	4b76      	ldr	r3, [pc, #472]	; (801a930 <tcp_receive+0x5e0>)
 801a758:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801a75c:	4975      	ldr	r1, [pc, #468]	; (801a934 <tcp_receive+0x5e4>)
 801a75e:	4876      	ldr	r0, [pc, #472]	; (801a938 <tcp_receive+0x5e8>)
 801a760:	f007 feb0 	bl	80224c4 <iprintf>
 801a764:	e662      	b.n	801a42c <tcp_receive+0xdc>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801a766:	4b72      	ldr	r3, [pc, #456]	; (801a930 <tcp_receive+0x5e0>)
 801a768:	f240 427b 	movw	r2, #1147	; 0x47b
 801a76c:	4973      	ldr	r1, [pc, #460]	; (801a93c <tcp_receive+0x5ec>)
 801a76e:	4872      	ldr	r0, [pc, #456]	; (801a938 <tcp_receive+0x5e8>)
 801a770:	f007 fea8 	bl	80224c4 <iprintf>
 801a774:	e5f2      	b.n	801a35c <tcp_receive+0xc>
 801a776:	4f72      	ldr	r7, [pc, #456]	; (801a940 <tcp_receive+0x5f0>)
 801a778:	6833      	ldr	r3, [r6, #0]
 801a77a:	8839      	ldrh	r1, [r7, #0]
 801a77c:	e734      	b.n	801a5e8 <tcp_receive+0x298>
        tcp_ack_now(pcb);
 801a77e:	8b63      	ldrh	r3, [r4, #26]
 801a780:	f043 0302 	orr.w	r3, r3, #2
 801a784:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a786:	e651      	b.n	801a42c <tcp_receive+0xdc>
      struct pbuf *p = inseg.p;
 801a788:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 801a92c <tcp_receive+0x5dc>
 801a78c:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a790:	2d00      	cmp	r5, #0
 801a792:	f000 816b 	beq.w	801aa6c <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801a796:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801a79a:	4598      	cmp	r8, r3
 801a79c:	f200 80be 	bhi.w	801a91c <tcp_receive+0x5cc>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a7a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801a7a4:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a7a8:	891b      	ldrh	r3, [r3, #8]
 801a7aa:	4543      	cmp	r3, r8
 801a7ac:	f0c0 80ab 	bcc.w	801a906 <tcp_receive+0x5b6>
      inseg.len -= off;
 801a7b0:	f8b9 2008 	ldrh.w	r2, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a7b4:	eba3 0308 	sub.w	r3, r3, r8
      while (p->len < off) {
 801a7b8:	8969      	ldrh	r1, [r5, #10]
      inseg.len -= off;
 801a7ba:	eba2 0208 	sub.w	r2, r2, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a7be:	b29b      	uxth	r3, r3
      while (p->len < off) {
 801a7c0:	4541      	cmp	r1, r8
      inseg.len -= off;
 801a7c2:	f8a9 2008 	strh.w	r2, [r9, #8]
      while (p->len < off) {
 801a7c6:	d20a      	bcs.n	801a7de <tcp_receive+0x48e>
        p->len = 0;
 801a7c8:	2200      	movs	r2, #0
        off -= p->len;
 801a7ca:	eba8 0101 	sub.w	r1, r8, r1
        p->len = 0;
 801a7ce:	816a      	strh	r2, [r5, #10]
        p->tot_len = new_tot_len;
 801a7d0:	812b      	strh	r3, [r5, #8]
        p = p->next;
 801a7d2:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801a7d4:	fa1f f881 	uxth.w	r8, r1
      while (p->len < off) {
 801a7d8:	8969      	ldrh	r1, [r5, #10]
 801a7da:	4541      	cmp	r1, r8
 801a7dc:	d3f5      	bcc.n	801a7ca <tcp_receive+0x47a>
      pbuf_remove_header(p, off);
 801a7de:	4641      	mov	r1, r8
 801a7e0:	4628      	mov	r0, r5
 801a7e2:	f7fd fd1b 	bl	801821c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a7e8:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a7ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a7ee:	6033      	str	r3, [r6, #0]
 801a7f0:	604b      	str	r3, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a7f2:	2a00      	cmp	r2, #0
 801a7f4:	f43f ae1a 	beq.w	801a42c <tcp_receive+0xdc>
        tcplen = TCP_TCPLEN(&inseg);
 801a7f8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a7fc:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801a800:	8998      	ldrh	r0, [r3, #12]
 801a802:	f7fb fef3 	bl	80165ec <lwip_htons>
 801a806:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801a80a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801a80c:	bf18      	it	ne
 801a80e:	2301      	movne	r3, #1
 801a810:	442b      	add	r3, r5
 801a812:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801a814:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801a816:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801a818:	f0c0 8180 	bcc.w	801ab1c <tcp_receive+0x7cc>
        if (pcb->ooseq != NULL) {
 801a81c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801a81e:	2b00      	cmp	r3, #0
 801a820:	f000 809b 	beq.w	801a95a <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a824:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a828:	8998      	ldrh	r0, [r3, #12]
 801a82a:	f7fb fedf 	bl	80165ec <lwip_htons>
 801a82e:	07c0      	lsls	r0, r0, #31
 801a830:	f100 8090 	bmi.w	801a954 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801a834:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801a836:	b955      	cbnz	r5, 801a84e <tcp_receive+0x4fe>
 801a838:	e1f3      	b.n	801ac22 <tcp_receive+0x8d2>
              next = next->next;
 801a83a:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801a83e:	4628      	mov	r0, r5
 801a840:	f7fe fb50 	bl	8018ee4 <tcp_seg_free>
            while (next &&
 801a844:	4645      	mov	r5, r8
 801a846:	f1b8 0f00 	cmp.w	r8, #0
 801a84a:	f000 81ea 	beq.w	801ac22 <tcp_receive+0x8d2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a84e:	68e8      	ldr	r0, [r5, #12]
 801a850:	892b      	ldrh	r3, [r5, #8]
 801a852:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801a856:	883a      	ldrh	r2, [r7, #0]
 801a858:	f8d6 e000 	ldr.w	lr, [r6]
 801a85c:	4463      	add	r3, ip
 801a85e:	eb02 010e 	add.w	r1, r2, lr
 801a862:	1acb      	subs	r3, r1, r3
            while (next &&
 801a864:	2b00      	cmp	r3, #0
 801a866:	f2c0 81a4 	blt.w	801abb2 <tcp_receive+0x862>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a86a:	8980      	ldrh	r0, [r0, #12]
 801a86c:	f7fb febe 	bl	80165ec <lwip_htons>
 801a870:	07c1      	lsls	r1, r0, #31
 801a872:	d5e2      	bpl.n	801a83a <tcp_receive+0x4ea>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801a874:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a878:	8998      	ldrh	r0, [r3, #12]
 801a87a:	f7fb feb7 	bl	80165ec <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a87e:	0782      	lsls	r2, r0, #30
 801a880:	d4db      	bmi.n	801a83a <tcp_receive+0x4ea>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a882:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a886:	2001      	movs	r0, #1
 801a888:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801a88c:	f7fb feae 	bl	80165ec <lwip_htons>
 801a890:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a894:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801a898:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a89c:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801a89e:	b280      	uxth	r0, r0
 801a8a0:	f7fb fea4 	bl	80165ec <lwip_htons>
 801a8a4:	f010 0003 	ands.w	r0, r0, #3
 801a8a8:	bf18      	it	ne
 801a8aa:	2001      	movne	r0, #1
 801a8ac:	4440      	add	r0, r8
 801a8ae:	8038      	strh	r0, [r7, #0]
 801a8b0:	e7c3      	b.n	801a83a <tcp_receive+0x4ea>
        pcb->unsent_oversize = 0;
 801a8b2:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801a8b6:	e65a      	b.n	801a56e <tcp_receive+0x21e>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801a8b8:	8b60      	ldrh	r0, [r4, #26]
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801a8ba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801a8bc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801a8c0:	bf14      	ite	ne
 801a8c2:	2001      	movne	r0, #1
 801a8c4:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801a8c6:	fb13 f300 	smulbb	r3, r3, r0
 801a8ca:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 801a8cc:	428b      	cmp	r3, r1
 801a8ce:	bf94      	ite	ls
 801a8d0:	18d1      	addls	r1, r2, r3
 801a8d2:	1851      	addhi	r1, r2, r1
 801a8d4:	b289      	uxth	r1, r1
 801a8d6:	428a      	cmp	r2, r1
 801a8d8:	f200 80d0 	bhi.w	801aa7c <tcp_receive+0x72c>
 801a8dc:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
 801a8e0:	e62c      	b.n	801a53c <tcp_receive+0x1ec>
          if ((pcb->unsent == NULL) ||
 801a8e2:	b148      	cbz	r0, 801a8f8 <tcp_receive+0x5a8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801a8e4:	68c3      	ldr	r3, [r0, #12]
 801a8e6:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801a8e8:	6858      	ldr	r0, [r3, #4]
 801a8ea:	f7fb fe83 	bl	80165f4 <lwip_htonl>
 801a8ee:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801a8f0:	2800      	cmp	r0, #0
 801a8f2:	f73f af40 	bgt.w	801a776 <tcp_receive+0x426>
 801a8f6:	8b61      	ldrh	r1, [r4, #26]
            tcp_clear_flags(pcb, TF_RTO);
 801a8f8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 801a8fc:	4f10      	ldr	r7, [pc, #64]	; (801a940 <tcp_receive+0x5f0>)
 801a8fe:	6833      	ldr	r3, [r6, #0]
 801a900:	8361      	strh	r1, [r4, #26]
 801a902:	8839      	ldrh	r1, [r7, #0]
 801a904:	e670      	b.n	801a5e8 <tcp_receive+0x298>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a906:	4b0a      	ldr	r3, [pc, #40]	; (801a930 <tcp_receive+0x5e0>)
 801a908:	f240 5297 	movw	r2, #1431	; 0x597
 801a90c:	490d      	ldr	r1, [pc, #52]	; (801a944 <tcp_receive+0x5f4>)
 801a90e:	480a      	ldr	r0, [pc, #40]	; (801a938 <tcp_receive+0x5e8>)
 801a910:	f007 fdd8 	bl	80224c4 <iprintf>
 801a914:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a918:	891b      	ldrh	r3, [r3, #8]
 801a91a:	e749      	b.n	801a7b0 <tcp_receive+0x460>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801a91c:	4b04      	ldr	r3, [pc, #16]	; (801a930 <tcp_receive+0x5e0>)
 801a91e:	f240 5295 	movw	r2, #1429	; 0x595
 801a922:	4909      	ldr	r1, [pc, #36]	; (801a948 <tcp_receive+0x5f8>)
 801a924:	4804      	ldr	r0, [pc, #16]	; (801a938 <tcp_receive+0x5e8>)
 801a926:	f007 fdcd 	bl	80224c4 <iprintf>
 801a92a:	e739      	b.n	801a7a0 <tcp_receive+0x450>
 801a92c:	2001a9f8 	.word	0x2001a9f8
 801a930:	08040484 	.word	0x08040484
 801a934:	080405d4 	.word	0x080405d4
 801a938:	08028d24 	.word	0x08028d24
 801a93c:	0804056c 	.word	0x0804056c
 801a940:	2001aa2a 	.word	0x2001aa2a
 801a944:	080405c4 	.word	0x080405c4
 801a948:	080405b4 	.word	0x080405b4
              pcb->ooseq = pcb->ooseq->next;
 801a94c:	6803      	ldr	r3, [r0, #0]
 801a94e:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801a950:	f7fe fac8 	bl	8018ee4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801a954:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801a956:	2800      	cmp	r0, #0
 801a958:	d1f8      	bne.n	801a94c <tcp_receive+0x5fc>
 801a95a:	883a      	ldrh	r2, [r7, #0]
 801a95c:	6831      	ldr	r1, [r6, #0]
 801a95e:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a960:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801a962:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a964:	4293      	cmp	r3, r2
 801a966:	f0c0 80cf 	bcc.w	801ab08 <tcp_receive+0x7b8>
        pcb->rcv_wnd -= tcplen;
 801a96a:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801a96c:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801a96e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801a970:	f7fe fa46 	bl	8018e00 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801a974:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a978:	891a      	ldrh	r2, [r3, #8]
 801a97a:	b122      	cbz	r2, 801a986 <tcp_receive+0x636>
          recv_data = inseg.p;
 801a97c:	49b5      	ldr	r1, [pc, #724]	; (801ac54 <tcp_receive+0x904>)
          inseg.p = NULL;
 801a97e:	2200      	movs	r2, #0
          recv_data = inseg.p;
 801a980:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 801a982:	f8c9 2004 	str.w	r2, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a986:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a98a:	8998      	ldrh	r0, [r3, #12]
 801a98c:	f7fb fe2e 	bl	80165ec <lwip_htons>
 801a990:	07c5      	lsls	r5, r0, #31
 801a992:	d504      	bpl.n	801a99e <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801a994:	4ab0      	ldr	r2, [pc, #704]	; (801ac58 <tcp_receive+0x908>)
 801a996:	7813      	ldrb	r3, [r2, #0]
 801a998:	f043 0320 	orr.w	r3, r3, #32
 801a99c:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801a99e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801a9a0:	2d00      	cmp	r5, #0
 801a9a2:	d07f      	beq.n	801aaa4 <tcp_receive+0x754>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a9a4:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 801ac60 <tcp_receive+0x910>
 801a9a8:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801ac78 <tcp_receive+0x928>
 801a9ac:	4fab      	ldr	r7, [pc, #684]	; (801ac5c <tcp_receive+0x90c>)
 801a9ae:	e033      	b.n	801aa18 <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a9b0:	68eb      	ldr	r3, [r5, #12]
 801a9b2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801a9b6:	8998      	ldrh	r0, [r3, #12]
 801a9b8:	f7fb fe18 	bl	80165ec <lwip_htons>
 801a9bc:	f010 0303 	ands.w	r3, r0, #3
 801a9c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801a9c2:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a9c4:	bf18      	it	ne
 801a9c6:	2301      	movne	r3, #1
 801a9c8:	4453      	add	r3, sl
 801a9ca:	1ad3      	subs	r3, r2, r3
 801a9cc:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801a9ce:	f7fe fa17 	bl	8018e00 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801a9d2:	6869      	ldr	r1, [r5, #4]
 801a9d4:	890b      	ldrh	r3, [r1, #8]
 801a9d6:	b13b      	cbz	r3, 801a9e8 <tcp_receive+0x698>
            if (recv_data) {
 801a9d8:	4b9e      	ldr	r3, [pc, #632]	; (801ac54 <tcp_receive+0x904>)
 801a9da:	6818      	ldr	r0, [r3, #0]
 801a9dc:	2800      	cmp	r0, #0
 801a9de:	d052      	beq.n	801aa86 <tcp_receive+0x736>
              pbuf_cat(recv_data, cseg->p);
 801a9e0:	f7fd fdda 	bl	8018598 <pbuf_cat>
            cseg->p = NULL;
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a9e8:	68eb      	ldr	r3, [r5, #12]
 801a9ea:	8998      	ldrh	r0, [r3, #12]
 801a9ec:	f7fb fdfe 	bl	80165ec <lwip_htons>
 801a9f0:	07c0      	lsls	r0, r0, #31
 801a9f2:	d509      	bpl.n	801aa08 <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801a9f4:	4a98      	ldr	r2, [pc, #608]	; (801ac58 <tcp_receive+0x908>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a9f6:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801a9f8:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a9fa:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801a9fc:	f043 0320 	orr.w	r3, r3, #32
 801aa00:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801aa02:	d101      	bne.n	801aa08 <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801aa04:	2307      	movs	r3, #7
 801aa06:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801aa08:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801aa0a:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801aa0c:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801aa0e:	f7fe fa69 	bl	8018ee4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801aa12:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801aa14:	2d00      	cmp	r5, #0
 801aa16:	d045      	beq.n	801aaa4 <tcp_receive+0x754>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801aa18:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801aa1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801aa1c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801aa1e:	428b      	cmp	r3, r1
 801aa20:	d140      	bne.n	801aaa4 <tcp_receive+0x754>
          seqno = pcb->ooseq->tcphdr->seqno;
 801aa22:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801aa24:	8990      	ldrh	r0, [r2, #12]
 801aa26:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801aa2a:	f7fb fddf 	bl	80165ec <lwip_htons>
 801aa2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aa30:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801aa34:	68ea      	ldr	r2, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801aa36:	4453      	add	r3, sl
 801aa38:	bf18      	it	ne
 801aa3a:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801aa3c:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801aa40:	4418      	add	r0, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801aa42:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801aa46:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801aa48:	8990      	ldrh	r0, [r2, #12]
 801aa4a:	f7fb fdcf 	bl	80165ec <lwip_htons>
 801aa4e:	f010 0003 	ands.w	r0, r0, #3
 801aa52:	bf18      	it	ne
 801aa54:	2001      	movne	r0, #1
 801aa56:	4458      	add	r0, fp
 801aa58:	4582      	cmp	sl, r0
 801aa5a:	d2a9      	bcs.n	801a9b0 <tcp_receive+0x660>
 801aa5c:	464b      	mov	r3, r9
 801aa5e:	f240 622b 	movw	r2, #1579	; 0x62b
 801aa62:	4641      	mov	r1, r8
 801aa64:	4638      	mov	r0, r7
 801aa66:	f007 fd2d 	bl	80224c4 <iprintf>
 801aa6a:	e7a1      	b.n	801a9b0 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801aa6c:	4b7c      	ldr	r3, [pc, #496]	; (801ac60 <tcp_receive+0x910>)
 801aa6e:	f240 5294 	movw	r2, #1428	; 0x594
 801aa72:	497c      	ldr	r1, [pc, #496]	; (801ac64 <tcp_receive+0x914>)
 801aa74:	4879      	ldr	r0, [pc, #484]	; (801ac5c <tcp_receive+0x90c>)
 801aa76:	f007 fd25 	bl	80224c4 <iprintf>
 801aa7a:	e68c      	b.n	801a796 <tcp_receive+0x446>
          TCP_WND_INC(pcb->cwnd, increase);
 801aa7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa80:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801aa84:	e55a      	b.n	801a53c <tcp_receive+0x1ec>
              recv_data = cseg->p;
 801aa86:	6019      	str	r1, [r3, #0]
 801aa88:	e7ac      	b.n	801a9e4 <tcp_receive+0x694>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801aa8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801aa8e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801aa90:	1a89      	subs	r1, r1, r2
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801aa92:	4413      	add	r3, r2
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801aa94:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801aa98:	b29b      	uxth	r3, r3
 801aa9a:	429a      	cmp	r2, r3
 801aa9c:	d8ee      	bhi.n	801aa7c <tcp_receive+0x72c>
 801aa9e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801aaa2:	e54b      	b.n	801a53c <tcp_receive+0x1ec>
        tcp_ack(pcb);
 801aaa4:	8b63      	ldrh	r3, [r4, #26]
 801aaa6:	07d9      	lsls	r1, r3, #31
 801aaa8:	d50a      	bpl.n	801aac0 <tcp_receive+0x770>
 801aaaa:	f023 0301 	bic.w	r3, r3, #1
 801aaae:	f043 0302 	orr.w	r3, r3, #2
 801aab2:	8363      	strh	r3, [r4, #26]
 801aab4:	e4f4      	b.n	801a4a0 <tcp_receive+0x150>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801aab6:	486c      	ldr	r0, [pc, #432]	; (801ac68 <tcp_receive+0x918>)
 801aab8:	f7fe fa3e 	bl	8018f38 <tcp_seg_copy>
 801aabc:	6760      	str	r0, [r4, #116]	; 0x74
 801aabe:	e4b5      	b.n	801a42c <tcp_receive+0xdc>
        tcp_ack(pcb);
 801aac0:	f043 0301 	orr.w	r3, r3, #1
 801aac4:	8363      	strh	r3, [r4, #26]
 801aac6:	e4eb      	b.n	801a4a0 <tcp_receive+0x150>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801aac8:	4867      	ldr	r0, [pc, #412]	; (801ac68 <tcp_receive+0x918>)
 801aaca:	f7fe fa35 	bl	8018f38 <tcp_seg_copy>
                  if (cseg != NULL) {
 801aace:	4607      	mov	r7, r0
 801aad0:	2800      	cmp	r0, #0
 801aad2:	f43f acab 	beq.w	801a42c <tcp_receive+0xdc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801aad6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801aada:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801aade:	6851      	ldr	r1, [r2, #4]
 801aae0:	6832      	ldr	r2, [r6, #0]
 801aae2:	440b      	add	r3, r1
 801aae4:	1a9b      	subs	r3, r3, r2
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	dd07      	ble.n	801aafa <tcp_receive+0x7aa>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801aaea:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801aaec:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801aaf0:	b291      	uxth	r1, r2
 801aaf2:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801aaf6:	f7fd fcd9 	bl	80184ac <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801aafa:	4629      	mov	r1, r5
 801aafc:	4638      	mov	r0, r7
                    prev->next = cseg;
 801aafe:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801ab02:	f7ff fb35 	bl	801a170 <tcp_oos_insert_segment>
 801ab06:	e491      	b.n	801a42c <tcp_receive+0xdc>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801ab08:	4b55      	ldr	r3, [pc, #340]	; (801ac60 <tcp_receive+0x910>)
 801ab0a:	f240 6207 	movw	r2, #1543	; 0x607
 801ab0e:	4957      	ldr	r1, [pc, #348]	; (801ac6c <tcp_receive+0x91c>)
 801ab10:	4852      	ldr	r0, [pc, #328]	; (801ac5c <tcp_receive+0x90c>)
 801ab12:	f007 fcd7 	bl	80224c4 <iprintf>
 801ab16:	883a      	ldrh	r2, [r7, #0]
 801ab18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801ab1a:	e726      	b.n	801a96a <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ab1c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ab20:	8998      	ldrh	r0, [r3, #12]
 801ab22:	f7fb fd63 	bl	80165ec <lwip_htons>
 801ab26:	07c2      	lsls	r2, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801ab28:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ab2c:	d47d      	bmi.n	801ac2a <tcp_receive+0x8da>
 801ab2e:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801ab30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801ab32:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ab36:	f7fb fd59 	bl	80165ec <lwip_htons>
 801ab3a:	0785      	lsls	r5, r0, #30
            inseg.len -= 1;
 801ab3c:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ab40:	d503      	bpl.n	801ab4a <tcp_receive+0x7fa>
            inseg.len -= 1;
 801ab42:	3901      	subs	r1, #1
 801ab44:	b289      	uxth	r1, r1
 801ab46:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801ab4a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801ab4e:	f7fd fcad 	bl	80184ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801ab52:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ab56:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801ab5a:	8998      	ldrh	r0, [r3, #12]
 801ab5c:	f7fb fd46 	bl	80165ec <lwip_htons>
 801ab60:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ab64:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801ab66:	bf18      	it	ne
 801ab68:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ab6a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801ab6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801ab6e:	442b      	add	r3, r5
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ab70:	4401      	add	r1, r0
          tcplen = TCP_TCPLEN(&inseg);
 801ab72:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ab74:	441a      	add	r2, r3
          tcplen = TCP_TCPLEN(&inseg);
 801ab76:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ab78:	428a      	cmp	r2, r1
 801ab7a:	f43f ae4f 	beq.w	801a81c <tcp_receive+0x4cc>
 801ab7e:	4b38      	ldr	r3, [pc, #224]	; (801ac60 <tcp_receive+0x910>)
 801ab80:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801ab84:	493a      	ldr	r1, [pc, #232]	; (801ac70 <tcp_receive+0x920>)
 801ab86:	4835      	ldr	r0, [pc, #212]	; (801ac5c <tcp_receive+0x90c>)
 801ab88:	f007 fc9c 	bl	80224c4 <iprintf>
 801ab8c:	e646      	b.n	801a81c <tcp_receive+0x4cc>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ab8e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801ab92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ab96:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801ab98:	4413      	add	r3, r2
 801ab9a:	b29b      	uxth	r3, r3
 801ab9c:	429a      	cmp	r2, r3
 801ab9e:	bf88      	it	hi
 801aba0:	460b      	movhi	r3, r1
 801aba2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801aba6:	4620      	mov	r0, r4
 801aba8:	f001 fe42 	bl	801c830 <tcp_rexmit_fast>
      if (!found_dupack) {
 801abac:	8839      	ldrh	r1, [r7, #0]
 801abae:	6833      	ldr	r3, [r6, #0]
 801abb0:	e51a      	b.n	801a5e8 <tcp_receive+0x298>
                TCP_SEQ_GT(seqno + tcplen,
 801abb2:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	dc01      	bgt.n	801abbe <tcp_receive+0x86e>
            pcb->ooseq = next;
 801abba:	6765      	str	r5, [r4, #116]	; 0x74
 801abbc:	e6d0      	b.n	801a960 <tcp_receive+0x610>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801abbe:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801abc2:	ebac 0c0e 	sub.w	ip, ip, lr
 801abc6:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801abca:	8998      	ldrh	r0, [r3, #12]
 801abcc:	f7fb fd0e 	bl	80165ec <lwip_htons>
 801abd0:	0783      	lsls	r3, r0, #30
 801abd2:	d504      	bpl.n	801abde <tcp_receive+0x88e>
                inseg.len -= 1;
 801abd4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801abd8:	3b01      	subs	r3, #1
 801abda:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801abde:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801abe2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801abe6:	f7fd fc61 	bl	80184ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801abea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801abee:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801abf2:	8998      	ldrh	r0, [r3, #12]
 801abf4:	f7fb fcfa 	bl	80165ec <lwip_htons>
 801abf8:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801abfc:	6831      	ldr	r1, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 801abfe:	bf18      	it	ne
 801ac00:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ac02:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801ac04:	eb08 0200 	add.w	r2, r8, r0
 801ac08:	b292      	uxth	r2, r2
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ac0a:	1850      	adds	r0, r2, r1
              tcplen = TCP_TCPLEN(&inseg);
 801ac0c:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ac0e:	6859      	ldr	r1, [r3, #4]
 801ac10:	4288      	cmp	r0, r1
 801ac12:	d0d2      	beq.n	801abba <tcp_receive+0x86a>
 801ac14:	4b12      	ldr	r3, [pc, #72]	; (801ac60 <tcp_receive+0x910>)
 801ac16:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801ac1a:	4916      	ldr	r1, [pc, #88]	; (801ac74 <tcp_receive+0x924>)
 801ac1c:	480f      	ldr	r0, [pc, #60]	; (801ac5c <tcp_receive+0x90c>)
 801ac1e:	f007 fc51 	bl	80224c4 <iprintf>
 801ac22:	883a      	ldrh	r2, [r7, #0]
 801ac24:	6831      	ldr	r1, [r6, #0]
 801ac26:	4411      	add	r1, r2
 801ac28:	e7c7      	b.n	801abba <tcp_receive+0x86a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801ac2a:	899d      	ldrh	r5, [r3, #12]
 801ac2c:	4628      	mov	r0, r5
 801ac2e:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801ac32:	f7fb fcdb 	bl	80165ec <lwip_htons>
 801ac36:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801ac3a:	f7fb fcd7 	bl	80165ec <lwip_htons>
 801ac3e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ac42:	ea45 0300 	orr.w	r3, r5, r0
 801ac46:	b298      	uxth	r0, r3
 801ac48:	8193      	strh	r3, [r2, #12]
 801ac4a:	e771      	b.n	801ab30 <tcp_receive+0x7e0>
                    pcb->ooseq = cseg;
 801ac4c:	6760      	str	r0, [r4, #116]	; 0x74
                  tcp_oos_insert_segment(cseg, next);
 801ac4e:	f7ff bbea 	b.w	801a426 <tcp_receive+0xd6>
 801ac52:	bf00      	nop
 801ac54:	2001aa0c 	.word	0x2001aa0c
 801ac58:	2001aa10 	.word	0x2001aa10
 801ac5c:	08028d24 	.word	0x08028d24
 801ac60:	08040484 	.word	0x08040484
 801ac64:	080405a4 	.word	0x080405a4
 801ac68:	2001a9f8 	.word	0x2001a9f8
 801ac6c:	08040648 	.word	0x08040648
 801ac70:	080405d4 	.word	0x080405d4
 801ac74:	0804060c 	.word	0x0804060c
 801ac78:	08040668 	.word	0x08040668
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801ac7c:	682b      	ldr	r3, [r5, #0]
 801ac7e:	68db      	ldr	r3, [r3, #12]
 801ac80:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801ac84:	4640      	mov	r0, r8
 801ac86:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801ac8a:	f7fb fcaf 	bl	80165ec <lwip_htons>
 801ac8e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801ac92:	f7fb fcab 	bl	80165ec <lwip_htons>
 801ac96:	682a      	ldr	r2, [r5, #0]
 801ac98:	ea48 0800 	orr.w	r8, r8, r0
 801ac9c:	68d3      	ldr	r3, [r2, #12]
 801ac9e:	f8a3 800c 	strh.w	r8, [r3, #12]
 801aca2:	e539      	b.n	801a718 <tcp_receive+0x3c8>
 801aca4:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801acac <tcp_receive+0x95c>
 801aca8:	e5a6      	b.n	801a7f8 <tcp_receive+0x4a8>
 801acaa:	bf00      	nop
 801acac:	2001a9f8 	.word	0x2001a9f8

0801acb0 <tcp_input>:
{
 801acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801acb4:	4604      	mov	r4, r0
{
 801acb6:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801acb8:	2800      	cmp	r0, #0
 801acba:	f000 80fd 	beq.w	801aeb8 <tcp_input+0x208>
  TCP_STATS_INC(tcp.recv);
 801acbe:	4d82      	ldr	r5, [pc, #520]	; (801aec8 <tcp_input+0x218>)
  if (p->len < TCP_HLEN) {
 801acc0:	8962      	ldrh	r2, [r4, #10]
  TCP_STATS_INC(tcp.recv);
 801acc2:	f8b5 3092 	ldrh.w	r3, [r5, #146]	; 0x92
  tcphdr = (struct tcp_hdr *)p->payload;
 801acc6:	6861      	ldr	r1, [r4, #4]
  if (p->len < TCP_HLEN) {
 801acc8:	2a13      	cmp	r2, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801acca:	4f80      	ldr	r7, [pc, #512]	; (801aecc <tcp_input+0x21c>)
  TCP_STATS_INC(tcp.recv);
 801accc:	f103 0301 	add.w	r3, r3, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 801acd0:	6039      	str	r1, [r7, #0]
  TCP_STATS_INC(tcp.recv);
 801acd2:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
  if (p->len < TCP_HLEN) {
 801acd6:	d80f      	bhi.n	801acf8 <tcp_input+0x48>
      TCP_STATS_INC(tcp.lenerr);
 801acd8:	f8b5 309a 	ldrh.w	r3, [r5, #154]	; 0x9a
 801acdc:	3301      	adds	r3, #1
 801acde:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 801ace2:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
  pbuf_free(p);
 801ace6:	4620      	mov	r0, r4
  TCP_STATS_INC(tcp.drop);
 801ace8:	3301      	adds	r3, #1
 801acea:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
}
 801acee:	b007      	add	sp, #28
 801acf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801acf4:	f7fd bace 	b.w	8018294 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801acf8:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 801aef8 <tcp_input+0x248>
 801acfc:	f8d8 1000 	ldr.w	r1, [r8]
 801ad00:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801ad04:	f005 f9b8 	bl	8020078 <ip4_addr_isbroadcast_u32>
 801ad08:	b9b8      	cbnz	r0, 801ad3a <tcp_input+0x8a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ad0a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801ad0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ad12:	2be0      	cmp	r3, #224	; 0xe0
 801ad14:	d011      	beq.n	801ad3a <tcp_input+0x8a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801ad16:	f108 0014 	add.w	r0, r8, #20
 801ad1a:	8922      	ldrh	r2, [r4, #8]
 801ad1c:	2106      	movs	r1, #6
 801ad1e:	f108 0310 	add.w	r3, r8, #16
 801ad22:	9000      	str	r0, [sp, #0]
 801ad24:	4620      	mov	r0, r4
 801ad26:	f7fc fa13 	bl	8017150 <ip_chksum_pseudo>
    if (chksum != 0) {
 801ad2a:	4606      	mov	r6, r0
 801ad2c:	b158      	cbz	r0, 801ad46 <tcp_input+0x96>
      TCP_STATS_INC(tcp.chkerr);
 801ad2e:	f8b5 3098 	ldrh.w	r3, [r5, #152]	; 0x98
 801ad32:	3301      	adds	r3, #1
 801ad34:	f8a5 3098 	strh.w	r3, [r5, #152]	; 0x98
      goto dropped;
 801ad38:	e7d3      	b.n	801ace2 <tcp_input+0x32>
    TCP_STATS_INC(tcp.proterr);
 801ad3a:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 801ad3e:	3301      	adds	r3, #1
 801ad40:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
    goto dropped;
 801ad44:	e7cd      	b.n	801ace2 <tcp_input+0x32>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	8998      	ldrh	r0, [r3, #12]
 801ad4a:	f7fb fc4f 	bl	80165ec <lwip_htons>
 801ad4e:	0a80      	lsrs	r0, r0, #10
 801ad50:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ad54:	2913      	cmp	r1, #19
 801ad56:	d9bf      	bls.n	801acd8 <tcp_input+0x28>
 801ad58:	8923      	ldrh	r3, [r4, #8]
 801ad5a:	b28a      	uxth	r2, r1
 801ad5c:	428b      	cmp	r3, r1
 801ad5e:	d3bb      	bcc.n	801acd8 <tcp_input+0x28>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ad60:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 801ad64:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ad66:	f8df 9194 	ldr.w	r9, [pc, #404]	; 801aefc <tcp_input+0x24c>
  tcphdr_opt2 = NULL;
 801ad6a:	f8df a194 	ldr.w	sl, [pc, #404]	; 801af00 <tcp_input+0x250>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ad6e:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 801ad70:	4290      	cmp	r0, r2
  tcphdr_opt2 = NULL;
 801ad72:	f8ca 6000 	str.w	r6, [sl]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ad76:	f8a9 3000 	strh.w	r3, [r9]
  if (p->len >= hdrlen_bytes) {
 801ad7a:	f080 81b6 	bcs.w	801b0ea <tcp_input+0x43a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ad7e:	6823      	ldr	r3, [r4, #0]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	f000 838f 	beq.w	801b4a4 <tcp_input+0x7f4>
    pbuf_remove_header(p, TCP_HLEN);
 801ad86:	2114      	movs	r1, #20
 801ad88:	4620      	mov	r0, r4
 801ad8a:	f7fd fa47 	bl	801821c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 801ad8e:	8966      	ldrh	r6, [r4, #10]
 801ad90:	4b4f      	ldr	r3, [pc, #316]	; (801aed0 <tcp_input+0x220>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801ad92:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ad94:	f8b9 9000 	ldrh.w	r9, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ad98:	4631      	mov	r1, r6
    tcphdr_opt1len = p->len;
 801ad9a:	801e      	strh	r6, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ad9c:	f7fd fa3e 	bl	801821c <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ada0:	eba9 0b06 	sub.w	fp, r9, r6
    if (opt2len > p->next->len) {
 801ada4:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ada6:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801adaa:	8943      	ldrh	r3, [r0, #10]
 801adac:	455b      	cmp	r3, fp
 801adae:	d393      	bcc.n	801acd8 <tcp_input+0x28>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801adb0:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801adb2:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801adb4:	f8ca 3000 	str.w	r3, [sl]
    pbuf_remove_header(p->next, opt2len);
 801adb8:	f7fd fa30 	bl	801821c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801adbc:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801adbe:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801adc0:	4433      	add	r3, r6
 801adc2:	eba3 0309 	sub.w	r3, r3, r9
 801adc6:	b29b      	uxth	r3, r3
 801adc8:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801adca:	2a00      	cmp	r2, #0
 801adcc:	f040 8371 	bne.w	801b4b2 <tcp_input+0x802>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801add0:	6822      	ldr	r2, [r4, #0]
 801add2:	8912      	ldrh	r2, [r2, #8]
 801add4:	429a      	cmp	r2, r3
 801add6:	d005      	beq.n	801ade4 <tcp_input+0x134>
 801add8:	4b3e      	ldr	r3, [pc, #248]	; (801aed4 <tcp_input+0x224>)
 801adda:	22e0      	movs	r2, #224	; 0xe0
 801addc:	493e      	ldr	r1, [pc, #248]	; (801aed8 <tcp_input+0x228>)
 801adde:	483f      	ldr	r0, [pc, #252]	; (801aedc <tcp_input+0x22c>)
 801ade0:	f007 fb70 	bl	80224c4 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ade4:	683e      	ldr	r6, [r7, #0]
 801ade6:	8830      	ldrh	r0, [r6, #0]
 801ade8:	f7fb fc00 	bl	80165ec <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801adec:	f8d7 9000 	ldr.w	r9, [r7]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801adf0:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801adf2:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 801adf6:	f7fb fbf9 	bl	80165ec <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801adfa:	683e      	ldr	r6, [r7, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801adfc:	f8a9 0002 	strh.w	r0, [r9, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ae00:	6870      	ldr	r0, [r6, #4]
 801ae02:	f7fb fbf7 	bl	80165f4 <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ae06:	f8d7 9000 	ldr.w	r9, [r7]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ae0a:	4b35      	ldr	r3, [pc, #212]	; (801aee0 <tcp_input+0x230>)
 801ae0c:	6070      	str	r0, [r6, #4]
 801ae0e:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ae10:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801ae14:	f7fb fbee 	bl	80165f4 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ae18:	683e      	ldr	r6, [r7, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ae1a:	4b32      	ldr	r3, [pc, #200]	; (801aee4 <tcp_input+0x234>)
 801ae1c:	f8c9 0008 	str.w	r0, [r9, #8]
 801ae20:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ae22:	89f0      	ldrh	r0, [r6, #14]
 801ae24:	f7fb fbe2 	bl	80165ec <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801ae28:	683b      	ldr	r3, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ae2a:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 801ae2c:	8998      	ldrh	r0, [r3, #12]
 801ae2e:	f7fb fbdd 	bl	80165ec <lwip_htons>
 801ae32:	492d      	ldr	r1, [pc, #180]	; (801aee8 <tcp_input+0x238>)
 801ae34:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 801ae38:	0786      	lsls	r6, r0, #30
  tcplen = p->tot_len;
 801ae3a:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801ae3c:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801ae3e:	f000 8150 	beq.w	801b0e2 <tcp_input+0x432>
    tcplen++;
 801ae42:	1c5a      	adds	r2, r3, #1
 801ae44:	4929      	ldr	r1, [pc, #164]	; (801aeec <tcp_input+0x23c>)
 801ae46:	b292      	uxth	r2, r2
 801ae48:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801ae4a:	4293      	cmp	r3, r2
    tcplen++;
 801ae4c:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801ae4e:	f63f af43 	bhi.w	801acd8 <tcp_input+0x28>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae52:	4b27      	ldr	r3, [pc, #156]	; (801aef0 <tcp_input+0x240>)
 801ae54:	681e      	ldr	r6, [r3, #0]
 801ae56:	2e00      	cmp	r6, #0
 801ae58:	f000 80f6 	beq.w	801b048 <tcp_input+0x398>
  prev = NULL;
 801ae5c:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ae60:	4b1c      	ldr	r3, [pc, #112]	; (801aed4 <tcp_input+0x224>)
 801ae62:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 801af04 <tcp_input+0x254>
 801ae66:	f8df a074 	ldr.w	sl, [pc, #116]	; 801aedc <tcp_input+0x22c>
 801ae6a:	e01a      	b.n	801aea2 <tcp_input+0x1f2>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ae6c:	2a0a      	cmp	r2, #10
 801ae6e:	f000 80e3 	beq.w	801b038 <tcp_input+0x388>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ae72:	2a01      	cmp	r2, #1
 801ae74:	f000 80d9 	beq.w	801b02a <tcp_input+0x37a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae78:	7a31      	ldrb	r1, [r6, #8]
 801ae7a:	b139      	cbz	r1, 801ae8c <tcp_input+0x1dc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ae7c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ae80:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801ae84:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae86:	b2d2      	uxtb	r2, r2
 801ae88:	4291      	cmp	r1, r2
 801ae8a:	d104      	bne.n	801ae96 <tcp_input+0x1e6>
    if (pcb->remote_port == tcphdr->src &&
 801ae8c:	683a      	ldr	r2, [r7, #0]
 801ae8e:	8b30      	ldrh	r0, [r6, #24]
 801ae90:	8811      	ldrh	r1, [r2, #0]
 801ae92:	4288      	cmp	r0, r1
 801ae94:	d038      	beq.n	801af08 <tcp_input+0x258>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae96:	68f2      	ldr	r2, [r6, #12]
 801ae98:	46b1      	mov	r9, r6
 801ae9a:	2a00      	cmp	r2, #0
 801ae9c:	f000 80d4 	beq.w	801b048 <tcp_input+0x398>
 801aea0:	4616      	mov	r6, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801aea2:	7d32      	ldrb	r2, [r6, #20]
 801aea4:	2a00      	cmp	r2, #0
 801aea6:	d1e1      	bne.n	801ae6c <tcp_input+0x1bc>
 801aea8:	22fb      	movs	r2, #251	; 0xfb
 801aeaa:	4659      	mov	r1, fp
 801aeac:	4650      	mov	r0, sl
 801aeae:	f007 fb09 	bl	80224c4 <iprintf>
 801aeb2:	7d32      	ldrb	r2, [r6, #20]
 801aeb4:	4b07      	ldr	r3, [pc, #28]	; (801aed4 <tcp_input+0x224>)
 801aeb6:	e7d9      	b.n	801ae6c <tcp_input+0x1bc>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801aeb8:	4b06      	ldr	r3, [pc, #24]	; (801aed4 <tcp_input+0x224>)
 801aeba:	2283      	movs	r2, #131	; 0x83
 801aebc:	490d      	ldr	r1, [pc, #52]	; (801aef4 <tcp_input+0x244>)
 801aebe:	4807      	ldr	r0, [pc, #28]	; (801aedc <tcp_input+0x22c>)
 801aec0:	f007 fb00 	bl	80224c4 <iprintf>
 801aec4:	e6fb      	b.n	801acbe <tcp_input+0xe>
 801aec6:	bf00      	nop
 801aec8:	2002e08c 	.word	0x2002e08c
 801aecc:	2001aa1c 	.word	0x2001aa1c
 801aed0:	2001aa20 	.word	0x2001aa20
 801aed4:	08040484 	.word	0x08040484
 801aed8:	080406c4 	.word	0x080406c4
 801aedc:	08028d24 	.word	0x08028d24
 801aee0:	2001aa14 	.word	0x2001aa14
 801aee4:	2001a9f0 	.word	0x2001a9f0
 801aee8:	2001a9f4 	.word	0x2001a9f4
 801aeec:	2001aa2a 	.word	0x2001aa2a
 801aef0:	2002e198 	.word	0x2002e198
 801aef4:	08040690 	.word	0x08040690
 801aef8:	2001f164 	.word	0x2001f164
 801aefc:	2001aa28 	.word	0x2001aa28
 801af00:	2001aa24 	.word	0x2001aa24
 801af04:	080406e4 	.word	0x080406e4
    if (pcb->remote_port == tcphdr->src &&
 801af08:	8852      	ldrh	r2, [r2, #2]
 801af0a:	8af1      	ldrh	r1, [r6, #22]
 801af0c:	4291      	cmp	r1, r2
 801af0e:	d1c2      	bne.n	801ae96 <tcp_input+0x1e6>
        pcb->local_port == tcphdr->dest &&
 801af10:	6871      	ldr	r1, [r6, #4]
 801af12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801af16:	4291      	cmp	r1, r2
 801af18:	d1bd      	bne.n	801ae96 <tcp_input+0x1e6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801af1a:	6831      	ldr	r1, [r6, #0]
 801af1c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801af20:	4291      	cmp	r1, r2
 801af22:	d1b8      	bne.n	801ae96 <tcp_input+0x1e6>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801af24:	68f3      	ldr	r3, [r6, #12]
 801af26:	42b3      	cmp	r3, r6
 801af28:	d076      	beq.n	801b018 <tcp_input+0x368>
      if (prev != NULL) {
 801af2a:	f1b9 0f00 	cmp.w	r9, #0
 801af2e:	f000 8442 	beq.w	801b7b6 <tcp_input+0xb06>
        pcb->next = tcp_active_pcbs;
 801af32:	4979      	ldr	r1, [pc, #484]	; (801b118 <tcp_input+0x468>)
        prev->next = pcb->next;
 801af34:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 801af38:	680a      	ldr	r2, [r1, #0]
        tcp_active_pcbs = pcb;
 801af3a:	600e      	str	r6, [r1, #0]
 801af3c:	4613      	mov	r3, r2
        pcb->next = tcp_active_pcbs;
 801af3e:	60f2      	str	r2, [r6, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801af40:	42b3      	cmp	r3, r6
 801af42:	f000 843f 	beq.w	801b7c4 <tcp_input+0xb14>
    inseg.next = NULL;
 801af46:	f8df 8200 	ldr.w	r8, [pc, #512]	; 801b148 <tcp_input+0x498>
 801af4a:	2300      	movs	r3, #0
    inseg.tcphdr = tcphdr;
 801af4c:	683a      	ldr	r2, [r7, #0]
    inseg.len = p->tot_len;
 801af4e:	8921      	ldrh	r1, [r4, #8]
    inseg.tcphdr = tcphdr;
 801af50:	f8c8 200c 	str.w	r2, [r8, #12]
    if (flags & TCP_PSH) {
 801af54:	4a71      	ldr	r2, [pc, #452]	; (801b11c <tcp_input+0x46c>)
    recv_data = NULL;
 801af56:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 801b14c <tcp_input+0x49c>
    recv_flags = 0;
 801af5a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 801b150 <tcp_input+0x4a0>
    recv_acked = 0;
 801af5e:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 801b154 <tcp_input+0x4a4>
    if (flags & TCP_PSH) {
 801af62:	7812      	ldrb	r2, [r2, #0]
    inseg.next = NULL;
 801af64:	f8c8 3000 	str.w	r3, [r8]
    recv_data = NULL;
 801af68:	f8c9 3000 	str.w	r3, [r9]
    recv_flags = 0;
 801af6c:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801af70:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801af74:	0713      	lsls	r3, r2, #28
    inseg.p = p;
 801af76:	f8c8 4004 	str.w	r4, [r8, #4]
    inseg.len = p->tot_len;
 801af7a:	f8a8 1008 	strh.w	r1, [r8, #8]
    if (flags & TCP_PSH) {
 801af7e:	d503      	bpl.n	801af88 <tcp_input+0x2d8>
      p->flags |= PBUF_FLAG_PUSH;
 801af80:	7b63      	ldrb	r3, [r4, #13]
 801af82:	f043 0301 	orr.w	r3, r3, #1
 801af86:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 801af88:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801af8a:	b173      	cbz	r3, 801afaa <tcp_input+0x2fa>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801af8c:	4630      	mov	r0, r6
 801af8e:	f7fe fe8d 	bl	8019cac <tcp_process_refused_data>
 801af92:	300d      	adds	r0, #13
 801af94:	f000 8295 	beq.w	801b4c2 <tcp_input+0x812>
 801af98:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801af9a:	b123      	cbz	r3, 801afa6 <tcp_input+0x2f6>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801af9c:	9b05      	ldr	r3, [sp, #20]
 801af9e:	881b      	ldrh	r3, [r3, #0]
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	f040 828e 	bne.w	801b4c2 <tcp_input+0x812>
 801afa6:	4b5d      	ldr	r3, [pc, #372]	; (801b11c <tcp_input+0x46c>)
 801afa8:	781a      	ldrb	r2, [r3, #0]
    tcp_input_pcb = pcb;
 801afaa:	4c5d      	ldr	r4, [pc, #372]	; (801b120 <tcp_input+0x470>)
  if (flags & TCP_RST) {
 801afac:	0753      	lsls	r3, r2, #29
    tcp_input_pcb = pcb;
 801afae:	6026      	str	r6, [r4, #0]
  if (flags & TCP_RST) {
 801afb0:	f140 8166 	bpl.w	801b280 <tcp_input+0x5d0>
    if (pcb->state == SYN_SENT) {
 801afb4:	7d31      	ldrb	r1, [r6, #20]
 801afb6:	2902      	cmp	r1, #2
 801afb8:	f000 8362 	beq.w	801b680 <tcp_input+0x9d0>
      if (seqno == pcb->rcv_nxt) {
 801afbc:	4b59      	ldr	r3, [pc, #356]	; (801b124 <tcp_input+0x474>)
 801afbe:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	429a      	cmp	r2, r3
 801afc4:	f000 845f 	beq.w	801b886 <tcp_input+0xbd6>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801afc8:	1a9b      	subs	r3, r3, r2
 801afca:	d404      	bmi.n	801afd6 <tcp_input+0x326>
 801afcc:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 801afce:	1a9b      	subs	r3, r3, r2
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	f340 8350 	ble.w	801b676 <tcp_input+0x9c6>
      if (recv_flags & TF_RESET) {
 801afd6:	f89a 3000 	ldrb.w	r3, [sl]
 801afda:	0719      	lsls	r1, r3, #28
 801afdc:	f140 827c 	bpl.w	801b4d8 <tcp_input+0x828>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801afe0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 801afe4:	b11b      	cbz	r3, 801afee <tcp_input+0x33e>
 801afe6:	f06f 010d 	mvn.w	r1, #13
 801afea:	6930      	ldr	r0, [r6, #16]
 801afec:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801afee:	484a      	ldr	r0, [pc, #296]	; (801b118 <tcp_input+0x468>)
 801aff0:	4631      	mov	r1, r6
 801aff2:	f7fe fb03 	bl	80195fc <tcp_pcb_remove>
        tcp_free(pcb);
 801aff6:	4630      	mov	r0, r6
 801aff8:	f7fd fe10 	bl	8018c1c <tcp_free>
    tcp_input_pcb = NULL;
 801affc:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801affe:	f8d8 0004 	ldr.w	r0, [r8, #4]
    tcp_input_pcb = NULL;
 801b002:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801b004:	f8c9 5000 	str.w	r5, [r9]
    if (inseg.p != NULL) {
 801b008:	b118      	cbz	r0, 801b012 <tcp_input+0x362>
      pbuf_free(inseg.p);
 801b00a:	f7fd f943 	bl	8018294 <pbuf_free>
      inseg.p = NULL;
 801b00e:	f8c8 5004 	str.w	r5, [r8, #4]
}
 801b012:	b007      	add	sp, #28
 801b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b018:	4b43      	ldr	r3, [pc, #268]	; (801b128 <tcp_input+0x478>)
 801b01a:	f240 120d 	movw	r2, #269	; 0x10d
 801b01e:	4943      	ldr	r1, [pc, #268]	; (801b12c <tcp_input+0x47c>)
 801b020:	4843      	ldr	r0, [pc, #268]	; (801b130 <tcp_input+0x480>)
 801b022:	f007 fa4f 	bl	80224c4 <iprintf>
 801b026:	68f3      	ldr	r3, [r6, #12]
 801b028:	e77f      	b.n	801af2a <tcp_input+0x27a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801b02a:	22fd      	movs	r2, #253	; 0xfd
 801b02c:	4941      	ldr	r1, [pc, #260]	; (801b134 <tcp_input+0x484>)
 801b02e:	4650      	mov	r0, sl
 801b030:	f007 fa48 	bl	80224c4 <iprintf>
 801b034:	4b3c      	ldr	r3, [pc, #240]	; (801b128 <tcp_input+0x478>)
 801b036:	e71f      	b.n	801ae78 <tcp_input+0x1c8>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801b038:	22fc      	movs	r2, #252	; 0xfc
 801b03a:	493f      	ldr	r1, [pc, #252]	; (801b138 <tcp_input+0x488>)
 801b03c:	4650      	mov	r0, sl
 801b03e:	f007 fa41 	bl	80224c4 <iprintf>
 801b042:	7d32      	ldrb	r2, [r6, #20]
 801b044:	4b38      	ldr	r3, [pc, #224]	; (801b128 <tcp_input+0x478>)
 801b046:	e714      	b.n	801ae72 <tcp_input+0x1c2>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b048:	4b3c      	ldr	r3, [pc, #240]	; (801b13c <tcp_input+0x48c>)
 801b04a:	681e      	ldr	r6, [r3, #0]
 801b04c:	2e00      	cmp	r6, #0
 801b04e:	d052      	beq.n	801b0f6 <tcp_input+0x446>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b050:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801b128 <tcp_input+0x478>
 801b054:	f8df a100 	ldr.w	sl, [pc, #256]	; 801b158 <tcp_input+0x4a8>
 801b058:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801b130 <tcp_input+0x480>
 801b05c:	e002      	b.n	801b064 <tcp_input+0x3b4>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b05e:	68f6      	ldr	r6, [r6, #12]
 801b060:	2e00      	cmp	r6, #0
 801b062:	d048      	beq.n	801b0f6 <tcp_input+0x446>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b064:	7d30      	ldrb	r0, [r6, #20]
 801b066:	465b      	mov	r3, fp
 801b068:	f240 121f 	movw	r2, #287	; 0x11f
 801b06c:	4651      	mov	r1, sl
 801b06e:	280a      	cmp	r0, #10
 801b070:	4648      	mov	r0, r9
 801b072:	d001      	beq.n	801b078 <tcp_input+0x3c8>
 801b074:	f007 fa26 	bl	80224c4 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b078:	7a32      	ldrb	r2, [r6, #8]
 801b07a:	b13a      	cbz	r2, 801b08c <tcp_input+0x3dc>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b07c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b084:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b086:	b2db      	uxtb	r3, r3
 801b088:	429a      	cmp	r2, r3
 801b08a:	d1e8      	bne.n	801b05e <tcp_input+0x3ae>
      if (pcb->remote_port == tcphdr->src &&
 801b08c:	683b      	ldr	r3, [r7, #0]
 801b08e:	8b31      	ldrh	r1, [r6, #24]
 801b090:	881a      	ldrh	r2, [r3, #0]
 801b092:	4291      	cmp	r1, r2
 801b094:	d1e3      	bne.n	801b05e <tcp_input+0x3ae>
          pcb->local_port == tcphdr->dest &&
 801b096:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 801b098:	8af3      	ldrh	r3, [r6, #22]
 801b09a:	4293      	cmp	r3, r2
 801b09c:	d1df      	bne.n	801b05e <tcp_input+0x3ae>
          pcb->local_port == tcphdr->dest &&
 801b09e:	6870      	ldr	r0, [r6, #4]
 801b0a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b0a4:	4290      	cmp	r0, r2
 801b0a6:	d1da      	bne.n	801b05e <tcp_input+0x3ae>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b0a8:	6830      	ldr	r0, [r6, #0]
 801b0aa:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801b0ae:	4290      	cmp	r0, r2
 801b0b0:	d1d5      	bne.n	801b05e <tcp_input+0x3ae>
  if (flags & TCP_RST) {
 801b0b2:	4a1a      	ldr	r2, [pc, #104]	; (801b11c <tcp_input+0x46c>)
 801b0b4:	7812      	ldrb	r2, [r2, #0]
 801b0b6:	0750      	lsls	r0, r2, #29
 801b0b8:	d411      	bmi.n	801b0de <tcp_input+0x42e>
  if (flags & TCP_SYN) {
 801b0ba:	0797      	lsls	r7, r2, #30
 801b0bc:	f140 838e 	bpl.w	801b7dc <tcp_input+0xb2c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801b0c0:	4a18      	ldr	r2, [pc, #96]	; (801b124 <tcp_input+0x474>)
 801b0c2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801b0c4:	6812      	ldr	r2, [r2, #0]
 801b0c6:	1a10      	subs	r0, r2, r0
 801b0c8:	d404      	bmi.n	801b0d4 <tcp_input+0x424>
 801b0ca:	8d35      	ldrh	r5, [r6, #40]	; 0x28
 801b0cc:	1b40      	subs	r0, r0, r5
 801b0ce:	2800      	cmp	r0, #0
 801b0d0:	f340 83e4 	ble.w	801b89c <tcp_input+0xbec>
  if ((tcplen > 0)) {
 801b0d4:	9b05      	ldr	r3, [sp, #20]
 801b0d6:	881b      	ldrh	r3, [r3, #0]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	f040 83e6 	bne.w	801b8aa <tcp_input+0xbfa>
        pbuf_free(p);
 801b0de:	4620      	mov	r0, r4
 801b0e0:	e605      	b.n	801acee <tcp_input+0x3e>
  tcplen = p->tot_len;
 801b0e2:	4a17      	ldr	r2, [pc, #92]	; (801b140 <tcp_input+0x490>)
 801b0e4:	9205      	str	r2, [sp, #20]
 801b0e6:	8013      	strh	r3, [r2, #0]
 801b0e8:	e6b3      	b.n	801ae52 <tcp_input+0x1a2>
    tcphdr_opt1len = tcphdr_optlen;
 801b0ea:	4a16      	ldr	r2, [pc, #88]	; (801b144 <tcp_input+0x494>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801b0ec:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801b0ee:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801b0f0:	f7fd f894 	bl	801821c <pbuf_remove_header>
 801b0f4:	e676      	b.n	801ade4 <tcp_input+0x134>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b0f6:	f8df a064 	ldr.w	sl, [pc, #100]	; 801b15c <tcp_input+0x4ac>
 801b0fa:	f8da e000 	ldr.w	lr, [sl]
 801b0fe:	f1be 0f00 	cmp.w	lr, #0
 801b102:	f000 8239 	beq.w	801b578 <tcp_input+0x8c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b106:	f8d8 0004 	ldr.w	r0, [r8, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b10a:	4676      	mov	r6, lr
      if (lpcb->local_port == tcphdr->dest) {
 801b10c:	6839      	ldr	r1, [r7, #0]
    prev = NULL;
 801b10e:	2200      	movs	r2, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b110:	f8d8 c014 	ldr.w	ip, [r8, #20]
 801b114:	4681      	mov	r9, r0
 801b116:	e029      	b.n	801b16c <tcp_input+0x4bc>
 801b118:	2002e198 	.word	0x2002e198
 801b11c:	2001a9f4 	.word	0x2001a9f4
 801b120:	2002e1ac 	.word	0x2002e1ac
 801b124:	2001aa14 	.word	0x2001aa14
 801b128:	08040484 	.word	0x08040484
 801b12c:	08040760 	.word	0x08040760
 801b130:	08028d24 	.word	0x08028d24
 801b134:	08040738 	.word	0x08040738
 801b138:	0804070c 	.word	0x0804070c
 801b13c:	2002e1a8 	.word	0x2002e1a8
 801b140:	2001aa2a 	.word	0x2001aa2a
 801b144:	2001aa20 	.word	0x2001aa20
 801b148:	2001a9f8 	.word	0x2001a9f8
 801b14c:	2001aa0c 	.word	0x2001aa0c
 801b150:	2001aa10 	.word	0x2001aa10
 801b154:	2001aa08 	.word	0x2001aa08
 801b158:	080407b8 	.word	0x080407b8
 801b15c:	2002e1a0 	.word	0x2002e1a0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b160:	68f3      	ldr	r3, [r6, #12]
 801b162:	4632      	mov	r2, r6
 801b164:	461e      	mov	r6, r3
 801b166:	2b00      	cmp	r3, #0
 801b168:	f000 8207 	beq.w	801b57a <tcp_input+0x8ca>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b16c:	7a30      	ldrb	r0, [r6, #8]
 801b16e:	b128      	cbz	r0, 801b17c <tcp_input+0x4cc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b170:	f899 3038 	ldrb.w	r3, [r9, #56]	; 0x38
 801b174:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b176:	b2db      	uxtb	r3, r3
 801b178:	4298      	cmp	r0, r3
 801b17a:	d1f1      	bne.n	801b160 <tcp_input+0x4b0>
      if (lpcb->local_port == tcphdr->dest) {
 801b17c:	884b      	ldrh	r3, [r1, #2]
 801b17e:	8af0      	ldrh	r0, [r6, #22]
 801b180:	4298      	cmp	r0, r3
 801b182:	d1ed      	bne.n	801b160 <tcp_input+0x4b0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b184:	6830      	ldr	r0, [r6, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b186:	b108      	cbz	r0, 801b18c <tcp_input+0x4dc>
 801b188:	4560      	cmp	r0, ip
 801b18a:	d1e9      	bne.n	801b160 <tcp_input+0x4b0>
      if (prev != NULL) {
 801b18c:	2a00      	cmp	r2, #0
 801b18e:	f000 828c 	beq.w	801b6aa <tcp_input+0x9fa>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b192:	68f0      	ldr	r0, [r6, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b194:	f8ca 6000 	str.w	r6, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b198:	60d0      	str	r0, [r2, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b19a:	f8c6 e00c 	str.w	lr, [r6, #12]
  if (flags & TCP_RST) {
 801b19e:	4aab      	ldr	r2, [pc, #684]	; (801b44c <tcp_input+0x79c>)
 801b1a0:	7812      	ldrb	r2, [r2, #0]
 801b1a2:	0750      	lsls	r0, r2, #29
 801b1a4:	d49b      	bmi.n	801b0de <tcp_input+0x42e>
  if (flags & TCP_ACK) {
 801b1a6:	f012 0910 	ands.w	r9, r2, #16
 801b1aa:	f040 8284 	bne.w	801b6b6 <tcp_input+0xa06>
  } else if (flags & TCP_SYN) {
 801b1ae:	0792      	lsls	r2, r2, #30
 801b1b0:	d595      	bpl.n	801b0de <tcp_input+0x42e>
    npcb = tcp_alloc(pcb->prio);
 801b1b2:	7d70      	ldrb	r0, [r6, #21]
 801b1b4:	f7fe fb9a 	bl	80198ec <tcp_alloc>
    if (npcb == NULL) {
 801b1b8:	4682      	mov	sl, r0
 801b1ba:	2800      	cmp	r0, #0
 801b1bc:	f000 82ea 	beq.w	801b794 <tcp_input+0xae4>
    npcb->remote_port = tcphdr->src;
 801b1c0:	683d      	ldr	r5, [r7, #0]
    npcb->state = SYN_RCVD;
 801b1c2:	f04f 0c03 	mov.w	ip, #3
    npcb->rcv_nxt = seqno + 1;
 801b1c6:	4ba2      	ldr	r3, [pc, #648]	; (801b450 <tcp_input+0x7a0>)
    npcb->remote_port = tcphdr->src;
 801b1c8:	782a      	ldrb	r2, [r5, #0]
 801b1ca:	786d      	ldrb	r5, [r5, #1]
    npcb->rcv_nxt = seqno + 1;
 801b1cc:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801b1ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    npcb->local_port = pcb->local_port;
 801b1d2:	8af5      	ldrh	r5, [r6, #22]
    npcb->rcv_nxt = seqno + 1;
 801b1d4:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801b1d6:	8302      	strh	r2, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 801b1d8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801b1da:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801b1dc:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    npcb->state = SYN_RCVD;
 801b1e0:	f880 c014 	strb.w	ip, [r0, #20]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801b1e4:	6041      	str	r1, [r0, #4]
    npcb->local_port = pcb->local_port;
 801b1e6:	82c5      	strh	r5, [r0, #22]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b1e8:	1d05      	adds	r5, r0, #4
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801b1ea:	6002      	str	r2, [r0, #0]
    iss = tcp_next_iss(npcb);
 801b1ec:	f7fe fdfc 	bl	8019de8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b1f0:	4b97      	ldr	r3, [pc, #604]	; (801b450 <tcp_input+0x7a0>)
    TCP_REG_ACTIVE(npcb);
 801b1f2:	4998      	ldr	r1, [pc, #608]	; (801b454 <tcp_input+0x7a4>)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b1f4:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 801b1f6:	6933      	ldr	r3, [r6, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b1f8:	3a01      	subs	r2, #1
    npcb->listener = pcb;
 801b1fa:	f8ca 607c 	str.w	r6, [sl, #124]	; 0x7c
    npcb->snd_wl2 = iss;
 801b1fe:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->snd_nxt = iss;
 801b202:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
    npcb->lastack = iss;
 801b206:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 801b20a:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b20e:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801b212:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b216:	7a73      	ldrb	r3, [r6, #9]
    TCP_REG_ACTIVE(npcb);
 801b218:	680a      	ldr	r2, [r1, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b21a:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 801b21e:	f8c1 a000 	str.w	sl, [r1]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b222:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 801b226:	7a33      	ldrb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 801b228:	f8ca 200c 	str.w	r2, [sl, #12]
    npcb->netif_idx = pcb->netif_idx;
 801b22c:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 801b230:	f001 feec 	bl	801d00c <tcp_timer_needed>
 801b234:	2201      	movs	r2, #1
 801b236:	4b88      	ldr	r3, [pc, #544]	; (801b458 <tcp_input+0x7a8>)
    tcp_parseopt(npcb);
 801b238:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 801b23a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801b23c:	f7fe feea 	bl	801a014 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801b240:	683b      	ldr	r3, [r7, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b242:	4628      	mov	r0, r5
 801b244:	9505      	str	r5, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801b246:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b248:	f8ba 6032 	ldrh.w	r6, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801b24c:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801b250:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b254:	f004 fce4 	bl	801fc20 <ip4_route>
 801b258:	9a05      	ldr	r2, [sp, #20]
 801b25a:	4601      	mov	r1, r0
 801b25c:	4630      	mov	r0, r6
 801b25e:	f7fe fddf 	bl	8019e20 <tcp_eff_send_mss_netif>
 801b262:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801b264:	2112      	movs	r1, #18
 801b266:	4650      	mov	r0, sl
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b268:	f8aa 3032 	strh.w	r3, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801b26c:	f001 f974 	bl	801c558 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801b270:	2800      	cmp	r0, #0
 801b272:	f040 82ba 	bne.w	801b7ea <tcp_input+0xb3a>
    tcp_output(npcb);
 801b276:	4650      	mov	r0, sl
 801b278:	f001 fb94 	bl	801c9a4 <tcp_output>
        pbuf_free(p);
 801b27c:	4620      	mov	r0, r4
 801b27e:	e536      	b.n	801acee <tcp_input+0x3e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801b280:	0795      	lsls	r5, r2, #30
 801b282:	d504      	bpl.n	801b28e <tcp_input+0x5de>
 801b284:	7d33      	ldrb	r3, [r6, #20]
 801b286:	3b02      	subs	r3, #2
 801b288:	2b01      	cmp	r3, #1
 801b28a:	f200 81f4 	bhi.w	801b676 <tcp_input+0x9c6>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801b28e:	8b73      	ldrh	r3, [r6, #26]
 801b290:	06d8      	lsls	r0, r3, #27
 801b292:	d402      	bmi.n	801b29a <tcp_input+0x5ea>
    pcb->tmr = tcp_ticks;
 801b294:	4b71      	ldr	r3, [pc, #452]	; (801b45c <tcp_input+0x7ac>)
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	6233      	str	r3, [r6, #32]
  pcb->persist_probe = 0;
 801b29a:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 801b29c:	4630      	mov	r0, r6
  pcb->persist_probe = 0;
 801b29e:	f8a6 309a 	strh.w	r3, [r6, #154]	; 0x9a
  tcp_parseopt(pcb);
 801b2a2:	f7fe feb7 	bl	801a014 <tcp_parseopt>
  switch (pcb->state) {
 801b2a6:	7d33      	ldrb	r3, [r6, #20]
 801b2a8:	3b02      	subs	r3, #2
 801b2aa:	2b07      	cmp	r3, #7
 801b2ac:	f63f ae93 	bhi.w	801afd6 <tcp_input+0x326>
 801b2b0:	e8df f003 	tbb	[pc, r3]
 801b2b4:	8b0413a4 	.word	0x8b0413a4
 801b2b8:	344d0470 	.word	0x344d0470
      tcp_receive(pcb);
 801b2bc:	4630      	mov	r0, r6
 801b2be:	f7ff f847 	bl	801a350 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801b2c2:	f89a 3000 	ldrb.w	r3, [sl]
 801b2c6:	0699      	lsls	r1, r3, #26
 801b2c8:	f57f ae85 	bpl.w	801afd6 <tcp_input+0x326>
        tcp_ack_now(pcb);
 801b2cc:	8b73      	ldrh	r3, [r6, #26]
        pcb->state = CLOSE_WAIT;
 801b2ce:	2207      	movs	r2, #7
        tcp_ack_now(pcb);
 801b2d0:	f043 0302 	orr.w	r3, r3, #2
        pcb->state = CLOSE_WAIT;
 801b2d4:	7532      	strb	r2, [r6, #20]
        tcp_ack_now(pcb);
 801b2d6:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801b2d8:	e67d      	b.n	801afd6 <tcp_input+0x326>
      if (flags & TCP_ACK) {
 801b2da:	4b5c      	ldr	r3, [pc, #368]	; (801b44c <tcp_input+0x79c>)
 801b2dc:	781b      	ldrb	r3, [r3, #0]
 801b2de:	06da      	lsls	r2, r3, #27
 801b2e0:	f140 8228 	bpl.w	801b734 <tcp_input+0xa84>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b2e4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801b2e6:	4a5e      	ldr	r2, [pc, #376]	; (801b460 <tcp_input+0x7b0>)
 801b2e8:	43db      	mvns	r3, r3
 801b2ea:	6811      	ldr	r1, [r2, #0]
 801b2ec:	42cb      	cmn	r3, r1
 801b2ee:	d404      	bmi.n	801b2fa <tcp_input+0x64a>
 801b2f0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801b2f2:	1acb      	subs	r3, r1, r3
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	f340 8287 	ble.w	801b808 <tcp_input+0xb58>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b2fa:	9a05      	ldr	r2, [sp, #20]
 801b2fc:	4630      	mov	r0, r6
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b2fe:	683b      	ldr	r3, [r7, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b300:	8815      	ldrh	r5, [r2, #0]
 801b302:	4a53      	ldr	r2, [pc, #332]	; (801b450 <tcp_input+0x7a0>)
 801b304:	881f      	ldrh	r7, [r3, #0]
 801b306:	6812      	ldr	r2, [r2, #0]
 801b308:	9702      	str	r7, [sp, #8]
 801b30a:	442a      	add	r2, r5
 801b30c:	885b      	ldrh	r3, [r3, #2]
 801b30e:	4d55      	ldr	r5, [pc, #340]	; (801b464 <tcp_input+0x7b4>)
 801b310:	e9cd 5300 	strd	r5, r3, [sp]
 801b314:	1d2b      	adds	r3, r5, #4
 801b316:	f001 fac5 	bl	801c8a4 <tcp_rst>
    if (err != ERR_ABRT) {
 801b31a:	e65c      	b.n	801afd6 <tcp_input+0x326>
      tcp_receive(pcb);
 801b31c:	4630      	mov	r0, r6
 801b31e:	f7ff f817 	bl	801a350 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b322:	4b4a      	ldr	r3, [pc, #296]	; (801b44c <tcp_input+0x79c>)
 801b324:	781b      	ldrb	r3, [r3, #0]
 801b326:	06d8      	lsls	r0, r3, #27
 801b328:	f57f ae55 	bpl.w	801afd6 <tcp_input+0x326>
 801b32c:	4b4c      	ldr	r3, [pc, #304]	; (801b460 <tcp_input+0x7b0>)
 801b32e:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	429a      	cmp	r2, r3
 801b334:	f47f ae4f 	bne.w	801afd6 <tcp_input+0x326>
 801b338:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	f47f ae4b 	bne.w	801afd6 <tcp_input+0x326>
        recv_flags |= TF_CLOSED;
 801b340:	f89a 3000 	ldrb.w	r3, [sl]
 801b344:	f043 0310 	orr.w	r3, r3, #16
 801b348:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801b34c:	e643      	b.n	801afd6 <tcp_input+0x326>
      tcp_receive(pcb);
 801b34e:	4630      	mov	r0, r6
 801b350:	f7fe fffe 	bl	801a350 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b354:	4b3d      	ldr	r3, [pc, #244]	; (801b44c <tcp_input+0x79c>)
 801b356:	781b      	ldrb	r3, [r3, #0]
 801b358:	06dd      	lsls	r5, r3, #27
 801b35a:	f57f ae3c 	bpl.w	801afd6 <tcp_input+0x326>
 801b35e:	4b40      	ldr	r3, [pc, #256]	; (801b460 <tcp_input+0x7b0>)
 801b360:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	429a      	cmp	r2, r3
 801b366:	f47f ae36 	bne.w	801afd6 <tcp_input+0x326>
 801b36a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	f47f ae32 	bne.w	801afd6 <tcp_input+0x326>
        tcp_pcb_purge(pcb);
 801b372:	4630      	mov	r0, r6
 801b374:	f7fd fe8a 	bl	801908c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b378:	4b36      	ldr	r3, [pc, #216]	; (801b454 <tcp_input+0x7a4>)
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	42b3      	cmp	r3, r6
 801b37e:	f000 8082 	beq.w	801b486 <tcp_input+0x7d6>
 801b382:	2b00      	cmp	r3, #0
 801b384:	f000 8082 	beq.w	801b48c <tcp_input+0x7dc>
 801b388:	68da      	ldr	r2, [r3, #12]
 801b38a:	42b2      	cmp	r2, r6
 801b38c:	f000 8223 	beq.w	801b7d6 <tcp_input+0xb26>
 801b390:	4613      	mov	r3, r2
 801b392:	e7f6      	b.n	801b382 <tcp_input+0x6d2>
      tcp_receive(pcb);
 801b394:	4630      	mov	r0, r6
 801b396:	f7fe ffdb 	bl	801a350 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b39a:	f89a 3000 	ldrb.w	r3, [sl]
 801b39e:	069f      	lsls	r7, r3, #26
 801b3a0:	f57f ae19 	bpl.w	801afd6 <tcp_input+0x326>
        tcp_ack_now(pcb);
 801b3a4:	8b73      	ldrh	r3, [r6, #26]
        tcp_pcb_purge(pcb);
 801b3a6:	4630      	mov	r0, r6
        tcp_ack_now(pcb);
 801b3a8:	f043 0302 	orr.w	r3, r3, #2
 801b3ac:	8373      	strh	r3, [r6, #26]
        tcp_pcb_purge(pcb);
 801b3ae:	f7fd fe6d 	bl	801908c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b3b2:	4b28      	ldr	r3, [pc, #160]	; (801b454 <tcp_input+0x7a4>)
 801b3b4:	681b      	ldr	r3, [r3, #0]
 801b3b6:	42b3      	cmp	r3, r6
 801b3b8:	d065      	beq.n	801b486 <tcp_input+0x7d6>
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d066      	beq.n	801b48c <tcp_input+0x7dc>
 801b3be:	68da      	ldr	r2, [r3, #12]
 801b3c0:	42b2      	cmp	r2, r6
 801b3c2:	f000 8208 	beq.w	801b7d6 <tcp_input+0xb26>
 801b3c6:	4613      	mov	r3, r2
 801b3c8:	e7f7      	b.n	801b3ba <tcp_input+0x70a>
      tcp_receive(pcb);
 801b3ca:	4630      	mov	r0, r6
 801b3cc:	f7fe ffc0 	bl	801a350 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b3d0:	f89a 3000 	ldrb.w	r3, [sl]
 801b3d4:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b3d8:	4b1c      	ldr	r3, [pc, #112]	; (801b44c <tcp_input+0x79c>)
 801b3da:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801b3dc:	f000 819a 	beq.w	801b714 <tcp_input+0xa64>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b3e0:	06da      	lsls	r2, r3, #27
 801b3e2:	d504      	bpl.n	801b3ee <tcp_input+0x73e>
 801b3e4:	4b1e      	ldr	r3, [pc, #120]	; (801b460 <tcp_input+0x7b0>)
 801b3e6:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	429a      	cmp	r2, r3
 801b3ec:	d03c      	beq.n	801b468 <tcp_input+0x7b8>
          tcp_ack_now(pcb);
 801b3ee:	8b73      	ldrh	r3, [r6, #26]
          pcb->state = CLOSING;
 801b3f0:	2208      	movs	r2, #8
          tcp_ack_now(pcb);
 801b3f2:	f043 0302 	orr.w	r3, r3, #2
          pcb->state = CLOSING;
 801b3f6:	7532      	strb	r2, [r6, #20]
          tcp_ack_now(pcb);
 801b3f8:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801b3fa:	e5ec      	b.n	801afd6 <tcp_input+0x326>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801b3fc:	4b13      	ldr	r3, [pc, #76]	; (801b44c <tcp_input+0x79c>)
 801b3fe:	781b      	ldrb	r3, [r3, #0]
 801b400:	f003 0212 	and.w	r2, r3, #18
 801b404:	2a12      	cmp	r2, #18
 801b406:	f000 80dd 	beq.w	801b5c4 <tcp_input+0x914>
      else if (flags & TCP_ACK) {
 801b40a:	06d9      	lsls	r1, r3, #27
 801b40c:	f57f ade3 	bpl.w	801afd6 <tcp_input+0x326>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b410:	9a05      	ldr	r2, [sp, #20]
 801b412:	4630      	mov	r0, r6
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b414:	683b      	ldr	r3, [r7, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b416:	8811      	ldrh	r1, [r2, #0]
 801b418:	4a0d      	ldr	r2, [pc, #52]	; (801b450 <tcp_input+0x7a0>)
 801b41a:	881d      	ldrh	r5, [r3, #0]
 801b41c:	6812      	ldr	r2, [r2, #0]
 801b41e:	9502      	str	r5, [sp, #8]
 801b420:	440a      	add	r2, r1
 801b422:	885b      	ldrh	r3, [r3, #2]
 801b424:	490e      	ldr	r1, [pc, #56]	; (801b460 <tcp_input+0x7b0>)
 801b426:	6809      	ldr	r1, [r1, #0]
 801b428:	9301      	str	r3, [sp, #4]
 801b42a:	4b0e      	ldr	r3, [pc, #56]	; (801b464 <tcp_input+0x7b4>)
 801b42c:	9300      	str	r3, [sp, #0]
 801b42e:	3304      	adds	r3, #4
 801b430:	f001 fa38 	bl	801c8a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801b434:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
 801b438:	2b05      	cmp	r3, #5
 801b43a:	f63f adcc 	bhi.w	801afd6 <tcp_input+0x326>
          pcb->rtime = 0;
 801b43e:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801b440:	4630      	mov	r0, r6
          pcb->rtime = 0;
 801b442:	8633      	strh	r3, [r6, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801b444:	f001 fcca 	bl	801cddc <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801b448:	e5c5      	b.n	801afd6 <tcp_input+0x326>
 801b44a:	bf00      	nop
 801b44c:	2001a9f4 	.word	0x2001a9f4
 801b450:	2001aa14 	.word	0x2001aa14
 801b454:	2002e198 	.word	0x2002e198
 801b458:	2002e194 	.word	0x2002e194
 801b45c:	2002e19c 	.word	0x2002e19c
 801b460:	2001a9f0 	.word	0x2001a9f0
 801b464:	2001f174 	.word	0x2001f174
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b468:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d1bf      	bne.n	801b3ee <tcp_input+0x73e>
          tcp_ack_now(pcb);
 801b46e:	8b73      	ldrh	r3, [r6, #26]
          tcp_pcb_purge(pcb);
 801b470:	4630      	mov	r0, r6
          tcp_ack_now(pcb);
 801b472:	f043 0302 	orr.w	r3, r3, #2
 801b476:	8373      	strh	r3, [r6, #26]
          tcp_pcb_purge(pcb);
 801b478:	f7fd fe08 	bl	801908c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801b47c:	4bb4      	ldr	r3, [pc, #720]	; (801b750 <tcp_input+0xaa0>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	42b3      	cmp	r3, r6
 801b482:	f040 81b9 	bne.w	801b7f8 <tcp_input+0xb48>
        TCP_RMV_ACTIVE(pcb);
 801b486:	68f3      	ldr	r3, [r6, #12]
 801b488:	4ab1      	ldr	r2, [pc, #708]	; (801b750 <tcp_input+0xaa0>)
 801b48a:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b48c:	4bb1      	ldr	r3, [pc, #708]	; (801b754 <tcp_input+0xaa4>)
        pcb->state = TIME_WAIT;
 801b48e:	200a      	movs	r0, #10
        TCP_RMV_ACTIVE(pcb);
 801b490:	2101      	movs	r1, #1
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b492:	681a      	ldr	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b494:	7530      	strb	r0, [r6, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b496:	60f2      	str	r2, [r6, #12]
        TCP_RMV_ACTIVE(pcb);
 801b498:	4aaf      	ldr	r2, [pc, #700]	; (801b758 <tcp_input+0xaa8>)
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b49a:	601e      	str	r6, [r3, #0]
        TCP_RMV_ACTIVE(pcb);
 801b49c:	7011      	strb	r1, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b49e:	f001 fdb5 	bl	801d00c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801b4a2:	e598      	b.n	801afd6 <tcp_input+0x326>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801b4a4:	4bad      	ldr	r3, [pc, #692]	; (801b75c <tcp_input+0xaac>)
 801b4a6:	22c2      	movs	r2, #194	; 0xc2
 801b4a8:	49ad      	ldr	r1, [pc, #692]	; (801b760 <tcp_input+0xab0>)
 801b4aa:	48ae      	ldr	r0, [pc, #696]	; (801b764 <tcp_input+0xab4>)
 801b4ac:	f007 f80a 	bl	80224c4 <iprintf>
 801b4b0:	e469      	b.n	801ad86 <tcp_input+0xd6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b4b2:	4baa      	ldr	r3, [pc, #680]	; (801b75c <tcp_input+0xaac>)
 801b4b4:	22df      	movs	r2, #223	; 0xdf
 801b4b6:	49ac      	ldr	r1, [pc, #688]	; (801b768 <tcp_input+0xab8>)
 801b4b8:	48aa      	ldr	r0, [pc, #680]	; (801b764 <tcp_input+0xab4>)
 801b4ba:	f007 f803 	bl	80224c4 <iprintf>
 801b4be:	8923      	ldrh	r3, [r4, #8]
 801b4c0:	e486      	b.n	801add0 <tcp_input+0x120>
        if (pcb->rcv_ann_wnd == 0) {
 801b4c2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	f000 80ec 	beq.w	801b6a2 <tcp_input+0x9f2>
        TCP_STATS_INC(tcp.drop);
 801b4ca:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
 801b4ce:	4ca7      	ldr	r4, [pc, #668]	; (801b76c <tcp_input+0xabc>)
 801b4d0:	3301      	adds	r3, #1
 801b4d2:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
        goto aborted;
 801b4d6:	e591      	b.n	801affc <tcp_input+0x34c>
        if (recv_acked > 0) {
 801b4d8:	f8bb 2000 	ldrh.w	r2, [fp]
 801b4dc:	b15a      	cbz	r2, 801b4f6 <tcp_input+0x846>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b4de:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801b4e2:	b12b      	cbz	r3, 801b4f0 <tcp_input+0x840>
 801b4e4:	4631      	mov	r1, r6
 801b4e6:	6930      	ldr	r0, [r6, #16]
 801b4e8:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801b4ea:	300d      	adds	r0, #13
 801b4ec:	f43f ad86 	beq.w	801affc <tcp_input+0x34c>
          recv_acked = 0;
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801b4f6:	4630      	mov	r0, r6
 801b4f8:	f7fe fe8e 	bl	801a218 <tcp_input_delayed_close>
 801b4fc:	2800      	cmp	r0, #0
 801b4fe:	f47f ad7d 	bne.w	801affc <tcp_input+0x34c>
        if (recv_data != NULL) {
 801b502:	f8d9 3000 	ldr.w	r3, [r9]
 801b506:	b1fb      	cbz	r3, 801b548 <tcp_input+0x898>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b508:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801b50a:	b133      	cbz	r3, 801b51a <tcp_input+0x86a>
 801b50c:	4b93      	ldr	r3, [pc, #588]	; (801b75c <tcp_input+0xaac>)
 801b50e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b512:	4997      	ldr	r1, [pc, #604]	; (801b770 <tcp_input+0xac0>)
 801b514:	4893      	ldr	r0, [pc, #588]	; (801b764 <tcp_input+0xab4>)
 801b516:	f006 ffd5 	bl	80224c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b51a:	8b73      	ldrh	r3, [r6, #26]
 801b51c:	f013 0310 	ands.w	r3, r3, #16
 801b520:	f040 80f0 	bne.w	801b704 <tcp_input+0xa54>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b524:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
 801b528:	2d00      	cmp	r5, #0
 801b52a:	f000 812b 	beq.w	801b784 <tcp_input+0xad4>
 801b52e:	f8d9 2000 	ldr.w	r2, [r9]
 801b532:	4631      	mov	r1, r6
 801b534:	6930      	ldr	r0, [r6, #16]
 801b536:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 801b538:	f110 0f0d 	cmn.w	r0, #13
 801b53c:	f43f ad5e 	beq.w	801affc <tcp_input+0x34c>
          if (err != ERR_OK) {
 801b540:	b110      	cbz	r0, 801b548 <tcp_input+0x898>
            pcb->refused_data = recv_data;
 801b542:	f8d9 3000 	ldr.w	r3, [r9]
 801b546:	67b3      	str	r3, [r6, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801b548:	f89a 3000 	ldrb.w	r3, [sl]
 801b54c:	069a      	lsls	r2, r3, #26
 801b54e:	d507      	bpl.n	801b560 <tcp_input+0x8b0>
          if (pcb->refused_data != NULL) {
 801b550:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801b552:	2b00      	cmp	r3, #0
 801b554:	f000 80c2 	beq.w	801b6dc <tcp_input+0xa2c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b558:	7b5a      	ldrb	r2, [r3, #13]
 801b55a:	f042 0220 	orr.w	r2, r2, #32
 801b55e:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801b560:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801b562:	4630      	mov	r0, r6
        tcp_input_pcb = NULL;
 801b564:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b566:	f7fe fe57 	bl	801a218 <tcp_input_delayed_close>
 801b56a:	2800      	cmp	r0, #0
 801b56c:	f47f ad46 	bne.w	801affc <tcp_input+0x34c>
        tcp_output(pcb);
 801b570:	4630      	mov	r0, r6
 801b572:	f001 fa17 	bl	801c9a4 <tcp_output>
 801b576:	e541      	b.n	801affc <tcp_input+0x34c>
 801b578:	6839      	ldr	r1, [r7, #0]
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b57a:	8988      	ldrh	r0, [r1, #12]
 801b57c:	f7fb f836 	bl	80165ec <lwip_htons>
 801b580:	f010 0004 	ands.w	r0, r0, #4
 801b584:	f47f adab 	bne.w	801b0de <tcp_input+0x42e>
      TCP_STATS_INC(tcp.proterr);
 801b588:	f8b5 10a0 	ldrh.w	r1, [r5, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 801b58c:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b590:	683e      	ldr	r6, [r7, #0]
      TCP_STATS_INC(tcp.proterr);
 801b592:	3101      	adds	r1, #1
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b594:	9a05      	ldr	r2, [sp, #20]
      TCP_STATS_INC(tcp.drop);
 801b596:	3301      	adds	r3, #1
      TCP_STATS_INC(tcp.proterr);
 801b598:	f8a5 10a0 	strh.w	r1, [r5, #160]	; 0xa0
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b59c:	8817      	ldrh	r7, [r2, #0]
      TCP_STATS_INC(tcp.drop);
 801b59e:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b5a2:	4a74      	ldr	r2, [pc, #464]	; (801b774 <tcp_input+0xac4>)
 801b5a4:	8833      	ldrh	r3, [r6, #0]
 801b5a6:	4974      	ldr	r1, [pc, #464]	; (801b778 <tcp_input+0xac8>)
 801b5a8:	6812      	ldr	r2, [r2, #0]
 801b5aa:	6809      	ldr	r1, [r1, #0]
 801b5ac:	9302      	str	r3, [sp, #8]
 801b5ae:	443a      	add	r2, r7
 801b5b0:	8875      	ldrh	r5, [r6, #2]
 801b5b2:	4b72      	ldr	r3, [pc, #456]	; (801b77c <tcp_input+0xacc>)
 801b5b4:	9501      	str	r5, [sp, #4]
 801b5b6:	1f1d      	subs	r5, r3, #4
 801b5b8:	9500      	str	r5, [sp, #0]
 801b5ba:	f001 f973 	bl	801c8a4 <tcp_rst>
        pbuf_free(p);
 801b5be:	4620      	mov	r0, r4
 801b5c0:	f7ff bb95 	b.w	801acee <tcp_input+0x3e>
          && (ackno == pcb->lastack + 1)) {
 801b5c4:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801b5c6:	4a6c      	ldr	r2, [pc, #432]	; (801b778 <tcp_input+0xac8>)
 801b5c8:	3101      	adds	r1, #1
 801b5ca:	6812      	ldr	r2, [r2, #0]
 801b5cc:	4291      	cmp	r1, r2
 801b5ce:	f47f af1c 	bne.w	801b40a <tcp_input+0x75a>
        pcb->rcv_nxt = seqno + 1;
 801b5d2:	4b68      	ldr	r3, [pc, #416]	; (801b774 <tcp_input+0xac4>)
        pcb->state = ESTABLISHED;
 801b5d4:	2504      	movs	r5, #4
        pcb->snd_wnd = tcphdr->wnd;
 801b5d6:	f8d7 c000 	ldr.w	ip, [r7]
        pcb->rcv_nxt = seqno + 1;
 801b5da:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b5dc:	1972      	adds	r2, r6, r5
        pcb->lastack = ackno;
 801b5de:	6471      	str	r1, [r6, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 801b5e0:	1c5f      	adds	r7, r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b5e2:	9205      	str	r2, [sp, #20]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801b5e4:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b5e6:	4610      	mov	r0, r2
        pcb->rcv_nxt = seqno + 1;
 801b5e8:	6277      	str	r7, [r6, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b5ea:	62f7      	str	r7, [r6, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801b5ec:	f8bc 100e 	ldrh.w	r1, [ip, #14]
        pcb->state = ESTABLISHED;
 801b5f0:	7535      	strb	r5, [r6, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b5f2:	8e75      	ldrh	r5, [r6, #50]	; 0x32
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801b5f4:	6573      	str	r3, [r6, #84]	; 0x54
        pcb->snd_wnd = tcphdr->wnd;
 801b5f6:	f8a6 1060 	strh.w	r1, [r6, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b5fa:	f8a6 1062 	strh.w	r1, [r6, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b5fe:	f004 fb0f 	bl	801fc20 <ip4_route>
 801b602:	9a05      	ldr	r2, [sp, #20]
 801b604:	4601      	mov	r1, r0
 801b606:	4628      	mov	r0, r5
 801b608:	f7fe fc0a 	bl	8019e20 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b60c:	f241 131c 	movw	r3, #4380	; 0x111c
 801b610:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b612:	8670      	strh	r0, [r6, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b614:	0081      	lsls	r1, r0, #2
 801b616:	429a      	cmp	r2, r3
 801b618:	4615      	mov	r5, r2
 801b61a:	bf38      	it	cc
 801b61c:	461d      	movcc	r5, r3
 801b61e:	ebb5 0f80 	cmp.w	r5, r0, lsl #2
 801b622:	f240 815d 	bls.w	801b8e0 <tcp_input+0xc30>
 801b626:	b28b      	uxth	r3, r1
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801b628:	f8b6 2066 	ldrh.w	r2, [r6, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b62c:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801b630:	2a00      	cmp	r2, #0
 801b632:	f000 814d 	beq.w	801b8d0 <tcp_input+0xc20>
        --pcb->snd_queuelen;
 801b636:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
        rseg = pcb->unacked;
 801b63a:	6f35      	ldr	r5, [r6, #112]	; 0x70
        --pcb->snd_queuelen;
 801b63c:	3b01      	subs	r3, #1
 801b63e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
        if (rseg == NULL) {
 801b642:	2d00      	cmp	r5, #0
 801b644:	f000 813f 	beq.w	801b8c6 <tcp_input+0xc16>
          pcb->unacked = rseg->next;
 801b648:	682b      	ldr	r3, [r5, #0]
 801b64a:	6733      	str	r3, [r6, #112]	; 0x70
        tcp_seg_free(rseg);
 801b64c:	4628      	mov	r0, r5
 801b64e:	f7fd fc49 	bl	8018ee4 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801b652:	6f33      	ldr	r3, [r6, #112]	; 0x70
 801b654:	2b00      	cmp	r3, #0
 801b656:	f000 8132 	beq.w	801b8be <tcp_input+0xc0e>
          pcb->rtime = 0;
 801b65a:	2300      	movs	r3, #0
 801b65c:	8633      	strh	r3, [r6, #48]	; 0x30
          pcb->nrtx = 0;
 801b65e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801b662:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801b666:	b133      	cbz	r3, 801b676 <tcp_input+0x9c6>
 801b668:	2200      	movs	r2, #0
 801b66a:	4631      	mov	r1, r6
 801b66c:	6930      	ldr	r0, [r6, #16]
 801b66e:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801b670:	300d      	adds	r0, #13
 801b672:	f43f acc3 	beq.w	801affc <tcp_input+0x34c>
        tcp_ack_now(pcb);
 801b676:	8b73      	ldrh	r3, [r6, #26]
 801b678:	f043 0302 	orr.w	r3, r3, #2
 801b67c:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801b67e:	e4aa      	b.n	801afd6 <tcp_input+0x326>
      if (ackno == pcb->snd_nxt) {
 801b680:	4b3d      	ldr	r3, [pc, #244]	; (801b778 <tcp_input+0xac8>)
 801b682:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	429a      	cmp	r2, r3
 801b688:	f47f aca5 	bne.w	801afd6 <tcp_input+0x326>
      recv_flags |= TF_RESET;
 801b68c:	f89a 2000 	ldrb.w	r2, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801b690:	8b73      	ldrh	r3, [r6, #26]
      recv_flags |= TF_RESET;
 801b692:	f042 0208 	orr.w	r2, r2, #8
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801b696:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 801b69a:	f88a 2000 	strb.w	r2, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801b69e:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801b6a0:	e499      	b.n	801afd6 <tcp_input+0x326>
          tcp_send_empty_ack(pcb);
 801b6a2:	4630      	mov	r0, r6
 801b6a4:	f001 f94a 	bl	801c93c <tcp_send_empty_ack>
 801b6a8:	e70f      	b.n	801b4ca <tcp_input+0x81a>
        TCP_STATS_INC(tcp.cachehit);
 801b6aa:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
 801b6ae:	3201      	adds	r2, #1
 801b6b0:	f8a5 20a6 	strh.w	r2, [r5, #166]	; 0xa6
 801b6b4:	e573      	b.n	801b19e <tcp_input+0x4ee>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6b6:	9a05      	ldr	r2, [sp, #20]
 801b6b8:	4630      	mov	r0, r6
 801b6ba:	8809      	ldrh	r1, [r1, #0]
 801b6bc:	8815      	ldrh	r5, [r2, #0]
 801b6be:	4a2d      	ldr	r2, [pc, #180]	; (801b774 <tcp_input+0xac4>)
 801b6c0:	6812      	ldr	r2, [r2, #0]
 801b6c2:	442a      	add	r2, r5
 801b6c4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801b6c8:	4b2d      	ldr	r3, [pc, #180]	; (801b780 <tcp_input+0xad0>)
 801b6ca:	9300      	str	r3, [sp, #0]
 801b6cc:	4b2a      	ldr	r3, [pc, #168]	; (801b778 <tcp_input+0xac8>)
 801b6ce:	6819      	ldr	r1, [r3, #0]
 801b6d0:	4b2a      	ldr	r3, [pc, #168]	; (801b77c <tcp_input+0xacc>)
 801b6d2:	f001 f8e7 	bl	801c8a4 <tcp_rst>
        pbuf_free(p);
 801b6d6:	4620      	mov	r0, r4
 801b6d8:	f7ff bb09 	b.w	801acee <tcp_input+0x3e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b6dc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 801b6de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b6e2:	d001      	beq.n	801b6e8 <tcp_input+0xa38>
              pcb->rcv_wnd++;
 801b6e4:	3301      	adds	r3, #1
 801b6e6:	8533      	strh	r3, [r6, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801b6e8:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
 801b6ec:	2d00      	cmp	r5, #0
 801b6ee:	f43f af37 	beq.w	801b560 <tcp_input+0x8b0>
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	4631      	mov	r1, r6
 801b6f6:	6930      	ldr	r0, [r6, #16]
 801b6f8:	461a      	mov	r2, r3
 801b6fa:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 801b6fc:	300d      	adds	r0, #13
 801b6fe:	f47f af2f 	bne.w	801b560 <tcp_input+0x8b0>
 801b702:	e47b      	b.n	801affc <tcp_input+0x34c>
            pbuf_free(recv_data);
 801b704:	f8d9 0000 	ldr.w	r0, [r9]
 801b708:	f7fc fdc4 	bl	8018294 <pbuf_free>
            tcp_abort(pcb);
 801b70c:	4630      	mov	r0, r6
 801b70e:	f7fe f885 	bl	801981c <tcp_abort>
            goto aborted;
 801b712:	e473      	b.n	801affc <tcp_input+0x34c>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b714:	06db      	lsls	r3, r3, #27
 801b716:	f57f ac5e 	bpl.w	801afd6 <tcp_input+0x326>
 801b71a:	4b17      	ldr	r3, [pc, #92]	; (801b778 <tcp_input+0xac8>)
 801b71c:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	429a      	cmp	r2, r3
 801b722:	f47f ac58 	bne.w	801afd6 <tcp_input+0x326>
 801b726:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801b728:	2b00      	cmp	r3, #0
 801b72a:	f47f ac54 	bne.w	801afd6 <tcp_input+0x326>
        pcb->state = FIN_WAIT_2;
 801b72e:	2306      	movs	r3, #6
 801b730:	7533      	strb	r3, [r6, #20]
    if (err != ERR_ABRT) {
 801b732:	e450      	b.n	801afd6 <tcp_input+0x326>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801b734:	0798      	lsls	r0, r3, #30
 801b736:	f57f ac4e 	bpl.w	801afd6 <tcp_input+0x326>
 801b73a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b73c:	4a0d      	ldr	r2, [pc, #52]	; (801b774 <tcp_input+0xac4>)
 801b73e:	3b01      	subs	r3, #1
 801b740:	6812      	ldr	r2, [r2, #0]
 801b742:	4293      	cmp	r3, r2
 801b744:	f47f ac47 	bne.w	801afd6 <tcp_input+0x326>
        tcp_rexmit(pcb);
 801b748:	4630      	mov	r0, r6
 801b74a:	f001 f82d 	bl	801c7a8 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801b74e:	e442      	b.n	801afd6 <tcp_input+0x326>
 801b750:	2002e198 	.word	0x2002e198
 801b754:	2002e1a8 	.word	0x2002e1a8
 801b758:	2002e194 	.word	0x2002e194
 801b75c:	08040484 	.word	0x08040484
 801b760:	080406a8 	.word	0x080406a8
 801b764:	08028d24 	.word	0x08028d24
 801b768:	080406b8 	.word	0x080406b8
 801b76c:	2002e1ac 	.word	0x2002e1ac
 801b770:	08040854 	.word	0x08040854
 801b774:	2001aa14 	.word	0x2001aa14
 801b778:	2001a9f0 	.word	0x2001a9f0
 801b77c:	2001f178 	.word	0x2001f178
 801b780:	2001f174 	.word	0x2001f174
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b784:	462b      	mov	r3, r5
 801b786:	4628      	mov	r0, r5
 801b788:	f8d9 2000 	ldr.w	r2, [r9]
 801b78c:	4631      	mov	r1, r6
 801b78e:	f7fe fa69 	bl	8019c64 <tcp_recv_null>
 801b792:	e6d1      	b.n	801b538 <tcp_input+0x888>
      TCP_STATS_INC(tcp.memerr);
 801b794:	f8b5 309c 	ldrh.w	r3, [r5, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b798:	69b7      	ldr	r7, [r6, #24]
      TCP_STATS_INC(tcp.memerr);
 801b79a:	3301      	adds	r3, #1
 801b79c:	f8a5 309c 	strh.w	r3, [r5, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b7a0:	2f00      	cmp	r7, #0
 801b7a2:	f43f ac9c 	beq.w	801b0de <tcp_input+0x42e>
 801b7a6:	4601      	mov	r1, r0
 801b7a8:	f04f 32ff 	mov.w	r2, #4294967295
 801b7ac:	6930      	ldr	r0, [r6, #16]
 801b7ae:	47b8      	blx	r7
        pbuf_free(p);
 801b7b0:	4620      	mov	r0, r4
 801b7b2:	f7ff ba9c 	b.w	801acee <tcp_input+0x3e>
        TCP_STATS_INC(tcp.cachehit);
 801b7b6:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
 801b7ba:	3201      	adds	r2, #1
 801b7bc:	f8a5 20a6 	strh.w	r2, [r5, #166]	; 0xa6
 801b7c0:	f7ff bbbe 	b.w	801af40 <tcp_input+0x290>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b7c4:	4b4c      	ldr	r3, [pc, #304]	; (801b8f8 <tcp_input+0xc48>)
 801b7c6:	f240 1215 	movw	r2, #277	; 0x115
 801b7ca:	494c      	ldr	r1, [pc, #304]	; (801b8fc <tcp_input+0xc4c>)
 801b7cc:	484c      	ldr	r0, [pc, #304]	; (801b900 <tcp_input+0xc50>)
 801b7ce:	f006 fe79 	bl	80224c4 <iprintf>
 801b7d2:	f7ff bbb8 	b.w	801af46 <tcp_input+0x296>
        TCP_RMV_ACTIVE(pcb);
 801b7d6:	68f2      	ldr	r2, [r6, #12]
 801b7d8:	60da      	str	r2, [r3, #12]
 801b7da:	e657      	b.n	801b48c <tcp_input+0x7dc>
  } else if (flags & TCP_FIN) {
 801b7dc:	07d5      	lsls	r5, r2, #31
 801b7de:	f57f ac79 	bpl.w	801b0d4 <tcp_input+0x424>
    pcb->tmr = tcp_ticks;
 801b7e2:	4b48      	ldr	r3, [pc, #288]	; (801b904 <tcp_input+0xc54>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	6233      	str	r3, [r6, #32]
 801b7e8:	e474      	b.n	801b0d4 <tcp_input+0x424>
      tcp_abandon(npcb, 0);
 801b7ea:	4650      	mov	r0, sl
 801b7ec:	4649      	mov	r1, r9
 801b7ee:	f7fd ff75 	bl	80196dc <tcp_abandon>
        pbuf_free(p);
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	f7ff ba7b 	b.w	801acee <tcp_input+0x3e>
          TCP_RMV_ACTIVE(pcb);
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	f43f ae47 	beq.w	801b48c <tcp_input+0x7dc>
 801b7fe:	68da      	ldr	r2, [r3, #12]
 801b800:	42b2      	cmp	r2, r6
 801b802:	d0e8      	beq.n	801b7d6 <tcp_input+0xb26>
 801b804:	4613      	mov	r3, r2
 801b806:	e7f7      	b.n	801b7f8 <tcp_input+0xb48>
          pcb->state = ESTABLISHED;
 801b808:	2204      	movs	r2, #4
          if (pcb->listener == NULL) {
 801b80a:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
          pcb->state = ESTABLISHED;
 801b80c:	7532      	strb	r2, [r6, #20]
          if (pcb->listener == NULL) {
 801b80e:	2b00      	cmp	r3, #0
 801b810:	f43f af7c 	beq.w	801b70c <tcp_input+0xa5c>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801b814:	699b      	ldr	r3, [r3, #24]
 801b816:	b353      	cbz	r3, 801b86e <tcp_input+0xbbe>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801b818:	2200      	movs	r2, #0
 801b81a:	4631      	mov	r1, r6
 801b81c:	6930      	ldr	r0, [r6, #16]
 801b81e:	4798      	blx	r3
          if (err != ERR_OK) {
 801b820:	b9e8      	cbnz	r0, 801b85e <tcp_input+0xbae>
          tcp_receive(pcb);
 801b822:	4630      	mov	r0, r6
 801b824:	f7fe fd94 	bl	801a350 <tcp_receive>
          if (recv_acked != 0) {
 801b828:	f8bb 3000 	ldrh.w	r3, [fp]
 801b82c:	b113      	cbz	r3, 801b834 <tcp_input+0xb84>
            recv_acked--;
 801b82e:	3b01      	subs	r3, #1
 801b830:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b834:	8e71      	ldrh	r1, [r6, #50]	; 0x32
 801b836:	f241 131c 	movw	r3, #4380	; 0x111c
 801b83a:	004a      	lsls	r2, r1, #1
 801b83c:	0088      	lsls	r0, r1, #2
 801b83e:	429a      	cmp	r2, r3
 801b840:	4615      	mov	r5, r2
 801b842:	bf38      	it	cc
 801b844:	461d      	movcc	r5, r3
 801b846:	ebb5 0f81 	cmp.w	r5, r1, lsl #2
 801b84a:	d90c      	bls.n	801b866 <tcp_input+0xbb6>
 801b84c:	b283      	uxth	r3, r0
          if (recv_flags & TF_GOT_FIN) {
 801b84e:	f89a 2000 	ldrb.w	r2, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b852:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801b856:	0695      	lsls	r5, r2, #26
 801b858:	f57f abbd 	bpl.w	801afd6 <tcp_input+0x326>
 801b85c:	e536      	b.n	801b2cc <tcp_input+0x61c>
            if (err != ERR_ABRT) {
 801b85e:	300d      	adds	r0, #13
 801b860:	f43f abcc 	beq.w	801affc <tcp_input+0x34c>
 801b864:	e752      	b.n	801b70c <tcp_input+0xa5c>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b866:	429a      	cmp	r2, r3
 801b868:	bf88      	it	hi
 801b86a:	b293      	uxthhi	r3, r2
 801b86c:	e7ef      	b.n	801b84e <tcp_input+0xb9e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801b86e:	4b22      	ldr	r3, [pc, #136]	; (801b8f8 <tcp_input+0xc48>)
 801b870:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801b874:	4924      	ldr	r1, [pc, #144]	; (801b908 <tcp_input+0xc58>)
 801b876:	4822      	ldr	r0, [pc, #136]	; (801b900 <tcp_input+0xc50>)
 801b878:	f006 fe24 	bl	80224c4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801b87c:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 801b87e:	699b      	ldr	r3, [r3, #24]
 801b880:	2b00      	cmp	r3, #0
 801b882:	d1c9      	bne.n	801b818 <tcp_input+0xb68>
 801b884:	e742      	b.n	801b70c <tcp_input+0xa5c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801b886:	2900      	cmp	r1, #0
 801b888:	f47f af00 	bne.w	801b68c <tcp_input+0x9dc>
 801b88c:	4b1a      	ldr	r3, [pc, #104]	; (801b8f8 <tcp_input+0xc48>)
 801b88e:	f44f 724e 	mov.w	r2, #824	; 0x338
 801b892:	491e      	ldr	r1, [pc, #120]	; (801b90c <tcp_input+0xc5c>)
 801b894:	481a      	ldr	r0, [pc, #104]	; (801b900 <tcp_input+0xc50>)
 801b896:	f006 fe15 	bl	80224c4 <iprintf>
 801b89a:	e6f7      	b.n	801b68c <tcp_input+0x9dc>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b89c:	9805      	ldr	r0, [sp, #20]
 801b89e:	8805      	ldrh	r5, [r0, #0]
 801b8a0:	4630      	mov	r0, r6
 801b8a2:	9102      	str	r1, [sp, #8]
 801b8a4:	442a      	add	r2, r5
 801b8a6:	9301      	str	r3, [sp, #4]
 801b8a8:	e70e      	b.n	801b6c8 <tcp_input+0xa18>
    tcp_ack_now(pcb);
 801b8aa:	8b73      	ldrh	r3, [r6, #26]
    tcp_output(pcb);
 801b8ac:	4630      	mov	r0, r6
    tcp_ack_now(pcb);
 801b8ae:	f043 0302 	orr.w	r3, r3, #2
 801b8b2:	8373      	strh	r3, [r6, #26]
    tcp_output(pcb);
 801b8b4:	f001 f876 	bl	801c9a4 <tcp_output>
        pbuf_free(p);
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	f7ff ba18 	b.w	801acee <tcp_input+0x3e>
          pcb->rtime = -1;
 801b8be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b8c2:	8633      	strh	r3, [r6, #48]	; 0x30
 801b8c4:	e6cd      	b.n	801b662 <tcp_input+0x9b2>
          rseg = pcb->unsent;
 801b8c6:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801b8c8:	b175      	cbz	r5, 801b8e8 <tcp_input+0xc38>
          pcb->unsent = rseg->next;
 801b8ca:	682b      	ldr	r3, [r5, #0]
 801b8cc:	66f3      	str	r3, [r6, #108]	; 0x6c
 801b8ce:	e6bd      	b.n	801b64c <tcp_input+0x99c>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801b8d0:	4b09      	ldr	r3, [pc, #36]	; (801b8f8 <tcp_input+0xc48>)
 801b8d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801b8d6:	490e      	ldr	r1, [pc, #56]	; (801b910 <tcp_input+0xc60>)
 801b8d8:	4809      	ldr	r0, [pc, #36]	; (801b900 <tcp_input+0xc50>)
 801b8da:	f006 fdf3 	bl	80224c4 <iprintf>
 801b8de:	e6aa      	b.n	801b636 <tcp_input+0x986>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b8e0:	429a      	cmp	r2, r3
 801b8e2:	bf88      	it	hi
 801b8e4:	b293      	uxthhi	r3, r2
 801b8e6:	e69f      	b.n	801b628 <tcp_input+0x978>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801b8e8:	4b03      	ldr	r3, [pc, #12]	; (801b8f8 <tcp_input+0xc48>)
 801b8ea:	f44f 725d 	mov.w	r2, #884	; 0x374
 801b8ee:	4909      	ldr	r1, [pc, #36]	; (801b914 <tcp_input+0xc64>)
 801b8f0:	4803      	ldr	r0, [pc, #12]	; (801b900 <tcp_input+0xc50>)
 801b8f2:	f006 fde7 	bl	80224c4 <iprintf>
 801b8f6:	e7e8      	b.n	801b8ca <tcp_input+0xc1a>
 801b8f8:	08040484 	.word	0x08040484
 801b8fc:	0804078c 	.word	0x0804078c
 801b900:	08028d24 	.word	0x08028d24
 801b904:	2002e19c 	.word	0x2002e19c
 801b908:	08040834 	.word	0x08040834
 801b90c:	080407e8 	.word	0x080407e8
 801b910:	08040808 	.word	0x08040808
 801b914:	08040820 	.word	0x08040820

0801b918 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801b918:	4a02      	ldr	r2, [pc, #8]	; (801b924 <tcp_trigger_input_pcb_close+0xc>)
 801b91a:	7813      	ldrb	r3, [r2, #0]
 801b91c:	f043 0310 	orr.w	r3, r3, #16
 801b920:	7013      	strb	r3, [r2, #0]
}
 801b922:	4770      	bx	lr
 801b924:	2001aa10 	.word	0x2001aa10

0801b928 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b928:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b92a:	4604      	mov	r4, r0
 801b92c:	b128      	cbz	r0, 801b93a <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b92e:	6863      	ldr	r3, [r4, #4]
 801b930:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 801b932:	3801      	subs	r0, #1
 801b934:	bf18      	it	ne
 801b936:	2001      	movne	r0, #1
 801b938:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b93a:	4b04      	ldr	r3, [pc, #16]	; (801b94c <tcp_output_segment_busy+0x24>)
 801b93c:	f240 529a 	movw	r2, #1434	; 0x59a
 801b940:	4903      	ldr	r1, [pc, #12]	; (801b950 <tcp_output_segment_busy+0x28>)
 801b942:	4804      	ldr	r0, [pc, #16]	; (801b954 <tcp_output_segment_busy+0x2c>)
 801b944:	f006 fdbe 	bl	80224c4 <iprintf>
 801b948:	e7f1      	b.n	801b92e <tcp_output_segment_busy+0x6>
 801b94a:	bf00      	nop
 801b94c:	08040870 	.word	0x08040870
 801b950:	080408a4 	.word	0x080408a4
 801b954:	08028d24 	.word	0x08028d24

0801b958 <tcp_pbuf_prealloc>:
{
 801b958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b95c:	9f08      	ldr	r7, [sp, #32]
 801b95e:	4680      	mov	r8, r0
 801b960:	460d      	mov	r5, r1
 801b962:	4614      	mov	r4, r2
 801b964:	461e      	mov	r6, r3
 801b966:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801b96a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801b96e:	2f00      	cmp	r7, #0
 801b970:	d033      	beq.n	801b9da <tcp_pbuf_prealloc+0x82>
  if (length < max_length) {
 801b972:	42a5      	cmp	r5, r4
 801b974:	d20e      	bcs.n	801b994 <tcp_pbuf_prealloc+0x3c>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b976:	f019 0f02 	tst.w	r9, #2
 801b97a:	d008      	beq.n	801b98e <tcp_pbuf_prealloc+0x36>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b97c:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801b980:	f021 0103 	bic.w	r1, r1, #3
 801b984:	428c      	cmp	r4, r1
 801b986:	bf28      	it	cs
 801b988:	460c      	movcs	r4, r1
 801b98a:	b2a1      	uxth	r1, r4
 801b98c:	e003      	b.n	801b996 <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b98e:	8b7b      	ldrh	r3, [r7, #26]
 801b990:	065b      	lsls	r3, r3, #25
 801b992:	d518      	bpl.n	801b9c6 <tcp_pbuf_prealloc+0x6e>
 801b994:	4629      	mov	r1, r5
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b996:	4640      	mov	r0, r8
 801b998:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b99c:	f7fc fce8 	bl	8018370 <pbuf_alloc>
  if (p == NULL) {
 801b9a0:	4604      	mov	r4, r0
 801b9a2:	b168      	cbz	r0, 801b9c0 <tcp_pbuf_prealloc+0x68>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b9a4:	6803      	ldr	r3, [r0, #0]
 801b9a6:	b133      	cbz	r3, 801b9b6 <tcp_pbuf_prealloc+0x5e>
 801b9a8:	4b0f      	ldr	r3, [pc, #60]	; (801b9e8 <tcp_pbuf_prealloc+0x90>)
 801b9aa:	f240 120b 	movw	r2, #267	; 0x10b
 801b9ae:	490f      	ldr	r1, [pc, #60]	; (801b9ec <tcp_pbuf_prealloc+0x94>)
 801b9b0:	480f      	ldr	r0, [pc, #60]	; (801b9f0 <tcp_pbuf_prealloc+0x98>)
 801b9b2:	f006 fd87 	bl	80224c4 <iprintf>
  *oversize = p->len - length;
 801b9b6:	8963      	ldrh	r3, [r4, #10]
 801b9b8:	1b5b      	subs	r3, r3, r5
 801b9ba:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 801b9bc:	8125      	strh	r5, [r4, #8]
 801b9be:	8165      	strh	r5, [r4, #10]
}
 801b9c0:	4620      	mov	r0, r4
 801b9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801b9c6:	f1ba 0f00 	cmp.w	sl, #0
 801b9ca:	d0d7      	beq.n	801b97c <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801b9cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d1d4      	bne.n	801b97c <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801b9d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d1d1      	bne.n	801b97c <tcp_pbuf_prealloc+0x24>
 801b9d8:	e7dc      	b.n	801b994 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801b9da:	4b03      	ldr	r3, [pc, #12]	; (801b9e8 <tcp_pbuf_prealloc+0x90>)
 801b9dc:	22e9      	movs	r2, #233	; 0xe9
 801b9de:	4905      	ldr	r1, [pc, #20]	; (801b9f4 <tcp_pbuf_prealloc+0x9c>)
 801b9e0:	4803      	ldr	r0, [pc, #12]	; (801b9f0 <tcp_pbuf_prealloc+0x98>)
 801b9e2:	f006 fd6f 	bl	80224c4 <iprintf>
 801b9e6:	e7c4      	b.n	801b972 <tcp_pbuf_prealloc+0x1a>
 801b9e8:	08040870 	.word	0x08040870
 801b9ec:	080408ec 	.word	0x080408ec
 801b9f0:	08028d24 	.word	0x08028d24
 801b9f4:	080408cc 	.word	0x080408cc

0801b9f8 <tcp_create_segment>:
{
 801b9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9fc:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801b9fe:	4607      	mov	r7, r0
{
 801ba00:	4690      	mov	r8, r2
 801ba02:	4699      	mov	r9, r3
 801ba04:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801ba08:	2800      	cmp	r0, #0
 801ba0a:	d04e      	beq.n	801baaa <tcp_create_segment+0xb2>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801ba0c:	2e00      	cmp	r6, #0
 801ba0e:	d054      	beq.n	801baba <tcp_create_segment+0xc2>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ba10:	2004      	movs	r0, #4
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ba12:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ba16:	22a8      	movs	r2, #168	; 0xa8
 801ba18:	4934      	ldr	r1, [pc, #208]	; (801baec <tcp_create_segment+0xf4>)
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ba1a:	4005      	ands	r5, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ba1c:	f7fc f946 	bl	8017cac <memp_malloc_fn>
 801ba20:	4604      	mov	r4, r0
 801ba22:	2800      	cmp	r0, #0
 801ba24:	d05d      	beq.n	801bae2 <tcp_create_segment+0xea>
  seg->flags = optflags;
 801ba26:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801ba2a:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ba2c:	8932      	ldrh	r2, [r6, #8]
 801ba2e:	fa1f fa85 	uxth.w	sl, r5
 801ba32:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801ba34:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ba38:	d32f      	bcc.n	801ba9a <tcp_create_segment+0xa2>
  seg->len = p->tot_len - optlen;
 801ba3a:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ba3e:	4630      	mov	r0, r6
 801ba40:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801ba42:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ba44:	f7fc fbe6 	bl	8018214 <pbuf_add_header>
 801ba48:	4606      	mov	r6, r0
 801ba4a:	2800      	cmp	r0, #0
 801ba4c:	d13c      	bne.n	801bac8 <tcp_create_segment+0xd0>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ba4e:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ba50:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ba52:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ba54:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ba58:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ba5a:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ba5e:	f7fa fdc5 	bl	80165ec <lwip_htons>
 801ba62:	4603      	mov	r3, r0
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ba64:	8b38      	ldrh	r0, [r7, #24]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ba66:	f8aa 3000 	strh.w	r3, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ba6a:	68e7      	ldr	r7, [r4, #12]
 801ba6c:	f7fa fdbe 	bl	80165ec <lwip_htons>
 801ba70:	4603      	mov	r3, r0
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ba72:	4648      	mov	r0, r9
 801ba74:	f8d4 900c 	ldr.w	r9, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ba78:	807b      	strh	r3, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ba7a:	f7fa fdbb 	bl	80165f4 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ba7e:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ba80:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ba84:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 801ba88:	f7fa fdb0 	bl	80165ec <lwip_htons>
  seg->tcphdr->urgp = 0;
 801ba8c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ba8e:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801ba90:	749e      	strb	r6, [r3, #18]
 801ba92:	74de      	strb	r6, [r3, #19]
}
 801ba94:	4620      	mov	r0, r4
 801ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ba9a:	22b0      	movs	r2, #176	; 0xb0
 801ba9c:	4b13      	ldr	r3, [pc, #76]	; (801baec <tcp_create_segment+0xf4>)
 801ba9e:	4914      	ldr	r1, [pc, #80]	; (801baf0 <tcp_create_segment+0xf8>)
 801baa0:	4814      	ldr	r0, [pc, #80]	; (801baf4 <tcp_create_segment+0xfc>)
 801baa2:	f006 fd0f 	bl	80224c4 <iprintf>
 801baa6:	8932      	ldrh	r2, [r6, #8]
 801baa8:	e7c7      	b.n	801ba3a <tcp_create_segment+0x42>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801baaa:	4b10      	ldr	r3, [pc, #64]	; (801baec <tcp_create_segment+0xf4>)
 801baac:	22a3      	movs	r2, #163	; 0xa3
 801baae:	4912      	ldr	r1, [pc, #72]	; (801baf8 <tcp_create_segment+0x100>)
 801bab0:	4810      	ldr	r0, [pc, #64]	; (801baf4 <tcp_create_segment+0xfc>)
 801bab2:	f006 fd07 	bl	80224c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801bab6:	2e00      	cmp	r6, #0
 801bab8:	d1aa      	bne.n	801ba10 <tcp_create_segment+0x18>
 801baba:	4b0c      	ldr	r3, [pc, #48]	; (801baec <tcp_create_segment+0xf4>)
 801babc:	22a4      	movs	r2, #164	; 0xa4
 801babe:	490f      	ldr	r1, [pc, #60]	; (801bafc <tcp_create_segment+0x104>)
 801bac0:	480c      	ldr	r0, [pc, #48]	; (801baf4 <tcp_create_segment+0xfc>)
 801bac2:	f006 fcff 	bl	80224c4 <iprintf>
 801bac6:	e7a3      	b.n	801ba10 <tcp_create_segment+0x18>
    TCP_STATS_INC(tcp.err);
 801bac8:	4a0d      	ldr	r2, [pc, #52]	; (801bb00 <tcp_create_segment+0x108>)
    tcp_seg_free(seg);
 801baca:	4620      	mov	r0, r4
    return NULL;
 801bacc:	2400      	movs	r4, #0
    TCP_STATS_INC(tcp.err);
 801bace:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 801bad2:	3301      	adds	r3, #1
 801bad4:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 801bad8:	f7fd fa04 	bl	8018ee4 <tcp_seg_free>
}
 801badc:	4620      	mov	r0, r4
 801bade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801bae2:	4630      	mov	r0, r6
 801bae4:	f7fc fbd6 	bl	8018294 <pbuf_free>
    return NULL;
 801bae8:	e7d4      	b.n	801ba94 <tcp_create_segment+0x9c>
 801baea:	bf00      	nop
 801baec:	08040870 	.word	0x08040870
 801baf0:	08040944 	.word	0x08040944
 801baf4:	08028d24 	.word	0x08028d24
 801baf8:	08040900 	.word	0x08040900
 801bafc:	08040920 	.word	0x08040920
 801bb00:	2002e08c 	.word	0x2002e08c

0801bb04 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bb04:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801bb06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bb0a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801bb0c:	4606      	mov	r6, r0
 801bb0e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bb10:	2022      	movs	r0, #34	; 0x22
 801bb12:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801bb16:	461c      	mov	r4, r3
 801bb18:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801bb1c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801bb20:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bb24:	f7fc fc24 	bl	8018370 <pbuf_alloc>
  if (p != NULL) {
 801bb28:	4605      	mov	r5, r0
 801bb2a:	b310      	cbz	r0, 801bb72 <tcp_output_alloc_header_common.constprop.0+0x6e>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bb2c:	8943      	ldrh	r3, [r0, #10]
 801bb2e:	2b13      	cmp	r3, #19
 801bb30:	d922      	bls.n	801bb78 <tcp_output_alloc_header_common.constprop.0+0x74>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801bb32:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801bb34:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801bb36:	f7fa fd59 	bl	80165ec <lwip_htons>
 801bb3a:	4603      	mov	r3, r0
    tcphdr->dest = lwip_htons(dst_port);
 801bb3c:	4650      	mov	r0, sl
    tcphdr->src = lwip_htons(src_port);
 801bb3e:	8023      	strh	r3, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801bb40:	f7fa fd54 	bl	80165ec <lwip_htons>
 801bb44:	4603      	mov	r3, r0
    tcphdr->seqno = seqno_be;
 801bb46:	6067      	str	r7, [r4, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801bb48:	4630      	mov	r0, r6
    tcphdr->dest = lwip_htons(dst_port);
 801bb4a:	8063      	strh	r3, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801bb4c:	f7fa fd52 	bl	80165f4 <lwip_htonl>
 801bb50:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bb52:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801bb56:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bb58:	f7fa fd48 	bl	80165ec <lwip_htons>
 801bb5c:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801bb5e:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bb60:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801bb62:	f7fa fd43 	bl	80165ec <lwip_htons>
    tcphdr->chksum = 0;
 801bb66:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801bb68:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801bb6a:	7423      	strb	r3, [r4, #16]
 801bb6c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801bb6e:	74a3      	strb	r3, [r4, #18]
 801bb70:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801bb72:	4628      	mov	r0, r5
 801bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bb78:	4b03      	ldr	r3, [pc, #12]	; (801bb88 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801bb7a:	f240 7223 	movw	r2, #1827	; 0x723
 801bb7e:	4903      	ldr	r1, [pc, #12]	; (801bb8c <tcp_output_alloc_header_common.constprop.0+0x88>)
 801bb80:	4803      	ldr	r0, [pc, #12]	; (801bb90 <tcp_output_alloc_header_common.constprop.0+0x8c>)
 801bb82:	f006 fc9f 	bl	80224c4 <iprintf>
 801bb86:	e7d4      	b.n	801bb32 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801bb88:	08040870 	.word	0x08040870
 801bb8c:	0804095c 	.word	0x0804095c
 801bb90:	08028d24 	.word	0x08028d24

0801bb94 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801bb94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb96:	460d      	mov	r5, r1
 801bb98:	b085      	sub	sp, #20
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bb9a:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801bb9c:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bb9e:	b190      	cbz	r0, 801bbc6 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801bba0:	8b23      	ldrh	r3, [r4, #24]
 801bba2:	2010      	movs	r0, #16
 801bba4:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 801bba6:	4632      	mov	r2, r6
 801bba8:	9300      	str	r3, [sp, #0]
 801bbaa:	4629      	mov	r1, r5
 801bbac:	e9cd 0701 	strd	r0, r7, [sp, #4]
 801bbb0:	8ae3      	ldrh	r3, [r4, #22]
 801bbb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bbb4:	f7ff ffa6 	bl	801bb04 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801bbb8:	b118      	cbz	r0, 801bbc2 <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bbba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801bbbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbbe:	4413      	add	r3, r2
 801bbc0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801bbc2:	b005      	add	sp, #20
 801bbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bbc6:	4b04      	ldr	r3, [pc, #16]	; (801bbd8 <tcp_output_alloc_header.constprop.0+0x44>)
 801bbc8:	f240 7242 	movw	r2, #1858	; 0x742
 801bbcc:	4903      	ldr	r1, [pc, #12]	; (801bbdc <tcp_output_alloc_header.constprop.0+0x48>)
 801bbce:	4804      	ldr	r0, [pc, #16]	; (801bbe0 <tcp_output_alloc_header.constprop.0+0x4c>)
 801bbd0:	f006 fc78 	bl	80224c4 <iprintf>
 801bbd4:	e7e4      	b.n	801bba0 <tcp_output_alloc_header.constprop.0+0xc>
 801bbd6:	bf00      	nop
 801bbd8:	08040870 	.word	0x08040870
 801bbdc:	0804098c 	.word	0x0804098c
 801bbe0:	08028d24 	.word	0x08028d24

0801bbe4 <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801bbe4:	b100      	cbz	r0, 801bbe8 <tcp_output_fill_options.isra.0.constprop.0+0x4>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801bbe6:	4770      	bx	lr
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801bbe8:	4b03      	ldr	r3, [pc, #12]	; (801bbf8 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 801bbea:	f240 7256 	movw	r2, #1878	; 0x756
 801bbee:	4903      	ldr	r1, [pc, #12]	; (801bbfc <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 801bbf0:	4803      	ldr	r0, [pc, #12]	; (801bc00 <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 801bbf2:	f006 bc67 	b.w	80224c4 <iprintf>
 801bbf6:	bf00      	nop
 801bbf8:	08040870 	.word	0x08040870
 801bbfc:	080409b4 	.word	0x080409b4
 801bc00:	08028d24 	.word	0x08028d24

0801bc04 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801bc04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc08:	4605      	mov	r5, r0
 801bc0a:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801bc0c:	460c      	mov	r4, r1
{
 801bc0e:	4690      	mov	r8, r2
 801bc10:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801bc12:	2900      	cmp	r1, #0
 801bc14:	d03b      	beq.n	801bc8e <tcp_output_control_segment+0x8a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801bc16:	2d00      	cmp	r5, #0
 801bc18:	d041      	beq.n	801bc9e <tcp_output_control_segment+0x9a>
 801bc1a:	7a28      	ldrb	r0, [r5, #8]
 801bc1c:	bb48      	cbnz	r0, 801bc72 <tcp_output_control_segment+0x6e>
    return ip_route(src, dst);
 801bc1e:	4630      	mov	r0, r6
 801bc20:	f003 fffe 	bl	801fc20 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801bc24:	4607      	mov	r7, r0
 801bc26:	b348      	cbz	r0, 801bc7c <tcp_output_control_segment+0x78>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801bc28:	9600      	str	r6, [sp, #0]
 801bc2a:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801bc2c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801bc30:	2106      	movs	r1, #6
 801bc32:	8922      	ldrh	r2, [r4, #8]
 801bc34:	4620      	mov	r0, r4
 801bc36:	f7fb fa8b 	bl	8017150 <ip_chksum_pseudo>
 801bc3a:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801bc3e:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801bc40:	7aa9      	ldrb	r1, [r5, #10]
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
 801bc42:	f8df c090 	ldr.w	ip, [pc, #144]	; 801bcd4 <tcp_output_control_segment+0xd0>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801bc46:	2006      	movs	r0, #6
 801bc48:	4632      	mov	r2, r6
 801bc4a:	9100      	str	r1, [sp, #0]
    TCP_STATS_INC(tcp.xmit);
 801bc4c:	f8bc 5090 	ldrh.w	r5, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801bc50:	4641      	mov	r1, r8
 801bc52:	9001      	str	r0, [sp, #4]
 801bc54:	4620      	mov	r0, r4
    TCP_STATS_INC(tcp.xmit);
 801bc56:	3501      	adds	r5, #1
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801bc58:	9702      	str	r7, [sp, #8]
    TCP_STATS_INC(tcp.xmit);
 801bc5a:	f8ac 5090 	strh.w	r5, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801bc5e:	f004 f9f9 	bl	8020054 <ip4_output_if>
 801bc62:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801bc64:	4620      	mov	r0, r4
 801bc66:	f7fc fb15 	bl	8018294 <pbuf_free>
  return err;
}
 801bc6a:	4628      	mov	r0, r5
 801bc6c:	b005      	add	sp, #20
 801bc6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801bc72:	f7fc fa31 	bl	80180d8 <netif_get_by_index>
  if (netif == NULL) {
 801bc76:	4607      	mov	r7, r0
 801bc78:	2800      	cmp	r0, #0
 801bc7a:	d1d5      	bne.n	801bc28 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801bc7c:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801bc80:	4620      	mov	r0, r4
 801bc82:	f7fc fb07 	bl	8018294 <pbuf_free>
}
 801bc86:	4628      	mov	r0, r5
 801bc88:	b005      	add	sp, #20
 801bc8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801bc8e:	4b0e      	ldr	r3, [pc, #56]	; (801bcc8 <tcp_output_control_segment+0xc4>)
 801bc90:	f240 7287 	movw	r2, #1927	; 0x787
 801bc94:	490d      	ldr	r1, [pc, #52]	; (801bccc <tcp_output_control_segment+0xc8>)
 801bc96:	480e      	ldr	r0, [pc, #56]	; (801bcd0 <tcp_output_control_segment+0xcc>)
 801bc98:	f006 fc14 	bl	80224c4 <iprintf>
 801bc9c:	e7bb      	b.n	801bc16 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801bc9e:	4630      	mov	r0, r6
 801bca0:	f003 ffbe 	bl	801fc20 <ip4_route>
  if (netif == NULL) {
 801bca4:	4607      	mov	r7, r0
 801bca6:	2800      	cmp	r0, #0
 801bca8:	d0e8      	beq.n	801bc7c <tcp_output_control_segment+0x78>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801bcaa:	9600      	str	r6, [sp, #0]
 801bcac:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801bcae:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801bcb2:	2106      	movs	r1, #6
 801bcb4:	8922      	ldrh	r2, [r4, #8]
 801bcb6:	4620      	mov	r0, r4
 801bcb8:	f7fb fa4a 	bl	8017150 <ip_chksum_pseudo>
      tos = 0;
 801bcbc:	4629      	mov	r1, r5
      ttl = TCP_TTL;
 801bcbe:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801bcc0:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801bcc4:	e7bd      	b.n	801bc42 <tcp_output_control_segment+0x3e>
 801bcc6:	bf00      	nop
 801bcc8:	08040870 	.word	0x08040870
 801bccc:	080409dc 	.word	0x080409dc
 801bcd0:	08028d24 	.word	0x08028d24
 801bcd4:	2002e08c 	.word	0x2002e08c

0801bcd8 <tcp_write>:
{
 801bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801bcdc:	2400      	movs	r4, #0
{
 801bcde:	b091      	sub	sp, #68	; 0x44
 801bce0:	9107      	str	r1, [sp, #28]
 801bce2:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801bce4:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801bce8:	2800      	cmp	r0, #0
 801bcea:	f000 8321 	beq.w	801c330 <tcp_write+0x658>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801bcee:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801bcf2:	4692      	mov	sl, r2
 801bcf4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801bcf6:	4681      	mov	r9, r0
 801bcf8:	085b      	lsrs	r3, r3, #1
 801bcfa:	4293      	cmp	r3, r2
 801bcfc:	bf28      	it	cs
 801bcfe:	4613      	movcs	r3, r2
 801bd00:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	bf08      	it	eq
 801bd06:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801bd08:	9b07      	ldr	r3, [sp, #28]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	f000 8306 	beq.w	801c31c <tcp_write+0x644>
  if ((pcb->state != ESTABLISHED) &&
 801bd10:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801bd12:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801bd14:	2a02      	cmp	r2, #2
 801bd16:	d902      	bls.n	801bd1e <tcp_write+0x46>
 801bd18:	2b07      	cmp	r3, #7
 801bd1a:	f040 82ae 	bne.w	801c27a <tcp_write+0x5a2>
  } else if (len == 0) {
 801bd1e:	f1ba 0f00 	cmp.w	sl, #0
 801bd22:	f000 80f0 	beq.w	801bf06 <tcp_write+0x22e>
  if (len > pcb->snd_buf) {
 801bd26:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801bd2a:	4553      	cmp	r3, sl
 801bd2c:	f0c0 82ce 	bcc.w	801c2cc <tcp_write+0x5f4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801bd30:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801bd34:	2e08      	cmp	r6, #8
 801bd36:	f200 82d2 	bhi.w	801c2de <tcp_write+0x606>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801bd3a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801bd3e:	2e00      	cmp	r6, #0
 801bd40:	f000 80d4 	beq.w	801beec <tcp_write+0x214>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	f040 80e0 	bne.w	801bf0a <tcp_write+0x232>
 801bd4a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801bd4e:	f1b8 0f00 	cmp.w	r8, #0
 801bd52:	f000 8274 	beq.w	801c23e <tcp_write+0x566>
 801bd56:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bd58:	461a      	mov	r2, r3
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d1fb      	bne.n	801bd58 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801bd60:	7a94      	ldrb	r4, [r2, #10]
 801bd62:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801bd64:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801bd66:	00a4      	lsls	r4, r4, #2
 801bd68:	920b      	str	r2, [sp, #44]	; 0x2c
 801bd6a:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801bd6e:	191a      	adds	r2, r3, r4
 801bd70:	4593      	cmp	fp, r2
 801bd72:	f2c0 81af 	blt.w	801c0d4 <tcp_write+0x3fc>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801bd76:	ebab 0404 	sub.w	r4, fp, r4
    oversize = pcb->unsent_oversize;
 801bd7a:	f8b9 2068 	ldrh.w	r2, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801bd7e:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801bd80:	920a      	str	r2, [sp, #40]	; 0x28
 801bd82:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 801bd86:	b2a4      	uxth	r4, r4
    if (oversize > 0) {
 801bd88:	2a00      	cmp	r2, #0
 801bd8a:	f000 80d3 	beq.w	801bf34 <tcp_write+0x25c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801bd8e:	42a2      	cmp	r2, r4
 801bd90:	f200 8172 	bhi.w	801c078 <tcp_write+0x3a0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801bd94:	45a2      	cmp	sl, r4
 801bd96:	4650      	mov	r0, sl
 801bd98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd9a:	bf28      	it	cs
 801bd9c:	4620      	movcs	r0, r4
 801bd9e:	4298      	cmp	r0, r3
 801bda0:	bf28      	it	cs
 801bda2:	4618      	movcs	r0, r3
      oversize -= oversize_used;
 801bda4:	1a1b      	subs	r3, r3, r0
      space -= oversize_used;
 801bda6:	1a24      	subs	r4, r4, r0
      oversize -= oversize_used;
 801bda8:	b29b      	uxth	r3, r3
      space -= oversize_used;
 801bdaa:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801bdac:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	f000 818c 	beq.w	801c0ce <tcp_write+0x3f6>
 801bdb6:	4582      	cmp	sl, r0
 801bdb8:	f000 8189 	beq.w	801c0ce <tcp_write+0x3f6>
 801bdbc:	4bb4      	ldr	r3, [pc, #720]	; (801c090 <tcp_write+0x3b8>)
 801bdbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bdc2:	900a      	str	r0, [sp, #40]	; 0x28
 801bdc4:	49b3      	ldr	r1, [pc, #716]	; (801c094 <tcp_write+0x3bc>)
 801bdc6:	48b4      	ldr	r0, [pc, #720]	; (801c098 <tcp_write+0x3c0>)
 801bdc8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801bdca:	f006 fb7b 	bl	80224c4 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801bdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdd0:	459a      	cmp	sl, r3
 801bdd2:	f200 80b4 	bhi.w	801bf3e <tcp_write+0x266>
  struct pbuf *concat_p = NULL;
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bdda:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801bddc:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801bdde:	45a2      	cmp	sl, r4
 801bde0:	f240 80f2 	bls.w	801bfc8 <tcp_write+0x2f0>
 801bde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bde6:	f04f 0800 	mov.w	r8, #0
 801bdea:	f003 0301 	and.w	r3, r3, #1
 801bdee:	f8cd 8014 	str.w	r8, [sp, #20]
 801bdf2:	9308      	str	r3, [sp, #32]
 801bdf4:	4643      	mov	r3, r8
 801bdf6:	46d8      	mov	r8, fp
 801bdf8:	469b      	mov	fp, r3
 801bdfa:	e043      	b.n	801be84 <tcp_write+0x1ac>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801bdfc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801be00:	2b00      	cmp	r3, #0
 801be02:	f040 80f4 	bne.w	801bfee <tcp_write+0x316>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801be06:	2201      	movs	r2, #1
 801be08:	4629      	mov	r1, r5
 801be0a:	2036      	movs	r0, #54	; 0x36
 801be0c:	f7fc fab0 	bl	8018370 <pbuf_alloc>
 801be10:	4603      	mov	r3, r0
 801be12:	2800      	cmp	r0, #0
 801be14:	f000 8103 	beq.w	801c01e <tcp_write+0x346>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801be18:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801be1a:	2100      	movs	r1, #0
 801be1c:	2036      	movs	r0, #54	; 0x36
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801be1e:	9306      	str	r3, [sp, #24]
 801be20:	1917      	adds	r7, r2, r4
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801be22:	f44f 7220 	mov.w	r2, #640	; 0x280
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801be26:	605f      	str	r7, [r3, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801be28:	f7fc faa2 	bl	8018370 <pbuf_alloc>
 801be2c:	9b06      	ldr	r3, [sp, #24]
 801be2e:	4607      	mov	r7, r0
 801be30:	2800      	cmp	r0, #0
 801be32:	f000 819d 	beq.w	801c170 <tcp_write+0x498>
      pbuf_cat(p/*header*/, p2/*data*/);
 801be36:	4619      	mov	r1, r3
 801be38:	f7fc fbae 	bl	8018598 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801be3c:	4638      	mov	r0, r7
 801be3e:	f7fc fb8d 	bl	801855c <pbuf_clen>
 801be42:	4430      	add	r0, r6
 801be44:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801be46:	2e09      	cmp	r6, #9
 801be48:	d84a      	bhi.n	801bee0 <tcp_write+0x208>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801be4a:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801be4e:	2200      	movs	r2, #0
 801be50:	4639      	mov	r1, r7
 801be52:	4648      	mov	r0, r9
 801be54:	4423      	add	r3, r4
 801be56:	9200      	str	r2, [sp, #0]
 801be58:	f7ff fdce 	bl	801b9f8 <tcp_create_segment>
 801be5c:	4607      	mov	r7, r0
 801be5e:	2800      	cmp	r0, #0
 801be60:	f000 80dd 	beq.w	801c01e <tcp_write+0x346>
    if (queue == NULL) {
 801be64:	9b05      	ldr	r3, [sp, #20]
 801be66:	2b00      	cmp	r3, #0
 801be68:	f000 80a6 	beq.w	801bfb8 <tcp_write+0x2e0>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801be6c:	f1bb 0f00 	cmp.w	fp, #0
 801be70:	f000 80c5 	beq.w	801bffe <tcp_write+0x326>
    pos += seglen;
 801be74:	442c      	add	r4, r5
      prev_seg->next = seg;
 801be76:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801be7a:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801be7c:	45a2      	cmp	sl, r4
 801be7e:	f240 80a1 	bls.w	801bfc4 <tcp_write+0x2ec>
 801be82:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801be84:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801be88:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801be8a:	b2ad      	uxth	r5, r5
 801be8c:	4545      	cmp	r5, r8
 801be8e:	bf28      	it	cs
 801be90:	4645      	movcs	r5, r8
 801be92:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801be94:	2b00      	cmp	r3, #0
 801be96:	d0b1      	beq.n	801bdfc <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801be98:	9b05      	ldr	r3, [sp, #20]
 801be9a:	4642      	mov	r2, r8
 801be9c:	4629      	mov	r1, r5
 801be9e:	2036      	movs	r0, #54	; 0x36
 801bea0:	fab3 f783 	clz	r7, r3
 801bea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bea6:	097f      	lsrs	r7, r7, #5
 801bea8:	e9cd 9300 	strd	r9, r3, [sp]
 801beac:	9702      	str	r7, [sp, #8]
 801beae:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801beb2:	f7ff fd51 	bl	801b958 <tcp_pbuf_prealloc>
 801beb6:	4607      	mov	r7, r0
 801beb8:	2800      	cmp	r0, #0
 801beba:	f000 80b0 	beq.w	801c01e <tcp_write+0x346>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801bebe:	8943      	ldrh	r3, [r0, #10]
 801bec0:	42ab      	cmp	r3, r5
 801bec2:	f0c0 80a4 	bcc.w	801c00e <tcp_write+0x336>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801bec6:	9b07      	ldr	r3, [sp, #28]
 801bec8:	462a      	mov	r2, r5
 801beca:	6878      	ldr	r0, [r7, #4]
 801becc:	1919      	adds	r1, r3, r4
 801bece:	f005 fb5f 	bl	8021590 <memcpy>
    queuelen += pbuf_clen(p);
 801bed2:	4638      	mov	r0, r7
 801bed4:	f7fc fb42 	bl	801855c <pbuf_clen>
 801bed8:	4430      	add	r0, r6
 801beda:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801bedc:	2e09      	cmp	r6, #9
 801bede:	d9b4      	bls.n	801be4a <tcp_write+0x172>
      pbuf_free(p);
 801bee0:	4638      	mov	r0, r7
 801bee2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801bee6:	f7fc f9d5 	bl	8018294 <pbuf_free>
      goto memerr;
 801beea:	e09a      	b.n	801c022 <tcp_write+0x34a>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801beec:	b923      	cbnz	r3, 801bef8 <tcp_write+0x220>
 801beee:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	f000 80de 	beq.w	801c0b4 <tcp_write+0x3dc>
 801bef8:	4b65      	ldr	r3, [pc, #404]	; (801c090 <tcp_write+0x3b8>)
 801befa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801befe:	4967      	ldr	r1, [pc, #412]	; (801c09c <tcp_write+0x3c4>)
 801bf00:	4865      	ldr	r0, [pc, #404]	; (801c098 <tcp_write+0x3c0>)
 801bf02:	f006 fadf 	bl	80224c4 <iprintf>
  if (err != ERR_OK) {
 801bf06:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801bf0a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801bf0e:	f1b8 0f00 	cmp.w	r8, #0
 801bf12:	f47f af20 	bne.w	801bd56 <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801bf16:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	f040 80cf 	bne.w	801c0be <tcp_write+0x3e6>
  while (pos < len) {
 801bf20:	f1ba 0f00 	cmp.w	sl, #0
 801bf24:	f000 81ea 	beq.w	801c2fc <tcp_write+0x624>
          extendlen = seglen;
 801bf28:	2400      	movs	r4, #0
 801bf2a:	940d      	str	r4, [sp, #52]	; 0x34
 801bf2c:	940c      	str	r4, [sp, #48]	; 0x30
 801bf2e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801bf32:	e757      	b.n	801bde4 <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801bf34:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801bf36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf38:	459a      	cmp	sl, r3
 801bf3a:	f67f af4c 	bls.w	801bdd6 <tcp_write+0xfe>
 801bf3e:	2c00      	cmp	r4, #0
 801bf40:	f43f af49 	beq.w	801bdd6 <tcp_write+0xfe>
 801bf44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bf46:	8912      	ldrh	r2, [r2, #8]
 801bf48:	920d      	str	r2, [sp, #52]	; 0x34
 801bf4a:	2a00      	cmp	r2, #0
 801bf4c:	f000 8090 	beq.w	801c070 <tcp_write+0x398>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801bf50:	ebaa 0503 	sub.w	r5, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801bf54:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801bf56:	42a5      	cmp	r5, r4
 801bf58:	bfa8      	it	ge
 801bf5a:	4625      	movge	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801bf5c:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801bf5e:	b2af      	uxth	r7, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801bf60:	f100 8195 	bmi.w	801c28e <tcp_write+0x5b6>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801bf64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf66:	685a      	ldr	r2, [r3, #4]
 801bf68:	4613      	mov	r3, r2
 801bf6a:	6812      	ldr	r2, [r2, #0]
 801bf6c:	2a00      	cmp	r2, #0
 801bf6e:	d1fb      	bne.n	801bf68 <tcp_write+0x290>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801bf70:	920c      	str	r2, [sp, #48]	; 0x30
 801bf72:	7b1a      	ldrb	r2, [r3, #12]
 801bf74:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801bf78:	d106      	bne.n	801bf88 <tcp_write+0x2b0>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801bf7a:	895a      	ldrh	r2, [r3, #10]
 801bf7c:	685b      	ldr	r3, [r3, #4]
 801bf7e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801bf80:	9a07      	ldr	r2, [sp, #28]
 801bf82:	429a      	cmp	r2, r3
 801bf84:	f000 8174 	beq.w	801c270 <tcp_write+0x598>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801bf88:	2201      	movs	r2, #1
 801bf8a:	4639      	mov	r1, r7
 801bf8c:	2000      	movs	r0, #0
 801bf8e:	f7fc f9ef 	bl	8018370 <pbuf_alloc>
 801bf92:	900c      	str	r0, [sp, #48]	; 0x30
 801bf94:	2800      	cmp	r0, #0
 801bf96:	f000 8145 	beq.w	801c224 <tcp_write+0x54c>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801bf9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bf9c:	9b07      	ldr	r3, [sp, #28]
 801bf9e:	440b      	add	r3, r1
  u16_t extendlen = 0;
 801bfa0:	2100      	movs	r1, #0
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801bfa2:	6043      	str	r3, [r0, #4]
  u16_t extendlen = 0;
 801bfa4:	910d      	str	r1, [sp, #52]	; 0x34
          queuelen += pbuf_clen(concat_p);
 801bfa6:	f7fc fad9 	bl	801855c <pbuf_clen>
 801bfaa:	4406      	add	r6, r0
 801bfac:	b2b6      	uxth	r6, r6
      pos += seglen;
 801bfae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bfb0:	18fc      	adds	r4, r7, r3
 801bfb2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801bfb4:	b2a4      	uxth	r4, r4
 801bfb6:	e712      	b.n	801bdde <tcp_write+0x106>
    pos += seglen;
 801bfb8:	442c      	add	r4, r5
 801bfba:	9005      	str	r0, [sp, #20]
 801bfbc:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801bfbe:	45a2      	cmp	sl, r4
 801bfc0:	f63f af5f 	bhi.w	801be82 <tcp_write+0x1aa>
 801bfc4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801bfc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	f000 80e0 	beq.w	801c190 <tcp_write+0x4b8>
    for (p = last_unsent->p; p; p = p->next) {
 801bfd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bfd2:	6854      	ldr	r4, [r2, #4]
 801bfd4:	2c00      	cmp	r4, #0
 801bfd6:	f000 8095 	beq.w	801c104 <tcp_write+0x42c>
 801bfda:	469b      	mov	fp, r3
 801bfdc:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801bfde:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801bfe0:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801bfe2:	445b      	add	r3, fp
 801bfe4:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801bfe6:	2a00      	cmp	r2, #0
 801bfe8:	d07e      	beq.n	801c0e8 <tcp_write+0x410>
  u16_t extendlen = 0;
 801bfea:	4614      	mov	r4, r2
 801bfec:	e7f7      	b.n	801bfde <tcp_write+0x306>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801bfee:	4b28      	ldr	r3, [pc, #160]	; (801c090 <tcp_write+0x3b8>)
 801bff0:	f240 2271 	movw	r2, #625	; 0x271
 801bff4:	492a      	ldr	r1, [pc, #168]	; (801c0a0 <tcp_write+0x3c8>)
 801bff6:	4828      	ldr	r0, [pc, #160]	; (801c098 <tcp_write+0x3c0>)
 801bff8:	f006 fa64 	bl	80224c4 <iprintf>
 801bffc:	e703      	b.n	801be06 <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801bffe:	4b24      	ldr	r3, [pc, #144]	; (801c090 <tcp_write+0x3b8>)
 801c000:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c004:	4927      	ldr	r1, [pc, #156]	; (801c0a4 <tcp_write+0x3cc>)
 801c006:	4824      	ldr	r0, [pc, #144]	; (801c098 <tcp_write+0x3c0>)
 801c008:	f006 fa5c 	bl	80224c4 <iprintf>
 801c00c:	e732      	b.n	801be74 <tcp_write+0x19c>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801c00e:	4b20      	ldr	r3, [pc, #128]	; (801c090 <tcp_write+0x3b8>)
 801c010:	f240 2266 	movw	r2, #614	; 0x266
 801c014:	4924      	ldr	r1, [pc, #144]	; (801c0a8 <tcp_write+0x3d0>)
 801c016:	4820      	ldr	r0, [pc, #128]	; (801c098 <tcp_write+0x3c0>)
 801c018:	f006 fa54 	bl	80224c4 <iprintf>
 801c01c:	e753      	b.n	801bec6 <tcp_write+0x1ee>
 801c01e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  TCP_STATS_INC(tcp.memerr);
 801c022:	4922      	ldr	r1, [pc, #136]	; (801c0ac <tcp_write+0x3d4>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c024:	f8b9 201a 	ldrh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801c028:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c02c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801c030:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c032:	f8a9 201a 	strh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801c036:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801c03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c03c:	b113      	cbz	r3, 801c044 <tcp_write+0x36c>
    pbuf_free(concat_p);
 801c03e:	4618      	mov	r0, r3
 801c040:	f7fc f928 	bl	8018294 <pbuf_free>
  if (queue != NULL) {
 801c044:	f1b8 0f00 	cmp.w	r8, #0
 801c048:	d002      	beq.n	801c050 <tcp_write+0x378>
    tcp_segs_free(queue);
 801c04a:	4640      	mov	r0, r8
 801c04c:	f7fc ff58 	bl	8018f00 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801c050:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801c054:	b13b      	cbz	r3, 801c066 <tcp_write+0x38e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801c056:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801c05a:	b923      	cbnz	r3, 801c066 <tcp_write+0x38e>
 801c05c:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801c060:	2b00      	cmp	r3, #0
 801c062:	f000 808b 	beq.w	801c17c <tcp_write+0x4a4>
  return ERR_MEM;
 801c066:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c06a:	b011      	add	sp, #68	; 0x44
 801c06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct pbuf *concat_p = NULL;
 801c070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c072:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c074:	930c      	str	r3, [sp, #48]	; 0x30
 801c076:	e6b5      	b.n	801bde4 <tcp_write+0x10c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801c078:	4b05      	ldr	r3, [pc, #20]	; (801c090 <tcp_write+0x3b8>)
 801c07a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801c07e:	490c      	ldr	r1, [pc, #48]	; (801c0b0 <tcp_write+0x3d8>)
 801c080:	4805      	ldr	r0, [pc, #20]	; (801c098 <tcp_write+0x3c0>)
 801c082:	f006 fa1f 	bl	80224c4 <iprintf>
 801c086:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801c08a:	930a      	str	r3, [sp, #40]	; 0x28
 801c08c:	e682      	b.n	801bd94 <tcp_write+0xbc>
 801c08e:	bf00      	nop
 801c090:	08040870 	.word	0x08040870
 801c094:	08040afc 	.word	0x08040afc
 801c098:	08028d24 	.word	0x08028d24
 801c09c:	08040a90 	.word	0x08040a90
 801c0a0:	08040bb8 	.word	0x08040bb8
 801c0a4:	08040bc8 	.word	0x08040bc8
 801c0a8:	08040b78 	.word	0x08040b78
 801c0ac:	2002e08c 	.word	0x2002e08c
 801c0b0:	08040adc 	.word	0x08040adc
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801c0b4:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	f43f af35 	beq.w	801bf28 <tcp_write+0x250>
 801c0be:	4ba2      	ldr	r3, [pc, #648]	; (801c348 <tcp_write+0x670>)
 801c0c0:	f240 224a 	movw	r2, #586	; 0x24a
 801c0c4:	49a1      	ldr	r1, [pc, #644]	; (801c34c <tcp_write+0x674>)
 801c0c6:	48a2      	ldr	r0, [pc, #648]	; (801c350 <tcp_write+0x678>)
 801c0c8:	f006 f9fc 	bl	80224c4 <iprintf>
 801c0cc:	e728      	b.n	801bf20 <tcp_write+0x248>
 801c0ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801c0d0:	900a      	str	r0, [sp, #40]	; 0x28
 801c0d2:	e730      	b.n	801bf36 <tcp_write+0x25e>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801c0d4:	4b9c      	ldr	r3, [pc, #624]	; (801c348 <tcp_write+0x670>)
 801c0d6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801c0da:	499e      	ldr	r1, [pc, #632]	; (801c354 <tcp_write+0x67c>)
 801c0dc:	489c      	ldr	r0, [pc, #624]	; (801c350 <tcp_write+0x678>)
 801c0de:	f006 f9f1 	bl	80224c4 <iprintf>
 801c0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0e4:	891b      	ldrh	r3, [r3, #8]
 801c0e6:	e646      	b.n	801bd76 <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801c0e8:	6863      	ldr	r3, [r4, #4]
 801c0ea:	465a      	mov	r2, fp
 801c0ec:	8960      	ldrh	r0, [r4, #10]
 801c0ee:	4629      	mov	r1, r5
 801c0f0:	4418      	add	r0, r3
 801c0f2:	f005 fa4d 	bl	8021590 <memcpy>
        p->len += oversize_used;
 801c0f6:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801c0f8:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801c0fa:	445b      	add	r3, fp
 801c0fc:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801c0fe:	2a00      	cmp	r2, #0
 801c100:	f47f af73 	bne.w	801bfea <tcp_write+0x312>
    last_unsent->len += oversize_used;
 801c104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c106:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c108:	890b      	ldrh	r3, [r1, #8]
  pcb->unsent_oversize = oversize;
 801c10a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801c10e:	4418      	add	r0, r3
  if (concat_p != NULL) {
 801c110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    last_unsent->len += oversize_used;
 801c112:	8108      	strh	r0, [r1, #8]
  pcb->unsent_oversize = oversize;
 801c114:	f8a9 2068 	strh.w	r2, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d061      	beq.n	801c1e0 <tcp_write+0x508>
    pbuf_cat(last_unsent->p, concat_p);
 801c11c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c11e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c120:	6860      	ldr	r0, [r4, #4]
 801c122:	4629      	mov	r1, r5
 801c124:	f7fc fa38 	bl	8018598 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801c128:	892a      	ldrh	r2, [r5, #8]
 801c12a:	8923      	ldrh	r3, [r4, #8]
 801c12c:	4413      	add	r3, r2
 801c12e:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801c130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c132:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801c136:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801c13a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
  pcb->snd_lbb += len;
 801c13e:	4452      	add	r2, sl
  pcb->snd_queuelen = queuelen;
 801c140:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_buf -= len;
 801c144:	eba3 0a0a 	sub.w	sl, r3, sl
  pcb->snd_lbb += len;
 801c148:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801c14c:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801c150:	b11e      	cbz	r6, 801c15a <tcp_write+0x482>
    LWIP_ASSERT("tcp_write: valid queue length",
 801c152:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801c156:	2b00      	cmp	r3, #0
 801c158:	d036      	beq.n	801c1c8 <tcp_write+0x4f0>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801c15a:	b12f      	cbz	r7, 801c168 <tcp_write+0x490>
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	b11b      	cbz	r3, 801c168 <tcp_write+0x490>
 801c160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c162:	f012 0502 	ands.w	r5, r2, #2
 801c166:	d025      	beq.n	801c1b4 <tcp_write+0x4dc>
  return ERR_OK;
 801c168:	2000      	movs	r0, #0
}
 801c16a:	b011      	add	sp, #68	; 0x44
 801c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801c170:	4618      	mov	r0, r3
 801c172:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c176:	f7fc f88d 	bl	8018294 <pbuf_free>
        goto memerr;
 801c17a:	e752      	b.n	801c022 <tcp_write+0x34a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801c17c:	4b72      	ldr	r3, [pc, #456]	; (801c348 <tcp_write+0x670>)
 801c17e:	f240 3227 	movw	r2, #807	; 0x327
 801c182:	4975      	ldr	r1, [pc, #468]	; (801c358 <tcp_write+0x680>)
 801c184:	4872      	ldr	r0, [pc, #456]	; (801c350 <tcp_write+0x678>)
 801c186:	f006 f99d 	bl	80224c4 <iprintf>
  return ERR_MEM;
 801c18a:	f04f 30ff 	mov.w	r0, #4294967295
 801c18e:	e76c      	b.n	801c06a <tcp_write+0x392>
  pcb->unsent_oversize = oversize;
 801c190:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801c194:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801c198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d059      	beq.n	801c252 <tcp_write+0x57a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801c19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d1bb      	bne.n	801c11c <tcp_write+0x444>
 801c1a4:	4b68      	ldr	r3, [pc, #416]	; (801c348 <tcp_write+0x670>)
 801c1a6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801c1aa:	496c      	ldr	r1, [pc, #432]	; (801c35c <tcp_write+0x684>)
 801c1ac:	4868      	ldr	r0, [pc, #416]	; (801c350 <tcp_write+0x678>)
 801c1ae:	f006 f989 	bl	80224c4 <iprintf>
 801c1b2:	e7b3      	b.n	801c11c <tcp_write+0x444>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801c1b4:	2008      	movs	r0, #8
 801c1b6:	899c      	ldrh	r4, [r3, #12]
 801c1b8:	f7fa fa18 	bl	80165ec <lwip_htons>
 801c1bc:	4602      	mov	r2, r0
 801c1be:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801c1c0:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801c1c2:	4314      	orrs	r4, r2
 801c1c4:	819c      	strh	r4, [r3, #12]
 801c1c6:	e750      	b.n	801c06a <tcp_write+0x392>
    LWIP_ASSERT("tcp_write: valid queue length",
 801c1c8:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d1c4      	bne.n	801c15a <tcp_write+0x482>
 801c1d0:	4b5d      	ldr	r3, [pc, #372]	; (801c348 <tcp_write+0x670>)
 801c1d2:	f240 3212 	movw	r2, #786	; 0x312
 801c1d6:	4960      	ldr	r1, [pc, #384]	; (801c358 <tcp_write+0x680>)
 801c1d8:	485d      	ldr	r0, [pc, #372]	; (801c350 <tcp_write+0x678>)
 801c1da:	f006 f973 	bl	80224c4 <iprintf>
 801c1de:	e7bc      	b.n	801c15a <tcp_write+0x482>
  } else if (extendlen > 0) {
 801c1e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d0a4      	beq.n	801c130 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801c1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c1e8:	6859      	ldr	r1, [r3, #4]
 801c1ea:	2900      	cmp	r1, #0
 801c1ec:	d036      	beq.n	801c25c <tcp_write+0x584>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c1ee:	680a      	ldr	r2, [r1, #0]
 801c1f0:	2a00      	cmp	r2, #0
 801c1f2:	f000 80a7 	beq.w	801c344 <tcp_write+0x66c>
 801c1f6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c1f8:	e000      	b.n	801c1fc <tcp_write+0x524>
 801c1fa:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801c1fc:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c1fe:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801c200:	4423      	add	r3, r4
 801c202:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c204:	4611      	mov	r1, r2
 801c206:	2800      	cmp	r0, #0
 801c208:	d1f7      	bne.n	801c1fa <tcp_write+0x522>
    p->tot_len += extendlen;
 801c20a:	8910      	ldrh	r0, [r2, #8]
    p->len += extendlen;
 801c20c:	8951      	ldrh	r1, [r2, #10]
    p->tot_len += extendlen;
 801c20e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    last_unsent->len += extendlen;
 801c210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    p->tot_len += extendlen;
 801c212:	4420      	add	r0, r4
    p->len += extendlen;
 801c214:	4421      	add	r1, r4
    last_unsent->len += extendlen;
 801c216:	891b      	ldrh	r3, [r3, #8]
    p->tot_len += extendlen;
 801c218:	8110      	strh	r0, [r2, #8]
    last_unsent->len += extendlen;
 801c21a:	4423      	add	r3, r4
    p->len += extendlen;
 801c21c:	8151      	strh	r1, [r2, #10]
    last_unsent->len += extendlen;
 801c21e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c220:	8113      	strh	r3, [r2, #8]
 801c222:	e785      	b.n	801c130 <tcp_write+0x458>
  TCP_STATS_INC(tcp.memerr);
 801c224:	494e      	ldr	r1, [pc, #312]	; (801c360 <tcp_write+0x688>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c226:	f8b9 201a 	ldrh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801c22a:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c22e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801c232:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c234:	f8a9 201a 	strh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801c238:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801c23c:	e708      	b.n	801c050 <tcp_write+0x378>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801c23e:	4b42      	ldr	r3, [pc, #264]	; (801c348 <tcp_write+0x670>)
 801c240:	f240 1255 	movw	r2, #341	; 0x155
 801c244:	4947      	ldr	r1, [pc, #284]	; (801c364 <tcp_write+0x68c>)
 801c246:	4842      	ldr	r0, [pc, #264]	; (801c350 <tcp_write+0x678>)
 801c248:	f006 f93c 	bl	80224c4 <iprintf>
  if (err != ERR_OK) {
 801c24c:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801c250:	e65b      	b.n	801bf0a <tcp_write+0x232>
  } else if (extendlen > 0) {
 801c252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c254:	b1a3      	cbz	r3, 801c280 <tcp_write+0x5a8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801c256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d1c4      	bne.n	801c1e6 <tcp_write+0x50e>
 801c25c:	4b3a      	ldr	r3, [pc, #232]	; (801c348 <tcp_write+0x670>)
 801c25e:	f240 22e6 	movw	r2, #742	; 0x2e6
 801c262:	4941      	ldr	r1, [pc, #260]	; (801c368 <tcp_write+0x690>)
 801c264:	483a      	ldr	r0, [pc, #232]	; (801c350 <tcp_write+0x678>)
 801c266:	f006 f92d 	bl	80224c4 <iprintf>
 801c26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c26c:	6859      	ldr	r1, [r3, #4]
 801c26e:	e7be      	b.n	801c1ee <tcp_write+0x516>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801c270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c272:	2b00      	cmp	r3, #0
 801c274:	d149      	bne.n	801c30a <tcp_write+0x632>
          extendlen = seglen;
 801c276:	970d      	str	r7, [sp, #52]	; 0x34
 801c278:	e699      	b.n	801bfae <tcp_write+0x2d6>
    return ERR_CONN;
 801c27a:	f06f 000a 	mvn.w	r0, #10
 801c27e:	e6f4      	b.n	801c06a <tcp_write+0x392>
  if (last_unsent == NULL) {
 801c280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c282:	2b00      	cmp	r3, #0
 801c284:	f47f af54 	bne.w	801c130 <tcp_write+0x458>
    pcb->unsent = queue;
 801c288:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801c28c:	e753      	b.n	801c136 <tcp_write+0x45e>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801c28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c290:	2301      	movs	r3, #1
 801c292:	4639      	mov	r1, r7
 801c294:	2000      	movs	r0, #0
 801c296:	9302      	str	r3, [sp, #8]
 801c298:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801c29c:	e9cd 9200 	strd	r9, r2, [sp]
 801c2a0:	4622      	mov	r2, r4
 801c2a2:	f7ff fb59 	bl	801b958 <tcp_pbuf_prealloc>
 801c2a6:	4604      	mov	r4, r0
 801c2a8:	900c      	str	r0, [sp, #48]	; 0x30
 801c2aa:	2800      	cmp	r0, #0
 801c2ac:	d0ba      	beq.n	801c224 <tcp_write+0x54c>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801c2ae:	9b07      	ldr	r3, [sp, #28]
 801c2b0:	463a      	mov	r2, r7
 801c2b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c2b4:	6840      	ldr	r0, [r0, #4]
 801c2b6:	1859      	adds	r1, r3, r1
  u16_t extendlen = 0;
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	930d      	str	r3, [sp, #52]	; 0x34
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801c2bc:	f005 f968 	bl	8021590 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801c2c0:	4620      	mov	r0, r4
 801c2c2:	f7fc f94b 	bl	801855c <pbuf_clen>
 801c2c6:	4406      	add	r6, r0
 801c2c8:	b2b6      	uxth	r6, r6
 801c2ca:	e670      	b.n	801bfae <tcp_write+0x2d6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c2cc:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801c2d0:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c2d8:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801c2dc:	e6c5      	b.n	801c06a <tcp_write+0x392>
    TCP_STATS_INC(tcp.memerr);
 801c2de:	4920      	ldr	r1, [pc, #128]	; (801c360 <tcp_write+0x688>)
    return ERR_MEM;
 801c2e0:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c2e4:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    TCP_STATS_INC(tcp.memerr);
 801c2e8:	f8b1 209c 	ldrh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801c2f0:	3201      	adds	r2, #1
 801c2f2:	f8a1 209c 	strh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c2f6:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801c2fa:	e6b6      	b.n	801c06a <tcp_write+0x392>
  pcb->unsent_oversize = oversize;
 801c2fc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801c300:	46d0      	mov	r8, sl
 801c302:	4657      	mov	r7, sl
 801c304:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801c308:	e7be      	b.n	801c288 <tcp_write+0x5b0>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801c30a:	4b0f      	ldr	r3, [pc, #60]	; (801c348 <tcp_write+0x670>)
 801c30c:	f240 2231 	movw	r2, #561	; 0x231
 801c310:	4916      	ldr	r1, [pc, #88]	; (801c36c <tcp_write+0x694>)
 801c312:	480f      	ldr	r0, [pc, #60]	; (801c350 <tcp_write+0x678>)
          extendlen = seglen;
 801c314:	970d      	str	r7, [sp, #52]	; 0x34
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801c316:	f006 f8d5 	bl	80224c4 <iprintf>
 801c31a:	e648      	b.n	801bfae <tcp_write+0x2d6>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801c31c:	4b0a      	ldr	r3, [pc, #40]	; (801c348 <tcp_write+0x670>)
 801c31e:	f240 12ad 	movw	r2, #429	; 0x1ad
 801c322:	4913      	ldr	r1, [pc, #76]	; (801c370 <tcp_write+0x698>)
 801c324:	480a      	ldr	r0, [pc, #40]	; (801c350 <tcp_write+0x678>)
 801c326:	f006 f8cd 	bl	80224c4 <iprintf>
 801c32a:	f06f 000f 	mvn.w	r0, #15
 801c32e:	e69c      	b.n	801c06a <tcp_write+0x392>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801c330:	4b05      	ldr	r3, [pc, #20]	; (801c348 <tcp_write+0x670>)
 801c332:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801c336:	490f      	ldr	r1, [pc, #60]	; (801c374 <tcp_write+0x69c>)
 801c338:	4805      	ldr	r0, [pc, #20]	; (801c350 <tcp_write+0x678>)
 801c33a:	f006 f8c3 	bl	80224c4 <iprintf>
 801c33e:	f06f 000f 	mvn.w	r0, #15
 801c342:	e692      	b.n	801c06a <tcp_write+0x392>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c344:	460a      	mov	r2, r1
 801c346:	e760      	b.n	801c20a <tcp_write+0x532>
 801c348:	08040870 	.word	0x08040870
 801c34c:	08040b48 	.word	0x08040b48
 801c350:	08028d24 	.word	0x08028d24
 801c354:	08040ac4 	.word	0x08040ac4
 801c358:	08040c4c 	.word	0x08040c4c
 801c35c:	08040bdc 	.word	0x08040bdc
 801c360:	2002e08c 	.word	0x2002e08c
 801c364:	08040a54 	.word	0x08040a54
 801c368:	08040c14 	.word	0x08040c14
 801c36c:	08040b1c 	.word	0x08040b1c
 801c370:	08040a20 	.word	0x08040a20
 801c374:	08040a08 	.word	0x08040a08

0801c378 <tcp_split_unsent_seg>:
{
 801c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801c37c:	4605      	mov	r5, r0
{
 801c37e:	b083      	sub	sp, #12
 801c380:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801c382:	2800      	cmp	r0, #0
 801c384:	f000 80bf 	beq.w	801c506 <tcp_split_unsent_seg+0x18e>
  useg = pcb->unsent;
 801c388:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801c38a:	2e00      	cmp	r6, #0
 801c38c:	d037      	beq.n	801c3fe <tcp_split_unsent_seg+0x86>
  if (split == 0) {
 801c38e:	2c00      	cmp	r4, #0
 801c390:	f000 80c9 	beq.w	801c526 <tcp_split_unsent_seg+0x1ae>
  if (useg->len <= split) {
 801c394:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 801c398:	45a0      	cmp	r8, r4
 801c39a:	f240 80b0 	bls.w	801c4fe <tcp_split_unsent_seg+0x186>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801c39e:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801c3a0:	42a3      	cmp	r3, r4
 801c3a2:	d33b      	bcc.n	801c41c <tcp_split_unsent_seg+0xa4>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801c3a4:	f1b8 0f00 	cmp.w	r8, #0
 801c3a8:	d02e      	beq.n	801c408 <tcp_split_unsent_seg+0x90>
  optflags = useg->flags;
 801c3aa:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801c3ae:	eba8 0704 	sub.w	r7, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801c3b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c3b6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801c3b8:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801c3bc:	b2bf      	uxth	r7, r7
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801c3be:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801c3c2:	eb07 010b 	add.w	r1, r7, fp
 801c3c6:	b289      	uxth	r1, r1
 801c3c8:	f7fb ffd2 	bl	8018370 <pbuf_alloc>
  if (p == NULL) {
 801c3cc:	4681      	mov	r9, r0
 801c3ce:	b390      	cbz	r0, 801c436 <tcp_split_unsent_seg+0xbe>
  offset = useg->p->tot_len - useg->len + split;
 801c3d0:	6870      	ldr	r0, [r6, #4]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801c3d2:	463a      	mov	r2, r7
  offset = useg->p->tot_len - useg->len + split;
 801c3d4:	8931      	ldrh	r1, [r6, #8]
 801c3d6:	8903      	ldrh	r3, [r0, #8]
 801c3d8:	1a5b      	subs	r3, r3, r1
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801c3da:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 801c3de:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801c3e0:	4459      	add	r1, fp
 801c3e2:	b29b      	uxth	r3, r3
 801c3e4:	f7fc f9ee 	bl	80187c4 <pbuf_copy_partial>
 801c3e8:	42b8      	cmp	r0, r7
 801c3ea:	d02f      	beq.n	801c44c <tcp_split_unsent_seg+0xd4>
  TCP_STATS_INC(tcp.memerr);
 801c3ec:	4a53      	ldr	r2, [pc, #332]	; (801c53c <tcp_split_unsent_seg+0x1c4>)
    pbuf_free(p);
 801c3ee:	4648      	mov	r0, r9
  TCP_STATS_INC(tcp.memerr);
 801c3f0:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801c3f4:	3301      	adds	r3, #1
 801c3f6:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pbuf_free(p);
 801c3fa:	f7fb ff4b 	bl	8018294 <pbuf_free>
  return ERR_MEM;
 801c3fe:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c402:	b003      	add	sp, #12
 801c404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801c408:	4b4d      	ldr	r3, [pc, #308]	; (801c540 <tcp_split_unsent_seg+0x1c8>)
 801c40a:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801c40e:	494d      	ldr	r1, [pc, #308]	; (801c544 <tcp_split_unsent_seg+0x1cc>)
 801c410:	484d      	ldr	r0, [pc, #308]	; (801c548 <tcp_split_unsent_seg+0x1d0>)
 801c412:	f006 f857 	bl	80224c4 <iprintf>
 801c416:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 801c41a:	e7c6      	b.n	801c3aa <tcp_split_unsent_seg+0x32>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801c41c:	4b48      	ldr	r3, [pc, #288]	; (801c540 <tcp_split_unsent_seg+0x1c8>)
 801c41e:	f240 325b 	movw	r2, #859	; 0x35b
 801c422:	494a      	ldr	r1, [pc, #296]	; (801c54c <tcp_split_unsent_seg+0x1d4>)
 801c424:	4848      	ldr	r0, [pc, #288]	; (801c548 <tcp_split_unsent_seg+0x1d0>)
 801c426:	f006 f84d 	bl	80224c4 <iprintf>
 801c42a:	f8b6 8008 	ldrh.w	r8, [r6, #8]
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801c42e:	f1b8 0f00 	cmp.w	r8, #0
 801c432:	d1ba      	bne.n	801c3aa <tcp_split_unsent_seg+0x32>
 801c434:	e7e8      	b.n	801c408 <tcp_split_unsent_seg+0x90>
  TCP_STATS_INC(tcp.memerr);
 801c436:	4a41      	ldr	r2, [pc, #260]	; (801c53c <tcp_split_unsent_seg+0x1c4>)
  return ERR_MEM;
 801c438:	f04f 30ff 	mov.w	r0, #4294967295
  TCP_STATS_INC(tcp.memerr);
 801c43c:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801c440:	3301      	adds	r3, #1
 801c442:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
}
 801c446:	b003      	add	sp, #12
 801c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801c44c:	68f3      	ldr	r3, [r6, #12]
 801c44e:	8998      	ldrh	r0, [r3, #12]
 801c450:	f7fa f8cc 	bl	80165ec <lwip_htons>
  if (split_flags & TCP_PSH) {
 801c454:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801c458:	b2c7      	uxtb	r7, r0
  if (split_flags & TCP_PSH) {
 801c45a:	d15c      	bne.n	801c516 <tcp_split_unsent_seg+0x19e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801c45c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801c460:	07fb      	lsls	r3, r7, #31
 801c462:	d503      	bpl.n	801c46c <tcp_split_unsent_seg+0xf4>
    split_flags &= ~TCP_FIN;
 801c464:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801c468:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801c46c:	68f3      	ldr	r3, [r6, #12]
 801c46e:	6858      	ldr	r0, [r3, #4]
 801c470:	f7fa f8c0 	bl	80165f4 <lwip_htonl>
 801c474:	f8cd a000 	str.w	sl, [sp]
 801c478:	1823      	adds	r3, r4, r0
 801c47a:	465a      	mov	r2, fp
 801c47c:	4649      	mov	r1, r9
 801c47e:	4628      	mov	r0, r5
 801c480:	f7ff faba 	bl	801b9f8 <tcp_create_segment>
  if (seg == NULL) {
 801c484:	4682      	mov	sl, r0
 801c486:	2800      	cmp	r0, #0
 801c488:	d0b0      	beq.n	801c3ec <tcp_split_unsent_seg+0x74>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c48a:	6870      	ldr	r0, [r6, #4]
 801c48c:	eba4 0408 	sub.w	r4, r4, r8
 801c490:	f7fc f864 	bl	801855c <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c494:	f8d6 c004 	ldr.w	ip, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c498:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 801c49c:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c49e:	f8bc 1008 	ldrh.w	r1, [ip, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c4a2:	1a13      	subs	r3, r2, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c4a4:	4660      	mov	r0, ip
 801c4a6:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c4a8:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c4ac:	b289      	uxth	r1, r1
 801c4ae:	f7fb fffd 	bl	80184ac <pbuf_realloc>
  useg->len -= remainder;
 801c4b2:	8932      	ldrh	r2, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801c4b4:	68f3      	ldr	r3, [r6, #12]
 801c4b6:	4638      	mov	r0, r7
  useg->len -= remainder;
 801c4b8:	4414      	add	r4, r2
 801c4ba:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801c4bc:	899c      	ldrh	r4, [r3, #12]
 801c4be:	f7fa f895 	bl	80165ec <lwip_htons>
 801c4c2:	4602      	mov	r2, r0
 801c4c4:	68f3      	ldr	r3, [r6, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801c4c6:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801c4c8:	4314      	orrs	r4, r2
 801c4ca:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801c4cc:	f7fc f846 	bl	801855c <pbuf_clen>
 801c4d0:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 801c4d4:	4603      	mov	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c4d6:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801c4da:	4413      	add	r3, r2
 801c4dc:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c4e0:	f7fc f83c 	bl	801855c <pbuf_clen>
 801c4e4:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
  seg->next = useg->next;
 801c4e8:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c4ea:	4410      	add	r0, r2
 801c4ec:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801c4f0:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801c4f4:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801c4f8:	f8da 0000 	ldr.w	r0, [sl]
 801c4fc:	b180      	cbz	r0, 801c520 <tcp_split_unsent_seg+0x1a8>
    return ERR_OK;
 801c4fe:	2000      	movs	r0, #0
}
 801c500:	b003      	add	sp, #12
 801c502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801c506:	4b0e      	ldr	r3, [pc, #56]	; (801c540 <tcp_split_unsent_seg+0x1c8>)
 801c508:	f240 324b 	movw	r2, #843	; 0x34b
 801c50c:	4910      	ldr	r1, [pc, #64]	; (801c550 <tcp_split_unsent_seg+0x1d8>)
 801c50e:	480e      	ldr	r0, [pc, #56]	; (801c548 <tcp_split_unsent_seg+0x1d0>)
 801c510:	f005 ffd8 	bl	80224c4 <iprintf>
 801c514:	e738      	b.n	801c388 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801c516:	f007 0737 	and.w	r7, r7, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801c51a:	f04f 0b08 	mov.w	fp, #8
 801c51e:	e79f      	b.n	801c460 <tcp_split_unsent_seg+0xe8>
    pcb->unsent_oversize = 0;
 801c520:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
 801c524:	e76d      	b.n	801c402 <tcp_split_unsent_seg+0x8a>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801c526:	4b06      	ldr	r3, [pc, #24]	; (801c540 <tcp_split_unsent_seg+0x1c8>)
 801c528:	f240 3253 	movw	r2, #851	; 0x353
 801c52c:	4909      	ldr	r1, [pc, #36]	; (801c554 <tcp_split_unsent_seg+0x1dc>)
 801c52e:	4806      	ldr	r0, [pc, #24]	; (801c548 <tcp_split_unsent_seg+0x1d0>)
 801c530:	f005 ffc8 	bl	80224c4 <iprintf>
    return ERR_VAL;
 801c534:	f06f 0005 	mvn.w	r0, #5
 801c538:	e763      	b.n	801c402 <tcp_split_unsent_seg+0x8a>
 801c53a:	bf00      	nop
 801c53c:	2002e08c 	.word	0x2002e08c
 801c540:	08040870 	.word	0x08040870
 801c544:	08040cc4 	.word	0x08040cc4
 801c548:	08028d24 	.word	0x08028d24
 801c54c:	08040cb4 	.word	0x08040cb4
 801c550:	08040c6c 	.word	0x08040c6c
 801c554:	08040c90 	.word	0x08040c90

0801c558 <tcp_enqueue_flags>:
{
 801c558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801c55c:	f011 0703 	ands.w	r7, r1, #3
{
 801c560:	b082      	sub	sp, #8
 801c562:	460d      	mov	r5, r1
 801c564:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801c566:	d064      	beq.n	801c632 <tcp_enqueue_flags+0xda>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801c568:	2c00      	cmp	r4, #0
 801c56a:	d06b      	beq.n	801c644 <tcp_enqueue_flags+0xec>
  if (flags & TCP_SYN) {
 801c56c:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c570:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801c574:	d049      	beq.n	801c60a <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c576:	2104      	movs	r1, #4
 801c578:	2036      	movs	r0, #54	; 0x36
 801c57a:	f7fb fef9 	bl	8018370 <pbuf_alloc>
 801c57e:	4606      	mov	r6, r0
 801c580:	2800      	cmp	r0, #0
 801c582:	d049      	beq.n	801c618 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801c584:	8943      	ldrh	r3, [r0, #10]
 801c586:	2b03      	cmp	r3, #3
 801c588:	d878      	bhi.n	801c67c <tcp_enqueue_flags+0x124>
 801c58a:	4b44      	ldr	r3, [pc, #272]	; (801c69c <tcp_enqueue_flags+0x144>)
 801c58c:	f240 4239 	movw	r2, #1081	; 0x439
 801c590:	4943      	ldr	r1, [pc, #268]	; (801c6a0 <tcp_enqueue_flags+0x148>)
    optflags = TF_SEG_OPTS_MSS;
 801c592:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801c596:	4843      	ldr	r0, [pc, #268]	; (801c6a4 <tcp_enqueue_flags+0x14c>)
 801c598:	f005 ff94 	bl	80224c4 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801c59c:	4631      	mov	r1, r6
 801c59e:	f8cd 8000 	str.w	r8, [sp]
 801c5a2:	462a      	mov	r2, r5
 801c5a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801c5a6:	4620      	mov	r0, r4
 801c5a8:	f7ff fa26 	bl	801b9f8 <tcp_create_segment>
 801c5ac:	4606      	mov	r6, r0
 801c5ae:	2800      	cmp	r0, #0
 801c5b0:	d032      	beq.n	801c618 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801c5b2:	68c3      	ldr	r3, [r0, #12]
 801c5b4:	079a      	lsls	r2, r3, #30
 801c5b6:	d159      	bne.n	801c66c <tcp_enqueue_flags+0x114>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801c5b8:	8933      	ldrh	r3, [r6, #8]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d14a      	bne.n	801c654 <tcp_enqueue_flags+0xfc>
  if (pcb->unsent == NULL) {
 801c5be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d051      	beq.n	801c668 <tcp_enqueue_flags+0x110>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801c5c4:	461a      	mov	r2, r3
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d1fb      	bne.n	801c5c4 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801c5cc:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801c5d4:	b117      	cbz	r7, 801c5dc <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801c5d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801c5d8:	3301      	adds	r3, #1
 801c5da:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801c5dc:	07eb      	lsls	r3, r5, #31
 801c5de:	d503      	bpl.n	801c5e8 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801c5e0:	8b63      	ldrh	r3, [r4, #26]
 801c5e2:	f043 0320 	orr.w	r3, r3, #32
 801c5e6:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c5e8:	6870      	ldr	r0, [r6, #4]
 801c5ea:	f7fb ffb7 	bl	801855c <pbuf_clen>
 801c5ee:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801c5f2:	4418      	add	r0, r3
 801c5f4:	b280      	uxth	r0, r0
 801c5f6:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801c5fa:	b118      	cbz	r0, 801c604 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801c5fc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801c5fe:	2800      	cmp	r0, #0
 801c600:	d03f      	beq.n	801c682 <tcp_enqueue_flags+0x12a>
  return ERR_OK;
 801c602:	2000      	movs	r0, #0
}
 801c604:	b002      	add	sp, #8
 801c606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c60a:	4641      	mov	r1, r8
 801c60c:	2036      	movs	r0, #54	; 0x36
 801c60e:	f7fb feaf 	bl	8018370 <pbuf_alloc>
 801c612:	4606      	mov	r6, r0
 801c614:	2800      	cmp	r0, #0
 801c616:	d1c1      	bne.n	801c59c <tcp_enqueue_flags+0x44>
    TCP_STATS_INC(tcp.memerr);
 801c618:	4923      	ldr	r1, [pc, #140]	; (801c6a8 <tcp_enqueue_flags+0x150>)
    return ERR_MEM;
 801c61a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c61e:	8b62      	ldrh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801c620:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801c628:	3301      	adds	r3, #1
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c62a:	8362      	strh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801c62c:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
    return ERR_MEM;
 801c630:	e7e8      	b.n	801c604 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801c632:	4b1a      	ldr	r3, [pc, #104]	; (801c69c <tcp_enqueue_flags+0x144>)
 801c634:	f240 4211 	movw	r2, #1041	; 0x411
 801c638:	491c      	ldr	r1, [pc, #112]	; (801c6ac <tcp_enqueue_flags+0x154>)
 801c63a:	481a      	ldr	r0, [pc, #104]	; (801c6a4 <tcp_enqueue_flags+0x14c>)
 801c63c:	f005 ff42 	bl	80224c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801c640:	2c00      	cmp	r4, #0
 801c642:	d193      	bne.n	801c56c <tcp_enqueue_flags+0x14>
 801c644:	4b15      	ldr	r3, [pc, #84]	; (801c69c <tcp_enqueue_flags+0x144>)
 801c646:	f240 4213 	movw	r2, #1043	; 0x413
 801c64a:	4919      	ldr	r1, [pc, #100]	; (801c6b0 <tcp_enqueue_flags+0x158>)
 801c64c:	4815      	ldr	r0, [pc, #84]	; (801c6a4 <tcp_enqueue_flags+0x14c>)
 801c64e:	f005 ff39 	bl	80224c4 <iprintf>
 801c652:	e78b      	b.n	801c56c <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801c654:	4b11      	ldr	r3, [pc, #68]	; (801c69c <tcp_enqueue_flags+0x144>)
 801c656:	f240 4243 	movw	r2, #1091	; 0x443
 801c65a:	4916      	ldr	r1, [pc, #88]	; (801c6b4 <tcp_enqueue_flags+0x15c>)
 801c65c:	4811      	ldr	r0, [pc, #68]	; (801c6a4 <tcp_enqueue_flags+0x14c>)
 801c65e:	f005 ff31 	bl	80224c4 <iprintf>
  if (pcb->unsent == NULL) {
 801c662:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c664:	2b00      	cmp	r3, #0
 801c666:	d1ad      	bne.n	801c5c4 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801c668:	66e6      	str	r6, [r4, #108]	; 0x6c
 801c66a:	e7b0      	b.n	801c5ce <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801c66c:	4b0b      	ldr	r3, [pc, #44]	; (801c69c <tcp_enqueue_flags+0x144>)
 801c66e:	f240 4242 	movw	r2, #1090	; 0x442
 801c672:	4911      	ldr	r1, [pc, #68]	; (801c6b8 <tcp_enqueue_flags+0x160>)
 801c674:	480b      	ldr	r0, [pc, #44]	; (801c6a4 <tcp_enqueue_flags+0x14c>)
 801c676:	f005 ff25 	bl	80224c4 <iprintf>
 801c67a:	e79d      	b.n	801c5b8 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801c67c:	f04f 0801 	mov.w	r8, #1
 801c680:	e78c      	b.n	801c59c <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801c682:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801c684:	2c00      	cmp	r4, #0
 801c686:	d1bd      	bne.n	801c604 <tcp_enqueue_flags+0xac>
 801c688:	4b04      	ldr	r3, [pc, #16]	; (801c69c <tcp_enqueue_flags+0x144>)
 801c68a:	f240 4265 	movw	r2, #1125	; 0x465
 801c68e:	490b      	ldr	r1, [pc, #44]	; (801c6bc <tcp_enqueue_flags+0x164>)
 801c690:	4804      	ldr	r0, [pc, #16]	; (801c6a4 <tcp_enqueue_flags+0x14c>)
 801c692:	f005 ff17 	bl	80224c4 <iprintf>
  return ERR_OK;
 801c696:	4620      	mov	r0, r4
 801c698:	e7b4      	b.n	801c604 <tcp_enqueue_flags+0xac>
 801c69a:	bf00      	nop
 801c69c:	08040870 	.word	0x08040870
 801c6a0:	08040d4c 	.word	0x08040d4c
 801c6a4:	08028d24 	.word	0x08028d24
 801c6a8:	2002e08c 	.word	0x2002e08c
 801c6ac:	08040cd4 	.word	0x08040cd4
 801c6b0:	08040d2c 	.word	0x08040d2c
 801c6b4:	08040da0 	.word	0x08040da0
 801c6b8:	08040d88 	.word	0x08040d88
 801c6bc:	08040dcc 	.word	0x08040dcc

0801c6c0 <tcp_send_fin>:
{
 801c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801c6c2:	4606      	mov	r6, r0
 801c6c4:	b188      	cbz	r0, 801c6ea <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801c6c6:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801c6c8:	b14c      	cbz	r4, 801c6de <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c6ca:	4625      	mov	r5, r4
 801c6cc:	6824      	ldr	r4, [r4, #0]
 801c6ce:	2c00      	cmp	r4, #0
 801c6d0:	d1fb      	bne.n	801c6ca <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801c6d2:	68eb      	ldr	r3, [r5, #12]
 801c6d4:	8998      	ldrh	r0, [r3, #12]
 801c6d6:	f7f9 ff89 	bl	80165ec <lwip_htons>
 801c6da:	0743      	lsls	r3, r0, #29
 801c6dc:	d00d      	beq.n	801c6fa <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801c6de:	4630      	mov	r0, r6
 801c6e0:	2101      	movs	r1, #1
}
 801c6e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801c6e6:	f7ff bf37 	b.w	801c558 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801c6ea:	4b0b      	ldr	r3, [pc, #44]	; (801c718 <tcp_send_fin+0x58>)
 801c6ec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801c6f0:	490a      	ldr	r1, [pc, #40]	; (801c71c <tcp_send_fin+0x5c>)
 801c6f2:	480b      	ldr	r0, [pc, #44]	; (801c720 <tcp_send_fin+0x60>)
 801c6f4:	f005 fee6 	bl	80224c4 <iprintf>
 801c6f8:	e7e5      	b.n	801c6c6 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801c6fa:	68eb      	ldr	r3, [r5, #12]
 801c6fc:	2001      	movs	r0, #1
 801c6fe:	899f      	ldrh	r7, [r3, #12]
 801c700:	f7f9 ff74 	bl	80165ec <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801c704:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801c706:	68ea      	ldr	r2, [r5, #12]
 801c708:	4338      	orrs	r0, r7
      tcp_set_flags(pcb, TF_FIN);
 801c70a:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801c70e:	8190      	strh	r0, [r2, #12]
}
 801c710:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801c712:	8373      	strh	r3, [r6, #26]
}
 801c714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c716:	bf00      	nop
 801c718:	08040870 	.word	0x08040870
 801c71c:	08040df4 	.word	0x08040df4
 801c720:	08028d24 	.word	0x08028d24

0801c724 <tcp_rexmit_rto_prepare>:
{
 801c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801c726:	4605      	mov	r5, r0
 801c728:	b378      	cbz	r0, 801c78a <tcp_rexmit_rto_prepare+0x66>
  if (pcb->unacked == NULL) {
 801c72a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801c72c:	b924      	cbnz	r4, 801c738 <tcp_rexmit_rto_prepare+0x14>
 801c72e:	e029      	b.n	801c784 <tcp_rexmit_rto_prepare+0x60>
    if (tcp_output_segment_busy(seg)) {
 801c730:	f7ff f8fa 	bl	801b928 <tcp_output_segment_busy>
 801c734:	bb30      	cbnz	r0, 801c784 <tcp_rexmit_rto_prepare+0x60>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c736:	6824      	ldr	r4, [r4, #0]
 801c738:	6823      	ldr	r3, [r4, #0]
    if (tcp_output_segment_busy(seg)) {
 801c73a:	4620      	mov	r0, r4
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d1f7      	bne.n	801c730 <tcp_rexmit_rto_prepare+0xc>
  if (tcp_output_segment_busy(seg)) {
 801c740:	f7ff f8f2 	bl	801b928 <tcp_output_segment_busy>
 801c744:	4606      	mov	r6, r0
 801c746:	b9e8      	cbnz	r0, 801c784 <tcp_rexmit_rto_prepare+0x60>
  tcp_set_flags(pcb, TF_RTO);
 801c748:	8b6b      	ldrh	r3, [r5, #26]
  seg->next = pcb->unsent;
 801c74a:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  pcb->unsent = pcb->unacked;
 801c74c:	6f29      	ldr	r1, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 801c74e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801c752:	6022      	str	r2, [r4, #0]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c754:	68e2      	ldr	r2, [r4, #12]
  tcp_set_flags(pcb, TF_RTO);
 801c756:	836b      	strh	r3, [r5, #26]
  pcb->unacked = NULL;
 801c758:	e9c5 101b 	strd	r1, r0, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c75c:	6850      	ldr	r0, [r2, #4]
 801c75e:	f7f9 ff49 	bl	80165f4 <lwip_htonl>
 801c762:	68e3      	ldr	r3, [r4, #12]
 801c764:	4607      	mov	r7, r0
 801c766:	8924      	ldrh	r4, [r4, #8]
 801c768:	8998      	ldrh	r0, [r3, #12]
 801c76a:	f7f9 ff3f 	bl	80165ec <lwip_htons>
 801c76e:	4603      	mov	r3, r0
 801c770:	4427      	add	r7, r4
  return ERR_OK;
 801c772:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c774:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 801c778:	636e      	str	r6, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c77a:	bf18      	it	ne
 801c77c:	2301      	movne	r3, #1
 801c77e:	443b      	add	r3, r7
 801c780:	64eb      	str	r3, [r5, #76]	; 0x4c
}
 801c782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801c784:	f06f 0005 	mvn.w	r0, #5
}
 801c788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801c78a:	4b04      	ldr	r3, [pc, #16]	; (801c79c <tcp_rexmit_rto_prepare+0x78>)
 801c78c:	f240 6263 	movw	r2, #1635	; 0x663
 801c790:	4903      	ldr	r1, [pc, #12]	; (801c7a0 <tcp_rexmit_rto_prepare+0x7c>)
 801c792:	4804      	ldr	r0, [pc, #16]	; (801c7a4 <tcp_rexmit_rto_prepare+0x80>)
 801c794:	f005 fe96 	bl	80224c4 <iprintf>
 801c798:	e7c7      	b.n	801c72a <tcp_rexmit_rto_prepare+0x6>
 801c79a:	bf00      	nop
 801c79c:	08040870 	.word	0x08040870
 801c7a0:	08040e10 	.word	0x08040e10
 801c7a4:	08028d24 	.word	0x08028d24

0801c7a8 <tcp_rexmit>:
{
 801c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801c7aa:	4607      	mov	r7, r0
 801c7ac:	b378      	cbz	r0, 801c80e <tcp_rexmit+0x66>
  if (pcb->unacked == NULL) {
 801c7ae:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801c7b0:	2e00      	cmp	r6, #0
 801c7b2:	d034      	beq.n	801c81e <tcp_rexmit+0x76>
  if (tcp_output_segment_busy(seg)) {
 801c7b4:	4630      	mov	r0, r6
 801c7b6:	f7ff f8b7 	bl	801b928 <tcp_output_segment_busy>
 801c7ba:	bb80      	cbnz	r0, 801c81e <tcp_rexmit+0x76>
  pcb->unacked = seg->next;
 801c7bc:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801c7be:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801c7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801c7c4:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801c7c6:	b91b      	cbnz	r3, 801c7d0 <tcp_rexmit+0x28>
 801c7c8:	e00f      	b.n	801c7ea <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801c7ca:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801c7cc:	682b      	ldr	r3, [r5, #0]
 801c7ce:	b163      	cbz	r3, 801c7ea <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c7d0:	68db      	ldr	r3, [r3, #12]
 801c7d2:	6858      	ldr	r0, [r3, #4]
 801c7d4:	f7f9 ff0e 	bl	80165f4 <lwip_htonl>
 801c7d8:	68f3      	ldr	r3, [r6, #12]
 801c7da:	4604      	mov	r4, r0
 801c7dc:	6858      	ldr	r0, [r3, #4]
 801c7de:	f7f9 ff09 	bl	80165f4 <lwip_htonl>
 801c7e2:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801c7e4:	2c00      	cmp	r4, #0
 801c7e6:	dbf0      	blt.n	801c7ca <tcp_rexmit+0x22>
 801c7e8:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 801c7ea:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801c7ec:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801c7ee:	6833      	ldr	r3, [r6, #0]
 801c7f0:	b153      	cbz	r3, 801c808 <tcp_rexmit+0x60>
  if (pcb->nrtx < 0xFF) {
 801c7f2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801c7f6:	2bff      	cmp	r3, #255	; 0xff
 801c7f8:	d002      	beq.n	801c800 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801c7fa:	3301      	adds	r3, #1
 801c7fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801c800:	2300      	movs	r3, #0
  return ERR_OK;
 801c802:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801c804:	637b      	str	r3, [r7, #52]	; 0x34
}
 801c806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801c808:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801c80c:	e7f1      	b.n	801c7f2 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801c80e:	4b05      	ldr	r3, [pc, #20]	; (801c824 <tcp_rexmit+0x7c>)
 801c810:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801c814:	4904      	ldr	r1, [pc, #16]	; (801c828 <tcp_rexmit+0x80>)
 801c816:	4805      	ldr	r0, [pc, #20]	; (801c82c <tcp_rexmit+0x84>)
 801c818:	f005 fe54 	bl	80224c4 <iprintf>
 801c81c:	e7c7      	b.n	801c7ae <tcp_rexmit+0x6>
    return ERR_VAL;
 801c81e:	f06f 0005 	mvn.w	r0, #5
}
 801c822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c824:	08040870 	.word	0x08040870
 801c828:	08040e34 	.word	0x08040e34
 801c82c:	08028d24 	.word	0x08028d24

0801c830 <tcp_rexmit_fast>:
{
 801c830:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801c832:	4604      	mov	r4, r0
 801c834:	b340      	cbz	r0, 801c888 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801c836:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c838:	b113      	cbz	r3, 801c840 <tcp_rexmit_fast+0x10>
 801c83a:	8b63      	ldrh	r3, [r4, #26]
 801c83c:	075b      	lsls	r3, r3, #29
 801c83e:	d500      	bpl.n	801c842 <tcp_rexmit_fast+0x12>
}
 801c840:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801c842:	4620      	mov	r0, r4
 801c844:	f7ff ffb0 	bl	801c7a8 <tcp_rexmit>
 801c848:	2800      	cmp	r0, #0
 801c84a:	d1f9      	bne.n	801c840 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c84c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801c850:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801c854:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c856:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801c858:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c85c:	bf28      	it	cs
 801c85e:	4619      	movcs	r1, r3
 801c860:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801c862:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c866:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801c86a:	d902      	bls.n	801c872 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801c86c:	b283      	uxth	r3, r0
 801c86e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801c872:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801c874:	8b61      	ldrh	r1, [r4, #26]
      pcb->rtime = 0;
 801c876:	2000      	movs	r0, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801c878:	4413      	add	r3, r2
      tcp_set_flags(pcb, TF_INFR);
 801c87a:	f041 0204 	orr.w	r2, r1, #4
      pcb->rtime = 0;
 801c87e:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801c880:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801c884:	8362      	strh	r2, [r4, #26]
}
 801c886:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801c888:	4b03      	ldr	r3, [pc, #12]	; (801c898 <tcp_rexmit_fast+0x68>)
 801c88a:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801c88e:	4903      	ldr	r1, [pc, #12]	; (801c89c <tcp_rexmit_fast+0x6c>)
 801c890:	4803      	ldr	r0, [pc, #12]	; (801c8a0 <tcp_rexmit_fast+0x70>)
 801c892:	f005 fe17 	bl	80224c4 <iprintf>
 801c896:	e7ce      	b.n	801c836 <tcp_rexmit_fast+0x6>
 801c898:	08040870 	.word	0x08040870
 801c89c:	08040e4c 	.word	0x08040e4c
 801c8a0:	08028d24 	.word	0x08028d24

0801c8a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801c8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8a8:	b084      	sub	sp, #16
 801c8aa:	4607      	mov	r7, r0
 801c8ac:	460e      	mov	r6, r1
 801c8ae:	4614      	mov	r4, r2
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c8b0:	461d      	mov	r5, r3
{
 801c8b2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801c8b6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801c8ba:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c8be:	b313      	cbz	r3, 801c906 <tcp_rst+0x62>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c8c0:	f1b8 0f00 	cmp.w	r8, #0
 801c8c4:	d029      	beq.n	801c91a <tcp_rst+0x76>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801c8c6:	4630      	mov	r0, r6
 801c8c8:	2614      	movs	r6, #20
 801c8ca:	f7f9 fe93 	bl	80165f4 <lwip_htonl>
 801c8ce:	f246 0108 	movw	r1, #24584	; 0x6008
 801c8d2:	4602      	mov	r2, r0
 801c8d4:	464b      	mov	r3, r9
 801c8d6:	4620      	mov	r0, r4
 801c8d8:	9102      	str	r1, [sp, #8]
 801c8da:	f8cd a000 	str.w	sl, [sp]
 801c8de:	2100      	movs	r1, #0
 801c8e0:	9601      	str	r6, [sp, #4]
 801c8e2:	f7ff f90f 	bl	801bb04 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801c8e6:	4604      	mov	r4, r0
 801c8e8:	b150      	cbz	r0, 801c900 <tcp_rst+0x5c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c8ea:	f7ff f97b 	bl	801bbe4 <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c8ee:	4643      	mov	r3, r8
 801c8f0:	462a      	mov	r2, r5
 801c8f2:	4621      	mov	r1, r4
 801c8f4:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c8f6:	b004      	add	sp, #16
 801c8f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c8fc:	f7ff b982 	b.w	801bc04 <tcp_output_control_segment>
}
 801c900:	b004      	add	sp, #16
 801c902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c906:	4b09      	ldr	r3, [pc, #36]	; (801c92c <tcp_rst+0x88>)
 801c908:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801c90c:	4908      	ldr	r1, [pc, #32]	; (801c930 <tcp_rst+0x8c>)
 801c90e:	4809      	ldr	r0, [pc, #36]	; (801c934 <tcp_rst+0x90>)
 801c910:	f005 fdd8 	bl	80224c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c914:	f1b8 0f00 	cmp.w	r8, #0
 801c918:	d1d5      	bne.n	801c8c6 <tcp_rst+0x22>
 801c91a:	4b04      	ldr	r3, [pc, #16]	; (801c92c <tcp_rst+0x88>)
 801c91c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801c920:	4905      	ldr	r1, [pc, #20]	; (801c938 <tcp_rst+0x94>)
 801c922:	4804      	ldr	r0, [pc, #16]	; (801c934 <tcp_rst+0x90>)
 801c924:	f005 fdce 	bl	80224c4 <iprintf>
 801c928:	e7cd      	b.n	801c8c6 <tcp_rst+0x22>
 801c92a:	bf00      	nop
 801c92c:	08040870 	.word	0x08040870
 801c930:	08040e6c 	.word	0x08040e6c
 801c934:	08028d24 	.word	0x08028d24
 801c938:	08040e88 	.word	0x08040e88

0801c93c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801c93c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c93e:	4604      	mov	r4, r0
 801c940:	b1d8      	cbz	r0, 801c97a <tcp_send_empty_ack+0x3e>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801c942:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801c944:	f7f9 fe56 	bl	80165f4 <lwip_htonl>
 801c948:	2100      	movs	r1, #0
 801c94a:	4602      	mov	r2, r0
 801c94c:	4620      	mov	r0, r4
 801c94e:	f7ff f921 	bl	801bb94 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801c952:	4605      	mov	r5, r0
 801c954:	b1c8      	cbz	r0, 801c98a <tcp_send_empty_ack+0x4e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c956:	f7ff f945 	bl	801bbe4 <tcp_output_fill_options.isra.0.constprop.0>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c95a:	1d23      	adds	r3, r4, #4
 801c95c:	4629      	mov	r1, r5
 801c95e:	4622      	mov	r2, r4
 801c960:	4620      	mov	r0, r4
 801c962:	f7ff f94f 	bl	801bc04 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c966:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801c968:	b118      	cbz	r0, 801c972 <tcp_send_empty_ack+0x36>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c96a:	f043 0303 	orr.w	r3, r3, #3
 801c96e:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801c970:	bd38      	pop	{r3, r4, r5, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c972:	f023 0303 	bic.w	r3, r3, #3
 801c976:	8363      	strh	r3, [r4, #26]
}
 801c978:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c97a:	4b07      	ldr	r3, [pc, #28]	; (801c998 <tcp_send_empty_ack+0x5c>)
 801c97c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801c980:	4906      	ldr	r1, [pc, #24]	; (801c99c <tcp_send_empty_ack+0x60>)
 801c982:	4807      	ldr	r0, [pc, #28]	; (801c9a0 <tcp_send_empty_ack+0x64>)
 801c984:	f005 fd9e 	bl	80224c4 <iprintf>
 801c988:	e7db      	b.n	801c942 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c98a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801c98c:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c990:	f043 0303 	orr.w	r3, r3, #3
 801c994:	8363      	strh	r3, [r4, #26]
}
 801c996:	bd38      	pop	{r3, r4, r5, pc}
 801c998:	08040870 	.word	0x08040870
 801c99c:	08040ea4 	.word	0x08040ea4
 801c9a0:	08028d24 	.word	0x08028d24

0801c9a4 <tcp_output>:
{
 801c9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801c9a8:	4604      	mov	r4, r0
{
 801c9aa:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801c9ac:	2800      	cmp	r0, #0
 801c9ae:	f000 81d0 	beq.w	801cd52 <tcp_output+0x3ae>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801c9b2:	7d23      	ldrb	r3, [r4, #20]
 801c9b4:	2b01      	cmp	r3, #1
 801c9b6:	f000 8187 	beq.w	801ccc8 <tcp_output+0x324>
  if (tcp_input_pcb == pcb) {
 801c9ba:	4bbc      	ldr	r3, [pc, #752]	; (801ccac <tcp_output+0x308>)
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	42a3      	cmp	r3, r4
 801c9c0:	f000 818e 	beq.w	801cce0 <tcp_output+0x33c>
  seg = pcb->unsent;
 801c9c4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801c9c6:	b33d      	cbz	r5, 801ca18 <tcp_output+0x74>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801c9c8:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801c9ca:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801c9ce:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801c9d2:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801c9d6:	2800      	cmp	r0, #0
 801c9d8:	f040 81c3 	bne.w	801cd62 <tcp_output+0x3be>
    return ip_route(src, dst);
 801c9dc:	4648      	mov	r0, r9
 801c9de:	f003 f91f 	bl	801fc20 <ip4_route>
 801c9e2:	9005      	str	r0, [sp, #20]
  if (netif == NULL) {
 801c9e4:	9a05      	ldr	r2, [sp, #20]
 801c9e6:	2a00      	cmp	r2, #0
 801c9e8:	f000 81cd 	beq.w	801cd86 <tcp_output+0x3e2>
  if (ip_addr_isany(&pcb->local_ip)) {
 801c9ec:	6823      	ldr	r3, [r4, #0]
 801c9ee:	b90b      	cbnz	r3, 801c9f4 <tcp_output+0x50>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801c9f0:	6853      	ldr	r3, [r2, #4]
 801c9f2:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801c9f4:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801c9f6:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801c9f8:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801c9fa:	bf28      	it	cs
 801c9fc:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801c9fe:	f7f9 fdf9 	bl	80165f4 <lwip_htonl>
 801ca02:	892b      	ldrh	r3, [r5, #8]
 801ca04:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801ca06:	1a9b      	subs	r3, r3, r2
 801ca08:	4418      	add	r0, r3
 801ca0a:	42b8      	cmp	r0, r7
 801ca0c:	d90f      	bls.n	801ca2e <tcp_output+0x8a>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ca0e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801ca12:	42bb      	cmp	r3, r7
 801ca14:	f000 816e 	beq.w	801ccf4 <tcp_output+0x350>
    if (pcb->flags & TF_ACK_NOW) {
 801ca18:	8b62      	ldrh	r2, [r4, #26]
 801ca1a:	0791      	lsls	r1, r2, #30
 801ca1c:	f100 8164 	bmi.w	801cce8 <tcp_output+0x344>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ca20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801ca24:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ca26:	8362      	strh	r2, [r4, #26]
}
 801ca28:	b007      	add	sp, #28
 801ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801ca2e:	2200      	movs	r2, #0
  useg = pcb->unacked;
 801ca30:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 801ca32:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
  if (useg != NULL) {
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	f000 816c 	beq.w	801cd14 <tcp_output+0x370>
    for (; useg->next != NULL; useg = useg->next);
 801ca3c:	4698      	mov	r8, r3
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d1fb      	bne.n	801ca3c <tcp_output+0x98>
    LWIP_ASSERT("RST not expected here!",
 801ca44:	f8df b278 	ldr.w	fp, [pc, #632]	; 801ccc0 <tcp_output+0x31c>
 801ca48:	464e      	mov	r6, r9
 801ca4a:	e0d5      	b.n	801cbf8 <tcp_output+0x254>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ca4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ca4e:	b163      	cbz	r3, 801ca6a <tcp_output+0xc6>
 801ca50:	8b63      	ldrh	r3, [r4, #26]
 801ca52:	f013 0f44 	tst.w	r3, #68	; 0x44
 801ca56:	461a      	mov	r2, r3
 801ca58:	d107      	bne.n	801ca6a <tcp_output+0xc6>
 801ca5a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801ca5c:	2900      	cmp	r1, #0
 801ca5e:	f000 810e 	beq.w	801cc7e <tcp_output+0x2da>
 801ca62:	6808      	ldr	r0, [r1, #0]
 801ca64:	2800      	cmp	r0, #0
 801ca66:	f000 8104 	beq.w	801cc72 <tcp_output+0x2ce>
    if (pcb->state != SYN_SENT) {
 801ca6a:	7d23      	ldrb	r3, [r4, #20]
 801ca6c:	2b02      	cmp	r3, #2
 801ca6e:	d009      	beq.n	801ca84 <tcp_output+0xe0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ca70:	68eb      	ldr	r3, [r5, #12]
 801ca72:	2010      	movs	r0, #16
 801ca74:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 801ca78:	f7f9 fdb8 	bl	80165ec <lwip_htons>
 801ca7c:	68eb      	ldr	r3, [r5, #12]
 801ca7e:	ea4a 0000 	orr.w	r0, sl, r0
 801ca82:	8198      	strh	r0, [r3, #12]
  if (tcp_output_segment_busy(seg)) {
 801ca84:	4628      	mov	r0, r5
 801ca86:	f7fe ff4f 	bl	801b928 <tcp_output_segment_busy>
 801ca8a:	2800      	cmp	r0, #0
 801ca8c:	d16e      	bne.n	801cb6c <tcp_output+0x1c8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ca8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ca90:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801ca94:	f7f9 fdae 	bl	80165f4 <lwip_htonl>
 801ca98:	4603      	mov	r3, r0
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ca9a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ca9c:	f8ca 3008 	str.w	r3, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801caa0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801caa4:	f7f9 fda2 	bl	80165ec <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801caa8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801caaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801caac:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801cab0:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801cab2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801cab6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801cab8:	7aab      	ldrb	r3, [r5, #10]
 801caba:	07db      	lsls	r3, r3, #31
 801cabc:	f100 80c8 	bmi.w	801cc50 <tcp_output+0x2ac>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801cac0:	f10a 0914 	add.w	r9, sl, #20
  if (pcb->rtime < 0) {
 801cac4:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801cac8:	2a00      	cmp	r2, #0
 801caca:	da01      	bge.n	801cad0 <tcp_output+0x12c>
    pcb->rtime = 0;
 801cacc:	2200      	movs	r2, #0
 801cace:	8622      	strh	r2, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801cad0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801cad2:	2a00      	cmp	r2, #0
 801cad4:	f000 80b1 	beq.w	801cc3a <tcp_output+0x296>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801cad8:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801cada:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801cade:	6841      	ldr	r1, [r0, #4]
  seg->p->tot_len -= len;
 801cae0:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801cae2:	ebaa 0101 	sub.w	r1, sl, r1
  seg->p->len -= len;
 801cae6:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801caea:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801caee:	b289      	uxth	r1, r1
  seg->p->tot_len -= len;
 801caf0:	1a52      	subs	r2, r2, r1
  seg->p->len -= len;
 801caf2:	ebae 0101 	sub.w	r1, lr, r1
  seg->p->tot_len -= len;
 801caf6:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801caf8:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 801cafa:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801cafc:	f88a c010 	strb.w	ip, [sl, #16]
 801cb00:	f88a c011 	strb.w	ip, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801cb04:	7aa9      	ldrb	r1, [r5, #10]
 801cb06:	0089      	lsls	r1, r1, #2
 801cb08:	f001 0104 	and.w	r1, r1, #4
 801cb0c:	3114      	adds	r1, #20
 801cb0e:	4451      	add	r1, sl
 801cb10:	4589      	cmp	r9, r1
 801cb12:	d00a      	beq.n	801cb2a <tcp_output+0x186>
 801cb14:	f240 621c 	movw	r2, #1564	; 0x61c
 801cb18:	465b      	mov	r3, fp
 801cb1a:	4965      	ldr	r1, [pc, #404]	; (801ccb0 <tcp_output+0x30c>)
 801cb1c:	4865      	ldr	r0, [pc, #404]	; (801ccb4 <tcp_output+0x310>)
 801cb1e:	f005 fcd1 	bl	80224c4 <iprintf>
 801cb22:	6868      	ldr	r0, [r5, #4]
 801cb24:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801cb28:	8902      	ldrh	r2, [r0, #8]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801cb2a:	4623      	mov	r3, r4
 801cb2c:	2106      	movs	r1, #6
 801cb2e:	9600      	str	r6, [sp, #0]
 801cb30:	f7fa fb0e 	bl	8017150 <ip_chksum_pseudo>
  TCP_STATS_INC(tcp.xmit);
 801cb34:	f8df c18c 	ldr.w	ip, [pc, #396]	; 801ccc4 <tcp_output+0x320>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801cb38:	f04f 0e06 	mov.w	lr, #6
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801cb3c:	f8aa 0010 	strh.w	r0, [sl, #16]
  TCP_STATS_INC(tcp.xmit);
 801cb40:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801cb44:	4632      	mov	r2, r6
 801cb46:	6868      	ldr	r0, [r5, #4]
 801cb48:	4621      	mov	r1, r4
  TCP_STATS_INC(tcp.xmit);
 801cb4a:	f103 0901 	add.w	r9, r3, #1
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801cb4e:	9b05      	ldr	r3, [sp, #20]
 801cb50:	e9cd e301 	strd	lr, r3, [sp, #4]
  TCP_STATS_INC(tcp.xmit);
 801cb54:	f8ac 9090 	strh.w	r9, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801cb58:	f894 c00a 	ldrb.w	ip, [r4, #10]
 801cb5c:	7ae3      	ldrb	r3, [r4, #11]
 801cb5e:	f8cd c000 	str.w	ip, [sp]
 801cb62:	f003 fa77 	bl	8020054 <ip4_output_if>
    if (err != ERR_OK) {
 801cb66:	2800      	cmp	r0, #0
 801cb68:	f040 8108 	bne.w	801cd7c <tcp_output+0x3d8>
    if (pcb->state != SYN_SENT) {
 801cb6c:	7d23      	ldrb	r3, [r4, #20]
    pcb->unsent = seg->next;
 801cb6e:	682a      	ldr	r2, [r5, #0]
    if (pcb->state != SYN_SENT) {
 801cb70:	2b02      	cmp	r3, #2
    pcb->unsent = seg->next;
 801cb72:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801cb74:	d003      	beq.n	801cb7e <tcp_output+0x1da>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cb76:	8b63      	ldrh	r3, [r4, #26]
 801cb78:	f023 0303 	bic.w	r3, r3, #3
 801cb7c:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801cb7e:	68eb      	ldr	r3, [r5, #12]
 801cb80:	6858      	ldr	r0, [r3, #4]
 801cb82:	f7f9 fd37 	bl	80165f4 <lwip_htonl>
 801cb86:	68ea      	ldr	r2, [r5, #12]
 801cb88:	4682      	mov	sl, r0
 801cb8a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801cb8e:	8990      	ldrh	r0, [r2, #12]
 801cb90:	f7f9 fd2c 	bl	80165ec <lwip_htons>
 801cb94:	f010 0303 	ands.w	r3, r0, #3
 801cb98:	44ca      	add	sl, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801cb9a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801cb9c:	bf18      	it	ne
 801cb9e:	2301      	movne	r3, #1
 801cba0:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 801cba2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801cba6:	1ad2      	subs	r2, r2, r3
 801cba8:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 801cbaa:	bfb8      	it	lt
 801cbac:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801cbae:	68eb      	ldr	r3, [r5, #12]
 801cbb0:	8998      	ldrh	r0, [r3, #12]
 801cbb2:	f7f9 fd1b 	bl	80165ec <lwip_htons>
 801cbb6:	f010 0003 	ands.w	r0, r0, #3
 801cbba:	bf18      	it	ne
 801cbbc:	2001      	movne	r0, #1
 801cbbe:	eb10 0f0a 	cmn.w	r0, sl
 801cbc2:	d033      	beq.n	801cc2c <tcp_output+0x288>
      seg->next = NULL;
 801cbc4:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 801cbc6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      seg->next = NULL;
 801cbc8:	602a      	str	r2, [r5, #0]
      if (pcb->unacked == NULL) {
 801cbca:	b39b      	cbz	r3, 801cc34 <tcp_output+0x290>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801cbcc:	68eb      	ldr	r3, [r5, #12]
 801cbce:	6858      	ldr	r0, [r3, #4]
 801cbd0:	f7f9 fd10 	bl	80165f4 <lwip_htonl>
 801cbd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cbd8:	4682      	mov	sl, r0
 801cbda:	6858      	ldr	r0, [r3, #4]
 801cbdc:	f7f9 fd0a 	bl	80165f4 <lwip_htonl>
 801cbe0:	ebaa 0000 	sub.w	r0, sl, r0
 801cbe4:	2800      	cmp	r0, #0
 801cbe6:	f2c0 8097 	blt.w	801cd18 <tcp_output+0x374>
          useg->next = seg;
 801cbea:	f8c8 5000 	str.w	r5, [r8]
 801cbee:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801cbf0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801cbf2:	2d00      	cmp	r5, #0
 801cbf4:	f000 80b9 	beq.w	801cd6a <tcp_output+0x3c6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801cbf8:	68eb      	ldr	r3, [r5, #12]
 801cbfa:	6858      	ldr	r0, [r3, #4]
 801cbfc:	f7f9 fcfa 	bl	80165f4 <lwip_htonl>
 801cc00:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801cc02:	892b      	ldrh	r3, [r5, #8]
 801cc04:	1a80      	subs	r0, r0, r2
 801cc06:	4418      	add	r0, r3
  while (seg != NULL &&
 801cc08:	42b8      	cmp	r0, r7
 801cc0a:	f200 80b0 	bhi.w	801cd6e <tcp_output+0x3ca>
    LWIP_ASSERT("RST not expected here!",
 801cc0e:	68eb      	ldr	r3, [r5, #12]
 801cc10:	8998      	ldrh	r0, [r3, #12]
 801cc12:	f7f9 fceb 	bl	80165ec <lwip_htons>
 801cc16:	0742      	lsls	r2, r0, #29
 801cc18:	f57f af18 	bpl.w	801ca4c <tcp_output+0xa8>
 801cc1c:	465b      	mov	r3, fp
 801cc1e:	f240 5236 	movw	r2, #1334	; 0x536
 801cc22:	4925      	ldr	r1, [pc, #148]	; (801ccb8 <tcp_output+0x314>)
 801cc24:	4823      	ldr	r0, [pc, #140]	; (801ccb4 <tcp_output+0x310>)
 801cc26:	f005 fc4d 	bl	80224c4 <iprintf>
 801cc2a:	e70f      	b.n	801ca4c <tcp_output+0xa8>
      tcp_seg_free(seg);
 801cc2c:	4628      	mov	r0, r5
 801cc2e:	f7fc f959 	bl	8018ee4 <tcp_seg_free>
 801cc32:	e7dd      	b.n	801cbf0 <tcp_output+0x24c>
        pcb->unacked = seg;
 801cc34:	46a8      	mov	r8, r5
 801cc36:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801cc38:	e7da      	b.n	801cbf0 <tcp_output+0x24c>
    pcb->rttest = tcp_ticks;
 801cc3a:	4a20      	ldr	r2, [pc, #128]	; (801ccbc <tcp_output+0x318>)
 801cc3c:	6812      	ldr	r2, [r2, #0]
 801cc3e:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801cc40:	f8da 0004 	ldr.w	r0, [sl, #4]
 801cc44:	f7f9 fcd6 	bl	80165f4 <lwip_htonl>
 801cc48:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801cc4c:	63a0      	str	r0, [r4, #56]	; 0x38
 801cc4e:	e743      	b.n	801cad8 <tcp_output+0x134>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801cc50:	4632      	mov	r2, r6
 801cc52:	9905      	ldr	r1, [sp, #20]
 801cc54:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801cc58:	f10a 0918 	add.w	r9, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801cc5c:	f7fd f8e0 	bl	8019e20 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801cc60:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801cc64:	f7f9 fcc6 	bl	80165f4 <lwip_htonl>
 801cc68:	f8ca 0014 	str.w	r0, [sl, #20]
    opts += 1;
 801cc6c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801cc70:	e728      	b.n	801cac4 <tcp_output+0x120>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801cc72:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801cc76:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801cc78:	4584      	cmp	ip, r0
 801cc7a:	f4bf aef6 	bcs.w	801ca6a <tcp_output+0xc6>
 801cc7e:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801cc82:	2800      	cmp	r0, #0
 801cc84:	f43f aef1 	beq.w	801ca6a <tcp_output+0xc6>
 801cc88:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801cc8c:	2808      	cmp	r0, #8
 801cc8e:	f63f aeec 	bhi.w	801ca6a <tcp_output+0xc6>
 801cc92:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801cc96:	f47f aee8 	bne.w	801ca6a <tcp_output+0xc6>
  if (pcb->unsent == NULL) {
 801cc9a:	2900      	cmp	r1, #0
 801cc9c:	f47f aec0 	bne.w	801ca20 <tcp_output+0x7c>
    pcb->unsent_oversize = 0;
 801cca0:	2100      	movs	r1, #0
 801cca2:	461a      	mov	r2, r3
 801cca4:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801cca8:	e6ba      	b.n	801ca20 <tcp_output+0x7c>
 801ccaa:	bf00      	nop
 801ccac:	2002e1ac 	.word	0x2002e1ac
 801ccb0:	08040f1c 	.word	0x08040f1c
 801ccb4:	08028d24 	.word	0x08028d24
 801ccb8:	08040f04 	.word	0x08040f04
 801ccbc:	2002e19c 	.word	0x2002e19c
 801ccc0:	08040870 	.word	0x08040870
 801ccc4:	2002e08c 	.word	0x2002e08c
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ccc8:	4b30      	ldr	r3, [pc, #192]	; (801cd8c <tcp_output+0x3e8>)
 801ccca:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801ccce:	4930      	ldr	r1, [pc, #192]	; (801cd90 <tcp_output+0x3ec>)
 801ccd0:	4830      	ldr	r0, [pc, #192]	; (801cd94 <tcp_output+0x3f0>)
 801ccd2:	f005 fbf7 	bl	80224c4 <iprintf>
  if (tcp_input_pcb == pcb) {
 801ccd6:	4b30      	ldr	r3, [pc, #192]	; (801cd98 <tcp_output+0x3f4>)
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	42a3      	cmp	r3, r4
 801ccdc:	f47f ae72 	bne.w	801c9c4 <tcp_output+0x20>
    return ERR_OK;
 801cce0:	2000      	movs	r0, #0
}
 801cce2:	b007      	add	sp, #28
 801cce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801cce8:	4620      	mov	r0, r4
}
 801ccea:	b007      	add	sp, #28
 801ccec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801ccf0:	f7ff be24 	b.w	801c93c <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ccf4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	f47f ae8e 	bne.w	801ca18 <tcp_output+0x74>
 801ccfc:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	f47f ae89 	bne.w	801ca18 <tcp_output+0x74>
      pcb->persist_cnt = 0;
 801cd06:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801cd0a:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801cd0e:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801cd12:	e681      	b.n	801ca18 <tcp_output+0x74>
 801cd14:	4698      	mov	r8, r3
 801cd16:	e695      	b.n	801ca44 <tcp_output+0xa0>
          while (*cur_seg &&
 801cd18:	6f22      	ldr	r2, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801cd1a:	f104 0970 	add.w	r9, r4, #112	; 0x70
          while (*cur_seg &&
 801cd1e:	b92a      	cbnz	r2, 801cd2c <tcp_output+0x388>
 801cd20:	e013      	b.n	801cd4a <tcp_output+0x3a6>
            cur_seg = &((*cur_seg)->next );
 801cd22:	f8d9 9000 	ldr.w	r9, [r9]
          while (*cur_seg &&
 801cd26:	f8d9 2000 	ldr.w	r2, [r9]
 801cd2a:	b172      	cbz	r2, 801cd4a <tcp_output+0x3a6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801cd2c:	68d3      	ldr	r3, [r2, #12]
 801cd2e:	6858      	ldr	r0, [r3, #4]
 801cd30:	f7f9 fc60 	bl	80165f4 <lwip_htonl>
 801cd34:	68eb      	ldr	r3, [r5, #12]
 801cd36:	4682      	mov	sl, r0
 801cd38:	6858      	ldr	r0, [r3, #4]
 801cd3a:	f7f9 fc5b 	bl	80165f4 <lwip_htonl>
 801cd3e:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 801cd42:	2800      	cmp	r0, #0
 801cd44:	dbed      	blt.n	801cd22 <tcp_output+0x37e>
 801cd46:	f8d9 2000 	ldr.w	r2, [r9]
          seg->next = (*cur_seg);
 801cd4a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 801cd4c:	f8c9 5000 	str.w	r5, [r9]
 801cd50:	e74e      	b.n	801cbf0 <tcp_output+0x24c>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801cd52:	4b0e      	ldr	r3, [pc, #56]	; (801cd8c <tcp_output+0x3e8>)
 801cd54:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801cd58:	4910      	ldr	r1, [pc, #64]	; (801cd9c <tcp_output+0x3f8>)
 801cd5a:	480e      	ldr	r0, [pc, #56]	; (801cd94 <tcp_output+0x3f0>)
 801cd5c:	f005 fbb2 	bl	80224c4 <iprintf>
 801cd60:	e627      	b.n	801c9b2 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801cd62:	f7fb f9b9 	bl	80180d8 <netif_get_by_index>
 801cd66:	9005      	str	r0, [sp, #20]
 801cd68:	e63c      	b.n	801c9e4 <tcp_output+0x40>
 801cd6a:	8b63      	ldrh	r3, [r4, #26]
 801cd6c:	e798      	b.n	801cca0 <tcp_output+0x2fc>
 801cd6e:	8b63      	ldrh	r3, [r4, #26]
 801cd70:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801cd72:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801cd74:	2900      	cmp	r1, #0
 801cd76:	f47f ae53 	bne.w	801ca20 <tcp_output+0x7c>
 801cd7a:	e791      	b.n	801cca0 <tcp_output+0x2fc>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cd7c:	8b63      	ldrh	r3, [r4, #26]
 801cd7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cd82:	8363      	strh	r3, [r4, #26]
      return err;
 801cd84:	e650      	b.n	801ca28 <tcp_output+0x84>
    return ERR_RTE;
 801cd86:	f06f 0003 	mvn.w	r0, #3
 801cd8a:	e64d      	b.n	801ca28 <tcp_output+0x84>
 801cd8c:	08040870 	.word	0x08040870
 801cd90:	08040edc 	.word	0x08040edc
 801cd94:	08028d24 	.word	0x08028d24
 801cd98:	2002e1ac 	.word	0x2002e1ac
 801cd9c:	08040ec4 	.word	0x08040ec4

0801cda0 <tcp_rexmit_rto_commit>:
{
 801cda0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801cda2:	4604      	mov	r4, r0
 801cda4:	b158      	cbz	r0, 801cdbe <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801cda6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801cdaa:	2bff      	cmp	r3, #255	; 0xff
 801cdac:	d002      	beq.n	801cdb4 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801cdae:	3301      	adds	r3, #1
 801cdb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801cdb4:	4620      	mov	r0, r4
}
 801cdb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801cdba:	f7ff bdf3 	b.w	801c9a4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801cdbe:	4b04      	ldr	r3, [pc, #16]	; (801cdd0 <tcp_rexmit_rto_commit+0x30>)
 801cdc0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801cdc4:	4903      	ldr	r1, [pc, #12]	; (801cdd4 <tcp_rexmit_rto_commit+0x34>)
 801cdc6:	4804      	ldr	r0, [pc, #16]	; (801cdd8 <tcp_rexmit_rto_commit+0x38>)
 801cdc8:	f005 fb7c 	bl	80224c4 <iprintf>
 801cdcc:	e7eb      	b.n	801cda6 <tcp_rexmit_rto_commit+0x6>
 801cdce:	bf00      	nop
 801cdd0:	08040870 	.word	0x08040870
 801cdd4:	08040f30 	.word	0x08040f30
 801cdd8:	08028d24 	.word	0x08028d24

0801cddc <tcp_rexmit_rto>:
{
 801cddc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801cdde:	4604      	mov	r4, r0
 801cde0:	b148      	cbz	r0, 801cdf6 <tcp_rexmit_rto+0x1a>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801cde2:	4620      	mov	r0, r4
 801cde4:	f7ff fc9e 	bl	801c724 <tcp_rexmit_rto_prepare>
 801cde8:	b100      	cbz	r0, 801cdec <tcp_rexmit_rto+0x10>
}
 801cdea:	bd10      	pop	{r4, pc}
    tcp_rexmit_rto_commit(pcb);
 801cdec:	4620      	mov	r0, r4
}
 801cdee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 801cdf2:	f7ff bfd5 	b.w	801cda0 <tcp_rexmit_rto_commit>
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801cdf6:	4b04      	ldr	r3, [pc, #16]	; (801ce08 <tcp_rexmit_rto+0x2c>)
 801cdf8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801cdfc:	4903      	ldr	r1, [pc, #12]	; (801ce0c <tcp_rexmit_rto+0x30>)
 801cdfe:	4804      	ldr	r0, [pc, #16]	; (801ce10 <tcp_rexmit_rto+0x34>)
 801ce00:	f005 fb60 	bl	80224c4 <iprintf>
 801ce04:	e7ed      	b.n	801cde2 <tcp_rexmit_rto+0x6>
 801ce06:	bf00      	nop
 801ce08:	08040870 	.word	0x08040870
 801ce0c:	08040f54 	.word	0x08040f54
 801ce10:	08028d24 	.word	0x08028d24

0801ce14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801ce14:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801ce16:	4604      	mov	r4, r0
 801ce18:	b1a0      	cbz	r0, 801ce44 <tcp_keepalive+0x30>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801ce1a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801ce1c:	3801      	subs	r0, #1
 801ce1e:	f7f9 fbe9 	bl	80165f4 <lwip_htonl>
 801ce22:	2100      	movs	r1, #0
 801ce24:	4602      	mov	r2, r0
 801ce26:	4620      	mov	r0, r4
 801ce28:	f7fe feb4 	bl	801bb94 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801ce2c:	4605      	mov	r5, r0
 801ce2e:	b188      	cbz	r0, 801ce54 <tcp_keepalive+0x40>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ce30:	f7fe fed8 	bl	801bbe4 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ce34:	4629      	mov	r1, r5
 801ce36:	1d23      	adds	r3, r4, #4
 801ce38:	4622      	mov	r2, r4
 801ce3a:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801ce3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ce40:	f7fe bee0 	b.w	801bc04 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801ce44:	4b05      	ldr	r3, [pc, #20]	; (801ce5c <tcp_keepalive+0x48>)
 801ce46:	f640 0224 	movw	r2, #2084	; 0x824
 801ce4a:	4905      	ldr	r1, [pc, #20]	; (801ce60 <tcp_keepalive+0x4c>)
 801ce4c:	4805      	ldr	r0, [pc, #20]	; (801ce64 <tcp_keepalive+0x50>)
 801ce4e:	f005 fb39 	bl	80224c4 <iprintf>
 801ce52:	e7e2      	b.n	801ce1a <tcp_keepalive+0x6>
}
 801ce54:	f04f 30ff 	mov.w	r0, #4294967295
 801ce58:	bd70      	pop	{r4, r5, r6, pc}
 801ce5a:	bf00      	nop
 801ce5c:	08040870 	.word	0x08040870
 801ce60:	08040f70 	.word	0x08040f70
 801ce64:	08028d24 	.word	0x08028d24

0801ce68 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801ce68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801ce6c:	4604      	mov	r4, r0
 801ce6e:	2800      	cmp	r0, #0
 801ce70:	d053      	beq.n	801cf1a <tcp_zero_window_probe+0xb2>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801ce72:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801ce74:	2d00      	cmp	r5, #0
 801ce76:	d04d      	beq.n	801cf14 <tcp_zero_window_probe+0xac>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801ce78:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801ce7c:	2bff      	cmp	r3, #255	; 0xff
 801ce7e:	d002      	beq.n	801ce86 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801ce80:	3301      	adds	r3, #1
 801ce82:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801ce86:	68eb      	ldr	r3, [r5, #12]
 801ce88:	8998      	ldrh	r0, [r3, #12]
 801ce8a:	f7f9 fbaf 	bl	80165ec <lwip_htons>
 801ce8e:	07c3      	lsls	r3, r0, #31
 801ce90:	d529      	bpl.n	801cee6 <tcp_zero_window_probe+0x7e>
 801ce92:	8929      	ldrh	r1, [r5, #8]
 801ce94:	bb39      	cbnz	r1, 801cee6 <tcp_zero_window_probe+0x7e>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ce96:	68eb      	ldr	r3, [r5, #12]
 801ce98:	4620      	mov	r0, r4
 801ce9a:	685a      	ldr	r2, [r3, #4]
 801ce9c:	f7fe fe7a 	bl	801bb94 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801cea0:	4606      	mov	r6, r0
 801cea2:	b398      	cbz	r0, 801cf0c <tcp_zero_window_probe+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801cea4:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801cea8:	2011      	movs	r0, #17
 801ceaa:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801ceae:	f7f9 fb9d 	bl	80165ec <lwip_htons>
 801ceb2:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801ceb6:	4338      	orrs	r0, r7
 801ceb8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801cebc:	68eb      	ldr	r3, [r5, #12]
 801cebe:	6858      	ldr	r0, [r3, #4]
 801cec0:	f7f9 fb98 	bl	80165f4 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801cec4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801cec6:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801cec8:	1a1b      	subs	r3, r3, r0
 801ceca:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 801cecc:	bfb8      	it	lt
 801cece:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ced0:	4630      	mov	r0, r6
 801ced2:	f7fe fe87 	bl	801bbe4 <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ced6:	4631      	mov	r1, r6
 801ced8:	1d23      	adds	r3, r4, #4
 801ceda:	4622      	mov	r2, r4
 801cedc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801cede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801cee2:	f7fe be8f 	b.w	801bc04 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801cee6:	68eb      	ldr	r3, [r5, #12]
 801cee8:	2101      	movs	r1, #1
 801ceea:	4620      	mov	r0, r4
 801ceec:	685a      	ldr	r2, [r3, #4]
 801ceee:	f7fe fe51 	bl	801bb94 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801cef2:	4606      	mov	r6, r0
 801cef4:	b150      	cbz	r0, 801cf0c <tcp_zero_window_probe+0xa4>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801cef6:	6868      	ldr	r0, [r5, #4]
 801cef8:	2201      	movs	r2, #1
 801cefa:	892f      	ldrh	r7, [r5, #8]
 801cefc:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801cefe:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801cf00:	1bdb      	subs	r3, r3, r7
 801cf02:	3114      	adds	r1, #20
 801cf04:	b29b      	uxth	r3, r3
 801cf06:	f7fb fc5d 	bl	80187c4 <pbuf_copy_partial>
 801cf0a:	e7d7      	b.n	801cebc <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801cf0c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801cf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801cf14:	4628      	mov	r0, r5
}
 801cf16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801cf1a:	4b04      	ldr	r3, [pc, #16]	; (801cf2c <tcp_zero_window_probe+0xc4>)
 801cf1c:	f640 024f 	movw	r2, #2127	; 0x84f
 801cf20:	4903      	ldr	r1, [pc, #12]	; (801cf30 <tcp_zero_window_probe+0xc8>)
 801cf22:	4804      	ldr	r0, [pc, #16]	; (801cf34 <tcp_zero_window_probe+0xcc>)
 801cf24:	f005 face 	bl	80224c4 <iprintf>
 801cf28:	e7a3      	b.n	801ce72 <tcp_zero_window_probe+0xa>
 801cf2a:	bf00      	nop
 801cf2c:	08040870 	.word	0x08040870
 801cf30:	08040f8c 	.word	0x08040f8c
 801cf34:	08028d24 	.word	0x08028d24

0801cf38 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801cf38:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801cf3a:	22bc      	movs	r2, #188	; 0xbc
{
 801cf3c:	b570      	push	{r4, r5, r6, lr}
 801cf3e:	4604      	mov	r4, r0
 801cf40:	460e      	mov	r6, r1
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801cf42:	200c      	movs	r0, #12
 801cf44:	490f      	ldr	r1, [pc, #60]	; (801cf84 <sys_timeout_abs+0x4c>)
{
 801cf46:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801cf48:	f7fa feb0 	bl	8017cac <memp_malloc_fn>
  if (timeout == NULL) {
 801cf4c:	b190      	cbz	r0, 801cf74 <sys_timeout_abs+0x3c>
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801cf4e:	490e      	ldr	r1, [pc, #56]	; (801cf88 <sys_timeout_abs+0x50>)
  timeout->next = NULL;
 801cf50:	2200      	movs	r2, #0
  timeout->h = handler;
 801cf52:	6086      	str	r6, [r0, #8]
  if (next_timeout == NULL) {
 801cf54:	680b      	ldr	r3, [r1, #0]
  timeout->arg = arg;
 801cf56:	60c5      	str	r5, [r0, #12]
  timeout->next = NULL;
 801cf58:	e9c0 2400 	strd	r2, r4, [r0]
  if (next_timeout == NULL) {
 801cf5c:	b91b      	cbnz	r3, 801cf66 <sys_timeout_abs+0x2e>
 801cf5e:	e007      	b.n	801cf70 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801cf60:	4619      	mov	r1, r3
 801cf62:	681b      	ldr	r3, [r3, #0]
 801cf64:	b11b      	cbz	r3, 801cf6e <sys_timeout_abs+0x36>
 801cf66:	685a      	ldr	r2, [r3, #4]
 801cf68:	1aa2      	subs	r2, r4, r2
 801cf6a:	2a00      	cmp	r2, #0
 801cf6c:	daf8      	bge.n	801cf60 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801cf6e:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801cf70:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801cf72:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801cf74:	4b03      	ldr	r3, [pc, #12]	; (801cf84 <sys_timeout_abs+0x4c>)
 801cf76:	22be      	movs	r2, #190	; 0xbe
 801cf78:	4904      	ldr	r1, [pc, #16]	; (801cf8c <sys_timeout_abs+0x54>)
 801cf7a:	4805      	ldr	r0, [pc, #20]	; (801cf90 <sys_timeout_abs+0x58>)
}
 801cf7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801cf80:	f005 baa0 	b.w	80224c4 <iprintf>
 801cf84:	08040fb0 	.word	0x08040fb0
 801cf88:	2001aa30 	.word	0x2001aa30
 801cf8c:	08040fe4 	.word	0x08040fe4
 801cf90:	08028d24 	.word	0x08028d24

0801cf94 <lwip_cyclic_timer>:
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801cf94:	6843      	ldr	r3, [r0, #4]
{
 801cf96:	b510      	push	{r4, lr}
 801cf98:	4604      	mov	r4, r0
  cyclic->handler();
 801cf9a:	4798      	blx	r3

  now = sys_now();
 801cf9c:	f7f4 fe1c 	bl	8011bd8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801cfa0:	4b09      	ldr	r3, [pc, #36]	; (801cfc8 <lwip_cyclic_timer+0x34>)
 801cfa2:	6821      	ldr	r1, [r4, #0]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	440b      	add	r3, r1
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801cfa8:	1a1a      	subs	r2, r3, r0
 801cfaa:	2a00      	cmp	r2, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801cfac:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801cfae:	da05      	bge.n	801cfbc <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801cfb0:	4408      	add	r0, r1
 801cfb2:	4906      	ldr	r1, [pc, #24]	; (801cfcc <lwip_cyclic_timer+0x38>)
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801cfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801cfb8:	f7ff bfbe 	b.w	801cf38 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	4903      	ldr	r1, [pc, #12]	; (801cfcc <lwip_cyclic_timer+0x38>)
}
 801cfc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801cfc4:	f7ff bfb8 	b.w	801cf38 <sys_timeout_abs>
 801cfc8:	2001aa2c 	.word	0x2001aa2c
 801cfcc:	0801cf95 	.word	0x0801cf95

0801cfd0 <tcpip_tcp_timer>:
{
 801cfd0:	b508      	push	{r3, lr}
  tcp_tmr();
 801cfd2:	f7fc fef7 	bl	8019dc4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801cfd6:	4b09      	ldr	r3, [pc, #36]	; (801cffc <tcpip_tcp_timer+0x2c>)
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	b143      	cbz	r3, 801cfee <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801cfdc:	f7f4 fdfc 	bl	8011bd8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801cfe0:	2200      	movs	r2, #0
 801cfe2:	4907      	ldr	r1, [pc, #28]	; (801d000 <tcpip_tcp_timer+0x30>)
 801cfe4:	30fa      	adds	r0, #250	; 0xfa
}
 801cfe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801cfea:	f7ff bfa5 	b.w	801cf38 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801cfee:	4b05      	ldr	r3, [pc, #20]	; (801d004 <tcpip_tcp_timer+0x34>)
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d1f2      	bne.n	801cfdc <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801cff6:	4a04      	ldr	r2, [pc, #16]	; (801d008 <tcpip_tcp_timer+0x38>)
 801cff8:	6013      	str	r3, [r2, #0]
}
 801cffa:	bd08      	pop	{r3, pc}
 801cffc:	2002e198 	.word	0x2002e198
 801d000:	0801cfd1 	.word	0x0801cfd1
 801d004:	2002e1a8 	.word	0x2002e1a8
 801d008:	2001aa34 	.word	0x2001aa34

0801d00c <tcp_timer_needed>:
{
 801d00c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801d00e:	4b0b      	ldr	r3, [pc, #44]	; (801d03c <tcp_timer_needed+0x30>)
 801d010:	681a      	ldr	r2, [r3, #0]
 801d012:	b98a      	cbnz	r2, 801d038 <tcp_timer_needed+0x2c>
 801d014:	4a0a      	ldr	r2, [pc, #40]	; (801d040 <tcp_timer_needed+0x34>)
 801d016:	6812      	ldr	r2, [r2, #0]
 801d018:	b152      	cbz	r2, 801d030 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801d01a:	2201      	movs	r2, #1
 801d01c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801d01e:	f7f4 fddb 	bl	8011bd8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d022:	2200      	movs	r2, #0
 801d024:	4907      	ldr	r1, [pc, #28]	; (801d044 <tcp_timer_needed+0x38>)
 801d026:	30fa      	adds	r0, #250	; 0xfa
}
 801d028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d02c:	f7ff bf84 	b.w	801cf38 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801d030:	4a05      	ldr	r2, [pc, #20]	; (801d048 <tcp_timer_needed+0x3c>)
 801d032:	6812      	ldr	r2, [r2, #0]
 801d034:	2a00      	cmp	r2, #0
 801d036:	d1f0      	bne.n	801d01a <tcp_timer_needed+0xe>
}
 801d038:	bd08      	pop	{r3, pc}
 801d03a:	bf00      	nop
 801d03c:	2001aa34 	.word	0x2001aa34
 801d040:	2002e198 	.word	0x2002e198
 801d044:	0801cfd1 	.word	0x0801cfd1
 801d048:	2002e1a8 	.word	0x2002e1a8

0801d04c <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801d04c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801d050:	b570      	push	{r4, r5, r6, lr}
 801d052:	4604      	mov	r4, r0
 801d054:	460d      	mov	r5, r1
 801d056:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801d058:	d208      	bcs.n	801d06c <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801d05a:	f7f4 fdbd 	bl	8011bd8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d05e:	4632      	mov	r2, r6
 801d060:	4629      	mov	r1, r5
 801d062:	4420      	add	r0, r4
#endif
}
 801d064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d068:	f7ff bf66 	b.w	801cf38 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801d06c:	4b03      	ldr	r3, [pc, #12]	; (801d07c <sys_timeout+0x30>)
 801d06e:	f240 1229 	movw	r2, #297	; 0x129
 801d072:	4903      	ldr	r1, [pc, #12]	; (801d080 <sys_timeout+0x34>)
 801d074:	4803      	ldr	r0, [pc, #12]	; (801d084 <sys_timeout+0x38>)
 801d076:	f005 fa25 	bl	80224c4 <iprintf>
 801d07a:	e7ee      	b.n	801d05a <sys_timeout+0xe>
 801d07c:	08040fb0 	.word	0x08040fb0
 801d080:	08041024 	.word	0x08041024
 801d084:	08028d24 	.word	0x08028d24

0801d088 <sys_timeouts_init>:
{
 801d088:	b570      	push	{r4, r5, r6, lr}
 801d08a:	4c0a      	ldr	r4, [pc, #40]	; (801d0b4 <sys_timeouts_init+0x2c>)
 801d08c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801d090:	4e09      	ldr	r6, [pc, #36]	; (801d0b8 <sys_timeouts_init+0x30>)
 801d092:	f104 0520 	add.w	r5, r4, #32
 801d096:	4622      	mov	r2, r4
 801d098:	4631      	mov	r1, r6
 801d09a:	f7ff ffd7 	bl	801d04c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d09e:	42ac      	cmp	r4, r5
 801d0a0:	d007      	beq.n	801d0b2 <sys_timeouts_init+0x2a>
 801d0a2:	f854 0f08 	ldr.w	r0, [r4, #8]!
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801d0a6:	4631      	mov	r1, r6
 801d0a8:	4622      	mov	r2, r4
 801d0aa:	f7ff ffcf 	bl	801d04c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d0ae:	42ac      	cmp	r4, r5
 801d0b0:	d1f7      	bne.n	801d0a2 <sys_timeouts_init+0x1a>
}
 801d0b2:	bd70      	pop	{r4, r5, r6, pc}
 801d0b4:	08041064 	.word	0x08041064
 801d0b8:	0801cf95 	.word	0x0801cf95

0801d0bc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801d0bc:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801d0be:	4d0d      	ldr	r5, [pc, #52]	; (801d0f4 <sys_untimeout+0x38>)
 801d0c0:	682b      	ldr	r3, [r5, #0]
 801d0c2:	b19b      	cbz	r3, 801d0ec <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801d0c4:	2400      	movs	r4, #0
 801d0c6:	e003      	b.n	801d0d0 <sys_untimeout+0x14>
 801d0c8:	681a      	ldr	r2, [r3, #0]
 801d0ca:	461c      	mov	r4, r3
 801d0cc:	4613      	mov	r3, r2
 801d0ce:	b16a      	cbz	r2, 801d0ec <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801d0d0:	689a      	ldr	r2, [r3, #8]
 801d0d2:	4282      	cmp	r2, r0
 801d0d4:	d1f8      	bne.n	801d0c8 <sys_untimeout+0xc>
 801d0d6:	68da      	ldr	r2, [r3, #12]
 801d0d8:	428a      	cmp	r2, r1
 801d0da:	d1f5      	bne.n	801d0c8 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801d0dc:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801d0de:	b13c      	cbz	r4, 801d0f0 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801d0e0:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801d0e2:	4619      	mov	r1, r3
 801d0e4:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801d0e6:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801d0e8:	f7fa be04 	b.w	8017cf4 <memp_free>
}
 801d0ec:	bc30      	pop	{r4, r5}
 801d0ee:	4770      	bx	lr
        next_timeout = t->next;
 801d0f0:	602a      	str	r2, [r5, #0]
 801d0f2:	e7f6      	b.n	801d0e2 <sys_untimeout+0x26>
 801d0f4:	2001aa30 	.word	0x2001aa30

0801d0f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801d0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801d0fc:	f7f4 fd6c 	bl	8011bd8 <sys_now>
 801d100:	4c0d      	ldr	r4, [pc, #52]	; (801d138 <sys_check_timeouts+0x40>)
 801d102:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801d104:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801d13c <sys_check_timeouts+0x44>
 801d108:	e00c      	b.n	801d124 <sys_check_timeouts+0x2c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801d10a:	685a      	ldr	r2, [r3, #4]
 801d10c:	1abd      	subs	r5, r7, r2
 801d10e:	2d00      	cmp	r5, #0
 801d110:	db0d      	blt.n	801d12e <sys_check_timeouts+0x36>
    next_timeout = tmptimeout->next;
 801d112:	681e      	ldr	r6, [r3, #0]
    handler = tmptimeout->h;
 801d114:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801d116:	6026      	str	r6, [r4, #0]
    current_timeout_due_time = tmptimeout->time;
 801d118:	f8c8 2000 	str.w	r2, [r8]
    arg = tmptimeout->arg;
 801d11c:	68de      	ldr	r6, [r3, #12]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801d11e:	f7fa fde9 	bl	8017cf4 <memp_free>
    if (handler != NULL) {
 801d122:	b935      	cbnz	r5, 801d132 <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 801d124:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801d126:	200c      	movs	r0, #12
 801d128:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d1ed      	bne.n	801d10a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801d12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      handler(arg);
 801d132:	4630      	mov	r0, r6
 801d134:	47a8      	blx	r5
 801d136:	e7f5      	b.n	801d124 <sys_check_timeouts+0x2c>
 801d138:	2001aa30 	.word	0x2001aa30
 801d13c:	2001aa2c 	.word	0x2001aa2c

0801d140 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801d140:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801d142:	4c07      	ldr	r4, [pc, #28]	; (801d160 <sys_timeouts_sleeptime+0x20>)
 801d144:	6823      	ldr	r3, [r4, #0]
 801d146:	b13b      	cbz	r3, 801d158 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801d148:	f7f4 fd46 	bl	8011bd8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801d14c:	6823      	ldr	r3, [r4, #0]
 801d14e:	685b      	ldr	r3, [r3, #4]
 801d150:	1a18      	subs	r0, r3, r0
    return 0;
 801d152:	bf48      	it	mi
 801d154:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801d156:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801d158:	f04f 30ff 	mov.w	r0, #4294967295
}
 801d15c:	bd10      	pop	{r4, pc}
 801d15e:	bf00      	nop
 801d160:	2001aa30 	.word	0x2001aa30

0801d164 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801d164:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801d166:	f005 fa51 	bl	802260c <rand>
 801d16a:	4b02      	ldr	r3, [pc, #8]	; (801d174 <udp_init+0x10>)
 801d16c:	4a02      	ldr	r2, [pc, #8]	; (801d178 <udp_init+0x14>)
 801d16e:	4303      	orrs	r3, r0
 801d170:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801d172:	bd08      	pop	{r3, pc}
 801d174:	ffffc000 	.word	0xffffc000
 801d178:	2000040a 	.word	0x2000040a

0801d17c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801d17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801d180:	4680      	mov	r8, r0
{
 801d182:	b085      	sub	sp, #20
 801d184:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801d186:	2800      	cmp	r0, #0
 801d188:	f000 80ce 	beq.w	801d328 <udp_input+0x1ac>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801d18c:	2f00      	cmp	r7, #0
 801d18e:	f000 80d4 	beq.w	801d33a <udp_input+0x1be>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801d192:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801d3d0 <udp_input+0x254>

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801d196:	f8b8 200a 	ldrh.w	r2, [r8, #10]
  UDP_STATS_INC(udp.recv);
 801d19a:	f8bb 307a 	ldrh.w	r3, [fp, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801d19e:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 801d1a0:	f103 0301 	add.w	r3, r3, #1
 801d1a4:	f8ab 307a 	strh.w	r3, [fp, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801d1a8:	f240 80a7 	bls.w	801d2fa <udp_input+0x17e>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801d1ac:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801d3d4 <udp_input+0x258>
  udphdr = (struct udp_hdr *)p->payload;
 801d1b0:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801d1b4:	f8d9 1000 	ldr.w	r1, [r9]
 801d1b8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801d1bc:	f002 ff5c 	bl	8020078 <ip4_addr_isbroadcast_u32>
 801d1c0:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801d1c2:	8820      	ldrh	r0, [r4, #0]
 801d1c4:	f7f9 fa12 	bl	80165ec <lwip_htons>
 801d1c8:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801d1ca:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801d1cc:	9302      	str	r3, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 801d1ce:	f7f9 fa0d 	bl	80165ec <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d1d2:	4b77      	ldr	r3, [pc, #476]	; (801d3b0 <udp_input+0x234>)
  dest = lwip_ntohs(udphdr->dest);
 801d1d4:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d1d6:	681c      	ldr	r4, [r3, #0]
 801d1d8:	2c00      	cmp	r4, #0
 801d1da:	d069      	beq.n	801d2b0 <udp_input+0x134>
  uncon_pcb = NULL;
 801d1dc:	2300      	movs	r3, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d1de:	4975      	ldr	r1, [pc, #468]	; (801d3b4 <udp_input+0x238>)
  uncon_pcb = NULL;
 801d1e0:	461e      	mov	r6, r3
 801d1e2:	9303      	str	r3, [sp, #12]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d1e4:	4b74      	ldr	r3, [pc, #464]	; (801d3b8 <udp_input+0x23c>)
 801d1e6:	e004      	b.n	801d1f2 <udp_input+0x76>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d1e8:	68e2      	ldr	r2, [r4, #12]
 801d1ea:	4626      	mov	r6, r4
 801d1ec:	2a00      	cmp	r2, #0
 801d1ee:	d05c      	beq.n	801d2aa <udp_input+0x12e>
 801d1f0:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801d1f2:	8a62      	ldrh	r2, [r4, #18]
 801d1f4:	42aa      	cmp	r2, r5
 801d1f6:	d1f7      	bne.n	801d1e8 <udp_input+0x6c>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d1f8:	2f00      	cmp	r7, #0
 801d1fa:	d077      	beq.n	801d2ec <udp_input+0x170>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d1fc:	7a20      	ldrb	r0, [r4, #8]
 801d1fe:	b138      	cbz	r0, 801d210 <udp_input+0x94>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d200:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801d204:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801d208:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d20a:	b2d2      	uxtb	r2, r2
 801d20c:	4290      	cmp	r0, r2
 801d20e:	d1eb      	bne.n	801d1e8 <udp_input+0x6c>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d210:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801d212:	f1ba 0f00 	cmp.w	sl, #0
 801d216:	d03e      	beq.n	801d296 <udp_input+0x11a>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d218:	b152      	cbz	r2, 801d230 <udp_input+0xb4>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d21a:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d21e:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d222:	d005      	beq.n	801d230 <udp_input+0xb4>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801d224:	ea80 0c02 	eor.w	ip, r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d228:	68b8      	ldr	r0, [r7, #8]
 801d22a:	ea1c 0f00 	tst.w	ip, r0
 801d22e:	d1db      	bne.n	801d1e8 <udp_input+0x6c>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801d230:	7c20      	ldrb	r0, [r4, #16]
 801d232:	0740      	lsls	r0, r0, #29
 801d234:	d409      	bmi.n	801d24a <udp_input+0xce>
        if (uncon_pcb == NULL) {
 801d236:	9803      	ldr	r0, [sp, #12]
 801d238:	2800      	cmp	r0, #0
 801d23a:	d06e      	beq.n	801d31a <udp_input+0x19e>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801d23c:	f1ba 0f00 	cmp.w	sl, #0
 801d240:	d003      	beq.n	801d24a <udp_input+0xce>
 801d242:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801d246:	3001      	adds	r0, #1
 801d248:	d07e      	beq.n	801d348 <udp_input+0x1cc>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801d24a:	8aa2      	ldrh	r2, [r4, #20]
 801d24c:	9802      	ldr	r0, [sp, #8]
 801d24e:	4282      	cmp	r2, r0
 801d250:	d1ca      	bne.n	801d1e8 <udp_input+0x6c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d252:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801d254:	b11a      	cbz	r2, 801d25e <udp_input+0xe2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d256:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801d25a:	4282      	cmp	r2, r0
 801d25c:	d1c4      	bne.n	801d1e8 <udp_input+0x6c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801d25e:	2e00      	cmp	r6, #0
 801d260:	f000 809d 	beq.w	801d39e <udp_input+0x222>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 801d264:	4952      	ldr	r1, [pc, #328]	; (801d3b0 <udp_input+0x234>)
          prev->next = pcb->next;
 801d266:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
 801d268:	680b      	ldr	r3, [r1, #0]
          prev->next = pcb->next;
 801d26a:	60f2      	str	r2, [r6, #12]
          udp_pcbs = pcb;
 801d26c:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 801d26e:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801d270:	2108      	movs	r1, #8
 801d272:	4640      	mov	r0, r8
 801d274:	f7fa ffd2 	bl	801821c <pbuf_remove_header>
 801d278:	2800      	cmp	r0, #0
 801d27a:	d172      	bne.n	801d362 <udp_input+0x1e6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801d27c:	69a5      	ldr	r5, [r4, #24]
 801d27e:	2d00      	cmp	r5, #0
 801d280:	d07b      	beq.n	801d37a <udp_input+0x1fe>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801d282:	9b02      	ldr	r3, [sp, #8]
 801d284:	4642      	mov	r2, r8
 801d286:	69e0      	ldr	r0, [r4, #28]
 801d288:	4621      	mov	r1, r4
 801d28a:	9300      	str	r3, [sp, #0]
 801d28c:	4b4b      	ldr	r3, [pc, #300]	; (801d3bc <udp_input+0x240>)
 801d28e:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801d290:	b005      	add	sp, #20
 801d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d296:	2a00      	cmp	r2, #0
 801d298:	d0ca      	beq.n	801d230 <udp_input+0xb4>
 801d29a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801d29e:	4282      	cmp	r2, r0
 801d2a0:	d0c6      	beq.n	801d230 <udp_input+0xb4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d2a2:	68e2      	ldr	r2, [r4, #12]
 801d2a4:	4626      	mov	r6, r4
 801d2a6:	2a00      	cmp	r2, #0
 801d2a8:	d1a2      	bne.n	801d1f0 <udp_input+0x74>
  if (pcb != NULL) {
 801d2aa:	9b03      	ldr	r3, [sp, #12]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d17c      	bne.n	801d3aa <udp_input+0x22e>
  if (for_us) {
 801d2b0:	687a      	ldr	r2, [r7, #4]
 801d2b2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801d2b6:	429a      	cmp	r2, r3
 801d2b8:	d15f      	bne.n	801d37a <udp_input+0x1fe>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801d2ba:	2108      	movs	r1, #8
 801d2bc:	4640      	mov	r0, r8
 801d2be:	f7fa ffad 	bl	801821c <pbuf_remove_header>
 801d2c2:	2800      	cmp	r0, #0
 801d2c4:	d14d      	bne.n	801d362 <udp_input+0x1e6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801d2c6:	f1ba 0f00 	cmp.w	sl, #0
 801d2ca:	d105      	bne.n	801d2d8 <udp_input+0x15c>
 801d2cc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801d2d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d2d4:	2be0      	cmp	r3, #224	; 0xe0
 801d2d6:	d156      	bne.n	801d386 <udp_input+0x20a>
      UDP_STATS_INC(udp.proterr);
 801d2d8:	f8bb 2088 	ldrh.w	r2, [fp, #136]	; 0x88
      pbuf_free(p);
 801d2dc:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801d2de:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
      UDP_STATS_INC(udp.proterr);
 801d2e2:	3201      	adds	r2, #1
      UDP_STATS_INC(udp.drop);
 801d2e4:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 801d2e6:	f8ab 2088 	strh.w	r2, [fp, #136]	; 0x88
 801d2ea:	e00f      	b.n	801d30c <udp_input+0x190>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d2ec:	2288      	movs	r2, #136	; 0x88
 801d2ee:	4834      	ldr	r0, [pc, #208]	; (801d3c0 <udp_input+0x244>)
 801d2f0:	f005 f8e8 	bl	80224c4 <iprintf>
 801d2f4:	4b30      	ldr	r3, [pc, #192]	; (801d3b8 <udp_input+0x23c>)
 801d2f6:	492f      	ldr	r1, [pc, #188]	; (801d3b4 <udp_input+0x238>)
 801d2f8:	e780      	b.n	801d1fc <udp_input+0x80>
    UDP_STATS_INC(udp.lenerr);
 801d2fa:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
    pbuf_free(p);
 801d2fe:	4640      	mov	r0, r8
    UDP_STATS_INC(udp.drop);
 801d300:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
    UDP_STATS_INC(udp.lenerr);
 801d304:	3201      	adds	r2, #1
    UDP_STATS_INC(udp.drop);
 801d306:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 801d308:	f8ab 2082 	strh.w	r2, [fp, #130]	; 0x82
      UDP_STATS_INC(udp.drop);
 801d30c:	f8ab 307e 	strh.w	r3, [fp, #126]	; 0x7e
}
 801d310:	b005      	add	sp, #20
 801d312:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801d316:	f7fa bfbd 	b.w	8018294 <pbuf_free>
      if ((pcb->remote_port == src) &&
 801d31a:	8aa2      	ldrh	r2, [r4, #20]
 801d31c:	9802      	ldr	r0, [sp, #8]
 801d31e:	9403      	str	r4, [sp, #12]
 801d320:	4282      	cmp	r2, r0
 801d322:	f47f af61 	bne.w	801d1e8 <udp_input+0x6c>
 801d326:	e794      	b.n	801d252 <udp_input+0xd6>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801d328:	4b23      	ldr	r3, [pc, #140]	; (801d3b8 <udp_input+0x23c>)
 801d32a:	22cf      	movs	r2, #207	; 0xcf
 801d32c:	4925      	ldr	r1, [pc, #148]	; (801d3c4 <udp_input+0x248>)
 801d32e:	4824      	ldr	r0, [pc, #144]	; (801d3c0 <udp_input+0x244>)
 801d330:	f005 f8c8 	bl	80224c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801d334:	2f00      	cmp	r7, #0
 801d336:	f47f af2c 	bne.w	801d192 <udp_input+0x16>
 801d33a:	4b1f      	ldr	r3, [pc, #124]	; (801d3b8 <udp_input+0x23c>)
 801d33c:	22d0      	movs	r2, #208	; 0xd0
 801d33e:	4922      	ldr	r1, [pc, #136]	; (801d3c8 <udp_input+0x24c>)
 801d340:	481f      	ldr	r0, [pc, #124]	; (801d3c0 <udp_input+0x244>)
 801d342:	f005 f8bf 	bl	80224c4 <iprintf>
 801d346:	e724      	b.n	801d192 <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801d348:	9803      	ldr	r0, [sp, #12]
 801d34a:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801d34e:	6800      	ldr	r0, [r0, #0]
 801d350:	4570      	cmp	r0, lr
 801d352:	f43f af7a 	beq.w	801d24a <udp_input+0xce>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801d356:	9803      	ldr	r0, [sp, #12]
 801d358:	4596      	cmp	lr, r2
 801d35a:	bf08      	it	eq
 801d35c:	4620      	moveq	r0, r4
 801d35e:	9003      	str	r0, [sp, #12]
 801d360:	e773      	b.n	801d24a <udp_input+0xce>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801d362:	4b15      	ldr	r3, [pc, #84]	; (801d3b8 <udp_input+0x23c>)
 801d364:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801d368:	4918      	ldr	r1, [pc, #96]	; (801d3cc <udp_input+0x250>)
 801d36a:	4815      	ldr	r0, [pc, #84]	; (801d3c0 <udp_input+0x244>)
 801d36c:	f005 f8aa 	bl	80224c4 <iprintf>
      UDP_STATS_INC(udp.drop);
 801d370:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
      pbuf_free(p);
 801d374:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801d376:	3301      	adds	r3, #1
 801d378:	e7c8      	b.n	801d30c <udp_input+0x190>
        pbuf_free(p);
 801d37a:	4640      	mov	r0, r8
}
 801d37c:	b005      	add	sp, #20
 801d37e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801d382:	f7fa bf87 	b.w	8018294 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801d386:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801d38a:	4640      	mov	r0, r8
 801d38c:	3108      	adds	r1, #8
 801d38e:	b209      	sxth	r1, r1
 801d390:	f7fa ff78 	bl	8018284 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801d394:	2103      	movs	r1, #3
 801d396:	4640      	mov	r0, r8
 801d398:	f002 fc20 	bl	801fbdc <icmp_dest_unreach>
 801d39c:	e79c      	b.n	801d2d8 <udp_input+0x15c>
          UDP_STATS_INC(udp.cachehit);
 801d39e:	f8bb 308e 	ldrh.w	r3, [fp, #142]	; 0x8e
 801d3a2:	3301      	adds	r3, #1
 801d3a4:	f8ab 308e 	strh.w	r3, [fp, #142]	; 0x8e
 801d3a8:	e762      	b.n	801d270 <udp_input+0xf4>
 801d3aa:	9c03      	ldr	r4, [sp, #12]
 801d3ac:	e760      	b.n	801d270 <udp_input+0xf4>
 801d3ae:	bf00      	nop
 801d3b0:	2002e1b0 	.word	0x2002e1b0
 801d3b4:	080410f0 	.word	0x080410f0
 801d3b8:	0804108c 	.word	0x0804108c
 801d3bc:	2001f174 	.word	0x2001f174
 801d3c0:	08028d24 	.word	0x08028d24
 801d3c4:	080410bc 	.word	0x080410bc
 801d3c8:	080410d4 	.word	0x080410d4
 801d3cc:	08041118 	.word	0x08041118
 801d3d0:	2002e08c 	.word	0x2002e08c
 801d3d4:	2001f164 	.word	0x2001f164

0801d3d8 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801d3d8:	4b39      	ldr	r3, [pc, #228]	; (801d4c0 <udp_bind+0xe8>)
{
 801d3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801d3de:	2900      	cmp	r1, #0
 801d3e0:	bf08      	it	eq
 801d3e2:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801d3e4:	2800      	cmp	r0, #0
 801d3e6:	d060      	beq.n	801d4aa <udp_bind+0xd2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d3e8:	4f36      	ldr	r7, [pc, #216]	; (801d4c4 <udp_bind+0xec>)
 801d3ea:	683e      	ldr	r6, [r7, #0]
 801d3ec:	b34e      	cbz	r6, 801d442 <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801d3ee:	42b0      	cmp	r0, r6
 801d3f0:	d031      	beq.n	801d456 <udp_bind+0x7e>
 801d3f2:	4634      	mov	r4, r6
 801d3f4:	e001      	b.n	801d3fa <udp_bind+0x22>
 801d3f6:	42a0      	cmp	r0, r4
 801d3f8:	d02d      	beq.n	801d456 <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d3fa:	68e4      	ldr	r4, [r4, #12]
 801d3fc:	2c00      	cmp	r4, #0
 801d3fe:	d1fa      	bne.n	801d3f6 <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801d400:	b362      	cbz	r2, 801d45c <udp_bind+0x84>
 801d402:	680d      	ldr	r5, [r1, #0]
 801d404:	4633      	mov	r3, r6
 801d406:	e001      	b.n	801d40c <udp_bind+0x34>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d408:	68db      	ldr	r3, [r3, #12]
 801d40a:	b19b      	cbz	r3, 801d434 <udp_bind+0x5c>
      if (pcb != ipcb) {
 801d40c:	4298      	cmp	r0, r3
 801d40e:	d0fb      	beq.n	801d408 <udp_bind+0x30>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801d410:	8a59      	ldrh	r1, [r3, #18]
 801d412:	4291      	cmp	r1, r2
 801d414:	d1f8      	bne.n	801d408 <udp_bind+0x30>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d416:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801d418:	2900      	cmp	r1, #0
 801d41a:	bf18      	it	ne
 801d41c:	42a9      	cmpne	r1, r5
 801d41e:	d001      	beq.n	801d424 <udp_bind+0x4c>
 801d420:	2d00      	cmp	r5, #0
 801d422:	d1f1      	bne.n	801d408 <udp_bind+0x30>
      return ERR_USE;
 801d424:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801d428:	4618      	mov	r0, r3
 801d42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d42e:	680d      	ldr	r5, [r1, #0]
 801d430:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801d434:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801d436:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801d438:	b13c      	cbz	r4, 801d44a <udp_bind+0x72>
  return ERR_OK;
 801d43a:	2300      	movs	r3, #0
}
 801d43c:	4618      	mov	r0, r3
 801d43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801d442:	b382      	cbz	r2, 801d4a6 <udp_bind+0xce>
 801d444:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801d446:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801d448:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801d44a:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801d44c:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801d44e:	6038      	str	r0, [r7, #0]
}
 801d450:	4618      	mov	r0, r3
 801d452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801d456:	2401      	movs	r4, #1
  if (port == 0) {
 801d458:	2a00      	cmp	r2, #0
 801d45a:	d1d2      	bne.n	801d402 <udp_bind+0x2a>
 801d45c:	f8df e074 	ldr.w	lr, [pc, #116]	; 801d4d4 <udp_bind+0xfc>
  rebind = 0;
 801d460:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801d464:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801d468:	f8be 2000 	ldrh.w	r2, [lr]
 801d46c:	4542      	cmp	r2, r8
 801d46e:	d017      	beq.n	801d4a0 <udp_bind+0xc8>
 801d470:	3201      	adds	r2, #1
 801d472:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d474:	2e00      	cmp	r6, #0
 801d476:	d0da      	beq.n	801d42e <udp_bind+0x56>
 801d478:	4633      	mov	r3, r6
 801d47a:	e002      	b.n	801d482 <udp_bind+0xaa>
 801d47c:	68db      	ldr	r3, [r3, #12]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d0d5      	beq.n	801d42e <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 801d482:	8a5d      	ldrh	r5, [r3, #18]
 801d484:	4295      	cmp	r5, r2
 801d486:	d1f9      	bne.n	801d47c <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801d488:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d48c:	fa1f fc8c 	uxth.w	ip, ip
 801d490:	f1bc 0f00 	cmp.w	ip, #0
 801d494:	d1ea      	bne.n	801d46c <udp_bind+0x94>
      return ERR_USE;
 801d496:	f06f 0307 	mvn.w	r3, #7
 801d49a:	f8ae 2000 	strh.w	r2, [lr]
 801d49e:	e7cd      	b.n	801d43c <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801d4a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801d4a4:	e7e6      	b.n	801d474 <udp_bind+0x9c>
  rebind = 0;
 801d4a6:	4634      	mov	r4, r6
 801d4a8:	e7d8      	b.n	801d45c <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801d4aa:	4b07      	ldr	r3, [pc, #28]	; (801d4c8 <udp_bind+0xf0>)
 801d4ac:	f240 32b7 	movw	r2, #951	; 0x3b7
 801d4b0:	4906      	ldr	r1, [pc, #24]	; (801d4cc <udp_bind+0xf4>)
 801d4b2:	4807      	ldr	r0, [pc, #28]	; (801d4d0 <udp_bind+0xf8>)
 801d4b4:	f005 f806 	bl	80224c4 <iprintf>
 801d4b8:	f06f 030f 	mvn.w	r3, #15
 801d4bc:	e7be      	b.n	801d43c <udp_bind+0x64>
 801d4be:	bf00      	nop
 801d4c0:	08041a0c 	.word	0x08041a0c
 801d4c4:	2002e1b0 	.word	0x2002e1b0
 801d4c8:	0804108c 	.word	0x0804108c
 801d4cc:	08041134 	.word	0x08041134
 801d4d0:	08028d24 	.word	0x08028d24
 801d4d4:	2000040a 	.word	0x2000040a

0801d4d8 <udp_sendto_if_src>:
{
 801d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4dc:	b085      	sub	sp, #20
 801d4de:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801d4e2:	2800      	cmp	r0, #0
 801d4e4:	f000 8094 	beq.w	801d610 <udp_sendto_if_src+0x138>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801d4e8:	460d      	mov	r5, r1
 801d4ea:	2900      	cmp	r1, #0
 801d4ec:	f000 8086 	beq.w	801d5fc <udp_sendto_if_src+0x124>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d4f0:	4690      	mov	r8, r2
 801d4f2:	2a00      	cmp	r2, #0
 801d4f4:	d078      	beq.n	801d5e8 <udp_sendto_if_src+0x110>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801d4f6:	f1ba 0f00 	cmp.w	sl, #0
 801d4fa:	d06b      	beq.n	801d5d4 <udp_sendto_if_src+0xfc>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801d4fc:	f1bb 0f00 	cmp.w	fp, #0
 801d500:	f000 8090 	beq.w	801d624 <udp_sendto_if_src+0x14c>
  if (pcb->local_port == 0) {
 801d504:	8a42      	ldrh	r2, [r0, #18]
 801d506:	4699      	mov	r9, r3
 801d508:	4604      	mov	r4, r0
 801d50a:	2a00      	cmp	r2, #0
 801d50c:	d03e      	beq.n	801d58c <udp_sendto_if_src+0xb4>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801d50e:	892a      	ldrh	r2, [r5, #8]
 801d510:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801d514:	429a      	cmp	r2, r3
 801d516:	d85a      	bhi.n	801d5ce <udp_sendto_if_src+0xf6>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801d518:	2108      	movs	r1, #8
 801d51a:	4628      	mov	r0, r5
 801d51c:	f7fa fe7a 	bl	8018214 <pbuf_add_header>
 801d520:	2800      	cmp	r0, #0
 801d522:	d13d      	bne.n	801d5a0 <udp_sendto_if_src+0xc8>
 801d524:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801d526:	8973      	ldrh	r3, [r6, #10]
 801d528:	2b07      	cmp	r3, #7
 801d52a:	d948      	bls.n	801d5be <udp_sendto_if_src+0xe6>
  udphdr->src = lwip_htons(pcb->local_port);
 801d52c:	8a60      	ldrh	r0, [r4, #18]
  udphdr = (struct udp_hdr *)q->payload;
 801d52e:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801d530:	f7f9 f85c 	bl	80165ec <lwip_htons>
 801d534:	4603      	mov	r3, r0
  udphdr->dest = lwip_htons(dst_port);
 801d536:	4648      	mov	r0, r9
  udphdr->src = lwip_htons(pcb->local_port);
 801d538:	803b      	strh	r3, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 801d53a:	f7f9 f857 	bl	80165ec <lwip_htons>
  udphdr->chksum = 0x0000;
 801d53e:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801d540:	4602      	mov	r2, r0
    udphdr->len = lwip_htons(q->tot_len);
 801d542:	8930      	ldrh	r0, [r6, #8]
  udphdr->chksum = 0x0000;
 801d544:	71bb      	strb	r3, [r7, #6]
  udphdr->dest = lwip_htons(dst_port);
 801d546:	807a      	strh	r2, [r7, #2]
  udphdr->chksum = 0x0000;
 801d548:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801d54a:	f7f9 f84f 	bl	80165ec <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801d54e:	f04f 0c11 	mov.w	ip, #17
    udphdr->len = lwip_htons(q->tot_len);
 801d552:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801d554:	4642      	mov	r2, r8
 801d556:	7aa3      	ldrb	r3, [r4, #10]
 801d558:	4651      	mov	r1, sl
 801d55a:	f8cd b008 	str.w	fp, [sp, #8]
 801d55e:	4630      	mov	r0, r6
 801d560:	9300      	str	r3, [sp, #0]
 801d562:	7ae3      	ldrb	r3, [r4, #11]
 801d564:	f8cd c004 	str.w	ip, [sp, #4]
 801d568:	f002 fcca 	bl	801ff00 <ip4_output_if_src>
  if (q != p) {
 801d56c:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801d56e:	4607      	mov	r7, r0
  if (q != p) {
 801d570:	d002      	beq.n	801d578 <udp_sendto_if_src+0xa0>
    pbuf_free(q);
 801d572:	4630      	mov	r0, r6
 801d574:	f7fa fe8e 	bl	8018294 <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 801d578:	4a2f      	ldr	r2, [pc, #188]	; (801d638 <udp_sendto_if_src+0x160>)
 801d57a:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 801d57e:	3301      	adds	r3, #1
 801d580:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
}
 801d584:	4638      	mov	r0, r7
 801d586:	b005      	add	sp, #20
 801d588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d58c:	4601      	mov	r1, r0
 801d58e:	f7ff ff23 	bl	801d3d8 <udp_bind>
    if (err != ERR_OK) {
 801d592:	4607      	mov	r7, r0
 801d594:	2800      	cmp	r0, #0
 801d596:	d0ba      	beq.n	801d50e <udp_sendto_if_src+0x36>
}
 801d598:	4638      	mov	r0, r7
 801d59a:	b005      	add	sp, #20
 801d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801d5a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d5a4:	2108      	movs	r1, #8
 801d5a6:	2022      	movs	r0, #34	; 0x22
 801d5a8:	f7fa fee2 	bl	8018370 <pbuf_alloc>
    if (q == NULL) {
 801d5ac:	4606      	mov	r6, r0
 801d5ae:	b170      	cbz	r0, 801d5ce <udp_sendto_if_src+0xf6>
    if (p->tot_len != 0) {
 801d5b0:	892b      	ldrh	r3, [r5, #8]
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d0b7      	beq.n	801d526 <udp_sendto_if_src+0x4e>
      pbuf_chain(q, p);
 801d5b6:	4629      	mov	r1, r5
 801d5b8:	f7fb f82e 	bl	8018618 <pbuf_chain>
 801d5bc:	e7b3      	b.n	801d526 <udp_sendto_if_src+0x4e>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801d5be:	4b1f      	ldr	r3, [pc, #124]	; (801d63c <udp_sendto_if_src+0x164>)
 801d5c0:	f240 320d 	movw	r2, #781	; 0x30d
 801d5c4:	491e      	ldr	r1, [pc, #120]	; (801d640 <udp_sendto_if_src+0x168>)
 801d5c6:	481f      	ldr	r0, [pc, #124]	; (801d644 <udp_sendto_if_src+0x16c>)
 801d5c8:	f004 ff7c 	bl	80224c4 <iprintf>
 801d5cc:	e7ae      	b.n	801d52c <udp_sendto_if_src+0x54>
    return ERR_MEM;
 801d5ce:	f04f 37ff 	mov.w	r7, #4294967295
 801d5d2:	e7d7      	b.n	801d584 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801d5d4:	4b19      	ldr	r3, [pc, #100]	; (801d63c <udp_sendto_if_src+0x164>)
 801d5d6:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801d5da:	491b      	ldr	r1, [pc, #108]	; (801d648 <udp_sendto_if_src+0x170>)
 801d5dc:	f06f 070f 	mvn.w	r7, #15
 801d5e0:	4818      	ldr	r0, [pc, #96]	; (801d644 <udp_sendto_if_src+0x16c>)
 801d5e2:	f004 ff6f 	bl	80224c4 <iprintf>
 801d5e6:	e7cd      	b.n	801d584 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d5e8:	4b14      	ldr	r3, [pc, #80]	; (801d63c <udp_sendto_if_src+0x164>)
 801d5ea:	f240 22d3 	movw	r2, #723	; 0x2d3
 801d5ee:	4917      	ldr	r1, [pc, #92]	; (801d64c <udp_sendto_if_src+0x174>)
 801d5f0:	f06f 070f 	mvn.w	r7, #15
 801d5f4:	4813      	ldr	r0, [pc, #76]	; (801d644 <udp_sendto_if_src+0x16c>)
 801d5f6:	f004 ff65 	bl	80224c4 <iprintf>
 801d5fa:	e7c3      	b.n	801d584 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801d5fc:	4b0f      	ldr	r3, [pc, #60]	; (801d63c <udp_sendto_if_src+0x164>)
 801d5fe:	f240 22d2 	movw	r2, #722	; 0x2d2
 801d602:	4913      	ldr	r1, [pc, #76]	; (801d650 <udp_sendto_if_src+0x178>)
 801d604:	f06f 070f 	mvn.w	r7, #15
 801d608:	480e      	ldr	r0, [pc, #56]	; (801d644 <udp_sendto_if_src+0x16c>)
 801d60a:	f004 ff5b 	bl	80224c4 <iprintf>
 801d60e:	e7b9      	b.n	801d584 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801d610:	4b0a      	ldr	r3, [pc, #40]	; (801d63c <udp_sendto_if_src+0x164>)
 801d612:	f240 22d1 	movw	r2, #721	; 0x2d1
 801d616:	490f      	ldr	r1, [pc, #60]	; (801d654 <udp_sendto_if_src+0x17c>)
 801d618:	f06f 070f 	mvn.w	r7, #15
 801d61c:	4809      	ldr	r0, [pc, #36]	; (801d644 <udp_sendto_if_src+0x16c>)
 801d61e:	f004 ff51 	bl	80224c4 <iprintf>
 801d622:	e7af      	b.n	801d584 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801d624:	4b05      	ldr	r3, [pc, #20]	; (801d63c <udp_sendto_if_src+0x164>)
 801d626:	f240 22d5 	movw	r2, #725	; 0x2d5
 801d62a:	490b      	ldr	r1, [pc, #44]	; (801d658 <udp_sendto_if_src+0x180>)
 801d62c:	f06f 070f 	mvn.w	r7, #15
 801d630:	4804      	ldr	r0, [pc, #16]	; (801d644 <udp_sendto_if_src+0x16c>)
 801d632:	f004 ff47 	bl	80224c4 <iprintf>
 801d636:	e7a5      	b.n	801d584 <udp_sendto_if_src+0xac>
 801d638:	2002e08c 	.word	0x2002e08c
 801d63c:	0804108c 	.word	0x0804108c
 801d640:	080411f8 	.word	0x080411f8
 801d644:	08028d24 	.word	0x08028d24
 801d648:	080411b0 	.word	0x080411b0
 801d64c:	0804118c 	.word	0x0804118c
 801d650:	0804116c 	.word	0x0804116c
 801d654:	0804114c 	.word	0x0804114c
 801d658:	080411d4 	.word	0x080411d4

0801d65c <udp_sendto_if>:
{
 801d65c:	b570      	push	{r4, r5, r6, lr}
 801d65e:	b082      	sub	sp, #8
 801d660:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801d662:	2800      	cmp	r0, #0
 801d664:	d035      	beq.n	801d6d2 <udp_sendto_if+0x76>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801d666:	b351      	cbz	r1, 801d6be <udp_sendto_if+0x62>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d668:	b1fa      	cbz	r2, 801d6aa <udp_sendto_if+0x4e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801d66a:	b1a4      	cbz	r4, 801d696 <udp_sendto_if+0x3a>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d66c:	6805      	ldr	r5, [r0, #0]
 801d66e:	b935      	cbnz	r5, 801d67e <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 801d670:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801d672:	e9cd 4500 	strd	r4, r5, [sp]
 801d676:	f7ff ff2f 	bl	801d4d8 <udp_sendto_if_src>
}
 801d67a:	b002      	add	sp, #8
 801d67c:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801d67e:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d682:	2ee0      	cmp	r6, #224	; 0xe0
 801d684:	d0f4      	beq.n	801d670 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801d686:	6866      	ldr	r6, [r4, #4]
 801d688:	42b5      	cmp	r5, r6
 801d68a:	d101      	bne.n	801d690 <udp_sendto_if+0x34>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d68c:	4605      	mov	r5, r0
 801d68e:	e7f0      	b.n	801d672 <udp_sendto_if+0x16>
        return ERR_RTE;
 801d690:	f06f 0003 	mvn.w	r0, #3
 801d694:	e7f1      	b.n	801d67a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801d696:	4b14      	ldr	r3, [pc, #80]	; (801d6e8 <udp_sendto_if+0x8c>)
 801d698:	f240 2283 	movw	r2, #643	; 0x283
 801d69c:	4913      	ldr	r1, [pc, #76]	; (801d6ec <udp_sendto_if+0x90>)
 801d69e:	4814      	ldr	r0, [pc, #80]	; (801d6f0 <udp_sendto_if+0x94>)
 801d6a0:	f004 ff10 	bl	80224c4 <iprintf>
 801d6a4:	f06f 000f 	mvn.w	r0, #15
 801d6a8:	e7e7      	b.n	801d67a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d6aa:	4b0f      	ldr	r3, [pc, #60]	; (801d6e8 <udp_sendto_if+0x8c>)
 801d6ac:	f240 2282 	movw	r2, #642	; 0x282
 801d6b0:	4910      	ldr	r1, [pc, #64]	; (801d6f4 <udp_sendto_if+0x98>)
 801d6b2:	480f      	ldr	r0, [pc, #60]	; (801d6f0 <udp_sendto_if+0x94>)
 801d6b4:	f004 ff06 	bl	80224c4 <iprintf>
 801d6b8:	f06f 000f 	mvn.w	r0, #15
 801d6bc:	e7dd      	b.n	801d67a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801d6be:	4b0a      	ldr	r3, [pc, #40]	; (801d6e8 <udp_sendto_if+0x8c>)
 801d6c0:	f240 2281 	movw	r2, #641	; 0x281
 801d6c4:	490c      	ldr	r1, [pc, #48]	; (801d6f8 <udp_sendto_if+0x9c>)
 801d6c6:	480a      	ldr	r0, [pc, #40]	; (801d6f0 <udp_sendto_if+0x94>)
 801d6c8:	f004 fefc 	bl	80224c4 <iprintf>
 801d6cc:	f06f 000f 	mvn.w	r0, #15
 801d6d0:	e7d3      	b.n	801d67a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801d6d2:	4b05      	ldr	r3, [pc, #20]	; (801d6e8 <udp_sendto_if+0x8c>)
 801d6d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d6d8:	4908      	ldr	r1, [pc, #32]	; (801d6fc <udp_sendto_if+0xa0>)
 801d6da:	4805      	ldr	r0, [pc, #20]	; (801d6f0 <udp_sendto_if+0x94>)
 801d6dc:	f004 fef2 	bl	80224c4 <iprintf>
 801d6e0:	f06f 000f 	mvn.w	r0, #15
 801d6e4:	e7c9      	b.n	801d67a <udp_sendto_if+0x1e>
 801d6e6:	bf00      	nop
 801d6e8:	0804108c 	.word	0x0804108c
 801d6ec:	08041280 	.word	0x08041280
 801d6f0:	08028d24 	.word	0x08028d24
 801d6f4:	08041260 	.word	0x08041260
 801d6f8:	08041244 	.word	0x08041244
 801d6fc:	08041228 	.word	0x08041228

0801d700 <udp_sendto>:
{
 801d700:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d702:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801d704:	b3a0      	cbz	r0, 801d770 <udp_sendto+0x70>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801d706:	460e      	mov	r6, r1
 801d708:	b341      	cbz	r1, 801d75c <udp_sendto+0x5c>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d70a:	4615      	mov	r5, r2
 801d70c:	b1e2      	cbz	r2, 801d748 <udp_sendto+0x48>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801d70e:	4604      	mov	r4, r0
 801d710:	7a00      	ldrb	r0, [r0, #8]
 801d712:	461f      	mov	r7, r3
 801d714:	b158      	cbz	r0, 801d72e <udp_sendto+0x2e>
    netif = netif_get_by_index(pcb->netif_idx);
 801d716:	f7fa fcdf 	bl	80180d8 <netif_get_by_index>
  if (netif == NULL) {
 801d71a:	b160      	cbz	r0, 801d736 <udp_sendto+0x36>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801d71c:	9000      	str	r0, [sp, #0]
 801d71e:	463b      	mov	r3, r7
 801d720:	462a      	mov	r2, r5
 801d722:	4631      	mov	r1, r6
 801d724:	4620      	mov	r0, r4
 801d726:	f7ff ff99 	bl	801d65c <udp_sendto_if>
}
 801d72a:	b003      	add	sp, #12
 801d72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801d72e:	4610      	mov	r0, r2
 801d730:	f002 fa76 	bl	801fc20 <ip4_route>
 801d734:	e7f1      	b.n	801d71a <udp_sendto+0x1a>
    UDP_STATS_INC(udp.rterr);
 801d736:	4a13      	ldr	r2, [pc, #76]	; (801d784 <udp_sendto+0x84>)
    return ERR_RTE;
 801d738:	f06f 0003 	mvn.w	r0, #3
    UDP_STATS_INC(udp.rterr);
 801d73c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 801d740:	3301      	adds	r3, #1
 801d742:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
    return ERR_RTE;
 801d746:	e7f0      	b.n	801d72a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d748:	4b0f      	ldr	r3, [pc, #60]	; (801d788 <udp_sendto+0x88>)
 801d74a:	f240 221a 	movw	r2, #538	; 0x21a
 801d74e:	490f      	ldr	r1, [pc, #60]	; (801d78c <udp_sendto+0x8c>)
 801d750:	480f      	ldr	r0, [pc, #60]	; (801d790 <udp_sendto+0x90>)
 801d752:	f004 feb7 	bl	80224c4 <iprintf>
 801d756:	f06f 000f 	mvn.w	r0, #15
 801d75a:	e7e6      	b.n	801d72a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801d75c:	4b0a      	ldr	r3, [pc, #40]	; (801d788 <udp_sendto+0x88>)
 801d75e:	f240 2219 	movw	r2, #537	; 0x219
 801d762:	490c      	ldr	r1, [pc, #48]	; (801d794 <udp_sendto+0x94>)
 801d764:	480a      	ldr	r0, [pc, #40]	; (801d790 <udp_sendto+0x90>)
 801d766:	f004 fead 	bl	80224c4 <iprintf>
 801d76a:	f06f 000f 	mvn.w	r0, #15
 801d76e:	e7dc      	b.n	801d72a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801d770:	4b05      	ldr	r3, [pc, #20]	; (801d788 <udp_sendto+0x88>)
 801d772:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d776:	4908      	ldr	r1, [pc, #32]	; (801d798 <udp_sendto+0x98>)
 801d778:	4805      	ldr	r0, [pc, #20]	; (801d790 <udp_sendto+0x90>)
 801d77a:	f004 fea3 	bl	80224c4 <iprintf>
 801d77e:	f06f 000f 	mvn.w	r0, #15
 801d782:	e7d2      	b.n	801d72a <udp_sendto+0x2a>
 801d784:	2002e08c 	.word	0x2002e08c
 801d788:	0804108c 	.word	0x0804108c
 801d78c:	080412d4 	.word	0x080412d4
 801d790:	08028d24 	.word	0x08028d24
 801d794:	080412b8 	.word	0x080412b8
 801d798:	080412a0 	.word	0x080412a0

0801d79c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d79c:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d79e:	b320      	cbz	r0, 801d7ea <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d7a0:	460d      	mov	r5, r1
 801d7a2:	b361      	cbz	r1, 801d7fe <udp_connect+0x62>

  if (pcb->local_port == 0) {
 801d7a4:	4616      	mov	r6, r2
 801d7a6:	8a42      	ldrh	r2, [r0, #18]
 801d7a8:	4604      	mov	r4, r0
 801d7aa:	b1c2      	cbz	r2, 801d7de <udp_connect+0x42>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801d7ac:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d7ae:	4919      	ldr	r1, [pc, #100]	; (801d814 <udp_connect+0x78>)
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801d7b0:	6828      	ldr	r0, [r5, #0]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801d7b2:	f043 0304 	orr.w	r3, r3, #4
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d7b6:	680a      	ldr	r2, [r1, #0]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801d7b8:	6060      	str	r0, [r4, #4]
  pcb->remote_port = port;
 801d7ba:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801d7bc:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d7be:	b142      	cbz	r2, 801d7d2 <udp_connect+0x36>
    if (pcb == ipcb) {
 801d7c0:	4294      	cmp	r4, r2
 801d7c2:	d00a      	beq.n	801d7da <udp_connect+0x3e>
 801d7c4:	4613      	mov	r3, r2
 801d7c6:	e001      	b.n	801d7cc <udp_connect+0x30>
 801d7c8:	429c      	cmp	r4, r3
 801d7ca:	d006      	beq.n	801d7da <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d7cc:	68db      	ldr	r3, [r3, #12]
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d1fa      	bne.n	801d7c8 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 801d7d2:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 801d7d4:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801d7d6:	600c      	str	r4, [r1, #0]
}
 801d7d8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801d7da:	2000      	movs	r0, #0
}
 801d7dc:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d7de:	4601      	mov	r1, r0
 801d7e0:	f7ff fdfa 	bl	801d3d8 <udp_bind>
    if (err != ERR_OK) {
 801d7e4:	2800      	cmp	r0, #0
 801d7e6:	d0e1      	beq.n	801d7ac <udp_connect+0x10>
}
 801d7e8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d7ea:	4b0b      	ldr	r3, [pc, #44]	; (801d818 <udp_connect+0x7c>)
 801d7ec:	f240 4235 	movw	r2, #1077	; 0x435
 801d7f0:	490a      	ldr	r1, [pc, #40]	; (801d81c <udp_connect+0x80>)
 801d7f2:	480b      	ldr	r0, [pc, #44]	; (801d820 <udp_connect+0x84>)
 801d7f4:	f004 fe66 	bl	80224c4 <iprintf>
 801d7f8:	f06f 000f 	mvn.w	r0, #15
}
 801d7fc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d7fe:	4b06      	ldr	r3, [pc, #24]	; (801d818 <udp_connect+0x7c>)
 801d800:	f240 4236 	movw	r2, #1078	; 0x436
 801d804:	4907      	ldr	r1, [pc, #28]	; (801d824 <udp_connect+0x88>)
 801d806:	4806      	ldr	r0, [pc, #24]	; (801d820 <udp_connect+0x84>)
 801d808:	f004 fe5c 	bl	80224c4 <iprintf>
 801d80c:	f06f 000f 	mvn.w	r0, #15
}
 801d810:	bd70      	pop	{r4, r5, r6, pc}
 801d812:	bf00      	nop
 801d814:	2002e1b0 	.word	0x2002e1b0
 801d818:	0804108c 	.word	0x0804108c
 801d81c:	080412f0 	.word	0x080412f0
 801d820:	08028d24 	.word	0x08028d24
 801d824:	0804130c 	.word	0x0804130c

0801d828 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801d828:	b110      	cbz	r0, 801d830 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801d82a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801d82e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801d830:	4b03      	ldr	r3, [pc, #12]	; (801d840 <udp_recv+0x18>)
 801d832:	f240 428a 	movw	r2, #1162	; 0x48a
 801d836:	4903      	ldr	r1, [pc, #12]	; (801d844 <udp_recv+0x1c>)
 801d838:	4803      	ldr	r0, [pc, #12]	; (801d848 <udp_recv+0x20>)
 801d83a:	f004 be43 	b.w	80224c4 <iprintf>
 801d83e:	bf00      	nop
 801d840:	0804108c 	.word	0x0804108c
 801d844:	08041328 	.word	0x08041328
 801d848:	08028d24 	.word	0x08028d24

0801d84c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801d84c:	4601      	mov	r1, r0
 801d84e:	b1a0      	cbz	r0, 801d87a <udp_remove+0x2e>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801d850:	4b0d      	ldr	r3, [pc, #52]	; (801d888 <udp_remove+0x3c>)
 801d852:	681a      	ldr	r2, [r3, #0]
 801d854:	4282      	cmp	r2, r0
 801d856:	d006      	beq.n	801d866 <udp_remove+0x1a>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d858:	b13a      	cbz	r2, 801d86a <udp_remove+0x1e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801d85a:	68d3      	ldr	r3, [r2, #12]
 801d85c:	b12b      	cbz	r3, 801d86a <udp_remove+0x1e>
 801d85e:	428b      	cmp	r3, r1
 801d860:	d006      	beq.n	801d870 <udp_remove+0x24>
 801d862:	461a      	mov	r2, r3
 801d864:	e7f8      	b.n	801d858 <udp_remove+0xc>
    udp_pcbs = udp_pcbs->next;
 801d866:	68c2      	ldr	r2, [r0, #12]
 801d868:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801d86a:	2001      	movs	r0, #1
 801d86c:	f7fa ba42 	b.w	8017cf4 <memp_free>
        pcb2->next = pcb->next;
 801d870:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801d872:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801d874:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801d876:	f7fa ba3d 	b.w	8017cf4 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801d87a:	4b04      	ldr	r3, [pc, #16]	; (801d88c <udp_remove+0x40>)
 801d87c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801d880:	4903      	ldr	r1, [pc, #12]	; (801d890 <udp_remove+0x44>)
 801d882:	4804      	ldr	r0, [pc, #16]	; (801d894 <udp_remove+0x48>)
 801d884:	f004 be1e 	b.w	80224c4 <iprintf>
 801d888:	2002e1b0 	.word	0x2002e1b0
 801d88c:	0804108c 	.word	0x0804108c
 801d890:	08041340 	.word	0x08041340
 801d894:	08028d24 	.word	0x08028d24

0801d898 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801d898:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801d89a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801d89e:	4907      	ldr	r1, [pc, #28]	; (801d8bc <udp_new+0x24>)
 801d8a0:	2001      	movs	r0, #1
 801d8a2:	f7fa fa03 	bl	8017cac <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801d8a6:	4604      	mov	r4, r0
 801d8a8:	b128      	cbz	r0, 801d8b6 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801d8aa:	2220      	movs	r2, #32
 801d8ac:	2100      	movs	r1, #0
 801d8ae:	f003 fe97 	bl	80215e0 <memset>
    pcb->ttl = UDP_TTL;
 801d8b2:	23ff      	movs	r3, #255	; 0xff
 801d8b4:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801d8b6:	4620      	mov	r0, r4
 801d8b8:	bd10      	pop	{r4, pc}
 801d8ba:	bf00      	nop
 801d8bc:	0804108c 	.word	0x0804108c

0801d8c0 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801d8c0:	f7ff bfea 	b.w	801d898 <udp_new>

0801d8c4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801d8c4:	b110      	cbz	r0, 801d8cc <udp_netif_ip_addr_changed+0x8>
 801d8c6:	6802      	ldr	r2, [r0, #0]
 801d8c8:	b101      	cbz	r1, 801d8cc <udp_netif_ip_addr_changed+0x8>
 801d8ca:	b902      	cbnz	r2, 801d8ce <udp_netif_ip_addr_changed+0xa>
 801d8cc:	4770      	bx	lr
 801d8ce:	680b      	ldr	r3, [r1, #0]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d0fb      	beq.n	801d8cc <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d8d4:	4b08      	ldr	r3, [pc, #32]	; (801d8f8 <udp_netif_ip_addr_changed+0x34>)
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d0f7      	beq.n	801d8cc <udp_netif_ip_addr_changed+0x8>
{
 801d8dc:	b410      	push	{r4}
 801d8de:	e000      	b.n	801d8e2 <udp_netif_ip_addr_changed+0x1e>
 801d8e0:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801d8e2:	681c      	ldr	r4, [r3, #0]
 801d8e4:	4294      	cmp	r4, r2
 801d8e6:	d101      	bne.n	801d8ec <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801d8e8:	680a      	ldr	r2, [r1, #0]
 801d8ea:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d8ec:	68db      	ldr	r3, [r3, #12]
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d1f6      	bne.n	801d8e0 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801d8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8f6:	4770      	bx	lr
 801d8f8:	2002e1b0 	.word	0x2002e1b0

0801d8fc <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d8fe:	1c87      	adds	r7, r0, #2
{
 801d900:	4604      	mov	r4, r0
 801d902:	460d      	mov	r5, r1
 801d904:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d906:	2f44      	cmp	r7, #68	; 0x44
 801d908:	d806      	bhi.n	801d918 <dhcp_option_short+0x1c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801d90a:	1c63      	adds	r3, r4, #1
 801d90c:	0a32      	lsrs	r2, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 801d90e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801d910:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801d912:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801d914:	54ee      	strb	r6, [r5, r3]
}
 801d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d918:	4b03      	ldr	r3, [pc, #12]	; (801d928 <dhcp_option_short+0x2c>)
 801d91a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801d91e:	4903      	ldr	r1, [pc, #12]	; (801d92c <dhcp_option_short+0x30>)
 801d920:	4803      	ldr	r0, [pc, #12]	; (801d930 <dhcp_option_short+0x34>)
 801d922:	f004 fdcf 	bl	80224c4 <iprintf>
 801d926:	e7f0      	b.n	801d90a <dhcp_option_short+0xe>
 801d928:	08041358 	.word	0x08041358
 801d92c:	08041390 	.word	0x08041390
 801d930:	08028d24 	.word	0x08028d24

0801d934 <dhcp_option>:
{
 801d934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d936:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d938:	3302      	adds	r3, #2
{
 801d93a:	4604      	mov	r4, r0
 801d93c:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d93e:	4403      	add	r3, r0
{
 801d940:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d942:	2b44      	cmp	r3, #68	; 0x44
 801d944:	d806      	bhi.n	801d954 <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 801d946:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 801d948:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 801d94a:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 801d94c:	b29b      	uxth	r3, r3
}
 801d94e:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 801d950:	54ee      	strb	r6, [r5, r3]
}
 801d952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d954:	4b03      	ldr	r3, [pc, #12]	; (801d964 <dhcp_option+0x30>)
 801d956:	f240 529a 	movw	r2, #1434	; 0x59a
 801d95a:	4903      	ldr	r1, [pc, #12]	; (801d968 <dhcp_option+0x34>)
 801d95c:	4803      	ldr	r0, [pc, #12]	; (801d96c <dhcp_option+0x38>)
 801d95e:	f004 fdb1 	bl	80224c4 <iprintf>
 801d962:	e7f0      	b.n	801d946 <dhcp_option+0x12>
 801d964:	08041358 	.word	0x08041358
 801d968:	080413cc 	.word	0x080413cc
 801d96c:	08028d24 	.word	0x08028d24

0801d970 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d972:	1d07      	adds	r7, r0, #4
{
 801d974:	4604      	mov	r4, r0
 801d976:	460d      	mov	r5, r1
 801d978:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d97a:	2f44      	cmp	r7, #68	; 0x44
 801d97c:	d80e      	bhi.n	801d99c <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801d97e:	0e30      	lsrs	r0, r6, #24
 801d980:	1c61      	adds	r1, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d982:	1ca2      	adds	r2, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d984:	1ce3      	adds	r3, r4, #3
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801d986:	5528      	strb	r0, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d988:	b289      	uxth	r1, r1
 801d98a:	0c34      	lsrs	r4, r6, #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d98c:	b292      	uxth	r2, r2
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d98e:	546c      	strb	r4, [r5, r1]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801d990:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d992:	0a31      	lsrs	r1, r6, #8
  return options_out_len;
}
 801d994:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d996:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801d998:	54ee      	strb	r6, [r5, r3]
}
 801d99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d99c:	4b03      	ldr	r3, [pc, #12]	; (801d9ac <dhcp_option_long+0x3c>)
 801d99e:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801d9a2:	4903      	ldr	r1, [pc, #12]	; (801d9b0 <dhcp_option_long+0x40>)
 801d9a4:	4803      	ldr	r0, [pc, #12]	; (801d9b4 <dhcp_option_long+0x44>)
 801d9a6:	f004 fd8d 	bl	80224c4 <iprintf>
 801d9aa:	e7e8      	b.n	801d97e <dhcp_option_long+0xe>
 801d9ac:	08041358 	.word	0x08041358
 801d9b0:	08041410 	.word	0x08041410
 801d9b4:	08028d24 	.word	0x08028d24

0801d9b8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801d9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801d9bc:	4606      	mov	r6, r0
 801d9be:	2800      	cmp	r0, #0
 801d9c0:	f000 809a 	beq.w	801daf8 <dhcp_create_msg+0x140>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801d9c4:	460c      	mov	r4, r1
 801d9c6:	2900      	cmp	r1, #0
 801d9c8:	f000 808d 	beq.w	801dae6 <dhcp_create_msg+0x12e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801d9cc:	4690      	mov	r8, r2
 801d9ce:	f44f 719a 	mov.w	r1, #308	; 0x134
 801d9d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d9d6:	2036      	movs	r0, #54	; 0x36
 801d9d8:	4699      	mov	r9, r3
 801d9da:	f7fa fcc9 	bl	8018370 <pbuf_alloc>
  if (p_out == NULL) {
 801d9de:	4607      	mov	r7, r0
 801d9e0:	2800      	cmp	r0, #0
 801d9e2:	d04a      	beq.n	801da7a <dhcp_create_msg+0xc2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801d9e4:	8943      	ldrh	r3, [r0, #10]
 801d9e6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801d9ea:	d374      	bcc.n	801dad6 <dhcp_create_msg+0x11e>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801d9ec:	f1b8 0f03 	cmp.w	r8, #3
 801d9f0:	d053      	beq.n	801da9a <dhcp_create_msg+0xe2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801d9f2:	79a3      	ldrb	r3, [r4, #6]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d043      	beq.n	801da80 <dhcp_create_msg+0xc8>
 801d9f8:	4b44      	ldr	r3, [pc, #272]	; (801db0c <dhcp_create_msg+0x154>)
 801d9fa:	6818      	ldr	r0, [r3, #0]
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801d9fc:	f8d7 a004 	ldr.w	sl, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801da00:	f44f 729a 	mov.w	r2, #308	; 0x134
 801da04:	2100      	movs	r1, #0
    dhcp->xid = xid;
 801da06:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801da08:	4650      	mov	r0, sl
 801da0a:	f003 fde9 	bl	80215e0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801da0e:	2301      	movs	r3, #1
 801da10:	f88a 3000 	strb.w	r3, [sl]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801da14:	f88a 3001 	strb.w	r3, [sl, #1]
  msg_out->hlen = netif->hwaddr_len;
 801da18:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801da1c:	f88a 3002 	strb.w	r3, [sl, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801da20:	6820      	ldr	r0, [r4, #0]
 801da22:	f7f8 fde7 	bl	80165f4 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801da26:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 801da2a:	f8ca 0004 	str.w	r0, [sl, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801da2e:	d12c      	bne.n	801da8a <dhcp_create_msg+0xd2>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801da30:	6873      	ldr	r3, [r6, #4]
 801da32:	f8ca 300c 	str.w	r3, [sl, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801da36:	f106 012e 	add.w	r1, r6, #46	; 0x2e
 801da3a:	f10a 041c 	add.w	r4, sl, #28
 801da3e:	3634      	adds	r6, #52	; 0x34
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801da40:	f811 5b01 	ldrb.w	r5, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801da44:	428e      	cmp	r6, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 801da46:	f804 5b01 	strb.w	r5, [r4], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801da4a:	d1f9      	bne.n	801da40 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801da4c:	2363      	movs	r3, #99	; 0x63
 801da4e:	f06f 047d 	mvn.w	r4, #125	; 0x7d
 801da52:	2053      	movs	r0, #83	; 0x53
  options[options_out_len++] = option_type;
 801da54:	2135      	movs	r1, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801da56:	f88a 30ec 	strb.w	r3, [sl, #236]	; 0xec
  options[options_out_len++] = option_len;
 801da5a:	2201      	movs	r2, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801da5c:	f88a 30ef 	strb.w	r3, [sl, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 801da60:	2303      	movs	r3, #3
  options[options_out_len++] = value;
 801da62:	f88a 80f2 	strb.w	r8, [sl, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801da66:	f88a 40ed 	strb.w	r4, [sl, #237]	; 0xed
 801da6a:	f88a 00ee 	strb.w	r0, [sl, #238]	; 0xee
  options[options_out_len++] = option_type;
 801da6e:	f88a 10f0 	strb.w	r1, [sl, #240]	; 0xf0
  options[options_out_len++] = option_len;
 801da72:	f88a 20f1 	strb.w	r2, [sl, #241]	; 0xf1
    *options_out_len = options_out_len_loc;
 801da76:	f8a9 3000 	strh.w	r3, [r9]
  }
  return p_out;
}
 801da7a:	4638      	mov	r0, r7
 801da7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      xid = LWIP_RAND();
 801da80:	f004 fdc4 	bl	802260c <rand>
 801da84:	4b21      	ldr	r3, [pc, #132]	; (801db0c <dhcp_create_msg+0x154>)
 801da86:	6018      	str	r0, [r3, #0]
 801da88:	e7b8      	b.n	801d9fc <dhcp_create_msg+0x44>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801da8a:	f1a8 0307 	sub.w	r3, r8, #7
 801da8e:	2b01      	cmp	r3, #1
 801da90:	d9ce      	bls.n	801da30 <dhcp_create_msg+0x78>
 801da92:	f1b8 0f03 	cmp.w	r8, #3
 801da96:	d1ce      	bne.n	801da36 <dhcp_create_msg+0x7e>
 801da98:	e018      	b.n	801dacc <dhcp_create_msg+0x114>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801da9a:	7963      	ldrb	r3, [r4, #5]
 801da9c:	2b03      	cmp	r3, #3
 801da9e:	d0a8      	beq.n	801d9f2 <dhcp_create_msg+0x3a>
  msg_out = (struct dhcp_msg *)p_out->payload;
 801daa0:	f8d7 a004 	ldr.w	sl, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801daa4:	f44f 729a 	mov.w	r2, #308	; 0x134
 801daa8:	2100      	movs	r1, #0
 801daaa:	4650      	mov	r0, sl
 801daac:	f003 fd98 	bl	80215e0 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 801dab0:	2301      	movs	r3, #1
 801dab2:	f88a 3000 	strb.w	r3, [sl]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801dab6:	f88a 3001 	strb.w	r3, [sl, #1]
  msg_out->hlen = netif->hwaddr_len;
 801daba:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801dabe:	f88a 3002 	strb.w	r3, [sl, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801dac2:	6820      	ldr	r0, [r4, #0]
 801dac4:	f7f8 fd96 	bl	80165f4 <lwip_htonl>
 801dac8:	f8ca 0004 	str.w	r0, [sl, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801dacc:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801dace:	3b04      	subs	r3, #4
 801dad0:	2b01      	cmp	r3, #1
 801dad2:	d8b0      	bhi.n	801da36 <dhcp_create_msg+0x7e>
 801dad4:	e7ac      	b.n	801da30 <dhcp_create_msg+0x78>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801dad6:	4b0e      	ldr	r3, [pc, #56]	; (801db10 <dhcp_create_msg+0x158>)
 801dad8:	f240 7271 	movw	r2, #1905	; 0x771
 801dadc:	490d      	ldr	r1, [pc, #52]	; (801db14 <dhcp_create_msg+0x15c>)
 801dade:	480e      	ldr	r0, [pc, #56]	; (801db18 <dhcp_create_msg+0x160>)
 801dae0:	f004 fcf0 	bl	80224c4 <iprintf>
 801dae4:	e782      	b.n	801d9ec <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801dae6:	4b0a      	ldr	r3, [pc, #40]	; (801db10 <dhcp_create_msg+0x158>)
 801dae8:	f240 726a 	movw	r2, #1898	; 0x76a
 801daec:	490b      	ldr	r1, [pc, #44]	; (801db1c <dhcp_create_msg+0x164>)
 801daee:	4627      	mov	r7, r4
 801daf0:	4809      	ldr	r0, [pc, #36]	; (801db18 <dhcp_create_msg+0x160>)
 801daf2:	f004 fce7 	bl	80224c4 <iprintf>
 801daf6:	e7c0      	b.n	801da7a <dhcp_create_msg+0xc2>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801daf8:	4607      	mov	r7, r0
 801dafa:	4b05      	ldr	r3, [pc, #20]	; (801db10 <dhcp_create_msg+0x158>)
 801dafc:	f240 7269 	movw	r2, #1897	; 0x769
 801db00:	4907      	ldr	r1, [pc, #28]	; (801db20 <dhcp_create_msg+0x168>)
 801db02:	4805      	ldr	r0, [pc, #20]	; (801db18 <dhcp_create_msg+0x160>)
 801db04:	f004 fcde 	bl	80224c4 <iprintf>
 801db08:	e7b7      	b.n	801da7a <dhcp_create_msg+0xc2>
 801db0a:	bf00      	nop
 801db0c:	2001aa40 	.word	0x2001aa40
 801db10:	08041358 	.word	0x08041358
 801db14:	0804148c 	.word	0x0804148c
 801db18:	08028d24 	.word	0x08028d24
 801db1c:	0804146c 	.word	0x0804146c
 801db20:	0804144c 	.word	0x0804144c

0801db24 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801db24:	4603      	mov	r3, r0
 801db26:	4610      	mov	r0, r2
 801db28:	b470      	push	{r4, r5, r6}
  options[options_out_len++] = DHCP_OPTION_END;
 801db2a:	1c5c      	adds	r4, r3, #1
 801db2c:	25ff      	movs	r5, #255	; 0xff
 801db2e:	b2a4      	uxth	r4, r4
 801db30:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801db32:	2c43      	cmp	r4, #67	; 0x43
 801db34:	d80c      	bhi.n	801db50 <dhcp_option_trailer+0x2c>
 801db36:	f1c3 0642 	rsb	r6, r3, #66	; 0x42
 801db3a:	1e63      	subs	r3, r4, #1
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801db3c:	2500      	movs	r5, #0
 801db3e:	fa14 f486 	uxtah	r4, r4, r6
 801db42:	440b      	add	r3, r1
 801db44:	440c      	add	r4, r1
 801db46:	f803 5f01 	strb.w	r5, [r3, #1]!
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801db4a:	42a3      	cmp	r3, r4
 801db4c:	d1fb      	bne.n	801db46 <dhcp_option_trailer+0x22>
    options[options_out_len++] = 0;
 801db4e:	2444      	movs	r4, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801db50:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
}
 801db54:	bc70      	pop	{r4, r5, r6}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801db56:	b289      	uxth	r1, r1
 801db58:	f7fa bca8 	b.w	80184ac <pbuf_realloc>

0801db5c <dhcp_reboot>:
{
 801db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801db60:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 801db62:	b087      	sub	sp, #28
 801db64:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 801db66:	797b      	ldrb	r3, [r7, #5]
 801db68:	2b03      	cmp	r3, #3
 801db6a:	d004      	beq.n	801db76 <dhcp_reboot+0x1a>
    dhcp->tries = 0;
 801db6c:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801db6e:	2203      	movs	r2, #3
    dhcp->tries = 0;
 801db70:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 801db72:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 801db74:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801db76:	f10d 0316 	add.w	r3, sp, #22
 801db7a:	2203      	movs	r2, #3
 801db7c:	4639      	mov	r1, r7
 801db7e:	4648      	mov	r0, r9
 801db80:	f7ff ff1a 	bl	801d9b8 <dhcp_create_msg>
  if (p_out != NULL) {
 801db84:	4680      	mov	r8, r0
 801db86:	2800      	cmp	r0, #0
 801db88:	d07a      	beq.n	801dc80 <dhcp_reboot+0x124>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801db8a:	6845      	ldr	r5, [r0, #4]
 801db8c:	2302      	movs	r3, #2
 801db8e:	2239      	movs	r2, #57	; 0x39
 801db90:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801db94:	35f0      	adds	r5, #240	; 0xf0
 801db96:	4e3c      	ldr	r6, [pc, #240]	; (801dc88 <dhcp_reboot+0x12c>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801db98:	f04f 0a01 	mov.w	sl, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801db9c:	4629      	mov	r1, r5
 801db9e:	f106 0b03 	add.w	fp, r6, #3
 801dba2:	f7ff fec7 	bl	801d934 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801dba6:	4629      	mov	r1, r5
 801dba8:	f44f 7210 	mov.w	r2, #576	; 0x240
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801dbac:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801dbb0:	f7ff fea4 	bl	801d8fc <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801dbb4:	2304      	movs	r3, #4
 801dbb6:	4629      	mov	r1, r5
 801dbb8:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801dbba:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801dbbe:	f7ff feb9 	bl	801d934 <dhcp_option>
 801dbc2:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dbc4:	69f8      	ldr	r0, [r7, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801dbc6:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dbca:	f7f8 fd13 	bl	80165f4 <lwip_htonl>
 801dbce:	4629      	mov	r1, r5
 801dbd0:	4602      	mov	r2, r0
 801dbd2:	4620      	mov	r0, r4
 801dbd4:	f7ff fecc 	bl	801d970 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dbd8:	4629      	mov	r1, r5
 801dbda:	2304      	movs	r3, #4
 801dbdc:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dbde:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dbe2:	f7ff fea7 	bl	801d934 <dhcp_option>
 801dbe6:	4604      	mov	r4, r0
 801dbe8:	9003      	str	r0, [sp, #12]
 801dbea:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801dbee:	2c43      	cmp	r4, #67	; 0x43
 801dbf0:	d80b      	bhi.n	801dc0a <dhcp_reboot+0xae>
  options[options_out_len++] = value;
 801dbf2:	1c63      	adds	r3, r4, #1
 801dbf4:	f805 a004 	strb.w	sl, [r5, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801dbf8:	455e      	cmp	r6, fp
  options[options_out_len++] = value;
 801dbfa:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801dbfc:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801dc00:	d00b      	beq.n	801dc1a <dhcp_reboot+0xbe>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801dc02:	2c43      	cmp	r4, #67	; 0x43
 801dc04:	f816 ab01 	ldrb.w	sl, [r6], #1
 801dc08:	d9f3      	bls.n	801dbf2 <dhcp_reboot+0x96>
 801dc0a:	4b20      	ldr	r3, [pc, #128]	; (801dc8c <dhcp_reboot+0x130>)
 801dc0c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801dc10:	491f      	ldr	r1, [pc, #124]	; (801dc90 <dhcp_reboot+0x134>)
 801dc12:	4820      	ldr	r0, [pc, #128]	; (801dc94 <dhcp_reboot+0x138>)
 801dc14:	f004 fc56 	bl	80224c4 <iprintf>
 801dc18:	e7eb      	b.n	801dbf2 <dhcp_reboot+0x96>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801dc1a:	9803      	ldr	r0, [sp, #12]
 801dc1c:	4629      	mov	r1, r5
 801dc1e:	4642      	mov	r2, r8
 801dc20:	3004      	adds	r0, #4
 801dc22:	b280      	uxth	r0, r0
 801dc24:	f7ff ff7e 	bl	801db24 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801dc28:	4a1b      	ldr	r2, [pc, #108]	; (801dc98 <dhcp_reboot+0x13c>)
 801dc2a:	f8cd 9000 	str.w	r9, [sp]
 801dc2e:	2343      	movs	r3, #67	; 0x43
 801dc30:	6810      	ldr	r0, [r2, #0]
 801dc32:	4641      	mov	r1, r8
 801dc34:	4a19      	ldr	r2, [pc, #100]	; (801dc9c <dhcp_reboot+0x140>)
 801dc36:	f7ff fd11 	bl	801d65c <udp_sendto_if>
 801dc3a:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801dc3c:	4640      	mov	r0, r8
 801dc3e:	f7fa fb29 	bl	8018294 <pbuf_free>
  if (dhcp->tries < 255) {
 801dc42:	79bb      	ldrb	r3, [r7, #6]
 801dc44:	2bff      	cmp	r3, #255	; 0xff
 801dc46:	d015      	beq.n	801dc74 <dhcp_reboot+0x118>
    dhcp->tries++;
 801dc48:	3301      	adds	r3, #1
 801dc4a:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801dc4c:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801dc4e:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801dc50:	d810      	bhi.n	801dc74 <dhcp_reboot+0x118>
 801dc52:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801dc56:	4a12      	ldr	r2, [pc, #72]	; (801dca0 <dhcp_reboot+0x144>)
}
 801dc58:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801dc5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801dc5e:	00db      	lsls	r3, r3, #3
 801dc60:	b29b      	uxth	r3, r3
 801dc62:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801dc66:	fba2 2303 	umull	r2, r3, r2, r3
 801dc6a:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801dc6c:	813b      	strh	r3, [r7, #8]
}
 801dc6e:	b007      	add	sp, #28
 801dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801dc74:	2314      	movs	r3, #20
}
 801dc76:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801dc78:	813b      	strh	r3, [r7, #8]
}
 801dc7a:	b007      	add	sp, #28
 801dc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801dc80:	f04f 34ff 	mov.w	r4, #4294967295
 801dc84:	e7dd      	b.n	801dc42 <dhcp_reboot+0xe6>
 801dc86:	bf00      	nop
 801dc88:	080416d1 	.word	0x080416d1
 801dc8c:	08041358 	.word	0x08041358
 801dc90:	080414cc 	.word	0x080414cc
 801dc94:	08028d24 	.word	0x08028d24
 801dc98:	2001aa38 	.word	0x2001aa38
 801dc9c:	08041a10 	.word	0x08041a10
 801dca0:	10624dd3 	.word	0x10624dd3

0801dca4 <dhcp_select>:
{
 801dca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dca8:	b087      	sub	sp, #28
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801dcaa:	2800      	cmp	r0, #0
 801dcac:	f000 80ad 	beq.w	801de0a <dhcp_select+0x166>
  dhcp = netif_dhcp_data(netif);
 801dcb0:	6a85      	ldr	r5, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801dcb2:	4607      	mov	r7, r0
 801dcb4:	2d00      	cmp	r5, #0
 801dcb6:	f000 809e 	beq.w	801ddf6 <dhcp_select+0x152>
  if (new_state != dhcp->state) {
 801dcba:	796b      	ldrb	r3, [r5, #5]
 801dcbc:	2b01      	cmp	r3, #1
 801dcbe:	d004      	beq.n	801dcca <dhcp_select+0x26>
    dhcp->tries = 0;
 801dcc0:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801dcc2:	2201      	movs	r2, #1
    dhcp->tries = 0;
 801dcc4:	71ab      	strb	r3, [r5, #6]
    dhcp->state = new_state;
 801dcc6:	716a      	strb	r2, [r5, #5]
    dhcp->request_timeout = 0;
 801dcc8:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801dcca:	f10d 0316 	add.w	r3, sp, #22
 801dcce:	2203      	movs	r2, #3
 801dcd0:	4629      	mov	r1, r5
 801dcd2:	4638      	mov	r0, r7
 801dcd4:	f7ff fe70 	bl	801d9b8 <dhcp_create_msg>
  if (p_out != NULL) {
 801dcd8:	4681      	mov	r9, r0
 801dcda:	2800      	cmp	r0, #0
 801dcdc:	f000 8088 	beq.w	801ddf0 <dhcp_select+0x14c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801dce0:	6846      	ldr	r6, [r0, #4]
 801dce2:	2302      	movs	r3, #2
 801dce4:	2239      	movs	r2, #57	; 0x39
 801dce6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801dcea:	36f0      	adds	r6, #240	; 0xf0
 801dcec:	f8df 8154 	ldr.w	r8, [pc, #340]	; 801de44 <dhcp_select+0x1a0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dcf0:	f04f 0b01 	mov.w	fp, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801dcf4:	4631      	mov	r1, r6
 801dcf6:	f108 0a03 	add.w	sl, r8, #3
 801dcfa:	f7ff fe1b 	bl	801d934 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801dcfe:	4631      	mov	r1, r6
 801dd00:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801dd02:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801dd06:	f7ff fdf9 	bl	801d8fc <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801dd0a:	2304      	movs	r3, #4
 801dd0c:	4631      	mov	r1, r6
 801dd0e:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801dd10:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801dd14:	f7ff fe0e 	bl	801d934 <dhcp_option>
 801dd18:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dd1a:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801dd1c:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dd20:	f7f8 fc68 	bl	80165f4 <lwip_htonl>
 801dd24:	4631      	mov	r1, r6
 801dd26:	4602      	mov	r2, r0
 801dd28:	4620      	mov	r0, r4
 801dd2a:	f7ff fe21 	bl	801d970 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801dd2e:	2304      	movs	r3, #4
 801dd30:	4631      	mov	r1, r6
 801dd32:	2236      	movs	r2, #54	; 0x36
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dd34:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801dd38:	f7ff fdfc 	bl	801d934 <dhcp_option>
 801dd3c:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801dd3e:	69a8      	ldr	r0, [r5, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801dd40:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801dd44:	f7f8 fc56 	bl	80165f4 <lwip_htonl>
 801dd48:	4631      	mov	r1, r6
 801dd4a:	4602      	mov	r2, r0
 801dd4c:	4620      	mov	r0, r4
 801dd4e:	f7ff fe0f 	bl	801d970 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dd52:	4631      	mov	r1, r6
 801dd54:	2304      	movs	r3, #4
 801dd56:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801dd58:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dd5c:	f7ff fdea 	bl	801d934 <dhcp_option>
 801dd60:	4604      	mov	r4, r0
 801dd62:	9003      	str	r0, [sp, #12]
 801dd64:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801dd68:	2c43      	cmp	r4, #67	; 0x43
 801dd6a:	d80b      	bhi.n	801dd84 <dhcp_select+0xe0>
  options[options_out_len++] = value;
 801dd6c:	1c63      	adds	r3, r4, #1
 801dd6e:	f806 b004 	strb.w	fp, [r6, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801dd72:	45d0      	cmp	r8, sl
  options[options_out_len++] = value;
 801dd74:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801dd76:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801dd7a:	d00b      	beq.n	801dd94 <dhcp_select+0xf0>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801dd7c:	2c43      	cmp	r4, #67	; 0x43
 801dd7e:	f818 bb01 	ldrb.w	fp, [r8], #1
 801dd82:	d9f3      	bls.n	801dd6c <dhcp_select+0xc8>
 801dd84:	4b26      	ldr	r3, [pc, #152]	; (801de20 <dhcp_select+0x17c>)
 801dd86:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801dd8a:	4926      	ldr	r1, [pc, #152]	; (801de24 <dhcp_select+0x180>)
 801dd8c:	4826      	ldr	r0, [pc, #152]	; (801de28 <dhcp_select+0x184>)
 801dd8e:	f004 fb99 	bl	80224c4 <iprintf>
 801dd92:	e7eb      	b.n	801dd6c <dhcp_select+0xc8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801dd94:	9803      	ldr	r0, [sp, #12]
 801dd96:	4631      	mov	r1, r6
 801dd98:	464a      	mov	r2, r9
 801dd9a:	3004      	adds	r0, #4
 801dd9c:	b280      	uxth	r0, r0
 801dd9e:	f7ff fec1 	bl	801db24 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801dda2:	4a22      	ldr	r2, [pc, #136]	; (801de2c <dhcp_select+0x188>)
 801dda4:	4822      	ldr	r0, [pc, #136]	; (801de30 <dhcp_select+0x18c>)
 801dda6:	2343      	movs	r3, #67	; 0x43
 801dda8:	9700      	str	r7, [sp, #0]
 801ddaa:	4649      	mov	r1, r9
 801ddac:	6800      	ldr	r0, [r0, #0]
 801ddae:	9201      	str	r2, [sp, #4]
 801ddb0:	4a20      	ldr	r2, [pc, #128]	; (801de34 <dhcp_select+0x190>)
 801ddb2:	f7ff fb91 	bl	801d4d8 <udp_sendto_if_src>
 801ddb6:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801ddb8:	4648      	mov	r0, r9
 801ddba:	f7fa fa6b 	bl	8018294 <pbuf_free>
  if (dhcp->tries < 255) {
 801ddbe:	79ab      	ldrb	r3, [r5, #6]
 801ddc0:	2bff      	cmp	r3, #255	; 0xff
 801ddc2:	d013      	beq.n	801ddec <dhcp_select+0x148>
    dhcp->tries++;
 801ddc4:	3301      	adds	r3, #1
 801ddc6:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801ddc8:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801ddca:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801ddcc:	d80e      	bhi.n	801ddec <dhcp_select+0x148>
 801ddce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ddd2:	4919      	ldr	r1, [pc, #100]	; (801de38 <dhcp_select+0x194>)
 801ddd4:	4093      	lsls	r3, r2
 801ddd6:	b29b      	uxth	r3, r3
 801ddd8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801dddc:	fba1 2303 	umull	r2, r3, r1, r3
 801dde0:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801dde2:	812b      	strh	r3, [r5, #8]
}
 801dde4:	4620      	mov	r0, r4
 801dde6:	b007      	add	sp, #28
 801dde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801ddec:	2378      	movs	r3, #120	; 0x78
 801ddee:	e7f8      	b.n	801dde2 <dhcp_select+0x13e>
 801ddf0:	f04f 34ff 	mov.w	r4, #4294967295
 801ddf4:	e7e3      	b.n	801ddbe <dhcp_select+0x11a>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801ddf6:	4b0a      	ldr	r3, [pc, #40]	; (801de20 <dhcp_select+0x17c>)
 801ddf8:	f240 1279 	movw	r2, #377	; 0x179
 801ddfc:	490f      	ldr	r1, [pc, #60]	; (801de3c <dhcp_select+0x198>)
 801ddfe:	f06f 0405 	mvn.w	r4, #5
 801de02:	4809      	ldr	r0, [pc, #36]	; (801de28 <dhcp_select+0x184>)
 801de04:	f004 fb5e 	bl	80224c4 <iprintf>
 801de08:	e7ec      	b.n	801dde4 <dhcp_select+0x140>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801de0a:	4b05      	ldr	r3, [pc, #20]	; (801de20 <dhcp_select+0x17c>)
 801de0c:	f240 1277 	movw	r2, #375	; 0x177
 801de10:	490b      	ldr	r1, [pc, #44]	; (801de40 <dhcp_select+0x19c>)
 801de12:	f06f 040f 	mvn.w	r4, #15
 801de16:	4804      	ldr	r0, [pc, #16]	; (801de28 <dhcp_select+0x184>)
 801de18:	f004 fb54 	bl	80224c4 <iprintf>
 801de1c:	e7e2      	b.n	801dde4 <dhcp_select+0x140>
 801de1e:	bf00      	nop
 801de20:	08041358 	.word	0x08041358
 801de24:	080414cc 	.word	0x080414cc
 801de28:	08028d24 	.word	0x08028d24
 801de2c:	08041a0c 	.word	0x08041a0c
 801de30:	2001aa38 	.word	0x2001aa38
 801de34:	08041a10 	.word	0x08041a10
 801de38:	10624dd3 	.word	0x10624dd3
 801de3c:	08041520 	.word	0x08041520
 801de40:	08041504 	.word	0x08041504
 801de44:	080416d1 	.word	0x080416d1

0801de48 <dhcp_discover>:
{
 801de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801de4c:	6a85      	ldr	r5, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801de4e:	2300      	movs	r3, #0
{
 801de50:	b087      	sub	sp, #28
 801de52:	4680      	mov	r8, r0
  if (new_state != dhcp->state) {
 801de54:	796a      	ldrb	r2, [r5, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801de56:	61eb      	str	r3, [r5, #28]
  if (new_state != dhcp->state) {
 801de58:	2a06      	cmp	r2, #6
 801de5a:	d003      	beq.n	801de64 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 801de5c:	2206      	movs	r2, #6
    dhcp->tries = 0;
 801de5e:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
 801de60:	812b      	strh	r3, [r5, #8]
    dhcp->state = new_state;
 801de62:	716a      	strb	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801de64:	f10d 0316 	add.w	r3, sp, #22
 801de68:	2201      	movs	r2, #1
 801de6a:	4629      	mov	r1, r5
 801de6c:	4640      	mov	r0, r8
 801de6e:	f7ff fda3 	bl	801d9b8 <dhcp_create_msg>
  if (p_out != NULL) {
 801de72:	4607      	mov	r7, r0
 801de74:	2800      	cmp	r0, #0
 801de76:	d04c      	beq.n	801df12 <dhcp_discover+0xca>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801de78:	6841      	ldr	r1, [r0, #4]
 801de7a:	2302      	movs	r3, #2
 801de7c:	2239      	movs	r2, #57	; 0x39
 801de7e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801de82:	f101 09f0 	add.w	r9, r1, #240	; 0xf0
 801de86:	4e31      	ldr	r6, [pc, #196]	; (801df4c <dhcp_discover+0x104>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801de88:	f04f 0a01 	mov.w	sl, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801de8c:	4649      	mov	r1, r9
 801de8e:	f106 0b03 	add.w	fp, r6, #3
 801de92:	f7ff fd4f 	bl	801d934 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801de96:	4649      	mov	r1, r9
 801de98:	f8b8 202c 	ldrh.w	r2, [r8, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801de9c:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801dea0:	f7ff fd2c 	bl	801d8fc <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dea4:	4649      	mov	r1, r9
 801dea6:	2304      	movs	r3, #4
 801dea8:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801deaa:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801deae:	f7ff fd41 	bl	801d934 <dhcp_option>
 801deb2:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801deb4:	4926      	ldr	r1, [pc, #152]	; (801df50 <dhcp_discover+0x108>)
 801deb6:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801deb8:	9003      	str	r0, [sp, #12]
 801deba:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801debe:	d80b      	bhi.n	801ded8 <dhcp_discover+0x90>
  options[options_out_len++] = value;
 801dec0:	1c63      	adds	r3, r4, #1
 801dec2:	f809 a004 	strb.w	sl, [r9, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801dec6:	455e      	cmp	r6, fp
  options[options_out_len++] = value;
 801dec8:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801deca:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801dece:	d00b      	beq.n	801dee8 <dhcp_discover+0xa0>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ded0:	2c43      	cmp	r4, #67	; 0x43
 801ded2:	f816 ab01 	ldrb.w	sl, [r6], #1
 801ded6:	d9f3      	bls.n	801dec0 <dhcp_discover+0x78>
 801ded8:	4b1e      	ldr	r3, [pc, #120]	; (801df54 <dhcp_discover+0x10c>)
 801deda:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801dede:	481e      	ldr	r0, [pc, #120]	; (801df58 <dhcp_discover+0x110>)
 801dee0:	f004 faf0 	bl	80224c4 <iprintf>
 801dee4:	491a      	ldr	r1, [pc, #104]	; (801df50 <dhcp_discover+0x108>)
 801dee6:	e7eb      	b.n	801dec0 <dhcp_discover+0x78>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801dee8:	9803      	ldr	r0, [sp, #12]
 801deea:	4649      	mov	r1, r9
 801deec:	463a      	mov	r2, r7
 801deee:	3004      	adds	r0, #4
 801def0:	b280      	uxth	r0, r0
 801def2:	f7ff fe17 	bl	801db24 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801def6:	4a19      	ldr	r2, [pc, #100]	; (801df5c <dhcp_discover+0x114>)
 801def8:	4819      	ldr	r0, [pc, #100]	; (801df60 <dhcp_discover+0x118>)
 801defa:	2343      	movs	r3, #67	; 0x43
 801defc:	f8cd 8000 	str.w	r8, [sp]
 801df00:	4639      	mov	r1, r7
 801df02:	6800      	ldr	r0, [r0, #0]
 801df04:	9201      	str	r2, [sp, #4]
 801df06:	4a17      	ldr	r2, [pc, #92]	; (801df64 <dhcp_discover+0x11c>)
 801df08:	f7ff fae6 	bl	801d4d8 <udp_sendto_if_src>
    pbuf_free(p_out);
 801df0c:	4638      	mov	r0, r7
 801df0e:	f7fa f9c1 	bl	8018294 <pbuf_free>
  if (dhcp->tries < 255) {
 801df12:	79ab      	ldrb	r3, [r5, #6]
 801df14:	2bff      	cmp	r3, #255	; 0xff
 801df16:	d013      	beq.n	801df40 <dhcp_discover+0xf8>
    dhcp->tries++;
 801df18:	3301      	adds	r3, #1
 801df1a:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801df1c:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801df1e:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801df20:	d80e      	bhi.n	801df40 <dhcp_discover+0xf8>
 801df22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801df26:	4910      	ldr	r1, [pc, #64]	; (801df68 <dhcp_discover+0x120>)
}
 801df28:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801df2a:	4093      	lsls	r3, r2
 801df2c:	b29b      	uxth	r3, r3
 801df2e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801df32:	fba1 2303 	umull	r2, r3, r1, r3
 801df36:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801df38:	812b      	strh	r3, [r5, #8]
}
 801df3a:	b007      	add	sp, #28
 801df3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  options[options_out_len++] = value;
 801df40:	2378      	movs	r3, #120	; 0x78
}
 801df42:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801df44:	812b      	strh	r3, [r5, #8]
}
 801df46:	b007      	add	sp, #28
 801df48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df4c:	080416d1 	.word	0x080416d1
 801df50:	080414cc 	.word	0x080414cc
 801df54:	08041358 	.word	0x08041358
 801df58:	08028d24 	.word	0x08028d24
 801df5c:	08041a0c 	.word	0x08041a0c
 801df60:	2001aa38 	.word	0x2001aa38
 801df64:	08041a10 	.word	0x08041a10
 801df68:	10624dd3 	.word	0x10624dd3

0801df6c <dhcp_check>:
{
 801df6c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801df6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801df70:	7963      	ldrb	r3, [r4, #5]
 801df72:	2b08      	cmp	r3, #8
 801df74:	d004      	beq.n	801df80 <dhcp_check+0x14>
    dhcp->tries = 0;
 801df76:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801df78:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801df7a:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801df7c:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801df7e:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801df80:	2200      	movs	r2, #0
 801df82:	f104 011c 	add.w	r1, r4, #28
 801df86:	f001 fadb 	bl	801f540 <etharp_query>
  if (dhcp->tries < 255) {
 801df8a:	79a3      	ldrb	r3, [r4, #6]
 801df8c:	2bff      	cmp	r3, #255	; 0xff
 801df8e:	d001      	beq.n	801df94 <dhcp_check+0x28>
    dhcp->tries++;
 801df90:	3301      	adds	r3, #1
 801df92:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801df94:	2301      	movs	r3, #1
 801df96:	8123      	strh	r3, [r4, #8]
}
 801df98:	bd10      	pop	{r4, pc}
 801df9a:	bf00      	nop

0801df9c <dhcp_bind>:
{
 801df9c:	b510      	push	{r4, lr}
 801df9e:	b082      	sub	sp, #8
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801dfa0:	2800      	cmp	r0, #0
 801dfa2:	f000 8085 	beq.w	801e0b0 <dhcp_bind+0x114>
  dhcp = netif_dhcp_data(netif);
 801dfa6:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801dfa8:	2900      	cmp	r1, #0
 801dfaa:	f000 8089 	beq.w	801e0c0 <dhcp_bind+0x124>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801dfae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801dfb0:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801dfb2:	1c5c      	adds	r4, r3, #1
  dhcp->lease_used = 0;
 801dfb4:	824a      	strh	r2, [r1, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801dfb6:	d00d      	beq.n	801dfd4 <dhcp_bind+0x38>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801dfb8:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801dfba:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801dfbe:	d254      	bcs.n	801e06a <dhcp_bind+0xce>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801dfc0:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 801dfc4:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801dfc6:	fba2 4203 	umull	r4, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 801dfca:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 801dfce:	d87f      	bhi.n	801e0d0 <dhcp_bind+0x134>
      dhcp->t0_timeout = 1;
 801dfd0:	2301      	movs	r3, #1
 801dfd2:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801dfd4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801dfd6:	1c5a      	adds	r2, r3, #1
 801dfd8:	d04d      	beq.n	801e076 <dhcp_bind+0xda>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801dfda:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801dfdc:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801dfe0:	d23f      	bcs.n	801e062 <dhcp_bind+0xc6>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801dfe2:	4a3c      	ldr	r2, [pc, #240]	; (801e0d4 <dhcp_bind+0x138>)
    if (dhcp->t1_timeout == 0) {
 801dfe4:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801dfe6:	fba2 4203 	umull	r4, r2, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 801dfea:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t1_timeout == 0) {
 801dfee:	d83a      	bhi.n	801e066 <dhcp_bind+0xca>
      dhcp->t1_timeout = 1;
 801dff0:	2301      	movs	r3, #1
 801dff2:	461a      	mov	r2, r3
 801dff4:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801dff6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801dff8:	81ca      	strh	r2, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801dffa:	1c63      	adds	r3, r4, #1
 801dffc:	d03f      	beq.n	801e07e <dhcp_bind+0xe2>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801dffe:	341e      	adds	r4, #30
    if (timeout > 0xffff) {
 801e000:	f5b4 1f70 	cmp.w	r4, #3932160	; 0x3c0000
 801e004:	d248      	bcs.n	801e098 <dhcp_bind+0xfc>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801e006:	4b33      	ldr	r3, [pc, #204]	; (801e0d4 <dhcp_bind+0x138>)
    if (dhcp->t2_timeout == 0) {
 801e008:	2c3b      	cmp	r4, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801e00a:	fba3 c304 	umull	ip, r3, r3, r4
    dhcp->t2_timeout = (u16_t)timeout;
 801e00e:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 801e012:	d843      	bhi.n	801e09c <dhcp_bind+0x100>
      dhcp->t2_timeout = 1;
 801e014:	2401      	movs	r4, #1
 801e016:	4623      	mov	r3, r4
 801e018:	818c      	strh	r4, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801e01a:	2401      	movs	r4, #1
 801e01c:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801e01e:	4293      	cmp	r3, r2
 801e020:	d802      	bhi.n	801e028 <dhcp_bind+0x8c>
 801e022:	b10c      	cbz	r4, 801e028 <dhcp_bind+0x8c>
    dhcp->t1_timeout = 0;
 801e024:	2300      	movs	r3, #0
 801e026:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 801e028:	79cb      	ldrb	r3, [r1, #7]
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d02c      	beq.n	801e088 <dhcp_bind+0xec>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801e02e:	6a0b      	ldr	r3, [r1, #32]
 801e030:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801e032:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801e034:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 801e036:	b92b      	cbnz	r3, 801e044 <dhcp_bind+0xa8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801e038:	69cb      	ldr	r3, [r1, #28]
 801e03a:	9a00      	ldr	r2, [sp, #0]
 801e03c:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801e03e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e042:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801e044:	794b      	ldrb	r3, [r1, #5]
 801e046:	2b0a      	cmp	r3, #10
 801e048:	d004      	beq.n	801e054 <dhcp_bind+0xb8>
    dhcp->tries = 0;
 801e04a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801e04c:	220a      	movs	r2, #10
    dhcp->tries = 0;
 801e04e:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 801e050:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 801e052:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801e054:	311c      	adds	r1, #28
 801e056:	ab01      	add	r3, sp, #4
 801e058:	466a      	mov	r2, sp
 801e05a:	f7f9 fed1 	bl	8017e00 <netif_set_addr>
}
 801e05e:	b002      	add	sp, #8
 801e060:	bd10      	pop	{r4, pc}
    dhcp->t1_timeout = (u16_t)timeout;
 801e062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e066:	814a      	strh	r2, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 801e068:	e7c5      	b.n	801dff6 <dhcp_bind+0x5a>
    dhcp->t0_timeout = (u16_t)timeout;
 801e06a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e06e:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801e070:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801e072:	1c5a      	adds	r2, r3, #1
 801e074:	d1b1      	bne.n	801dfda <dhcp_bind+0x3e>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801e076:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 801e078:	894a      	ldrh	r2, [r1, #10]
 801e07a:	1c63      	adds	r3, r4, #1
 801e07c:	d1bf      	bne.n	801dffe <dhcp_bind+0x62>
 801e07e:	898b      	ldrh	r3, [r1, #12]
 801e080:	1e1c      	subs	r4, r3, #0
 801e082:	bf18      	it	ne
 801e084:	2401      	movne	r4, #1
 801e086:	e7ca      	b.n	801e01e <dhcp_bind+0x82>
    if (first_octet <= 127) {
 801e088:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801e08c:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 801e08e:	2b00      	cmp	r3, #0
 801e090:	db06      	blt.n	801e0a0 <dhcp_bind+0x104>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801e092:	23ff      	movs	r3, #255	; 0xff
 801e094:	9300      	str	r3, [sp, #0]
 801e096:	e7cc      	b.n	801e032 <dhcp_bind+0x96>
    dhcp->t2_timeout = (u16_t)timeout;
 801e098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e09c:	818b      	strh	r3, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 801e09e:	e7bc      	b.n	801e01a <dhcp_bind+0x7e>
    } else if (first_octet >= 192) {
 801e0a0:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801e0a2:	bf8c      	ite	hi
 801e0a4:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801e0a8:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 801e0ac:	9300      	str	r3, [sp, #0]
 801e0ae:	e7c0      	b.n	801e032 <dhcp_bind+0x96>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801e0b0:	4b09      	ldr	r3, [pc, #36]	; (801e0d8 <dhcp_bind+0x13c>)
 801e0b2:	f240 4215 	movw	r2, #1045	; 0x415
 801e0b6:	4909      	ldr	r1, [pc, #36]	; (801e0dc <dhcp_bind+0x140>)
 801e0b8:	4809      	ldr	r0, [pc, #36]	; (801e0e0 <dhcp_bind+0x144>)
 801e0ba:	f004 fa03 	bl	80224c4 <iprintf>
 801e0be:	e7ce      	b.n	801e05e <dhcp_bind+0xc2>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801e0c0:	4b05      	ldr	r3, [pc, #20]	; (801e0d8 <dhcp_bind+0x13c>)
 801e0c2:	f240 4217 	movw	r2, #1047	; 0x417
 801e0c6:	4907      	ldr	r1, [pc, #28]	; (801e0e4 <dhcp_bind+0x148>)
 801e0c8:	4805      	ldr	r0, [pc, #20]	; (801e0e0 <dhcp_bind+0x144>)
 801e0ca:	f004 f9fb 	bl	80224c4 <iprintf>
 801e0ce:	e7c6      	b.n	801e05e <dhcp_bind+0xc2>
    dhcp->t0_timeout = (u16_t)timeout;
 801e0d0:	828a      	strh	r2, [r1, #20]
 801e0d2:	e77f      	b.n	801dfd4 <dhcp_bind+0x38>
 801e0d4:	88888889 	.word	0x88888889
 801e0d8:	08041358 	.word	0x08041358
 801e0dc:	0804153c 	.word	0x0804153c
 801e0e0:	08028d24 	.word	0x08028d24
 801e0e4:	08041558 	.word	0x08041558

0801e0e8 <dhcp_inc_pcb_refcount>:
{
 801e0e8:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_pcb_refcount == 0) {
 801e0ea:	4c15      	ldr	r4, [pc, #84]	; (801e140 <dhcp_inc_pcb_refcount+0x58>)
 801e0ec:	7823      	ldrb	r3, [r4, #0]
 801e0ee:	b9fb      	cbnz	r3, 801e130 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801e0f0:	4d14      	ldr	r5, [pc, #80]	; (801e144 <dhcp_inc_pcb_refcount+0x5c>)
 801e0f2:	682b      	ldr	r3, [r5, #0]
 801e0f4:	b12b      	cbz	r3, 801e102 <dhcp_inc_pcb_refcount+0x1a>
 801e0f6:	4b14      	ldr	r3, [pc, #80]	; (801e148 <dhcp_inc_pcb_refcount+0x60>)
 801e0f8:	22e5      	movs	r2, #229	; 0xe5
 801e0fa:	4914      	ldr	r1, [pc, #80]	; (801e14c <dhcp_inc_pcb_refcount+0x64>)
 801e0fc:	4814      	ldr	r0, [pc, #80]	; (801e150 <dhcp_inc_pcb_refcount+0x68>)
 801e0fe:	f004 f9e1 	bl	80224c4 <iprintf>
    dhcp_pcb = udp_new();
 801e102:	f7ff fbc9 	bl	801d898 <udp_new>
 801e106:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 801e108:	b1b0      	cbz	r0, 801e138 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801e10a:	7a46      	ldrb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801e10c:	2244      	movs	r2, #68	; 0x44
 801e10e:	4911      	ldr	r1, [pc, #68]	; (801e154 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801e110:	f046 0620 	orr.w	r6, r6, #32
 801e114:	7246      	strb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801e116:	f7ff f95f 	bl	801d3d8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801e11a:	2243      	movs	r2, #67	; 0x43
 801e11c:	490d      	ldr	r1, [pc, #52]	; (801e154 <dhcp_inc_pcb_refcount+0x6c>)
 801e11e:	6828      	ldr	r0, [r5, #0]
 801e120:	f7ff fb3c 	bl	801d79c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801e124:	6828      	ldr	r0, [r5, #0]
 801e126:	2200      	movs	r2, #0
 801e128:	490b      	ldr	r1, [pc, #44]	; (801e158 <dhcp_inc_pcb_refcount+0x70>)
 801e12a:	f7ff fb7d 	bl	801d828 <udp_recv>
 801e12e:	7823      	ldrb	r3, [r4, #0]
  dhcp_pcb_refcount++;
 801e130:	3301      	adds	r3, #1
  return ERR_OK;
 801e132:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801e134:	7023      	strb	r3, [r4, #0]
}
 801e136:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 801e138:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e13c:	bd70      	pop	{r4, r5, r6, pc}
 801e13e:	bf00      	nop
 801e140:	2001aa3c 	.word	0x2001aa3c
 801e144:	2001aa38 	.word	0x2001aa38
 801e148:	08041358 	.word	0x08041358
 801e14c:	08041570 	.word	0x08041570
 801e150:	08028d24 	.word	0x08028d24
 801e154:	08041a0c 	.word	0x08041a0c
 801e158:	0801e255 	.word	0x0801e255

0801e15c <dhcp_dec_pcb_refcount>:
{
 801e15c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801e15e:	4d0b      	ldr	r5, [pc, #44]	; (801e18c <dhcp_dec_pcb_refcount+0x30>)
 801e160:	782c      	ldrb	r4, [r5, #0]
 801e162:	b154      	cbz	r4, 801e17a <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801e164:	3c01      	subs	r4, #1
 801e166:	b2e4      	uxtb	r4, r4
 801e168:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801e16a:	b104      	cbz	r4, 801e16e <dhcp_dec_pcb_refcount+0x12>
}
 801e16c:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801e16e:	4d08      	ldr	r5, [pc, #32]	; (801e190 <dhcp_dec_pcb_refcount+0x34>)
 801e170:	6828      	ldr	r0, [r5, #0]
 801e172:	f7ff fb6b 	bl	801d84c <udp_remove>
    dhcp_pcb = NULL;
 801e176:	602c      	str	r4, [r5, #0]
}
 801e178:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801e17a:	4b06      	ldr	r3, [pc, #24]	; (801e194 <dhcp_dec_pcb_refcount+0x38>)
 801e17c:	22ff      	movs	r2, #255	; 0xff
 801e17e:	4906      	ldr	r1, [pc, #24]	; (801e198 <dhcp_dec_pcb_refcount+0x3c>)
 801e180:	4806      	ldr	r0, [pc, #24]	; (801e19c <dhcp_dec_pcb_refcount+0x40>)
 801e182:	f004 f99f 	bl	80224c4 <iprintf>
 801e186:	782c      	ldrb	r4, [r5, #0]
 801e188:	e7ec      	b.n	801e164 <dhcp_dec_pcb_refcount+0x8>
 801e18a:	bf00      	nop
 801e18c:	2001aa3c 	.word	0x2001aa3c
 801e190:	2001aa38 	.word	0x2001aa38
 801e194:	08041358 	.word	0x08041358
 801e198:	08041598 	.word	0x08041598
 801e19c:	08028d24 	.word	0x08028d24

0801e1a0 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801e1a0:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801e1a2:	4d2a      	ldr	r5, [pc, #168]	; (801e24c <dhcp_handle_ack.isra.0+0xac>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801e1a4:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801e1a6:	b083      	sub	sp, #12
 801e1a8:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801e1aa:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801e1ac:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801e1b0:	b112      	cbz	r2, 801e1b8 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801e1b2:	4b27      	ldr	r3, [pc, #156]	; (801e250 <dhcp_handle_ack.isra.0+0xb0>)
 801e1b4:	68db      	ldr	r3, [r3, #12]
 801e1b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801e1b8:	792b      	ldrb	r3, [r5, #4]
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	d042      	beq.n	801e244 <dhcp_handle_ack.isra.0+0xa4>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801e1be:	4b24      	ldr	r3, [pc, #144]	; (801e250 <dhcp_handle_ack.isra.0+0xb0>)
 801e1c0:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801e1c2:	796a      	ldrb	r2, [r5, #5]
 801e1c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e1c6:	b31a      	cbz	r2, 801e210 <dhcp_handle_ack.isra.0+0x70>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801e1c8:	4b21      	ldr	r3, [pc, #132]	; (801e250 <dhcp_handle_ack.isra.0+0xb0>)
 801e1ca:	695b      	ldr	r3, [r3, #20]
 801e1cc:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801e1ce:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801e1d0:	690a      	ldr	r2, [r1, #16]
 801e1d2:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801e1d4:	bb33      	cbnz	r3, 801e224 <dhcp_handle_ack.isra.0+0x84>
    dhcp->subnet_mask_given = 0;
 801e1d6:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801e1d8:	79eb      	ldrb	r3, [r5, #7]
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d12c      	bne.n	801e238 <dhcp_handle_ack.isra.0+0x98>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801e1de:	7a2b      	ldrb	r3, [r5, #8]
 801e1e0:	b1a3      	cbz	r3, 801e20c <dhcp_handle_ack.isra.0+0x6c>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801e1e2:	4c1b      	ldr	r4, [pc, #108]	; (801e250 <dhcp_handle_ack.isra.0+0xb0>)
 801e1e4:	6a20      	ldr	r0, [r4, #32]
 801e1e6:	f7f8 fa05 	bl	80165f4 <lwip_htonl>
 801e1ea:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 801e1ec:	a901      	add	r1, sp, #4
 801e1ee:	2000      	movs	r0, #0
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801e1f0:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 801e1f2:	f7f8 fdb7 	bl	8016d64 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801e1f6:	7a6b      	ldrb	r3, [r5, #9]
 801e1f8:	b143      	cbz	r3, 801e20c <dhcp_handle_ack.isra.0+0x6c>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801e1fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e1fc:	f7f8 f9fa 	bl	80165f4 <lwip_htonl>
 801e200:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 801e202:	a901      	add	r1, sp, #4
 801e204:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801e206:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 801e208:	f7f8 fdac 	bl	8016d64 <dns_setserver>
}
 801e20c:	b003      	add	sp, #12
 801e20e:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801e210:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e212:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801e216:	08db      	lsrs	r3, r3, #3
 801e218:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801e21a:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801e21c:	690a      	ldr	r2, [r1, #16]
 801e21e:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801e220:	2b00      	cmp	r3, #0
 801e222:	d0d8      	beq.n	801e1d6 <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801e224:	4b0a      	ldr	r3, [pc, #40]	; (801e250 <dhcp_handle_ack.isra.0+0xb0>)
 801e226:	6998      	ldr	r0, [r3, #24]
 801e228:	f7f8 f9e4 	bl	80165f4 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801e22c:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801e22e:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 801e230:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801e232:	79eb      	ldrb	r3, [r5, #7]
 801e234:	2b00      	cmp	r3, #0
 801e236:	d0d2      	beq.n	801e1de <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801e238:	4b05      	ldr	r3, [pc, #20]	; (801e250 <dhcp_handle_ack.isra.0+0xb0>)
 801e23a:	69d8      	ldr	r0, [r3, #28]
 801e23c:	f7f8 f9da 	bl	80165f4 <lwip_htonl>
 801e240:	6260      	str	r0, [r4, #36]	; 0x24
 801e242:	e7cc      	b.n	801e1de <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801e244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e246:	085b      	lsrs	r3, r3, #1
 801e248:	e7bb      	b.n	801e1c2 <dhcp_handle_ack.isra.0+0x22>
 801e24a:	bf00      	nop
 801e24c:	2002e1b4 	.word	0x2002e1b4
 801e250:	2002e1c0 	.word	0x2002e1c0

0801e254 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 801e254:	4bb0      	ldr	r3, [pc, #704]	; (801e518 <dhcp_recv+0x2c4>)
{
 801e256:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 801e25a:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 801e25e:	b08b      	sub	sp, #44	; 0x2c
 801e260:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e262:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801e266:	f1b9 0f00 	cmp.w	r9, #0
 801e26a:	d047      	beq.n	801e2fc <dhcp_recv+0xa8>
 801e26c:	f899 3004 	ldrb.w	r3, [r9, #4]
 801e270:	2b00      	cmp	r3, #0
 801e272:	d043      	beq.n	801e2fc <dhcp_recv+0xa8>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 801e274:	8953      	ldrh	r3, [r2, #10]
 801e276:	2b2b      	cmp	r3, #43	; 0x2b
 801e278:	d940      	bls.n	801e2fc <dhcp_recv+0xa8>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801e27a:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 801e27c:	782b      	ldrb	r3, [r5, #0]
 801e27e:	2b02      	cmp	r3, #2
 801e280:	d13c      	bne.n	801e2fc <dhcp_recv+0xa8>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e282:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 801e286:	b186      	cbz	r6, 801e2aa <dhcp_recv+0x56>
 801e288:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 801e28c:	f105 021c 	add.w	r2, r5, #28
 801e290:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801e292:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e296:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801e298:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e29c:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801e29e:	4284      	cmp	r4, r0
 801e2a0:	d12c      	bne.n	801e2fc <dhcp_recv+0xa8>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e2a2:	2b06      	cmp	r3, #6
 801e2a4:	d001      	beq.n	801e2aa <dhcp_recv+0x56>
 801e2a6:	42b3      	cmp	r3, r6
 801e2a8:	d3f3      	bcc.n	801e292 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801e2aa:	6868      	ldr	r0, [r5, #4]
 801e2ac:	f7f8 f9a2 	bl	80165f4 <lwip_htonl>
 801e2b0:	f8d9 3000 	ldr.w	r3, [r9]
 801e2b4:	4298      	cmp	r0, r3
 801e2b6:	d121      	bne.n	801e2fc <dhcp_recv+0xa8>
  dhcp_clear_all_options(dhcp);
 801e2b8:	2200      	movs	r2, #0
 801e2ba:	4998      	ldr	r1, [pc, #608]	; (801e51c <dhcp_recv+0x2c8>)
 801e2bc:	604a      	str	r2, [r1, #4]
 801e2be:	810a      	strh	r2, [r1, #8]
  if (p->len < DHCP_SNAME_OFS) {
 801e2c0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  dhcp_clear_all_options(dhcp);
 801e2c4:	600a      	str	r2, [r1, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801e2c6:	2b2b      	cmp	r3, #43	; 0x2b
 801e2c8:	d918      	bls.n	801e2fc <dhcp_recv+0xa8>
  int parse_sname_as_options = 0;
 801e2ca:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 801e2cc:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 801e2d0:	9202      	str	r2, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 801e2d2:	22f0      	movs	r2, #240	; 0xf0
 801e2d4:	e9cd a906 	strd	sl, r9, [sp, #24]
 801e2d8:	9203      	str	r2, [sp, #12]
 801e2da:	465d      	mov	r5, fp
 801e2dc:	e9dd 2a02 	ldrd	r2, sl, [sp, #8]
 801e2e0:	e000      	b.n	801e2e4 <dhcp_recv+0x90>
 801e2e2:	896b      	ldrh	r3, [r5, #10]
  while ((q != NULL) && (options_idx >= q->len)) {
 801e2e4:	459a      	cmp	sl, r3
    options_idx = (u16_t)(options_idx - q->len);
 801e2e6:	ebaa 0103 	sub.w	r1, sl, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801e2ea:	eba2 0303 	sub.w	r3, r2, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801e2ee:	d30b      	bcc.n	801e308 <dhcp_recv+0xb4>
    q = q->next;
 801e2f0:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 801e2f2:	fa1f fa81 	uxth.w	sl, r1
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801e2f6:	b29a      	uxth	r2, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801e2f8:	2d00      	cmp	r5, #0
 801e2fa:	d1f2      	bne.n	801e2e2 <dhcp_recv+0x8e>
  pbuf_free(p);
 801e2fc:	4658      	mov	r0, fp
 801e2fe:	f7f9 ffc9 	bl	8018294 <pbuf_free>
}
 801e302:	b00b      	add	sp, #44	; 0x2c
 801e304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  options = (u8_t *)q->payload;
 801e308:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801e30a:	4592      	cmp	sl, r2
 801e30c:	e9cd 2a02 	strd	r2, sl, [sp, #8]
  options = (u8_t *)q->payload;
 801e310:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801e312:	f080 81ff 	bcs.w	801e714 <dhcp_recv+0x4c0>
 801e316:	9e03      	ldr	r6, [sp, #12]
 801e318:	9b01      	ldr	r3, [sp, #4]
 801e31a:	5d9b      	ldrb	r3, [r3, r6]
 801e31c:	2bff      	cmp	r3, #255	; 0xff
 801e31e:	f000 81f9 	beq.w	801e714 <dhcp_recv+0x4c0>
    u16_t val_offset = (u16_t)(offset + 2);
 801e322:	1cb7      	adds	r7, r6, #2
 801e324:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 801e326:	42b7      	cmp	r7, r6
 801e328:	d3e8      	bcc.n	801e2fc <dhcp_recv+0xa8>
    if ((offset + 1) < q->len) {
 801e32a:	1c71      	adds	r1, r6, #1
 801e32c:	896a      	ldrh	r2, [r5, #10]
 801e32e:	4291      	cmp	r1, r2
 801e330:	f280 8128 	bge.w	801e584 <dhcp_recv+0x330>
      len = options[offset + 1];
 801e334:	9801      	ldr	r0, [sp, #4]
 801e336:	4430      	add	r0, r6
 801e338:	7844      	ldrb	r4, [r0, #1]
    switch (op) {
 801e33a:	2b3b      	cmp	r3, #59	; 0x3b
 801e33c:	d83e      	bhi.n	801e3bc <dhcp_recv+0x168>
 801e33e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801e342:	0040      	.short	0x0040
 801e344:	003d0066 	.word	0x003d0066
 801e348:	003d0112 	.word	0x003d0112
 801e34c:	0053003d 	.word	0x0053003d
 801e350:	003d003d 	.word	0x003d003d
 801e354:	003d003d 	.word	0x003d003d
 801e358:	003d003d 	.word	0x003d003d
 801e35c:	003d003d 	.word	0x003d003d
 801e360:	003d003d 	.word	0x003d003d
 801e364:	003d003d 	.word	0x003d003d
 801e368:	003d003d 	.word	0x003d003d
 801e36c:	003d003d 	.word	0x003d003d
 801e370:	003d003d 	.word	0x003d003d
 801e374:	003d003d 	.word	0x003d003d
 801e378:	003d003d 	.word	0x003d003d
 801e37c:	003d003d 	.word	0x003d003d
 801e380:	003d003d 	.word	0x003d003d
 801e384:	003d003d 	.word	0x003d003d
 801e388:	003d003d 	.word	0x003d003d
 801e38c:	003d003d 	.word	0x003d003d
 801e390:	003d003d 	.word	0x003d003d
 801e394:	003d003d 	.word	0x003d003d
 801e398:	003d003d 	.word	0x003d003d
 801e39c:	003d003d 	.word	0x003d003d
 801e3a0:	003d003d 	.word	0x003d003d
 801e3a4:	003d003d 	.word	0x003d003d
 801e3a8:	00cc0105 	.word	0x00cc0105
 801e3ac:	00b300c0 	.word	0x00b300c0
 801e3b0:	003d003d 	.word	0x003d003d
 801e3b4:	00f9003d 	.word	0x00f9003d
 801e3b8:	00dd      	.short	0x00dd
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801e3ba:	2400      	movs	r4, #0
    if (op == DHCP_OPTION_PAD) {
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	f040 827c 	bne.w	801e8ba <dhcp_recv+0x666>
      offset++;
 801e3c2:	b28e      	uxth	r6, r1
    if (offset >= q->len) {
 801e3c4:	4296      	cmp	r6, r2
 801e3c6:	f0c0 81a1 	bcc.w	801e70c <dhcp_recv+0x4b8>
      offset_max = (u16_t)(offset_max - q->len);
 801e3ca:	9b02      	ldr	r3, [sp, #8]
      offset = (u16_t)(offset - q->len);
 801e3cc:	1ab6      	subs	r6, r6, r2
      offset_max = (u16_t)(offset_max - q->len);
 801e3ce:	1a9a      	subs	r2, r3, r2
      offset = (u16_t)(offset - q->len);
 801e3d0:	b2b6      	uxth	r6, r6
      offset_max = (u16_t)(offset_max - q->len);
 801e3d2:	b293      	uxth	r3, r2
      if (offset < offset_max) {
 801e3d4:	429e      	cmp	r6, r3
      offset_max = (u16_t)(offset_max - q->len);
 801e3d6:	9302      	str	r3, [sp, #8]
      if (offset < offset_max) {
 801e3d8:	d290      	bcs.n	801e2fc <dhcp_recv+0xa8>
        q = q->next;
 801e3da:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801e3dc:	2d00      	cmp	r5, #0
 801e3de:	f000 81cd 	beq.w	801e77c <dhcp_recv+0x528>
        options = (u8_t *)q->payload;
 801e3e2:	686b      	ldr	r3, [r5, #4]
 801e3e4:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801e3e6:	e797      	b.n	801e318 <dhcp_recv+0xc4>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801e3e8:	07a3      	lsls	r3, r4, #30
 801e3ea:	f040 81da 	bne.w	801e7a2 <dhcp_recv+0x54e>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801e3ee:	2c08      	cmp	r4, #8
 801e3f0:	4623      	mov	r3, r4
 801e3f2:	bf28      	it	cs
 801e3f4:	2308      	movcs	r3, #8
 801e3f6:	b2db      	uxtb	r3, r3
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801e3f8:	429c      	cmp	r4, r3
 801e3fa:	f080 824f 	bcs.w	801e89c <dhcp_recv+0x648>
 801e3fe:	4b48      	ldr	r3, [pc, #288]	; (801e520 <dhcp_recv+0x2cc>)
 801e400:	f240 623c 	movw	r2, #1596	; 0x63c
 801e404:	4947      	ldr	r1, [pc, #284]	; (801e524 <dhcp_recv+0x2d0>)
 801e406:	4848      	ldr	r0, [pc, #288]	; (801e528 <dhcp_recv+0x2d4>)
 801e408:	f004 f85c 	bl	80224c4 <iprintf>
 801e40c:	e776      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e40e:	2c04      	cmp	r4, #4
 801e410:	f040 8174 	bne.w	801e6fc <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 801e414:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801e418:	429e      	cmp	r6, r3
 801e41a:	f73f af6f 	bgt.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e41e:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801e420:	f04f 0906 	mov.w	r9, #6
      offset = (u16_t)(offset + len + 2);
 801e424:	b2b6      	uxth	r6, r6
        u32_t value = 0;
 801e426:	2300      	movs	r3, #0
 801e428:	4a3c      	ldr	r2, [pc, #240]	; (801e51c <dhcp_recv+0x2c8>)
 801e42a:	9605      	str	r6, [sp, #20]
 801e42c:	eb02 0a09 	add.w	sl, r2, r9
 801e430:	9309      	str	r3, [sp, #36]	; 0x24
 801e432:	e02e      	b.n	801e492 <dhcp_recv+0x23e>
          copy_len = LWIP_MIN(decode_len, 4);
 801e434:	2c04      	cmp	r4, #4
 801e436:	46a0      	mov	r8, r4
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801e438:	f89a 6000 	ldrb.w	r6, [sl]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801e43c:	463b      	mov	r3, r7
          copy_len = LWIP_MIN(decode_len, 4);
 801e43e:	bf28      	it	cs
 801e440:	f04f 0804 	movcs.w	r8, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801e444:	a909      	add	r1, sp, #36	; 0x24
 801e446:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 801e448:	fa5f f888 	uxtb.w	r8, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801e44c:	4642      	mov	r2, r8
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801e44e:	2e00      	cmp	r6, #0
 801e450:	f040 817a 	bne.w	801e748 <dhcp_recv+0x4f4>
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801e454:	f7fa f9b6 	bl	80187c4 <pbuf_copy_partial>
 801e458:	4580      	cmp	r8, r0
            dhcp_got_option(dhcp, decode_idx);
 801e45a:	f04f 0301 	mov.w	r3, #1
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801e45e:	f47f af4d 	bne.w	801e2fc <dhcp_recv+0xa8>
          if (decode_len > 4) {
 801e462:	2c04      	cmp	r4, #4
 801e464:	f240 8173 	bls.w	801e74e <dhcp_recv+0x4fa>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801e468:	07a6      	lsls	r6, r4, #30
 801e46a:	f040 817f 	bne.w	801e76c <dhcp_recv+0x518>
            dhcp_got_option(dhcp, decode_idx);
 801e46e:	f80a 3b01 	strb.w	r3, [sl], #1
            decode_len = (u8_t)(decode_len - 4);
 801e472:	3c04      	subs	r4, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801e474:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e476:	f7f8 f8bd 	bl	80165f4 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 801e47a:	1d3b      	adds	r3, r7, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801e47c:	4a2b      	ldr	r2, [pc, #172]	; (801e52c <dhcp_recv+0x2d8>)
            decode_len = (u8_t)(decode_len - 4);
 801e47e:	b2e4      	uxtb	r4, r4
            next_val_offset = (u16_t)(val_offset + 4);
 801e480:	b29b      	uxth	r3, r3
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801e482:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
            decode_idx++;
 801e486:	f109 0901 	add.w	r9, r9, #1
            if (next_val_offset < val_offset) {
 801e48a:	429f      	cmp	r7, r3
            goto decode_next;
 801e48c:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 801e48e:	f63f af35 	bhi.w	801e2fc <dhcp_recv+0xa8>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801e492:	f1b9 0f09 	cmp.w	r9, #9
 801e496:	d9cd      	bls.n	801e434 <dhcp_recv+0x1e0>
 801e498:	4b21      	ldr	r3, [pc, #132]	; (801e520 <dhcp_recv+0x2cc>)
 801e49a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801e49e:	4924      	ldr	r1, [pc, #144]	; (801e530 <dhcp_recv+0x2dc>)
 801e4a0:	4821      	ldr	r0, [pc, #132]	; (801e528 <dhcp_recv+0x2d4>)
 801e4a2:	f004 f80f 	bl	80224c4 <iprintf>
 801e4a6:	e7c5      	b.n	801e434 <dhcp_recv+0x1e0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e4a8:	2c04      	cmp	r4, #4
 801e4aa:	f040 80ef 	bne.w	801e68c <dhcp_recv+0x438>
      if (offset + len + 2 > 0xFFFF) {
 801e4ae:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801e4b2:	429e      	cmp	r6, r3
 801e4b4:	f73f af22 	bgt.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e4b8:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801e4ba:	f04f 0902 	mov.w	r9, #2
      offset = (u16_t)(offset + len + 2);
 801e4be:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801e4c0:	e7b1      	b.n	801e426 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801e4c2:	2c01      	cmp	r4, #1
 801e4c4:	f040 80f2 	bne.w	801e6ac <dhcp_recv+0x458>
      if (offset + len + 2 > 0xFFFF) {
 801e4c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801e4cc:	4299      	cmp	r1, r3
 801e4ce:	f43f af15 	beq.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e4d2:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801e4d4:	46a1      	mov	r9, r4
      offset = (u16_t)(offset + len + 2);
 801e4d6:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801e4d8:	e7a5      	b.n	801e426 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801e4da:	2c01      	cmp	r4, #1
 801e4dc:	f040 80ee 	bne.w	801e6bc <dhcp_recv+0x468>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801e4e0:	9b03      	ldr	r3, [sp, #12]
 801e4e2:	2bf0      	cmp	r3, #240	; 0xf0
 801e4e4:	f040 8165 	bne.w	801e7b2 <dhcp_recv+0x55e>
      if (offset + len + 2 > 0xFFFF) {
 801e4e8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801e4ec:	4299      	cmp	r1, r3
 801e4ee:	f43f af05 	beq.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e4f2:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801e4f4:	f04f 0900 	mov.w	r9, #0
      offset = (u16_t)(offset + len + 2);
 801e4f8:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801e4fa:	e794      	b.n	801e426 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e4fc:	2c04      	cmp	r4, #4
 801e4fe:	f040 80e5 	bne.w	801e6cc <dhcp_recv+0x478>
      if (offset + len + 2 > 0xFFFF) {
 801e502:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801e506:	429e      	cmp	r6, r3
 801e508:	f73f aef8 	bgt.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e50c:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 801e50e:	f04f 0905 	mov.w	r9, #5
      offset = (u16_t)(offset + len + 2);
 801e512:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801e514:	e787      	b.n	801e426 <dhcp_recv+0x1d2>
 801e516:	bf00      	nop
 801e518:	2001f164 	.word	0x2001f164
 801e51c:	2002e1b4 	.word	0x2002e1b4
 801e520:	08041358 	.word	0x08041358
 801e524:	080415c8 	.word	0x080415c8
 801e528:	08028d24 	.word	0x08028d24
 801e52c:	2002e1c0 	.word	0x2002e1c0
 801e530:	08041610 	.word	0x08041610
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e534:	2c04      	cmp	r4, #4
 801e536:	f040 80b1 	bne.w	801e69c <dhcp_recv+0x448>
      if (offset + len + 2 > 0xFFFF) {
 801e53a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801e53e:	429e      	cmp	r6, r3
 801e540:	f73f aedc 	bgt.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e544:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 801e546:	46a1      	mov	r9, r4
      offset = (u16_t)(offset + len + 2);
 801e548:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801e54a:	e76c      	b.n	801e426 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e54c:	2c04      	cmp	r4, #4
 801e54e:	f040 80c5 	bne.w	801e6dc <dhcp_recv+0x488>
      if (offset + len + 2 > 0xFFFF) {
 801e552:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801e556:	429e      	cmp	r6, r3
 801e558:	f73f aed0 	bgt.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e55c:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801e55e:	f04f 0903 	mov.w	r9, #3
      offset = (u16_t)(offset + len + 2);
 801e562:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801e564:	e75f      	b.n	801e426 <dhcp_recv+0x1d2>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801e566:	2c03      	cmp	r4, #3
 801e568:	f240 80c0 	bls.w	801e6ec <dhcp_recv+0x498>
      if (offset + len + 2 > 0xFFFF) {
 801e56c:	4426      	add	r6, r4
 801e56e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801e572:	429e      	cmp	r6, r3
 801e574:	f73f aec2 	bgt.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e578:	193e      	adds	r6, r7, r4
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801e57a:	f04f 0907 	mov.w	r9, #7
        decode_len = 4; /* only copy the first given router */
 801e57e:	2404      	movs	r4, #4
      offset = (u16_t)(offset + len + 2);
 801e580:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801e582:	e750      	b.n	801e426 <dhcp_recv+0x1d2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801e584:	6828      	ldr	r0, [r5, #0]
 801e586:	b110      	cbz	r0, 801e58e <dhcp_recv+0x33a>
 801e588:	6840      	ldr	r0, [r0, #4]
 801e58a:	7804      	ldrb	r4, [r0, #0]
 801e58c:	e6d5      	b.n	801e33a <dhcp_recv+0xe6>
    switch (op) {
 801e58e:	2b3b      	cmp	r3, #59	; 0x3b
 801e590:	f63f af13 	bhi.w	801e3ba <dhcp_recv+0x166>
 801e594:	a001      	add	r0, pc, #4	; (adr r0, 801e59c <dhcp_recv+0x348>)
 801e596:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801e59a:	bf00      	nop
 801e59c:	0801e3c3 	.word	0x0801e3c3
 801e5a0:	0801e6fd 	.word	0x0801e6fd
 801e5a4:	0801e3bb 	.word	0x0801e3bb
 801e5a8:	0801e6ed 	.word	0x0801e6ed
 801e5ac:	0801e3bb 	.word	0x0801e3bb
 801e5b0:	0801e3bb 	.word	0x0801e3bb
 801e5b4:	0801e3bb 	.word	0x0801e3bb
 801e5b8:	0801e3bb 	.word	0x0801e3bb
 801e5bc:	0801e3bb 	.word	0x0801e3bb
 801e5c0:	0801e3bb 	.word	0x0801e3bb
 801e5c4:	0801e3bb 	.word	0x0801e3bb
 801e5c8:	0801e3bb 	.word	0x0801e3bb
 801e5cc:	0801e3bb 	.word	0x0801e3bb
 801e5d0:	0801e3bb 	.word	0x0801e3bb
 801e5d4:	0801e3bb 	.word	0x0801e3bb
 801e5d8:	0801e3bb 	.word	0x0801e3bb
 801e5dc:	0801e3bb 	.word	0x0801e3bb
 801e5e0:	0801e3bb 	.word	0x0801e3bb
 801e5e4:	0801e3bb 	.word	0x0801e3bb
 801e5e8:	0801e3bb 	.word	0x0801e3bb
 801e5ec:	0801e3bb 	.word	0x0801e3bb
 801e5f0:	0801e3bb 	.word	0x0801e3bb
 801e5f4:	0801e3bb 	.word	0x0801e3bb
 801e5f8:	0801e3bb 	.word	0x0801e3bb
 801e5fc:	0801e3bb 	.word	0x0801e3bb
 801e600:	0801e3bb 	.word	0x0801e3bb
 801e604:	0801e3bb 	.word	0x0801e3bb
 801e608:	0801e3bb 	.word	0x0801e3bb
 801e60c:	0801e3bb 	.word	0x0801e3bb
 801e610:	0801e3bb 	.word	0x0801e3bb
 801e614:	0801e3bb 	.word	0x0801e3bb
 801e618:	0801e3bb 	.word	0x0801e3bb
 801e61c:	0801e3bb 	.word	0x0801e3bb
 801e620:	0801e3bb 	.word	0x0801e3bb
 801e624:	0801e3bb 	.word	0x0801e3bb
 801e628:	0801e3bb 	.word	0x0801e3bb
 801e62c:	0801e3bb 	.word	0x0801e3bb
 801e630:	0801e3bb 	.word	0x0801e3bb
 801e634:	0801e3bb 	.word	0x0801e3bb
 801e638:	0801e3bb 	.word	0x0801e3bb
 801e63c:	0801e3bb 	.word	0x0801e3bb
 801e640:	0801e3bb 	.word	0x0801e3bb
 801e644:	0801e3bb 	.word	0x0801e3bb
 801e648:	0801e3bb 	.word	0x0801e3bb
 801e64c:	0801e3bb 	.word	0x0801e3bb
 801e650:	0801e3bb 	.word	0x0801e3bb
 801e654:	0801e3bb 	.word	0x0801e3bb
 801e658:	0801e3bb 	.word	0x0801e3bb
 801e65c:	0801e3bb 	.word	0x0801e3bb
 801e660:	0801e3bb 	.word	0x0801e3bb
 801e664:	0801e3bb 	.word	0x0801e3bb
 801e668:	0801e6dd 	.word	0x0801e6dd
 801e66c:	0801e6bd 	.word	0x0801e6bd
 801e670:	0801e6ad 	.word	0x0801e6ad
 801e674:	0801e68d 	.word	0x0801e68d
 801e678:	0801e3bb 	.word	0x0801e3bb
 801e67c:	0801e3bb 	.word	0x0801e3bb
 801e680:	0801e3bb 	.word	0x0801e3bb
 801e684:	0801e69d 	.word	0x0801e69d
 801e688:	0801e6cd 	.word	0x0801e6cd
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e68c:	4b8f      	ldr	r3, [pc, #572]	; (801e8cc <dhcp_recv+0x678>)
 801e68e:	f240 6259 	movw	r2, #1625	; 0x659
 801e692:	498f      	ldr	r1, [pc, #572]	; (801e8d0 <dhcp_recv+0x67c>)
 801e694:	488f      	ldr	r0, [pc, #572]	; (801e8d4 <dhcp_recv+0x680>)
 801e696:	f003 ff15 	bl	80224c4 <iprintf>
 801e69a:	e62f      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e69c:	4b8b      	ldr	r3, [pc, #556]	; (801e8cc <dhcp_recv+0x678>)
 801e69e:	f240 625d 	movw	r2, #1629	; 0x65d
 801e6a2:	498b      	ldr	r1, [pc, #556]	; (801e8d0 <dhcp_recv+0x67c>)
 801e6a4:	488b      	ldr	r0, [pc, #556]	; (801e8d4 <dhcp_recv+0x680>)
 801e6a6:	f003 ff0d 	bl	80224c4 <iprintf>
 801e6aa:	e627      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801e6ac:	4b87      	ldr	r3, [pc, #540]	; (801e8cc <dhcp_recv+0x678>)
 801e6ae:	f240 6255 	movw	r2, #1621	; 0x655
 801e6b2:	4989      	ldr	r1, [pc, #548]	; (801e8d8 <dhcp_recv+0x684>)
 801e6b4:	4887      	ldr	r0, [pc, #540]	; (801e8d4 <dhcp_recv+0x680>)
 801e6b6:	f003 ff05 	bl	80224c4 <iprintf>
 801e6ba:	e61f      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801e6bc:	4b83      	ldr	r3, [pc, #524]	; (801e8cc <dhcp_recv+0x678>)
 801e6be:	f240 624f 	movw	r2, #1615	; 0x64f
 801e6c2:	4985      	ldr	r1, [pc, #532]	; (801e8d8 <dhcp_recv+0x684>)
 801e6c4:	4883      	ldr	r0, [pc, #524]	; (801e8d4 <dhcp_recv+0x680>)
 801e6c6:	f003 fefd 	bl	80224c4 <iprintf>
 801e6ca:	e617      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e6cc:	4b7f      	ldr	r3, [pc, #508]	; (801e8cc <dhcp_recv+0x678>)
 801e6ce:	f240 6261 	movw	r2, #1633	; 0x661
 801e6d2:	497f      	ldr	r1, [pc, #508]	; (801e8d0 <dhcp_recv+0x67c>)
 801e6d4:	487f      	ldr	r0, [pc, #508]	; (801e8d4 <dhcp_recv+0x680>)
 801e6d6:	f003 fef5 	bl	80224c4 <iprintf>
 801e6da:	e60f      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e6dc:	4b7b      	ldr	r3, [pc, #492]	; (801e8cc <dhcp_recv+0x678>)
 801e6de:	f240 6241 	movw	r2, #1601	; 0x641
 801e6e2:	497b      	ldr	r1, [pc, #492]	; (801e8d0 <dhcp_recv+0x67c>)
 801e6e4:	487b      	ldr	r0, [pc, #492]	; (801e8d4 <dhcp_recv+0x680>)
 801e6e6:	f003 feed 	bl	80224c4 <iprintf>
 801e6ea:	e607      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801e6ec:	4b77      	ldr	r3, [pc, #476]	; (801e8cc <dhcp_recv+0x678>)
 801e6ee:	f240 6233 	movw	r2, #1587	; 0x633
 801e6f2:	497a      	ldr	r1, [pc, #488]	; (801e8dc <dhcp_recv+0x688>)
 801e6f4:	4877      	ldr	r0, [pc, #476]	; (801e8d4 <dhcp_recv+0x680>)
 801e6f6:	f003 fee5 	bl	80224c4 <iprintf>
 801e6fa:	e5ff      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e6fc:	4b73      	ldr	r3, [pc, #460]	; (801e8cc <dhcp_recv+0x678>)
 801e6fe:	f240 622e 	movw	r2, #1582	; 0x62e
 801e702:	4973      	ldr	r1, [pc, #460]	; (801e8d0 <dhcp_recv+0x67c>)
 801e704:	4873      	ldr	r0, [pc, #460]	; (801e8d4 <dhcp_recv+0x680>)
 801e706:	f003 fedd 	bl	80224c4 <iprintf>
 801e70a:	e5f7      	b.n	801e2fc <dhcp_recv+0xa8>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801e70c:	9b02      	ldr	r3, [sp, #8]
 801e70e:	429e      	cmp	r6, r3
 801e710:	f4ff ae02 	bcc.w	801e318 <dhcp_recv+0xc4>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801e714:	4b72      	ldr	r3, [pc, #456]	; (801e8e0 <dhcp_recv+0x68c>)
 801e716:	781b      	ldrb	r3, [r3, #0]
 801e718:	b153      	cbz	r3, 801e730 <dhcp_recv+0x4dc>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e71a:	4b72      	ldr	r3, [pc, #456]	; (801e8e4 <dhcp_recv+0x690>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e71c:	2200      	movs	r2, #0
 801e71e:	4970      	ldr	r1, [pc, #448]	; (801e8e0 <dhcp_recv+0x68c>)
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e720:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e722:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801e724:	2b01      	cmp	r3, #1
 801e726:	d033      	beq.n	801e790 <dhcp_recv+0x53c>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801e728:	2b02      	cmp	r3, #2
 801e72a:	d004      	beq.n	801e736 <dhcp_recv+0x4e2>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801e72c:	2b03      	cmp	r3, #3
 801e72e:	d02d      	beq.n	801e78c <dhcp_recv+0x538>
  } else if (parse_sname_as_options) {
 801e730:	9b04      	ldr	r3, [sp, #16]
 801e732:	2b00      	cmp	r3, #0
 801e734:	d045      	beq.n	801e7c2 <dhcp_recv+0x56e>
    parse_sname_as_options = 0;
 801e736:	2300      	movs	r3, #0
    options_idx = DHCP_SNAME_OFS;
 801e738:	206c      	movs	r0, #108	; 0x6c
    parse_sname_as_options = 0;
 801e73a:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 801e73c:	232c      	movs	r3, #44	; 0x2c
 801e73e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801e742:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801e746:	e5c8      	b.n	801e2da <dhcp_recv+0x86>
 801e748:	9e05      	ldr	r6, [sp, #20]
 801e74a:	896a      	ldrh	r2, [r5, #10]
 801e74c:	e63a      	b.n	801e3c4 <dhcp_recv+0x170>
 801e74e:	9e05      	ldr	r6, [sp, #20]
          } else if (decode_len == 4) {
 801e750:	d023      	beq.n	801e79a <dhcp_recv+0x546>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801e752:	2c01      	cmp	r4, #1
 801e754:	f040 809a 	bne.w	801e88c <dhcp_recv+0x638>
            value = ((u8_t *)&value)[0];
 801e758:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 801e75c:	4a61      	ldr	r2, [pc, #388]	; (801e8e4 <dhcp_recv+0x690>)
          dhcp_got_option(dhcp, decode_idx);
 801e75e:	2301      	movs	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 801e760:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 801e764:	4a5e      	ldr	r2, [pc, #376]	; (801e8e0 <dhcp_recv+0x68c>)
 801e766:	f802 3009 	strb.w	r3, [r2, r9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801e76a:	e7ee      	b.n	801e74a <dhcp_recv+0x4f6>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801e76c:	4b57      	ldr	r3, [pc, #348]	; (801e8cc <dhcp_recv+0x678>)
 801e76e:	f240 6281 	movw	r2, #1665	; 0x681
 801e772:	495d      	ldr	r1, [pc, #372]	; (801e8e8 <dhcp_recv+0x694>)
 801e774:	4857      	ldr	r0, [pc, #348]	; (801e8d4 <dhcp_recv+0x680>)
 801e776:	f003 fea5 	bl	80224c4 <iprintf>
 801e77a:	e5bf      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801e77c:	4b53      	ldr	r3, [pc, #332]	; (801e8cc <dhcp_recv+0x678>)
 801e77e:	f240 629d 	movw	r2, #1693	; 0x69d
 801e782:	495a      	ldr	r1, [pc, #360]	; (801e8ec <dhcp_recv+0x698>)
 801e784:	4853      	ldr	r0, [pc, #332]	; (801e8d4 <dhcp_recv+0x680>)
 801e786:	f003 fe9d 	bl	80224c4 <iprintf>
 801e78a:	e5b7      	b.n	801e2fc <dhcp_recv+0xa8>
      parse_sname_as_options = 1;
 801e78c:	2301      	movs	r3, #1
 801e78e:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 801e790:	27ec      	movs	r7, #236	; 0xec
 801e792:	236c      	movs	r3, #108	; 0x6c
 801e794:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801e798:	e7d3      	b.n	801e742 <dhcp_recv+0x4ee>
            value = lwip_ntohl(value);
 801e79a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e79c:	f7f7 ff2a 	bl	80165f4 <lwip_htonl>
 801e7a0:	e7dc      	b.n	801e75c <dhcp_recv+0x508>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801e7a2:	4b4a      	ldr	r3, [pc, #296]	; (801e8cc <dhcp_recv+0x678>)
 801e7a4:	f240 6239 	movw	r2, #1593	; 0x639
 801e7a8:	4951      	ldr	r1, [pc, #324]	; (801e8f0 <dhcp_recv+0x69c>)
 801e7aa:	484a      	ldr	r0, [pc, #296]	; (801e8d4 <dhcp_recv+0x680>)
 801e7ac:	f003 fe8a 	bl	80224c4 <iprintf>
 801e7b0:	e5a4      	b.n	801e2fc <dhcp_recv+0xa8>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801e7b2:	4b46      	ldr	r3, [pc, #280]	; (801e8cc <dhcp_recv+0x678>)
 801e7b4:	f240 6251 	movw	r2, #1617	; 0x651
 801e7b8:	494e      	ldr	r1, [pc, #312]	; (801e8f4 <dhcp_recv+0x6a0>)
 801e7ba:	4846      	ldr	r0, [pc, #280]	; (801e8d4 <dhcp_recv+0x680>)
 801e7bc:	f003 fe82 	bl	80224c4 <iprintf>
 801e7c0:	e59c      	b.n	801e2fc <dhcp_recv+0xa8>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801e7c2:	4b47      	ldr	r3, [pc, #284]	; (801e8e0 <dhcp_recv+0x68c>)
 801e7c4:	785b      	ldrb	r3, [r3, #1]
 801e7c6:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	f43f ad96 	beq.w	801e2fc <dhcp_recv+0xa8>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801e7d0:	4a44      	ldr	r2, [pc, #272]	; (801e8e4 <dhcp_recv+0x690>)
  msg_in = (struct dhcp_msg *)p->payload;
 801e7d2:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801e7d6:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 801e7d8:	2b05      	cmp	r3, #5
 801e7da:	d01d      	beq.n	801e818 <dhcp_recv+0x5c4>
  else if ((msg_type == DHCP_NAK) &&
 801e7dc:	2b06      	cmp	r3, #6
 801e7de:	d02c      	beq.n	801e83a <dhcp_recv+0x5e6>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801e7e0:	2b02      	cmp	r3, #2
 801e7e2:	f47f ad8b 	bne.w	801e2fc <dhcp_recv+0xa8>
 801e7e6:	f899 3005 	ldrb.w	r3, [r9, #5]
 801e7ea:	2b06      	cmp	r3, #6
 801e7ec:	f47f ad86 	bne.w	801e2fc <dhcp_recv+0xa8>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801e7f0:	4b3b      	ldr	r3, [pc, #236]	; (801e8e0 <dhcp_recv+0x68c>)
 801e7f2:	789b      	ldrb	r3, [r3, #2]
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	f43f ad81 	beq.w	801e2fc <dhcp_recv+0xa8>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e7fa:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 801e7fe:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801e800:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 801e802:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801e804:	f7f7 fef6 	bl	80165f4 <lwip_htonl>
 801e808:	4603      	mov	r3, r0
    dhcp_select(netif);
 801e80a:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801e80c:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801e80e:	6923      	ldr	r3, [r4, #16]
 801e810:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 801e812:	f7ff fa47 	bl	801dca4 <dhcp_select>
 801e816:	e571      	b.n	801e2fc <dhcp_recv+0xa8>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801e818:	f899 3005 	ldrb.w	r3, [r9, #5]
 801e81c:	2b01      	cmp	r3, #1
 801e81e:	d028      	beq.n	801e872 <dhcp_recv+0x61e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801e820:	3b03      	subs	r3, #3
 801e822:	2b02      	cmp	r3, #2
 801e824:	f63f ad6a 	bhi.w	801e2fc <dhcp_recv+0xa8>
      dhcp_handle_ack(netif, msg_in);
 801e828:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801e82c:	4621      	mov	r1, r4
 801e82e:	f7ff fcb7 	bl	801e1a0 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 801e832:	4650      	mov	r0, sl
 801e834:	f7ff fbb2 	bl	801df9c <dhcp_bind>
 801e838:	e560      	b.n	801e2fc <dhcp_recv+0xa8>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e83a:	f899 3005 	ldrb.w	r3, [r9, #5]
 801e83e:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801e840:	2a02      	cmp	r2, #2
 801e842:	d902      	bls.n	801e84a <dhcp_recv+0x5f6>
 801e844:	2b01      	cmp	r3, #1
 801e846:	f47f ad59 	bne.w	801e2fc <dhcp_recv+0xa8>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e84a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 801e84e:	795a      	ldrb	r2, [r3, #5]
 801e850:	2a0c      	cmp	r2, #12
 801e852:	d004      	beq.n	801e85e <dhcp_recv+0x60a>
    dhcp->tries = 0;
 801e854:	2200      	movs	r2, #0
    dhcp->state = new_state;
 801e856:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801e858:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 801e85a:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 801e85c:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801e85e:	4b26      	ldr	r3, [pc, #152]	; (801e8f8 <dhcp_recv+0x6a4>)
 801e860:	4650      	mov	r0, sl
 801e862:	461a      	mov	r2, r3
 801e864:	4619      	mov	r1, r3
 801e866:	f7f9 facb 	bl	8017e00 <netif_set_addr>
  dhcp_discover(netif);
 801e86a:	4650      	mov	r0, sl
 801e86c:	f7ff faec 	bl	801de48 <dhcp_discover>
}
 801e870:	e544      	b.n	801e2fc <dhcp_recv+0xa8>
      dhcp_handle_ack(netif, msg_in);
 801e872:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801e876:	4621      	mov	r1, r4
 801e878:	f7ff fc92 	bl	801e1a0 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801e87c:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 801e880:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801e882:	071a      	lsls	r2, r3, #28
 801e884:	d5d6      	bpl.n	801e834 <dhcp_recv+0x5e0>
        dhcp_check(netif);
 801e886:	f7ff fb71 	bl	801df6c <dhcp_check>
 801e88a:	e537      	b.n	801e2fc <dhcp_recv+0xa8>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801e88c:	4b0f      	ldr	r3, [pc, #60]	; (801e8cc <dhcp_recv+0x678>)
 801e88e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801e892:	491a      	ldr	r1, [pc, #104]	; (801e8fc <dhcp_recv+0x6a8>)
 801e894:	480f      	ldr	r0, [pc, #60]	; (801e8d4 <dhcp_recv+0x680>)
 801e896:	f003 fe15 	bl	80224c4 <iprintf>
 801e89a:	e52f      	b.n	801e2fc <dhcp_recv+0xa8>
      if (offset + len + 2 > 0xFFFF) {
 801e89c:	4426      	add	r6, r4
 801e89e:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 801e8a2:	428e      	cmp	r6, r1
 801e8a4:	f73f ad2a 	bgt.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e8a8:	193e      	adds	r6, r7, r4
 801e8aa:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801e8ac:	2c00      	cmp	r4, #0
 801e8ae:	f43f ad89 	beq.w	801e3c4 <dhcp_recv+0x170>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801e8b2:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801e8b4:	f04f 0908 	mov.w	r9, #8
 801e8b8:	e5b5      	b.n	801e426 <dhcp_recv+0x1d2>
      if (offset + len + 2 > 0xFFFF) {
 801e8ba:	4426      	add	r6, r4
 801e8bc:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801e8c0:	429e      	cmp	r6, r3
 801e8c2:	f73f ad1b 	bgt.w	801e2fc <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801e8c6:	443c      	add	r4, r7
 801e8c8:	b2a6      	uxth	r6, r4
      if (decode_len > 0) {
 801e8ca:	e57b      	b.n	801e3c4 <dhcp_recv+0x170>
 801e8cc:	08041358 	.word	0x08041358
 801e8d0:	080415bc 	.word	0x080415bc
 801e8d4:	08028d24 	.word	0x08028d24
 801e8d8:	080415ec 	.word	0x080415ec
 801e8dc:	080415c8 	.word	0x080415c8
 801e8e0:	2002e1b4 	.word	0x2002e1b4
 801e8e4:	2002e1c0 	.word	0x2002e1c0
 801e8e8:	08041624 	.word	0x08041624
 801e8ec:	08041650 	.word	0x08041650
 801e8f0:	080415dc 	.word	0x080415dc
 801e8f4:	080415f8 	.word	0x080415f8
 801e8f8:	08041a0c 	.word	0x08041a0c
 801e8fc:	0804163c 	.word	0x0804163c

0801e900 <dhcp_network_changed>:
{
 801e900:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e902:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 801e904:	b135      	cbz	r5, 801e914 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 801e906:	796b      	ldrb	r3, [r5, #5]
 801e908:	4604      	mov	r4, r0
 801e90a:	2b05      	cmp	r3, #5
 801e90c:	d803      	bhi.n	801e916 <dhcp_network_changed+0x16>
 801e90e:	2b02      	cmp	r3, #2
 801e910:	d813      	bhi.n	801e93a <dhcp_network_changed+0x3a>
 801e912:	b95b      	cbnz	r3, 801e92c <dhcp_network_changed+0x2c>
}
 801e914:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 801e916:	2b0a      	cmp	r3, #10
 801e918:	d00f      	beq.n	801e93a <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801e91a:	2b0c      	cmp	r3, #12
 801e91c:	d906      	bls.n	801e92c <dhcp_network_changed+0x2c>
 801e91e:	4b0a      	ldr	r3, [pc, #40]	; (801e948 <dhcp_network_changed+0x48>)
 801e920:	f240 326d 	movw	r2, #877	; 0x36d
 801e924:	4909      	ldr	r1, [pc, #36]	; (801e94c <dhcp_network_changed+0x4c>)
 801e926:	480a      	ldr	r0, [pc, #40]	; (801e950 <dhcp_network_changed+0x50>)
 801e928:	f003 fdcc 	bl	80224c4 <iprintf>
      dhcp->tries = 0;
 801e92c:	2300      	movs	r3, #0
      dhcp_discover(netif);
 801e92e:	4620      	mov	r0, r4
      dhcp->tries = 0;
 801e930:	71ab      	strb	r3, [r5, #6]
}
 801e932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 801e936:	f7ff ba87 	b.w	801de48 <dhcp_discover>
      dhcp->tries = 0;
 801e93a:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 801e93c:	4620      	mov	r0, r4
      dhcp->tries = 0;
 801e93e:	71ab      	strb	r3, [r5, #6]
}
 801e940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 801e944:	f7ff b90a 	b.w	801db5c <dhcp_reboot>
 801e948:	08041358 	.word	0x08041358
 801e94c:	08041698 	.word	0x08041698
 801e950:	08028d24 	.word	0x08028d24

0801e954 <dhcp_arp_reply>:
{
 801e954:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e956:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e958:	2800      	cmp	r0, #0
 801e95a:	d047      	beq.n	801e9ec <dhcp_arp_reply+0x98>
  dhcp = netif_dhcp_data(netif);
 801e95c:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801e95e:	4604      	mov	r4, r0
 801e960:	b115      	cbz	r5, 801e968 <dhcp_arp_reply+0x14>
 801e962:	796b      	ldrb	r3, [r5, #5]
 801e964:	2b08      	cmp	r3, #8
 801e966:	d001      	beq.n	801e96c <dhcp_arp_reply+0x18>
}
 801e968:	b007      	add	sp, #28
 801e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801e96c:	680a      	ldr	r2, [r1, #0]
 801e96e:	69eb      	ldr	r3, [r5, #28]
 801e970:	429a      	cmp	r2, r3
 801e972:	d1f9      	bne.n	801e968 <dhcp_arp_reply+0x14>
    dhcp->tries = 0;
 801e974:	2600      	movs	r6, #0
    dhcp->state = new_state;
 801e976:	210c      	movs	r1, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801e978:	f10d 0316 	add.w	r3, sp, #22
 801e97c:	2204      	movs	r2, #4
    dhcp->state = new_state;
 801e97e:	7169      	strb	r1, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801e980:	4629      	mov	r1, r5
    dhcp->tries = 0;
 801e982:	71ae      	strb	r6, [r5, #6]
    dhcp->request_timeout = 0;
 801e984:	812e      	strh	r6, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801e986:	f7ff f817 	bl	801d9b8 <dhcp_create_msg>
  if (p_out != NULL) {
 801e98a:	4606      	mov	r6, r0
 801e98c:	b330      	cbz	r0, 801e9dc <dhcp_arp_reply+0x88>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e98e:	6841      	ldr	r1, [r0, #4]
 801e990:	2304      	movs	r3, #4
 801e992:	2232      	movs	r2, #50	; 0x32
 801e994:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801e998:	31f0      	adds	r1, #240	; 0xf0
 801e99a:	9103      	str	r1, [sp, #12]
 801e99c:	f7fe ffca 	bl	801d934 <dhcp_option>
 801e9a0:	4607      	mov	r7, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e9a2:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e9a4:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e9a8:	f7f7 fe24 	bl	80165f4 <lwip_htonl>
 801e9ac:	9903      	ldr	r1, [sp, #12]
 801e9ae:	4602      	mov	r2, r0
 801e9b0:	4638      	mov	r0, r7
 801e9b2:	f7fe ffdd 	bl	801d970 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e9b6:	9903      	ldr	r1, [sp, #12]
 801e9b8:	4632      	mov	r2, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e9ba:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e9be:	f7ff f8b1 	bl	801db24 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801e9c2:	4a0e      	ldr	r2, [pc, #56]	; (801e9fc <dhcp_arp_reply+0xa8>)
 801e9c4:	480e      	ldr	r0, [pc, #56]	; (801ea00 <dhcp_arp_reply+0xac>)
 801e9c6:	2343      	movs	r3, #67	; 0x43
 801e9c8:	9400      	str	r4, [sp, #0]
 801e9ca:	4631      	mov	r1, r6
 801e9cc:	6800      	ldr	r0, [r0, #0]
 801e9ce:	9201      	str	r2, [sp, #4]
 801e9d0:	4a0c      	ldr	r2, [pc, #48]	; (801ea04 <dhcp_arp_reply+0xb0>)
 801e9d2:	f7fe fd81 	bl	801d4d8 <udp_sendto_if_src>
    pbuf_free(p_out);
 801e9d6:	4630      	mov	r0, r6
 801e9d8:	f7f9 fc5c 	bl	8018294 <pbuf_free>
  if (dhcp->tries < 255) {
 801e9dc:	79ab      	ldrb	r3, [r5, #6]
 801e9de:	2bff      	cmp	r3, #255	; 0xff
 801e9e0:	d001      	beq.n	801e9e6 <dhcp_arp_reply+0x92>
    dhcp->tries++;
 801e9e2:	3301      	adds	r3, #1
 801e9e4:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e9e6:	2314      	movs	r3, #20
 801e9e8:	812b      	strh	r3, [r5, #8]
  return result;
 801e9ea:	e7bd      	b.n	801e968 <dhcp_arp_reply+0x14>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e9ec:	4b06      	ldr	r3, [pc, #24]	; (801ea08 <dhcp_arp_reply+0xb4>)
 801e9ee:	f240 328b 	movw	r2, #907	; 0x38b
 801e9f2:	4906      	ldr	r1, [pc, #24]	; (801ea0c <dhcp_arp_reply+0xb8>)
 801e9f4:	4806      	ldr	r0, [pc, #24]	; (801ea10 <dhcp_arp_reply+0xbc>)
 801e9f6:	f003 fd65 	bl	80224c4 <iprintf>
 801e9fa:	e7b5      	b.n	801e968 <dhcp_arp_reply+0x14>
 801e9fc:	08041a0c 	.word	0x08041a0c
 801ea00:	2001aa38 	.word	0x2001aa38
 801ea04:	08041a10 	.word	0x08041a10
 801ea08:	08041358 	.word	0x08041358
 801ea0c:	08028d14 	.word	0x08028d14
 801ea10:	08028d24 	.word	0x08028d24

0801ea14 <dhcp_renew>:
{
 801ea14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ea18:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 801ea1a:	b087      	sub	sp, #28
 801ea1c:	4682      	mov	sl, r0
  if (new_state != dhcp->state) {
 801ea1e:	797b      	ldrb	r3, [r7, #5]
 801ea20:	2b05      	cmp	r3, #5
 801ea22:	d004      	beq.n	801ea2e <dhcp_renew+0x1a>
    dhcp->tries = 0;
 801ea24:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801ea26:	2205      	movs	r2, #5
    dhcp->tries = 0;
 801ea28:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 801ea2a:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 801ea2c:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ea2e:	f10d 0316 	add.w	r3, sp, #22
 801ea32:	2203      	movs	r2, #3
 801ea34:	4639      	mov	r1, r7
 801ea36:	4650      	mov	r0, sl
 801ea38:	f7fe ffbe 	bl	801d9b8 <dhcp_create_msg>
  if (p_out != NULL) {
 801ea3c:	4680      	mov	r8, r0
 801ea3e:	2800      	cmp	r0, #0
 801ea40:	d06a      	beq.n	801eb18 <dhcp_renew+0x104>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ea42:	6846      	ldr	r6, [r0, #4]
 801ea44:	2302      	movs	r3, #2
 801ea46:	2239      	movs	r2, #57	; 0x39
 801ea48:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801ea4c:	36f0      	adds	r6, #240	; 0xf0
 801ea4e:	4d34      	ldr	r5, [pc, #208]	; (801eb20 <dhcp_renew+0x10c>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ea50:	f04f 0901 	mov.w	r9, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ea54:	4631      	mov	r1, r6
 801ea56:	f105 0b03 	add.w	fp, r5, #3
 801ea5a:	f7fe ff6b 	bl	801d934 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ea5e:	4631      	mov	r1, r6
 801ea60:	f8ba 202c 	ldrh.w	r2, [sl, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ea64:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ea68:	f7fe ff48 	bl	801d8fc <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ea6c:	4631      	mov	r1, r6
 801ea6e:	2304      	movs	r3, #4
 801ea70:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ea72:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ea76:	f7fe ff5d 	bl	801d934 <dhcp_option>
 801ea7a:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ea7c:	4929      	ldr	r1, [pc, #164]	; (801eb24 <dhcp_renew+0x110>)
 801ea7e:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ea80:	9003      	str	r0, [sp, #12]
 801ea82:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ea86:	d80b      	bhi.n	801eaa0 <dhcp_renew+0x8c>
  options[options_out_len++] = value;
 801ea88:	1c63      	adds	r3, r4, #1
 801ea8a:	f806 9004 	strb.w	r9, [r6, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ea8e:	455d      	cmp	r5, fp
  options[options_out_len++] = value;
 801ea90:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ea92:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ea96:	d00b      	beq.n	801eab0 <dhcp_renew+0x9c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ea98:	2c43      	cmp	r4, #67	; 0x43
 801ea9a:	f815 9b01 	ldrb.w	r9, [r5], #1
 801ea9e:	d9f3      	bls.n	801ea88 <dhcp_renew+0x74>
 801eaa0:	4b21      	ldr	r3, [pc, #132]	; (801eb28 <dhcp_renew+0x114>)
 801eaa2:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801eaa6:	4821      	ldr	r0, [pc, #132]	; (801eb2c <dhcp_renew+0x118>)
 801eaa8:	f003 fd0c 	bl	80224c4 <iprintf>
 801eaac:	491d      	ldr	r1, [pc, #116]	; (801eb24 <dhcp_renew+0x110>)
 801eaae:	e7eb      	b.n	801ea88 <dhcp_renew+0x74>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801eab0:	9803      	ldr	r0, [sp, #12]
 801eab2:	4631      	mov	r1, r6
 801eab4:	4642      	mov	r2, r8
 801eab6:	3004      	adds	r0, #4
 801eab8:	b280      	uxth	r0, r0
 801eaba:	f7ff f833 	bl	801db24 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801eabe:	4a1c      	ldr	r2, [pc, #112]	; (801eb30 <dhcp_renew+0x11c>)
 801eac0:	f8cd a000 	str.w	sl, [sp]
 801eac4:	2343      	movs	r3, #67	; 0x43
 801eac6:	6810      	ldr	r0, [r2, #0]
 801eac8:	4641      	mov	r1, r8
 801eaca:	f107 0218 	add.w	r2, r7, #24
 801eace:	f7fe fdc5 	bl	801d65c <udp_sendto_if>
 801ead2:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801ead4:	4640      	mov	r0, r8
 801ead6:	f7f9 fbdd 	bl	8018294 <pbuf_free>
  if (dhcp->tries < 255) {
 801eada:	79bb      	ldrb	r3, [r7, #6]
 801eadc:	2bff      	cmp	r3, #255	; 0xff
 801eade:	d015      	beq.n	801eb0c <dhcp_renew+0xf8>
    dhcp->tries++;
 801eae0:	3301      	adds	r3, #1
 801eae2:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801eae4:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801eae6:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801eae8:	d810      	bhi.n	801eb0c <dhcp_renew+0xf8>
 801eaea:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801eaee:	4a11      	ldr	r2, [pc, #68]	; (801eb34 <dhcp_renew+0x120>)
}
 801eaf0:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801eaf2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801eaf6:	011b      	lsls	r3, r3, #4
 801eaf8:	b29b      	uxth	r3, r3
 801eafa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801eafe:	fba2 2303 	umull	r2, r3, r2, r3
 801eb02:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801eb04:	813b      	strh	r3, [r7, #8]
}
 801eb06:	b007      	add	sp, #28
 801eb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801eb0c:	2328      	movs	r3, #40	; 0x28
}
 801eb0e:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801eb10:	813b      	strh	r3, [r7, #8]
}
 801eb12:	b007      	add	sp, #28
 801eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801eb18:	f04f 34ff 	mov.w	r4, #4294967295
 801eb1c:	e7dd      	b.n	801eada <dhcp_renew+0xc6>
 801eb1e:	bf00      	nop
 801eb20:	080416d1 	.word	0x080416d1
 801eb24:	080414cc 	.word	0x080414cc
 801eb28:	08041358 	.word	0x08041358
 801eb2c:	08028d24 	.word	0x08028d24
 801eb30:	2001aa38 	.word	0x2001aa38
 801eb34:	10624dd3 	.word	0x10624dd3

0801eb38 <dhcp_release_and_stop>:
{
 801eb38:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801eb3a:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801eb3c:	b087      	sub	sp, #28
  if (dhcp == NULL) {
 801eb3e:	2c00      	cmp	r4, #0
 801eb40:	d051      	beq.n	801ebe6 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 801eb42:	7962      	ldrb	r2, [r4, #5]
 801eb44:	2a00      	cmp	r2, #0
 801eb46:	d04e      	beq.n	801ebe6 <dhcp_release_and_stop+0xae>
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801eb48:	1f11      	subs	r1, r2, #4
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801eb4a:	2300      	movs	r3, #0
 801eb4c:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801eb4e:	69a0      	ldr	r0, [r4, #24]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801eb50:	2901      	cmp	r1, #1
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801eb52:	62a3      	str	r3, [r4, #40]	; 0x28
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801eb54:	9005      	str	r0, [sp, #20]
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801eb56:	81e3      	strh	r3, [r4, #14]
 801eb58:	6123      	str	r3, [r4, #16]
 801eb5a:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801eb5c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801eb60:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801eb64:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801eb68:	d901      	bls.n	801eb6e <dhcp_release_and_stop+0x36>
 801eb6a:	2a0a      	cmp	r2, #10
 801eb6c:	d12d      	bne.n	801ebca <dhcp_release_and_stop+0x92>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801eb6e:	f10d 0312 	add.w	r3, sp, #18
 801eb72:	2207      	movs	r2, #7
 801eb74:	4621      	mov	r1, r4
 801eb76:	4628      	mov	r0, r5
 801eb78:	f7fe ff1e 	bl	801d9b8 <dhcp_create_msg>
    if (p_out != NULL) {
 801eb7c:	4606      	mov	r6, r0
 801eb7e:	b320      	cbz	r0, 801ebca <dhcp_release_and_stop+0x92>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801eb80:	6871      	ldr	r1, [r6, #4]
 801eb82:	2304      	movs	r3, #4
 801eb84:	2236      	movs	r2, #54	; 0x36
 801eb86:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 801eb8a:	31f0      	adds	r1, #240	; 0xf0
 801eb8c:	9103      	str	r1, [sp, #12]
 801eb8e:	f7fe fed1 	bl	801d934 <dhcp_option>
 801eb92:	4607      	mov	r7, r0
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801eb94:	9805      	ldr	r0, [sp, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801eb96:	f8ad 7012 	strh.w	r7, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801eb9a:	f7f7 fd2b 	bl	80165f4 <lwip_htonl>
 801eb9e:	9903      	ldr	r1, [sp, #12]
 801eba0:	4602      	mov	r2, r0
 801eba2:	4638      	mov	r0, r7
 801eba4:	f7fe fee4 	bl	801d970 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801eba8:	9903      	ldr	r1, [sp, #12]
 801ebaa:	4632      	mov	r2, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801ebac:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ebb0:	f7fe ffb8 	bl	801db24 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ebb4:	4910      	ldr	r1, [pc, #64]	; (801ebf8 <dhcp_release_and_stop+0xc0>)
 801ebb6:	9500      	str	r5, [sp, #0]
 801ebb8:	2343      	movs	r3, #67	; 0x43
 801ebba:	6808      	ldr	r0, [r1, #0]
 801ebbc:	aa05      	add	r2, sp, #20
 801ebbe:	4631      	mov	r1, r6
 801ebc0:	f7fe fd4c 	bl	801d65c <udp_sendto_if>
      pbuf_free(p_out);
 801ebc4:	4630      	mov	r0, r6
 801ebc6:	f7f9 fb65 	bl	8018294 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801ebca:	4b0c      	ldr	r3, [pc, #48]	; (801ebfc <dhcp_release_and_stop+0xc4>)
 801ebcc:	4628      	mov	r0, r5
 801ebce:	461a      	mov	r2, r3
 801ebd0:	4619      	mov	r1, r3
 801ebd2:	f7f9 f915 	bl	8017e00 <netif_set_addr>
  if (new_state != dhcp->state) {
 801ebd6:	7963      	ldrb	r3, [r4, #5]
 801ebd8:	b11b      	cbz	r3, 801ebe2 <dhcp_release_and_stop+0xaa>
    dhcp->state = new_state;
 801ebda:	2300      	movs	r3, #0
 801ebdc:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 801ebde:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 801ebe0:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 801ebe2:	7923      	ldrb	r3, [r4, #4]
 801ebe4:	b90b      	cbnz	r3, 801ebea <dhcp_release_and_stop+0xb2>
}
 801ebe6:	b007      	add	sp, #28
 801ebe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801ebea:	f7ff fab7 	bl	801e15c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801ebee:	2300      	movs	r3, #0
 801ebf0:	7123      	strb	r3, [r4, #4]
}
 801ebf2:	b007      	add	sp, #28
 801ebf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebf6:	bf00      	nop
 801ebf8:	2001aa38 	.word	0x2001aa38
 801ebfc:	08041a0c 	.word	0x08041a0c

0801ec00 <dhcp_start>:
{
 801ec00:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801ec02:	2800      	cmp	r0, #0
 801ec04:	d046      	beq.n	801ec94 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801ec06:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801ec0a:	4604      	mov	r4, r0
 801ec0c:	07da      	lsls	r2, r3, #31
 801ec0e:	d537      	bpl.n	801ec80 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801ec10:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 801ec12:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801ec14:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801ec18:	d32f      	bcc.n	801ec7a <dhcp_start+0x7a>
  if (dhcp == NULL) {
 801ec1a:	b33d      	cbz	r5, 801ec6c <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 801ec1c:	792b      	ldrb	r3, [r5, #4]
 801ec1e:	bb13      	cbnz	r3, 801ec66 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 801ec20:	2234      	movs	r2, #52	; 0x34
 801ec22:	2100      	movs	r1, #0
 801ec24:	4628      	mov	r0, r5
 801ec26:	f002 fcdb 	bl	80215e0 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801ec2a:	f7ff fa5d 	bl	801e0e8 <dhcp_inc_pcb_refcount>
 801ec2e:	4606      	mov	r6, r0
 801ec30:	bb18      	cbnz	r0, 801ec7a <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 801ec32:	2301      	movs	r3, #1
 801ec34:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 801ec36:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801ec3a:	075b      	lsls	r3, r3, #29
 801ec3c:	d408      	bmi.n	801ec50 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 801ec3e:	796b      	ldrb	r3, [r5, #5]
 801ec40:	2b02      	cmp	r3, #2
 801ec42:	d003      	beq.n	801ec4c <dhcp_start+0x4c>
    dhcp->state = new_state;
 801ec44:	2302      	movs	r3, #2
    dhcp->tries = 0;
 801ec46:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 801ec48:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 801ec4a:	716b      	strb	r3, [r5, #5]
}
 801ec4c:	4630      	mov	r0, r6
 801ec4e:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 801ec50:	4620      	mov	r0, r4
 801ec52:	f7ff f8f9 	bl	801de48 <dhcp_discover>
  if (result != ERR_OK) {
 801ec56:	2800      	cmp	r0, #0
 801ec58:	d0f8      	beq.n	801ec4c <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 801ec5a:	4620      	mov	r0, r4
    return ERR_MEM;
 801ec5c:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 801ec60:	f7ff ff6a 	bl	801eb38 <dhcp_release_and_stop>
    return ERR_MEM;
 801ec64:	e7f2      	b.n	801ec4c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801ec66:	f7ff fa79 	bl	801e15c <dhcp_dec_pcb_refcount>
 801ec6a:	e7d9      	b.n	801ec20 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801ec6c:	2034      	movs	r0, #52	; 0x34
 801ec6e:	f7f8 fe2f 	bl	80178d0 <mem_malloc>
    if (dhcp == NULL) {
 801ec72:	4605      	mov	r5, r0
 801ec74:	b108      	cbz	r0, 801ec7a <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801ec76:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 801ec78:	e7d2      	b.n	801ec20 <dhcp_start+0x20>
    return ERR_MEM;
 801ec7a:	f04f 36ff 	mov.w	r6, #4294967295
 801ec7e:	e7e5      	b.n	801ec4c <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801ec80:	4b09      	ldr	r3, [pc, #36]	; (801eca8 <dhcp_start+0xa8>)
 801ec82:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801ec86:	4909      	ldr	r1, [pc, #36]	; (801ecac <dhcp_start+0xac>)
 801ec88:	f06f 060f 	mvn.w	r6, #15
 801ec8c:	4808      	ldr	r0, [pc, #32]	; (801ecb0 <dhcp_start+0xb0>)
 801ec8e:	f003 fc19 	bl	80224c4 <iprintf>
 801ec92:	e7db      	b.n	801ec4c <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801ec94:	4b04      	ldr	r3, [pc, #16]	; (801eca8 <dhcp_start+0xa8>)
 801ec96:	f240 22e7 	movw	r2, #743	; 0x2e7
 801ec9a:	4906      	ldr	r1, [pc, #24]	; (801ecb4 <dhcp_start+0xb4>)
 801ec9c:	f06f 060f 	mvn.w	r6, #15
 801eca0:	4803      	ldr	r0, [pc, #12]	; (801ecb0 <dhcp_start+0xb0>)
 801eca2:	f003 fc0f 	bl	80224c4 <iprintf>
 801eca6:	e7d1      	b.n	801ec4c <dhcp_start+0x4c>
 801eca8:	08041358 	.word	0x08041358
 801ecac:	080416ac 	.word	0x080416ac
 801ecb0:	08028d24 	.word	0x08028d24
 801ecb4:	08028d14 	.word	0x08028d14

0801ecb8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 801ecb8:	4b5f      	ldr	r3, [pc, #380]	; (801ee38 <dhcp_coarse_tmr+0x180>)
{
 801ecba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 801ecbe:	681d      	ldr	r5, [r3, #0]
{
 801ecc0:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 801ecc2:	b1e5      	cbz	r5, 801ecfe <dhcp_coarse_tmr+0x46>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ecc4:	f8df b190 	ldr.w	fp, [pc, #400]	; 801ee58 <dhcp_coarse_tmr+0x1a0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ecc8:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801ecca:	b1ac      	cbz	r4, 801ecf8 <dhcp_coarse_tmr+0x40>
 801eccc:	7963      	ldrb	r3, [r4, #5]
 801ecce:	b19b      	cbz	r3, 801ecf8 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801ecd0:	8aa1      	ldrh	r1, [r4, #20]
 801ecd2:	b129      	cbz	r1, 801ece0 <dhcp_coarse_tmr+0x28>
 801ecd4:	8a62      	ldrh	r2, [r4, #18]
 801ecd6:	3201      	adds	r2, #1
 801ecd8:	b292      	uxth	r2, r2
 801ecda:	4291      	cmp	r1, r2
 801ecdc:	8262      	strh	r2, [r4, #18]
 801ecde:	d011      	beq.n	801ed04 <dhcp_coarse_tmr+0x4c>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801ece0:	8a22      	ldrh	r2, [r4, #16]
 801ece2:	b11a      	cbz	r2, 801ecec <dhcp_coarse_tmr+0x34>
 801ece4:	1e51      	subs	r1, r2, #1
 801ece6:	2a01      	cmp	r2, #1
 801ece8:	8221      	strh	r1, [r4, #16]
 801ecea:	d012      	beq.n	801ed12 <dhcp_coarse_tmr+0x5a>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801ecec:	89e2      	ldrh	r2, [r4, #14]
 801ecee:	b11a      	cbz	r2, 801ecf8 <dhcp_coarse_tmr+0x40>
 801ecf0:	1e51      	subs	r1, r2, #1
 801ecf2:	2a01      	cmp	r2, #1
 801ecf4:	81e1      	strh	r1, [r4, #14]
 801ecf6:	d05c      	beq.n	801edb2 <dhcp_coarse_tmr+0xfa>
  NETIF_FOREACH(netif) {
 801ecf8:	682d      	ldr	r5, [r5, #0]
 801ecfa:	2d00      	cmp	r5, #0
 801ecfc:	d1e4      	bne.n	801ecc8 <dhcp_coarse_tmr+0x10>
}
 801ecfe:	b007      	add	sp, #28
 801ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 801ed04:	4628      	mov	r0, r5
 801ed06:	f7ff ff17 	bl	801eb38 <dhcp_release_and_stop>
        dhcp_start(netif);
 801ed0a:	4628      	mov	r0, r5
 801ed0c:	f7ff ff78 	bl	801ec00 <dhcp_start>
 801ed10:	e7f2      	b.n	801ecf8 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ed12:	1e5a      	subs	r2, r3, #1
 801ed14:	b2d1      	uxtb	r1, r2
 801ed16:	2909      	cmp	r1, #9
 801ed18:	d8ee      	bhi.n	801ecf8 <dhcp_coarse_tmr+0x40>
 801ed1a:	f240 2219 	movw	r2, #537	; 0x219
 801ed1e:	40ca      	lsrs	r2, r1
 801ed20:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801ed22:	f012 0201 	ands.w	r2, r2, #1
 801ed26:	d1e7      	bne.n	801ecf8 <dhcp_coarse_tmr+0x40>
  if (new_state != dhcp->state) {
 801ed28:	2b04      	cmp	r3, #4
 801ed2a:	d003      	beq.n	801ed34 <dhcp_coarse_tmr+0x7c>
    dhcp->state = new_state;
 801ed2c:	2304      	movs	r3, #4
    dhcp->tries = 0;
 801ed2e:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 801ed30:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 801ed32:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ed34:	f10d 0316 	add.w	r3, sp, #22
 801ed38:	2203      	movs	r2, #3
 801ed3a:	4621      	mov	r1, r4
 801ed3c:	4628      	mov	r0, r5
 801ed3e:	f7fe fe3b 	bl	801d9b8 <dhcp_create_msg>
  if (p_out != NULL) {
 801ed42:	4681      	mov	r9, r0
 801ed44:	2800      	cmp	r0, #0
 801ed46:	d057      	beq.n	801edf8 <dhcp_coarse_tmr+0x140>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ed48:	6841      	ldr	r1, [r0, #4]
 801ed4a:	2302      	movs	r3, #2
 801ed4c:	2239      	movs	r2, #57	; 0x39
 801ed4e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801ed52:	f101 08f0 	add.w	r8, r1, #240	; 0xf0
 801ed56:	4f39      	ldr	r7, [pc, #228]	; (801ee3c <dhcp_coarse_tmr+0x184>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ed58:	f04f 0a01 	mov.w	sl, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ed5c:	4641      	mov	r1, r8
 801ed5e:	f7fe fde9 	bl	801d934 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ed62:	4641      	mov	r1, r8
 801ed64:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ed66:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ed6a:	f7fe fdc7 	bl	801d8fc <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ed6e:	4641      	mov	r1, r8
 801ed70:	2304      	movs	r3, #4
 801ed72:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ed74:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ed78:	f7fe fddc 	bl	801d934 <dhcp_option>
 801ed7c:	4606      	mov	r6, r0
 801ed7e:	9003      	str	r0, [sp, #12]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ed80:	2e43      	cmp	r6, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ed82:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ed86:	d80c      	bhi.n	801eda2 <dhcp_coarse_tmr+0xea>
  options[options_out_len++] = value;
 801ed88:	1c73      	adds	r3, r6, #1
 801ed8a:	f808 a006 	strb.w	sl, [r8, r6]
 801ed8e:	b29e      	uxth	r6, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ed90:	4b2b      	ldr	r3, [pc, #172]	; (801ee40 <dhcp_coarse_tmr+0x188>)
 801ed92:	429f      	cmp	r7, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ed94:	f8ad 6016 	strh.w	r6, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ed98:	d01c      	beq.n	801edd4 <dhcp_coarse_tmr+0x11c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ed9a:	2e43      	cmp	r6, #67	; 0x43
 801ed9c:	f817 ab01 	ldrb.w	sl, [r7], #1
 801eda0:	d9f2      	bls.n	801ed88 <dhcp_coarse_tmr+0xd0>
 801eda2:	4b28      	ldr	r3, [pc, #160]	; (801ee44 <dhcp_coarse_tmr+0x18c>)
 801eda4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801eda8:	4659      	mov	r1, fp
 801edaa:	4827      	ldr	r0, [pc, #156]	; (801ee48 <dhcp_coarse_tmr+0x190>)
 801edac:	f003 fb8a 	bl	80224c4 <iprintf>
 801edb0:	e7ea      	b.n	801ed88 <dhcp_coarse_tmr+0xd0>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801edb2:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 801edb6:	2a01      	cmp	r2, #1
 801edb8:	d001      	beq.n	801edbe <dhcp_coarse_tmr+0x106>
 801edba:	2b0a      	cmp	r3, #10
 801edbc:	d19c      	bne.n	801ecf8 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 801edbe:	4628      	mov	r0, r5
 801edc0:	f7ff fe28 	bl	801ea14 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801edc4:	89a3      	ldrh	r3, [r4, #12]
 801edc6:	8a62      	ldrh	r2, [r4, #18]
 801edc8:	1a9b      	subs	r3, r3, r2
 801edca:	2b01      	cmp	r3, #1
 801edcc:	dd94      	ble.n	801ecf8 <dhcp_coarse_tmr+0x40>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801edce:	105b      	asrs	r3, r3, #1
 801edd0:	81e3      	strh	r3, [r4, #14]
 801edd2:	e791      	b.n	801ecf8 <dhcp_coarse_tmr+0x40>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801edd4:	9803      	ldr	r0, [sp, #12]
 801edd6:	4641      	mov	r1, r8
 801edd8:	464a      	mov	r2, r9
 801edda:	3004      	adds	r0, #4
 801eddc:	b280      	uxth	r0, r0
 801edde:	f7fe fea1 	bl	801db24 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ede2:	4a1a      	ldr	r2, [pc, #104]	; (801ee4c <dhcp_coarse_tmr+0x194>)
 801ede4:	9500      	str	r5, [sp, #0]
 801ede6:	2343      	movs	r3, #67	; 0x43
 801ede8:	6810      	ldr	r0, [r2, #0]
 801edea:	4649      	mov	r1, r9
 801edec:	4a18      	ldr	r2, [pc, #96]	; (801ee50 <dhcp_coarse_tmr+0x198>)
 801edee:	f7fe fc35 	bl	801d65c <udp_sendto_if>
    pbuf_free(p_out);
 801edf2:	4648      	mov	r0, r9
 801edf4:	f7f9 fa4e 	bl	8018294 <pbuf_free>
  if (dhcp->tries < 255) {
 801edf8:	79a3      	ldrb	r3, [r4, #6]
 801edfa:	2bff      	cmp	r3, #255	; 0xff
 801edfc:	d01a      	beq.n	801ee34 <dhcp_coarse_tmr+0x17c>
    dhcp->tries++;
 801edfe:	3301      	adds	r3, #1
 801ee00:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801ee02:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801ee04:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801ee06:	d815      	bhi.n	801ee34 <dhcp_coarse_tmr+0x17c>
 801ee08:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801ee0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ee10:	4a10      	ldr	r2, [pc, #64]	; (801ee54 <dhcp_coarse_tmr+0x19c>)
 801ee12:	00db      	lsls	r3, r3, #3
 801ee14:	b29b      	uxth	r3, r3
 801ee16:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ee1a:	fba2 2303 	umull	r2, r3, r2, r3
 801ee1e:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801ee20:	8aa2      	ldrh	r2, [r4, #20]
 801ee22:	8a61      	ldrh	r1, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ee24:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801ee26:	1a53      	subs	r3, r2, r1
 801ee28:	2b01      	cmp	r3, #1
 801ee2a:	f77f af65 	ble.w	801ecf8 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801ee2e:	105b      	asrs	r3, r3, #1
 801ee30:	8223      	strh	r3, [r4, #16]
 801ee32:	e761      	b.n	801ecf8 <dhcp_coarse_tmr+0x40>
  options[options_out_len++] = value;
 801ee34:	2314      	movs	r3, #20
 801ee36:	e7f3      	b.n	801ee20 <dhcp_coarse_tmr+0x168>
 801ee38:	2002e080 	.word	0x2002e080
 801ee3c:	080416d1 	.word	0x080416d1
 801ee40:	080416d4 	.word	0x080416d4
 801ee44:	08041358 	.word	0x08041358
 801ee48:	08028d24 	.word	0x08028d24
 801ee4c:	2001aa38 	.word	0x2001aa38
 801ee50:	08041a10 	.word	0x08041a10
 801ee54:	10624dd3 	.word	0x10624dd3
 801ee58:	080414cc 	.word	0x080414cc

0801ee5c <dhcp_fine_tmr>:
{
 801ee5c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 801ee5e:	4b21      	ldr	r3, [pc, #132]	; (801eee4 <dhcp_fine_tmr+0x88>)
 801ee60:	681c      	ldr	r4, [r3, #0]
 801ee62:	b1fc      	cbz	r4, 801eea4 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 801ee64:	2500      	movs	r5, #0
 801ee66:	e003      	b.n	801ee70 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 801ee68:	3a01      	subs	r2, #1
 801ee6a:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 801ee6c:	6824      	ldr	r4, [r4, #0]
 801ee6e:	b1cc      	cbz	r4, 801eea4 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ee70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d0fa      	beq.n	801ee6c <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 801ee76:	891a      	ldrh	r2, [r3, #8]
 801ee78:	2a01      	cmp	r2, #1
 801ee7a:	d8f5      	bhi.n	801ee68 <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 801ee7c:	d1f6      	bne.n	801ee6c <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801ee7e:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 801ee80:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801ee82:	2a0c      	cmp	r2, #12
 801ee84:	d016      	beq.n	801eeb4 <dhcp_fine_tmr+0x58>
 801ee86:	2a06      	cmp	r2, #6
 801ee88:	d014      	beq.n	801eeb4 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801ee8a:	2a01      	cmp	r2, #1
 801ee8c:	d016      	beq.n	801eebc <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801ee8e:	2a08      	cmp	r2, #8
 801ee90:	d009      	beq.n	801eea6 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801ee92:	2a03      	cmp	r2, #3
 801ee94:	d1ea      	bne.n	801ee6c <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 801ee96:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 801ee98:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 801ee9a:	2b01      	cmp	r3, #1
 801ee9c:	d91e      	bls.n	801eedc <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 801ee9e:	f7fe ffd3 	bl	801de48 <dhcp_discover>
 801eea2:	e7e3      	b.n	801ee6c <dhcp_fine_tmr+0x10>
}
 801eea4:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 801eea6:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 801eea8:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 801eeaa:	2b01      	cmp	r3, #1
 801eeac:	d913      	bls.n	801eed6 <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 801eeae:	f7ff f875 	bl	801df9c <dhcp_bind>
 801eeb2:	e7db      	b.n	801ee6c <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 801eeb4:	4620      	mov	r0, r4
 801eeb6:	f7fe ffc7 	bl	801de48 <dhcp_discover>
 801eeba:	e7d7      	b.n	801ee6c <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 801eebc:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 801eebe:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 801eec0:	2b05      	cmp	r3, #5
 801eec2:	d802      	bhi.n	801eeca <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 801eec4:	f7fe feee 	bl	801dca4 <dhcp_select>
 801eec8:	e7d0      	b.n	801ee6c <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 801eeca:	f7ff fe35 	bl	801eb38 <dhcp_release_and_stop>
      dhcp_start(netif);
 801eece:	4620      	mov	r0, r4
 801eed0:	f7ff fe96 	bl	801ec00 <dhcp_start>
 801eed4:	e7ca      	b.n	801ee6c <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 801eed6:	f7ff f849 	bl	801df6c <dhcp_check>
 801eeda:	e7c7      	b.n	801ee6c <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 801eedc:	f7fe fe3e 	bl	801db5c <dhcp_reboot>
 801eee0:	e7c4      	b.n	801ee6c <dhcp_fine_tmr+0x10>
 801eee2:	bf00      	nop
 801eee4:	2002e080 	.word	0x2002e080

0801eee8 <free_etharp_q>:
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 801eee8:	b320      	cbz	r0, 801ef34 <free_etharp_q+0x4c>
{
 801eeea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eeee:	4604      	mov	r4, r0
  while (q) {
    r = q;
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801eef0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 801ef48 <free_etharp_q+0x60>
 801eef4:	4f12      	ldr	r7, [pc, #72]	; (801ef40 <free_etharp_q+0x58>)
 801eef6:	4e13      	ldr	r6, [pc, #76]	; (801ef44 <free_etharp_q+0x5c>)
 801eef8:	e006      	b.n	801ef08 <free_etharp_q+0x20>
    pbuf_free(r->p);
 801eefa:	f7f9 f9cb 	bl	8018294 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801eefe:	4629      	mov	r1, r5
 801ef00:	200b      	movs	r0, #11
 801ef02:	f7f8 fef7 	bl	8017cf4 <memp_free>
  while (q) {
 801ef06:	b19c      	cbz	r4, 801ef30 <free_etharp_q+0x48>
    q = q->next;
 801ef08:	4625      	mov	r5, r4
 801ef0a:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801ef0c:	6868      	ldr	r0, [r5, #4]
 801ef0e:	2800      	cmp	r0, #0
 801ef10:	d1f3      	bne.n	801eefa <free_etharp_q+0x12>
 801ef12:	4639      	mov	r1, r7
 801ef14:	4643      	mov	r3, r8
 801ef16:	229a      	movs	r2, #154	; 0x9a
 801ef18:	4630      	mov	r0, r6
 801ef1a:	f003 fad3 	bl	80224c4 <iprintf>
 801ef1e:	6868      	ldr	r0, [r5, #4]
    pbuf_free(r->p);
 801ef20:	f7f9 f9b8 	bl	8018294 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801ef24:	4629      	mov	r1, r5
 801ef26:	200b      	movs	r0, #11
 801ef28:	f7f8 fee4 	bl	8017cf4 <memp_free>
  while (q) {
 801ef2c:	2c00      	cmp	r4, #0
 801ef2e:	d1eb      	bne.n	801ef08 <free_etharp_q+0x20>
  }
}
 801ef30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801ef34:	4b04      	ldr	r3, [pc, #16]	; (801ef48 <free_etharp_q+0x60>)
 801ef36:	2296      	movs	r2, #150	; 0x96
 801ef38:	4904      	ldr	r1, [pc, #16]	; (801ef4c <free_etharp_q+0x64>)
 801ef3a:	4802      	ldr	r0, [pc, #8]	; (801ef44 <free_etharp_q+0x5c>)
 801ef3c:	f003 bac2 	b.w	80224c4 <iprintf>
 801ef40:	08041718 	.word	0x08041718
 801ef44:	08028d24 	.word	0x08028d24
 801ef48:	080416d4 	.word	0x080416d4
 801ef4c:	0804170c 	.word	0x0804170c

0801ef50 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ef50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef54:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ef56:	f04f 0920 	mov.w	r9, #32
{
 801ef5a:	b085      	sub	sp, #20
 801ef5c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 801f0b8 <etharp_find_entry+0x168>
 801ef60:	4605      	mov	r5, r0
 801ef62:	4617      	mov	r7, r2
 801ef64:	9103      	str	r1, [sp, #12]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ef66:	469e      	mov	lr, r3
 801ef68:	4641      	mov	r1, r8
 801ef6a:	469b      	mov	fp, r3
  s16_t empty = ARP_TABLE_SIZE;
 801ef6c:	464c      	mov	r4, r9
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ef6e:	46cc      	mov	ip, r9
 801ef70:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801ef74:	e004      	b.n	801ef80 <etharp_find_entry+0x30>
 801ef76:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ef78:	3301      	adds	r3, #1
 801ef7a:	3118      	adds	r1, #24
 801ef7c:	2b20      	cmp	r3, #32
 801ef7e:	d016      	beq.n	801efae <etharp_find_entry+0x5e>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ef80:	2c20      	cmp	r4, #32
 801ef82:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 801ef84:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ef86:	d13b      	bne.n	801f000 <etharp_find_entry+0xb0>
 801ef88:	2800      	cmp	r0, #0
 801ef8a:	d0f4      	beq.n	801ef76 <etharp_find_entry+0x26>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ef8c:	b125      	cbz	r5, 801ef98 <etharp_find_entry+0x48>
 801ef8e:	682e      	ldr	r6, [r5, #0]
 801ef90:	46b2      	mov	sl, r6
 801ef92:	684e      	ldr	r6, [r1, #4]
 801ef94:	45b2      	cmp	sl, r6
 801ef96:	d03e      	beq.n	801f016 <etharp_find_entry+0xc6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ef98:	2801      	cmp	r0, #1
 801ef9a:	d034      	beq.n	801f006 <etharp_find_entry+0xb6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ef9c:	8a48      	ldrh	r0, [r1, #18]
 801ef9e:	4570      	cmp	r0, lr
 801efa0:	d3ea      	bcc.n	801ef78 <etharp_find_entry+0x28>
 801efa2:	3301      	adds	r3, #1
 801efa4:	4686      	mov	lr, r0
 801efa6:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801efa8:	3118      	adds	r1, #24
 801efaa:	2b20      	cmp	r3, #32
 801efac:	d1e8      	bne.n	801ef80 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801efae:	9b03      	ldr	r3, [sp, #12]
 801efb0:	f8dd a004 	ldr.w	sl, [sp, #4]
 801efb4:	2b01      	cmp	r3, #1
 801efb6:	d173      	bne.n	801f0a0 <etharp_find_entry+0x150>
 801efb8:	2c20      	cmp	r4, #32
 801efba:	d03c      	beq.n	801f036 <etharp_find_entry+0xe6>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801efbc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801efc0:	46a1      	mov	r9, r4
 801efc2:	0066      	lsls	r6, r4, #1
 801efc4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801efc8:	7d1b      	ldrb	r3, [r3, #20]
 801efca:	b133      	cbz	r3, 801efda <etharp_find_entry+0x8a>
 801efcc:	4b36      	ldr	r3, [pc, #216]	; (801f0a8 <etharp_find_entry+0x158>)
 801efce:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801efd2:	4936      	ldr	r1, [pc, #216]	; (801f0ac <etharp_find_entry+0x15c>)
 801efd4:	4836      	ldr	r0, [pc, #216]	; (801f0b0 <etharp_find_entry+0x160>)
 801efd6:	f003 fa75 	bl	80224c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801efda:	b12d      	cbz	r5, 801efe8 <etharp_find_entry+0x98>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801efdc:	eb06 0309 	add.w	r3, r6, r9
 801efe0:	682a      	ldr	r2, [r5, #0]
 801efe2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801efe6:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 801efe8:	444e      	add	r6, r9
 801efea:	2300      	movs	r3, #0
 801efec:	eb08 08c6 	add.w	r8, r8, r6, lsl #3
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801eff0:	f8c8 7008 	str.w	r7, [r8, #8]
  arp_table[i].ctime = 0;
 801eff4:	f8a8 3012 	strh.w	r3, [r8, #18]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 801eff8:	4620      	mov	r0, r4
 801effa:	b005      	add	sp, #20
 801effc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 801f000:	2800      	cmp	r0, #0
 801f002:	d0b9      	beq.n	801ef78 <etharp_find_entry+0x28>
 801f004:	e7c2      	b.n	801ef8c <etharp_find_entry+0x3c>
        if (arp_table[i].q != NULL) {
 801f006:	6808      	ldr	r0, [r1, #0]
 801f008:	b170      	cbz	r0, 801f028 <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 801f00a:	8a48      	ldrh	r0, [r1, #18]
 801f00c:	4558      	cmp	r0, fp
 801f00e:	d3b3      	bcc.n	801ef78 <etharp_find_entry+0x28>
 801f010:	4683      	mov	fp, r0
 801f012:	4691      	mov	r9, r2
 801f014:	e7b0      	b.n	801ef78 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801f016:	b117      	cbz	r7, 801f01e <etharp_find_entry+0xce>
 801f018:	688e      	ldr	r6, [r1, #8]
 801f01a:	42be      	cmp	r6, r7
 801f01c:	d1bc      	bne.n	801ef98 <etharp_find_entry+0x48>
 801f01e:	4614      	mov	r4, r2
}
 801f020:	4620      	mov	r0, r4
 801f022:	b005      	add	sp, #20
 801f024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 801f028:	8a48      	ldrh	r0, [r1, #18]
 801f02a:	9e02      	ldr	r6, [sp, #8]
 801f02c:	42b0      	cmp	r0, r6
 801f02e:	d3a3      	bcc.n	801ef78 <etharp_find_entry+0x28>
 801f030:	e9cd 2001 	strd	r2, r0, [sp, #4]
 801f034:	e7a0      	b.n	801ef78 <etharp_find_entry+0x28>
    if (old_stable < ARP_TABLE_SIZE) {
 801f036:	f1bc 0f20 	cmp.w	ip, #32
 801f03a:	d024      	beq.n	801f086 <etharp_find_entry+0x136>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801f03c:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 801f040:	46e1      	mov	r9, ip
 801f042:	ea4f 064c 	mov.w	r6, ip, lsl #1
 801f046:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801f04a:	b33b      	cbz	r3, 801f09c <etharp_find_entry+0x14c>
 801f04c:	4b16      	ldr	r3, [pc, #88]	; (801f0a8 <etharp_find_entry+0x158>)
 801f04e:	f240 126d 	movw	r2, #365	; 0x16d
 801f052:	4918      	ldr	r1, [pc, #96]	; (801f0b4 <etharp_find_entry+0x164>)
 801f054:	4664      	mov	r4, ip
 801f056:	4816      	ldr	r0, [pc, #88]	; (801f0b0 <etharp_find_entry+0x160>)
 801f058:	f003 fa34 	bl	80224c4 <iprintf>
  if (arp_table[i].q != NULL) {
 801f05c:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 801f060:	ea4f 0649 	mov.w	r6, r9, lsl #1
 801f064:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801f068:	f858 000a 	ldr.w	r0, [r8, sl]
 801f06c:	b120      	cbz	r0, 801f078 <etharp_find_entry+0x128>
    free_etharp_q(arp_table[i].q);
 801f06e:	f7ff ff3b 	bl	801eee8 <free_etharp_q>
    arp_table[i].q = NULL;
 801f072:	2300      	movs	r3, #0
 801f074:	f848 300a 	str.w	r3, [r8, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f078:	eb06 0309 	add.w	r3, r6, r9
 801f07c:	2200      	movs	r2, #0
 801f07e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801f082:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801f084:	e7a9      	b.n	801efda <etharp_find_entry+0x8a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801f086:	f1ba 0f20 	cmp.w	sl, #32
 801f08a:	d104      	bne.n	801f096 <etharp_find_entry+0x146>
    } else if (old_queue < ARP_TABLE_SIZE) {
 801f08c:	f1b9 0f20 	cmp.w	r9, #32
 801f090:	d006      	beq.n	801f0a0 <etharp_find_entry+0x150>
 801f092:	464c      	mov	r4, r9
 801f094:	e7e2      	b.n	801f05c <etharp_find_entry+0x10c>
 801f096:	4654      	mov	r4, sl
    } else if (old_pending < ARP_TABLE_SIZE) {
 801f098:	46d1      	mov	r9, sl
 801f09a:	e7df      	b.n	801f05c <etharp_find_entry+0x10c>
 801f09c:	4664      	mov	r4, ip
 801f09e:	e7eb      	b.n	801f078 <etharp_find_entry+0x128>
    return (s16_t)ERR_MEM;
 801f0a0:	f04f 34ff 	mov.w	r4, #4294967295
 801f0a4:	e7a8      	b.n	801eff8 <etharp_find_entry+0xa8>
 801f0a6:	bf00      	nop
 801f0a8:	080416d4 	.word	0x080416d4
 801f0ac:	08041740 	.word	0x08041740
 801f0b0:	08028d24 	.word	0x08028d24
 801f0b4:	08041728 	.word	0x08041728
 801f0b8:	2001aa44 	.word	0x2001aa44

0801f0bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801f0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0c0:	b082      	sub	sp, #8
 801f0c2:	4688      	mov	r8, r1
 801f0c4:	4691      	mov	r9, r2
 801f0c6:	461f      	mov	r7, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f0c8:	4606      	mov	r6, r0
{
 801f0ca:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801f0ce:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f0d2:	2800      	cmp	r0, #0
 801f0d4:	d05a      	beq.n	801f18c <etharp_raw+0xd0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801f0d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f0da:	211c      	movs	r1, #28
 801f0dc:	200e      	movs	r0, #14
 801f0de:	f7f9 f947 	bl	8018370 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801f0e2:	4605      	mov	r5, r0
 801f0e4:	2800      	cmp	r0, #0
 801f0e6:	d059      	beq.n	801f19c <etharp_raw+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801f0e8:	8943      	ldrh	r3, [r0, #10]
 801f0ea:	2b1b      	cmp	r3, #27
 801f0ec:	d946      	bls.n	801f17c <etharp_raw+0xc0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801f0ee:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 801f0f0:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 801f0f2:	f7f7 fa7b 	bl	80165ec <lwip_htons>
 801f0f6:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801f0f8:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801f0fc:	2b06      	cmp	r3, #6
 801f0fe:	d006      	beq.n	801f10e <etharp_raw+0x52>
 801f100:	4b2a      	ldr	r3, [pc, #168]	; (801f1ac <etharp_raw+0xf0>)
 801f102:	f240 4269 	movw	r2, #1129	; 0x469
 801f106:	492a      	ldr	r1, [pc, #168]	; (801f1b0 <etharp_raw+0xf4>)
 801f108:	482a      	ldr	r0, [pc, #168]	; (801f1b4 <etharp_raw+0xf8>)
 801f10a:	f003 f9db 	bl	80224c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801f10e:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f110:	4642      	mov	r2, r8
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f112:	f04f 0e08 	mov.w	lr, #8
  hdr->protolen = sizeof(ip4_addr_t);
 801f116:	f04f 0c04 	mov.w	ip, #4
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801f11a:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f11c:	4630      	mov	r0, r6
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801f11e:	88b9      	ldrh	r1, [r7, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801f120:	2600      	movs	r6, #0
 801f122:	f04f 0801 	mov.w	r8, #1
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f126:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801f128:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801f12a:	f8da 1000 	ldr.w	r1, [sl]
 801f12e:	f8c4 1012 	str.w	r1, [r4, #18]
  hdr->hwlen = ETH_HWADDR_LEN;
 801f132:	2106      	movs	r1, #6
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801f134:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 801f138:	82e7      	strh	r7, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801f13a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f13c:	683f      	ldr	r7, [r7, #0]
 801f13e:	f8c4 700e 	str.w	r7, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801f142:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f144:	683f      	ldr	r7, [r7, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f146:	f884 e002 	strb.w	lr, [r4, #2]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801f14a:	61a7      	str	r7, [r4, #24]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f14c:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 801f150:	7121      	strb	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f152:	4629      	mov	r1, r5
  hdr->protolen = sizeof(ip4_addr_t);
 801f154:	f884 c005 	strb.w	ip, [r4, #5]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801f158:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f15a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801f15c:	f884 8001 	strb.w	r8, [r4, #1]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f160:	9700      	str	r7, [sp, #0]
 801f162:	f001 fd3d 	bl	8020be0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801f166:	4a14      	ldr	r2, [pc, #80]	; (801f1b8 <etharp_raw+0xfc>)
  /* free ARP query packet */
  pbuf_free(p);
 801f168:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 801f16a:	8b13      	ldrh	r3, [r2, #24]
 801f16c:	4443      	add	r3, r8
 801f16e:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 801f170:	f7f9 f890 	bl	8018294 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801f174:	4630      	mov	r0, r6
}
 801f176:	b002      	add	sp, #8
 801f178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801f17c:	4b0b      	ldr	r3, [pc, #44]	; (801f1ac <etharp_raw+0xf0>)
 801f17e:	f240 4262 	movw	r2, #1122	; 0x462
 801f182:	490e      	ldr	r1, [pc, #56]	; (801f1bc <etharp_raw+0x100>)
 801f184:	480b      	ldr	r0, [pc, #44]	; (801f1b4 <etharp_raw+0xf8>)
 801f186:	f003 f99d 	bl	80224c4 <iprintf>
 801f18a:	e7b0      	b.n	801f0ee <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f18c:	4b07      	ldr	r3, [pc, #28]	; (801f1ac <etharp_raw+0xf0>)
 801f18e:	f240 4257 	movw	r2, #1111	; 0x457
 801f192:	490b      	ldr	r1, [pc, #44]	; (801f1c0 <etharp_raw+0x104>)
 801f194:	4807      	ldr	r0, [pc, #28]	; (801f1b4 <etharp_raw+0xf8>)
 801f196:	f003 f995 	bl	80224c4 <iprintf>
 801f19a:	e79c      	b.n	801f0d6 <etharp_raw+0x1a>
    ETHARP_STATS_INC(etharp.memerr);
 801f19c:	4a06      	ldr	r2, [pc, #24]	; (801f1b8 <etharp_raw+0xfc>)
    return ERR_MEM;
 801f19e:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 801f1a2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801f1a4:	3301      	adds	r3, #1
 801f1a6:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 801f1a8:	e7e5      	b.n	801f176 <etharp_raw+0xba>
 801f1aa:	bf00      	nop
 801f1ac:	080416d4 	.word	0x080416d4
 801f1b0:	080417a0 	.word	0x080417a0
 801f1b4:	08028d24 	.word	0x08028d24
 801f1b8:	2002e08c 	.word	0x2002e08c
 801f1bc:	0804176c 	.word	0x0804176c
 801f1c0:	08028d14 	.word	0x08028d14

0801f1c4 <etharp_output_to_arp_index>:
{
 801f1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801f1c8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801f2c0 <etharp_output_to_arp_index+0xfc>
 801f1cc:	eb02 0542 	add.w	r5, r2, r2, lsl #1
{
 801f1d0:	b084      	sub	sp, #16
 801f1d2:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801f1d4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
{
 801f1d8:	4606      	mov	r6, r0
 801f1da:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801f1dc:	ea4f 0942 	mov.w	r9, r2, lsl #1
 801f1e0:	7d2b      	ldrb	r3, [r5, #20]
 801f1e2:	2b01      	cmp	r3, #1
 801f1e4:	d93b      	bls.n	801f25e <etharp_output_to_arp_index+0x9a>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801f1e6:	2b02      	cmp	r3, #2
 801f1e8:	d011      	beq.n	801f20e <etharp_output_to_arp_index+0x4a>
 801f1ea:	2218      	movs	r2, #24
 801f1ec:	f106 0a2e 	add.w	sl, r6, #46	; 0x2e
 801f1f0:	fb02 8404 	mla	r4, r2, r4, r8
 801f1f4:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801f1f6:	f44f 6500 	mov.w	r5, #2048	; 0x800
 801f1fa:	4623      	mov	r3, r4
 801f1fc:	4652      	mov	r2, sl
 801f1fe:	4639      	mov	r1, r7
 801f200:	4630      	mov	r0, r6
 801f202:	9500      	str	r5, [sp, #0]
 801f204:	f001 fcec 	bl	8020be0 <ethernet_output>
}
 801f208:	b004      	add	sp, #16
 801f20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801f20e:	44a1      	add	r9, r4
 801f210:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 801f214:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 801f218:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801f21c:	d828      	bhi.n	801f270 <etharp_output_to_arp_index+0xac>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801f21e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801f222:	d3e2      	bcc.n	801f1ea <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801f224:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f228:	f106 0a2e 	add.w	sl, r6, #46	; 0x2e
 801f22c:	2101      	movs	r1, #1
 801f22e:	4a1f      	ldr	r2, [pc, #124]	; (801f2ac <etharp_output_to_arp_index+0xe8>)
 801f230:	00e5      	lsls	r5, r4, #3
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f232:	1d30      	adds	r0, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f234:	9103      	str	r1, [sp, #12]
 801f236:	4653      	mov	r3, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801f238:	f105 040c 	add.w	r4, r5, #12
 801f23c:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f23e:	9201      	str	r2, [sp, #4]
 801f240:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801f242:	4444      	add	r4, r8
 801f244:	4445      	add	r5, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f246:	9000      	str	r0, [sp, #0]
 801f248:	4630      	mov	r0, r6
 801f24a:	4622      	mov	r2, r4
 801f24c:	9502      	str	r5, [sp, #8]
 801f24e:	f7ff ff35 	bl	801f0bc <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801f252:	2800      	cmp	r0, #0
 801f254:	d1cf      	bne.n	801f1f6 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f256:	2303      	movs	r3, #3
 801f258:	f889 3014 	strb.w	r3, [r9, #20]
 801f25c:	e7cb      	b.n	801f1f6 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801f25e:	4b14      	ldr	r3, [pc, #80]	; (801f2b0 <etharp_output_to_arp_index+0xec>)
 801f260:	f240 22ee 	movw	r2, #750	; 0x2ee
 801f264:	4913      	ldr	r1, [pc, #76]	; (801f2b4 <etharp_output_to_arp_index+0xf0>)
 801f266:	4814      	ldr	r0, [pc, #80]	; (801f2b8 <etharp_output_to_arp_index+0xf4>)
 801f268:	f003 f92c 	bl	80224c4 <iprintf>
 801f26c:	7d2b      	ldrb	r3, [r5, #20]
 801f26e:	e7ba      	b.n	801f1e6 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801f270:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f274:	f106 0a2e 	add.w	sl, r6, #46	; 0x2e
 801f278:	2001      	movs	r0, #1
 801f27a:	490c      	ldr	r1, [pc, #48]	; (801f2ac <etharp_output_to_arp_index+0xe8>)
 801f27c:	00e4      	lsls	r4, r4, #3
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f27e:	1d32      	adds	r2, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f280:	9003      	str	r0, [sp, #12]
 801f282:	4653      	mov	r3, sl
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801f284:	1d25      	adds	r5, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f286:	9101      	str	r1, [sp, #4]
 801f288:	9200      	str	r2, [sp, #0]
 801f28a:	4651      	mov	r1, sl
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801f28c:	4445      	add	r5, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f28e:	4a0b      	ldr	r2, [pc, #44]	; (801f2bc <etharp_output_to_arp_index+0xf8>)
 801f290:	4630      	mov	r0, r6
 801f292:	340c      	adds	r4, #12
 801f294:	9502      	str	r5, [sp, #8]
 801f296:	f7ff ff11 	bl	801f0bc <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801f29a:	b108      	cbz	r0, 801f2a0 <etharp_output_to_arp_index+0xdc>
 801f29c:	4444      	add	r4, r8
 801f29e:	e7aa      	b.n	801f1f6 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f2a0:	2303      	movs	r3, #3
 801f2a2:	4444      	add	r4, r8
 801f2a4:	f889 3014 	strb.w	r3, [r9, #20]
 801f2a8:	e7a5      	b.n	801f1f6 <etharp_output_to_arp_index+0x32>
 801f2aa:	bf00      	nop
 801f2ac:	08041c0c 	.word	0x08041c0c
 801f2b0:	080416d4 	.word	0x080416d4
 801f2b4:	080417e4 	.word	0x080417e4
 801f2b8:	08028d24 	.word	0x08028d24
 801f2bc:	08041c04 	.word	0x08041c04
 801f2c0:	2001aa44 	.word	0x2001aa44

0801f2c4 <etharp_tmr>:
{
 801f2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2c8:	4c21      	ldr	r4, [pc, #132]	; (801f350 <etharp_tmr+0x8c>)
 801f2ca:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f2cc:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f2ce:	f8df 8088 	ldr.w	r8, [pc, #136]	; 801f358 <etharp_tmr+0x94>
 801f2d2:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801f2d6:	4f1f      	ldr	r7, [pc, #124]	; (801f354 <etharp_tmr+0x90>)
 801f2d8:	e00c      	b.n	801f2f4 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801f2da:	2901      	cmp	r1, #1
 801f2dc:	d101      	bne.n	801f2e2 <etharp_tmr+0x1e>
 801f2de:	2b04      	cmp	r3, #4
 801f2e0:	d812      	bhi.n	801f308 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801f2e2:	2903      	cmp	r1, #3
 801f2e4:	d01e      	beq.n	801f324 <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801f2e6:	2904      	cmp	r1, #4
 801f2e8:	d01f      	beq.n	801f32a <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f2ea:	2901      	cmp	r1, #1
 801f2ec:	d020      	beq.n	801f330 <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f2ee:	3418      	adds	r4, #24
 801f2f0:	42ac      	cmp	r4, r5
 801f2f2:	d014      	beq.n	801f31e <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 801f2f4:	7c21      	ldrb	r1, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 801f2f6:	2900      	cmp	r1, #0
 801f2f8:	d0f9      	beq.n	801f2ee <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 801f2fa:	89e3      	ldrh	r3, [r4, #14]
 801f2fc:	3301      	adds	r3, #1
 801f2fe:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f300:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 801f304:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f306:	d3e8      	bcc.n	801f2da <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 801f308:	f854 0c04 	ldr.w	r0, [r4, #-4]
 801f30c:	b118      	cbz	r0, 801f316 <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 801f30e:	f7ff fdeb 	bl	801eee8 <free_etharp_q>
    arp_table[i].q = NULL;
 801f312:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f316:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f318:	3418      	adds	r4, #24
 801f31a:	42ac      	cmp	r4, r5
 801f31c:	d1ea      	bne.n	801f2f4 <etharp_tmr+0x30>
}
 801f31e:	b004      	add	sp, #16
 801f320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801f324:	2304      	movs	r3, #4
 801f326:	7423      	strb	r3, [r4, #16]
 801f328:	e7e1      	b.n	801f2ee <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801f32a:	2302      	movs	r3, #2
 801f32c:	7423      	strb	r3, [r4, #16]
 801f32e:	e7de      	b.n	801f2ee <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801f330:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f332:	463a      	mov	r2, r7
 801f334:	9103      	str	r1, [sp, #12]
 801f336:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f33a:	f100 0c04 	add.w	ip, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f33e:	4619      	mov	r1, r3
 801f340:	f8cd c000 	str.w	ip, [sp]
 801f344:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801f348:	f7ff feb8 	bl	801f0bc <etharp_raw>
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801f34c:	e7cf      	b.n	801f2ee <etharp_tmr+0x2a>
 801f34e:	bf00      	nop
 801f350:	2001aa48 	.word	0x2001aa48
 801f354:	08041c04 	.word	0x08041c04
 801f358:	08041c0c 	.word	0x08041c0c

0801f35c <etharp_cleanup_netif>:
{
 801f35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f35e:	4c0c      	ldr	r4, [pc, #48]	; (801f390 <etharp_cleanup_netif+0x34>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f360:	2700      	movs	r7, #0
{
 801f362:	4606      	mov	r6, r0
 801f364:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801f368:	e002      	b.n	801f370 <etharp_cleanup_netif+0x14>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f36a:	3418      	adds	r4, #24
 801f36c:	42ac      	cmp	r4, r5
 801f36e:	d00e      	beq.n	801f38e <etharp_cleanup_netif+0x32>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801f370:	7d23      	ldrb	r3, [r4, #20]
 801f372:	2b00      	cmp	r3, #0
 801f374:	d0f9      	beq.n	801f36a <etharp_cleanup_netif+0xe>
 801f376:	68a3      	ldr	r3, [r4, #8]
 801f378:	42b3      	cmp	r3, r6
 801f37a:	d1f6      	bne.n	801f36a <etharp_cleanup_netif+0xe>
  if (arp_table[i].q != NULL) {
 801f37c:	6820      	ldr	r0, [r4, #0]
 801f37e:	b110      	cbz	r0, 801f386 <etharp_cleanup_netif+0x2a>
    free_etharp_q(arp_table[i].q);
 801f380:	f7ff fdb2 	bl	801eee8 <free_etharp_q>
    arp_table[i].q = NULL;
 801f384:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f386:	7527      	strb	r7, [r4, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f388:	3418      	adds	r4, #24
 801f38a:	42ac      	cmp	r4, r5
 801f38c:	d1f0      	bne.n	801f370 <etharp_cleanup_netif+0x14>
}
 801f38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f390:	2001aa44 	.word	0x2001aa44

0801f394 <etharp_input>:
{
 801f394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f398:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801f39a:	2900      	cmp	r1, #0
 801f39c:	f000 809d 	beq.w	801f4da <etharp_input+0x146>
  hdr = (struct etharp_hdr *)p->payload;
 801f3a0:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801f3a2:	4604      	mov	r4, r0
 801f3a4:	8833      	ldrh	r3, [r6, #0]
 801f3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f3aa:	d102      	bne.n	801f3b2 <etharp_input+0x1e>
 801f3ac:	7933      	ldrb	r3, [r6, #4]
 801f3ae:	2b06      	cmp	r3, #6
 801f3b0:	d00c      	beq.n	801f3cc <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 801f3b2:	4b5d      	ldr	r3, [pc, #372]	; (801f528 <etharp_input+0x194>)
    pbuf_free(p);
 801f3b4:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 801f3b6:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801f3b8:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 801f3ba:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 801f3bc:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 801f3be:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801f3c0:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801f3c2:	f7f8 ff67 	bl	8018294 <pbuf_free>
}
 801f3c6:	b009      	add	sp, #36	; 0x24
 801f3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801f3cc:	7973      	ldrb	r3, [r6, #5]
 801f3ce:	2b04      	cmp	r3, #4
 801f3d0:	d1ef      	bne.n	801f3b2 <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801f3d2:	8873      	ldrh	r3, [r6, #2]
 801f3d4:	2b08      	cmp	r3, #8
 801f3d6:	d1ec      	bne.n	801f3b2 <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 801f3d8:	f8df b14c 	ldr.w	fp, [pc, #332]	; 801f528 <etharp_input+0x194>
 801f3dc:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f3de:	684a      	ldr	r2, [r1, #4]
  ETHARP_STATS_INC(etharp.recv);
 801f3e0:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 801f3e4:	3301      	adds	r3, #1
 801f3e6:	f8ab 301a 	strh.w	r3, [fp, #26]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801f3ea:	f8d6 000e 	ldr.w	r0, [r6, #14]
 801f3ee:	69b3      	ldr	r3, [r6, #24]
 801f3f0:	9007      	str	r0, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f3f2:	2a00      	cmp	r2, #0
 801f3f4:	d079      	beq.n	801f4ea <etharp_input+0x156>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801f3f6:	1ad3      	subs	r3, r2, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801f3f8:	f106 0908 	add.w	r9, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801f3fc:	fab3 f383 	clz	r3, r3
 801f400:	095b      	lsrs	r3, r3, #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801f402:	f1c3 0802 	rsb	r8, r3, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801f406:	9305      	str	r3, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801f408:	fa5f f888 	uxtb.w	r8, r8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801f40c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801f410:	2b06      	cmp	r3, #6
 801f412:	d007      	beq.n	801f424 <etharp_input+0x90>
 801f414:	4b45      	ldr	r3, [pc, #276]	; (801f52c <etharp_input+0x198>)
 801f416:	f240 12a9 	movw	r2, #425	; 0x1a9
 801f41a:	4945      	ldr	r1, [pc, #276]	; (801f530 <etharp_input+0x19c>)
 801f41c:	4845      	ldr	r0, [pc, #276]	; (801f534 <etharp_input+0x1a0>)
 801f41e:	f003 f851 	bl	80224c4 <iprintf>
 801f422:	9807      	ldr	r0, [sp, #28]
  if (ip4_addr_isany(ipaddr) ||
 801f424:	2800      	cmp	r0, #0
 801f426:	d048      	beq.n	801f4ba <etharp_input+0x126>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801f428:	4629      	mov	r1, r5
 801f42a:	f000 fe25 	bl	8020078 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801f42e:	4607      	mov	r7, r0
 801f430:	2800      	cmp	r0, #0
 801f432:	d142      	bne.n	801f4ba <etharp_input+0x126>
      ip4_addr_ismulticast(ipaddr)) {
 801f434:	9b07      	ldr	r3, [sp, #28]
 801f436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801f43a:	2be0      	cmp	r3, #224	; 0xe0
 801f43c:	d03d      	beq.n	801f4ba <etharp_input+0x126>
  i = etharp_find_entry(ipaddr, flags, netif);
 801f43e:	4641      	mov	r1, r8
 801f440:	462a      	mov	r2, r5
 801f442:	a807      	add	r0, sp, #28
 801f444:	f7ff fd84 	bl	801ef50 <etharp_find_entry>
  if (i < 0) {
 801f448:	2800      	cmp	r0, #0
 801f44a:	db36      	blt.n	801f4ba <etharp_input+0x126>
    arp_table[i].state = ETHARP_STATE_STABLE;
 801f44c:	4a3a      	ldr	r2, [pc, #232]	; (801f538 <etharp_input+0x1a4>)
 801f44e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801f452:	f04f 0c02 	mov.w	ip, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801f456:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 801f45a:	eb02 08c1 	add.w	r8, r2, r1, lsl #3
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801f45e:	230c      	movs	r3, #12
    arp_table[i].state = ETHARP_STATE_STABLE;
 801f460:	f888 c014 	strb.w	ip, [r8, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801f464:	fb10 330e 	smlabb	r3, r0, lr, r3
  arp_table[i].netif = netif;
 801f468:	f8c8 5008 	str.w	r5, [r8, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801f46c:	f8d9 0000 	ldr.w	r0, [r9]
 801f470:	eb02 0c03 	add.w	ip, r2, r3
 801f474:	50d0      	str	r0, [r2, r3]
 801f476:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801f47a:	f8ac 3004 	strh.w	r3, [ip, #4]
  while (arp_table[i].q != NULL) {
 801f47e:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 801f482:	f8a8 7012 	strh.w	r7, [r8, #18]
  while (arp_table[i].q != NULL) {
 801f486:	b1c1      	cbz	r1, 801f4ba <etharp_input+0x126>
 801f488:	f105 0a2e 	add.w	sl, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 801f48c:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 801f48e:	200b      	movs	r0, #11
    p = q->p;
 801f490:	684f      	ldr	r7, [r1, #4]
    arp_table[i].q = q->next;
 801f492:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_ARP_QUEUE, q);
 801f496:	f7f8 fc2d 	bl	8017cf4 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801f49a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801f49e:	4639      	mov	r1, r7
 801f4a0:	464b      	mov	r3, r9
 801f4a2:	4652      	mov	r2, sl
 801f4a4:	9000      	str	r0, [sp, #0]
 801f4a6:	4628      	mov	r0, r5
 801f4a8:	f001 fb9a 	bl	8020be0 <ethernet_output>
    pbuf_free(p);
 801f4ac:	4638      	mov	r0, r7
 801f4ae:	f7f8 fef1 	bl	8018294 <pbuf_free>
  while (arp_table[i].q != NULL) {
 801f4b2:	f8d8 1000 	ldr.w	r1, [r8]
 801f4b6:	2900      	cmp	r1, #0
 801f4b8:	d1e8      	bne.n	801f48c <etharp_input+0xf8>
  switch (hdr->opcode) {
 801f4ba:	88f3      	ldrh	r3, [r6, #6]
 801f4bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f4c0:	d019      	beq.n	801f4f6 <etharp_input+0x162>
 801f4c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f4c6:	d029      	beq.n	801f51c <etharp_input+0x188>
      ETHARP_STATS_INC(etharp.err);
 801f4c8:	f8bb 302c 	ldrh.w	r3, [fp, #44]	; 0x2c
 801f4cc:	3301      	adds	r3, #1
 801f4ce:	f8ab 302c 	strh.w	r3, [fp, #44]	; 0x2c
  pbuf_free(p);
 801f4d2:	4620      	mov	r0, r4
 801f4d4:	f7f8 fede 	bl	8018294 <pbuf_free>
 801f4d8:	e775      	b.n	801f3c6 <etharp_input+0x32>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801f4da:	4b14      	ldr	r3, [pc, #80]	; (801f52c <etharp_input+0x198>)
 801f4dc:	f240 228a 	movw	r2, #650	; 0x28a
 801f4e0:	4916      	ldr	r1, [pc, #88]	; (801f53c <etharp_input+0x1a8>)
 801f4e2:	4814      	ldr	r0, [pc, #80]	; (801f534 <etharp_input+0x1a0>)
 801f4e4:	f002 ffee 	bl	80224c4 <iprintf>
 801f4e8:	e76d      	b.n	801f3c6 <etharp_input+0x32>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801f4ea:	f106 0908 	add.w	r9, r6, #8
 801f4ee:	f04f 0802 	mov.w	r8, #2
    for_us = 0;
 801f4f2:	9205      	str	r2, [sp, #20]
 801f4f4:	e78a      	b.n	801f40c <etharp_input+0x78>
      if (for_us) {
 801f4f6:	9b05      	ldr	r3, [sp, #20]
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d0ea      	beq.n	801f4d2 <etharp_input+0x13e>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801f4fc:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 801f500:	2002      	movs	r0, #2
 801f502:	af07      	add	r7, sp, #28
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801f504:	1d2e      	adds	r6, r5, #4
        etharp_raw(netif,
 801f506:	9003      	str	r0, [sp, #12]
 801f508:	464a      	mov	r2, r9
 801f50a:	4619      	mov	r1, r3
 801f50c:	4628      	mov	r0, r5
 801f50e:	f8cd 9004 	str.w	r9, [sp, #4]
 801f512:	9702      	str	r7, [sp, #8]
 801f514:	9600      	str	r6, [sp, #0]
 801f516:	f7ff fdd1 	bl	801f0bc <etharp_raw>
 801f51a:	e7da      	b.n	801f4d2 <etharp_input+0x13e>
      dhcp_arp_reply(netif, &sipaddr);
 801f51c:	4628      	mov	r0, r5
 801f51e:	a907      	add	r1, sp, #28
 801f520:	f7ff fa18 	bl	801e954 <dhcp_arp_reply>
      break;
 801f524:	e7d5      	b.n	801f4d2 <etharp_input+0x13e>
 801f526:	bf00      	nop
 801f528:	2002e08c 	.word	0x2002e08c
 801f52c:	080416d4 	.word	0x080416d4
 801f530:	08041834 	.word	0x08041834
 801f534:	08028d24 	.word	0x08028d24
 801f538:	2001aa44 	.word	0x2001aa44
 801f53c:	08028d14 	.word	0x08028d14

0801f540 <etharp_query>:
{
 801f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f544:	460c      	mov	r4, r1
 801f546:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f548:	4601      	mov	r1, r0
{
 801f54a:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f54c:	6820      	ldr	r0, [r4, #0]
{
 801f54e:	ed2d 8b02 	vpush	{d8}
 801f552:	b085      	sub	sp, #20
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f554:	f000 fd90 	bl	8020078 <ip4_addr_isbroadcast_u32>
 801f558:	2800      	cmp	r0, #0
 801f55a:	f040 80df 	bne.w	801f71c <etharp_query+0x1dc>
      ip4_addr_ismulticast(ipaddr) ||
 801f55e:	6823      	ldr	r3, [r4, #0]
 801f560:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 801f564:	2ae0      	cmp	r2, #224	; 0xe0
 801f566:	f000 80d9 	beq.w	801f71c <etharp_query+0x1dc>
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	f000 80d6 	beq.w	801f71c <etharp_query+0x1dc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801f570:	463a      	mov	r2, r7
 801f572:	2101      	movs	r1, #1
 801f574:	4620      	mov	r0, r4
 801f576:	f7ff fceb 	bl	801ef50 <etharp_find_entry>
  if (i_err < 0) {
 801f57a:	1e06      	subs	r6, r0, #0
 801f57c:	db59      	blt.n	801f632 <etharp_query+0xf2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801f57e:	2e7e      	cmp	r6, #126	; 0x7e
 801f580:	dc4f      	bgt.n	801f622 <etharp_query+0xe2>
  i = (netif_addr_idx_t)i_err;
 801f582:	b2f6      	uxtb	r6, r6
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801f584:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801f760 <etharp_query+0x220>
 801f588:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 801f58c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801f590:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 801f594:	7d13      	ldrb	r3, [r2, #20]
 801f596:	b19b      	cbz	r3, 801f5c0 <etharp_query+0x80>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801f598:	f107 0a2e 	add.w	sl, r7, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 801f59c:	2d00      	cmp	r5, #0
 801f59e:	f000 80af 	beq.w	801f700 <etharp_query+0x1c0>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801f5a2:	eb09 0306 	add.w	r3, r9, r6
  err_t result = ERR_MEM;
 801f5a6:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801f5aa:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801f5ae:	7d1b      	ldrb	r3, [r3, #20]
 801f5b0:	2b01      	cmp	r3, #1
 801f5b2:	d822      	bhi.n	801f5fa <etharp_query+0xba>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f5b4:	d048      	beq.n	801f648 <etharp_query+0x108>
}
 801f5b6:	b005      	add	sp, #20
 801f5b8:	ecbd 8b02 	vpop	{d8}
 801f5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 801f5c0:	f04f 0c01 	mov.w	ip, #1
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801f5c4:	f107 0a2e 	add.w	sl, r7, #46	; 0x2e
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f5c8:	495e      	ldr	r1, [pc, #376]	; (801f744 <etharp_query+0x204>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f5ca:	1d38      	adds	r0, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f5cc:	9402      	str	r4, [sp, #8]
 801f5ce:	4653      	mov	r3, sl
 801f5d0:	9101      	str	r1, [sp, #4]
 801f5d2:	4651      	mov	r1, sl
 801f5d4:	9000      	str	r0, [sp, #0]
 801f5d6:	4638      	mov	r0, r7
 801f5d8:	f8cd c00c 	str.w	ip, [sp, #12]
    arp_table[i].netif = netif;
 801f5dc:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801f5de:	f882 c014 	strb.w	ip, [r2, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f5e2:	4a59      	ldr	r2, [pc, #356]	; (801f748 <etharp_query+0x208>)
 801f5e4:	f7ff fd6a 	bl	801f0bc <etharp_raw>
    if (q == NULL) {
 801f5e8:	2d00      	cmp	r5, #0
 801f5ea:	d0e4      	beq.n	801f5b6 <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801f5ec:	eb09 0306 	add.w	r3, r9, r6
 801f5f0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801f5f4:	7d1b      	ldrb	r3, [r3, #20]
 801f5f6:	2b01      	cmp	r3, #1
 801f5f8:	d9dc      	bls.n	801f5b4 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801f5fa:	2318      	movs	r3, #24
 801f5fc:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    ETHARP_SET_ADDRHINT(netif, i);
 801f600:	4c52      	ldr	r4, [pc, #328]	; (801f74c <etharp_query+0x20c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801f602:	4652      	mov	r2, sl
 801f604:	fb03 8306 	mla	r3, r3, r6, r8
 801f608:	4629      	mov	r1, r5
 801f60a:	f8cd c000 	str.w	ip, [sp]
 801f60e:	4638      	mov	r0, r7
 801f610:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 801f612:	7026      	strb	r6, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801f614:	f001 fae4 	bl	8020be0 <ethernet_output>
}
 801f618:	b005      	add	sp, #20
 801f61a:	ecbd 8b02 	vpop	{d8}
 801f61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801f622:	4b4b      	ldr	r3, [pc, #300]	; (801f750 <etharp_query+0x210>)
 801f624:	f240 32c1 	movw	r2, #961	; 0x3c1
 801f628:	494a      	ldr	r1, [pc, #296]	; (801f754 <etharp_query+0x214>)
 801f62a:	484b      	ldr	r0, [pc, #300]	; (801f758 <etharp_query+0x218>)
 801f62c:	f002 ff4a 	bl	80224c4 <iprintf>
 801f630:	e7a7      	b.n	801f582 <etharp_query+0x42>
    if (q) {
 801f632:	b11d      	cbz	r5, 801f63c <etharp_query+0xfc>
      ETHARP_STATS_INC(etharp.memerr);
 801f634:	4a49      	ldr	r2, [pc, #292]	; (801f75c <etharp_query+0x21c>)
 801f636:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801f638:	3301      	adds	r3, #1
 801f63a:	8493      	strh	r3, [r2, #36]	; 0x24
    return (err_t)i_err;
 801f63c:	b270      	sxtb	r0, r6
}
 801f63e:	b005      	add	sp, #20
 801f640:	ecbd 8b02 	vpop	{d8}
 801f644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f648:	462c      	mov	r4, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801f64a:	f8df b104 	ldr.w	fp, [pc, #260]	; 801f750 <etharp_query+0x210>
 801f64e:	f8df a114 	ldr.w	sl, [pc, #276]	; 801f764 <etharp_query+0x224>
 801f652:	ed9f 8a41 	vldr	s16, [pc, #260]	; 801f758 <etharp_query+0x218>
 801f656:	e005      	b.n	801f664 <etharp_query+0x124>
      if (PBUF_NEEDS_COPY(p)) {
 801f658:	7b23      	ldrb	r3, [r4, #12]
 801f65a:	065a      	lsls	r2, r3, #25
 801f65c:	d414      	bmi.n	801f688 <etharp_query+0x148>
      p = p->next;
 801f65e:	6824      	ldr	r4, [r4, #0]
    while (p) {
 801f660:	2c00      	cmp	r4, #0
 801f662:	d038      	beq.n	801f6d6 <etharp_query+0x196>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801f664:	8962      	ldrh	r2, [r4, #10]
 801f666:	8923      	ldrh	r3, [r4, #8]
 801f668:	429a      	cmp	r2, r3
 801f66a:	d1f5      	bne.n	801f658 <etharp_query+0x118>
 801f66c:	6827      	ldr	r7, [r4, #0]
 801f66e:	465b      	mov	r3, fp
 801f670:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801f674:	4651      	mov	r1, sl
 801f676:	ee18 0a10 	vmov	r0, s16
 801f67a:	b117      	cbz	r7, 801f682 <etharp_query+0x142>
 801f67c:	f002 ff22 	bl	80224c4 <iprintf>
 801f680:	e7ea      	b.n	801f658 <etharp_query+0x118>
      if (PBUF_NEEDS_COPY(p)) {
 801f682:	7b23      	ldrb	r3, [r4, #12]
 801f684:	065b      	lsls	r3, r3, #25
 801f686:	d526      	bpl.n	801f6d6 <etharp_query+0x196>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801f688:	462a      	mov	r2, r5
 801f68a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801f68e:	200e      	movs	r0, #14
 801f690:	f7f9 f982 	bl	8018998 <pbuf_clone>
    if (p != NULL) {
 801f694:	4605      	mov	r5, r0
 801f696:	2800      	cmp	r0, #0
 801f698:	d046      	beq.n	801f728 <etharp_query+0x1e8>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 801f69a:	f240 4206 	movw	r2, #1030	; 0x406
 801f69e:	492c      	ldr	r1, [pc, #176]	; (801f750 <etharp_query+0x210>)
 801f6a0:	200b      	movs	r0, #11
 801f6a2:	f7f8 fb03 	bl	8017cac <memp_malloc_fn>
      if (new_entry != NULL) {
 801f6a6:	2800      	cmp	r0, #0
 801f6a8:	d045      	beq.n	801f736 <etharp_query+0x1f6>
        if (arp_table[i].q != NULL) {
 801f6aa:	eb09 0306 	add.w	r3, r9, r6
        new_entry->next = 0;
 801f6ae:	2200      	movs	r2, #0
        new_entry->p = p;
 801f6b0:	6045      	str	r5, [r0, #4]
        if (arp_table[i].q != NULL) {
 801f6b2:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 801f6b4:	6002      	str	r2, [r0, #0]
        if (arp_table[i].q != NULL) {
 801f6b6:	f858 5003 	ldr.w	r5, [r8, r3]
 801f6ba:	b1ed      	cbz	r5, 801f6f8 <etharp_query+0x1b8>
          while (r->next != NULL) {
 801f6bc:	682c      	ldr	r4, [r5, #0]
 801f6be:	b384      	cbz	r4, 801f722 <etharp_query+0x1e2>
          qlen++;
 801f6c0:	2301      	movs	r3, #1
            qlen++;
 801f6c2:	4622      	mov	r2, r4
          while (r->next != NULL) {
 801f6c4:	6824      	ldr	r4, [r4, #0]
            qlen++;
 801f6c6:	3301      	adds	r3, #1
          while (r->next != NULL) {
 801f6c8:	2c00      	cmp	r4, #0
 801f6ca:	d1fa      	bne.n	801f6c2 <etharp_query+0x182>
        if (qlen >= ARP_QUEUE_LEN) {
 801f6cc:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 801f6ce:	6010      	str	r0, [r2, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 801f6d0:	d805      	bhi.n	801f6de <etharp_query+0x19e>
        result = ERR_OK;
 801f6d2:	4620      	mov	r0, r4
 801f6d4:	e76f      	b.n	801f5b6 <etharp_query+0x76>
      pbuf_ref(p);
 801f6d6:	4628      	mov	r0, r5
 801f6d8:	f7f8 ff4a 	bl	8018570 <pbuf_ref>
    if (p != NULL) {
 801f6dc:	e7dd      	b.n	801f69a <etharp_query+0x15a>
          pbuf_free(old->p);
 801f6de:	e9d5 3000 	ldrd	r3, r0, [r5]
          arp_table[i].q = arp_table[i].q->next;
 801f6e2:	444e      	add	r6, r9
 801f6e4:	f848 3036 	str.w	r3, [r8, r6, lsl #3]
          pbuf_free(old->p);
 801f6e8:	f7f8 fdd4 	bl	8018294 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 801f6ec:	200b      	movs	r0, #11
 801f6ee:	4629      	mov	r1, r5
 801f6f0:	f7f8 fb00 	bl	8017cf4 <memp_free>
        result = ERR_OK;
 801f6f4:	4620      	mov	r0, r4
 801f6f6:	e75e      	b.n	801f5b6 <etharp_query+0x76>
          arp_table[i].q = new_entry;
 801f6f8:	f848 0003 	str.w	r0, [r8, r3]
        result = ERR_OK;
 801f6fc:	4628      	mov	r0, r5
 801f6fe:	e75a      	b.n	801f5b6 <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f700:	1d3a      	adds	r2, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f702:	2101      	movs	r1, #1
 801f704:	4b0f      	ldr	r3, [pc, #60]	; (801f744 <etharp_query+0x204>)
 801f706:	4638      	mov	r0, r7
 801f708:	9200      	str	r2, [sp, #0]
 801f70a:	9301      	str	r3, [sp, #4]
 801f70c:	4653      	mov	r3, sl
 801f70e:	4a0e      	ldr	r2, [pc, #56]	; (801f748 <etharp_query+0x208>)
 801f710:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801f714:	4651      	mov	r1, sl
 801f716:	f7ff fcd1 	bl	801f0bc <etharp_raw>
    if (q == NULL) {
 801f71a:	e74c      	b.n	801f5b6 <etharp_query+0x76>
    return ERR_ARG;
 801f71c:	f06f 000f 	mvn.w	r0, #15
 801f720:	e749      	b.n	801f5b6 <etharp_query+0x76>
          r->next = new_entry;
 801f722:	6028      	str	r0, [r5, #0]
        result = ERR_OK;
 801f724:	4620      	mov	r0, r4
 801f726:	e746      	b.n	801f5b6 <etharp_query+0x76>
      ETHARP_STATS_INC(etharp.memerr);
 801f728:	4a0c      	ldr	r2, [pc, #48]	; (801f75c <etharp_query+0x21c>)
      result = ERR_MEM;
 801f72a:	f04f 30ff 	mov.w	r0, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 801f72e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801f730:	3301      	adds	r3, #1
 801f732:	8493      	strh	r3, [r2, #36]	; 0x24
      result = ERR_MEM;
 801f734:	e73f      	b.n	801f5b6 <etharp_query+0x76>
        pbuf_free(p);
 801f736:	4628      	mov	r0, r5
 801f738:	f7f8 fdac 	bl	8018294 <pbuf_free>
        result = ERR_MEM;
 801f73c:	f04f 30ff 	mov.w	r0, #4294967295
 801f740:	e739      	b.n	801f5b6 <etharp_query+0x76>
 801f742:	bf00      	nop
 801f744:	08041c0c 	.word	0x08041c0c
 801f748:	08041c04 	.word	0x08041c04
 801f74c:	2001ad44 	.word	0x2001ad44
 801f750:	080416d4 	.word	0x080416d4
 801f754:	08041858 	.word	0x08041858
 801f758:	08028d24 	.word	0x08028d24
 801f75c:	2002e08c 	.word	0x2002e08c
 801f760:	2001aa44 	.word	0x2001aa44
 801f764:	08041868 	.word	0x08041868

0801f768 <etharp_output>:
{
 801f768:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801f76c:	4689      	mov	r9, r1
 801f76e:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f770:	4606      	mov	r6, r0
{
 801f772:	4690      	mov	r8, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f774:	2800      	cmp	r0, #0
 801f776:	f000 808c 	beq.w	801f892 <etharp_output+0x12a>
  LWIP_ASSERT("q != NULL", q != NULL);
 801f77a:	f1b9 0f00 	cmp.w	r9, #0
 801f77e:	d076      	beq.n	801f86e <etharp_output+0x106>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801f780:	f1b8 0f00 	cmp.w	r8, #0
 801f784:	d07d      	beq.n	801f882 <etharp_output+0x11a>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801f786:	4631      	mov	r1, r6
 801f788:	f8d8 0000 	ldr.w	r0, [r8]
 801f78c:	f000 fc74 	bl	8020078 <ip4_addr_isbroadcast_u32>
 801f790:	2800      	cmp	r0, #0
 801f792:	d162      	bne.n	801f85a <etharp_output+0xf2>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801f794:	f8d8 3000 	ldr.w	r3, [r8]
 801f798:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801f79c:	2ae0      	cmp	r2, #224	; 0xe0
 801f79e:	d03b      	beq.n	801f818 <etharp_output+0xb0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f7a0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801f7a4:	405a      	eors	r2, r3
 801f7a6:	420a      	tst	r2, r1
 801f7a8:	d00a      	beq.n	801f7c0 <etharp_output+0x58>
        !ip4_addr_islinklocal(ipaddr)) {
 801f7aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f7ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801f7b0:	4293      	cmp	r3, r2
 801f7b2:	d005      	beq.n	801f7c0 <etharp_output+0x58>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801f7b4:	68f3      	ldr	r3, [r6, #12]
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	f000 8085 	beq.w	801f8c6 <etharp_output+0x15e>
            dst_addr = netif_ip4_gw(netif);
 801f7bc:	f106 080c 	add.w	r8, r6, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801f7c0:	f8df c128 	ldr.w	ip, [pc, #296]	; 801f8ec <etharp_output+0x184>
 801f7c4:	4b41      	ldr	r3, [pc, #260]	; (801f8cc <etharp_output+0x164>)
 801f7c6:	f89c 2000 	ldrb.w	r2, [ip]
 801f7ca:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801f7ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801f7d2:	7d19      	ldrb	r1, [r3, #20]
 801f7d4:	2901      	cmp	r1, #1
 801f7d6:	d902      	bls.n	801f7de <etharp_output+0x76>
 801f7d8:	6899      	ldr	r1, [r3, #8]
 801f7da:	42b1      	cmp	r1, r6
 801f7dc:	d065      	beq.n	801f8aa <etharp_output+0x142>
 801f7de:	4c3b      	ldr	r4, [pc, #236]	; (801f8cc <etharp_output+0x164>)
{
 801f7e0:	2300      	movs	r3, #0
 801f7e2:	e003      	b.n	801f7ec <etharp_output+0x84>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801f7e4:	2b20      	cmp	r3, #32
 801f7e6:	f104 0418 	add.w	r4, r4, #24
 801f7ea:	d038      	beq.n	801f85e <etharp_output+0xf6>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801f7ec:	7d25      	ldrb	r5, [r4, #20]
 801f7ee:	b2da      	uxtb	r2, r3
 801f7f0:	3301      	adds	r3, #1
 801f7f2:	2d01      	cmp	r5, #1
 801f7f4:	d9f6      	bls.n	801f7e4 <etharp_output+0x7c>
 801f7f6:	68a0      	ldr	r0, [r4, #8]
 801f7f8:	42b0      	cmp	r0, r6
 801f7fa:	d1f3      	bne.n	801f7e4 <etharp_output+0x7c>
          (arp_table[i].netif == netif) &&
 801f7fc:	f8d8 1000 	ldr.w	r1, [r8]
 801f800:	6860      	ldr	r0, [r4, #4]
 801f802:	4281      	cmp	r1, r0
 801f804:	d1ee      	bne.n	801f7e4 <etharp_output+0x7c>
        return etharp_output_to_arp_index(netif, q, i);
 801f806:	4649      	mov	r1, r9
 801f808:	4630      	mov	r0, r6
        ETHARP_SET_ADDRHINT(netif, i);
 801f80a:	f88c 2000 	strb.w	r2, [ip]
        return etharp_output_to_arp_index(netif, q, i);
 801f80e:	f7ff fcd9 	bl	801f1c4 <etharp_output_to_arp_index>
}
 801f812:	b004      	add	sp, #16
 801f814:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801f818:	f898 3001 	ldrb.w	r3, [r8, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801f81c:	2401      	movs	r4, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801f81e:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801f820:	f898 1002 	ldrb.w	r1, [r8, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801f824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801f828:	f898 2003 	ldrb.w	r2, [r8, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801f82c:	f8ad 4008 	strh.w	r4, [sp, #8]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801f830:	f88d 300b 	strb.w	r3, [sp, #11]
    dest = &mcastaddr;
 801f834:	ab02      	add	r3, sp, #8
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801f836:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801f83a:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801f83e:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801f842:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801f846:	4649      	mov	r1, r9
 801f848:	f106 022e 	add.w	r2, r6, #46	; 0x2e
 801f84c:	9000      	str	r0, [sp, #0]
 801f84e:	4630      	mov	r0, r6
 801f850:	f001 f9c6 	bl	8020be0 <ethernet_output>
}
 801f854:	b004      	add	sp, #16
 801f856:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 801f85a:	4b1d      	ldr	r3, [pc, #116]	; (801f8d0 <etharp_output+0x168>)
 801f85c:	e7f1      	b.n	801f842 <etharp_output+0xda>
    return etharp_query(netif, dst_addr, q);
 801f85e:	464a      	mov	r2, r9
 801f860:	4641      	mov	r1, r8
 801f862:	4630      	mov	r0, r6
 801f864:	f7ff fe6c 	bl	801f540 <etharp_query>
}
 801f868:	b004      	add	sp, #16
 801f86a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801f86e:	4b19      	ldr	r3, [pc, #100]	; (801f8d4 <etharp_output+0x16c>)
 801f870:	f240 321f 	movw	r2, #799	; 0x31f
 801f874:	4918      	ldr	r1, [pc, #96]	; (801f8d8 <etharp_output+0x170>)
 801f876:	4819      	ldr	r0, [pc, #100]	; (801f8dc <etharp_output+0x174>)
 801f878:	f002 fe24 	bl	80224c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801f87c:	f1b8 0f00 	cmp.w	r8, #0
 801f880:	d181      	bne.n	801f786 <etharp_output+0x1e>
 801f882:	4b14      	ldr	r3, [pc, #80]	; (801f8d4 <etharp_output+0x16c>)
 801f884:	f44f 7248 	mov.w	r2, #800	; 0x320
 801f888:	4915      	ldr	r1, [pc, #84]	; (801f8e0 <etharp_output+0x178>)
 801f88a:	4814      	ldr	r0, [pc, #80]	; (801f8dc <etharp_output+0x174>)
 801f88c:	f002 fe1a 	bl	80224c4 <iprintf>
 801f890:	e779      	b.n	801f786 <etharp_output+0x1e>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f892:	4b10      	ldr	r3, [pc, #64]	; (801f8d4 <etharp_output+0x16c>)
 801f894:	f240 321e 	movw	r2, #798	; 0x31e
 801f898:	4912      	ldr	r1, [pc, #72]	; (801f8e4 <etharp_output+0x17c>)
 801f89a:	4810      	ldr	r0, [pc, #64]	; (801f8dc <etharp_output+0x174>)
 801f89c:	f002 fe12 	bl	80224c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801f8a0:	f1b9 0f00 	cmp.w	r9, #0
 801f8a4:	f47f af6c 	bne.w	801f780 <etharp_output+0x18>
 801f8a8:	e7e1      	b.n	801f86e <etharp_output+0x106>
            (arp_table[etharp_cached_entry].netif == netif) &&
 801f8aa:	685b      	ldr	r3, [r3, #4]
 801f8ac:	f8d8 1000 	ldr.w	r1, [r8]
 801f8b0:	4299      	cmp	r1, r3
 801f8b2:	d194      	bne.n	801f7de <etharp_output+0x76>
          ETHARP_STATS_INC(etharp.cachehit);
 801f8b4:	4c0c      	ldr	r4, [pc, #48]	; (801f8e8 <etharp_output+0x180>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801f8b6:	4649      	mov	r1, r9
 801f8b8:	4630      	mov	r0, r6
          ETHARP_STATS_INC(etharp.cachehit);
 801f8ba:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801f8bc:	3301      	adds	r3, #1
 801f8be:	85e3      	strh	r3, [r4, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801f8c0:	f7ff fc80 	bl	801f1c4 <etharp_output_to_arp_index>
 801f8c4:	e7c6      	b.n	801f854 <etharp_output+0xec>
            return ERR_RTE;
 801f8c6:	f06f 0003 	mvn.w	r0, #3
 801f8ca:	e7c3      	b.n	801f854 <etharp_output+0xec>
 801f8cc:	2001aa44 	.word	0x2001aa44
 801f8d0:	08041c04 	.word	0x08041c04
 801f8d4:	080416d4 	.word	0x080416d4
 801f8d8:	0804170c 	.word	0x0804170c
 801f8dc:	08028d24 	.word	0x08028d24
 801f8e0:	08041814 	.word	0x08041814
 801f8e4:	08028d14 	.word	0x08028d14
 801f8e8:	2002e08c 	.word	0x2002e08c
 801f8ec:	2001ad44 	.word	0x2001ad44

0801f8f0 <etharp_request>:
{
 801f8f0:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f8f2:	2301      	movs	r3, #1
{
 801f8f4:	b084      	sub	sp, #16
 801f8f6:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f8f8:	4c06      	ldr	r4, [pc, #24]	; (801f914 <etharp_request+0x24>)
 801f8fa:	e9cd 1302 	strd	r1, r3, [sp, #8]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f8fe:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f900:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 801f904:	e9cd 2400 	strd	r2, r4, [sp]
 801f908:	4619      	mov	r1, r3
 801f90a:	4a03      	ldr	r2, [pc, #12]	; (801f918 <etharp_request+0x28>)
 801f90c:	f7ff fbd6 	bl	801f0bc <etharp_raw>
}
 801f910:	b004      	add	sp, #16
 801f912:	bd10      	pop	{r4, pc}
 801f914:	08041c0c 	.word	0x08041c0c
 801f918:	08041c04 	.word	0x08041c04

0801f91c <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 801f91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f920:	4604      	mov	r4, r0
 801f922:	b086      	sub	sp, #24
 801f924:	460f      	mov	r7, r1
 801f926:	4690      	mov	r8, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801f928:	2124      	movs	r1, #36	; 0x24
 801f92a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f92e:	2022      	movs	r0, #34	; 0x22
 801f930:	f7f8 fd1e 	bl	8018370 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801f934:	2800      	cmp	r0, #0
 801f936:	d040      	beq.n	801f9ba <icmp_send_response.isra.0+0x9e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f938:	8943      	ldrh	r3, [r0, #10]
 801f93a:	4605      	mov	r5, r0
 801f93c:	2b23      	cmp	r3, #35	; 0x23
 801f93e:	d93f      	bls.n	801f9c0 <icmp_send_response.isra.0+0xa4>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801f940:	6823      	ldr	r3, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 801f942:	2600      	movs	r6, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801f944:	686c      	ldr	r4, [r5, #4]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801f946:	a805      	add	r0, sp, #20
  icmphdr->type = type;
 801f948:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 801f94a:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->id = 0;
 801f94e:	7126      	strb	r6, [r4, #4]
 801f950:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 801f952:	71a6      	strb	r6, [r4, #6]
 801f954:	71e6      	strb	r6, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801f956:	681f      	ldr	r7, [r3, #0]
 801f958:	6859      	ldr	r1, [r3, #4]
 801f95a:	689a      	ldr	r2, [r3, #8]
 801f95c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801f960:	60a7      	str	r7, [r4, #8]
 801f962:	60e1      	str	r1, [r4, #12]
 801f964:	6122      	str	r2, [r4, #16]
 801f966:	f8c4 c014 	str.w	ip, [r4, #20]
 801f96a:	691f      	ldr	r7, [r3, #16]
 801f96c:	6959      	ldr	r1, [r3, #20]
 801f96e:	699a      	ldr	r2, [r3, #24]
 801f970:	61a7      	str	r7, [r4, #24]
 801f972:	61e1      	str	r1, [r4, #28]
 801f974:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 801f976:	68db      	ldr	r3, [r3, #12]
 801f978:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 801f97a:	f000 f951 	bl	801fc20 <ip4_route>
#endif
  if (netif != NULL) {
 801f97e:	4607      	mov	r7, r0
 801f980:	b1c0      	cbz	r0, 801f9b4 <icmp_send_response.isra.0+0x98>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801f982:	4620      	mov	r0, r4
 801f984:	8969      	ldrh	r1, [r5, #10]
    icmphdr->chksum = 0;
 801f986:	70a6      	strb	r6, [r4, #2]
 801f988:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801f98a:	f7f7 fbe3 	bl	8017154 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801f98e:	f8df c04c 	ldr.w	ip, [pc, #76]	; 801f9dc <icmp_send_response.isra.0+0xc0>
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801f992:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f994:	f04f 0e01 	mov.w	lr, #1
    ICMP_STATS_INC(icmp.xmit);
 801f998:	f8bc 4060 	ldrh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f99c:	aa05      	add	r2, sp, #20
 801f99e:	9702      	str	r7, [sp, #8]
 801f9a0:	4631      	mov	r1, r6
    ICMP_STATS_INC(icmp.xmit);
 801f9a2:	4474      	add	r4, lr
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f9a4:	23ff      	movs	r3, #255	; 0xff
 801f9a6:	4628      	mov	r0, r5
 801f9a8:	e9cd 6e00 	strd	r6, lr, [sp]
    ICMP_STATS_INC(icmp.xmit);
 801f9ac:	f8ac 4060 	strh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f9b0:	f000 fb50 	bl	8020054 <ip4_output_if>
  }
  pbuf_free(q);
 801f9b4:	4628      	mov	r0, r5
 801f9b6:	f7f8 fc6d 	bl	8018294 <pbuf_free>
}
 801f9ba:	b006      	add	sp, #24
 801f9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f9c0:	4b03      	ldr	r3, [pc, #12]	; (801f9d0 <icmp_send_response.isra.0+0xb4>)
 801f9c2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801f9c6:	4903      	ldr	r1, [pc, #12]	; (801f9d4 <icmp_send_response.isra.0+0xb8>)
 801f9c8:	4803      	ldr	r0, [pc, #12]	; (801f9d8 <icmp_send_response.isra.0+0xbc>)
 801f9ca:	f002 fd7b 	bl	80224c4 <iprintf>
 801f9ce:	e7b7      	b.n	801f940 <icmp_send_response.isra.0+0x24>
 801f9d0:	08041884 	.word	0x08041884
 801f9d4:	080418bc 	.word	0x080418bc
 801f9d8:	08028d24 	.word	0x08028d24
 801f9dc:	2002e08c 	.word	0x2002e08c

0801f9e0 <icmp_input>:
{
 801f9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ICMP_STATS_INC(icmp.recv);
 801f9e4:	4e76      	ldr	r6, [pc, #472]	; (801fbc0 <icmp_input+0x1e0>)
{
 801f9e6:	b087      	sub	sp, #28
  iphdr_in = ip4_current_header();
 801f9e8:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 801fbd8 <icmp_input+0x1f8>
{
 801f9ec:	4605      	mov	r5, r0
  ICMP_STATS_INC(icmp.recv);
 801f9ee:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
  iphdr_in = ip4_current_header();
 801f9f2:	f8d8 9008 	ldr.w	r9, [r8, #8]
  ICMP_STATS_INC(icmp.recv);
 801f9f6:	3301      	adds	r3, #1
 801f9f8:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
  hlen = IPH_HL_BYTES(iphdr_in);
 801f9fc:	f899 4000 	ldrb.w	r4, [r9]
 801fa00:	f004 040f 	and.w	r4, r4, #15
 801fa04:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 801fa06:	2c13      	cmp	r4, #19
 801fa08:	d91c      	bls.n	801fa44 <icmp_input+0x64>
  if (p->len < sizeof(u16_t) * 2) {
 801fa0a:	8943      	ldrh	r3, [r0, #10]
 801fa0c:	2b03      	cmp	r3, #3
 801fa0e:	d919      	bls.n	801fa44 <icmp_input+0x64>
  type = *((u8_t *)p->payload);
 801fa10:	6843      	ldr	r3, [r0, #4]
 801fa12:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 801fa14:	2b00      	cmp	r3, #0
 801fa16:	f000 8092 	beq.w	801fb3e <icmp_input+0x15e>
 801fa1a:	2b08      	cmp	r3, #8
 801fa1c:	f040 80a9 	bne.w	801fb72 <icmp_input+0x192>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fa20:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801fa24:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801fa28:	2be0      	cmp	r3, #224	; 0xe0
 801fa2a:	f000 8099 	beq.w	801fb60 <icmp_input+0x180>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801fa2e:	460f      	mov	r7, r1
 801fa30:	f8d8 1000 	ldr.w	r1, [r8]
 801fa34:	f000 fb20 	bl	8020078 <ip4_addr_isbroadcast_u32>
 801fa38:	2800      	cmp	r0, #0
 801fa3a:	f040 8091 	bne.w	801fb60 <icmp_input+0x180>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801fa3e:	892b      	ldrh	r3, [r5, #8]
 801fa40:	2b07      	cmp	r3, #7
 801fa42:	d80a      	bhi.n	801fa5a <icmp_input+0x7a>
  pbuf_free(p);
 801fa44:	4628      	mov	r0, r5
 801fa46:	f7f8 fc25 	bl	8018294 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801fa4a:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
 801fa4e:	3301      	adds	r3, #1
 801fa50:	f8a6 306a 	strh.w	r3, [r6, #106]	; 0x6a
}
 801fa54:	b007      	add	sp, #28
 801fa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (inet_chksum_pbuf(p) != 0) {
 801fa5a:	4628      	mov	r0, r5
 801fa5c:	f7f7 fb80 	bl	8017160 <inet_chksum_pbuf>
 801fa60:	2800      	cmp	r0, #0
 801fa62:	f040 8096 	bne.w	801fb92 <icmp_input+0x1b2>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801fa66:	f104 010e 	add.w	r1, r4, #14
 801fa6a:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 801fa6c:	fa1f fa84 	uxth.w	sl, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801fa70:	9105      	str	r1, [sp, #20]
 801fa72:	f7f8 fbcf 	bl	8018214 <pbuf_add_header>
 801fa76:	9905      	ldr	r1, [sp, #20]
 801fa78:	2800      	cmp	r0, #0
 801fa7a:	d066      	beq.n	801fb4a <icmp_input+0x16a>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801fa7c:	892b      	ldrh	r3, [r5, #8]
 801fa7e:	eb03 010a 	add.w	r1, r3, sl
 801fa82:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 801fa84:	428b      	cmp	r3, r1
 801fa86:	d86b      	bhi.n	801fb60 <icmp_input+0x180>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801fa88:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fa8c:	200e      	movs	r0, #14
 801fa8e:	f7f8 fc6f 	bl	8018370 <pbuf_alloc>
        if (r == NULL) {
 801fa92:	4683      	mov	fp, r0
 801fa94:	2800      	cmp	r0, #0
 801fa96:	d063      	beq.n	801fb60 <icmp_input+0x180>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801fa98:	8942      	ldrh	r2, [r0, #10]
 801fa9a:	f104 0308 	add.w	r3, r4, #8
 801fa9e:	429a      	cmp	r2, r3
 801faa0:	f0c0 8081 	bcc.w	801fba6 <icmp_input+0x1c6>
        MEMCPY(r->payload, iphdr_in, hlen);
 801faa4:	4649      	mov	r1, r9
 801faa6:	4622      	mov	r2, r4
 801faa8:	6840      	ldr	r0, [r0, #4]
 801faaa:	f001 fd71 	bl	8021590 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 801faae:	4621      	mov	r1, r4
 801fab0:	4658      	mov	r0, fp
 801fab2:	f7f8 fbb3 	bl	801821c <pbuf_remove_header>
 801fab6:	2800      	cmp	r0, #0
 801fab8:	d178      	bne.n	801fbac <icmp_input+0x1cc>
        if (pbuf_copy(r, p) != ERR_OK) {
 801faba:	4629      	mov	r1, r5
 801fabc:	4658      	mov	r0, fp
 801fabe:	f7f8 fdc5 	bl	801864c <pbuf_copy>
 801fac2:	2800      	cmp	r0, #0
 801fac4:	d16e      	bne.n	801fba4 <icmp_input+0x1c4>
        pbuf_free(p);
 801fac6:	4628      	mov	r0, r5
 801fac8:	465d      	mov	r5, fp
 801faca:	f7f8 fbe3 	bl	8018294 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 801face:	4621      	mov	r1, r4
 801fad0:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 801fad2:	f8d5 9004 	ldr.w	r9, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 801fad6:	f7f8 fb9d 	bl	8018214 <pbuf_add_header>
 801fada:	bb80      	cbnz	r0, 801fb3e <icmp_input+0x15e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801fadc:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801fade:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801fae2:	f04f 0bff 	mov.w	fp, #255	; 0xff
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801fae6:	e9d8 3104 	ldrd	r3, r1, [r8, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 801faea:	f04f 0800 	mov.w	r8, #0
        ip4_addr_copy(iphdr->src, *src);
 801faee:	60e1      	str	r1, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801faf0:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801faf2:	f8b9 3002 	ldrh.w	r3, [r9, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801faf6:	f889 0000 	strb.w	r0, [r9]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801fafa:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801fafc:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801fafe:	bf8c      	ite	hi
 801fb00:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801fb02:	3308      	addls	r3, #8
 801fb04:	b299      	uxth	r1, r3
 801fb06:	f8a9 1002 	strh.w	r1, [r9, #2]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801fb0a:	4651      	mov	r1, sl
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801fb0c:	f884 b008 	strb.w	fp, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801fb10:	f884 800a 	strb.w	r8, [r4, #10]
 801fb14:	f884 800b 	strb.w	r8, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801fb18:	f7f7 fb1c 	bl	8017154 <inet_chksum>
        ICMP_STATS_INC(icmp.xmit);
 801fb1c:	f8b6 2060 	ldrh.w	r2, [r6, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801fb20:	2101      	movs	r1, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801fb22:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801fb24:	465b      	mov	r3, fp
 801fb26:	4628      	mov	r0, r5
        ICMP_STATS_INC(icmp.xmit);
 801fb28:	1854      	adds	r4, r2, r1
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801fb2a:	f8cd 8000 	str.w	r8, [sp]
 801fb2e:	4642      	mov	r2, r8
        ICMP_STATS_INC(icmp.xmit);
 801fb30:	f8a6 4060 	strh.w	r4, [r6, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801fb34:	e9cd 1701 	strd	r1, r7, [sp, #4]
 801fb38:	4922      	ldr	r1, [pc, #136]	; (801fbc4 <icmp_input+0x1e4>)
 801fb3a:	f000 fa8b 	bl	8020054 <ip4_output_if>
  pbuf_free(p);
 801fb3e:	4628      	mov	r0, r5
}
 801fb40:	b007      	add	sp, #28
 801fb42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801fb46:	f7f8 bba5 	b.w	8018294 <pbuf_free>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801fb4a:	4628      	mov	r0, r5
 801fb4c:	f7f8 fb66 	bl	801821c <pbuf_remove_header>
 801fb50:	2800      	cmp	r0, #0
 801fb52:	d0bc      	beq.n	801face <icmp_input+0xee>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801fb54:	4b1c      	ldr	r3, [pc, #112]	; (801fbc8 <icmp_input+0x1e8>)
 801fb56:	22c7      	movs	r2, #199	; 0xc7
 801fb58:	491c      	ldr	r1, [pc, #112]	; (801fbcc <icmp_input+0x1ec>)
 801fb5a:	481d      	ldr	r0, [pc, #116]	; (801fbd0 <icmp_input+0x1f0>)
 801fb5c:	f002 fcb2 	bl	80224c4 <iprintf>
  pbuf_free(p);
 801fb60:	4628      	mov	r0, r5
 801fb62:	f7f8 fb97 	bl	8018294 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801fb66:	f8b6 3074 	ldrh.w	r3, [r6, #116]	; 0x74
 801fb6a:	3301      	adds	r3, #1
 801fb6c:	f8a6 3074 	strh.w	r3, [r6, #116]	; 0x74
  return;
 801fb70:	e770      	b.n	801fa54 <icmp_input+0x74>
      ICMP_STATS_INC(icmp.proterr);
 801fb72:	f8b6 2070 	ldrh.w	r2, [r6, #112]	; 0x70
  pbuf_free(p);
 801fb76:	4628      	mov	r0, r5
      ICMP_STATS_INC(icmp.drop);
 801fb78:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
      ICMP_STATS_INC(icmp.proterr);
 801fb7c:	3201      	adds	r2, #1
      ICMP_STATS_INC(icmp.drop);
 801fb7e:	3301      	adds	r3, #1
      ICMP_STATS_INC(icmp.proterr);
 801fb80:	f8a6 2070 	strh.w	r2, [r6, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 801fb84:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
}
 801fb88:	b007      	add	sp, #28
 801fb8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801fb8e:	f7f8 bb81 	b.w	8018294 <pbuf_free>
          pbuf_free(p);
 801fb92:	4628      	mov	r0, r5
 801fb94:	f7f8 fb7e 	bl	8018294 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 801fb98:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
 801fb9c:	3301      	adds	r3, #1
 801fb9e:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
          return;
 801fba2:	e757      	b.n	801fa54 <icmp_input+0x74>
          pbuf_free(r);
 801fba4:	4658      	mov	r0, fp
 801fba6:	f7f8 fb75 	bl	8018294 <pbuf_free>
          goto icmperr;
 801fbaa:	e7d9      	b.n	801fb60 <icmp_input+0x180>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801fbac:	4b06      	ldr	r3, [pc, #24]	; (801fbc8 <icmp_input+0x1e8>)
 801fbae:	22b6      	movs	r2, #182	; 0xb6
 801fbb0:	4908      	ldr	r1, [pc, #32]	; (801fbd4 <icmp_input+0x1f4>)
 801fbb2:	4807      	ldr	r0, [pc, #28]	; (801fbd0 <icmp_input+0x1f0>)
 801fbb4:	f002 fc86 	bl	80224c4 <iprintf>
          pbuf_free(r);
 801fbb8:	4658      	mov	r0, fp
 801fbba:	f7f8 fb6b 	bl	8018294 <pbuf_free>
          goto icmperr;
 801fbbe:	e7cf      	b.n	801fb60 <icmp_input+0x180>
 801fbc0:	2002e08c 	.word	0x2002e08c
 801fbc4:	2001f178 	.word	0x2001f178
 801fbc8:	08041884 	.word	0x08041884
 801fbcc:	08041920 	.word	0x08041920
 801fbd0:	08028d24 	.word	0x08028d24
 801fbd4:	080418e8 	.word	0x080418e8
 801fbd8:	2001f164 	.word	0x2001f164

0801fbdc <icmp_dest_unreach>:
{
 801fbdc:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 801fbde:	3004      	adds	r0, #4
 801fbe0:	2103      	movs	r1, #3
 801fbe2:	f7ff be9b 	b.w	801f91c <icmp_send_response.isra.0>
 801fbe6:	bf00      	nop

0801fbe8 <icmp_time_exceeded>:
{
 801fbe8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 801fbea:	3004      	adds	r0, #4
 801fbec:	210b      	movs	r1, #11
 801fbee:	f7ff be95 	b.w	801f91c <icmp_send_response.isra.0>
 801fbf2:	bf00      	nop

0801fbf4 <ip4_input_accept.part.0>:
}
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
 801fbf4:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801fbf6:	6843      	ldr	r3, [r0, #4]
 801fbf8:	b15b      	cbz	r3, 801fc12 <ip4_input_accept.part.0+0x1e>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801fbfa:	4a08      	ldr	r2, [pc, #32]	; (801fc1c <ip4_input_accept.part.0+0x28>)
 801fbfc:	6952      	ldr	r2, [r2, #20]
 801fbfe:	4293      	cmp	r3, r2
 801fc00:	d009      	beq.n	801fc16 <ip4_input_accept.part.0+0x22>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801fc02:	4601      	mov	r1, r0
 801fc04:	4610      	mov	r0, r2
 801fc06:	f000 fa37 	bl	8020078 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801fc0a:	3800      	subs	r0, #0
 801fc0c:	bf18      	it	ne
 801fc0e:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 801fc10:	bd08      	pop	{r3, pc}
  return 0;
 801fc12:	4618      	mov	r0, r3
}
 801fc14:	bd08      	pop	{r3, pc}
      return 1;
 801fc16:	2001      	movs	r0, #1
}
 801fc18:	bd08      	pop	{r3, pc}
 801fc1a:	bf00      	nop
 801fc1c:	2001f164 	.word	0x2001f164

0801fc20 <ip4_route>:
  NETIF_FOREACH(netif) {
 801fc20:	4b18      	ldr	r3, [pc, #96]	; (801fc84 <ip4_route+0x64>)
{
 801fc22:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 801fc24:	681b      	ldr	r3, [r3, #0]
 801fc26:	b1ab      	cbz	r3, 801fc54 <ip4_route+0x34>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801fc28:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801fc2c:	07d4      	lsls	r4, r2, #31
 801fc2e:	d5f9      	bpl.n	801fc24 <ip4_route+0x4>
 801fc30:	0751      	lsls	r1, r2, #29
 801fc32:	d5f7      	bpl.n	801fc24 <ip4_route+0x4>
 801fc34:	6859      	ldr	r1, [r3, #4]
 801fc36:	2900      	cmp	r1, #0
 801fc38:	d0f4      	beq.n	801fc24 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801fc3a:	6804      	ldr	r4, [r0, #0]
 801fc3c:	689d      	ldr	r5, [r3, #8]
 801fc3e:	4061      	eors	r1, r4
 801fc40:	4229      	tst	r1, r5
 801fc42:	d004      	beq.n	801fc4e <ip4_route+0x2e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801fc44:	0792      	lsls	r2, r2, #30
 801fc46:	d4ed      	bmi.n	801fc24 <ip4_route+0x4>
 801fc48:	68da      	ldr	r2, [r3, #12]
 801fc4a:	4294      	cmp	r4, r2
 801fc4c:	d1ea      	bne.n	801fc24 <ip4_route+0x4>
}
 801fc4e:	4618      	mov	r0, r3
 801fc50:	bc30      	pop	{r4, r5}
 801fc52:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801fc54:	4b0c      	ldr	r3, [pc, #48]	; (801fc88 <ip4_route+0x68>)
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	b153      	cbz	r3, 801fc70 <ip4_route+0x50>
 801fc5a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801fc5e:	f002 0205 	and.w	r2, r2, #5
 801fc62:	2a05      	cmp	r2, #5
 801fc64:	d104      	bne.n	801fc70 <ip4_route+0x50>
 801fc66:	685a      	ldr	r2, [r3, #4]
 801fc68:	b112      	cbz	r2, 801fc70 <ip4_route+0x50>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801fc6a:	7802      	ldrb	r2, [r0, #0]
 801fc6c:	2a7f      	cmp	r2, #127	; 0x7f
 801fc6e:	d1ee      	bne.n	801fc4e <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 801fc70:	4906      	ldr	r1, [pc, #24]	; (801fc8c <ip4_route+0x6c>)
    return NULL;
 801fc72:	2300      	movs	r3, #0
    IP_STATS_INC(ip.rterr);
 801fc74:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
}
 801fc78:	4618      	mov	r0, r3
    IP_STATS_INC(ip.rterr);
 801fc7a:	3201      	adds	r2, #1
}
 801fc7c:	bc30      	pop	{r4, r5}
    IP_STATS_INC(ip.rterr);
 801fc7e:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
}
 801fc82:	4770      	bx	lr
 801fc84:	2002e080 	.word	0x2002e080
 801fc88:	2002e084 	.word	0x2002e084
 801fc8c:	2002e08c 	.word	0x2002e08c

0801fc90 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801fc90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801fc94:	4d97      	ldr	r5, [pc, #604]	; (801fef4 <ip4_input+0x264>)
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801fc96:	f8d0 8004 	ldr.w	r8, [r0, #4]
  IP_STATS_INC(ip.recv);
 801fc9a:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
 801fc9e:	3301      	adds	r3, #1
 801fca0:	f8a5 304a 	strh.w	r3, [r5, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 801fca4:	f898 3000 	ldrb.w	r3, [r8]
 801fca8:	091a      	lsrs	r2, r3, #4
 801fcaa:	2a04      	cmp	r2, #4
 801fcac:	d00e      	beq.n	801fccc <ip4_input+0x3c>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801fcae:	f7f8 faf1 	bl	8018294 <pbuf_free>
    IP_STATS_INC(ip.err);
 801fcb2:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801fcb6:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    IP_STATS_INC(ip.err);
 801fcba:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801fcbc:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 801fcbe:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801fcc2:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801fcc6:	2000      	movs	r0, #0
 801fcc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801fccc:	f003 030f 	and.w	r3, r3, #15
 801fcd0:	4604      	mov	r4, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801fcd2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801fcd6:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801fcd8:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801fcdc:	f7f6 fc86 	bl	80165ec <lwip_htons>
  if (iphdr_len < p->tot_len) {
 801fce0:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801fce2:	464e      	mov	r6, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801fce4:	4682      	mov	sl, r0
  if (iphdr_len < p->tot_len) {
 801fce6:	4283      	cmp	r3, r0
 801fce8:	d834      	bhi.n	801fd54 <ip4_input+0xc4>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801fcea:	8963      	ldrh	r3, [r4, #10]
 801fcec:	42b3      	cmp	r3, r6
 801fcee:	d321      	bcc.n	801fd34 <ip4_input+0xa4>
 801fcf0:	8923      	ldrh	r3, [r4, #8]
 801fcf2:	4553      	cmp	r3, sl
 801fcf4:	d31e      	bcc.n	801fd34 <ip4_input+0xa4>
 801fcf6:	2e13      	cmp	r6, #19
 801fcf8:	d91c      	bls.n	801fd34 <ip4_input+0xa4>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801fcfa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801fcfe:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 801fefc <ip4_input+0x26c>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fd02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801fd06:	f8ca 3014 	str.w	r3, [sl, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fd0a:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801fd0c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fd10:	f8ca 0010 	str.w	r0, [sl, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fd14:	f000 80b4 	beq.w	801fe80 <ip4_input+0x1f0>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801fd18:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801fd1c:	07d2      	lsls	r2, r2, #31
 801fd1e:	d523      	bpl.n	801fd68 <ip4_input+0xd8>
 801fd20:	4638      	mov	r0, r7
 801fd22:	f7ff ff67 	bl	801fbf4 <ip4_input_accept.part.0>
    if (ip4_input_accept(inp)) {
 801fd26:	b1e8      	cbz	r0, 801fd64 <ip4_input+0xd4>
 801fd28:	f8da 0010 	ldr.w	r0, [sl, #16]
 801fd2c:	463e      	mov	r6, r7
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801fd2e:	2800      	cmp	r0, #0
 801fd30:	d048      	beq.n	801fdc4 <ip4_input+0x134>
 801fd32:	e039      	b.n	801fda8 <ip4_input+0x118>
    pbuf_free(p);
 801fd34:	4620      	mov	r0, r4
 801fd36:	f7f8 faad 	bl	8018294 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801fd3a:	f8b5 2052 	ldrh.w	r2, [r5, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801fd3e:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
}
 801fd42:	2000      	movs	r0, #0
    IP_STATS_INC(ip.lenerr);
 801fd44:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801fd46:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 801fd48:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801fd4c:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
}
 801fd50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_realloc(p, iphdr_len);
 801fd54:	4601      	mov	r1, r0
 801fd56:	4620      	mov	r0, r4
 801fd58:	f7f8 fba8 	bl	80184ac <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801fd5c:	8963      	ldrh	r3, [r4, #10]
 801fd5e:	42b3      	cmp	r3, r6
 801fd60:	d2c6      	bcs.n	801fcf0 <ip4_input+0x60>
 801fd62:	e7e7      	b.n	801fd34 <ip4_input+0xa4>
 801fd64:	f8da 3014 	ldr.w	r3, [sl, #20]
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801fd68:	b2db      	uxtb	r3, r3
 801fd6a:	2b7f      	cmp	r3, #127	; 0x7f
 801fd6c:	d011      	beq.n	801fd92 <ip4_input+0x102>
        NETIF_FOREACH(netif) {
 801fd6e:	4b62      	ldr	r3, [pc, #392]	; (801fef8 <ip4_input+0x268>)
 801fd70:	681e      	ldr	r6, [r3, #0]
 801fd72:	b176      	cbz	r6, 801fd92 <ip4_input+0x102>
          if (netif == inp) {
 801fd74:	42b7      	cmp	r7, r6
 801fd76:	4630      	mov	r0, r6
 801fd78:	d008      	beq.n	801fd8c <ip4_input+0xfc>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801fd7a:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 801fd7e:	07db      	lsls	r3, r3, #31
 801fd80:	d504      	bpl.n	801fd8c <ip4_input+0xfc>
 801fd82:	f7ff ff37 	bl	801fbf4 <ip4_input_accept.part.0>
          if (ip4_input_accept(netif)) {
 801fd86:	2800      	cmp	r0, #0
 801fd88:	f040 8097 	bne.w	801feba <ip4_input+0x22a>
        NETIF_FOREACH(netif) {
 801fd8c:	6836      	ldr	r6, [r6, #0]
 801fd8e:	2e00      	cmp	r6, #0
 801fd90:	d1f0      	bne.n	801fd74 <ip4_input+0xe4>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801fd92:	f898 3009 	ldrb.w	r3, [r8, #9]
 801fd96:	2b11      	cmp	r3, #17
 801fd98:	f000 8086 	beq.w	801fea8 <ip4_input+0x218>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801fd9c:	f8da 0010 	ldr.w	r0, [sl, #16]
 801fda0:	2800      	cmp	r0, #0
 801fda2:	f000 809e 	beq.w	801fee2 <ip4_input+0x252>
 801fda6:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801fda8:	4639      	mov	r1, r7
 801fdaa:	f000 f965 	bl	8020078 <ip4_addr_isbroadcast_u32>
 801fdae:	2800      	cmp	r0, #0
 801fdb0:	d171      	bne.n	801fe96 <ip4_input+0x206>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801fdb2:	f8da 3010 	ldr.w	r3, [sl, #16]
 801fdb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801fdba:	2be0      	cmp	r3, #224	; 0xe0
 801fdbc:	d06b      	beq.n	801fe96 <ip4_input+0x206>
  if (netif == NULL) {
 801fdbe:	2e00      	cmp	r6, #0
 801fdc0:	f000 808f 	beq.w	801fee2 <ip4_input+0x252>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801fdc4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801fdc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801fdcc:	b143      	cbz	r3, 801fde0 <ip4_input+0x150>
    p = ip4_reass(p);
 801fdce:	4620      	mov	r0, r4
 801fdd0:	f000 fb56 	bl	8020480 <ip4_reass>
    if (p == NULL) {
 801fdd4:	4604      	mov	r4, r0
 801fdd6:	2800      	cmp	r0, #0
 801fdd8:	f43f af75 	beq.w	801fcc6 <ip4_input+0x36>
    iphdr = (const struct ip_hdr *)p->payload;
 801fddc:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 801fde0:	f8ca 6000 	str.w	r6, [sl]
  raw_status = raw_input(p, inp);
 801fde4:	4639      	mov	r1, r7
  ip_data.current_input_netif = inp;
 801fde6:	f8ca 7004 	str.w	r7, [sl, #4]
  raw_status = raw_input(p, inp);
 801fdea:	4620      	mov	r0, r4
  ip_data.current_ip4_header = iphdr;
 801fdec:	f8ca 8008 	str.w	r8, [sl, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801fdf0:	f898 3000 	ldrb.w	r3, [r8]
 801fdf4:	f003 030f 	and.w	r3, r3, #15
 801fdf8:	009b      	lsls	r3, r3, #2
 801fdfa:	f8aa 300c 	strh.w	r3, [sl, #12]
  raw_status = raw_input(p, inp);
 801fdfe:	f7f8 fe07 	bl	8018a10 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 801fe02:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 801fe04:	4683      	mov	fp, r0
  if (raw_status != RAW_INPUT_EATEN)
 801fe06:	d02f      	beq.n	801fe68 <ip4_input+0x1d8>
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801fe08:	4649      	mov	r1, r9
 801fe0a:	4620      	mov	r0, r4
 801fe0c:	f7f8 fa06 	bl	801821c <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 801fe10:	f898 3009 	ldrb.w	r3, [r8, #9]
 801fe14:	2b06      	cmp	r3, #6
 801fe16:	d05f      	beq.n	801fed8 <ip4_input+0x248>
 801fe18:	2b11      	cmp	r3, #17
 801fe1a:	d058      	beq.n	801fece <ip4_input+0x23e>
 801fe1c:	2b01      	cmp	r3, #1
 801fe1e:	d051      	beq.n	801fec4 <ip4_input+0x234>
        if (raw_status == RAW_INPUT_DELIVERED) {
 801fe20:	f1bb 0f02 	cmp.w	fp, #2
 801fe24:	d01d      	beq.n	801fe62 <ip4_input+0x1d2>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801fe26:	4631      	mov	r1, r6
 801fe28:	f8da 0014 	ldr.w	r0, [sl, #20]
 801fe2c:	f000 f924 	bl	8020078 <ip4_addr_isbroadcast_u32>
 801fe30:	b968      	cbnz	r0, 801fe4e <ip4_input+0x1be>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fe32:	f8da 3014 	ldr.w	r3, [sl, #20]
 801fe36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801fe3a:	2be0      	cmp	r3, #224	; 0xe0
 801fe3c:	d007      	beq.n	801fe4e <ip4_input+0x1be>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801fe3e:	4649      	mov	r1, r9
 801fe40:	4620      	mov	r0, r4
 801fe42:	f7f8 fa1f 	bl	8018284 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801fe46:	2102      	movs	r1, #2
 801fe48:	4620      	mov	r0, r4
 801fe4a:	f7ff fec7 	bl	801fbdc <icmp_dest_unreach>
          IP_STATS_INC(ip.proterr);
 801fe4e:	f8b5 2058 	ldrh.w	r2, [r5, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801fe52:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
          IP_STATS_INC(ip.proterr);
 801fe56:	3201      	adds	r2, #1
          IP_STATS_INC(ip.drop);
 801fe58:	3301      	adds	r3, #1
          IP_STATS_INC(ip.proterr);
 801fe5a:	f8a5 2058 	strh.w	r2, [r5, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801fe5e:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
        pbuf_free(p);
 801fe62:	4620      	mov	r0, r4
 801fe64:	f7f8 fa16 	bl	8018294 <pbuf_free>
  ip_data.current_netif = NULL;
 801fe68:	2300      	movs	r3, #0
}
 801fe6a:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 801fe6c:	e9ca 3300 	strd	r3, r3, [sl]
  ip_data.current_ip4_header = NULL;
 801fe70:	f8ca 3008 	str.w	r3, [sl, #8]
  ip_data.current_ip_header_tot_len = 0;
 801fe74:	f8aa 300c 	strh.w	r3, [sl, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 801fe78:	e9ca 3304 	strd	r3, r3, [sl, #16]
}
 801fe7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801fe80:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801fe84:	07d9      	lsls	r1, r3, #31
 801fe86:	d584      	bpl.n	801fd92 <ip4_input+0x102>
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	2b00      	cmp	r3, #0
 801fe8c:	d081      	beq.n	801fd92 <ip4_input+0x102>
 801fe8e:	463e      	mov	r6, r7
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801fe90:	2800      	cmp	r0, #0
 801fe92:	d097      	beq.n	801fdc4 <ip4_input+0x134>
 801fe94:	e788      	b.n	801fda8 <ip4_input+0x118>
      pbuf_free(p);
 801fe96:	4620      	mov	r0, r4
 801fe98:	f7f8 f9fc 	bl	8018294 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801fe9c:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
 801fea0:	3301      	adds	r3, #1
 801fea2:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
      return ERR_OK;
 801fea6:	e70e      	b.n	801fcc6 <ip4_input+0x36>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801fea8:	eb08 0309 	add.w	r3, r8, r9
 801feac:	885b      	ldrh	r3, [r3, #2]
 801feae:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801feb2:	f47f af73 	bne.w	801fd9c <ip4_input+0x10c>
 801feb6:	463e      	mov	r6, r7
 801feb8:	e781      	b.n	801fdbe <ip4_input+0x12e>
 801feba:	f8da 0010 	ldr.w	r0, [sl, #16]
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801febe:	2800      	cmp	r0, #0
 801fec0:	d080      	beq.n	801fdc4 <ip4_input+0x134>
 801fec2:	e771      	b.n	801fda8 <ip4_input+0x118>
        icmp_input(p, inp);
 801fec4:	4639      	mov	r1, r7
 801fec6:	4620      	mov	r0, r4
 801fec8:	f7ff fd8a 	bl	801f9e0 <icmp_input>
        break;
 801fecc:	e7cc      	b.n	801fe68 <ip4_input+0x1d8>
        udp_input(p, inp);
 801fece:	4639      	mov	r1, r7
 801fed0:	4620      	mov	r0, r4
 801fed2:	f7fd f953 	bl	801d17c <udp_input>
        break;
 801fed6:	e7c7      	b.n	801fe68 <ip4_input+0x1d8>
        tcp_input(p, inp);
 801fed8:	4639      	mov	r1, r7
 801feda:	4620      	mov	r0, r4
 801fedc:	f7fa fee8 	bl	801acb0 <tcp_input>
        break;
 801fee0:	e7c2      	b.n	801fe68 <ip4_input+0x1d8>
      IP_STATS_INC(ip.drop);
 801fee2:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    pbuf_free(p);
 801fee6:	4620      	mov	r0, r4
      IP_STATS_INC(ip.drop);
 801fee8:	3301      	adds	r3, #1
 801feea:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
    pbuf_free(p);
 801feee:	f7f8 f9d1 	bl	8018294 <pbuf_free>
    return ERR_OK;
 801fef2:	e6e8      	b.n	801fcc6 <ip4_input+0x36>
 801fef4:	2002e08c 	.word	0x2002e08c
 801fef8:	2002e080 	.word	0x2002e080
 801fefc:	2001f164 	.word	0x2001f164

0801ff00 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ff00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff04:	461d      	mov	r5, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ff06:	7b83      	ldrb	r3, [r0, #14]
{
 801ff08:	b083      	sub	sp, #12
 801ff0a:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ff0c:	2b01      	cmp	r3, #1
{
 801ff0e:	4689      	mov	r9, r1
 801ff10:	4617      	mov	r7, r2
 801ff12:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 801ff16:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 801ff1a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ff1e:	d15f      	bne.n	801ffe0 <ip4_output_if_src+0xe0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ff20:	2f00      	cmp	r7, #0
 801ff22:	d066      	beq.n	801fff2 <ip4_output_if_src+0xf2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ff24:	2114      	movs	r1, #20
 801ff26:	4620      	mov	r0, r4
 801ff28:	f7f8 f974 	bl	8018214 <pbuf_add_header>
 801ff2c:	2800      	cmp	r0, #0
 801ff2e:	d17a      	bne.n	8020026 <ip4_output_if_src+0x126>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ff30:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 801ff32:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ff34:	2b13      	cmp	r3, #19
 801ff36:	d964      	bls.n	8020002 <ip4_output_if_src+0x102>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ff38:	7235      	strb	r5, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801ff3a:	ea4b 2505 	orr.w	r5, fp, r5, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 801ff3e:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801ff42:	ea4f 210a 	mov.w	r1, sl, lsl #8
    ip4_addr_copy(iphdr->dest, *dest);
 801ff46:	683a      	ldr	r2, [r7, #0]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801ff48:	122b      	asrs	r3, r5, #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801ff4a:	f041 0145 	orr.w	r1, r1, #69	; 0x45
    IPH_TOS_SET(iphdr, tos);
 801ff4e:	f886 a001 	strb.w	sl, [r6, #1]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801ff52:	0c10      	lsrs	r0, r2, #16
    ip4_addr_copy(iphdr->dest, *dest);
 801ff54:	6132      	str	r2, [r6, #16]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801ff56:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801ff5a:	2345      	movs	r3, #69	; 0x45
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801ff5c:	fa10 f282 	uxtah	r2, r0, r2
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801ff60:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8020050 <ip4_output_if_src+0x150>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801ff64:	7033      	strb	r3, [r6, #0]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801ff66:	440a      	add	r2, r1
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801ff68:	8920      	ldrh	r0, [r4, #8]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801ff6a:	fa12 f585 	uxtah	r5, r2, r5
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801ff6e:	f7f6 fb3d 	bl	80165ec <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 801ff72:	2200      	movs	r2, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801ff74:	4603      	mov	r3, r0
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801ff76:	f8ba 0000 	ldrh.w	r0, [sl]
    IPH_OFFSET_SET(iphdr, 0);
 801ff7a:	71b2      	strb	r2, [r6, #6]
    chk_sum += iphdr->_len;
 801ff7c:	441d      	add	r5, r3
    IPH_OFFSET_SET(iphdr, 0);
 801ff7e:	71f2      	strb	r2, [r6, #7]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801ff80:	8073      	strh	r3, [r6, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801ff82:	f7f6 fb33 	bl	80165ec <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801ff86:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801ff8a:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 801ff8c:	1c5a      	adds	r2, r3, #1
    chk_sum += iphdr->_id;
 801ff8e:	1943      	adds	r3, r0, r5
    ++ip_id;
 801ff90:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 801ff94:	f1b9 0f00 	cmp.w	r9, #0
 801ff98:	d03b      	beq.n	8020012 <ip4_output_if_src+0x112>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801ff9a:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 801ff9e:	fa13 f382 	uxtah	r3, r3, r2
 801ffa2:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801ffa4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801ffa8:	b29a      	uxth	r2, r3
 801ffaa:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 801ffae:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801ffb2:	43db      	mvns	r3, r3
 801ffb4:	8173      	strh	r3, [r6, #10]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 801ffb6:	4a20      	ldr	r2, [pc, #128]	; (8020038 <ip4_output_if_src+0x138>)
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ffb8:	f8b8 102c 	ldrh.w	r1, [r8, #44]	; 0x2c
  IP_STATS_INC(ip.xmit);
 801ffbc:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 801ffc0:	3301      	adds	r3, #1
 801ffc2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
    return ip4_frag(p, netif, dest);
 801ffc6:	463a      	mov	r2, r7
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ffc8:	b111      	cbz	r1, 801ffd0 <ip4_output_if_src+0xd0>
 801ffca:	8923      	ldrh	r3, [r4, #8]
 801ffcc:	428b      	cmp	r3, r1
 801ffce:	d823      	bhi.n	8020018 <ip4_output_if_src+0x118>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ffd0:	4621      	mov	r1, r4
 801ffd2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801ffd6:	4640      	mov	r0, r8
 801ffd8:	4798      	blx	r3
}
 801ffda:	b003      	add	sp, #12
 801ffdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ffe0:	4b16      	ldr	r3, [pc, #88]	; (802003c <ip4_output_if_src+0x13c>)
 801ffe2:	f44f 7255 	mov.w	r2, #852	; 0x354
 801ffe6:	4916      	ldr	r1, [pc, #88]	; (8020040 <ip4_output_if_src+0x140>)
 801ffe8:	4816      	ldr	r0, [pc, #88]	; (8020044 <ip4_output_if_src+0x144>)
 801ffea:	f002 fa6b 	bl	80224c4 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801ffee:	2f00      	cmp	r7, #0
 801fff0:	d198      	bne.n	801ff24 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 801fff2:	8963      	ldrh	r3, [r4, #10]
 801fff4:	2b13      	cmp	r3, #19
 801fff6:	d916      	bls.n	8020026 <ip4_output_if_src+0x126>
    ip4_addr_copy(dest_addr, iphdr->dest);
 801fff8:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 801fffa:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 801fffc:	691b      	ldr	r3, [r3, #16]
 801fffe:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8020000:	e7d9      	b.n	801ffb6 <ip4_output_if_src+0xb6>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8020002:	4b0e      	ldr	r3, [pc, #56]	; (802003c <ip4_output_if_src+0x13c>)
 8020004:	f44f 7262 	mov.w	r2, #904	; 0x388
 8020008:	490f      	ldr	r1, [pc, #60]	; (8020048 <ip4_output_if_src+0x148>)
 802000a:	480e      	ldr	r0, [pc, #56]	; (8020044 <ip4_output_if_src+0x144>)
 802000c:	f002 fa5a 	bl	80224c4 <iprintf>
 8020010:	e792      	b.n	801ff38 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8020012:	4a0e      	ldr	r2, [pc, #56]	; (802004c <ip4_output_if_src+0x14c>)
 8020014:	6812      	ldr	r2, [r2, #0]
 8020016:	e7c2      	b.n	801ff9e <ip4_output_if_src+0x9e>
    return ip4_frag(p, netif, dest);
 8020018:	4641      	mov	r1, r8
 802001a:	4620      	mov	r0, r4
 802001c:	f000 fc70 	bl	8020900 <ip4_frag>
}
 8020020:	b003      	add	sp, #12
 8020022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      IP_STATS_INC(ip.err);
 8020026:	4a04      	ldr	r2, [pc, #16]	; (8020038 <ip4_output_if_src+0x138>)
      return ERR_BUF;
 8020028:	f06f 0001 	mvn.w	r0, #1
      IP_STATS_INC(ip.err);
 802002c:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 8020030:	3301      	adds	r3, #1
 8020032:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
      return ERR_BUF;
 8020036:	e7d0      	b.n	801ffda <ip4_output_if_src+0xda>
 8020038:	2002e08c 	.word	0x2002e08c
 802003c:	08041954 	.word	0x08041954
 8020040:	08041988 	.word	0x08041988
 8020044:	08028d24 	.word	0x08028d24
 8020048:	08041994 	.word	0x08041994
 802004c:	08041a0c 	.word	0x08041a0c
 8020050:	2001ad46 	.word	0x2001ad46

08020054 <ip4_output_if>:
{
 8020054:	b4f0      	push	{r4, r5, r6, r7}
 8020056:	9c06      	ldr	r4, [sp, #24]
 8020058:	f89d 5010 	ldrb.w	r5, [sp, #16]
 802005c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8020060:	b11a      	cbz	r2, 802006a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8020062:	b109      	cbz	r1, 8020068 <ip4_output_if+0x14>
 8020064:	680f      	ldr	r7, [r1, #0]
 8020066:	b907      	cbnz	r7, 802006a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8020068:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 802006a:	9504      	str	r5, [sp, #16]
 802006c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8020070:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8020072:	f7ff bf45 	b.w	801ff00 <ip4_output_if_src>
 8020076:	bf00      	nop

08020078 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8020078:	1e43      	subs	r3, r0, #1
{
 802007a:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 802007c:	3303      	adds	r3, #3
 802007e:	d815      	bhi.n	80200ac <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8020080:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8020084:	f013 0002 	ands.w	r0, r3, #2
 8020088:	d00f      	beq.n	80200aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802008a:	6848      	ldr	r0, [r1, #4]
 802008c:	4290      	cmp	r0, r2
 802008e:	d00b      	beq.n	80200a8 <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8020090:	688b      	ldr	r3, [r1, #8]
 8020092:	4050      	eors	r0, r2
 8020094:	4218      	tst	r0, r3
 8020096:	d107      	bne.n	80200a8 <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020098:	ea22 0203 	bic.w	r2, r2, r3
 802009c:	43d8      	mvns	r0, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 802009e:	1a10      	subs	r0, r2, r0
 80200a0:	fab0 f080 	clz	r0, r0
 80200a4:	0940      	lsrs	r0, r0, #5
 80200a6:	4770      	bx	lr
 80200a8:	2000      	movs	r0, #0
  }
}
 80200aa:	4770      	bx	lr
    return 1;
 80200ac:	2001      	movs	r0, #1
 80200ae:	4770      	bx	lr

080200b0 <ip4addr_aton>:
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80200b0:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8020200 <ip4addr_aton+0x150>
  c = *cp;
 80200b4:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 80200b6:	f81c 2003 	ldrb.w	r2, [ip, r3]
 80200ba:	0752      	lsls	r2, r2, #29
 80200bc:	f140 808e 	bpl.w	80201dc <ip4addr_aton+0x12c>
{
 80200c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200c4:	b084      	sub	sp, #16
 80200c6:	460e      	mov	r6, r1
  u32_t *pp = parts;
 80200c8:	46e9      	mov	r9, sp
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80200ca:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 80200ce:	46ce      	mov	lr, r9
    if (c == '0') {
 80200d0:	2b30      	cmp	r3, #48	; 0x30
 80200d2:	d030      	beq.n	8020136 <ip4addr_aton+0x86>
    base = 10;
 80200d4:	210a      	movs	r1, #10
 80200d6:	2400      	movs	r4, #0
 80200d8:	e003      	b.n	80200e2 <ip4addr_aton+0x32>
        val = (val * base) + (u32_t)(c - '0');
 80200da:	f1a7 0430 	sub.w	r4, r7, #48	; 0x30
        c = *++cp;
 80200de:	7843      	ldrb	r3, [r0, #1]
 80200e0:	3001      	adds	r0, #1
      if (lwip_isdigit(c)) {
 80200e2:	f81c 2003 	ldrb.w	r2, [ip, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80200e6:	f103 050a 	add.w	r5, r3, #10
        val = (val * base) + (u32_t)(c - '0');
 80200ea:	fb04 3701 	mla	r7, r4, r1, r3
      if (lwip_isdigit(c)) {
 80200ee:	f012 0f04 	tst.w	r2, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80200f2:	f002 0a03 	and.w	sl, r2, #3
      if (lwip_isdigit(c)) {
 80200f6:	d1f0      	bne.n	80200da <ip4addr_aton+0x2a>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80200f8:	2910      	cmp	r1, #16
 80200fa:	d10c      	bne.n	8020116 <ip4addr_aton+0x66>
 80200fc:	f012 0f44 	tst.w	r2, #68	; 0x44
 8020100:	d009      	beq.n	8020116 <ip4addr_aton+0x66>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8020102:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8020106:	7843      	ldrb	r3, [r0, #1]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8020108:	bf0c      	ite	eq
 802010a:	2261      	moveq	r2, #97	; 0x61
 802010c:	2241      	movne	r2, #65	; 0x41
 802010e:	1aad      	subs	r5, r5, r2
 8020110:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
        c = *++cp;
 8020114:	e7e4      	b.n	80200e0 <ip4addr_aton+0x30>
    if (c == '.') {
 8020116:	2b2e      	cmp	r3, #46	; 0x2e
 8020118:	d119      	bne.n	802014e <ip4addr_aton+0x9e>
      if (pp >= parts + 3) {
 802011a:	45c6      	cmp	lr, r8
 802011c:	d007      	beq.n	802012e <ip4addr_aton+0x7e>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 802011e:	7843      	ldrb	r3, [r0, #1]
 8020120:	3001      	adds	r0, #1
      *pp++ = val;
 8020122:	f84e 4b04 	str.w	r4, [lr], #4
    if (!lwip_isdigit(c)) {
 8020126:	f81c 2003 	ldrb.w	r2, [ip, r3]
 802012a:	0752      	lsls	r2, r2, #29
 802012c:	d4d0      	bmi.n	80200d0 <ip4addr_aton+0x20>
      return 0;
 802012e:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8020130:	b004      	add	sp, #16
 8020132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      c = *++cp;
 8020136:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8020138:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 802013c:	2a58      	cmp	r2, #88	; 0x58
 802013e:	d002      	beq.n	8020146 <ip4addr_aton+0x96>
      c = *++cp;
 8020140:	3001      	adds	r0, #1
        base = 8;
 8020142:	2108      	movs	r1, #8
 8020144:	e7c7      	b.n	80200d6 <ip4addr_aton+0x26>
        c = *++cp;
 8020146:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8020148:	2110      	movs	r1, #16
        c = *++cp;
 802014a:	3002      	adds	r0, #2
 802014c:	e7c3      	b.n	80200d6 <ip4addr_aton+0x26>
  if (c != '\0' && !lwip_isspace(c)) {
 802014e:	b10b      	cbz	r3, 8020154 <ip4addr_aton+0xa4>
 8020150:	0713      	lsls	r3, r2, #28
 8020152:	d5ec      	bpl.n	802012e <ip4addr_aton+0x7e>
  switch (pp - parts + 1) {
 8020154:	ebae 0009 	sub.w	r0, lr, r9
 8020158:	1080      	asrs	r0, r0, #2
 802015a:	3001      	adds	r0, #1
 802015c:	2804      	cmp	r0, #4
 802015e:	d841      	bhi.n	80201e4 <ip4addr_aton+0x134>
 8020160:	a301      	add	r3, pc, #4	; (adr r3, 8020168 <ip4addr_aton+0xb8>)
 8020162:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8020166:	bf00      	nop
 8020168:	08020131 	.word	0x08020131
 802016c:	0802019f 	.word	0x0802019f
 8020170:	080201cb 	.word	0x080201cb
 8020174:	080201af 	.word	0x080201af
 8020178:	0802017d 	.word	0x0802017d
      if (val > 0xff) {
 802017c:	2cff      	cmp	r4, #255	; 0xff
 802017e:	d8d6      	bhi.n	802012e <ip4addr_aton+0x7e>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8020180:	9900      	ldr	r1, [sp, #0]
 8020182:	29ff      	cmp	r1, #255	; 0xff
 8020184:	d8d3      	bhi.n	802012e <ip4addr_aton+0x7e>
 8020186:	9b01      	ldr	r3, [sp, #4]
 8020188:	2bff      	cmp	r3, #255	; 0xff
 802018a:	d8d0      	bhi.n	802012e <ip4addr_aton+0x7e>
 802018c:	9a02      	ldr	r2, [sp, #8]
 802018e:	2aff      	cmp	r2, #255	; 0xff
 8020190:	d8cd      	bhi.n	802012e <ip4addr_aton+0x7e>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8020192:	041b      	lsls	r3, r3, #16
 8020194:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8020198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802019c:	431c      	orrs	r4, r3
  if (addr) {
 802019e:	b1fe      	cbz	r6, 80201e0 <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80201a0:	4620      	mov	r0, r4
 80201a2:	f7f6 fa27 	bl	80165f4 <lwip_htonl>
 80201a6:	4603      	mov	r3, r0
  return 1;
 80201a8:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80201aa:	6033      	str	r3, [r6, #0]
 80201ac:	e7c0      	b.n	8020130 <ip4addr_aton+0x80>
      if (val > 0xffff) {
 80201ae:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80201b2:	d2bc      	bcs.n	802012e <ip4addr_aton+0x7e>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80201b4:	9a00      	ldr	r2, [sp, #0]
 80201b6:	2aff      	cmp	r2, #255	; 0xff
 80201b8:	d8b9      	bhi.n	802012e <ip4addr_aton+0x7e>
 80201ba:	9b01      	ldr	r3, [sp, #4]
 80201bc:	2bff      	cmp	r3, #255	; 0xff
 80201be:	d8b6      	bhi.n	802012e <ip4addr_aton+0x7e>
      val |= (parts[0] << 24) | (parts[1] << 16);
 80201c0:	041b      	lsls	r3, r3, #16
 80201c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80201c6:	431c      	orrs	r4, r3
      break;
 80201c8:	e7e9      	b.n	802019e <ip4addr_aton+0xee>
      if (val > 0xffffffUL) {
 80201ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 80201ce:	d2ae      	bcs.n	802012e <ip4addr_aton+0x7e>
      if (parts[0] > 0xff) {
 80201d0:	9b00      	ldr	r3, [sp, #0]
 80201d2:	2bff      	cmp	r3, #255	; 0xff
 80201d4:	d8ab      	bhi.n	802012e <ip4addr_aton+0x7e>
      val |= parts[0] << 24;
 80201d6:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      break;
 80201da:	e7e0      	b.n	802019e <ip4addr_aton+0xee>
      return 0;
 80201dc:	2000      	movs	r0, #0
}
 80201de:	4770      	bx	lr
  return 1;
 80201e0:	2001      	movs	r0, #1
 80201e2:	e7a5      	b.n	8020130 <ip4addr_aton+0x80>
      LWIP_ASSERT("unhandled", 0);
 80201e4:	4b03      	ldr	r3, [pc, #12]	; (80201f4 <ip4addr_aton+0x144>)
 80201e6:	22f9      	movs	r2, #249	; 0xf9
 80201e8:	4903      	ldr	r1, [pc, #12]	; (80201f8 <ip4addr_aton+0x148>)
 80201ea:	4804      	ldr	r0, [pc, #16]	; (80201fc <ip4addr_aton+0x14c>)
 80201ec:	f002 f96a 	bl	80224c4 <iprintf>
      break;
 80201f0:	e7d5      	b.n	802019e <ip4addr_aton+0xee>
 80201f2:	bf00      	nop
 80201f4:	080419c4 	.word	0x080419c4
 80201f8:	08041a00 	.word	0x08041a00
 80201fc:	08028d24 	.word	0x08028d24
 8020200:	08041c69 	.word	0x08041c69

08020204 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020204:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8020206:	4b0f      	ldr	r3, [pc, #60]	; (8020244 <ip_reass_dequeue_datagram+0x40>)
{
 8020208:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 802020a:	681a      	ldr	r2, [r3, #0]
 802020c:	4282      	cmp	r2, r0
 802020e:	d009      	beq.n	8020224 <ip_reass_dequeue_datagram+0x20>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8020210:	460d      	mov	r5, r1
 8020212:	b179      	cbz	r1, 8020234 <ip_reass_dequeue_datagram+0x30>
    prev->next = ipr->next;
 8020214:	6823      	ldr	r3, [r4, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8020216:	4621      	mov	r1, r4
 8020218:	2005      	movs	r0, #5
    prev->next = ipr->next;
 802021a:	602b      	str	r3, [r5, #0]
}
 802021c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8020220:	f7f7 bd68 	b.w	8017cf4 <memp_free>
    reassdatagrams = ipr->next;
 8020224:	6802      	ldr	r2, [r0, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8020226:	4621      	mov	r1, r4
 8020228:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 802022a:	601a      	str	r2, [r3, #0]
}
 802022c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8020230:	f7f7 bd60 	b.w	8017cf4 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8020234:	4b04      	ldr	r3, [pc, #16]	; (8020248 <ip_reass_dequeue_datagram+0x44>)
 8020236:	f240 1245 	movw	r2, #325	; 0x145
 802023a:	4904      	ldr	r1, [pc, #16]	; (802024c <ip_reass_dequeue_datagram+0x48>)
 802023c:	4804      	ldr	r0, [pc, #16]	; (8020250 <ip_reass_dequeue_datagram+0x4c>)
 802023e:	f002 f941 	bl	80224c4 <iprintf>
 8020242:	e7e7      	b.n	8020214 <ip_reass_dequeue_datagram+0x10>
 8020244:	2001ad4c 	.word	0x2001ad4c
 8020248:	08041a14 	.word	0x08041a14
 802024c:	08041a50 	.word	0x08041a50
 8020250:	08028d24 	.word	0x08028d24

08020254 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020254:	4281      	cmp	r1, r0
{
 8020256:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802025a:	4606      	mov	r6, r0
 802025c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 802025e:	d072      	beq.n	8020346 <ip_reass_free_complete_datagram+0xf2>
  if (prev != NULL) {
 8020260:	b147      	cbz	r7, 8020274 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8020262:	683b      	ldr	r3, [r7, #0]
 8020264:	42b3      	cmp	r3, r6
 8020266:	d005      	beq.n	8020274 <ip_reass_free_complete_datagram+0x20>
 8020268:	4b3a      	ldr	r3, [pc, #232]	; (8020354 <ip_reass_free_complete_datagram+0x100>)
 802026a:	22ad      	movs	r2, #173	; 0xad
 802026c:	493a      	ldr	r1, [pc, #232]	; (8020358 <ip_reass_free_complete_datagram+0x104>)
 802026e:	483b      	ldr	r0, [pc, #236]	; (802035c <ip_reass_free_complete_datagram+0x108>)
 8020270:	f002 f928 	bl	80224c4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8020274:	6875      	ldr	r5, [r6, #4]
 8020276:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8020278:	889a      	ldrh	r2, [r3, #4]
 802027a:	2a00      	cmp	r2, #0
 802027c:	d03f      	beq.n	80202fe <ip_reass_free_complete_datagram+0xaa>
  u16_t pbufs_freed = 0;
 802027e:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020282:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8020354 <ip_reass_free_complete_datagram+0x100>
 8020286:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 802036c <ip_reass_free_complete_datagram+0x118>
 802028a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802035c <ip_reass_free_complete_datagram+0x108>
 802028e:	e005      	b.n	802029c <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8020290:	4628      	mov	r0, r5
  while (p != NULL) {
 8020292:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8020294:	f7f7 fffe 	bl	8018294 <pbuf_free>
  while (p != NULL) {
 8020298:	b1b4      	cbz	r4, 80202c8 <ip_reass_free_complete_datagram+0x74>
 802029a:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 802029c:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 802029e:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 80202a0:	f7f8 f95c 	bl	801855c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80202a4:	4458      	add	r0, fp
 80202a6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80202aa:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80202ae:	dbef      	blt.n	8020290 <ip_reass_free_complete_datagram+0x3c>
 80202b0:	4653      	mov	r3, sl
 80202b2:	22cc      	movs	r2, #204	; 0xcc
 80202b4:	4649      	mov	r1, r9
 80202b6:	4640      	mov	r0, r8
 80202b8:	f002 f904 	bl	80224c4 <iprintf>
    pbuf_free(pcur);
 80202bc:	4628      	mov	r0, r5
  while (p != NULL) {
 80202be:	4625      	mov	r5, r4
    pbuf_free(pcur);
 80202c0:	f7f7 ffe8 	bl	8018294 <pbuf_free>
  while (p != NULL) {
 80202c4:	2c00      	cmp	r4, #0
 80202c6:	d1e8      	bne.n	802029a <ip_reass_free_complete_datagram+0x46>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80202c8:	4c25      	ldr	r4, [pc, #148]	; (8020360 <ip_reass_free_complete_datagram+0x10c>)
  ip_reass_dequeue_datagram(ipr, prev);
 80202ca:	4639      	mov	r1, r7
 80202cc:	4630      	mov	r0, r6
 80202ce:	f7ff ff99 	bl	8020204 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80202d2:	8823      	ldrh	r3, [r4, #0]
 80202d4:	455b      	cmp	r3, fp
 80202d6:	d305      	bcc.n	80202e4 <ip_reass_free_complete_datagram+0x90>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80202d8:	eba3 030b 	sub.w	r3, r3, fp
}
 80202dc:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80202de:	8023      	strh	r3, [r4, #0]
}
 80202e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80202e4:	4b1b      	ldr	r3, [pc, #108]	; (8020354 <ip_reass_free_complete_datagram+0x100>)
 80202e6:	22d2      	movs	r2, #210	; 0xd2
 80202e8:	491e      	ldr	r1, [pc, #120]	; (8020364 <ip_reass_free_complete_datagram+0x110>)
 80202ea:	481c      	ldr	r0, [pc, #112]	; (802035c <ip_reass_free_complete_datagram+0x108>)
 80202ec:	f002 f8ea 	bl	80224c4 <iprintf>
 80202f0:	8823      	ldrh	r3, [r4, #0]
}
 80202f2:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80202f4:	eba3 030b 	sub.w	r3, r3, fp
 80202f8:	8023      	strh	r3, [r4, #0]
}
 80202fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80202fe:	4632      	mov	r2, r6
    ipr->p = iprh->next_pbuf;
 8020300:	6818      	ldr	r0, [r3, #0]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020302:	2101      	movs	r1, #1
    ipr->p = iprh->next_pbuf;
 8020304:	6070      	str	r0, [r6, #4]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020306:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8020308:	f852 4f08 	ldr.w	r4, [r2, #8]!
 802030c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8020310:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8020314:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8020318:	601c      	str	r4, [r3, #0]
 802031a:	f8c3 8004 	str.w	r8, [r3, #4]
 802031e:	f8c3 e008 	str.w	lr, [r3, #8]
 8020322:	f8c3 c00c 	str.w	ip, [r3, #12]
 8020326:	6914      	ldr	r4, [r2, #16]
 8020328:	611c      	str	r4, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802032a:	f7ff fc5d 	bl	801fbe8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802032e:	4628      	mov	r0, r5
 8020330:	f7f8 f914 	bl	801855c <pbuf_clen>
 8020334:	4683      	mov	fp, r0
    pbuf_free(p);
 8020336:	4628      	mov	r0, r5
 8020338:	f7f7 ffac 	bl	8018294 <pbuf_free>
  p = ipr->p;
 802033c:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 802033e:	2d00      	cmp	r5, #0
 8020340:	d0c2      	beq.n	80202c8 <ip_reass_free_complete_datagram+0x74>
 8020342:	686b      	ldr	r3, [r5, #4]
 8020344:	e79d      	b.n	8020282 <ip_reass_free_complete_datagram+0x2e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020346:	4b03      	ldr	r3, [pc, #12]	; (8020354 <ip_reass_free_complete_datagram+0x100>)
 8020348:	22ab      	movs	r2, #171	; 0xab
 802034a:	4907      	ldr	r1, [pc, #28]	; (8020368 <ip_reass_free_complete_datagram+0x114>)
 802034c:	4803      	ldr	r0, [pc, #12]	; (802035c <ip_reass_free_complete_datagram+0x108>)
 802034e:	f002 f8b9 	bl	80224c4 <iprintf>
 8020352:	e785      	b.n	8020260 <ip_reass_free_complete_datagram+0xc>
 8020354:	08041a14 	.word	0x08041a14
 8020358:	08041a78 	.word	0x08041a78
 802035c:	08028d24 	.word	0x08028d24
 8020360:	2001ad48 	.word	0x2001ad48
 8020364:	08041aac 	.word	0x08041aac
 8020368:	08041a6c 	.word	0x08041a6c
 802036c:	08041a8c 	.word	0x08041a8c

08020370 <ip_reass_remove_oldest_datagram>:
{
 8020370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8020374:	2700      	movs	r7, #0
 8020376:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80203e0 <ip_reass_remove_oldest_datagram+0x70>
{
 802037a:	4605      	mov	r5, r0
 802037c:	460e      	mov	r6, r1
    r = reassdatagrams;
 802037e:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8020382:	b1f3      	cbz	r3, 80203c2 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8020384:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020386:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 802038a:	4621      	mov	r1, r4
    prev = NULL;
 802038c:	46a4      	mov	ip, r4
    oldest = NULL;
 802038e:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020390:	695a      	ldr	r2, [r3, #20]
 8020392:	4572      	cmp	r2, lr
 8020394:	d018      	beq.n	80203c8 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8020396:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8020398:	b120      	cbz	r0, 80203a4 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 802039a:	f893 901f 	ldrb.w	r9, [r3, #31]
 802039e:	7fc2      	ldrb	r2, [r0, #31]
 80203a0:	4591      	cmp	r9, r2
 80203a2:	d801      	bhi.n	80203a8 <ip_reass_remove_oldest_datagram+0x38>
 80203a4:	4661      	mov	r1, ip
 80203a6:	4618      	mov	r0, r3
      if (r->next != NULL) {
 80203a8:	681a      	ldr	r2, [r3, #0]
 80203aa:	469c      	mov	ip, r3
 80203ac:	4613      	mov	r3, r2
 80203ae:	2a00      	cmp	r2, #0
 80203b0:	d1ee      	bne.n	8020390 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 80203b2:	b110      	cbz	r0, 80203ba <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80203b4:	f7ff ff4e 	bl	8020254 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80203b8:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80203ba:	42b7      	cmp	r7, r6
 80203bc:	da01      	bge.n	80203c2 <ip_reass_remove_oldest_datagram+0x52>
 80203be:	2c01      	cmp	r4, #1
 80203c0:	dcdd      	bgt.n	802037e <ip_reass_remove_oldest_datagram+0xe>
}
 80203c2:	4638      	mov	r0, r7
 80203c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80203c8:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80203cc:	699a      	ldr	r2, [r3, #24]
 80203ce:	454a      	cmp	r2, r9
 80203d0:	d1e1      	bne.n	8020396 <ip_reass_remove_oldest_datagram+0x26>
 80203d2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80203d6:	88aa      	ldrh	r2, [r5, #4]
 80203d8:	4591      	cmp	r9, r2
 80203da:	d1dc      	bne.n	8020396 <ip_reass_remove_oldest_datagram+0x26>
 80203dc:	e7e4      	b.n	80203a8 <ip_reass_remove_oldest_datagram+0x38>
 80203de:	bf00      	nop
 80203e0:	2001ad4c 	.word	0x2001ad4c

080203e4 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80203e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80203e6:	4604      	mov	r4, r0
 80203e8:	b128      	cbz	r0, 80203f6 <ip_frag_free_pbuf_custom_ref+0x12>
  memp_free(MEMP_FRAG_PBUF, p);
 80203ea:	4621      	mov	r1, r4
 80203ec:	2006      	movs	r0, #6
}
 80203ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80203f2:	f7f7 bc7f 	b.w	8017cf4 <memp_free>
  LWIP_ASSERT("p != NULL", p != NULL);
 80203f6:	4906      	ldr	r1, [pc, #24]	; (8020410 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80203f8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80203fc:	4b05      	ldr	r3, [pc, #20]	; (8020414 <ip_frag_free_pbuf_custom_ref+0x30>)
 80203fe:	4806      	ldr	r0, [pc, #24]	; (8020418 <ip_frag_free_pbuf_custom_ref+0x34>)
 8020400:	f002 f860 	bl	80224c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8020404:	4621      	mov	r1, r4
 8020406:	2006      	movs	r0, #6
}
 8020408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 802040c:	f7f7 bc72 	b.w	8017cf4 <memp_free>
 8020410:	08041480 	.word	0x08041480
 8020414:	08041a14 	.word	0x08041a14
 8020418:	08028d24 	.word	0x08028d24

0802041c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 802041c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802041e:	4604      	mov	r4, r0
 8020420:	b140      	cbz	r0, 8020434 <ipfrag_free_pbuf_custom+0x18>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8020422:	6960      	ldr	r0, [r4, #20]
 8020424:	b108      	cbz	r0, 802042a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8020426:	f7f7 ff35 	bl	8018294 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 802042a:	4620      	mov	r0, r4
}
 802042c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8020430:	f7ff bfd8 	b.w	80203e4 <ip_frag_free_pbuf_custom_ref>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020434:	4b03      	ldr	r3, [pc, #12]	; (8020444 <ipfrag_free_pbuf_custom+0x28>)
 8020436:	f240 22ce 	movw	r2, #718	; 0x2ce
 802043a:	4903      	ldr	r1, [pc, #12]	; (8020448 <ipfrag_free_pbuf_custom+0x2c>)
 802043c:	4803      	ldr	r0, [pc, #12]	; (802044c <ipfrag_free_pbuf_custom+0x30>)
 802043e:	f002 f841 	bl	80224c4 <iprintf>
 8020442:	e7ee      	b.n	8020422 <ipfrag_free_pbuf_custom+0x6>
 8020444:	08041a14 	.word	0x08041a14
 8020448:	08041ad0 	.word	0x08041ad0
 802044c:	08028d24 	.word	0x08028d24

08020450 <ip_reass_tmr>:
{
 8020450:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8020452:	4b0a      	ldr	r3, [pc, #40]	; (802047c <ip_reass_tmr+0x2c>)
 8020454:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8020456:	b140      	cbz	r0, 802046a <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 8020458:	2400      	movs	r4, #0
    if (r->timer > 0) {
 802045a:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 802045c:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 802045e:	b12b      	cbz	r3, 802046c <ip_reass_tmr+0x1c>
 8020460:	4604      	mov	r4, r0
      r->timer--;
 8020462:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 8020464:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 8020466:	2800      	cmp	r0, #0
 8020468:	d1f7      	bne.n	802045a <ip_reass_tmr+0xa>
}
 802046a:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 802046c:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 802046e:	4621      	mov	r1, r4
 8020470:	f7ff fef0 	bl	8020254 <ip_reass_free_complete_datagram>
      r = r->next;
 8020474:	4628      	mov	r0, r5
  while (r != NULL) {
 8020476:	2800      	cmp	r0, #0
 8020478:	d1ef      	bne.n	802045a <ip_reass_tmr+0xa>
 802047a:	e7f6      	b.n	802046a <ip_reass_tmr+0x1a>
 802047c:	2001ad4c 	.word	0x2001ad4c

08020480 <ip4_reass>:
{
 8020480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 8020484:	4dc1      	ldr	r5, [pc, #772]	; (802078c <ip4_reass+0x30c>)
{
 8020486:	b085      	sub	sp, #20
  fraghdr = (struct ip_hdr *)p->payload;
 8020488:	f8d0 b004 	ldr.w	fp, [r0, #4]
{
 802048c:	4606      	mov	r6, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 802048e:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8020490:	3301      	adds	r3, #1
 8020492:	866b      	strh	r3, [r5, #50]	; 0x32
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8020494:	f89b 3000 	ldrb.w	r3, [fp]
 8020498:	f003 030f 	and.w	r3, r3, #15
 802049c:	2b05      	cmp	r3, #5
 802049e:	f040 8089 	bne.w	80205b4 <ip4_reass+0x134>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80204a2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80204a6:	f7f6 f8a1 	bl	80165ec <lwip_htons>
 80204aa:	4680      	mov	r8, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80204ac:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 80204b0:	f7f6 f89c 	bl	80165ec <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80204b4:	f89b 2000 	ldrb.w	r2, [fp]
 80204b8:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80204bc:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80204c0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80204c4:	d36b      	bcc.n	802059e <ip4_reass+0x11e>
  len = (u16_t)(len - hlen);
 80204c6:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80204c8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 802079c <ip4_reass+0x31c>
  clen = pbuf_clen(p);
 80204cc:	4630      	mov	r0, r6
  len = (u16_t)(len - hlen);
 80204ce:	b29b      	uxth	r3, r3
 80204d0:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 80204d2:	f7f8 f843 	bl	801855c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80204d6:	f8b9 3000 	ldrh.w	r3, [r9]
  clen = pbuf_clen(p);
 80204da:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80204dc:	4403      	add	r3, r0
 80204de:	2b0a      	cmp	r3, #10
 80204e0:	f300 80df 	bgt.w	80206a2 <ip4_reass+0x222>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80204e4:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 80207a0 <ip4_reass+0x320>
 80204e8:	f8da 4000 	ldr.w	r4, [sl]
 80204ec:	2c00      	cmp	r4, #0
 80204ee:	f000 80e7 	beq.w	80206c0 <ip4_reass+0x240>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80204f2:	f8db 200c 	ldr.w	r2, [fp, #12]
 80204f6:	e003      	b.n	8020500 <ip4_reass+0x80>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80204f8:	6824      	ldr	r4, [r4, #0]
 80204fa:	2c00      	cmp	r4, #0
 80204fc:	f000 80e0 	beq.w	80206c0 <ip4_reass+0x240>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8020500:	6963      	ldr	r3, [r4, #20]
 8020502:	4293      	cmp	r3, r2
 8020504:	d1f8      	bne.n	80204f8 <ip4_reass+0x78>
 8020506:	f8db 3010 	ldr.w	r3, [fp, #16]
 802050a:	69a1      	ldr	r1, [r4, #24]
 802050c:	4299      	cmp	r1, r3
 802050e:	d1f3      	bne.n	80204f8 <ip4_reass+0x78>
 8020510:	89a1      	ldrh	r1, [r4, #12]
 8020512:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8020516:	4299      	cmp	r1, r3
 8020518:	d1ee      	bne.n	80204f8 <ip4_reass+0x78>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 802051a:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
 802051e:	3301      	adds	r3, #1
 8020520:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020524:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8020528:	f7f6 f860 	bl	80165ec <lwip_htons>
 802052c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8020530:	2800      	cmp	r0, #0
 8020532:	f000 809e 	beq.w	8020672 <ip4_reass+0x1f2>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8020536:	f8bb 3006 	ldrh.w	r3, [fp, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802053a:	f3c8 080c 	ubfx	r8, r8, #0, #13
  if (is_last) {
 802053e:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8020542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
  if (is_last) {
 8020546:	9301      	str	r3, [sp, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8020548:	9202      	str	r2, [sp, #8]
  if (is_last) {
 802054a:	d108      	bne.n	802055e <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 802054c:	9b00      	ldr	r3, [sp, #0]
 802054e:	18d3      	adds	r3, r2, r3
 8020550:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8020552:	429a      	cmp	r2, r3
 8020554:	d812      	bhi.n	802057c <ip4_reass+0xfc>
 8020556:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802055a:	4293      	cmp	r3, r2
 802055c:	d80e      	bhi.n	802057c <ip4_reass+0xfc>
  fraghdr = (struct ip_hdr *)new_p->payload;
 802055e:	f8d6 8004 	ldr.w	r8, [r6, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8020562:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8020566:	f7f6 f841 	bl	80165ec <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 802056a:	f898 2000 	ldrb.w	r2, [r8]
 802056e:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8020572:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8020576:	ea4f 0382 	mov.w	r3, r2, lsl #2
 802057a:	d221      	bcs.n	80205c0 <ip4_reass+0x140>
  if (ipr->p == NULL) {
 802057c:	6863      	ldr	r3, [r4, #4]
 802057e:	b973      	cbnz	r3, 802059e <ip4_reass+0x11e>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8020580:	f8da 3000 	ldr.w	r3, [sl]
 8020584:	42a3      	cmp	r3, r4
 8020586:	d006      	beq.n	8020596 <ip4_reass+0x116>
 8020588:	4b81      	ldr	r3, [pc, #516]	; (8020790 <ip4_reass+0x310>)
 802058a:	f240 22ab 	movw	r2, #683	; 0x2ab
 802058e:	4981      	ldr	r1, [pc, #516]	; (8020794 <ip4_reass+0x314>)
 8020590:	4881      	ldr	r0, [pc, #516]	; (8020798 <ip4_reass+0x318>)
 8020592:	f001 ff97 	bl	80224c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8020596:	4620      	mov	r0, r4
 8020598:	2100      	movs	r1, #0
 802059a:	f7ff fe33 	bl	8020204 <ip_reass_dequeue_datagram>
  IPFRAG_STATS_INC(ip_frag.drop);
 802059e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
  pbuf_free(p);
 80205a0:	4630      	mov	r0, r6
  return NULL;
 80205a2:	2600      	movs	r6, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 80205a4:	3301      	adds	r3, #1
 80205a6:	86eb      	strh	r3, [r5, #54]	; 0x36
  pbuf_free(p);
 80205a8:	f7f7 fe74 	bl	8018294 <pbuf_free>
}
 80205ac:	4630      	mov	r0, r6
 80205ae:	b005      	add	sp, #20
 80205b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    IPFRAG_STATS_INC(ip_frag.err);
 80205b4:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
 80205b8:	3301      	adds	r3, #1
 80205ba:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    goto nullreturn;
 80205be:	e7ee      	b.n	802059e <ip4_reass+0x11e>
  len = (u16_t)(len - hlen);
 80205c0:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80205c2:	f8b8 0006 	ldrh.w	r0, [r8, #6]
  len = (u16_t)(len - hlen);
 80205c6:	fa1f fb83 	uxth.w	fp, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80205ca:	f7f6 f80f 	bl	80165ec <lwip_htons>
 80205ce:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80205d2:	f8d6 8004 	ldr.w	r8, [r6, #4]
  iprh->next_pbuf = NULL;
 80205d6:	2300      	movs	r3, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 80205d8:	00c2      	lsls	r2, r0, #3
  iprh->next_pbuf = NULL;
 80205da:	f888 3000 	strb.w	r3, [r8]
  iprh->end = (u16_t)(offset + len);
 80205de:	eb0b 0002 	add.w	r0, fp, r2
  iprh->next_pbuf = NULL;
 80205e2:	f888 3001 	strb.w	r3, [r8, #1]
 80205e6:	f888 3002 	strb.w	r3, [r8, #2]
  iprh->end = (u16_t)(offset + len);
 80205ea:	b281      	uxth	r1, r0
  iprh->start = offset;
 80205ec:	f8a8 2004 	strh.w	r2, [r8, #4]
  iprh->next_pbuf = NULL;
 80205f0:	f888 3003 	strb.w	r3, [r8, #3]
  if (iprh->end < offset) {
 80205f4:	428a      	cmp	r2, r1
  iprh->end = (u16_t)(offset + len);
 80205f6:	9103      	str	r1, [sp, #12]
 80205f8:	f8a8 0006 	strh.w	r0, [r8, #6]
  if (iprh->end < offset) {
 80205fc:	d8be      	bhi.n	802057c <ip4_reass+0xfc>
  for (q = ipr->p; q != NULL;) {
 80205fe:	6861      	ldr	r1, [r4, #4]
 8020600:	2900      	cmp	r1, #0
 8020602:	f000 80e0 	beq.w	80207c6 <ip4_reass+0x346>
  int valid = 1;
 8020606:	f04f 0b01 	mov.w	fp, #1
 802060a:	4694      	mov	ip, r2
 802060c:	e00e      	b.n	802062c <ip4_reass+0x1ac>
    } else if (iprh->start == iprh_tmp->start) {
 802060e:	d0c6      	beq.n	802059e <ip4_reass+0x11e>
    } else if (iprh->start < iprh_tmp->end) {
 8020610:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8020614:	45f4      	cmp	ip, lr
 8020616:	d3c2      	bcc.n	802059e <ip4_reass+0x11e>
      if (iprh_prev != NULL) {
 8020618:	b122      	cbz	r2, 8020624 <ip4_reass+0x1a4>
        if (iprh_prev->end != iprh_tmp->start) {
 802061a:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 802061c:	4282      	cmp	r2, r0
 802061e:	bf18      	it	ne
 8020620:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 8020624:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8020626:	2900      	cmp	r1, #0
 8020628:	f000 8098 	beq.w	802075c <ip4_reass+0x2dc>
        if (iprh_prev->end != iprh_tmp->start) {
 802062c:	461a      	mov	r2, r3
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 802062e:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8020630:	8898      	ldrh	r0, [r3, #4]
 8020632:	4584      	cmp	ip, r0
 8020634:	d2eb      	bcs.n	802060e <ip4_reass+0x18e>
      iprh->next_pbuf = q;
 8020636:	4613      	mov	r3, r2
 8020638:	f8c8 1000 	str.w	r1, [r8]
      if (iprh_prev != NULL) {
 802063c:	4662      	mov	r2, ip
 802063e:	469c      	mov	ip, r3
 8020640:	2b00      	cmp	r3, #0
 8020642:	d074      	beq.n	802072e <ip4_reass+0x2ae>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8020644:	9903      	ldr	r1, [sp, #12]
 8020646:	88db      	ldrh	r3, [r3, #6]
 8020648:	4281      	cmp	r1, r0
 802064a:	d8a8      	bhi.n	802059e <ip4_reass+0x11e>
 802064c:	429a      	cmp	r2, r3
 802064e:	d3a6      	bcc.n	802059e <ip4_reass+0x11e>
        iprh_prev->next_pbuf = new_p;
 8020650:	f8cc 6000 	str.w	r6, [ip]
        if (iprh_prev->end != iprh->start) {
 8020654:	d070      	beq.n	8020738 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8020656:	9b01      	ldr	r3, [sp, #4]
 8020658:	2b00      	cmp	r3, #0
 802065a:	f000 80a6 	beq.w	80207aa <ip4_reass+0x32a>
 802065e:	7fa3      	ldrb	r3, [r4, #30]
 8020660:	07db      	lsls	r3, r3, #31
 8020662:	d471      	bmi.n	8020748 <ip4_reass+0x2c8>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020664:	f8b9 3000 	ldrh.w	r3, [r9]
  return NULL;
 8020668:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802066a:	441f      	add	r7, r3
 802066c:	f8a9 7000 	strh.w	r7, [r9]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8020670:	e79c      	b.n	80205ac <ip4_reass+0x12c>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8020672:	89e0      	ldrh	r0, [r4, #14]
 8020674:	f7f5 ffba 	bl	80165ec <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020678:	f3c0 000c 	ubfx	r0, r0, #0, #13
 802067c:	2800      	cmp	r0, #0
 802067e:	f43f af5a 	beq.w	8020536 <ip4_reass+0xb6>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020682:	f8db 3000 	ldr.w	r3, [fp]
 8020686:	f8db 0004 	ldr.w	r0, [fp, #4]
 802068a:	f8db 1008 	ldr.w	r1, [fp, #8]
 802068e:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020692:	60a3      	str	r3, [r4, #8]
 8020694:	60e0      	str	r0, [r4, #12]
 8020696:	6121      	str	r1, [r4, #16]
 8020698:	6162      	str	r2, [r4, #20]
 802069a:	f8db 3010 	ldr.w	r3, [fp, #16]
 802069e:	61a3      	str	r3, [r4, #24]
 80206a0:	e749      	b.n	8020536 <ip4_reass+0xb6>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80206a2:	4601      	mov	r1, r0
 80206a4:	4658      	mov	r0, fp
 80206a6:	f7ff fe63 	bl	8020370 <ip_reass_remove_oldest_datagram>
 80206aa:	b128      	cbz	r0, 80206b8 <ip4_reass+0x238>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80206ac:	f8b9 3000 	ldrh.w	r3, [r9]
 80206b0:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80206b2:	2b0a      	cmp	r3, #10
 80206b4:	f77f af16 	ble.w	80204e4 <ip4_reass+0x64>
      IPFRAG_STATS_INC(ip_frag.memerr);
 80206b8:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80206ba:	3301      	adds	r3, #1
 80206bc:	87ab      	strh	r3, [r5, #60]	; 0x3c
    if (ipr == NULL) {
 80206be:	e76e      	b.n	802059e <ip4_reass+0x11e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80206c0:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80206c4:	4932      	ldr	r1, [pc, #200]	; (8020790 <ip4_reass+0x310>)
 80206c6:	2005      	movs	r0, #5
 80206c8:	f7f7 faf0 	bl	8017cac <memp_malloc_fn>
  if (ipr == NULL) {
 80206cc:	4604      	mov	r4, r0
 80206ce:	b1f0      	cbz	r0, 802070e <ip4_reass+0x28e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80206d0:	2300      	movs	r3, #0
  ipr->next = reassdatagrams;
 80206d2:	f8da 2000 	ldr.w	r2, [sl]
  ipr->timer = IP_REASS_MAXAGE;
 80206d6:	210f      	movs	r1, #15
  reassdatagrams = ipr;
 80206d8:	f8ca 4000 	str.w	r4, [sl]
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80206dc:	61e3      	str	r3, [r4, #28]
 80206de:	60a3      	str	r3, [r4, #8]
 80206e0:	60e3      	str	r3, [r4, #12]
 80206e2:	6123      	str	r3, [r4, #16]
 80206e4:	6163      	str	r3, [r4, #20]
 80206e6:	61a3      	str	r3, [r4, #24]
 80206e8:	6063      	str	r3, [r4, #4]
  ipr->timer = IP_REASS_MAXAGE;
 80206ea:	77e1      	strb	r1, [r4, #31]
  ipr->next = reassdatagrams;
 80206ec:	6022      	str	r2, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80206ee:	f8db 3000 	ldr.w	r3, [fp]
 80206f2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80206f6:	f8db 1008 	ldr.w	r1, [fp, #8]
 80206fa:	f8db 200c 	ldr.w	r2, [fp, #12]
 80206fe:	60a3      	str	r3, [r4, #8]
 8020700:	60e0      	str	r0, [r4, #12]
 8020702:	6121      	str	r1, [r4, #16]
 8020704:	6162      	str	r2, [r4, #20]
 8020706:	f8db 3010 	ldr.w	r3, [fp, #16]
 802070a:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 802070c:	e713      	b.n	8020536 <ip4_reass+0xb6>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802070e:	4639      	mov	r1, r7
 8020710:	4658      	mov	r0, fp
 8020712:	f7ff fe2d 	bl	8020370 <ip_reass_remove_oldest_datagram>
 8020716:	4287      	cmp	r7, r0
 8020718:	dcce      	bgt.n	80206b8 <ip4_reass+0x238>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802071a:	f44f 7291 	mov.w	r2, #290	; 0x122
 802071e:	491c      	ldr	r1, [pc, #112]	; (8020790 <ip4_reass+0x310>)
 8020720:	2005      	movs	r0, #5
 8020722:	f7f7 fac3 	bl	8017cac <memp_malloc_fn>
    if (ipr == NULL)
 8020726:	4604      	mov	r4, r0
 8020728:	2800      	cmp	r0, #0
 802072a:	d1d1      	bne.n	80206d0 <ip4_reass+0x250>
 802072c:	e7c4      	b.n	80206b8 <ip4_reass+0x238>
        if (iprh->end > iprh_tmp->start) {
 802072e:	9b03      	ldr	r3, [sp, #12]
 8020730:	4283      	cmp	r3, r0
 8020732:	f63f af34 	bhi.w	802059e <ip4_reass+0x11e>
        ipr->p = new_p;
 8020736:	6066      	str	r6, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8020738:	9b01      	ldr	r3, [sp, #4]
 802073a:	b1a3      	cbz	r3, 8020766 <ip4_reass+0x2e6>
 802073c:	7fa3      	ldrb	r3, [r4, #30]
 802073e:	07d9      	lsls	r1, r3, #31
 8020740:	d590      	bpl.n	8020664 <ip4_reass+0x1e4>
    if (valid) {
 8020742:	f1bb 0f00 	cmp.w	fp, #0
 8020746:	d146      	bne.n	80207d6 <ip4_reass+0x356>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020748:	f8b9 3000 	ldrh.w	r3, [r9]
 802074c:	441f      	add	r7, r3
 802074e:	f8a9 7000 	strh.w	r7, [r9]
  return NULL;
 8020752:	2600      	movs	r6, #0
}
 8020754:	4630      	mov	r0, r6
 8020756:	b005      	add	sp, #20
 8020758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 802075c:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 802075e:	601e      	str	r6, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8020760:	f47f af79 	bne.w	8020656 <ip4_reass+0x1d6>
 8020764:	e7e8      	b.n	8020738 <ip4_reass+0x2b8>
    if (valid) {
 8020766:	f1bb 0f00 	cmp.w	fp, #0
 802076a:	d01e      	beq.n	80207aa <ip4_reass+0x32a>
 802076c:	6863      	ldr	r3, [r4, #4]
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 802076e:	b1e3      	cbz	r3, 80207aa <ip4_reass+0x32a>
 8020770:	685a      	ldr	r2, [r3, #4]
 8020772:	8893      	ldrh	r3, [r2, #4]
 8020774:	2b00      	cmp	r3, #0
 8020776:	d032      	beq.n	80207de <ip4_reass+0x35e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020778:	f8b9 3000 	ldrh.w	r3, [r9]
 802077c:	441f      	add	r7, r3
  if (is_last) {
 802077e:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020780:	f8a9 7000 	strh.w	r7, [r9]
  if (is_last) {
 8020784:	2b00      	cmp	r3, #0
 8020786:	d1e4      	bne.n	8020752 <ip4_reass+0x2d2>
 8020788:	e014      	b.n	80207b4 <ip4_reass+0x334>
 802078a:	bf00      	nop
 802078c:	2002e08c 	.word	0x2002e08c
 8020790:	08041a14 	.word	0x08041a14
 8020794:	08041b2c 	.word	0x08041b2c
 8020798:	08028d24 	.word	0x08028d24
 802079c:	2001ad48 	.word	0x2001ad48
 80207a0:	2001ad4c 	.word	0x2001ad4c
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80207a4:	6872      	ldr	r2, [r6, #4]
 80207a6:	8893      	ldrh	r3, [r2, #4]
 80207a8:	b1cb      	cbz	r3, 80207de <ip4_reass+0x35e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80207aa:	f8b9 3000 	ldrh.w	r3, [r9]
 80207ae:	441f      	add	r7, r3
 80207b0:	f8a9 7000 	strh.w	r7, [r9]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80207b4:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80207b6:	9a02      	ldr	r2, [sp, #8]
 80207b8:	9900      	ldr	r1, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80207ba:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80207be:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80207c0:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80207c2:	83a2      	strh	r2, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80207c4:	e7c5      	b.n	8020752 <ip4_reass+0x2d2>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80207c6:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 80207c8:	6066      	str	r6, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d0ea      	beq.n	80207a4 <ip4_reass+0x324>
 80207ce:	7fa3      	ldrb	r3, [r4, #30]
 80207d0:	07da      	lsls	r2, r3, #31
 80207d2:	f57f af47 	bpl.w	8020664 <ip4_reass+0x1e4>
 80207d6:	6863      	ldr	r3, [r4, #4]
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80207d8:	2b00      	cmp	r3, #0
 80207da:	d0b5      	beq.n	8020748 <ip4_reass+0x2c8>
 80207dc:	e7c8      	b.n	8020770 <ip4_reass+0x2f0>
        q = iprh->next_pbuf;
 80207de:	f8d8 3000 	ldr.w	r3, [r8]
        while (q != NULL) {
 80207e2:	b153      	cbz	r3, 80207fa <ip4_reass+0x37a>
 80207e4:	9803      	ldr	r0, [sp, #12]
 80207e6:	e000      	b.n	80207ea <ip4_reass+0x36a>
 80207e8:	88c8      	ldrh	r0, [r1, #6]
          iprh = (struct ip_reass_helper *)q->payload;
 80207ea:	6859      	ldr	r1, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80207ec:	888b      	ldrh	r3, [r1, #4]
 80207ee:	4283      	cmp	r3, r0
 80207f0:	d1c2      	bne.n	8020778 <ip4_reass+0x2f8>
          q = iprh->next_pbuf;
 80207f2:	680b      	ldr	r3, [r1, #0]
        while (q != NULL) {
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d1f7      	bne.n	80207e8 <ip4_reass+0x368>
 80207f8:	4688      	mov	r8, r1
          LWIP_ASSERT("sanity check",
 80207fa:	4590      	cmp	r8, r2
 80207fc:	d110      	bne.n	8020820 <ip4_reass+0x3a0>
 80207fe:	4b3b      	ldr	r3, [pc, #236]	; (80208ec <ip4_reass+0x46c>)
 8020800:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8020804:	493a      	ldr	r1, [pc, #232]	; (80208f0 <ip4_reass+0x470>)
 8020806:	483b      	ldr	r0, [pc, #236]	; (80208f4 <ip4_reass+0x474>)
 8020808:	f001 fe5c 	bl	80224c4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802080c:	f8d8 3000 	ldr.w	r3, [r8]
 8020810:	b133      	cbz	r3, 8020820 <ip4_reass+0x3a0>
 8020812:	4b36      	ldr	r3, [pc, #216]	; (80208ec <ip4_reass+0x46c>)
 8020814:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8020818:	4937      	ldr	r1, [pc, #220]	; (80208f8 <ip4_reass+0x478>)
 802081a:	4836      	ldr	r0, [pc, #216]	; (80208f4 <ip4_reass+0x474>)
 802081c:	f001 fe52 	bl	80224c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020820:	f8b9 3000 	ldrh.w	r3, [r9]
 8020824:	441f      	add	r7, r3
  if (is_last) {
 8020826:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020828:	f8a9 7000 	strh.w	r7, [r9]
  if (is_last) {
 802082c:	2b00      	cmp	r3, #0
 802082e:	d15a      	bne.n	80208e6 <ip4_reass+0x466>
    u16_t datagram_len = (u16_t)(offset + len);
 8020830:	9b02      	ldr	r3, [sp, #8]
 8020832:	9a00      	ldr	r2, [sp, #0]
 8020834:	4413      	add	r3, r2
 8020836:	4618      	mov	r0, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020838:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802083a:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802083c:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8020840:	83a0      	strh	r0, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020842:	77a3      	strb	r3, [r4, #30]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8020844:	4623      	mov	r3, r4
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8020846:	6861      	ldr	r1, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8020848:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802084a:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802084e:	684f      	ldr	r7, [r1, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8020850:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8020852:	685e      	ldr	r6, [r3, #4]
 8020854:	689d      	ldr	r5, [r3, #8]
 8020856:	68d9      	ldr	r1, [r3, #12]
 8020858:	607e      	str	r6, [r7, #4]
 802085a:	60bd      	str	r5, [r7, #8]
 802085c:	60f9      	str	r1, [r7, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802085e:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8020860:	603a      	str	r2, [r7, #0]
 8020862:	691a      	ldr	r2, [r3, #16]
 8020864:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8020866:	f7f5 fec1 	bl	80165ec <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 802086a:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802086c:	4602      	mov	r2, r0
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802086e:	2114      	movs	r1, #20
 8020870:	4638      	mov	r0, r7
    IPH_OFFSET_SET(fraghdr, 0);
 8020872:	71bb      	strb	r3, [r7, #6]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8020874:	807a      	strh	r2, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8020876:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8020878:	72bb      	strb	r3, [r7, #10]
 802087a:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802087c:	f7f6 fc6a 	bl	8017154 <inet_chksum>
    p = ipr->p;
 8020880:	6866      	ldr	r6, [r4, #4]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8020882:	8178      	strh	r0, [r7, #10]
    while (r != NULL) {
 8020884:	b15d      	cbz	r5, 802089e <ip4_reass+0x41e>
      iprh = (struct ip_reass_helper *)r->payload;
 8020886:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8020888:	2114      	movs	r1, #20
 802088a:	4628      	mov	r0, r5
 802088c:	f7f7 fcc6 	bl	801821c <pbuf_remove_header>
      pbuf_cat(p, r);
 8020890:	4629      	mov	r1, r5
 8020892:	4630      	mov	r0, r6
 8020894:	f7f7 fe80 	bl	8018598 <pbuf_cat>
      r = iprh->next_pbuf;
 8020898:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 802089a:	2d00      	cmp	r5, #0
 802089c:	d1f3      	bne.n	8020886 <ip4_reass+0x406>
    if (ipr == reassdatagrams) {
 802089e:	f8da 1000 	ldr.w	r1, [sl]
 80208a2:	42a1      	cmp	r1, r4
 80208a4:	d005      	beq.n	80208b2 <ip4_reass+0x432>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80208a6:	b129      	cbz	r1, 80208b4 <ip4_reass+0x434>
        if (ipr_prev->next == ipr) {
 80208a8:	680b      	ldr	r3, [r1, #0]
 80208aa:	42a3      	cmp	r3, r4
 80208ac:	d002      	beq.n	80208b4 <ip4_reass+0x434>
 80208ae:	4619      	mov	r1, r3
 80208b0:	e7f9      	b.n	80208a6 <ip4_reass+0x426>
      ipr_prev = NULL;
 80208b2:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80208b4:	4620      	mov	r0, r4
 80208b6:	f7ff fca5 	bl	8020204 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80208ba:	4630      	mov	r0, r6
 80208bc:	f7f7 fe4e 	bl	801855c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80208c0:	f8b9 3000 	ldrh.w	r3, [r9]
    clen = pbuf_clen(p);
 80208c4:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80208c6:	4283      	cmp	r3, r0
 80208c8:	d303      	bcc.n	80208d2 <ip4_reass+0x452>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80208ca:	1b1b      	subs	r3, r3, r4
 80208cc:	f8a9 3000 	strh.w	r3, [r9]
    return p;
 80208d0:	e66c      	b.n	80205ac <ip4_reass+0x12c>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80208d2:	4b06      	ldr	r3, [pc, #24]	; (80208ec <ip4_reass+0x46c>)
 80208d4:	f240 229b 	movw	r2, #667	; 0x29b
 80208d8:	4908      	ldr	r1, [pc, #32]	; (80208fc <ip4_reass+0x47c>)
 80208da:	4806      	ldr	r0, [pc, #24]	; (80208f4 <ip4_reass+0x474>)
 80208dc:	f001 fdf2 	bl	80224c4 <iprintf>
 80208e0:	f8b9 3000 	ldrh.w	r3, [r9]
 80208e4:	e7f1      	b.n	80208ca <ip4_reass+0x44a>
 80208e6:	8ba0      	ldrh	r0, [r4, #28]
 80208e8:	e7ac      	b.n	8020844 <ip4_reass+0x3c4>
 80208ea:	bf00      	nop
 80208ec:	08041a14 	.word	0x08041a14
 80208f0:	08041adc 	.word	0x08041adc
 80208f4:	08028d24 	.word	0x08028d24
 80208f8:	08041aec 	.word	0x08041aec
 80208fc:	08041b10 	.word	0x08041b10

08020900 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8020900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8020904:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 8020906:	b08d      	sub	sp, #52	; 0x34
 8020908:	4605      	mov	r5, r0
 802090a:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802090c:	f1b3 0214 	subs.w	r2, r3, #20
{
 8020910:	9105      	str	r1, [sp, #20]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8020912:	bf48      	it	mi
 8020914:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8020918:	6843      	ldr	r3, [r0, #4]
 802091a:	9302      	str	r3, [sp, #8]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802091c:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8020920:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8020922:	9207      	str	r2, [sp, #28]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8020924:	f003 030f 	and.w	r3, r3, #15
 8020928:	2b05      	cmp	r3, #5
 802092a:	ea4f 0683 	mov.w	r6, r3, lsl #2
 802092e:	f040 80da 	bne.w	8020ae6 <ip4_frag+0x1e6>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8020932:	8943      	ldrh	r3, [r0, #10]
 8020934:	2b13      	cmp	r3, #19
 8020936:	f240 80d9 	bls.w	8020aec <ip4_frag+0x1ec>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802093a:	9b02      	ldr	r3, [sp, #8]
 802093c:	88d8      	ldrh	r0, [r3, #6]
 802093e:	f7f5 fe55 	bl	80165ec <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8020942:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8020944:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 8020948:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 802094a:	9206      	str	r2, [sp, #24]
  mf_set = tmp & IP_MF;
 802094c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8020950:	b29b      	uxth	r3, r3
 8020952:	920b      	str	r2, [sp, #44]	; 0x2c
 8020954:	9303      	str	r3, [sp, #12]

  while (left) {
 8020956:	2b00      	cmp	r3, #0
 8020958:	f000 809e 	beq.w	8020a98 <ip4_frag+0x198>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802095c:	9b07      	ldr	r3, [sp, #28]
  u16_t newpbuflen = 0;
 802095e:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8020960:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8020b14 <ip4_frag+0x214>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8020964:	00db      	lsls	r3, r3, #3
 8020966:	b29b      	uxth	r3, r3
 8020968:	9308      	str	r3, [sp, #32]
 802096a:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802096c:	f44f 7220 	mov.w	r2, #640	; 0x280
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8020970:	9f03      	ldr	r7, [sp, #12]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020972:	2114      	movs	r1, #20
 8020974:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8020976:	42bb      	cmp	r3, r7
 8020978:	bf28      	it	cs
 802097a:	463b      	movcs	r3, r7
 802097c:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802097e:	f7f7 fcf7 	bl	8018370 <pbuf_alloc>
    if (rambuf == NULL) {
 8020982:	4682      	mov	sl, r0
 8020984:	2800      	cmp	r0, #0
 8020986:	f000 809e 	beq.w	8020ac6 <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802098a:	8943      	ldrh	r3, [r0, #10]
 802098c:	2b13      	cmp	r3, #19
 802098e:	f240 809f 	bls.w	8020ad0 <ip4_frag+0x1d0>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8020992:	9902      	ldr	r1, [sp, #8]
 8020994:	f8da 3004 	ldr.w	r3, [sl, #4]
 8020998:	680a      	ldr	r2, [r1, #0]
 802099a:	684f      	ldr	r7, [r1, #4]
 802099c:	6888      	ldr	r0, [r1, #8]
 802099e:	68c9      	ldr	r1, [r1, #12]
 80209a0:	601a      	str	r2, [r3, #0]
 80209a2:	60d9      	str	r1, [r3, #12]
 80209a4:	9902      	ldr	r1, [sp, #8]
 80209a6:	605f      	str	r7, [r3, #4]
 80209a8:	6098      	str	r0, [r3, #8]
 80209aa:	690a      	ldr	r2, [r1, #16]
 80209ac:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80209ae:	f8da 3004 	ldr.w	r3, [sl, #4]
 80209b2:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 80209b4:	9b04      	ldr	r3, [sp, #16]
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d034      	beq.n	8020a24 <ip4_frag+0x124>
 80209ba:	4698      	mov	r8, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80209bc:	896b      	ldrh	r3, [r5, #10]
 80209be:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80209c0:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 80209c2:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80209c4:	d371      	bcc.n	8020aaa <ip4_frag+0x1aa>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80209c6:	4544      	cmp	r4, r8
 80209c8:	bf28      	it	cs
 80209ca:	4644      	movcs	r4, r8
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80209cc:	2c00      	cmp	r4, #0
 80209ce:	d065      	beq.n	8020a9c <ip4_frag+0x19c>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80209d0:	f240 22bd 	movw	r2, #701	; 0x2bd
 80209d4:	4649      	mov	r1, r9
 80209d6:	2006      	movs	r0, #6
 80209d8:	f7f7 f968 	bl	8017cac <memp_malloc_fn>
 80209dc:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80209de:	2241      	movs	r2, #65	; 0x41
 80209e0:	4621      	mov	r1, r4
 80209e2:	2000      	movs	r0, #0
      if (pcr == NULL) {
 80209e4:	f1bb 0f00 	cmp.w	fp, #0
 80209e8:	d06a      	beq.n	8020ac0 <ip4_frag+0x1c0>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80209ea:	9401      	str	r4, [sp, #4]
 80209ec:	465b      	mov	r3, fp
 80209ee:	686f      	ldr	r7, [r5, #4]
 80209f0:	4437      	add	r7, r6
 80209f2:	9700      	str	r7, [sp, #0]
 80209f4:	f7f7 fbf2 	bl	80181dc <pbuf_alloced_custom>
 80209f8:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80209fa:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 80209fc:	2f00      	cmp	r7, #0
 80209fe:	d05c      	beq.n	8020aba <ip4_frag+0x1ba>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8020a00:	eba8 0804 	sub.w	r8, r8, r4
      pbuf_ref(p);
 8020a04:	f7f7 fdb4 	bl	8018570 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020a08:	4b3d      	ldr	r3, [pc, #244]	; (8020b00 <ip4_frag+0x200>)
      pbuf_cat(rambuf, newpbuf);
 8020a0a:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8020a0c:	fa1f f888 	uxth.w	r8, r8
      pbuf_cat(rambuf, newpbuf);
 8020a10:	4650      	mov	r0, sl
      pcr->original = p;
 8020a12:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020a16:	f8cb 3010 	str.w	r3, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 8020a1a:	f7f7 fdbd 	bl	8018598 <pbuf_cat>
      if (left_to_copy) {
 8020a1e:	f1b8 0f00 	cmp.w	r8, #0
 8020a22:	d13b      	bne.n	8020a9c <ip4_frag+0x19c>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020a24:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 8020a26:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8020a28:	9a06      	ldr	r2, [sp, #24]
    last = (left <= netif->mtu - IP_HLEN);
 8020a2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 8020a2c:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8020a2e:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8020a32:	9a03      	ldr	r2, [sp, #12]
    last = (left <= netif->mtu - IP_HLEN);
 8020a34:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8020a36:	4293      	cmp	r3, r2
 8020a38:	dd52      	ble.n	8020ae0 <ip4_frag+0x1e0>
 8020a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	d14f      	bne.n	8020ae0 <ip4_frag+0x1e0>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8020a40:	f7f5 fdd4 	bl	80165ec <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8020a44:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8020a46:	9f09      	ldr	r7, [sp, #36]	; 0x24
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8020a48:	3314      	adds	r3, #20
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8020a4a:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8020a4c:	b298      	uxth	r0, r3
 8020a4e:	f7f5 fdcd 	bl	80165ec <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8020a52:	2300      	movs	r3, #0
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8020a54:	2114      	movs	r1, #20
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8020a56:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8020a58:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8020a5a:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 8020a5c:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8020a5e:	f7f6 fb79 	bl	8017154 <inet_chksum>
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8020a62:	9a05      	ldr	r2, [sp, #20]
 8020a64:	4651      	mov	r1, sl
 8020a66:	6953      	ldr	r3, [r2, #20]
 8020a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8020a6a:	8178      	strh	r0, [r7, #10]
    netif->output(netif, rambuf, dest);
 8020a6c:	9805      	ldr	r0, [sp, #20]
 8020a6e:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8020a70:	4a24      	ldr	r2, [pc, #144]	; (8020b04 <ip4_frag+0x204>)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8020a72:	4650      	mov	r0, sl
    IPFRAG_STATS_INC(ip_frag.xmit);
 8020a74:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8020a76:	3301      	adds	r3, #1
 8020a78:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 8020a7a:	f7f7 fc0b 	bl	8018294 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8020a7e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8020a82:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8020a84:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    left = (u16_t)(left - fragsize);
 8020a88:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 8020a8a:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 8020a8c:	9303      	str	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 8020a8e:	b292      	uxth	r2, r2
 8020a90:	9206      	str	r2, [sp, #24]
  while (left) {
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	f47f af69 	bne.w	802096a <ip4_frag+0x6a>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8020a98:	2000      	movs	r0, #0
 8020a9a:	e016      	b.n	8020aca <ip4_frag+0x1ca>
        p = p->next;
 8020a9c:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8020a9e:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8020aa0:	896b      	ldrh	r3, [r5, #10]
 8020aa2:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8020aa4:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8020aa6:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8020aa8:	d28d      	bcs.n	80209c6 <ip4_frag+0xc6>
 8020aaa:	464b      	mov	r3, r9
 8020aac:	f240 322d 	movw	r2, #813	; 0x32d
 8020ab0:	4915      	ldr	r1, [pc, #84]	; (8020b08 <ip4_frag+0x208>)
 8020ab2:	4816      	ldr	r0, [pc, #88]	; (8020b0c <ip4_frag+0x20c>)
 8020ab4:	f001 fd06 	bl	80224c4 <iprintf>
 8020ab8:	e785      	b.n	80209c6 <ip4_frag+0xc6>
        ip_frag_free_pbuf_custom_ref(pcr);
 8020aba:	4658      	mov	r0, fp
 8020abc:	f7ff fc92 	bl	80203e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8020ac0:	4650      	mov	r0, sl
 8020ac2:	f7f7 fbe7 	bl	8018294 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8020ac6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8020aca:	b00d      	add	sp, #52	; 0x34
 8020acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8020ad0:	464b      	mov	r3, r9
 8020ad2:	f44f 7249 	mov.w	r2, #804	; 0x324
 8020ad6:	490e      	ldr	r1, [pc, #56]	; (8020b10 <ip4_frag+0x210>)
 8020ad8:	480c      	ldr	r0, [pc, #48]	; (8020b0c <ip4_frag+0x20c>)
 8020ada:	f001 fcf3 	bl	80224c4 <iprintf>
 8020ade:	e758      	b.n	8020992 <ip4_frag+0x92>
      tmp = tmp | IP_MF;
 8020ae0:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8020ae4:	e7ac      	b.n	8020a40 <ip4_frag+0x140>
    return ERR_VAL;
 8020ae6:	f06f 0005 	mvn.w	r0, #5
 8020aea:	e7ee      	b.n	8020aca <ip4_frag+0x1ca>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8020aec:	4b09      	ldr	r3, [pc, #36]	; (8020b14 <ip4_frag+0x214>)
 8020aee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8020af2:	4909      	ldr	r1, [pc, #36]	; (8020b18 <ip4_frag+0x218>)
 8020af4:	4805      	ldr	r0, [pc, #20]	; (8020b0c <ip4_frag+0x20c>)
 8020af6:	f001 fce5 	bl	80224c4 <iprintf>
 8020afa:	f06f 0005 	mvn.w	r0, #5
 8020afe:	e7e4      	b.n	8020aca <ip4_frag+0x1ca>
 8020b00:	0802041d 	.word	0x0802041d
 8020b04:	2002e08c 	.word	0x2002e08c
 8020b08:	08041b88 	.word	0x08041b88
 8020b0c:	08028d24 	.word	0x08028d24
 8020b10:	08041b68 	.word	0x08041b68
 8020b14:	08041a14 	.word	0x08041a14
 8020b18:	08041b4c 	.word	0x08041b4c

08020b1c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8020b1c:	8943      	ldrh	r3, [r0, #10]
 8020b1e:	2b0e      	cmp	r3, #14
{
 8020b20:	b570      	push	{r4, r5, r6, lr}
 8020b22:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8020b24:	d91b      	bls.n	8020b5e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8020b26:	7bc3      	ldrb	r3, [r0, #15]
 8020b28:	460d      	mov	r5, r1
 8020b2a:	b91b      	cbnz	r3, 8020b34 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8020b2c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8020b30:	3301      	adds	r3, #1
 8020b32:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020b34:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8020b36:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8020b38:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8020b3a:	07d9      	lsls	r1, r3, #31
 8020b3c:	d50a      	bpl.n	8020b54 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8020b3e:	2b01      	cmp	r3, #1
 8020b40:	d039      	beq.n	8020bb6 <ethernet_input+0x9a>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8020b42:	2206      	movs	r2, #6
 8020b44:	4924      	ldr	r1, [pc, #144]	; (8020bd8 <ethernet_input+0xbc>)
 8020b46:	f000 fd15 	bl	8021574 <memcmp>
 8020b4a:	b918      	cbnz	r0, 8020b54 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8020b4c:	7b63      	ldrb	r3, [r4, #13]
 8020b4e:	f043 0308 	orr.w	r3, r3, #8
 8020b52:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8020b54:	2e08      	cmp	r6, #8
 8020b56:	d01f      	beq.n	8020b98 <ethernet_input+0x7c>
 8020b58:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8020b5c:	d00b      	beq.n	8020b76 <ethernet_input+0x5a>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8020b5e:	4b1f      	ldr	r3, [pc, #124]	; (8020bdc <ethernet_input+0xc0>)
 8020b60:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8020b62:	8bda      	ldrh	r2, [r3, #30]
      ETHARP_STATS_INC(etharp.proterr);
 8020b64:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 8020b66:	3201      	adds	r2, #1
      ETHARP_STATS_INC(etharp.proterr);
 8020b68:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8020b6a:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8020b6c:	4620      	mov	r0, r4
 8020b6e:	f7f7 fb91 	bl	8018294 <pbuf_free>
  return ERR_OK;
}
 8020b72:	2000      	movs	r0, #0
 8020b74:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020b76:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8020b7a:	071b      	lsls	r3, r3, #28
 8020b7c:	d5f6      	bpl.n	8020b6c <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020b7e:	210e      	movs	r1, #14
 8020b80:	4620      	mov	r0, r4
 8020b82:	f7f7 fb4b 	bl	801821c <pbuf_remove_header>
 8020b86:	b308      	cbz	r0, 8020bcc <ethernet_input+0xb0>
        ETHARP_STATS_INC(etharp.lenerr);
 8020b88:	4b14      	ldr	r3, [pc, #80]	; (8020bdc <ethernet_input+0xc0>)
 8020b8a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8020b8c:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 8020b8e:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 8020b90:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 8020b92:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8020b94:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8020b96:	e7e9      	b.n	8020b6c <ethernet_input+0x50>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020b98:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8020b9c:	071a      	lsls	r2, r3, #28
 8020b9e:	d5e5      	bpl.n	8020b6c <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020ba0:	210e      	movs	r1, #14
 8020ba2:	4620      	mov	r0, r4
 8020ba4:	f7f7 fb3a 	bl	801821c <pbuf_remove_header>
 8020ba8:	2800      	cmp	r0, #0
 8020baa:	d1df      	bne.n	8020b6c <ethernet_input+0x50>
        ip4_input(p, netif);
 8020bac:	4629      	mov	r1, r5
 8020bae:	4620      	mov	r0, r4
 8020bb0:	f7ff f86e 	bl	801fc90 <ip4_input>
      break;
 8020bb4:	e7dd      	b.n	8020b72 <ethernet_input+0x56>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020bb6:	7843      	ldrb	r3, [r0, #1]
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	d1cb      	bne.n	8020b54 <ethernet_input+0x38>
 8020bbc:	7883      	ldrb	r3, [r0, #2]
 8020bbe:	2b5e      	cmp	r3, #94	; 0x5e
 8020bc0:	d1c8      	bne.n	8020b54 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8020bc2:	7b63      	ldrb	r3, [r4, #13]
 8020bc4:	f043 0310 	orr.w	r3, r3, #16
 8020bc8:	7363      	strb	r3, [r4, #13]
 8020bca:	e7c3      	b.n	8020b54 <ethernet_input+0x38>
        etharp_input(p, netif);
 8020bcc:	4629      	mov	r1, r5
 8020bce:	4620      	mov	r0, r4
 8020bd0:	f7fe fbe0 	bl	801f394 <etharp_input>
      break;
 8020bd4:	e7cd      	b.n	8020b72 <ethernet_input+0x56>
 8020bd6:	bf00      	nop
 8020bd8:	08041c04 	.word	0x08041c04
 8020bdc:	2002e08c 	.word	0x2002e08c

08020be0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020be4:	460c      	mov	r4, r1
 8020be6:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8020be8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8020bec:	4616      	mov	r6, r2
 8020bee:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8020bf0:	f7f5 fcfc 	bl	80165ec <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8020bf4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8020bf6:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8020bf8:	4620      	mov	r0, r4
 8020bfa:	f7f7 fb0b 	bl	8018214 <pbuf_add_header>
 8020bfe:	b9e0      	cbnz	r0, 8020c3a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8020c00:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8020c02:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8020c06:	683b      	ldr	r3, [r7, #0]
 8020c08:	600b      	str	r3, [r1, #0]
 8020c0a:	88bb      	ldrh	r3, [r7, #4]
 8020c0c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8020c0e:	6833      	ldr	r3, [r6, #0]
 8020c10:	f8c1 3006 	str.w	r3, [r1, #6]
 8020c14:	88b3      	ldrh	r3, [r6, #4]
 8020c16:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8020c18:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8020c1c:	2b06      	cmp	r3, #6
 8020c1e:	d006      	beq.n	8020c2e <ethernet_output+0x4e>
 8020c20:	4b0a      	ldr	r3, [pc, #40]	; (8020c4c <ethernet_output+0x6c>)
 8020c22:	f44f 7299 	mov.w	r2, #306	; 0x132
 8020c26:	490a      	ldr	r1, [pc, #40]	; (8020c50 <ethernet_output+0x70>)
 8020c28:	480a      	ldr	r0, [pc, #40]	; (8020c54 <ethernet_output+0x74>)
 8020c2a:	f001 fc4b 	bl	80224c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8020c2e:	4621      	mov	r1, r4
 8020c30:	69ab      	ldr	r3, [r5, #24]
 8020c32:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8020c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8020c38:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 8020c3a:	4a07      	ldr	r2, [pc, #28]	; (8020c58 <ethernet_output+0x78>)
}
 8020c3c:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 8020c40:	8953      	ldrh	r3, [r2, #10]
 8020c42:	3301      	adds	r3, #1
 8020c44:	8153      	strh	r3, [r2, #10]
}
 8020c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c4a:	bf00      	nop
 8020c4c:	08041b98 	.word	0x08041b98
 8020c50:	08041bd0 	.word	0x08041bd0
 8020c54:	08028d24 	.word	0x08028d24
 8020c58:	2002e08c 	.word	0x2002e08c

08020c5c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8020c5c:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8020c5e:	2300      	movs	r3, #0
{
 8020c60:	b085      	sub	sp, #20
 8020c62:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8020c64:	2204      	movs	r2, #4
{
 8020c66:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8020c68:	4619      	mov	r1, r3
 8020c6a:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8020c6c:	9201      	str	r2, [sp, #4]
 8020c6e:	9500      	str	r5, [sp, #0]
 8020c70:	e9cd 3302 	strd	r3, r3, [sp, #8]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8020c74:	f7f1 ff9c 	bl	8012bb0 <osMessageCreate>
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 8020c78:	4a0a      	ldr	r2, [pc, #40]	; (8020ca4 <sys_mbox_new+0x48>)
 8020c7a:	f8b2 3100 	ldrh.w	r3, [r2, #256]	; 0x100
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 8020c7e:	f8b2 1102 	ldrh.w	r1, [r2, #258]	; 0x102
  ++lwip_stats.sys.mbox.used;
 8020c82:	3301      	adds	r3, #1
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8020c84:	6020      	str	r0, [r4, #0]
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8020c86:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 8020c8a:	b29b      	uxth	r3, r3
  if(*mbox == NULL)
 8020c8c:	0940      	lsrs	r0, r0, #5
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 8020c8e:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 8020c90:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
    return ERR_MEM;

  return ERR_OK;
}
 8020c94:	f1c0 0000 	rsb	r0, r0, #0
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 8020c98:	bf38      	it	cc
 8020c9a:	f8a2 3102 	strhcc.w	r3, [r2, #258]	; 0x102
}
 8020c9e:	b005      	add	sp, #20
 8020ca0:	bd30      	pop	{r4, r5, pc}
 8020ca2:	bf00      	nop
 8020ca4:	2002e08c 	.word	0x2002e08c

08020ca8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8020ca8:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8020caa:	2200      	movs	r2, #0
 8020cac:	6800      	ldr	r0, [r0, #0]
 8020cae:	f7f1 ff93 	bl	8012bd8 <osMessagePut>
 8020cb2:	b900      	cbnz	r0, 8020cb6 <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8020cb4:	bd08      	pop	{r3, pc}
    lwip_stats.sys.mbox.err++;
 8020cb6:	4a04      	ldr	r2, [pc, #16]	; (8020cc8 <sys_mbox_trypost+0x20>)
 8020cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8020cbc:	f8b2 3104 	ldrh.w	r3, [r2, #260]	; 0x104
 8020cc0:	3301      	adds	r3, #1
 8020cc2:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
}
 8020cc6:	bd08      	pop	{r3, pc}
 8020cc8:	2002e08c 	.word	0x2002e08c

08020ccc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8020ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020cce:	4614      	mov	r4, r2
 8020cd0:	b085      	sub	sp, #20
 8020cd2:	4605      	mov	r5, r0
 8020cd4:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8020cd6:	f7f1 fe5b 	bl	8012990 <osKernelSysTick>
 8020cda:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8020cdc:	b15c      	cbz	r4, 8020cf6 <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8020cde:	4622      	mov	r2, r4
 8020ce0:	6829      	ldr	r1, [r5, #0]
 8020ce2:	a801      	add	r0, sp, #4
 8020ce4:	f7f1 ffa4 	bl	8012c30 <osMessageGet>

    if(event.status == osEventMessage)
 8020ce8:	9b01      	ldr	r3, [sp, #4]
 8020cea:	2b10      	cmp	r3, #16
 8020cec:	d009      	beq.n	8020d02 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020cee:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8020cf2:	b005      	add	sp, #20
 8020cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8020cf6:	6829      	ldr	r1, [r5, #0]
 8020cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8020cfc:	a801      	add	r0, sp, #4
 8020cfe:	f7f1 ff97 	bl	8012c30 <osMessageGet>
    *msg = (void *)event.value.v;
 8020d02:	9b02      	ldr	r3, [sp, #8]
 8020d04:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8020d06:	f7f1 fe43 	bl	8012990 <osKernelSysTick>
 8020d0a:	1b80      	subs	r0, r0, r6
}
 8020d0c:	b005      	add	sp, #20
 8020d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020d10 <sys_mbox_valid>:
 8020d10:	6800      	ldr	r0, [r0, #0]
 8020d12:	3800      	subs	r0, #0
 8020d14:	bf18      	it	ne
 8020d16:	2001      	movne	r0, #1
 8020d18:	4770      	bx	lr
 8020d1a:	bf00      	nop

08020d1c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8020d1c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8020d1e:	4803      	ldr	r0, [pc, #12]	; (8020d2c <sys_init+0x10>)
 8020d20:	f7f1 fe96 	bl	8012a50 <osMutexCreate>
 8020d24:	4b02      	ldr	r3, [pc, #8]	; (8020d30 <sys_init+0x14>)
 8020d26:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8020d28:	bd08      	pop	{r3, pc}
 8020d2a:	bf00      	nop
 8020d2c:	08041c14 	.word	0x08041c14
 8020d30:	2002e1ec 	.word	0x2002e1ec

08020d34 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020d34:	b530      	push	{r4, r5, lr}
 8020d36:	b083      	sub	sp, #12
 8020d38:	4605      	mov	r5, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8020d3a:	2400      	movs	r4, #0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8020d3c:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8020d3e:	e9cd 4400 	strd	r4, r4, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8020d42:	f7f1 fe85 	bl	8012a50 <osMutexCreate>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 8020d46:	4a0d      	ldr	r2, [pc, #52]	; (8020d7c <sys_mutex_new+0x48>)
  *mutex = osMutexCreate(osMutex(MUTEX));
 8020d48:	6028      	str	r0, [r5, #0]
  if(*mutex == NULL)
 8020d4a:	b170      	cbz	r0, 8020d6a <sys_mutex_new+0x36>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 8020d4c:	f8b2 30fa 	ldrh.w	r3, [r2, #250]	; 0xfa
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8020d50:	4620      	mov	r0, r4
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8020d52:	f8b2 10fc 	ldrh.w	r1, [r2, #252]	; 0xfc
  ++lwip_stats.sys.mutex.used;
 8020d56:	3301      	adds	r3, #1
 8020d58:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8020d5a:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 8020d5c:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 8020d60:	bf38      	it	cc
 8020d62:	f8a2 30fc 	strhcc.w	r3, [r2, #252]	; 0xfc
}
 8020d66:	b003      	add	sp, #12
 8020d68:	bd30      	pop	{r4, r5, pc}
    ++lwip_stats.sys.mutex.err;
 8020d6a:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 8020d6e:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 8020d72:	3301      	adds	r3, #1
 8020d74:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 8020d78:	e7f5      	b.n	8020d66 <sys_mutex_new+0x32>
 8020d7a:	bf00      	nop
 8020d7c:	2002e08c 	.word	0x2002e08c

08020d80 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8020d80:	f04f 31ff 	mov.w	r1, #4294967295
 8020d84:	6800      	ldr	r0, [r0, #0]
 8020d86:	f7f1 be6b 	b.w	8012a60 <osMutexWait>
 8020d8a:	bf00      	nop

08020d8c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8020d8c:	6800      	ldr	r0, [r0, #0]
 8020d8e:	f7f1 be93 	b.w	8012ab8 <osMutexRelease>
 8020d92:	bf00      	nop

08020d94 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8020d94:	b530      	push	{r4, r5, lr}
 8020d96:	b089      	sub	sp, #36	; 0x24
 8020d98:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8020d9a:	2400      	movs	r4, #0
  return osThreadCreate(&os_thread_def, arg);
 8020d9c:	4611      	mov	r1, r2
{
 8020d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8020da0:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 8020da2:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8020da4:	9502      	str	r5, [sp, #8]
 8020da6:	9305      	str	r3, [sp, #20]
 8020da8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8020dac:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8020db0:	f8ad 200c 	strh.w	r2, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8020db4:	f7f1 fdf4 	bl	80129a0 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8020db8:	b009      	add	sp, #36	; 0x24
 8020dba:	bd30      	pop	{r4, r5, pc}

08020dbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8020dbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	4917      	ldr	r1, [pc, #92]	; (8020e20 <MX_USB_DEVICE_Init+0x64>)
 8020dc2:	4818      	ldr	r0, [pc, #96]	; (8020e24 <MX_USB_DEVICE_Init+0x68>)
 8020dc4:	f7f1 f952 	bl	801206c <USBD_Init>
 8020dc8:	b970      	cbnz	r0, 8020de8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8020dca:	4917      	ldr	r1, [pc, #92]	; (8020e28 <MX_USB_DEVICE_Init+0x6c>)
 8020dcc:	4815      	ldr	r0, [pc, #84]	; (8020e24 <MX_USB_DEVICE_Init+0x68>)
 8020dce:	f7f1 f965 	bl	801209c <USBD_RegisterClass>
 8020dd2:	b988      	cbnz	r0, 8020df8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8020dd4:	4915      	ldr	r1, [pc, #84]	; (8020e2c <MX_USB_DEVICE_Init+0x70>)
 8020dd6:	4813      	ldr	r0, [pc, #76]	; (8020e24 <MX_USB_DEVICE_Init+0x68>)
 8020dd8:	f7f1 f914 	bl	8012004 <USBD_CDC_RegisterInterface>
 8020ddc:	b9a0      	cbnz	r0, 8020e08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8020dde:	4811      	ldr	r0, [pc, #68]	; (8020e24 <MX_USB_DEVICE_Init+0x68>)
 8020de0:	f7f1 f972 	bl	80120c8 <USBD_Start>
 8020de4:	b9b8      	cbnz	r0, 8020e16 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8020de6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8020de8:	f7e1 fed4 	bl	8002b94 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8020dec:	490e      	ldr	r1, [pc, #56]	; (8020e28 <MX_USB_DEVICE_Init+0x6c>)
 8020dee:	480d      	ldr	r0, [pc, #52]	; (8020e24 <MX_USB_DEVICE_Init+0x68>)
 8020df0:	f7f1 f954 	bl	801209c <USBD_RegisterClass>
 8020df4:	2800      	cmp	r0, #0
 8020df6:	d0ed      	beq.n	8020dd4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8020df8:	f7e1 fecc 	bl	8002b94 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8020dfc:	490b      	ldr	r1, [pc, #44]	; (8020e2c <MX_USB_DEVICE_Init+0x70>)
 8020dfe:	4809      	ldr	r0, [pc, #36]	; (8020e24 <MX_USB_DEVICE_Init+0x68>)
 8020e00:	f7f1 f900 	bl	8012004 <USBD_CDC_RegisterInterface>
 8020e04:	2800      	cmp	r0, #0
 8020e06:	d0ea      	beq.n	8020dde <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8020e08:	f7e1 fec4 	bl	8002b94 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8020e0c:	4805      	ldr	r0, [pc, #20]	; (8020e24 <MX_USB_DEVICE_Init+0x68>)
 8020e0e:	f7f1 f95b 	bl	80120c8 <USBD_Start>
 8020e12:	2800      	cmp	r0, #0
 8020e14:	d0e7      	beq.n	8020de6 <MX_USB_DEVICE_Init+0x2a>
}
 8020e16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8020e1a:	f7e1 bebb 	b.w	8002b94 <Error_Handler>
 8020e1e:	bf00      	nop
 8020e20:	20000420 	.word	0x20000420
 8020e24:	2002e1f0 	.word	0x2002e1f0
 8020e28:	200002f0 	.word	0x200002f0
 8020e2c:	2000040c 	.word	0x2000040c

08020e30 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8020e30:	2000      	movs	r0, #0
 8020e32:	4770      	bx	lr

08020e34 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8020e34:	2000      	movs	r0, #0
 8020e36:	4770      	bx	lr

08020e38 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8020e38:	2000      	movs	r0, #0
 8020e3a:	4770      	bx	lr

08020e3c <CDC_Receive_FS>:
{
 8020e3c:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8020e3e:	4c05      	ldr	r4, [pc, #20]	; (8020e54 <CDC_Receive_FS+0x18>)
{
 8020e40:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8020e42:	4620      	mov	r0, r4
 8020e44:	f7f1 f8f0 	bl	8012028 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8020e48:	4620      	mov	r0, r4
 8020e4a:	f7f1 f8f5 	bl	8012038 <USBD_CDC_ReceivePacket>
}
 8020e4e:	2000      	movs	r0, #0
 8020e50:	bd10      	pop	{r4, pc}
 8020e52:	bf00      	nop
 8020e54:	2002e1f0 	.word	0x2002e1f0

08020e58 <CDC_Init_FS>:
{
 8020e58:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8020e5a:	4c06      	ldr	r4, [pc, #24]	; (8020e74 <CDC_Init_FS+0x1c>)
 8020e5c:	2200      	movs	r2, #0
 8020e5e:	4906      	ldr	r1, [pc, #24]	; (8020e78 <CDC_Init_FS+0x20>)
 8020e60:	4620      	mov	r0, r4
 8020e62:	f7f1 f8d7 	bl	8012014 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8020e66:	4620      	mov	r0, r4
 8020e68:	4904      	ldr	r1, [pc, #16]	; (8020e7c <CDC_Init_FS+0x24>)
 8020e6a:	f7f1 f8dd 	bl	8012028 <USBD_CDC_SetRxBuffer>
}
 8020e6e:	2000      	movs	r0, #0
 8020e70:	bd10      	pop	{r4, pc}
 8020e72:	bf00      	nop
 8020e74:	2002e1f0 	.word	0x2002e1f0
 8020e78:	2002ecc0 	.word	0x2002ecc0
 8020e7c:	2002e4c0 	.word	0x2002e4c0

08020e80 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8020e80:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8020e82:	4801      	ldr	r0, [pc, #4]	; (8020e88 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8020e84:	800b      	strh	r3, [r1, #0]
}
 8020e86:	4770      	bx	lr
 8020e88:	2000044c 	.word	0x2000044c

08020e8c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8020e8c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8020e8e:	4801      	ldr	r0, [pc, #4]	; (8020e94 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8020e90:	800b      	strh	r3, [r1, #0]
}
 8020e92:	4770      	bx	lr
 8020e94:	20000460 	.word	0x20000460

08020e98 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8020e98:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8020e9a:	4801      	ldr	r0, [pc, #4]	; (8020ea0 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8020e9c:	800b      	strh	r3, [r1, #0]
}
 8020e9e:	4770      	bx	lr
 8020ea0:	20000440 	.word	0x20000440

08020ea4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8020ea4:	b4f0      	push	{r4, r5, r6, r7}
 8020ea6:	2400      	movs	r4, #0
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8020ea8:	0052      	lsls	r2, r2, #1
 8020eaa:	1c4e      	adds	r6, r1, #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8020eac:	4627      	mov	r7, r4
    if (((value >> 28)) < 0xA)
 8020eae:	0f03      	lsrs	r3, r0, #28
 8020eb0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    value = value << 4;
 8020eb4:	ea4f 1000 	mov.w	r0, r0, lsl #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8020eb8:	f103 0530 	add.w	r5, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8020ebc:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8020ec0:	bf34      	ite	cc
 8020ec2:	550d      	strbcc	r5, [r1, r4]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8020ec4:	550b      	strbcs	r3, [r1, r4]
    pbuf[2 * idx + 1] = 0;
 8020ec6:	5537      	strb	r7, [r6, r4]
 8020ec8:	3402      	adds	r4, #2
  for (idx = 0; idx < len; idx++)
 8020eca:	42a2      	cmp	r2, r4
 8020ecc:	d1ef      	bne.n	8020eae <IntToUnicode+0xa>
  }
}
 8020ece:	bcf0      	pop	{r4, r5, r6, r7}
 8020ed0:	4770      	bx	lr
 8020ed2:	bf00      	nop

08020ed4 <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8020ed4:	480b      	ldr	r0, [pc, #44]	; (8020f04 <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 8020ed6:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8020ed8:	4b0b      	ldr	r3, [pc, #44]	; (8020f08 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8020eda:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 8020edc:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8020ede:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 8020ee0:	18c0      	adds	r0, r0, r3
 8020ee2:	d101      	bne.n	8020ee8 <USBD_FS_SerialStrDescriptor+0x14>
}
 8020ee4:	4809      	ldr	r0, [pc, #36]	; (8020f0c <USBD_FS_SerialStrDescriptor+0x38>)
 8020ee6:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020ee8:	4b09      	ldr	r3, [pc, #36]	; (8020f10 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8020eea:	2208      	movs	r2, #8
 8020eec:	4909      	ldr	r1, [pc, #36]	; (8020f14 <USBD_FS_SerialStrDescriptor+0x40>)
{
 8020eee:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020ef0:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8020ef2:	f7ff ffd7 	bl	8020ea4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8020ef6:	2204      	movs	r2, #4
 8020ef8:	4907      	ldr	r1, [pc, #28]	; (8020f18 <USBD_FS_SerialStrDescriptor+0x44>)
 8020efa:	4620      	mov	r0, r4
 8020efc:	f7ff ffd2 	bl	8020ea4 <IntToUnicode>
}
 8020f00:	4802      	ldr	r0, [pc, #8]	; (8020f0c <USBD_FS_SerialStrDescriptor+0x38>)
 8020f02:	bd10      	pop	{r4, pc}
 8020f04:	1ff0f420 	.word	0x1ff0f420
 8020f08:	1ff0f428 	.word	0x1ff0f428
 8020f0c:	20000464 	.word	0x20000464
 8020f10:	1ff0f424 	.word	0x1ff0f424
 8020f14:	20000466 	.word	0x20000466
 8020f18:	20000476 	.word	0x20000476

08020f1c <USBD_FS_ManufacturerStrDescriptor>:
{
 8020f1c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8020f1e:	4c04      	ldr	r4, [pc, #16]	; (8020f30 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8020f20:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8020f22:	4804      	ldr	r0, [pc, #16]	; (8020f34 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8020f24:	4621      	mov	r1, r4
 8020f26:	f7f1 fc9b 	bl	8012860 <USBD_GetString>
}
 8020f2a:	4620      	mov	r0, r4
 8020f2c:	bd10      	pop	{r4, pc}
 8020f2e:	bf00      	nop
 8020f30:	2002f4c0 	.word	0x2002f4c0
 8020f34:	08041c1c 	.word	0x08041c1c

08020f38 <USBD_FS_ProductStrDescriptor>:
{
 8020f38:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020f3a:	4c04      	ldr	r4, [pc, #16]	; (8020f4c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8020f3c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020f3e:	4804      	ldr	r0, [pc, #16]	; (8020f50 <USBD_FS_ProductStrDescriptor+0x18>)
 8020f40:	4621      	mov	r1, r4
 8020f42:	f7f1 fc8d 	bl	8012860 <USBD_GetString>
}
 8020f46:	4620      	mov	r0, r4
 8020f48:	bd10      	pop	{r4, pc}
 8020f4a:	bf00      	nop
 8020f4c:	2002f4c0 	.word	0x2002f4c0
 8020f50:	08041c30 	.word	0x08041c30

08020f54 <USBD_FS_ConfigStrDescriptor>:
{
 8020f54:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8020f56:	4c04      	ldr	r4, [pc, #16]	; (8020f68 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8020f58:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8020f5a:	4804      	ldr	r0, [pc, #16]	; (8020f6c <USBD_FS_ConfigStrDescriptor+0x18>)
 8020f5c:	4621      	mov	r1, r4
 8020f5e:	f7f1 fc7f 	bl	8012860 <USBD_GetString>
}
 8020f62:	4620      	mov	r0, r4
 8020f64:	bd10      	pop	{r4, pc}
 8020f66:	bf00      	nop
 8020f68:	2002f4c0 	.word	0x2002f4c0
 8020f6c:	08041c48 	.word	0x08041c48

08020f70 <USBD_FS_InterfaceStrDescriptor>:
{
 8020f70:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020f72:	4c04      	ldr	r4, [pc, #16]	; (8020f84 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8020f74:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020f76:	4804      	ldr	r0, [pc, #16]	; (8020f88 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8020f78:	4621      	mov	r1, r4
 8020f7a:	f7f1 fc71 	bl	8012860 <USBD_GetString>
}
 8020f7e:	4620      	mov	r0, r4
 8020f80:	bd10      	pop	{r4, pc}
 8020f82:	bf00      	nop
 8020f84:	2002f4c0 	.word	0x2002f4c0
 8020f88:	08041c54 	.word	0x08041c54

08020f8c <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8020f8c:	6803      	ldr	r3, [r0, #0]
{
 8020f8e:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8020f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8020f94:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020f96:	f04f 0400 	mov.w	r4, #0
 8020f9a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8020f9e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8020fa2:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8020fa4:	d001      	beq.n	8020faa <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8020fa6:	b009      	add	sp, #36	; 0x24
 8020fa8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020faa:	4d1e      	ldr	r5, [pc, #120]	; (8021024 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8020fac:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020fb0:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020fb2:	2003      	movs	r0, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020fb4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8020fb6:	f043 0301 	orr.w	r3, r3, #1
 8020fba:	632b      	str	r3, [r5, #48]	; 0x30
 8020fbc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020fbe:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020fc0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020fc4:	4818      	ldr	r0, [pc, #96]	; (8021028 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020fc6:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020fc8:	9300      	str	r3, [sp, #0]
 8020fca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020fcc:	e9cd 1203 	strd	r1, r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8020fd0:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020fd2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8020fd4:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020fd6:	f7e8 f9f5 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8020fda:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8020fde:	a903      	add	r1, sp, #12
 8020fe0:	4811      	ldr	r0, [pc, #68]	; (8021028 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8020fe2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020fe4:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8020fe8:	f7e8 f9ec 	bl	80093c4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020fec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8020fee:	4622      	mov	r2, r4
 8020ff0:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8020ff6:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020ff8:	636b      	str	r3, [r5, #52]	; 0x34
 8020ffa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8020ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021000:	9301      	str	r3, [sp, #4]
 8021002:	9b01      	ldr	r3, [sp, #4]
 8021004:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8021006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802100a:	646b      	str	r3, [r5, #68]	; 0x44
 802100c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 802100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021012:	9302      	str	r3, [sp, #8]
 8021014:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8021016:	f7e5 ff0b 	bl	8006e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802101a:	2043      	movs	r0, #67	; 0x43
 802101c:	f7e5 ff52 	bl	8006ec4 <HAL_NVIC_EnableIRQ>
}
 8021020:	b009      	add	sp, #36	; 0x24
 8021022:	bd30      	pop	{r4, r5, pc}
 8021024:	40023800 	.word	0x40023800
 8021028:	40020000 	.word	0x40020000

0802102c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802102c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8021030:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021034:	f7f1 b85a 	b.w	80120ec <USBD_LL_SetupStage>

08021038 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8021038:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 802103c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021040:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021044:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8021048:	f7f1 b87e 	b.w	8012148 <USBD_LL_DataOutStage>

0802104c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802104c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8021050:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021054:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021058:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802105a:	f7f1 b8ab 	b.w	80121b4 <USBD_LL_DataInStage>
 802105e:	bf00      	nop

08021060 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8021060:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021064:	f7f1 b93c 	b.w	80122e0 <USBD_LL_SOF>

08021068 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8021068:	68c1      	ldr	r1, [r0, #12]
{
 802106a:	b510      	push	{r4, lr}
 802106c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802106e:	b111      	cbz	r1, 8021076 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8021070:	2902      	cmp	r1, #2
 8021072:	d10a      	bne.n	802108a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8021074:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8021076:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 802107a:	f7f1 f919 	bl	80122b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802107e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8021082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021086:	f7f1 b8eb 	b.w	8012260 <USBD_LL_Reset>
    Error_Handler();
 802108a:	f7e1 fd83 	bl	8002b94 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802108e:	2101      	movs	r1, #1
 8021090:	e7f1      	b.n	8021076 <HAL_PCD_ResetCallback+0xe>
 8021092:	bf00      	nop

08021094 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021094:	b510      	push	{r4, lr}
 8021096:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8021098:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 802109c:	f7f1 f90c 	bl	80122b8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80210a0:	6822      	ldr	r2, [r4, #0]
 80210a2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80210a6:	f043 0301 	orr.w	r3, r3, #1
 80210aa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80210ae:	6a23      	ldr	r3, [r4, #32]
 80210b0:	b123      	cbz	r3, 80210bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80210b2:	4a03      	ldr	r2, [pc, #12]	; (80210c0 <HAL_PCD_SuspendCallback+0x2c>)
 80210b4:	6913      	ldr	r3, [r2, #16]
 80210b6:	f043 0306 	orr.w	r3, r3, #6
 80210ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80210bc:	bd10      	pop	{r4, pc}
 80210be:	bf00      	nop
 80210c0:	e000ed00 	.word	0xe000ed00

080210c4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80210c4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80210c8:	f7f1 b900 	b.w	80122cc <USBD_LL_Resume>

080210cc <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80210cc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80210d0:	f7f1 b916 	b.w	8012300 <USBD_LL_IsoOUTIncomplete>

080210d4 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80210d4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80210d8:	f7f1 b910 	b.w	80122fc <USBD_LL_IsoINIncomplete>

080210dc <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80210dc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80210e0:	f7f1 b910 	b.w	8012304 <USBD_LL_DevConnected>

080210e4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80210e4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80210e8:	f7f1 b90e 	b.w	8012308 <USBD_LL_DevDisconnected>

080210ec <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80210ec:	7802      	ldrb	r2, [r0, #0]
 80210ee:	b10a      	cbz	r2, 80210f4 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80210f0:	2000      	movs	r0, #0
 80210f2:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 80210f4:	4b15      	ldr	r3, [pc, #84]	; (802114c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80210f6:	2101      	movs	r1, #1
{
 80210f8:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80210fa:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80210fc:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8021100:	2506      	movs	r5, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8021102:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8021106:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 802110a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 802110c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 802110e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8021110:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8021112:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8021114:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8021118:	e9c3 6500 	strd	r6, r5, [r3]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 802111c:	e9c3 4106 	strd	r4, r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8021120:	f7e9 f90e 	bl	800a340 <HAL_PCD_Init>
 8021124:	b978      	cbnz	r0, 8021146 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8021126:	2180      	movs	r1, #128	; 0x80
 8021128:	4808      	ldr	r0, [pc, #32]	; (802114c <USBD_LL_Init+0x60>)
 802112a:	f7e9 fe6f 	bl	800ae0c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802112e:	2240      	movs	r2, #64	; 0x40
 8021130:	2100      	movs	r1, #0
 8021132:	4806      	ldr	r0, [pc, #24]	; (802114c <USBD_LL_Init+0x60>)
 8021134:	f7e9 fe46 	bl	800adc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8021138:	2280      	movs	r2, #128	; 0x80
 802113a:	2101      	movs	r1, #1
 802113c:	4803      	ldr	r0, [pc, #12]	; (802114c <USBD_LL_Init+0x60>)
 802113e:	f7e9 fe41 	bl	800adc4 <HAL_PCDEx_SetTxFiFo>
}
 8021142:	2000      	movs	r0, #0
 8021144:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8021146:	f7e1 fd25 	bl	8002b94 <Error_Handler>
 802114a:	e7ec      	b.n	8021126 <USBD_LL_Init+0x3a>
 802114c:	2002f6c0 	.word	0x2002f6c0

08021150 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8021150:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021154:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8021156:	f7e9 f9a1 	bl	800a49c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 802115a:	2803      	cmp	r0, #3
 802115c:	d802      	bhi.n	8021164 <USBD_LL_Start+0x14>
 802115e:	4b02      	ldr	r3, [pc, #8]	; (8021168 <USBD_LL_Start+0x18>)
 8021160:	5c18      	ldrb	r0, [r3, r0]
}
 8021162:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8021164:	2003      	movs	r0, #3
}
 8021166:	bd08      	pop	{r3, pc}
 8021168:	08041c64 	.word	0x08041c64

0802116c <USBD_LL_OpenEP>:
{
 802116c:	b510      	push	{r4, lr}
 802116e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021170:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021174:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021176:	4623      	mov	r3, r4
 8021178:	f7e9 fce0 	bl	800ab3c <HAL_PCD_EP_Open>
  switch (hal_status)
 802117c:	2803      	cmp	r0, #3
 802117e:	d802      	bhi.n	8021186 <USBD_LL_OpenEP+0x1a>
 8021180:	4b02      	ldr	r3, [pc, #8]	; (802118c <USBD_LL_OpenEP+0x20>)
 8021182:	5c18      	ldrb	r0, [r3, r0]
}
 8021184:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021186:	2003      	movs	r0, #3
}
 8021188:	bd10      	pop	{r4, pc}
 802118a:	bf00      	nop
 802118c:	08041c64 	.word	0x08041c64

08021190 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021190:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021194:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021196:	f7e9 fd0b 	bl	800abb0 <HAL_PCD_EP_Close>
  switch (hal_status)
 802119a:	2803      	cmp	r0, #3
 802119c:	d802      	bhi.n	80211a4 <USBD_LL_CloseEP+0x14>
 802119e:	4b02      	ldr	r3, [pc, #8]	; (80211a8 <USBD_LL_CloseEP+0x18>)
 80211a0:	5c18      	ldrb	r0, [r3, r0]
}
 80211a2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80211a4:	2003      	movs	r0, #3
}
 80211a6:	bd08      	pop	{r3, pc}
 80211a8:	08041c64 	.word	0x08041c64

080211ac <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80211ac:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80211b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80211b2:	f7e9 fd87 	bl	800acc4 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80211b6:	2803      	cmp	r0, #3
 80211b8:	d802      	bhi.n	80211c0 <USBD_LL_StallEP+0x14>
 80211ba:	4b02      	ldr	r3, [pc, #8]	; (80211c4 <USBD_LL_StallEP+0x18>)
 80211bc:	5c18      	ldrb	r0, [r3, r0]
}
 80211be:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80211c0:	2003      	movs	r0, #3
}
 80211c2:	bd08      	pop	{r3, pc}
 80211c4:	08041c64 	.word	0x08041c64

080211c8 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80211c8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80211cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80211ce:	f7e9 fdbd 	bl	800ad4c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80211d2:	2803      	cmp	r0, #3
 80211d4:	d802      	bhi.n	80211dc <USBD_LL_ClearStallEP+0x14>
 80211d6:	4b02      	ldr	r3, [pc, #8]	; (80211e0 <USBD_LL_ClearStallEP+0x18>)
 80211d8:	5c18      	ldrb	r0, [r3, r0]
}
 80211da:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80211dc:	2003      	movs	r0, #3
}
 80211de:	bd08      	pop	{r3, pc}
 80211e0:	08041c64 	.word	0x08041c64

080211e4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80211e4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80211e6:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80211ea:	d406      	bmi.n	80211fa <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80211ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80211f0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80211f4:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 80211f8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80211fa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80211fe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8021202:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021206:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 802120a:	4770      	bx	lr

0802120c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802120c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021210:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021212:	f7e9 fc7f 	bl	800ab14 <HAL_PCD_SetAddress>
  switch (hal_status)
 8021216:	2803      	cmp	r0, #3
 8021218:	d802      	bhi.n	8021220 <USBD_LL_SetUSBAddress+0x14>
 802121a:	4b02      	ldr	r3, [pc, #8]	; (8021224 <USBD_LL_SetUSBAddress+0x18>)
 802121c:	5c18      	ldrb	r0, [r3, r0]
}
 802121e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021220:	2003      	movs	r0, #3
}
 8021222:	bd08      	pop	{r3, pc}
 8021224:	08041c64 	.word	0x08041c64

08021228 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021228:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802122c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802122e:	f7e9 fd25 	bl	800ac7c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8021232:	2803      	cmp	r0, #3
 8021234:	d802      	bhi.n	802123c <USBD_LL_Transmit+0x14>
 8021236:	4b02      	ldr	r3, [pc, #8]	; (8021240 <USBD_LL_Transmit+0x18>)
 8021238:	5c18      	ldrb	r0, [r3, r0]
}
 802123a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802123c:	2003      	movs	r0, #3
}
 802123e:	bd08      	pop	{r3, pc}
 8021240:	08041c64 	.word	0x08041c64

08021244 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021244:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021248:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802124a:	f7e9 fce5 	bl	800ac18 <HAL_PCD_EP_Receive>
  switch (hal_status)
 802124e:	2803      	cmp	r0, #3
 8021250:	d802      	bhi.n	8021258 <USBD_LL_PrepareReceive+0x14>
 8021252:	4b02      	ldr	r3, [pc, #8]	; (802125c <USBD_LL_PrepareReceive+0x18>)
 8021254:	5c18      	ldrb	r0, [r3, r0]
}
 8021256:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021258:	2003      	movs	r0, #3
}
 802125a:	bd08      	pop	{r3, pc}
 802125c:	08041c64 	.word	0x08041c64

08021260 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8021260:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8021264:	f7e9 bd00 	b.w	800ac68 <HAL_PCD_EP_GetRxCount>

08021268 <HAL_PCDEx_LPM_Callback>:
{
 8021268:	b510      	push	{r4, lr}
 802126a:	4604      	mov	r4, r0
  switch (msg)
 802126c:	b1a1      	cbz	r1, 8021298 <HAL_PCDEx_LPM_Callback+0x30>
 802126e:	2901      	cmp	r1, #1
 8021270:	d111      	bne.n	8021296 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021272:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8021274:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021278:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 802127c:	f043 0301 	orr.w	r3, r3, #1
 8021280:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8021284:	f7f1 f818 	bl	80122b8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8021288:	6a23      	ldr	r3, [r4, #32]
 802128a:	b123      	cbz	r3, 8021296 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802128c:	4a0e      	ldr	r2, [pc, #56]	; (80212c8 <HAL_PCDEx_LPM_Callback+0x60>)
 802128e:	6913      	ldr	r3, [r2, #16]
 8021290:	f043 0306 	orr.w	r3, r3, #6
 8021294:	6113      	str	r3, [r2, #16]
}
 8021296:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8021298:	6a03      	ldr	r3, [r0, #32]
 802129a:	b963      	cbnz	r3, 80212b6 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802129c:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 802129e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80212a2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80212a6:	f023 0301 	bic.w	r3, r3, #1
}
 80212aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80212ae:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 80212b2:	f7f1 b80b 	b.w	80122cc <USBD_LL_Resume>
  SystemClock_Config();
 80212b6:	f7e1 fc75 	bl	8002ba4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80212ba:	4a03      	ldr	r2, [pc, #12]	; (80212c8 <HAL_PCDEx_LPM_Callback+0x60>)
 80212bc:	6913      	ldr	r3, [r2, #16]
 80212be:	f023 0306 	bic.w	r3, r3, #6
 80212c2:	6113      	str	r3, [r2, #16]
 80212c4:	e7ea      	b.n	802129c <HAL_PCDEx_LPM_Callback+0x34>
 80212c6:	bf00      	nop
 80212c8:	e000ed00 	.word	0xe000ed00

080212cc <atoi>:
 80212cc:	220a      	movs	r2, #10
 80212ce:	2100      	movs	r1, #0
 80212d0:	f002 b928 	b.w	8023524 <strtol>

080212d4 <ctime>:
 80212d4:	b508      	push	{r3, lr}
 80212d6:	f000 f829 	bl	802132c <localtime>
 80212da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80212de:	f002 bcbf 	b.w	8023c60 <asctime>
	...

080212e4 <__libc_init_array>:
 80212e4:	b570      	push	{r4, r5, r6, lr}
 80212e6:	4d0d      	ldr	r5, [pc, #52]	; (802131c <__libc_init_array+0x38>)
 80212e8:	4c0d      	ldr	r4, [pc, #52]	; (8021320 <__libc_init_array+0x3c>)
 80212ea:	1b64      	subs	r4, r4, r5
 80212ec:	10a4      	asrs	r4, r4, #2
 80212ee:	2600      	movs	r6, #0
 80212f0:	42a6      	cmp	r6, r4
 80212f2:	d109      	bne.n	8021308 <__libc_init_array+0x24>
 80212f4:	4d0b      	ldr	r5, [pc, #44]	; (8021324 <__libc_init_array+0x40>)
 80212f6:	4c0c      	ldr	r4, [pc, #48]	; (8021328 <__libc_init_array+0x44>)
 80212f8:	f005 f996 	bl	8026628 <_init>
 80212fc:	1b64      	subs	r4, r4, r5
 80212fe:	10a4      	asrs	r4, r4, #2
 8021300:	2600      	movs	r6, #0
 8021302:	42a6      	cmp	r6, r4
 8021304:	d105      	bne.n	8021312 <__libc_init_array+0x2e>
 8021306:	bd70      	pop	{r4, r5, r6, pc}
 8021308:	f855 3b04 	ldr.w	r3, [r5], #4
 802130c:	4798      	blx	r3
 802130e:	3601      	adds	r6, #1
 8021310:	e7ee      	b.n	80212f0 <__libc_init_array+0xc>
 8021312:	f855 3b04 	ldr.w	r3, [r5], #4
 8021316:	4798      	blx	r3
 8021318:	3601      	adds	r6, #1
 802131a:	e7f2      	b.n	8021302 <__libc_init_array+0x1e>
 802131c:	08042568 	.word	0x08042568
 8021320:	08042568 	.word	0x08042568
 8021324:	08042568 	.word	0x08042568
 8021328:	0804256c 	.word	0x0804256c

0802132c <localtime>:
 802132c:	b538      	push	{r3, r4, r5, lr}
 802132e:	4b0b      	ldr	r3, [pc, #44]	; (802135c <localtime+0x30>)
 8021330:	681d      	ldr	r5, [r3, #0]
 8021332:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021334:	4604      	mov	r4, r0
 8021336:	b953      	cbnz	r3, 802134e <localtime+0x22>
 8021338:	2024      	movs	r0, #36	; 0x24
 802133a:	f000 f90b 	bl	8021554 <malloc>
 802133e:	4602      	mov	r2, r0
 8021340:	63e8      	str	r0, [r5, #60]	; 0x3c
 8021342:	b920      	cbnz	r0, 802134e <localtime+0x22>
 8021344:	4b06      	ldr	r3, [pc, #24]	; (8021360 <localtime+0x34>)
 8021346:	4807      	ldr	r0, [pc, #28]	; (8021364 <localtime+0x38>)
 8021348:	2132      	movs	r1, #50	; 0x32
 802134a:	f002 fcd1 	bl	8023cf0 <__assert_func>
 802134e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8021350:	4620      	mov	r0, r4
 8021352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021356:	f000 b807 	b.w	8021368 <localtime_r>
 802135a:	bf00      	nop
 802135c:	20000480 	.word	0x20000480
 8021360:	08041d70 	.word	0x08041d70
 8021364:	08041d87 	.word	0x08041d87

08021368 <localtime_r>:
 8021368:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802136c:	4607      	mov	r7, r0
 802136e:	9101      	str	r1, [sp, #4]
 8021370:	f003 fd22 	bl	8024db8 <__gettzinfo>
 8021374:	9901      	ldr	r1, [sp, #4]
 8021376:	4680      	mov	r8, r0
 8021378:	4638      	mov	r0, r7
 802137a:	f003 fd21 	bl	8024dc0 <gmtime_r>
 802137e:	6943      	ldr	r3, [r0, #20]
 8021380:	079a      	lsls	r2, r3, #30
 8021382:	4604      	mov	r4, r0
 8021384:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8021388:	d105      	bne.n	8021396 <localtime_r+0x2e>
 802138a:	2264      	movs	r2, #100	; 0x64
 802138c:	fb96 f3f2 	sdiv	r3, r6, r2
 8021390:	fb02 6313 	mls	r3, r2, r3, r6
 8021394:	bb7b      	cbnz	r3, 80213f6 <localtime_r+0x8e>
 8021396:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802139a:	fb96 f5f3 	sdiv	r5, r6, r3
 802139e:	fb03 6515 	mls	r5, r3, r5, r6
 80213a2:	fab5 f585 	clz	r5, r5
 80213a6:	096d      	lsrs	r5, r5, #5
 80213a8:	4b68      	ldr	r3, [pc, #416]	; (802154c <localtime_r+0x1e4>)
 80213aa:	2230      	movs	r2, #48	; 0x30
 80213ac:	fb02 3505 	mla	r5, r2, r5, r3
 80213b0:	f002 f9f2 	bl	8023798 <__tz_lock>
 80213b4:	f002 f9fc 	bl	80237b0 <_tzset_unlocked>
 80213b8:	4b65      	ldr	r3, [pc, #404]	; (8021550 <localtime_r+0x1e8>)
 80213ba:	681b      	ldr	r3, [r3, #0]
 80213bc:	b353      	cbz	r3, 8021414 <localtime_r+0xac>
 80213be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80213c2:	42b3      	cmp	r3, r6
 80213c4:	d119      	bne.n	80213fa <localtime_r+0x92>
 80213c6:	f8d8 1000 	ldr.w	r1, [r8]
 80213ca:	e9d7 6700 	ldrd	r6, r7, [r7]
 80213ce:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80213d2:	b9d1      	cbnz	r1, 802140a <localtime_r+0xa2>
 80213d4:	4296      	cmp	r6, r2
 80213d6:	eb77 0303 	sbcs.w	r3, r7, r3
 80213da:	da23      	bge.n	8021424 <localtime_r+0xbc>
 80213dc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80213e0:	4296      	cmp	r6, r2
 80213e2:	eb77 0303 	sbcs.w	r3, r7, r3
 80213e6:	bfb4      	ite	lt
 80213e8:	2301      	movlt	r3, #1
 80213ea:	2300      	movge	r3, #0
 80213ec:	6223      	str	r3, [r4, #32]
 80213ee:	db1b      	blt.n	8021428 <localtime_r+0xc0>
 80213f0:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80213f4:	e01a      	b.n	802142c <localtime_r+0xc4>
 80213f6:	2501      	movs	r5, #1
 80213f8:	e7d6      	b.n	80213a8 <localtime_r+0x40>
 80213fa:	4630      	mov	r0, r6
 80213fc:	f002 f924 	bl	8023648 <__tzcalc_limits>
 8021400:	2800      	cmp	r0, #0
 8021402:	d1e0      	bne.n	80213c6 <localtime_r+0x5e>
 8021404:	f04f 33ff 	mov.w	r3, #4294967295
 8021408:	e004      	b.n	8021414 <localtime_r+0xac>
 802140a:	4296      	cmp	r6, r2
 802140c:	eb77 0303 	sbcs.w	r3, r7, r3
 8021410:	da02      	bge.n	8021418 <localtime_r+0xb0>
 8021412:	2300      	movs	r3, #0
 8021414:	6223      	str	r3, [r4, #32]
 8021416:	e7eb      	b.n	80213f0 <localtime_r+0x88>
 8021418:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 802141c:	4296      	cmp	r6, r2
 802141e:	eb77 0303 	sbcs.w	r3, r7, r3
 8021422:	daf6      	bge.n	8021412 <localtime_r+0xaa>
 8021424:	2301      	movs	r3, #1
 8021426:	6223      	str	r3, [r4, #32]
 8021428:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 802142c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8021430:	203c      	movs	r0, #60	; 0x3c
 8021432:	fb91 f6f3 	sdiv	r6, r1, r3
 8021436:	fb03 1316 	mls	r3, r3, r6, r1
 802143a:	6861      	ldr	r1, [r4, #4]
 802143c:	fb93 f2f0 	sdiv	r2, r3, r0
 8021440:	fb00 3012 	mls	r0, r0, r2, r3
 8021444:	6823      	ldr	r3, [r4, #0]
 8021446:	1a89      	subs	r1, r1, r2
 8021448:	68a2      	ldr	r2, [r4, #8]
 802144a:	6061      	str	r1, [r4, #4]
 802144c:	1a1b      	subs	r3, r3, r0
 802144e:	1b92      	subs	r2, r2, r6
 8021450:	2b3b      	cmp	r3, #59	; 0x3b
 8021452:	6023      	str	r3, [r4, #0]
 8021454:	60a2      	str	r2, [r4, #8]
 8021456:	dd35      	ble.n	80214c4 <localtime_r+0x15c>
 8021458:	3101      	adds	r1, #1
 802145a:	6061      	str	r1, [r4, #4]
 802145c:	3b3c      	subs	r3, #60	; 0x3c
 802145e:	6023      	str	r3, [r4, #0]
 8021460:	6863      	ldr	r3, [r4, #4]
 8021462:	2b3b      	cmp	r3, #59	; 0x3b
 8021464:	dd34      	ble.n	80214d0 <localtime_r+0x168>
 8021466:	3201      	adds	r2, #1
 8021468:	60a2      	str	r2, [r4, #8]
 802146a:	3b3c      	subs	r3, #60	; 0x3c
 802146c:	6063      	str	r3, [r4, #4]
 802146e:	68a3      	ldr	r3, [r4, #8]
 8021470:	2b17      	cmp	r3, #23
 8021472:	dd33      	ble.n	80214dc <localtime_r+0x174>
 8021474:	69e2      	ldr	r2, [r4, #28]
 8021476:	3201      	adds	r2, #1
 8021478:	61e2      	str	r2, [r4, #28]
 802147a:	69a2      	ldr	r2, [r4, #24]
 802147c:	3201      	adds	r2, #1
 802147e:	2a06      	cmp	r2, #6
 8021480:	bfc8      	it	gt
 8021482:	2200      	movgt	r2, #0
 8021484:	61a2      	str	r2, [r4, #24]
 8021486:	68e2      	ldr	r2, [r4, #12]
 8021488:	3b18      	subs	r3, #24
 802148a:	3201      	adds	r2, #1
 802148c:	60a3      	str	r3, [r4, #8]
 802148e:	6923      	ldr	r3, [r4, #16]
 8021490:	60e2      	str	r2, [r4, #12]
 8021492:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8021496:	428a      	cmp	r2, r1
 8021498:	dd0e      	ble.n	80214b8 <localtime_r+0x150>
 802149a:	2b0b      	cmp	r3, #11
 802149c:	eba2 0201 	sub.w	r2, r2, r1
 80214a0:	60e2      	str	r2, [r4, #12]
 80214a2:	f103 0201 	add.w	r2, r3, #1
 80214a6:	bf09      	itett	eq
 80214a8:	6963      	ldreq	r3, [r4, #20]
 80214aa:	6122      	strne	r2, [r4, #16]
 80214ac:	2200      	moveq	r2, #0
 80214ae:	3301      	addeq	r3, #1
 80214b0:	bf02      	ittt	eq
 80214b2:	6122      	streq	r2, [r4, #16]
 80214b4:	6163      	streq	r3, [r4, #20]
 80214b6:	61e2      	streq	r2, [r4, #28]
 80214b8:	f002 f974 	bl	80237a4 <__tz_unlock>
 80214bc:	4620      	mov	r0, r4
 80214be:	b002      	add	sp, #8
 80214c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	dacb      	bge.n	8021460 <localtime_r+0xf8>
 80214c8:	3901      	subs	r1, #1
 80214ca:	6061      	str	r1, [r4, #4]
 80214cc:	333c      	adds	r3, #60	; 0x3c
 80214ce:	e7c6      	b.n	802145e <localtime_r+0xf6>
 80214d0:	2b00      	cmp	r3, #0
 80214d2:	dacc      	bge.n	802146e <localtime_r+0x106>
 80214d4:	3a01      	subs	r2, #1
 80214d6:	60a2      	str	r2, [r4, #8]
 80214d8:	333c      	adds	r3, #60	; 0x3c
 80214da:	e7c7      	b.n	802146c <localtime_r+0x104>
 80214dc:	2b00      	cmp	r3, #0
 80214de:	daeb      	bge.n	80214b8 <localtime_r+0x150>
 80214e0:	69e2      	ldr	r2, [r4, #28]
 80214e2:	3a01      	subs	r2, #1
 80214e4:	61e2      	str	r2, [r4, #28]
 80214e6:	69a2      	ldr	r2, [r4, #24]
 80214e8:	3a01      	subs	r2, #1
 80214ea:	bf48      	it	mi
 80214ec:	2206      	movmi	r2, #6
 80214ee:	61a2      	str	r2, [r4, #24]
 80214f0:	68e2      	ldr	r2, [r4, #12]
 80214f2:	3318      	adds	r3, #24
 80214f4:	3a01      	subs	r2, #1
 80214f6:	60e2      	str	r2, [r4, #12]
 80214f8:	60a3      	str	r3, [r4, #8]
 80214fa:	2a00      	cmp	r2, #0
 80214fc:	d1dc      	bne.n	80214b8 <localtime_r+0x150>
 80214fe:	6923      	ldr	r3, [r4, #16]
 8021500:	3b01      	subs	r3, #1
 8021502:	d405      	bmi.n	8021510 <localtime_r+0x1a8>
 8021504:	6123      	str	r3, [r4, #16]
 8021506:	6923      	ldr	r3, [r4, #16]
 8021508:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802150c:	60e3      	str	r3, [r4, #12]
 802150e:	e7d3      	b.n	80214b8 <localtime_r+0x150>
 8021510:	230b      	movs	r3, #11
 8021512:	6123      	str	r3, [r4, #16]
 8021514:	6963      	ldr	r3, [r4, #20]
 8021516:	1e5a      	subs	r2, r3, #1
 8021518:	6162      	str	r2, [r4, #20]
 802151a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802151e:	0793      	lsls	r3, r2, #30
 8021520:	d105      	bne.n	802152e <localtime_r+0x1c6>
 8021522:	2164      	movs	r1, #100	; 0x64
 8021524:	fb92 f3f1 	sdiv	r3, r2, r1
 8021528:	fb01 2313 	mls	r3, r1, r3, r2
 802152c:	b963      	cbnz	r3, 8021548 <localtime_r+0x1e0>
 802152e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021532:	fb92 f3f1 	sdiv	r3, r2, r1
 8021536:	fb01 2313 	mls	r3, r1, r3, r2
 802153a:	fab3 f383 	clz	r3, r3
 802153e:	095b      	lsrs	r3, r3, #5
 8021540:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021544:	61e3      	str	r3, [r4, #28]
 8021546:	e7de      	b.n	8021506 <localtime_r+0x19e>
 8021548:	2301      	movs	r3, #1
 802154a:	e7f9      	b.n	8021540 <localtime_r+0x1d8>
 802154c:	08041e48 	.word	0x08041e48
 8021550:	2001ad74 	.word	0x2001ad74

08021554 <malloc>:
 8021554:	4b02      	ldr	r3, [pc, #8]	; (8021560 <malloc+0xc>)
 8021556:	4601      	mov	r1, r0
 8021558:	6818      	ldr	r0, [r3, #0]
 802155a:	f000 bb17 	b.w	8021b8c <_malloc_r>
 802155e:	bf00      	nop
 8021560:	20000480 	.word	0x20000480

08021564 <free>:
 8021564:	4b02      	ldr	r3, [pc, #8]	; (8021570 <free+0xc>)
 8021566:	4601      	mov	r1, r0
 8021568:	6818      	ldr	r0, [r3, #0]
 802156a:	f000 babf 	b.w	8021aec <_free_r>
 802156e:	bf00      	nop
 8021570:	20000480 	.word	0x20000480

08021574 <memcmp>:
 8021574:	b530      	push	{r4, r5, lr}
 8021576:	3901      	subs	r1, #1
 8021578:	2400      	movs	r4, #0
 802157a:	42a2      	cmp	r2, r4
 802157c:	d101      	bne.n	8021582 <memcmp+0xe>
 802157e:	2000      	movs	r0, #0
 8021580:	e005      	b.n	802158e <memcmp+0x1a>
 8021582:	5d03      	ldrb	r3, [r0, r4]
 8021584:	3401      	adds	r4, #1
 8021586:	5d0d      	ldrb	r5, [r1, r4]
 8021588:	42ab      	cmp	r3, r5
 802158a:	d0f6      	beq.n	802157a <memcmp+0x6>
 802158c:	1b58      	subs	r0, r3, r5
 802158e:	bd30      	pop	{r4, r5, pc}

08021590 <memcpy>:
 8021590:	440a      	add	r2, r1
 8021592:	4291      	cmp	r1, r2
 8021594:	f100 33ff 	add.w	r3, r0, #4294967295
 8021598:	d100      	bne.n	802159c <memcpy+0xc>
 802159a:	4770      	bx	lr
 802159c:	b510      	push	{r4, lr}
 802159e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80215a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80215a6:	4291      	cmp	r1, r2
 80215a8:	d1f9      	bne.n	802159e <memcpy+0xe>
 80215aa:	bd10      	pop	{r4, pc}

080215ac <memmove>:
 80215ac:	4288      	cmp	r0, r1
 80215ae:	b510      	push	{r4, lr}
 80215b0:	eb01 0402 	add.w	r4, r1, r2
 80215b4:	d902      	bls.n	80215bc <memmove+0x10>
 80215b6:	4284      	cmp	r4, r0
 80215b8:	4623      	mov	r3, r4
 80215ba:	d807      	bhi.n	80215cc <memmove+0x20>
 80215bc:	1e43      	subs	r3, r0, #1
 80215be:	42a1      	cmp	r1, r4
 80215c0:	d008      	beq.n	80215d4 <memmove+0x28>
 80215c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80215c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80215ca:	e7f8      	b.n	80215be <memmove+0x12>
 80215cc:	4402      	add	r2, r0
 80215ce:	4601      	mov	r1, r0
 80215d0:	428a      	cmp	r2, r1
 80215d2:	d100      	bne.n	80215d6 <memmove+0x2a>
 80215d4:	bd10      	pop	{r4, pc}
 80215d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80215da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80215de:	e7f7      	b.n	80215d0 <memmove+0x24>

080215e0 <memset>:
 80215e0:	4402      	add	r2, r0
 80215e2:	4603      	mov	r3, r0
 80215e4:	4293      	cmp	r3, r2
 80215e6:	d100      	bne.n	80215ea <memset+0xa>
 80215e8:	4770      	bx	lr
 80215ea:	f803 1b01 	strb.w	r1, [r3], #1
 80215ee:	e7f9      	b.n	80215e4 <memset+0x4>

080215f0 <validate_structure>:
 80215f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80215f2:	6801      	ldr	r1, [r0, #0]
 80215f4:	293b      	cmp	r1, #59	; 0x3b
 80215f6:	4604      	mov	r4, r0
 80215f8:	d911      	bls.n	802161e <validate_structure+0x2e>
 80215fa:	223c      	movs	r2, #60	; 0x3c
 80215fc:	4668      	mov	r0, sp
 80215fe:	f002 fba5 	bl	8023d4c <div>
 8021602:	9a01      	ldr	r2, [sp, #4]
 8021604:	6863      	ldr	r3, [r4, #4]
 8021606:	9900      	ldr	r1, [sp, #0]
 8021608:	2a00      	cmp	r2, #0
 802160a:	440b      	add	r3, r1
 802160c:	6063      	str	r3, [r4, #4]
 802160e:	bfbb      	ittet	lt
 8021610:	323c      	addlt	r2, #60	; 0x3c
 8021612:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8021616:	6022      	strge	r2, [r4, #0]
 8021618:	6022      	strlt	r2, [r4, #0]
 802161a:	bfb8      	it	lt
 802161c:	6063      	strlt	r3, [r4, #4]
 802161e:	6861      	ldr	r1, [r4, #4]
 8021620:	293b      	cmp	r1, #59	; 0x3b
 8021622:	d911      	bls.n	8021648 <validate_structure+0x58>
 8021624:	223c      	movs	r2, #60	; 0x3c
 8021626:	4668      	mov	r0, sp
 8021628:	f002 fb90 	bl	8023d4c <div>
 802162c:	9a01      	ldr	r2, [sp, #4]
 802162e:	68a3      	ldr	r3, [r4, #8]
 8021630:	9900      	ldr	r1, [sp, #0]
 8021632:	2a00      	cmp	r2, #0
 8021634:	440b      	add	r3, r1
 8021636:	60a3      	str	r3, [r4, #8]
 8021638:	bfbb      	ittet	lt
 802163a:	323c      	addlt	r2, #60	; 0x3c
 802163c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8021640:	6062      	strge	r2, [r4, #4]
 8021642:	6062      	strlt	r2, [r4, #4]
 8021644:	bfb8      	it	lt
 8021646:	60a3      	strlt	r3, [r4, #8]
 8021648:	68a1      	ldr	r1, [r4, #8]
 802164a:	2917      	cmp	r1, #23
 802164c:	d911      	bls.n	8021672 <validate_structure+0x82>
 802164e:	2218      	movs	r2, #24
 8021650:	4668      	mov	r0, sp
 8021652:	f002 fb7b 	bl	8023d4c <div>
 8021656:	9a01      	ldr	r2, [sp, #4]
 8021658:	68e3      	ldr	r3, [r4, #12]
 802165a:	9900      	ldr	r1, [sp, #0]
 802165c:	2a00      	cmp	r2, #0
 802165e:	440b      	add	r3, r1
 8021660:	60e3      	str	r3, [r4, #12]
 8021662:	bfbb      	ittet	lt
 8021664:	3218      	addlt	r2, #24
 8021666:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802166a:	60a2      	strge	r2, [r4, #8]
 802166c:	60a2      	strlt	r2, [r4, #8]
 802166e:	bfb8      	it	lt
 8021670:	60e3      	strlt	r3, [r4, #12]
 8021672:	6921      	ldr	r1, [r4, #16]
 8021674:	290b      	cmp	r1, #11
 8021676:	d911      	bls.n	802169c <validate_structure+0xac>
 8021678:	220c      	movs	r2, #12
 802167a:	4668      	mov	r0, sp
 802167c:	f002 fb66 	bl	8023d4c <div>
 8021680:	9a01      	ldr	r2, [sp, #4]
 8021682:	6963      	ldr	r3, [r4, #20]
 8021684:	9900      	ldr	r1, [sp, #0]
 8021686:	2a00      	cmp	r2, #0
 8021688:	440b      	add	r3, r1
 802168a:	6163      	str	r3, [r4, #20]
 802168c:	bfbb      	ittet	lt
 802168e:	320c      	addlt	r2, #12
 8021690:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8021694:	6122      	strge	r2, [r4, #16]
 8021696:	6122      	strlt	r2, [r4, #16]
 8021698:	bfb8      	it	lt
 802169a:	6163      	strlt	r3, [r4, #20]
 802169c:	6963      	ldr	r3, [r4, #20]
 802169e:	0799      	lsls	r1, r3, #30
 80216a0:	d120      	bne.n	80216e4 <validate_structure+0xf4>
 80216a2:	2164      	movs	r1, #100	; 0x64
 80216a4:	fb93 f2f1 	sdiv	r2, r3, r1
 80216a8:	fb01 3212 	mls	r2, r1, r2, r3
 80216ac:	b9e2      	cbnz	r2, 80216e8 <validate_structure+0xf8>
 80216ae:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80216b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80216b6:	fb93 f2f1 	sdiv	r2, r3, r1
 80216ba:	fb01 3312 	mls	r3, r1, r2, r3
 80216be:	2b00      	cmp	r3, #0
 80216c0:	bf14      	ite	ne
 80216c2:	231c      	movne	r3, #28
 80216c4:	231d      	moveq	r3, #29
 80216c6:	68e2      	ldr	r2, [r4, #12]
 80216c8:	2a00      	cmp	r2, #0
 80216ca:	dc0f      	bgt.n	80216ec <validate_structure+0xfc>
 80216cc:	4f33      	ldr	r7, [pc, #204]	; (802179c <validate_structure+0x1ac>)
 80216ce:	260b      	movs	r6, #11
 80216d0:	2064      	movs	r0, #100	; 0x64
 80216d2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80216d6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80216da:	f1bc 0f00 	cmp.w	ip, #0
 80216de:	dd31      	ble.n	8021744 <validate_structure+0x154>
 80216e0:	b003      	add	sp, #12
 80216e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216e4:	231c      	movs	r3, #28
 80216e6:	e7ee      	b.n	80216c6 <validate_structure+0xd6>
 80216e8:	231d      	movs	r3, #29
 80216ea:	e7ec      	b.n	80216c6 <validate_structure+0xd6>
 80216ec:	4f2b      	ldr	r7, [pc, #172]	; (802179c <validate_structure+0x1ac>)
 80216ee:	f04f 0c00 	mov.w	ip, #0
 80216f2:	2564      	movs	r5, #100	; 0x64
 80216f4:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80216f8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80216fc:	2a01      	cmp	r2, #1
 80216fe:	bf14      	ite	ne
 8021700:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8021704:	4618      	moveq	r0, r3
 8021706:	4281      	cmp	r1, r0
 8021708:	ddea      	ble.n	80216e0 <validate_structure+0xf0>
 802170a:	3201      	adds	r2, #1
 802170c:	1a09      	subs	r1, r1, r0
 802170e:	2a0c      	cmp	r2, #12
 8021710:	60e1      	str	r1, [r4, #12]
 8021712:	6122      	str	r2, [r4, #16]
 8021714:	d1f0      	bne.n	80216f8 <validate_structure+0x108>
 8021716:	6963      	ldr	r3, [r4, #20]
 8021718:	1c5a      	adds	r2, r3, #1
 802171a:	0791      	lsls	r1, r2, #30
 802171c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8021720:	d137      	bne.n	8021792 <validate_structure+0x1a2>
 8021722:	fb92 f1f5 	sdiv	r1, r2, r5
 8021726:	fb05 2211 	mls	r2, r5, r1, r2
 802172a:	2a00      	cmp	r2, #0
 802172c:	d133      	bne.n	8021796 <validate_structure+0x1a6>
 802172e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8021732:	fb93 f2f6 	sdiv	r2, r3, r6
 8021736:	fb06 3312 	mls	r3, r6, r2, r3
 802173a:	2b00      	cmp	r3, #0
 802173c:	bf14      	ite	ne
 802173e:	231c      	movne	r3, #28
 8021740:	231d      	moveq	r3, #29
 8021742:	e7d9      	b.n	80216f8 <validate_structure+0x108>
 8021744:	6921      	ldr	r1, [r4, #16]
 8021746:	3901      	subs	r1, #1
 8021748:	6121      	str	r1, [r4, #16]
 802174a:	3101      	adds	r1, #1
 802174c:	d114      	bne.n	8021778 <validate_structure+0x188>
 802174e:	6963      	ldr	r3, [r4, #20]
 8021750:	1e59      	subs	r1, r3, #1
 8021752:	078a      	lsls	r2, r1, #30
 8021754:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8021758:	d117      	bne.n	802178a <validate_structure+0x19a>
 802175a:	fb91 f2f0 	sdiv	r2, r1, r0
 802175e:	fb00 1112 	mls	r1, r0, r2, r1
 8021762:	b9a1      	cbnz	r1, 802178e <validate_structure+0x19e>
 8021764:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8021768:	fb93 f2f5 	sdiv	r2, r3, r5
 802176c:	fb05 3312 	mls	r3, r5, r2, r3
 8021770:	2b00      	cmp	r3, #0
 8021772:	bf14      	ite	ne
 8021774:	231c      	movne	r3, #28
 8021776:	231d      	moveq	r3, #29
 8021778:	6922      	ldr	r2, [r4, #16]
 802177a:	2a01      	cmp	r2, #1
 802177c:	bf14      	ite	ne
 802177e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8021782:	461a      	moveq	r2, r3
 8021784:	4462      	add	r2, ip
 8021786:	60e2      	str	r2, [r4, #12]
 8021788:	e7a5      	b.n	80216d6 <validate_structure+0xe6>
 802178a:	231c      	movs	r3, #28
 802178c:	e7f4      	b.n	8021778 <validate_structure+0x188>
 802178e:	231d      	movs	r3, #29
 8021790:	e7f2      	b.n	8021778 <validate_structure+0x188>
 8021792:	231c      	movs	r3, #28
 8021794:	e7b0      	b.n	80216f8 <validate_structure+0x108>
 8021796:	231d      	movs	r3, #29
 8021798:	e7ae      	b.n	80216f8 <validate_structure+0x108>
 802179a:	bf00      	nop
 802179c:	08041de8 	.word	0x08041de8

080217a0 <mktime>:
 80217a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217a4:	b08b      	sub	sp, #44	; 0x2c
 80217a6:	4605      	mov	r5, r0
 80217a8:	f003 fb06 	bl	8024db8 <__gettzinfo>
 80217ac:	4607      	mov	r7, r0
 80217ae:	4628      	mov	r0, r5
 80217b0:	f7ff ff1e 	bl	80215f0 <validate_structure>
 80217b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80217b8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80217bc:	68a8      	ldr	r0, [r5, #8]
 80217be:	696e      	ldr	r6, [r5, #20]
 80217c0:	fb0a 2303 	mla	r3, sl, r3, r2
 80217c4:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80217c8:	fb0a 3a00 	mla	sl, sl, r0, r3
 80217cc:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80217d0:	4ac3      	ldr	r2, [pc, #780]	; (8021ae0 <mktime+0x340>)
 80217d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80217d6:	3c01      	subs	r4, #1
 80217d8:	2b01      	cmp	r3, #1
 80217da:	4414      	add	r4, r2
 80217dc:	dd11      	ble.n	8021802 <mktime+0x62>
 80217de:	07b1      	lsls	r1, r6, #30
 80217e0:	d10f      	bne.n	8021802 <mktime+0x62>
 80217e2:	2264      	movs	r2, #100	; 0x64
 80217e4:	fb96 f3f2 	sdiv	r3, r6, r2
 80217e8:	fb02 6313 	mls	r3, r2, r3, r6
 80217ec:	b943      	cbnz	r3, 8021800 <mktime+0x60>
 80217ee:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80217f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80217f6:	fb91 f3f2 	sdiv	r3, r1, r2
 80217fa:	fb02 1313 	mls	r3, r2, r3, r1
 80217fe:	b903      	cbnz	r3, 8021802 <mktime+0x62>
 8021800:	3401      	adds	r4, #1
 8021802:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8021806:	3310      	adds	r3, #16
 8021808:	f644 6220 	movw	r2, #20000	; 0x4e20
 802180c:	4293      	cmp	r3, r2
 802180e:	61ec      	str	r4, [r5, #28]
 8021810:	f200 8161 	bhi.w	8021ad6 <mktime+0x336>
 8021814:	2e46      	cmp	r6, #70	; 0x46
 8021816:	dd77      	ble.n	8021908 <mktime+0x168>
 8021818:	2346      	movs	r3, #70	; 0x46
 802181a:	f240 1e6d 	movw	lr, #365	; 0x16d
 802181e:	2164      	movs	r1, #100	; 0x64
 8021820:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021824:	079a      	lsls	r2, r3, #30
 8021826:	d169      	bne.n	80218fc <mktime+0x15c>
 8021828:	fb93 f2f1 	sdiv	r2, r3, r1
 802182c:	fb01 3212 	mls	r2, r1, r2, r3
 8021830:	2a00      	cmp	r2, #0
 8021832:	d166      	bne.n	8021902 <mktime+0x162>
 8021834:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8021838:	fb9c f2f0 	sdiv	r2, ip, r0
 802183c:	fb00 c212 	mls	r2, r0, r2, ip
 8021840:	2a00      	cmp	r2, #0
 8021842:	bf14      	ite	ne
 8021844:	4672      	movne	r2, lr
 8021846:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802184a:	3301      	adds	r3, #1
 802184c:	429e      	cmp	r6, r3
 802184e:	4414      	add	r4, r2
 8021850:	d1e8      	bne.n	8021824 <mktime+0x84>
 8021852:	4ba4      	ldr	r3, [pc, #656]	; (8021ae4 <mktime+0x344>)
 8021854:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8021858:	fbc3 ab04 	smlal	sl, fp, r3, r4
 802185c:	f001 ff9c 	bl	8023798 <__tz_lock>
 8021860:	f001 ffa6 	bl	80237b0 <_tzset_unlocked>
 8021864:	4ba0      	ldr	r3, [pc, #640]	; (8021ae8 <mktime+0x348>)
 8021866:	f8d3 9000 	ldr.w	r9, [r3]
 802186a:	f1b9 0f00 	cmp.w	r9, #0
 802186e:	d03f      	beq.n	80218f0 <mktime+0x150>
 8021870:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8021874:	6968      	ldr	r0, [r5, #20]
 8021876:	687b      	ldr	r3, [r7, #4]
 8021878:	f1b9 0f01 	cmp.w	r9, #1
 802187c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021880:	46c8      	mov	r8, r9
 8021882:	bfa8      	it	ge
 8021884:	f04f 0801 	movge.w	r8, #1
 8021888:	4283      	cmp	r3, r0
 802188a:	d17f      	bne.n	802198c <mktime+0x1ec>
 802188c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802188e:	4619      	mov	r1, r3
 8021890:	17da      	asrs	r2, r3, #31
 8021892:	e9cd 1200 	strd	r1, r2, [sp]
 8021896:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 802189a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 802189e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80218a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80218a4:	1a80      	subs	r0, r0, r2
 80218a6:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80218aa:	4582      	cmp	sl, r0
 80218ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80218b0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80218b4:	da71      	bge.n	802199a <mktime+0x1fa>
 80218b6:	9800      	ldr	r0, [sp, #0]
 80218b8:	6a39      	ldr	r1, [r7, #32]
 80218ba:	1a09      	subs	r1, r1, r0
 80218bc:	9104      	str	r1, [sp, #16]
 80218be:	9801      	ldr	r0, [sp, #4]
 80218c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80218c2:	eb61 0100 	sbc.w	r1, r1, r0
 80218c6:	9105      	str	r1, [sp, #20]
 80218c8:	6839      	ldr	r1, [r7, #0]
 80218ca:	2900      	cmp	r1, #0
 80218cc:	d075      	beq.n	80219ba <mktime+0x21a>
 80218ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80218d2:	4582      	cmp	sl, r0
 80218d4:	eb7b 0101 	sbcs.w	r1, fp, r1
 80218d8:	db05      	blt.n	80218e6 <mktime+0x146>
 80218da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80218de:	4582      	cmp	sl, r0
 80218e0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80218e4:	db6f      	blt.n	80219c6 <mktime+0x226>
 80218e6:	f1b9 0f00 	cmp.w	r9, #0
 80218ea:	f04f 0900 	mov.w	r9, #0
 80218ee:	da6f      	bge.n	80219d0 <mktime+0x230>
 80218f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218f2:	eb1a 0a03 	adds.w	sl, sl, r3
 80218f6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80218fa:	e0ae      	b.n	8021a5a <mktime+0x2ba>
 80218fc:	f240 126d 	movw	r2, #365	; 0x16d
 8021900:	e7a3      	b.n	802184a <mktime+0xaa>
 8021902:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8021906:	e7a0      	b.n	802184a <mktime+0xaa>
 8021908:	d0a3      	beq.n	8021852 <mktime+0xb2>
 802190a:	2345      	movs	r3, #69	; 0x45
 802190c:	f240 1e6d 	movw	lr, #365	; 0x16d
 8021910:	2164      	movs	r1, #100	; 0x64
 8021912:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021916:	e012      	b.n	802193e <mktime+0x19e>
 8021918:	bb62      	cbnz	r2, 8021974 <mktime+0x1d4>
 802191a:	fb93 f2f1 	sdiv	r2, r3, r1
 802191e:	fb01 3212 	mls	r2, r1, r2, r3
 8021922:	bb52      	cbnz	r2, 802197a <mktime+0x1da>
 8021924:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8021928:	fb9c f2f0 	sdiv	r2, ip, r0
 802192c:	fb00 c212 	mls	r2, r0, r2, ip
 8021930:	2a00      	cmp	r2, #0
 8021932:	bf14      	ite	ne
 8021934:	4672      	movne	r2, lr
 8021936:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802193a:	1aa4      	subs	r4, r4, r2
 802193c:	3b01      	subs	r3, #1
 802193e:	429e      	cmp	r6, r3
 8021940:	f003 0203 	and.w	r2, r3, #3
 8021944:	dbe8      	blt.n	8021918 <mktime+0x178>
 8021946:	b9da      	cbnz	r2, 8021980 <mktime+0x1e0>
 8021948:	2264      	movs	r2, #100	; 0x64
 802194a:	fb96 f3f2 	sdiv	r3, r6, r2
 802194e:	fb02 6313 	mls	r3, r2, r3, r6
 8021952:	b9c3      	cbnz	r3, 8021986 <mktime+0x1e6>
 8021954:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8021958:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802195c:	fb91 f3f2 	sdiv	r3, r1, r2
 8021960:	fb02 1313 	mls	r3, r2, r3, r1
 8021964:	2b00      	cmp	r3, #0
 8021966:	f240 136d 	movw	r3, #365	; 0x16d
 802196a:	bf08      	it	eq
 802196c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8021970:	1ae4      	subs	r4, r4, r3
 8021972:	e76e      	b.n	8021852 <mktime+0xb2>
 8021974:	f240 126d 	movw	r2, #365	; 0x16d
 8021978:	e7df      	b.n	802193a <mktime+0x19a>
 802197a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802197e:	e7dc      	b.n	802193a <mktime+0x19a>
 8021980:	f240 136d 	movw	r3, #365	; 0x16d
 8021984:	e7f4      	b.n	8021970 <mktime+0x1d0>
 8021986:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 802198a:	e7f1      	b.n	8021970 <mktime+0x1d0>
 802198c:	f001 fe5c 	bl	8023648 <__tzcalc_limits>
 8021990:	2800      	cmp	r0, #0
 8021992:	f47f af7b 	bne.w	802188c <mktime+0xec>
 8021996:	46c1      	mov	r9, r8
 8021998:	e054      	b.n	8021a44 <mktime+0x2a4>
 802199a:	9800      	ldr	r0, [sp, #0]
 802199c:	9902      	ldr	r1, [sp, #8]
 802199e:	1a09      	subs	r1, r1, r0
 80219a0:	9108      	str	r1, [sp, #32]
 80219a2:	9801      	ldr	r0, [sp, #4]
 80219a4:	9903      	ldr	r1, [sp, #12]
 80219a6:	eb61 0100 	sbc.w	r1, r1, r0
 80219aa:	9109      	str	r1, [sp, #36]	; 0x24
 80219ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80219b0:	4582      	cmp	sl, r0
 80219b2:	eb7b 0101 	sbcs.w	r1, fp, r1
 80219b6:	dbee      	blt.n	8021996 <mktime+0x1f6>
 80219b8:	e77d      	b.n	80218b6 <mktime+0x116>
 80219ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80219be:	4582      	cmp	sl, r0
 80219c0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80219c4:	db89      	blt.n	80218da <mktime+0x13a>
 80219c6:	f1b9 0f00 	cmp.w	r9, #0
 80219ca:	db3f      	blt.n	8021a4c <mktime+0x2ac>
 80219cc:	f04f 0901 	mov.w	r9, #1
 80219d0:	ea88 0809 	eor.w	r8, r8, r9
 80219d4:	f1b8 0f01 	cmp.w	r8, #1
 80219d8:	d134      	bne.n	8021a44 <mktime+0x2a4>
 80219da:	f1b9 0f00 	cmp.w	r9, #0
 80219de:	d04f      	beq.n	8021a80 <mktime+0x2e0>
 80219e0:	1ad3      	subs	r3, r2, r3
 80219e2:	682a      	ldr	r2, [r5, #0]
 80219e4:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80219e8:	441a      	add	r2, r3
 80219ea:	eb1a 0a03 	adds.w	sl, sl, r3
 80219ee:	602a      	str	r2, [r5, #0]
 80219f0:	4628      	mov	r0, r5
 80219f2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80219f6:	f7ff fdfb 	bl	80215f0 <validate_structure>
 80219fa:	68ea      	ldr	r2, [r5, #12]
 80219fc:	ebb2 0208 	subs.w	r2, r2, r8
 8021a00:	d020      	beq.n	8021a44 <mktime+0x2a4>
 8021a02:	2a01      	cmp	r2, #1
 8021a04:	dc3e      	bgt.n	8021a84 <mktime+0x2e4>
 8021a06:	1c90      	adds	r0, r2, #2
 8021a08:	bfd8      	it	le
 8021a0a:	2201      	movle	r2, #1
 8021a0c:	69eb      	ldr	r3, [r5, #28]
 8021a0e:	18d3      	adds	r3, r2, r3
 8021a10:	4414      	add	r4, r2
 8021a12:	d540      	bpl.n	8021a96 <mktime+0x2f6>
 8021a14:	1e72      	subs	r2, r6, #1
 8021a16:	0791      	lsls	r1, r2, #30
 8021a18:	d137      	bne.n	8021a8a <mktime+0x2ea>
 8021a1a:	2164      	movs	r1, #100	; 0x64
 8021a1c:	fb92 f3f1 	sdiv	r3, r2, r1
 8021a20:	fb01 2313 	mls	r3, r1, r3, r2
 8021a24:	bba3      	cbnz	r3, 8021a90 <mktime+0x2f0>
 8021a26:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8021a2a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8021a2e:	fb96 f3f2 	sdiv	r3, r6, r2
 8021a32:	fb02 6613 	mls	r6, r2, r3, r6
 8021a36:	2e00      	cmp	r6, #0
 8021a38:	f240 136d 	movw	r3, #365	; 0x16d
 8021a3c:	bf18      	it	ne
 8021a3e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8021a42:	61eb      	str	r3, [r5, #28]
 8021a44:	f1b9 0f01 	cmp.w	r9, #1
 8021a48:	f47f af52 	bne.w	80218f0 <mktime+0x150>
 8021a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021a4e:	eb1a 0a03 	adds.w	sl, sl, r3
 8021a52:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8021a56:	f04f 0901 	mov.w	r9, #1
 8021a5a:	f001 fea3 	bl	80237a4 <__tz_unlock>
 8021a5e:	3404      	adds	r4, #4
 8021a60:	2307      	movs	r3, #7
 8021a62:	fb94 f3f3 	sdiv	r3, r4, r3
 8021a66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021a6a:	1ae4      	subs	r4, r4, r3
 8021a6c:	bf48      	it	mi
 8021a6e:	3407      	addmi	r4, #7
 8021a70:	f8c5 9020 	str.w	r9, [r5, #32]
 8021a74:	61ac      	str	r4, [r5, #24]
 8021a76:	4650      	mov	r0, sl
 8021a78:	4659      	mov	r1, fp
 8021a7a:	b00b      	add	sp, #44	; 0x2c
 8021a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a80:	1a9b      	subs	r3, r3, r2
 8021a82:	e7ae      	b.n	80219e2 <mktime+0x242>
 8021a84:	f04f 32ff 	mov.w	r2, #4294967295
 8021a88:	e7c0      	b.n	8021a0c <mktime+0x26c>
 8021a8a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8021a8e:	e7d8      	b.n	8021a42 <mktime+0x2a2>
 8021a90:	f240 136d 	movw	r3, #365	; 0x16d
 8021a94:	e7d5      	b.n	8021a42 <mktime+0x2a2>
 8021a96:	07b2      	lsls	r2, r6, #30
 8021a98:	d117      	bne.n	8021aca <mktime+0x32a>
 8021a9a:	2164      	movs	r1, #100	; 0x64
 8021a9c:	fb96 f2f1 	sdiv	r2, r6, r1
 8021aa0:	fb01 6212 	mls	r2, r1, r2, r6
 8021aa4:	b9a2      	cbnz	r2, 8021ad0 <mktime+0x330>
 8021aa6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8021aaa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021aae:	fb96 f2f1 	sdiv	r2, r6, r1
 8021ab2:	fb01 6612 	mls	r6, r1, r2, r6
 8021ab6:	2e00      	cmp	r6, #0
 8021ab8:	f240 126d 	movw	r2, #365	; 0x16d
 8021abc:	bf08      	it	eq
 8021abe:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8021ac2:	4293      	cmp	r3, r2
 8021ac4:	bfa8      	it	ge
 8021ac6:	1a9b      	subge	r3, r3, r2
 8021ac8:	e7bb      	b.n	8021a42 <mktime+0x2a2>
 8021aca:	f240 126d 	movw	r2, #365	; 0x16d
 8021ace:	e7f8      	b.n	8021ac2 <mktime+0x322>
 8021ad0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8021ad4:	e7f5      	b.n	8021ac2 <mktime+0x322>
 8021ad6:	f04f 3aff 	mov.w	sl, #4294967295
 8021ada:	f04f 3bff 	mov.w	fp, #4294967295
 8021ade:	e7ca      	b.n	8021a76 <mktime+0x2d6>
 8021ae0:	08041e18 	.word	0x08041e18
 8021ae4:	00015180 	.word	0x00015180
 8021ae8:	2001ad74 	.word	0x2001ad74

08021aec <_free_r>:
 8021aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021aee:	2900      	cmp	r1, #0
 8021af0:	d048      	beq.n	8021b84 <_free_r+0x98>
 8021af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021af6:	9001      	str	r0, [sp, #4]
 8021af8:	2b00      	cmp	r3, #0
 8021afa:	f1a1 0404 	sub.w	r4, r1, #4
 8021afe:	bfb8      	it	lt
 8021b00:	18e4      	addlt	r4, r4, r3
 8021b02:	f003 faa3 	bl	802504c <__malloc_lock>
 8021b06:	4a20      	ldr	r2, [pc, #128]	; (8021b88 <_free_r+0x9c>)
 8021b08:	9801      	ldr	r0, [sp, #4]
 8021b0a:	6813      	ldr	r3, [r2, #0]
 8021b0c:	4615      	mov	r5, r2
 8021b0e:	b933      	cbnz	r3, 8021b1e <_free_r+0x32>
 8021b10:	6063      	str	r3, [r4, #4]
 8021b12:	6014      	str	r4, [r2, #0]
 8021b14:	b003      	add	sp, #12
 8021b16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021b1a:	f003 ba9d 	b.w	8025058 <__malloc_unlock>
 8021b1e:	42a3      	cmp	r3, r4
 8021b20:	d90b      	bls.n	8021b3a <_free_r+0x4e>
 8021b22:	6821      	ldr	r1, [r4, #0]
 8021b24:	1862      	adds	r2, r4, r1
 8021b26:	4293      	cmp	r3, r2
 8021b28:	bf04      	itt	eq
 8021b2a:	681a      	ldreq	r2, [r3, #0]
 8021b2c:	685b      	ldreq	r3, [r3, #4]
 8021b2e:	6063      	str	r3, [r4, #4]
 8021b30:	bf04      	itt	eq
 8021b32:	1852      	addeq	r2, r2, r1
 8021b34:	6022      	streq	r2, [r4, #0]
 8021b36:	602c      	str	r4, [r5, #0]
 8021b38:	e7ec      	b.n	8021b14 <_free_r+0x28>
 8021b3a:	461a      	mov	r2, r3
 8021b3c:	685b      	ldr	r3, [r3, #4]
 8021b3e:	b10b      	cbz	r3, 8021b44 <_free_r+0x58>
 8021b40:	42a3      	cmp	r3, r4
 8021b42:	d9fa      	bls.n	8021b3a <_free_r+0x4e>
 8021b44:	6811      	ldr	r1, [r2, #0]
 8021b46:	1855      	adds	r5, r2, r1
 8021b48:	42a5      	cmp	r5, r4
 8021b4a:	d10b      	bne.n	8021b64 <_free_r+0x78>
 8021b4c:	6824      	ldr	r4, [r4, #0]
 8021b4e:	4421      	add	r1, r4
 8021b50:	1854      	adds	r4, r2, r1
 8021b52:	42a3      	cmp	r3, r4
 8021b54:	6011      	str	r1, [r2, #0]
 8021b56:	d1dd      	bne.n	8021b14 <_free_r+0x28>
 8021b58:	681c      	ldr	r4, [r3, #0]
 8021b5a:	685b      	ldr	r3, [r3, #4]
 8021b5c:	6053      	str	r3, [r2, #4]
 8021b5e:	4421      	add	r1, r4
 8021b60:	6011      	str	r1, [r2, #0]
 8021b62:	e7d7      	b.n	8021b14 <_free_r+0x28>
 8021b64:	d902      	bls.n	8021b6c <_free_r+0x80>
 8021b66:	230c      	movs	r3, #12
 8021b68:	6003      	str	r3, [r0, #0]
 8021b6a:	e7d3      	b.n	8021b14 <_free_r+0x28>
 8021b6c:	6825      	ldr	r5, [r4, #0]
 8021b6e:	1961      	adds	r1, r4, r5
 8021b70:	428b      	cmp	r3, r1
 8021b72:	bf04      	itt	eq
 8021b74:	6819      	ldreq	r1, [r3, #0]
 8021b76:	685b      	ldreq	r3, [r3, #4]
 8021b78:	6063      	str	r3, [r4, #4]
 8021b7a:	bf04      	itt	eq
 8021b7c:	1949      	addeq	r1, r1, r5
 8021b7e:	6021      	streq	r1, [r4, #0]
 8021b80:	6054      	str	r4, [r2, #4]
 8021b82:	e7c7      	b.n	8021b14 <_free_r+0x28>
 8021b84:	b003      	add	sp, #12
 8021b86:	bd30      	pop	{r4, r5, pc}
 8021b88:	2001ad50 	.word	0x2001ad50

08021b8c <_malloc_r>:
 8021b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b8e:	1ccd      	adds	r5, r1, #3
 8021b90:	f025 0503 	bic.w	r5, r5, #3
 8021b94:	3508      	adds	r5, #8
 8021b96:	2d0c      	cmp	r5, #12
 8021b98:	bf38      	it	cc
 8021b9a:	250c      	movcc	r5, #12
 8021b9c:	2d00      	cmp	r5, #0
 8021b9e:	4606      	mov	r6, r0
 8021ba0:	db01      	blt.n	8021ba6 <_malloc_r+0x1a>
 8021ba2:	42a9      	cmp	r1, r5
 8021ba4:	d903      	bls.n	8021bae <_malloc_r+0x22>
 8021ba6:	230c      	movs	r3, #12
 8021ba8:	6033      	str	r3, [r6, #0]
 8021baa:	2000      	movs	r0, #0
 8021bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021bae:	f003 fa4d 	bl	802504c <__malloc_lock>
 8021bb2:	4921      	ldr	r1, [pc, #132]	; (8021c38 <_malloc_r+0xac>)
 8021bb4:	680a      	ldr	r2, [r1, #0]
 8021bb6:	4614      	mov	r4, r2
 8021bb8:	b99c      	cbnz	r4, 8021be2 <_malloc_r+0x56>
 8021bba:	4f20      	ldr	r7, [pc, #128]	; (8021c3c <_malloc_r+0xb0>)
 8021bbc:	683b      	ldr	r3, [r7, #0]
 8021bbe:	b923      	cbnz	r3, 8021bca <_malloc_r+0x3e>
 8021bc0:	4621      	mov	r1, r4
 8021bc2:	4630      	mov	r0, r6
 8021bc4:	f000 fdb2 	bl	802272c <_sbrk_r>
 8021bc8:	6038      	str	r0, [r7, #0]
 8021bca:	4629      	mov	r1, r5
 8021bcc:	4630      	mov	r0, r6
 8021bce:	f000 fdad 	bl	802272c <_sbrk_r>
 8021bd2:	1c43      	adds	r3, r0, #1
 8021bd4:	d123      	bne.n	8021c1e <_malloc_r+0x92>
 8021bd6:	230c      	movs	r3, #12
 8021bd8:	6033      	str	r3, [r6, #0]
 8021bda:	4630      	mov	r0, r6
 8021bdc:	f003 fa3c 	bl	8025058 <__malloc_unlock>
 8021be0:	e7e3      	b.n	8021baa <_malloc_r+0x1e>
 8021be2:	6823      	ldr	r3, [r4, #0]
 8021be4:	1b5b      	subs	r3, r3, r5
 8021be6:	d417      	bmi.n	8021c18 <_malloc_r+0x8c>
 8021be8:	2b0b      	cmp	r3, #11
 8021bea:	d903      	bls.n	8021bf4 <_malloc_r+0x68>
 8021bec:	6023      	str	r3, [r4, #0]
 8021bee:	441c      	add	r4, r3
 8021bf0:	6025      	str	r5, [r4, #0]
 8021bf2:	e004      	b.n	8021bfe <_malloc_r+0x72>
 8021bf4:	6863      	ldr	r3, [r4, #4]
 8021bf6:	42a2      	cmp	r2, r4
 8021bf8:	bf0c      	ite	eq
 8021bfa:	600b      	streq	r3, [r1, #0]
 8021bfc:	6053      	strne	r3, [r2, #4]
 8021bfe:	4630      	mov	r0, r6
 8021c00:	f003 fa2a 	bl	8025058 <__malloc_unlock>
 8021c04:	f104 000b 	add.w	r0, r4, #11
 8021c08:	1d23      	adds	r3, r4, #4
 8021c0a:	f020 0007 	bic.w	r0, r0, #7
 8021c0e:	1ac2      	subs	r2, r0, r3
 8021c10:	d0cc      	beq.n	8021bac <_malloc_r+0x20>
 8021c12:	1a1b      	subs	r3, r3, r0
 8021c14:	50a3      	str	r3, [r4, r2]
 8021c16:	e7c9      	b.n	8021bac <_malloc_r+0x20>
 8021c18:	4622      	mov	r2, r4
 8021c1a:	6864      	ldr	r4, [r4, #4]
 8021c1c:	e7cc      	b.n	8021bb8 <_malloc_r+0x2c>
 8021c1e:	1cc4      	adds	r4, r0, #3
 8021c20:	f024 0403 	bic.w	r4, r4, #3
 8021c24:	42a0      	cmp	r0, r4
 8021c26:	d0e3      	beq.n	8021bf0 <_malloc_r+0x64>
 8021c28:	1a21      	subs	r1, r4, r0
 8021c2a:	4630      	mov	r0, r6
 8021c2c:	f000 fd7e 	bl	802272c <_sbrk_r>
 8021c30:	3001      	adds	r0, #1
 8021c32:	d1dd      	bne.n	8021bf0 <_malloc_r+0x64>
 8021c34:	e7cf      	b.n	8021bd6 <_malloc_r+0x4a>
 8021c36:	bf00      	nop
 8021c38:	2001ad50 	.word	0x2001ad50
 8021c3c:	2001ad54 	.word	0x2001ad54

08021c40 <__cvt>:
 8021c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c42:	ed2d 8b02 	vpush	{d8}
 8021c46:	eeb0 8b40 	vmov.f64	d8, d0
 8021c4a:	b085      	sub	sp, #20
 8021c4c:	4617      	mov	r7, r2
 8021c4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021c50:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021c52:	ee18 2a90 	vmov	r2, s17
 8021c56:	f025 0520 	bic.w	r5, r5, #32
 8021c5a:	2a00      	cmp	r2, #0
 8021c5c:	bfb6      	itet	lt
 8021c5e:	222d      	movlt	r2, #45	; 0x2d
 8021c60:	2200      	movge	r2, #0
 8021c62:	eeb1 8b40 	vneglt.f64	d8, d0
 8021c66:	2d46      	cmp	r5, #70	; 0x46
 8021c68:	460c      	mov	r4, r1
 8021c6a:	701a      	strb	r2, [r3, #0]
 8021c6c:	d004      	beq.n	8021c78 <__cvt+0x38>
 8021c6e:	2d45      	cmp	r5, #69	; 0x45
 8021c70:	d100      	bne.n	8021c74 <__cvt+0x34>
 8021c72:	3401      	adds	r4, #1
 8021c74:	2102      	movs	r1, #2
 8021c76:	e000      	b.n	8021c7a <__cvt+0x3a>
 8021c78:	2103      	movs	r1, #3
 8021c7a:	ab03      	add	r3, sp, #12
 8021c7c:	9301      	str	r3, [sp, #4]
 8021c7e:	ab02      	add	r3, sp, #8
 8021c80:	9300      	str	r3, [sp, #0]
 8021c82:	4622      	mov	r2, r4
 8021c84:	4633      	mov	r3, r6
 8021c86:	eeb0 0b48 	vmov.f64	d0, d8
 8021c8a:	f002 f901 	bl	8023e90 <_dtoa_r>
 8021c8e:	2d47      	cmp	r5, #71	; 0x47
 8021c90:	d109      	bne.n	8021ca6 <__cvt+0x66>
 8021c92:	07fb      	lsls	r3, r7, #31
 8021c94:	d407      	bmi.n	8021ca6 <__cvt+0x66>
 8021c96:	9b03      	ldr	r3, [sp, #12]
 8021c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021c9a:	1a1b      	subs	r3, r3, r0
 8021c9c:	6013      	str	r3, [r2, #0]
 8021c9e:	b005      	add	sp, #20
 8021ca0:	ecbd 8b02 	vpop	{d8}
 8021ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ca6:	2d46      	cmp	r5, #70	; 0x46
 8021ca8:	eb00 0204 	add.w	r2, r0, r4
 8021cac:	d10c      	bne.n	8021cc8 <__cvt+0x88>
 8021cae:	7803      	ldrb	r3, [r0, #0]
 8021cb0:	2b30      	cmp	r3, #48	; 0x30
 8021cb2:	d107      	bne.n	8021cc4 <__cvt+0x84>
 8021cb4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cbc:	bf1c      	itt	ne
 8021cbe:	f1c4 0401 	rsbne	r4, r4, #1
 8021cc2:	6034      	strne	r4, [r6, #0]
 8021cc4:	6833      	ldr	r3, [r6, #0]
 8021cc6:	441a      	add	r2, r3
 8021cc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cd0:	bf08      	it	eq
 8021cd2:	9203      	streq	r2, [sp, #12]
 8021cd4:	2130      	movs	r1, #48	; 0x30
 8021cd6:	9b03      	ldr	r3, [sp, #12]
 8021cd8:	4293      	cmp	r3, r2
 8021cda:	d2dc      	bcs.n	8021c96 <__cvt+0x56>
 8021cdc:	1c5c      	adds	r4, r3, #1
 8021cde:	9403      	str	r4, [sp, #12]
 8021ce0:	7019      	strb	r1, [r3, #0]
 8021ce2:	e7f8      	b.n	8021cd6 <__cvt+0x96>

08021ce4 <__exponent>:
 8021ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021ce6:	4603      	mov	r3, r0
 8021ce8:	2900      	cmp	r1, #0
 8021cea:	bfb8      	it	lt
 8021cec:	4249      	neglt	r1, r1
 8021cee:	f803 2b02 	strb.w	r2, [r3], #2
 8021cf2:	bfb4      	ite	lt
 8021cf4:	222d      	movlt	r2, #45	; 0x2d
 8021cf6:	222b      	movge	r2, #43	; 0x2b
 8021cf8:	2909      	cmp	r1, #9
 8021cfa:	7042      	strb	r2, [r0, #1]
 8021cfc:	dd2a      	ble.n	8021d54 <__exponent+0x70>
 8021cfe:	f10d 0407 	add.w	r4, sp, #7
 8021d02:	46a4      	mov	ip, r4
 8021d04:	270a      	movs	r7, #10
 8021d06:	46a6      	mov	lr, r4
 8021d08:	460a      	mov	r2, r1
 8021d0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8021d0e:	fb07 1516 	mls	r5, r7, r6, r1
 8021d12:	3530      	adds	r5, #48	; 0x30
 8021d14:	2a63      	cmp	r2, #99	; 0x63
 8021d16:	f104 34ff 	add.w	r4, r4, #4294967295
 8021d1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021d1e:	4631      	mov	r1, r6
 8021d20:	dcf1      	bgt.n	8021d06 <__exponent+0x22>
 8021d22:	3130      	adds	r1, #48	; 0x30
 8021d24:	f1ae 0502 	sub.w	r5, lr, #2
 8021d28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8021d2c:	1c44      	adds	r4, r0, #1
 8021d2e:	4629      	mov	r1, r5
 8021d30:	4561      	cmp	r1, ip
 8021d32:	d30a      	bcc.n	8021d4a <__exponent+0x66>
 8021d34:	f10d 0209 	add.w	r2, sp, #9
 8021d38:	eba2 020e 	sub.w	r2, r2, lr
 8021d3c:	4565      	cmp	r5, ip
 8021d3e:	bf88      	it	hi
 8021d40:	2200      	movhi	r2, #0
 8021d42:	4413      	add	r3, r2
 8021d44:	1a18      	subs	r0, r3, r0
 8021d46:	b003      	add	sp, #12
 8021d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021d4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8021d52:	e7ed      	b.n	8021d30 <__exponent+0x4c>
 8021d54:	2330      	movs	r3, #48	; 0x30
 8021d56:	3130      	adds	r1, #48	; 0x30
 8021d58:	7083      	strb	r3, [r0, #2]
 8021d5a:	70c1      	strb	r1, [r0, #3]
 8021d5c:	1d03      	adds	r3, r0, #4
 8021d5e:	e7f1      	b.n	8021d44 <__exponent+0x60>

08021d60 <_printf_float>:
 8021d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d64:	b08b      	sub	sp, #44	; 0x2c
 8021d66:	460c      	mov	r4, r1
 8021d68:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8021d6c:	4616      	mov	r6, r2
 8021d6e:	461f      	mov	r7, r3
 8021d70:	4605      	mov	r5, r0
 8021d72:	f003 f8d9 	bl	8024f28 <_localeconv_r>
 8021d76:	f8d0 b000 	ldr.w	fp, [r0]
 8021d7a:	4658      	mov	r0, fp
 8021d7c:	f7de fa6a 	bl	8000254 <strlen>
 8021d80:	2300      	movs	r3, #0
 8021d82:	9308      	str	r3, [sp, #32]
 8021d84:	f8d8 3000 	ldr.w	r3, [r8]
 8021d88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8021d8c:	6822      	ldr	r2, [r4, #0]
 8021d8e:	3307      	adds	r3, #7
 8021d90:	f023 0307 	bic.w	r3, r3, #7
 8021d94:	f103 0108 	add.w	r1, r3, #8
 8021d98:	f8c8 1000 	str.w	r1, [r8]
 8021d9c:	4682      	mov	sl, r0
 8021d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021da2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8021da6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8022008 <_printf_float+0x2a8>
 8021daa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8021dae:	eeb0 6bc0 	vabs.f64	d6, d0
 8021db2:	eeb4 6b47 	vcmp.f64	d6, d7
 8021db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dba:	dd24      	ble.n	8021e06 <_printf_float+0xa6>
 8021dbc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8021dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dc4:	d502      	bpl.n	8021dcc <_printf_float+0x6c>
 8021dc6:	232d      	movs	r3, #45	; 0x2d
 8021dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021dcc:	4b90      	ldr	r3, [pc, #576]	; (8022010 <_printf_float+0x2b0>)
 8021dce:	4891      	ldr	r0, [pc, #580]	; (8022014 <_printf_float+0x2b4>)
 8021dd0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8021dd4:	bf94      	ite	ls
 8021dd6:	4698      	movls	r8, r3
 8021dd8:	4680      	movhi	r8, r0
 8021dda:	2303      	movs	r3, #3
 8021ddc:	6123      	str	r3, [r4, #16]
 8021dde:	f022 0204 	bic.w	r2, r2, #4
 8021de2:	2300      	movs	r3, #0
 8021de4:	6022      	str	r2, [r4, #0]
 8021de6:	9304      	str	r3, [sp, #16]
 8021de8:	9700      	str	r7, [sp, #0]
 8021dea:	4633      	mov	r3, r6
 8021dec:	aa09      	add	r2, sp, #36	; 0x24
 8021dee:	4621      	mov	r1, r4
 8021df0:	4628      	mov	r0, r5
 8021df2:	f000 f9d3 	bl	802219c <_printf_common>
 8021df6:	3001      	adds	r0, #1
 8021df8:	f040 808a 	bne.w	8021f10 <_printf_float+0x1b0>
 8021dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8021e00:	b00b      	add	sp, #44	; 0x2c
 8021e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e06:	eeb4 0b40 	vcmp.f64	d0, d0
 8021e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e0e:	d709      	bvc.n	8021e24 <_printf_float+0xc4>
 8021e10:	ee10 3a90 	vmov	r3, s1
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	bfbc      	itt	lt
 8021e18:	232d      	movlt	r3, #45	; 0x2d
 8021e1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8021e1e:	487e      	ldr	r0, [pc, #504]	; (8022018 <_printf_float+0x2b8>)
 8021e20:	4b7e      	ldr	r3, [pc, #504]	; (802201c <_printf_float+0x2bc>)
 8021e22:	e7d5      	b.n	8021dd0 <_printf_float+0x70>
 8021e24:	6863      	ldr	r3, [r4, #4]
 8021e26:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8021e2a:	9104      	str	r1, [sp, #16]
 8021e2c:	1c59      	adds	r1, r3, #1
 8021e2e:	d13c      	bne.n	8021eaa <_printf_float+0x14a>
 8021e30:	2306      	movs	r3, #6
 8021e32:	6063      	str	r3, [r4, #4]
 8021e34:	2300      	movs	r3, #0
 8021e36:	9303      	str	r3, [sp, #12]
 8021e38:	ab08      	add	r3, sp, #32
 8021e3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8021e3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8021e42:	ab07      	add	r3, sp, #28
 8021e44:	6861      	ldr	r1, [r4, #4]
 8021e46:	9300      	str	r3, [sp, #0]
 8021e48:	6022      	str	r2, [r4, #0]
 8021e4a:	f10d 031b 	add.w	r3, sp, #27
 8021e4e:	4628      	mov	r0, r5
 8021e50:	f7ff fef6 	bl	8021c40 <__cvt>
 8021e54:	9b04      	ldr	r3, [sp, #16]
 8021e56:	9907      	ldr	r1, [sp, #28]
 8021e58:	2b47      	cmp	r3, #71	; 0x47
 8021e5a:	4680      	mov	r8, r0
 8021e5c:	d108      	bne.n	8021e70 <_printf_float+0x110>
 8021e5e:	1cc8      	adds	r0, r1, #3
 8021e60:	db02      	blt.n	8021e68 <_printf_float+0x108>
 8021e62:	6863      	ldr	r3, [r4, #4]
 8021e64:	4299      	cmp	r1, r3
 8021e66:	dd41      	ble.n	8021eec <_printf_float+0x18c>
 8021e68:	f1a9 0902 	sub.w	r9, r9, #2
 8021e6c:	fa5f f989 	uxtb.w	r9, r9
 8021e70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8021e74:	d820      	bhi.n	8021eb8 <_printf_float+0x158>
 8021e76:	3901      	subs	r1, #1
 8021e78:	464a      	mov	r2, r9
 8021e7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8021e7e:	9107      	str	r1, [sp, #28]
 8021e80:	f7ff ff30 	bl	8021ce4 <__exponent>
 8021e84:	9a08      	ldr	r2, [sp, #32]
 8021e86:	9004      	str	r0, [sp, #16]
 8021e88:	1813      	adds	r3, r2, r0
 8021e8a:	2a01      	cmp	r2, #1
 8021e8c:	6123      	str	r3, [r4, #16]
 8021e8e:	dc02      	bgt.n	8021e96 <_printf_float+0x136>
 8021e90:	6822      	ldr	r2, [r4, #0]
 8021e92:	07d2      	lsls	r2, r2, #31
 8021e94:	d501      	bpl.n	8021e9a <_printf_float+0x13a>
 8021e96:	3301      	adds	r3, #1
 8021e98:	6123      	str	r3, [r4, #16]
 8021e9a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	d0a2      	beq.n	8021de8 <_printf_float+0x88>
 8021ea2:	232d      	movs	r3, #45	; 0x2d
 8021ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021ea8:	e79e      	b.n	8021de8 <_printf_float+0x88>
 8021eaa:	9904      	ldr	r1, [sp, #16]
 8021eac:	2947      	cmp	r1, #71	; 0x47
 8021eae:	d1c1      	bne.n	8021e34 <_printf_float+0xd4>
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d1bf      	bne.n	8021e34 <_printf_float+0xd4>
 8021eb4:	2301      	movs	r3, #1
 8021eb6:	e7bc      	b.n	8021e32 <_printf_float+0xd2>
 8021eb8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8021ebc:	d118      	bne.n	8021ef0 <_printf_float+0x190>
 8021ebe:	2900      	cmp	r1, #0
 8021ec0:	6863      	ldr	r3, [r4, #4]
 8021ec2:	dd0b      	ble.n	8021edc <_printf_float+0x17c>
 8021ec4:	6121      	str	r1, [r4, #16]
 8021ec6:	b913      	cbnz	r3, 8021ece <_printf_float+0x16e>
 8021ec8:	6822      	ldr	r2, [r4, #0]
 8021eca:	07d0      	lsls	r0, r2, #31
 8021ecc:	d502      	bpl.n	8021ed4 <_printf_float+0x174>
 8021ece:	3301      	adds	r3, #1
 8021ed0:	440b      	add	r3, r1
 8021ed2:	6123      	str	r3, [r4, #16]
 8021ed4:	2300      	movs	r3, #0
 8021ed6:	65a1      	str	r1, [r4, #88]	; 0x58
 8021ed8:	9304      	str	r3, [sp, #16]
 8021eda:	e7de      	b.n	8021e9a <_printf_float+0x13a>
 8021edc:	b913      	cbnz	r3, 8021ee4 <_printf_float+0x184>
 8021ede:	6822      	ldr	r2, [r4, #0]
 8021ee0:	07d2      	lsls	r2, r2, #31
 8021ee2:	d501      	bpl.n	8021ee8 <_printf_float+0x188>
 8021ee4:	3302      	adds	r3, #2
 8021ee6:	e7f4      	b.n	8021ed2 <_printf_float+0x172>
 8021ee8:	2301      	movs	r3, #1
 8021eea:	e7f2      	b.n	8021ed2 <_printf_float+0x172>
 8021eec:	f04f 0967 	mov.w	r9, #103	; 0x67
 8021ef0:	9b08      	ldr	r3, [sp, #32]
 8021ef2:	4299      	cmp	r1, r3
 8021ef4:	db05      	blt.n	8021f02 <_printf_float+0x1a2>
 8021ef6:	6823      	ldr	r3, [r4, #0]
 8021ef8:	6121      	str	r1, [r4, #16]
 8021efa:	07d8      	lsls	r0, r3, #31
 8021efc:	d5ea      	bpl.n	8021ed4 <_printf_float+0x174>
 8021efe:	1c4b      	adds	r3, r1, #1
 8021f00:	e7e7      	b.n	8021ed2 <_printf_float+0x172>
 8021f02:	2900      	cmp	r1, #0
 8021f04:	bfd4      	ite	le
 8021f06:	f1c1 0202 	rsble	r2, r1, #2
 8021f0a:	2201      	movgt	r2, #1
 8021f0c:	4413      	add	r3, r2
 8021f0e:	e7e0      	b.n	8021ed2 <_printf_float+0x172>
 8021f10:	6823      	ldr	r3, [r4, #0]
 8021f12:	055a      	lsls	r2, r3, #21
 8021f14:	d407      	bmi.n	8021f26 <_printf_float+0x1c6>
 8021f16:	6923      	ldr	r3, [r4, #16]
 8021f18:	4642      	mov	r2, r8
 8021f1a:	4631      	mov	r1, r6
 8021f1c:	4628      	mov	r0, r5
 8021f1e:	47b8      	blx	r7
 8021f20:	3001      	adds	r0, #1
 8021f22:	d12a      	bne.n	8021f7a <_printf_float+0x21a>
 8021f24:	e76a      	b.n	8021dfc <_printf_float+0x9c>
 8021f26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8021f2a:	f240 80e2 	bls.w	80220f2 <_printf_float+0x392>
 8021f2e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8021f32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f3a:	d133      	bne.n	8021fa4 <_printf_float+0x244>
 8021f3c:	4a38      	ldr	r2, [pc, #224]	; (8022020 <_printf_float+0x2c0>)
 8021f3e:	2301      	movs	r3, #1
 8021f40:	4631      	mov	r1, r6
 8021f42:	4628      	mov	r0, r5
 8021f44:	47b8      	blx	r7
 8021f46:	3001      	adds	r0, #1
 8021f48:	f43f af58 	beq.w	8021dfc <_printf_float+0x9c>
 8021f4c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021f50:	429a      	cmp	r2, r3
 8021f52:	db02      	blt.n	8021f5a <_printf_float+0x1fa>
 8021f54:	6823      	ldr	r3, [r4, #0]
 8021f56:	07d8      	lsls	r0, r3, #31
 8021f58:	d50f      	bpl.n	8021f7a <_printf_float+0x21a>
 8021f5a:	4653      	mov	r3, sl
 8021f5c:	465a      	mov	r2, fp
 8021f5e:	4631      	mov	r1, r6
 8021f60:	4628      	mov	r0, r5
 8021f62:	47b8      	blx	r7
 8021f64:	3001      	adds	r0, #1
 8021f66:	f43f af49 	beq.w	8021dfc <_printf_float+0x9c>
 8021f6a:	f04f 0800 	mov.w	r8, #0
 8021f6e:	f104 091a 	add.w	r9, r4, #26
 8021f72:	9b08      	ldr	r3, [sp, #32]
 8021f74:	3b01      	subs	r3, #1
 8021f76:	4543      	cmp	r3, r8
 8021f78:	dc09      	bgt.n	8021f8e <_printf_float+0x22e>
 8021f7a:	6823      	ldr	r3, [r4, #0]
 8021f7c:	079b      	lsls	r3, r3, #30
 8021f7e:	f100 8108 	bmi.w	8022192 <_printf_float+0x432>
 8021f82:	68e0      	ldr	r0, [r4, #12]
 8021f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f86:	4298      	cmp	r0, r3
 8021f88:	bfb8      	it	lt
 8021f8a:	4618      	movlt	r0, r3
 8021f8c:	e738      	b.n	8021e00 <_printf_float+0xa0>
 8021f8e:	2301      	movs	r3, #1
 8021f90:	464a      	mov	r2, r9
 8021f92:	4631      	mov	r1, r6
 8021f94:	4628      	mov	r0, r5
 8021f96:	47b8      	blx	r7
 8021f98:	3001      	adds	r0, #1
 8021f9a:	f43f af2f 	beq.w	8021dfc <_printf_float+0x9c>
 8021f9e:	f108 0801 	add.w	r8, r8, #1
 8021fa2:	e7e6      	b.n	8021f72 <_printf_float+0x212>
 8021fa4:	9b07      	ldr	r3, [sp, #28]
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	dc3c      	bgt.n	8022024 <_printf_float+0x2c4>
 8021faa:	4a1d      	ldr	r2, [pc, #116]	; (8022020 <_printf_float+0x2c0>)
 8021fac:	2301      	movs	r3, #1
 8021fae:	4631      	mov	r1, r6
 8021fb0:	4628      	mov	r0, r5
 8021fb2:	47b8      	blx	r7
 8021fb4:	3001      	adds	r0, #1
 8021fb6:	f43f af21 	beq.w	8021dfc <_printf_float+0x9c>
 8021fba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021fbe:	4313      	orrs	r3, r2
 8021fc0:	d102      	bne.n	8021fc8 <_printf_float+0x268>
 8021fc2:	6823      	ldr	r3, [r4, #0]
 8021fc4:	07d9      	lsls	r1, r3, #31
 8021fc6:	d5d8      	bpl.n	8021f7a <_printf_float+0x21a>
 8021fc8:	4653      	mov	r3, sl
 8021fca:	465a      	mov	r2, fp
 8021fcc:	4631      	mov	r1, r6
 8021fce:	4628      	mov	r0, r5
 8021fd0:	47b8      	blx	r7
 8021fd2:	3001      	adds	r0, #1
 8021fd4:	f43f af12 	beq.w	8021dfc <_printf_float+0x9c>
 8021fd8:	f04f 0900 	mov.w	r9, #0
 8021fdc:	f104 0a1a 	add.w	sl, r4, #26
 8021fe0:	9b07      	ldr	r3, [sp, #28]
 8021fe2:	425b      	negs	r3, r3
 8021fe4:	454b      	cmp	r3, r9
 8021fe6:	dc01      	bgt.n	8021fec <_printf_float+0x28c>
 8021fe8:	9b08      	ldr	r3, [sp, #32]
 8021fea:	e795      	b.n	8021f18 <_printf_float+0x1b8>
 8021fec:	2301      	movs	r3, #1
 8021fee:	4652      	mov	r2, sl
 8021ff0:	4631      	mov	r1, r6
 8021ff2:	4628      	mov	r0, r5
 8021ff4:	47b8      	blx	r7
 8021ff6:	3001      	adds	r0, #1
 8021ff8:	f43f af00 	beq.w	8021dfc <_printf_float+0x9c>
 8021ffc:	f109 0901 	add.w	r9, r9, #1
 8022000:	e7ee      	b.n	8021fe0 <_printf_float+0x280>
 8022002:	bf00      	nop
 8022004:	f3af 8000 	nop.w
 8022008:	ffffffff 	.word	0xffffffff
 802200c:	7fefffff 	.word	0x7fefffff
 8022010:	08041ea8 	.word	0x08041ea8
 8022014:	08041eac 	.word	0x08041eac
 8022018:	08041eb4 	.word	0x08041eb4
 802201c:	08041eb0 	.word	0x08041eb0
 8022020:	08042549 	.word	0x08042549
 8022024:	9a08      	ldr	r2, [sp, #32]
 8022026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022028:	429a      	cmp	r2, r3
 802202a:	bfa8      	it	ge
 802202c:	461a      	movge	r2, r3
 802202e:	2a00      	cmp	r2, #0
 8022030:	4691      	mov	r9, r2
 8022032:	dc38      	bgt.n	80220a6 <_printf_float+0x346>
 8022034:	2300      	movs	r3, #0
 8022036:	9305      	str	r3, [sp, #20]
 8022038:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802203c:	f104 021a 	add.w	r2, r4, #26
 8022040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022042:	9905      	ldr	r1, [sp, #20]
 8022044:	9304      	str	r3, [sp, #16]
 8022046:	eba3 0309 	sub.w	r3, r3, r9
 802204a:	428b      	cmp	r3, r1
 802204c:	dc33      	bgt.n	80220b6 <_printf_float+0x356>
 802204e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022052:	429a      	cmp	r2, r3
 8022054:	db3c      	blt.n	80220d0 <_printf_float+0x370>
 8022056:	6823      	ldr	r3, [r4, #0]
 8022058:	07da      	lsls	r2, r3, #31
 802205a:	d439      	bmi.n	80220d0 <_printf_float+0x370>
 802205c:	9a08      	ldr	r2, [sp, #32]
 802205e:	9b04      	ldr	r3, [sp, #16]
 8022060:	9907      	ldr	r1, [sp, #28]
 8022062:	1ad3      	subs	r3, r2, r3
 8022064:	eba2 0901 	sub.w	r9, r2, r1
 8022068:	4599      	cmp	r9, r3
 802206a:	bfa8      	it	ge
 802206c:	4699      	movge	r9, r3
 802206e:	f1b9 0f00 	cmp.w	r9, #0
 8022072:	dc35      	bgt.n	80220e0 <_printf_float+0x380>
 8022074:	f04f 0800 	mov.w	r8, #0
 8022078:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802207c:	f104 0a1a 	add.w	sl, r4, #26
 8022080:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022084:	1a9b      	subs	r3, r3, r2
 8022086:	eba3 0309 	sub.w	r3, r3, r9
 802208a:	4543      	cmp	r3, r8
 802208c:	f77f af75 	ble.w	8021f7a <_printf_float+0x21a>
 8022090:	2301      	movs	r3, #1
 8022092:	4652      	mov	r2, sl
 8022094:	4631      	mov	r1, r6
 8022096:	4628      	mov	r0, r5
 8022098:	47b8      	blx	r7
 802209a:	3001      	adds	r0, #1
 802209c:	f43f aeae 	beq.w	8021dfc <_printf_float+0x9c>
 80220a0:	f108 0801 	add.w	r8, r8, #1
 80220a4:	e7ec      	b.n	8022080 <_printf_float+0x320>
 80220a6:	4613      	mov	r3, r2
 80220a8:	4631      	mov	r1, r6
 80220aa:	4642      	mov	r2, r8
 80220ac:	4628      	mov	r0, r5
 80220ae:	47b8      	blx	r7
 80220b0:	3001      	adds	r0, #1
 80220b2:	d1bf      	bne.n	8022034 <_printf_float+0x2d4>
 80220b4:	e6a2      	b.n	8021dfc <_printf_float+0x9c>
 80220b6:	2301      	movs	r3, #1
 80220b8:	4631      	mov	r1, r6
 80220ba:	4628      	mov	r0, r5
 80220bc:	9204      	str	r2, [sp, #16]
 80220be:	47b8      	blx	r7
 80220c0:	3001      	adds	r0, #1
 80220c2:	f43f ae9b 	beq.w	8021dfc <_printf_float+0x9c>
 80220c6:	9b05      	ldr	r3, [sp, #20]
 80220c8:	9a04      	ldr	r2, [sp, #16]
 80220ca:	3301      	adds	r3, #1
 80220cc:	9305      	str	r3, [sp, #20]
 80220ce:	e7b7      	b.n	8022040 <_printf_float+0x2e0>
 80220d0:	4653      	mov	r3, sl
 80220d2:	465a      	mov	r2, fp
 80220d4:	4631      	mov	r1, r6
 80220d6:	4628      	mov	r0, r5
 80220d8:	47b8      	blx	r7
 80220da:	3001      	adds	r0, #1
 80220dc:	d1be      	bne.n	802205c <_printf_float+0x2fc>
 80220de:	e68d      	b.n	8021dfc <_printf_float+0x9c>
 80220e0:	9a04      	ldr	r2, [sp, #16]
 80220e2:	464b      	mov	r3, r9
 80220e4:	4442      	add	r2, r8
 80220e6:	4631      	mov	r1, r6
 80220e8:	4628      	mov	r0, r5
 80220ea:	47b8      	blx	r7
 80220ec:	3001      	adds	r0, #1
 80220ee:	d1c1      	bne.n	8022074 <_printf_float+0x314>
 80220f0:	e684      	b.n	8021dfc <_printf_float+0x9c>
 80220f2:	9a08      	ldr	r2, [sp, #32]
 80220f4:	2a01      	cmp	r2, #1
 80220f6:	dc01      	bgt.n	80220fc <_printf_float+0x39c>
 80220f8:	07db      	lsls	r3, r3, #31
 80220fa:	d537      	bpl.n	802216c <_printf_float+0x40c>
 80220fc:	2301      	movs	r3, #1
 80220fe:	4642      	mov	r2, r8
 8022100:	4631      	mov	r1, r6
 8022102:	4628      	mov	r0, r5
 8022104:	47b8      	blx	r7
 8022106:	3001      	adds	r0, #1
 8022108:	f43f ae78 	beq.w	8021dfc <_printf_float+0x9c>
 802210c:	4653      	mov	r3, sl
 802210e:	465a      	mov	r2, fp
 8022110:	4631      	mov	r1, r6
 8022112:	4628      	mov	r0, r5
 8022114:	47b8      	blx	r7
 8022116:	3001      	adds	r0, #1
 8022118:	f43f ae70 	beq.w	8021dfc <_printf_float+0x9c>
 802211c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8022120:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022128:	d01b      	beq.n	8022162 <_printf_float+0x402>
 802212a:	9b08      	ldr	r3, [sp, #32]
 802212c:	f108 0201 	add.w	r2, r8, #1
 8022130:	3b01      	subs	r3, #1
 8022132:	4631      	mov	r1, r6
 8022134:	4628      	mov	r0, r5
 8022136:	47b8      	blx	r7
 8022138:	3001      	adds	r0, #1
 802213a:	d10e      	bne.n	802215a <_printf_float+0x3fa>
 802213c:	e65e      	b.n	8021dfc <_printf_float+0x9c>
 802213e:	2301      	movs	r3, #1
 8022140:	464a      	mov	r2, r9
 8022142:	4631      	mov	r1, r6
 8022144:	4628      	mov	r0, r5
 8022146:	47b8      	blx	r7
 8022148:	3001      	adds	r0, #1
 802214a:	f43f ae57 	beq.w	8021dfc <_printf_float+0x9c>
 802214e:	f108 0801 	add.w	r8, r8, #1
 8022152:	9b08      	ldr	r3, [sp, #32]
 8022154:	3b01      	subs	r3, #1
 8022156:	4543      	cmp	r3, r8
 8022158:	dcf1      	bgt.n	802213e <_printf_float+0x3de>
 802215a:	9b04      	ldr	r3, [sp, #16]
 802215c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8022160:	e6db      	b.n	8021f1a <_printf_float+0x1ba>
 8022162:	f04f 0800 	mov.w	r8, #0
 8022166:	f104 091a 	add.w	r9, r4, #26
 802216a:	e7f2      	b.n	8022152 <_printf_float+0x3f2>
 802216c:	2301      	movs	r3, #1
 802216e:	4642      	mov	r2, r8
 8022170:	e7df      	b.n	8022132 <_printf_float+0x3d2>
 8022172:	2301      	movs	r3, #1
 8022174:	464a      	mov	r2, r9
 8022176:	4631      	mov	r1, r6
 8022178:	4628      	mov	r0, r5
 802217a:	47b8      	blx	r7
 802217c:	3001      	adds	r0, #1
 802217e:	f43f ae3d 	beq.w	8021dfc <_printf_float+0x9c>
 8022182:	f108 0801 	add.w	r8, r8, #1
 8022186:	68e3      	ldr	r3, [r4, #12]
 8022188:	9909      	ldr	r1, [sp, #36]	; 0x24
 802218a:	1a5b      	subs	r3, r3, r1
 802218c:	4543      	cmp	r3, r8
 802218e:	dcf0      	bgt.n	8022172 <_printf_float+0x412>
 8022190:	e6f7      	b.n	8021f82 <_printf_float+0x222>
 8022192:	f04f 0800 	mov.w	r8, #0
 8022196:	f104 0919 	add.w	r9, r4, #25
 802219a:	e7f4      	b.n	8022186 <_printf_float+0x426>

0802219c <_printf_common>:
 802219c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80221a0:	4616      	mov	r6, r2
 80221a2:	4699      	mov	r9, r3
 80221a4:	688a      	ldr	r2, [r1, #8]
 80221a6:	690b      	ldr	r3, [r1, #16]
 80221a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80221ac:	4293      	cmp	r3, r2
 80221ae:	bfb8      	it	lt
 80221b0:	4613      	movlt	r3, r2
 80221b2:	6033      	str	r3, [r6, #0]
 80221b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80221b8:	4607      	mov	r7, r0
 80221ba:	460c      	mov	r4, r1
 80221bc:	b10a      	cbz	r2, 80221c2 <_printf_common+0x26>
 80221be:	3301      	adds	r3, #1
 80221c0:	6033      	str	r3, [r6, #0]
 80221c2:	6823      	ldr	r3, [r4, #0]
 80221c4:	0699      	lsls	r1, r3, #26
 80221c6:	bf42      	ittt	mi
 80221c8:	6833      	ldrmi	r3, [r6, #0]
 80221ca:	3302      	addmi	r3, #2
 80221cc:	6033      	strmi	r3, [r6, #0]
 80221ce:	6825      	ldr	r5, [r4, #0]
 80221d0:	f015 0506 	ands.w	r5, r5, #6
 80221d4:	d106      	bne.n	80221e4 <_printf_common+0x48>
 80221d6:	f104 0a19 	add.w	sl, r4, #25
 80221da:	68e3      	ldr	r3, [r4, #12]
 80221dc:	6832      	ldr	r2, [r6, #0]
 80221de:	1a9b      	subs	r3, r3, r2
 80221e0:	42ab      	cmp	r3, r5
 80221e2:	dc26      	bgt.n	8022232 <_printf_common+0x96>
 80221e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80221e8:	1e13      	subs	r3, r2, #0
 80221ea:	6822      	ldr	r2, [r4, #0]
 80221ec:	bf18      	it	ne
 80221ee:	2301      	movne	r3, #1
 80221f0:	0692      	lsls	r2, r2, #26
 80221f2:	d42b      	bmi.n	802224c <_printf_common+0xb0>
 80221f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80221f8:	4649      	mov	r1, r9
 80221fa:	4638      	mov	r0, r7
 80221fc:	47c0      	blx	r8
 80221fe:	3001      	adds	r0, #1
 8022200:	d01e      	beq.n	8022240 <_printf_common+0xa4>
 8022202:	6823      	ldr	r3, [r4, #0]
 8022204:	68e5      	ldr	r5, [r4, #12]
 8022206:	6832      	ldr	r2, [r6, #0]
 8022208:	f003 0306 	and.w	r3, r3, #6
 802220c:	2b04      	cmp	r3, #4
 802220e:	bf08      	it	eq
 8022210:	1aad      	subeq	r5, r5, r2
 8022212:	68a3      	ldr	r3, [r4, #8]
 8022214:	6922      	ldr	r2, [r4, #16]
 8022216:	bf0c      	ite	eq
 8022218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802221c:	2500      	movne	r5, #0
 802221e:	4293      	cmp	r3, r2
 8022220:	bfc4      	itt	gt
 8022222:	1a9b      	subgt	r3, r3, r2
 8022224:	18ed      	addgt	r5, r5, r3
 8022226:	2600      	movs	r6, #0
 8022228:	341a      	adds	r4, #26
 802222a:	42b5      	cmp	r5, r6
 802222c:	d11a      	bne.n	8022264 <_printf_common+0xc8>
 802222e:	2000      	movs	r0, #0
 8022230:	e008      	b.n	8022244 <_printf_common+0xa8>
 8022232:	2301      	movs	r3, #1
 8022234:	4652      	mov	r2, sl
 8022236:	4649      	mov	r1, r9
 8022238:	4638      	mov	r0, r7
 802223a:	47c0      	blx	r8
 802223c:	3001      	adds	r0, #1
 802223e:	d103      	bne.n	8022248 <_printf_common+0xac>
 8022240:	f04f 30ff 	mov.w	r0, #4294967295
 8022244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022248:	3501      	adds	r5, #1
 802224a:	e7c6      	b.n	80221da <_printf_common+0x3e>
 802224c:	18e1      	adds	r1, r4, r3
 802224e:	1c5a      	adds	r2, r3, #1
 8022250:	2030      	movs	r0, #48	; 0x30
 8022252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022256:	4422      	add	r2, r4
 8022258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802225c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022260:	3302      	adds	r3, #2
 8022262:	e7c7      	b.n	80221f4 <_printf_common+0x58>
 8022264:	2301      	movs	r3, #1
 8022266:	4622      	mov	r2, r4
 8022268:	4649      	mov	r1, r9
 802226a:	4638      	mov	r0, r7
 802226c:	47c0      	blx	r8
 802226e:	3001      	adds	r0, #1
 8022270:	d0e6      	beq.n	8022240 <_printf_common+0xa4>
 8022272:	3601      	adds	r6, #1
 8022274:	e7d9      	b.n	802222a <_printf_common+0x8e>
	...

08022278 <_printf_i>:
 8022278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802227c:	460c      	mov	r4, r1
 802227e:	4691      	mov	r9, r2
 8022280:	7e27      	ldrb	r7, [r4, #24]
 8022282:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022284:	2f78      	cmp	r7, #120	; 0x78
 8022286:	4680      	mov	r8, r0
 8022288:	469a      	mov	sl, r3
 802228a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802228e:	d807      	bhi.n	80222a0 <_printf_i+0x28>
 8022290:	2f62      	cmp	r7, #98	; 0x62
 8022292:	d80a      	bhi.n	80222aa <_printf_i+0x32>
 8022294:	2f00      	cmp	r7, #0
 8022296:	f000 80d8 	beq.w	802244a <_printf_i+0x1d2>
 802229a:	2f58      	cmp	r7, #88	; 0x58
 802229c:	f000 80a3 	beq.w	80223e6 <_printf_i+0x16e>
 80222a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80222a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80222a8:	e03a      	b.n	8022320 <_printf_i+0xa8>
 80222aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80222ae:	2b15      	cmp	r3, #21
 80222b0:	d8f6      	bhi.n	80222a0 <_printf_i+0x28>
 80222b2:	a001      	add	r0, pc, #4	; (adr r0, 80222b8 <_printf_i+0x40>)
 80222b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80222b8:	08022311 	.word	0x08022311
 80222bc:	08022325 	.word	0x08022325
 80222c0:	080222a1 	.word	0x080222a1
 80222c4:	080222a1 	.word	0x080222a1
 80222c8:	080222a1 	.word	0x080222a1
 80222cc:	080222a1 	.word	0x080222a1
 80222d0:	08022325 	.word	0x08022325
 80222d4:	080222a1 	.word	0x080222a1
 80222d8:	080222a1 	.word	0x080222a1
 80222dc:	080222a1 	.word	0x080222a1
 80222e0:	080222a1 	.word	0x080222a1
 80222e4:	08022431 	.word	0x08022431
 80222e8:	08022355 	.word	0x08022355
 80222ec:	08022413 	.word	0x08022413
 80222f0:	080222a1 	.word	0x080222a1
 80222f4:	080222a1 	.word	0x080222a1
 80222f8:	08022453 	.word	0x08022453
 80222fc:	080222a1 	.word	0x080222a1
 8022300:	08022355 	.word	0x08022355
 8022304:	080222a1 	.word	0x080222a1
 8022308:	080222a1 	.word	0x080222a1
 802230c:	0802241b 	.word	0x0802241b
 8022310:	680b      	ldr	r3, [r1, #0]
 8022312:	1d1a      	adds	r2, r3, #4
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	600a      	str	r2, [r1, #0]
 8022318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802231c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022320:	2301      	movs	r3, #1
 8022322:	e0a3      	b.n	802246c <_printf_i+0x1f4>
 8022324:	6825      	ldr	r5, [r4, #0]
 8022326:	6808      	ldr	r0, [r1, #0]
 8022328:	062e      	lsls	r6, r5, #24
 802232a:	f100 0304 	add.w	r3, r0, #4
 802232e:	d50a      	bpl.n	8022346 <_printf_i+0xce>
 8022330:	6805      	ldr	r5, [r0, #0]
 8022332:	600b      	str	r3, [r1, #0]
 8022334:	2d00      	cmp	r5, #0
 8022336:	da03      	bge.n	8022340 <_printf_i+0xc8>
 8022338:	232d      	movs	r3, #45	; 0x2d
 802233a:	426d      	negs	r5, r5
 802233c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022340:	485e      	ldr	r0, [pc, #376]	; (80224bc <_printf_i+0x244>)
 8022342:	230a      	movs	r3, #10
 8022344:	e019      	b.n	802237a <_printf_i+0x102>
 8022346:	f015 0f40 	tst.w	r5, #64	; 0x40
 802234a:	6805      	ldr	r5, [r0, #0]
 802234c:	600b      	str	r3, [r1, #0]
 802234e:	bf18      	it	ne
 8022350:	b22d      	sxthne	r5, r5
 8022352:	e7ef      	b.n	8022334 <_printf_i+0xbc>
 8022354:	680b      	ldr	r3, [r1, #0]
 8022356:	6825      	ldr	r5, [r4, #0]
 8022358:	1d18      	adds	r0, r3, #4
 802235a:	6008      	str	r0, [r1, #0]
 802235c:	0628      	lsls	r0, r5, #24
 802235e:	d501      	bpl.n	8022364 <_printf_i+0xec>
 8022360:	681d      	ldr	r5, [r3, #0]
 8022362:	e002      	b.n	802236a <_printf_i+0xf2>
 8022364:	0669      	lsls	r1, r5, #25
 8022366:	d5fb      	bpl.n	8022360 <_printf_i+0xe8>
 8022368:	881d      	ldrh	r5, [r3, #0]
 802236a:	4854      	ldr	r0, [pc, #336]	; (80224bc <_printf_i+0x244>)
 802236c:	2f6f      	cmp	r7, #111	; 0x6f
 802236e:	bf0c      	ite	eq
 8022370:	2308      	moveq	r3, #8
 8022372:	230a      	movne	r3, #10
 8022374:	2100      	movs	r1, #0
 8022376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802237a:	6866      	ldr	r6, [r4, #4]
 802237c:	60a6      	str	r6, [r4, #8]
 802237e:	2e00      	cmp	r6, #0
 8022380:	bfa2      	ittt	ge
 8022382:	6821      	ldrge	r1, [r4, #0]
 8022384:	f021 0104 	bicge.w	r1, r1, #4
 8022388:	6021      	strge	r1, [r4, #0]
 802238a:	b90d      	cbnz	r5, 8022390 <_printf_i+0x118>
 802238c:	2e00      	cmp	r6, #0
 802238e:	d04d      	beq.n	802242c <_printf_i+0x1b4>
 8022390:	4616      	mov	r6, r2
 8022392:	fbb5 f1f3 	udiv	r1, r5, r3
 8022396:	fb03 5711 	mls	r7, r3, r1, r5
 802239a:	5dc7      	ldrb	r7, [r0, r7]
 802239c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80223a0:	462f      	mov	r7, r5
 80223a2:	42bb      	cmp	r3, r7
 80223a4:	460d      	mov	r5, r1
 80223a6:	d9f4      	bls.n	8022392 <_printf_i+0x11a>
 80223a8:	2b08      	cmp	r3, #8
 80223aa:	d10b      	bne.n	80223c4 <_printf_i+0x14c>
 80223ac:	6823      	ldr	r3, [r4, #0]
 80223ae:	07df      	lsls	r7, r3, #31
 80223b0:	d508      	bpl.n	80223c4 <_printf_i+0x14c>
 80223b2:	6923      	ldr	r3, [r4, #16]
 80223b4:	6861      	ldr	r1, [r4, #4]
 80223b6:	4299      	cmp	r1, r3
 80223b8:	bfde      	ittt	le
 80223ba:	2330      	movle	r3, #48	; 0x30
 80223bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80223c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80223c4:	1b92      	subs	r2, r2, r6
 80223c6:	6122      	str	r2, [r4, #16]
 80223c8:	f8cd a000 	str.w	sl, [sp]
 80223cc:	464b      	mov	r3, r9
 80223ce:	aa03      	add	r2, sp, #12
 80223d0:	4621      	mov	r1, r4
 80223d2:	4640      	mov	r0, r8
 80223d4:	f7ff fee2 	bl	802219c <_printf_common>
 80223d8:	3001      	adds	r0, #1
 80223da:	d14c      	bne.n	8022476 <_printf_i+0x1fe>
 80223dc:	f04f 30ff 	mov.w	r0, #4294967295
 80223e0:	b004      	add	sp, #16
 80223e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223e6:	4835      	ldr	r0, [pc, #212]	; (80224bc <_printf_i+0x244>)
 80223e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80223ec:	6823      	ldr	r3, [r4, #0]
 80223ee:	680e      	ldr	r6, [r1, #0]
 80223f0:	061f      	lsls	r7, r3, #24
 80223f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80223f6:	600e      	str	r6, [r1, #0]
 80223f8:	d514      	bpl.n	8022424 <_printf_i+0x1ac>
 80223fa:	07d9      	lsls	r1, r3, #31
 80223fc:	bf44      	itt	mi
 80223fe:	f043 0320 	orrmi.w	r3, r3, #32
 8022402:	6023      	strmi	r3, [r4, #0]
 8022404:	b91d      	cbnz	r5, 802240e <_printf_i+0x196>
 8022406:	6823      	ldr	r3, [r4, #0]
 8022408:	f023 0320 	bic.w	r3, r3, #32
 802240c:	6023      	str	r3, [r4, #0]
 802240e:	2310      	movs	r3, #16
 8022410:	e7b0      	b.n	8022374 <_printf_i+0xfc>
 8022412:	6823      	ldr	r3, [r4, #0]
 8022414:	f043 0320 	orr.w	r3, r3, #32
 8022418:	6023      	str	r3, [r4, #0]
 802241a:	2378      	movs	r3, #120	; 0x78
 802241c:	4828      	ldr	r0, [pc, #160]	; (80224c0 <_printf_i+0x248>)
 802241e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022422:	e7e3      	b.n	80223ec <_printf_i+0x174>
 8022424:	065e      	lsls	r6, r3, #25
 8022426:	bf48      	it	mi
 8022428:	b2ad      	uxthmi	r5, r5
 802242a:	e7e6      	b.n	80223fa <_printf_i+0x182>
 802242c:	4616      	mov	r6, r2
 802242e:	e7bb      	b.n	80223a8 <_printf_i+0x130>
 8022430:	680b      	ldr	r3, [r1, #0]
 8022432:	6826      	ldr	r6, [r4, #0]
 8022434:	6960      	ldr	r0, [r4, #20]
 8022436:	1d1d      	adds	r5, r3, #4
 8022438:	600d      	str	r5, [r1, #0]
 802243a:	0635      	lsls	r5, r6, #24
 802243c:	681b      	ldr	r3, [r3, #0]
 802243e:	d501      	bpl.n	8022444 <_printf_i+0x1cc>
 8022440:	6018      	str	r0, [r3, #0]
 8022442:	e002      	b.n	802244a <_printf_i+0x1d2>
 8022444:	0671      	lsls	r1, r6, #25
 8022446:	d5fb      	bpl.n	8022440 <_printf_i+0x1c8>
 8022448:	8018      	strh	r0, [r3, #0]
 802244a:	2300      	movs	r3, #0
 802244c:	6123      	str	r3, [r4, #16]
 802244e:	4616      	mov	r6, r2
 8022450:	e7ba      	b.n	80223c8 <_printf_i+0x150>
 8022452:	680b      	ldr	r3, [r1, #0]
 8022454:	1d1a      	adds	r2, r3, #4
 8022456:	600a      	str	r2, [r1, #0]
 8022458:	681e      	ldr	r6, [r3, #0]
 802245a:	6862      	ldr	r2, [r4, #4]
 802245c:	2100      	movs	r1, #0
 802245e:	4630      	mov	r0, r6
 8022460:	f7dd ff06 	bl	8000270 <memchr>
 8022464:	b108      	cbz	r0, 802246a <_printf_i+0x1f2>
 8022466:	1b80      	subs	r0, r0, r6
 8022468:	6060      	str	r0, [r4, #4]
 802246a:	6863      	ldr	r3, [r4, #4]
 802246c:	6123      	str	r3, [r4, #16]
 802246e:	2300      	movs	r3, #0
 8022470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022474:	e7a8      	b.n	80223c8 <_printf_i+0x150>
 8022476:	6923      	ldr	r3, [r4, #16]
 8022478:	4632      	mov	r2, r6
 802247a:	4649      	mov	r1, r9
 802247c:	4640      	mov	r0, r8
 802247e:	47d0      	blx	sl
 8022480:	3001      	adds	r0, #1
 8022482:	d0ab      	beq.n	80223dc <_printf_i+0x164>
 8022484:	6823      	ldr	r3, [r4, #0]
 8022486:	079b      	lsls	r3, r3, #30
 8022488:	d413      	bmi.n	80224b2 <_printf_i+0x23a>
 802248a:	68e0      	ldr	r0, [r4, #12]
 802248c:	9b03      	ldr	r3, [sp, #12]
 802248e:	4298      	cmp	r0, r3
 8022490:	bfb8      	it	lt
 8022492:	4618      	movlt	r0, r3
 8022494:	e7a4      	b.n	80223e0 <_printf_i+0x168>
 8022496:	2301      	movs	r3, #1
 8022498:	4632      	mov	r2, r6
 802249a:	4649      	mov	r1, r9
 802249c:	4640      	mov	r0, r8
 802249e:	47d0      	blx	sl
 80224a0:	3001      	adds	r0, #1
 80224a2:	d09b      	beq.n	80223dc <_printf_i+0x164>
 80224a4:	3501      	adds	r5, #1
 80224a6:	68e3      	ldr	r3, [r4, #12]
 80224a8:	9903      	ldr	r1, [sp, #12]
 80224aa:	1a5b      	subs	r3, r3, r1
 80224ac:	42ab      	cmp	r3, r5
 80224ae:	dcf2      	bgt.n	8022496 <_printf_i+0x21e>
 80224b0:	e7eb      	b.n	802248a <_printf_i+0x212>
 80224b2:	2500      	movs	r5, #0
 80224b4:	f104 0619 	add.w	r6, r4, #25
 80224b8:	e7f5      	b.n	80224a6 <_printf_i+0x22e>
 80224ba:	bf00      	nop
 80224bc:	08041eb8 	.word	0x08041eb8
 80224c0:	08041ec9 	.word	0x08041ec9

080224c4 <iprintf>:
 80224c4:	b40f      	push	{r0, r1, r2, r3}
 80224c6:	4b0a      	ldr	r3, [pc, #40]	; (80224f0 <iprintf+0x2c>)
 80224c8:	b513      	push	{r0, r1, r4, lr}
 80224ca:	681c      	ldr	r4, [r3, #0]
 80224cc:	b124      	cbz	r4, 80224d8 <iprintf+0x14>
 80224ce:	69a3      	ldr	r3, [r4, #24]
 80224d0:	b913      	cbnz	r3, 80224d8 <iprintf+0x14>
 80224d2:	4620      	mov	r0, r4
 80224d4:	f002 fb7e 	bl	8024bd4 <__sinit>
 80224d8:	ab05      	add	r3, sp, #20
 80224da:	9a04      	ldr	r2, [sp, #16]
 80224dc:	68a1      	ldr	r1, [r4, #8]
 80224de:	9301      	str	r3, [sp, #4]
 80224e0:	4620      	mov	r0, r4
 80224e2:	f003 fcc9 	bl	8025e78 <_vfiprintf_r>
 80224e6:	b002      	add	sp, #8
 80224e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224ec:	b004      	add	sp, #16
 80224ee:	4770      	bx	lr
 80224f0:	20000480 	.word	0x20000480

080224f4 <putchar>:
 80224f4:	4b09      	ldr	r3, [pc, #36]	; (802251c <putchar+0x28>)
 80224f6:	b513      	push	{r0, r1, r4, lr}
 80224f8:	681c      	ldr	r4, [r3, #0]
 80224fa:	4601      	mov	r1, r0
 80224fc:	b134      	cbz	r4, 802250c <putchar+0x18>
 80224fe:	69a3      	ldr	r3, [r4, #24]
 8022500:	b923      	cbnz	r3, 802250c <putchar+0x18>
 8022502:	9001      	str	r0, [sp, #4]
 8022504:	4620      	mov	r0, r4
 8022506:	f002 fb65 	bl	8024bd4 <__sinit>
 802250a:	9901      	ldr	r1, [sp, #4]
 802250c:	68a2      	ldr	r2, [r4, #8]
 802250e:	4620      	mov	r0, r4
 8022510:	b002      	add	sp, #8
 8022512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022516:	f003 bf2b 	b.w	8026370 <_putc_r>
 802251a:	bf00      	nop
 802251c:	20000480 	.word	0x20000480

08022520 <_puts_r>:
 8022520:	b570      	push	{r4, r5, r6, lr}
 8022522:	460e      	mov	r6, r1
 8022524:	4605      	mov	r5, r0
 8022526:	b118      	cbz	r0, 8022530 <_puts_r+0x10>
 8022528:	6983      	ldr	r3, [r0, #24]
 802252a:	b90b      	cbnz	r3, 8022530 <_puts_r+0x10>
 802252c:	f002 fb52 	bl	8024bd4 <__sinit>
 8022530:	69ab      	ldr	r3, [r5, #24]
 8022532:	68ac      	ldr	r4, [r5, #8]
 8022534:	b913      	cbnz	r3, 802253c <_puts_r+0x1c>
 8022536:	4628      	mov	r0, r5
 8022538:	f002 fb4c 	bl	8024bd4 <__sinit>
 802253c:	4b2c      	ldr	r3, [pc, #176]	; (80225f0 <_puts_r+0xd0>)
 802253e:	429c      	cmp	r4, r3
 8022540:	d120      	bne.n	8022584 <_puts_r+0x64>
 8022542:	686c      	ldr	r4, [r5, #4]
 8022544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022546:	07db      	lsls	r3, r3, #31
 8022548:	d405      	bmi.n	8022556 <_puts_r+0x36>
 802254a:	89a3      	ldrh	r3, [r4, #12]
 802254c:	0598      	lsls	r0, r3, #22
 802254e:	d402      	bmi.n	8022556 <_puts_r+0x36>
 8022550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022552:	f002 fcef 	bl	8024f34 <__retarget_lock_acquire_recursive>
 8022556:	89a3      	ldrh	r3, [r4, #12]
 8022558:	0719      	lsls	r1, r3, #28
 802255a:	d51d      	bpl.n	8022598 <_puts_r+0x78>
 802255c:	6923      	ldr	r3, [r4, #16]
 802255e:	b1db      	cbz	r3, 8022598 <_puts_r+0x78>
 8022560:	3e01      	subs	r6, #1
 8022562:	68a3      	ldr	r3, [r4, #8]
 8022564:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022568:	3b01      	subs	r3, #1
 802256a:	60a3      	str	r3, [r4, #8]
 802256c:	bb39      	cbnz	r1, 80225be <_puts_r+0x9e>
 802256e:	2b00      	cmp	r3, #0
 8022570:	da38      	bge.n	80225e4 <_puts_r+0xc4>
 8022572:	4622      	mov	r2, r4
 8022574:	210a      	movs	r1, #10
 8022576:	4628      	mov	r0, r5
 8022578:	f001 fa9c 	bl	8023ab4 <__swbuf_r>
 802257c:	3001      	adds	r0, #1
 802257e:	d011      	beq.n	80225a4 <_puts_r+0x84>
 8022580:	250a      	movs	r5, #10
 8022582:	e011      	b.n	80225a8 <_puts_r+0x88>
 8022584:	4b1b      	ldr	r3, [pc, #108]	; (80225f4 <_puts_r+0xd4>)
 8022586:	429c      	cmp	r4, r3
 8022588:	d101      	bne.n	802258e <_puts_r+0x6e>
 802258a:	68ac      	ldr	r4, [r5, #8]
 802258c:	e7da      	b.n	8022544 <_puts_r+0x24>
 802258e:	4b1a      	ldr	r3, [pc, #104]	; (80225f8 <_puts_r+0xd8>)
 8022590:	429c      	cmp	r4, r3
 8022592:	bf08      	it	eq
 8022594:	68ec      	ldreq	r4, [r5, #12]
 8022596:	e7d5      	b.n	8022544 <_puts_r+0x24>
 8022598:	4621      	mov	r1, r4
 802259a:	4628      	mov	r0, r5
 802259c:	f001 faee 	bl	8023b7c <__swsetup_r>
 80225a0:	2800      	cmp	r0, #0
 80225a2:	d0dd      	beq.n	8022560 <_puts_r+0x40>
 80225a4:	f04f 35ff 	mov.w	r5, #4294967295
 80225a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80225aa:	07da      	lsls	r2, r3, #31
 80225ac:	d405      	bmi.n	80225ba <_puts_r+0x9a>
 80225ae:	89a3      	ldrh	r3, [r4, #12]
 80225b0:	059b      	lsls	r3, r3, #22
 80225b2:	d402      	bmi.n	80225ba <_puts_r+0x9a>
 80225b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80225b6:	f002 fcbf 	bl	8024f38 <__retarget_lock_release_recursive>
 80225ba:	4628      	mov	r0, r5
 80225bc:	bd70      	pop	{r4, r5, r6, pc}
 80225be:	2b00      	cmp	r3, #0
 80225c0:	da04      	bge.n	80225cc <_puts_r+0xac>
 80225c2:	69a2      	ldr	r2, [r4, #24]
 80225c4:	429a      	cmp	r2, r3
 80225c6:	dc06      	bgt.n	80225d6 <_puts_r+0xb6>
 80225c8:	290a      	cmp	r1, #10
 80225ca:	d004      	beq.n	80225d6 <_puts_r+0xb6>
 80225cc:	6823      	ldr	r3, [r4, #0]
 80225ce:	1c5a      	adds	r2, r3, #1
 80225d0:	6022      	str	r2, [r4, #0]
 80225d2:	7019      	strb	r1, [r3, #0]
 80225d4:	e7c5      	b.n	8022562 <_puts_r+0x42>
 80225d6:	4622      	mov	r2, r4
 80225d8:	4628      	mov	r0, r5
 80225da:	f001 fa6b 	bl	8023ab4 <__swbuf_r>
 80225de:	3001      	adds	r0, #1
 80225e0:	d1bf      	bne.n	8022562 <_puts_r+0x42>
 80225e2:	e7df      	b.n	80225a4 <_puts_r+0x84>
 80225e4:	6823      	ldr	r3, [r4, #0]
 80225e6:	250a      	movs	r5, #10
 80225e8:	1c5a      	adds	r2, r3, #1
 80225ea:	6022      	str	r2, [r4, #0]
 80225ec:	701d      	strb	r5, [r3, #0]
 80225ee:	e7db      	b.n	80225a8 <_puts_r+0x88>
 80225f0:	0804238c 	.word	0x0804238c
 80225f4:	080423ac 	.word	0x080423ac
 80225f8:	0804236c 	.word	0x0804236c

080225fc <puts>:
 80225fc:	4b02      	ldr	r3, [pc, #8]	; (8022608 <puts+0xc>)
 80225fe:	4601      	mov	r1, r0
 8022600:	6818      	ldr	r0, [r3, #0]
 8022602:	f7ff bf8d 	b.w	8022520 <_puts_r>
 8022606:	bf00      	nop
 8022608:	20000480 	.word	0x20000480

0802260c <rand>:
 802260c:	4b17      	ldr	r3, [pc, #92]	; (802266c <rand+0x60>)
 802260e:	b510      	push	{r4, lr}
 8022610:	681c      	ldr	r4, [r3, #0]
 8022612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022614:	b9b3      	cbnz	r3, 8022644 <rand+0x38>
 8022616:	2018      	movs	r0, #24
 8022618:	f7fe ff9c 	bl	8021554 <malloc>
 802261c:	63a0      	str	r0, [r4, #56]	; 0x38
 802261e:	b928      	cbnz	r0, 802262c <rand+0x20>
 8022620:	4602      	mov	r2, r0
 8022622:	4b13      	ldr	r3, [pc, #76]	; (8022670 <rand+0x64>)
 8022624:	4813      	ldr	r0, [pc, #76]	; (8022674 <rand+0x68>)
 8022626:	214e      	movs	r1, #78	; 0x4e
 8022628:	f001 fb62 	bl	8023cf0 <__assert_func>
 802262c:	4a12      	ldr	r2, [pc, #72]	; (8022678 <rand+0x6c>)
 802262e:	4b13      	ldr	r3, [pc, #76]	; (802267c <rand+0x70>)
 8022630:	e9c0 2300 	strd	r2, r3, [r0]
 8022634:	4b12      	ldr	r3, [pc, #72]	; (8022680 <rand+0x74>)
 8022636:	6083      	str	r3, [r0, #8]
 8022638:	230b      	movs	r3, #11
 802263a:	8183      	strh	r3, [r0, #12]
 802263c:	2201      	movs	r2, #1
 802263e:	2300      	movs	r3, #0
 8022640:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022644:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8022646:	480f      	ldr	r0, [pc, #60]	; (8022684 <rand+0x78>)
 8022648:	690a      	ldr	r2, [r1, #16]
 802264a:	694b      	ldr	r3, [r1, #20]
 802264c:	4c0e      	ldr	r4, [pc, #56]	; (8022688 <rand+0x7c>)
 802264e:	4350      	muls	r0, r2
 8022650:	fb04 0003 	mla	r0, r4, r3, r0
 8022654:	fba2 3404 	umull	r3, r4, r2, r4
 8022658:	1c5a      	adds	r2, r3, #1
 802265a:	4404      	add	r4, r0
 802265c:	f144 0000 	adc.w	r0, r4, #0
 8022660:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8022664:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022668:	bd10      	pop	{r4, pc}
 802266a:	bf00      	nop
 802266c:	20000480 	.word	0x20000480
 8022670:	08041d70 	.word	0x08041d70
 8022674:	08041eda 	.word	0x08041eda
 8022678:	abcd330e 	.word	0xabcd330e
 802267c:	e66d1234 	.word	0xe66d1234
 8022680:	0005deec 	.word	0x0005deec
 8022684:	5851f42d 	.word	0x5851f42d
 8022688:	4c957f2d 	.word	0x4c957f2d

0802268c <realloc>:
 802268c:	4b02      	ldr	r3, [pc, #8]	; (8022698 <realloc+0xc>)
 802268e:	460a      	mov	r2, r1
 8022690:	4601      	mov	r1, r0
 8022692:	6818      	ldr	r0, [r3, #0]
 8022694:	f003 b873 	b.w	802577e <_realloc_r>
 8022698:	20000480 	.word	0x20000480

0802269c <modf>:
 802269c:	ee10 1a90 	vmov	r1, s1
 80226a0:	b570      	push	{r4, r5, r6, lr}
 80226a2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80226a6:	f2a5 33ff 	subw	r3, r5, #1023	; 0x3ff
 80226aa:	2b13      	cmp	r3, #19
 80226ac:	ee10 4a10 	vmov	r4, s0
 80226b0:	dc1f      	bgt.n	80226f2 <modf+0x56>
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	da05      	bge.n	80226c2 <modf+0x26>
 80226b6:	2200      	movs	r2, #0
 80226b8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80226bc:	e9c0 2300 	strd	r2, r3, [r0]
 80226c0:	bd70      	pop	{r4, r5, r6, pc}
 80226c2:	4d19      	ldr	r5, [pc, #100]	; (8022728 <modf+0x8c>)
 80226c4:	411d      	asrs	r5, r3
 80226c6:	ea01 0305 	and.w	r3, r1, r5
 80226ca:	431c      	orrs	r4, r3
 80226cc:	d107      	bne.n	80226de <modf+0x42>
 80226ce:	ed80 0b00 	vstr	d0, [r0]
 80226d2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80226d6:	4622      	mov	r2, r4
 80226d8:	ec43 2b10 	vmov	d0, r2, r3
 80226dc:	e7f0      	b.n	80226c0 <modf+0x24>
 80226de:	2200      	movs	r2, #0
 80226e0:	ea21 0305 	bic.w	r3, r1, r5
 80226e4:	ec43 2b17 	vmov	d7, r2, r3
 80226e8:	e9c0 2300 	strd	r2, r3, [r0]
 80226ec:	ee30 0b47 	vsub.f64	d0, d0, d7
 80226f0:	e7e6      	b.n	80226c0 <modf+0x24>
 80226f2:	2b33      	cmp	r3, #51	; 0x33
 80226f4:	dd05      	ble.n	8022702 <modf+0x66>
 80226f6:	ed80 0b00 	vstr	d0, [r0]
 80226fa:	2200      	movs	r2, #0
 80226fc:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8022700:	e7ea      	b.n	80226d8 <modf+0x3c>
 8022702:	f2a5 4313 	subw	r3, r5, #1043	; 0x413
 8022706:	f04f 35ff 	mov.w	r5, #4294967295
 802270a:	40dd      	lsrs	r5, r3
 802270c:	ea15 0604 	ands.w	r6, r5, r4
 8022710:	d105      	bne.n	802271e <modf+0x82>
 8022712:	ed80 0b00 	vstr	d0, [r0]
 8022716:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 802271a:	4632      	mov	r2, r6
 802271c:	e7dc      	b.n	80226d8 <modf+0x3c>
 802271e:	ee10 3a90 	vmov	r3, s1
 8022722:	ea24 0205 	bic.w	r2, r4, r5
 8022726:	e7dd      	b.n	80226e4 <modf+0x48>
 8022728:	000fffff 	.word	0x000fffff

0802272c <_sbrk_r>:
 802272c:	b538      	push	{r3, r4, r5, lr}
 802272e:	4d06      	ldr	r5, [pc, #24]	; (8022748 <_sbrk_r+0x1c>)
 8022730:	2300      	movs	r3, #0
 8022732:	4604      	mov	r4, r0
 8022734:	4608      	mov	r0, r1
 8022736:	602b      	str	r3, [r5, #0]
 8022738:	f7e3 f918 	bl	800596c <_sbrk>
 802273c:	1c43      	adds	r3, r0, #1
 802273e:	d102      	bne.n	8022746 <_sbrk_r+0x1a>
 8022740:	682b      	ldr	r3, [r5, #0]
 8022742:	b103      	cbz	r3, 8022746 <_sbrk_r+0x1a>
 8022744:	6023      	str	r3, [r4, #0]
 8022746:	bd38      	pop	{r3, r4, r5, pc}
 8022748:	2002e1e8 	.word	0x2002e1e8

0802274c <sniprintf>:
 802274c:	b40c      	push	{r2, r3}
 802274e:	b530      	push	{r4, r5, lr}
 8022750:	4b17      	ldr	r3, [pc, #92]	; (80227b0 <sniprintf+0x64>)
 8022752:	1e0c      	subs	r4, r1, #0
 8022754:	681d      	ldr	r5, [r3, #0]
 8022756:	b09d      	sub	sp, #116	; 0x74
 8022758:	da08      	bge.n	802276c <sniprintf+0x20>
 802275a:	238b      	movs	r3, #139	; 0x8b
 802275c:	602b      	str	r3, [r5, #0]
 802275e:	f04f 30ff 	mov.w	r0, #4294967295
 8022762:	b01d      	add	sp, #116	; 0x74
 8022764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022768:	b002      	add	sp, #8
 802276a:	4770      	bx	lr
 802276c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022770:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022774:	bf14      	ite	ne
 8022776:	f104 33ff 	addne.w	r3, r4, #4294967295
 802277a:	4623      	moveq	r3, r4
 802277c:	9304      	str	r3, [sp, #16]
 802277e:	9307      	str	r3, [sp, #28]
 8022780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022784:	9002      	str	r0, [sp, #8]
 8022786:	9006      	str	r0, [sp, #24]
 8022788:	f8ad 3016 	strh.w	r3, [sp, #22]
 802278c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802278e:	ab21      	add	r3, sp, #132	; 0x84
 8022790:	a902      	add	r1, sp, #8
 8022792:	4628      	mov	r0, r5
 8022794:	9301      	str	r3, [sp, #4]
 8022796:	f003 f873 	bl	8025880 <_svfiprintf_r>
 802279a:	1c43      	adds	r3, r0, #1
 802279c:	bfbc      	itt	lt
 802279e:	238b      	movlt	r3, #139	; 0x8b
 80227a0:	602b      	strlt	r3, [r5, #0]
 80227a2:	2c00      	cmp	r4, #0
 80227a4:	d0dd      	beq.n	8022762 <sniprintf+0x16>
 80227a6:	9b02      	ldr	r3, [sp, #8]
 80227a8:	2200      	movs	r2, #0
 80227aa:	701a      	strb	r2, [r3, #0]
 80227ac:	e7d9      	b.n	8022762 <sniprintf+0x16>
 80227ae:	bf00      	nop
 80227b0:	20000480 	.word	0x20000480

080227b4 <siprintf>:
 80227b4:	b40e      	push	{r1, r2, r3}
 80227b6:	b500      	push	{lr}
 80227b8:	b09c      	sub	sp, #112	; 0x70
 80227ba:	ab1d      	add	r3, sp, #116	; 0x74
 80227bc:	9002      	str	r0, [sp, #8]
 80227be:	9006      	str	r0, [sp, #24]
 80227c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80227c4:	4809      	ldr	r0, [pc, #36]	; (80227ec <siprintf+0x38>)
 80227c6:	9107      	str	r1, [sp, #28]
 80227c8:	9104      	str	r1, [sp, #16]
 80227ca:	4909      	ldr	r1, [pc, #36]	; (80227f0 <siprintf+0x3c>)
 80227cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80227d0:	9105      	str	r1, [sp, #20]
 80227d2:	6800      	ldr	r0, [r0, #0]
 80227d4:	9301      	str	r3, [sp, #4]
 80227d6:	a902      	add	r1, sp, #8
 80227d8:	f003 f852 	bl	8025880 <_svfiprintf_r>
 80227dc:	9b02      	ldr	r3, [sp, #8]
 80227de:	2200      	movs	r2, #0
 80227e0:	701a      	strb	r2, [r3, #0]
 80227e2:	b01c      	add	sp, #112	; 0x70
 80227e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80227e8:	b003      	add	sp, #12
 80227ea:	4770      	bx	lr
 80227ec:	20000480 	.word	0x20000480
 80227f0:	ffff0208 	.word	0xffff0208

080227f4 <siscanf>:
 80227f4:	b40e      	push	{r1, r2, r3}
 80227f6:	b510      	push	{r4, lr}
 80227f8:	b09f      	sub	sp, #124	; 0x7c
 80227fa:	ac21      	add	r4, sp, #132	; 0x84
 80227fc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8022800:	f854 2b04 	ldr.w	r2, [r4], #4
 8022804:	9201      	str	r2, [sp, #4]
 8022806:	f8ad 101c 	strh.w	r1, [sp, #28]
 802280a:	9004      	str	r0, [sp, #16]
 802280c:	9008      	str	r0, [sp, #32]
 802280e:	f7dd fd21 	bl	8000254 <strlen>
 8022812:	4b0c      	ldr	r3, [pc, #48]	; (8022844 <siscanf+0x50>)
 8022814:	9005      	str	r0, [sp, #20]
 8022816:	9009      	str	r0, [sp, #36]	; 0x24
 8022818:	930d      	str	r3, [sp, #52]	; 0x34
 802281a:	480b      	ldr	r0, [pc, #44]	; (8022848 <siscanf+0x54>)
 802281c:	9a01      	ldr	r2, [sp, #4]
 802281e:	6800      	ldr	r0, [r0, #0]
 8022820:	9403      	str	r4, [sp, #12]
 8022822:	2300      	movs	r3, #0
 8022824:	9311      	str	r3, [sp, #68]	; 0x44
 8022826:	9316      	str	r3, [sp, #88]	; 0x58
 8022828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802282c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022830:	a904      	add	r1, sp, #16
 8022832:	4623      	mov	r3, r4
 8022834:	f003 f97e 	bl	8025b34 <__ssvfiscanf_r>
 8022838:	b01f      	add	sp, #124	; 0x7c
 802283a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802283e:	b003      	add	sp, #12
 8022840:	4770      	bx	lr
 8022842:	bf00      	nop
 8022844:	0802286f 	.word	0x0802286f
 8022848:	20000480 	.word	0x20000480

0802284c <__sread>:
 802284c:	b510      	push	{r4, lr}
 802284e:	460c      	mov	r4, r1
 8022850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022854:	f003 fdd4 	bl	8026400 <_read_r>
 8022858:	2800      	cmp	r0, #0
 802285a:	bfab      	itete	ge
 802285c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802285e:	89a3      	ldrhlt	r3, [r4, #12]
 8022860:	181b      	addge	r3, r3, r0
 8022862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022866:	bfac      	ite	ge
 8022868:	6563      	strge	r3, [r4, #84]	; 0x54
 802286a:	81a3      	strhlt	r3, [r4, #12]
 802286c:	bd10      	pop	{r4, pc}

0802286e <__seofread>:
 802286e:	2000      	movs	r0, #0
 8022870:	4770      	bx	lr

08022872 <__swrite>:
 8022872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022876:	461f      	mov	r7, r3
 8022878:	898b      	ldrh	r3, [r1, #12]
 802287a:	05db      	lsls	r3, r3, #23
 802287c:	4605      	mov	r5, r0
 802287e:	460c      	mov	r4, r1
 8022880:	4616      	mov	r6, r2
 8022882:	d505      	bpl.n	8022890 <__swrite+0x1e>
 8022884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022888:	2302      	movs	r3, #2
 802288a:	2200      	movs	r2, #0
 802288c:	f002 fb56 	bl	8024f3c <_lseek_r>
 8022890:	89a3      	ldrh	r3, [r4, #12]
 8022892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802289a:	81a3      	strh	r3, [r4, #12]
 802289c:	4632      	mov	r2, r6
 802289e:	463b      	mov	r3, r7
 80228a0:	4628      	mov	r0, r5
 80228a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80228a6:	f001 b957 	b.w	8023b58 <_write_r>

080228aa <__sseek>:
 80228aa:	b510      	push	{r4, lr}
 80228ac:	460c      	mov	r4, r1
 80228ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80228b2:	f002 fb43 	bl	8024f3c <_lseek_r>
 80228b6:	1c43      	adds	r3, r0, #1
 80228b8:	89a3      	ldrh	r3, [r4, #12]
 80228ba:	bf15      	itete	ne
 80228bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80228be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80228c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80228c6:	81a3      	strheq	r3, [r4, #12]
 80228c8:	bf18      	it	ne
 80228ca:	81a3      	strhne	r3, [r4, #12]
 80228cc:	bd10      	pop	{r4, pc}

080228ce <__sclose>:
 80228ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80228d2:	f001 ba2b 	b.w	8023d2c <_close_r>

080228d6 <stpcpy>:
 80228d6:	4603      	mov	r3, r0
 80228d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80228dc:	4618      	mov	r0, r3
 80228de:	f803 2b01 	strb.w	r2, [r3], #1
 80228e2:	2a00      	cmp	r2, #0
 80228e4:	d1f8      	bne.n	80228d8 <stpcpy+0x2>
 80228e6:	4770      	bx	lr

080228e8 <strchr>:
 80228e8:	b2c9      	uxtb	r1, r1
 80228ea:	4603      	mov	r3, r0
 80228ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80228f0:	b11a      	cbz	r2, 80228fa <strchr+0x12>
 80228f2:	428a      	cmp	r2, r1
 80228f4:	d1f9      	bne.n	80228ea <strchr+0x2>
 80228f6:	4618      	mov	r0, r3
 80228f8:	4770      	bx	lr
 80228fa:	2900      	cmp	r1, #0
 80228fc:	bf18      	it	ne
 80228fe:	2300      	movne	r3, #0
 8022900:	e7f9      	b.n	80228f6 <strchr+0xe>

08022902 <strcpy>:
 8022902:	4603      	mov	r3, r0
 8022904:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022908:	f803 2b01 	strb.w	r2, [r3], #1
 802290c:	2a00      	cmp	r2, #0
 802290e:	d1f9      	bne.n	8022904 <strcpy+0x2>
 8022910:	4770      	bx	lr
	...

08022914 <iso_year_adjust>:
 8022914:	6941      	ldr	r1, [r0, #20]
 8022916:	2900      	cmp	r1, #0
 8022918:	f240 736c 	movw	r3, #1900	; 0x76c
 802291c:	bfa8      	it	ge
 802291e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8022922:	18ca      	adds	r2, r1, r3
 8022924:	078b      	lsls	r3, r1, #30
 8022926:	d105      	bne.n	8022934 <iso_year_adjust+0x20>
 8022928:	2164      	movs	r1, #100	; 0x64
 802292a:	fb92 f3f1 	sdiv	r3, r2, r1
 802292e:	fb01 2313 	mls	r3, r1, r3, r2
 8022932:	b9db      	cbnz	r3, 802296c <iso_year_adjust+0x58>
 8022934:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8022938:	fb92 f3f1 	sdiv	r3, r2, r1
 802293c:	fb01 2313 	mls	r3, r1, r3, r2
 8022940:	fab3 f383 	clz	r3, r3
 8022944:	095b      	lsrs	r3, r3, #5
 8022946:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802294a:	0040      	lsls	r0, r0, #1
 802294c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8022950:	4418      	add	r0, r3
 8022952:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8022956:	4298      	cmp	r0, r3
 8022958:	d03a      	beq.n	80229d0 <iso_year_adjust+0xbc>
 802295a:	dc21      	bgt.n	80229a0 <iso_year_adjust+0x8c>
 802295c:	2801      	cmp	r0, #1
 802295e:	dc1a      	bgt.n	8022996 <iso_year_adjust+0x82>
 8022960:	2800      	cmp	r0, #0
 8022962:	bfb4      	ite	lt
 8022964:	2000      	movlt	r0, #0
 8022966:	f04f 30ff 	movge.w	r0, #4294967295
 802296a:	4770      	bx	lr
 802296c:	2301      	movs	r3, #1
 802296e:	e7ea      	b.n	8022946 <iso_year_adjust+0x32>
 8022970:	2817      	cmp	r0, #23
 8022972:	d813      	bhi.n	802299c <iso_year_adjust+0x88>
 8022974:	e8df f000 	tbb	[pc, r0]
 8022978:	0c0c0c0c 	.word	0x0c0c0c0c
 802297c:	0c0c1212 	.word	0x0c0c1212
 8022980:	12121212 	.word	0x12121212
 8022984:	12121212 	.word	0x12121212
 8022988:	0c0c1212 	.word	0x0c0c1212
 802298c:	0c0c1212 	.word	0x0c0c1212
 8022990:	f04f 30ff 	mov.w	r0, #4294967295
 8022994:	4770      	bx	lr
 8022996:	380a      	subs	r0, #10
 8022998:	2817      	cmp	r0, #23
 802299a:	d9e9      	bls.n	8022970 <iso_year_adjust+0x5c>
 802299c:	2000      	movs	r0, #0
 802299e:	4770      	bx	lr
 80229a0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80229a4:	4298      	cmp	r0, r3
 80229a6:	dc06      	bgt.n	80229b6 <iso_year_adjust+0xa2>
 80229a8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80229ac:	4298      	cmp	r0, r3
 80229ae:	bfd4      	ite	le
 80229b0:	2000      	movle	r0, #0
 80229b2:	2001      	movgt	r0, #1
 80229b4:	4770      	bx	lr
 80229b6:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80229ba:	3802      	subs	r0, #2
 80229bc:	2815      	cmp	r0, #21
 80229be:	d8ed      	bhi.n	802299c <iso_year_adjust+0x88>
 80229c0:	2301      	movs	r3, #1
 80229c2:	4083      	lsls	r3, r0
 80229c4:	4803      	ldr	r0, [pc, #12]	; (80229d4 <iso_year_adjust+0xc0>)
 80229c6:	4018      	ands	r0, r3
 80229c8:	3800      	subs	r0, #0
 80229ca:	bf18      	it	ne
 80229cc:	2001      	movne	r0, #1
 80229ce:	4770      	bx	lr
 80229d0:	2001      	movs	r0, #1
 80229d2:	4770      	bx	lr
 80229d4:	002a001f 	.word	0x002a001f

080229d8 <__strftime>:
 80229d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229dc:	b091      	sub	sp, #68	; 0x44
 80229de:	461d      	mov	r5, r3
 80229e0:	2300      	movs	r3, #0
 80229e2:	4681      	mov	r9, r0
 80229e4:	4688      	mov	r8, r1
 80229e6:	9304      	str	r3, [sp, #16]
 80229e8:	461c      	mov	r4, r3
 80229ea:	7813      	ldrb	r3, [r2, #0]
 80229ec:	2b00      	cmp	r3, #0
 80229ee:	f000 84d1 	beq.w	8023394 <__strftime+0x9bc>
 80229f2:	2b25      	cmp	r3, #37	; 0x25
 80229f4:	d11b      	bne.n	8022a2e <__strftime+0x56>
 80229f6:	7857      	ldrb	r7, [r2, #1]
 80229f8:	2f30      	cmp	r7, #48	; 0x30
 80229fa:	d024      	beq.n	8022a46 <__strftime+0x6e>
 80229fc:	2f2b      	cmp	r7, #43	; 0x2b
 80229fe:	d022      	beq.n	8022a46 <__strftime+0x6e>
 8022a00:	f102 0b01 	add.w	fp, r2, #1
 8022a04:	2700      	movs	r7, #0
 8022a06:	f89b 3000 	ldrb.w	r3, [fp]
 8022a0a:	3b31      	subs	r3, #49	; 0x31
 8022a0c:	2b08      	cmp	r3, #8
 8022a0e:	d81d      	bhi.n	8022a4c <__strftime+0x74>
 8022a10:	4658      	mov	r0, fp
 8022a12:	220a      	movs	r2, #10
 8022a14:	a908      	add	r1, sp, #32
 8022a16:	f000 fe0d 	bl	8023634 <strtoul>
 8022a1a:	f8dd b020 	ldr.w	fp, [sp, #32]
 8022a1e:	4606      	mov	r6, r0
 8022a20:	f89b 3000 	ldrb.w	r3, [fp]
 8022a24:	2b45      	cmp	r3, #69	; 0x45
 8022a26:	d113      	bne.n	8022a50 <__strftime+0x78>
 8022a28:	f10b 0b01 	add.w	fp, fp, #1
 8022a2c:	e012      	b.n	8022a54 <__strftime+0x7c>
 8022a2e:	f108 31ff 	add.w	r1, r8, #4294967295
 8022a32:	42a1      	cmp	r1, r4
 8022a34:	d802      	bhi.n	8022a3c <__strftime+0x64>
 8022a36:	2400      	movs	r4, #0
 8022a38:	f000 bcb2 	b.w	80233a0 <__strftime+0x9c8>
 8022a3c:	f809 3004 	strb.w	r3, [r9, r4]
 8022a40:	3201      	adds	r2, #1
 8022a42:	3401      	adds	r4, #1
 8022a44:	e7d1      	b.n	80229ea <__strftime+0x12>
 8022a46:	f102 0b02 	add.w	fp, r2, #2
 8022a4a:	e7dc      	b.n	8022a06 <__strftime+0x2e>
 8022a4c:	2600      	movs	r6, #0
 8022a4e:	e7e7      	b.n	8022a20 <__strftime+0x48>
 8022a50:	2b4f      	cmp	r3, #79	; 0x4f
 8022a52:	d0e9      	beq.n	8022a28 <__strftime+0x50>
 8022a54:	f89b 0000 	ldrb.w	r0, [fp]
 8022a58:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8022a5c:	2b55      	cmp	r3, #85	; 0x55
 8022a5e:	d8ea      	bhi.n	8022a36 <__strftime+0x5e>
 8022a60:	a201      	add	r2, pc, #4	; (adr r2, 8022a68 <__strftime+0x90>)
 8022a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022a66:	bf00      	nop
 8022a68:	08023387 	.word	0x08023387
 8022a6c:	08022a37 	.word	0x08022a37
 8022a70:	08022a37 	.word	0x08022a37
 8022a74:	08022a37 	.word	0x08022a37
 8022a78:	08022a37 	.word	0x08022a37
 8022a7c:	08022a37 	.word	0x08022a37
 8022a80:	08022a37 	.word	0x08022a37
 8022a84:	08022a37 	.word	0x08022a37
 8022a88:	08022a37 	.word	0x08022a37
 8022a8c:	08022a37 	.word	0x08022a37
 8022a90:	08022a37 	.word	0x08022a37
 8022a94:	08022a37 	.word	0x08022a37
 8022a98:	08022a37 	.word	0x08022a37
 8022a9c:	08022a37 	.word	0x08022a37
 8022aa0:	08022a37 	.word	0x08022a37
 8022aa4:	08022a37 	.word	0x08022a37
 8022aa8:	08022a37 	.word	0x08022a37
 8022aac:	08022a37 	.word	0x08022a37
 8022ab0:	08022a37 	.word	0x08022a37
 8022ab4:	08022a37 	.word	0x08022a37
 8022ab8:	08022a37 	.word	0x08022a37
 8022abc:	08022a37 	.word	0x08022a37
 8022ac0:	08022a37 	.word	0x08022a37
 8022ac4:	08022a37 	.word	0x08022a37
 8022ac8:	08022a37 	.word	0x08022a37
 8022acc:	08022a37 	.word	0x08022a37
 8022ad0:	08022a37 	.word	0x08022a37
 8022ad4:	08022a37 	.word	0x08022a37
 8022ad8:	08022bff 	.word	0x08022bff
 8022adc:	08022c59 	.word	0x08022c59
 8022ae0:	08022ccf 	.word	0x08022ccf
 8022ae4:	08022d69 	.word	0x08022d69
 8022ae8:	08022a37 	.word	0x08022a37
 8022aec:	08022db5 	.word	0x08022db5
 8022af0:	08022e95 	.word	0x08022e95
 8022af4:	08022f97 	.word	0x08022f97
 8022af8:	08022fa5 	.word	0x08022fa5
 8022afc:	08022a37 	.word	0x08022a37
 8022b00:	08022a37 	.word	0x08022a37
 8022b04:	08022a37 	.word	0x08022a37
 8022b08:	08022fd5 	.word	0x08022fd5
 8022b0c:	08022a37 	.word	0x08022a37
 8022b10:	08022a37 	.word	0x08022a37
 8022b14:	08022fed 	.word	0x08022fed
 8022b18:	08022a37 	.word	0x08022a37
 8022b1c:	0802303b 	.word	0x0802303b
 8022b20:	08023151 	.word	0x08023151
 8022b24:	08023163 	.word	0x08023163
 8022b28:	080231bb 	.word	0x080231bb
 8022b2c:	080231cb 	.word	0x080231cb
 8022b30:	08023241 	.word	0x08023241
 8022b34:	08022cc7 	.word	0x08022cc7
 8022b38:	08023275 	.word	0x08023275
 8022b3c:	08023333 	.word	0x08023333
 8022b40:	08022a37 	.word	0x08022a37
 8022b44:	08022a37 	.word	0x08022a37
 8022b48:	08022a37 	.word	0x08022a37
 8022b4c:	08022a37 	.word	0x08022a37
 8022b50:	08022a37 	.word	0x08022a37
 8022b54:	08022a37 	.word	0x08022a37
 8022b58:	08022bc1 	.word	0x08022bc1
 8022b5c:	08022c2d 	.word	0x08022c2d
 8022b60:	08022c87 	.word	0x08022c87
 8022b64:	08022d41 	.word	0x08022d41
 8022b68:	08022d41 	.word	0x08022d41
 8022b6c:	08022a37 	.word	0x08022a37
 8022b70:	08022dfd 	.word	0x08022dfd
 8022b74:	08022c2d 	.word	0x08022c2d
 8022b78:	08022a37 	.word	0x08022a37
 8022b7c:	08022fc7 	.word	0x08022fc7
 8022b80:	08022f97 	.word	0x08022f97
 8022b84:	08022fa5 	.word	0x08022fa5
 8022b88:	08022fcf 	.word	0x08022fcf
 8022b8c:	08022fd9 	.word	0x08022fd9
 8022b90:	08022a37 	.word	0x08022a37
 8022b94:	08022fed 	.word	0x08022fed
 8022b98:	08022a37 	.word	0x08022a37
 8022b9c:	08022cb7 	.word	0x08022cb7
 8022ba0:	08023051 	.word	0x08023051
 8022ba4:	08023155 	.word	0x08023155
 8022ba8:	0802319d 	.word	0x0802319d
 8022bac:	08022a37 	.word	0x08022a37
 8022bb0:	08023231 	.word	0x08023231
 8022bb4:	08022cbf 	.word	0x08022cbf
 8022bb8:	08023259 	.word	0x08023259
 8022bbc:	080232c5 	.word	0x080232c5
 8022bc0:	69ab      	ldr	r3, [r5, #24]
 8022bc2:	4aa7      	ldr	r2, [pc, #668]	; (8022e60 <__strftime+0x488>)
 8022bc4:	3318      	adds	r3, #24
 8022bc6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8022bca:	4630      	mov	r0, r6
 8022bcc:	f7dd fb42 	bl	8000254 <strlen>
 8022bd0:	3e01      	subs	r6, #1
 8022bd2:	4420      	add	r0, r4
 8022bd4:	f108 33ff 	add.w	r3, r8, #4294967295
 8022bd8:	42a0      	cmp	r0, r4
 8022bda:	d107      	bne.n	8022bec <__strftime+0x214>
 8022bdc:	f89b 3000 	ldrb.w	r3, [fp]
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	f000 83d7 	beq.w	8023394 <__strftime+0x9bc>
 8022be6:	f10b 0201 	add.w	r2, fp, #1
 8022bea:	e6fe      	b.n	80229ea <__strftime+0x12>
 8022bec:	42a3      	cmp	r3, r4
 8022bee:	f67f af22 	bls.w	8022a36 <__strftime+0x5e>
 8022bf2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022bf6:	f809 2004 	strb.w	r2, [r9, r4]
 8022bfa:	3401      	adds	r4, #1
 8022bfc:	e7ec      	b.n	8022bd8 <__strftime+0x200>
 8022bfe:	69aa      	ldr	r2, [r5, #24]
 8022c00:	4b97      	ldr	r3, [pc, #604]	; (8022e60 <__strftime+0x488>)
 8022c02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022c06:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8022c08:	4630      	mov	r0, r6
 8022c0a:	f7dd fb23 	bl	8000254 <strlen>
 8022c0e:	3e01      	subs	r6, #1
 8022c10:	4420      	add	r0, r4
 8022c12:	f108 33ff 	add.w	r3, r8, #4294967295
 8022c16:	42a0      	cmp	r0, r4
 8022c18:	d0e0      	beq.n	8022bdc <__strftime+0x204>
 8022c1a:	42a3      	cmp	r3, r4
 8022c1c:	f67f af0b 	bls.w	8022a36 <__strftime+0x5e>
 8022c20:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022c24:	f809 2004 	strb.w	r2, [r9, r4]
 8022c28:	3401      	adds	r4, #1
 8022c2a:	e7f4      	b.n	8022c16 <__strftime+0x23e>
 8022c2c:	4b8c      	ldr	r3, [pc, #560]	; (8022e60 <__strftime+0x488>)
 8022c2e:	692a      	ldr	r2, [r5, #16]
 8022c30:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022c34:	4630      	mov	r0, r6
 8022c36:	f7dd fb0d 	bl	8000254 <strlen>
 8022c3a:	3e01      	subs	r6, #1
 8022c3c:	4420      	add	r0, r4
 8022c3e:	f108 33ff 	add.w	r3, r8, #4294967295
 8022c42:	42a0      	cmp	r0, r4
 8022c44:	d0ca      	beq.n	8022bdc <__strftime+0x204>
 8022c46:	42a3      	cmp	r3, r4
 8022c48:	f67f aef5 	bls.w	8022a36 <__strftime+0x5e>
 8022c4c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022c50:	f809 2004 	strb.w	r2, [r9, r4]
 8022c54:	3401      	adds	r4, #1
 8022c56:	e7f4      	b.n	8022c42 <__strftime+0x26a>
 8022c58:	692b      	ldr	r3, [r5, #16]
 8022c5a:	4a81      	ldr	r2, [pc, #516]	; (8022e60 <__strftime+0x488>)
 8022c5c:	330c      	adds	r3, #12
 8022c5e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8022c62:	4630      	mov	r0, r6
 8022c64:	f7dd faf6 	bl	8000254 <strlen>
 8022c68:	3e01      	subs	r6, #1
 8022c6a:	4420      	add	r0, r4
 8022c6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8022c70:	42a0      	cmp	r0, r4
 8022c72:	d0b3      	beq.n	8022bdc <__strftime+0x204>
 8022c74:	42a3      	cmp	r3, r4
 8022c76:	f67f aede 	bls.w	8022a36 <__strftime+0x5e>
 8022c7a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022c7e:	f809 2004 	strb.w	r2, [r9, r4]
 8022c82:	3401      	adds	r4, #1
 8022c84:	e7f4      	b.n	8022c70 <__strftime+0x298>
 8022c86:	4b76      	ldr	r3, [pc, #472]	; (8022e60 <__strftime+0x488>)
 8022c88:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8022c8c:	4630      	mov	r0, r6
 8022c8e:	f7dd fae1 	bl	8000254 <strlen>
 8022c92:	7833      	ldrb	r3, [r6, #0]
 8022c94:	2b00      	cmp	r3, #0
 8022c96:	d0a1      	beq.n	8022bdc <__strftime+0x204>
 8022c98:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022c9a:	9300      	str	r3, [sp, #0]
 8022c9c:	4632      	mov	r2, r6
 8022c9e:	462b      	mov	r3, r5
 8022ca0:	eba8 0104 	sub.w	r1, r8, r4
 8022ca4:	eb09 0004 	add.w	r0, r9, r4
 8022ca8:	f7ff fe96 	bl	80229d8 <__strftime>
 8022cac:	2800      	cmp	r0, #0
 8022cae:	f77f aec2 	ble.w	8022a36 <__strftime+0x5e>
 8022cb2:	4404      	add	r4, r0
 8022cb4:	e792      	b.n	8022bdc <__strftime+0x204>
 8022cb6:	4b6a      	ldr	r3, [pc, #424]	; (8022e60 <__strftime+0x488>)
 8022cb8:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8022cbc:	e7e6      	b.n	8022c8c <__strftime+0x2b4>
 8022cbe:	4b68      	ldr	r3, [pc, #416]	; (8022e60 <__strftime+0x488>)
 8022cc0:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8022cc4:	e7e2      	b.n	8022c8c <__strftime+0x2b4>
 8022cc6:	4b66      	ldr	r3, [pc, #408]	; (8022e60 <__strftime+0x488>)
 8022cc8:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8022ccc:	e7de      	b.n	8022c8c <__strftime+0x2b4>
 8022cce:	4965      	ldr	r1, [pc, #404]	; (8022e64 <__strftime+0x48c>)
 8022cd0:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8022cd4:	458a      	cmp	sl, r1
 8022cd6:	bfac      	ite	ge
 8022cd8:	2100      	movge	r1, #0
 8022cda:	2101      	movlt	r1, #1
 8022cdc:	f1ba 0f00 	cmp.w	sl, #0
 8022ce0:	db0e      	blt.n	8022d00 <__strftime+0x328>
 8022ce2:	2064      	movs	r0, #100	; 0x64
 8022ce4:	fb9a f0f0 	sdiv	r0, sl, r0
 8022ce8:	3013      	adds	r0, #19
 8022cea:	b19f      	cbz	r7, 8022d14 <__strftime+0x33c>
 8022cec:	2863      	cmp	r0, #99	; 0x63
 8022cee:	dd25      	ble.n	8022d3c <__strftime+0x364>
 8022cf0:	4a5d      	ldr	r2, [pc, #372]	; (8022e68 <__strftime+0x490>)
 8022cf2:	4b5e      	ldr	r3, [pc, #376]	; (8022e6c <__strftime+0x494>)
 8022cf4:	2f2b      	cmp	r7, #43	; 0x2b
 8022cf6:	bf14      	ite	ne
 8022cf8:	4617      	movne	r7, r2
 8022cfa:	461f      	moveq	r7, r3
 8022cfc:	4a5c      	ldr	r2, [pc, #368]	; (8022e70 <__strftime+0x498>)
 8022cfe:	e00b      	b.n	8022d18 <__strftime+0x340>
 8022d00:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8022d04:	9105      	str	r1, [sp, #20]
 8022d06:	f000 ffa7 	bl	8023c58 <abs>
 8022d0a:	2364      	movs	r3, #100	; 0x64
 8022d0c:	9905      	ldr	r1, [sp, #20]
 8022d0e:	fb90 f0f3 	sdiv	r0, r0, r3
 8022d12:	e7ea      	b.n	8022cea <__strftime+0x312>
 8022d14:	4f54      	ldr	r7, [pc, #336]	; (8022e68 <__strftime+0x490>)
 8022d16:	4a57      	ldr	r2, [pc, #348]	; (8022e74 <__strftime+0x49c>)
 8022d18:	4b57      	ldr	r3, [pc, #348]	; (8022e78 <__strftime+0x4a0>)
 8022d1a:	9001      	str	r0, [sp, #4]
 8022d1c:	2e02      	cmp	r6, #2
 8022d1e:	bf2c      	ite	cs
 8022d20:	ebc1 0606 	rsbcs	r6, r1, r6
 8022d24:	f1c1 0602 	rsbcc	r6, r1, #2
 8022d28:	494e      	ldr	r1, [pc, #312]	; (8022e64 <__strftime+0x48c>)
 8022d2a:	9600      	str	r6, [sp, #0]
 8022d2c:	458a      	cmp	sl, r1
 8022d2e:	bfa8      	it	ge
 8022d30:	463b      	movge	r3, r7
 8022d32:	eba8 0104 	sub.w	r1, r8, r4
 8022d36:	eb09 0004 	add.w	r0, r9, r4
 8022d3a:	e02a      	b.n	8022d92 <__strftime+0x3ba>
 8022d3c:	4f4a      	ldr	r7, [pc, #296]	; (8022e68 <__strftime+0x490>)
 8022d3e:	e7dd      	b.n	8022cfc <__strftime+0x324>
 8022d40:	494e      	ldr	r1, [pc, #312]	; (8022e7c <__strftime+0x4a4>)
 8022d42:	4a4f      	ldr	r2, [pc, #316]	; (8022e80 <__strftime+0x4a8>)
 8022d44:	68eb      	ldr	r3, [r5, #12]
 8022d46:	2864      	cmp	r0, #100	; 0x64
 8022d48:	bf08      	it	eq
 8022d4a:	460a      	moveq	r2, r1
 8022d4c:	eba8 0104 	sub.w	r1, r8, r4
 8022d50:	eb09 0004 	add.w	r0, r9, r4
 8022d54:	f7ff fcfa 	bl	802274c <sniprintf>
 8022d58:	2800      	cmp	r0, #0
 8022d5a:	f6ff ae6c 	blt.w	8022a36 <__strftime+0x5e>
 8022d5e:	4404      	add	r4, r0
 8022d60:	45a0      	cmp	r8, r4
 8022d62:	f63f af3b 	bhi.w	8022bdc <__strftime+0x204>
 8022d66:	e666      	b.n	8022a36 <__strftime+0x5e>
 8022d68:	6968      	ldr	r0, [r5, #20]
 8022d6a:	692b      	ldr	r3, [r5, #16]
 8022d6c:	68ef      	ldr	r7, [r5, #12]
 8022d6e:	2800      	cmp	r0, #0
 8022d70:	eb09 0604 	add.w	r6, r9, r4
 8022d74:	eba8 0104 	sub.w	r1, r8, r4
 8022d78:	f103 0301 	add.w	r3, r3, #1
 8022d7c:	db0c      	blt.n	8022d98 <__strftime+0x3c0>
 8022d7e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022d82:	fb90 f2fc 	sdiv	r2, r0, ip
 8022d86:	fb0c 0212 	mls	r2, ip, r2, r0
 8022d8a:	e9cd 7200 	strd	r7, r2, [sp]
 8022d8e:	4a3d      	ldr	r2, [pc, #244]	; (8022e84 <__strftime+0x4ac>)
 8022d90:	4630      	mov	r0, r6
 8022d92:	f7ff fcdb 	bl	802274c <sniprintf>
 8022d96:	e7df      	b.n	8022d58 <__strftime+0x380>
 8022d98:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022d9c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8022da0:	f000 ff5a 	bl	8023c58 <abs>
 8022da4:	2264      	movs	r2, #100	; 0x64
 8022da6:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8022daa:	fb90 fcf2 	sdiv	ip, r0, r2
 8022dae:	fb0c 0212 	mls	r2, ip, r2, r0
 8022db2:	e7ea      	b.n	8022d8a <__strftime+0x3b2>
 8022db4:	2325      	movs	r3, #37	; 0x25
 8022db6:	f88d 3020 	strb.w	r3, [sp, #32]
 8022dba:	b187      	cbz	r7, 8022dde <__strftime+0x406>
 8022dbc:	2e06      	cmp	r6, #6
 8022dbe:	bf38      	it	cc
 8022dc0:	2606      	movcc	r6, #6
 8022dc2:	1fb3      	subs	r3, r6, #6
 8022dc4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8022dc8:	d10c      	bne.n	8022de4 <__strftime+0x40c>
 8022dca:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8022dce:	492e      	ldr	r1, [pc, #184]	; (8022e88 <__strftime+0x4b0>)
 8022dd0:	f7ff fd97 	bl	8022902 <strcpy>
 8022dd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022dd6:	9300      	str	r3, [sp, #0]
 8022dd8:	aa08      	add	r2, sp, #32
 8022dda:	462b      	mov	r3, r5
 8022ddc:	e760      	b.n	8022ca0 <__strftime+0x2c8>
 8022dde:	272b      	movs	r7, #43	; 0x2b
 8022de0:	260a      	movs	r6, #10
 8022de2:	e7ee      	b.n	8022dc2 <__strftime+0x3ea>
 8022de4:	4a29      	ldr	r2, [pc, #164]	; (8022e8c <__strftime+0x4b4>)
 8022de6:	211e      	movs	r1, #30
 8022de8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8022dec:	f7ff fcae 	bl	802274c <sniprintf>
 8022df0:	2800      	cmp	r0, #0
 8022df2:	ddea      	ble.n	8022dca <__strftime+0x3f2>
 8022df4:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8022df8:	4418      	add	r0, r3
 8022dfa:	e7e8      	b.n	8022dce <__strftime+0x3f6>
 8022dfc:	4628      	mov	r0, r5
 8022dfe:	f7ff fd89 	bl	8022914 <iso_year_adjust>
 8022e02:	4606      	mov	r6, r0
 8022e04:	6968      	ldr	r0, [r5, #20]
 8022e06:	2800      	cmp	r0, #0
 8022e08:	db11      	blt.n	8022e2e <__strftime+0x456>
 8022e0a:	2264      	movs	r2, #100	; 0x64
 8022e0c:	fb90 f3f2 	sdiv	r3, r0, r2
 8022e10:	fb02 0313 	mls	r3, r2, r3, r0
 8022e14:	441e      	add	r6, r3
 8022e16:	2364      	movs	r3, #100	; 0x64
 8022e18:	fb96 f0f3 	sdiv	r0, r6, r3
 8022e1c:	fb03 6610 	mls	r6, r3, r0, r6
 8022e20:	441e      	add	r6, r3
 8022e22:	fbb6 f2f3 	udiv	r2, r6, r3
 8022e26:	fb03 6312 	mls	r3, r3, r2, r6
 8022e2a:	4a14      	ldr	r2, [pc, #80]	; (8022e7c <__strftime+0x4a4>)
 8022e2c:	e78e      	b.n	8022d4c <__strftime+0x374>
 8022e2e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022e32:	f000 ff11 	bl	8023c58 <abs>
 8022e36:	2364      	movs	r3, #100	; 0x64
 8022e38:	2e00      	cmp	r6, #0
 8022e3a:	fb90 f2f3 	sdiv	r2, r0, r3
 8022e3e:	fb02 0313 	mls	r3, r2, r3, r0
 8022e42:	da05      	bge.n	8022e50 <__strftime+0x478>
 8022e44:	6969      	ldr	r1, [r5, #20]
 8022e46:	4a12      	ldr	r2, [pc, #72]	; (8022e90 <__strftime+0x4b8>)
 8022e48:	4291      	cmp	r1, r2
 8022e4a:	bfb8      	it	lt
 8022e4c:	2601      	movlt	r6, #1
 8022e4e:	e7e1      	b.n	8022e14 <__strftime+0x43c>
 8022e50:	d0e0      	beq.n	8022e14 <__strftime+0x43c>
 8022e52:	6969      	ldr	r1, [r5, #20]
 8022e54:	4a03      	ldr	r2, [pc, #12]	; (8022e64 <__strftime+0x48c>)
 8022e56:	4291      	cmp	r1, r2
 8022e58:	bfb8      	it	lt
 8022e5a:	f04f 36ff 	movlt.w	r6, #4294967295
 8022e5e:	e7d9      	b.n	8022e14 <__strftime+0x43c>
 8022e60:	080420c0 	.word	0x080420c0
 8022e64:	fffff894 	.word	0xfffff894
 8022e68:	08042277 	.word	0x08042277
 8022e6c:	08041f48 	.word	0x08041f48
 8022e70:	08041f40 	.word	0x08041f40
 8022e74:	08041f39 	.word	0x08041f39
 8022e78:	08042546 	.word	0x08042546
 8022e7c:	08041f58 	.word	0x08041f58
 8022e80:	08041f4a 	.word	0x08041f4a
 8022e84:	08041f4e 	.word	0x08041f4e
 8022e88:	08041f61 	.word	0x08041f61
 8022e8c:	08041f5d 	.word	0x08041f5d
 8022e90:	fffff895 	.word	0xfffff895
 8022e94:	4bb6      	ldr	r3, [pc, #728]	; (8023170 <__strftime+0x798>)
 8022e96:	6969      	ldr	r1, [r5, #20]
 8022e98:	4299      	cmp	r1, r3
 8022e9a:	bfac      	ite	ge
 8022e9c:	2300      	movge	r3, #0
 8022e9e:	2301      	movlt	r3, #1
 8022ea0:	4628      	mov	r0, r5
 8022ea2:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8022ea6:	f7ff fd35 	bl	8022914 <iso_year_adjust>
 8022eaa:	9906      	ldr	r1, [sp, #24]
 8022eac:	2900      	cmp	r1, #0
 8022eae:	4682      	mov	sl, r0
 8022eb0:	db27      	blt.n	8022f02 <__strftime+0x52a>
 8022eb2:	2264      	movs	r2, #100	; 0x64
 8022eb4:	fb91 f2f2 	sdiv	r2, r1, r2
 8022eb8:	3213      	adds	r2, #19
 8022eba:	6968      	ldr	r0, [r5, #20]
 8022ebc:	2800      	cmp	r0, #0
 8022ebe:	db2b      	blt.n	8022f18 <__strftime+0x540>
 8022ec0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022ec4:	fb90 fefc 	sdiv	lr, r0, ip
 8022ec8:	fb0c 001e 	mls	r0, ip, lr, r0
 8022ecc:	f1ba 0f00 	cmp.w	sl, #0
 8022ed0:	da31      	bge.n	8022f36 <__strftime+0x55e>
 8022ed2:	6969      	ldr	r1, [r5, #20]
 8022ed4:	4ba7      	ldr	r3, [pc, #668]	; (8023174 <__strftime+0x79c>)
 8022ed6:	4299      	cmp	r1, r3
 8022ed8:	db38      	blt.n	8022f4c <__strftime+0x574>
 8022eda:	eb0a 0300 	add.w	r3, sl, r0
 8022ede:	1c59      	adds	r1, r3, #1
 8022ee0:	d139      	bne.n	8022f56 <__strftime+0x57e>
 8022ee2:	3a01      	subs	r2, #1
 8022ee4:	2363      	movs	r3, #99	; 0x63
 8022ee6:	2064      	movs	r0, #100	; 0x64
 8022ee8:	fb00 3202 	mla	r2, r0, r2, r3
 8022eec:	9b05      	ldr	r3, [sp, #20]
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	d036      	beq.n	8022f60 <__strftime+0x588>
 8022ef2:	232d      	movs	r3, #45	; 0x2d
 8022ef4:	f88d 3020 	strb.w	r3, [sp, #32]
 8022ef8:	b106      	cbz	r6, 8022efc <__strftime+0x524>
 8022efa:	3e01      	subs	r6, #1
 8022efc:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8022f00:	e038      	b.n	8022f74 <__strftime+0x59c>
 8022f02:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8022f06:	9106      	str	r1, [sp, #24]
 8022f08:	f000 fea6 	bl	8023c58 <abs>
 8022f0c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022f10:	9906      	ldr	r1, [sp, #24]
 8022f12:	fb90 f2fc 	sdiv	r2, r0, ip
 8022f16:	e7d0      	b.n	8022eba <__strftime+0x4e2>
 8022f18:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022f1c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8022f20:	f000 fe9a 	bl	8023c58 <abs>
 8022f24:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022f28:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8022f2c:	fb90 fefc 	sdiv	lr, r0, ip
 8022f30:	fb0e 001c 	mls	r0, lr, ip, r0
 8022f34:	e7ca      	b.n	8022ecc <__strftime+0x4f4>
 8022f36:	d0d0      	beq.n	8022eda <__strftime+0x502>
 8022f38:	4b8d      	ldr	r3, [pc, #564]	; (8023170 <__strftime+0x798>)
 8022f3a:	4299      	cmp	r1, r3
 8022f3c:	bfb4      	ite	lt
 8022f3e:	2301      	movlt	r3, #1
 8022f40:	2300      	movge	r3, #0
 8022f42:	9305      	str	r3, [sp, #20]
 8022f44:	bfb8      	it	lt
 8022f46:	f04f 3aff 	movlt.w	sl, #4294967295
 8022f4a:	e7c6      	b.n	8022eda <__strftime+0x502>
 8022f4c:	f04f 0a01 	mov.w	sl, #1
 8022f50:	f8cd a014 	str.w	sl, [sp, #20]
 8022f54:	e7c1      	b.n	8022eda <__strftime+0x502>
 8022f56:	2b64      	cmp	r3, #100	; 0x64
 8022f58:	bf04      	itt	eq
 8022f5a:	3201      	addeq	r2, #1
 8022f5c:	2300      	moveq	r3, #0
 8022f5e:	e7c2      	b.n	8022ee6 <__strftime+0x50e>
 8022f60:	2f2b      	cmp	r7, #43	; 0x2b
 8022f62:	d106      	bne.n	8022f72 <__strftime+0x59a>
 8022f64:	f242 730f 	movw	r3, #9999	; 0x270f
 8022f68:	429a      	cmp	r2, r3
 8022f6a:	d902      	bls.n	8022f72 <__strftime+0x59a>
 8022f6c:	f88d 7020 	strb.w	r7, [sp, #32]
 8022f70:	e7c2      	b.n	8022ef8 <__strftime+0x520>
 8022f72:	ab08      	add	r3, sp, #32
 8022f74:	2125      	movs	r1, #37	; 0x25
 8022f76:	7019      	strb	r1, [r3, #0]
 8022f78:	b94f      	cbnz	r7, 8022f8e <__strftime+0x5b6>
 8022f7a:	1c58      	adds	r0, r3, #1
 8022f7c:	497e      	ldr	r1, [pc, #504]	; (8023178 <__strftime+0x7a0>)
 8022f7e:	9205      	str	r2, [sp, #20]
 8022f80:	f7ff fcbf 	bl	8022902 <strcpy>
 8022f84:	9a05      	ldr	r2, [sp, #20]
 8022f86:	9200      	str	r2, [sp, #0]
 8022f88:	4633      	mov	r3, r6
 8022f8a:	aa08      	add	r2, sp, #32
 8022f8c:	e059      	b.n	8023042 <__strftime+0x66a>
 8022f8e:	2130      	movs	r1, #48	; 0x30
 8022f90:	1c98      	adds	r0, r3, #2
 8022f92:	7059      	strb	r1, [r3, #1]
 8022f94:	e7f2      	b.n	8022f7c <__strftime+0x5a4>
 8022f96:	4979      	ldr	r1, [pc, #484]	; (802317c <__strftime+0x7a4>)
 8022f98:	4a79      	ldr	r2, [pc, #484]	; (8023180 <__strftime+0x7a8>)
 8022f9a:	68ab      	ldr	r3, [r5, #8]
 8022f9c:	286b      	cmp	r0, #107	; 0x6b
 8022f9e:	bf08      	it	eq
 8022fa0:	460a      	moveq	r2, r1
 8022fa2:	e6d3      	b.n	8022d4c <__strftime+0x374>
 8022fa4:	68ab      	ldr	r3, [r5, #8]
 8022fa6:	b163      	cbz	r3, 8022fc2 <__strftime+0x5ea>
 8022fa8:	2b0c      	cmp	r3, #12
 8022faa:	d004      	beq.n	8022fb6 <__strftime+0x5de>
 8022fac:	210c      	movs	r1, #12
 8022fae:	fb93 f2f1 	sdiv	r2, r3, r1
 8022fb2:	fb01 3312 	mls	r3, r1, r2, r3
 8022fb6:	4972      	ldr	r1, [pc, #456]	; (8023180 <__strftime+0x7a8>)
 8022fb8:	4a70      	ldr	r2, [pc, #448]	; (802317c <__strftime+0x7a4>)
 8022fba:	2849      	cmp	r0, #73	; 0x49
 8022fbc:	bf08      	it	eq
 8022fbe:	460a      	moveq	r2, r1
 8022fc0:	e6c4      	b.n	8022d4c <__strftime+0x374>
 8022fc2:	230c      	movs	r3, #12
 8022fc4:	e7f7      	b.n	8022fb6 <__strftime+0x5de>
 8022fc6:	69eb      	ldr	r3, [r5, #28]
 8022fc8:	4a6e      	ldr	r2, [pc, #440]	; (8023184 <__strftime+0x7ac>)
 8022fca:	3301      	adds	r3, #1
 8022fcc:	e6be      	b.n	8022d4c <__strftime+0x374>
 8022fce:	692b      	ldr	r3, [r5, #16]
 8022fd0:	3301      	adds	r3, #1
 8022fd2:	e72a      	b.n	8022e2a <__strftime+0x452>
 8022fd4:	686b      	ldr	r3, [r5, #4]
 8022fd6:	e728      	b.n	8022e2a <__strftime+0x452>
 8022fd8:	f108 33ff 	add.w	r3, r8, #4294967295
 8022fdc:	42a3      	cmp	r3, r4
 8022fde:	f67f ad2a 	bls.w	8022a36 <__strftime+0x5e>
 8022fe2:	230a      	movs	r3, #10
 8022fe4:	f809 3004 	strb.w	r3, [r9, r4]
 8022fe8:	3401      	adds	r4, #1
 8022fea:	e5f7      	b.n	8022bdc <__strftime+0x204>
 8022fec:	68ab      	ldr	r3, [r5, #8]
 8022fee:	2b0b      	cmp	r3, #11
 8022ff0:	bfcc      	ite	gt
 8022ff2:	22a4      	movgt	r2, #164	; 0xa4
 8022ff4:	22a0      	movle	r2, #160	; 0xa0
 8022ff6:	4b64      	ldr	r3, [pc, #400]	; (8023188 <__strftime+0x7b0>)
 8022ff8:	4413      	add	r3, r2
 8022ffa:	685e      	ldr	r6, [r3, #4]
 8022ffc:	4630      	mov	r0, r6
 8022ffe:	f7dd f929 	bl	8000254 <strlen>
 8023002:	1e72      	subs	r2, r6, #1
 8023004:	4420      	add	r0, r4
 8023006:	f108 36ff 	add.w	r6, r8, #4294967295
 802300a:	42a0      	cmp	r0, r4
 802300c:	f43f ade6 	beq.w	8022bdc <__strftime+0x204>
 8023010:	42a6      	cmp	r6, r4
 8023012:	f67f ad10 	bls.w	8022a36 <__strftime+0x5e>
 8023016:	f89b 1000 	ldrb.w	r1, [fp]
 802301a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802301e:	2950      	cmp	r1, #80	; 0x50
 8023020:	d107      	bne.n	8023032 <__strftime+0x65a>
 8023022:	495a      	ldr	r1, [pc, #360]	; (802318c <__strftime+0x7b4>)
 8023024:	5cc9      	ldrb	r1, [r1, r3]
 8023026:	f001 0103 	and.w	r1, r1, #3
 802302a:	2901      	cmp	r1, #1
 802302c:	bf08      	it	eq
 802302e:	3320      	addeq	r3, #32
 8023030:	b2db      	uxtb	r3, r3
 8023032:	f809 3004 	strb.w	r3, [r9, r4]
 8023036:	3401      	adds	r4, #1
 8023038:	e7e7      	b.n	802300a <__strftime+0x632>
 802303a:	686b      	ldr	r3, [r5, #4]
 802303c:	9300      	str	r3, [sp, #0]
 802303e:	4a54      	ldr	r2, [pc, #336]	; (8023190 <__strftime+0x7b8>)
 8023040:	68ab      	ldr	r3, [r5, #8]
 8023042:	eba8 0104 	sub.w	r1, r8, r4
 8023046:	eb09 0004 	add.w	r0, r9, r4
 802304a:	f7ff fb7f 	bl	802274c <sniprintf>
 802304e:	e683      	b.n	8022d58 <__strftime+0x380>
 8023050:	6a2b      	ldr	r3, [r5, #32]
 8023052:	2b00      	cmp	r3, #0
 8023054:	db79      	blt.n	802314a <__strftime+0x772>
 8023056:	f000 fb9f 	bl	8023798 <__tz_lock>
 802305a:	9b04      	ldr	r3, [sp, #16]
 802305c:	b90b      	cbnz	r3, 8023062 <__strftime+0x68a>
 802305e:	f000 fba7 	bl	80237b0 <_tzset_unlocked>
 8023062:	f001 fea9 	bl	8024db8 <__gettzinfo>
 8023066:	6a2b      	ldr	r3, [r5, #32]
 8023068:	2b00      	cmp	r3, #0
 802306a:	bfcc      	ite	gt
 802306c:	2350      	movgt	r3, #80	; 0x50
 802306e:	2328      	movle	r3, #40	; 0x28
 8023070:	58c3      	ldr	r3, [r0, r3]
 8023072:	f1c3 0a00 	rsb	sl, r3, #0
 8023076:	f000 fb95 	bl	80237a4 <__tz_unlock>
 802307a:	2301      	movs	r3, #1
 802307c:	9304      	str	r3, [sp, #16]
 802307e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8023082:	4662      	mov	r2, ip
 8023084:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8023088:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802308c:	9602      	str	r6, [sp, #8]
 802308e:	f143 36ff 	adc.w	r6, r3, #4294967295
 8023092:	9603      	str	r6, [sp, #12]
 8023094:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023098:	2e00      	cmp	r6, #0
 802309a:	f177 0600 	sbcs.w	r6, r7, #0
 802309e:	eba8 0104 	sub.w	r1, r8, r4
 80230a2:	eb09 0004 	add.w	r0, r9, r4
 80230a6:	da05      	bge.n	80230b4 <__strftime+0x6dc>
 80230a8:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 80230ac:	f143 33ff 	adc.w	r3, r3, #4294967295
 80230b0:	9602      	str	r6, [sp, #8]
 80230b2:	9303      	str	r3, [sp, #12]
 80230b4:	9b02      	ldr	r3, [sp, #8]
 80230b6:	089e      	lsrs	r6, r3, #2
 80230b8:	9b03      	ldr	r3, [sp, #12]
 80230ba:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 80230be:	f10c 32ff 	add.w	r2, ip, #4294967295
 80230c2:	109f      	asrs	r7, r3, #2
 80230c4:	2364      	movs	r3, #100	; 0x64
 80230c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80230ca:	1af6      	subs	r6, r6, r3
 80230cc:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 80230d0:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80230d4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80230d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80230dc:	18f6      	adds	r6, r6, r3
 80230de:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80230e2:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80230e6:	f240 136d 	movw	r3, #365	; 0x16d
 80230ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80230ee:	69eb      	ldr	r3, [r5, #28]
 80230f0:	eb16 060c 	adds.w	r6, r6, ip
 80230f4:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 80230f8:	18f6      	adds	r6, r6, r3
 80230fa:	f04f 0c18 	mov.w	ip, #24
 80230fe:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8023102:	fba6 230c 	umull	r2, r3, r6, ip
 8023106:	68ae      	ldr	r6, [r5, #8]
 8023108:	fb0c 3307 	mla	r3, ip, r7, r3
 802310c:	1992      	adds	r2, r2, r6
 802310e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8023112:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8023116:	fba2 670c 	umull	r6, r7, r2, ip
 802311a:	fb0c 7703 	mla	r7, ip, r3, r7
 802311e:	686b      	ldr	r3, [r5, #4]
 8023120:	18f6      	adds	r6, r6, r3
 8023122:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8023126:	fba6 230c 	umull	r2, r3, r6, ip
 802312a:	682e      	ldr	r6, [r5, #0]
 802312c:	fb0c 3307 	mla	r3, ip, r7, r3
 8023130:	1992      	adds	r2, r2, r6
 8023132:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8023136:	ebb2 020a 	subs.w	r2, r2, sl
 802313a:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802313e:	e9cd 2300 	strd	r2, r3, [sp]
 8023142:	4a14      	ldr	r2, [pc, #80]	; (8023194 <__strftime+0x7bc>)
 8023144:	f7ff fb02 	bl	802274c <sniprintf>
 8023148:	e606      	b.n	8022d58 <__strftime+0x380>
 802314a:	f04f 0a00 	mov.w	sl, #0
 802314e:	e796      	b.n	802307e <__strftime+0x6a6>
 8023150:	682b      	ldr	r3, [r5, #0]
 8023152:	e66a      	b.n	8022e2a <__strftime+0x452>
 8023154:	f108 33ff 	add.w	r3, r8, #4294967295
 8023158:	42a3      	cmp	r3, r4
 802315a:	f67f ac6c 	bls.w	8022a36 <__strftime+0x5e>
 802315e:	2309      	movs	r3, #9
 8023160:	e740      	b.n	8022fe4 <__strftime+0x60c>
 8023162:	682b      	ldr	r3, [r5, #0]
 8023164:	9301      	str	r3, [sp, #4]
 8023166:	686b      	ldr	r3, [r5, #4]
 8023168:	9300      	str	r3, [sp, #0]
 802316a:	4a0b      	ldr	r2, [pc, #44]	; (8023198 <__strftime+0x7c0>)
 802316c:	68ab      	ldr	r3, [r5, #8]
 802316e:	e5e0      	b.n	8022d32 <__strftime+0x35a>
 8023170:	fffff894 	.word	0xfffff894
 8023174:	fffff895 	.word	0xfffff895
 8023178:	08041f69 	.word	0x08041f69
 802317c:	08041f4a 	.word	0x08041f4a
 8023180:	08041f58 	.word	0x08041f58
 8023184:	08041f6d 	.word	0x08041f6d
 8023188:	080420c0 	.word	0x080420c0
 802318c:	08041c69 	.word	0x08041c69
 8023190:	08041f7c 	.word	0x08041f7c
 8023194:	08041f72 	.word	0x08041f72
 8023198:	08041f77 	.word	0x08041f77
 802319c:	f108 33ff 	add.w	r3, r8, #4294967295
 80231a0:	42a3      	cmp	r3, r4
 80231a2:	f67f ac48 	bls.w	8022a36 <__strftime+0x5e>
 80231a6:	69ab      	ldr	r3, [r5, #24]
 80231a8:	eb09 0204 	add.w	r2, r9, r4
 80231ac:	3401      	adds	r4, #1
 80231ae:	b913      	cbnz	r3, 80231b6 <__strftime+0x7de>
 80231b0:	2337      	movs	r3, #55	; 0x37
 80231b2:	7013      	strb	r3, [r2, #0]
 80231b4:	e512      	b.n	8022bdc <__strftime+0x204>
 80231b6:	3330      	adds	r3, #48	; 0x30
 80231b8:	e7fb      	b.n	80231b2 <__strftime+0x7da>
 80231ba:	69eb      	ldr	r3, [r5, #28]
 80231bc:	69aa      	ldr	r2, [r5, #24]
 80231be:	3307      	adds	r3, #7
 80231c0:	1a9b      	subs	r3, r3, r2
 80231c2:	2207      	movs	r2, #7
 80231c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80231c8:	e62f      	b.n	8022e2a <__strftime+0x452>
 80231ca:	4628      	mov	r0, r5
 80231cc:	f7ff fba2 	bl	8022914 <iso_year_adjust>
 80231d0:	69aa      	ldr	r2, [r5, #24]
 80231d2:	b132      	cbz	r2, 80231e2 <__strftime+0x80a>
 80231d4:	3a01      	subs	r2, #1
 80231d6:	2800      	cmp	r0, #0
 80231d8:	dc28      	bgt.n	802322c <__strftime+0x854>
 80231da:	69eb      	ldr	r3, [r5, #28]
 80231dc:	d103      	bne.n	80231e6 <__strftime+0x80e>
 80231de:	330a      	adds	r3, #10
 80231e0:	e7ee      	b.n	80231c0 <__strftime+0x7e8>
 80231e2:	2206      	movs	r2, #6
 80231e4:	e7f7      	b.n	80231d6 <__strftime+0x7fe>
 80231e6:	6968      	ldr	r0, [r5, #20]
 80231e8:	2800      	cmp	r0, #0
 80231ea:	eba2 0303 	sub.w	r3, r2, r3
 80231ee:	f240 726b 	movw	r2, #1899	; 0x76b
 80231f2:	bfa8      	it	ge
 80231f4:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80231f8:	4410      	add	r0, r2
 80231fa:	0782      	lsls	r2, r0, #30
 80231fc:	d105      	bne.n	802320a <__strftime+0x832>
 80231fe:	2264      	movs	r2, #100	; 0x64
 8023200:	fb90 f1f2 	sdiv	r1, r0, r2
 8023204:	fb02 0111 	mls	r1, r2, r1, r0
 8023208:	b971      	cbnz	r1, 8023228 <__strftime+0x850>
 802320a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802320e:	fb90 f2f1 	sdiv	r2, r0, r1
 8023212:	fb01 0212 	mls	r2, r1, r2, r0
 8023216:	fab2 f282 	clz	r2, r2
 802321a:	0952      	lsrs	r2, r2, #5
 802321c:	1a9a      	subs	r2, r3, r2
 802321e:	2a05      	cmp	r2, #5
 8023220:	bfb4      	ite	lt
 8023222:	2335      	movlt	r3, #53	; 0x35
 8023224:	2334      	movge	r3, #52	; 0x34
 8023226:	e600      	b.n	8022e2a <__strftime+0x452>
 8023228:	2201      	movs	r2, #1
 802322a:	e7f7      	b.n	802321c <__strftime+0x844>
 802322c:	2301      	movs	r3, #1
 802322e:	e5fc      	b.n	8022e2a <__strftime+0x452>
 8023230:	f108 33ff 	add.w	r3, r8, #4294967295
 8023234:	42a3      	cmp	r3, r4
 8023236:	f67f abfe 	bls.w	8022a36 <__strftime+0x5e>
 802323a:	69ab      	ldr	r3, [r5, #24]
 802323c:	3330      	adds	r3, #48	; 0x30
 802323e:	e6d1      	b.n	8022fe4 <__strftime+0x60c>
 8023240:	69ab      	ldr	r3, [r5, #24]
 8023242:	b13b      	cbz	r3, 8023254 <__strftime+0x87c>
 8023244:	3b01      	subs	r3, #1
 8023246:	69ea      	ldr	r2, [r5, #28]
 8023248:	3207      	adds	r2, #7
 802324a:	1ad2      	subs	r2, r2, r3
 802324c:	2307      	movs	r3, #7
 802324e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023252:	e5ea      	b.n	8022e2a <__strftime+0x452>
 8023254:	2306      	movs	r3, #6
 8023256:	e7f6      	b.n	8023246 <__strftime+0x86e>
 8023258:	6968      	ldr	r0, [r5, #20]
 802325a:	2800      	cmp	r0, #0
 802325c:	db05      	blt.n	802326a <__strftime+0x892>
 802325e:	2264      	movs	r2, #100	; 0x64
 8023260:	fb90 f3f2 	sdiv	r3, r0, r2
 8023264:	fb03 0312 	mls	r3, r3, r2, r0
 8023268:	e5df      	b.n	8022e2a <__strftime+0x452>
 802326a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802326e:	f000 fcf3 	bl	8023c58 <abs>
 8023272:	e7f4      	b.n	802325e <__strftime+0x886>
 8023274:	696b      	ldr	r3, [r5, #20]
 8023276:	4a4c      	ldr	r2, [pc, #304]	; (80233a8 <__strftime+0x9d0>)
 8023278:	4293      	cmp	r3, r2
 802327a:	da09      	bge.n	8023290 <__strftime+0x8b8>
 802327c:	212d      	movs	r1, #45	; 0x2d
 802327e:	f88d 1020 	strb.w	r1, [sp, #32]
 8023282:	eba2 0a03 	sub.w	sl, r2, r3
 8023286:	b106      	cbz	r6, 802328a <__strftime+0x8b2>
 8023288:	3e01      	subs	r6, #1
 802328a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 802328e:	e00b      	b.n	80232a8 <__strftime+0x8d0>
 8023290:	2f2b      	cmp	r7, #43	; 0x2b
 8023292:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8023296:	d106      	bne.n	80232a6 <__strftime+0x8ce>
 8023298:	f242 730f 	movw	r3, #9999	; 0x270f
 802329c:	459a      	cmp	sl, r3
 802329e:	d902      	bls.n	80232a6 <__strftime+0x8ce>
 80232a0:	f88d 7020 	strb.w	r7, [sp, #32]
 80232a4:	e7ef      	b.n	8023286 <__strftime+0x8ae>
 80232a6:	ab08      	add	r3, sp, #32
 80232a8:	2225      	movs	r2, #37	; 0x25
 80232aa:	701a      	strb	r2, [r3, #0]
 80232ac:	b937      	cbnz	r7, 80232bc <__strftime+0x8e4>
 80232ae:	1c58      	adds	r0, r3, #1
 80232b0:	493e      	ldr	r1, [pc, #248]	; (80233ac <__strftime+0x9d4>)
 80232b2:	f7ff fb26 	bl	8022902 <strcpy>
 80232b6:	f8cd a000 	str.w	sl, [sp]
 80232ba:	e665      	b.n	8022f88 <__strftime+0x5b0>
 80232bc:	2230      	movs	r2, #48	; 0x30
 80232be:	1c98      	adds	r0, r3, #2
 80232c0:	705a      	strb	r2, [r3, #1]
 80232c2:	e7f5      	b.n	80232b0 <__strftime+0x8d8>
 80232c4:	6a2b      	ldr	r3, [r5, #32]
 80232c6:	2b00      	cmp	r3, #0
 80232c8:	f6ff ac88 	blt.w	8022bdc <__strftime+0x204>
 80232cc:	f000 fa64 	bl	8023798 <__tz_lock>
 80232d0:	9b04      	ldr	r3, [sp, #16]
 80232d2:	b90b      	cbnz	r3, 80232d8 <__strftime+0x900>
 80232d4:	f000 fa6c 	bl	80237b0 <_tzset_unlocked>
 80232d8:	f001 fd6e 	bl	8024db8 <__gettzinfo>
 80232dc:	6a2b      	ldr	r3, [r5, #32]
 80232de:	2b00      	cmp	r3, #0
 80232e0:	bfcc      	ite	gt
 80232e2:	2350      	movgt	r3, #80	; 0x50
 80232e4:	2328      	movle	r3, #40	; 0x28
 80232e6:	eb09 0704 	add.w	r7, r9, r4
 80232ea:	58c6      	ldr	r6, [r0, r3]
 80232ec:	f000 fa5a 	bl	80237a4 <__tz_unlock>
 80232f0:	4276      	negs	r6, r6
 80232f2:	233c      	movs	r3, #60	; 0x3c
 80232f4:	fb96 f0f3 	sdiv	r0, r6, r3
 80232f8:	f001 fe12 	bl	8024f20 <labs>
 80232fc:	233c      	movs	r3, #60	; 0x3c
 80232fe:	eba8 0a04 	sub.w	sl, r8, r4
 8023302:	fb90 f2f3 	sdiv	r2, r0, r3
 8023306:	fb02 0013 	mls	r0, r2, r3, r0
 802330a:	9000      	str	r0, [sp, #0]
 802330c:	4a28      	ldr	r2, [pc, #160]	; (80233b0 <__strftime+0x9d8>)
 802330e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8023312:	4651      	mov	r1, sl
 8023314:	4638      	mov	r0, r7
 8023316:	fb96 f3f3 	sdiv	r3, r6, r3
 802331a:	f7ff fa17 	bl	802274c <sniprintf>
 802331e:	2800      	cmp	r0, #0
 8023320:	f6ff ab89 	blt.w	8022a36 <__strftime+0x5e>
 8023324:	4404      	add	r4, r0
 8023326:	45a0      	cmp	r8, r4
 8023328:	f67f ab85 	bls.w	8022a36 <__strftime+0x5e>
 802332c:	2301      	movs	r3, #1
 802332e:	9304      	str	r3, [sp, #16]
 8023330:	e454      	b.n	8022bdc <__strftime+0x204>
 8023332:	6a2b      	ldr	r3, [r5, #32]
 8023334:	2b00      	cmp	r3, #0
 8023336:	f6ff ac51 	blt.w	8022bdc <__strftime+0x204>
 802333a:	f000 fa2d 	bl	8023798 <__tz_lock>
 802333e:	9b04      	ldr	r3, [sp, #16]
 8023340:	b90b      	cbnz	r3, 8023346 <__strftime+0x96e>
 8023342:	f000 fa35 	bl	80237b0 <_tzset_unlocked>
 8023346:	6a2b      	ldr	r3, [r5, #32]
 8023348:	4a1a      	ldr	r2, [pc, #104]	; (80233b4 <__strftime+0x9dc>)
 802334a:	2b00      	cmp	r3, #0
 802334c:	bfd4      	ite	le
 802334e:	2300      	movle	r3, #0
 8023350:	2301      	movgt	r3, #1
 8023352:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8023356:	4630      	mov	r0, r6
 8023358:	f7dc ff7c 	bl	8000254 <strlen>
 802335c:	3e01      	subs	r6, #1
 802335e:	4420      	add	r0, r4
 8023360:	f108 33ff 	add.w	r3, r8, #4294967295
 8023364:	42a0      	cmp	r0, r4
 8023366:	d102      	bne.n	802336e <__strftime+0x996>
 8023368:	f000 fa1c 	bl	80237a4 <__tz_unlock>
 802336c:	e7de      	b.n	802332c <__strftime+0x954>
 802336e:	42a3      	cmp	r3, r4
 8023370:	d905      	bls.n	802337e <__strftime+0x9a6>
 8023372:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8023376:	f809 2004 	strb.w	r2, [r9, r4]
 802337a:	3401      	adds	r4, #1
 802337c:	e7f2      	b.n	8023364 <__strftime+0x98c>
 802337e:	f000 fa11 	bl	80237a4 <__tz_unlock>
 8023382:	f7ff bb58 	b.w	8022a36 <__strftime+0x5e>
 8023386:	f108 33ff 	add.w	r3, r8, #4294967295
 802338a:	42a3      	cmp	r3, r4
 802338c:	f67f ab53 	bls.w	8022a36 <__strftime+0x5e>
 8023390:	2325      	movs	r3, #37	; 0x25
 8023392:	e627      	b.n	8022fe4 <__strftime+0x60c>
 8023394:	f1b8 0f00 	cmp.w	r8, #0
 8023398:	d002      	beq.n	80233a0 <__strftime+0x9c8>
 802339a:	2300      	movs	r3, #0
 802339c:	f809 3004 	strb.w	r3, [r9, r4]
 80233a0:	4620      	mov	r0, r4
 80233a2:	b011      	add	sp, #68	; 0x44
 80233a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233a8:	fffff894 	.word	0xfffff894
 80233ac:	08041f69 	.word	0x08041f69
 80233b0:	08041f86 	.word	0x08041f86
 80233b4:	200004e4 	.word	0x200004e4

080233b8 <strftime>:
 80233b8:	b513      	push	{r0, r1, r4, lr}
 80233ba:	4c03      	ldr	r4, [pc, #12]	; (80233c8 <strftime+0x10>)
 80233bc:	9400      	str	r4, [sp, #0]
 80233be:	f7ff fb0b 	bl	80229d8 <__strftime>
 80233c2:	b002      	add	sp, #8
 80233c4:	bd10      	pop	{r4, pc}
 80233c6:	bf00      	nop
 80233c8:	20000548 	.word	0x20000548

080233cc <strncmp>:
 80233cc:	b510      	push	{r4, lr}
 80233ce:	b16a      	cbz	r2, 80233ec <strncmp+0x20>
 80233d0:	3901      	subs	r1, #1
 80233d2:	1884      	adds	r4, r0, r2
 80233d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80233d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80233dc:	4293      	cmp	r3, r2
 80233de:	d103      	bne.n	80233e8 <strncmp+0x1c>
 80233e0:	42a0      	cmp	r0, r4
 80233e2:	d001      	beq.n	80233e8 <strncmp+0x1c>
 80233e4:	2b00      	cmp	r3, #0
 80233e6:	d1f5      	bne.n	80233d4 <strncmp+0x8>
 80233e8:	1a98      	subs	r0, r3, r2
 80233ea:	bd10      	pop	{r4, pc}
 80233ec:	4610      	mov	r0, r2
 80233ee:	e7fc      	b.n	80233ea <strncmp+0x1e>

080233f0 <strncpy>:
 80233f0:	b510      	push	{r4, lr}
 80233f2:	3901      	subs	r1, #1
 80233f4:	4603      	mov	r3, r0
 80233f6:	b132      	cbz	r2, 8023406 <strncpy+0x16>
 80233f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80233fc:	f803 4b01 	strb.w	r4, [r3], #1
 8023400:	3a01      	subs	r2, #1
 8023402:	2c00      	cmp	r4, #0
 8023404:	d1f7      	bne.n	80233f6 <strncpy+0x6>
 8023406:	441a      	add	r2, r3
 8023408:	2100      	movs	r1, #0
 802340a:	4293      	cmp	r3, r2
 802340c:	d100      	bne.n	8023410 <strncpy+0x20>
 802340e:	bd10      	pop	{r4, pc}
 8023410:	f803 1b01 	strb.w	r1, [r3], #1
 8023414:	e7f9      	b.n	802340a <strncpy+0x1a>
	...

08023418 <_strtol_l.isra.0>:
 8023418:	2b01      	cmp	r3, #1
 802341a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802341e:	d001      	beq.n	8023424 <_strtol_l.isra.0+0xc>
 8023420:	2b24      	cmp	r3, #36	; 0x24
 8023422:	d906      	bls.n	8023432 <_strtol_l.isra.0+0x1a>
 8023424:	f001 fab6 	bl	8024994 <__errno>
 8023428:	2316      	movs	r3, #22
 802342a:	6003      	str	r3, [r0, #0]
 802342c:	2000      	movs	r0, #0
 802342e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023432:	4f3a      	ldr	r7, [pc, #232]	; (802351c <_strtol_l.isra.0+0x104>)
 8023434:	468e      	mov	lr, r1
 8023436:	4676      	mov	r6, lr
 8023438:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802343c:	5de5      	ldrb	r5, [r4, r7]
 802343e:	f015 0508 	ands.w	r5, r5, #8
 8023442:	d1f8      	bne.n	8023436 <_strtol_l.isra.0+0x1e>
 8023444:	2c2d      	cmp	r4, #45	; 0x2d
 8023446:	d134      	bne.n	80234b2 <_strtol_l.isra.0+0x9a>
 8023448:	f89e 4000 	ldrb.w	r4, [lr]
 802344c:	f04f 0801 	mov.w	r8, #1
 8023450:	f106 0e02 	add.w	lr, r6, #2
 8023454:	2b00      	cmp	r3, #0
 8023456:	d05c      	beq.n	8023512 <_strtol_l.isra.0+0xfa>
 8023458:	2b10      	cmp	r3, #16
 802345a:	d10c      	bne.n	8023476 <_strtol_l.isra.0+0x5e>
 802345c:	2c30      	cmp	r4, #48	; 0x30
 802345e:	d10a      	bne.n	8023476 <_strtol_l.isra.0+0x5e>
 8023460:	f89e 4000 	ldrb.w	r4, [lr]
 8023464:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023468:	2c58      	cmp	r4, #88	; 0x58
 802346a:	d14d      	bne.n	8023508 <_strtol_l.isra.0+0xf0>
 802346c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8023470:	2310      	movs	r3, #16
 8023472:	f10e 0e02 	add.w	lr, lr, #2
 8023476:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802347a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802347e:	2600      	movs	r6, #0
 8023480:	fbbc f9f3 	udiv	r9, ip, r3
 8023484:	4635      	mov	r5, r6
 8023486:	fb03 ca19 	mls	sl, r3, r9, ip
 802348a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802348e:	2f09      	cmp	r7, #9
 8023490:	d818      	bhi.n	80234c4 <_strtol_l.isra.0+0xac>
 8023492:	463c      	mov	r4, r7
 8023494:	42a3      	cmp	r3, r4
 8023496:	dd24      	ble.n	80234e2 <_strtol_l.isra.0+0xca>
 8023498:	2e00      	cmp	r6, #0
 802349a:	db1f      	blt.n	80234dc <_strtol_l.isra.0+0xc4>
 802349c:	45a9      	cmp	r9, r5
 802349e:	d31d      	bcc.n	80234dc <_strtol_l.isra.0+0xc4>
 80234a0:	d101      	bne.n	80234a6 <_strtol_l.isra.0+0x8e>
 80234a2:	45a2      	cmp	sl, r4
 80234a4:	db1a      	blt.n	80234dc <_strtol_l.isra.0+0xc4>
 80234a6:	fb05 4503 	mla	r5, r5, r3, r4
 80234aa:	2601      	movs	r6, #1
 80234ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80234b0:	e7eb      	b.n	802348a <_strtol_l.isra.0+0x72>
 80234b2:	2c2b      	cmp	r4, #43	; 0x2b
 80234b4:	bf08      	it	eq
 80234b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80234ba:	46a8      	mov	r8, r5
 80234bc:	bf08      	it	eq
 80234be:	f106 0e02 	addeq.w	lr, r6, #2
 80234c2:	e7c7      	b.n	8023454 <_strtol_l.isra.0+0x3c>
 80234c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80234c8:	2f19      	cmp	r7, #25
 80234ca:	d801      	bhi.n	80234d0 <_strtol_l.isra.0+0xb8>
 80234cc:	3c37      	subs	r4, #55	; 0x37
 80234ce:	e7e1      	b.n	8023494 <_strtol_l.isra.0+0x7c>
 80234d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80234d4:	2f19      	cmp	r7, #25
 80234d6:	d804      	bhi.n	80234e2 <_strtol_l.isra.0+0xca>
 80234d8:	3c57      	subs	r4, #87	; 0x57
 80234da:	e7db      	b.n	8023494 <_strtol_l.isra.0+0x7c>
 80234dc:	f04f 36ff 	mov.w	r6, #4294967295
 80234e0:	e7e4      	b.n	80234ac <_strtol_l.isra.0+0x94>
 80234e2:	2e00      	cmp	r6, #0
 80234e4:	da05      	bge.n	80234f2 <_strtol_l.isra.0+0xda>
 80234e6:	2322      	movs	r3, #34	; 0x22
 80234e8:	6003      	str	r3, [r0, #0]
 80234ea:	4665      	mov	r5, ip
 80234ec:	b942      	cbnz	r2, 8023500 <_strtol_l.isra.0+0xe8>
 80234ee:	4628      	mov	r0, r5
 80234f0:	e79d      	b.n	802342e <_strtol_l.isra.0+0x16>
 80234f2:	f1b8 0f00 	cmp.w	r8, #0
 80234f6:	d000      	beq.n	80234fa <_strtol_l.isra.0+0xe2>
 80234f8:	426d      	negs	r5, r5
 80234fa:	2a00      	cmp	r2, #0
 80234fc:	d0f7      	beq.n	80234ee <_strtol_l.isra.0+0xd6>
 80234fe:	b10e      	cbz	r6, 8023504 <_strtol_l.isra.0+0xec>
 8023500:	f10e 31ff 	add.w	r1, lr, #4294967295
 8023504:	6011      	str	r1, [r2, #0]
 8023506:	e7f2      	b.n	80234ee <_strtol_l.isra.0+0xd6>
 8023508:	2430      	movs	r4, #48	; 0x30
 802350a:	2b00      	cmp	r3, #0
 802350c:	d1b3      	bne.n	8023476 <_strtol_l.isra.0+0x5e>
 802350e:	2308      	movs	r3, #8
 8023510:	e7b1      	b.n	8023476 <_strtol_l.isra.0+0x5e>
 8023512:	2c30      	cmp	r4, #48	; 0x30
 8023514:	d0a4      	beq.n	8023460 <_strtol_l.isra.0+0x48>
 8023516:	230a      	movs	r3, #10
 8023518:	e7ad      	b.n	8023476 <_strtol_l.isra.0+0x5e>
 802351a:	bf00      	nop
 802351c:	08041c69 	.word	0x08041c69

08023520 <_strtol_r>:
 8023520:	f7ff bf7a 	b.w	8023418 <_strtol_l.isra.0>

08023524 <strtol>:
 8023524:	4613      	mov	r3, r2
 8023526:	460a      	mov	r2, r1
 8023528:	4601      	mov	r1, r0
 802352a:	4802      	ldr	r0, [pc, #8]	; (8023534 <strtol+0x10>)
 802352c:	6800      	ldr	r0, [r0, #0]
 802352e:	f7ff bf73 	b.w	8023418 <_strtol_l.isra.0>
 8023532:	bf00      	nop
 8023534:	20000480 	.word	0x20000480

08023538 <_strtoul_l.isra.0>:
 8023538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802353c:	4e3b      	ldr	r6, [pc, #236]	; (802362c <_strtoul_l.isra.0+0xf4>)
 802353e:	4686      	mov	lr, r0
 8023540:	468c      	mov	ip, r1
 8023542:	4660      	mov	r0, ip
 8023544:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8023548:	5da5      	ldrb	r5, [r4, r6]
 802354a:	f015 0508 	ands.w	r5, r5, #8
 802354e:	d1f8      	bne.n	8023542 <_strtoul_l.isra.0+0xa>
 8023550:	2c2d      	cmp	r4, #45	; 0x2d
 8023552:	d134      	bne.n	80235be <_strtoul_l.isra.0+0x86>
 8023554:	f89c 4000 	ldrb.w	r4, [ip]
 8023558:	f04f 0801 	mov.w	r8, #1
 802355c:	f100 0c02 	add.w	ip, r0, #2
 8023560:	2b00      	cmp	r3, #0
 8023562:	d05e      	beq.n	8023622 <_strtoul_l.isra.0+0xea>
 8023564:	2b10      	cmp	r3, #16
 8023566:	d10c      	bne.n	8023582 <_strtoul_l.isra.0+0x4a>
 8023568:	2c30      	cmp	r4, #48	; 0x30
 802356a:	d10a      	bne.n	8023582 <_strtoul_l.isra.0+0x4a>
 802356c:	f89c 0000 	ldrb.w	r0, [ip]
 8023570:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8023574:	2858      	cmp	r0, #88	; 0x58
 8023576:	d14f      	bne.n	8023618 <_strtoul_l.isra.0+0xe0>
 8023578:	f89c 4001 	ldrb.w	r4, [ip, #1]
 802357c:	2310      	movs	r3, #16
 802357e:	f10c 0c02 	add.w	ip, ip, #2
 8023582:	f04f 37ff 	mov.w	r7, #4294967295
 8023586:	2500      	movs	r5, #0
 8023588:	fbb7 f7f3 	udiv	r7, r7, r3
 802358c:	fb03 f907 	mul.w	r9, r3, r7
 8023590:	ea6f 0909 	mvn.w	r9, r9
 8023594:	4628      	mov	r0, r5
 8023596:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802359a:	2e09      	cmp	r6, #9
 802359c:	d818      	bhi.n	80235d0 <_strtoul_l.isra.0+0x98>
 802359e:	4634      	mov	r4, r6
 80235a0:	42a3      	cmp	r3, r4
 80235a2:	dd24      	ble.n	80235ee <_strtoul_l.isra.0+0xb6>
 80235a4:	2d00      	cmp	r5, #0
 80235a6:	db1f      	blt.n	80235e8 <_strtoul_l.isra.0+0xb0>
 80235a8:	4287      	cmp	r7, r0
 80235aa:	d31d      	bcc.n	80235e8 <_strtoul_l.isra.0+0xb0>
 80235ac:	d101      	bne.n	80235b2 <_strtoul_l.isra.0+0x7a>
 80235ae:	45a1      	cmp	r9, r4
 80235b0:	db1a      	blt.n	80235e8 <_strtoul_l.isra.0+0xb0>
 80235b2:	fb00 4003 	mla	r0, r0, r3, r4
 80235b6:	2501      	movs	r5, #1
 80235b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80235bc:	e7eb      	b.n	8023596 <_strtoul_l.isra.0+0x5e>
 80235be:	2c2b      	cmp	r4, #43	; 0x2b
 80235c0:	bf08      	it	eq
 80235c2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80235c6:	46a8      	mov	r8, r5
 80235c8:	bf08      	it	eq
 80235ca:	f100 0c02 	addeq.w	ip, r0, #2
 80235ce:	e7c7      	b.n	8023560 <_strtoul_l.isra.0+0x28>
 80235d0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80235d4:	2e19      	cmp	r6, #25
 80235d6:	d801      	bhi.n	80235dc <_strtoul_l.isra.0+0xa4>
 80235d8:	3c37      	subs	r4, #55	; 0x37
 80235da:	e7e1      	b.n	80235a0 <_strtoul_l.isra.0+0x68>
 80235dc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80235e0:	2e19      	cmp	r6, #25
 80235e2:	d804      	bhi.n	80235ee <_strtoul_l.isra.0+0xb6>
 80235e4:	3c57      	subs	r4, #87	; 0x57
 80235e6:	e7db      	b.n	80235a0 <_strtoul_l.isra.0+0x68>
 80235e8:	f04f 35ff 	mov.w	r5, #4294967295
 80235ec:	e7e4      	b.n	80235b8 <_strtoul_l.isra.0+0x80>
 80235ee:	2d00      	cmp	r5, #0
 80235f0:	da07      	bge.n	8023602 <_strtoul_l.isra.0+0xca>
 80235f2:	2322      	movs	r3, #34	; 0x22
 80235f4:	f8ce 3000 	str.w	r3, [lr]
 80235f8:	f04f 30ff 	mov.w	r0, #4294967295
 80235fc:	b942      	cbnz	r2, 8023610 <_strtoul_l.isra.0+0xd8>
 80235fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023602:	f1b8 0f00 	cmp.w	r8, #0
 8023606:	d000      	beq.n	802360a <_strtoul_l.isra.0+0xd2>
 8023608:	4240      	negs	r0, r0
 802360a:	2a00      	cmp	r2, #0
 802360c:	d0f7      	beq.n	80235fe <_strtoul_l.isra.0+0xc6>
 802360e:	b10d      	cbz	r5, 8023614 <_strtoul_l.isra.0+0xdc>
 8023610:	f10c 31ff 	add.w	r1, ip, #4294967295
 8023614:	6011      	str	r1, [r2, #0]
 8023616:	e7f2      	b.n	80235fe <_strtoul_l.isra.0+0xc6>
 8023618:	2430      	movs	r4, #48	; 0x30
 802361a:	2b00      	cmp	r3, #0
 802361c:	d1b1      	bne.n	8023582 <_strtoul_l.isra.0+0x4a>
 802361e:	2308      	movs	r3, #8
 8023620:	e7af      	b.n	8023582 <_strtoul_l.isra.0+0x4a>
 8023622:	2c30      	cmp	r4, #48	; 0x30
 8023624:	d0a2      	beq.n	802356c <_strtoul_l.isra.0+0x34>
 8023626:	230a      	movs	r3, #10
 8023628:	e7ab      	b.n	8023582 <_strtoul_l.isra.0+0x4a>
 802362a:	bf00      	nop
 802362c:	08041c69 	.word	0x08041c69

08023630 <_strtoul_r>:
 8023630:	f7ff bf82 	b.w	8023538 <_strtoul_l.isra.0>

08023634 <strtoul>:
 8023634:	4613      	mov	r3, r2
 8023636:	460a      	mov	r2, r1
 8023638:	4601      	mov	r1, r0
 802363a:	4802      	ldr	r0, [pc, #8]	; (8023644 <strtoul+0x10>)
 802363c:	6800      	ldr	r0, [r0, #0]
 802363e:	f7ff bf7b 	b.w	8023538 <_strtoul_l.isra.0>
 8023642:	bf00      	nop
 8023644:	20000480 	.word	0x20000480

08023648 <__tzcalc_limits>:
 8023648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802364c:	4680      	mov	r8, r0
 802364e:	f001 fbb3 	bl	8024db8 <__gettzinfo>
 8023652:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8023656:	4598      	cmp	r8, r3
 8023658:	f340 8098 	ble.w	802378c <__tzcalc_limits+0x144>
 802365c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8023660:	4443      	add	r3, r8
 8023662:	109b      	asrs	r3, r3, #2
 8023664:	f240 126d 	movw	r2, #365	; 0x16d
 8023668:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 802366c:	fb02 3505 	mla	r5, r2, r5, r3
 8023670:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8023674:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8023678:	fb93 f3f2 	sdiv	r3, r3, r2
 802367c:	441d      	add	r5, r3
 802367e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023682:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8023686:	fb98 f7f3 	sdiv	r7, r8, r3
 802368a:	fb03 8717 	mls	r7, r3, r7, r8
 802368e:	4442      	add	r2, r8
 8023690:	fab7 fc87 	clz	ip, r7
 8023694:	fbb2 f2f3 	udiv	r2, r2, r3
 8023698:	f008 0303 	and.w	r3, r8, #3
 802369c:	4415      	add	r5, r2
 802369e:	2264      	movs	r2, #100	; 0x64
 80236a0:	f8c0 8004 	str.w	r8, [r0, #4]
 80236a4:	fb98 f6f2 	sdiv	r6, r8, r2
 80236a8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80236ac:	fb02 8616 	mls	r6, r2, r6, r8
 80236b0:	4604      	mov	r4, r0
 80236b2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80236b6:	9300      	str	r3, [sp, #0]
 80236b8:	f04f 0e07 	mov.w	lr, #7
 80236bc:	7a22      	ldrb	r2, [r4, #8]
 80236be:	6963      	ldr	r3, [r4, #20]
 80236c0:	2a4a      	cmp	r2, #74	; 0x4a
 80236c2:	d128      	bne.n	8023716 <__tzcalc_limits+0xce>
 80236c4:	9900      	ldr	r1, [sp, #0]
 80236c6:	18ea      	adds	r2, r5, r3
 80236c8:	b901      	cbnz	r1, 80236cc <__tzcalc_limits+0x84>
 80236ca:	b906      	cbnz	r6, 80236ce <__tzcalc_limits+0x86>
 80236cc:	bb0f      	cbnz	r7, 8023712 <__tzcalc_limits+0xca>
 80236ce:	2b3b      	cmp	r3, #59	; 0x3b
 80236d0:	bfd4      	ite	le
 80236d2:	2300      	movle	r3, #0
 80236d4:	2301      	movgt	r3, #1
 80236d6:	4413      	add	r3, r2
 80236d8:	1e5a      	subs	r2, r3, #1
 80236da:	69a3      	ldr	r3, [r4, #24]
 80236dc:	492c      	ldr	r1, [pc, #176]	; (8023790 <__tzcalc_limits+0x148>)
 80236de:	fb01 3202 	mla	r2, r1, r2, r3
 80236e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80236e4:	4413      	add	r3, r2
 80236e6:	461a      	mov	r2, r3
 80236e8:	17db      	asrs	r3, r3, #31
 80236ea:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80236ee:	3428      	adds	r4, #40	; 0x28
 80236f0:	45a3      	cmp	fp, r4
 80236f2:	d1e3      	bne.n	80236bc <__tzcalc_limits+0x74>
 80236f4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80236f8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80236fc:	4294      	cmp	r4, r2
 80236fe:	eb75 0303 	sbcs.w	r3, r5, r3
 8023702:	bfb4      	ite	lt
 8023704:	2301      	movlt	r3, #1
 8023706:	2300      	movge	r3, #0
 8023708:	6003      	str	r3, [r0, #0]
 802370a:	2001      	movs	r0, #1
 802370c:	b003      	add	sp, #12
 802370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023712:	2300      	movs	r3, #0
 8023714:	e7df      	b.n	80236d6 <__tzcalc_limits+0x8e>
 8023716:	2a44      	cmp	r2, #68	; 0x44
 8023718:	d101      	bne.n	802371e <__tzcalc_limits+0xd6>
 802371a:	18ea      	adds	r2, r5, r3
 802371c:	e7dd      	b.n	80236da <__tzcalc_limits+0x92>
 802371e:	9a00      	ldr	r2, [sp, #0]
 8023720:	bb72      	cbnz	r2, 8023780 <__tzcalc_limits+0x138>
 8023722:	2e00      	cmp	r6, #0
 8023724:	bf0c      	ite	eq
 8023726:	46e0      	moveq	r8, ip
 8023728:	f04f 0801 	movne.w	r8, #1
 802372c:	4919      	ldr	r1, [pc, #100]	; (8023794 <__tzcalc_limits+0x14c>)
 802372e:	68e2      	ldr	r2, [r4, #12]
 8023730:	9201      	str	r2, [sp, #4]
 8023732:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8023736:	fb0a 1808 	mla	r8, sl, r8, r1
 802373a:	462a      	mov	r2, r5
 802373c:	f04f 0900 	mov.w	r9, #0
 8023740:	f1a8 0804 	sub.w	r8, r8, #4
 8023744:	9901      	ldr	r1, [sp, #4]
 8023746:	f109 0901 	add.w	r9, r9, #1
 802374a:	4549      	cmp	r1, r9
 802374c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8023750:	dc18      	bgt.n	8023784 <__tzcalc_limits+0x13c>
 8023752:	f102 0804 	add.w	r8, r2, #4
 8023756:	fb98 f9fe 	sdiv	r9, r8, lr
 802375a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 802375e:	eba8 0909 	sub.w	r9, r8, r9
 8023762:	ebb3 0909 	subs.w	r9, r3, r9
 8023766:	6923      	ldr	r3, [r4, #16]
 8023768:	f103 33ff 	add.w	r3, r3, #4294967295
 802376c:	bf48      	it	mi
 802376e:	f109 0907 	addmi.w	r9, r9, #7
 8023772:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8023776:	444b      	add	r3, r9
 8023778:	4553      	cmp	r3, sl
 802377a:	da05      	bge.n	8023788 <__tzcalc_limits+0x140>
 802377c:	441a      	add	r2, r3
 802377e:	e7ac      	b.n	80236da <__tzcalc_limits+0x92>
 8023780:	46e0      	mov	r8, ip
 8023782:	e7d3      	b.n	802372c <__tzcalc_limits+0xe4>
 8023784:	4452      	add	r2, sl
 8023786:	e7dd      	b.n	8023744 <__tzcalc_limits+0xfc>
 8023788:	3b07      	subs	r3, #7
 802378a:	e7f5      	b.n	8023778 <__tzcalc_limits+0x130>
 802378c:	2000      	movs	r0, #0
 802378e:	e7bd      	b.n	802370c <__tzcalc_limits+0xc4>
 8023790:	00015180 	.word	0x00015180
 8023794:	08041e48 	.word	0x08041e48

08023798 <__tz_lock>:
 8023798:	4801      	ldr	r0, [pc, #4]	; (80237a0 <__tz_lock+0x8>)
 802379a:	f001 bbca 	b.w	8024f32 <__retarget_lock_acquire>
 802379e:	bf00      	nop
 80237a0:	2002facb 	.word	0x2002facb

080237a4 <__tz_unlock>:
 80237a4:	4801      	ldr	r0, [pc, #4]	; (80237ac <__tz_unlock+0x8>)
 80237a6:	f001 bbc6 	b.w	8024f36 <__retarget_lock_release>
 80237aa:	bf00      	nop
 80237ac:	2002facb 	.word	0x2002facb

080237b0 <_tzset_unlocked>:
 80237b0:	4b01      	ldr	r3, [pc, #4]	; (80237b8 <_tzset_unlocked+0x8>)
 80237b2:	6818      	ldr	r0, [r3, #0]
 80237b4:	f000 b802 	b.w	80237bc <_tzset_unlocked_r>
 80237b8:	20000480 	.word	0x20000480

080237bc <_tzset_unlocked_r>:
 80237bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237c0:	b08d      	sub	sp, #52	; 0x34
 80237c2:	4607      	mov	r7, r0
 80237c4:	f001 faf8 	bl	8024db8 <__gettzinfo>
 80237c8:	49ae      	ldr	r1, [pc, #696]	; (8023a84 <_tzset_unlocked_r+0x2c8>)
 80237ca:	4eaf      	ldr	r6, [pc, #700]	; (8023a88 <_tzset_unlocked_r+0x2cc>)
 80237cc:	4605      	mov	r5, r0
 80237ce:	4638      	mov	r0, r7
 80237d0:	f001 faea 	bl	8024da8 <_getenv_r>
 80237d4:	4604      	mov	r4, r0
 80237d6:	b970      	cbnz	r0, 80237f6 <_tzset_unlocked_r+0x3a>
 80237d8:	4bac      	ldr	r3, [pc, #688]	; (8023a8c <_tzset_unlocked_r+0x2d0>)
 80237da:	4aad      	ldr	r2, [pc, #692]	; (8023a90 <_tzset_unlocked_r+0x2d4>)
 80237dc:	6018      	str	r0, [r3, #0]
 80237de:	4bad      	ldr	r3, [pc, #692]	; (8023a94 <_tzset_unlocked_r+0x2d8>)
 80237e0:	6018      	str	r0, [r3, #0]
 80237e2:	4bad      	ldr	r3, [pc, #692]	; (8023a98 <_tzset_unlocked_r+0x2dc>)
 80237e4:	6830      	ldr	r0, [r6, #0]
 80237e6:	e9c3 2200 	strd	r2, r2, [r3]
 80237ea:	f7fd febb 	bl	8021564 <free>
 80237ee:	6034      	str	r4, [r6, #0]
 80237f0:	b00d      	add	sp, #52	; 0x34
 80237f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237f6:	6831      	ldr	r1, [r6, #0]
 80237f8:	2900      	cmp	r1, #0
 80237fa:	d15f      	bne.n	80238bc <_tzset_unlocked_r+0x100>
 80237fc:	6830      	ldr	r0, [r6, #0]
 80237fe:	f7fd feb1 	bl	8021564 <free>
 8023802:	4620      	mov	r0, r4
 8023804:	f7dc fd26 	bl	8000254 <strlen>
 8023808:	1c41      	adds	r1, r0, #1
 802380a:	4638      	mov	r0, r7
 802380c:	f7fe f9be 	bl	8021b8c <_malloc_r>
 8023810:	6030      	str	r0, [r6, #0]
 8023812:	2800      	cmp	r0, #0
 8023814:	d157      	bne.n	80238c6 <_tzset_unlocked_r+0x10a>
 8023816:	7823      	ldrb	r3, [r4, #0]
 8023818:	4aa0      	ldr	r2, [pc, #640]	; (8023a9c <_tzset_unlocked_r+0x2e0>)
 802381a:	49a1      	ldr	r1, [pc, #644]	; (8023aa0 <_tzset_unlocked_r+0x2e4>)
 802381c:	2b3a      	cmp	r3, #58	; 0x3a
 802381e:	bf08      	it	eq
 8023820:	3401      	addeq	r4, #1
 8023822:	ae0a      	add	r6, sp, #40	; 0x28
 8023824:	4633      	mov	r3, r6
 8023826:	4620      	mov	r0, r4
 8023828:	f7fe ffe4 	bl	80227f4 <siscanf>
 802382c:	2800      	cmp	r0, #0
 802382e:	dddf      	ble.n	80237f0 <_tzset_unlocked_r+0x34>
 8023830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023832:	18e7      	adds	r7, r4, r3
 8023834:	5ce3      	ldrb	r3, [r4, r3]
 8023836:	2b2d      	cmp	r3, #45	; 0x2d
 8023838:	d149      	bne.n	80238ce <_tzset_unlocked_r+0x112>
 802383a:	3701      	adds	r7, #1
 802383c:	f04f 34ff 	mov.w	r4, #4294967295
 8023840:	f10d 0a20 	add.w	sl, sp, #32
 8023844:	f10d 0b1e 	add.w	fp, sp, #30
 8023848:	f04f 0800 	mov.w	r8, #0
 802384c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8023850:	4994      	ldr	r1, [pc, #592]	; (8023aa4 <_tzset_unlocked_r+0x2e8>)
 8023852:	9603      	str	r6, [sp, #12]
 8023854:	f8cd b000 	str.w	fp, [sp]
 8023858:	4633      	mov	r3, r6
 802385a:	aa07      	add	r2, sp, #28
 802385c:	4638      	mov	r0, r7
 802385e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8023862:	f8ad 8020 	strh.w	r8, [sp, #32]
 8023866:	f7fe ffc5 	bl	80227f4 <siscanf>
 802386a:	4540      	cmp	r0, r8
 802386c:	ddc0      	ble.n	80237f0 <_tzset_unlocked_r+0x34>
 802386e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8023872:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023876:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8023ab0 <_tzset_unlocked_r+0x2f4>
 802387a:	213c      	movs	r1, #60	; 0x3c
 802387c:	fb01 2203 	mla	r2, r1, r3, r2
 8023880:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8023884:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8023888:	fb01 2303 	mla	r3, r1, r3, r2
 802388c:	435c      	muls	r4, r3
 802388e:	62ac      	str	r4, [r5, #40]	; 0x28
 8023890:	4c81      	ldr	r4, [pc, #516]	; (8023a98 <_tzset_unlocked_r+0x2dc>)
 8023892:	4b82      	ldr	r3, [pc, #520]	; (8023a9c <_tzset_unlocked_r+0x2e0>)
 8023894:	6023      	str	r3, [r4, #0]
 8023896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023898:	4981      	ldr	r1, [pc, #516]	; (8023aa0 <_tzset_unlocked_r+0x2e4>)
 802389a:	441f      	add	r7, r3
 802389c:	464a      	mov	r2, r9
 802389e:	4633      	mov	r3, r6
 80238a0:	4638      	mov	r0, r7
 80238a2:	f7fe ffa7 	bl	80227f4 <siscanf>
 80238a6:	4540      	cmp	r0, r8
 80238a8:	dc16      	bgt.n	80238d8 <_tzset_unlocked_r+0x11c>
 80238aa:	6823      	ldr	r3, [r4, #0]
 80238ac:	6063      	str	r3, [r4, #4]
 80238ae:	4b77      	ldr	r3, [pc, #476]	; (8023a8c <_tzset_unlocked_r+0x2d0>)
 80238b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80238b2:	601a      	str	r2, [r3, #0]
 80238b4:	4b77      	ldr	r3, [pc, #476]	; (8023a94 <_tzset_unlocked_r+0x2d8>)
 80238b6:	f8c3 8000 	str.w	r8, [r3]
 80238ba:	e799      	b.n	80237f0 <_tzset_unlocked_r+0x34>
 80238bc:	f7dc fcc0 	bl	8000240 <strcmp>
 80238c0:	2800      	cmp	r0, #0
 80238c2:	d19b      	bne.n	80237fc <_tzset_unlocked_r+0x40>
 80238c4:	e794      	b.n	80237f0 <_tzset_unlocked_r+0x34>
 80238c6:	4621      	mov	r1, r4
 80238c8:	f7ff f81b 	bl	8022902 <strcpy>
 80238cc:	e7a3      	b.n	8023816 <_tzset_unlocked_r+0x5a>
 80238ce:	2b2b      	cmp	r3, #43	; 0x2b
 80238d0:	bf08      	it	eq
 80238d2:	3701      	addeq	r7, #1
 80238d4:	2401      	movs	r4, #1
 80238d6:	e7b3      	b.n	8023840 <_tzset_unlocked_r+0x84>
 80238d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80238da:	f8c4 9004 	str.w	r9, [r4, #4]
 80238de:	18fc      	adds	r4, r7, r3
 80238e0:	5cfb      	ldrb	r3, [r7, r3]
 80238e2:	2b2d      	cmp	r3, #45	; 0x2d
 80238e4:	f040 808b 	bne.w	80239fe <_tzset_unlocked_r+0x242>
 80238e8:	3401      	adds	r4, #1
 80238ea:	f04f 37ff 	mov.w	r7, #4294967295
 80238ee:	2300      	movs	r3, #0
 80238f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80238f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80238f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80238fc:	930a      	str	r3, [sp, #40]	; 0x28
 80238fe:	e9cd a602 	strd	sl, r6, [sp, #8]
 8023902:	e9cd b600 	strd	fp, r6, [sp]
 8023906:	4967      	ldr	r1, [pc, #412]	; (8023aa4 <_tzset_unlocked_r+0x2e8>)
 8023908:	4633      	mov	r3, r6
 802390a:	aa07      	add	r2, sp, #28
 802390c:	4620      	mov	r0, r4
 802390e:	f7fe ff71 	bl	80227f4 <siscanf>
 8023912:	2800      	cmp	r0, #0
 8023914:	dc78      	bgt.n	8023a08 <_tzset_unlocked_r+0x24c>
 8023916:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8023918:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 802391c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802391e:	652f      	str	r7, [r5, #80]	; 0x50
 8023920:	441c      	add	r4, r3
 8023922:	462f      	mov	r7, r5
 8023924:	f04f 0900 	mov.w	r9, #0
 8023928:	7823      	ldrb	r3, [r4, #0]
 802392a:	2b2c      	cmp	r3, #44	; 0x2c
 802392c:	bf08      	it	eq
 802392e:	3401      	addeq	r4, #1
 8023930:	f894 8000 	ldrb.w	r8, [r4]
 8023934:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8023938:	d178      	bne.n	8023a2c <_tzset_unlocked_r+0x270>
 802393a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802393e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8023942:	ab09      	add	r3, sp, #36	; 0x24
 8023944:	9300      	str	r3, [sp, #0]
 8023946:	4958      	ldr	r1, [pc, #352]	; (8023aa8 <_tzset_unlocked_r+0x2ec>)
 8023948:	9603      	str	r6, [sp, #12]
 802394a:	4633      	mov	r3, r6
 802394c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8023950:	4620      	mov	r0, r4
 8023952:	f7fe ff4f 	bl	80227f4 <siscanf>
 8023956:	2803      	cmp	r0, #3
 8023958:	f47f af4a 	bne.w	80237f0 <_tzset_unlocked_r+0x34>
 802395c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8023960:	1e4b      	subs	r3, r1, #1
 8023962:	2b0b      	cmp	r3, #11
 8023964:	f63f af44 	bhi.w	80237f0 <_tzset_unlocked_r+0x34>
 8023968:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802396c:	1e53      	subs	r3, r2, #1
 802396e:	2b04      	cmp	r3, #4
 8023970:	f63f af3e 	bhi.w	80237f0 <_tzset_unlocked_r+0x34>
 8023974:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8023978:	2b06      	cmp	r3, #6
 802397a:	f63f af39 	bhi.w	80237f0 <_tzset_unlocked_r+0x34>
 802397e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8023982:	f887 8008 	strb.w	r8, [r7, #8]
 8023986:	617b      	str	r3, [r7, #20]
 8023988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802398a:	eb04 0803 	add.w	r8, r4, r3
 802398e:	2302      	movs	r3, #2
 8023990:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023994:	2300      	movs	r3, #0
 8023996:	f8ad 301e 	strh.w	r3, [sp, #30]
 802399a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802399e:	930a      	str	r3, [sp, #40]	; 0x28
 80239a0:	f898 3000 	ldrb.w	r3, [r8]
 80239a4:	2b2f      	cmp	r3, #47	; 0x2f
 80239a6:	d109      	bne.n	80239bc <_tzset_unlocked_r+0x200>
 80239a8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80239ac:	e9cd b600 	strd	fp, r6, [sp]
 80239b0:	493e      	ldr	r1, [pc, #248]	; (8023aac <_tzset_unlocked_r+0x2f0>)
 80239b2:	4633      	mov	r3, r6
 80239b4:	aa07      	add	r2, sp, #28
 80239b6:	4640      	mov	r0, r8
 80239b8:	f7fe ff1c 	bl	80227f4 <siscanf>
 80239bc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80239c0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80239c4:	213c      	movs	r1, #60	; 0x3c
 80239c6:	fb01 2203 	mla	r2, r1, r3, r2
 80239ca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80239ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80239d2:	fb01 2303 	mla	r3, r1, r3, r2
 80239d6:	61bb      	str	r3, [r7, #24]
 80239d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80239da:	3728      	adds	r7, #40	; 0x28
 80239dc:	4444      	add	r4, r8
 80239de:	f1b9 0f00 	cmp.w	r9, #0
 80239e2:	d020      	beq.n	8023a26 <_tzset_unlocked_r+0x26a>
 80239e4:	6868      	ldr	r0, [r5, #4]
 80239e6:	f7ff fe2f 	bl	8023648 <__tzcalc_limits>
 80239ea:	4b28      	ldr	r3, [pc, #160]	; (8023a8c <_tzset_unlocked_r+0x2d0>)
 80239ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80239ee:	601a      	str	r2, [r3, #0]
 80239f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80239f2:	1a9b      	subs	r3, r3, r2
 80239f4:	4a27      	ldr	r2, [pc, #156]	; (8023a94 <_tzset_unlocked_r+0x2d8>)
 80239f6:	bf18      	it	ne
 80239f8:	2301      	movne	r3, #1
 80239fa:	6013      	str	r3, [r2, #0]
 80239fc:	e6f8      	b.n	80237f0 <_tzset_unlocked_r+0x34>
 80239fe:	2b2b      	cmp	r3, #43	; 0x2b
 8023a00:	bf08      	it	eq
 8023a02:	3401      	addeq	r4, #1
 8023a04:	2701      	movs	r7, #1
 8023a06:	e772      	b.n	80238ee <_tzset_unlocked_r+0x132>
 8023a08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8023a0c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023a10:	213c      	movs	r1, #60	; 0x3c
 8023a12:	fb01 2203 	mla	r2, r1, r3, r2
 8023a16:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8023a1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8023a1e:	fb01 2303 	mla	r3, r1, r3, r2
 8023a22:	435f      	muls	r7, r3
 8023a24:	e77a      	b.n	802391c <_tzset_unlocked_r+0x160>
 8023a26:	f04f 0901 	mov.w	r9, #1
 8023a2a:	e77d      	b.n	8023928 <_tzset_unlocked_r+0x16c>
 8023a2c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8023a30:	bf06      	itte	eq
 8023a32:	3401      	addeq	r4, #1
 8023a34:	4643      	moveq	r3, r8
 8023a36:	2344      	movne	r3, #68	; 0x44
 8023a38:	220a      	movs	r2, #10
 8023a3a:	a90b      	add	r1, sp, #44	; 0x2c
 8023a3c:	4620      	mov	r0, r4
 8023a3e:	9305      	str	r3, [sp, #20]
 8023a40:	f7ff fdf8 	bl	8023634 <strtoul>
 8023a44:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8023a48:	9b05      	ldr	r3, [sp, #20]
 8023a4a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8023a4e:	45a0      	cmp	r8, r4
 8023a50:	d114      	bne.n	8023a7c <_tzset_unlocked_r+0x2c0>
 8023a52:	234d      	movs	r3, #77	; 0x4d
 8023a54:	f1b9 0f00 	cmp.w	r9, #0
 8023a58:	d107      	bne.n	8023a6a <_tzset_unlocked_r+0x2ae>
 8023a5a:	722b      	strb	r3, [r5, #8]
 8023a5c:	2103      	movs	r1, #3
 8023a5e:	2302      	movs	r3, #2
 8023a60:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8023a64:	f8c5 9014 	str.w	r9, [r5, #20]
 8023a68:	e791      	b.n	802398e <_tzset_unlocked_r+0x1d2>
 8023a6a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8023a6e:	220b      	movs	r2, #11
 8023a70:	2301      	movs	r3, #1
 8023a72:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8023a76:	2300      	movs	r3, #0
 8023a78:	63eb      	str	r3, [r5, #60]	; 0x3c
 8023a7a:	e788      	b.n	802398e <_tzset_unlocked_r+0x1d2>
 8023a7c:	b280      	uxth	r0, r0
 8023a7e:	723b      	strb	r3, [r7, #8]
 8023a80:	6178      	str	r0, [r7, #20]
 8023a82:	e784      	b.n	802398e <_tzset_unlocked_r+0x1d2>
 8023a84:	080421bc 	.word	0x080421bc
 8023a88:	2001ad70 	.word	0x2001ad70
 8023a8c:	2001ad78 	.word	0x2001ad78
 8023a90:	080421bf 	.word	0x080421bf
 8023a94:	2001ad74 	.word	0x2001ad74
 8023a98:	200004e4 	.word	0x200004e4
 8023a9c:	2001ad63 	.word	0x2001ad63
 8023aa0:	080421c3 	.word	0x080421c3
 8023aa4:	080421e6 	.word	0x080421e6
 8023aa8:	080421d2 	.word	0x080421d2
 8023aac:	080421e5 	.word	0x080421e5
 8023ab0:	2001ad58 	.word	0x2001ad58

08023ab4 <__swbuf_r>:
 8023ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ab6:	460e      	mov	r6, r1
 8023ab8:	4614      	mov	r4, r2
 8023aba:	4605      	mov	r5, r0
 8023abc:	b118      	cbz	r0, 8023ac6 <__swbuf_r+0x12>
 8023abe:	6983      	ldr	r3, [r0, #24]
 8023ac0:	b90b      	cbnz	r3, 8023ac6 <__swbuf_r+0x12>
 8023ac2:	f001 f887 	bl	8024bd4 <__sinit>
 8023ac6:	4b21      	ldr	r3, [pc, #132]	; (8023b4c <__swbuf_r+0x98>)
 8023ac8:	429c      	cmp	r4, r3
 8023aca:	d12b      	bne.n	8023b24 <__swbuf_r+0x70>
 8023acc:	686c      	ldr	r4, [r5, #4]
 8023ace:	69a3      	ldr	r3, [r4, #24]
 8023ad0:	60a3      	str	r3, [r4, #8]
 8023ad2:	89a3      	ldrh	r3, [r4, #12]
 8023ad4:	071a      	lsls	r2, r3, #28
 8023ad6:	d52f      	bpl.n	8023b38 <__swbuf_r+0x84>
 8023ad8:	6923      	ldr	r3, [r4, #16]
 8023ada:	b36b      	cbz	r3, 8023b38 <__swbuf_r+0x84>
 8023adc:	6923      	ldr	r3, [r4, #16]
 8023ade:	6820      	ldr	r0, [r4, #0]
 8023ae0:	1ac0      	subs	r0, r0, r3
 8023ae2:	6963      	ldr	r3, [r4, #20]
 8023ae4:	b2f6      	uxtb	r6, r6
 8023ae6:	4283      	cmp	r3, r0
 8023ae8:	4637      	mov	r7, r6
 8023aea:	dc04      	bgt.n	8023af6 <__swbuf_r+0x42>
 8023aec:	4621      	mov	r1, r4
 8023aee:	4628      	mov	r0, r5
 8023af0:	f000 ffdc 	bl	8024aac <_fflush_r>
 8023af4:	bb30      	cbnz	r0, 8023b44 <__swbuf_r+0x90>
 8023af6:	68a3      	ldr	r3, [r4, #8]
 8023af8:	3b01      	subs	r3, #1
 8023afa:	60a3      	str	r3, [r4, #8]
 8023afc:	6823      	ldr	r3, [r4, #0]
 8023afe:	1c5a      	adds	r2, r3, #1
 8023b00:	6022      	str	r2, [r4, #0]
 8023b02:	701e      	strb	r6, [r3, #0]
 8023b04:	6963      	ldr	r3, [r4, #20]
 8023b06:	3001      	adds	r0, #1
 8023b08:	4283      	cmp	r3, r0
 8023b0a:	d004      	beq.n	8023b16 <__swbuf_r+0x62>
 8023b0c:	89a3      	ldrh	r3, [r4, #12]
 8023b0e:	07db      	lsls	r3, r3, #31
 8023b10:	d506      	bpl.n	8023b20 <__swbuf_r+0x6c>
 8023b12:	2e0a      	cmp	r6, #10
 8023b14:	d104      	bne.n	8023b20 <__swbuf_r+0x6c>
 8023b16:	4621      	mov	r1, r4
 8023b18:	4628      	mov	r0, r5
 8023b1a:	f000 ffc7 	bl	8024aac <_fflush_r>
 8023b1e:	b988      	cbnz	r0, 8023b44 <__swbuf_r+0x90>
 8023b20:	4638      	mov	r0, r7
 8023b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023b24:	4b0a      	ldr	r3, [pc, #40]	; (8023b50 <__swbuf_r+0x9c>)
 8023b26:	429c      	cmp	r4, r3
 8023b28:	d101      	bne.n	8023b2e <__swbuf_r+0x7a>
 8023b2a:	68ac      	ldr	r4, [r5, #8]
 8023b2c:	e7cf      	b.n	8023ace <__swbuf_r+0x1a>
 8023b2e:	4b09      	ldr	r3, [pc, #36]	; (8023b54 <__swbuf_r+0xa0>)
 8023b30:	429c      	cmp	r4, r3
 8023b32:	bf08      	it	eq
 8023b34:	68ec      	ldreq	r4, [r5, #12]
 8023b36:	e7ca      	b.n	8023ace <__swbuf_r+0x1a>
 8023b38:	4621      	mov	r1, r4
 8023b3a:	4628      	mov	r0, r5
 8023b3c:	f000 f81e 	bl	8023b7c <__swsetup_r>
 8023b40:	2800      	cmp	r0, #0
 8023b42:	d0cb      	beq.n	8023adc <__swbuf_r+0x28>
 8023b44:	f04f 37ff 	mov.w	r7, #4294967295
 8023b48:	e7ea      	b.n	8023b20 <__swbuf_r+0x6c>
 8023b4a:	bf00      	nop
 8023b4c:	0804238c 	.word	0x0804238c
 8023b50:	080423ac 	.word	0x080423ac
 8023b54:	0804236c 	.word	0x0804236c

08023b58 <_write_r>:
 8023b58:	b538      	push	{r3, r4, r5, lr}
 8023b5a:	4d07      	ldr	r5, [pc, #28]	; (8023b78 <_write_r+0x20>)
 8023b5c:	4604      	mov	r4, r0
 8023b5e:	4608      	mov	r0, r1
 8023b60:	4611      	mov	r1, r2
 8023b62:	2200      	movs	r2, #0
 8023b64:	602a      	str	r2, [r5, #0]
 8023b66:	461a      	mov	r2, r3
 8023b68:	f7de ff02 	bl	8002970 <_write>
 8023b6c:	1c43      	adds	r3, r0, #1
 8023b6e:	d102      	bne.n	8023b76 <_write_r+0x1e>
 8023b70:	682b      	ldr	r3, [r5, #0]
 8023b72:	b103      	cbz	r3, 8023b76 <_write_r+0x1e>
 8023b74:	6023      	str	r3, [r4, #0]
 8023b76:	bd38      	pop	{r3, r4, r5, pc}
 8023b78:	2002e1e8 	.word	0x2002e1e8

08023b7c <__swsetup_r>:
 8023b7c:	4b32      	ldr	r3, [pc, #200]	; (8023c48 <__swsetup_r+0xcc>)
 8023b7e:	b570      	push	{r4, r5, r6, lr}
 8023b80:	681d      	ldr	r5, [r3, #0]
 8023b82:	4606      	mov	r6, r0
 8023b84:	460c      	mov	r4, r1
 8023b86:	b125      	cbz	r5, 8023b92 <__swsetup_r+0x16>
 8023b88:	69ab      	ldr	r3, [r5, #24]
 8023b8a:	b913      	cbnz	r3, 8023b92 <__swsetup_r+0x16>
 8023b8c:	4628      	mov	r0, r5
 8023b8e:	f001 f821 	bl	8024bd4 <__sinit>
 8023b92:	4b2e      	ldr	r3, [pc, #184]	; (8023c4c <__swsetup_r+0xd0>)
 8023b94:	429c      	cmp	r4, r3
 8023b96:	d10f      	bne.n	8023bb8 <__swsetup_r+0x3c>
 8023b98:	686c      	ldr	r4, [r5, #4]
 8023b9a:	89a3      	ldrh	r3, [r4, #12]
 8023b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023ba0:	0719      	lsls	r1, r3, #28
 8023ba2:	d42c      	bmi.n	8023bfe <__swsetup_r+0x82>
 8023ba4:	06dd      	lsls	r5, r3, #27
 8023ba6:	d411      	bmi.n	8023bcc <__swsetup_r+0x50>
 8023ba8:	2309      	movs	r3, #9
 8023baa:	6033      	str	r3, [r6, #0]
 8023bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023bb0:	81a3      	strh	r3, [r4, #12]
 8023bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8023bb6:	e03e      	b.n	8023c36 <__swsetup_r+0xba>
 8023bb8:	4b25      	ldr	r3, [pc, #148]	; (8023c50 <__swsetup_r+0xd4>)
 8023bba:	429c      	cmp	r4, r3
 8023bbc:	d101      	bne.n	8023bc2 <__swsetup_r+0x46>
 8023bbe:	68ac      	ldr	r4, [r5, #8]
 8023bc0:	e7eb      	b.n	8023b9a <__swsetup_r+0x1e>
 8023bc2:	4b24      	ldr	r3, [pc, #144]	; (8023c54 <__swsetup_r+0xd8>)
 8023bc4:	429c      	cmp	r4, r3
 8023bc6:	bf08      	it	eq
 8023bc8:	68ec      	ldreq	r4, [r5, #12]
 8023bca:	e7e6      	b.n	8023b9a <__swsetup_r+0x1e>
 8023bcc:	0758      	lsls	r0, r3, #29
 8023bce:	d512      	bpl.n	8023bf6 <__swsetup_r+0x7a>
 8023bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023bd2:	b141      	cbz	r1, 8023be6 <__swsetup_r+0x6a>
 8023bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023bd8:	4299      	cmp	r1, r3
 8023bda:	d002      	beq.n	8023be2 <__swsetup_r+0x66>
 8023bdc:	4630      	mov	r0, r6
 8023bde:	f7fd ff85 	bl	8021aec <_free_r>
 8023be2:	2300      	movs	r3, #0
 8023be4:	6363      	str	r3, [r4, #52]	; 0x34
 8023be6:	89a3      	ldrh	r3, [r4, #12]
 8023be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023bec:	81a3      	strh	r3, [r4, #12]
 8023bee:	2300      	movs	r3, #0
 8023bf0:	6063      	str	r3, [r4, #4]
 8023bf2:	6923      	ldr	r3, [r4, #16]
 8023bf4:	6023      	str	r3, [r4, #0]
 8023bf6:	89a3      	ldrh	r3, [r4, #12]
 8023bf8:	f043 0308 	orr.w	r3, r3, #8
 8023bfc:	81a3      	strh	r3, [r4, #12]
 8023bfe:	6923      	ldr	r3, [r4, #16]
 8023c00:	b94b      	cbnz	r3, 8023c16 <__swsetup_r+0x9a>
 8023c02:	89a3      	ldrh	r3, [r4, #12]
 8023c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023c0c:	d003      	beq.n	8023c16 <__swsetup_r+0x9a>
 8023c0e:	4621      	mov	r1, r4
 8023c10:	4630      	mov	r0, r6
 8023c12:	f001 f9c9 	bl	8024fa8 <__smakebuf_r>
 8023c16:	89a0      	ldrh	r0, [r4, #12]
 8023c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023c1c:	f010 0301 	ands.w	r3, r0, #1
 8023c20:	d00a      	beq.n	8023c38 <__swsetup_r+0xbc>
 8023c22:	2300      	movs	r3, #0
 8023c24:	60a3      	str	r3, [r4, #8]
 8023c26:	6963      	ldr	r3, [r4, #20]
 8023c28:	425b      	negs	r3, r3
 8023c2a:	61a3      	str	r3, [r4, #24]
 8023c2c:	6923      	ldr	r3, [r4, #16]
 8023c2e:	b943      	cbnz	r3, 8023c42 <__swsetup_r+0xc6>
 8023c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023c34:	d1ba      	bne.n	8023bac <__swsetup_r+0x30>
 8023c36:	bd70      	pop	{r4, r5, r6, pc}
 8023c38:	0781      	lsls	r1, r0, #30
 8023c3a:	bf58      	it	pl
 8023c3c:	6963      	ldrpl	r3, [r4, #20]
 8023c3e:	60a3      	str	r3, [r4, #8]
 8023c40:	e7f4      	b.n	8023c2c <__swsetup_r+0xb0>
 8023c42:	2000      	movs	r0, #0
 8023c44:	e7f7      	b.n	8023c36 <__swsetup_r+0xba>
 8023c46:	bf00      	nop
 8023c48:	20000480 	.word	0x20000480
 8023c4c:	0804238c 	.word	0x0804238c
 8023c50:	080423ac 	.word	0x080423ac
 8023c54:	0804236c 	.word	0x0804236c

08023c58 <abs>:
 8023c58:	2800      	cmp	r0, #0
 8023c5a:	bfb8      	it	lt
 8023c5c:	4240      	neglt	r0, r0
 8023c5e:	4770      	bx	lr

08023c60 <asctime>:
 8023c60:	4b0d      	ldr	r3, [pc, #52]	; (8023c98 <asctime+0x38>)
 8023c62:	b570      	push	{r4, r5, r6, lr}
 8023c64:	681d      	ldr	r5, [r3, #0]
 8023c66:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8023c68:	4604      	mov	r4, r0
 8023c6a:	b976      	cbnz	r6, 8023c8a <asctime+0x2a>
 8023c6c:	201a      	movs	r0, #26
 8023c6e:	f7fd fc71 	bl	8021554 <malloc>
 8023c72:	4602      	mov	r2, r0
 8023c74:	6428      	str	r0, [r5, #64]	; 0x40
 8023c76:	b920      	cbnz	r0, 8023c82 <asctime+0x22>
 8023c78:	4b08      	ldr	r3, [pc, #32]	; (8023c9c <asctime+0x3c>)
 8023c7a:	4809      	ldr	r0, [pc, #36]	; (8023ca0 <asctime+0x40>)
 8023c7c:	2137      	movs	r1, #55	; 0x37
 8023c7e:	f000 f837 	bl	8023cf0 <__assert_func>
 8023c82:	221a      	movs	r2, #26
 8023c84:	4631      	mov	r1, r6
 8023c86:	f7fd fcab 	bl	80215e0 <memset>
 8023c8a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8023c8c:	4620      	mov	r0, r4
 8023c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023c92:	f000 b807 	b.w	8023ca4 <asctime_r>
 8023c96:	bf00      	nop
 8023c98:	20000480 	.word	0x20000480
 8023c9c:	08041d70 	.word	0x08041d70
 8023ca0:	080421f8 	.word	0x080421f8

08023ca4 <asctime_r>:
 8023ca4:	b510      	push	{r4, lr}
 8023ca6:	460c      	mov	r4, r1
 8023ca8:	6941      	ldr	r1, [r0, #20]
 8023caa:	6903      	ldr	r3, [r0, #16]
 8023cac:	6982      	ldr	r2, [r0, #24]
 8023cae:	b086      	sub	sp, #24
 8023cb0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8023cb4:	9104      	str	r1, [sp, #16]
 8023cb6:	6801      	ldr	r1, [r0, #0]
 8023cb8:	9103      	str	r1, [sp, #12]
 8023cba:	6841      	ldr	r1, [r0, #4]
 8023cbc:	9102      	str	r1, [sp, #8]
 8023cbe:	6881      	ldr	r1, [r0, #8]
 8023cc0:	9101      	str	r1, [sp, #4]
 8023cc2:	68c1      	ldr	r1, [r0, #12]
 8023cc4:	9100      	str	r1, [sp, #0]
 8023cc6:	4907      	ldr	r1, [pc, #28]	; (8023ce4 <asctime_r+0x40>)
 8023cc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ccc:	440b      	add	r3, r1
 8023cce:	4906      	ldr	r1, [pc, #24]	; (8023ce8 <asctime_r+0x44>)
 8023cd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023cd4:	440a      	add	r2, r1
 8023cd6:	4620      	mov	r0, r4
 8023cd8:	4904      	ldr	r1, [pc, #16]	; (8023cec <asctime_r+0x48>)
 8023cda:	f7fe fd6b 	bl	80227b4 <siprintf>
 8023cde:	4620      	mov	r0, r4
 8023ce0:	b006      	add	sp, #24
 8023ce2:	bd10      	pop	{r4, pc}
 8023ce4:	0804228d 	.word	0x0804228d
 8023ce8:	08042278 	.word	0x08042278
 8023cec:	08042258 	.word	0x08042258

08023cf0 <__assert_func>:
 8023cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023cf2:	4614      	mov	r4, r2
 8023cf4:	461a      	mov	r2, r3
 8023cf6:	4b09      	ldr	r3, [pc, #36]	; (8023d1c <__assert_func+0x2c>)
 8023cf8:	681b      	ldr	r3, [r3, #0]
 8023cfa:	4605      	mov	r5, r0
 8023cfc:	68d8      	ldr	r0, [r3, #12]
 8023cfe:	b14c      	cbz	r4, 8023d14 <__assert_func+0x24>
 8023d00:	4b07      	ldr	r3, [pc, #28]	; (8023d20 <__assert_func+0x30>)
 8023d02:	9100      	str	r1, [sp, #0]
 8023d04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023d08:	4906      	ldr	r1, [pc, #24]	; (8023d24 <__assert_func+0x34>)
 8023d0a:	462b      	mov	r3, r5
 8023d0c:	f000 ffe0 	bl	8024cd0 <fiprintf>
 8023d10:	f002 fc09 	bl	8026526 <abort>
 8023d14:	4b04      	ldr	r3, [pc, #16]	; (8023d28 <__assert_func+0x38>)
 8023d16:	461c      	mov	r4, r3
 8023d18:	e7f3      	b.n	8023d02 <__assert_func+0x12>
 8023d1a:	bf00      	nop
 8023d1c:	20000480 	.word	0x20000480
 8023d20:	080422b1 	.word	0x080422b1
 8023d24:	080422be 	.word	0x080422be
 8023d28:	08042277 	.word	0x08042277

08023d2c <_close_r>:
 8023d2c:	b538      	push	{r3, r4, r5, lr}
 8023d2e:	4d06      	ldr	r5, [pc, #24]	; (8023d48 <_close_r+0x1c>)
 8023d30:	2300      	movs	r3, #0
 8023d32:	4604      	mov	r4, r0
 8023d34:	4608      	mov	r0, r1
 8023d36:	602b      	str	r3, [r5, #0]
 8023d38:	f7e1 fe0a 	bl	8005950 <_close>
 8023d3c:	1c43      	adds	r3, r0, #1
 8023d3e:	d102      	bne.n	8023d46 <_close_r+0x1a>
 8023d40:	682b      	ldr	r3, [r5, #0]
 8023d42:	b103      	cbz	r3, 8023d46 <_close_r+0x1a>
 8023d44:	6023      	str	r3, [r4, #0]
 8023d46:	bd38      	pop	{r3, r4, r5, pc}
 8023d48:	2002e1e8 	.word	0x2002e1e8

08023d4c <div>:
 8023d4c:	2900      	cmp	r1, #0
 8023d4e:	b510      	push	{r4, lr}
 8023d50:	fb91 f4f2 	sdiv	r4, r1, r2
 8023d54:	fb02 1314 	mls	r3, r2, r4, r1
 8023d58:	db06      	blt.n	8023d68 <div+0x1c>
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	da01      	bge.n	8023d62 <div+0x16>
 8023d5e:	3401      	adds	r4, #1
 8023d60:	1a9b      	subs	r3, r3, r2
 8023d62:	e9c0 4300 	strd	r4, r3, [r0]
 8023d66:	bd10      	pop	{r4, pc}
 8023d68:	2b00      	cmp	r3, #0
 8023d6a:	bfc4      	itt	gt
 8023d6c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8023d70:	189b      	addgt	r3, r3, r2
 8023d72:	e7f6      	b.n	8023d62 <div+0x16>

08023d74 <quorem>:
 8023d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d78:	6903      	ldr	r3, [r0, #16]
 8023d7a:	690c      	ldr	r4, [r1, #16]
 8023d7c:	42a3      	cmp	r3, r4
 8023d7e:	4607      	mov	r7, r0
 8023d80:	f2c0 8081 	blt.w	8023e86 <quorem+0x112>
 8023d84:	3c01      	subs	r4, #1
 8023d86:	f101 0814 	add.w	r8, r1, #20
 8023d8a:	f100 0514 	add.w	r5, r0, #20
 8023d8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023d92:	9301      	str	r3, [sp, #4]
 8023d94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8023d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023d9c:	3301      	adds	r3, #1
 8023d9e:	429a      	cmp	r2, r3
 8023da0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8023da4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8023da8:	fbb2 f6f3 	udiv	r6, r2, r3
 8023dac:	d331      	bcc.n	8023e12 <quorem+0x9e>
 8023dae:	f04f 0e00 	mov.w	lr, #0
 8023db2:	4640      	mov	r0, r8
 8023db4:	46ac      	mov	ip, r5
 8023db6:	46f2      	mov	sl, lr
 8023db8:	f850 2b04 	ldr.w	r2, [r0], #4
 8023dbc:	b293      	uxth	r3, r2
 8023dbe:	fb06 e303 	mla	r3, r6, r3, lr
 8023dc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8023dc6:	b29b      	uxth	r3, r3
 8023dc8:	ebaa 0303 	sub.w	r3, sl, r3
 8023dcc:	0c12      	lsrs	r2, r2, #16
 8023dce:	f8dc a000 	ldr.w	sl, [ip]
 8023dd2:	fb06 e202 	mla	r2, r6, r2, lr
 8023dd6:	fa13 f38a 	uxtah	r3, r3, sl
 8023dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8023dde:	fa1f fa82 	uxth.w	sl, r2
 8023de2:	f8dc 2000 	ldr.w	r2, [ip]
 8023de6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8023dea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8023dee:	b29b      	uxth	r3, r3
 8023df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023df4:	4581      	cmp	r9, r0
 8023df6:	f84c 3b04 	str.w	r3, [ip], #4
 8023dfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8023dfe:	d2db      	bcs.n	8023db8 <quorem+0x44>
 8023e00:	f855 300b 	ldr.w	r3, [r5, fp]
 8023e04:	b92b      	cbnz	r3, 8023e12 <quorem+0x9e>
 8023e06:	9b01      	ldr	r3, [sp, #4]
 8023e08:	3b04      	subs	r3, #4
 8023e0a:	429d      	cmp	r5, r3
 8023e0c:	461a      	mov	r2, r3
 8023e0e:	d32e      	bcc.n	8023e6e <quorem+0xfa>
 8023e10:	613c      	str	r4, [r7, #16]
 8023e12:	4638      	mov	r0, r7
 8023e14:	f001 fba4 	bl	8025560 <__mcmp>
 8023e18:	2800      	cmp	r0, #0
 8023e1a:	db24      	blt.n	8023e66 <quorem+0xf2>
 8023e1c:	3601      	adds	r6, #1
 8023e1e:	4628      	mov	r0, r5
 8023e20:	f04f 0c00 	mov.w	ip, #0
 8023e24:	f858 2b04 	ldr.w	r2, [r8], #4
 8023e28:	f8d0 e000 	ldr.w	lr, [r0]
 8023e2c:	b293      	uxth	r3, r2
 8023e2e:	ebac 0303 	sub.w	r3, ip, r3
 8023e32:	0c12      	lsrs	r2, r2, #16
 8023e34:	fa13 f38e 	uxtah	r3, r3, lr
 8023e38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8023e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8023e40:	b29b      	uxth	r3, r3
 8023e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023e46:	45c1      	cmp	r9, r8
 8023e48:	f840 3b04 	str.w	r3, [r0], #4
 8023e4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8023e50:	d2e8      	bcs.n	8023e24 <quorem+0xb0>
 8023e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023e5a:	b922      	cbnz	r2, 8023e66 <quorem+0xf2>
 8023e5c:	3b04      	subs	r3, #4
 8023e5e:	429d      	cmp	r5, r3
 8023e60:	461a      	mov	r2, r3
 8023e62:	d30a      	bcc.n	8023e7a <quorem+0x106>
 8023e64:	613c      	str	r4, [r7, #16]
 8023e66:	4630      	mov	r0, r6
 8023e68:	b003      	add	sp, #12
 8023e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e6e:	6812      	ldr	r2, [r2, #0]
 8023e70:	3b04      	subs	r3, #4
 8023e72:	2a00      	cmp	r2, #0
 8023e74:	d1cc      	bne.n	8023e10 <quorem+0x9c>
 8023e76:	3c01      	subs	r4, #1
 8023e78:	e7c7      	b.n	8023e0a <quorem+0x96>
 8023e7a:	6812      	ldr	r2, [r2, #0]
 8023e7c:	3b04      	subs	r3, #4
 8023e7e:	2a00      	cmp	r2, #0
 8023e80:	d1f0      	bne.n	8023e64 <quorem+0xf0>
 8023e82:	3c01      	subs	r4, #1
 8023e84:	e7eb      	b.n	8023e5e <quorem+0xea>
 8023e86:	2000      	movs	r0, #0
 8023e88:	e7ee      	b.n	8023e68 <quorem+0xf4>
 8023e8a:	0000      	movs	r0, r0
 8023e8c:	0000      	movs	r0, r0
	...

08023e90 <_dtoa_r>:
 8023e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e94:	ec59 8b10 	vmov	r8, r9, d0
 8023e98:	b095      	sub	sp, #84	; 0x54
 8023e9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8023e9c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8023e9e:	9107      	str	r1, [sp, #28]
 8023ea0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8023ea4:	4606      	mov	r6, r0
 8023ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8023ea8:	9310      	str	r3, [sp, #64]	; 0x40
 8023eaa:	b975      	cbnz	r5, 8023eca <_dtoa_r+0x3a>
 8023eac:	2010      	movs	r0, #16
 8023eae:	f7fd fb51 	bl	8021554 <malloc>
 8023eb2:	4602      	mov	r2, r0
 8023eb4:	6270      	str	r0, [r6, #36]	; 0x24
 8023eb6:	b920      	cbnz	r0, 8023ec2 <_dtoa_r+0x32>
 8023eb8:	4bab      	ldr	r3, [pc, #684]	; (8024168 <_dtoa_r+0x2d8>)
 8023eba:	21ea      	movs	r1, #234	; 0xea
 8023ebc:	48ab      	ldr	r0, [pc, #684]	; (802416c <_dtoa_r+0x2dc>)
 8023ebe:	f7ff ff17 	bl	8023cf0 <__assert_func>
 8023ec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8023ec6:	6005      	str	r5, [r0, #0]
 8023ec8:	60c5      	str	r5, [r0, #12]
 8023eca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8023ecc:	6819      	ldr	r1, [r3, #0]
 8023ece:	b151      	cbz	r1, 8023ee6 <_dtoa_r+0x56>
 8023ed0:	685a      	ldr	r2, [r3, #4]
 8023ed2:	604a      	str	r2, [r1, #4]
 8023ed4:	2301      	movs	r3, #1
 8023ed6:	4093      	lsls	r3, r2
 8023ed8:	608b      	str	r3, [r1, #8]
 8023eda:	4630      	mov	r0, r6
 8023edc:	f001 f902 	bl	80250e4 <_Bfree>
 8023ee0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8023ee2:	2200      	movs	r2, #0
 8023ee4:	601a      	str	r2, [r3, #0]
 8023ee6:	f1b9 0300 	subs.w	r3, r9, #0
 8023eea:	bfbb      	ittet	lt
 8023eec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8023ef0:	9303      	strlt	r3, [sp, #12]
 8023ef2:	2300      	movge	r3, #0
 8023ef4:	2201      	movlt	r2, #1
 8023ef6:	bfac      	ite	ge
 8023ef8:	6023      	strge	r3, [r4, #0]
 8023efa:	6022      	strlt	r2, [r4, #0]
 8023efc:	4b9c      	ldr	r3, [pc, #624]	; (8024170 <_dtoa_r+0x2e0>)
 8023efe:	9c03      	ldr	r4, [sp, #12]
 8023f00:	43a3      	bics	r3, r4
 8023f02:	d11a      	bne.n	8023f3a <_dtoa_r+0xaa>
 8023f04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023f06:	f242 730f 	movw	r3, #9999	; 0x270f
 8023f0a:	6013      	str	r3, [r2, #0]
 8023f0c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8023f10:	ea53 0308 	orrs.w	r3, r3, r8
 8023f14:	f000 8512 	beq.w	802493c <_dtoa_r+0xaac>
 8023f18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023f1a:	b953      	cbnz	r3, 8023f32 <_dtoa_r+0xa2>
 8023f1c:	4b95      	ldr	r3, [pc, #596]	; (8024174 <_dtoa_r+0x2e4>)
 8023f1e:	e01f      	b.n	8023f60 <_dtoa_r+0xd0>
 8023f20:	4b95      	ldr	r3, [pc, #596]	; (8024178 <_dtoa_r+0x2e8>)
 8023f22:	9300      	str	r3, [sp, #0]
 8023f24:	3308      	adds	r3, #8
 8023f26:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023f28:	6013      	str	r3, [r2, #0]
 8023f2a:	9800      	ldr	r0, [sp, #0]
 8023f2c:	b015      	add	sp, #84	; 0x54
 8023f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f32:	4b90      	ldr	r3, [pc, #576]	; (8024174 <_dtoa_r+0x2e4>)
 8023f34:	9300      	str	r3, [sp, #0]
 8023f36:	3303      	adds	r3, #3
 8023f38:	e7f5      	b.n	8023f26 <_dtoa_r+0x96>
 8023f3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023f3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f46:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8023f4a:	d10b      	bne.n	8023f64 <_dtoa_r+0xd4>
 8023f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023f4e:	2301      	movs	r3, #1
 8023f50:	6013      	str	r3, [r2, #0]
 8023f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023f54:	2b00      	cmp	r3, #0
 8023f56:	f000 84ee 	beq.w	8024936 <_dtoa_r+0xaa6>
 8023f5a:	4888      	ldr	r0, [pc, #544]	; (802417c <_dtoa_r+0x2ec>)
 8023f5c:	6018      	str	r0, [r3, #0]
 8023f5e:	1e43      	subs	r3, r0, #1
 8023f60:	9300      	str	r3, [sp, #0]
 8023f62:	e7e2      	b.n	8023f2a <_dtoa_r+0x9a>
 8023f64:	a913      	add	r1, sp, #76	; 0x4c
 8023f66:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8023f6a:	aa12      	add	r2, sp, #72	; 0x48
 8023f6c:	4630      	mov	r0, r6
 8023f6e:	f001 fb9b 	bl	80256a8 <__d2b>
 8023f72:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8023f76:	4605      	mov	r5, r0
 8023f78:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023f7a:	2900      	cmp	r1, #0
 8023f7c:	d047      	beq.n	802400e <_dtoa_r+0x17e>
 8023f7e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023f80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8023f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023f88:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8023f8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023f90:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8023f94:	2400      	movs	r4, #0
 8023f96:	ec43 2b16 	vmov	d6, r2, r3
 8023f9a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8023f9e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8024150 <_dtoa_r+0x2c0>
 8023fa2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8023fa6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8024158 <_dtoa_r+0x2c8>
 8023faa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8023fae:	eeb0 7b46 	vmov.f64	d7, d6
 8023fb2:	ee06 1a90 	vmov	s13, r1
 8023fb6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8023fba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8024160 <_dtoa_r+0x2d0>
 8023fbe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8023fc2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8023fc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8023fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fce:	ee16 ba90 	vmov	fp, s13
 8023fd2:	9411      	str	r4, [sp, #68]	; 0x44
 8023fd4:	d508      	bpl.n	8023fe8 <_dtoa_r+0x158>
 8023fd6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8023fda:	eeb4 6b47 	vcmp.f64	d6, d7
 8023fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fe2:	bf18      	it	ne
 8023fe4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8023fe8:	f1bb 0f16 	cmp.w	fp, #22
 8023fec:	d832      	bhi.n	8024054 <_dtoa_r+0x1c4>
 8023fee:	4b64      	ldr	r3, [pc, #400]	; (8024180 <_dtoa_r+0x2f0>)
 8023ff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8023ff4:	ed93 7b00 	vldr	d7, [r3]
 8023ff8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8023ffc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024004:	d501      	bpl.n	802400a <_dtoa_r+0x17a>
 8024006:	f10b 3bff 	add.w	fp, fp, #4294967295
 802400a:	2300      	movs	r3, #0
 802400c:	e023      	b.n	8024056 <_dtoa_r+0x1c6>
 802400e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8024010:	4401      	add	r1, r0
 8024012:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8024016:	2b20      	cmp	r3, #32
 8024018:	bfc3      	ittte	gt
 802401a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802401e:	fa04 f303 	lslgt.w	r3, r4, r3
 8024022:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8024026:	f1c3 0320 	rsble	r3, r3, #32
 802402a:	bfc6      	itte	gt
 802402c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8024030:	ea43 0308 	orrgt.w	r3, r3, r8
 8024034:	fa08 f303 	lslle.w	r3, r8, r3
 8024038:	ee07 3a90 	vmov	s15, r3
 802403c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8024040:	3901      	subs	r1, #1
 8024042:	ed8d 7b00 	vstr	d7, [sp]
 8024046:	9c01      	ldr	r4, [sp, #4]
 8024048:	e9dd 2300 	ldrd	r2, r3, [sp]
 802404c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8024050:	2401      	movs	r4, #1
 8024052:	e7a0      	b.n	8023f96 <_dtoa_r+0x106>
 8024054:	2301      	movs	r3, #1
 8024056:	930f      	str	r3, [sp, #60]	; 0x3c
 8024058:	1a43      	subs	r3, r0, r1
 802405a:	1e5a      	subs	r2, r3, #1
 802405c:	bf45      	ittet	mi
 802405e:	f1c3 0301 	rsbmi	r3, r3, #1
 8024062:	9305      	strmi	r3, [sp, #20]
 8024064:	2300      	movpl	r3, #0
 8024066:	2300      	movmi	r3, #0
 8024068:	9206      	str	r2, [sp, #24]
 802406a:	bf54      	ite	pl
 802406c:	9305      	strpl	r3, [sp, #20]
 802406e:	9306      	strmi	r3, [sp, #24]
 8024070:	f1bb 0f00 	cmp.w	fp, #0
 8024074:	db18      	blt.n	80240a8 <_dtoa_r+0x218>
 8024076:	9b06      	ldr	r3, [sp, #24]
 8024078:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 802407c:	445b      	add	r3, fp
 802407e:	9306      	str	r3, [sp, #24]
 8024080:	2300      	movs	r3, #0
 8024082:	9a07      	ldr	r2, [sp, #28]
 8024084:	2a09      	cmp	r2, #9
 8024086:	d849      	bhi.n	802411c <_dtoa_r+0x28c>
 8024088:	2a05      	cmp	r2, #5
 802408a:	bfc4      	itt	gt
 802408c:	3a04      	subgt	r2, #4
 802408e:	9207      	strgt	r2, [sp, #28]
 8024090:	9a07      	ldr	r2, [sp, #28]
 8024092:	f1a2 0202 	sub.w	r2, r2, #2
 8024096:	bfcc      	ite	gt
 8024098:	2400      	movgt	r4, #0
 802409a:	2401      	movle	r4, #1
 802409c:	2a03      	cmp	r2, #3
 802409e:	d848      	bhi.n	8024132 <_dtoa_r+0x2a2>
 80240a0:	e8df f002 	tbb	[pc, r2]
 80240a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80240a8:	9b05      	ldr	r3, [sp, #20]
 80240aa:	2200      	movs	r2, #0
 80240ac:	eba3 030b 	sub.w	r3, r3, fp
 80240b0:	9305      	str	r3, [sp, #20]
 80240b2:	920e      	str	r2, [sp, #56]	; 0x38
 80240b4:	f1cb 0300 	rsb	r3, fp, #0
 80240b8:	e7e3      	b.n	8024082 <_dtoa_r+0x1f2>
 80240ba:	2200      	movs	r2, #0
 80240bc:	9208      	str	r2, [sp, #32]
 80240be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80240c0:	2a00      	cmp	r2, #0
 80240c2:	dc39      	bgt.n	8024138 <_dtoa_r+0x2a8>
 80240c4:	f04f 0a01 	mov.w	sl, #1
 80240c8:	46d1      	mov	r9, sl
 80240ca:	4652      	mov	r2, sl
 80240cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80240d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80240d2:	2100      	movs	r1, #0
 80240d4:	6079      	str	r1, [r7, #4]
 80240d6:	2004      	movs	r0, #4
 80240d8:	f100 0c14 	add.w	ip, r0, #20
 80240dc:	4594      	cmp	ip, r2
 80240de:	6879      	ldr	r1, [r7, #4]
 80240e0:	d92f      	bls.n	8024142 <_dtoa_r+0x2b2>
 80240e2:	4630      	mov	r0, r6
 80240e4:	930c      	str	r3, [sp, #48]	; 0x30
 80240e6:	f000 ffbd 	bl	8025064 <_Balloc>
 80240ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80240ec:	9000      	str	r0, [sp, #0]
 80240ee:	4602      	mov	r2, r0
 80240f0:	2800      	cmp	r0, #0
 80240f2:	d149      	bne.n	8024188 <_dtoa_r+0x2f8>
 80240f4:	4b23      	ldr	r3, [pc, #140]	; (8024184 <_dtoa_r+0x2f4>)
 80240f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80240fa:	e6df      	b.n	8023ebc <_dtoa_r+0x2c>
 80240fc:	2201      	movs	r2, #1
 80240fe:	e7dd      	b.n	80240bc <_dtoa_r+0x22c>
 8024100:	2200      	movs	r2, #0
 8024102:	9208      	str	r2, [sp, #32]
 8024104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024106:	eb0b 0a02 	add.w	sl, fp, r2
 802410a:	f10a 0901 	add.w	r9, sl, #1
 802410e:	464a      	mov	r2, r9
 8024110:	2a01      	cmp	r2, #1
 8024112:	bfb8      	it	lt
 8024114:	2201      	movlt	r2, #1
 8024116:	e7db      	b.n	80240d0 <_dtoa_r+0x240>
 8024118:	2201      	movs	r2, #1
 802411a:	e7f2      	b.n	8024102 <_dtoa_r+0x272>
 802411c:	2401      	movs	r4, #1
 802411e:	2200      	movs	r2, #0
 8024120:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8024124:	f04f 3aff 	mov.w	sl, #4294967295
 8024128:	2100      	movs	r1, #0
 802412a:	46d1      	mov	r9, sl
 802412c:	2212      	movs	r2, #18
 802412e:	9109      	str	r1, [sp, #36]	; 0x24
 8024130:	e7ce      	b.n	80240d0 <_dtoa_r+0x240>
 8024132:	2201      	movs	r2, #1
 8024134:	9208      	str	r2, [sp, #32]
 8024136:	e7f5      	b.n	8024124 <_dtoa_r+0x294>
 8024138:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 802413c:	46d1      	mov	r9, sl
 802413e:	4652      	mov	r2, sl
 8024140:	e7c6      	b.n	80240d0 <_dtoa_r+0x240>
 8024142:	3101      	adds	r1, #1
 8024144:	6079      	str	r1, [r7, #4]
 8024146:	0040      	lsls	r0, r0, #1
 8024148:	e7c6      	b.n	80240d8 <_dtoa_r+0x248>
 802414a:	bf00      	nop
 802414c:	f3af 8000 	nop.w
 8024150:	636f4361 	.word	0x636f4361
 8024154:	3fd287a7 	.word	0x3fd287a7
 8024158:	8b60c8b3 	.word	0x8b60c8b3
 802415c:	3fc68a28 	.word	0x3fc68a28
 8024160:	509f79fb 	.word	0x509f79fb
 8024164:	3fd34413 	.word	0x3fd34413
 8024168:	08041d70 	.word	0x08041d70
 802416c:	080422fa 	.word	0x080422fa
 8024170:	7ff00000 	.word	0x7ff00000
 8024174:	080422f6 	.word	0x080422f6
 8024178:	080422ed 	.word	0x080422ed
 802417c:	0804254a 	.word	0x0804254a
 8024180:	08042460 	.word	0x08042460
 8024184:	08042359 	.word	0x08042359
 8024188:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802418a:	9900      	ldr	r1, [sp, #0]
 802418c:	6011      	str	r1, [r2, #0]
 802418e:	f1b9 0f0e 	cmp.w	r9, #14
 8024192:	d872      	bhi.n	802427a <_dtoa_r+0x3ea>
 8024194:	2c00      	cmp	r4, #0
 8024196:	d070      	beq.n	802427a <_dtoa_r+0x3ea>
 8024198:	f1bb 0f00 	cmp.w	fp, #0
 802419c:	f340 80a6 	ble.w	80242ec <_dtoa_r+0x45c>
 80241a0:	49ca      	ldr	r1, [pc, #808]	; (80244cc <_dtoa_r+0x63c>)
 80241a2:	f00b 020f 	and.w	r2, fp, #15
 80241a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80241aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80241ae:	ed92 7b00 	vldr	d7, [r2]
 80241b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80241b6:	f000 808d 	beq.w	80242d4 <_dtoa_r+0x444>
 80241ba:	4ac5      	ldr	r2, [pc, #788]	; (80244d0 <_dtoa_r+0x640>)
 80241bc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80241c0:	ed92 6b08 	vldr	d6, [r2, #32]
 80241c4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80241c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80241cc:	f001 010f 	and.w	r1, r1, #15
 80241d0:	2203      	movs	r2, #3
 80241d2:	48bf      	ldr	r0, [pc, #764]	; (80244d0 <_dtoa_r+0x640>)
 80241d4:	2900      	cmp	r1, #0
 80241d6:	d17f      	bne.n	80242d8 <_dtoa_r+0x448>
 80241d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80241dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80241e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80241e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80241e6:	2900      	cmp	r1, #0
 80241e8:	f000 80b2 	beq.w	8024350 <_dtoa_r+0x4c0>
 80241ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80241f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80241f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80241f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80241fc:	f140 80a8 	bpl.w	8024350 <_dtoa_r+0x4c0>
 8024200:	f1b9 0f00 	cmp.w	r9, #0
 8024204:	f000 80a4 	beq.w	8024350 <_dtoa_r+0x4c0>
 8024208:	f1ba 0f00 	cmp.w	sl, #0
 802420c:	dd31      	ble.n	8024272 <_dtoa_r+0x3e2>
 802420e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8024212:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024216:	ed8d 7b02 	vstr	d7, [sp, #8]
 802421a:	f10b 37ff 	add.w	r7, fp, #4294967295
 802421e:	3201      	adds	r2, #1
 8024220:	4650      	mov	r0, sl
 8024222:	ed9d 6b02 	vldr	d6, [sp, #8]
 8024226:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802422a:	ee07 2a90 	vmov	s15, r2
 802422e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8024232:	eea7 5b06 	vfma.f64	d5, d7, d6
 8024236:	ed8d 5b02 	vstr	d5, [sp, #8]
 802423a:	9c03      	ldr	r4, [sp, #12]
 802423c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8024240:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8024244:	2800      	cmp	r0, #0
 8024246:	f040 8086 	bne.w	8024356 <_dtoa_r+0x4c6>
 802424a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802424e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8024252:	ec42 1b17 	vmov	d7, r1, r2
 8024256:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802425e:	f300 8272 	bgt.w	8024746 <_dtoa_r+0x8b6>
 8024262:	eeb1 7b47 	vneg.f64	d7, d7
 8024266:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802426e:	f100 8267 	bmi.w	8024740 <_dtoa_r+0x8b0>
 8024272:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8024276:	e9cd 1202 	strd	r1, r2, [sp, #8]
 802427a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802427c:	2a00      	cmp	r2, #0
 802427e:	f2c0 8129 	blt.w	80244d4 <_dtoa_r+0x644>
 8024282:	f1bb 0f0e 	cmp.w	fp, #14
 8024286:	f300 8125 	bgt.w	80244d4 <_dtoa_r+0x644>
 802428a:	4b90      	ldr	r3, [pc, #576]	; (80244cc <_dtoa_r+0x63c>)
 802428c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8024290:	ed93 6b00 	vldr	d6, [r3]
 8024294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024296:	2b00      	cmp	r3, #0
 8024298:	f280 80c3 	bge.w	8024422 <_dtoa_r+0x592>
 802429c:	f1b9 0f00 	cmp.w	r9, #0
 80242a0:	f300 80bf 	bgt.w	8024422 <_dtoa_r+0x592>
 80242a4:	f040 824c 	bne.w	8024740 <_dtoa_r+0x8b0>
 80242a8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80242ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80242b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80242b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80242b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242bc:	464c      	mov	r4, r9
 80242be:	464f      	mov	r7, r9
 80242c0:	f280 8222 	bge.w	8024708 <_dtoa_r+0x878>
 80242c4:	f8dd 8000 	ldr.w	r8, [sp]
 80242c8:	2331      	movs	r3, #49	; 0x31
 80242ca:	f808 3b01 	strb.w	r3, [r8], #1
 80242ce:	f10b 0b01 	add.w	fp, fp, #1
 80242d2:	e21e      	b.n	8024712 <_dtoa_r+0x882>
 80242d4:	2202      	movs	r2, #2
 80242d6:	e77c      	b.n	80241d2 <_dtoa_r+0x342>
 80242d8:	07cc      	lsls	r4, r1, #31
 80242da:	d504      	bpl.n	80242e6 <_dtoa_r+0x456>
 80242dc:	ed90 6b00 	vldr	d6, [r0]
 80242e0:	3201      	adds	r2, #1
 80242e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80242e6:	1049      	asrs	r1, r1, #1
 80242e8:	3008      	adds	r0, #8
 80242ea:	e773      	b.n	80241d4 <_dtoa_r+0x344>
 80242ec:	d02e      	beq.n	802434c <_dtoa_r+0x4bc>
 80242ee:	f1cb 0100 	rsb	r1, fp, #0
 80242f2:	4a76      	ldr	r2, [pc, #472]	; (80244cc <_dtoa_r+0x63c>)
 80242f4:	f001 000f 	and.w	r0, r1, #15
 80242f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80242fc:	ed92 7b00 	vldr	d7, [r2]
 8024300:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8024304:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024308:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802430c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8024310:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8024314:	486e      	ldr	r0, [pc, #440]	; (80244d0 <_dtoa_r+0x640>)
 8024316:	1109      	asrs	r1, r1, #4
 8024318:	2400      	movs	r4, #0
 802431a:	2202      	movs	r2, #2
 802431c:	b939      	cbnz	r1, 802432e <_dtoa_r+0x49e>
 802431e:	2c00      	cmp	r4, #0
 8024320:	f43f af60 	beq.w	80241e4 <_dtoa_r+0x354>
 8024324:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802432c:	e75a      	b.n	80241e4 <_dtoa_r+0x354>
 802432e:	07cf      	lsls	r7, r1, #31
 8024330:	d509      	bpl.n	8024346 <_dtoa_r+0x4b6>
 8024332:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8024336:	ed90 7b00 	vldr	d7, [r0]
 802433a:	ee26 7b07 	vmul.f64	d7, d6, d7
 802433e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8024342:	3201      	adds	r2, #1
 8024344:	2401      	movs	r4, #1
 8024346:	1049      	asrs	r1, r1, #1
 8024348:	3008      	adds	r0, #8
 802434a:	e7e7      	b.n	802431c <_dtoa_r+0x48c>
 802434c:	2202      	movs	r2, #2
 802434e:	e749      	b.n	80241e4 <_dtoa_r+0x354>
 8024350:	465f      	mov	r7, fp
 8024352:	4648      	mov	r0, r9
 8024354:	e765      	b.n	8024222 <_dtoa_r+0x392>
 8024356:	ec42 1b17 	vmov	d7, r1, r2
 802435a:	4a5c      	ldr	r2, [pc, #368]	; (80244cc <_dtoa_r+0x63c>)
 802435c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8024360:	ed12 4b02 	vldr	d4, [r2, #-8]
 8024364:	9a00      	ldr	r2, [sp, #0]
 8024366:	1814      	adds	r4, r2, r0
 8024368:	9a08      	ldr	r2, [sp, #32]
 802436a:	b352      	cbz	r2, 80243c2 <_dtoa_r+0x532>
 802436c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8024370:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8024374:	f8dd 8000 	ldr.w	r8, [sp]
 8024378:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802437c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8024380:	ee35 7b47 	vsub.f64	d7, d5, d7
 8024384:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8024388:	ee14 2a90 	vmov	r2, s9
 802438c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8024390:	3230      	adds	r2, #48	; 0x30
 8024392:	ee36 6b45 	vsub.f64	d6, d6, d5
 8024396:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802439e:	f808 2b01 	strb.w	r2, [r8], #1
 80243a2:	d439      	bmi.n	8024418 <_dtoa_r+0x588>
 80243a4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80243a8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80243ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243b0:	d472      	bmi.n	8024498 <_dtoa_r+0x608>
 80243b2:	45a0      	cmp	r8, r4
 80243b4:	f43f af5d 	beq.w	8024272 <_dtoa_r+0x3e2>
 80243b8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80243bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80243c0:	e7e0      	b.n	8024384 <_dtoa_r+0x4f4>
 80243c2:	f8dd 8000 	ldr.w	r8, [sp]
 80243c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80243ca:	4621      	mov	r1, r4
 80243cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80243d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80243d4:	ee14 2a90 	vmov	r2, s9
 80243d8:	3230      	adds	r2, #48	; 0x30
 80243da:	f808 2b01 	strb.w	r2, [r8], #1
 80243de:	45a0      	cmp	r8, r4
 80243e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80243e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80243e8:	d118      	bne.n	802441c <_dtoa_r+0x58c>
 80243ea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80243ee:	ee37 4b05 	vadd.f64	d4, d7, d5
 80243f2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80243f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243fa:	dc4d      	bgt.n	8024498 <_dtoa_r+0x608>
 80243fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8024400:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024408:	f57f af33 	bpl.w	8024272 <_dtoa_r+0x3e2>
 802440c:	4688      	mov	r8, r1
 802440e:	3901      	subs	r1, #1
 8024410:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8024414:	2b30      	cmp	r3, #48	; 0x30
 8024416:	d0f9      	beq.n	802440c <_dtoa_r+0x57c>
 8024418:	46bb      	mov	fp, r7
 802441a:	e02a      	b.n	8024472 <_dtoa_r+0x5e2>
 802441c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8024420:	e7d6      	b.n	80243d0 <_dtoa_r+0x540>
 8024422:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024426:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802442a:	f8dd 8000 	ldr.w	r8, [sp]
 802442e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8024432:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8024436:	ee15 3a10 	vmov	r3, s10
 802443a:	3330      	adds	r3, #48	; 0x30
 802443c:	f808 3b01 	strb.w	r3, [r8], #1
 8024440:	9b00      	ldr	r3, [sp, #0]
 8024442:	eba8 0303 	sub.w	r3, r8, r3
 8024446:	4599      	cmp	r9, r3
 8024448:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 802444c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8024450:	d133      	bne.n	80244ba <_dtoa_r+0x62a>
 8024452:	ee37 7b07 	vadd.f64	d7, d7, d7
 8024456:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802445e:	dc1a      	bgt.n	8024496 <_dtoa_r+0x606>
 8024460:	eeb4 7b46 	vcmp.f64	d7, d6
 8024464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024468:	d103      	bne.n	8024472 <_dtoa_r+0x5e2>
 802446a:	ee15 3a10 	vmov	r3, s10
 802446e:	07d9      	lsls	r1, r3, #31
 8024470:	d411      	bmi.n	8024496 <_dtoa_r+0x606>
 8024472:	4629      	mov	r1, r5
 8024474:	4630      	mov	r0, r6
 8024476:	f000 fe35 	bl	80250e4 <_Bfree>
 802447a:	2300      	movs	r3, #0
 802447c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802447e:	f888 3000 	strb.w	r3, [r8]
 8024482:	f10b 0301 	add.w	r3, fp, #1
 8024486:	6013      	str	r3, [r2, #0]
 8024488:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802448a:	2b00      	cmp	r3, #0
 802448c:	f43f ad4d 	beq.w	8023f2a <_dtoa_r+0x9a>
 8024490:	f8c3 8000 	str.w	r8, [r3]
 8024494:	e549      	b.n	8023f2a <_dtoa_r+0x9a>
 8024496:	465f      	mov	r7, fp
 8024498:	4643      	mov	r3, r8
 802449a:	4698      	mov	r8, r3
 802449c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80244a0:	2a39      	cmp	r2, #57	; 0x39
 80244a2:	d106      	bne.n	80244b2 <_dtoa_r+0x622>
 80244a4:	9a00      	ldr	r2, [sp, #0]
 80244a6:	429a      	cmp	r2, r3
 80244a8:	d1f7      	bne.n	802449a <_dtoa_r+0x60a>
 80244aa:	9900      	ldr	r1, [sp, #0]
 80244ac:	2230      	movs	r2, #48	; 0x30
 80244ae:	3701      	adds	r7, #1
 80244b0:	700a      	strb	r2, [r1, #0]
 80244b2:	781a      	ldrb	r2, [r3, #0]
 80244b4:	3201      	adds	r2, #1
 80244b6:	701a      	strb	r2, [r3, #0]
 80244b8:	e7ae      	b.n	8024418 <_dtoa_r+0x588>
 80244ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80244be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80244c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244c6:	d1b2      	bne.n	802442e <_dtoa_r+0x59e>
 80244c8:	e7d3      	b.n	8024472 <_dtoa_r+0x5e2>
 80244ca:	bf00      	nop
 80244cc:	08042460 	.word	0x08042460
 80244d0:	08042438 	.word	0x08042438
 80244d4:	9908      	ldr	r1, [sp, #32]
 80244d6:	2900      	cmp	r1, #0
 80244d8:	f000 80d1 	beq.w	802467e <_dtoa_r+0x7ee>
 80244dc:	9907      	ldr	r1, [sp, #28]
 80244de:	2901      	cmp	r1, #1
 80244e0:	f300 80b4 	bgt.w	802464c <_dtoa_r+0x7bc>
 80244e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80244e6:	2900      	cmp	r1, #0
 80244e8:	f000 80ac 	beq.w	8024644 <_dtoa_r+0x7b4>
 80244ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80244f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80244f4:	461c      	mov	r4, r3
 80244f6:	930a      	str	r3, [sp, #40]	; 0x28
 80244f8:	9b05      	ldr	r3, [sp, #20]
 80244fa:	4413      	add	r3, r2
 80244fc:	9305      	str	r3, [sp, #20]
 80244fe:	9b06      	ldr	r3, [sp, #24]
 8024500:	2101      	movs	r1, #1
 8024502:	4413      	add	r3, r2
 8024504:	4630      	mov	r0, r6
 8024506:	9306      	str	r3, [sp, #24]
 8024508:	f000 fea8 	bl	802525c <__i2b>
 802450c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802450e:	4607      	mov	r7, r0
 8024510:	f1b8 0f00 	cmp.w	r8, #0
 8024514:	dd0d      	ble.n	8024532 <_dtoa_r+0x6a2>
 8024516:	9a06      	ldr	r2, [sp, #24]
 8024518:	2a00      	cmp	r2, #0
 802451a:	dd0a      	ble.n	8024532 <_dtoa_r+0x6a2>
 802451c:	4542      	cmp	r2, r8
 802451e:	9905      	ldr	r1, [sp, #20]
 8024520:	bfa8      	it	ge
 8024522:	4642      	movge	r2, r8
 8024524:	1a89      	subs	r1, r1, r2
 8024526:	9105      	str	r1, [sp, #20]
 8024528:	9906      	ldr	r1, [sp, #24]
 802452a:	eba8 0802 	sub.w	r8, r8, r2
 802452e:	1a8a      	subs	r2, r1, r2
 8024530:	9206      	str	r2, [sp, #24]
 8024532:	b303      	cbz	r3, 8024576 <_dtoa_r+0x6e6>
 8024534:	9a08      	ldr	r2, [sp, #32]
 8024536:	2a00      	cmp	r2, #0
 8024538:	f000 80a6 	beq.w	8024688 <_dtoa_r+0x7f8>
 802453c:	2c00      	cmp	r4, #0
 802453e:	dd13      	ble.n	8024568 <_dtoa_r+0x6d8>
 8024540:	4639      	mov	r1, r7
 8024542:	4622      	mov	r2, r4
 8024544:	4630      	mov	r0, r6
 8024546:	930c      	str	r3, [sp, #48]	; 0x30
 8024548:	f000 ff44 	bl	80253d4 <__pow5mult>
 802454c:	462a      	mov	r2, r5
 802454e:	4601      	mov	r1, r0
 8024550:	4607      	mov	r7, r0
 8024552:	4630      	mov	r0, r6
 8024554:	f000 fe98 	bl	8025288 <__multiply>
 8024558:	4629      	mov	r1, r5
 802455a:	900a      	str	r0, [sp, #40]	; 0x28
 802455c:	4630      	mov	r0, r6
 802455e:	f000 fdc1 	bl	80250e4 <_Bfree>
 8024562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024566:	4615      	mov	r5, r2
 8024568:	1b1a      	subs	r2, r3, r4
 802456a:	d004      	beq.n	8024576 <_dtoa_r+0x6e6>
 802456c:	4629      	mov	r1, r5
 802456e:	4630      	mov	r0, r6
 8024570:	f000 ff30 	bl	80253d4 <__pow5mult>
 8024574:	4605      	mov	r5, r0
 8024576:	2101      	movs	r1, #1
 8024578:	4630      	mov	r0, r6
 802457a:	f000 fe6f 	bl	802525c <__i2b>
 802457e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024580:	2b00      	cmp	r3, #0
 8024582:	4604      	mov	r4, r0
 8024584:	f340 8082 	ble.w	802468c <_dtoa_r+0x7fc>
 8024588:	461a      	mov	r2, r3
 802458a:	4601      	mov	r1, r0
 802458c:	4630      	mov	r0, r6
 802458e:	f000 ff21 	bl	80253d4 <__pow5mult>
 8024592:	9b07      	ldr	r3, [sp, #28]
 8024594:	2b01      	cmp	r3, #1
 8024596:	4604      	mov	r4, r0
 8024598:	dd7b      	ble.n	8024692 <_dtoa_r+0x802>
 802459a:	2300      	movs	r3, #0
 802459c:	930a      	str	r3, [sp, #40]	; 0x28
 802459e:	6922      	ldr	r2, [r4, #16]
 80245a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80245a4:	6910      	ldr	r0, [r2, #16]
 80245a6:	f000 fe09 	bl	80251bc <__hi0bits>
 80245aa:	f1c0 0020 	rsb	r0, r0, #32
 80245ae:	9b06      	ldr	r3, [sp, #24]
 80245b0:	4418      	add	r0, r3
 80245b2:	f010 001f 	ands.w	r0, r0, #31
 80245b6:	f000 808d 	beq.w	80246d4 <_dtoa_r+0x844>
 80245ba:	f1c0 0220 	rsb	r2, r0, #32
 80245be:	2a04      	cmp	r2, #4
 80245c0:	f340 8086 	ble.w	80246d0 <_dtoa_r+0x840>
 80245c4:	f1c0 001c 	rsb	r0, r0, #28
 80245c8:	9b05      	ldr	r3, [sp, #20]
 80245ca:	4403      	add	r3, r0
 80245cc:	9305      	str	r3, [sp, #20]
 80245ce:	9b06      	ldr	r3, [sp, #24]
 80245d0:	4403      	add	r3, r0
 80245d2:	4480      	add	r8, r0
 80245d4:	9306      	str	r3, [sp, #24]
 80245d6:	9b05      	ldr	r3, [sp, #20]
 80245d8:	2b00      	cmp	r3, #0
 80245da:	dd05      	ble.n	80245e8 <_dtoa_r+0x758>
 80245dc:	4629      	mov	r1, r5
 80245de:	461a      	mov	r2, r3
 80245e0:	4630      	mov	r0, r6
 80245e2:	f000 ff51 	bl	8025488 <__lshift>
 80245e6:	4605      	mov	r5, r0
 80245e8:	9b06      	ldr	r3, [sp, #24]
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	dd05      	ble.n	80245fa <_dtoa_r+0x76a>
 80245ee:	4621      	mov	r1, r4
 80245f0:	461a      	mov	r2, r3
 80245f2:	4630      	mov	r0, r6
 80245f4:	f000 ff48 	bl	8025488 <__lshift>
 80245f8:	4604      	mov	r4, r0
 80245fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80245fc:	2b00      	cmp	r3, #0
 80245fe:	d06b      	beq.n	80246d8 <_dtoa_r+0x848>
 8024600:	4621      	mov	r1, r4
 8024602:	4628      	mov	r0, r5
 8024604:	f000 ffac 	bl	8025560 <__mcmp>
 8024608:	2800      	cmp	r0, #0
 802460a:	da65      	bge.n	80246d8 <_dtoa_r+0x848>
 802460c:	2300      	movs	r3, #0
 802460e:	4629      	mov	r1, r5
 8024610:	220a      	movs	r2, #10
 8024612:	4630      	mov	r0, r6
 8024614:	f000 fd88 	bl	8025128 <__multadd>
 8024618:	9b08      	ldr	r3, [sp, #32]
 802461a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802461e:	4605      	mov	r5, r0
 8024620:	2b00      	cmp	r3, #0
 8024622:	f000 8192 	beq.w	802494a <_dtoa_r+0xaba>
 8024626:	4639      	mov	r1, r7
 8024628:	2300      	movs	r3, #0
 802462a:	220a      	movs	r2, #10
 802462c:	4630      	mov	r0, r6
 802462e:	f000 fd7b 	bl	8025128 <__multadd>
 8024632:	f1ba 0f00 	cmp.w	sl, #0
 8024636:	4607      	mov	r7, r0
 8024638:	f300 808e 	bgt.w	8024758 <_dtoa_r+0x8c8>
 802463c:	9b07      	ldr	r3, [sp, #28]
 802463e:	2b02      	cmp	r3, #2
 8024640:	dc51      	bgt.n	80246e6 <_dtoa_r+0x856>
 8024642:	e089      	b.n	8024758 <_dtoa_r+0x8c8>
 8024644:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024646:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802464a:	e751      	b.n	80244f0 <_dtoa_r+0x660>
 802464c:	f109 34ff 	add.w	r4, r9, #4294967295
 8024650:	42a3      	cmp	r3, r4
 8024652:	bfbf      	itttt	lt
 8024654:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8024656:	1ae3      	sublt	r3, r4, r3
 8024658:	18d2      	addlt	r2, r2, r3
 802465a:	4613      	movlt	r3, r2
 802465c:	bfb7      	itett	lt
 802465e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8024660:	1b1c      	subge	r4, r3, r4
 8024662:	4623      	movlt	r3, r4
 8024664:	2400      	movlt	r4, #0
 8024666:	f1b9 0f00 	cmp.w	r9, #0
 802466a:	bfb5      	itete	lt
 802466c:	9a05      	ldrlt	r2, [sp, #20]
 802466e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8024672:	eba2 0809 	sublt.w	r8, r2, r9
 8024676:	464a      	movge	r2, r9
 8024678:	bfb8      	it	lt
 802467a:	2200      	movlt	r2, #0
 802467c:	e73b      	b.n	80244f6 <_dtoa_r+0x666>
 802467e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8024682:	9f08      	ldr	r7, [sp, #32]
 8024684:	461c      	mov	r4, r3
 8024686:	e743      	b.n	8024510 <_dtoa_r+0x680>
 8024688:	461a      	mov	r2, r3
 802468a:	e76f      	b.n	802456c <_dtoa_r+0x6dc>
 802468c:	9b07      	ldr	r3, [sp, #28]
 802468e:	2b01      	cmp	r3, #1
 8024690:	dc18      	bgt.n	80246c4 <_dtoa_r+0x834>
 8024692:	9b02      	ldr	r3, [sp, #8]
 8024694:	b9b3      	cbnz	r3, 80246c4 <_dtoa_r+0x834>
 8024696:	9b03      	ldr	r3, [sp, #12]
 8024698:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802469c:	b9a2      	cbnz	r2, 80246c8 <_dtoa_r+0x838>
 802469e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80246a2:	0d12      	lsrs	r2, r2, #20
 80246a4:	0512      	lsls	r2, r2, #20
 80246a6:	b18a      	cbz	r2, 80246cc <_dtoa_r+0x83c>
 80246a8:	9b05      	ldr	r3, [sp, #20]
 80246aa:	3301      	adds	r3, #1
 80246ac:	9305      	str	r3, [sp, #20]
 80246ae:	9b06      	ldr	r3, [sp, #24]
 80246b0:	3301      	adds	r3, #1
 80246b2:	9306      	str	r3, [sp, #24]
 80246b4:	2301      	movs	r3, #1
 80246b6:	930a      	str	r3, [sp, #40]	; 0x28
 80246b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80246ba:	2b00      	cmp	r3, #0
 80246bc:	f47f af6f 	bne.w	802459e <_dtoa_r+0x70e>
 80246c0:	2001      	movs	r0, #1
 80246c2:	e774      	b.n	80245ae <_dtoa_r+0x71e>
 80246c4:	2300      	movs	r3, #0
 80246c6:	e7f6      	b.n	80246b6 <_dtoa_r+0x826>
 80246c8:	9b02      	ldr	r3, [sp, #8]
 80246ca:	e7f4      	b.n	80246b6 <_dtoa_r+0x826>
 80246cc:	920a      	str	r2, [sp, #40]	; 0x28
 80246ce:	e7f3      	b.n	80246b8 <_dtoa_r+0x828>
 80246d0:	d081      	beq.n	80245d6 <_dtoa_r+0x746>
 80246d2:	4610      	mov	r0, r2
 80246d4:	301c      	adds	r0, #28
 80246d6:	e777      	b.n	80245c8 <_dtoa_r+0x738>
 80246d8:	f1b9 0f00 	cmp.w	r9, #0
 80246dc:	dc37      	bgt.n	802474e <_dtoa_r+0x8be>
 80246de:	9b07      	ldr	r3, [sp, #28]
 80246e0:	2b02      	cmp	r3, #2
 80246e2:	dd34      	ble.n	802474e <_dtoa_r+0x8be>
 80246e4:	46ca      	mov	sl, r9
 80246e6:	f1ba 0f00 	cmp.w	sl, #0
 80246ea:	d10d      	bne.n	8024708 <_dtoa_r+0x878>
 80246ec:	4621      	mov	r1, r4
 80246ee:	4653      	mov	r3, sl
 80246f0:	2205      	movs	r2, #5
 80246f2:	4630      	mov	r0, r6
 80246f4:	f000 fd18 	bl	8025128 <__multadd>
 80246f8:	4601      	mov	r1, r0
 80246fa:	4604      	mov	r4, r0
 80246fc:	4628      	mov	r0, r5
 80246fe:	f000 ff2f 	bl	8025560 <__mcmp>
 8024702:	2800      	cmp	r0, #0
 8024704:	f73f adde 	bgt.w	80242c4 <_dtoa_r+0x434>
 8024708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802470a:	f8dd 8000 	ldr.w	r8, [sp]
 802470e:	ea6f 0b03 	mvn.w	fp, r3
 8024712:	f04f 0900 	mov.w	r9, #0
 8024716:	4621      	mov	r1, r4
 8024718:	4630      	mov	r0, r6
 802471a:	f000 fce3 	bl	80250e4 <_Bfree>
 802471e:	2f00      	cmp	r7, #0
 8024720:	f43f aea7 	beq.w	8024472 <_dtoa_r+0x5e2>
 8024724:	f1b9 0f00 	cmp.w	r9, #0
 8024728:	d005      	beq.n	8024736 <_dtoa_r+0x8a6>
 802472a:	45b9      	cmp	r9, r7
 802472c:	d003      	beq.n	8024736 <_dtoa_r+0x8a6>
 802472e:	4649      	mov	r1, r9
 8024730:	4630      	mov	r0, r6
 8024732:	f000 fcd7 	bl	80250e4 <_Bfree>
 8024736:	4639      	mov	r1, r7
 8024738:	4630      	mov	r0, r6
 802473a:	f000 fcd3 	bl	80250e4 <_Bfree>
 802473e:	e698      	b.n	8024472 <_dtoa_r+0x5e2>
 8024740:	2400      	movs	r4, #0
 8024742:	4627      	mov	r7, r4
 8024744:	e7e0      	b.n	8024708 <_dtoa_r+0x878>
 8024746:	46bb      	mov	fp, r7
 8024748:	4604      	mov	r4, r0
 802474a:	4607      	mov	r7, r0
 802474c:	e5ba      	b.n	80242c4 <_dtoa_r+0x434>
 802474e:	9b08      	ldr	r3, [sp, #32]
 8024750:	46ca      	mov	sl, r9
 8024752:	2b00      	cmp	r3, #0
 8024754:	f000 8100 	beq.w	8024958 <_dtoa_r+0xac8>
 8024758:	f1b8 0f00 	cmp.w	r8, #0
 802475c:	dd05      	ble.n	802476a <_dtoa_r+0x8da>
 802475e:	4639      	mov	r1, r7
 8024760:	4642      	mov	r2, r8
 8024762:	4630      	mov	r0, r6
 8024764:	f000 fe90 	bl	8025488 <__lshift>
 8024768:	4607      	mov	r7, r0
 802476a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802476c:	2b00      	cmp	r3, #0
 802476e:	d05d      	beq.n	802482c <_dtoa_r+0x99c>
 8024770:	6879      	ldr	r1, [r7, #4]
 8024772:	4630      	mov	r0, r6
 8024774:	f000 fc76 	bl	8025064 <_Balloc>
 8024778:	4680      	mov	r8, r0
 802477a:	b928      	cbnz	r0, 8024788 <_dtoa_r+0x8f8>
 802477c:	4b82      	ldr	r3, [pc, #520]	; (8024988 <_dtoa_r+0xaf8>)
 802477e:	4602      	mov	r2, r0
 8024780:	f240 21ea 	movw	r1, #746	; 0x2ea
 8024784:	f7ff bb9a 	b.w	8023ebc <_dtoa_r+0x2c>
 8024788:	693a      	ldr	r2, [r7, #16]
 802478a:	3202      	adds	r2, #2
 802478c:	0092      	lsls	r2, r2, #2
 802478e:	f107 010c 	add.w	r1, r7, #12
 8024792:	300c      	adds	r0, #12
 8024794:	f7fc fefc 	bl	8021590 <memcpy>
 8024798:	2201      	movs	r2, #1
 802479a:	4641      	mov	r1, r8
 802479c:	4630      	mov	r0, r6
 802479e:	f000 fe73 	bl	8025488 <__lshift>
 80247a2:	9b00      	ldr	r3, [sp, #0]
 80247a4:	3301      	adds	r3, #1
 80247a6:	9305      	str	r3, [sp, #20]
 80247a8:	9b00      	ldr	r3, [sp, #0]
 80247aa:	4453      	add	r3, sl
 80247ac:	9309      	str	r3, [sp, #36]	; 0x24
 80247ae:	9b02      	ldr	r3, [sp, #8]
 80247b0:	f003 0301 	and.w	r3, r3, #1
 80247b4:	46b9      	mov	r9, r7
 80247b6:	9308      	str	r3, [sp, #32]
 80247b8:	4607      	mov	r7, r0
 80247ba:	9b05      	ldr	r3, [sp, #20]
 80247bc:	4621      	mov	r1, r4
 80247be:	3b01      	subs	r3, #1
 80247c0:	4628      	mov	r0, r5
 80247c2:	9302      	str	r3, [sp, #8]
 80247c4:	f7ff fad6 	bl	8023d74 <quorem>
 80247c8:	4603      	mov	r3, r0
 80247ca:	3330      	adds	r3, #48	; 0x30
 80247cc:	9006      	str	r0, [sp, #24]
 80247ce:	4649      	mov	r1, r9
 80247d0:	4628      	mov	r0, r5
 80247d2:	930a      	str	r3, [sp, #40]	; 0x28
 80247d4:	f000 fec4 	bl	8025560 <__mcmp>
 80247d8:	463a      	mov	r2, r7
 80247da:	4682      	mov	sl, r0
 80247dc:	4621      	mov	r1, r4
 80247de:	4630      	mov	r0, r6
 80247e0:	f000 feda 	bl	8025598 <__mdiff>
 80247e4:	68c2      	ldr	r2, [r0, #12]
 80247e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247e8:	4680      	mov	r8, r0
 80247ea:	bb0a      	cbnz	r2, 8024830 <_dtoa_r+0x9a0>
 80247ec:	4601      	mov	r1, r0
 80247ee:	4628      	mov	r0, r5
 80247f0:	f000 feb6 	bl	8025560 <__mcmp>
 80247f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247f6:	4602      	mov	r2, r0
 80247f8:	4641      	mov	r1, r8
 80247fa:	4630      	mov	r0, r6
 80247fc:	920e      	str	r2, [sp, #56]	; 0x38
 80247fe:	930a      	str	r3, [sp, #40]	; 0x28
 8024800:	f000 fc70 	bl	80250e4 <_Bfree>
 8024804:	9b07      	ldr	r3, [sp, #28]
 8024806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024808:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802480c:	ea43 0102 	orr.w	r1, r3, r2
 8024810:	9b08      	ldr	r3, [sp, #32]
 8024812:	430b      	orrs	r3, r1
 8024814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024816:	d10d      	bne.n	8024834 <_dtoa_r+0x9a4>
 8024818:	2b39      	cmp	r3, #57	; 0x39
 802481a:	d029      	beq.n	8024870 <_dtoa_r+0x9e0>
 802481c:	f1ba 0f00 	cmp.w	sl, #0
 8024820:	dd01      	ble.n	8024826 <_dtoa_r+0x996>
 8024822:	9b06      	ldr	r3, [sp, #24]
 8024824:	3331      	adds	r3, #49	; 0x31
 8024826:	9a02      	ldr	r2, [sp, #8]
 8024828:	7013      	strb	r3, [r2, #0]
 802482a:	e774      	b.n	8024716 <_dtoa_r+0x886>
 802482c:	4638      	mov	r0, r7
 802482e:	e7b8      	b.n	80247a2 <_dtoa_r+0x912>
 8024830:	2201      	movs	r2, #1
 8024832:	e7e1      	b.n	80247f8 <_dtoa_r+0x968>
 8024834:	f1ba 0f00 	cmp.w	sl, #0
 8024838:	db06      	blt.n	8024848 <_dtoa_r+0x9b8>
 802483a:	9907      	ldr	r1, [sp, #28]
 802483c:	ea41 0a0a 	orr.w	sl, r1, sl
 8024840:	9908      	ldr	r1, [sp, #32]
 8024842:	ea5a 0101 	orrs.w	r1, sl, r1
 8024846:	d120      	bne.n	802488a <_dtoa_r+0x9fa>
 8024848:	2a00      	cmp	r2, #0
 802484a:	ddec      	ble.n	8024826 <_dtoa_r+0x996>
 802484c:	4629      	mov	r1, r5
 802484e:	2201      	movs	r2, #1
 8024850:	4630      	mov	r0, r6
 8024852:	9305      	str	r3, [sp, #20]
 8024854:	f000 fe18 	bl	8025488 <__lshift>
 8024858:	4621      	mov	r1, r4
 802485a:	4605      	mov	r5, r0
 802485c:	f000 fe80 	bl	8025560 <__mcmp>
 8024860:	2800      	cmp	r0, #0
 8024862:	9b05      	ldr	r3, [sp, #20]
 8024864:	dc02      	bgt.n	802486c <_dtoa_r+0x9dc>
 8024866:	d1de      	bne.n	8024826 <_dtoa_r+0x996>
 8024868:	07da      	lsls	r2, r3, #31
 802486a:	d5dc      	bpl.n	8024826 <_dtoa_r+0x996>
 802486c:	2b39      	cmp	r3, #57	; 0x39
 802486e:	d1d8      	bne.n	8024822 <_dtoa_r+0x992>
 8024870:	9a02      	ldr	r2, [sp, #8]
 8024872:	2339      	movs	r3, #57	; 0x39
 8024874:	7013      	strb	r3, [r2, #0]
 8024876:	4643      	mov	r3, r8
 8024878:	4698      	mov	r8, r3
 802487a:	3b01      	subs	r3, #1
 802487c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8024880:	2a39      	cmp	r2, #57	; 0x39
 8024882:	d051      	beq.n	8024928 <_dtoa_r+0xa98>
 8024884:	3201      	adds	r2, #1
 8024886:	701a      	strb	r2, [r3, #0]
 8024888:	e745      	b.n	8024716 <_dtoa_r+0x886>
 802488a:	2a00      	cmp	r2, #0
 802488c:	dd03      	ble.n	8024896 <_dtoa_r+0xa06>
 802488e:	2b39      	cmp	r3, #57	; 0x39
 8024890:	d0ee      	beq.n	8024870 <_dtoa_r+0x9e0>
 8024892:	3301      	adds	r3, #1
 8024894:	e7c7      	b.n	8024826 <_dtoa_r+0x996>
 8024896:	9a05      	ldr	r2, [sp, #20]
 8024898:	9909      	ldr	r1, [sp, #36]	; 0x24
 802489a:	f802 3c01 	strb.w	r3, [r2, #-1]
 802489e:	428a      	cmp	r2, r1
 80248a0:	d02b      	beq.n	80248fa <_dtoa_r+0xa6a>
 80248a2:	4629      	mov	r1, r5
 80248a4:	2300      	movs	r3, #0
 80248a6:	220a      	movs	r2, #10
 80248a8:	4630      	mov	r0, r6
 80248aa:	f000 fc3d 	bl	8025128 <__multadd>
 80248ae:	45b9      	cmp	r9, r7
 80248b0:	4605      	mov	r5, r0
 80248b2:	f04f 0300 	mov.w	r3, #0
 80248b6:	f04f 020a 	mov.w	r2, #10
 80248ba:	4649      	mov	r1, r9
 80248bc:	4630      	mov	r0, r6
 80248be:	d107      	bne.n	80248d0 <_dtoa_r+0xa40>
 80248c0:	f000 fc32 	bl	8025128 <__multadd>
 80248c4:	4681      	mov	r9, r0
 80248c6:	4607      	mov	r7, r0
 80248c8:	9b05      	ldr	r3, [sp, #20]
 80248ca:	3301      	adds	r3, #1
 80248cc:	9305      	str	r3, [sp, #20]
 80248ce:	e774      	b.n	80247ba <_dtoa_r+0x92a>
 80248d0:	f000 fc2a 	bl	8025128 <__multadd>
 80248d4:	4639      	mov	r1, r7
 80248d6:	4681      	mov	r9, r0
 80248d8:	2300      	movs	r3, #0
 80248da:	220a      	movs	r2, #10
 80248dc:	4630      	mov	r0, r6
 80248de:	f000 fc23 	bl	8025128 <__multadd>
 80248e2:	4607      	mov	r7, r0
 80248e4:	e7f0      	b.n	80248c8 <_dtoa_r+0xa38>
 80248e6:	f1ba 0f00 	cmp.w	sl, #0
 80248ea:	9a00      	ldr	r2, [sp, #0]
 80248ec:	bfcc      	ite	gt
 80248ee:	46d0      	movgt	r8, sl
 80248f0:	f04f 0801 	movle.w	r8, #1
 80248f4:	4490      	add	r8, r2
 80248f6:	f04f 0900 	mov.w	r9, #0
 80248fa:	4629      	mov	r1, r5
 80248fc:	2201      	movs	r2, #1
 80248fe:	4630      	mov	r0, r6
 8024900:	9302      	str	r3, [sp, #8]
 8024902:	f000 fdc1 	bl	8025488 <__lshift>
 8024906:	4621      	mov	r1, r4
 8024908:	4605      	mov	r5, r0
 802490a:	f000 fe29 	bl	8025560 <__mcmp>
 802490e:	2800      	cmp	r0, #0
 8024910:	dcb1      	bgt.n	8024876 <_dtoa_r+0x9e6>
 8024912:	d102      	bne.n	802491a <_dtoa_r+0xa8a>
 8024914:	9b02      	ldr	r3, [sp, #8]
 8024916:	07db      	lsls	r3, r3, #31
 8024918:	d4ad      	bmi.n	8024876 <_dtoa_r+0x9e6>
 802491a:	4643      	mov	r3, r8
 802491c:	4698      	mov	r8, r3
 802491e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024922:	2a30      	cmp	r2, #48	; 0x30
 8024924:	d0fa      	beq.n	802491c <_dtoa_r+0xa8c>
 8024926:	e6f6      	b.n	8024716 <_dtoa_r+0x886>
 8024928:	9a00      	ldr	r2, [sp, #0]
 802492a:	429a      	cmp	r2, r3
 802492c:	d1a4      	bne.n	8024878 <_dtoa_r+0x9e8>
 802492e:	f10b 0b01 	add.w	fp, fp, #1
 8024932:	2331      	movs	r3, #49	; 0x31
 8024934:	e778      	b.n	8024828 <_dtoa_r+0x998>
 8024936:	4b15      	ldr	r3, [pc, #84]	; (802498c <_dtoa_r+0xafc>)
 8024938:	f7ff bb12 	b.w	8023f60 <_dtoa_r+0xd0>
 802493c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802493e:	2b00      	cmp	r3, #0
 8024940:	f47f aaee 	bne.w	8023f20 <_dtoa_r+0x90>
 8024944:	4b12      	ldr	r3, [pc, #72]	; (8024990 <_dtoa_r+0xb00>)
 8024946:	f7ff bb0b 	b.w	8023f60 <_dtoa_r+0xd0>
 802494a:	f1ba 0f00 	cmp.w	sl, #0
 802494e:	dc03      	bgt.n	8024958 <_dtoa_r+0xac8>
 8024950:	9b07      	ldr	r3, [sp, #28]
 8024952:	2b02      	cmp	r3, #2
 8024954:	f73f aec7 	bgt.w	80246e6 <_dtoa_r+0x856>
 8024958:	f8dd 8000 	ldr.w	r8, [sp]
 802495c:	4621      	mov	r1, r4
 802495e:	4628      	mov	r0, r5
 8024960:	f7ff fa08 	bl	8023d74 <quorem>
 8024964:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8024968:	f808 3b01 	strb.w	r3, [r8], #1
 802496c:	9a00      	ldr	r2, [sp, #0]
 802496e:	eba8 0202 	sub.w	r2, r8, r2
 8024972:	4592      	cmp	sl, r2
 8024974:	ddb7      	ble.n	80248e6 <_dtoa_r+0xa56>
 8024976:	4629      	mov	r1, r5
 8024978:	2300      	movs	r3, #0
 802497a:	220a      	movs	r2, #10
 802497c:	4630      	mov	r0, r6
 802497e:	f000 fbd3 	bl	8025128 <__multadd>
 8024982:	4605      	mov	r5, r0
 8024984:	e7ea      	b.n	802495c <_dtoa_r+0xacc>
 8024986:	bf00      	nop
 8024988:	08042359 	.word	0x08042359
 802498c:	08042549 	.word	0x08042549
 8024990:	080422ed 	.word	0x080422ed

08024994 <__errno>:
 8024994:	4b01      	ldr	r3, [pc, #4]	; (802499c <__errno+0x8>)
 8024996:	6818      	ldr	r0, [r3, #0]
 8024998:	4770      	bx	lr
 802499a:	bf00      	nop
 802499c:	20000480 	.word	0x20000480

080249a0 <__sflush_r>:
 80249a0:	898a      	ldrh	r2, [r1, #12]
 80249a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80249a6:	4605      	mov	r5, r0
 80249a8:	0710      	lsls	r0, r2, #28
 80249aa:	460c      	mov	r4, r1
 80249ac:	d458      	bmi.n	8024a60 <__sflush_r+0xc0>
 80249ae:	684b      	ldr	r3, [r1, #4]
 80249b0:	2b00      	cmp	r3, #0
 80249b2:	dc05      	bgt.n	80249c0 <__sflush_r+0x20>
 80249b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80249b6:	2b00      	cmp	r3, #0
 80249b8:	dc02      	bgt.n	80249c0 <__sflush_r+0x20>
 80249ba:	2000      	movs	r0, #0
 80249bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80249c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80249c2:	2e00      	cmp	r6, #0
 80249c4:	d0f9      	beq.n	80249ba <__sflush_r+0x1a>
 80249c6:	2300      	movs	r3, #0
 80249c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80249cc:	682f      	ldr	r7, [r5, #0]
 80249ce:	602b      	str	r3, [r5, #0]
 80249d0:	d032      	beq.n	8024a38 <__sflush_r+0x98>
 80249d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80249d4:	89a3      	ldrh	r3, [r4, #12]
 80249d6:	075a      	lsls	r2, r3, #29
 80249d8:	d505      	bpl.n	80249e6 <__sflush_r+0x46>
 80249da:	6863      	ldr	r3, [r4, #4]
 80249dc:	1ac0      	subs	r0, r0, r3
 80249de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80249e0:	b10b      	cbz	r3, 80249e6 <__sflush_r+0x46>
 80249e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80249e4:	1ac0      	subs	r0, r0, r3
 80249e6:	2300      	movs	r3, #0
 80249e8:	4602      	mov	r2, r0
 80249ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80249ec:	6a21      	ldr	r1, [r4, #32]
 80249ee:	4628      	mov	r0, r5
 80249f0:	47b0      	blx	r6
 80249f2:	1c43      	adds	r3, r0, #1
 80249f4:	89a3      	ldrh	r3, [r4, #12]
 80249f6:	d106      	bne.n	8024a06 <__sflush_r+0x66>
 80249f8:	6829      	ldr	r1, [r5, #0]
 80249fa:	291d      	cmp	r1, #29
 80249fc:	d82c      	bhi.n	8024a58 <__sflush_r+0xb8>
 80249fe:	4a2a      	ldr	r2, [pc, #168]	; (8024aa8 <__sflush_r+0x108>)
 8024a00:	40ca      	lsrs	r2, r1
 8024a02:	07d6      	lsls	r6, r2, #31
 8024a04:	d528      	bpl.n	8024a58 <__sflush_r+0xb8>
 8024a06:	2200      	movs	r2, #0
 8024a08:	6062      	str	r2, [r4, #4]
 8024a0a:	04d9      	lsls	r1, r3, #19
 8024a0c:	6922      	ldr	r2, [r4, #16]
 8024a0e:	6022      	str	r2, [r4, #0]
 8024a10:	d504      	bpl.n	8024a1c <__sflush_r+0x7c>
 8024a12:	1c42      	adds	r2, r0, #1
 8024a14:	d101      	bne.n	8024a1a <__sflush_r+0x7a>
 8024a16:	682b      	ldr	r3, [r5, #0]
 8024a18:	b903      	cbnz	r3, 8024a1c <__sflush_r+0x7c>
 8024a1a:	6560      	str	r0, [r4, #84]	; 0x54
 8024a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024a1e:	602f      	str	r7, [r5, #0]
 8024a20:	2900      	cmp	r1, #0
 8024a22:	d0ca      	beq.n	80249ba <__sflush_r+0x1a>
 8024a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024a28:	4299      	cmp	r1, r3
 8024a2a:	d002      	beq.n	8024a32 <__sflush_r+0x92>
 8024a2c:	4628      	mov	r0, r5
 8024a2e:	f7fd f85d 	bl	8021aec <_free_r>
 8024a32:	2000      	movs	r0, #0
 8024a34:	6360      	str	r0, [r4, #52]	; 0x34
 8024a36:	e7c1      	b.n	80249bc <__sflush_r+0x1c>
 8024a38:	6a21      	ldr	r1, [r4, #32]
 8024a3a:	2301      	movs	r3, #1
 8024a3c:	4628      	mov	r0, r5
 8024a3e:	47b0      	blx	r6
 8024a40:	1c41      	adds	r1, r0, #1
 8024a42:	d1c7      	bne.n	80249d4 <__sflush_r+0x34>
 8024a44:	682b      	ldr	r3, [r5, #0]
 8024a46:	2b00      	cmp	r3, #0
 8024a48:	d0c4      	beq.n	80249d4 <__sflush_r+0x34>
 8024a4a:	2b1d      	cmp	r3, #29
 8024a4c:	d001      	beq.n	8024a52 <__sflush_r+0xb2>
 8024a4e:	2b16      	cmp	r3, #22
 8024a50:	d101      	bne.n	8024a56 <__sflush_r+0xb6>
 8024a52:	602f      	str	r7, [r5, #0]
 8024a54:	e7b1      	b.n	80249ba <__sflush_r+0x1a>
 8024a56:	89a3      	ldrh	r3, [r4, #12]
 8024a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024a5c:	81a3      	strh	r3, [r4, #12]
 8024a5e:	e7ad      	b.n	80249bc <__sflush_r+0x1c>
 8024a60:	690f      	ldr	r7, [r1, #16]
 8024a62:	2f00      	cmp	r7, #0
 8024a64:	d0a9      	beq.n	80249ba <__sflush_r+0x1a>
 8024a66:	0793      	lsls	r3, r2, #30
 8024a68:	680e      	ldr	r6, [r1, #0]
 8024a6a:	bf08      	it	eq
 8024a6c:	694b      	ldreq	r3, [r1, #20]
 8024a6e:	600f      	str	r7, [r1, #0]
 8024a70:	bf18      	it	ne
 8024a72:	2300      	movne	r3, #0
 8024a74:	eba6 0807 	sub.w	r8, r6, r7
 8024a78:	608b      	str	r3, [r1, #8]
 8024a7a:	f1b8 0f00 	cmp.w	r8, #0
 8024a7e:	dd9c      	ble.n	80249ba <__sflush_r+0x1a>
 8024a80:	6a21      	ldr	r1, [r4, #32]
 8024a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024a84:	4643      	mov	r3, r8
 8024a86:	463a      	mov	r2, r7
 8024a88:	4628      	mov	r0, r5
 8024a8a:	47b0      	blx	r6
 8024a8c:	2800      	cmp	r0, #0
 8024a8e:	dc06      	bgt.n	8024a9e <__sflush_r+0xfe>
 8024a90:	89a3      	ldrh	r3, [r4, #12]
 8024a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024a96:	81a3      	strh	r3, [r4, #12]
 8024a98:	f04f 30ff 	mov.w	r0, #4294967295
 8024a9c:	e78e      	b.n	80249bc <__sflush_r+0x1c>
 8024a9e:	4407      	add	r7, r0
 8024aa0:	eba8 0800 	sub.w	r8, r8, r0
 8024aa4:	e7e9      	b.n	8024a7a <__sflush_r+0xda>
 8024aa6:	bf00      	nop
 8024aa8:	20400001 	.word	0x20400001

08024aac <_fflush_r>:
 8024aac:	b538      	push	{r3, r4, r5, lr}
 8024aae:	690b      	ldr	r3, [r1, #16]
 8024ab0:	4605      	mov	r5, r0
 8024ab2:	460c      	mov	r4, r1
 8024ab4:	b913      	cbnz	r3, 8024abc <_fflush_r+0x10>
 8024ab6:	2500      	movs	r5, #0
 8024ab8:	4628      	mov	r0, r5
 8024aba:	bd38      	pop	{r3, r4, r5, pc}
 8024abc:	b118      	cbz	r0, 8024ac6 <_fflush_r+0x1a>
 8024abe:	6983      	ldr	r3, [r0, #24]
 8024ac0:	b90b      	cbnz	r3, 8024ac6 <_fflush_r+0x1a>
 8024ac2:	f000 f887 	bl	8024bd4 <__sinit>
 8024ac6:	4b14      	ldr	r3, [pc, #80]	; (8024b18 <_fflush_r+0x6c>)
 8024ac8:	429c      	cmp	r4, r3
 8024aca:	d11b      	bne.n	8024b04 <_fflush_r+0x58>
 8024acc:	686c      	ldr	r4, [r5, #4]
 8024ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ad2:	2b00      	cmp	r3, #0
 8024ad4:	d0ef      	beq.n	8024ab6 <_fflush_r+0xa>
 8024ad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024ad8:	07d0      	lsls	r0, r2, #31
 8024ada:	d404      	bmi.n	8024ae6 <_fflush_r+0x3a>
 8024adc:	0599      	lsls	r1, r3, #22
 8024ade:	d402      	bmi.n	8024ae6 <_fflush_r+0x3a>
 8024ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024ae2:	f000 fa27 	bl	8024f34 <__retarget_lock_acquire_recursive>
 8024ae6:	4628      	mov	r0, r5
 8024ae8:	4621      	mov	r1, r4
 8024aea:	f7ff ff59 	bl	80249a0 <__sflush_r>
 8024aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024af0:	07da      	lsls	r2, r3, #31
 8024af2:	4605      	mov	r5, r0
 8024af4:	d4e0      	bmi.n	8024ab8 <_fflush_r+0xc>
 8024af6:	89a3      	ldrh	r3, [r4, #12]
 8024af8:	059b      	lsls	r3, r3, #22
 8024afa:	d4dd      	bmi.n	8024ab8 <_fflush_r+0xc>
 8024afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024afe:	f000 fa1b 	bl	8024f38 <__retarget_lock_release_recursive>
 8024b02:	e7d9      	b.n	8024ab8 <_fflush_r+0xc>
 8024b04:	4b05      	ldr	r3, [pc, #20]	; (8024b1c <_fflush_r+0x70>)
 8024b06:	429c      	cmp	r4, r3
 8024b08:	d101      	bne.n	8024b0e <_fflush_r+0x62>
 8024b0a:	68ac      	ldr	r4, [r5, #8]
 8024b0c:	e7df      	b.n	8024ace <_fflush_r+0x22>
 8024b0e:	4b04      	ldr	r3, [pc, #16]	; (8024b20 <_fflush_r+0x74>)
 8024b10:	429c      	cmp	r4, r3
 8024b12:	bf08      	it	eq
 8024b14:	68ec      	ldreq	r4, [r5, #12]
 8024b16:	e7da      	b.n	8024ace <_fflush_r+0x22>
 8024b18:	0804238c 	.word	0x0804238c
 8024b1c:	080423ac 	.word	0x080423ac
 8024b20:	0804236c 	.word	0x0804236c

08024b24 <std>:
 8024b24:	2300      	movs	r3, #0
 8024b26:	b510      	push	{r4, lr}
 8024b28:	4604      	mov	r4, r0
 8024b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8024b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024b32:	6083      	str	r3, [r0, #8]
 8024b34:	8181      	strh	r1, [r0, #12]
 8024b36:	6643      	str	r3, [r0, #100]	; 0x64
 8024b38:	81c2      	strh	r2, [r0, #14]
 8024b3a:	6183      	str	r3, [r0, #24]
 8024b3c:	4619      	mov	r1, r3
 8024b3e:	2208      	movs	r2, #8
 8024b40:	305c      	adds	r0, #92	; 0x5c
 8024b42:	f7fc fd4d 	bl	80215e0 <memset>
 8024b46:	4b05      	ldr	r3, [pc, #20]	; (8024b5c <std+0x38>)
 8024b48:	6263      	str	r3, [r4, #36]	; 0x24
 8024b4a:	4b05      	ldr	r3, [pc, #20]	; (8024b60 <std+0x3c>)
 8024b4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8024b4e:	4b05      	ldr	r3, [pc, #20]	; (8024b64 <std+0x40>)
 8024b50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024b52:	4b05      	ldr	r3, [pc, #20]	; (8024b68 <std+0x44>)
 8024b54:	6224      	str	r4, [r4, #32]
 8024b56:	6323      	str	r3, [r4, #48]	; 0x30
 8024b58:	bd10      	pop	{r4, pc}
 8024b5a:	bf00      	nop
 8024b5c:	0802284d 	.word	0x0802284d
 8024b60:	08022873 	.word	0x08022873
 8024b64:	080228ab 	.word	0x080228ab
 8024b68:	080228cf 	.word	0x080228cf

08024b6c <_cleanup_r>:
 8024b6c:	4901      	ldr	r1, [pc, #4]	; (8024b74 <_cleanup_r+0x8>)
 8024b6e:	f000 b8c1 	b.w	8024cf4 <_fwalk_reent>
 8024b72:	bf00      	nop
 8024b74:	08024aad 	.word	0x08024aad

08024b78 <__sfmoreglue>:
 8024b78:	b570      	push	{r4, r5, r6, lr}
 8024b7a:	1e4a      	subs	r2, r1, #1
 8024b7c:	2568      	movs	r5, #104	; 0x68
 8024b7e:	4355      	muls	r5, r2
 8024b80:	460e      	mov	r6, r1
 8024b82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024b86:	f7fd f801 	bl	8021b8c <_malloc_r>
 8024b8a:	4604      	mov	r4, r0
 8024b8c:	b140      	cbz	r0, 8024ba0 <__sfmoreglue+0x28>
 8024b8e:	2100      	movs	r1, #0
 8024b90:	e9c0 1600 	strd	r1, r6, [r0]
 8024b94:	300c      	adds	r0, #12
 8024b96:	60a0      	str	r0, [r4, #8]
 8024b98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024b9c:	f7fc fd20 	bl	80215e0 <memset>
 8024ba0:	4620      	mov	r0, r4
 8024ba2:	bd70      	pop	{r4, r5, r6, pc}

08024ba4 <__sfp_lock_acquire>:
 8024ba4:	4801      	ldr	r0, [pc, #4]	; (8024bac <__sfp_lock_acquire+0x8>)
 8024ba6:	f000 b9c5 	b.w	8024f34 <__retarget_lock_acquire_recursive>
 8024baa:	bf00      	nop
 8024bac:	2002facc 	.word	0x2002facc

08024bb0 <__sfp_lock_release>:
 8024bb0:	4801      	ldr	r0, [pc, #4]	; (8024bb8 <__sfp_lock_release+0x8>)
 8024bb2:	f000 b9c1 	b.w	8024f38 <__retarget_lock_release_recursive>
 8024bb6:	bf00      	nop
 8024bb8:	2002facc 	.word	0x2002facc

08024bbc <__sinit_lock_acquire>:
 8024bbc:	4801      	ldr	r0, [pc, #4]	; (8024bc4 <__sinit_lock_acquire+0x8>)
 8024bbe:	f000 b9b9 	b.w	8024f34 <__retarget_lock_acquire_recursive>
 8024bc2:	bf00      	nop
 8024bc4:	2002fac7 	.word	0x2002fac7

08024bc8 <__sinit_lock_release>:
 8024bc8:	4801      	ldr	r0, [pc, #4]	; (8024bd0 <__sinit_lock_release+0x8>)
 8024bca:	f000 b9b5 	b.w	8024f38 <__retarget_lock_release_recursive>
 8024bce:	bf00      	nop
 8024bd0:	2002fac7 	.word	0x2002fac7

08024bd4 <__sinit>:
 8024bd4:	b510      	push	{r4, lr}
 8024bd6:	4604      	mov	r4, r0
 8024bd8:	f7ff fff0 	bl	8024bbc <__sinit_lock_acquire>
 8024bdc:	69a3      	ldr	r3, [r4, #24]
 8024bde:	b11b      	cbz	r3, 8024be8 <__sinit+0x14>
 8024be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024be4:	f7ff bff0 	b.w	8024bc8 <__sinit_lock_release>
 8024be8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8024bec:	6523      	str	r3, [r4, #80]	; 0x50
 8024bee:	4b13      	ldr	r3, [pc, #76]	; (8024c3c <__sinit+0x68>)
 8024bf0:	4a13      	ldr	r2, [pc, #76]	; (8024c40 <__sinit+0x6c>)
 8024bf2:	681b      	ldr	r3, [r3, #0]
 8024bf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8024bf6:	42a3      	cmp	r3, r4
 8024bf8:	bf04      	itt	eq
 8024bfa:	2301      	moveq	r3, #1
 8024bfc:	61a3      	streq	r3, [r4, #24]
 8024bfe:	4620      	mov	r0, r4
 8024c00:	f000 f820 	bl	8024c44 <__sfp>
 8024c04:	6060      	str	r0, [r4, #4]
 8024c06:	4620      	mov	r0, r4
 8024c08:	f000 f81c 	bl	8024c44 <__sfp>
 8024c0c:	60a0      	str	r0, [r4, #8]
 8024c0e:	4620      	mov	r0, r4
 8024c10:	f000 f818 	bl	8024c44 <__sfp>
 8024c14:	2200      	movs	r2, #0
 8024c16:	60e0      	str	r0, [r4, #12]
 8024c18:	2104      	movs	r1, #4
 8024c1a:	6860      	ldr	r0, [r4, #4]
 8024c1c:	f7ff ff82 	bl	8024b24 <std>
 8024c20:	68a0      	ldr	r0, [r4, #8]
 8024c22:	2201      	movs	r2, #1
 8024c24:	2109      	movs	r1, #9
 8024c26:	f7ff ff7d 	bl	8024b24 <std>
 8024c2a:	68e0      	ldr	r0, [r4, #12]
 8024c2c:	2202      	movs	r2, #2
 8024c2e:	2112      	movs	r1, #18
 8024c30:	f7ff ff78 	bl	8024b24 <std>
 8024c34:	2301      	movs	r3, #1
 8024c36:	61a3      	str	r3, [r4, #24]
 8024c38:	e7d2      	b.n	8024be0 <__sinit+0xc>
 8024c3a:	bf00      	nop
 8024c3c:	08041d6c 	.word	0x08041d6c
 8024c40:	08024b6d 	.word	0x08024b6d

08024c44 <__sfp>:
 8024c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c46:	4607      	mov	r7, r0
 8024c48:	f7ff ffac 	bl	8024ba4 <__sfp_lock_acquire>
 8024c4c:	4b1e      	ldr	r3, [pc, #120]	; (8024cc8 <__sfp+0x84>)
 8024c4e:	681e      	ldr	r6, [r3, #0]
 8024c50:	69b3      	ldr	r3, [r6, #24]
 8024c52:	b913      	cbnz	r3, 8024c5a <__sfp+0x16>
 8024c54:	4630      	mov	r0, r6
 8024c56:	f7ff ffbd 	bl	8024bd4 <__sinit>
 8024c5a:	3648      	adds	r6, #72	; 0x48
 8024c5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024c60:	3b01      	subs	r3, #1
 8024c62:	d503      	bpl.n	8024c6c <__sfp+0x28>
 8024c64:	6833      	ldr	r3, [r6, #0]
 8024c66:	b30b      	cbz	r3, 8024cac <__sfp+0x68>
 8024c68:	6836      	ldr	r6, [r6, #0]
 8024c6a:	e7f7      	b.n	8024c5c <__sfp+0x18>
 8024c6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024c70:	b9d5      	cbnz	r5, 8024ca8 <__sfp+0x64>
 8024c72:	4b16      	ldr	r3, [pc, #88]	; (8024ccc <__sfp+0x88>)
 8024c74:	60e3      	str	r3, [r4, #12]
 8024c76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024c7a:	6665      	str	r5, [r4, #100]	; 0x64
 8024c7c:	f000 f958 	bl	8024f30 <__retarget_lock_init_recursive>
 8024c80:	f7ff ff96 	bl	8024bb0 <__sfp_lock_release>
 8024c84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024c88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024c8c:	6025      	str	r5, [r4, #0]
 8024c8e:	61a5      	str	r5, [r4, #24]
 8024c90:	2208      	movs	r2, #8
 8024c92:	4629      	mov	r1, r5
 8024c94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024c98:	f7fc fca2 	bl	80215e0 <memset>
 8024c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024ca4:	4620      	mov	r0, r4
 8024ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024ca8:	3468      	adds	r4, #104	; 0x68
 8024caa:	e7d9      	b.n	8024c60 <__sfp+0x1c>
 8024cac:	2104      	movs	r1, #4
 8024cae:	4638      	mov	r0, r7
 8024cb0:	f7ff ff62 	bl	8024b78 <__sfmoreglue>
 8024cb4:	4604      	mov	r4, r0
 8024cb6:	6030      	str	r0, [r6, #0]
 8024cb8:	2800      	cmp	r0, #0
 8024cba:	d1d5      	bne.n	8024c68 <__sfp+0x24>
 8024cbc:	f7ff ff78 	bl	8024bb0 <__sfp_lock_release>
 8024cc0:	230c      	movs	r3, #12
 8024cc2:	603b      	str	r3, [r7, #0]
 8024cc4:	e7ee      	b.n	8024ca4 <__sfp+0x60>
 8024cc6:	bf00      	nop
 8024cc8:	08041d6c 	.word	0x08041d6c
 8024ccc:	ffff0001 	.word	0xffff0001

08024cd0 <fiprintf>:
 8024cd0:	b40e      	push	{r1, r2, r3}
 8024cd2:	b503      	push	{r0, r1, lr}
 8024cd4:	4601      	mov	r1, r0
 8024cd6:	ab03      	add	r3, sp, #12
 8024cd8:	4805      	ldr	r0, [pc, #20]	; (8024cf0 <fiprintf+0x20>)
 8024cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8024cde:	6800      	ldr	r0, [r0, #0]
 8024ce0:	9301      	str	r3, [sp, #4]
 8024ce2:	f001 f8c9 	bl	8025e78 <_vfiprintf_r>
 8024ce6:	b002      	add	sp, #8
 8024ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8024cec:	b003      	add	sp, #12
 8024cee:	4770      	bx	lr
 8024cf0:	20000480 	.word	0x20000480

08024cf4 <_fwalk_reent>:
 8024cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024cf8:	4606      	mov	r6, r0
 8024cfa:	4688      	mov	r8, r1
 8024cfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024d00:	2700      	movs	r7, #0
 8024d02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024d06:	f1b9 0901 	subs.w	r9, r9, #1
 8024d0a:	d505      	bpl.n	8024d18 <_fwalk_reent+0x24>
 8024d0c:	6824      	ldr	r4, [r4, #0]
 8024d0e:	2c00      	cmp	r4, #0
 8024d10:	d1f7      	bne.n	8024d02 <_fwalk_reent+0xe>
 8024d12:	4638      	mov	r0, r7
 8024d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024d18:	89ab      	ldrh	r3, [r5, #12]
 8024d1a:	2b01      	cmp	r3, #1
 8024d1c:	d907      	bls.n	8024d2e <_fwalk_reent+0x3a>
 8024d1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024d22:	3301      	adds	r3, #1
 8024d24:	d003      	beq.n	8024d2e <_fwalk_reent+0x3a>
 8024d26:	4629      	mov	r1, r5
 8024d28:	4630      	mov	r0, r6
 8024d2a:	47c0      	blx	r8
 8024d2c:	4307      	orrs	r7, r0
 8024d2e:	3568      	adds	r5, #104	; 0x68
 8024d30:	e7e9      	b.n	8024d06 <_fwalk_reent+0x12>
	...

08024d34 <_findenv_r>:
 8024d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d38:	4607      	mov	r7, r0
 8024d3a:	4689      	mov	r9, r1
 8024d3c:	4616      	mov	r6, r2
 8024d3e:	f001 fbf9 	bl	8026534 <__env_lock>
 8024d42:	4b18      	ldr	r3, [pc, #96]	; (8024da4 <_findenv_r+0x70>)
 8024d44:	681c      	ldr	r4, [r3, #0]
 8024d46:	469a      	mov	sl, r3
 8024d48:	b134      	cbz	r4, 8024d58 <_findenv_r+0x24>
 8024d4a:	464b      	mov	r3, r9
 8024d4c:	4698      	mov	r8, r3
 8024d4e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8024d52:	b139      	cbz	r1, 8024d64 <_findenv_r+0x30>
 8024d54:	293d      	cmp	r1, #61	; 0x3d
 8024d56:	d1f9      	bne.n	8024d4c <_findenv_r+0x18>
 8024d58:	4638      	mov	r0, r7
 8024d5a:	f001 fbf1 	bl	8026540 <__env_unlock>
 8024d5e:	2000      	movs	r0, #0
 8024d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d64:	eba8 0809 	sub.w	r8, r8, r9
 8024d68:	46a3      	mov	fp, r4
 8024d6a:	f854 0b04 	ldr.w	r0, [r4], #4
 8024d6e:	2800      	cmp	r0, #0
 8024d70:	d0f2      	beq.n	8024d58 <_findenv_r+0x24>
 8024d72:	4642      	mov	r2, r8
 8024d74:	4649      	mov	r1, r9
 8024d76:	f7fe fb29 	bl	80233cc <strncmp>
 8024d7a:	2800      	cmp	r0, #0
 8024d7c:	d1f4      	bne.n	8024d68 <_findenv_r+0x34>
 8024d7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8024d82:	eb03 0508 	add.w	r5, r3, r8
 8024d86:	f813 3008 	ldrb.w	r3, [r3, r8]
 8024d8a:	2b3d      	cmp	r3, #61	; 0x3d
 8024d8c:	d1ec      	bne.n	8024d68 <_findenv_r+0x34>
 8024d8e:	f8da 3000 	ldr.w	r3, [sl]
 8024d92:	ebab 0303 	sub.w	r3, fp, r3
 8024d96:	109b      	asrs	r3, r3, #2
 8024d98:	4638      	mov	r0, r7
 8024d9a:	6033      	str	r3, [r6, #0]
 8024d9c:	f001 fbd0 	bl	8026540 <__env_unlock>
 8024da0:	1c68      	adds	r0, r5, #1
 8024da2:	e7dd      	b.n	8024d60 <_findenv_r+0x2c>
 8024da4:	20000270 	.word	0x20000270

08024da8 <_getenv_r>:
 8024da8:	b507      	push	{r0, r1, r2, lr}
 8024daa:	aa01      	add	r2, sp, #4
 8024dac:	f7ff ffc2 	bl	8024d34 <_findenv_r>
 8024db0:	b003      	add	sp, #12
 8024db2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08024db8 <__gettzinfo>:
 8024db8:	4800      	ldr	r0, [pc, #0]	; (8024dbc <__gettzinfo+0x4>)
 8024dba:	4770      	bx	lr
 8024dbc:	200004f0 	.word	0x200004f0

08024dc0 <gmtime_r>:
 8024dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024dc4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8024dc8:	460c      	mov	r4, r1
 8024dca:	4a51      	ldr	r2, [pc, #324]	; (8024f10 <gmtime_r+0x150>)
 8024dcc:	2300      	movs	r3, #0
 8024dce:	4630      	mov	r0, r6
 8024dd0:	4639      	mov	r1, r7
 8024dd2:	f7db fa9d 	bl	8000310 <__aeabi_ldivmod>
 8024dd6:	4639      	mov	r1, r7
 8024dd8:	4605      	mov	r5, r0
 8024dda:	4a4d      	ldr	r2, [pc, #308]	; (8024f10 <gmtime_r+0x150>)
 8024ddc:	4630      	mov	r0, r6
 8024dde:	2300      	movs	r3, #0
 8024de0:	f7db fa96 	bl	8000310 <__aeabi_ldivmod>
 8024de4:	2a00      	cmp	r2, #0
 8024de6:	bfbc      	itt	lt
 8024de8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8024dec:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8024df0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024df4:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8024df8:	fbb2 f3f1 	udiv	r3, r2, r1
 8024dfc:	fb01 2213 	mls	r2, r1, r3, r2
 8024e00:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8024e04:	bfac      	ite	ge
 8024e06:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8024e0a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8024e0e:	60a3      	str	r3, [r4, #8]
 8024e10:	fbb2 f3f1 	udiv	r3, r2, r1
 8024e14:	fb01 2213 	mls	r2, r1, r3, r2
 8024e18:	6063      	str	r3, [r4, #4]
 8024e1a:	6022      	str	r2, [r4, #0]
 8024e1c:	1cc3      	adds	r3, r0, #3
 8024e1e:	2207      	movs	r2, #7
 8024e20:	fb93 f2f2 	sdiv	r2, r3, r2
 8024e24:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8024e28:	1a9b      	subs	r3, r3, r2
 8024e2a:	bf48      	it	mi
 8024e2c:	3307      	addmi	r3, #7
 8024e2e:	2800      	cmp	r0, #0
 8024e30:	61a3      	str	r3, [r4, #24]
 8024e32:	bfb8      	it	lt
 8024e34:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8024e38:	4936      	ldr	r1, [pc, #216]	; (8024f14 <gmtime_r+0x154>)
 8024e3a:	bfae      	itee	ge
 8024e3c:	fb90 f1f1 	sdivge	r1, r0, r1
 8024e40:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8024e44:	fb93 f1f1 	sdivlt	r1, r3, r1
 8024e48:	4b33      	ldr	r3, [pc, #204]	; (8024f18 <gmtime_r+0x158>)
 8024e4a:	fb03 0001 	mla	r0, r3, r1, r0
 8024e4e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8024e52:	fbb0 f2f2 	udiv	r2, r0, r2
 8024e56:	4402      	add	r2, r0
 8024e58:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8024e5c:	fbb0 f3fc 	udiv	r3, r0, ip
 8024e60:	1ad2      	subs	r2, r2, r3
 8024e62:	f240 176d 	movw	r7, #365	; 0x16d
 8024e66:	4b2d      	ldr	r3, [pc, #180]	; (8024f1c <gmtime_r+0x15c>)
 8024e68:	fbb0 f3f3 	udiv	r3, r0, r3
 8024e6c:	2664      	movs	r6, #100	; 0x64
 8024e6e:	1ad3      	subs	r3, r2, r3
 8024e70:	fbb3 f5f7 	udiv	r5, r3, r7
 8024e74:	fbb3 f3fc 	udiv	r3, r3, ip
 8024e78:	fbb5 f2f6 	udiv	r2, r5, r6
 8024e7c:	1ad3      	subs	r3, r2, r3
 8024e7e:	4403      	add	r3, r0
 8024e80:	fb07 3315 	mls	r3, r7, r5, r3
 8024e84:	2099      	movs	r0, #153	; 0x99
 8024e86:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8024e8a:	f10c 0c02 	add.w	ip, ip, #2
 8024e8e:	f103 0e01 	add.w	lr, r3, #1
 8024e92:	fbbc f7f0 	udiv	r7, ip, r0
 8024e96:	4378      	muls	r0, r7
 8024e98:	3002      	adds	r0, #2
 8024e9a:	f04f 0805 	mov.w	r8, #5
 8024e9e:	fbb0 f0f8 	udiv	r0, r0, r8
 8024ea2:	ebae 0000 	sub.w	r0, lr, r0
 8024ea6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8024eaa:	45f4      	cmp	ip, lr
 8024eac:	bf94      	ite	ls
 8024eae:	f04f 0c02 	movls.w	ip, #2
 8024eb2:	f06f 0c09 	mvnhi.w	ip, #9
 8024eb6:	4467      	add	r7, ip
 8024eb8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8024ebc:	fb0c 5101 	mla	r1, ip, r1, r5
 8024ec0:	2f01      	cmp	r7, #1
 8024ec2:	bf98      	it	ls
 8024ec4:	3101      	addls	r1, #1
 8024ec6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8024eca:	d30c      	bcc.n	8024ee6 <gmtime_r+0x126>
 8024ecc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8024ed0:	61e3      	str	r3, [r4, #28]
 8024ed2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8024ed6:	2300      	movs	r3, #0
 8024ed8:	60e0      	str	r0, [r4, #12]
 8024eda:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8024ede:	6223      	str	r3, [r4, #32]
 8024ee0:	4620      	mov	r0, r4
 8024ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ee6:	f015 0f03 	tst.w	r5, #3
 8024eea:	d102      	bne.n	8024ef2 <gmtime_r+0x132>
 8024eec:	fb06 5212 	mls	r2, r6, r2, r5
 8024ef0:	b95a      	cbnz	r2, 8024f0a <gmtime_r+0x14a>
 8024ef2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8024ef6:	fbb5 f2f6 	udiv	r2, r5, r6
 8024efa:	fb06 5212 	mls	r2, r6, r2, r5
 8024efe:	fab2 f282 	clz	r2, r2
 8024f02:	0952      	lsrs	r2, r2, #5
 8024f04:	333b      	adds	r3, #59	; 0x3b
 8024f06:	4413      	add	r3, r2
 8024f08:	e7e2      	b.n	8024ed0 <gmtime_r+0x110>
 8024f0a:	2201      	movs	r2, #1
 8024f0c:	e7fa      	b.n	8024f04 <gmtime_r+0x144>
 8024f0e:	bf00      	nop
 8024f10:	00015180 	.word	0x00015180
 8024f14:	00023ab1 	.word	0x00023ab1
 8024f18:	fffdc54f 	.word	0xfffdc54f
 8024f1c:	00023ab0 	.word	0x00023ab0

08024f20 <labs>:
 8024f20:	2800      	cmp	r0, #0
 8024f22:	bfb8      	it	lt
 8024f24:	4240      	neglt	r0, r0
 8024f26:	4770      	bx	lr

08024f28 <_localeconv_r>:
 8024f28:	4800      	ldr	r0, [pc, #0]	; (8024f2c <_localeconv_r+0x4>)
 8024f2a:	4770      	bx	lr
 8024f2c:	20000638 	.word	0x20000638

08024f30 <__retarget_lock_init_recursive>:
 8024f30:	4770      	bx	lr

08024f32 <__retarget_lock_acquire>:
 8024f32:	4770      	bx	lr

08024f34 <__retarget_lock_acquire_recursive>:
 8024f34:	4770      	bx	lr

08024f36 <__retarget_lock_release>:
 8024f36:	4770      	bx	lr

08024f38 <__retarget_lock_release_recursive>:
 8024f38:	4770      	bx	lr
	...

08024f3c <_lseek_r>:
 8024f3c:	b538      	push	{r3, r4, r5, lr}
 8024f3e:	4d07      	ldr	r5, [pc, #28]	; (8024f5c <_lseek_r+0x20>)
 8024f40:	4604      	mov	r4, r0
 8024f42:	4608      	mov	r0, r1
 8024f44:	4611      	mov	r1, r2
 8024f46:	2200      	movs	r2, #0
 8024f48:	602a      	str	r2, [r5, #0]
 8024f4a:	461a      	mov	r2, r3
 8024f4c:	f7e0 fd0c 	bl	8005968 <_lseek>
 8024f50:	1c43      	adds	r3, r0, #1
 8024f52:	d102      	bne.n	8024f5a <_lseek_r+0x1e>
 8024f54:	682b      	ldr	r3, [r5, #0]
 8024f56:	b103      	cbz	r3, 8024f5a <_lseek_r+0x1e>
 8024f58:	6023      	str	r3, [r4, #0]
 8024f5a:	bd38      	pop	{r3, r4, r5, pc}
 8024f5c:	2002e1e8 	.word	0x2002e1e8

08024f60 <__swhatbuf_r>:
 8024f60:	b570      	push	{r4, r5, r6, lr}
 8024f62:	460e      	mov	r6, r1
 8024f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f68:	2900      	cmp	r1, #0
 8024f6a:	b096      	sub	sp, #88	; 0x58
 8024f6c:	4614      	mov	r4, r2
 8024f6e:	461d      	mov	r5, r3
 8024f70:	da07      	bge.n	8024f82 <__swhatbuf_r+0x22>
 8024f72:	2300      	movs	r3, #0
 8024f74:	602b      	str	r3, [r5, #0]
 8024f76:	89b3      	ldrh	r3, [r6, #12]
 8024f78:	061a      	lsls	r2, r3, #24
 8024f7a:	d410      	bmi.n	8024f9e <__swhatbuf_r+0x3e>
 8024f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024f80:	e00e      	b.n	8024fa0 <__swhatbuf_r+0x40>
 8024f82:	466a      	mov	r2, sp
 8024f84:	f001 fae2 	bl	802654c <_fstat_r>
 8024f88:	2800      	cmp	r0, #0
 8024f8a:	dbf2      	blt.n	8024f72 <__swhatbuf_r+0x12>
 8024f8c:	9a01      	ldr	r2, [sp, #4]
 8024f8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024f92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024f96:	425a      	negs	r2, r3
 8024f98:	415a      	adcs	r2, r3
 8024f9a:	602a      	str	r2, [r5, #0]
 8024f9c:	e7ee      	b.n	8024f7c <__swhatbuf_r+0x1c>
 8024f9e:	2340      	movs	r3, #64	; 0x40
 8024fa0:	2000      	movs	r0, #0
 8024fa2:	6023      	str	r3, [r4, #0]
 8024fa4:	b016      	add	sp, #88	; 0x58
 8024fa6:	bd70      	pop	{r4, r5, r6, pc}

08024fa8 <__smakebuf_r>:
 8024fa8:	898b      	ldrh	r3, [r1, #12]
 8024faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024fac:	079d      	lsls	r5, r3, #30
 8024fae:	4606      	mov	r6, r0
 8024fb0:	460c      	mov	r4, r1
 8024fb2:	d507      	bpl.n	8024fc4 <__smakebuf_r+0x1c>
 8024fb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024fb8:	6023      	str	r3, [r4, #0]
 8024fba:	6123      	str	r3, [r4, #16]
 8024fbc:	2301      	movs	r3, #1
 8024fbe:	6163      	str	r3, [r4, #20]
 8024fc0:	b002      	add	sp, #8
 8024fc2:	bd70      	pop	{r4, r5, r6, pc}
 8024fc4:	ab01      	add	r3, sp, #4
 8024fc6:	466a      	mov	r2, sp
 8024fc8:	f7ff ffca 	bl	8024f60 <__swhatbuf_r>
 8024fcc:	9900      	ldr	r1, [sp, #0]
 8024fce:	4605      	mov	r5, r0
 8024fd0:	4630      	mov	r0, r6
 8024fd2:	f7fc fddb 	bl	8021b8c <_malloc_r>
 8024fd6:	b948      	cbnz	r0, 8024fec <__smakebuf_r+0x44>
 8024fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024fdc:	059a      	lsls	r2, r3, #22
 8024fde:	d4ef      	bmi.n	8024fc0 <__smakebuf_r+0x18>
 8024fe0:	f023 0303 	bic.w	r3, r3, #3
 8024fe4:	f043 0302 	orr.w	r3, r3, #2
 8024fe8:	81a3      	strh	r3, [r4, #12]
 8024fea:	e7e3      	b.n	8024fb4 <__smakebuf_r+0xc>
 8024fec:	4b0d      	ldr	r3, [pc, #52]	; (8025024 <__smakebuf_r+0x7c>)
 8024fee:	62b3      	str	r3, [r6, #40]	; 0x28
 8024ff0:	89a3      	ldrh	r3, [r4, #12]
 8024ff2:	6020      	str	r0, [r4, #0]
 8024ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024ff8:	81a3      	strh	r3, [r4, #12]
 8024ffa:	9b00      	ldr	r3, [sp, #0]
 8024ffc:	6163      	str	r3, [r4, #20]
 8024ffe:	9b01      	ldr	r3, [sp, #4]
 8025000:	6120      	str	r0, [r4, #16]
 8025002:	b15b      	cbz	r3, 802501c <__smakebuf_r+0x74>
 8025004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025008:	4630      	mov	r0, r6
 802500a:	f001 fab1 	bl	8026570 <_isatty_r>
 802500e:	b128      	cbz	r0, 802501c <__smakebuf_r+0x74>
 8025010:	89a3      	ldrh	r3, [r4, #12]
 8025012:	f023 0303 	bic.w	r3, r3, #3
 8025016:	f043 0301 	orr.w	r3, r3, #1
 802501a:	81a3      	strh	r3, [r4, #12]
 802501c:	89a0      	ldrh	r0, [r4, #12]
 802501e:	4305      	orrs	r5, r0
 8025020:	81a5      	strh	r5, [r4, #12]
 8025022:	e7cd      	b.n	8024fc0 <__smakebuf_r+0x18>
 8025024:	08024b6d 	.word	0x08024b6d

08025028 <__ascii_mbtowc>:
 8025028:	b082      	sub	sp, #8
 802502a:	b901      	cbnz	r1, 802502e <__ascii_mbtowc+0x6>
 802502c:	a901      	add	r1, sp, #4
 802502e:	b142      	cbz	r2, 8025042 <__ascii_mbtowc+0x1a>
 8025030:	b14b      	cbz	r3, 8025046 <__ascii_mbtowc+0x1e>
 8025032:	7813      	ldrb	r3, [r2, #0]
 8025034:	600b      	str	r3, [r1, #0]
 8025036:	7812      	ldrb	r2, [r2, #0]
 8025038:	1e10      	subs	r0, r2, #0
 802503a:	bf18      	it	ne
 802503c:	2001      	movne	r0, #1
 802503e:	b002      	add	sp, #8
 8025040:	4770      	bx	lr
 8025042:	4610      	mov	r0, r2
 8025044:	e7fb      	b.n	802503e <__ascii_mbtowc+0x16>
 8025046:	f06f 0001 	mvn.w	r0, #1
 802504a:	e7f8      	b.n	802503e <__ascii_mbtowc+0x16>

0802504c <__malloc_lock>:
 802504c:	4801      	ldr	r0, [pc, #4]	; (8025054 <__malloc_lock+0x8>)
 802504e:	f7ff bf71 	b.w	8024f34 <__retarget_lock_acquire_recursive>
 8025052:	bf00      	nop
 8025054:	2002fac8 	.word	0x2002fac8

08025058 <__malloc_unlock>:
 8025058:	4801      	ldr	r0, [pc, #4]	; (8025060 <__malloc_unlock+0x8>)
 802505a:	f7ff bf6d 	b.w	8024f38 <__retarget_lock_release_recursive>
 802505e:	bf00      	nop
 8025060:	2002fac8 	.word	0x2002fac8

08025064 <_Balloc>:
 8025064:	b570      	push	{r4, r5, r6, lr}
 8025066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025068:	4604      	mov	r4, r0
 802506a:	460d      	mov	r5, r1
 802506c:	b976      	cbnz	r6, 802508c <_Balloc+0x28>
 802506e:	2010      	movs	r0, #16
 8025070:	f7fc fa70 	bl	8021554 <malloc>
 8025074:	4602      	mov	r2, r0
 8025076:	6260      	str	r0, [r4, #36]	; 0x24
 8025078:	b920      	cbnz	r0, 8025084 <_Balloc+0x20>
 802507a:	4b18      	ldr	r3, [pc, #96]	; (80250dc <_Balloc+0x78>)
 802507c:	4818      	ldr	r0, [pc, #96]	; (80250e0 <_Balloc+0x7c>)
 802507e:	2166      	movs	r1, #102	; 0x66
 8025080:	f7fe fe36 	bl	8023cf0 <__assert_func>
 8025084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025088:	6006      	str	r6, [r0, #0]
 802508a:	60c6      	str	r6, [r0, #12]
 802508c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802508e:	68f3      	ldr	r3, [r6, #12]
 8025090:	b183      	cbz	r3, 80250b4 <_Balloc+0x50>
 8025092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025094:	68db      	ldr	r3, [r3, #12]
 8025096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802509a:	b9b8      	cbnz	r0, 80250cc <_Balloc+0x68>
 802509c:	2101      	movs	r1, #1
 802509e:	fa01 f605 	lsl.w	r6, r1, r5
 80250a2:	1d72      	adds	r2, r6, #5
 80250a4:	0092      	lsls	r2, r2, #2
 80250a6:	4620      	mov	r0, r4
 80250a8:	f000 fb5a 	bl	8025760 <_calloc_r>
 80250ac:	b160      	cbz	r0, 80250c8 <_Balloc+0x64>
 80250ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80250b2:	e00e      	b.n	80250d2 <_Balloc+0x6e>
 80250b4:	2221      	movs	r2, #33	; 0x21
 80250b6:	2104      	movs	r1, #4
 80250b8:	4620      	mov	r0, r4
 80250ba:	f000 fb51 	bl	8025760 <_calloc_r>
 80250be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80250c0:	60f0      	str	r0, [r6, #12]
 80250c2:	68db      	ldr	r3, [r3, #12]
 80250c4:	2b00      	cmp	r3, #0
 80250c6:	d1e4      	bne.n	8025092 <_Balloc+0x2e>
 80250c8:	2000      	movs	r0, #0
 80250ca:	bd70      	pop	{r4, r5, r6, pc}
 80250cc:	6802      	ldr	r2, [r0, #0]
 80250ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80250d2:	2300      	movs	r3, #0
 80250d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80250d8:	e7f7      	b.n	80250ca <_Balloc+0x66>
 80250da:	bf00      	nop
 80250dc:	08041d70 	.word	0x08041d70
 80250e0:	080423d6 	.word	0x080423d6

080250e4 <_Bfree>:
 80250e4:	b570      	push	{r4, r5, r6, lr}
 80250e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80250e8:	4605      	mov	r5, r0
 80250ea:	460c      	mov	r4, r1
 80250ec:	b976      	cbnz	r6, 802510c <_Bfree+0x28>
 80250ee:	2010      	movs	r0, #16
 80250f0:	f7fc fa30 	bl	8021554 <malloc>
 80250f4:	4602      	mov	r2, r0
 80250f6:	6268      	str	r0, [r5, #36]	; 0x24
 80250f8:	b920      	cbnz	r0, 8025104 <_Bfree+0x20>
 80250fa:	4b09      	ldr	r3, [pc, #36]	; (8025120 <_Bfree+0x3c>)
 80250fc:	4809      	ldr	r0, [pc, #36]	; (8025124 <_Bfree+0x40>)
 80250fe:	218a      	movs	r1, #138	; 0x8a
 8025100:	f7fe fdf6 	bl	8023cf0 <__assert_func>
 8025104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025108:	6006      	str	r6, [r0, #0]
 802510a:	60c6      	str	r6, [r0, #12]
 802510c:	b13c      	cbz	r4, 802511e <_Bfree+0x3a>
 802510e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8025110:	6862      	ldr	r2, [r4, #4]
 8025112:	68db      	ldr	r3, [r3, #12]
 8025114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025118:	6021      	str	r1, [r4, #0]
 802511a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802511e:	bd70      	pop	{r4, r5, r6, pc}
 8025120:	08041d70 	.word	0x08041d70
 8025124:	080423d6 	.word	0x080423d6

08025128 <__multadd>:
 8025128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802512c:	690e      	ldr	r6, [r1, #16]
 802512e:	4607      	mov	r7, r0
 8025130:	4698      	mov	r8, r3
 8025132:	460c      	mov	r4, r1
 8025134:	f101 0014 	add.w	r0, r1, #20
 8025138:	2300      	movs	r3, #0
 802513a:	6805      	ldr	r5, [r0, #0]
 802513c:	b2a9      	uxth	r1, r5
 802513e:	fb02 8101 	mla	r1, r2, r1, r8
 8025142:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8025146:	0c2d      	lsrs	r5, r5, #16
 8025148:	fb02 c505 	mla	r5, r2, r5, ip
 802514c:	b289      	uxth	r1, r1
 802514e:	3301      	adds	r3, #1
 8025150:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8025154:	429e      	cmp	r6, r3
 8025156:	f840 1b04 	str.w	r1, [r0], #4
 802515a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802515e:	dcec      	bgt.n	802513a <__multadd+0x12>
 8025160:	f1b8 0f00 	cmp.w	r8, #0
 8025164:	d022      	beq.n	80251ac <__multadd+0x84>
 8025166:	68a3      	ldr	r3, [r4, #8]
 8025168:	42b3      	cmp	r3, r6
 802516a:	dc19      	bgt.n	80251a0 <__multadd+0x78>
 802516c:	6861      	ldr	r1, [r4, #4]
 802516e:	4638      	mov	r0, r7
 8025170:	3101      	adds	r1, #1
 8025172:	f7ff ff77 	bl	8025064 <_Balloc>
 8025176:	4605      	mov	r5, r0
 8025178:	b928      	cbnz	r0, 8025186 <__multadd+0x5e>
 802517a:	4602      	mov	r2, r0
 802517c:	4b0d      	ldr	r3, [pc, #52]	; (80251b4 <__multadd+0x8c>)
 802517e:	480e      	ldr	r0, [pc, #56]	; (80251b8 <__multadd+0x90>)
 8025180:	21b5      	movs	r1, #181	; 0xb5
 8025182:	f7fe fdb5 	bl	8023cf0 <__assert_func>
 8025186:	6922      	ldr	r2, [r4, #16]
 8025188:	3202      	adds	r2, #2
 802518a:	f104 010c 	add.w	r1, r4, #12
 802518e:	0092      	lsls	r2, r2, #2
 8025190:	300c      	adds	r0, #12
 8025192:	f7fc f9fd 	bl	8021590 <memcpy>
 8025196:	4621      	mov	r1, r4
 8025198:	4638      	mov	r0, r7
 802519a:	f7ff ffa3 	bl	80250e4 <_Bfree>
 802519e:	462c      	mov	r4, r5
 80251a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80251a4:	3601      	adds	r6, #1
 80251a6:	f8c3 8014 	str.w	r8, [r3, #20]
 80251aa:	6126      	str	r6, [r4, #16]
 80251ac:	4620      	mov	r0, r4
 80251ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80251b2:	bf00      	nop
 80251b4:	08042359 	.word	0x08042359
 80251b8:	080423d6 	.word	0x080423d6

080251bc <__hi0bits>:
 80251bc:	0c03      	lsrs	r3, r0, #16
 80251be:	041b      	lsls	r3, r3, #16
 80251c0:	b9d3      	cbnz	r3, 80251f8 <__hi0bits+0x3c>
 80251c2:	0400      	lsls	r0, r0, #16
 80251c4:	2310      	movs	r3, #16
 80251c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80251ca:	bf04      	itt	eq
 80251cc:	0200      	lsleq	r0, r0, #8
 80251ce:	3308      	addeq	r3, #8
 80251d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80251d4:	bf04      	itt	eq
 80251d6:	0100      	lsleq	r0, r0, #4
 80251d8:	3304      	addeq	r3, #4
 80251da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80251de:	bf04      	itt	eq
 80251e0:	0080      	lsleq	r0, r0, #2
 80251e2:	3302      	addeq	r3, #2
 80251e4:	2800      	cmp	r0, #0
 80251e6:	db05      	blt.n	80251f4 <__hi0bits+0x38>
 80251e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80251ec:	f103 0301 	add.w	r3, r3, #1
 80251f0:	bf08      	it	eq
 80251f2:	2320      	moveq	r3, #32
 80251f4:	4618      	mov	r0, r3
 80251f6:	4770      	bx	lr
 80251f8:	2300      	movs	r3, #0
 80251fa:	e7e4      	b.n	80251c6 <__hi0bits+0xa>

080251fc <__lo0bits>:
 80251fc:	6803      	ldr	r3, [r0, #0]
 80251fe:	f013 0207 	ands.w	r2, r3, #7
 8025202:	4601      	mov	r1, r0
 8025204:	d00b      	beq.n	802521e <__lo0bits+0x22>
 8025206:	07da      	lsls	r2, r3, #31
 8025208:	d424      	bmi.n	8025254 <__lo0bits+0x58>
 802520a:	0798      	lsls	r0, r3, #30
 802520c:	bf49      	itett	mi
 802520e:	085b      	lsrmi	r3, r3, #1
 8025210:	089b      	lsrpl	r3, r3, #2
 8025212:	2001      	movmi	r0, #1
 8025214:	600b      	strmi	r3, [r1, #0]
 8025216:	bf5c      	itt	pl
 8025218:	600b      	strpl	r3, [r1, #0]
 802521a:	2002      	movpl	r0, #2
 802521c:	4770      	bx	lr
 802521e:	b298      	uxth	r0, r3
 8025220:	b9b0      	cbnz	r0, 8025250 <__lo0bits+0x54>
 8025222:	0c1b      	lsrs	r3, r3, #16
 8025224:	2010      	movs	r0, #16
 8025226:	f013 0fff 	tst.w	r3, #255	; 0xff
 802522a:	bf04      	itt	eq
 802522c:	0a1b      	lsreq	r3, r3, #8
 802522e:	3008      	addeq	r0, #8
 8025230:	071a      	lsls	r2, r3, #28
 8025232:	bf04      	itt	eq
 8025234:	091b      	lsreq	r3, r3, #4
 8025236:	3004      	addeq	r0, #4
 8025238:	079a      	lsls	r2, r3, #30
 802523a:	bf04      	itt	eq
 802523c:	089b      	lsreq	r3, r3, #2
 802523e:	3002      	addeq	r0, #2
 8025240:	07da      	lsls	r2, r3, #31
 8025242:	d403      	bmi.n	802524c <__lo0bits+0x50>
 8025244:	085b      	lsrs	r3, r3, #1
 8025246:	f100 0001 	add.w	r0, r0, #1
 802524a:	d005      	beq.n	8025258 <__lo0bits+0x5c>
 802524c:	600b      	str	r3, [r1, #0]
 802524e:	4770      	bx	lr
 8025250:	4610      	mov	r0, r2
 8025252:	e7e8      	b.n	8025226 <__lo0bits+0x2a>
 8025254:	2000      	movs	r0, #0
 8025256:	4770      	bx	lr
 8025258:	2020      	movs	r0, #32
 802525a:	4770      	bx	lr

0802525c <__i2b>:
 802525c:	b510      	push	{r4, lr}
 802525e:	460c      	mov	r4, r1
 8025260:	2101      	movs	r1, #1
 8025262:	f7ff feff 	bl	8025064 <_Balloc>
 8025266:	4602      	mov	r2, r0
 8025268:	b928      	cbnz	r0, 8025276 <__i2b+0x1a>
 802526a:	4b05      	ldr	r3, [pc, #20]	; (8025280 <__i2b+0x24>)
 802526c:	4805      	ldr	r0, [pc, #20]	; (8025284 <__i2b+0x28>)
 802526e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8025272:	f7fe fd3d 	bl	8023cf0 <__assert_func>
 8025276:	2301      	movs	r3, #1
 8025278:	6144      	str	r4, [r0, #20]
 802527a:	6103      	str	r3, [r0, #16]
 802527c:	bd10      	pop	{r4, pc}
 802527e:	bf00      	nop
 8025280:	08042359 	.word	0x08042359
 8025284:	080423d6 	.word	0x080423d6

08025288 <__multiply>:
 8025288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802528c:	4614      	mov	r4, r2
 802528e:	690a      	ldr	r2, [r1, #16]
 8025290:	6923      	ldr	r3, [r4, #16]
 8025292:	429a      	cmp	r2, r3
 8025294:	bfb8      	it	lt
 8025296:	460b      	movlt	r3, r1
 8025298:	460d      	mov	r5, r1
 802529a:	bfbc      	itt	lt
 802529c:	4625      	movlt	r5, r4
 802529e:	461c      	movlt	r4, r3
 80252a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80252a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80252a8:	68ab      	ldr	r3, [r5, #8]
 80252aa:	6869      	ldr	r1, [r5, #4]
 80252ac:	eb0a 0709 	add.w	r7, sl, r9
 80252b0:	42bb      	cmp	r3, r7
 80252b2:	b085      	sub	sp, #20
 80252b4:	bfb8      	it	lt
 80252b6:	3101      	addlt	r1, #1
 80252b8:	f7ff fed4 	bl	8025064 <_Balloc>
 80252bc:	b930      	cbnz	r0, 80252cc <__multiply+0x44>
 80252be:	4602      	mov	r2, r0
 80252c0:	4b42      	ldr	r3, [pc, #264]	; (80253cc <__multiply+0x144>)
 80252c2:	4843      	ldr	r0, [pc, #268]	; (80253d0 <__multiply+0x148>)
 80252c4:	f240 115d 	movw	r1, #349	; 0x15d
 80252c8:	f7fe fd12 	bl	8023cf0 <__assert_func>
 80252cc:	f100 0614 	add.w	r6, r0, #20
 80252d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80252d4:	4633      	mov	r3, r6
 80252d6:	2200      	movs	r2, #0
 80252d8:	4543      	cmp	r3, r8
 80252da:	d31e      	bcc.n	802531a <__multiply+0x92>
 80252dc:	f105 0c14 	add.w	ip, r5, #20
 80252e0:	f104 0314 	add.w	r3, r4, #20
 80252e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80252e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80252ec:	9202      	str	r2, [sp, #8]
 80252ee:	ebac 0205 	sub.w	r2, ip, r5
 80252f2:	3a15      	subs	r2, #21
 80252f4:	f022 0203 	bic.w	r2, r2, #3
 80252f8:	3204      	adds	r2, #4
 80252fa:	f105 0115 	add.w	r1, r5, #21
 80252fe:	458c      	cmp	ip, r1
 8025300:	bf38      	it	cc
 8025302:	2204      	movcc	r2, #4
 8025304:	9201      	str	r2, [sp, #4]
 8025306:	9a02      	ldr	r2, [sp, #8]
 8025308:	9303      	str	r3, [sp, #12]
 802530a:	429a      	cmp	r2, r3
 802530c:	d808      	bhi.n	8025320 <__multiply+0x98>
 802530e:	2f00      	cmp	r7, #0
 8025310:	dc55      	bgt.n	80253be <__multiply+0x136>
 8025312:	6107      	str	r7, [r0, #16]
 8025314:	b005      	add	sp, #20
 8025316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802531a:	f843 2b04 	str.w	r2, [r3], #4
 802531e:	e7db      	b.n	80252d8 <__multiply+0x50>
 8025320:	f8b3 a000 	ldrh.w	sl, [r3]
 8025324:	f1ba 0f00 	cmp.w	sl, #0
 8025328:	d020      	beq.n	802536c <__multiply+0xe4>
 802532a:	f105 0e14 	add.w	lr, r5, #20
 802532e:	46b1      	mov	r9, r6
 8025330:	2200      	movs	r2, #0
 8025332:	f85e 4b04 	ldr.w	r4, [lr], #4
 8025336:	f8d9 b000 	ldr.w	fp, [r9]
 802533a:	b2a1      	uxth	r1, r4
 802533c:	fa1f fb8b 	uxth.w	fp, fp
 8025340:	fb0a b101 	mla	r1, sl, r1, fp
 8025344:	4411      	add	r1, r2
 8025346:	f8d9 2000 	ldr.w	r2, [r9]
 802534a:	0c24      	lsrs	r4, r4, #16
 802534c:	0c12      	lsrs	r2, r2, #16
 802534e:	fb0a 2404 	mla	r4, sl, r4, r2
 8025352:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8025356:	b289      	uxth	r1, r1
 8025358:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802535c:	45f4      	cmp	ip, lr
 802535e:	f849 1b04 	str.w	r1, [r9], #4
 8025362:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8025366:	d8e4      	bhi.n	8025332 <__multiply+0xaa>
 8025368:	9901      	ldr	r1, [sp, #4]
 802536a:	5072      	str	r2, [r6, r1]
 802536c:	9a03      	ldr	r2, [sp, #12]
 802536e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8025372:	3304      	adds	r3, #4
 8025374:	f1b9 0f00 	cmp.w	r9, #0
 8025378:	d01f      	beq.n	80253ba <__multiply+0x132>
 802537a:	6834      	ldr	r4, [r6, #0]
 802537c:	f105 0114 	add.w	r1, r5, #20
 8025380:	46b6      	mov	lr, r6
 8025382:	f04f 0a00 	mov.w	sl, #0
 8025386:	880a      	ldrh	r2, [r1, #0]
 8025388:	f8be b002 	ldrh.w	fp, [lr, #2]
 802538c:	fb09 b202 	mla	r2, r9, r2, fp
 8025390:	4492      	add	sl, r2
 8025392:	b2a4      	uxth	r4, r4
 8025394:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8025398:	f84e 4b04 	str.w	r4, [lr], #4
 802539c:	f851 4b04 	ldr.w	r4, [r1], #4
 80253a0:	f8be 2000 	ldrh.w	r2, [lr]
 80253a4:	0c24      	lsrs	r4, r4, #16
 80253a6:	fb09 2404 	mla	r4, r9, r4, r2
 80253aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80253ae:	458c      	cmp	ip, r1
 80253b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80253b4:	d8e7      	bhi.n	8025386 <__multiply+0xfe>
 80253b6:	9a01      	ldr	r2, [sp, #4]
 80253b8:	50b4      	str	r4, [r6, r2]
 80253ba:	3604      	adds	r6, #4
 80253bc:	e7a3      	b.n	8025306 <__multiply+0x7e>
 80253be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80253c2:	2b00      	cmp	r3, #0
 80253c4:	d1a5      	bne.n	8025312 <__multiply+0x8a>
 80253c6:	3f01      	subs	r7, #1
 80253c8:	e7a1      	b.n	802530e <__multiply+0x86>
 80253ca:	bf00      	nop
 80253cc:	08042359 	.word	0x08042359
 80253d0:	080423d6 	.word	0x080423d6

080253d4 <__pow5mult>:
 80253d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80253d8:	4615      	mov	r5, r2
 80253da:	f012 0203 	ands.w	r2, r2, #3
 80253de:	4606      	mov	r6, r0
 80253e0:	460f      	mov	r7, r1
 80253e2:	d007      	beq.n	80253f4 <__pow5mult+0x20>
 80253e4:	4c25      	ldr	r4, [pc, #148]	; (802547c <__pow5mult+0xa8>)
 80253e6:	3a01      	subs	r2, #1
 80253e8:	2300      	movs	r3, #0
 80253ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80253ee:	f7ff fe9b 	bl	8025128 <__multadd>
 80253f2:	4607      	mov	r7, r0
 80253f4:	10ad      	asrs	r5, r5, #2
 80253f6:	d03d      	beq.n	8025474 <__pow5mult+0xa0>
 80253f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80253fa:	b97c      	cbnz	r4, 802541c <__pow5mult+0x48>
 80253fc:	2010      	movs	r0, #16
 80253fe:	f7fc f8a9 	bl	8021554 <malloc>
 8025402:	4602      	mov	r2, r0
 8025404:	6270      	str	r0, [r6, #36]	; 0x24
 8025406:	b928      	cbnz	r0, 8025414 <__pow5mult+0x40>
 8025408:	4b1d      	ldr	r3, [pc, #116]	; (8025480 <__pow5mult+0xac>)
 802540a:	481e      	ldr	r0, [pc, #120]	; (8025484 <__pow5mult+0xb0>)
 802540c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8025410:	f7fe fc6e 	bl	8023cf0 <__assert_func>
 8025414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8025418:	6004      	str	r4, [r0, #0]
 802541a:	60c4      	str	r4, [r0, #12]
 802541c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8025420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8025424:	b94c      	cbnz	r4, 802543a <__pow5mult+0x66>
 8025426:	f240 2171 	movw	r1, #625	; 0x271
 802542a:	4630      	mov	r0, r6
 802542c:	f7ff ff16 	bl	802525c <__i2b>
 8025430:	2300      	movs	r3, #0
 8025432:	f8c8 0008 	str.w	r0, [r8, #8]
 8025436:	4604      	mov	r4, r0
 8025438:	6003      	str	r3, [r0, #0]
 802543a:	f04f 0900 	mov.w	r9, #0
 802543e:	07eb      	lsls	r3, r5, #31
 8025440:	d50a      	bpl.n	8025458 <__pow5mult+0x84>
 8025442:	4639      	mov	r1, r7
 8025444:	4622      	mov	r2, r4
 8025446:	4630      	mov	r0, r6
 8025448:	f7ff ff1e 	bl	8025288 <__multiply>
 802544c:	4639      	mov	r1, r7
 802544e:	4680      	mov	r8, r0
 8025450:	4630      	mov	r0, r6
 8025452:	f7ff fe47 	bl	80250e4 <_Bfree>
 8025456:	4647      	mov	r7, r8
 8025458:	106d      	asrs	r5, r5, #1
 802545a:	d00b      	beq.n	8025474 <__pow5mult+0xa0>
 802545c:	6820      	ldr	r0, [r4, #0]
 802545e:	b938      	cbnz	r0, 8025470 <__pow5mult+0x9c>
 8025460:	4622      	mov	r2, r4
 8025462:	4621      	mov	r1, r4
 8025464:	4630      	mov	r0, r6
 8025466:	f7ff ff0f 	bl	8025288 <__multiply>
 802546a:	6020      	str	r0, [r4, #0]
 802546c:	f8c0 9000 	str.w	r9, [r0]
 8025470:	4604      	mov	r4, r0
 8025472:	e7e4      	b.n	802543e <__pow5mult+0x6a>
 8025474:	4638      	mov	r0, r7
 8025476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802547a:	bf00      	nop
 802547c:	08042528 	.word	0x08042528
 8025480:	08041d70 	.word	0x08041d70
 8025484:	080423d6 	.word	0x080423d6

08025488 <__lshift>:
 8025488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802548c:	460c      	mov	r4, r1
 802548e:	6849      	ldr	r1, [r1, #4]
 8025490:	6923      	ldr	r3, [r4, #16]
 8025492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8025496:	68a3      	ldr	r3, [r4, #8]
 8025498:	4607      	mov	r7, r0
 802549a:	4691      	mov	r9, r2
 802549c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80254a0:	f108 0601 	add.w	r6, r8, #1
 80254a4:	42b3      	cmp	r3, r6
 80254a6:	db0b      	blt.n	80254c0 <__lshift+0x38>
 80254a8:	4638      	mov	r0, r7
 80254aa:	f7ff fddb 	bl	8025064 <_Balloc>
 80254ae:	4605      	mov	r5, r0
 80254b0:	b948      	cbnz	r0, 80254c6 <__lshift+0x3e>
 80254b2:	4602      	mov	r2, r0
 80254b4:	4b28      	ldr	r3, [pc, #160]	; (8025558 <__lshift+0xd0>)
 80254b6:	4829      	ldr	r0, [pc, #164]	; (802555c <__lshift+0xd4>)
 80254b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80254bc:	f7fe fc18 	bl	8023cf0 <__assert_func>
 80254c0:	3101      	adds	r1, #1
 80254c2:	005b      	lsls	r3, r3, #1
 80254c4:	e7ee      	b.n	80254a4 <__lshift+0x1c>
 80254c6:	2300      	movs	r3, #0
 80254c8:	f100 0114 	add.w	r1, r0, #20
 80254cc:	f100 0210 	add.w	r2, r0, #16
 80254d0:	4618      	mov	r0, r3
 80254d2:	4553      	cmp	r3, sl
 80254d4:	db33      	blt.n	802553e <__lshift+0xb6>
 80254d6:	6920      	ldr	r0, [r4, #16]
 80254d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80254dc:	f104 0314 	add.w	r3, r4, #20
 80254e0:	f019 091f 	ands.w	r9, r9, #31
 80254e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80254e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80254ec:	d02b      	beq.n	8025546 <__lshift+0xbe>
 80254ee:	f1c9 0e20 	rsb	lr, r9, #32
 80254f2:	468a      	mov	sl, r1
 80254f4:	2200      	movs	r2, #0
 80254f6:	6818      	ldr	r0, [r3, #0]
 80254f8:	fa00 f009 	lsl.w	r0, r0, r9
 80254fc:	4302      	orrs	r2, r0
 80254fe:	f84a 2b04 	str.w	r2, [sl], #4
 8025502:	f853 2b04 	ldr.w	r2, [r3], #4
 8025506:	459c      	cmp	ip, r3
 8025508:	fa22 f20e 	lsr.w	r2, r2, lr
 802550c:	d8f3      	bhi.n	80254f6 <__lshift+0x6e>
 802550e:	ebac 0304 	sub.w	r3, ip, r4
 8025512:	3b15      	subs	r3, #21
 8025514:	f023 0303 	bic.w	r3, r3, #3
 8025518:	3304      	adds	r3, #4
 802551a:	f104 0015 	add.w	r0, r4, #21
 802551e:	4584      	cmp	ip, r0
 8025520:	bf38      	it	cc
 8025522:	2304      	movcc	r3, #4
 8025524:	50ca      	str	r2, [r1, r3]
 8025526:	b10a      	cbz	r2, 802552c <__lshift+0xa4>
 8025528:	f108 0602 	add.w	r6, r8, #2
 802552c:	3e01      	subs	r6, #1
 802552e:	4638      	mov	r0, r7
 8025530:	612e      	str	r6, [r5, #16]
 8025532:	4621      	mov	r1, r4
 8025534:	f7ff fdd6 	bl	80250e4 <_Bfree>
 8025538:	4628      	mov	r0, r5
 802553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802553e:	f842 0f04 	str.w	r0, [r2, #4]!
 8025542:	3301      	adds	r3, #1
 8025544:	e7c5      	b.n	80254d2 <__lshift+0x4a>
 8025546:	3904      	subs	r1, #4
 8025548:	f853 2b04 	ldr.w	r2, [r3], #4
 802554c:	f841 2f04 	str.w	r2, [r1, #4]!
 8025550:	459c      	cmp	ip, r3
 8025552:	d8f9      	bhi.n	8025548 <__lshift+0xc0>
 8025554:	e7ea      	b.n	802552c <__lshift+0xa4>
 8025556:	bf00      	nop
 8025558:	08042359 	.word	0x08042359
 802555c:	080423d6 	.word	0x080423d6

08025560 <__mcmp>:
 8025560:	b530      	push	{r4, r5, lr}
 8025562:	6902      	ldr	r2, [r0, #16]
 8025564:	690c      	ldr	r4, [r1, #16]
 8025566:	1b12      	subs	r2, r2, r4
 8025568:	d10e      	bne.n	8025588 <__mcmp+0x28>
 802556a:	f100 0314 	add.w	r3, r0, #20
 802556e:	3114      	adds	r1, #20
 8025570:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8025574:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8025578:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802557c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8025580:	42a5      	cmp	r5, r4
 8025582:	d003      	beq.n	802558c <__mcmp+0x2c>
 8025584:	d305      	bcc.n	8025592 <__mcmp+0x32>
 8025586:	2201      	movs	r2, #1
 8025588:	4610      	mov	r0, r2
 802558a:	bd30      	pop	{r4, r5, pc}
 802558c:	4283      	cmp	r3, r0
 802558e:	d3f3      	bcc.n	8025578 <__mcmp+0x18>
 8025590:	e7fa      	b.n	8025588 <__mcmp+0x28>
 8025592:	f04f 32ff 	mov.w	r2, #4294967295
 8025596:	e7f7      	b.n	8025588 <__mcmp+0x28>

08025598 <__mdiff>:
 8025598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802559c:	460c      	mov	r4, r1
 802559e:	4606      	mov	r6, r0
 80255a0:	4611      	mov	r1, r2
 80255a2:	4620      	mov	r0, r4
 80255a4:	4617      	mov	r7, r2
 80255a6:	f7ff ffdb 	bl	8025560 <__mcmp>
 80255aa:	1e05      	subs	r5, r0, #0
 80255ac:	d110      	bne.n	80255d0 <__mdiff+0x38>
 80255ae:	4629      	mov	r1, r5
 80255b0:	4630      	mov	r0, r6
 80255b2:	f7ff fd57 	bl	8025064 <_Balloc>
 80255b6:	b930      	cbnz	r0, 80255c6 <__mdiff+0x2e>
 80255b8:	4b39      	ldr	r3, [pc, #228]	; (80256a0 <__mdiff+0x108>)
 80255ba:	4602      	mov	r2, r0
 80255bc:	f240 2132 	movw	r1, #562	; 0x232
 80255c0:	4838      	ldr	r0, [pc, #224]	; (80256a4 <__mdiff+0x10c>)
 80255c2:	f7fe fb95 	bl	8023cf0 <__assert_func>
 80255c6:	2301      	movs	r3, #1
 80255c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80255cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255d0:	bfa4      	itt	ge
 80255d2:	463b      	movge	r3, r7
 80255d4:	4627      	movge	r7, r4
 80255d6:	4630      	mov	r0, r6
 80255d8:	6879      	ldr	r1, [r7, #4]
 80255da:	bfa6      	itte	ge
 80255dc:	461c      	movge	r4, r3
 80255de:	2500      	movge	r5, #0
 80255e0:	2501      	movlt	r5, #1
 80255e2:	f7ff fd3f 	bl	8025064 <_Balloc>
 80255e6:	b920      	cbnz	r0, 80255f2 <__mdiff+0x5a>
 80255e8:	4b2d      	ldr	r3, [pc, #180]	; (80256a0 <__mdiff+0x108>)
 80255ea:	4602      	mov	r2, r0
 80255ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 80255f0:	e7e6      	b.n	80255c0 <__mdiff+0x28>
 80255f2:	693e      	ldr	r6, [r7, #16]
 80255f4:	60c5      	str	r5, [r0, #12]
 80255f6:	6925      	ldr	r5, [r4, #16]
 80255f8:	f107 0114 	add.w	r1, r7, #20
 80255fc:	f104 0914 	add.w	r9, r4, #20
 8025600:	f100 0e14 	add.w	lr, r0, #20
 8025604:	f107 0210 	add.w	r2, r7, #16
 8025608:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802560c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8025610:	46f2      	mov	sl, lr
 8025612:	2700      	movs	r7, #0
 8025614:	f859 3b04 	ldr.w	r3, [r9], #4
 8025618:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802561c:	fa1f f883 	uxth.w	r8, r3
 8025620:	fa17 f78b 	uxtah	r7, r7, fp
 8025624:	0c1b      	lsrs	r3, r3, #16
 8025626:	eba7 0808 	sub.w	r8, r7, r8
 802562a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802562e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8025632:	fa1f f888 	uxth.w	r8, r8
 8025636:	141f      	asrs	r7, r3, #16
 8025638:	454d      	cmp	r5, r9
 802563a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802563e:	f84a 3b04 	str.w	r3, [sl], #4
 8025642:	d8e7      	bhi.n	8025614 <__mdiff+0x7c>
 8025644:	1b2b      	subs	r3, r5, r4
 8025646:	3b15      	subs	r3, #21
 8025648:	f023 0303 	bic.w	r3, r3, #3
 802564c:	3304      	adds	r3, #4
 802564e:	3415      	adds	r4, #21
 8025650:	42a5      	cmp	r5, r4
 8025652:	bf38      	it	cc
 8025654:	2304      	movcc	r3, #4
 8025656:	4419      	add	r1, r3
 8025658:	4473      	add	r3, lr
 802565a:	469e      	mov	lr, r3
 802565c:	460d      	mov	r5, r1
 802565e:	4565      	cmp	r5, ip
 8025660:	d30e      	bcc.n	8025680 <__mdiff+0xe8>
 8025662:	f10c 0203 	add.w	r2, ip, #3
 8025666:	1a52      	subs	r2, r2, r1
 8025668:	f022 0203 	bic.w	r2, r2, #3
 802566c:	3903      	subs	r1, #3
 802566e:	458c      	cmp	ip, r1
 8025670:	bf38      	it	cc
 8025672:	2200      	movcc	r2, #0
 8025674:	441a      	add	r2, r3
 8025676:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802567a:	b17b      	cbz	r3, 802569c <__mdiff+0x104>
 802567c:	6106      	str	r6, [r0, #16]
 802567e:	e7a5      	b.n	80255cc <__mdiff+0x34>
 8025680:	f855 8b04 	ldr.w	r8, [r5], #4
 8025684:	fa17 f488 	uxtah	r4, r7, r8
 8025688:	1422      	asrs	r2, r4, #16
 802568a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802568e:	b2a4      	uxth	r4, r4
 8025690:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8025694:	f84e 4b04 	str.w	r4, [lr], #4
 8025698:	1417      	asrs	r7, r2, #16
 802569a:	e7e0      	b.n	802565e <__mdiff+0xc6>
 802569c:	3e01      	subs	r6, #1
 802569e:	e7ea      	b.n	8025676 <__mdiff+0xde>
 80256a0:	08042359 	.word	0x08042359
 80256a4:	080423d6 	.word	0x080423d6

080256a8 <__d2b>:
 80256a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80256ac:	4689      	mov	r9, r1
 80256ae:	2101      	movs	r1, #1
 80256b0:	ec57 6b10 	vmov	r6, r7, d0
 80256b4:	4690      	mov	r8, r2
 80256b6:	f7ff fcd5 	bl	8025064 <_Balloc>
 80256ba:	4604      	mov	r4, r0
 80256bc:	b930      	cbnz	r0, 80256cc <__d2b+0x24>
 80256be:	4602      	mov	r2, r0
 80256c0:	4b25      	ldr	r3, [pc, #148]	; (8025758 <__d2b+0xb0>)
 80256c2:	4826      	ldr	r0, [pc, #152]	; (802575c <__d2b+0xb4>)
 80256c4:	f240 310a 	movw	r1, #778	; 0x30a
 80256c8:	f7fe fb12 	bl	8023cf0 <__assert_func>
 80256cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80256d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80256d4:	bb35      	cbnz	r5, 8025724 <__d2b+0x7c>
 80256d6:	2e00      	cmp	r6, #0
 80256d8:	9301      	str	r3, [sp, #4]
 80256da:	d028      	beq.n	802572e <__d2b+0x86>
 80256dc:	4668      	mov	r0, sp
 80256de:	9600      	str	r6, [sp, #0]
 80256e0:	f7ff fd8c 	bl	80251fc <__lo0bits>
 80256e4:	9900      	ldr	r1, [sp, #0]
 80256e6:	b300      	cbz	r0, 802572a <__d2b+0x82>
 80256e8:	9a01      	ldr	r2, [sp, #4]
 80256ea:	f1c0 0320 	rsb	r3, r0, #32
 80256ee:	fa02 f303 	lsl.w	r3, r2, r3
 80256f2:	430b      	orrs	r3, r1
 80256f4:	40c2      	lsrs	r2, r0
 80256f6:	6163      	str	r3, [r4, #20]
 80256f8:	9201      	str	r2, [sp, #4]
 80256fa:	9b01      	ldr	r3, [sp, #4]
 80256fc:	61a3      	str	r3, [r4, #24]
 80256fe:	2b00      	cmp	r3, #0
 8025700:	bf14      	ite	ne
 8025702:	2202      	movne	r2, #2
 8025704:	2201      	moveq	r2, #1
 8025706:	6122      	str	r2, [r4, #16]
 8025708:	b1d5      	cbz	r5, 8025740 <__d2b+0x98>
 802570a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802570e:	4405      	add	r5, r0
 8025710:	f8c9 5000 	str.w	r5, [r9]
 8025714:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8025718:	f8c8 0000 	str.w	r0, [r8]
 802571c:	4620      	mov	r0, r4
 802571e:	b003      	add	sp, #12
 8025720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8025728:	e7d5      	b.n	80256d6 <__d2b+0x2e>
 802572a:	6161      	str	r1, [r4, #20]
 802572c:	e7e5      	b.n	80256fa <__d2b+0x52>
 802572e:	a801      	add	r0, sp, #4
 8025730:	f7ff fd64 	bl	80251fc <__lo0bits>
 8025734:	9b01      	ldr	r3, [sp, #4]
 8025736:	6163      	str	r3, [r4, #20]
 8025738:	2201      	movs	r2, #1
 802573a:	6122      	str	r2, [r4, #16]
 802573c:	3020      	adds	r0, #32
 802573e:	e7e3      	b.n	8025708 <__d2b+0x60>
 8025740:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8025744:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8025748:	f8c9 0000 	str.w	r0, [r9]
 802574c:	6918      	ldr	r0, [r3, #16]
 802574e:	f7ff fd35 	bl	80251bc <__hi0bits>
 8025752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8025756:	e7df      	b.n	8025718 <__d2b+0x70>
 8025758:	08042359 	.word	0x08042359
 802575c:	080423d6 	.word	0x080423d6

08025760 <_calloc_r>:
 8025760:	b513      	push	{r0, r1, r4, lr}
 8025762:	434a      	muls	r2, r1
 8025764:	4611      	mov	r1, r2
 8025766:	9201      	str	r2, [sp, #4]
 8025768:	f7fc fa10 	bl	8021b8c <_malloc_r>
 802576c:	4604      	mov	r4, r0
 802576e:	b118      	cbz	r0, 8025778 <_calloc_r+0x18>
 8025770:	9a01      	ldr	r2, [sp, #4]
 8025772:	2100      	movs	r1, #0
 8025774:	f7fb ff34 	bl	80215e0 <memset>
 8025778:	4620      	mov	r0, r4
 802577a:	b002      	add	sp, #8
 802577c:	bd10      	pop	{r4, pc}

0802577e <_realloc_r>:
 802577e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025780:	4607      	mov	r7, r0
 8025782:	4614      	mov	r4, r2
 8025784:	460e      	mov	r6, r1
 8025786:	b921      	cbnz	r1, 8025792 <_realloc_r+0x14>
 8025788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802578c:	4611      	mov	r1, r2
 802578e:	f7fc b9fd 	b.w	8021b8c <_malloc_r>
 8025792:	b922      	cbnz	r2, 802579e <_realloc_r+0x20>
 8025794:	f7fc f9aa 	bl	8021aec <_free_r>
 8025798:	4625      	mov	r5, r4
 802579a:	4628      	mov	r0, r5
 802579c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802579e:	f000 fef7 	bl	8026590 <_malloc_usable_size_r>
 80257a2:	42a0      	cmp	r0, r4
 80257a4:	d20f      	bcs.n	80257c6 <_realloc_r+0x48>
 80257a6:	4621      	mov	r1, r4
 80257a8:	4638      	mov	r0, r7
 80257aa:	f7fc f9ef 	bl	8021b8c <_malloc_r>
 80257ae:	4605      	mov	r5, r0
 80257b0:	2800      	cmp	r0, #0
 80257b2:	d0f2      	beq.n	802579a <_realloc_r+0x1c>
 80257b4:	4631      	mov	r1, r6
 80257b6:	4622      	mov	r2, r4
 80257b8:	f7fb feea 	bl	8021590 <memcpy>
 80257bc:	4631      	mov	r1, r6
 80257be:	4638      	mov	r0, r7
 80257c0:	f7fc f994 	bl	8021aec <_free_r>
 80257c4:	e7e9      	b.n	802579a <_realloc_r+0x1c>
 80257c6:	4635      	mov	r5, r6
 80257c8:	e7e7      	b.n	802579a <_realloc_r+0x1c>

080257ca <__ssputs_r>:
 80257ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80257ce:	688e      	ldr	r6, [r1, #8]
 80257d0:	429e      	cmp	r6, r3
 80257d2:	4682      	mov	sl, r0
 80257d4:	460c      	mov	r4, r1
 80257d6:	4690      	mov	r8, r2
 80257d8:	461f      	mov	r7, r3
 80257da:	d838      	bhi.n	802584e <__ssputs_r+0x84>
 80257dc:	898a      	ldrh	r2, [r1, #12]
 80257de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80257e2:	d032      	beq.n	802584a <__ssputs_r+0x80>
 80257e4:	6825      	ldr	r5, [r4, #0]
 80257e6:	6909      	ldr	r1, [r1, #16]
 80257e8:	eba5 0901 	sub.w	r9, r5, r1
 80257ec:	6965      	ldr	r5, [r4, #20]
 80257ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80257f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80257f6:	3301      	adds	r3, #1
 80257f8:	444b      	add	r3, r9
 80257fa:	106d      	asrs	r5, r5, #1
 80257fc:	429d      	cmp	r5, r3
 80257fe:	bf38      	it	cc
 8025800:	461d      	movcc	r5, r3
 8025802:	0553      	lsls	r3, r2, #21
 8025804:	d531      	bpl.n	802586a <__ssputs_r+0xa0>
 8025806:	4629      	mov	r1, r5
 8025808:	f7fc f9c0 	bl	8021b8c <_malloc_r>
 802580c:	4606      	mov	r6, r0
 802580e:	b950      	cbnz	r0, 8025826 <__ssputs_r+0x5c>
 8025810:	230c      	movs	r3, #12
 8025812:	f8ca 3000 	str.w	r3, [sl]
 8025816:	89a3      	ldrh	r3, [r4, #12]
 8025818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802581c:	81a3      	strh	r3, [r4, #12]
 802581e:	f04f 30ff 	mov.w	r0, #4294967295
 8025822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025826:	6921      	ldr	r1, [r4, #16]
 8025828:	464a      	mov	r2, r9
 802582a:	f7fb feb1 	bl	8021590 <memcpy>
 802582e:	89a3      	ldrh	r3, [r4, #12]
 8025830:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8025834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025838:	81a3      	strh	r3, [r4, #12]
 802583a:	6126      	str	r6, [r4, #16]
 802583c:	6165      	str	r5, [r4, #20]
 802583e:	444e      	add	r6, r9
 8025840:	eba5 0509 	sub.w	r5, r5, r9
 8025844:	6026      	str	r6, [r4, #0]
 8025846:	60a5      	str	r5, [r4, #8]
 8025848:	463e      	mov	r6, r7
 802584a:	42be      	cmp	r6, r7
 802584c:	d900      	bls.n	8025850 <__ssputs_r+0x86>
 802584e:	463e      	mov	r6, r7
 8025850:	4632      	mov	r2, r6
 8025852:	6820      	ldr	r0, [r4, #0]
 8025854:	4641      	mov	r1, r8
 8025856:	f7fb fea9 	bl	80215ac <memmove>
 802585a:	68a3      	ldr	r3, [r4, #8]
 802585c:	6822      	ldr	r2, [r4, #0]
 802585e:	1b9b      	subs	r3, r3, r6
 8025860:	4432      	add	r2, r6
 8025862:	60a3      	str	r3, [r4, #8]
 8025864:	6022      	str	r2, [r4, #0]
 8025866:	2000      	movs	r0, #0
 8025868:	e7db      	b.n	8025822 <__ssputs_r+0x58>
 802586a:	462a      	mov	r2, r5
 802586c:	f7ff ff87 	bl	802577e <_realloc_r>
 8025870:	4606      	mov	r6, r0
 8025872:	2800      	cmp	r0, #0
 8025874:	d1e1      	bne.n	802583a <__ssputs_r+0x70>
 8025876:	6921      	ldr	r1, [r4, #16]
 8025878:	4650      	mov	r0, sl
 802587a:	f7fc f937 	bl	8021aec <_free_r>
 802587e:	e7c7      	b.n	8025810 <__ssputs_r+0x46>

08025880 <_svfiprintf_r>:
 8025880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025884:	4698      	mov	r8, r3
 8025886:	898b      	ldrh	r3, [r1, #12]
 8025888:	061b      	lsls	r3, r3, #24
 802588a:	b09d      	sub	sp, #116	; 0x74
 802588c:	4607      	mov	r7, r0
 802588e:	460d      	mov	r5, r1
 8025890:	4614      	mov	r4, r2
 8025892:	d50e      	bpl.n	80258b2 <_svfiprintf_r+0x32>
 8025894:	690b      	ldr	r3, [r1, #16]
 8025896:	b963      	cbnz	r3, 80258b2 <_svfiprintf_r+0x32>
 8025898:	2140      	movs	r1, #64	; 0x40
 802589a:	f7fc f977 	bl	8021b8c <_malloc_r>
 802589e:	6028      	str	r0, [r5, #0]
 80258a0:	6128      	str	r0, [r5, #16]
 80258a2:	b920      	cbnz	r0, 80258ae <_svfiprintf_r+0x2e>
 80258a4:	230c      	movs	r3, #12
 80258a6:	603b      	str	r3, [r7, #0]
 80258a8:	f04f 30ff 	mov.w	r0, #4294967295
 80258ac:	e0d1      	b.n	8025a52 <_svfiprintf_r+0x1d2>
 80258ae:	2340      	movs	r3, #64	; 0x40
 80258b0:	616b      	str	r3, [r5, #20]
 80258b2:	2300      	movs	r3, #0
 80258b4:	9309      	str	r3, [sp, #36]	; 0x24
 80258b6:	2320      	movs	r3, #32
 80258b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80258bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80258c0:	2330      	movs	r3, #48	; 0x30
 80258c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8025a6c <_svfiprintf_r+0x1ec>
 80258c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80258ca:	f04f 0901 	mov.w	r9, #1
 80258ce:	4623      	mov	r3, r4
 80258d0:	469a      	mov	sl, r3
 80258d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80258d6:	b10a      	cbz	r2, 80258dc <_svfiprintf_r+0x5c>
 80258d8:	2a25      	cmp	r2, #37	; 0x25
 80258da:	d1f9      	bne.n	80258d0 <_svfiprintf_r+0x50>
 80258dc:	ebba 0b04 	subs.w	fp, sl, r4
 80258e0:	d00b      	beq.n	80258fa <_svfiprintf_r+0x7a>
 80258e2:	465b      	mov	r3, fp
 80258e4:	4622      	mov	r2, r4
 80258e6:	4629      	mov	r1, r5
 80258e8:	4638      	mov	r0, r7
 80258ea:	f7ff ff6e 	bl	80257ca <__ssputs_r>
 80258ee:	3001      	adds	r0, #1
 80258f0:	f000 80aa 	beq.w	8025a48 <_svfiprintf_r+0x1c8>
 80258f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80258f6:	445a      	add	r2, fp
 80258f8:	9209      	str	r2, [sp, #36]	; 0x24
 80258fa:	f89a 3000 	ldrb.w	r3, [sl]
 80258fe:	2b00      	cmp	r3, #0
 8025900:	f000 80a2 	beq.w	8025a48 <_svfiprintf_r+0x1c8>
 8025904:	2300      	movs	r3, #0
 8025906:	f04f 32ff 	mov.w	r2, #4294967295
 802590a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802590e:	f10a 0a01 	add.w	sl, sl, #1
 8025912:	9304      	str	r3, [sp, #16]
 8025914:	9307      	str	r3, [sp, #28]
 8025916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802591a:	931a      	str	r3, [sp, #104]	; 0x68
 802591c:	4654      	mov	r4, sl
 802591e:	2205      	movs	r2, #5
 8025920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025924:	4851      	ldr	r0, [pc, #324]	; (8025a6c <_svfiprintf_r+0x1ec>)
 8025926:	f7da fca3 	bl	8000270 <memchr>
 802592a:	9a04      	ldr	r2, [sp, #16]
 802592c:	b9d8      	cbnz	r0, 8025966 <_svfiprintf_r+0xe6>
 802592e:	06d0      	lsls	r0, r2, #27
 8025930:	bf44      	itt	mi
 8025932:	2320      	movmi	r3, #32
 8025934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025938:	0711      	lsls	r1, r2, #28
 802593a:	bf44      	itt	mi
 802593c:	232b      	movmi	r3, #43	; 0x2b
 802593e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025942:	f89a 3000 	ldrb.w	r3, [sl]
 8025946:	2b2a      	cmp	r3, #42	; 0x2a
 8025948:	d015      	beq.n	8025976 <_svfiprintf_r+0xf6>
 802594a:	9a07      	ldr	r2, [sp, #28]
 802594c:	4654      	mov	r4, sl
 802594e:	2000      	movs	r0, #0
 8025950:	f04f 0c0a 	mov.w	ip, #10
 8025954:	4621      	mov	r1, r4
 8025956:	f811 3b01 	ldrb.w	r3, [r1], #1
 802595a:	3b30      	subs	r3, #48	; 0x30
 802595c:	2b09      	cmp	r3, #9
 802595e:	d94e      	bls.n	80259fe <_svfiprintf_r+0x17e>
 8025960:	b1b0      	cbz	r0, 8025990 <_svfiprintf_r+0x110>
 8025962:	9207      	str	r2, [sp, #28]
 8025964:	e014      	b.n	8025990 <_svfiprintf_r+0x110>
 8025966:	eba0 0308 	sub.w	r3, r0, r8
 802596a:	fa09 f303 	lsl.w	r3, r9, r3
 802596e:	4313      	orrs	r3, r2
 8025970:	9304      	str	r3, [sp, #16]
 8025972:	46a2      	mov	sl, r4
 8025974:	e7d2      	b.n	802591c <_svfiprintf_r+0x9c>
 8025976:	9b03      	ldr	r3, [sp, #12]
 8025978:	1d19      	adds	r1, r3, #4
 802597a:	681b      	ldr	r3, [r3, #0]
 802597c:	9103      	str	r1, [sp, #12]
 802597e:	2b00      	cmp	r3, #0
 8025980:	bfbb      	ittet	lt
 8025982:	425b      	neglt	r3, r3
 8025984:	f042 0202 	orrlt.w	r2, r2, #2
 8025988:	9307      	strge	r3, [sp, #28]
 802598a:	9307      	strlt	r3, [sp, #28]
 802598c:	bfb8      	it	lt
 802598e:	9204      	strlt	r2, [sp, #16]
 8025990:	7823      	ldrb	r3, [r4, #0]
 8025992:	2b2e      	cmp	r3, #46	; 0x2e
 8025994:	d10c      	bne.n	80259b0 <_svfiprintf_r+0x130>
 8025996:	7863      	ldrb	r3, [r4, #1]
 8025998:	2b2a      	cmp	r3, #42	; 0x2a
 802599a:	d135      	bne.n	8025a08 <_svfiprintf_r+0x188>
 802599c:	9b03      	ldr	r3, [sp, #12]
 802599e:	1d1a      	adds	r2, r3, #4
 80259a0:	681b      	ldr	r3, [r3, #0]
 80259a2:	9203      	str	r2, [sp, #12]
 80259a4:	2b00      	cmp	r3, #0
 80259a6:	bfb8      	it	lt
 80259a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80259ac:	3402      	adds	r4, #2
 80259ae:	9305      	str	r3, [sp, #20]
 80259b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8025a7c <_svfiprintf_r+0x1fc>
 80259b4:	7821      	ldrb	r1, [r4, #0]
 80259b6:	2203      	movs	r2, #3
 80259b8:	4650      	mov	r0, sl
 80259ba:	f7da fc59 	bl	8000270 <memchr>
 80259be:	b140      	cbz	r0, 80259d2 <_svfiprintf_r+0x152>
 80259c0:	2340      	movs	r3, #64	; 0x40
 80259c2:	eba0 000a 	sub.w	r0, r0, sl
 80259c6:	fa03 f000 	lsl.w	r0, r3, r0
 80259ca:	9b04      	ldr	r3, [sp, #16]
 80259cc:	4303      	orrs	r3, r0
 80259ce:	3401      	adds	r4, #1
 80259d0:	9304      	str	r3, [sp, #16]
 80259d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80259d6:	4826      	ldr	r0, [pc, #152]	; (8025a70 <_svfiprintf_r+0x1f0>)
 80259d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80259dc:	2206      	movs	r2, #6
 80259de:	f7da fc47 	bl	8000270 <memchr>
 80259e2:	2800      	cmp	r0, #0
 80259e4:	d038      	beq.n	8025a58 <_svfiprintf_r+0x1d8>
 80259e6:	4b23      	ldr	r3, [pc, #140]	; (8025a74 <_svfiprintf_r+0x1f4>)
 80259e8:	bb1b      	cbnz	r3, 8025a32 <_svfiprintf_r+0x1b2>
 80259ea:	9b03      	ldr	r3, [sp, #12]
 80259ec:	3307      	adds	r3, #7
 80259ee:	f023 0307 	bic.w	r3, r3, #7
 80259f2:	3308      	adds	r3, #8
 80259f4:	9303      	str	r3, [sp, #12]
 80259f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259f8:	4433      	add	r3, r6
 80259fa:	9309      	str	r3, [sp, #36]	; 0x24
 80259fc:	e767      	b.n	80258ce <_svfiprintf_r+0x4e>
 80259fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8025a02:	460c      	mov	r4, r1
 8025a04:	2001      	movs	r0, #1
 8025a06:	e7a5      	b.n	8025954 <_svfiprintf_r+0xd4>
 8025a08:	2300      	movs	r3, #0
 8025a0a:	3401      	adds	r4, #1
 8025a0c:	9305      	str	r3, [sp, #20]
 8025a0e:	4619      	mov	r1, r3
 8025a10:	f04f 0c0a 	mov.w	ip, #10
 8025a14:	4620      	mov	r0, r4
 8025a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025a1a:	3a30      	subs	r2, #48	; 0x30
 8025a1c:	2a09      	cmp	r2, #9
 8025a1e:	d903      	bls.n	8025a28 <_svfiprintf_r+0x1a8>
 8025a20:	2b00      	cmp	r3, #0
 8025a22:	d0c5      	beq.n	80259b0 <_svfiprintf_r+0x130>
 8025a24:	9105      	str	r1, [sp, #20]
 8025a26:	e7c3      	b.n	80259b0 <_svfiprintf_r+0x130>
 8025a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8025a2c:	4604      	mov	r4, r0
 8025a2e:	2301      	movs	r3, #1
 8025a30:	e7f0      	b.n	8025a14 <_svfiprintf_r+0x194>
 8025a32:	ab03      	add	r3, sp, #12
 8025a34:	9300      	str	r3, [sp, #0]
 8025a36:	462a      	mov	r2, r5
 8025a38:	4b0f      	ldr	r3, [pc, #60]	; (8025a78 <_svfiprintf_r+0x1f8>)
 8025a3a:	a904      	add	r1, sp, #16
 8025a3c:	4638      	mov	r0, r7
 8025a3e:	f7fc f98f 	bl	8021d60 <_printf_float>
 8025a42:	1c42      	adds	r2, r0, #1
 8025a44:	4606      	mov	r6, r0
 8025a46:	d1d6      	bne.n	80259f6 <_svfiprintf_r+0x176>
 8025a48:	89ab      	ldrh	r3, [r5, #12]
 8025a4a:	065b      	lsls	r3, r3, #25
 8025a4c:	f53f af2c 	bmi.w	80258a8 <_svfiprintf_r+0x28>
 8025a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025a52:	b01d      	add	sp, #116	; 0x74
 8025a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a58:	ab03      	add	r3, sp, #12
 8025a5a:	9300      	str	r3, [sp, #0]
 8025a5c:	462a      	mov	r2, r5
 8025a5e:	4b06      	ldr	r3, [pc, #24]	; (8025a78 <_svfiprintf_r+0x1f8>)
 8025a60:	a904      	add	r1, sp, #16
 8025a62:	4638      	mov	r0, r7
 8025a64:	f7fc fc08 	bl	8022278 <_printf_i>
 8025a68:	e7eb      	b.n	8025a42 <_svfiprintf_r+0x1c2>
 8025a6a:	bf00      	nop
 8025a6c:	08042534 	.word	0x08042534
 8025a70:	0804253e 	.word	0x0804253e
 8025a74:	08021d61 	.word	0x08021d61
 8025a78:	080257cb 	.word	0x080257cb
 8025a7c:	0804253a 	.word	0x0804253a

08025a80 <_sungetc_r>:
 8025a80:	b538      	push	{r3, r4, r5, lr}
 8025a82:	1c4b      	adds	r3, r1, #1
 8025a84:	4614      	mov	r4, r2
 8025a86:	d103      	bne.n	8025a90 <_sungetc_r+0x10>
 8025a88:	f04f 35ff 	mov.w	r5, #4294967295
 8025a8c:	4628      	mov	r0, r5
 8025a8e:	bd38      	pop	{r3, r4, r5, pc}
 8025a90:	8993      	ldrh	r3, [r2, #12]
 8025a92:	f023 0320 	bic.w	r3, r3, #32
 8025a96:	8193      	strh	r3, [r2, #12]
 8025a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025a9a:	6852      	ldr	r2, [r2, #4]
 8025a9c:	b2cd      	uxtb	r5, r1
 8025a9e:	b18b      	cbz	r3, 8025ac4 <_sungetc_r+0x44>
 8025aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025aa2:	4293      	cmp	r3, r2
 8025aa4:	dd08      	ble.n	8025ab8 <_sungetc_r+0x38>
 8025aa6:	6823      	ldr	r3, [r4, #0]
 8025aa8:	1e5a      	subs	r2, r3, #1
 8025aaa:	6022      	str	r2, [r4, #0]
 8025aac:	f803 5c01 	strb.w	r5, [r3, #-1]
 8025ab0:	6863      	ldr	r3, [r4, #4]
 8025ab2:	3301      	adds	r3, #1
 8025ab4:	6063      	str	r3, [r4, #4]
 8025ab6:	e7e9      	b.n	8025a8c <_sungetc_r+0xc>
 8025ab8:	4621      	mov	r1, r4
 8025aba:	f000 fced 	bl	8026498 <__submore>
 8025abe:	2800      	cmp	r0, #0
 8025ac0:	d0f1      	beq.n	8025aa6 <_sungetc_r+0x26>
 8025ac2:	e7e1      	b.n	8025a88 <_sungetc_r+0x8>
 8025ac4:	6921      	ldr	r1, [r4, #16]
 8025ac6:	6823      	ldr	r3, [r4, #0]
 8025ac8:	b151      	cbz	r1, 8025ae0 <_sungetc_r+0x60>
 8025aca:	4299      	cmp	r1, r3
 8025acc:	d208      	bcs.n	8025ae0 <_sungetc_r+0x60>
 8025ace:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8025ad2:	42a9      	cmp	r1, r5
 8025ad4:	d104      	bne.n	8025ae0 <_sungetc_r+0x60>
 8025ad6:	3b01      	subs	r3, #1
 8025ad8:	3201      	adds	r2, #1
 8025ada:	6023      	str	r3, [r4, #0]
 8025adc:	6062      	str	r2, [r4, #4]
 8025ade:	e7d5      	b.n	8025a8c <_sungetc_r+0xc>
 8025ae0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8025ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8025aea:	2303      	movs	r3, #3
 8025aec:	63a3      	str	r3, [r4, #56]	; 0x38
 8025aee:	4623      	mov	r3, r4
 8025af0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8025af4:	6023      	str	r3, [r4, #0]
 8025af6:	2301      	movs	r3, #1
 8025af8:	e7dc      	b.n	8025ab4 <_sungetc_r+0x34>

08025afa <__ssrefill_r>:
 8025afa:	b510      	push	{r4, lr}
 8025afc:	460c      	mov	r4, r1
 8025afe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8025b00:	b169      	cbz	r1, 8025b1e <__ssrefill_r+0x24>
 8025b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025b06:	4299      	cmp	r1, r3
 8025b08:	d001      	beq.n	8025b0e <__ssrefill_r+0x14>
 8025b0a:	f7fb ffef 	bl	8021aec <_free_r>
 8025b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025b10:	6063      	str	r3, [r4, #4]
 8025b12:	2000      	movs	r0, #0
 8025b14:	6360      	str	r0, [r4, #52]	; 0x34
 8025b16:	b113      	cbz	r3, 8025b1e <__ssrefill_r+0x24>
 8025b18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025b1a:	6023      	str	r3, [r4, #0]
 8025b1c:	bd10      	pop	{r4, pc}
 8025b1e:	6923      	ldr	r3, [r4, #16]
 8025b20:	6023      	str	r3, [r4, #0]
 8025b22:	2300      	movs	r3, #0
 8025b24:	6063      	str	r3, [r4, #4]
 8025b26:	89a3      	ldrh	r3, [r4, #12]
 8025b28:	f043 0320 	orr.w	r3, r3, #32
 8025b2c:	81a3      	strh	r3, [r4, #12]
 8025b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8025b32:	e7f3      	b.n	8025b1c <__ssrefill_r+0x22>

08025b34 <__ssvfiscanf_r>:
 8025b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b38:	460c      	mov	r4, r1
 8025b3a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8025b3e:	2100      	movs	r1, #0
 8025b40:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8025b44:	49b2      	ldr	r1, [pc, #712]	; (8025e10 <__ssvfiscanf_r+0x2dc>)
 8025b46:	91a0      	str	r1, [sp, #640]	; 0x280
 8025b48:	f10d 0804 	add.w	r8, sp, #4
 8025b4c:	49b1      	ldr	r1, [pc, #708]	; (8025e14 <__ssvfiscanf_r+0x2e0>)
 8025b4e:	4fb2      	ldr	r7, [pc, #712]	; (8025e18 <__ssvfiscanf_r+0x2e4>)
 8025b50:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8025e1c <__ssvfiscanf_r+0x2e8>
 8025b54:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8025b58:	4606      	mov	r6, r0
 8025b5a:	91a1      	str	r1, [sp, #644]	; 0x284
 8025b5c:	9300      	str	r3, [sp, #0]
 8025b5e:	f892 a000 	ldrb.w	sl, [r2]
 8025b62:	f1ba 0f00 	cmp.w	sl, #0
 8025b66:	f000 8151 	beq.w	8025e0c <__ssvfiscanf_r+0x2d8>
 8025b6a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8025b6e:	f013 0308 	ands.w	r3, r3, #8
 8025b72:	f102 0501 	add.w	r5, r2, #1
 8025b76:	d019      	beq.n	8025bac <__ssvfiscanf_r+0x78>
 8025b78:	6863      	ldr	r3, [r4, #4]
 8025b7a:	2b00      	cmp	r3, #0
 8025b7c:	dd0f      	ble.n	8025b9e <__ssvfiscanf_r+0x6a>
 8025b7e:	6823      	ldr	r3, [r4, #0]
 8025b80:	781a      	ldrb	r2, [r3, #0]
 8025b82:	5cba      	ldrb	r2, [r7, r2]
 8025b84:	0712      	lsls	r2, r2, #28
 8025b86:	d401      	bmi.n	8025b8c <__ssvfiscanf_r+0x58>
 8025b88:	462a      	mov	r2, r5
 8025b8a:	e7e8      	b.n	8025b5e <__ssvfiscanf_r+0x2a>
 8025b8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8025b8e:	3201      	adds	r2, #1
 8025b90:	9245      	str	r2, [sp, #276]	; 0x114
 8025b92:	6862      	ldr	r2, [r4, #4]
 8025b94:	3301      	adds	r3, #1
 8025b96:	3a01      	subs	r2, #1
 8025b98:	6062      	str	r2, [r4, #4]
 8025b9a:	6023      	str	r3, [r4, #0]
 8025b9c:	e7ec      	b.n	8025b78 <__ssvfiscanf_r+0x44>
 8025b9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8025ba0:	4621      	mov	r1, r4
 8025ba2:	4630      	mov	r0, r6
 8025ba4:	4798      	blx	r3
 8025ba6:	2800      	cmp	r0, #0
 8025ba8:	d0e9      	beq.n	8025b7e <__ssvfiscanf_r+0x4a>
 8025baa:	e7ed      	b.n	8025b88 <__ssvfiscanf_r+0x54>
 8025bac:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8025bb0:	f040 8083 	bne.w	8025cba <__ssvfiscanf_r+0x186>
 8025bb4:	9341      	str	r3, [sp, #260]	; 0x104
 8025bb6:	9343      	str	r3, [sp, #268]	; 0x10c
 8025bb8:	7853      	ldrb	r3, [r2, #1]
 8025bba:	2b2a      	cmp	r3, #42	; 0x2a
 8025bbc:	bf02      	ittt	eq
 8025bbe:	2310      	moveq	r3, #16
 8025bc0:	1c95      	addeq	r5, r2, #2
 8025bc2:	9341      	streq	r3, [sp, #260]	; 0x104
 8025bc4:	220a      	movs	r2, #10
 8025bc6:	46ab      	mov	fp, r5
 8025bc8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8025bcc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8025bd0:	2b09      	cmp	r3, #9
 8025bd2:	d91d      	bls.n	8025c10 <__ssvfiscanf_r+0xdc>
 8025bd4:	4891      	ldr	r0, [pc, #580]	; (8025e1c <__ssvfiscanf_r+0x2e8>)
 8025bd6:	2203      	movs	r2, #3
 8025bd8:	f7da fb4a 	bl	8000270 <memchr>
 8025bdc:	b140      	cbz	r0, 8025bf0 <__ssvfiscanf_r+0xbc>
 8025bde:	2301      	movs	r3, #1
 8025be0:	eba0 0009 	sub.w	r0, r0, r9
 8025be4:	fa03 f000 	lsl.w	r0, r3, r0
 8025be8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8025bea:	4318      	orrs	r0, r3
 8025bec:	9041      	str	r0, [sp, #260]	; 0x104
 8025bee:	465d      	mov	r5, fp
 8025bf0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8025bf4:	2b78      	cmp	r3, #120	; 0x78
 8025bf6:	d806      	bhi.n	8025c06 <__ssvfiscanf_r+0xd2>
 8025bf8:	2b57      	cmp	r3, #87	; 0x57
 8025bfa:	d810      	bhi.n	8025c1e <__ssvfiscanf_r+0xea>
 8025bfc:	2b25      	cmp	r3, #37	; 0x25
 8025bfe:	d05c      	beq.n	8025cba <__ssvfiscanf_r+0x186>
 8025c00:	d856      	bhi.n	8025cb0 <__ssvfiscanf_r+0x17c>
 8025c02:	2b00      	cmp	r3, #0
 8025c04:	d074      	beq.n	8025cf0 <__ssvfiscanf_r+0x1bc>
 8025c06:	2303      	movs	r3, #3
 8025c08:	9347      	str	r3, [sp, #284]	; 0x11c
 8025c0a:	230a      	movs	r3, #10
 8025c0c:	9342      	str	r3, [sp, #264]	; 0x108
 8025c0e:	e081      	b.n	8025d14 <__ssvfiscanf_r+0x1e0>
 8025c10:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8025c12:	fb02 1303 	mla	r3, r2, r3, r1
 8025c16:	3b30      	subs	r3, #48	; 0x30
 8025c18:	9343      	str	r3, [sp, #268]	; 0x10c
 8025c1a:	465d      	mov	r5, fp
 8025c1c:	e7d3      	b.n	8025bc6 <__ssvfiscanf_r+0x92>
 8025c1e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8025c22:	2a20      	cmp	r2, #32
 8025c24:	d8ef      	bhi.n	8025c06 <__ssvfiscanf_r+0xd2>
 8025c26:	a101      	add	r1, pc, #4	; (adr r1, 8025c2c <__ssvfiscanf_r+0xf8>)
 8025c28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8025c2c:	08025cff 	.word	0x08025cff
 8025c30:	08025c07 	.word	0x08025c07
 8025c34:	08025c07 	.word	0x08025c07
 8025c38:	08025d5d 	.word	0x08025d5d
 8025c3c:	08025c07 	.word	0x08025c07
 8025c40:	08025c07 	.word	0x08025c07
 8025c44:	08025c07 	.word	0x08025c07
 8025c48:	08025c07 	.word	0x08025c07
 8025c4c:	08025c07 	.word	0x08025c07
 8025c50:	08025c07 	.word	0x08025c07
 8025c54:	08025c07 	.word	0x08025c07
 8025c58:	08025d73 	.word	0x08025d73
 8025c5c:	08025d49 	.word	0x08025d49
 8025c60:	08025cb7 	.word	0x08025cb7
 8025c64:	08025cb7 	.word	0x08025cb7
 8025c68:	08025cb7 	.word	0x08025cb7
 8025c6c:	08025c07 	.word	0x08025c07
 8025c70:	08025d4d 	.word	0x08025d4d
 8025c74:	08025c07 	.word	0x08025c07
 8025c78:	08025c07 	.word	0x08025c07
 8025c7c:	08025c07 	.word	0x08025c07
 8025c80:	08025c07 	.word	0x08025c07
 8025c84:	08025d83 	.word	0x08025d83
 8025c88:	08025d55 	.word	0x08025d55
 8025c8c:	08025cf7 	.word	0x08025cf7
 8025c90:	08025c07 	.word	0x08025c07
 8025c94:	08025c07 	.word	0x08025c07
 8025c98:	08025d7f 	.word	0x08025d7f
 8025c9c:	08025c07 	.word	0x08025c07
 8025ca0:	08025d49 	.word	0x08025d49
 8025ca4:	08025c07 	.word	0x08025c07
 8025ca8:	08025c07 	.word	0x08025c07
 8025cac:	08025cff 	.word	0x08025cff
 8025cb0:	3b45      	subs	r3, #69	; 0x45
 8025cb2:	2b02      	cmp	r3, #2
 8025cb4:	d8a7      	bhi.n	8025c06 <__ssvfiscanf_r+0xd2>
 8025cb6:	2305      	movs	r3, #5
 8025cb8:	e02b      	b.n	8025d12 <__ssvfiscanf_r+0x1de>
 8025cba:	6863      	ldr	r3, [r4, #4]
 8025cbc:	2b00      	cmp	r3, #0
 8025cbe:	dd0d      	ble.n	8025cdc <__ssvfiscanf_r+0x1a8>
 8025cc0:	6823      	ldr	r3, [r4, #0]
 8025cc2:	781a      	ldrb	r2, [r3, #0]
 8025cc4:	4552      	cmp	r2, sl
 8025cc6:	f040 80a1 	bne.w	8025e0c <__ssvfiscanf_r+0x2d8>
 8025cca:	3301      	adds	r3, #1
 8025ccc:	6862      	ldr	r2, [r4, #4]
 8025cce:	6023      	str	r3, [r4, #0]
 8025cd0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8025cd2:	3a01      	subs	r2, #1
 8025cd4:	3301      	adds	r3, #1
 8025cd6:	6062      	str	r2, [r4, #4]
 8025cd8:	9345      	str	r3, [sp, #276]	; 0x114
 8025cda:	e755      	b.n	8025b88 <__ssvfiscanf_r+0x54>
 8025cdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8025cde:	4621      	mov	r1, r4
 8025ce0:	4630      	mov	r0, r6
 8025ce2:	4798      	blx	r3
 8025ce4:	2800      	cmp	r0, #0
 8025ce6:	d0eb      	beq.n	8025cc0 <__ssvfiscanf_r+0x18c>
 8025ce8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8025cea:	2800      	cmp	r0, #0
 8025cec:	f040 8084 	bne.w	8025df8 <__ssvfiscanf_r+0x2c4>
 8025cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8025cf4:	e086      	b.n	8025e04 <__ssvfiscanf_r+0x2d0>
 8025cf6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8025cf8:	f042 0220 	orr.w	r2, r2, #32
 8025cfc:	9241      	str	r2, [sp, #260]	; 0x104
 8025cfe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8025d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8025d04:	9241      	str	r2, [sp, #260]	; 0x104
 8025d06:	2210      	movs	r2, #16
 8025d08:	2b6f      	cmp	r3, #111	; 0x6f
 8025d0a:	9242      	str	r2, [sp, #264]	; 0x108
 8025d0c:	bf34      	ite	cc
 8025d0e:	2303      	movcc	r3, #3
 8025d10:	2304      	movcs	r3, #4
 8025d12:	9347      	str	r3, [sp, #284]	; 0x11c
 8025d14:	6863      	ldr	r3, [r4, #4]
 8025d16:	2b00      	cmp	r3, #0
 8025d18:	dd41      	ble.n	8025d9e <__ssvfiscanf_r+0x26a>
 8025d1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8025d1c:	0659      	lsls	r1, r3, #25
 8025d1e:	d404      	bmi.n	8025d2a <__ssvfiscanf_r+0x1f6>
 8025d20:	6823      	ldr	r3, [r4, #0]
 8025d22:	781a      	ldrb	r2, [r3, #0]
 8025d24:	5cba      	ldrb	r2, [r7, r2]
 8025d26:	0712      	lsls	r2, r2, #28
 8025d28:	d440      	bmi.n	8025dac <__ssvfiscanf_r+0x278>
 8025d2a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8025d2c:	2b02      	cmp	r3, #2
 8025d2e:	dc4f      	bgt.n	8025dd0 <__ssvfiscanf_r+0x29c>
 8025d30:	466b      	mov	r3, sp
 8025d32:	4622      	mov	r2, r4
 8025d34:	a941      	add	r1, sp, #260	; 0x104
 8025d36:	4630      	mov	r0, r6
 8025d38:	f000 f9ce 	bl	80260d8 <_scanf_chars>
 8025d3c:	2801      	cmp	r0, #1
 8025d3e:	d065      	beq.n	8025e0c <__ssvfiscanf_r+0x2d8>
 8025d40:	2802      	cmp	r0, #2
 8025d42:	f47f af21 	bne.w	8025b88 <__ssvfiscanf_r+0x54>
 8025d46:	e7cf      	b.n	8025ce8 <__ssvfiscanf_r+0x1b4>
 8025d48:	220a      	movs	r2, #10
 8025d4a:	e7dd      	b.n	8025d08 <__ssvfiscanf_r+0x1d4>
 8025d4c:	2300      	movs	r3, #0
 8025d4e:	9342      	str	r3, [sp, #264]	; 0x108
 8025d50:	2303      	movs	r3, #3
 8025d52:	e7de      	b.n	8025d12 <__ssvfiscanf_r+0x1de>
 8025d54:	2308      	movs	r3, #8
 8025d56:	9342      	str	r3, [sp, #264]	; 0x108
 8025d58:	2304      	movs	r3, #4
 8025d5a:	e7da      	b.n	8025d12 <__ssvfiscanf_r+0x1de>
 8025d5c:	4629      	mov	r1, r5
 8025d5e:	4640      	mov	r0, r8
 8025d60:	f000 fb60 	bl	8026424 <__sccl>
 8025d64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8025d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025d6a:	9341      	str	r3, [sp, #260]	; 0x104
 8025d6c:	4605      	mov	r5, r0
 8025d6e:	2301      	movs	r3, #1
 8025d70:	e7cf      	b.n	8025d12 <__ssvfiscanf_r+0x1de>
 8025d72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8025d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025d78:	9341      	str	r3, [sp, #260]	; 0x104
 8025d7a:	2300      	movs	r3, #0
 8025d7c:	e7c9      	b.n	8025d12 <__ssvfiscanf_r+0x1de>
 8025d7e:	2302      	movs	r3, #2
 8025d80:	e7c7      	b.n	8025d12 <__ssvfiscanf_r+0x1de>
 8025d82:	9841      	ldr	r0, [sp, #260]	; 0x104
 8025d84:	06c3      	lsls	r3, r0, #27
 8025d86:	f53f aeff 	bmi.w	8025b88 <__ssvfiscanf_r+0x54>
 8025d8a:	9b00      	ldr	r3, [sp, #0]
 8025d8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8025d8e:	1d19      	adds	r1, r3, #4
 8025d90:	9100      	str	r1, [sp, #0]
 8025d92:	681b      	ldr	r3, [r3, #0]
 8025d94:	07c0      	lsls	r0, r0, #31
 8025d96:	bf4c      	ite	mi
 8025d98:	801a      	strhmi	r2, [r3, #0]
 8025d9a:	601a      	strpl	r2, [r3, #0]
 8025d9c:	e6f4      	b.n	8025b88 <__ssvfiscanf_r+0x54>
 8025d9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8025da0:	4621      	mov	r1, r4
 8025da2:	4630      	mov	r0, r6
 8025da4:	4798      	blx	r3
 8025da6:	2800      	cmp	r0, #0
 8025da8:	d0b7      	beq.n	8025d1a <__ssvfiscanf_r+0x1e6>
 8025daa:	e79d      	b.n	8025ce8 <__ssvfiscanf_r+0x1b4>
 8025dac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8025dae:	3201      	adds	r2, #1
 8025db0:	9245      	str	r2, [sp, #276]	; 0x114
 8025db2:	6862      	ldr	r2, [r4, #4]
 8025db4:	3a01      	subs	r2, #1
 8025db6:	2a00      	cmp	r2, #0
 8025db8:	6062      	str	r2, [r4, #4]
 8025dba:	dd02      	ble.n	8025dc2 <__ssvfiscanf_r+0x28e>
 8025dbc:	3301      	adds	r3, #1
 8025dbe:	6023      	str	r3, [r4, #0]
 8025dc0:	e7ae      	b.n	8025d20 <__ssvfiscanf_r+0x1ec>
 8025dc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8025dc4:	4621      	mov	r1, r4
 8025dc6:	4630      	mov	r0, r6
 8025dc8:	4798      	blx	r3
 8025dca:	2800      	cmp	r0, #0
 8025dcc:	d0a8      	beq.n	8025d20 <__ssvfiscanf_r+0x1ec>
 8025dce:	e78b      	b.n	8025ce8 <__ssvfiscanf_r+0x1b4>
 8025dd0:	2b04      	cmp	r3, #4
 8025dd2:	dc06      	bgt.n	8025de2 <__ssvfiscanf_r+0x2ae>
 8025dd4:	466b      	mov	r3, sp
 8025dd6:	4622      	mov	r2, r4
 8025dd8:	a941      	add	r1, sp, #260	; 0x104
 8025dda:	4630      	mov	r0, r6
 8025ddc:	f000 f9d4 	bl	8026188 <_scanf_i>
 8025de0:	e7ac      	b.n	8025d3c <__ssvfiscanf_r+0x208>
 8025de2:	4b0f      	ldr	r3, [pc, #60]	; (8025e20 <__ssvfiscanf_r+0x2ec>)
 8025de4:	2b00      	cmp	r3, #0
 8025de6:	f43f aecf 	beq.w	8025b88 <__ssvfiscanf_r+0x54>
 8025dea:	466b      	mov	r3, sp
 8025dec:	4622      	mov	r2, r4
 8025dee:	a941      	add	r1, sp, #260	; 0x104
 8025df0:	4630      	mov	r0, r6
 8025df2:	f3af 8000 	nop.w
 8025df6:	e7a1      	b.n	8025d3c <__ssvfiscanf_r+0x208>
 8025df8:	89a3      	ldrh	r3, [r4, #12]
 8025dfa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8025dfe:	bf18      	it	ne
 8025e00:	f04f 30ff 	movne.w	r0, #4294967295
 8025e04:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8025e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8025e0e:	e7f9      	b.n	8025e04 <__ssvfiscanf_r+0x2d0>
 8025e10:	08025a81 	.word	0x08025a81
 8025e14:	08025afb 	.word	0x08025afb
 8025e18:	08041c69 	.word	0x08041c69
 8025e1c:	0804253a 	.word	0x0804253a
 8025e20:	00000000 	.word	0x00000000

08025e24 <__sfputc_r>:
 8025e24:	6893      	ldr	r3, [r2, #8]
 8025e26:	3b01      	subs	r3, #1
 8025e28:	2b00      	cmp	r3, #0
 8025e2a:	b410      	push	{r4}
 8025e2c:	6093      	str	r3, [r2, #8]
 8025e2e:	da08      	bge.n	8025e42 <__sfputc_r+0x1e>
 8025e30:	6994      	ldr	r4, [r2, #24]
 8025e32:	42a3      	cmp	r3, r4
 8025e34:	db01      	blt.n	8025e3a <__sfputc_r+0x16>
 8025e36:	290a      	cmp	r1, #10
 8025e38:	d103      	bne.n	8025e42 <__sfputc_r+0x1e>
 8025e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e3e:	f7fd be39 	b.w	8023ab4 <__swbuf_r>
 8025e42:	6813      	ldr	r3, [r2, #0]
 8025e44:	1c58      	adds	r0, r3, #1
 8025e46:	6010      	str	r0, [r2, #0]
 8025e48:	7019      	strb	r1, [r3, #0]
 8025e4a:	4608      	mov	r0, r1
 8025e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e50:	4770      	bx	lr

08025e52 <__sfputs_r>:
 8025e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e54:	4606      	mov	r6, r0
 8025e56:	460f      	mov	r7, r1
 8025e58:	4614      	mov	r4, r2
 8025e5a:	18d5      	adds	r5, r2, r3
 8025e5c:	42ac      	cmp	r4, r5
 8025e5e:	d101      	bne.n	8025e64 <__sfputs_r+0x12>
 8025e60:	2000      	movs	r0, #0
 8025e62:	e007      	b.n	8025e74 <__sfputs_r+0x22>
 8025e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025e68:	463a      	mov	r2, r7
 8025e6a:	4630      	mov	r0, r6
 8025e6c:	f7ff ffda 	bl	8025e24 <__sfputc_r>
 8025e70:	1c43      	adds	r3, r0, #1
 8025e72:	d1f3      	bne.n	8025e5c <__sfputs_r+0xa>
 8025e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025e78 <_vfiprintf_r>:
 8025e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e7c:	460d      	mov	r5, r1
 8025e7e:	b09d      	sub	sp, #116	; 0x74
 8025e80:	4614      	mov	r4, r2
 8025e82:	4698      	mov	r8, r3
 8025e84:	4606      	mov	r6, r0
 8025e86:	b118      	cbz	r0, 8025e90 <_vfiprintf_r+0x18>
 8025e88:	6983      	ldr	r3, [r0, #24]
 8025e8a:	b90b      	cbnz	r3, 8025e90 <_vfiprintf_r+0x18>
 8025e8c:	f7fe fea2 	bl	8024bd4 <__sinit>
 8025e90:	4b89      	ldr	r3, [pc, #548]	; (80260b8 <_vfiprintf_r+0x240>)
 8025e92:	429d      	cmp	r5, r3
 8025e94:	d11b      	bne.n	8025ece <_vfiprintf_r+0x56>
 8025e96:	6875      	ldr	r5, [r6, #4]
 8025e98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025e9a:	07d9      	lsls	r1, r3, #31
 8025e9c:	d405      	bmi.n	8025eaa <_vfiprintf_r+0x32>
 8025e9e:	89ab      	ldrh	r3, [r5, #12]
 8025ea0:	059a      	lsls	r2, r3, #22
 8025ea2:	d402      	bmi.n	8025eaa <_vfiprintf_r+0x32>
 8025ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025ea6:	f7ff f845 	bl	8024f34 <__retarget_lock_acquire_recursive>
 8025eaa:	89ab      	ldrh	r3, [r5, #12]
 8025eac:	071b      	lsls	r3, r3, #28
 8025eae:	d501      	bpl.n	8025eb4 <_vfiprintf_r+0x3c>
 8025eb0:	692b      	ldr	r3, [r5, #16]
 8025eb2:	b9eb      	cbnz	r3, 8025ef0 <_vfiprintf_r+0x78>
 8025eb4:	4629      	mov	r1, r5
 8025eb6:	4630      	mov	r0, r6
 8025eb8:	f7fd fe60 	bl	8023b7c <__swsetup_r>
 8025ebc:	b1c0      	cbz	r0, 8025ef0 <_vfiprintf_r+0x78>
 8025ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025ec0:	07dc      	lsls	r4, r3, #31
 8025ec2:	d50e      	bpl.n	8025ee2 <_vfiprintf_r+0x6a>
 8025ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8025ec8:	b01d      	add	sp, #116	; 0x74
 8025eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ece:	4b7b      	ldr	r3, [pc, #492]	; (80260bc <_vfiprintf_r+0x244>)
 8025ed0:	429d      	cmp	r5, r3
 8025ed2:	d101      	bne.n	8025ed8 <_vfiprintf_r+0x60>
 8025ed4:	68b5      	ldr	r5, [r6, #8]
 8025ed6:	e7df      	b.n	8025e98 <_vfiprintf_r+0x20>
 8025ed8:	4b79      	ldr	r3, [pc, #484]	; (80260c0 <_vfiprintf_r+0x248>)
 8025eda:	429d      	cmp	r5, r3
 8025edc:	bf08      	it	eq
 8025ede:	68f5      	ldreq	r5, [r6, #12]
 8025ee0:	e7da      	b.n	8025e98 <_vfiprintf_r+0x20>
 8025ee2:	89ab      	ldrh	r3, [r5, #12]
 8025ee4:	0598      	lsls	r0, r3, #22
 8025ee6:	d4ed      	bmi.n	8025ec4 <_vfiprintf_r+0x4c>
 8025ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025eea:	f7ff f825 	bl	8024f38 <__retarget_lock_release_recursive>
 8025eee:	e7e9      	b.n	8025ec4 <_vfiprintf_r+0x4c>
 8025ef0:	2300      	movs	r3, #0
 8025ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8025ef4:	2320      	movs	r3, #32
 8025ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8025efe:	2330      	movs	r3, #48	; 0x30
 8025f00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80260c4 <_vfiprintf_r+0x24c>
 8025f04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025f08:	f04f 0901 	mov.w	r9, #1
 8025f0c:	4623      	mov	r3, r4
 8025f0e:	469a      	mov	sl, r3
 8025f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025f14:	b10a      	cbz	r2, 8025f1a <_vfiprintf_r+0xa2>
 8025f16:	2a25      	cmp	r2, #37	; 0x25
 8025f18:	d1f9      	bne.n	8025f0e <_vfiprintf_r+0x96>
 8025f1a:	ebba 0b04 	subs.w	fp, sl, r4
 8025f1e:	d00b      	beq.n	8025f38 <_vfiprintf_r+0xc0>
 8025f20:	465b      	mov	r3, fp
 8025f22:	4622      	mov	r2, r4
 8025f24:	4629      	mov	r1, r5
 8025f26:	4630      	mov	r0, r6
 8025f28:	f7ff ff93 	bl	8025e52 <__sfputs_r>
 8025f2c:	3001      	adds	r0, #1
 8025f2e:	f000 80aa 	beq.w	8026086 <_vfiprintf_r+0x20e>
 8025f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f34:	445a      	add	r2, fp
 8025f36:	9209      	str	r2, [sp, #36]	; 0x24
 8025f38:	f89a 3000 	ldrb.w	r3, [sl]
 8025f3c:	2b00      	cmp	r3, #0
 8025f3e:	f000 80a2 	beq.w	8026086 <_vfiprintf_r+0x20e>
 8025f42:	2300      	movs	r3, #0
 8025f44:	f04f 32ff 	mov.w	r2, #4294967295
 8025f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025f4c:	f10a 0a01 	add.w	sl, sl, #1
 8025f50:	9304      	str	r3, [sp, #16]
 8025f52:	9307      	str	r3, [sp, #28]
 8025f54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025f58:	931a      	str	r3, [sp, #104]	; 0x68
 8025f5a:	4654      	mov	r4, sl
 8025f5c:	2205      	movs	r2, #5
 8025f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025f62:	4858      	ldr	r0, [pc, #352]	; (80260c4 <_vfiprintf_r+0x24c>)
 8025f64:	f7da f984 	bl	8000270 <memchr>
 8025f68:	9a04      	ldr	r2, [sp, #16]
 8025f6a:	b9d8      	cbnz	r0, 8025fa4 <_vfiprintf_r+0x12c>
 8025f6c:	06d1      	lsls	r1, r2, #27
 8025f6e:	bf44      	itt	mi
 8025f70:	2320      	movmi	r3, #32
 8025f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025f76:	0713      	lsls	r3, r2, #28
 8025f78:	bf44      	itt	mi
 8025f7a:	232b      	movmi	r3, #43	; 0x2b
 8025f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025f80:	f89a 3000 	ldrb.w	r3, [sl]
 8025f84:	2b2a      	cmp	r3, #42	; 0x2a
 8025f86:	d015      	beq.n	8025fb4 <_vfiprintf_r+0x13c>
 8025f88:	9a07      	ldr	r2, [sp, #28]
 8025f8a:	4654      	mov	r4, sl
 8025f8c:	2000      	movs	r0, #0
 8025f8e:	f04f 0c0a 	mov.w	ip, #10
 8025f92:	4621      	mov	r1, r4
 8025f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025f98:	3b30      	subs	r3, #48	; 0x30
 8025f9a:	2b09      	cmp	r3, #9
 8025f9c:	d94e      	bls.n	802603c <_vfiprintf_r+0x1c4>
 8025f9e:	b1b0      	cbz	r0, 8025fce <_vfiprintf_r+0x156>
 8025fa0:	9207      	str	r2, [sp, #28]
 8025fa2:	e014      	b.n	8025fce <_vfiprintf_r+0x156>
 8025fa4:	eba0 0308 	sub.w	r3, r0, r8
 8025fa8:	fa09 f303 	lsl.w	r3, r9, r3
 8025fac:	4313      	orrs	r3, r2
 8025fae:	9304      	str	r3, [sp, #16]
 8025fb0:	46a2      	mov	sl, r4
 8025fb2:	e7d2      	b.n	8025f5a <_vfiprintf_r+0xe2>
 8025fb4:	9b03      	ldr	r3, [sp, #12]
 8025fb6:	1d19      	adds	r1, r3, #4
 8025fb8:	681b      	ldr	r3, [r3, #0]
 8025fba:	9103      	str	r1, [sp, #12]
 8025fbc:	2b00      	cmp	r3, #0
 8025fbe:	bfbb      	ittet	lt
 8025fc0:	425b      	neglt	r3, r3
 8025fc2:	f042 0202 	orrlt.w	r2, r2, #2
 8025fc6:	9307      	strge	r3, [sp, #28]
 8025fc8:	9307      	strlt	r3, [sp, #28]
 8025fca:	bfb8      	it	lt
 8025fcc:	9204      	strlt	r2, [sp, #16]
 8025fce:	7823      	ldrb	r3, [r4, #0]
 8025fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8025fd2:	d10c      	bne.n	8025fee <_vfiprintf_r+0x176>
 8025fd4:	7863      	ldrb	r3, [r4, #1]
 8025fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8025fd8:	d135      	bne.n	8026046 <_vfiprintf_r+0x1ce>
 8025fda:	9b03      	ldr	r3, [sp, #12]
 8025fdc:	1d1a      	adds	r2, r3, #4
 8025fde:	681b      	ldr	r3, [r3, #0]
 8025fe0:	9203      	str	r2, [sp, #12]
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	bfb8      	it	lt
 8025fe6:	f04f 33ff 	movlt.w	r3, #4294967295
 8025fea:	3402      	adds	r4, #2
 8025fec:	9305      	str	r3, [sp, #20]
 8025fee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80260d4 <_vfiprintf_r+0x25c>
 8025ff2:	7821      	ldrb	r1, [r4, #0]
 8025ff4:	2203      	movs	r2, #3
 8025ff6:	4650      	mov	r0, sl
 8025ff8:	f7da f93a 	bl	8000270 <memchr>
 8025ffc:	b140      	cbz	r0, 8026010 <_vfiprintf_r+0x198>
 8025ffe:	2340      	movs	r3, #64	; 0x40
 8026000:	eba0 000a 	sub.w	r0, r0, sl
 8026004:	fa03 f000 	lsl.w	r0, r3, r0
 8026008:	9b04      	ldr	r3, [sp, #16]
 802600a:	4303      	orrs	r3, r0
 802600c:	3401      	adds	r4, #1
 802600e:	9304      	str	r3, [sp, #16]
 8026010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026014:	482c      	ldr	r0, [pc, #176]	; (80260c8 <_vfiprintf_r+0x250>)
 8026016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802601a:	2206      	movs	r2, #6
 802601c:	f7da f928 	bl	8000270 <memchr>
 8026020:	2800      	cmp	r0, #0
 8026022:	d03f      	beq.n	80260a4 <_vfiprintf_r+0x22c>
 8026024:	4b29      	ldr	r3, [pc, #164]	; (80260cc <_vfiprintf_r+0x254>)
 8026026:	bb1b      	cbnz	r3, 8026070 <_vfiprintf_r+0x1f8>
 8026028:	9b03      	ldr	r3, [sp, #12]
 802602a:	3307      	adds	r3, #7
 802602c:	f023 0307 	bic.w	r3, r3, #7
 8026030:	3308      	adds	r3, #8
 8026032:	9303      	str	r3, [sp, #12]
 8026034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026036:	443b      	add	r3, r7
 8026038:	9309      	str	r3, [sp, #36]	; 0x24
 802603a:	e767      	b.n	8025f0c <_vfiprintf_r+0x94>
 802603c:	fb0c 3202 	mla	r2, ip, r2, r3
 8026040:	460c      	mov	r4, r1
 8026042:	2001      	movs	r0, #1
 8026044:	e7a5      	b.n	8025f92 <_vfiprintf_r+0x11a>
 8026046:	2300      	movs	r3, #0
 8026048:	3401      	adds	r4, #1
 802604a:	9305      	str	r3, [sp, #20]
 802604c:	4619      	mov	r1, r3
 802604e:	f04f 0c0a 	mov.w	ip, #10
 8026052:	4620      	mov	r0, r4
 8026054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026058:	3a30      	subs	r2, #48	; 0x30
 802605a:	2a09      	cmp	r2, #9
 802605c:	d903      	bls.n	8026066 <_vfiprintf_r+0x1ee>
 802605e:	2b00      	cmp	r3, #0
 8026060:	d0c5      	beq.n	8025fee <_vfiprintf_r+0x176>
 8026062:	9105      	str	r1, [sp, #20]
 8026064:	e7c3      	b.n	8025fee <_vfiprintf_r+0x176>
 8026066:	fb0c 2101 	mla	r1, ip, r1, r2
 802606a:	4604      	mov	r4, r0
 802606c:	2301      	movs	r3, #1
 802606e:	e7f0      	b.n	8026052 <_vfiprintf_r+0x1da>
 8026070:	ab03      	add	r3, sp, #12
 8026072:	9300      	str	r3, [sp, #0]
 8026074:	462a      	mov	r2, r5
 8026076:	4b16      	ldr	r3, [pc, #88]	; (80260d0 <_vfiprintf_r+0x258>)
 8026078:	a904      	add	r1, sp, #16
 802607a:	4630      	mov	r0, r6
 802607c:	f7fb fe70 	bl	8021d60 <_printf_float>
 8026080:	4607      	mov	r7, r0
 8026082:	1c78      	adds	r0, r7, #1
 8026084:	d1d6      	bne.n	8026034 <_vfiprintf_r+0x1bc>
 8026086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026088:	07d9      	lsls	r1, r3, #31
 802608a:	d405      	bmi.n	8026098 <_vfiprintf_r+0x220>
 802608c:	89ab      	ldrh	r3, [r5, #12]
 802608e:	059a      	lsls	r2, r3, #22
 8026090:	d402      	bmi.n	8026098 <_vfiprintf_r+0x220>
 8026092:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026094:	f7fe ff50 	bl	8024f38 <__retarget_lock_release_recursive>
 8026098:	89ab      	ldrh	r3, [r5, #12]
 802609a:	065b      	lsls	r3, r3, #25
 802609c:	f53f af12 	bmi.w	8025ec4 <_vfiprintf_r+0x4c>
 80260a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80260a2:	e711      	b.n	8025ec8 <_vfiprintf_r+0x50>
 80260a4:	ab03      	add	r3, sp, #12
 80260a6:	9300      	str	r3, [sp, #0]
 80260a8:	462a      	mov	r2, r5
 80260aa:	4b09      	ldr	r3, [pc, #36]	; (80260d0 <_vfiprintf_r+0x258>)
 80260ac:	a904      	add	r1, sp, #16
 80260ae:	4630      	mov	r0, r6
 80260b0:	f7fc f8e2 	bl	8022278 <_printf_i>
 80260b4:	e7e4      	b.n	8026080 <_vfiprintf_r+0x208>
 80260b6:	bf00      	nop
 80260b8:	0804238c 	.word	0x0804238c
 80260bc:	080423ac 	.word	0x080423ac
 80260c0:	0804236c 	.word	0x0804236c
 80260c4:	08042534 	.word	0x08042534
 80260c8:	0804253e 	.word	0x0804253e
 80260cc:	08021d61 	.word	0x08021d61
 80260d0:	08025e53 	.word	0x08025e53
 80260d4:	0804253a 	.word	0x0804253a

080260d8 <_scanf_chars>:
 80260d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80260dc:	4615      	mov	r5, r2
 80260de:	688a      	ldr	r2, [r1, #8]
 80260e0:	4680      	mov	r8, r0
 80260e2:	460c      	mov	r4, r1
 80260e4:	b932      	cbnz	r2, 80260f4 <_scanf_chars+0x1c>
 80260e6:	698a      	ldr	r2, [r1, #24]
 80260e8:	2a00      	cmp	r2, #0
 80260ea:	bf0c      	ite	eq
 80260ec:	2201      	moveq	r2, #1
 80260ee:	f04f 32ff 	movne.w	r2, #4294967295
 80260f2:	608a      	str	r2, [r1, #8]
 80260f4:	6822      	ldr	r2, [r4, #0]
 80260f6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8026184 <_scanf_chars+0xac>
 80260fa:	06d1      	lsls	r1, r2, #27
 80260fc:	bf5f      	itttt	pl
 80260fe:	681a      	ldrpl	r2, [r3, #0]
 8026100:	1d11      	addpl	r1, r2, #4
 8026102:	6019      	strpl	r1, [r3, #0]
 8026104:	6816      	ldrpl	r6, [r2, #0]
 8026106:	2700      	movs	r7, #0
 8026108:	69a0      	ldr	r0, [r4, #24]
 802610a:	b188      	cbz	r0, 8026130 <_scanf_chars+0x58>
 802610c:	2801      	cmp	r0, #1
 802610e:	d107      	bne.n	8026120 <_scanf_chars+0x48>
 8026110:	682b      	ldr	r3, [r5, #0]
 8026112:	781a      	ldrb	r2, [r3, #0]
 8026114:	6963      	ldr	r3, [r4, #20]
 8026116:	5c9b      	ldrb	r3, [r3, r2]
 8026118:	b953      	cbnz	r3, 8026130 <_scanf_chars+0x58>
 802611a:	bb27      	cbnz	r7, 8026166 <_scanf_chars+0x8e>
 802611c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026120:	2802      	cmp	r0, #2
 8026122:	d120      	bne.n	8026166 <_scanf_chars+0x8e>
 8026124:	682b      	ldr	r3, [r5, #0]
 8026126:	781b      	ldrb	r3, [r3, #0]
 8026128:	f813 3009 	ldrb.w	r3, [r3, r9]
 802612c:	071b      	lsls	r3, r3, #28
 802612e:	d41a      	bmi.n	8026166 <_scanf_chars+0x8e>
 8026130:	6823      	ldr	r3, [r4, #0]
 8026132:	06da      	lsls	r2, r3, #27
 8026134:	bf5e      	ittt	pl
 8026136:	682b      	ldrpl	r3, [r5, #0]
 8026138:	781b      	ldrbpl	r3, [r3, #0]
 802613a:	f806 3b01 	strbpl.w	r3, [r6], #1
 802613e:	682a      	ldr	r2, [r5, #0]
 8026140:	686b      	ldr	r3, [r5, #4]
 8026142:	3201      	adds	r2, #1
 8026144:	602a      	str	r2, [r5, #0]
 8026146:	68a2      	ldr	r2, [r4, #8]
 8026148:	3b01      	subs	r3, #1
 802614a:	3a01      	subs	r2, #1
 802614c:	606b      	str	r3, [r5, #4]
 802614e:	3701      	adds	r7, #1
 8026150:	60a2      	str	r2, [r4, #8]
 8026152:	b142      	cbz	r2, 8026166 <_scanf_chars+0x8e>
 8026154:	2b00      	cmp	r3, #0
 8026156:	dcd7      	bgt.n	8026108 <_scanf_chars+0x30>
 8026158:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802615c:	4629      	mov	r1, r5
 802615e:	4640      	mov	r0, r8
 8026160:	4798      	blx	r3
 8026162:	2800      	cmp	r0, #0
 8026164:	d0d0      	beq.n	8026108 <_scanf_chars+0x30>
 8026166:	6823      	ldr	r3, [r4, #0]
 8026168:	f013 0310 	ands.w	r3, r3, #16
 802616c:	d105      	bne.n	802617a <_scanf_chars+0xa2>
 802616e:	68e2      	ldr	r2, [r4, #12]
 8026170:	3201      	adds	r2, #1
 8026172:	60e2      	str	r2, [r4, #12]
 8026174:	69a2      	ldr	r2, [r4, #24]
 8026176:	b102      	cbz	r2, 802617a <_scanf_chars+0xa2>
 8026178:	7033      	strb	r3, [r6, #0]
 802617a:	6923      	ldr	r3, [r4, #16]
 802617c:	441f      	add	r7, r3
 802617e:	6127      	str	r7, [r4, #16]
 8026180:	2000      	movs	r0, #0
 8026182:	e7cb      	b.n	802611c <_scanf_chars+0x44>
 8026184:	08041c69 	.word	0x08041c69

08026188 <_scanf_i>:
 8026188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802618c:	4698      	mov	r8, r3
 802618e:	4b74      	ldr	r3, [pc, #464]	; (8026360 <_scanf_i+0x1d8>)
 8026190:	460c      	mov	r4, r1
 8026192:	4682      	mov	sl, r0
 8026194:	4616      	mov	r6, r2
 8026196:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802619a:	b087      	sub	sp, #28
 802619c:	ab03      	add	r3, sp, #12
 802619e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80261a2:	4b70      	ldr	r3, [pc, #448]	; (8026364 <_scanf_i+0x1dc>)
 80261a4:	69a1      	ldr	r1, [r4, #24]
 80261a6:	4a70      	ldr	r2, [pc, #448]	; (8026368 <_scanf_i+0x1e0>)
 80261a8:	2903      	cmp	r1, #3
 80261aa:	bf18      	it	ne
 80261ac:	461a      	movne	r2, r3
 80261ae:	68a3      	ldr	r3, [r4, #8]
 80261b0:	9201      	str	r2, [sp, #4]
 80261b2:	1e5a      	subs	r2, r3, #1
 80261b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80261b8:	bf88      	it	hi
 80261ba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80261be:	4627      	mov	r7, r4
 80261c0:	bf82      	ittt	hi
 80261c2:	eb03 0905 	addhi.w	r9, r3, r5
 80261c6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80261ca:	60a3      	strhi	r3, [r4, #8]
 80261cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80261d0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80261d4:	bf98      	it	ls
 80261d6:	f04f 0900 	movls.w	r9, #0
 80261da:	6023      	str	r3, [r4, #0]
 80261dc:	463d      	mov	r5, r7
 80261de:	f04f 0b00 	mov.w	fp, #0
 80261e2:	6831      	ldr	r1, [r6, #0]
 80261e4:	ab03      	add	r3, sp, #12
 80261e6:	7809      	ldrb	r1, [r1, #0]
 80261e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80261ec:	2202      	movs	r2, #2
 80261ee:	f7da f83f 	bl	8000270 <memchr>
 80261f2:	b328      	cbz	r0, 8026240 <_scanf_i+0xb8>
 80261f4:	f1bb 0f01 	cmp.w	fp, #1
 80261f8:	d159      	bne.n	80262ae <_scanf_i+0x126>
 80261fa:	6862      	ldr	r2, [r4, #4]
 80261fc:	b92a      	cbnz	r2, 802620a <_scanf_i+0x82>
 80261fe:	6822      	ldr	r2, [r4, #0]
 8026200:	2308      	movs	r3, #8
 8026202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8026206:	6063      	str	r3, [r4, #4]
 8026208:	6022      	str	r2, [r4, #0]
 802620a:	6822      	ldr	r2, [r4, #0]
 802620c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8026210:	6022      	str	r2, [r4, #0]
 8026212:	68a2      	ldr	r2, [r4, #8]
 8026214:	1e51      	subs	r1, r2, #1
 8026216:	60a1      	str	r1, [r4, #8]
 8026218:	b192      	cbz	r2, 8026240 <_scanf_i+0xb8>
 802621a:	6832      	ldr	r2, [r6, #0]
 802621c:	1c51      	adds	r1, r2, #1
 802621e:	6031      	str	r1, [r6, #0]
 8026220:	7812      	ldrb	r2, [r2, #0]
 8026222:	f805 2b01 	strb.w	r2, [r5], #1
 8026226:	6872      	ldr	r2, [r6, #4]
 8026228:	3a01      	subs	r2, #1
 802622a:	2a00      	cmp	r2, #0
 802622c:	6072      	str	r2, [r6, #4]
 802622e:	dc07      	bgt.n	8026240 <_scanf_i+0xb8>
 8026230:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8026234:	4631      	mov	r1, r6
 8026236:	4650      	mov	r0, sl
 8026238:	4790      	blx	r2
 802623a:	2800      	cmp	r0, #0
 802623c:	f040 8085 	bne.w	802634a <_scanf_i+0x1c2>
 8026240:	f10b 0b01 	add.w	fp, fp, #1
 8026244:	f1bb 0f03 	cmp.w	fp, #3
 8026248:	d1cb      	bne.n	80261e2 <_scanf_i+0x5a>
 802624a:	6863      	ldr	r3, [r4, #4]
 802624c:	b90b      	cbnz	r3, 8026252 <_scanf_i+0xca>
 802624e:	230a      	movs	r3, #10
 8026250:	6063      	str	r3, [r4, #4]
 8026252:	6863      	ldr	r3, [r4, #4]
 8026254:	4945      	ldr	r1, [pc, #276]	; (802636c <_scanf_i+0x1e4>)
 8026256:	6960      	ldr	r0, [r4, #20]
 8026258:	1ac9      	subs	r1, r1, r3
 802625a:	f000 f8e3 	bl	8026424 <__sccl>
 802625e:	f04f 0b00 	mov.w	fp, #0
 8026262:	68a3      	ldr	r3, [r4, #8]
 8026264:	6822      	ldr	r2, [r4, #0]
 8026266:	2b00      	cmp	r3, #0
 8026268:	d03d      	beq.n	80262e6 <_scanf_i+0x15e>
 802626a:	6831      	ldr	r1, [r6, #0]
 802626c:	6960      	ldr	r0, [r4, #20]
 802626e:	f891 c000 	ldrb.w	ip, [r1]
 8026272:	f810 000c 	ldrb.w	r0, [r0, ip]
 8026276:	2800      	cmp	r0, #0
 8026278:	d035      	beq.n	80262e6 <_scanf_i+0x15e>
 802627a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802627e:	d124      	bne.n	80262ca <_scanf_i+0x142>
 8026280:	0510      	lsls	r0, r2, #20
 8026282:	d522      	bpl.n	80262ca <_scanf_i+0x142>
 8026284:	f10b 0b01 	add.w	fp, fp, #1
 8026288:	f1b9 0f00 	cmp.w	r9, #0
 802628c:	d003      	beq.n	8026296 <_scanf_i+0x10e>
 802628e:	3301      	adds	r3, #1
 8026290:	f109 39ff 	add.w	r9, r9, #4294967295
 8026294:	60a3      	str	r3, [r4, #8]
 8026296:	6873      	ldr	r3, [r6, #4]
 8026298:	3b01      	subs	r3, #1
 802629a:	2b00      	cmp	r3, #0
 802629c:	6073      	str	r3, [r6, #4]
 802629e:	dd1b      	ble.n	80262d8 <_scanf_i+0x150>
 80262a0:	6833      	ldr	r3, [r6, #0]
 80262a2:	3301      	adds	r3, #1
 80262a4:	6033      	str	r3, [r6, #0]
 80262a6:	68a3      	ldr	r3, [r4, #8]
 80262a8:	3b01      	subs	r3, #1
 80262aa:	60a3      	str	r3, [r4, #8]
 80262ac:	e7d9      	b.n	8026262 <_scanf_i+0xda>
 80262ae:	f1bb 0f02 	cmp.w	fp, #2
 80262b2:	d1ae      	bne.n	8026212 <_scanf_i+0x8a>
 80262b4:	6822      	ldr	r2, [r4, #0]
 80262b6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80262ba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80262be:	d1bf      	bne.n	8026240 <_scanf_i+0xb8>
 80262c0:	2310      	movs	r3, #16
 80262c2:	6063      	str	r3, [r4, #4]
 80262c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80262c8:	e7a2      	b.n	8026210 <_scanf_i+0x88>
 80262ca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80262ce:	6022      	str	r2, [r4, #0]
 80262d0:	780b      	ldrb	r3, [r1, #0]
 80262d2:	f805 3b01 	strb.w	r3, [r5], #1
 80262d6:	e7de      	b.n	8026296 <_scanf_i+0x10e>
 80262d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80262dc:	4631      	mov	r1, r6
 80262de:	4650      	mov	r0, sl
 80262e0:	4798      	blx	r3
 80262e2:	2800      	cmp	r0, #0
 80262e4:	d0df      	beq.n	80262a6 <_scanf_i+0x11e>
 80262e6:	6823      	ldr	r3, [r4, #0]
 80262e8:	05d9      	lsls	r1, r3, #23
 80262ea:	d50d      	bpl.n	8026308 <_scanf_i+0x180>
 80262ec:	42bd      	cmp	r5, r7
 80262ee:	d909      	bls.n	8026304 <_scanf_i+0x17c>
 80262f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80262f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80262f8:	4632      	mov	r2, r6
 80262fa:	4650      	mov	r0, sl
 80262fc:	4798      	blx	r3
 80262fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8026302:	464d      	mov	r5, r9
 8026304:	42bd      	cmp	r5, r7
 8026306:	d028      	beq.n	802635a <_scanf_i+0x1d2>
 8026308:	6822      	ldr	r2, [r4, #0]
 802630a:	f012 0210 	ands.w	r2, r2, #16
 802630e:	d113      	bne.n	8026338 <_scanf_i+0x1b0>
 8026310:	702a      	strb	r2, [r5, #0]
 8026312:	6863      	ldr	r3, [r4, #4]
 8026314:	9e01      	ldr	r6, [sp, #4]
 8026316:	4639      	mov	r1, r7
 8026318:	4650      	mov	r0, sl
 802631a:	47b0      	blx	r6
 802631c:	f8d8 3000 	ldr.w	r3, [r8]
 8026320:	6821      	ldr	r1, [r4, #0]
 8026322:	1d1a      	adds	r2, r3, #4
 8026324:	f8c8 2000 	str.w	r2, [r8]
 8026328:	f011 0f20 	tst.w	r1, #32
 802632c:	681b      	ldr	r3, [r3, #0]
 802632e:	d00f      	beq.n	8026350 <_scanf_i+0x1c8>
 8026330:	6018      	str	r0, [r3, #0]
 8026332:	68e3      	ldr	r3, [r4, #12]
 8026334:	3301      	adds	r3, #1
 8026336:	60e3      	str	r3, [r4, #12]
 8026338:	1bed      	subs	r5, r5, r7
 802633a:	44ab      	add	fp, r5
 802633c:	6925      	ldr	r5, [r4, #16]
 802633e:	445d      	add	r5, fp
 8026340:	6125      	str	r5, [r4, #16]
 8026342:	2000      	movs	r0, #0
 8026344:	b007      	add	sp, #28
 8026346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802634a:	f04f 0b00 	mov.w	fp, #0
 802634e:	e7ca      	b.n	80262e6 <_scanf_i+0x15e>
 8026350:	07ca      	lsls	r2, r1, #31
 8026352:	bf4c      	ite	mi
 8026354:	8018      	strhmi	r0, [r3, #0]
 8026356:	6018      	strpl	r0, [r3, #0]
 8026358:	e7eb      	b.n	8026332 <_scanf_i+0x1aa>
 802635a:	2001      	movs	r0, #1
 802635c:	e7f2      	b.n	8026344 <_scanf_i+0x1bc>
 802635e:	bf00      	nop
 8026360:	0802681c 	.word	0x0802681c
 8026364:	08023631 	.word	0x08023631
 8026368:	08023521 	.word	0x08023521
 802636c:	0804255e 	.word	0x0804255e

08026370 <_putc_r>:
 8026370:	b570      	push	{r4, r5, r6, lr}
 8026372:	460d      	mov	r5, r1
 8026374:	4614      	mov	r4, r2
 8026376:	4606      	mov	r6, r0
 8026378:	b118      	cbz	r0, 8026382 <_putc_r+0x12>
 802637a:	6983      	ldr	r3, [r0, #24]
 802637c:	b90b      	cbnz	r3, 8026382 <_putc_r+0x12>
 802637e:	f7fe fc29 	bl	8024bd4 <__sinit>
 8026382:	4b1c      	ldr	r3, [pc, #112]	; (80263f4 <_putc_r+0x84>)
 8026384:	429c      	cmp	r4, r3
 8026386:	d124      	bne.n	80263d2 <_putc_r+0x62>
 8026388:	6874      	ldr	r4, [r6, #4]
 802638a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802638c:	07d8      	lsls	r0, r3, #31
 802638e:	d405      	bmi.n	802639c <_putc_r+0x2c>
 8026390:	89a3      	ldrh	r3, [r4, #12]
 8026392:	0599      	lsls	r1, r3, #22
 8026394:	d402      	bmi.n	802639c <_putc_r+0x2c>
 8026396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026398:	f7fe fdcc 	bl	8024f34 <__retarget_lock_acquire_recursive>
 802639c:	68a3      	ldr	r3, [r4, #8]
 802639e:	3b01      	subs	r3, #1
 80263a0:	2b00      	cmp	r3, #0
 80263a2:	60a3      	str	r3, [r4, #8]
 80263a4:	da05      	bge.n	80263b2 <_putc_r+0x42>
 80263a6:	69a2      	ldr	r2, [r4, #24]
 80263a8:	4293      	cmp	r3, r2
 80263aa:	db1c      	blt.n	80263e6 <_putc_r+0x76>
 80263ac:	b2eb      	uxtb	r3, r5
 80263ae:	2b0a      	cmp	r3, #10
 80263b0:	d019      	beq.n	80263e6 <_putc_r+0x76>
 80263b2:	6823      	ldr	r3, [r4, #0]
 80263b4:	1c5a      	adds	r2, r3, #1
 80263b6:	6022      	str	r2, [r4, #0]
 80263b8:	701d      	strb	r5, [r3, #0]
 80263ba:	b2ed      	uxtb	r5, r5
 80263bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80263be:	07da      	lsls	r2, r3, #31
 80263c0:	d405      	bmi.n	80263ce <_putc_r+0x5e>
 80263c2:	89a3      	ldrh	r3, [r4, #12]
 80263c4:	059b      	lsls	r3, r3, #22
 80263c6:	d402      	bmi.n	80263ce <_putc_r+0x5e>
 80263c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80263ca:	f7fe fdb5 	bl	8024f38 <__retarget_lock_release_recursive>
 80263ce:	4628      	mov	r0, r5
 80263d0:	bd70      	pop	{r4, r5, r6, pc}
 80263d2:	4b09      	ldr	r3, [pc, #36]	; (80263f8 <_putc_r+0x88>)
 80263d4:	429c      	cmp	r4, r3
 80263d6:	d101      	bne.n	80263dc <_putc_r+0x6c>
 80263d8:	68b4      	ldr	r4, [r6, #8]
 80263da:	e7d6      	b.n	802638a <_putc_r+0x1a>
 80263dc:	4b07      	ldr	r3, [pc, #28]	; (80263fc <_putc_r+0x8c>)
 80263de:	429c      	cmp	r4, r3
 80263e0:	bf08      	it	eq
 80263e2:	68f4      	ldreq	r4, [r6, #12]
 80263e4:	e7d1      	b.n	802638a <_putc_r+0x1a>
 80263e6:	4629      	mov	r1, r5
 80263e8:	4622      	mov	r2, r4
 80263ea:	4630      	mov	r0, r6
 80263ec:	f7fd fb62 	bl	8023ab4 <__swbuf_r>
 80263f0:	4605      	mov	r5, r0
 80263f2:	e7e3      	b.n	80263bc <_putc_r+0x4c>
 80263f4:	0804238c 	.word	0x0804238c
 80263f8:	080423ac 	.word	0x080423ac
 80263fc:	0804236c 	.word	0x0804236c

08026400 <_read_r>:
 8026400:	b538      	push	{r3, r4, r5, lr}
 8026402:	4d07      	ldr	r5, [pc, #28]	; (8026420 <_read_r+0x20>)
 8026404:	4604      	mov	r4, r0
 8026406:	4608      	mov	r0, r1
 8026408:	4611      	mov	r1, r2
 802640a:	2200      	movs	r2, #0
 802640c:	602a      	str	r2, [r5, #0]
 802640e:	461a      	mov	r2, r3
 8026410:	f7df fa90 	bl	8005934 <_read>
 8026414:	1c43      	adds	r3, r0, #1
 8026416:	d102      	bne.n	802641e <_read_r+0x1e>
 8026418:	682b      	ldr	r3, [r5, #0]
 802641a:	b103      	cbz	r3, 802641e <_read_r+0x1e>
 802641c:	6023      	str	r3, [r4, #0]
 802641e:	bd38      	pop	{r3, r4, r5, pc}
 8026420:	2002e1e8 	.word	0x2002e1e8

08026424 <__sccl>:
 8026424:	b570      	push	{r4, r5, r6, lr}
 8026426:	780b      	ldrb	r3, [r1, #0]
 8026428:	4604      	mov	r4, r0
 802642a:	2b5e      	cmp	r3, #94	; 0x5e
 802642c:	bf0b      	itete	eq
 802642e:	784b      	ldrbeq	r3, [r1, #1]
 8026430:	1c48      	addne	r0, r1, #1
 8026432:	1c88      	addeq	r0, r1, #2
 8026434:	2200      	movne	r2, #0
 8026436:	bf08      	it	eq
 8026438:	2201      	moveq	r2, #1
 802643a:	1e61      	subs	r1, r4, #1
 802643c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8026440:	f801 2f01 	strb.w	r2, [r1, #1]!
 8026444:	42a9      	cmp	r1, r5
 8026446:	d1fb      	bne.n	8026440 <__sccl+0x1c>
 8026448:	b90b      	cbnz	r3, 802644e <__sccl+0x2a>
 802644a:	3801      	subs	r0, #1
 802644c:	bd70      	pop	{r4, r5, r6, pc}
 802644e:	f082 0101 	eor.w	r1, r2, #1
 8026452:	54e1      	strb	r1, [r4, r3]
 8026454:	1c42      	adds	r2, r0, #1
 8026456:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802645a:	2d2d      	cmp	r5, #45	; 0x2d
 802645c:	f102 36ff 	add.w	r6, r2, #4294967295
 8026460:	4610      	mov	r0, r2
 8026462:	d006      	beq.n	8026472 <__sccl+0x4e>
 8026464:	2d5d      	cmp	r5, #93	; 0x5d
 8026466:	d0f1      	beq.n	802644c <__sccl+0x28>
 8026468:	b90d      	cbnz	r5, 802646e <__sccl+0x4a>
 802646a:	4630      	mov	r0, r6
 802646c:	e7ee      	b.n	802644c <__sccl+0x28>
 802646e:	462b      	mov	r3, r5
 8026470:	e7ef      	b.n	8026452 <__sccl+0x2e>
 8026472:	7816      	ldrb	r6, [r2, #0]
 8026474:	2e5d      	cmp	r6, #93	; 0x5d
 8026476:	d0fa      	beq.n	802646e <__sccl+0x4a>
 8026478:	42b3      	cmp	r3, r6
 802647a:	dcf8      	bgt.n	802646e <__sccl+0x4a>
 802647c:	4618      	mov	r0, r3
 802647e:	3001      	adds	r0, #1
 8026480:	4286      	cmp	r6, r0
 8026482:	5421      	strb	r1, [r4, r0]
 8026484:	dcfb      	bgt.n	802647e <__sccl+0x5a>
 8026486:	43d8      	mvns	r0, r3
 8026488:	4430      	add	r0, r6
 802648a:	1c5d      	adds	r5, r3, #1
 802648c:	42b3      	cmp	r3, r6
 802648e:	bfa8      	it	ge
 8026490:	2000      	movge	r0, #0
 8026492:	182b      	adds	r3, r5, r0
 8026494:	3202      	adds	r2, #2
 8026496:	e7de      	b.n	8026456 <__sccl+0x32>

08026498 <__submore>:
 8026498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802649c:	460c      	mov	r4, r1
 802649e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80264a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80264a4:	4299      	cmp	r1, r3
 80264a6:	d11d      	bne.n	80264e4 <__submore+0x4c>
 80264a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80264ac:	f7fb fb6e 	bl	8021b8c <_malloc_r>
 80264b0:	b918      	cbnz	r0, 80264ba <__submore+0x22>
 80264b2:	f04f 30ff 	mov.w	r0, #4294967295
 80264b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80264ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80264be:	63a3      	str	r3, [r4, #56]	; 0x38
 80264c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80264c4:	6360      	str	r0, [r4, #52]	; 0x34
 80264c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80264ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80264ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80264d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80264d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80264da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80264de:	6020      	str	r0, [r4, #0]
 80264e0:	2000      	movs	r0, #0
 80264e2:	e7e8      	b.n	80264b6 <__submore+0x1e>
 80264e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80264e6:	0077      	lsls	r7, r6, #1
 80264e8:	463a      	mov	r2, r7
 80264ea:	f7ff f948 	bl	802577e <_realloc_r>
 80264ee:	4605      	mov	r5, r0
 80264f0:	2800      	cmp	r0, #0
 80264f2:	d0de      	beq.n	80264b2 <__submore+0x1a>
 80264f4:	eb00 0806 	add.w	r8, r0, r6
 80264f8:	4601      	mov	r1, r0
 80264fa:	4632      	mov	r2, r6
 80264fc:	4640      	mov	r0, r8
 80264fe:	f7fb f847 	bl	8021590 <memcpy>
 8026502:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8026506:	f8c4 8000 	str.w	r8, [r4]
 802650a:	e7e9      	b.n	80264e0 <__submore+0x48>

0802650c <__ascii_wctomb>:
 802650c:	b149      	cbz	r1, 8026522 <__ascii_wctomb+0x16>
 802650e:	2aff      	cmp	r2, #255	; 0xff
 8026510:	bf85      	ittet	hi
 8026512:	238a      	movhi	r3, #138	; 0x8a
 8026514:	6003      	strhi	r3, [r0, #0]
 8026516:	700a      	strbls	r2, [r1, #0]
 8026518:	f04f 30ff 	movhi.w	r0, #4294967295
 802651c:	bf98      	it	ls
 802651e:	2001      	movls	r0, #1
 8026520:	4770      	bx	lr
 8026522:	4608      	mov	r0, r1
 8026524:	4770      	bx	lr

08026526 <abort>:
 8026526:	b508      	push	{r3, lr}
 8026528:	2006      	movs	r0, #6
 802652a:	f000 f861 	bl	80265f0 <raise>
 802652e:	2001      	movs	r0, #1
 8026530:	f7df f9fa 	bl	8005928 <_exit>

08026534 <__env_lock>:
 8026534:	4801      	ldr	r0, [pc, #4]	; (802653c <__env_lock+0x8>)
 8026536:	f7fe bcfd 	b.w	8024f34 <__retarget_lock_acquire_recursive>
 802653a:	bf00      	nop
 802653c:	2002fac6 	.word	0x2002fac6

08026540 <__env_unlock>:
 8026540:	4801      	ldr	r0, [pc, #4]	; (8026548 <__env_unlock+0x8>)
 8026542:	f7fe bcf9 	b.w	8024f38 <__retarget_lock_release_recursive>
 8026546:	bf00      	nop
 8026548:	2002fac6 	.word	0x2002fac6

0802654c <_fstat_r>:
 802654c:	b538      	push	{r3, r4, r5, lr}
 802654e:	4d07      	ldr	r5, [pc, #28]	; (802656c <_fstat_r+0x20>)
 8026550:	2300      	movs	r3, #0
 8026552:	4604      	mov	r4, r0
 8026554:	4608      	mov	r0, r1
 8026556:	4611      	mov	r1, r2
 8026558:	602b      	str	r3, [r5, #0]
 802655a:	f7df f9fd 	bl	8005958 <_fstat>
 802655e:	1c43      	adds	r3, r0, #1
 8026560:	d102      	bne.n	8026568 <_fstat_r+0x1c>
 8026562:	682b      	ldr	r3, [r5, #0]
 8026564:	b103      	cbz	r3, 8026568 <_fstat_r+0x1c>
 8026566:	6023      	str	r3, [r4, #0]
 8026568:	bd38      	pop	{r3, r4, r5, pc}
 802656a:	bf00      	nop
 802656c:	2002e1e8 	.word	0x2002e1e8

08026570 <_isatty_r>:
 8026570:	b538      	push	{r3, r4, r5, lr}
 8026572:	4d06      	ldr	r5, [pc, #24]	; (802658c <_isatty_r+0x1c>)
 8026574:	2300      	movs	r3, #0
 8026576:	4604      	mov	r4, r0
 8026578:	4608      	mov	r0, r1
 802657a:	602b      	str	r3, [r5, #0]
 802657c:	f7df f9f2 	bl	8005964 <_isatty>
 8026580:	1c43      	adds	r3, r0, #1
 8026582:	d102      	bne.n	802658a <_isatty_r+0x1a>
 8026584:	682b      	ldr	r3, [r5, #0]
 8026586:	b103      	cbz	r3, 802658a <_isatty_r+0x1a>
 8026588:	6023      	str	r3, [r4, #0]
 802658a:	bd38      	pop	{r3, r4, r5, pc}
 802658c:	2002e1e8 	.word	0x2002e1e8

08026590 <_malloc_usable_size_r>:
 8026590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026594:	1f18      	subs	r0, r3, #4
 8026596:	2b00      	cmp	r3, #0
 8026598:	bfbc      	itt	lt
 802659a:	580b      	ldrlt	r3, [r1, r0]
 802659c:	18c0      	addlt	r0, r0, r3
 802659e:	4770      	bx	lr

080265a0 <_raise_r>:
 80265a0:	291f      	cmp	r1, #31
 80265a2:	b538      	push	{r3, r4, r5, lr}
 80265a4:	4604      	mov	r4, r0
 80265a6:	460d      	mov	r5, r1
 80265a8:	d904      	bls.n	80265b4 <_raise_r+0x14>
 80265aa:	2316      	movs	r3, #22
 80265ac:	6003      	str	r3, [r0, #0]
 80265ae:	f04f 30ff 	mov.w	r0, #4294967295
 80265b2:	bd38      	pop	{r3, r4, r5, pc}
 80265b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80265b6:	b112      	cbz	r2, 80265be <_raise_r+0x1e>
 80265b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80265bc:	b94b      	cbnz	r3, 80265d2 <_raise_r+0x32>
 80265be:	4620      	mov	r0, r4
 80265c0:	f000 f830 	bl	8026624 <_getpid_r>
 80265c4:	462a      	mov	r2, r5
 80265c6:	4601      	mov	r1, r0
 80265c8:	4620      	mov	r0, r4
 80265ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80265ce:	f000 b817 	b.w	8026600 <_kill_r>
 80265d2:	2b01      	cmp	r3, #1
 80265d4:	d00a      	beq.n	80265ec <_raise_r+0x4c>
 80265d6:	1c59      	adds	r1, r3, #1
 80265d8:	d103      	bne.n	80265e2 <_raise_r+0x42>
 80265da:	2316      	movs	r3, #22
 80265dc:	6003      	str	r3, [r0, #0]
 80265de:	2001      	movs	r0, #1
 80265e0:	e7e7      	b.n	80265b2 <_raise_r+0x12>
 80265e2:	2400      	movs	r4, #0
 80265e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80265e8:	4628      	mov	r0, r5
 80265ea:	4798      	blx	r3
 80265ec:	2000      	movs	r0, #0
 80265ee:	e7e0      	b.n	80265b2 <_raise_r+0x12>

080265f0 <raise>:
 80265f0:	4b02      	ldr	r3, [pc, #8]	; (80265fc <raise+0xc>)
 80265f2:	4601      	mov	r1, r0
 80265f4:	6818      	ldr	r0, [r3, #0]
 80265f6:	f7ff bfd3 	b.w	80265a0 <_raise_r>
 80265fa:	bf00      	nop
 80265fc:	20000480 	.word	0x20000480

08026600 <_kill_r>:
 8026600:	b538      	push	{r3, r4, r5, lr}
 8026602:	4d07      	ldr	r5, [pc, #28]	; (8026620 <_kill_r+0x20>)
 8026604:	2300      	movs	r3, #0
 8026606:	4604      	mov	r4, r0
 8026608:	4608      	mov	r0, r1
 802660a:	4611      	mov	r1, r2
 802660c:	602b      	str	r3, [r5, #0]
 802660e:	f7df f983 	bl	8005918 <_kill>
 8026612:	1c43      	adds	r3, r0, #1
 8026614:	d102      	bne.n	802661c <_kill_r+0x1c>
 8026616:	682b      	ldr	r3, [r5, #0]
 8026618:	b103      	cbz	r3, 802661c <_kill_r+0x1c>
 802661a:	6023      	str	r3, [r4, #0]
 802661c:	bd38      	pop	{r3, r4, r5, pc}
 802661e:	bf00      	nop
 8026620:	2002e1e8 	.word	0x2002e1e8

08026624 <_getpid_r>:
 8026624:	f7df b976 	b.w	8005914 <_getpid>

08026628 <_init>:
 8026628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802662a:	bf00      	nop
 802662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802662e:	bc08      	pop	{r3}
 8026630:	469e      	mov	lr, r3
 8026632:	4770      	bx	lr

08026634 <_fini>:
 8026634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026636:	bf00      	nop
 8026638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802663a:	bc08      	pop	{r3}
 802663c:	469e      	mov	lr, r3
 802663e:	4770      	bx	lr


my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029210  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d0d4  08029410  08029410  00039410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080464e4  080464e4  000606c4  2**0
                  CONTENTS
  4 .ARM          00000008  080464e4  080464e4  000564e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080464ec  080464ec  000606c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080464ec  080464ec  000564ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080464f0  080464f0  000564f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c4  20000000  080464f4  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f6bc  200006c8  08046bb8  000606c8  2**3
                  ALLOC
 10 ._user_heap_stack 0001c804  2002fd84  08046bb8  0006fd84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008e246  00000000  00000000  000606f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001320f  00000000  00000000  000ee938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000527dc  00000000  00000000  00101b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003700  00000000  00000000  00154328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000095b8  00000000  00000000  00157a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000485f6  00000000  00000000  00160fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0008f03b  00000000  00000000  001a95d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013a42c  00000000  00000000  00238611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00372a3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d518  00000000  00000000  00372a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006c8 	.word	0x200006c8
 800021c:	00000000 	.word	0x00000000
 8000220:	080293f8 	.word	0x080293f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006cc 	.word	0x200006cc
 800023c:	080293f8 	.word	0x080293f8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
 8000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 800026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200006f8 	.word	0x200006f8
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	20000774 	.word	0x20000774

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	200006f8 	.word	0x200006f8
 8000708:	40000c00 	.word	0x40000c00
 800070c:	20000774 	.word	0x20000774

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f024 fee2 	bl	80254ec <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f007 bf71 	b.w	8008614 <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	080295fc 	.word	0x080295fc

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219a      	movs	r1, #154	; 0x9a
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f004 fc2e 	bl	8004fb4 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219c      	movs	r1, #156	; 0x9c
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f004 fc22 	bl	8004fb4 <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f009 f839 	bl	8009898 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219b      	movs	r1, #155	; 0x9b
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f004 fbac 	bl	8004fb4 <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	08029614 	.word	0x08029614
 800086c:	20000284 	.word	0x20000284
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <ADC_Conv_complete+0x1dc>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a77      	ldr	r2, [pc, #476]	; (8000a6c <ADC_Conv_complete+0x1e0>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4977      	ldr	r1, [pc, #476]	; (8000a70 <ADC_Conv_complete+0x1e4>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b77      	ldr	r3, [pc, #476]	; (8000a74 <ADC_Conv_complete+0x1e8>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4877      	ldr	r0, [pc, #476]	; (8000a78 <ADC_Conv_complete+0x1ec>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681d      	ldr	r5, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b76      	ldr	r3, [pc, #472]	; (8000a7c <ADC_Conv_complete+0x1f0>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7814      	ldrb	r4, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f505 65b8 	addeq.w	r5, r5, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60eb      	str	r3, [r5, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	0223      	lsls	r3, r4, #8
 80008b6:	9405      	str	r4, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460c      	mov	r4, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a70      	ldr	r2, [pc, #448]	; (8000a80 <ADC_Conv_complete+0x1f4>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a9      	str	r1, [r5, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8000ac8 <ADC_Conv_complete+0x23c>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	606b      	str	r3, [r5, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8da 3000 	ldr.w	r3, [sl]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67a3      	str	r3, [r4, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8ca 3000 	str.w	r3, [sl]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008f0:	4b64      	ldr	r3, [pc, #400]	; (8000a84 <ADC_Conv_complete+0x1f8>)
 80008f2:	f04f 0e00 	mov.w	lr, #0
 80008f6:	350e      	adds	r5, #14
 80008f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000acc <ADC_Conv_complete+0x240>
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000ad0 <ADC_Conv_complete+0x244>
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <ADC_Conv_complete+0x1fc>)
 8000906:	f8cd e010 	str.w	lr, [sp, #16]
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	9303      	str	r3, [sp, #12]
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <ADC_Conv_complete+0x200>)
 8000910:	681e      	ldr	r6, [r3, #0]
 8000912:	4b5f      	ldr	r3, [pc, #380]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <ADC_Conv_complete+0x208>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <ADC_Conv_complete+0x20c>)
 800091c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <ADC_Conv_complete+0x210>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	9301      	str	r3, [sp, #4]
		lastmeanwindiff = abs(meanwindiff);
 8000926:	2900      	cmp	r1, #0
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000928:	f00e 041f 	and.w	r4, lr, #31
		thissamp = (*adcbuf16)[i];
 800092c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000930:	f10e 0e01 	add.w	lr, lr, #1
		lastmeanwindiff = abs(meanwindiff);
 8000934:	bfb8      	it	lt
 8000936:	4249      	neglt	r1, r1
		if (sigsend)
 8000938:	f8da b000 	ldr.w	fp, [sl]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800093c:	4418      	add	r0, r3
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800093e:	441e      	add	r6, r3
		lastmeanwindiff = abs(meanwindiff);
 8000940:	b28f      	uxth	r7, r1
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000942:	9903      	ldr	r1, [sp, #12]
 8000944:	eb07 0c01 	add.w	ip, r7, r1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000948:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
		lastsamp[j] = thissamp;			// save last samples
 800094c:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000950:	1a40      	subs	r0, r0, r1
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000952:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8000956:	1a52      	subs	r2, r2, r1
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000958:	f340 114f 	sbfx	r1, r0, #5, #16
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	2b00      	cmp	r3, #0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000964:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000966:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800096a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800096e:	f848 1024 	str.w	r1, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	9c02      	ldr	r4, [sp, #8]
 8000974:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000978:	b29b      	uxth	r3, r3
 800097a:	191c      	adds	r4, r3, r4
 800097c:	4564      	cmp	r4, ip
 800097e:	dd04      	ble.n	800098a <ADC_Conv_complete+0xfe>
			pretrigcnt++;
 8000980:	9c01      	ldr	r4, [sp, #4]
 8000982:	3401      	adds	r4, #1
 8000984:	9401      	str	r4, [sp, #4]
 8000986:	2401      	movs	r4, #1
 8000988:	9404      	str	r4, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 800098a:	f1bb 0f00 	cmp.w	fp, #0
 800098e:	d104      	bne.n	800099a <ADC_Conv_complete+0x10e>
 8000990:	4563      	cmp	r3, ip
 8000992:	dd02      	ble.n	800099a <ADC_Conv_complete+0x10e>
			sigsend = 1; // the real trigger
 8000994:	2301      	movs	r3, #1
 8000996:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 800099a:	f5be 7f36 	cmp.w	lr, #728	; 0x2d8
 800099e:	d1c2      	bne.n	8000926 <ADC_Conv_complete+0x9a>
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <ADC_Conv_complete+0x204>)
 80009a2:	6018      	str	r0, [r3, #0]
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <ADC_Conv_complete+0x208>)
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <ADC_Conv_complete+0x20c>)
 80009aa:	8019      	strh	r1, [r3, #0]
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <ADC_Conv_complete+0x200>)
 80009ae:	601e      	str	r6, [r3, #0]
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <ADC_Conv_complete+0x214>)
 80009b2:	801f      	strh	r7, [r3, #0]
 80009b4:	9b04      	ldr	r3, [sp, #16]
 80009b6:	b113      	cbz	r3, 80009be <ADC_Conv_complete+0x132>
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <ADC_Conv_complete+0x210>)
 80009ba:	9a01      	ldr	r2, [sp, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	if (sigsend) {
 80009be:	f8da 3000 	ldr.w	r3, [sl]
 80009c2:	b33b      	cbz	r3, 8000a14 <ADC_Conv_complete+0x188>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <ADC_Conv_complete+0x218>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d02c      	beq.n	8000a26 <ADC_Conv_complete+0x19a>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009cc:	4928      	ldr	r1, [pc, #160]	; (8000a70 <ADC_Conv_complete+0x1e4>)
 80009ce:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80009d0:	3201      	adds	r2, #1
 80009d2:	67ca      	str	r2, [r1, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009d8:	220f      	movs	r2, #15
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80009dc:	601a      	str	r2, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <ADC_Conv_complete+0x220>)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	d10a      	bne.n	8000a02 <ADC_Conv_complete+0x176>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009ec:	08f3      	lsrs	r3, r6, #3
 80009ee:	4830      	ldr	r0, [pc, #192]	; (8000ab0 <ADC_Conv_complete+0x224>)
 80009f0:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <ADC_Conv_complete+0x228>)
 80009f2:	fba0 0303 	umull	r0, r3, r0, r3
 80009f6:	0b9b      	lsrs	r3, r3, #14
 80009f8:	600b      	str	r3, [r1, #0]
		adcbgbaseacc = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	4923      	ldr	r1, [pc, #140]	; (8000a8c <ADC_Conv_complete+0x200>)
		samplecnt = 0;
 80009fe:	6013      	str	r3, [r2, #0]
		adcbgbaseacc = 0;
 8000a00:	600b      	str	r3, [r1, #0]
	if (xTaskToNotify == NULL) {
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	b342      	cbz	r2, 8000a5a <ADC_Conv_complete+0x1ce>
	} else if (sigsend) {
 8000a08:	f8da 2000 	ldr.w	r2, [sl]
 8000a0c:	b982      	cbnz	r2, 8000a30 <ADC_Conv_complete+0x1a4>
}
 8000a0e:	b007      	add	sp, #28
 8000a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <ADC_Conv_complete+0x218>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	b112      	cbz	r2, 8000a20 <ADC_Conv_complete+0x194>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <ADC_Conv_complete+0x230>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e7db      	b.n	80009de <ADC_Conv_complete+0x152>
			++adcbatchid; // start a new adc batch number
 8000a26:	9a05      	ldr	r2, [sp, #20]
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <ADC_Conv_complete+0x1e0>)
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	700a      	strb	r2, [r1, #0]
 8000a2e:	e7cd      	b.n	80009cc <ADC_Conv_complete+0x140>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a30:	4c23      	ldr	r4, [pc, #140]	; (8000ac0 <ADC_Conv_complete+0x234>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4621      	mov	r1, r4
 8000a36:	f016 fb19 	bl	801706c <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0e6      	beq.n	8000a0e <ADC_Conv_complete+0x182>
 8000a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	f3bf 8f6f 	isb	sy
}
 8000a54:	b007      	add	sp, #28
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <ADC_Conv_complete+0x238>)
}
 8000a5c:	b007      	add	sp, #28
 8000a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a62:	f024 bd43 	b.w	80254ec <puts>
 8000a66:	bf00      	nop
 8000a68:	200006f8 	.word	0x200006f8
 8000a6c:	200006e4 	.word	0x200006e4
 8000a70:	20002f3c 	.word	0x20002f3c
 8000a74:	20000754 	.word	0x20000754
 8000a78:	200006f4 	.word	0x200006f4
 8000a7c:	20000774 	.word	0x20000774
 8000a80:	2000075c 	.word	0x2000075c
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000002 	.word	0x20000002
 8000a8c:	200006e8 	.word	0x200006e8
 8000a90:	200007fc 	.word	0x200007fc
 8000a94:	20000778 	.word	0x20000778
 8000a98:	20000750 	.word	0x20000750
 8000a9c:	20000758 	.word	0x20000758
 8000aa0:	20000708 	.word	0x20000708
 8000aa4:	20000768 	.word	0x20000768
 8000aa8:	2000074c 	.word	0x2000074c
 8000aac:	20000760 	.word	0x20000760
 8000ab0:	16816817 	.word	0x16816817
 8000ab4:	200006fc 	.word	0x200006fc
 8000ab8:	20000804 	.word	0x20000804
 8000abc:	20000764 	.word	0x20000764
 8000ac0:	20000800 	.word	0x20000800
 8000ac4:	0802962c 	.word	0x0802962c
 8000ac8:	2000076c 	.word	0x2000076c
 8000acc:	2000070c 	.word	0x2000070c
 8000ad0:	2000077c 	.word	0x2000077c

08000ad4 <startadc>:

void startadc() {
 8000ad4:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000ad6:	492b      	ldr	r1, [pc, #172]	; (8000b84 <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000ad8:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000adc:	482b      	ldr	r0, [pc, #172]	; (8000b8c <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000ade:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ae0:	4d2b      	ldr	r5, [pc, #172]	; (8000b90 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ae6:	f024 fd01 	bl	80254ec <puts>
	osDelay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f014 fcc8 	bl	8015480 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000af0:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000af4:	f016 ffa8 	bl	8017a48 <pvPortMalloc>
 8000af8:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d03d      	beq.n	8000b7a <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000afe:	0783      	lsls	r3, r0, #30
 8000b00:	4604      	mov	r4, r0
 8000b02:	d128      	bne.n	8000b56 <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b04:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b08:	2155      	movs	r1, #85	; 0x55
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f023 fcb4 	bl	8024478 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b10:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b14:	21aa      	movs	r1, #170	; 0xaa
 8000b16:	18a0      	adds	r0, r4, r2
 8000b18:	f023 fcae 	bl	8024478 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b22:	f104 0110 	add.w	r1, r4, #16
 8000b26:	4c1c      	ldr	r4, [pc, #112]	; (8000b98 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b2c:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b30:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b32:	f7ff fe01 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <startadc+0xcc>)
 8000b38:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b3c:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3e:	f007 fcbb 	bl	80084b8 <HAL_ADC_Start>
 8000b42:	b9b0      	cbnz	r0, 8000b72 <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <startadc+0xd4>)
 8000b46:	f007 fcb7 	bl	80084b8 <HAL_ADC_Start>
 8000b4a:	b970      	cbnz	r0, 8000b6a <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <startadc+0xc8>)
 8000b4e:	f007 fcb3 	bl	80084b8 <HAL_ADC_Start>
 8000b52:	b928      	cbnz	r0, 8000b60 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b54:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <startadc+0xd8>)
 8000b58:	f024 fcc8 	bl	80254ec <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b5c:	682c      	ldr	r4, [r5, #0]
 8000b5e:	e7d1      	b.n	8000b04 <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <startadc+0xdc>)
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b66:	f024 bcc1 	b.w	80254ec <puts>
		printf("ADC2 failed start\r\n");
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <startadc+0xe0>)
 8000b6c:	f024 fcbe 	bl	80254ec <puts>
 8000b70:	e7ec      	b.n	8000b4c <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <startadc+0xe4>)
 8000b74:	f024 fcba 	bl	80254ec <puts>
 8000b78:	e7e4      	b.n	8000b44 <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <startadc+0xe8>)
 8000b7c:	f024 fcb6 	bl	80254ec <puts>
		for (;;)
 8000b80:	e7fe      	b.n	8000b80 <startadc+0xac>
 8000b82:	bf00      	nop
 8000b84:	066ff300 	.word	0x066ff300
 8000b88:	20002f3c 	.word	0x20002f3c
 8000b8c:	08029640 	.word	0x08029640
 8000b90:	20000754 	.word	0x20000754
 8000b94:	200006f0 	.word	0x200006f0
 8000b98:	200006ec 	.word	0x200006ec
 8000b9c:	200020e0 	.word	0x200020e0
 8000ba0:	200006f5 	.word	0x200006f5
 8000ba4:	20002170 	.word	0x20002170
 8000ba8:	20002128 	.word	0x20002128
 8000bac:	0802967c 	.word	0x0802967c
 8000bb0:	080296dc 	.word	0x080296dc
 8000bb4:	080296c8 	.word	0x080296c8
 8000bb8:	080296b4 	.word	0x080296b4
 8000bbc:	08029654 	.word	0x08029654

08000bc0 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000bc0:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bc2:	b169      	cbz	r1, 8000be0 <xcrc32+0x20>
 8000bc4:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bca:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bce:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bd2:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000bdc:	d1f5      	bne.n	8000bca <xcrc32+0xa>
 8000bde:	4770      	bx	lr
  unsigned int crc = init;
 8000be0:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000be2:	4770      	bx	lr
 8000be4:	080296f0 	.word	0x080296f0

08000be8 <stampboot>:
		return (0);
	}
}

// make sure the boot vector points to this running program
void stampboot() {
 8000be8:	b500      	push	{lr}
 8000bea:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options, addr;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000bec:	4668      	mov	r0, sp
 8000bee:	f00a fcdf 	bl	800b5b0 <HAL_FLASHEx_OBGetConfig>

	addr = (uint32_t) stampboot & LOADER_BASE_MEM2; 	// where are we running this code?
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <stampboot+0x7c>)
 8000bf4:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000

	if (OBInitStruct.BootAddr0 != newadd) {
 8000bfc:	9b06      	ldr	r3, [sp, #24]
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000bfe:	d01b      	beq.n	8000c38 <stampboot+0x50>
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c00:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
 8000c04:	d015      	beq.n	8000c32 <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c06:	f00a faef 	bl	800b1e8 <HAL_FLASH_OB_Unlock>

		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c0a:	f44f 5301 	mov.w	r3, #8256	; 0x2040
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c12:	9306      	str	r3, [sp, #24]

		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c14:	9b05      	ldr	r3, [sp, #20]

		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c16:	4668      	mov	r0, sp
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c18:	9207      	str	r2, [sp, #28]
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c1a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c1e:	9305      	str	r3, [sp, #20]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c20:	f00a fbee 	bl	800b400 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 8000c24:	b9c0      	cbnz	r0, 8000c58 <stampboot+0x70>
			printf("swapboot: failed to OBProgram %d\n", res);
		}

		res = HAL_FLASH_OB_Launch();
 8000c26:	f00a fafb 	bl	800b220 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8000c2a:	b980      	cbnz	r0, 8000c4e <stampboot+0x66>
			printf("swapboot: failed to OBLaunch %d\n", res);
		}
		printf(".......re-stamped boot vector.......\n");
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <stampboot+0x80>)
 8000c2e:	f024 fc5d 	bl	80254ec <puts>
	}
}
 8000c32:	b009      	add	sp, #36	; 0x24
 8000c34:	f85d fb04 	ldr.w	pc, [sp], #4
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c3c:	d0f9      	beq.n	8000c32 <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c3e:	f00a fad3 	bl	800b1e8 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c46:	f44f 5201 	mov.w	r2, #8256	; 0x2040
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c4a:	9306      	str	r3, [sp, #24]
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c4c:	e7e2      	b.n	8000c14 <stampboot+0x2c>
			printf("swapboot: failed to OBLaunch %d\n", res);
 8000c4e:	4601      	mov	r1, r0
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <stampboot+0x84>)
 8000c52:	f024 fbaf 	bl	80253b4 <iprintf>
 8000c56:	e7e9      	b.n	8000c2c <stampboot+0x44>
			printf("swapboot: failed to OBProgram %d\n", res);
 8000c58:	4601      	mov	r1, r0
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <stampboot+0x88>)
 8000c5c:	f024 fbaa 	bl	80253b4 <iprintf>
 8000c60:	e7e1      	b.n	8000c26 <stampboot+0x3e>
 8000c62:	bf00      	nop
 8000c64:	08000be9 	.word	0x08000be9
 8000c68:	08029b38 	.word	0x08029b38
 8000c6c:	08029b14 	.word	0x08029b14
 8000c70:	08029af0 	.word	0x08029af0

08000c74 <printflasherr>:
void printflasherr() {
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c76:	4d1e      	ldr	r5, [pc, #120]	; (8000cf0 <printflasherr+0x7c>)
		msg = "Programming alignment";
 8000c78:	4f1e      	ldr	r7, [pc, #120]	; (8000cf4 <printflasherr+0x80>)
		msg = "Erasing Sequence";
 8000c7a:	4e1f      	ldr	r6, [pc, #124]	; (8000cf8 <printflasherr+0x84>)
	err = HAL_FLASH_GetError();
 8000c7c:	f00a fafe 	bl	800b27c <HAL_FLASH_GetError>
	switch (err) {
 8000c80:	1e83      	subs	r3, r0, #2
	err = HAL_FLASH_GetError();
 8000c82:	4604      	mov	r4, r0
	switch (err) {
 8000c84:	2b1e      	cmp	r3, #30
 8000c86:	d811      	bhi.n	8000cac <printflasherr+0x38>
 8000c88:	e8df f003 	tbb	[pc, r3]
 8000c8c:	102f102b 	.word	0x102f102b
 8000c90:	102d1010 	.word	0x102d1010
 8000c94:	10101010 	.word	0x10101010
 8000c98:	10291010 	.word	0x10291010
 8000c9c:	10101010 	.word	0x10101010
 8000ca0:	10101010 	.word	0x10101010
 8000ca4:	10101010 	.word	0x10101010
 8000ca8:	1010      	.short	0x1010
 8000caa:	1d          	.byte	0x1d
 8000cab:	00          	.byte	0x00
		sprintf(msg, "Unknown err 0x%0x", err);
 8000cac:	4602      	mov	r2, r0
 8000cae:	4913      	ldr	r1, [pc, #76]	; (8000cfc <printflasherr+0x88>)
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f024 fd69 	bl	8025788 <siprintf>
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	4811      	ldr	r0, [pc, #68]	; (8000d00 <printflasherr+0x8c>)
 8000cba:	f024 fb7b 	bl	80253b4 <iprintf>
	res = HAL_FLASH_Lock();
 8000cbe:	f00a fa89 	bl	800b1d4 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cc2:	b940      	cbnz	r0, 8000cd6 <printflasherr+0x62>
}
 8000cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		msg = "Operation";
 8000cc6:	490f      	ldr	r1, [pc, #60]	; (8000d04 <printflasherr+0x90>)
		printf("Flash operation failed: %s error\n", msg);
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f024 fb73 	bl	80253b4 <iprintf>
	res = HAL_FLASH_Lock();
 8000cce:	f00a fa81 	bl	800b1d4 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d0f6      	beq.n	8000cc4 <printflasherr+0x50>
		printf("LockFlash: failed to lock\n");
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <printflasherr+0x94>)
 8000cd8:	f024 fc08 	bl	80254ec <puts>
		printflasherr();
 8000cdc:	e7ce      	b.n	8000c7c <printflasherr+0x8>
		msg = "Write Protected";
 8000cde:	490b      	ldr	r1, [pc, #44]	; (8000d0c <printflasherr+0x98>)
		break;
 8000ce0:	e7f2      	b.n	8000cc8 <printflasherr+0x54>
		msg = "Erasing Sequence";
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	e7f0      	b.n	8000cc8 <printflasherr+0x54>
		msg = "Programming alignment";
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	e7ee      	b.n	8000cc8 <printflasherr+0x54>
	switch (err) {
 8000cea:	4909      	ldr	r1, [pc, #36]	; (8000d10 <printflasherr+0x9c>)
 8000cec:	e7ec      	b.n	8000cc8 <printflasherr+0x54>
 8000cee:	bf00      	nop
 8000cf0:	08029bf4 	.word	0x08029bf4
 8000cf4:	08029b80 	.word	0x08029b80
 8000cf8:	08029b6c 	.word	0x08029b6c
 8000cfc:	08029bc0 	.word	0x08029bc0
 8000d00:	08029bd4 	.word	0x08029bd4
 8000d04:	08029b60 	.word	0x08029b60
 8000d08:	08029c18 	.word	0x08029c18
 8000d0c:	08029b98 	.word	0x08029b98
 8000d10:	08029ba8 	.word	0x08029ba8

08000d14 <WriteFlashWord.part.0>:
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d14:	b570      	push	{r4, r5, r6, lr}
	__HAL_FLASH_ART_DISABLE();
 8000d16:	4c1a      	ldr	r4, [pc, #104]	; (8000d80 <WriteFlashWord.part.0+0x6c>)
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d18:	4605      	mov	r5, r0
 8000d1a:	460e      	mov	r6, r1
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d1c:	2300      	movs	r3, #0
	__HAL_FLASH_ART_DISABLE();
 8000d1e:	6822      	ldr	r2, [r4, #0]
 8000d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d24:	6022      	str	r2, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d26:	460a      	mov	r2, r1
 8000d28:	4601      	mov	r1, r0
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f00a fad8 	bl	800b2e0 <HAL_FLASH_Program>
 8000d30:	b990      	cbnz	r0, 8000d58 <WriteFlashWord.part.0+0x44>
	__HAL_FLASH_ART_RESET();
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d38:	6023      	str	r3, [r4, #0]
	__HAL_FLASH_ART_ENABLE();
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d40:	6023      	str	r3, [r4, #0]
	if (*(uint32_t*) address != data) {
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d100      	bne.n	8000d4a <WriteFlashWord.part.0+0x36>
}
 8000d48:	bd70      	pop	{r4, r5, r6, pc}
		printf("WriteFlashWord: Failed at 0x%08x with data=%08x, read=0x%08x\n", address, data, *(uint32_t*) address);
 8000d4a:	4632      	mov	r2, r6
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <WriteFlashWord.part.0+0x70>)
 8000d50:	f024 fb30 	bl	80253b4 <iprintf>
		return (HAL_ERROR);
 8000d54:	2001      	movs	r0, #1
}
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
		printflasherr();		// deleteme
 8000d58:	f7ff ff8c 	bl	8000c74 <printflasherr>
			printflasherr();
 8000d5c:	f7ff ff8a 	bl	8000c74 <printflasherr>
			printf("WriteFlashWord: failed write at 0x%0x err=0x%x\n", address, res);
 8000d60:	2201      	movs	r2, #1
 8000d62:	4629      	mov	r1, r5
 8000d64:	4808      	ldr	r0, [pc, #32]	; (8000d88 <WriteFlashWord.part.0+0x74>)
 8000d66:	f024 fb25 	bl	80253b4 <iprintf>
			__HAL_FLASH_ART_RESET();
 8000d6a:	6823      	ldr	r3, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d6c:	2001      	movs	r0, #1
			__HAL_FLASH_ART_RESET();
 8000d6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d72:	6023      	str	r3, [r4, #0]
			__HAL_FLASH_ART_ENABLE();
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6023      	str	r3, [r4, #0]
}
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00
 8000d84:	08029c88 	.word	0x08029c88
 8000d88:	08029c58 	.word	0x08029c58

08000d8c <EraseFlash>:
HAL_StatusTypeDef EraseFlash(void *memptr) {
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	4604      	mov	r4, r0
	res = HAL_FLASH_Unlock();
 8000d92:	f00a fa0b 	bl	800b1ac <HAL_FLASH_Unlock>
	if (res != HAL_OK) {
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d14f      	bne.n	8000e3a <EraseFlash+0xae>
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000d9a:	f004 6301 	and.w	r3, r4, #135266304	; 0x8100000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000d9e:	4d34      	ldr	r5, [pc, #208]	; (8000e70 <EraseFlash+0xe4>)
 8000da0:	2202      	movs	r2, #2
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000da2:	4626      	mov	r6, r4
 8000da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000da8:	612a      	str	r2, [r5, #16]
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000daa:	d041      	beq.n	8000e30 <EraseFlash+0xa4>
		EraseInitStruct.Sector = FLASH_SECTOR_8;
 8000dac:	2308      	movs	r3, #8
 8000dae:	e9c5 3202 	strd	r3, r2, [r5, #8]
	for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000db2:	4930      	ldr	r1, [pc, #192]	; (8000e74 <EraseFlash+0xe8>)
 8000db4:	1f23      	subs	r3, r4, #4
 8000db6:	4421      	add	r1, r4
 8000db8:	e001      	b.n	8000dbe <EraseFlash+0x32>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d006      	beq.n	8000dcc <EraseFlash+0x40>
		if (*ptr != 0xffffffff) {
 8000dbe:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000dc2:	3201      	adds	r2, #1
 8000dc4:	d0f9      	beq.n	8000dba <EraseFlash+0x2e>
	if ((dirty) && (notflashed)) {
 8000dc6:	4f2c      	ldr	r7, [pc, #176]	; (8000e78 <EraseFlash+0xec>)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b92b      	cbnz	r3, 8000dd8 <EraseFlash+0x4c>
		printf("Flash erase unnecessary\n");
 8000dcc:	482b      	ldr	r0, [pc, #172]	; (8000e7c <EraseFlash+0xf0>)
 8000dce:	f024 fb8d 	bl	80254ec <puts>
}
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	b003      	add	sp, #12
 8000dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(1000);
 8000dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ddc:	f014 fb50 	bl	8015480 <osDelay>
		printf("Erasing Flash for %d sector(s) from %d\n", EraseInitStruct.NbSectors, EraseInitStruct.Sector);
 8000de0:	4827      	ldr	r0, [pc, #156]	; (8000e80 <EraseFlash+0xf4>)
 8000de2:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 8000de6:	f024 fae5 	bl	80253b4 <iprintf>
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000dea:	2200      	movs	r2, #0
 8000dec:	2301      	movs	r3, #1
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000dee:	a901      	add	r1, sp, #4
 8000df0:	481f      	ldr	r0, [pc, #124]	; (8000e70 <EraseFlash+0xe4>)
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000df2:	e9c5 2300 	strd	r2, r3, [r5]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000df6:	2302      	movs	r3, #2
 8000df8:	612b      	str	r3, [r5, #16]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000dfa:	f00a fc45 	bl	800b688 <HAL_FLASHEx_Erase>
		if (SectorError != 0xffffffff) {
 8000dfe:	9901      	ldr	r1, [sp, #4]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e00:	4605      	mov	r5, r0
		if (SectorError != 0xffffffff) {
 8000e02:	1c48      	adds	r0, r1, #1
 8000e04:	d12d      	bne.n	8000e62 <EraseFlash+0xd6>
		if (res != HAL_OK) {
 8000e06:	bb25      	cbnz	r5, 8000e52 <EraseFlash+0xc6>
			printf("Flash successfully erased\n");
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <EraseFlash+0xf8>)
 8000e0a:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
 8000e0e:	f024 fb6d 	bl	80254ec <puts>
			notflashed = 0;
 8000e12:	603d      	str	r5, [r7, #0]
			for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000e14:	e001      	b.n	8000e1a <EraseFlash+0x8e>
 8000e16:	42b4      	cmp	r4, r6
 8000e18:	d0db      	beq.n	8000dd2 <EraseFlash+0x46>
 8000e1a:	4631      	mov	r1, r6
				if (*ptr != 0xffffffff) {
 8000e1c:	3604      	adds	r6, #4
 8000e1e:	680b      	ldr	r3, [r1, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	d0f8      	beq.n	8000e16 <EraseFlash+0x8a>
				notflashed = 1;
 8000e24:	2301      	movs	r3, #1
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <EraseFlash+0xfc>)
				notflashed = 1;
 8000e28:	603b      	str	r3, [r7, #0]
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e2a:	f024 fac3 	bl	80253b4 <iprintf>
 8000e2e:	e7d0      	b.n	8000dd2 <EraseFlash+0x46>
		EraseInitStruct.NbSectors = 6;
 8000e30:	2200      	movs	r2, #0
 8000e32:	2306      	movs	r3, #6
 8000e34:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8000e38:	e7bb      	b.n	8000db2 <EraseFlash+0x26>
		printf("UnlockFlash: failed to unlock 0x%x\n", res);
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	4813      	ldr	r0, [pc, #76]	; (8000e8c <EraseFlash+0x100>)
 8000e3e:	f024 fab9 	bl	80253b4 <iprintf>
		printflasherr();
 8000e42:	f7ff ff17 	bl	8000c74 <printflasherr>
		printf("EraseFlash: unlock failed\n");
 8000e46:	4812      	ldr	r0, [pc, #72]	; (8000e90 <EraseFlash+0x104>)
 8000e48:	f024 fb50 	bl	80254ec <puts>
		printflasherr();
 8000e4c:	f7ff ff12 	bl	8000c74 <printflasherr>
 8000e50:	e7a3      	b.n	8000d9a <EraseFlash+0xe>
			printf("EraseFlash: failed\n");
 8000e52:	4810      	ldr	r0, [pc, #64]	; (8000e94 <EraseFlash+0x108>)
 8000e54:	f024 fb4a 	bl	80254ec <puts>
			printflasherr();
 8000e58:	f7ff ff0c 	bl	8000c74 <printflasherr>
}
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	b003      	add	sp, #12
 8000e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Flash Erase failed sectorerror 0x%08x\n", SectorError);
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <EraseFlash+0x10c>)
 8000e64:	f024 faa6 	bl	80253b4 <iprintf>
		if (res != HAL_OK) {
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0cd      	beq.n	8000e08 <EraseFlash+0x7c>
 8000e6c:	e7f1      	b.n	8000e52 <EraseFlash+0xc6>
 8000e6e:	bf00      	nop
 8000e70:	20000808 	.word	0x20000808
 8000e74:	0007fffc 	.word	0x0007fffc
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	08029d64 	.word	0x08029d64
 8000e80:	08029ce4 	.word	0x08029ce4
 8000e84:	08029d48 	.word	0x08029d48
 8000e88:	08029d7c 	.word	0x08029d7c
 8000e8c:	08029c34 	.word	0x08029c34
 8000e90:	08029cc8 	.word	0x08029cc8
 8000e94:	08029d34 	.word	0x08029d34
 8000e98:	08029d0c 	.word	0x08029d0c

08000e9c <swapboot>:

/// fix up the boot vectors in the option flash
void swapboot() {
 8000e9c:	b500      	push	{lr}
 8000e9e:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000ea0:	4668      	mov	r0, sp
 8000ea2:	f00a fb85 	bl	800b5b0 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_OB_Unlock();
 8000ea6:	f00a f99f 	bl	800b1e8 <HAL_FLASH_OB_Unlock>

	// swap boot address (maybe)

	newadd = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;	// toggle boot segment start add
 8000eaa:	9b06      	ldr	r3, [sp, #24]
 8000eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb0:	d008      	beq.n	8000ec4 <swapboot+0x28>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	3201      	adds	r2, #1
 8000eba:	d009      	beq.n	8000ed0 <swapboot+0x34>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ebc:	9306      	str	r3, [sp, #24]
	}
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ebe:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 8000ec2:	e007      	b.n	8000ed4 <swapboot+0x38>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	d0f9      	beq.n	8000ebe <swapboot+0x22>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000eca:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000ece:	9306      	str	r3, [sp, #24]
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ed0:	f44f 5200 	mov.w	r2, #8192	; 0x2000

	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000ed4:	9b05      	ldr	r3, [sp, #20]

	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000ed6:	4668      	mov	r0, sp
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ed8:	9207      	str	r2, [sp, #28]
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000eda:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000ede:	9305      	str	r3, [sp, #20]
	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000ee0:	f00a fa8e 	bl	800b400 <HAL_FLASHEx_OBProgram>
	if (res != HAL_OK) {
 8000ee4:	b990      	cbnz	r0, 8000f0c <swapboot+0x70>
		printf("swapboot: failed to OBProgram %d\n", res);
	}

	res = HAL_FLASH_OB_Launch();
 8000ee6:	f00a f99b 	bl	800b220 <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000eea:	b950      	cbnz	r0, 8000f02 <swapboot+0x66>
		printf("swapboot: failed to OBLaunch %d\n", res);
	}
	printf("fixing boot....\n");
 8000eec:	480a      	ldr	r0, [pc, #40]	; (8000f18 <swapboot+0x7c>)
 8000eee:	f024 fafd 	bl	80254ec <puts>
	HAL_FLASH_OB_Lock();
 8000ef2:	f00a f98b 	bl	800b20c <HAL_FLASH_OB_Lock>

	printf("swapboot ran\n");
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <swapboot+0x80>)
 8000ef8:	f024 faf8 	bl	80254ec <puts>
}
 8000efc:	b009      	add	sp, #36	; 0x24
 8000efe:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("swapboot: failed to OBLaunch %d\n", res);
 8000f02:	4601      	mov	r1, r0
 8000f04:	4806      	ldr	r0, [pc, #24]	; (8000f20 <swapboot+0x84>)
 8000f06:	f024 fa55 	bl	80253b4 <iprintf>
 8000f0a:	e7ef      	b.n	8000eec <swapboot+0x50>
		printf("swapboot: failed to OBProgram %d\n", res);
 8000f0c:	4601      	mov	r1, r0
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <swapboot+0x88>)
 8000f10:	f024 fa50 	bl	80253b4 <iprintf>
 8000f14:	e7e7      	b.n	8000ee6 <swapboot+0x4a>
 8000f16:	bf00      	nop
 8000f18:	08029ddc 	.word	0x08029ddc
 8000f1c:	08029dec 	.word	0x08029dec
 8000f20:	08029b14 	.word	0x08029b14
 8000f24:	08029af0 	.word	0x08029af0

08000f28 <flash_writeword>:
static void* memread() {

}

// write tp flash with data at memptr
int flash_writeword(uint32_t worddata) {
 8000f28:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef res;

	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f2a:	4d10      	ldr	r5, [pc, #64]	; (8000f6c <flash_writeword+0x44>)
 8000f2c:	682b      	ldr	r3, [r5, #0]
	if (((int) address < FLASH_START_ADDRESS) || ((int) address > (FLASH_END_ADDRESS))) {
 8000f2e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8000f32:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000f36:	d20a      	bcs.n	8000f4e <flash_writeword+0x26>
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fee9 	bl	8000d14 <WriteFlashWord.part.0>
	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f42:	b938      	cbnz	r0, 8000f54 <flash_writeword+0x2c>
		printf("memwrite: WriteFlash error\n");
		return (-1);
	}
	if (*(uint32_t*) flash_memptr != worddata) {
 8000f44:	6829      	ldr	r1, [r5, #0]
 8000f46:	680b      	ldr	r3, [r1, #0]
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d109      	bne.n	8000f60 <flash_writeword+0x38>
		printf("memwrite: Readback error at %08x\n", flash_memptr);
		return (-1);
	}
	return (0);
}
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
		printf("WriteFlash: failed address check\n");
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <flash_writeword+0x48>)
 8000f50:	f024 facc 	bl	80254ec <puts>
		printf("memwrite: WriteFlash error\n");
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <flash_writeword+0x4c>)
 8000f56:	f024 fac9 	bl	80254ec <puts>
		return (-1);
 8000f5a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f5e:	bd38      	pop	{r3, r4, r5, pc}
		printf("memwrite: Readback error at %08x\n", flash_memptr);
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <flash_writeword+0x50>)
 8000f62:	f024 fa27 	bl	80253b4 <iprintf>
		return (-1);
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}
 8000f6c:	20000848 	.word	0x20000848
 8000f70:	08029db8 	.word	0x08029db8
 8000f74:	08029dfc 	.word	0x08029dfc
 8000f78:	08029e18 	.word	0x08029e18

08000f7c <flash_memwrite>:

// flash_memwrite - this writes an unspecified block size to Flash (with verification)
// assume mem is pointing at byte array
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile int i, j, k;
	volatile uint32_t data;
	HAL_StatusTypeDef res;
	static int lastbyte = 0;

	flash_filelength += (int) len;
 8000f80:	4e49      	ldr	r6, [pc, #292]	; (80010a8 <flash_memwrite+0x12c>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000f82:	b085      	sub	sp, #20
//	}
//	printf("\n");
//////////////////////////////////////////////////////
#endif

	if ((!(flash_abort)) && (notflashed)) {
 8000f84:	4949      	ldr	r1, [pc, #292]	; (80010ac <flash_memwrite+0x130>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000f86:	4615      	mov	r5, r2
	flash_filelength += (int) len;
 8000f88:	6833      	ldr	r3, [r6, #0]
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000f8a:	4604      	mov	r4, r0
	if ((!(flash_abort)) && (notflashed)) {
 8000f8c:	680f      	ldr	r7, [r1, #0]
	flash_filelength += (int) len;
 8000f8e:	4413      	add	r3, r2
 8000f90:	6033      	str	r3, [r6, #0]
	if ((!(flash_abort)) && (notflashed)) {
 8000f92:	b92f      	cbnz	r7, 8000fa0 <flash_memwrite+0x24>
 8000f94:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80010bc <flash_memwrite+0x140>
 8000f98:	f8d8 3000 	ldr.w	r3, [r8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d179      	bne.n	8001094 <flash_memwrite+0x118>
	}
	if (len % 2 != 0) {
		printf("memwrite: len %d chunk not multiple of 2 at %u\n", len, flash_filelength);
	}
#endif
	if (len == 0) {
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d071      	beq.n	8001088 <flash_memwrite+0x10c>
		printf("memwrite: len %d at %u\n", len, flash_filelength);
	}


	data = 0xffffffff;		// the 32 bit word we will write
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295

	lastbyte = 0;
	if (q_index > 0) {		// some residual data from last time through here
 8000fa8:	4f41      	ldr	r7, [pc, #260]	; (80010b0 <flash_memwrite+0x134>)
	lastbyte = 0;
 8000faa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80010c0 <flash_memwrite+0x144>
	if (q_index > 0) {		// some residual data from last time through here
 8000fae:	6839      	ldr	r1, [r7, #0]
	data = 0xffffffff;		// the 32 bit word we will write
 8000fb0:	9303      	str	r3, [sp, #12]
	lastbyte = 0;
 8000fb2:	2300      	movs	r3, #0
	if (q_index > 0) {		// some residual data from last time through here
 8000fb4:	4299      	cmp	r1, r3
	lastbyte = 0;
 8000fb6:	f8c8 3000 	str.w	r3, [r8]
	if (q_index > 0) {		// some residual data from last time through here
 8000fba:	dd1a      	ble.n	8000ff2 <flash_memwrite+0x76>
		for (i = 0; i < q_index;) {
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	9b00      	ldr	r3, [sp, #0]
 8000fc0:	4299      	cmp	r1, r3
 8000fc2:	dd16      	ble.n	8000ff2 <flash_memwrite+0x76>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4e3b      	ldr	r6, [pc, #236]	; (80010b4 <flash_memwrite+0x138>)
			data >>= 8;
 8000fc8:	9b03      	ldr	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
			lastbyte++;
 8000fca:	4610      	mov	r0, r2
		for (i = 0; i < q_index;) {
 8000fcc:	3201      	adds	r2, #1
			data >>= 8;
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	9303      	str	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
 8000fd2:	9b00      	ldr	r3, [sp, #0]
 8000fd4:	f103 0e01 	add.w	lr, r3, #1
 8000fd8:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8000fdc:	f8cd e000 	str.w	lr, [sp]
 8000fe0:	9b03      	ldr	r3, [sp, #12]
 8000fe2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8000fe6:	9303      	str	r3, [sp, #12]
		for (i = 0; i < q_index;) {
 8000fe8:	9b00      	ldr	r3, [sp, #0]
 8000fea:	4299      	cmp	r1, r3
 8000fec:	dcec      	bgt.n	8000fc8 <flash_memwrite+0x4c>
 8000fee:	f8c8 0000 	str.w	r0, [r8]
		}
	}

	k = len % 4;		// see if buf fits full into 32 bit words
 8000ff2:	f005 0303 	and.w	r3, r5, #3

	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8000ff6:	2600      	movs	r6, #0
	k = len % 4;		// see if buf fits full into 32 bit words
 8000ff8:	9302      	str	r3, [sp, #8]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8000ffa:	9600      	str	r6, [sp, #0]
 8000ffc:	9b00      	ldr	r3, [sp, #0]
 8000ffe:	4419      	add	r1, r3
 8001000:	9b02      	ldr	r3, [sp, #8]
 8001002:	1aeb      	subs	r3, r5, r3
 8001004:	4299      	cmp	r1, r3
 8001006:	d229      	bcs.n	800105c <flash_memwrite+0xe0>
 8001008:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80010c4 <flash_memwrite+0x148>
		for (j = lastbyte; j < 4; j++) {
 800100c:	f8d8 3000 	ldr.w	r3, [r8]
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	9b01      	ldr	r3, [sp, #4]
 8001014:	2b03      	cmp	r3, #3
 8001016:	dc10      	bgt.n	800103a <flash_memwrite+0xbe>
			data >>= 8;
 8001018:	9b03      	ldr	r3, [sp, #12]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	9303      	str	r3, [sp, #12]
			data |= buf[i++] << 24;
 800101e:	9b00      	ldr	r3, [sp, #0]
 8001020:	1c59      	adds	r1, r3, #1
 8001022:	5ce2      	ldrb	r2, [r4, r3]
 8001024:	9100      	str	r1, [sp, #0]
 8001026:	9b03      	ldr	r3, [sp, #12]
 8001028:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800102c:	9303      	str	r3, [sp, #12]
		for (j = lastbyte; j < 4; j++) {
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	3301      	adds	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	9b01      	ldr	r3, [sp, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	ddee      	ble.n	8001018 <flash_memwrite+0x9c>
		patt += 4;
#endif
		lastbyte = 0;	// no more residual

		//		printf("memptr=%08x, data[%d]=%08x\n", (uint32_t) memptr, i, data);
		flash_writeword(data);
 800103a:	9803      	ldr	r0, [sp, #12]
		lastbyte = 0;	// no more residual
 800103c:	f8c8 6000 	str.w	r6, [r8]
		flash_writeword(data);
 8001040:	f7ff ff72 	bl	8000f28 <flash_writeword>
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001044:	9800      	ldr	r0, [sp, #0]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	9b02      	ldr	r3, [sp, #8]

		flash_memptr += 4;
 800104a:	f8d9 1000 	ldr.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800104e:	4402      	add	r2, r0
 8001050:	1aeb      	subs	r3, r5, r3
		flash_memptr += 4;
 8001052:	3104      	adds	r1, #4
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001054:	429a      	cmp	r2, r3
		flash_memptr += 4;
 8001056:	f8c9 1000 	str.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800105a:	d3d7      	bcc.n	800100c <flash_memwrite+0x90>
	}

	for (q_index = 0; i < len;) {
 800105c:	9b00      	ldr	r3, [sp, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	429d      	cmp	r5, r3
 8001062:	603a      	str	r2, [r7, #0]
 8001064:	d90c      	bls.n	8001080 <flash_memwrite+0x104>
 8001066:	4913      	ldr	r1, [pc, #76]	; (80010b4 <flash_memwrite+0x138>)
 8001068:	2301      	movs	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 800106a:	9a00      	ldr	r2, [sp, #0]
 800106c:	1c50      	adds	r0, r2, #1
 800106e:	5ca2      	ldrb	r2, [r4, r2]
 8001070:	603b      	str	r3, [r7, #0]
	for (q_index = 0; i < len;) {
 8001072:	3301      	adds	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 8001074:	9000      	str	r0, [sp, #0]
 8001076:	f841 2b04 	str.w	r2, [r1], #4
	for (q_index = 0; i < len;) {
 800107a:	9a00      	ldr	r2, [sp, #0]
 800107c:	42aa      	cmp	r2, r5
 800107e:	d3f4      	bcc.n	800106a <flash_memwrite+0xee>
	}

///	memptr += len;
//	printf("memwrite: buf=0x%0x, size=%d, size_=%d, memptr=0x%x\n",(uint32_t)buf,size,len,(uint32_t)mem);
	return ((int) len);
}
 8001080:	4628      	mov	r0, r5
 8001082:	b005      	add	sp, #20
 8001084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("memwrite: len %d at %u\n", len, flash_filelength);
 8001088:	6832      	ldr	r2, [r6, #0]
 800108a:	4629      	mov	r1, r5
 800108c:	480a      	ldr	r0, [pc, #40]	; (80010b8 <flash_memwrite+0x13c>)
 800108e:	f024 f991 	bl	80253b4 <iprintf>
 8001092:	e787      	b.n	8000fa4 <flash_memwrite+0x28>
		res = EraseFlash(flash_memptr);
 8001094:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80010c4 <flash_memwrite+0x148>
 8001098:	f8d9 0000 	ldr.w	r0, [r9]
 800109c:	f7ff fe76 	bl	8000d8c <EraseFlash>
		notflashed = 0;
 80010a0:	f8c8 7000 	str.w	r7, [r8]
 80010a4:	e77c      	b.n	8000fa0 <flash_memwrite+0x24>
 80010a6:	bf00      	nop
 80010a8:	20000844 	.word	0x20000844
 80010ac:	20000840 	.word	0x20000840
 80010b0:	20000860 	.word	0x20000860
 80010b4:	20000850 	.word	0x20000850
 80010b8:	08029e3c 	.word	0x08029e3c
 80010bc:	20000008 	.word	0x20000008
 80010c0:	2000084c 	.word	0x2000084c
 80010c4:	20000848 	.word	0x20000848

080010c8 <memclose>:
	static FLASH_OBProgramInitTypeDef OBInitStruct;
	HAL_StatusTypeDef res;
	int i;

	notflashed = 1;		// now assumed dirty
	if (flash_abort) {
 80010c8:	4b47      	ldr	r3, [pc, #284]	; (80011e8 <memclose+0x120>)
	notflashed = 1;		// now assumed dirty
 80010ca:	2101      	movs	r1, #1
 80010cc:	4a47      	ldr	r2, [pc, #284]	; (80011ec <memclose+0x124>)
	if (flash_abort) {
 80010ce:	6818      	ldr	r0, [r3, #0]
	notflashed = 1;		// now assumed dirty
 80010d0:	6011      	str	r1, [r2, #0]
	if (flash_abort) {
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d16e      	bne.n	80011b4 <memclose+0xec>
		flash_abort = 0;
		http_downloading = 0;
		return;
	}

	if (q_index > 0) {			// unfinished residual write still needed
 80010d6:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <memclose+0x128>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
void* memclose() {
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010de:	b085      	sub	sp, #20
	if (q_index > 0) {			// unfinished residual write still needed
 80010e0:	dd0b      	ble.n	80010fa <memclose+0x32>
 80010e2:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <memclose+0x12c>)
 80010e4:	f102 0110 	add.w	r1, r2, #16
		residual = 0;
		for (i = 0; i < 4; i++) {
			residual >>= 8;
			residual |= (q_bytes[i] << 24);
 80010e8:	f852 3b04 	ldr.w	r3, [r2], #4
 80010ec:	061b      	lsls	r3, r3, #24
		for (i = 0; i < 4; i++) {
 80010ee:	4291      	cmp	r1, r2
			residual |= (q_bytes[i] << 24);
 80010f0:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
		for (i = 0; i < 4; i++) {
 80010f4:	d1f8      	bne.n	80010e8 <memclose+0x20>
		}
		flash_writeword(residual);
 80010f6:	f7ff ff17 	bl	8000f28 <flash_writeword>
	}

	printf("eeprom memclose: flash_load_addr=0x%08x, filelength=%d, flash_memptr=0x%0x total=%d\n", flash_load_address,
 80010fa:	4e3f      	ldr	r6, [pc, #252]	; (80011f8 <memclose+0x130>)
 80010fc:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <memclose+0x134>)
 80010fe:	6832      	ldr	r2, [r6, #0]
 8001100:	4c3f      	ldr	r4, [pc, #252]	; (8001200 <memclose+0x138>)
 8001102:	4d40      	ldr	r5, [pc, #256]	; (8001204 <memclose+0x13c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6829      	ldr	r1, [r5, #0]
 8001108:	9200      	str	r2, [sp, #0]
 800110a:	483f      	ldr	r0, [pc, #252]	; (8001208 <memclose+0x140>)
 800110c:	6822      	ldr	r2, [r4, #0]
 800110e:	f024 f951 	bl	80253b4 <iprintf>
			flash_filelength, (unsigned int) flash_memptr, down_total);
	osDelay(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001116:	f014 f9b3 	bl	8015480 <osDelay>
	res = HAL_FLASH_Lock();
 800111a:	f00a f85b 	bl	800b1d4 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 800111e:	2800      	cmp	r0, #0
 8001120:	d14d      	bne.n	80011be <memclose+0xf6>
	if (LockFlash() != HAL_OK) {
		printf("eeprom: flash2 failed\n");
		return ((void*) 0);
	}

	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 8001122:	6823      	ldr	r3, [r4, #0]

// calculate the crc over a range of memory
uint32_t flash_findcrc(void *base, int length) {
	uint32_t crc, xinit = 0xffffffff;

	crc = xcrc32(base, length, xinit);
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 8001128:	682f      	ldr	r7, [r5, #0]
	crc = xcrc32(base, length, xinit);
 800112a:	4619      	mov	r1, r3
 800112c:	9303      	str	r3, [sp, #12]
 800112e:	4638      	mov	r0, r7
 8001130:	f7ff fd46 	bl	8000bc0 <xcrc32>
 8001134:	4604      	mov	r4, r0
	printf("findcrc: crc=0x%08x, base=0x%08x, len=%d\n", crc, base, length);
 8001136:	9b03      	ldr	r3, [sp, #12]
 8001138:	463a      	mov	r2, r7
 800113a:	4834      	ldr	r0, [pc, #208]	; (800120c <memclose+0x144>)
 800113c:	4621      	mov	r1, r4
 800113e:	f024 f939 	bl	80253b4 <iprintf>
	if ((dl_filecrc != xcrc) && (dl_filecrc != 0xffffffff)) {
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <memclose+0x148>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	1c53      	adds	r3, r2, #1
 8001148:	d007      	beq.n	800115a <memclose+0x92>
 800114a:	42a2      	cmp	r2, r4
 800114c:	d005      	beq.n	800115a <memclose+0x92>
		printf(
 800114e:	6833      	ldr	r3, [r6, #0]
 8001150:	4621      	mov	r1, r4
 8001152:	4830      	ldr	r0, [pc, #192]	; (8001214 <memclose+0x14c>)
 8001154:	f024 f92e 	bl	80253b4 <iprintf>
 8001158:	e027      	b.n	80011aa <memclose+0xe2>
		osDelay(5);
 800115a:	2005      	movs	r0, #5
 800115c:	f014 f990 	bl	8015480 <osDelay>
		HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8001160:	482d      	ldr	r0, [pc, #180]	; (8001218 <memclose+0x150>)
 8001162:	f00a fa25 	bl	800b5b0 <HAL_FLASHEx_OBGetConfig>
		HAL_FLASH_OB_Unlock();
 8001166:	f00a f83f 	bl	800b1e8 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	482a      	ldr	r0, [pc, #168]	; (8001218 <memclose+0x150>)
 800116e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001172:	bf0b      	itete	eq
 8001174:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8001178:	f44f 5201 	movne.w	r2, #8256	; 0x2040
 800117c:	f44f 5301 	moveq.w	r3, #8256	; 0x2040
 8001180:	f44f 5300 	movne.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2040 : 0x2000;
 8001184:	e9c0 2306 	strd	r2, r3, [r0, #24]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8001188:	f00a f93a 	bl	800b400 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 800118c:	bb38      	cbnz	r0, 80011de <memclose+0x116>
		res = HAL_FLASH_OB_Launch();
 800118e:	f00a f847 	bl	800b220 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8001192:	b9f8      	cbnz	r0, 80011d4 <memclose+0x10c>
		HAL_FLASH_OB_Lock();
 8001194:	f00a f83a 	bl	800b20c <HAL_FLASH_OB_Lock>
		printf("New FLASH image loaded; rebooting please wait 45 secs...\n");
 8001198:	4820      	ldr	r0, [pc, #128]	; (800121c <memclose+0x154>)
 800119a:	f024 f9a7 	bl	80254ec <puts>
		osDelay(50);
 800119e:	2032      	movs	r0, #50	; 0x32
 80011a0:	f014 f96e 	bl	8015480 <osDelay>
		rebootme(0);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f002 f8b5 	bl	8003314 <rebootme>
	http_downloading = 0;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <memclose+0x158>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	b005      	add	sp, #20
 80011b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flash_abort = 0;
 80011b4:	2200      	movs	r2, #0
		http_downloading = 0;
 80011b6:	491a      	ldr	r1, [pc, #104]	; (8001220 <memclose+0x158>)
		flash_abort = 0;
 80011b8:	601a      	str	r2, [r3, #0]
		http_downloading = 0;
 80011ba:	600a      	str	r2, [r1, #0]
}
 80011bc:	4770      	bx	lr
		printf("LockFlash: failed to lock\n");
 80011be:	4819      	ldr	r0, [pc, #100]	; (8001224 <memclose+0x15c>)
 80011c0:	f024 f994 	bl	80254ec <puts>
		printflasherr();
 80011c4:	f7ff fd56 	bl	8000c74 <printflasherr>
		printf("eeprom: flash2 failed\n");
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <memclose+0x160>)
 80011ca:	f024 f98f 	bl	80254ec <puts>
		return ((void*) 0);
 80011ce:	2000      	movs	r0, #0
}
 80011d0:	b005      	add	sp, #20
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("memclose: failed to OBLaunch %d\n", res);
 80011d4:	4601      	mov	r1, r0
 80011d6:	4815      	ldr	r0, [pc, #84]	; (800122c <memclose+0x164>)
 80011d8:	f024 f8ec 	bl	80253b4 <iprintf>
 80011dc:	e7da      	b.n	8001194 <memclose+0xcc>
			printf("memclose: failed to OBProgram %d\n", res);
 80011de:	4601      	mov	r1, r0
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <memclose+0x168>)
 80011e2:	f024 f8e7 	bl	80253b4 <iprintf>
 80011e6:	e7d2      	b.n	800118e <memclose+0xc6>
 80011e8:	20000840 	.word	0x20000840
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000860 	.word	0x20000860
 80011f4:	20000850 	.word	0x20000850
 80011f8:	2000165c 	.word	0x2000165c
 80011fc:	20000848 	.word	0x20000848
 8001200:	20000844 	.word	0x20000844
 8001204:	20000004 	.word	0x20000004
 8001208:	08029e54 	.word	0x08029e54
 800120c:	08029fb4 	.word	0x08029fb4
 8001210:	2000083c 	.word	0x2000083c
 8001214:	08029ec4 	.word	0x08029ec4
 8001218:	2000081c 	.word	0x2000081c
 800121c:	08029f78 	.word	0x08029f78
 8001220:	200018a8 	.word	0x200018a8
 8001224:	08029c18 	.word	0x08029c18
 8001228:	08029eac 	.word	0x08029eac
 800122c:	08029f54 	.word	0x08029f54
 8001230:	08029f30 	.word	0x08029f30

08001234 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop

08001238 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <vApplicationMallocFailedHook>:
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <vApplicationGetIdleTaskMemory+0x18>)
{
 8001242:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001244:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001246:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800124a:	4c04      	ldr	r4, [pc, #16]	; (800125c <vApplicationGetIdleTaskMemory+0x1c>)
 800124c:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 800124e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000c64 	.word	0x20000c64
 800125c:	20000864 	.word	0x20000864

08001260 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <vApplicationGetTimerTaskMemory+0x18>)
{
 8001262:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001264:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800126a:	4c04      	ldr	r4, [pc, #16]	; (800127c <vApplicationGetTimerTaskMemory+0x1c>)
 800126c:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 800126e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20001518 	.word	0x20001518
 800127c:	20000d18 	.word	0x20000d18

08001280 <httpc_tcp_sent>:
	/* nothing to do here for now */
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);
	LWIP_UNUSED_ARG(len);
	return ERR_OK;
}
 8001280:	2000      	movs	r0, #0
 8001282:	4770      	bx	lr

08001284 <RecvHttpHeaderCallback>:
uint32_t http_content_len = 0;
char rxbuffer[540];
char domain_name[30];
err_t error;

err_t RecvHttpHeaderCallback(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 8001284:	9a00      	ldr	r2, [sp, #0]
//	for (i = 0; i < hdr_len; i++) {
//		putchar(buf[i]);
//	}
//	printf("\n");
	return ERR_OK;
}
 8001286:	2000      	movs	r0, #0
	http_content_len = content_len;
 8001288:	4b01      	ldr	r3, [pc, #4]	; (8001290 <RecvHttpHeaderCallback+0xc>)
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20001660 	.word	0x20001660

08001294 <httpc_get_internal_addr>:
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 8001294:	b570      	push	{r4, r5, r6, lr}
	LWIP_ASSERT("req != NULL", req != NULL);
 8001296:	4604      	mov	r4, r0
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 8001298:	460d      	mov	r5, r1
	LWIP_ASSERT("req != NULL", req != NULL);
 800129a:	b158      	cbz	r0, 80012b4 <httpc_get_internal_addr+0x20>
	if (&req->remote_addr != ipaddr) {
 800129c:	1d21      	adds	r1, r4, #4
 800129e:	42a9      	cmp	r1, r5
 80012a0:	d001      	beq.n	80012a6 <httpc_get_internal_addr+0x12>
		req->remote_addr = *ipaddr;
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	6063      	str	r3, [r4, #4]
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012a6:	8922      	ldrh	r2, [r4, #8]
 80012a8:	6820      	ldr	r0, [r4, #0]
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <httpc_get_internal_addr+0x30>)
}
 80012ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012b0:	f01a bc70 	b.w	801bb94 <tcp_connect>
	LWIP_ASSERT("req != NULL", req != NULL);
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <httpc_get_internal_addr+0x34>)
 80012b6:	f240 1297 	movw	r2, #407	; 0x197
 80012ba:	4904      	ldr	r1, [pc, #16]	; (80012cc <httpc_get_internal_addr+0x38>)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <httpc_get_internal_addr+0x3c>)
 80012be:	f024 f879 	bl	80253b4 <iprintf>
 80012c2:	e7eb      	b.n	800129c <httpc_get_internal_addr+0x8>
 80012c4:	080016c9 	.word	0x080016c9
 80012c8:	08029fe0 	.word	0x08029fe0
 80012cc:	08029ffc 	.word	0x08029ffc
 80012d0:	0802a008 	.word	0x0802a008

080012d4 <httpc_free_state>:
static err_t httpc_free_state(httpc_state_t *req) {
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4604      	mov	r4, r0
	if (req->request != NULL) {
 80012d8:	6900      	ldr	r0, [r0, #16]
 80012da:	b118      	cbz	r0, 80012e4 <httpc_free_state+0x10>
		pbuf_free(req->request);
 80012dc:	f019 ffa0 	bl	801b220 <pbuf_free>
		req->request = NULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	6123      	str	r3, [r4, #16]
	if (req->rx_hdrs != NULL) {
 80012e4:	6960      	ldr	r0, [r4, #20]
 80012e6:	b118      	cbz	r0, 80012f0 <httpc_free_state+0x1c>
		pbuf_free(req->rx_hdrs);
 80012e8:	f019 ff9a 	bl	801b220 <pbuf_free>
		req->rx_hdrs = NULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	6163      	str	r3, [r4, #20]
	tpcb = req->pcb;
 80012f0:	6825      	ldr	r5, [r4, #0]
	mem_free(req);
 80012f2:	4620      	mov	r0, r4
 80012f4:	f018 fee8 	bl	801a0c8 <mem_free>
	if (tpcb != NULL) {
 80012f8:	b1c5      	cbz	r5, 800132c <httpc_free_state+0x58>
		altcp_arg(tpcb, NULL);
 80012fa:	2100      	movs	r1, #0
 80012fc:	4628      	mov	r0, r5
 80012fe:	f01a fd4f 	bl	801bda0 <tcp_arg>
		altcp_recv(tpcb, NULL);
 8001302:	2100      	movs	r1, #0
 8001304:	4628      	mov	r0, r5
 8001306:	f01a fd4f 	bl	801bda8 <tcp_recv>
		altcp_err(tpcb, NULL);
 800130a:	2100      	movs	r1, #0
 800130c:	4628      	mov	r0, r5
 800130e:	f01a fd83 	bl	801be18 <tcp_err>
		altcp_poll(tpcb, NULL, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	4628      	mov	r0, r5
 8001316:	4611      	mov	r1, r2
 8001318:	f01a fda0 	bl	801be5c <tcp_poll>
		altcp_sent(tpcb, NULL);
 800131c:	4628      	mov	r0, r5
 800131e:	2100      	movs	r1, #0
 8001320:	f01a fd5e 	bl	801bde0 <tcp_sent>
		r = altcp_close(tpcb);
 8001324:	4628      	mov	r0, r5
 8001326:	f01b fbf7 	bl	801cb18 <tcp_close>
		if (r != ERR_OK) {
 800132a:	b908      	cbnz	r0, 8001330 <httpc_free_state+0x5c>
	return ERR_OK;
 800132c:	2000      	movs	r0, #0
}
 800132e:	bd38      	pop	{r3, r4, r5, pc}
			altcp_abort(tpcb);
 8001330:	4628      	mov	r0, r5
 8001332:	f01b f9f9 	bl	801c728 <tcp_abort>
			return ERR_ABRT;
 8001336:	f06f 000c 	mvn.w	r0, #12
}
 800133a:	bd38      	pop	{r3, r4, r5, pc}

0800133c <httpc_create_request_string.constprop.0.isra.0>:
static int httpc_create_request_string(const httpc_connection_t *settings, const char *server_name, int server_port,
 800133c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	460c      	mov	r4, r1
 8001344:	461d      	mov	r5, r3
 8001346:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
	if (settings->use_proxy) {
 800134a:	b968      	cbnz	r0, 8001368 <httpc_create_request_string.constprop.0.isra.0+0x2c>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 800134c:	2900      	cmp	r1, #0
 800134e:	d032      	beq.n	80013b6 <httpc_create_request_string.constprop.0.isra.0+0x7a>
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 8001352:	462b      	mov	r3, r5
 8001354:	4641      	mov	r1, r8
 8001356:	4638      	mov	r0, r7
 8001358:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <httpc_create_request_string.constprop.0.isra.0+0x90>)
}
 800135e:	b004      	add	sp, #16
 8001360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8001364:	f024 b9dc 	b.w	8025720 <sniprintf>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001368:	4616      	mov	r6, r2
 800136a:	b1e1      	cbz	r1, 80013a6 <httpc_create_request_string.constprop.0.isra.0+0x6a>
		if (server_port != HTTP_DEFAULT_PORT) {
 800136c:	2e50      	cmp	r6, #80	; 0x50
 800136e:	d00d      	beq.n	800138c <httpc_create_request_string.constprop.0.isra.0+0x50>
			return snprintf(buffer, buffer_size,
 8001370:	4623      	mov	r3, r4
 8001372:	9403      	str	r4, [sp, #12]
 8001374:	4c14      	ldr	r4, [pc, #80]	; (80013c8 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 8001376:	4641      	mov	r1, r8
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <httpc_create_request_string.constprop.0.isra.0+0x94>)
 800137a:	4638      	mov	r0, r7
 800137c:	9501      	str	r5, [sp, #4]
 800137e:	9600      	str	r6, [sp, #0]
 8001380:	9402      	str	r4, [sp, #8]
 8001382:	f024 f9cd 	bl	8025720 <sniprintf>
}
 8001386:	b004      	add	sp, #16
 8001388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 800138e:	4641      	mov	r1, r8
 8001390:	4623      	mov	r3, r4
 8001392:	4638      	mov	r0, r7
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <httpc_create_request_string.constprop.0.isra.0+0x98>)
 8001398:	9402      	str	r4, [sp, #8]
 800139a:	9500      	str	r5, [sp, #0]
 800139c:	f024 f9c0 	bl	8025720 <sniprintf>
}
 80013a0:	b004      	add	sp, #16
 80013a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 80013a8:	f240 12d9 	movw	r2, #473	; 0x1d9
 80013ac:	490b      	ldr	r1, [pc, #44]	; (80013dc <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 80013b0:	f024 f800 	bl	80253b4 <iprintf>
 80013b4:	e7da      	b.n	800136c <httpc_create_request_string.constprop.0.isra.0+0x30>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 80013b8:	f240 12e1 	movw	r2, #481	; 0x1e1
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 80013c0:	f023 fff8 	bl	80253b4 <iprintf>
 80013c4:	e7c4      	b.n	8001350 <httpc_create_request_string.constprop.0.isra.0+0x14>
 80013c6:	bf00      	nop
 80013c8:	0802a0a0 	.word	0x0802a0a0
 80013cc:	0802a130 	.word	0x0802a130
 80013d0:	0802a044 	.word	0x0802a044
 80013d4:	0802a0d8 	.word	0x0802a0d8
 80013d8:	08029fe0 	.word	0x08029fe0
 80013dc:	0802a030 	.word	0x0802a030
 80013e0:	0802a008 	.word	0x0802a008

080013e4 <httpc_init_connection_common.constprop.0>:
static err_t httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings,
 80013e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e8:	b085      	sub	sp, #20
 80013ea:	460d      	mov	r5, r1
 80013ec:	4690      	mov	r8, r2
 80013ee:	461e      	mov	r6, r3
 80013f0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80013f4:	9003      	str	r0, [sp, #12]
	LWIP_ASSERT("uri != NULL", uri != NULL);
 80013f6:	f1ba 0f00 	cmp.w	sl, #0
 80013fa:	d063      	beq.n	80014c4 <httpc_init_connection_common.constprop.0+0xe0>
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 80013fc:	f04f 0900 	mov.w	r9, #0
 8001400:	4653      	mov	r3, sl
 8001402:	4632      	mov	r2, r6
 8001404:	4641      	mov	r1, r8
 8001406:	46b3      	mov	fp, r6
 8001408:	e9cd 9900 	strd	r9, r9, [sp]
 800140c:	79a8      	ldrb	r0, [r5, #6]
 800140e:	f7ff ff95 	bl	800133c <httpc_create_request_string.constprop.0.isra.0>
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001412:	f64f 73fe 	movw	r3, #65534	; 0xfffe
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001416:	4607      	mov	r7, r0
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001418:	4298      	cmp	r0, r3
 800141a:	d861      	bhi.n	80014e0 <httpc_init_connection_common.constprop.0+0xfc>
	req = (httpc_state_t*) mem_malloc((mem_size_t) alloc_len);
 800141c:	2034      	movs	r0, #52	; 0x34
 800141e:	f019 f80f 	bl	801a440 <mem_malloc>
	if (req == NULL) {
 8001422:	4604      	mov	r4, r0
 8001424:	2800      	cmp	r0, #0
 8001426:	d064      	beq.n	80014f2 <httpc_init_connection_common.constprop.0+0x10e>
	memset(req, 0, sizeof(httpc_state_t));
 8001428:	4649      	mov	r1, r9
 800142a:	2234      	movs	r2, #52	; 0x34
 800142c:	f023 f824 	bl	8024478 <memset>
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001430:	4648      	mov	r0, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8001432:	231e      	movs	r3, #30
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001434:	f107 0901 	add.w	r9, r7, #1
 8001438:	f44f 7220 	mov.w	r2, #640	; 0x280
 800143c:	fa1f f189 	uxth.w	r1, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8001440:	60e3      	str	r3, [r4, #12]
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001442:	f019 fd1b 	bl	801ae7c <pbuf_alloc>
 8001446:	6120      	str	r0, [r4, #16]
	if (req->request == NULL) {
 8001448:	2800      	cmp	r0, #0
 800144a:	d043      	beq.n	80014d4 <httpc_init_connection_common.constprop.0+0xf0>
	if (req->request->next != NULL) {
 800144c:	6803      	ldr	r3, [r0, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d140      	bne.n	80014d4 <httpc_init_connection_common.constprop.0+0xf0>
	req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->pcb = altcp_new(settings->altcp_allocator);
 8001458:	f01b fa86 	bl	801c968 <tcp_new>
 800145c:	6020      	str	r0, [r4, #0]
	if (req->pcb == NULL) {
 800145e:	2800      	cmp	r0, #0
 8001460:	d038      	beq.n	80014d4 <httpc_init_connection_common.constprop.0+0xf0>
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8001462:	79ab      	ldrb	r3, [r5, #6]
 8001464:	bb63      	cbnz	r3, 80014c0 <httpc_init_connection_common.constprop.0+0xdc>
	altcp_arg(req->pcb, req);
 8001466:	4621      	mov	r1, r4
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8001468:	8126      	strh	r6, [r4, #8]
	altcp_arg(req->pcb, req);
 800146a:	f01a fc99 	bl	801bda0 <tcp_arg>
	altcp_recv(req->pcb, httpc_tcp_recv);
 800146e:	4922      	ldr	r1, [pc, #136]	; (80014f8 <httpc_init_connection_common.constprop.0+0x114>)
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	f01a fc99 	bl	801bda8 <tcp_recv>
	altcp_err(req->pcb, httpc_tcp_err);
 8001476:	4921      	ldr	r1, [pc, #132]	; (80014fc <httpc_init_connection_common.constprop.0+0x118>)
 8001478:	6820      	ldr	r0, [r4, #0]
 800147a:	f01a fccd 	bl	801be18 <tcp_err>
	altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 800147e:	2201      	movs	r2, #1
 8001480:	491f      	ldr	r1, [pc, #124]	; (8001500 <httpc_init_connection_common.constprop.0+0x11c>)
 8001482:	6820      	ldr	r0, [r4, #0]
 8001484:	f01a fcea 	bl	801be5c <tcp_poll>
	altcp_sent(req->pcb, httpc_tcp_sent);
 8001488:	491e      	ldr	r1, [pc, #120]	; (8001504 <httpc_init_connection_common.constprop.0+0x120>)
 800148a:	6820      	ldr	r0, [r4, #0]
 800148c:	f01a fca8 	bl	801bde0 <tcp_sent>
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8001490:	f8cd 9004 	str.w	r9, [sp, #4]
			(char*) req->request->payload, req_len + 1);
 8001494:	6920      	ldr	r0, [r4, #16]
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8001496:	4653      	mov	r3, sl
 8001498:	465a      	mov	r2, fp
 800149a:	4641      	mov	r1, r8
 800149c:	6840      	ldr	r0, [r0, #4]
 800149e:	9000      	str	r0, [sp, #0]
 80014a0:	79a8      	ldrb	r0, [r5, #6]
 80014a2:	f7ff ff4b 	bl	800133c <httpc_create_request_string.constprop.0.isra.0>
	if (req_len2 != req_len) {
 80014a6:	4287      	cmp	r7, r0
 80014a8:	d11d      	bne.n	80014e6 <httpc_init_connection_common.constprop.0+0x102>
	req->recv_fn = recv_fn;
 80014aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	return ERR_OK;
 80014ac:	2000      	movs	r0, #0
	req->conn_settings = settings;
 80014ae:	e9c4 3507 	strd	r3, r5, [r4, #28]
	req->callback_arg = callback_arg;
 80014b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80014b4:	6263      	str	r3, [r4, #36]	; 0x24
	*connection = req;
 80014b6:	9b03      	ldr	r3, [sp, #12]
 80014b8:	601c      	str	r4, [r3, #0]
}
 80014ba:	b005      	add	sp, #20
 80014bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014c0:	88ae      	ldrh	r6, [r5, #4]
 80014c2:	e7d0      	b.n	8001466 <httpc_init_connection_common.constprop.0+0x82>
	LWIP_ASSERT("uri != NULL", uri != NULL);
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <httpc_init_connection_common.constprop.0+0x124>)
 80014c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014ca:	4910      	ldr	r1, [pc, #64]	; (800150c <httpc_init_connection_common.constprop.0+0x128>)
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <httpc_init_connection_common.constprop.0+0x12c>)
 80014ce:	f023 ff71 	bl	80253b4 <iprintf>
 80014d2:	e793      	b.n	80013fc <httpc_init_connection_common.constprop.0+0x18>
		httpc_free_state(req);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff fefd 	bl	80012d4 <httpc_free_state>
		return ERR_MEM;
 80014da:	f04f 30ff 	mov.w	r0, #4294967295
 80014de:	e7ec      	b.n	80014ba <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_VAL;
 80014e0:	f06f 0005 	mvn.w	r0, #5
 80014e4:	e7e9      	b.n	80014ba <httpc_init_connection_common.constprop.0+0xd6>
		httpc_free_state(req);
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff fef4 	bl	80012d4 <httpc_free_state>
		return ERR_VAL;
 80014ec:	f06f 0005 	mvn.w	r0, #5
 80014f0:	e7e3      	b.n	80014ba <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_MEM;
 80014f2:	f04f 30ff 	mov.w	r0, #4294967295
 80014f6:	e7e0      	b.n	80014ba <httpc_init_connection_common.constprop.0+0xd6>
 80014f8:	08001961 	.word	0x08001961
 80014fc:	08001515 	.word	0x08001515
 8001500:	08001719 	.word	0x08001719
 8001504:	08001281 	.word	0x08001281
 8001508:	08029fe0 	.word	0x08029fe0
 800150c:	0802a180 	.word	0x0802a180
 8001510:	0802a008 	.word	0x0802a008

08001514 <httpc_tcp_err>:
static void httpc_tcp_err(void *arg, err_t err) {
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	4604      	mov	r4, r0
 8001518:	b082      	sub	sp, #8
	printf("httpc_tcp_err: %d", err);
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <httpc_tcp_err+0x38>)
static void httpc_tcp_err(void *arg, err_t err) {
 800151c:	460d      	mov	r5, r1
	printf("httpc_tcp_err: %d", err);
 800151e:	f023 ff49 	bl	80253b4 <iprintf>
	if (req != NULL) {
 8001522:	b184      	cbz	r4, 8001546 <httpc_tcp_err+0x32>
		req->pcb = NULL;
 8001524:	2300      	movs	r3, #0
		if (req->conn_settings != NULL) {
 8001526:	6a22      	ldr	r2, [r4, #32]
		req->pcb = NULL;
 8001528:	6023      	str	r3, [r4, #0]
		if (req->conn_settings != NULL) {
 800152a:	b132      	cbz	r2, 800153a <httpc_tcp_err+0x26>
			if (req->conn_settings->result_fn != NULL) {
 800152c:	6896      	ldr	r6, [r2, #8]
 800152e:	b126      	cbz	r6, 800153a <httpc_tcp_err+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001530:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001532:	2104      	movs	r1, #4
 8001534:	9500      	str	r5, [sp, #0]
 8001536:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001538:	47b0      	blx	r6
		return httpc_free_state(req);
 800153a:	4620      	mov	r0, r4
}
 800153c:	b002      	add	sp, #8
 800153e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001542:	f7ff bec7 	b.w	80012d4 <httpc_free_state>
}
 8001546:	b002      	add	sp, #8
 8001548:	bd70      	pop	{r4, r5, r6, pc}
 800154a:	bf00      	nop
 800154c:	0802a18c 	.word	0x0802a18c

08001550 <httpc_dns_found>:
static void httpc_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg) {
 8001550:	b530      	push	{r4, r5, lr}
 8001552:	4614      	mov	r4, r2
 8001554:	b083      	sub	sp, #12
	if (ipaddr != NULL) {
 8001556:	b1b1      	cbz	r1, 8001586 <httpc_dns_found+0x36>
		err = httpc_get_internal_addr(req, ipaddr);
 8001558:	4610      	mov	r0, r2
 800155a:	f7ff fe9b 	bl	8001294 <httpc_get_internal_addr>
		if (err == ERR_OK) {
 800155e:	b180      	cbz	r0, 8001582 <httpc_dns_found+0x32>
		result = HTTPC_RESULT_ERR_CONNECT;
 8001560:	2102      	movs	r1, #2
	if (req != NULL) {
 8001562:	b174      	cbz	r4, 8001582 <httpc_dns_found+0x32>
		if (req->conn_settings != NULL) {
 8001564:	6a23      	ldr	r3, [r4, #32]
 8001566:	b133      	cbz	r3, 8001576 <httpc_dns_found+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001568:	689d      	ldr	r5, [r3, #8]
 800156a:	b125      	cbz	r5, 8001576 <httpc_dns_found+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 800156c:	9000      	str	r0, [sp, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001574:	47a8      	blx	r5
		return httpc_free_state(req);
 8001576:	4620      	mov	r0, r4
}
 8001578:	b003      	add	sp, #12
 800157a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 800157e:	f7ff bea9 	b.w	80012d4 <httpc_free_state>
}
 8001582:	b003      	add	sp, #12
 8001584:	bd30      	pop	{r4, r5, pc}
		result = HTTPC_RESULT_ERR_HOSTNAME;
 8001586:	2103      	movs	r1, #3
		err = ERR_ARG;
 8001588:	f06f 000f 	mvn.w	r0, #15
 800158c:	e7e9      	b.n	8001562 <httpc_dns_found+0x12>
 800158e:	bf00      	nop

08001590 <HttpClientPageResultCallback>:
}

//
// receive page has finished
void HttpClientPageResultCallback(void *arg, httpc_result_t httpc_result, u32_t rx_content_len, u32_t srv_res,
		err_t err) {
 8001590:	b530      	push	{r4, r5, lr}
 8001592:	b083      	sub	sp, #12
 8001594:	f99d 5018 	ldrsb.w	r5, [sp, #24]
//	printf("HttpClientPageResultCallback: total=%u\n", mytot);
	if (httpc_result != HTTPC_RESULT_OK) {
 8001598:	b949      	cbnz	r1, 80015ae <HttpClientPageResultCallback+0x1e>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
	}
	if (err != ERR_OK) {
 800159a:	b9d5      	cbnz	r5, 80015d2 <HttpClientPageResultCallback+0x42>
 800159c:	4c18      	ldr	r4, [pc, #96]	; (8001600 <HttpClientPageResultCallback+0x70>)
		printlwiperr(err);
	}

//	printf("HttpClientPageResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
	returnpage(rxbuffer, down_total, err);
 800159e:	462a      	mov	r2, r5
 80015a0:	6821      	ldr	r1, [r4, #0]
 80015a2:	4818      	ldr	r0, [pc, #96]	; (8001604 <HttpClientPageResultCallback+0x74>)
}
 80015a4:	b003      	add	sp, #12
 80015a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	returnpage(rxbuffer, down_total, err);
 80015aa:	f006 bbff 	b.w	8007dac <returnpage>
 80015ae:	2909      	cmp	r1, #9
 80015b0:	460c      	mov	r4, r1
	switch (err) {
 80015b2:	d823      	bhi.n	80015fc <HttpClientPageResultCallback+0x6c>
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HttpClientPageResultCallback+0x78>)
 80015b6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 80015ba:	4611      	mov	r1, r2
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <HttpClientPageResultCallback+0x7c>)
 80015be:	9201      	str	r2, [sp, #4]
 80015c0:	f023 fef8 	bl	80253b4 <iprintf>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015c4:	9a01      	ldr	r2, [sp, #4]
 80015c6:	4621      	mov	r1, r4
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <HttpClientPageResultCallback+0x80>)
 80015ca:	f023 fef3 	bl	80253b4 <iprintf>
	if (err != ERR_OK) {
 80015ce:	2d00      	cmp	r5, #0
 80015d0:	d0e4      	beq.n	800159c <HttpClientPageResultCallback+0xc>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80015d2:	f105 0310 	add.w	r3, r5, #16
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d905      	bls.n	80015e8 <HttpClientPageResultCallback+0x58>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 80015dc:	4c08      	ldr	r4, [pc, #32]	; (8001600 <HttpClientPageResultCallback+0x70>)
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <HttpClientPageResultCallback+0x84>)
 80015e0:	6821      	ldr	r1, [r4, #0]
 80015e2:	f023 fee7 	bl	80253b4 <iprintf>
 80015e6:	e7da      	b.n	800159e <HttpClientPageResultCallback+0xe>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80015e8:	4269      	negs	r1, r5
 80015ea:	4c05      	ldr	r4, [pc, #20]	; (8001600 <HttpClientPageResultCallback+0x70>)
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HttpClientPageResultCallback+0x88>)
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <HttpClientPageResultCallback+0x8c>)
 80015f6:	f023 fedd 	bl	80253b4 <iprintf>
}
 80015fa:	e7d0      	b.n	800159e <HttpClientPageResultCallback+0xe>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HttpClientPageResultCallback+0x90>)
 80015fe:	e7dc      	b.n	80015ba <HttpClientPageResultCallback+0x2a>
 8001600:	2000165c 	.word	0x2000165c
 8001604:	20001664 	.word	0x20001664
 8001608:	0802a534 	.word	0x0802a534
 800160c:	0802a1bc 	.word	0x0802a1bc
 8001610:	0802a1d0 	.word	0x0802a1d0
 8001614:	0802a1f8 	.word	0x0802a1f8
 8001618:	0802a55c 	.word	0x0802a55c
 800161c:	0802a218 	.word	0x0802a218
 8001620:	0802a1a0 	.word	0x0802a1a0

08001624 <HttpClientFileResultCallback>:
		err_t err) {
 8001624:	b530      	push	{r4, r5, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	if (httpc_result != HTTPC_RESULT_OK) {
 800162c:	b949      	cbnz	r1, 8001642 <HttpClientFileResultCallback+0x1e>
	if (err != ERR_OK) {
 800162e:	2d00      	cmp	r5, #0
 8001630:	d135      	bne.n	800169e <HttpClientFileResultCallback+0x7a>
	if (flash_memptr != 0) {
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HttpClientFileResultCallback+0x80>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b323      	cbz	r3, 8001682 <HttpClientFileResultCallback+0x5e>
}
 8001638:	b003      	add	sp, #12
 800163a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		memclose();
 800163e:	f7ff bd43 	b.w	80010c8 <memclose>
 8001642:	2909      	cmp	r1, #9
 8001644:	460c      	mov	r4, r1
	switch (err) {
 8001646:	d81e      	bhi.n	8001686 <HttpClientFileResultCallback+0x62>
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HttpClientFileResultCallback+0x84>)
 800164a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 800164e:	4611      	mov	r1, r2
 8001650:	4816      	ldr	r0, [pc, #88]	; (80016ac <HttpClientFileResultCallback+0x88>)
 8001652:	9201      	str	r2, [sp, #4]
 8001654:	f023 feae 	bl	80253b4 <iprintf>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 8001658:	4621      	mov	r1, r4
 800165a:	9a01      	ldr	r2, [sp, #4]
 800165c:	4814      	ldr	r0, [pc, #80]	; (80016b0 <HttpClientFileResultCallback+0x8c>)
 800165e:	f023 fea9 	bl	80253b4 <iprintf>
		flash_memptr = 0;
 8001662:	4c10      	ldr	r4, [pc, #64]	; (80016a4 <HttpClientFileResultCallback+0x80>)
 8001664:	2300      	movs	r3, #0
 8001666:	6023      	str	r3, [r4, #0]
	if (err != ERR_OK) {
 8001668:	b15d      	cbz	r5, 8001682 <HttpClientFileResultCallback+0x5e>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800166a:	f105 0310 	add.w	r3, r5, #16
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b10      	cmp	r3, #16
 8001672:	d90a      	bls.n	800168a <HttpClientFileResultCallback+0x66>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HttpClientFileResultCallback+0x90>)
 8001676:	4810      	ldr	r0, [pc, #64]	; (80016b8 <HttpClientFileResultCallback+0x94>)
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	f023 fe9b 	bl	80253b4 <iprintf>
		flash_memptr = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	6023      	str	r3, [r4, #0]
}
 8001682:	b003      	add	sp, #12
 8001684:	bd30      	pop	{r4, r5, pc}
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HttpClientFileResultCallback+0x98>)
 8001688:	e7e1      	b.n	800164e <HttpClientFileResultCallback+0x2a>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 800168a:	4269      	negs	r1, r5
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HttpClientFileResultCallback+0x9c>)
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HttpClientFileResultCallback+0x90>)
 8001690:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <HttpClientFileResultCallback+0xa0>)
 8001698:	f023 fe8c 	bl	80253b4 <iprintf>
}
 800169c:	e7ef      	b.n	800167e <HttpClientFileResultCallback+0x5a>
 800169e:	4c01      	ldr	r4, [pc, #4]	; (80016a4 <HttpClientFileResultCallback+0x80>)
 80016a0:	e7e3      	b.n	800166a <HttpClientFileResultCallback+0x46>
 80016a2:	bf00      	nop
 80016a4:	20000848 	.word	0x20000848
 80016a8:	0802a534 	.word	0x0802a534
 80016ac:	0802a1bc 	.word	0x0802a1bc
 80016b0:	0802a238 	.word	0x0802a238
 80016b4:	2000165c 	.word	0x2000165c
 80016b8:	0802a1f8 	.word	0x0802a1f8
 80016bc:	0802a1a0 	.word	0x0802a1a0
 80016c0:	0802a55c 	.word	0x0802a55c
 80016c4:	0802a218 	.word	0x0802a218

080016c8 <httpc_tcp_connected>:
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 80016c8:	6901      	ldr	r1, [r0, #16]
 80016ca:	2301      	movs	r3, #1
 80016cc:	894a      	ldrh	r2, [r1, #10]
 80016ce:	6849      	ldr	r1, [r1, #4]
 80016d0:	3a01      	subs	r2, #1
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 80016d2:	b570      	push	{r4, r5, r6, lr}
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 80016d4:	b292      	uxth	r2, r2
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 80016d6:	b082      	sub	sp, #8
 80016d8:	4604      	mov	r4, r0
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 80016da:	6800      	ldr	r0, [r0, #0]
 80016dc:	f01d f938 	bl	801e950 <tcp_write>
	if (r != ERR_OK) {
 80016e0:	4605      	mov	r5, r0
 80016e2:	b948      	cbnz	r0, 80016f8 <httpc_tcp_connected+0x30>
	pbuf_free(req->request);
 80016e4:	6920      	ldr	r0, [r4, #16]
 80016e6:	f019 fd9b 	bl	801b220 <pbuf_free>
	altcp_output(req->pcb);
 80016ea:	6820      	ldr	r0, [r4, #0]
	req->request = NULL;
 80016ec:	6125      	str	r5, [r4, #16]
	altcp_output(req->pcb);
 80016ee:	f01d ff49 	bl	801f584 <tcp_output>
}
 80016f2:	4628      	mov	r0, r5
 80016f4:	b002      	add	sp, #8
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
		if (req->conn_settings != NULL) {
 80016f8:	6a23      	ldr	r3, [r4, #32]
 80016fa:	b13b      	cbz	r3, 800170c <httpc_tcp_connected+0x44>
			if (req->conn_settings->result_fn != NULL) {
 80016fc:	689e      	ldr	r6, [r3, #8]
 80016fe:	b12e      	cbz	r6, 800170c <httpc_tcp_connected+0x44>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001700:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001702:	2300      	movs	r3, #0
 8001704:	9000      	str	r0, [sp, #0]
 8001706:	2107      	movs	r1, #7
 8001708:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800170a:	47b0      	blx	r6
		return httpc_free_state(req);
 800170c:	4620      	mov	r0, r4
}
 800170e:	b002      	add	sp, #8
 8001710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001714:	f7ff bdde 	b.w	80012d4 <httpc_free_state>

08001718 <httpc_tcp_poll>:
	if (req != NULL) {
 8001718:	b1d0      	cbz	r0, 8001750 <httpc_tcp_poll+0x38>
		if (req->timeout_ticks) {
 800171a:	68c3      	ldr	r3, [r0, #12]
static err_t httpc_tcp_poll(void *arg, struct altcp_pcb *pcb) {
 800171c:	b530      	push	{r4, r5, lr}
 800171e:	4604      	mov	r4, r0
 8001720:	b083      	sub	sp, #12
		if (req->timeout_ticks) {
 8001722:	b12b      	cbz	r3, 8001730 <httpc_tcp_poll+0x18>
			req->timeout_ticks--;
 8001724:	3b01      	subs	r3, #1
 8001726:	60c3      	str	r3, [r0, #12]
		if (!req->timeout_ticks) {
 8001728:	b113      	cbz	r3, 8001730 <httpc_tcp_poll+0x18>
}
 800172a:	2000      	movs	r0, #0
 800172c:	b003      	add	sp, #12
 800172e:	bd30      	pop	{r4, r5, pc}
		if (req->conn_settings != NULL) {
 8001730:	6a23      	ldr	r3, [r4, #32]
 8001732:	b13b      	cbz	r3, 8001744 <httpc_tcp_poll+0x2c>
			if (req->conn_settings->result_fn != NULL) {
 8001734:	689d      	ldr	r5, [r3, #8]
 8001736:	b12d      	cbz	r5, 8001744 <httpc_tcp_poll+0x2c>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001738:	2300      	movs	r3, #0
 800173a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800173c:	2105      	movs	r1, #5
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001742:	47a8      	blx	r5
		return httpc_free_state(req);
 8001744:	4620      	mov	r0, r4
}
 8001746:	b003      	add	sp, #12
 8001748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 800174c:	f7ff bdc2 	b.w	80012d4 <httpc_free_state>
}
 8001750:	2000      	movs	r0, #0
 8001752:	4770      	bx	lr

08001754 <HttpClientFileReceiveCallback>:

int HttpClientFileReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001758:	461c      	mov	r4, r3
 800175a:	b081      	sub	sp, #4
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientFileReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 800175c:	b36a      	cbz	r2, 80017ba <HttpClientFileReceiveCallback+0x66>
	if (err != ERR_OK) {
 800175e:	2b00      	cmp	r3, #0
 8001760:	d134      	bne.n	80017cc <HttpClientFileReceiveCallback+0x78>
 8001762:	460f      	mov	r7, r1
 8001764:	4615      	mov	r5, r2
 8001766:	4614      	mov	r4, r2
 8001768:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8001840 <HttpClientFileReceiveCallback+0xec>
		tlen = q->tot_len;
		len = q->len;
#if 0
		putchar('.');
#endif
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 800176c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8001844 <HttpClientFileReceiveCallback+0xf0>
				flash_memptr = 0;
				printf("Flash Write failed from http client\n");
				return (-1);
			}
		}
		down_total += q->len;
 8001770:	4e2b      	ldr	r6, [pc, #172]	; (8001820 <HttpClientFileReceiveCallback+0xcc>)
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001772:	f8d8 b000 	ldr.w	fp, [r8]
		count += q->len;
 8001776:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 800177a:	f1bb 0f00 	cmp.w	fp, #0
 800177e:	d10b      	bne.n	8001798 <HttpClientFileReceiveCallback+0x44>
 8001780:	f8d9 3000 	ldr.w	r3, [r9]
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001784:	4652      	mov	r2, sl
 8001786:	2101      	movs	r1, #1
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001788:	b133      	cbz	r3, 8001798 <HttpClientFileReceiveCallback+0x44>
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 800178a:	6860      	ldr	r0, [r4, #4]
 800178c:	f7ff fbf6 	bl	8000f7c <flash_memwrite>
 8001790:	4582      	cmp	sl, r0
 8001792:	d12b      	bne.n	80017ec <HttpClientFileReceiveCallback+0x98>
		down_total += q->len;
 8001794:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
 8001798:	6833      	ldr	r3, [r6, #0]

		altcp_recved(pcb, p->tot_len);
 800179a:	4638      	mov	r0, r7
 800179c:	8929      	ldrh	r1, [r5, #8]
		down_total += q->len;
 800179e:	4453      	add	r3, sl
 80017a0:	6033      	str	r3, [r6, #0]
		altcp_recved(pcb, p->tot_len);
 80017a2:	f01a f9bd 	bl	801bb20 <tcp_recved>
		pbuf_free(p);
 80017a6:	4628      	mov	r0, r5
 80017a8:	f019 fd3a 	bl	801b220 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 80017ac:	6824      	ldr	r4, [r4, #0]
 80017ae:	2c00      	cmp	r4, #0
 80017b0:	d1df      	bne.n	8001772 <HttpClientFileReceiveCallback+0x1e>

//		p = p->next;
//		printf("HttpClientFileReceiveCallback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, mytot);
	}
	return (0);
 80017b2:	2000      	movs	r0, #0
}
 80017b4:	b001      	add	sp, #4
 80017b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LWIP_ASSERT("p != NULL", p != NULL);
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HttpClientFileReceiveCallback+0xd0>)
 80017bc:	f240 4205 	movw	r2, #1029	; 0x405
 80017c0:	4919      	ldr	r1, [pc, #100]	; (8001828 <HttpClientFileReceiveCallback+0xd4>)
 80017c2:	481a      	ldr	r0, [pc, #104]	; (800182c <HttpClientFileReceiveCallback+0xd8>)
 80017c4:	f023 fdf6 	bl	80253b4 <iprintf>
	if (err != ERR_OK) {
 80017c8:	2c00      	cmp	r4, #0
 80017ca:	d0f2      	beq.n	80017b2 <HttpClientFileReceiveCallback+0x5e>
		putchar('#');
 80017cc:	2023      	movs	r0, #35	; 0x23
 80017ce:	f023 fe09 	bl	80253e4 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80017d2:	f104 0310 	add.w	r3, r4, #16
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b10      	cmp	r3, #16
 80017da:	d914      	bls.n	8001806 <HttpClientFileReceiveCallback+0xb2>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HttpClientFileReceiveCallback+0xcc>)
 80017de:	4814      	ldr	r0, [pc, #80]	; (8001830 <HttpClientFileReceiveCallback+0xdc>)
 80017e0:	6819      	ldr	r1, [r3, #0]
}
 80017e2:	b001      	add	sp, #4
 80017e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP: Unknown error: total=%d\n",down_total);
 80017e8:	f023 bde4 	b.w	80253b4 <iprintf>
				flash_abort = 1;
 80017ec:	2301      	movs	r3, #1
				printf("Flash Write failed from http client\n");
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <HttpClientFileReceiveCallback+0xe0>)
				flash_memptr = 0;
 80017f0:	f8c9 b000 	str.w	fp, [r9]
				flash_abort = 1;
 80017f4:	f8c8 3000 	str.w	r3, [r8]
				printf("Flash Write failed from http client\n");
 80017f8:	f023 fe78 	bl	80254ec <puts>
				return (-1);
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001800:	b001      	add	sp, #4
 8001802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001806:	4261      	negs	r1, r4
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HttpClientFileReceiveCallback+0xe4>)
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <HttpClientFileReceiveCallback+0xcc>)
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <HttpClientFileReceiveCallback+0xe8>)
 800180e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001812:	6812      	ldr	r2, [r2, #0]
}
 8001814:	b001      	add	sp, #4
 8001816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 800181a:	f023 bdcb 	b.w	80253b4 <iprintf>
 800181e:	bf00      	nop
 8001820:	2000165c 	.word	0x2000165c
 8001824:	08029fe0 	.word	0x08029fe0
 8001828:	08045418 	.word	0x08045418
 800182c:	0802a008 	.word	0x0802a008
 8001830:	0802a1f8 	.word	0x0802a1f8
 8001834:	0802a260 	.word	0x0802a260
 8001838:	0802a55c 	.word	0x0802a55c
 800183c:	0802a218 	.word	0x0802a218
 8001840:	20000840 	.word	0x20000840
 8001844:	20000848 	.word	0x20000848

08001848 <HttpClientPageReceiveCallback>:

// build a webpage from pbufs
void HttpClientPageReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800184c:	461c      	mov	r4, r3
 800184e:	b081      	sub	sp, #4
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientPageReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8001850:	2a00      	cmp	r2, #0
 8001852:	d04f      	beq.n	80018f4 <HttpClientPageReceiveCallback+0xac>
	if (err != ERR_OK) {
 8001854:	2b00      	cmp	r3, #0
 8001856:	d156      	bne.n	8001906 <HttpClientPageReceiveCallback+0xbe>
 8001858:	4688      	mov	r8, r1
 800185a:	4617      	mov	r7, r2
 800185c:	4614      	mov	r4, r2
 800185e:	4d38      	ldr	r5, [pc, #224]	; (8001940 <HttpClientPageReceiveCallback+0xf8>)
 8001860:	4e38      	ldr	r6, [pc, #224]	; (8001944 <HttpClientPageReceiveCallback+0xfc>)
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001862:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800195c <HttpClientPageReceiveCallback+0x114>
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		buf = q->payload;
		for (i = 0; i < q->len; i++) {
 8001866:	8963      	ldrh	r3, [r4, #10]
		buf = q->payload;
 8001868:	f8d4 c004 	ldr.w	ip, [r4, #4]
		for (i = 0; i < q->len; i++) {
 800186c:	b1bb      	cbz	r3, 800189e <HttpClientPageReceiveCallback+0x56>
 800186e:	2300      	movs	r3, #0
//			putchar(buf[i]);
			if (down_total < (sizeof(rxbuffer) - 1)) {
 8001870:	f240 211a 	movw	r1, #538	; 0x21a
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
			} else {
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 8001874:	469e      	mov	lr, r3
 8001876:	e007      	b.n	8001888 <HttpClientPageReceiveCallback+0x40>
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 8001878:	602a      	str	r2, [r5, #0]
 800187a:	f81c 2003 	ldrb.w	r2, [ip, r3]
		for (i = 0; i < q->len; i++) {
 800187e:	3301      	adds	r3, #1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 8001880:	5432      	strb	r2, [r6, r0]
		for (i = 0; i < q->len; i++) {
 8001882:	8962      	ldrh	r2, [r4, #10]
 8001884:	4293      	cmp	r3, r2
 8001886:	da0a      	bge.n	800189e <HttpClientPageReceiveCallback+0x56>
			if (down_total < (sizeof(rxbuffer) - 1)) {
 8001888:	6828      	ldr	r0, [r5, #0]
 800188a:	4288      	cmp	r0, r1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 800188c:	f100 0201 	add.w	r2, r0, #1
			if (down_total < (sizeof(rxbuffer) - 1)) {
 8001890:	d9f2      	bls.n	8001878 <HttpClientPageReceiveCallback+0x30>
		for (i = 0; i < q->len; i++) {
 8001892:	3301      	adds	r3, #1
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 8001894:	f886 e21b 	strb.w	lr, [r6, #539]	; 0x21b
		for (i = 0; i < q->len; i++) {
 8001898:	8962      	ldrh	r2, [r4, #10]
 800189a:	4293      	cmp	r3, r2
 800189c:	dbf4      	blt.n	8001888 <HttpClientPageReceiveCallback+0x40>
			}
		}

		altcp_recved(pcb, p->tot_len);
 800189e:	8939      	ldrh	r1, [r7, #8]
 80018a0:	4640      	mov	r0, r8
 80018a2:	f01a f93d 	bl	801bb20 <tcp_recved>
		err = pbuf_free_callback(p);
 80018a6:	4638      	mov	r0, r7
 80018a8:	f016 faea 	bl	8017e80 <pbuf_free_callback>
 80018ac:	4682      	mov	sl, r0
 80018ae:	fa4f fb80 	sxtb.w	fp, r0
		if (err != ERR_OK) {
 80018b2:	f1bb 0f00 	cmp.w	fp, #0
 80018b6:	d105      	bne.n	80018c4 <HttpClientPageReceiveCallback+0x7c>
	for (q = p; q != NULL; q = q->next) {
 80018b8:	6824      	ldr	r4, [r4, #0]
 80018ba:	2c00      	cmp	r4, #0
 80018bc:	d1d3      	bne.n	8001866 <HttpClientPageReceiveCallback+0x1e>
			putchar('!');
			printlwiperr(err);
		}
//		printf("HttpClientPageReceiveCallback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, mytot);
	}
}
 80018be:	b001      	add	sp, #4
 80018c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80018c4:	f10a 0a10 	add.w	sl, sl, #16
			putchar('!');
 80018c8:	2021      	movs	r0, #33	; 0x21
 80018ca:	f023 fd8b 	bl	80253e4 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80018ce:	fa5f fa8a 	uxtb.w	sl, sl
 80018d2:	f1ba 0f10 	cmp.w	sl, #16
 80018d6:	d904      	bls.n	80018e2 <HttpClientPageReceiveCallback+0x9a>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 80018d8:	6829      	ldr	r1, [r5, #0]
 80018da:	481b      	ldr	r0, [pc, #108]	; (8001948 <HttpClientPageReceiveCallback+0x100>)
 80018dc:	f023 fd6a 	bl	80253b4 <iprintf>
 80018e0:	e7ea      	b.n	80018b8 <HttpClientPageReceiveCallback+0x70>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80018e2:	f1cb 0100 	rsb	r1, fp, #0
 80018e6:	682a      	ldr	r2, [r5, #0]
 80018e8:	4818      	ldr	r0, [pc, #96]	; (800194c <HttpClientPageReceiveCallback+0x104>)
 80018ea:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
 80018ee:	f023 fd61 	bl	80253b4 <iprintf>
}
 80018f2:	e7e1      	b.n	80018b8 <HttpClientPageReceiveCallback+0x70>
	LWIP_ASSERT("p != NULL", p != NULL);
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HttpClientPageReceiveCallback+0x108>)
 80018f6:	f240 422f 	movw	r2, #1071	; 0x42f
 80018fa:	4916      	ldr	r1, [pc, #88]	; (8001954 <HttpClientPageReceiveCallback+0x10c>)
 80018fc:	4816      	ldr	r0, [pc, #88]	; (8001958 <HttpClientPageReceiveCallback+0x110>)
 80018fe:	f023 fd59 	bl	80253b4 <iprintf>
	if (err != ERR_OK) {
 8001902:	2c00      	cmp	r4, #0
 8001904:	d0db      	beq.n	80018be <HttpClientPageReceiveCallback+0x76>
		putchar('#');
 8001906:	2023      	movs	r0, #35	; 0x23
 8001908:	f023 fd6c 	bl	80253e4 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800190c:	f104 0310 	add.w	r3, r4, #16
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b10      	cmp	r3, #16
 8001914:	d907      	bls.n	8001926 <HttpClientPageReceiveCallback+0xde>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HttpClientPageReceiveCallback+0xf8>)
 8001918:	480b      	ldr	r0, [pc, #44]	; (8001948 <HttpClientPageReceiveCallback+0x100>)
 800191a:	6819      	ldr	r1, [r3, #0]
}
 800191c:	b001      	add	sp, #4
 800191e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP: Unknown error: total=%d\n",down_total);
 8001922:	f023 bd47 	b.w	80253b4 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001926:	4261      	negs	r1, r4
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HttpClientPageReceiveCallback+0x114>)
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <HttpClientPageReceiveCallback+0xf8>)
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <HttpClientPageReceiveCallback+0x104>)
 800192e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001932:	6812      	ldr	r2, [r2, #0]
}
 8001934:	b001      	add	sp, #4
 8001936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 800193a:	f023 bd3b 	b.w	80253b4 <iprintf>
 800193e:	bf00      	nop
 8001940:	2000165c 	.word	0x2000165c
 8001944:	20001664 	.word	0x20001664
 8001948:	0802a1f8 	.word	0x0802a1f8
 800194c:	0802a218 	.word	0x0802a218
 8001950:	08029fe0 	.word	0x08029fe0
 8001954:	08045418 	.word	0x08045418
 8001958:	0802a008 	.word	0x0802a008
 800195c:	0802a55c 	.word	0x0802a55c

08001960 <httpc_tcp_recv>:
static err_t httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r) {
 8001960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001964:	4604      	mov	r4, r0
 8001966:	b089      	sub	sp, #36	; 0x24
	if (p == NULL) {
 8001968:	4615      	mov	r5, r2
 800196a:	2a00      	cmp	r2, #0
 800196c:	f000 80e2 	beq.w	8001b34 <httpc_tcp_recv+0x1d4>
	if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001970:	f890 a030 	ldrb.w	sl, [r0, #48]	; 0x30
 8001974:	460e      	mov	r6, r1
 8001976:	461f      	mov	r7, r3
 8001978:	f1ba 0f02 	cmp.w	sl, #2
 800197c:	f000 80c8 	beq.w	8001b10 <httpc_tcp_recv+0x1b0>
		if (req->rx_hdrs == NULL) {
 8001980:	6940      	ldr	r0, [r0, #20]
 8001982:	b190      	cbz	r0, 80019aa <httpc_tcp_recv+0x4a>
			pbuf_cat(req->rx_hdrs, p);
 8001984:	4611      	mov	r1, r2
 8001986:	f019 fc7d 	bl	801b284 <pbuf_cat>
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 800198a:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 800198e:	f1ba 0f00 	cmp.w	sl, #0
 8001992:	d00e      	beq.n	80019b2 <httpc_tcp_recv+0x52>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001994:	f1ba 0f01 	cmp.w	sl, #1
 8001998:	d06e      	beq.n	8001a78 <httpc_tcp_recv+0x118>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 800199a:	f1ba 0f02 	cmp.w	sl, #2
 800199e:	f000 80b7 	beq.w	8001b10 <httpc_tcp_recv+0x1b0>
}
 80019a2:	2000      	movs	r0, #0
 80019a4:	b009      	add	sp, #36	; 0x24
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			req->rx_hdrs = p;
 80019aa:	6162      	str	r2, [r4, #20]
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 80019ac:	f1ba 0f00 	cmp.w	sl, #0
 80019b0:	d1f0      	bne.n	8001994 <httpc_tcp_recv+0x34>
			err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status,
 80019b2:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (end1 != 0xFFFF) {
 80019b6:	f64f 7bff 	movw	fp, #65535	; 0xffff
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 80019ba:	4653      	mov	r3, sl
 80019bc:	2202      	movs	r2, #2
 80019be:	4989      	ldr	r1, [pc, #548]	; (8001be4 <httpc_tcp_recv+0x284>)
 80019c0:	4640      	mov	r0, r8
 80019c2:	f019 fe4d 	bl	801b660 <pbuf_memfind>
	if (end1 != 0xFFFF) {
 80019c6:	4558      	cmp	r0, fp
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 80019c8:	9003      	str	r0, [sp, #12]
	if (end1 != 0xFFFF) {
 80019ca:	f000 8105 	beq.w	8001bd8 <httpc_tcp_recv+0x278>
		space1 = pbuf_memfind(p, " ", 1, 0);
 80019ce:	4653      	mov	r3, sl
 80019d0:	2201      	movs	r2, #1
 80019d2:	4985      	ldr	r1, [pc, #532]	; (8001be8 <httpc_tcp_recv+0x288>)
 80019d4:	4640      	mov	r0, r8
 80019d6:	f019 fe43 	bl	801b660 <pbuf_memfind>
		if (space1 != 0xFFFF) {
 80019da:	4558      	cmp	r0, fp
		space1 = pbuf_memfind(p, " ", 1, 0);
 80019dc:	4681      	mov	r9, r0
		if (space1 != 0xFFFF) {
 80019de:	f000 80fb 	beq.w	8001bd8 <httpc_tcp_recv+0x278>
			if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0) && (pbuf_get_at(p, 6) == '.')) {
 80019e2:	4651      	mov	r1, sl
 80019e4:	2305      	movs	r3, #5
 80019e6:	4a81      	ldr	r2, [pc, #516]	; (8001bec <httpc_tcp_recv+0x28c>)
 80019e8:	4640      	mov	r0, r8
 80019ea:	f019 fe01 	bl	801b5f0 <pbuf_memcmp>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	f040 80f2 	bne.w	8001bd8 <httpc_tcp_recv+0x278>
 80019f4:	2106      	movs	r1, #6
 80019f6:	4640      	mov	r0, r8
 80019f8:	f019 fdce 	bl	801b598 <pbuf_get_at>
 80019fc:	282e      	cmp	r0, #46	; 0x2e
 80019fe:	f040 80eb 	bne.w	8001bd8 <httpc_tcp_recv+0x278>
				u16_t version = pbuf_get_at(p, 5) - '0';
 8001a02:	2105      	movs	r1, #5
 8001a04:	4640      	mov	r0, r8
 8001a06:	f019 fdc7 	bl	801b598 <pbuf_get_at>
 8001a0a:	3830      	subs	r0, #48	; 0x30
				version |= pbuf_get_at(p, 7) - '0';
 8001a0c:	2107      	movs	r1, #7
				u16_t version = pbuf_get_at(p, 5) - '0';
 8001a0e:	fa1f fa80 	uxth.w	sl, r0
				version |= pbuf_get_at(p, 7) - '0';
 8001a12:	4640      	mov	r0, r8
 8001a14:	f019 fdc0 	bl	801b598 <pbuf_get_at>
 8001a18:	3830      	subs	r0, #48	; 0x30
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001a1a:	f109 0301 	add.w	r3, r9, #1
 8001a1e:	2201      	movs	r2, #1
				version |= pbuf_get_at(p, 7) - '0';
 8001a20:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001a24:	4970      	ldr	r1, [pc, #448]	; (8001be8 <httpc_tcp_recv+0x288>)
 8001a26:	b29b      	uxth	r3, r3
				*http_version = version;
 8001a28:	8320      	strh	r0, [r4, #24]
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001a2a:	4640      	mov	r0, r8
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	f019 fe17 	bl	801b660 <pbuf_memfind>
				if (space2 != 0xFFFF) {
 8001a32:	4558      	cmp	r0, fp
 8001a34:	9b02      	ldr	r3, [sp, #8]
 8001a36:	f000 80a2 	beq.w	8001b7e <httpc_tcp_recv+0x21e>
					status_num_len = space2 - space1 - 1;
 8001a3a:	eba0 0909 	sub.w	r9, r0, r9
 8001a3e:	f109 39ff 	add.w	r9, r9, #4294967295
				memset(status_num, 0, sizeof(status_num));
 8001a42:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 8001a44:	4640      	mov	r0, r8
 8001a46:	a904      	add	r1, sp, #16
				memset(status_num, 0, sizeof(status_num));
 8001a48:	f8ad 2018 	strh.w	r2, [sp, #24]
 8001a4c:	e9cd 2204 	strd	r2, r2, [sp, #16]
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 8001a50:	fa1f f289 	uxth.w	r2, r9
 8001a54:	f019 fc88 	bl	801b368 <pbuf_copy_partial>
 8001a58:	4581      	cmp	r9, r0
 8001a5a:	f040 80bd 	bne.w	8001bd8 <httpc_tcp_recv+0x278>
					int status = atoi(status_num);
 8001a5e:	a804      	add	r0, sp, #16
 8001a60:	f022 fa84 	bl	8023f6c <atoi>
					if ((status > 0) && (status <= 0xFFFF)) {
 8001a64:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001a68:	1e42      	subs	r2, r0, #1
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	f200 80b4 	bhi.w	8001bd8 <httpc_tcp_recv+0x278>
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 8001a70:	2301      	movs	r3, #1
						*http_status = (u16_t) status;
 8001a72:	8360      	strh	r0, [r4, #26]
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 8001a74:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 8001a78:	f8d4 9014 	ldr.w	r9, [r4, #20]
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2204      	movs	r2, #4
 8001a80:	495b      	ldr	r1, [pc, #364]	; (8001bf0 <httpc_tcp_recv+0x290>)
 8001a82:	4648      	mov	r0, r9
 8001a84:	f019 fdec 	bl	801b660 <pbuf_memfind>
	if (end1 < (0xFFFF - 2)) {
 8001a88:	f64f 73fc 	movw	r3, #65532	; 0xfffc
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8001a8c:	4680      	mov	r8, r0
	if (end1 < (0xFFFF - 2)) {
 8001a8e:	4298      	cmp	r0, r3
 8001a90:	f200 80a5 	bhi.w	8001bde <httpc_tcp_recv+0x27e>
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
		if (content_len_hdr != 0xFFFF) {
 8001a98:	f64f 7aff 	movw	sl, #65535	; 0xffff
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	4955      	ldr	r1, [pc, #340]	; (8001bf4 <httpc_tcp_recv+0x294>)
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001aa2:	4648      	mov	r0, r9
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f019 fddb 	bl	801b660 <pbuf_memfind>
		if (content_len_hdr != 0xFFFF) {
 8001aaa:	4550      	cmp	r0, sl
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001aac:	4605      	mov	r5, r0
		if (content_len_hdr != 0xFFFF) {
 8001aae:	d16e      	bne.n	8001b8e <httpc_tcp_recv+0x22e>
		*total_header_len = end1 + 4;
 8001ab0:	f108 0504 	add.w	r5, r8, #4
				altcp_recved(pcb, total_header_len);
 8001ab4:	4630      	mov	r0, r6
		*total_header_len = end1 + 4;
 8001ab6:	b2ad      	uxth	r5, r5
				altcp_recved(pcb, total_header_len);
 8001ab8:	4629      	mov	r1, r5
 8001aba:	f01a f831 	bl	801bb20 <tcp_recved>
				if (req->conn_settings) {
 8001abe:	6a23      	ldr	r3, [r4, #32]
 8001ac0:	b1cb      	cbz	r3, 8001af6 <httpc_tcp_recv+0x196>
					if (req->conn_settings->headers_done_fn) {
 8001ac2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001ac6:	f1b8 0f00 	cmp.w	r8, #0
 8001aca:	d014      	beq.n	8001af6 <httpc_tcp_recv+0x196>
						err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs,
 8001acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ace:	4620      	mov	r0, r4
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	6962      	ldr	r2, [r4, #20]
 8001ad6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ad8:	47c0      	blx	r8
						if (err != ERR_OK) {
 8001ada:	b160      	cbz	r0, 8001af6 <httpc_tcp_recv+0x196>
		if (req->conn_settings != NULL) {
 8001adc:	6a23      	ldr	r3, [r4, #32]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d037      	beq.n	8001b52 <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001ae2:	689d      	ldr	r5, [r3, #8]
 8001ae4:	2d00      	cmp	r5, #0
 8001ae6:	d034      	beq.n	8001b52 <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001ae8:	8b63      	ldrh	r3, [r4, #26]
 8001aea:	2108      	movs	r1, #8
 8001aec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001aee:	9000      	str	r0, [sp, #0]
 8001af0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001af2:	47a8      	blx	r5
 8001af4:	e02d      	b.n	8001b52 <httpc_tcp_recv+0x1f2>
				q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8001af6:	4629      	mov	r1, r5
 8001af8:	6960      	ldr	r0, [r4, #20]
 8001afa:	f019 fb75 	bl	801b1e8 <pbuf_free_header>
				req->rx_hdrs = NULL;
 8001afe:	2300      	movs	r3, #0
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001b00:	4605      	mov	r5, r0
				req->rx_hdrs = NULL;
 8001b02:	6163      	str	r3, [r4, #20]
				req->parse_state = HTTPC_PARSE_RX_DATA;
 8001b04:	2302      	movs	r3, #2
 8001b06:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	f43f af49 	beq.w	80019a2 <httpc_tcp_recv+0x42>
		req->rx_content_len += p->tot_len;
 8001b10:	8929      	ldrh	r1, [r5, #8]
 8001b12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001b14:	f8d4 e01c 	ldr.w	lr, [r4, #28]
		req->rx_content_len += p->tot_len;
 8001b18:	440b      	add	r3, r1
 8001b1a:	62a3      	str	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001b1c:	f1be 0f00 	cmp.w	lr, #0
 8001b20:	d026      	beq.n	8001b70 <httpc_tcp_recv+0x210>
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001b22:	463b      	mov	r3, r7
 8001b24:	462a      	mov	r2, r5
 8001b26:	4631      	mov	r1, r6
 8001b28:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001b2a:	46f4      	mov	ip, lr
}
 8001b2c:	b009      	add	sp, #36	; 0x24
 8001b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001b32:	4760      	bx	ip
		if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001b34:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d010      	beq.n	8001b5e <httpc_tcp_recv+0x1fe>
			result = HTTPC_RESULT_ERR_CLOSED;
 8001b3c:	2104      	movs	r1, #4
		if (req->conn_settings != NULL) {
 8001b3e:	6a23      	ldr	r3, [r4, #32]
 8001b40:	b13b      	cbz	r3, 8001b52 <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001b42:	689d      	ldr	r5, [r3, #8]
 8001b44:	b12d      	cbz	r5, 8001b52 <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001b46:	2200      	movs	r2, #0
 8001b48:	8b63      	ldrh	r3, [r4, #26]
 8001b4a:	9200      	str	r2, [sp, #0]
 8001b4c:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001b50:	47a8      	blx	r5
		return httpc_free_state(req);
 8001b52:	4620      	mov	r0, r4
}
 8001b54:	b009      	add	sp, #36	; 0x24
 8001b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return httpc_free_state(req);
 8001b5a:	f7ff bbbb 	b.w	80012d4 <httpc_free_state>
		} else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID)
 8001b5e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001b60:	1c4b      	adds	r3, r1, #1
 8001b62:	d012      	beq.n	8001b8a <httpc_tcp_recv+0x22a>
				&& (req->hdr_content_len != req->rx_content_len)) {
 8001b64:	6a85      	ldr	r5, [r0, #40]	; 0x28
			result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8001b66:	42a9      	cmp	r1, r5
 8001b68:	bf14      	ite	ne
 8001b6a:	2109      	movne	r1, #9
 8001b6c:	2100      	moveq	r1, #0
 8001b6e:	e7e6      	b.n	8001b3e <httpc_tcp_recv+0x1de>
			altcp_recved(pcb, p->tot_len);
 8001b70:	4630      	mov	r0, r6
 8001b72:	f019 ffd5 	bl	801bb20 <tcp_recved>
			pbuf_free(p);
 8001b76:	4628      	mov	r0, r5
 8001b78:	f019 fb52 	bl	801b220 <pbuf_free>
 8001b7c:	e711      	b.n	80019a2 <httpc_tcp_recv+0x42>
					status_num_len = end1 - space1 - 1;
 8001b7e:	9a03      	ldr	r2, [sp, #12]
 8001b80:	eba2 0909 	sub.w	r9, r2, r9
 8001b84:	f109 39ff 	add.w	r9, r9, #4294967295
 8001b88:	e75b      	b.n	8001a42 <httpc_tcp_recv+0xe2>
			result = HTTPC_RESULT_OK;
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	e7d7      	b.n	8001b3e <httpc_tcp_recv+0x1de>
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2202      	movs	r2, #2
 8001b92:	4914      	ldr	r1, [pc, #80]	; (8001be4 <httpc_tcp_recv+0x284>)
 8001b94:	4648      	mov	r0, r9
 8001b96:	f019 fd63 	bl	801b660 <pbuf_memfind>
			if (content_len_line_end != 0xFFFF) {
 8001b9a:	4550      	cmp	r0, sl
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b9c:	4603      	mov	r3, r0
			if (content_len_line_end != 0xFFFF) {
 8001b9e:	d087      	beq.n	8001ab0 <httpc_tcp_recv+0x150>
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001ba0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001ba4:	4648      	mov	r0, r9
 8001ba6:	a904      	add	r1, sp, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001ba8:	1b52      	subs	r2, r2, r5
 8001baa:	441a      	add	r2, r3
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001bac:	f105 0310 	add.w	r3, r5, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001bb0:	b295      	uxth	r5, r2
				memset(content_len_num, 0, sizeof(content_len_num));
 8001bb2:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001bb4:	b29b      	uxth	r3, r3
				memset(content_len_num, 0, sizeof(content_len_num));
 8001bb6:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001bba:	e9cd 2206 	strd	r2, r2, [sp, #24]
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001bbe:	462a      	mov	r2, r5
 8001bc0:	f019 fbd2 	bl	801b368 <pbuf_copy_partial>
 8001bc4:	4285      	cmp	r5, r0
 8001bc6:	f47f af73 	bne.w	8001ab0 <httpc_tcp_recv+0x150>
					int len = atoi(content_len_num);
 8001bca:	a804      	add	r0, sp, #16
 8001bcc:	f022 f9ce 	bl	8023f6c <atoi>
					if ((len >= 0) && ((u32_t) len < HTTPC_CONTENT_LEN_INVALID)) {
 8001bd0:	2800      	cmp	r0, #0
						*content_length = (u32_t) len;
 8001bd2:	bfa8      	it	ge
 8001bd4:	62e0      	strge	r0, [r4, #44]	; 0x2c
			if (err == ERR_OK) {
 8001bd6:	e76b      	b.n	8001ab0 <httpc_tcp_recv+0x150>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001bd8:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001bdc:	e6da      	b.n	8001994 <httpc_tcp_recv+0x34>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001bde:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001be2:	e6da      	b.n	800199a <httpc_tcp_recv+0x3a>
 8001be4:	0802a12c 	.word	0x0802a12c
 8001be8:	0802c53c 	.word	0x0802c53c
 8001bec:	0802a284 	.word	0x0802a284
 8001bf0:	0802a28c 	.word	0x0802a28c
 8001bf4:	0802a294 	.word	0x0802a294

08001bf8 <httpc_get_file_dns>:
err_t httpc_get_file_dns(const char *server_name, u16_t port, const char *uri, const httpc_connection_t *settings, altcp_recv_fn recv_fn, void *callback_arg, httpc_state_t **connection) {
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001bfe:	2d00      	cmp	r5, #0
 8001c00:	bf18      	it	ne
 8001c02:	2a00      	cmpne	r2, #0
 8001c04:	d044      	beq.n	8001c90 <httpc_get_file_dns+0x98>
 8001c06:	4604      	mov	r4, r0
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d041      	beq.n	8001c90 <httpc_get_file_dns+0x98>
	err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	461e      	mov	r6, r3
	return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 8001c10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001c12:	460b      	mov	r3, r1
 8001c14:	9000      	str	r0, [sp, #0]
 8001c16:	4631      	mov	r1, r6
 8001c18:	a807      	add	r0, sp, #28
 8001c1a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8001c1e:	4622      	mov	r2, r4
 8001c20:	f7ff fbe0 	bl	80013e4 <httpc_init_connection_common.constprop.0>
	if (err != ERR_OK) {
 8001c24:	4605      	mov	r5, r0
 8001c26:	b998      	cbnz	r0, 8001c50 <httpc_get_file_dns+0x58>
	if (settings->use_proxy) {
 8001c28:	79b3      	ldrb	r3, [r6, #6]
 8001c2a:	b9a3      	cbnz	r3, 8001c56 <httpc_get_file_dns+0x5e>
		err = httpc_get_internal_dns(req, server_name);
 8001c2c:	9e07      	ldr	r6, [sp, #28]
	LWIP_ASSERT("req != NULL", req != NULL);
 8001c2e:	b33e      	cbz	r6, 8001c80 <httpc_get_file_dns+0x88>
	err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 8001c30:	1d31      	adds	r1, r6, #4
 8001c32:	4633      	mov	r3, r6
 8001c34:	4620      	mov	r0, r4
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <httpc_get_file_dns+0xac>)
 8001c38:	9105      	str	r1, [sp, #20]
 8001c3a:	f017 ffc9 	bl	8019bd0 <dns_gethostbyname>
	if (err == ERR_OK) {
 8001c3e:	9905      	ldr	r1, [sp, #20]
 8001c40:	4603      	mov	r3, r0
 8001c42:	b1c0      	cbz	r0, 8001c76 <httpc_get_file_dns+0x7e>
	} else if (err == ERR_INPROGRESS) {
 8001c44:	1d42      	adds	r2, r0, #5
 8001c46:	d00d      	beq.n	8001c64 <httpc_get_file_dns+0x6c>
		httpc_free_state(req);
 8001c48:	9807      	ldr	r0, [sp, #28]
		return err;
 8001c4a:	461d      	mov	r5, r3
		httpc_free_state(req);
 8001c4c:	f7ff fb42 	bl	80012d4 <httpc_free_state>
}
 8001c50:	4628      	mov	r0, r5
 8001c52:	b008      	add	sp, #32
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8001c56:	4631      	mov	r1, r6
 8001c58:	9807      	ldr	r0, [sp, #28]
 8001c5a:	f7ff fb1b 	bl	8001294 <httpc_get_internal_addr>
 8001c5e:	4603      	mov	r3, r0
	if (err != ERR_OK) {
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f1      	bne.n	8001c48 <httpc_get_file_dns+0x50>
	if (connection != NULL) {
 8001c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f2      	beq.n	8001c50 <httpc_get_file_dns+0x58>
		*connection = req;
 8001c6a:	9b07      	ldr	r3, [sp, #28]
}
 8001c6c:	4628      	mov	r0, r5
		*connection = req;
 8001c6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001c70:	6013      	str	r3, [r2, #0]
}
 8001c72:	b008      	add	sp, #32
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &req->remote_addr);
 8001c76:	4630      	mov	r0, r6
 8001c78:	f7ff fb0c 	bl	8001294 <httpc_get_internal_addr>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	e7ef      	b.n	8001c60 <httpc_get_file_dns+0x68>
	LWIP_ASSERT("req != NULL", req != NULL);
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <httpc_get_file_dns+0xb0>)
 8001c82:	f240 12c5 	movw	r2, #453	; 0x1c5
 8001c86:	4909      	ldr	r1, [pc, #36]	; (8001cac <httpc_get_file_dns+0xb4>)
 8001c88:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <httpc_get_file_dns+0xb8>)
 8001c8a:	f023 fb93 	bl	80253b4 <iprintf>
 8001c8e:	e7cf      	b.n	8001c30 <httpc_get_file_dns+0x38>
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <httpc_get_file_dns+0xb0>)
 8001c92:	f240 228f 	movw	r2, #655	; 0x28f
 8001c96:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <httpc_get_file_dns+0xbc>)
 8001c98:	f06f 050f 	mvn.w	r5, #15
 8001c9c:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <httpc_get_file_dns+0xb8>)
 8001c9e:	f023 fb89 	bl	80253b4 <iprintf>
 8001ca2:	e7d5      	b.n	8001c50 <httpc_get_file_dns+0x58>
 8001ca4:	08001551 	.word	0x08001551
 8001ca8:	08029fe0 	.word	0x08029fe0
 8001cac:	08029ffc 	.word	0x08029ffc
 8001cb0:	0802a008 	.word	0x0802a008
 8001cb4:	0802a2a8 	.word	0x0802a2a8

08001cb8 <http_dlclient>:

// download a file
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection1 = &conn1;	// point to static
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <http_dlclient+0x7c>)
	settings1 = &set1;		// point to static
	memset(settings1, 0, sizeof(set1));
 8001cbe:	2500      	movs	r5, #0
	settings1 = &set1;		// point to static
 8001cc0:	4c1d      	ldr	r4, [pc, #116]	; (8001d38 <http_dlclient+0x80>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001cc2:	b084      	sub	sp, #16
	settings1 = &set1;		// point to static
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <http_dlclient+0x84>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001cc6:	460f      	mov	r7, r1
	connection1 = &conn1;	// point to static
 8001cc8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001d60 <http_dlclient+0xa8>
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001ccc:	4606      	mov	r6, r0
	memset(connection1, 0, sizeof(conn1));
 8001cce:	4629      	mov	r1, r5
 8001cd0:	4618      	mov	r0, r3
	settings1 = &set1;		// point to static
 8001cd2:	6014      	str	r4, [r2, #0]
	memset(connection1, 0, sizeof(conn1));
 8001cd4:	2234      	movs	r2, #52	; 0x34
	connection1 = &conn1;	// point to static
 8001cd6:	f8c8 3000 	str.w	r3, [r8]
	memset(settings1, 0, sizeof(set1));
 8001cda:	6025      	str	r5, [r4, #0]
 8001cdc:	6065      	str	r5, [r4, #4]
	memset(connection1, 0, sizeof(conn1));
 8001cde:	f022 fbcb 	bl	8024478 <memset>

	settings1->use_proxy = 0;
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001ce2:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <http_dlclient+0x88>)
	connection1->timeout_ticks = 1;

//	strcpy(domain_name, "xen.local");
//	strcpy(rxbuffer, "/firmware/my12.bin");

	strcpy(domain_name, host);
 8001ce4:	4639      	mov	r1, r7
	settings1->result_fn = HttpClientFileResultCallback;
 8001ce6:	4f17      	ldr	r7, [pc, #92]	; (8001d44 <http_dlclient+0x8c>)
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001ce8:	60e2      	str	r2, [r4, #12]
	connection1->timeout_ticks = 1;
 8001cea:	2201      	movs	r2, #1
	settings1->result_fn = HttpClientFileResultCallback;
 8001cec:	60a7      	str	r7, [r4, #8]
	connection1->timeout_ticks = 1;
 8001cee:	60c2      	str	r2, [r0, #12]
	strcpy(domain_name, host);
 8001cf0:	4815      	ldr	r0, [pc, #84]	; (8001d48 <http_dlclient+0x90>)
 8001cf2:	f023 fdf0 	bl	80258d6 <strcpy>
	strcpy(rxbuffer, filename);
 8001cf6:	4631      	mov	r1, r6
 8001cf8:	4814      	ldr	r0, [pc, #80]	; (8001d4c <http_dlclient+0x94>)
 8001cfa:	f023 fdec 	bl	80258d6 <strcpy>

//	printf("http_dlclient: domain=%s, rxbuffer=%s, flash_add=0x%08x\n", domain_name, rxbuffer, flash_memptr);

	down_total = 0;
 8001cfe:	4914      	ldr	r1, [pc, #80]	; (8001d50 <http_dlclient+0x98>)
	expectedapage = 0;
	error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <http_dlclient+0x9c>)
 8001d02:	4623      	mov	r3, r4
	expectedapage = 0;
 8001d04:	4814      	ldr	r0, [pc, #80]	; (8001d58 <http_dlclient+0xa0>)
	error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001d06:	f8cd 8008 	str.w	r8, [sp, #8]
 8001d0a:	9701      	str	r7, [sp, #4]
	down_total = 0;
 8001d0c:	600d      	str	r5, [r1, #0]
	error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001d0e:	f641 7192 	movw	r1, #8082	; 0x1f92
 8001d12:	9200      	str	r2, [sp, #0]
	expectedapage = 0;
 8001d14:	6005      	str	r5, [r0, #0]
	error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001d16:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <http_dlclient+0x94>)
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <http_dlclient+0x90>)
 8001d1a:	f7ff ff6d 	bl	8001bf8 <httpc_get_file_dns>
			HttpClientFileResultCallback, &connection1);
	if (error != HTTPC_RESULT_OK) {
 8001d1e:	b910      	cbnz	r0, 8001d26 <http_dlclient+0x6e>
		printf("httpc_get_file_dns: returned, err=%d\n", error);
	}
}
 8001d20:	b004      	add	sp, #16
 8001d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001d26:	4601      	mov	r1, r0
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <http_dlclient+0xa4>)
}
 8001d2a:	b004      	add	sp, #16
 8001d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001d30:	f023 bb40 	b.w	80253b4 <iprintf>
 8001d34:	200015cc 	.word	0x200015cc
 8001d38:	20001880 	.word	0x20001880
 8001d3c:	200018a0 	.word	0x200018a0
 8001d40:	08001285 	.word	0x08001285
 8001d44:	08001625 	.word	0x08001625
 8001d48:	2000163c 	.word	0x2000163c
 8001d4c:	20001664 	.word	0x20001664
 8001d50:	2000165c 	.word	0x2000165c
 8001d54:	08001755 	.word	0x08001755
 8001d58:	20003108 	.word	0x20003108
 8001d5c:	0802a2bc 	.word	0x0802a2bc
 8001d60:	20001634 	.word	0x20001634

08001d64 <hc_open>:

// request a webpage
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection2 = &conn2;	// point to static
	settings2 = &set2;		// point to static
	memset(settings2, 0, sizeof(set2));
 8001d68:	2200      	movs	r2, #0
	settings2 = &set2;		// point to static
 8001d6a:	4c28      	ldr	r4, [pc, #160]	; (8001e0c <hc_open+0xa8>)
	connection2 = &conn2;	// point to static
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <hc_open+0xac>)
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d6e:	460d      	mov	r5, r1
	memset(settings2, 0, sizeof(set2));
 8001d70:	6022      	str	r2, [r4, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d72:	4611      	mov	r1, r2
	memset(settings2, 0, sizeof(set2));
 8001d74:	6062      	str	r2, [r4, #4]
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d76:	4606      	mov	r6, r0
	settings2 = &set2;		// point to static
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <hc_open+0xb0>)
	memset(connection2, 0, sizeof(conn2));
 8001d7a:	4618      	mov	r0, r3
	connection2 = &conn2;	// point to static
 8001d7c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001e38 <hc_open+0xd4>
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d80:	b084      	sub	sp, #16
	settings2 = &set2;		// point to static
 8001d82:	6014      	str	r4, [r2, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d84:	2234      	movs	r2, #52	; 0x34
	connection2 = &conn2;	// point to static
 8001d86:	f8c8 3000 	str.w	r3, [r8]
	memset(connection2, 0, sizeof(conn2));
 8001d8a:	f022 fb75 	bl	8024478 <memset>

	settings2->use_proxy = 0;
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d8e:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <hc_open+0xb4>)
	settings2->result_fn = HttpClientPageResultCallback;
 8001d90:	4f22      	ldr	r7, [pc, #136]	; (8001e1c <hc_open+0xb8>)
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d92:	60e2      	str	r2, [r4, #12]

	connection2->timeout_ticks = 1;
 8001d94:	2201      	movs	r2, #1
	settings2->result_fn = HttpClientPageResultCallback;
 8001d96:	60a7      	str	r7, [r4, #8]
	connection2->timeout_ticks = 1;
 8001d98:	60c2      	str	r2, [r0, #12]

	if ((isalnum(*servername) || (*servername == '/'))) {
 8001d9a:	4c21      	ldr	r4, [pc, #132]	; (8001e20 <hc_open+0xbc>)
 8001d9c:	7833      	ldrb	r3, [r6, #0]
 8001d9e:	5ce2      	ldrb	r2, [r4, r3]
 8001da0:	0751      	lsls	r1, r2, #29
 8001da2:	d101      	bne.n	8001da8 <hc_open+0x44>
 8001da4:	2b2f      	cmp	r3, #47	; 0x2f
 8001da6:	d126      	bne.n	8001df6 <hc_open+0x92>
		strcpy(domain_name, servername);
 8001da8:	4631      	mov	r1, r6
 8001daa:	481e      	ldr	r0, [pc, #120]	; (8001e24 <hc_open+0xc0>)
 8001dac:	f023 fd93 	bl	80258d6 <strcpy>
	} else {
		strcpy(domain_name, SERVER_DESTINATION);
	}

	if ((isalnum(*page) || (*page == '/'))) {
 8001db0:	782b      	ldrb	r3, [r5, #0]
 8001db2:	5ce2      	ldrb	r2, [r4, r3]
 8001db4:	0752      	lsls	r2, r2, #29
 8001db6:	d101      	bne.n	8001dbc <hc_open+0x58>
 8001db8:	2b2f      	cmp	r3, #47	; 0x2f
 8001dba:	d118      	bne.n	8001dee <hc_open+0x8a>
		strcpy(rxbuffer, page);			// rxbuffer has url
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	481a      	ldr	r0, [pc, #104]	; (8001e28 <hc_open+0xc4>)
 8001dc0:	f023 fd89 	bl	80258d6 <strcpy>

//	printf("hc_open: domain=%s, rxbuffer=%s\n", domain_name, rxbuffer);

	down_total = 0;
    expectedapage = 1;
     error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <hc_open+0xc8>)
	down_total = 0;
 8001dc6:	2400      	movs	r4, #0
 8001dc8:	4819      	ldr	r0, [pc, #100]	; (8001e30 <hc_open+0xcc>)
     error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001dca:	f641 7192 	movw	r1, #8082	; 0x1f92
 8001dce:	f8cd 8008 	str.w	r8, [sp, #8]
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <hc_open+0xa8>)
 8001dd4:	e9cd 2700 	strd	r2, r7, [sp]
	down_total = 0;
 8001dd8:	6004      	str	r4, [r0, #0]
    expectedapage = 1;
 8001dda:	2401      	movs	r4, #1
 8001ddc:	4815      	ldr	r0, [pc, #84]	; (8001e34 <hc_open+0xd0>)
     error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <hc_open+0xc4>)
    expectedapage = 1;
 8001de0:	6004      	str	r4, [r0, #0]
     error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001de2:	4810      	ldr	r0, [pc, #64]	; (8001e24 <hc_open+0xc0>)
 8001de4:	f7ff ff08 	bl	8001bf8 <httpc_get_file_dns>
    			HttpClientPageResultCallback, &connection2);
}
 8001de8:	b004      	add	sp, #16
 8001dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(rxbuffer, "/");
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <hc_open+0xc4>)
 8001df0:	222f      	movs	r2, #47	; 0x2f
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	e7e6      	b.n	8001dc4 <hc_open+0x60>
		strcpy(domain_name, SERVER_DESTINATION);
 8001df6:	f8df c044 	ldr.w	ip, [pc, #68]	; 8001e3c <hc_open+0xd8>
 8001dfa:	4e0a      	ldr	r6, [pc, #40]	; (8001e24 <hc_open+0xc0>)
 8001dfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001e00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e02:	f8dc 3000 	ldr.w	r3, [ip]
 8001e06:	6033      	str	r3, [r6, #0]
 8001e08:	e7d2      	b.n	8001db0 <hc_open+0x4c>
 8001e0a:	bf00      	nop
 8001e0c:	20001890 	.word	0x20001890
 8001e10:	20001600 	.word	0x20001600
 8001e14:	200018a4 	.word	0x200018a4
 8001e18:	08001285 	.word	0x08001285
 8001e1c:	08001591 	.word	0x08001591
 8001e20:	08045c01 	.word	0x08045c01
 8001e24:	2000163c 	.word	0x2000163c
 8001e28:	20001664 	.word	0x20001664
 8001e2c:	08001849 	.word	0x08001849
 8001e30:	2000165c 	.word	0x2000165c
 8001e34:	20003108 	.word	0x20003108
 8001e38:	20001638 	.word	0x20001638
 8001e3c:	0802a2e4 	.word	0x0802a2e4

08001e40 <httploader>:
#include "tftp/tftp_loader.h"

int http_downloading = 0;

// attempt to load new firmware
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e44:	460c      	mov	r4, r1
	volatile uint32_t addr;
	char segment;

	dl_filecrc = 0;

	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e46:	4924      	ldr	r1, [pc, #144]	; (8001ed8 <httploader+0x98>)
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e48:	b084      	sub	sp, #16
	dl_filecrc = 0;
 8001e4a:	4e24      	ldr	r6, [pc, #144]	; (8001edc <httploader+0x9c>)
	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e4c:	f001 6101 	and.w	r1, r1, #135266304	; 0x8100000
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e50:	4605      	mov	r5, r0
	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e52:	9103      	str	r1, [sp, #12]
	dl_filecrc = 0;
 8001e54:	2100      	movs	r1, #0
 8001e56:	6031      	str	r1, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e58:	9903      	ldr	r1, [sp, #12]
 8001e5a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001e5e:	d033      	beq.n	8001ec8 <httploader+0x88>
 8001e60:	4f1f      	ldr	r7, [pc, #124]	; (8001ee0 <httploader+0xa0>)
 8001e62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000

	switch (flash_load_address) {		// assign a code letter for the load address filename
	case LOADER_BASE_MEM1:
		segment = 'A';
		dl_filecrc = crc1;
		break;
 8001e66:	f04f 0841 	mov.w	r8, #65	; 0x41
		dl_filecrc = crc1;
 8001e6a:	6032      	str	r2, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e6c:	6039      	str	r1, [r7, #0]
	default:
		printf("httploader: bad load address\n");
		return;
	}

	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n",filename,host,crc1,crc2);
 8001e6e:	4629      	mov	r1, r5
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <httploader+0xa4>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	4622      	mov	r2, r4

	flash_memptr = flash_load_address;
 8001e78:	4e1b      	ldr	r6, [pc, #108]	; (8001ee8 <httploader+0xa8>)
	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n",filename,host,crc1,crc2);
 8001e7a:	f023 fa9b 	bl	80253b4 <iprintf>
	flash_filelength = 0;

	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e7e:	481b      	ldr	r0, [pc, #108]	; (8001eec <httploader+0xac>)
	flash_memptr = flash_load_address;
 8001e80:	6839      	ldr	r1, [r7, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e82:	462a      	mov	r2, r5
 8001e84:	6800      	ldr	r0, [r0, #0]
 8001e86:	4643      	mov	r3, r8
	flash_memptr = flash_load_address;
 8001e88:	6031      	str	r1, [r6, #0]
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, flash_memptr, host);

	http_downloading = 1;
 8001e8a:	2501      	movs	r5, #1
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e8c:	9001      	str	r0, [sp, #4]
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <httploader+0xb0>)
	flash_filelength = 0;
 8001e90:	4918      	ldr	r1, [pc, #96]	; (8001ef4 <httploader+0xb4>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e92:	6800      	ldr	r0, [r0, #0]
 8001e94:	9000      	str	r0, [sp, #0]
	flash_filelength = 0;
 8001e96:	2000      	movs	r0, #0
 8001e98:	6008      	str	r0, [r1, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e9a:	4917      	ldr	r1, [pc, #92]	; (8001ef8 <httploader+0xb8>)
 8001e9c:	4817      	ldr	r0, [pc, #92]	; (8001efc <httploader+0xbc>)
 8001e9e:	f023 fc73 	bl	8025788 <siprintf>
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, flash_memptr, host);
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	6832      	ldr	r2, [r6, #0]
 8001ea6:	4915      	ldr	r1, [pc, #84]	; (8001efc <httploader+0xbc>)
 8001ea8:	4815      	ldr	r0, [pc, #84]	; (8001f00 <httploader+0xc0>)
 8001eaa:	f023 fa83 	bl	80253b4 <iprintf>
	http_downloading = 1;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <httploader+0xc4>)
	http_dlclient(newfilename, host, flash_memptr);
 8001eb0:	6832      	ldr	r2, [r6, #0]
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	4811      	ldr	r0, [pc, #68]	; (8001efc <httploader+0xbc>)
	http_downloading = 1;
 8001eb6:	601d      	str	r5, [r3, #0]
	http_dlclient(newfilename, host, flash_memptr);
 8001eb8:	f7ff fefe 	bl	8001cb8 <http_dlclient>
	osDelay(5);
 8001ebc:	2005      	movs	r0, #5
}
 8001ebe:	b004      	add	sp, #16
 8001ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(5);
 8001ec4:	f013 badc 	b.w	8015480 <osDelay>
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001ec8:	4f05      	ldr	r7, [pc, #20]	; (8001ee0 <httploader+0xa0>)
 8001eca:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
		break;
 8001ece:	f04f 0849 	mov.w	r8, #73	; 0x49
		dl_filecrc = crc2;
 8001ed2:	6033      	str	r3, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001ed4:	6039      	str	r1, [r7, #0]
		break;
 8001ed6:	e7ca      	b.n	8001e6e <httploader+0x2e>
 8001ed8:	08001e41 	.word	0x08001e41
 8001edc:	2000083c 	.word	0x2000083c
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	0802a5a0 	.word	0x0802a5a0
 8001ee8:	20000848 	.word	0x20000848
 8001eec:	20002d44 	.word	0x20002d44
 8001ef0:	2000208c 	.word	0x2000208c
 8001ef4:	20000844 	.word	0x20000844
 8001ef8:	0802a5d4 	.word	0x0802a5d4
 8001efc:	200018ac 	.word	0x200018ac
 8001f00:	0802a5f4 	.word	0x0802a5f4
 8001f04:	200018a8 	.word	0x200018a8

08001f08 <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8001f08:	2300      	movs	r3, #0
int wait_armtx(void) {
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8001f0e:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8001f10:	9b01      	ldr	r3, [sp, #4]
 8001f12:	2b95      	cmp	r3, #149	; 0x95
 8001f14:	dc0d      	bgt.n	8001f32 <wait_armtx+0x2a>
 8001f16:	4c0e      	ldr	r4, [pc, #56]	; (8001f50 <wait_armtx+0x48>)
 8001f18:	e007      	b.n	8001f2a <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8001f1a:	9b01      	ldr	r3, [sp, #4]
 8001f1c:	4403      	add	r3, r0
 8001f1e:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001f20:	f013 faae 	bl	8015480 <osDelay>
	while (timeoutcnt < 150) {
 8001f24:	9b01      	ldr	r3, [sp, #4]
 8001f26:	2b95      	cmp	r3, #149	; 0x95
 8001f28:	dc03      	bgt.n	8001f32 <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 8001f2a:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	4283      	cmp	r3, r0
 8001f30:	d1f3      	bne.n	8001f1a <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001f32:	9b01      	ldr	r3, [sp, #4]
 8001f34:	2bf9      	cmp	r3, #249	; 0xf9
 8001f36:	dc02      	bgt.n	8001f3e <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 8001f38:	2000      	movs	r0, #0
}
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <wait_armtx+0x4c>)
 8001f40:	f023 fad4 	bl	80254ec <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <wait_armtx+0x48>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	601a      	str	r2, [r3, #0]
		return (-1);
 8001f4e:	e7f4      	b.n	8001f3a <wait_armtx+0x32>
 8001f50:	20002084 	.word	0x20002084
 8001f54:	0802a650 	.word	0x0802a650

08001f58 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <HAL_UART_TxCpltCallback+0x14>)
 8001f5e:	6802      	ldr	r2, [r0, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d000      	beq.n	8001f66 <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001f64:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 8001f66:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_UART_TxCpltCallback+0x18>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40005000 	.word	0x40005000
 8001f74:	20002084 	.word	0x20002084

08001f78 <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001f7c:	4c1b      	ldr	r4, [pc, #108]	; (8001fec <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 8001f7e:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001f80:	481b      	ldr	r0, [pc, #108]	; (8001ff0 <lcd_uart_init+0x78>)
 8001f82:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 8001f84:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001f86:	f023 fa15 	bl	80253b4 <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 8001f8c:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001f8e:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001f90:	f010 f830 	bl	8011ff4 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001f94:	4620      	mov	r0, r4
 8001f96:	f00f ff7b 	bl	8011e90 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 8001f9a:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001f9e:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8001fa0:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001fb4:	f011 f818 	bl	8012fe8 <HAL_UART_Init>
 8001fb8:	b958      	cbnz	r0, 8001fd2 <lcd_uart_init+0x5a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	490f      	ldr	r1, [pc, #60]	; (8001ffc <lcd_uart_init+0x84>)
 8001fbe:	480b      	ldr	r0, [pc, #44]	; (8001fec <lcd_uart_init+0x74>)
 8001fc0:	f011 fa02 	bl	80133c8 <HAL_UART_Receive_DMA>
 8001fc4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001fc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fcc:	b933      	cbnz	r3, 8001fdc <lcd_uart_init+0x64>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 8001fd2:	4631      	mov	r1, r6
 8001fd4:	480a      	ldr	r0, [pc, #40]	; (8002000 <lcd_uart_init+0x88>)
 8001fd6:	f023 f9ed 	bl	80253b4 <iprintf>
 8001fda:	e7ee      	b.n	8001fba <lcd_uart_init+0x42>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8001fdc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001fe0:	4808      	ldr	r0, [pc, #32]	; (8002004 <lcd_uart_init+0x8c>)
}
 8001fe2:	b002      	add	sp, #8
 8001fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8001fe8:	f023 b9e4 	b.w	80253b4 <iprintf>
 8001fec:	20002b0c 	.word	0x20002b0c
 8001ff0:	0802a664 	.word	0x0802a664
 8001ff4:	20001a8c 	.word	0x20001a8c
 8001ff8:	40005000 	.word	0x40005000
 8001ffc:	2000194c 	.word	0x2000194c
 8002000:	0802a680 	.word	0x0802a680
 8002004:	0802a6b0 	.word	0x0802a6b0

08002008 <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800200a:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <lcd_init+0xec>)
void lcd_init(int baud) {
 800200c:	b08d      	sub	sp, #52	; 0x34
 800200e:	4605      	mov	r5, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002010:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <lcd_init+0xf0>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8002012:	af02      	add	r7, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002014:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8002016:	4e39      	ldr	r6, [pc, #228]	; (80020fc <lcd_init+0xf4>)
 8002018:	f10d 0c10 	add.w	ip, sp, #16
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800201c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002020:	e887 0003 	stmia.w	r7, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002026:	c407      	stmia	r4!, {r0, r1, r2}
 8002028:	f824 3b02 	strh.w	r3, [r4], #2
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	7023      	strb	r3, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8002030:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002034:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	int siz, page;
	volatile char *cmd;

	printf("lcd_init: baud=%d\n", baud);
 8002038:	4629      	mov	r1, r5
 800203a:	4831      	ldr	r0, [pc, #196]	; (8002100 <lcd_init+0xf8>)
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 800203c:	f88c 3000 	strb.w	r3, [ip]
	printf("lcd_init: baud=%d\n", baud);
 8002040:	f023 f9b8 	bl	80253b4 <iprintf>
	if (!((baud == 9600) || (baud == 230400))) {
 8002044:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 8002048:	d008      	beq.n	800205c <lcd_init+0x54>
 800204a:	f5b5 3f61 	cmp.w	r5, #230400	; 0x38400
 800204e:	d005      	beq.n	800205c <lcd_init+0x54>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 8002050:	4629      	mov	r1, r5
 8002052:	482c      	ldr	r0, [pc, #176]	; (8002104 <lcd_init+0xfc>)
 8002054:	f023 f9ae 	bl	80253b4 <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 8002058:	b00d      	add	sp, #52	; 0x34
 800205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	txdmadone = 0;	// TX is NOT free
 800205c:	2300      	movs	r3, #0
 800205e:	4c2a      	ldr	r4, [pc, #168]	; (8002108 <lcd_init+0x100>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8002060:	4639      	mov	r1, r7
 8002062:	2207      	movs	r2, #7
 8002064:	4829      	ldr	r0, [pc, #164]	; (800210c <lcd_init+0x104>)
	txdmadone = 0;	// TX is NOT free
 8002066:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8002068:	f00f ff6e 	bl	8011f48 <HAL_UART_Transmit_DMA>
 800206c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8002070:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002074:	b14b      	cbz	r3, 800208a <lcd_init+0x82>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002076:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800207a:	4825      	ldr	r0, [pc, #148]	; (8002110 <lcd_init+0x108>)
 800207c:	f023 f99a 	bl	80253b4 <iprintf>
	while (!(txdmadone)) {
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	b92b      	cbnz	r3, 8002090 <lcd_init+0x88>
		osDelay(1);		// wait for comms to complete
 8002084:	2001      	movs	r0, #1
 8002086:	f013 f9fb 	bl	8015480 <osDelay>
	while (!(txdmadone)) {
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f9      	beq.n	8002084 <lcd_init+0x7c>
	txdmadone = 0;	// TX is NOT free
 8002090:	2300      	movs	r3, #0
	osDelay(800);
 8002092:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 8002096:	6023      	str	r3, [r4, #0]
	osDelay(800);
 8002098:	f013 f9f2 	bl	8015480 <osDelay>
	if (baud == 9600)
 800209c:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 80020a0:	d017      	beq.n	80020d2 <lcd_init+0xca>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 80020a2:	220e      	movs	r2, #14
 80020a4:	a908      	add	r1, sp, #32
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <lcd_init+0x104>)
 80020a8:	f00f ff4e 	bl	8011f48 <HAL_UART_Transmit_DMA>
 80020ac:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80020b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020b4:	b11b      	cbz	r3, 80020be <lcd_init+0xb6>
 80020b6:	e017      	b.n	80020e8 <lcd_init+0xe0>
		osDelay(1);		// wait for comms to complete
 80020b8:	2001      	movs	r0, #1
 80020ba:	f013 f9e1 	bl	8015480 <osDelay>
	while (!(txdmadone)) {
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f9      	beq.n	80020b8 <lcd_init+0xb0>
	txdmadone = 0;	// TX is NOT free
 80020c4:	2300      	movs	r3, #0
	osDelay(120);
 80020c6:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 80020c8:	6023      	str	r3, [r4, #0]
	osDelay(120);
 80020ca:	f013 f9d9 	bl	8015480 <osDelay>
}
 80020ce:	b00d      	add	sp, #52	; 0x34
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 80020d2:	220c      	movs	r2, #12
 80020d4:	a904      	add	r1, sp, #16
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <lcd_init+0x104>)
 80020d8:	f00f ff36 	bl	8011f48 <HAL_UART_Transmit_DMA>
 80020dc:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80020e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ea      	beq.n	80020be <lcd_init+0xb6>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80020e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <lcd_init+0x108>)
 80020ee:	f023 f961 	bl	80253b4 <iprintf>
 80020f2:	e7e4      	b.n	80020be <lcd_init+0xb6>
 80020f4:	0802a758 	.word	0x0802a758
 80020f8:	0802a760 	.word	0x0802a760
 80020fc:	0802a770 	.word	0x0802a770
 8002100:	0802a6e0 	.word	0x0802a6e0
 8002104:	0802a6f4 	.word	0x0802a6f4
 8002108:	20002084 	.word	0x20002084
 800210c:	20002b0c 	.word	0x20002b0c
 8002110:	0802a728 	.word	0x0802a728

08002114 <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 8002114:	b530      	push	{r4, r5, lr}
 8002116:	b083      	sub	sp, #12
 8002118:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 800211a:	f7ff fef5 	bl	8001f08 <wait_armtx>
 800211e:	4605      	mov	r5, r0
 8002120:	3001      	adds	r0, #1
 8002122:	d01d      	beq.n	8002160 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	4813      	ldr	r0, [pc, #76]	; (8002174 <lcd_puts+0x60>)
 8002128:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800212a:	9b01      	ldr	r3, [sp, #4]
 800212c:	5ce3      	ldrb	r3, [r4, r3]
 800212e:	b153      	cbz	r3, 8002146 <lcd_puts+0x32>
		buffer[i] = str[i];
 8002130:	9901      	ldr	r1, [sp, #4]
 8002132:	9a01      	ldr	r2, [sp, #4]
		i++;
 8002134:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 8002136:	5c61      	ldrb	r1, [r4, r1]
		i++;
 8002138:	3301      	adds	r3, #1
		buffer[i] = str[i];
 800213a:	5481      	strb	r1, [r0, r2]
		i++;
 800213c:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800213e:	9b01      	ldr	r3, [sp, #4]
 8002140:	5ce3      	ldrb	r3, [r4, r3]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f4      	bne.n	8002130 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 8002146:	9901      	ldr	r1, [sp, #4]
 8002148:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 800214a:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <lcd_puts+0x64>)
	buffer[i] = '\0';
 800214e:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8002150:	b292      	uxth	r2, r2
 8002152:	4908      	ldr	r1, [pc, #32]	; (8002174 <lcd_puts+0x60>)
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 8002156:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8002158:	f00f fef6 	bl	8011f48 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800215c:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 800215e:	b910      	cbnz	r0, 8002166 <lcd_puts+0x52>
	}
	return (stat);
}
 8002160:	4628      	mov	r0, r5
 8002162:	b003      	add	sp, #12
 8002164:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002166:	4629      	mov	r1, r5
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <lcd_puts+0x6c>)
 800216a:	f023 f923 	bl	80253b4 <iprintf>
}
 800216e:	4628      	mov	r0, r5
 8002170:	b003      	add	sp, #12
 8002172:	bd30      	pop	{r4, r5, pc}
 8002174:	200018ec 	.word	0x200018ec
 8002178:	20002084 	.word	0x20002084
 800217c:	20002b0c 	.word	0x20002b0c
 8002180:	0802a780 	.word	0x0802a780

08002184 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 8002184:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 8002186:	2300      	movs	r3, #0
int lcd_rxdma() {
 8002188:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <lcd_rxdma+0x64>)
	volatile int count = 0;
 800218c:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 800218e:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8002190:	6953      	ldr	r3, [r2, #20]
 8002192:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002196:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 8002198:	9a01      	ldr	r2, [sp, #4]
 800219a:	2a80      	cmp	r2, #128	; 0x80
 800219c:	d016      	beq.n	80021cc <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800219e:	4d13      	ldr	r5, [pc, #76]	; (80021ec <lcd_rxdma+0x68>)
 80021a0:	9a01      	ldr	r2, [sp, #4]
 80021a2:	682b      	ldr	r3, [r5, #0]
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00e      	beq.n	80021c6 <lcd_rxdma+0x42>
 80021a8:	4c11      	ldr	r4, [pc, #68]	; (80021f0 <lcd_rxdma+0x6c>)
 80021aa:	4812      	ldr	r0, [pc, #72]	; (80021f4 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 80021ac:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 80021ae:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 80021b0:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 80021b2:	3301      	adds	r3, #1
		count++;
 80021b4:	3201      	adds	r2, #1
		return (0);
 80021b6:	2b80      	cmp	r3, #128	; 0x80
		count++;
 80021b8:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80021ba:	9a01      	ldr	r2, [sp, #4]
		return (0);
 80021bc:	bfa8      	it	ge
 80021be:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1f3      	bne.n	80021ac <lcd_rxdma+0x28>
 80021c4:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 80021c6:	9800      	ldr	r0, [sp, #0]
}
 80021c8:	b003      	add	sp, #12
 80021ca:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 80021cc:	4909      	ldr	r1, [pc, #36]	; (80021f4 <lcd_rxdma+0x70>)
 80021ce:	480a      	ldr	r0, [pc, #40]	; (80021f8 <lcd_rxdma+0x74>)
 80021d0:	f011 f8fa 	bl	80133c8 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 80021d4:	b910      	cbnz	r0, 80021dc <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 80021d6:	2300      	movs	r3, #0
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	e7e0      	b.n	800219e <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80021dc:	4601      	mov	r1, r0
 80021de:	4807      	ldr	r0, [pc, #28]	; (80021fc <lcd_rxdma+0x78>)
 80021e0:	f023 f8e8 	bl	80253b4 <iprintf>
 80021e4:	e7f7      	b.n	80021d6 <lcd_rxdma+0x52>
 80021e6:	bf00      	nop
 80021e8:	40026000 	.word	0x40026000
 80021ec:	20001a8c 	.word	0x20001a8c
 80021f0:	20001a0c 	.word	0x20001a0c
 80021f4:	2000194c 	.word	0x2000194c
 80021f8:	20002b0c 	.word	0x20002b0c
 80021fc:	0802a7b0 	.word	0x0802a7b0

08002200 <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 8002200:	b500      	push	{lr}
 8002202:	b099      	sub	sp, #100	; 0x64
 8002204:	4601      	mov	r1, r0
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 8002206:	4668      	mov	r0, sp
 8002208:	f023 fb4f 	bl	80258aa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 800220c:	4907      	ldr	r1, [pc, #28]	; (800222c <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <writelcdcmd+0x30>)
	strcpy(pkt, str);
 8002210:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002212:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002214:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8002216:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8002218:	b92b      	cbnz	r3, 8002226 <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 800221a:	4668      	mov	r0, sp
 800221c:	f7ff ff7a 	bl	8002114 <lcd_puts>
	else
		return (-1);
}
 8002220:	b019      	add	sp, #100	; 0x64
 8002222:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 8002226:	f04f 30ff 	mov.w	r0, #4294967295
 800222a:	e7f9      	b.n	8002220 <writelcdcmd+0x20>
 800222c:	0802a75c 	.word	0x0802a75c
 8002230:	20001a08 	.word	0x20001a08

08002234 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8002234:	b510      	push	{r4, lr}
 8002236:	b0b2      	sub	sp, #200	; 0xc8
	int i;
	char str[96];
	volatile int result = 0;
 8002238:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 800223e:	a802      	add	r0, sp, #8
 8002240:	490c      	ldr	r1, [pc, #48]	; (8002274 <setlcdtext+0x40>)
	volatile int result = 0;
 8002242:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002244:	f023 faa0 	bl	8025788 <siprintf>
	strcpy(pkt, str);
 8002248:	a902      	add	r1, sp, #8
 800224a:	a81a      	add	r0, sp, #104	; 0x68
 800224c:	f023 fb2d 	bl	80258aa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8002250:	4909      	ldr	r1, [pc, #36]	; (8002278 <setlcdtext+0x44>)
	if (!(lcd_txblocked))
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <setlcdtext+0x48>)
	strcpy(pkt, str);
 8002254:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002256:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002258:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800225a:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800225c:	b933      	cbnz	r3, 800226c <setlcdtext+0x38>
		return (lcd_puts(pkt));
 800225e:	a81a      	add	r0, sp, #104	; 0x68
 8002260:	f7ff ff58 	bl	8002114 <lcd_puts>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8002264:	9001      	str	r0, [sp, #4]
	return (result);
 8002266:	9801      	ldr	r0, [sp, #4]
}
 8002268:	b032      	add	sp, #200	; 0xc8
 800226a:	bd10      	pop	{r4, pc}
		return (-1);
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	e7f8      	b.n	8002264 <setlcdtext+0x30>
 8002272:	bf00      	nop
 8002274:	0802a7e0 	.word	0x0802a7e0
 8002278:	0802a75c 	.word	0x0802a75c
 800227c:	20001a08 	.word	0x20001a08

08002280 <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 8002280:	b500      	push	{lr}
 8002282:	b0a1      	sub	sp, #132	; 0x84
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 8002288:	4911      	ldr	r1, [pc, #68]	; (80022d0 <setlcdbin+0x50>)
 800228a:	4668      	mov	r0, sp
 800228c:	f023 fa7c 	bl	8025788 <siprintf>
	strcpy(pkt, str);
 8002290:	4669      	mov	r1, sp
 8002292:	a808      	add	r0, sp, #32
 8002294:	f023 fb09 	bl	80258aa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8002298:	490e      	ldr	r1, [pc, #56]	; (80022d4 <setlcdbin+0x54>)
	if (!(lcd_txblocked))
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <setlcdbin+0x58>)
	strcpy(pkt, str);
 800229c:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800229e:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80022a0:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80022a2:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80022a4:	b98b      	cbnz	r3, 80022ca <setlcdbin+0x4a>
		return (lcd_puts(pkt));
 80022a6:	a808      	add	r0, sp, #32
 80022a8:	f7ff ff34 	bl	8002114 <lcd_puts>
	result = writelcdcmd(buffer);
 80022ac:	9008      	str	r0, [sp, #32]
	if (result == -1) {		// wait for response
 80022ae:	9b08      	ldr	r3, [sp, #32]
 80022b0:	3301      	adds	r3, #1
 80022b2:	d003      	beq.n	80022bc <setlcdbin+0x3c>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 80022b4:	9808      	ldr	r0, [sp, #32]
}
 80022b6:	b021      	add	sp, #132	; 0x84
 80022b8:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80022bc:	4807      	ldr	r0, [pc, #28]	; (80022dc <setlcdbin+0x5c>)
 80022be:	f023 f879 	bl	80253b4 <iprintf>
	return (result);
 80022c2:	9808      	ldr	r0, [sp, #32]
}
 80022c4:	b021      	add	sp, #132	; 0x84
 80022c6:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 80022ca:	f04f 30ff 	mov.w	r0, #4294967295
 80022ce:	e7ed      	b.n	80022ac <setlcdbin+0x2c>
 80022d0:	0802a7e8 	.word	0x0802a7e8
 80022d4:	0802a75c 	.word	0x0802a75c
 80022d8:	20001a08 	.word	0x20001a08
 80022dc:	0802a7f0 	.word	0x0802a7f0

080022e0 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80022e0:	b570      	push	{r4, r5, r6, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 80022e2:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <isnexpkt+0xb4>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80022e4:	b082      	sub	sp, #8
	if (lastidx != lcdrxoutidx) {		// something there
 80022e6:	4c2c      	ldr	r4, [pc, #176]	; (8002398 <isnexpkt+0xb8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d04f      	beq.n	8002390 <isnexpkt+0xb0>
	if (++index >= limit)
 80022f0:	1c53      	adds	r3, r2, #1
		rxtimeout = 100;
 80022f2:	4d2a      	ldr	r5, [pc, #168]	; (800239c <isnexpkt+0xbc>)
		return (0);
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	bfa8      	it	ge
 80022f8:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80022fa:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 80022fc:	2364      	movs	r3, #100	; 0x64
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 80022fe:	4c28      	ldr	r4, [pc, #160]	; (80023a0 <isnexpkt+0xc0>)
		rxtimeout = 100;
 8002300:	602b      	str	r3, [r5, #0]
		ch = lcdrxbuffer[lastidx];
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <isnexpkt+0xc4>)
 8002304:	5c9b      	ldrb	r3, [r3, r2]
		ch = rawchar & 0xff;
 8002306:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 800230a:	7823      	ldrb	r3, [r4, #0]
 800230c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002310:	54c2      	strb	r2, [r0, r3]
 8002312:	3301      	adds	r3, #1
		if (ch == 0xff) {
 8002314:	f89d 2007 	ldrb.w	r2, [sp, #7]
		buffer[i++] = ch;
 8002318:	b2db      	uxtb	r3, r3
		if (ch == 0xff) {
 800231a:	2aff      	cmp	r2, #255	; 0xff
		buffer[i++] = ch;
 800231c:	7023      	strb	r3, [r4, #0]
		if (ch == 0xff) {
 800231e:	d021      	beq.n	8002364 <isnexpkt+0x84>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8002320:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <isnexpkt+0xc8>)
 8002326:	7016      	strb	r6, [r2, #0]
			termcnt = 0;
 8002328:	2200      	movs	r2, #0
 800232a:	4e20      	ldr	r6, [pc, #128]	; (80023ac <isnexpkt+0xcc>)
 800232c:	7032      	strb	r2, [r6, #0]
		}

		if (i == size) { // overrun
 800232e:	428b      	cmp	r3, r1
 8002330:	d027      	beq.n	8002382 <isnexpkt+0xa2>
			i = 0;
			termcnt = 0;
		}
	}
	if (rxtimeout > 0)
 8002332:	682b      	ldr	r3, [r5, #0]
 8002334:	b133      	cbz	r3, 8002344 <isnexpkt+0x64>
		rxtimeout--;
 8002336:	3b01      	subs	r3, #1
 8002338:	602b      	str	r3, [r5, #0]
	if (rxtimeout == 0) {
 800233a:	b11b      	cbz	r3, 8002344 <isnexpkt+0x64>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (-2);  // no char available
 800233c:	f06f 0001 	mvn.w	r0, #1
}
 8002340:	b002      	add	sp, #8
 8002342:	bd70      	pop	{r4, r5, r6, pc}
		termcnt = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	4a19      	ldr	r2, [pc, #100]	; (80023ac <isnexpkt+0xcc>)
		for (i = 0; i < size; buffer[i++] = 0)
 8002348:	4c15      	ldr	r4, [pc, #84]	; (80023a0 <isnexpkt+0xc0>)
		termcnt = 0;
 800234a:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 800234c:	7023      	strb	r3, [r4, #0]
 800234e:	b119      	cbz	r1, 8002358 <isnexpkt+0x78>
 8002350:	460a      	mov	r2, r1
 8002352:	4619      	mov	r1, r3
 8002354:	f022 f890 	bl	8024478 <memset>
		i = 0;
 8002358:	2300      	movs	r3, #0
		return (-1);
 800235a:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 800235e:	7023      	strb	r3, [r4, #0]
}
 8002360:	b002      	add	sp, #8
 8002362:	bd70      	pop	{r4, r5, r6, pc}
			termcnt++;
 8002364:	4e11      	ldr	r6, [pc, #68]	; (80023ac <isnexpkt+0xcc>)
 8002366:	7832      	ldrb	r2, [r6, #0]
 8002368:	3201      	adds	r2, #1
 800236a:	b2d2      	uxtb	r2, r2
			if (termcnt == 3) {
 800236c:	2a03      	cmp	r2, #3
			termcnt++;
 800236e:	7032      	strb	r2, [r6, #0]
			if (termcnt == 3) {
 8002370:	d1dd      	bne.n	800232e <isnexpkt+0x4e>
				printf(" # ");		// found terminator
 8002372:	480f      	ldr	r0, [pc, #60]	; (80023b0 <isnexpkt+0xd0>)
 8002374:	f023 f81e 	bl	80253b4 <iprintf>
				i = 0;
 8002378:	2300      	movs	r3, #0
				index = i;
 800237a:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 800237c:	7033      	strb	r3, [r6, #0]
				i = 0;
 800237e:	7023      	strb	r3, [r4, #0]
				return (index);
 8002380:	e7de      	b.n	8002340 <isnexpkt+0x60>
			i = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 8002386:	7033      	strb	r3, [r6, #0]
	if (rxtimeout > 0)
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1d3      	bne.n	8002336 <isnexpkt+0x56>
 800238e:	e7d9      	b.n	8002344 <isnexpkt+0x64>
 8002390:	4d02      	ldr	r5, [pc, #8]	; (800239c <isnexpkt+0xbc>)
 8002392:	e7ce      	b.n	8002332 <isnexpkt+0x52>
 8002394:	20001a8c 	.word	0x20001a8c
 8002398:	200019f8 	.word	0x200019f8
 800239c:	20001e6c 	.word	0x20001e6c
 80023a0:	200019f0 	.word	0x200019f0
 80023a4:	20001a0c 	.word	0x20001a0c
 80023a8:	20001e68 	.word	0x20001e68
 80023ac:	20001e70 	.word	0x20001e70
 80023b0:	0802a80c 	.word	0x0802a80c

080023b4 <lcd_time>:

// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80023b4:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <lcd_time+0x7c>)
 80023b6:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80023ba:	481e      	ldr	r0, [pc, #120]	; (8002434 <lcd_time+0x80>)
 80023bc:	e9d2 3200 	ldrd	r3, r2, [r2]
void lcd_time() {
 80023c0:	b510      	push	{r4, lr}
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80023c2:	185b      	adds	r3, r3, r1
void lcd_time() {
 80023c4:	b084      	sub	sp, #16
	timeinfo = *localtime(&localepochtime);
 80023c6:	4c1c      	ldr	r4, [pc, #112]	; (8002438 <lcd_time+0x84>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80023c8:	f142 0200 	adc.w	r2, r2, #0
 80023cc:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 80023d0:	f021 fef2 	bl	80241b8 <localtime>
 80023d4:	4684      	mov	ip, r0
 80023d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80023da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80023e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e2:	4623      	mov	r3, r4
 80023e4:	f8dc 4000 	ldr.w	r4, [ip]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <lcd_time+0x88>)
 80023ea:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 80023ec:	f843 4920 	str.w	r4, [r3], #-32
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80023f0:	4813      	ldr	r0, [pc, #76]	; (8002440 <lcd_time+0x8c>)
 80023f2:	f023 ffb1 	bl	8026358 <strftime>
	setlcdtext("t0.txt", buffer);
 80023f6:	4912      	ldr	r1, [pc, #72]	; (8002440 <lcd_time+0x8c>)
 80023f8:	4812      	ldr	r0, [pc, #72]	; (8002444 <lcd_time+0x90>)
 80023fa:	f7ff ff1b 	bl	8002234 <setlcdtext>

	if (gpslocked) {
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <lcd_time+0x94>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b12b      	cbz	r3, 8002410 <lcd_time+0x5c>
		writelcdcmd("vis t3,0");	// hide warning
 8002404:	4811      	ldr	r0, [pc, #68]	; (800244c <lcd_time+0x98>)
	} else {
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 8002406:	b004      	add	sp, #16
 8002408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		writelcdcmd("vis t3,0");	// hide warning
 800240c:	f7ff bef8 	b.w	8002200 <writelcdcmd>
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <lcd_time+0x9c>)
 8002412:	4668      	mov	r0, sp
 8002414:	490f      	ldr	r1, [pc, #60]	; (8002454 <lcd_time+0xa0>)
 8002416:	7eda      	ldrb	r2, [r3, #27]
 8002418:	f023 f9b6 	bl	8025788 <siprintf>
		setlcdtext("t3.txt", str);
 800241c:	4669      	mov	r1, sp
 800241e:	480e      	ldr	r0, [pc, #56]	; (8002458 <lcd_time+0xa4>)
 8002420:	f7ff ff08 	bl	8002234 <setlcdtext>
		writelcdcmd("vis t3,1");
 8002424:	480d      	ldr	r0, [pc, #52]	; (800245c <lcd_time+0xa8>)
 8002426:	f7ff feeb 	bl	8002200 <writelcdcmd>
}
 800242a:	b004      	add	sp, #16
 800242c:	bd10      	pop	{r4, pc}
 800242e:	bf00      	nop
 8002430:	20002df0 	.word	0x20002df0
 8002434:	20001a98 	.word	0x20001a98
 8002438:	20001e74 	.word	0x20001e74
 800243c:	0802a810 	.word	0x0802a810
 8002440:	200018c4 	.word	0x200018c4
 8002444:	0802a81c 	.word	0x0802a81c
 8002448:	200030e8 	.word	0x200030e8
 800244c:	0802a824 	.word	0x0802a824
 8002450:	20002f3c 	.word	0x20002f3c
 8002454:	0802a830 	.word	0x0802a830
 8002458:	0802a840 	.word	0x0802a840
 800245c:	0802a848 	.word	0x0802a848

08002460 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <lcd_date+0x50>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002462:	2128      	movs	r1, #40	; 0x28
	lastday = timeinfo.tm_yday;
 8002464:	4813      	ldr	r0, [pc, #76]	; (80024b4 <lcd_date+0x54>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002466:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <lcd_date+0x58>)
void lcd_date() {
 8002468:	b510      	push	{r4, lr}
	lastday = timeinfo.tm_yday;
 800246a:	69dc      	ldr	r4, [r3, #28]
void lcd_date() {
 800246c:	b0b2      	sub	sp, #200	; 0xc8
	lastday = timeinfo.tm_yday;
 800246e:	6004      	str	r4, [r0, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002470:	4812      	ldr	r0, [pc, #72]	; (80024bc <lcd_date+0x5c>)
 8002472:	f023 ff71 	bl	8026358 <strftime>
	volatile int result = 0;
 8002476:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <lcd_date+0x5c>)
 800247a:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <lcd_date+0x60>)
 800247c:	4911      	ldr	r1, [pc, #68]	; (80024c4 <lcd_date+0x64>)
	volatile int result = 0;
 800247e:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002480:	a802      	add	r0, sp, #8
 8002482:	f023 f981 	bl	8025788 <siprintf>
	strcpy(pkt, str);
 8002486:	a902      	add	r1, sp, #8
 8002488:	a81a      	add	r0, sp, #104	; 0x68
 800248a:	f023 fa0e 	bl	80258aa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 800248e:	490e      	ldr	r1, [pc, #56]	; (80024c8 <lcd_date+0x68>)
	if (!(lcd_txblocked))
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <lcd_date+0x6c>)
	strcpy(pkt, str);
 8002492:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002494:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002496:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8002498:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800249a:	b933      	cbnz	r3, 80024aa <lcd_date+0x4a>
		return (lcd_puts(pkt));
 800249c:	a81a      	add	r0, sp, #104	; 0x68
 800249e:	f7ff fe39 	bl	8002114 <lcd_puts>
	result = writelcdcmd(str);
 80024a2:	9001      	str	r0, [sp, #4]
	return (result);
 80024a4:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", buffer);
}
 80024a6:	b032      	add	sp, #200	; 0xc8
 80024a8:	bd10      	pop	{r4, pc}
		return (-1);
 80024aa:	f04f 30ff 	mov.w	r0, #4294967295
 80024ae:	e7f8      	b.n	80024a2 <lcd_date+0x42>
 80024b0:	20001e74 	.word	0x20001e74
 80024b4:	200019f4 	.word	0x200019f4
 80024b8:	0802a854 	.word	0x0802a854
 80024bc:	200018c4 	.word	0x200018c4
 80024c0:	0802a864 	.word	0x0802a864
 80024c4:	0802a7e0 	.word	0x0802a7e0
 80024c8:	0802a75c 	.word	0x0802a75c
 80024cc:	20001a08 	.word	0x20001a08

080024d0 <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 80024d0:	b530      	push	{r4, r5, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 80024d2:	4c62      	ldr	r4, [pc, #392]	; (800265c <lcd_showvars+0x18c>)
void lcd_showvars() {
 80024d4:	b09f      	sub	sp, #124	; 0x7c
	switch (toggle) {
 80024d6:	8823      	ldrh	r3, [r4, #0]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d81f      	bhi.n	800251c <lcd_showvars+0x4c>
 80024dc:	e8df f003 	tbb	[pc, r3]
 80024e0:	02203760 	.word	0x02203760
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <lcd_showvars+0x190>)
 80024e6:	495f      	ldr	r1, [pc, #380]	; (8002664 <lcd_showvars+0x194>)
 80024e8:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 80024ec:	6808      	ldr	r0, [r1, #0]
 80024ee:	9204      	str	r2, [sp, #16]
 80024f0:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 80024f4:	9203      	str	r2, [sp, #12]
 80024f6:	f242 722d 	movw	r2, #10029	; 0x272d
 80024fa:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 80024fe:	2310      	movs	r3, #16
 8002500:	e9cd 2000 	strd	r2, r0, [sp]
 8002504:	9102      	str	r1, [sp, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	4957      	ldr	r1, [pc, #348]	; (8002668 <lcd_showvars+0x198>)
 800250a:	a806      	add	r0, sp, #24
 800250c:	f023 f93c 	bl	8025788 <siprintf>
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
 8002510:	a906      	add	r1, sp, #24
 8002512:	4856      	ldr	r0, [pc, #344]	; (800266c <lcd_showvars+0x19c>)
 8002514:	f7ff fe8e 	bl	8002234 <setlcdtext>
		toggle = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	8023      	strh	r3, [r4, #0]
		break;
	}
}
 800251c:	b01f      	add	sp, #124	; 0x7c
 800251e:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002520:	4d53      	ldr	r5, [pc, #332]	; (8002670 <lcd_showvars+0x1a0>)
 8002522:	a806      	add	r0, sp, #24
 8002524:	4953      	ldr	r1, [pc, #332]	; (8002674 <lcd_showvars+0x1a4>)
 8002526:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002528:	f023 f92e 	bl	8025788 <siprintf>
		setlcdtext("t4.txt", str);
 800252c:	a906      	add	r1, sp, #24
 800252e:	4852      	ldr	r0, [pc, #328]	; (8002678 <lcd_showvars+0x1a8>)
 8002530:	f7ff fe80 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 8002534:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002536:	494f      	ldr	r1, [pc, #316]	; (8002674 <lcd_showvars+0x1a4>)
 8002538:	a806      	add	r0, sp, #24
 800253a:	f023 f925 	bl	8025788 <siprintf>
		setlcdtext("t5.txt", str);
 800253e:	a906      	add	r1, sp, #24
 8002540:	484e      	ldr	r0, [pc, #312]	; (800267c <lcd_showvars+0x1ac>)
 8002542:	f7ff fe77 	bl	8002234 <setlcdtext>
		toggle = 3;
 8002546:	2303      	movs	r3, #3
 8002548:	8023      	strh	r3, [r4, #0]
}
 800254a:	b01f      	add	sp, #124	; 0x7c
 800254c:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 800254e:	4d48      	ldr	r5, [pc, #288]	; (8002670 <lcd_showvars+0x1a0>)
 8002550:	a806      	add	r0, sp, #24
 8002552:	4948      	ldr	r1, [pc, #288]	; (8002674 <lcd_showvars+0x1a4>)
 8002554:	7eea      	ldrb	r2, [r5, #27]
 8002556:	f023 f917 	bl	8025788 <siprintf>
		setlcdtext("t0.txt", str);
 800255a:	a906      	add	r1, sp, #24
 800255c:	4848      	ldr	r0, [pc, #288]	; (8002680 <lcd_showvars+0x1b0>)
 800255e:	f7ff fe69 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8002562:	6a2a      	ldr	r2, [r5, #32]
 8002564:	4943      	ldr	r1, [pc, #268]	; (8002674 <lcd_showvars+0x1a4>)
 8002566:	a806      	add	r0, sp, #24
 8002568:	f023 f90e 	bl	8025788 <siprintf>
		setlcdtext("t1.txt", str);
 800256c:	a906      	add	r1, sp, #24
 800256e:	4845      	ldr	r0, [pc, #276]	; (8002684 <lcd_showvars+0x1b4>)
 8002570:	f7ff fe60 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 8002574:	69ea      	ldr	r2, [r5, #28]
 8002576:	493f      	ldr	r1, [pc, #252]	; (8002674 <lcd_showvars+0x1a4>)
 8002578:	a806      	add	r0, sp, #24
 800257a:	f023 f905 	bl	8025788 <siprintf>
		setlcdtext("t2.txt", str);
 800257e:	a906      	add	r1, sp, #24
 8002580:	4841      	ldr	r0, [pc, #260]	; (8002688 <lcd_showvars+0x1b8>)
 8002582:	f7ff fe57 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 8002586:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002588:	493a      	ldr	r1, [pc, #232]	; (8002674 <lcd_showvars+0x1a4>)
 800258a:	a806      	add	r0, sp, #24
 800258c:	f023 f8fc 	bl	8025788 <siprintf>
		setlcdtext("t3.txt", str);
 8002590:	a906      	add	r1, sp, #24
 8002592:	483e      	ldr	r0, [pc, #248]	; (800268c <lcd_showvars+0x1bc>)
 8002594:	f7ff fe4e 	bl	8002234 <setlcdtext>
		toggle = 2;
 8002598:	2302      	movs	r3, #2
 800259a:	8023      	strh	r3, [r4, #0]
}
 800259c:	b01f      	add	sp, #124	; 0x7c
 800259e:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80025a0:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <lcd_showvars+0x1c0>)
 80025a2:	a806      	add	r0, sp, #24
		sprintf(str, "%d", statuspkt.uid);
 80025a4:	4d32      	ldr	r5, [pc, #200]	; (8002670 <lcd_showvars+0x1a0>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	0e11      	lsrs	r1, r2, #24
 80025aa:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80025ae:	e9cd 3100 	strd	r3, r1, [sp]
 80025b2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80025b6:	4937      	ldr	r1, [pc, #220]	; (8002694 <lcd_showvars+0x1c4>)
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	f023 f8e5 	bl	8025788 <siprintf>
		setlcdtext("t11.txt", str);
 80025be:	a906      	add	r1, sp, #24
 80025c0:	4835      	ldr	r0, [pc, #212]	; (8002698 <lcd_showvars+0x1c8>)
 80025c2:	f7ff fe37 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.uid);
 80025c6:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 80025ca:	492a      	ldr	r1, [pc, #168]	; (8002674 <lcd_showvars+0x1a4>)
 80025cc:	a806      	add	r0, sp, #24
 80025ce:	b292      	uxth	r2, r2
 80025d0:	f023 f8da 	bl	8025788 <siprintf>
		setlcdtext("t10.txt", str);
 80025d4:	a906      	add	r1, sp, #24
 80025d6:	4831      	ldr	r0, [pc, #196]	; (800269c <lcd_showvars+0x1cc>)
 80025d8:	f7ff fe2c 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcpktssent);
 80025dc:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 80025e0:	4924      	ldr	r1, [pc, #144]	; (8002674 <lcd_showvars+0x1a4>)
 80025e2:	a806      	add	r0, sp, #24
 80025e4:	b292      	uxth	r2, r2
 80025e6:	f023 f8cf 	bl	8025788 <siprintf>
		setlcdtext("t9.txt", str);
 80025ea:	a906      	add	r1, sp, #24
 80025ec:	482c      	ldr	r0, [pc, #176]	; (80026a0 <lcd_showvars+0x1d0>)
 80025ee:	f7ff fe21 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <lcd_showvars+0x1d4>)
 80025f4:	491f      	ldr	r1, [pc, #124]	; (8002674 <lcd_showvars+0x1a4>)
 80025f6:	a806      	add	r0, sp, #24
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80025fe:	f023 f8c3 	bl	8025788 <siprintf>
		setlcdtext("t8.txt", str);
 8002602:	a906      	add	r1, sp, #24
 8002604:	4828      	ldr	r0, [pc, #160]	; (80026a8 <lcd_showvars+0x1d8>)
 8002606:	f7ff fe15 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <lcd_showvars+0x1dc>)
 800260c:	4919      	ldr	r1, [pc, #100]	; (8002674 <lcd_showvars+0x1a4>)
 800260e:	a806      	add	r0, sp, #24
 8002610:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002614:	2a00      	cmp	r2, #0
 8002616:	bfb8      	it	lt
 8002618:	4252      	neglt	r2, r2
 800261a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800261e:	f023 f8b3 	bl	8025788 <siprintf>
		setlcdtext("t7.txt", str);
 8002622:	a906      	add	r1, sp, #24
 8002624:	4822      	ldr	r0, [pc, #136]	; (80026b0 <lcd_showvars+0x1e0>)
 8002626:	f7ff fe05 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", pgagain);	// gain
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <lcd_showvars+0x1e4>)
 800262c:	4911      	ldr	r1, [pc, #68]	; (8002674 <lcd_showvars+0x1a4>)
 800262e:	a806      	add	r0, sp, #24
 8002630:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002634:	f023 f8a8 	bl	8025788 <siprintf>
		setlcdtext("t6.txt", str);
 8002638:	a906      	add	r1, sp, #24
 800263a:	481f      	ldr	r0, [pc, #124]	; (80026b8 <lcd_showvars+0x1e8>)
 800263c:	f7ff fdfa 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 8002640:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8002642:	490c      	ldr	r1, [pc, #48]	; (8002674 <lcd_showvars+0x1a4>)
 8002644:	a806      	add	r0, sp, #24
 8002646:	f023 f89f 	bl	8025788 <siprintf>
		setlcdtext("t24.txt", str);
 800264a:	a906      	add	r1, sp, #24
 800264c:	481b      	ldr	r0, [pc, #108]	; (80026bc <lcd_showvars+0x1ec>)
 800264e:	f7ff fdf1 	bl	8002234 <setlcdtext>
		toggle = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	8023      	strh	r3, [r4, #0]
}
 8002656:	b01f      	add	sp, #124	; 0x7c
 8002658:	bd30      	pop	{r4, r5, pc}
 800265a:	bf00      	nop
 800265c:	20001e98 	.word	0x20001e98
 8002660:	1ff0f000 	.word	0x1ff0f000
 8002664:	2000208c 	.word	0x2000208c
 8002668:	0802a8cc 	.word	0x0802a8cc
 800266c:	0802a8f8 	.word	0x0802a8f8
 8002670:	20002f3c 	.word	0x20002f3c
 8002674:	0802a930 	.word	0x0802a930
 8002678:	0802a8bc 	.word	0x0802a8bc
 800267c:	0802a8c4 	.word	0x0802a8c4
 8002680:	0802a81c 	.word	0x0802a81c
 8002684:	0802a864 	.word	0x0802a864
 8002688:	0802a8b4 	.word	0x0802a8b4
 800268c:	0802a840 	.word	0x0802a840
 8002690:	20002d3c 	.word	0x20002d3c
 8002694:	0802a86c 	.word	0x0802a86c
 8002698:	0802a87c 	.word	0x0802a87c
 800269c:	0802a884 	.word	0x0802a884
 80026a0:	0802a88c 	.word	0x0802a88c
 80026a4:	200006fc 	.word	0x200006fc
 80026a8:	0802a894 	.word	0x0802a894
 80026ac:	20000750 	.word	0x20000750
 80026b0:	0802a89c 	.word	0x0802a89c
 80026b4:	20003070 	.word	0x20003070
 80026b8:	0802a8a4 	.word	0x0802a8a4
 80026bc:	0802a8ac 	.word	0x0802a8ac

080026c0 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 80026c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 80026c4:	4931      	ldr	r1, [pc, #196]	; (800278c <lcd_trigcharts+0xcc>)
void lcd_trigcharts() {
 80026c6:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 80026c8:	4831      	ldr	r0, [pc, #196]	; (8002790 <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 80026ca:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 80026ce:	f7ff fdb1 	bl	8002234 <setlcdtext>
	setlcdtext("t18.txt", "Triggers");
 80026d2:	492e      	ldr	r1, [pc, #184]	; (800278c <lcd_trigcharts+0xcc>)
 80026d4:	482f      	ldr	r0, [pc, #188]	; (8002794 <lcd_trigcharts+0xd4>)
 80026d6:	f7ff fdad 	bl	8002234 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 80026da:	492f      	ldr	r1, [pc, #188]	; (8002798 <lcd_trigcharts+0xd8>)
 80026dc:	482f      	ldr	r0, [pc, #188]	; (800279c <lcd_trigcharts+0xdc>)
 80026de:	f7ff fda9 	bl	8002234 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 80026e2:	492d      	ldr	r1, [pc, #180]	; (8002798 <lcd_trigcharts+0xd8>)
 80026e4:	482e      	ldr	r0, [pc, #184]	; (80027a0 <lcd_trigcharts+0xe0>)
 80026e6:	f7ff fda5 	bl	8002234 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <lcd_trigcharts+0xe4>)
 80026ec:	492e      	ldr	r1, [pc, #184]	; (80027a8 <lcd_trigcharts+0xe8>)
 80026ee:	4668      	mov	r0, sp
 80026f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80026f2:	f023 f849 	bl	8025788 <siprintf>
	setlcdtext("t0.txt", str);
 80026f6:	4669      	mov	r1, sp
 80026f8:	482c      	ldr	r0, [pc, #176]	; (80027ac <lcd_trigcharts+0xec>)
 80026fa:	f7ff fd9b 	bl	8002234 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <lcd_trigcharts+0xf0>)
 8002700:	4929      	ldr	r1, [pc, #164]	; (80027a8 <lcd_trigcharts+0xe8>)
 8002702:	4668      	mov	r0, sp
 8002704:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002708:	4f2a      	ldr	r7, [pc, #168]	; (80027b4 <lcd_trigcharts+0xf4>)
 800270a:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 800270c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80027d0 <lcd_trigcharts+0x110>
 8002710:	4e29      	ldr	r6, [pc, #164]	; (80027b8 <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002712:	bfb8      	it	lt
 8002714:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002716:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80027d4 <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800271a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800271e:	f023 f833 	bl	8025788 <siprintf>
	setlcdtext("t2.txt", str);
 8002722:	4669      	mov	r1, sp
 8002724:	4825      	ldr	r0, [pc, #148]	; (80027bc <lcd_trigcharts+0xfc>)
 8002726:	f7ff fd85 	bl	8002234 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 800272a:	4825      	ldr	r0, [pc, #148]	; (80027c0 <lcd_trigcharts+0x100>)
 800272c:	f7ff fd68 	bl	8002200 <writelcdcmd>
	buffi = trigindex;
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <lcd_trigcharts+0x104>)
 8002732:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002734:	e01c      	b.n	8002770 <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002736:	f819 2004 	ldrb.w	r2, [r9, r4]
 800273a:	f023 f825 	bl	8025788 <siprintf>
		writelcdcmd(str);
 800273e:	4668      	mov	r0, sp
 8002740:	f7ff fd5e 	bl	8002200 <writelcdcmd>
		osDelay(15);
 8002744:	200f      	movs	r0, #15
 8002746:	f012 fe9b 	bl	8015480 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 800274a:	f818 2004 	ldrb.w	r2, [r8, r4]
 800274e:	491e      	ldr	r1, [pc, #120]	; (80027c8 <lcd_trigcharts+0x108>)
 8002750:	4668      	mov	r0, sp
 8002752:	f023 f819 	bl	8025788 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002756:	3401      	adds	r4, #1
		writelcdcmd(str);
 8002758:	4668      	mov	r0, sp
 800275a:	f7ff fd51 	bl	8002200 <writelcdcmd>
		osDelay(15);
 800275e:	200f      	movs	r0, #15
 8002760:	f012 fe8e 	bl	8015480 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002764:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002768:	bfc8      	it	gt
 800276a:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 800276c:	3d01      	subs	r5, #1
 800276e:	d007      	beq.n	8002780 <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 8002770:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002772:	4631      	mov	r1, r6
 8002774:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 8002776:	2b02      	cmp	r3, #2
 8002778:	d0dd      	beq.n	8002736 <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 800277a:	b009      	add	sp, #36	; 0x24
 800277c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002780:	4812      	ldr	r0, [pc, #72]	; (80027cc <lcd_trigcharts+0x10c>)
 8002782:	f7ff fd3d 	bl	8002200 <writelcdcmd>
}
 8002786:	b009      	add	sp, #36	; 0x24
 8002788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800278c:	0802a900 	.word	0x0802a900
 8002790:	0802a840 	.word	0x0802a840
 8002794:	0802a90c 	.word	0x0802a90c
 8002798:	0802a914 	.word	0x0802a914
 800279c:	0802a8bc 	.word	0x0802a8bc
 80027a0:	0802a864 	.word	0x0802a864
 80027a4:	20002f3c 	.word	0x20002f3c
 80027a8:	0802a930 	.word	0x0802a930
 80027ac:	0802a81c 	.word	0x0802a81c
 80027b0:	20000750 	.word	0x20000750
 80027b4:	20001c80 	.word	0x20001c80
 80027b8:	0802a928 	.word	0x0802a928
 80027bc:	0802a8b4 	.word	0x0802a8b4
 80027c0:	0802a91c 	.word	0x0802a91c
 80027c4:	20001e9c 	.word	0x20001e9c
 80027c8:	0802a934 	.word	0x0802a934
 80027cc:	0802a940 	.word	0x0802a940
 80027d0:	20001ea0 	.word	0x20001ea0
 80027d4:	20001aa0 	.word	0x20001aa0

080027d8 <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 80027d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 80027dc:	493a      	ldr	r1, [pc, #232]	; (80028c8 <lcd_trigplot+0xf0>)
void lcd_trigplot() {
 80027de:	b088      	sub	sp, #32
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 80027e0:	4d3a      	ldr	r5, [pc, #232]	; (80028cc <lcd_trigplot+0xf4>)
 80027e2:	680b      	ldr	r3, [r1, #0]
 80027e4:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 80027e6:	4e3a      	ldr	r6, [pc, #232]	; (80028d0 <lcd_trigplot+0xf8>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 80027e8:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 80027ea:	483a      	ldr	r0, [pc, #232]	; (80028d4 <lcd_trigplot+0xfc>)
	val = abs(meanwindiff) & 0xfff;
 80027ec:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 80027f0:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 80027f2:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 80027f6:	4c38      	ldr	r4, [pc, #224]	; (80028d8 <lcd_trigplot+0x100>)
 80027f8:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 80027fa:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 80027fc:	4f37      	ldr	r7, [pc, #220]	; (80028dc <lcd_trigplot+0x104>)
 80027fe:	bfa8      	it	ge
 8002800:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8002802:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8002804:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002914 <lcd_trigplot+0x13c>
	val = abs(meanwindiff) & 0xfff;
 8002808:	bfb8      	it	lt
 800280a:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 800280c:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8002810:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8002812:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8002816:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 8002818:	2b77      	cmp	r3, #119	; 0x77
 800281a:	bfa8      	it	ge
 800281c:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 800281e:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8002820:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002824:	d00c      	beq.n	8002840 <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8002826:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 8002828:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 800282c:	da03      	bge.n	8002836 <lcd_trigplot+0x5e>
	trigindex++;
 800282e:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8002830:	b008      	add	sp, #32
 8002832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		trigindex = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	6023      	str	r3, [r4, #0]
}
 800283a:	b008      	add	sp, #32
 800283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		setlcdtext("t3.txt", "Triggers");
 8002840:	4927      	ldr	r1, [pc, #156]	; (80028e0 <lcd_trigplot+0x108>)
 8002842:	4828      	ldr	r0, [pc, #160]	; (80028e4 <lcd_trigplot+0x10c>)
 8002844:	f7ff fcf6 	bl	8002234 <setlcdtext>
		setlcdtext("t18.txt", "Triggers");
 8002848:	4925      	ldr	r1, [pc, #148]	; (80028e0 <lcd_trigplot+0x108>)
 800284a:	4827      	ldr	r0, [pc, #156]	; (80028e8 <lcd_trigplot+0x110>)
 800284c:	f7ff fcf2 	bl	8002234 <setlcdtext>
		setlcdtext("t4.txt", "Noise");
 8002850:	4926      	ldr	r1, [pc, #152]	; (80028ec <lcd_trigplot+0x114>)
 8002852:	4827      	ldr	r0, [pc, #156]	; (80028f0 <lcd_trigplot+0x118>)
 8002854:	f7ff fcee 	bl	8002234 <setlcdtext>
		setlcdtext("t1.txt", "Noise");
 8002858:	4924      	ldr	r1, [pc, #144]	; (80028ec <lcd_trigplot+0x114>)
 800285a:	4826      	ldr	r0, [pc, #152]	; (80028f4 <lcd_trigplot+0x11c>)
 800285c:	f7ff fcea 	bl	8002234 <setlcdtext>
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	4925      	ldr	r1, [pc, #148]	; (80028f8 <lcd_trigplot+0x120>)
 8002864:	4668      	mov	r0, sp
 8002866:	5cfa      	ldrb	r2, [r7, r3]
 8002868:	f022 ff8e 	bl	8025788 <siprintf>
		writelcdcmd(str);
 800286c:	4668      	mov	r0, sp
 800286e:	f7ff fcc7 	bl	8002200 <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	4921      	ldr	r1, [pc, #132]	; (80028fc <lcd_trigplot+0x124>)
 8002876:	4668      	mov	r0, sp
 8002878:	f818 2003 	ldrb.w	r2, [r8, r3]
 800287c:	f022 ff84 	bl	8025788 <siprintf>
		writelcdcmd(str);
 8002880:	4668      	mov	r0, sp
 8002882:	f7ff fcbd 	bl	8002200 <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002886:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002888:	491d      	ldr	r1, [pc, #116]	; (8002900 <lcd_trigplot+0x128>)
 800288a:	4668      	mov	r0, sp
 800288c:	f022 ff7c 	bl	8025788 <siprintf>
		setlcdtext("t0.txt", str);
 8002890:	4669      	mov	r1, sp
 8002892:	481c      	ldr	r0, [pc, #112]	; (8002904 <lcd_trigplot+0x12c>)
 8002894:	f7ff fcce 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002898:	f9b6 2000 	ldrsh.w	r2, [r6]
 800289c:	4918      	ldr	r1, [pc, #96]	; (8002900 <lcd_trigplot+0x128>)
 800289e:	4668      	mov	r0, sp
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	bfb8      	it	lt
 80028a4:	4252      	neglt	r2, r2
 80028a6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80028aa:	f022 ff6d 	bl	8025788 <siprintf>
		setlcdtext("t2.txt", str);
 80028ae:	4669      	mov	r1, sp
 80028b0:	4815      	ldr	r0, [pc, #84]	; (8002908 <lcd_trigplot+0x130>)
 80028b2:	f7ff fcbf 	bl	8002234 <setlcdtext>
		writelcdcmd("vis t3,1");
 80028b6:	4815      	ldr	r0, [pc, #84]	; (800290c <lcd_trigplot+0x134>)
 80028b8:	f7ff fca2 	bl	8002200 <writelcdcmd>
		writelcdcmd("vis t4,1");
 80028bc:	4814      	ldr	r0, [pc, #80]	; (8002910 <lcd_trigplot+0x138>)
 80028be:	f7ff fc9f 	bl	8002200 <writelcdcmd>
	trigindex++;
 80028c2:	6821      	ldr	r1, [r4, #0]
 80028c4:	e7af      	b.n	8002826 <lcd_trigplot+0x4e>
 80028c6:	bf00      	nop
 80028c8:	200019fc 	.word	0x200019fc
 80028cc:	20002f3c 	.word	0x20002f3c
 80028d0:	20000750 	.word	0x20000750
 80028d4:	20001c80 	.word	0x20001c80
 80028d8:	20001e9c 	.word	0x20001e9c
 80028dc:	20001ea0 	.word	0x20001ea0
 80028e0:	0802a900 	.word	0x0802a900
 80028e4:	0802a840 	.word	0x0802a840
 80028e8:	0802a90c 	.word	0x0802a90c
 80028ec:	0802a914 	.word	0x0802a914
 80028f0:	0802a8bc 	.word	0x0802a8bc
 80028f4:	0802a864 	.word	0x0802a864
 80028f8:	0802a928 	.word	0x0802a928
 80028fc:	0802a934 	.word	0x0802a934
 8002900:	0802a930 	.word	0x0802a930
 8002904:	0802a81c 	.word	0x0802a81c
 8002908:	0802a8b4 	.word	0x0802a8b4
 800290c:	0802a848 	.word	0x0802a848
 8002910:	0802a950 	.word	0x0802a950
 8002914:	20001aa0 	.word	0x20001aa0

08002918 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8002918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 800291c:	4920      	ldr	r1, [pc, #128]	; (80029a0 <lcd_presscharts+0x88>)
void lcd_presscharts() {
 800291e:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 8002920:	4820      	ldr	r0, [pc, #128]	; (80029a4 <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8002922:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 8002926:	f7ff fc85 	bl	8002234 <setlcdtext>
	setlcdtext("t18.txt", "Pressure");
 800292a:	491d      	ldr	r1, [pc, #116]	; (80029a0 <lcd_presscharts+0x88>)
 800292c:	481e      	ldr	r0, [pc, #120]	; (80029a8 <lcd_presscharts+0x90>)
 800292e:	f7ff fc81 	bl	8002234 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <lcd_presscharts+0x94>)
 8002934:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <lcd_presscharts+0x98>)
 8002936:	4668      	mov	r0, sp
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	491d      	ldr	r1, [pc, #116]	; (80029b4 <lcd_presscharts+0x9c>)
 8002940:	f022 ff22 	bl	8025788 <siprintf>
	setlcdtext("t0.txt", str);
 8002944:	4669      	mov	r1, sp
 8002946:	481c      	ldr	r0, [pc, #112]	; (80029b8 <lcd_presscharts+0xa0>)
 8002948:	f7ff fc74 	bl	8002234 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 800294c:	481b      	ldr	r0, [pc, #108]	; (80029bc <lcd_presscharts+0xa4>)
 800294e:	f7ff fc57 	bl	8002200 <writelcdcmd>
	buffi = pressindex;
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <lcd_presscharts+0xa8>)
 8002954:	4f1b      	ldr	r7, [pc, #108]	; (80029c4 <lcd_presscharts+0xac>)
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002956:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80029d0 <lcd_presscharts+0xb8>
	buffi = pressindex;
 800295a:	681c      	ldr	r4, [r3, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 800295c:	4e1a      	ldr	r6, [pc, #104]	; (80029c8 <lcd_presscharts+0xb0>)
 800295e:	e010      	b.n	8002982 <lcd_presscharts+0x6a>
 8002960:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002964:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002966:	f022 ff0f 	bl	8025788 <siprintf>
		writelcdcmd(str);
 800296a:	4668      	mov	r0, sp
 800296c:	f7ff fc48 	bl	8002200 <writelcdcmd>
		osDelay(15);
 8002970:	200f      	movs	r0, #15
 8002972:	f012 fd85 	bl	8015480 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002976:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 800297a:	bfc8      	it	gt
 800297c:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 800297e:	3d01      	subs	r5, #1
 8002980:	d007      	beq.n	8002992 <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 8002982:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002984:	4631      	mov	r1, r6
 8002986:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 8002988:	2b03      	cmp	r3, #3
 800298a:	d0e9      	beq.n	8002960 <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 800298c:	b008      	add	sp, #32
 800298e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002992:	480e      	ldr	r0, [pc, #56]	; (80029cc <lcd_presscharts+0xb4>)
 8002994:	f7ff fc34 	bl	8002200 <writelcdcmd>
}
 8002998:	b008      	add	sp, #32
 800299a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800299e:	bf00      	nop
 80029a0:	0802a95c 	.word	0x0802a95c
 80029a4:	0802a840 	.word	0x0802a840
 80029a8:	0802a90c 	.word	0x0802a90c
 80029ac:	20003074 	.word	0x20003074
 80029b0:	20003078 	.word	0x20003078
 80029b4:	0802a968 	.word	0x0802a968
 80029b8:	0802a81c 	.word	0x0802a81c
 80029bc:	0802a91c 	.word	0x0802a91c
 80029c0:	20001c84 	.word	0x20001c84
 80029c4:	20001c80 	.word	0x20001c80
 80029c8:	0802a928 	.word	0x0802a928
 80029cc:	0802a940 	.word	0x0802a940
 80029d0:	20001c88 	.word	0x20001c88

080029d4 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 80029d4:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 80029d6:	4d2c      	ldr	r5, [pc, #176]	; (8002a88 <lcd_pressplot+0xb4>)
void lcd_pressplot() {
 80029d8:	b08c      	sub	sp, #48	; 0x30
	p = pressure;
 80029da:	4c2c      	ldr	r4, [pc, #176]	; (8002a8c <lcd_pressplot+0xb8>)

	p = pressure * 1000 + pf;
 80029dc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 80029e0:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 80029e2:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 80029e4:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 80029e6:	482a      	ldr	r0, [pc, #168]	; (8002a90 <lcd_pressplot+0xbc>)
	p = pressure;
 80029e8:	9101      	str	r1, [sp, #4]
	pf = pressfrac >> 2;		// frac base was in quarters
 80029ea:	9202      	str	r2, [sp, #8]
	p = pressure * 1000 + pf;
 80029ec:	9b02      	ldr	r3, [sp, #8]
 80029ee:	fb06 3301 	mla	r3, r6, r1, r3
 80029f2:	9301      	str	r3, [sp, #4]
	if (p < 93000)
 80029f4:	9b01      	ldr	r3, [sp, #4]
 80029f6:	4283      	cmp	r3, r0
 80029f8:	dc01      	bgt.n	80029fe <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <lcd_pressplot+0xc0>)
 80029fc:	9301      	str	r3, [sp, #4]
	if (p > 103000)
 80029fe:	9a01      	ldr	r2, [sp, #4]
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <lcd_pressplot+0xc4>)
 8002a02:	429a      	cmp	r2, r3
 8002a04:	dd00      	ble.n	8002a08 <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8002a06:	9b01      	ldr	r3, [sp, #4]

	p = p - 93000;
 8002a08:	9901      	ldr	r1, [sp, #4]
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <lcd_pressplot+0xc8>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <lcd_pressplot+0xcc>)
	p = p - 93000;
 8002a0e:	440b      	add	r3, r1
 8002a10:	9301      	str	r3, [sp, #4]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002a12:	9b01      	ldr	r3, [sp, #4]
 8002a14:	fb82 1203 	smull	r1, r2, r2, r3
 8002a18:	17db      	asrs	r3, r3, #31
 8002a1a:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8002a1e:	9303      	str	r3, [sp, #12]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8002a20:	9b03      	ldr	r3, [sp, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	da01      	bge.n	8002a2a <lcd_pressplot+0x56>
		val = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	9303      	str	r3, [sp, #12]
	if (val >= 240)
 8002a2a:	9b03      	ldr	r3, [sp, #12]
 8002a2c:	2bef      	cmp	r3, #239	; 0xef
 8002a2e:	dd01      	ble.n	8002a34 <lcd_pressplot+0x60>
		val = 239;		// max Y
 8002a30:	23ef      	movs	r3, #239	; 0xef
 8002a32:	9303      	str	r3, [sp, #12]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002a34:	491b      	ldr	r1, [pc, #108]	; (8002aa4 <lcd_pressplot+0xd0>)
	pressvec[pressindex] = val;
 8002a36:	9a03      	ldr	r2, [sp, #12]
 8002a38:	4e1b      	ldr	r6, [pc, #108]	; (8002aa8 <lcd_pressplot+0xd4>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002a3a:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8002a3c:	6833      	ldr	r3, [r6, #0]
 8002a3e:	481b      	ldr	r0, [pc, #108]	; (8002aac <lcd_pressplot+0xd8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002a40:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8002a42:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002a44:	d007      	beq.n	8002a56 <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8002a46:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8002a48:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8002a4c:	bfa8      	it	ge
 8002a4e:	2300      	movge	r3, #0
 8002a50:	6033      	str	r3, [r6, #0]
}
 8002a52:	b00c      	add	sp, #48	; 0x30
 8002a54:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4915      	ldr	r1, [pc, #84]	; (8002ab0 <lcd_pressplot+0xdc>)
 8002a5a:	a804      	add	r0, sp, #16
 8002a5c:	f022 fe94 	bl	8025788 <siprintf>
		writelcdcmd(str);
 8002a60:	a804      	add	r0, sp, #16
 8002a62:	f7ff fbcd 	bl	8002200 <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002a66:	682b      	ldr	r3, [r5, #0]
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	a804      	add	r0, sp, #16
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	4911      	ldr	r1, [pc, #68]	; (8002ab4 <lcd_pressplot+0xe0>)
 8002a70:	f022 fe8a 	bl	8025788 <siprintf>
		setlcdtext("t0.txt", str);
 8002a74:	a904      	add	r1, sp, #16
 8002a76:	4810      	ldr	r0, [pc, #64]	; (8002ab8 <lcd_pressplot+0xe4>)
 8002a78:	f7ff fbdc 	bl	8002234 <setlcdtext>
		writelcdcmd("vis t3,1");
 8002a7c:	480f      	ldr	r0, [pc, #60]	; (8002abc <lcd_pressplot+0xe8>)
 8002a7e:	f7ff fbbf 	bl	8002200 <writelcdcmd>
	pressindex++;
 8002a82:	6833      	ldr	r3, [r6, #0]
 8002a84:	e7df      	b.n	8002a46 <lcd_pressplot+0x72>
 8002a86:	bf00      	nop
 8002a88:	20003074 	.word	0x20003074
 8002a8c:	20003078 	.word	0x20003078
 8002a90:	00016b47 	.word	0x00016b47
 8002a94:	00016b48 	.word	0x00016b48
 8002a98:	00019258 	.word	0x00019258
 8002a9c:	fffe94b8 	.word	0xfffe94b8
 8002aa0:	63e7063f 	.word	0x63e7063f
 8002aa4:	20001c80 	.word	0x20001c80
 8002aa8:	20001c84 	.word	0x20001c84
 8002aac:	20001c88 	.word	0x20001c88
 8002ab0:	0802a928 	.word	0x0802a928
 8002ab4:	0802a968 	.word	0x0802a968
 8002ab8:	0802a81c 	.word	0x0802a81c
 8002abc:	0802a848 	.word	0x0802a848

08002ac0 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8002ac0:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 8002ac2:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8002ac4:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8002ac6:	f012 fcdb 	bl	8015480 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <lcd_controls+0x48>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 8002ad2:	b00d      	add	sp, #52	; 0x34
 8002ad4:	f85d fb04 	ldr.w	pc, [sp], #4
		setlcdtext("t0.txt", "Sound");
 8002ad8:	490c      	ldr	r1, [pc, #48]	; (8002b0c <lcd_controls+0x4c>)
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <lcd_controls+0x50>)
 8002adc:	f7ff fbaa 	bl	8002234 <setlcdtext>
		setlcdtext("t1.txt", "LEDS");
 8002ae0:	490c      	ldr	r1, [pc, #48]	; (8002b14 <lcd_controls+0x54>)
 8002ae2:	480d      	ldr	r0, [pc, #52]	; (8002b18 <lcd_controls+0x58>)
 8002ae4:	f7ff fba6 	bl	8002234 <setlcdtext>
		setlcdtext("t2.txt", "LCD Brightness");
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <lcd_controls+0x5c>)
 8002aea:	480d      	ldr	r0, [pc, #52]	; (8002b20 <lcd_controls+0x60>)
 8002aec:	f7ff fba2 	bl	8002234 <setlcdtext>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8002af0:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <lcd_controls+0x64>)
 8002af2:	490d      	ldr	r1, [pc, #52]	; (8002b28 <lcd_controls+0x68>)
 8002af4:	4668      	mov	r0, sp
 8002af6:	f022 fe47 	bl	8025788 <siprintf>
		setlcdtext("t3.txt", str);
 8002afa:	4669      	mov	r1, sp
 8002afc:	480b      	ldr	r0, [pc, #44]	; (8002b2c <lcd_controls+0x6c>)
 8002afe:	f7ff fb99 	bl	8002234 <setlcdtext>
}
 8002b02:	b00d      	add	sp, #52	; 0x34
 8002b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b08:	20001c80 	.word	0x20001c80
 8002b0c:	0802a974 	.word	0x0802a974
 8002b10:	0802a81c 	.word	0x0802a81c
 8002b14:	0802a97c 	.word	0x0802a97c
 8002b18:	0802a864 	.word	0x0802a864
 8002b1c:	0802a984 	.word	0x0802a984
 8002b20:	0802a8b4 	.word	0x0802a8b4
 8002b24:	20003150 	.word	0x20003150
 8002b28:	0802a994 	.word	0x0802a994
 8002b2c:	0802a840 	.word	0x0802a840

08002b30 <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8002b30:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8002b32:	4c1b      	ldr	r4, [pc, #108]	; (8002ba0 <lcd_pagechange+0x70>)
 8002b34:	7823      	ldrb	r3, [r4, #0]
 8002b36:	4283      	cmp	r3, r0
 8002b38:	d016      	beq.n	8002b68 <lcd_pagechange+0x38>
	our_currentpage = newpage;
 8002b3a:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8002b3c:	2805      	cmp	r0, #5
 8002b3e:	d82a      	bhi.n	8002b96 <lcd_pagechange+0x66>
 8002b40:	e8df f000 	tbb	[pc, r0]
 8002b44:	241f1a03 	.word	0x241f1a03
 8002b48:	1215      	.short	0x1215
		lcd_time();
 8002b4a:	f7ff fc33 	bl	80023b4 <lcd_time>
	lastday = timeinfo.tm_yday;
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <lcd_pagechange+0x74>)
 8002b50:	4915      	ldr	r1, [pc, #84]	; (8002ba8 <lcd_pagechange+0x78>)
 8002b52:	69d8      	ldr	r0, [r3, #28]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <lcd_pagechange+0x7c>)
	lastday = timeinfo.tm_yday;
 8002b56:	6008      	str	r0, [r1, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002b58:	2128      	movs	r1, #40	; 0x28
 8002b5a:	4815      	ldr	r0, [pc, #84]	; (8002bb0 <lcd_pagechange+0x80>)
 8002b5c:	f023 fbfc 	bl	8026358 <strftime>
	setlcdtext("t1.txt", buffer);
 8002b60:	4913      	ldr	r1, [pc, #76]	; (8002bb0 <lcd_pagechange+0x80>)
 8002b62:	4814      	ldr	r0, [pc, #80]	; (8002bb4 <lcd_pagechange+0x84>)
 8002b64:	f7ff fb66 	bl	8002234 <setlcdtext>
	return (our_currentpage);
 8002b68:	7820      	ldrb	r0, [r4, #0]
 8002b6a:	b2c0      	uxtb	r0, r0
}
 8002b6c:	bd10      	pop	{r4, pc}
		lcd_controls();
 8002b6e:	f7ff ffa7 	bl	8002ac0 <lcd_controls>
	return (our_currentpage);
 8002b72:	7820      	ldrb	r0, [r4, #0]
 8002b74:	b2c0      	uxtb	r0, r0
}
 8002b76:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 8002b78:	f7ff fcaa 	bl	80024d0 <lcd_showvars>
	return (our_currentpage);
 8002b7c:	7820      	ldrb	r0, [r4, #0]
 8002b7e:	b2c0      	uxtb	r0, r0
}
 8002b80:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 8002b82:	f7ff fd9d 	bl	80026c0 <lcd_trigcharts>
	return (our_currentpage);
 8002b86:	7820      	ldrb	r0, [r4, #0]
 8002b88:	b2c0      	uxtb	r0, r0
}
 8002b8a:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8002b8c:	f7ff fec4 	bl	8002918 <lcd_presscharts>
	return (our_currentpage);
 8002b90:	7820      	ldrb	r0, [r4, #0]
 8002b92:	b2c0      	uxtb	r0, r0
}
 8002b94:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8002b96:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <lcd_pagechange+0x88>)
 8002b98:	f022 fca8 	bl	80254ec <puts>
		break;
 8002b9c:	e7e4      	b.n	8002b68 <lcd_pagechange+0x38>
 8002b9e:	bf00      	nop
 8002ba0:	20001c80 	.word	0x20001c80
 8002ba4:	20001e74 	.word	0x20001e74
 8002ba8:	200019f4 	.word	0x200019f4
 8002bac:	0802a854 	.word	0x0802a854
 8002bb0:	200018c4 	.word	0x200018c4
 8002bb4:	0802a864 	.word	0x0802a864
 8002bb8:	0802a9ac 	.word	0x0802a9ac

08002bbc <lcd_event_process>:
int lcd_event_process(void) {
 8002bbc:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8002bbe:	4c8f      	ldr	r4, [pc, #572]	; (8002dfc <lcd_event_process+0x240>)
int lcd_event_process(void) {
 8002bc0:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff fb8b 	bl	80022e0 <isnexpkt>
 8002bca:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8002bcc:	9b01      	ldr	r3, [sp, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	dd47      	ble.n	8002c62 <lcd_event_process+0xa6>
		lcdstatus = eventbuffer[0];
 8002bd2:	7821      	ldrb	r1, [r4, #0]
 8002bd4:	4b8a      	ldr	r3, [pc, #552]	; (8002e00 <lcd_event_process+0x244>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8002bd6:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8002bd8:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8002bda:	d925      	bls.n	8002c28 <lcd_event_process+0x6c>
			switch (eventbuffer[0]) {
 8002bdc:	2965      	cmp	r1, #101	; 0x65
 8002bde:	d067      	beq.n	8002cb0 <lcd_event_process+0xf4>
 8002be0:	2966      	cmp	r1, #102	; 0x66
 8002be2:	d046      	beq.n	8002c72 <lcd_event_process+0xb6>
 8002be4:	2924      	cmp	r1, #36	; 0x24
 8002be6:	d03f      	beq.n	8002c68 <lcd_event_process+0xac>
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8002be8:	4886      	ldr	r0, [pc, #536]	; (8002e04 <lcd_event_process+0x248>)
 8002bea:	f022 fbe3 	bl	80253b4 <iprintf>
				i = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002bf2:	9b00      	ldr	r3, [sp, #0]
 8002bf4:	5ce3      	ldrb	r3, [r4, r3]
 8002bf6:	2bff      	cmp	r3, #255	; 0xff
 8002bf8:	d00f      	beq.n	8002c1a <lcd_event_process+0x5e>
					printf(" 0x%02x", eventbuffer[i++]);
 8002bfa:	4d83      	ldr	r5, [pc, #524]	; (8002e08 <lcd_event_process+0x24c>)
 8002bfc:	e009      	b.n	8002c12 <lcd_event_process+0x56>
 8002bfe:	9b00      	ldr	r3, [sp, #0]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	5ce1      	ldrb	r1, [r4, r3]
 8002c04:	9200      	str	r2, [sp, #0]
 8002c06:	f022 fbd5 	bl	80253b4 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002c0a:	9b00      	ldr	r3, [sp, #0]
 8002c0c:	5ce3      	ldrb	r3, [r4, r3]
 8002c0e:	2bff      	cmp	r3, #255	; 0xff
 8002c10:	d003      	beq.n	8002c1a <lcd_event_process+0x5e>
 8002c12:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8002c14:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002c16:	2b1f      	cmp	r3, #31
 8002c18:	d9f1      	bls.n	8002bfe <lcd_event_process+0x42>
				printf("\n");
 8002c1a:	200a      	movs	r0, #10
 8002c1c:	f022 fbe2 	bl	80253e4 <putchar>
				return (-1);
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c24:	b003      	add	sp, #12
 8002c26:	bd30      	pop	{r4, r5, pc}
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8002c28:	2901      	cmp	r1, #1
 8002c2a:	d0fb      	beq.n	8002c24 <lcd_event_process+0x68>
				printf("Nextion reported: ");
 8002c2c:	4877      	ldr	r0, [pc, #476]	; (8002e0c <lcd_event_process+0x250>)
 8002c2e:	f022 fbc1 	bl	80253b4 <iprintf>
				switch (eventbuffer[0]) {
 8002c32:	7821      	ldrb	r1, [r4, #0]
 8002c34:	2924      	cmp	r1, #36	; 0x24
 8002c36:	d846      	bhi.n	8002cc6 <lcd_event_process+0x10a>
 8002c38:	e8df f001 	tbb	[pc, r1]
 8002c3c:	4582878c 	.word	0x4582878c
 8002c40:	45454545 	.word	0x45454545
 8002c44:	45454545 	.word	0x45454545
 8002c48:	45454545 	.word	0x45454545
 8002c4c:	457a4545 	.word	0x457a4545
 8002c50:	45454545 	.word	0x45454545
 8002c54:	45724545 	.word	0x45724545
 8002c58:	4566456c 	.word	0x4566456c
 8002c5c:	5a454560 	.word	0x5a454560
 8002c60:	54          	.byte	0x54
 8002c61:	00          	.byte	0x00
		return (result);		// 0 = nothing found, -1 = timeout
 8002c62:	9801      	ldr	r0, [sp, #4]
}
 8002c64:	b003      	add	sp, #12
 8002c66:	bd30      	pop	{r4, r5, pc}
				printf("Serial Buffer Overflow!\n");
 8002c68:	4869      	ldr	r0, [pc, #420]	; (8002e10 <lcd_event_process+0x254>)
 8002c6a:	f022 fc3f 	bl	80254ec <puts>
				return (1);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	e7d8      	b.n	8002c24 <lcd_event_process+0x68>
				setlcddim(lcdbright);
 8002c72:	4968      	ldr	r1, [pc, #416]	; (8002e14 <lcd_event_process+0x258>)
	dimtimer = DIMTIME;
 8002c74:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002c78:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <lcd_event_process+0x25c>)
				setlcddim(lcdbright);
 8002c7a:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 8002c7c:	4867      	ldr	r0, [pc, #412]	; (8002e1c <lcd_event_process+0x260>)
 8002c7e:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 8002c80:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8002c82:	bf28      	it	cs
 8002c84:	2163      	movcs	r1, #99	; 0x63
 8002c86:	f7ff fafb 	bl	8002280 <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8002c8a:	7860      	ldrb	r0, [r4, #1]
 8002c8c:	f7ff ff50 	bl	8002b30 <lcd_pagechange>
 8002c90:	2800      	cmp	r0, #0
 8002c92:	db04      	blt.n	8002c9e <lcd_event_process+0xe2>
 8002c94:	7860      	ldrb	r0, [r4, #1]
 8002c96:	f7ff ff4b 	bl	8002b30 <lcd_pagechange>
 8002c9a:	2805      	cmp	r0, #5
 8002c9c:	dd19      	ble.n	8002cd2 <lcd_event_process+0x116>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8002c9e:	7860      	ldrb	r0, [r4, #1]
 8002ca0:	f7ff ff46 	bl	8002b30 <lcd_pagechange>
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	485e      	ldr	r0, [pc, #376]	; (8002e20 <lcd_event_process+0x264>)
 8002ca8:	f022 fb84 	bl	80253b4 <iprintf>
			return (0);
 8002cac:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8002cae:	e7b9      	b.n	8002c24 <lcd_event_process+0x68>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 8002cb0:	78e3      	ldrb	r3, [r4, #3]
 8002cb2:	78a2      	ldrb	r2, [r4, #2]
 8002cb4:	7861      	ldrb	r1, [r4, #1]
 8002cb6:	485b      	ldr	r0, [pc, #364]	; (8002e24 <lcd_event_process+0x268>)
 8002cb8:	f022 fb7c 	bl	80253b4 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8002cbc:	7863      	ldrb	r3, [r4, #1]
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d04e      	beq.n	8002d60 <lcd_event_process+0x1a4>
			return (0);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	e7ae      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8002cc6:	4858      	ldr	r0, [pc, #352]	; (8002e28 <lcd_event_process+0x26c>)
 8002cc8:	f022 fb74 	bl	80253b4 <iprintf>
				return (-1);		// some kindof error
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002cd0:	e7a8      	b.n	8002c24 <lcd_event_process+0x68>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8002cd2:	7860      	ldrb	r0, [r4, #1]
 8002cd4:	f7ff ff2c 	bl	8002b30 <lcd_pagechange>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a54      	ldr	r2, [pc, #336]	; (8002e2c <lcd_event_process+0x270>)
			return (0);
 8002cdc:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	7013      	strb	r3, [r2, #0]
 8002ce2:	e79f      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Ser Buffer overflow\n");
 8002ce4:	4852      	ldr	r0, [pc, #328]	; (8002e30 <lcd_event_process+0x274>)
 8002ce6:	f022 fc01 	bl	80254ec <puts>
				return (-1);		// some kindof error
 8002cea:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002cee:	e799      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Variable name too long\n");
 8002cf0:	4850      	ldr	r0, [pc, #320]	; (8002e34 <lcd_event_process+0x278>)
 8002cf2:	f022 fbfb 	bl	80254ec <puts>
				return (-1);		// some kindof error
 8002cf6:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002cfa:	e793      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid escape char\n");
 8002cfc:	484e      	ldr	r0, [pc, #312]	; (8002e38 <lcd_event_process+0x27c>)
 8002cfe:	f022 fbf5 	bl	80254ec <puts>
				return (-1);		// some kindof error
 8002d02:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d06:	e78d      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid number of parameters\n");
 8002d08:	484c      	ldr	r0, [pc, #304]	; (8002e3c <lcd_event_process+0x280>)
 8002d0a:	f022 fbef 	bl	80254ec <puts>
				return (-1);		// some kindof error
 8002d0e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d12:	e787      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Attribute assignment failed\n");
 8002d14:	484a      	ldr	r0, [pc, #296]	; (8002e40 <lcd_event_process+0x284>)
 8002d16:	f022 fbe9 	bl	80254ec <puts>
				return (-1);		// some kindof error
 8002d1a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d1e:	e781      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 8002d20:	4848      	ldr	r0, [pc, #288]	; (8002e44 <lcd_event_process+0x288>)
 8002d22:	f022 fbe3 	bl	80254ec <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8002d26:	f000 f961 	bl	8002fec <getlcdpage>
				return (-1);		// some kindof error
 8002d2a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d2e:	e779      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid waveform ID\n");
 8002d30:	4845      	ldr	r0, [pc, #276]	; (8002e48 <lcd_event_process+0x28c>)
 8002d32:	f022 fbdb 	bl	80254ec <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8002d36:	f000 f959 	bl	8002fec <getlcdpage>
				return (-1);		// some kindof error
 8002d3a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d3e:	e771      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid Component ID\n");
 8002d40:	4842      	ldr	r0, [pc, #264]	; (8002e4c <lcd_event_process+0x290>)
 8002d42:	f022 fbd3 	bl	80254ec <puts>
					return (0);
 8002d46:	2000      	movs	r0, #0
 8002d48:	e76c      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Successful execution\n");
 8002d4a:	4841      	ldr	r0, [pc, #260]	; (8002e50 <lcd_event_process+0x294>)
 8002d4c:	f022 fbce 	bl	80254ec <puts>
					return (0);
 8002d50:	2000      	movs	r0, #0
 8002d52:	e767      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid command\n");
 8002d54:	483f      	ldr	r0, [pc, #252]	; (8002e54 <lcd_event_process+0x298>)
 8002d56:	f022 fbc9 	bl	80254ec <puts>
				return (-1);		// some kindof error
 8002d5a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d5e:	e761      	b.n	8002c24 <lcd_event_process+0x68>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8002d60:	78a3      	ldrb	r3, [r4, #2]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d012      	beq.n	8002d8c <lcd_event_process+0x1d0>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d039      	beq.n	8002dde <lcd_event_process+0x222>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d026      	beq.n	8002dbc <lcd_event_process+0x200>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d1a7      	bne.n	8002cc2 <lcd_event_process+0x106>
					if (eventbuffer[3] == 1) 		// sound on
 8002d72:	78e3      	ldrb	r3, [r4, #3]
 8002d74:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <lcd_event_process+0x29c>)
 8002d76:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 8002d7a:	4838      	ldr	r0, [pc, #224]	; (8002e5c <lcd_event_process+0x2a0>)
					if (eventbuffer[3] == 1) 		// sound on
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8002d84:	f022 fbb2 	bl	80254ec <puts>
			return (0);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	e74b      	b.n	8002c24 <lcd_event_process+0x68>
					lcdbright = eventbuffer[3];
 8002d8c:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <lcd_event_process+0x258>)
 8002d8e:	78e2      	ldrb	r2, [r4, #3]
 8002d90:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2a0d      	cmp	r2, #13
 8002d96:	dc01      	bgt.n	8002d9c <lcd_event_process+0x1e0>
						lcdbright = 14;		// prevent black
 8002d98:	220e      	movs	r2, #14
 8002d9a:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8002d9c:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 8002d9e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <lcd_event_process+0x25c>)
	setlcdbin("dim", level);
 8002da4:	2963      	cmp	r1, #99	; 0x63
 8002da6:	481d      	ldr	r0, [pc, #116]	; (8002e1c <lcd_event_process+0x260>)
	dimtimer = DIMTIME;
 8002da8:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8002daa:	bf28      	it	cs
 8002dac:	2163      	movcs	r1, #99	; 0x63
 8002dae:	f7ff fa67 	bl	8002280 <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8002db2:	7863      	ldrb	r3, [r4, #1]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d184      	bne.n	8002cc2 <lcd_event_process+0x106>
 8002db8:	78a3      	ldrb	r3, [r4, #2]
 8002dba:	e7d4      	b.n	8002d66 <lcd_event_process+0x1aa>
					if (eventbuffer[3] == 1) 		// sound on
 8002dbc:	78e3      	ldrb	r3, [r4, #3]
 8002dbe:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <lcd_event_process+0x2a4>)
 8002dc0:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8002dc4:	4827      	ldr	r0, [pc, #156]	; (8002e64 <lcd_event_process+0x2a8>)
					if (eventbuffer[3] == 1) 		// sound on
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8002dce:	f022 fb8d 	bl	80254ec <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8002dd2:	7863      	ldrb	r3, [r4, #1]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	f47f af74 	bne.w	8002cc2 <lcd_event_process+0x106>
 8002dda:	78a3      	ldrb	r3, [r4, #2]
 8002ddc:	e7c7      	b.n	8002d6e <lcd_event_process+0x1b2>
					printf("Reboot touch\n");
 8002dde:	4822      	ldr	r0, [pc, #136]	; (8002e68 <lcd_event_process+0x2ac>)
 8002de0:	f022 fb84 	bl	80254ec <puts>
					osDelay(100);
 8002de4:	2064      	movs	r0, #100	; 0x64
 8002de6:	f012 fb4b 	bl	8015480 <osDelay>
					rebootme();
 8002dea:	f000 fa93 	bl	8003314 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8002dee:	7863      	ldrb	r3, [r4, #1]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	f47f af66 	bne.w	8002cc2 <lcd_event_process+0x106>
 8002df6:	78a3      	ldrb	r3, [r4, #2]
 8002df8:	e7b7      	b.n	8002d6a <lcd_event_process+0x1ae>
 8002dfa:	bf00      	nop
 8002dfc:	200019cc 	.word	0x200019cc
 8002e00:	20001a90 	.word	0x20001a90
 8002e04:	0802ab70 	.word	0x0802ab70
 8002e08:	0802aba4 	.word	0x0802aba4
 8002e0c:	0802a9c0 	.word	0x0802a9c0
 8002e10:	0802aad0 	.word	0x0802aad0
 8002e14:	20000014 	.word	0x20000014
 8002e18:	2000000c 	.word	0x2000000c
 8002e1c:	0802a808 	.word	0x0802a808
 8002e20:	0802ab40 	.word	0x0802ab40
 8002e24:	0802aae8 	.word	0x0802aae8
 8002e28:	0802aab8 	.word	0x0802aab8
 8002e2c:	20001a00 	.word	0x20001a00
 8002e30:	0802aa10 	.word	0x0802aa10
 8002e34:	0802a9f8 	.word	0x0802a9f8
 8002e38:	0802aa44 	.word	0x0802aa44
 8002e3c:	0802aa24 	.word	0x0802aa24
 8002e40:	0802aa58 	.word	0x0802aa58
 8002e44:	0802a9e4 	.word	0x0802a9e4
 8002e48:	0802aa74 	.word	0x0802aa74
 8002e4c:	0802aaa0 	.word	0x0802aaa0
 8002e50:	0802aa88 	.word	0x0802aa88
 8002e54:	0802a9d4 	.word	0x0802a9d4
 8002e58:	20000278 	.word	0x20000278
 8002e5c:	0802ab34 	.word	0x0802ab34
 8002e60:	2000027e 	.word	0x2000027e
 8002e64:	0802ab28 	.word	0x0802ab28
 8002e68:	0802ab18 	.word	0x0802ab18

08002e6c <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8002e6c:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 8002e6e:	4d50      	ldr	r5, [pc, #320]	; (8002fb0 <processnex+0x144>)
void processnex() {		// process Nextion - called at regular intervals
 8002e70:	b0a2      	sub	sp, #136	; 0x88
	switch (lcduart_error) {
 8002e72:	682b      	ldr	r3, [r5, #0]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d06d      	beq.n	8002f54 <processnex+0xe8>
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d066      	beq.n	8002f4a <processnex+0xde>
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d04b      	beq.n	8002f18 <processnex+0xac>
 8002e80:	4c4c      	ldr	r4, [pc, #304]	; (8002fb4 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002e82:	2600      	movs	r6, #0
 8002e84:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d04e      	beq.n	8002f2a <processnex+0xbe>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d07f      	beq.n	8002f92 <processnex+0x126>
	if (lcd_initflag == 3) {	// uart only
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d069      	beq.n	8002f6c <processnex+0x100>
	lcd_rxdma();		// get any new characters received
 8002e98:	f7ff f974 	bl	8002184 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8002e9c:	f7ff fe8e 	bl	8002bbc <lcd_event_process>
	if (dimtimer > 50000) {
 8002ea0:	4a45      	ldr	r2, [pc, #276]	; (8002fb8 <processnex+0x14c>)
 8002ea2:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8002ea6:	9001      	str	r0, [sp, #4]
	if (dimtimer > 50000) {
 8002ea8:	6813      	ldr	r3, [r2, #0]
 8002eaa:	428b      	cmp	r3, r1
 8002eac:	d903      	bls.n	8002eb6 <processnex+0x4a>
		dimtimer--;
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	6013      	str	r3, [r2, #0]
}
 8002eb2:	b022      	add	sp, #136	; 0x88
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002eb6:	4841      	ldr	r0, [pc, #260]	; (8002fbc <processnex+0x150>)
		dimtimer = 60000;
 8002eb8:	f64e 2360 	movw	r3, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002ebc:	6801      	ldr	r1, [r0, #0]
		dimtimer = 60000;
 8002ebe:	6013      	str	r3, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002ec0:	6804      	ldr	r4, [r0, #0]
 8002ec2:	6803      	ldr	r3, [r0, #0]
 8002ec4:	6802      	ldr	r2, [r0, #0]
 8002ec6:	109b      	asrs	r3, r3, #2
 8002ec8:	eb03 0364 	add.w	r3, r3, r4, asr #1
 8002ecc:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8002ed0:	1aca      	subs	r2, r1, r3
		if (i < 2)
 8002ed2:	2a01      	cmp	r2, #1
 8002ed4:	dd45      	ble.n	8002f62 <processnex+0xf6>
 8002ed6:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002ed8:	4939      	ldr	r1, [pc, #228]	; (8002fc0 <processnex+0x154>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	bf28      	it	cs
 8002ede:	2363      	movcs	r3, #99	; 0x63
 8002ee0:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8002ee2:	4a38      	ldr	r2, [pc, #224]	; (8002fc4 <processnex+0x158>)
 8002ee4:	a802      	add	r0, sp, #8
 8002ee6:	4938      	ldr	r1, [pc, #224]	; (8002fc8 <processnex+0x15c>)
 8002ee8:	f022 fc4e 	bl	8025788 <siprintf>
	strcpy(pkt, str);
 8002eec:	a902      	add	r1, sp, #8
 8002eee:	a80a      	add	r0, sp, #40	; 0x28
 8002ef0:	f022 fcdb 	bl	80258aa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8002ef4:	4935      	ldr	r1, [pc, #212]	; (8002fcc <processnex+0x160>)
	if (!(lcd_txblocked))
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <processnex+0x164>)
	strcpy(pkt, str);
 8002ef8:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002efa:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002efc:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8002efe:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d152      	bne.n	8002faa <processnex+0x13e>
		return (lcd_puts(pkt));
 8002f04:	a80a      	add	r0, sp, #40	; 0x28
 8002f06:	f7ff f905 	bl	8002114 <lcd_puts>
	result = writelcdcmd(buffer);
 8002f0a:	900a      	str	r0, [sp, #40]	; 0x28
	if (result == -1) {		// wait for response
 8002f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f0e:	3301      	adds	r3, #1
 8002f10:	d047      	beq.n	8002fa2 <processnex+0x136>
	return (result);
 8002f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 8002f14:	b022      	add	sp, #136	; 0x88
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 8002f18:	4c26      	ldr	r4, [pc, #152]	; (8002fb4 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002f1a:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 8002f1c:	482d      	ldr	r0, [pc, #180]	; (8002fd4 <processnex+0x168>)
 8002f1e:	f022 fae5 	bl	80254ec <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002f22:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d1b0      	bne.n	8002e8c <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 8002f2a:	482b      	ldr	r0, [pc, #172]	; (8002fd8 <processnex+0x16c>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002f2c:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8002f2e:	f022 fadd 	bl	80254ec <puts>
		lcd_uart_init(9600);	// switch us to 9600
 8002f32:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002f36:	f7ff f81f 	bl	8001f78 <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 8002f3a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002f3e:	f7ff f863 	bl	8002008 <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8002f42:	2302      	movs	r3, #2
 8002f44:	6023      	str	r3, [r4, #0]
}
 8002f46:	b022      	add	sp, #136	; 0x88
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 8002f4a:	4824      	ldr	r0, [pc, #144]	; (8002fdc <processnex+0x170>)
 8002f4c:	4c19      	ldr	r4, [pc, #100]	; (8002fb4 <processnex+0x148>)
 8002f4e:	f022 facd 	bl	80254ec <puts>
 8002f52:	e796      	b.n	8002e82 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 8002f54:	4822      	ldr	r0, [pc, #136]	; (8002fe0 <processnex+0x174>)
 8002f56:	f022 fac9 	bl	80254ec <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 8002f5a:	4c16      	ldr	r4, [pc, #88]	; (8002fb4 <processnex+0x148>)
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	6023      	str	r3, [r4, #0]
		break;
 8002f60:	e78f      	b.n	8002e82 <processnex+0x16>
			i = 2;	// prevent black
 8002f62:	2202      	movs	r2, #2
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <processnex+0x154>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	600a      	str	r2, [r1, #0]
 8002f6a:	e7ba      	b.n	8002ee2 <processnex+0x76>
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002f6c:	481d      	ldr	r0, [pc, #116]	; (8002fe4 <processnex+0x178>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002f6e:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002f70:	f022 fabc 	bl	80254ec <puts>
		lcd_uart_init(230400);
 8002f74:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002f78:	f7fe fffe 	bl	8001f78 <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 8002f7c:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002f80:	f7ff f842 	bl	8002008 <lcd_init>
		osDelay(100);
 8002f84:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 8002f86:	6026      	str	r6, [r4, #0]
}
 8002f88:	b022      	add	sp, #136	; 0x88
 8002f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 8002f8e:	f012 ba77 	b.w	8015480 <osDelay>
		osDelay(500);
 8002f92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f96:	f012 fa73 	bl	8015480 <osDelay>
		lcd_initflag = 3;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	6023      	str	r3, [r4, #0]
}
 8002f9e:	b022      	add	sp, #136	; 0x88
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8002fa2:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <processnex+0x17c>)
 8002fa4:	f022 fa06 	bl	80253b4 <iprintf>
 8002fa8:	e7b3      	b.n	8002f12 <processnex+0xa6>
		return (-1);
 8002faa:	f04f 30ff 	mov.w	r0, #4294967295
 8002fae:	e7ac      	b.n	8002f0a <processnex+0x9e>
 8002fb0:	20001a94 	.word	0x20001a94
 8002fb4:	20001a04 	.word	0x20001a04
 8002fb8:	2000000c 	.word	0x2000000c
 8002fbc:	20000014 	.word	0x20000014
 8002fc0:	200019ec 	.word	0x200019ec
 8002fc4:	0802a808 	.word	0x0802a808
 8002fc8:	0802a7e8 	.word	0x0802a7e8
 8002fcc:	0802a75c 	.word	0x0802a75c
 8002fd0:	20001a08 	.word	0x20001a08
 8002fd4:	0802abac 	.word	0x0802abac
 8002fd8:	0802abe4 	.word	0x0802abe4
 8002fdc:	0802abd0 	.word	0x0802abd0
 8002fe0:	0802abbc 	.word	0x0802abbc
 8002fe4:	0802ac0c 	.word	0x0802ac0c
 8002fe8:	0802a7f0 	.word	0x0802a7f0

08002fec <getlcdpage>:
int getlcdpage(void) {
 8002fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("getlcdpage:\n");
 8002ff0:	4842      	ldr	r0, [pc, #264]	; (80030fc <getlcdpage+0x110>)
int getlcdpage(void) {
 8002ff2:	b09b      	sub	sp, #108	; 0x6c
	printf("getlcdpage:\n");
 8002ff4:	f022 fa7a 	bl	80254ec <puts>
	lcd_txblocked = 1;		// stop others sending to the LCD
 8002ff8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8003118 <getlcdpage+0x12c>
 8002ffc:	2301      	movs	r3, #1
	strcpy(pkt, str);
 8002ffe:	4e40      	ldr	r6, [pc, #256]	; (8003100 <getlcdpage+0x114>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8003000:	2096      	movs	r0, #150	; 0x96
	strcat(pkt, "\xff\xff\xff");
 8003002:	4f40      	ldr	r7, [pc, #256]	; (8003104 <getlcdpage+0x118>)
	lcd_txblocked = 1;		// stop others sending to the LCD
 8003004:	f8c8 3000 	str.w	r3, [r8]
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8003008:	f012 fa3a 	bl	8015480 <osDelay>
	lcdstatus = 0xff;
 800300c:	4d3e      	ldr	r5, [pc, #248]	; (8003108 <getlcdpage+0x11c>)
 800300e:	23ff      	movs	r3, #255	; 0xff
	strcpy(pkt, str);
 8003010:	e896 0003 	ldmia.w	r6, {r0, r1}
	lcdstatus = 0xff;
 8003014:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 8003016:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 8003018:	6838      	ldr	r0, [r7, #0]
	strcpy(pkt, str);
 800301a:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 800301e:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 8003022:	a802      	add	r0, sp, #8
 8003024:	f7ff f876 	bl	8002114 <lcd_puts>
	result = intwritelcdcmd("sendme");
 8003028:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 800302a:	9b01      	ldr	r3, [sp, #4]
 800302c:	3301      	adds	r3, #1
 800302e:	d060      	beq.n	80030f2 <getlcdpage+0x106>
	processnex();
 8003030:	f7ff ff1c 	bl	8002e6c <processnex>
	while (lcdstatus == 0xff) {
 8003034:	782b      	ldrb	r3, [r5, #0]
 8003036:	2bff      	cmp	r3, #255	; 0xff
 8003038:	d121      	bne.n	800307e <getlcdpage+0x92>
 800303a:	4c34      	ldr	r4, [pc, #208]	; (800310c <getlcdpage+0x120>)
 800303c:	e007      	b.n	800304e <getlcdpage+0x62>
		trys++;
 800303e:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8003040:	f012 fa1e 	bl	8015480 <osDelay>
		processnex();
 8003044:	f7ff ff12 	bl	8002e6c <processnex>
	while (lcdstatus == 0xff) {
 8003048:	782b      	ldrb	r3, [r5, #0]
 800304a:	2bff      	cmp	r3, #255	; 0xff
 800304c:	d117      	bne.n	800307e <getlcdpage+0x92>
		if (trys > 1000) {
 800304e:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003050:	2001      	movs	r0, #1
		if (trys > 1000) {
 8003052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003056:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 800305a:	d9f0      	bls.n	800303e <getlcdpage+0x52>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 800305c:	482c      	ldr	r0, [pc, #176]	; (8003110 <getlcdpage+0x124>)
 800305e:	f022 f9a9 	bl	80253b4 <iprintf>
			trys = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	23ff      	movs	r3, #255	; 0xff
	result = lcd_getlack();		// wait for a response
 8003068:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 800306a:	9b01      	ldr	r3, [sp, #4]
 800306c:	2bff      	cmp	r3, #255	; 0xff
 800306e:	d00c      	beq.n	800308a <getlcdpage+0x9e>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003070:	2300      	movs	r3, #0
 8003072:	f8c8 3000 	str.w	r3, [r8]
	return (result);
 8003076:	9801      	ldr	r0, [sp, #4]
}
 8003078:	b01b      	add	sp, #108	; 0x6c
 800307a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (lcdstatus);
 800307e:	782b      	ldrb	r3, [r5, #0]
 8003080:	b2db      	uxtb	r3, r3
	result = lcd_getlack();		// wait for a response
 8003082:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 8003084:	9b01      	ldr	r3, [sp, #4]
 8003086:	2bff      	cmp	r3, #255	; 0xff
 8003088:	d1f2      	bne.n	8003070 <getlcdpage+0x84>
	strcat(pkt, "\xff\xff\xff");
 800308a:	683f      	ldr	r7, [r7, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 800308c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800311c <getlcdpage+0x130>
 8003090:	4c1e      	ldr	r4, [pc, #120]	; (800310c <getlcdpage+0x120>)
	strcat(pkt, "\xff\xff\xff");
 8003092:	f8cd 700e 	str.w	r7, [sp, #14]
	strcpy(pkt, str);
 8003096:	e896 0003 	ldmia.w	r6, {r0, r1}
 800309a:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 800309c:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 800309e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 80030a2:	f7ff f837 	bl	8002114 <lcd_puts>
		result = intwritelcdcmd("sendme");
 80030a6:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 80030a8:	9b01      	ldr	r3, [sp, #4]
 80030aa:	3301      	adds	r3, #1
 80030ac:	d10a      	bne.n	80030c4 <getlcdpage+0xd8>
 80030ae:	e01c      	b.n	80030ea <getlcdpage+0xfe>
		if (trys > 1000) {
 80030b0:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 80030b2:	2001      	movs	r0, #1
		if (trys > 1000) {
 80030b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 80030b8:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 80030bc:	d80e      	bhi.n	80030dc <getlcdpage+0xf0>
		trys++;
 80030be:	6022      	str	r2, [r4, #0]
		osDelay(1);
 80030c0:	f012 f9de 	bl	8015480 <osDelay>
		processnex();
 80030c4:	f7ff fed2 	bl	8002e6c <processnex>
	while (lcdstatus == 0xff) {
 80030c8:	782b      	ldrb	r3, [r5, #0]
 80030ca:	2bff      	cmp	r3, #255	; 0xff
 80030cc:	d0f0      	beq.n	80030b0 <getlcdpage+0xc4>
	return (lcdstatus);
 80030ce:	782b      	ldrb	r3, [r5, #0]
 80030d0:	b2db      	uxtb	r3, r3
		result = lcd_getlack();		// wait for a response
 80030d2:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 80030d4:	9b01      	ldr	r3, [sp, #4]
 80030d6:	2bff      	cmp	r3, #255	; 0xff
 80030d8:	d0db      	beq.n	8003092 <getlcdpage+0xa6>
 80030da:	e7c9      	b.n	8003070 <getlcdpage+0x84>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 80030dc:	480c      	ldr	r0, [pc, #48]	; (8003110 <getlcdpage+0x124>)
 80030de:	f022 f969 	bl	80253b4 <iprintf>
			trys = 0;
 80030e2:	2200      	movs	r2, #0
 80030e4:	23ff      	movs	r3, #255	; 0xff
 80030e6:	6022      	str	r2, [r4, #0]
			return (-1);
 80030e8:	e7f3      	b.n	80030d2 <getlcdpage+0xe6>
			printf("getlcdpage2: Cmd failed\n\r");
 80030ea:	4648      	mov	r0, r9
 80030ec:	f022 f962 	bl	80253b4 <iprintf>
 80030f0:	e7e8      	b.n	80030c4 <getlcdpage+0xd8>
		printf("getlcdpage: Cmd failed\n\r");
 80030f2:	4808      	ldr	r0, [pc, #32]	; (8003114 <getlcdpage+0x128>)
 80030f4:	f022 f95e 	bl	80253b4 <iprintf>
 80030f8:	e79a      	b.n	8003030 <getlcdpage+0x44>
 80030fa:	bf00      	nop
 80030fc:	0802ac68 	.word	0x0802ac68
 8003100:	0802ac74 	.word	0x0802ac74
 8003104:	0802a75c 	.word	0x0802a75c
 8003108:	20001a90 	.word	0x20001a90
 800310c:	20002080 	.word	0x20002080
 8003110:	0802ac38 	.word	0x0802ac38
 8003114:	0802ac7c 	.word	0x0802ac7c
 8003118:	20001a08 	.word	0x20001a08
 800311c:	0802ac98 	.word	0x0802ac98

08003120 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8003120:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2107      	movs	r1, #7
 8003126:	2026      	movs	r0, #38	; 0x26
 8003128:	f005 fc9a 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800312c:	2026      	movs	r0, #38	; 0x26
 800312e:	f005 fce1 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2106      	movs	r1, #6
 8003136:	2047      	movs	r0, #71	; 0x47
 8003138:	f005 fc92 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 800313c:	2047      	movs	r0, #71	; 0x47
 800313e:	f005 fcd9 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	2106      	movs	r1, #6
 8003146:	2012      	movs	r0, #18
 8003148:	f005 fc8a 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800314c:	2012      	movs	r0, #18
 800314e:	f005 fcd1 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2106      	movs	r1, #6
 8003156:	2028      	movs	r0, #40	; 0x28
 8003158:	f005 fc82 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800315c:	2028      	movs	r0, #40	; 0x28
 800315e:	f005 fcc9 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8003162:	202d      	movs	r0, #45	; 0x2d
 8003164:	2200      	movs	r2, #0
 8003166:	2101      	movs	r1, #1
 8003168:	f005 fc7a 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800316c:	202d      	movs	r0, #45	; 0x2d
}
 800316e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003172:	f005 bcbf 	b.w	8008af4 <HAL_NVIC_EnableIRQ>
 8003176:	bf00      	nop

08003178 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8003178:	4801      	ldr	r0, [pc, #4]	; (8003180 <netif_status_callbk_fn+0x8>)
 800317a:	f022 b9b7 	b.w	80254ec <puts>
 800317e:	bf00      	nop
 8003180:	0802acc8 	.word	0x0802acc8

08003184 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8003184:	4801      	ldr	r0, [pc, #4]	; (800318c <Callback01+0x8>)
 8003186:	f022 b9b1 	b.w	80254ec <puts>
 800318a:	bf00      	nop
 800318c:	0802ace0 	.word	0x0802ace0

08003190 <_write>:
	if (file == 1) {
 8003190:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8003192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003194:	460c      	mov	r4, r1
 8003196:	4617      	mov	r7, r2
	if (file == 1) {
 8003198:	d00e      	beq.n	80031b8 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800319a:	2a00      	cmp	r2, #0
 800319c:	dd0a      	ble.n	80031b4 <_write+0x24>
 800319e:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 80031a0:	4d0b      	ldr	r5, [pc, #44]	; (80031d0 <_write+0x40>)
 80031a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a6:	230a      	movs	r3, #10
 80031a8:	2201      	movs	r2, #1
 80031aa:	4628      	mov	r0, r5
 80031ac:	f00f fe74 	bl	8012e98 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031b0:	42a6      	cmp	r6, r4
 80031b2:	d1f6      	bne.n	80031a2 <_write+0x12>
}
 80031b4:	4638      	mov	r0, r7
 80031b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	ddfb      	ble.n	80031b4 <_write+0x24>
 80031bc:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 80031be:	f814 0b01 	ldrb.w	r0, [r4], #1
 80031c2:	f001 fef9 	bl	8004fb8 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031c6:	42ac      	cmp	r4, r5
 80031c8:	d1f9      	bne.n	80031be <_write+0x2e>
}
 80031ca:	4638      	mov	r0, r7
 80031cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20002b0c 	.word	0x20002b0c

080031d4 <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 80031d4:	4b10      	ldr	r3, [pc, #64]	; (8003218 <crc_rom+0x44>)
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80031d6:	4811      	ldr	r0, [pc, #68]	; (800321c <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 80031d8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <crc_rom+0x4c>)
 80031de:	4a11      	ldr	r2, [pc, #68]	; (8003224 <crc_rom+0x50>)
 80031e0:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 80031e2:	bf2c      	ite	cs
 80031e4:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 80031e8:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80031ec:	1a9b      	subs	r3, r3, r2
	romcrc = xcrc32(base, length, xinit);
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
crc_rom() {
 80031f2:	b510      	push	{r4, lr}
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80031f4:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 80031f6:	460c      	mov	r4, r1
crc_rom() {
 80031f8:	b082      	sub	sp, #8
	romcrc = xcrc32(base, length, xinit);
 80031fa:	4619      	mov	r1, r3
 80031fc:	4620      	mov	r0, r4
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	f7fd fcde 	bl	8000bc0 <xcrc32>
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003204:	9b01      	ldr	r3, [sp, #4]
	romcrc = xcrc32(base, length, xinit);
 8003206:	4601      	mov	r1, r0
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003208:	4622      	mov	r2, r4
 800320a:	4807      	ldr	r0, [pc, #28]	; (8003228 <crc_rom+0x54>)
}
 800320c:	b002      	add	sp, #8
 800320e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003212:	f022 b8cf 	b.w	80253b4 <iprintf>
 8003216:	bf00      	nop
 8003218:	08003121 	.word	0x08003121
 800321c:	200006c4 	.word	0x200006c4
 8003220:	080464f4 	.word	0x080464f4
 8003224:	20000000 	.word	0x20000000
 8003228:	0802acec 	.word	0x0802acec

0800322c <err_leds>:
err_leds(int why) {
 800322c:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 800322e:	4e37      	ldr	r6, [pc, #220]	; (800330c <err_leds+0xe0>)
err_leds(int why) {
 8003230:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 8003232:	4d37      	ldr	r5, [pc, #220]	; (8003310 <err_leds+0xe4>)
 8003234:	1e44      	subs	r4, r0, #1
		switch (why) {
 8003236:	2c07      	cmp	r4, #7
 8003238:	d80f      	bhi.n	800325a <err_leds+0x2e>
 800323a:	e8df f004 	tbb	[pc, r4]
 800323e:	5c51      	.short	0x5c51
 8003240:	25303b46 	.word	0x25303b46
 8003244:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800324a:	4630      	mov	r0, r6
 800324c:	f008 fd4c 	bl	800bce8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003254:	4630      	mov	r0, r6
 8003256:	f008 fd47 	bl	800bce8 <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 800325a:	2300      	movs	r3, #0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	9b01      	ldr	r3, [sp, #4]
 8003260:	42ab      	cmp	r3, r5
 8003262:	dae8      	bge.n	8003236 <err_leds+0xa>
 8003264:	9b01      	ldr	r3, [sp, #4]
 8003266:	3301      	adds	r3, #1
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	9b01      	ldr	r3, [sp, #4]
 800326c:	42ab      	cmp	r3, r5
 800326e:	dbf9      	blt.n	8003264 <err_leds+0x38>
 8003270:	e7e1      	b.n	8003236 <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003272:	4630      	mov	r0, r6
 8003274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003278:	f008 fd36 	bl	800bce8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 800327c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003280:	4630      	mov	r0, r6
 8003282:	f008 fd31 	bl	800bce8 <HAL_GPIO_TogglePin>
			break;
 8003286:	e7e8      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003288:	4630      	mov	r0, r6
 800328a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800328e:	f008 fd2b 	bl	800bce8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003296:	4630      	mov	r0, r6
 8003298:	f008 fd26 	bl	800bce8 <HAL_GPIO_TogglePin>
			break;
 800329c:	e7dd      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800329e:	4630      	mov	r0, r6
 80032a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032a4:	f008 fd20 	bl	800bce8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80032a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032ac:	4630      	mov	r0, r6
 80032ae:	f008 fd1b 	bl	800bce8 <HAL_GPIO_TogglePin>
			break;
 80032b2:	e7d2      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80032b4:	4630      	mov	r0, r6
 80032b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ba:	f008 fd15 	bl	800bce8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80032be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032c2:	4630      	mov	r0, r6
 80032c4:	f008 fd10 	bl	800bce8 <HAL_GPIO_TogglePin>
			break;
 80032c8:	e7c7      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80032ca:	4630      	mov	r0, r6
 80032cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032d0:	f008 fd0a 	bl	800bce8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80032d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032d8:	4630      	mov	r0, r6
 80032da:	f008 fd05 	bl	800bce8 <HAL_GPIO_TogglePin>
			break;
 80032de:	e7bc      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80032e0:	4630      	mov	r0, r6
 80032e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032e6:	f008 fcff 	bl	800bce8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80032ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ee:	4630      	mov	r0, r6
 80032f0:	f008 fcfa 	bl	800bce8 <HAL_GPIO_TogglePin>
			break;
 80032f4:	e7b1      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80032f6:	4630      	mov	r0, r6
 80032f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032fc:	f008 fcf4 	bl	800bce8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003304:	4630      	mov	r0, r6
 8003306:	f008 fcef 	bl	800bce8 <HAL_GPIO_TogglePin>
			break;
 800330a:	e7a6      	b.n	800325a <err_leds+0x2e>
 800330c:	40020c00 	.word	0x40020c00
 8003310:	003567e0 	.word	0x003567e0

08003314 <rebootme>:
void rebootme(int why) {
 8003314:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003316:	b672      	cpsid	i
		err_leds(why);
 8003318:	f7ff ff88 	bl	800322c <err_leds>

0800331c <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 800331c:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8003320:	074a      	lsls	r2, r1, #29
 8003322:	d502      	bpl.n	800332a <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8003324:	4809      	ldr	r0, [pc, #36]	; (800334c <netif_link_callbk_fn+0x30>)
 8003326:	f022 b845 	b.w	80253b4 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 800332a:	b510      	push	{r4, lr}
 800332c:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <netif_link_callbk_fn+0x34>)
 8003330:	f022 f840 	bl	80253b4 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8003334:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003338:	075b      	lsls	r3, r3, #29
 800333a:	d500      	bpl.n	800333e <netif_link_callbk_fn+0x22>
}
 800333c:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 800333e:	4805      	ldr	r0, [pc, #20]	; (8003354 <netif_link_callbk_fn+0x38>)
 8003340:	f022 f8d4 	bl	80254ec <puts>
			rebootme(1);
 8003344:	2001      	movs	r0, #1
 8003346:	f7ff ffe5 	bl	8003314 <rebootme>
 800334a:	bf00      	nop
 800334c:	0802ad10 	.word	0x0802ad10
 8003350:	0802ad30 	.word	0x0802ad30
 8003354:	0802ad50 	.word	0x0802ad50

08003358 <StarLPTask>:
	char str[82] = { "empty" };
 8003358:	4bab      	ldr	r3, [pc, #684]	; (8003608 <StarLPTask+0x2b0>)
 800335a:	224c      	movs	r2, #76	; 0x4c
void StarLPTask(void const *argument) {
 800335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8003360:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 8003364:	b0a1      	sub	sp, #132	; 0x84
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003366:	2400      	movs	r4, #0
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003368:	f8df b31c 	ldr.w	fp, [pc, #796]	; 8003688 <StarLPTask+0x330>
	char str[82] = { "empty" };
 800336c:	900b      	str	r0, [sp, #44]	; 0x2c
 800336e:	f10d 0032 	add.w	r0, sp, #50	; 0x32
 8003372:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8003376:	4621      	mov	r1, r4
 8003378:	f021 f87e 	bl	8024478 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 800337c:	4ba3      	ldr	r3, [pc, #652]	; (800360c <StarLPTask+0x2b4>)
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 800337e:	4622      	mov	r2, r4
 8003380:	2101      	movs	r1, #1
 8003382:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003384:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003386:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8003388:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 800338c:	f012 fb70 	bl	8015a70 <xQueueGenericCreate>
 8003390:	f8cb 0000 	str.w	r0, [fp]
	if (consolerxq == NULL) {
 8003394:	2800      	cmp	r0, #0
 8003396:	f000 84da 	beq.w	8003d4e <StarLPTask+0x9f6>
	strcpy(udp_target, SERVER_DESTINATION);
 800339a:	4e9d      	ldr	r6, [pc, #628]	; (8003610 <StarLPTask+0x2b8>)
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 800339c:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
	strcpy(udp_target, SERVER_DESTINATION);
 80033a0:	4f9c      	ldr	r7, [pc, #624]	; (8003614 <StarLPTask+0x2bc>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80033a2:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800368c <StarLPTask+0x334>
	while (main_init_done == 0) { // wait from main to complete the init {
 80033a6:	4d9c      	ldr	r5, [pc, #624]	; (8003618 <StarLPTask+0x2c0>)
	strcpy(udp_target, SERVER_DESTINATION);
 80033a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80033aa:	6038      	str	r0, [r7, #0]
 80033ac:	6830      	ldr	r0, [r6, #0]
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	6079      	str	r1, [r7, #4]
 80033b2:	60ba      	str	r2, [r7, #8]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80033b4:	2201      	movs	r2, #1
 80033b6:	4999      	ldr	r1, [pc, #612]	; (800361c <StarLPTask+0x2c4>)
	strcpy(udp_target, SERVER_DESTINATION);
 80033b8:	6138      	str	r0, [r7, #16]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80033ba:	4899      	ldr	r0, [pc, #612]	; (8003620 <StarLPTask+0x2c8>)
 80033bc:	f00f ff8a 	bl	80132d4 <HAL_UART_Receive_IT>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 80033c0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	lcduart_error = HAL_UART_ERROR_NONE;
 80033c4:	f8c8 4000 	str.w	r4, [r8]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 80033c8:	f7fe fe1e 	bl	8002008 <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 80033cc:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80033d0:	f7fe fdd2 	bl	8001f78 <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 80033d4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80033d8:	f7fe fe16 	bl	8002008 <lcd_init>
	osDelay(600);
 80033dc:	f44f 7016 	mov.w	r0, #600	; 0x258
 80033e0:	f012 f84e 	bl	8015480 <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 80033e4:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80033e8:	f7fe fe0e 	bl	8002008 <lcd_init>
	osDelay(600);
 80033ec:	f44f 7016 	mov.w	r0, #600	; 0x258
 80033f0:	f012 f846 	bl	8015480 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 80033f4:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80033f8:	f7fe fdbe 	bl	8001f78 <lcd_uart_init>
	osDelay(600);
 80033fc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003400:	f012 f83e 	bl	8015480 <osDelay>
	writelcdcmd("page 0");
 8003404:	4887      	ldr	r0, [pc, #540]	; (8003624 <StarLPTask+0x2cc>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003406:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd("page 0");
 800340a:	f7fe fef9 	bl	8002200 <writelcdcmd>
	printf("LCD page 0\n");
 800340e:	4886      	ldr	r0, [pc, #536]	; (8003628 <StarLPTask+0x2d0>)
 8003410:	f022 f86c 	bl	80254ec <puts>
	osDelay(600);
 8003414:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003418:	f012 f832 	bl	8015480 <osDelay>
	writelcdcmd("cls BLACK");
 800341c:	4883      	ldr	r0, [pc, #524]	; (800362c <StarLPTask+0x2d4>)
 800341e:	f7fe feef 	bl	8002200 <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8003422:	f242 732d 	movw	r3, #10029	; 0x272d
 8003426:	4622      	mov	r2, r4
 8003428:	4981      	ldr	r1, [pc, #516]	; (8003630 <StarLPTask+0x2d8>)
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4650      	mov	r0, sl
 800342e:	2310      	movs	r3, #16
 8003430:	f022 f9aa 	bl	8025788 <siprintf>
	writelcdcmd(str);
 8003434:	4650      	mov	r0, sl
	lcduart_error = HAL_UART_ERROR_NONE;
 8003436:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd(str);
 800343a:	f7fe fee1 	bl	8002200 <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;
 800343e:	f8c8 4000 	str.w	r4, [r8]
	while (main_init_done == 0) { // wait from main to complete the init {
 8003442:	682c      	ldr	r4, [r5, #0]
 8003444:	2c00      	cmp	r4, #0
 8003446:	d148      	bne.n	80034da <StarLPTask+0x182>
 8003448:	4e7a      	ldr	r6, [pc, #488]	; (8003634 <StarLPTask+0x2dc>)
 800344a:	e017      	b.n	800347c <StarLPTask+0x124>
		switch (i & 3) {
 800344c:	f1b9 0f01 	cmp.w	r9, #1
 8003450:	f000 80ab 	beq.w	80035aa <StarLPTask+0x252>
			writelcdcmd(strcat(str, ".\""));
 8003454:	4b78      	ldr	r3, [pc, #480]	; (8003638 <StarLPTask+0x2e0>)
 8003456:	4650      	mov	r0, sl
 8003458:	881a      	ldrh	r2, [r3, #0]
 800345a:	789b      	ldrb	r3, [r3, #2]
 800345c:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
 8003460:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8003464:	f7fe fecc 	bl	8002200 <writelcdcmd>
		osDelay(250);
 8003468:	20fa      	movs	r0, #250	; 0xfa
		i++;
 800346a:	3401      	adds	r4, #1
		osDelay(250);
 800346c:	f012 f808 	bl	8015480 <osDelay>
		if (!(netif_is_link_up(&gnetif))) {
 8003470:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8003474:	075a      	lsls	r2, r3, #29
 8003476:	d52a      	bpl.n	80034ce <StarLPTask+0x176>
	while (main_init_done == 0) { // wait from main to complete the init {
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	bb73      	cbnz	r3, 80034da <StarLPTask+0x182>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 800347c:	f8df e210 	ldr.w	lr, [pc, #528]	; 8003690 <StarLPTask+0x338>
 8003480:	46d4      	mov	ip, sl
		switch (i & 3) {
 8003482:	f004 0903 	and.w	r9, r4, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003486:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800348a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800348e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003492:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003496:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		switch (i & 3) {
 800349a:	f1b9 0f02 	cmp.w	r9, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 800349e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80034a2:	f82c 3b02 	strh.w	r3, [ip], #2
 80034a6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80034aa:	f88c 3000 	strb.w	r3, [ip]
		switch (i & 3) {
 80034ae:	f000 8084 	beq.w	80035ba <StarLPTask+0x262>
 80034b2:	f1b9 0f03 	cmp.w	r9, #3
 80034b6:	d1c9      	bne.n	800344c <StarLPTask+0xf4>
			writelcdcmd(strcat(str, "....\""));
 80034b8:	4b60      	ldr	r3, [pc, #384]	; (800363c <StarLPTask+0x2e4>)
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	889b      	ldrh	r3, [r3, #4]
 80034be:	f8cd 005a 	str.w	r0, [sp, #90]	; 0x5a
 80034c2:	4650      	mov	r0, sl
 80034c4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 80034c8:	f7fe fe9a 	bl	8002200 <writelcdcmd>
			break;
 80034cc:	e7cc      	b.n	8003468 <StarLPTask+0x110>
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 80034ce:	485c      	ldr	r0, [pc, #368]	; (8003640 <StarLPTask+0x2e8>)
 80034d0:	f7fe fe96 	bl	8002200 <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0d0      	beq.n	800347c <StarLPTask+0x124>
	lcduart_error = HAL_UART_ERROR_NONE;
 80034da:	2400      	movs	r4, #0
	writelcdcmd("ref 0");		// refresh screen
 80034dc:	4859      	ldr	r0, [pc, #356]	; (8003644 <StarLPTask+0x2ec>)
 80034de:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8003694 <StarLPTask+0x33c>
	lcduart_error = HAL_UART_ERROR_NONE;
 80034e2:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd("ref 0");		// refresh screen
 80034e6:	f7fe fe8b 	bl	8002200 <writelcdcmd>
	writelcdcmd("page 0");
 80034ea:	484e      	ldr	r0, [pc, #312]	; (8003624 <StarLPTask+0x2cc>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80034ec:	f8c8 4000 	str.w	r4, [r8]
	int last3min = 0;
 80034f0:	46a0      	mov	r8, r4
 80034f2:	9409      	str	r4, [sp, #36]	; 0x24
	writelcdcmd("page 0");
 80034f4:	f7fe fe84 	bl	8002200 <writelcdcmd>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80034f8:	4b44      	ldr	r3, [pc, #272]	; (800360c <StarLPTask+0x2b4>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80034fa:	4853      	ldr	r0, [pc, #332]	; (8003648 <StarLPTask+0x2f0>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80034fc:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8003500:	f8df c194 	ldr.w	ip, [pc, #404]	; 8003698 <StarLPTask+0x340>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8003504:	f893 5070 	ldrb.w	r5, [r3, #112]	; 0x70
 8003508:	b2a4      	uxth	r4, r4
 800350a:	f893 6071 	ldrb.w	r6, [r3, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800350e:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 8003512:	f8d0 3424 	ldr.w	r3, [r0, #1060]	; 0x424
 8003516:	9401      	str	r4, [sp, #4]
 8003518:	494c      	ldr	r1, [pc, #304]	; (800364c <StarLPTask+0x2f4>)
 800351a:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800351e:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8003522:	f8d0 0428 	ldr.w	r0, [r0, #1064]	; 0x428
	gainchanged = 0;
 8003526:	4647      	mov	r7, r8
				agc = (agc) ? 0 : 1;
 8003528:	4d49      	ldr	r5, [pc, #292]	; (8003650 <StarLPTask+0x2f8>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800352a:	9000      	str	r0, [sp, #0]
 800352c:	4849      	ldr	r0, [pc, #292]	; (8003654 <StarLPTask+0x2fc>)
 800352e:	f022 f92b 	bl	8025788 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8003532:	4849      	ldr	r0, [pc, #292]	; (8003658 <StarLPTask+0x300>)
 8003534:	f00c f83c 	bl	800f5b0 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003538:	4b48      	ldr	r3, [pc, #288]	; (800365c <StarLPTask+0x304>)
 800353a:	2201      	movs	r2, #1
	uint16_t onesectimer = 0;
 800353c:	e9cd 8807 	strd	r8, r8, [sp, #28]
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003540:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003542:	4847      	ldr	r0, [pc, #284]	; (8003660 <StarLPTask+0x308>)
 8003544:	f009 fa3a 	bl	800c9bc <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8003548:	200a      	movs	r0, #10
 800354a:	f011 ff99 	bl	8015480 <osDelay>
		if (http_downloading) {
 800354e:	f8d9 3000 	ldr.w	r3, [r9]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 8315 	bne.w	8003b82 <StarLPTask+0x82a>
		globaladcnoise = abs(meanwindiff);
 8003558:	4b42      	ldr	r3, [pc, #264]	; (8003664 <StarLPTask+0x30c>)
		tenmstimer++;
 800355a:	3701      	adds	r7, #1
		globaladcnoise = abs(meanwindiff);
 800355c:	4a42      	ldr	r2, [pc, #264]	; (8003668 <StarLPTask+0x310>)
 800355e:	f9b3 3000 	ldrsh.w	r3, [r3]
		tenmstimer++;
 8003562:	b2bf      	uxth	r7, r7
				printf("AGC is ");
 8003564:	4e41      	ldr	r6, [pc, #260]	; (800366c <StarLPTask+0x314>)
		globaladcnoise = abs(meanwindiff);
 8003566:	2b00      	cmp	r3, #0
					printf("OFF\n");
 8003568:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800369c <StarLPTask+0x344>
		globaladcnoise = abs(meanwindiff);
 800356c:	bfb8      	it	lt
 800356e:	425b      	neglt	r3, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8003574:	09db      	lsrs	r3, r3, #7
 8003576:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <StarLPTask+0x318>)
 8003578:	3304      	adds	r3, #4
 800357a:	8013      	strh	r3, [r2, #0]
		while (xQueueReceive(consolerxq, &inch, 0)) {
 800357c:	2200      	movs	r2, #0
 800357e:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
 8003582:	f8db 0000 	ldr.w	r0, [fp]
 8003586:	f012 fc77 	bl	8015e78 <xQueueReceive>
 800358a:	2800      	cmp	r0, #0
 800358c:	f000 8088 	beq.w	80036a0 <StarLPTask+0x348>
			if (inch == 0x03) {		// control C
 8003590:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8003594:	2803      	cmp	r0, #3
 8003596:	d024      	beq.n	80035e2 <StarLPTask+0x28a>
			if ((isdigit(inch)) && (agc == 0)) {
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <StarLPTask+0x31c>)
 800359a:	5cc3      	ldrb	r3, [r0, r3]
 800359c:	075b      	lsls	r3, r3, #29
 800359e:	d501      	bpl.n	80035a4 <StarLPTask+0x24c>
 80035a0:	882b      	ldrh	r3, [r5, #0]
 80035a2:	b1ab      	cbz	r3, 80035d0 <StarLPTask+0x278>
				__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 80035a4:	f001 fd08 	bl	8004fb8 <__io_putchar>
 80035a8:	e7e8      	b.n	800357c <StarLPTask+0x224>
			writelcdcmd(strcat(str, "..\""));
 80035aa:	4b33      	ldr	r3, [pc, #204]	; (8003678 <StarLPTask+0x320>)
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f8cd 005a 	str.w	r0, [sp, #90]	; 0x5a
 80035b2:	4650      	mov	r0, sl
 80035b4:	f7fe fe24 	bl	8002200 <writelcdcmd>
			break;
 80035b8:	e756      	b.n	8003468 <StarLPTask+0x110>
			writelcdcmd(strcat(str, "...\""));
 80035ba:	4b30      	ldr	r3, [pc, #192]	; (800367c <StarLPTask+0x324>)
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	791b      	ldrb	r3, [r3, #4]
 80035c0:	f8cd 005a 	str.w	r0, [sp, #90]	; 0x5a
 80035c4:	4650      	mov	r0, sl
 80035c6:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 80035ca:	f7fe fe19 	bl	8002200 <writelcdcmd>
			break;
 80035ce:	e74b      	b.n	8003468 <StarLPTask+0x110>
				setpgagain(inch - '0');
 80035d0:	3830      	subs	r0, #48	; 0x30
 80035d2:	f002 f96d 	bl	80058b0 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 80035d6:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 80035da:	4829      	ldr	r0, [pc, #164]	; (8003680 <StarLPTask+0x328>)
 80035dc:	f021 feea 	bl	80253b4 <iprintf>
 80035e0:	e7cc      	b.n	800357c <StarLPTask+0x224>
				agc = (agc) ? 0 : 1;
 80035e2:	882b      	ldrh	r3, [r5, #0]
				printf("AGC is ");
 80035e4:	4630      	mov	r0, r6
				agc = (agc) ? 0 : 1;
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	802b      	strh	r3, [r5, #0]
				printf("AGC is ");
 80035ee:	f021 fee1 	bl	80253b4 <iprintf>
				if (agc)
 80035f2:	882b      	ldrh	r3, [r5, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 813b 	beq.w	8003870 <StarLPTask+0x518>
					printf("ON\n");
 80035fa:	4822      	ldr	r0, [pc, #136]	; (8003684 <StarLPTask+0x32c>)
 80035fc:	f021 ff76 	bl	80254ec <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8003600:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8003604:	e7c8      	b.n	8003598 <StarLPTask+0x240>
 8003606:	bf00      	nop
 8003608:	08029410 	.word	0x08029410
 800360c:	20002f3c 	.word	0x20002f3c
 8003610:	0802a2e4 	.word	0x0802a2e4
 8003614:	20003150 	.word	0x20003150
 8003618:	20002d2c 	.word	0x20002d2c
 800361c:	20002090 	.word	0x20002090
 8003620:	20002980 	.word	0x20002980
 8003624:	0802adb8 	.word	0x0802adb8
 8003628:	0802adb4 	.word	0x0802adb4
 800362c:	0802adc0 	.word	0x0802adc0
 8003630:	0802adcc 	.word	0x0802adcc
 8003634:	200031bc 	.word	0x200031bc
 8003638:	0802ae88 	.word	0x0802ae88
 800363c:	0802ae98 	.word	0x0802ae98
 8003640:	0802aea0 	.word	0x0802aea0
 8003644:	0802ae08 	.word	0x0802ae08
 8003648:	1ff0f000 	.word	0x1ff0f000
 800364c:	0802ae10 	.word	0x0802ae10
 8003650:	20000018 	.word	0x20000018
 8003654:	2000008c 	.word	0x2000008c
 8003658:	20002934 	.word	0x20002934
 800365c:	20002d28 	.word	0x20002d28
 8003660:	200025d4 	.word	0x200025d4
 8003664:	20000750 	.word	0x20000750
 8003668:	20000700 	.word	0x20000700
 800366c:	0802af3c 	.word	0x0802af3c
 8003670:	20000000 	.word	0x20000000
 8003674:	08045c01 	.word	0x08045c01
 8003678:	0802ae8c 	.word	0x0802ae8c
 800367c:	0802ae90 	.word	0x0802ae90
 8003680:	0802af4c 	.word	0x0802af4c
 8003684:	0802af44 	.word	0x0802af44
 8003688:	20002094 	.word	0x20002094
 800368c:	20001a94 	.word	0x20001a94
 8003690:	0802ae58 	.word	0x0802ae58
 8003694:	200018a8 	.word	0x200018a8
 8003698:	200030f4 	.word	0x200030f4
 800369c:	0802af48 	.word	0x0802af48
		if (!(ledsenabled)) {
 80036a0:	4b9d      	ldr	r3, [pc, #628]	; (8003918 <StarLPTask+0x5c0>)
 80036a2:	4604      	mov	r4, r0
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80e8 	beq.w	800387c <StarLPTask+0x524>
		} else if (ledhang) {	// trigger led
 80036ac:	4a9b      	ldr	r2, [pc, #620]	; (800391c <StarLPTask+0x5c4>)
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80e3 	beq.w	800387c <StarLPTask+0x524>
			ledhang--;
 80036b6:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80036b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036bc:	4898      	ldr	r0, [pc, #608]	; (8003920 <StarLPTask+0x5c8>)
			ledhang--;
 80036be:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80036c0:	2201      	movs	r2, #1
 80036c2:	f008 faf7 	bl	800bcb4 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 80036c6:	4997      	ldr	r1, [pc, #604]	; (8003924 <StarLPTask+0x5cc>)
 80036c8:	4897      	ldr	r0, [pc, #604]	; (8003928 <StarLPTask+0x5d0>)
 80036ca:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80036cc:	6803      	ldr	r3, [r0, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	f040 80db 	bne.w	800388a <StarLPTask+0x532>
		processnex();		// process Nextion
 80036d4:	f7ff fbca 	bl	8002e6c <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 80036d8:	4a94      	ldr	r2, [pc, #592]	; (800392c <StarLPTask+0x5d4>)
 80036da:	1cfb      	adds	r3, r7, #3
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	4a93      	ldr	r2, [pc, #588]	; (8003930 <StarLPTask+0x5d8>)
 80036e2:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 80036e6:	d31e      	bcc.n	8003726 <StarLPTask+0x3ce>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 80036e8:	4b8e      	ldr	r3, [pc, #568]	; (8003924 <StarLPTask+0x5cc>)
 80036ea:	4c92      	ldr	r4, [pc, #584]	; (8003934 <StarLPTask+0x5dc>)
 80036ec:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	f103 0219 	add.w	r2, r3, #25
 80036f4:	4291      	cmp	r1, r2
 80036f6:	f200 8209 	bhi.w	8003b0c <StarLPTask+0x7b4>
				if (jabbertimeout) {
 80036fa:	4a8f      	ldr	r2, [pc, #572]	; (8003938 <StarLPTask+0x5e0>)
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	b10b      	cbz	r3, 8003704 <StarLPTask+0x3ac>
					jabbertimeout--;		// de-arm count
 8003700:	3b01      	subs	r3, #1
 8003702:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 8003704:	4b87      	ldr	r3, [pc, #540]	; (8003924 <StarLPTask+0x5cc>)
 8003706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003708:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 800370a:	9b08      	ldr	r3, [sp, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 821f 	beq.w	8003b50 <StarLPTask+0x7f8>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8003712:	4b8a      	ldr	r3, [pc, #552]	; (800393c <StarLPTask+0x5e4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 81ce 	beq.w	8003ab8 <StarLPTask+0x760>
 800371c:	4b88      	ldr	r3, [pc, #544]	; (8003940 <StarLPTask+0x5e8>)
			} else if (lcd_currentpage == 1) {
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	f000 8278 	beq.w	8003c16 <StarLPTask+0x8be>
				lcd_showvars();
 8003726:	4a87      	ldr	r2, [pc, #540]	; (8003944 <StarLPTask+0x5ec>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8003728:	f107 030b 	add.w	r3, r7, #11
				lcd_showvars();
 800372c:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8003730:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003734:	3a01      	subs	r2, #1
 8003736:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 800373a:	f080 80df 	bcs.w	80038fc <StarLPTask+0x5a4>
			lcd_trigplot();		// update lcd trigger and noise plots
 800373e:	4a82      	ldr	r2, [pc, #520]	; (8003948 <StarLPTask+0x5f0>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8003740:	f107 031b 	add.w	r3, r7, #27
			lcd_trigplot();		// update lcd trigger and noise plots
 8003744:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8003748:	4a80      	ldr	r2, [pc, #512]	; (800394c <StarLPTask+0x5f4>)
 800374a:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800374e:	d31a      	bcc.n	8003786 <StarLPTask+0x42e>
			if (agc) {
 8003750:	882b      	ldrh	r3, [r5, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 820f 	beq.w	8003b76 <StarLPTask+0x81e>
				trigsin10sec = trigs - prevtrigs;
 8003758:	4b73      	ldr	r3, [pc, #460]	; (8003928 <StarLPTask+0x5d0>)
 800375a:	4c7d      	ldr	r4, [pc, #500]	; (8003950 <StarLPTask+0x5f8>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 800375c:	4e7d      	ldr	r6, [pc, #500]	; (8003954 <StarLPTask+0x5fc>)
				trigsin10sec = trigs - prevtrigs;
 800375e:	681a      	ldr	r2, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003760:	8831      	ldrh	r1, [r6, #0]
				trigsin10sec = trigs - prevtrigs;
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80039b8 <StarLPTask+0x660>
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003768:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 800376a:	eba2 0303 	sub.w	r3, r2, r3
 800376e:	f8c8 3000 	str.w	r3, [r8]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003772:	d802      	bhi.n	800377a <StarLPTask+0x422>
					if (trigsin10sec < MINTRIGS10S)
 8003774:	2b01      	cmp	r3, #1
 8003776:	f240 82d5 	bls.w	8003d24 <StarLPTask+0x9cc>
				if (trigsin10sec > MAXTRIGS10S)
 800377a:	2b0a      	cmp	r3, #10
 800377c:	f200 824e 	bhi.w	8003c1c <StarLPTask+0x8c4>
			gainchanged = 0;
 8003780:	2300      	movs	r3, #0
				prevtrigs = trigs;
 8003782:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 8003784:	9308      	str	r3, [sp, #32]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 8003786:	f640 338c 	movw	r3, #2956	; 0xb8c
 800378a:	429f      	cmp	r7, r3
 800378c:	d94e      	bls.n	800382c <StarLPTask+0x4d4>
			if (gpsgood == 0) {	// gps is not talking to us
 800378e:	4b72      	ldr	r3, [pc, #456]	; (8003958 <StarLPTask+0x600>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 81f1 	bne.w	8003b7a <StarLPTask+0x822>
				printf("GPS serial comms problem?\n");
 8003798:	4870      	ldr	r0, [pc, #448]	; (800395c <StarLPTask+0x604>)
 800379a:	f021 fea7 	bl	80254ec <puts>
				if (gpsbadcount++ > 9) {
 800379e:	4970      	ldr	r1, [pc, #448]	; (8003960 <StarLPTask+0x608>)
 80037a0:	680b      	ldr	r3, [r1, #0]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	2b09      	cmp	r3, #9
 80037a6:	600a      	str	r2, [r1, #0]
 80037a8:	f300 82c7 	bgt.w	8003d3a <StarLPTask+0x9e2>
			if (psensor == MPL115A2) {
 80037ac:	4b6d      	ldr	r3, [pc, #436]	; (8003964 <StarLPTask+0x60c>)
			gpsgood = 0;			// reset the good flag
 80037ae:	2200      	movs	r2, #0
 80037b0:	4969      	ldr	r1, [pc, #420]	; (8003958 <StarLPTask+0x600>)
			if (psensor == MPL115A2) {
 80037b2:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 80037b4:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	f000 8224 	beq.w	8003c04 <StarLPTask+0x8ac>
			} else if (psensor == MPL3115A2) {
 80037bc:	2b02      	cmp	r3, #2
 80037be:	f000 8243 	beq.w	8003c48 <StarLPTask+0x8f0>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80037c2:	4b69      	ldr	r3, [pc, #420]	; (8003968 <StarLPTask+0x610>)
			tenmstimer = 0;
 80037c4:	2700      	movs	r7, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80037c6:	4a57      	ldr	r2, [pc, #348]	; (8003924 <StarLPTask+0x5cc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80037ce:	0e1a      	lsrs	r2, r3, #24
 80037d0:	4866      	ldr	r0, [pc, #408]	; (800396c <StarLPTask+0x614>)
 80037d2:	b289      	uxth	r1, r1
 80037d4:	9202      	str	r2, [sp, #8]
 80037d6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80037da:	9201      	str	r2, [sp, #4]
 80037dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	9200      	str	r2, [sp, #0]
 80037e4:	f242 722d 	movw	r2, #10029	; 0x272d
 80037e8:	f021 fde4 	bl	80253b4 <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 80037ec:	4b60      	ldr	r3, [pc, #384]	; (8003970 <StarLPTask+0x618>)
 80037ee:	4a61      	ldr	r2, [pc, #388]	; (8003974 <StarLPTask+0x61c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	494d      	ldr	r1, [pc, #308]	; (8003928 <StarLPTask+0x5d0>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	485f      	ldr	r0, [pc, #380]	; (8003978 <StarLPTask+0x620>)
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	9304      	str	r3, [sp, #16]
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <StarLPTask+0x624>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	9302      	str	r3, [sp, #8]
 8003806:	4b5e      	ldr	r3, [pc, #376]	; (8003980 <StarLPTask+0x628>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	9303      	str	r3, [sp, #12]
 800380c:	4b5d      	ldr	r3, [pc, #372]	; (8003984 <StarLPTask+0x62c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	4b50      	ldr	r3, [pc, #320]	; (8003954 <StarLPTask+0x5fc>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <StarLPTask+0x630>)
 800381a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800381e:	4b5b      	ldr	r3, [pc, #364]	; (800398c <StarLPTask+0x634>)
 8003820:	9305      	str	r3, [sp, #20]
 8003822:	4b5b      	ldr	r3, [pc, #364]	; (8003990 <StarLPTask+0x638>)
 8003824:	6809      	ldr	r1, [r1, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f021 fdc4 	bl	80253b4 <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 800382c:	9907      	ldr	r1, [sp, #28]
 800382e:	4a59      	ldr	r2, [pc, #356]	; (8003994 <StarLPTask+0x63c>)
 8003830:	f101 0315 	add.w	r3, r1, #21
 8003834:	b29b      	uxth	r3, r3
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a57      	ldr	r2, [pc, #348]	; (8003998 <StarLPTask+0x640>)
 800383c:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8003840:	d30b      	bcc.n	800385a <StarLPTask+0x502>
 8003842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003844:	4299      	cmp	r1, r3
 8003846:	d008      	beq.n	800385a <StarLPTask+0x502>
			if (boosttrys > 0)		// timer for boost gain oscillating
 8003848:	4a54      	ldr	r2, [pc, #336]	; (800399c <StarLPTask+0x644>)
 800384a:	8813      	ldrh	r3, [r2, #0]
 800384c:	b10b      	cbz	r3, 8003852 <StarLPTask+0x4fa>
				boosttrys--;
 800384e:	3b01      	subs	r3, #1
 8003850:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();		// add a point to the pressure plot
 8003852:	f7ff f8bf 	bl	80029d4 <lcd_pressplot>
 8003856:	9b07      	ldr	r3, [sp, #28]
 8003858:	9309      	str	r3, [sp, #36]	; 0x24
		if (onesectimer > 900) {			// 15 mins
 800385a:	f240 3385 	movw	r3, #901	; 0x385
 800385e:	9a07      	ldr	r2, [sp, #28]
 8003860:	429a      	cmp	r2, r3
 8003862:	f47f ae6e 	bne.w	8003542 <StarLPTask+0x1ea>
			requestapisn();	//update s/n and udp target (reboot on fail)
 8003866:	f004 fc39 	bl	80080dc <requestapisn>
			onesectimer = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	9307      	str	r3, [sp, #28]
 800386e:	e668      	b.n	8003542 <StarLPTask+0x1ea>
					printf("OFF\n");
 8003870:	4640      	mov	r0, r8
 8003872:	f021 fe3b 	bl	80254ec <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8003876:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 800387a:	e68d      	b.n	8003598 <StarLPTask+0x240>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003882:	4827      	ldr	r0, [pc, #156]	; (8003920 <StarLPTask+0x5c8>)
 8003884:	f008 fa16 	bl	800bcb4 <HAL_GPIO_WritePin>
 8003888:	e71d      	b.n	80036c6 <StarLPTask+0x36e>
			if (soundenabled) {
 800388a:	4b45      	ldr	r3, [pc, #276]	; (80039a0 <StarLPTask+0x648>)
			trigs = statuspkt.trigcount;
 800388c:	6fca      	ldr	r2, [r1, #124]	; 0x7c
			if (soundenabled) {
 800388e:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 8003890:	6002      	str	r2, [r0, #0]
			if (soundenabled) {
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 8191 	bne.w	8003bba <StarLPTask+0x862>
 8003898:	4e42      	ldr	r6, [pc, #264]	; (80039a4 <StarLPTask+0x64c>)
				printf("sem wait 1a\n");
 800389a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80039bc <StarLPTask+0x664>
 800389e:	e002      	b.n	80038a6 <StarLPTask+0x54e>
 80038a0:	4640      	mov	r0, r8
 80038a2:	f021 fe23 	bl	80254ec <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80038a6:	2101      	movs	r1, #1
 80038a8:	6830      	ldr	r0, [r6, #0]
 80038aa:	f012 fbad 	bl	8016008 <xQueueSemaphoreTake>
 80038ae:	2801      	cmp	r0, #1
 80038b0:	d1f6      	bne.n	80038a0 <StarLPTask+0x548>
			strcpy(str, ctime(&epochtime));		// ctime
 80038b2:	483d      	ldr	r0, [pc, #244]	; (80039a8 <StarLPTask+0x650>)
 80038b4:	f020 fb5e 	bl	8023f74 <ctime>
 80038b8:	4601      	mov	r1, r0
 80038ba:	4650      	mov	r0, sl
 80038bc:	f021 fff5 	bl	80258aa <stpcpy>
			i = 0;
 80038c0:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 80038c2:	eba0 000a 	sub.w	r0, r0, sl
 80038c6:	4939      	ldr	r1, [pc, #228]	; (80039ac <StarLPTask+0x654>)
 80038c8:	e008      	b.n	80038dc <StarLPTask+0x584>
				if ((str[i] != '\n') && (str[i] != '\r'))
 80038ca:	f81a 2003 	ldrb.w	r2, [sl, r3]
 80038ce:	2a0a      	cmp	r2, #10
 80038d0:	d003      	beq.n	80038da <StarLPTask+0x582>
 80038d2:	2a0d      	cmp	r2, #13
 80038d4:	d001      	beq.n	80038da <StarLPTask+0x582>
					trigtimestr[n++] = str[i];
 80038d6:	550a      	strb	r2, [r1, r4]
 80038d8:	3401      	adds	r4, #1
				i++;
 80038da:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 80038dc:	4283      	cmp	r3, r0
 80038de:	d3f4      	bcc.n	80038ca <StarLPTask+0x572>
			trigtimestr[n] = '\0';
 80038e0:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80038e2:	6830      	ldr	r0, [r6, #0]
			trigtimestr[n] = '\0';
 80038e4:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80038e6:	461a      	mov	r2, r3
 80038e8:	4619      	mov	r1, r3
 80038ea:	f012 f8f3 	bl	8015ad4 <xQueueGenericSend>
 80038ee:	2801      	cmp	r0, #1
 80038f0:	f43f aef0 	beq.w	80036d4 <StarLPTask+0x37c>
				printf("semaphore 1a release failed\n");
 80038f4:	482e      	ldr	r0, [pc, #184]	; (80039b0 <StarLPTask+0x658>)
 80038f6:	f021 fdf9 	bl	80254ec <puts>
 80038fa:	e6eb      	b.n	80036d4 <StarLPTask+0x37c>
			if (ledsenabled)
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <StarLPTask+0x5c0>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80038fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003902:	4807      	ldr	r0, [pc, #28]	; (8003920 <StarLPTask+0x5c8>)
			if (ledsenabled)
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	2a00      	cmp	r2, #0
 8003908:	f000 8161 	beq.w	8003bce <StarLPTask+0x876>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800390c:	f008 f9ec 	bl	800bce8 <HAL_GPIO_TogglePin>
 8003910:	4e24      	ldr	r6, [pc, #144]	; (80039a4 <StarLPTask+0x64c>)
				printf("sem wait 1b\n");
 8003912:	4c28      	ldr	r4, [pc, #160]	; (80039b4 <StarLPTask+0x65c>)
 8003914:	e057      	b.n	80039c6 <StarLPTask+0x66e>
 8003916:	bf00      	nop
 8003918:	20000278 	.word	0x20000278
 800391c:	2000074c 	.word	0x2000074c
 8003920:	40020c00 	.word	0x40020c00
 8003924:	20002f3c 	.word	0x20002f3c
 8003928:	20002d58 	.word	0x20002d58
 800392c:	cccccccd 	.word	0xcccccccd
 8003930:	19999999 	.word	0x19999999
 8003934:	20002d1c 	.word	0x20002d1c
 8003938:	20000704 	.word	0x20000704
 800393c:	20001a04 	.word	0x20001a04
 8003940:	20001a00 	.word	0x20001a00
 8003944:	c28f5c29 	.word	0xc28f5c29
 8003948:	26e978d5 	.word	0x26e978d5
 800394c:	00418937 	.word	0x00418937
 8003950:	20002d48 	.word	0x20002d48
 8003954:	20000002 	.word	0x20000002
 8003958:	20002dfc 	.word	0x20002dfc
 800395c:	0802b100 	.word	0x0802b100
 8003960:	200020dc 	.word	0x200020dc
 8003964:	2000307c 	.word	0x2000307c
 8003968:	20002d3c 	.word	0x20002d3c
 800396c:	0802b15c 	.word	0x0802b15c
 8003970:	20003084 	.word	0x20003084
 8003974:	10624dd3 	.word	0x10624dd3
 8003978:	0802b178 	.word	0x0802b178
 800397c:	20003074 	.word	0x20003074
 8003980:	20003080 	.word	0x20003080
 8003984:	20003078 	.word	0x20003078
 8003988:	20003070 	.word	0x20003070
 800398c:	2000005c 	.word	0x2000005c
 8003990:	20000700 	.word	0x20000700
 8003994:	a4fa4fa5 	.word	0xa4fa4fa5
 8003998:	016c16c1 	.word	0x016c16c1
 800399c:	20002ff0 	.word	0x20002ff0
 80039a0:	2000027e 	.word	0x2000027e
 80039a4:	20002d50 	.word	0x20002d50
 80039a8:	20002df0 	.word	0x20002df0
 80039ac:	20000244 	.word	0x20000244
 80039b0:	0802af7c 	.word	0x0802af7c
 80039b4:	0802afa8 	.word	0x0802afa8
 80039b8:	20002d5c 	.word	0x20002d5c
 80039bc:	0802af70 	.word	0x0802af70
 80039c0:	4620      	mov	r0, r4
 80039c2:	f021 fd93 	bl	80254ec <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80039c6:	2101      	movs	r1, #1
 80039c8:	6830      	ldr	r0, [r6, #0]
 80039ca:	f012 fb1d 	bl	8016008 <xQueueSemaphoreTake>
 80039ce:	2801      	cmp	r0, #1
 80039d0:	d1f6      	bne.n	80039c0 <StarLPTask+0x668>
			strcpy(str, ctime(&epochtime));
 80039d2:	48a7      	ldr	r0, [pc, #668]	; (8003c70 <StarLPTask+0x918>)
 80039d4:	f020 face 	bl	8023f74 <ctime>
 80039d8:	4601      	mov	r1, r0
 80039da:	4650      	mov	r0, sl
			sprintf(statstr,
 80039dc:	4ca5      	ldr	r4, [pc, #660]	; (8003c74 <StarLPTask+0x91c>)
			strcpy(str, ctime(&epochtime));
 80039de:	f021 ff64 	bl	80258aa <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 80039e2:	eba0 000a 	sub.w	r0, r0, sl
 80039e6:	2200      	movs	r2, #0
			sprintf(nowtimestr, "\"%s\"", str);
 80039e8:	49a3      	ldr	r1, [pc, #652]	; (8003c78 <StarLPTask+0x920>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 80039ea:	f100 0380 	add.w	r3, r0, #128	; 0x80
			sprintf(nowtimestr, "\"%s\"", str);
 80039ee:	48a3      	ldr	r0, [pc, #652]	; (8003c7c <StarLPTask+0x924>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 80039f0:	446b      	add	r3, sp
 80039f2:	f803 2c55 	strb.w	r2, [r3, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 80039f6:	4652      	mov	r2, sl
 80039f8:	f021 fec6 	bl	8025788 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 80039fc:	4ba0      	ldr	r3, [pc, #640]	; (8003c80 <StarLPTask+0x928>)
 80039fe:	4aa1      	ldr	r2, [pc, #644]	; (8003c84 <StarLPTask+0x92c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	49a0      	ldr	r1, [pc, #640]	; (8003c88 <StarLPTask+0x930>)
 8003a06:	48a1      	ldr	r0, [pc, #644]	; (8003c8c <StarLPTask+0x934>)
 8003a08:	f021 febe 	bl	8025788 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8003a0c:	4ba0      	ldr	r3, [pc, #640]	; (8003c90 <StarLPTask+0x938>)
 8003a0e:	4aa1      	ldr	r2, [pc, #644]	; (8003c94 <StarLPTask+0x93c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	499c      	ldr	r1, [pc, #624]	; (8003c88 <StarLPTask+0x930>)
 8003a16:	48a0      	ldr	r0, [pc, #640]	; (8003c98 <StarLPTask+0x940>)
 8003a18:	f021 feb6 	bl	8025788 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8003a1c:	4b9f      	ldr	r3, [pc, #636]	; (8003c9c <StarLPTask+0x944>)
			sprintf(statstr,
 8003a1e:	49a0      	ldr	r1, [pc, #640]	; (8003ca0 <StarLPTask+0x948>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8003a20:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8003a24:	489f      	ldr	r0, [pc, #636]	; (8003ca4 <StarLPTask+0x94c>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bfb8      	it	lt
 8003a2a:	425b      	neglt	r3, r3
			sprintf(statstr,
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	4b9d      	ldr	r3, [pc, #628]	; (8003ca8 <StarLPTask+0x950>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	4b9b      	ldr	r3, [pc, #620]	; (8003cac <StarLPTask+0x954>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	9303      	str	r3, [sp, #12]
 8003a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a44:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	4b99      	ldr	r3, [pc, #612]	; (8003cb0 <StarLPTask+0x958>)
 8003a4a:	f021 fe9d 	bl	8025788 <siprintf>
			if (gpslocked) {
 8003a4e:	4b99      	ldr	r3, [pc, #612]	; (8003cb4 <StarLPTask+0x95c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80be 	beq.w	8003bd4 <StarLPTask+0x87c>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 8003a58:	7ee2      	ldrb	r2, [r4, #27]
 8003a5a:	69e3      	ldr	r3, [r4, #28]
 8003a5c:	6a21      	ldr	r1, [r4, #32]
 8003a5e:	4896      	ldr	r0, [pc, #600]	; (8003cb8 <StarLPTask+0x960>)
 8003a60:	9100      	str	r1, [sp, #0]
 8003a62:	4996      	ldr	r1, [pc, #600]	; (8003cbc <StarLPTask+0x964>)
 8003a64:	f021 fe90 	bl	8025788 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6830      	ldr	r0, [r6, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f012 f830 	bl	8015ad4 <xQueueGenericSend>
 8003a74:	2801      	cmp	r0, #1
 8003a76:	d002      	beq.n	8003a7e <StarLPTask+0x726>
				printf("semaphore 1b release failed\n");
 8003a78:	4891      	ldr	r0, [pc, #580]	; (8003cc0 <StarLPTask+0x968>)
 8003a7a:	f021 fd37 	bl	80254ec <puts>
			onesectimer++;
 8003a7e:	9b07      	ldr	r3, [sp, #28]
				printf("sem wait 1c\n");
 8003a80:	4c90      	ldr	r4, [pc, #576]	; (8003cc4 <StarLPTask+0x96c>)
			onesectimer++;
 8003a82:	3301      	adds	r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	9307      	str	r3, [sp, #28]
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8003a88:	e002      	b.n	8003a90 <StarLPTask+0x738>
				printf("sem wait 1c\n");
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f021 fd2e 	bl	80254ec <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8003a90:	2119      	movs	r1, #25
 8003a92:	6830      	ldr	r0, [r6, #0]
 8003a94:	f012 fab8 	bl	8016008 <xQueueSemaphoreTake>
 8003a98:	2801      	cmp	r0, #1
 8003a9a:	d1f6      	bne.n	8003a8a <StarLPTask+0x732>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6830      	ldr	r0, [r6, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f012 f816 	bl	8015ad4 <xQueueGenericSend>
 8003aa8:	2801      	cmp	r0, #1
 8003aaa:	d002      	beq.n	8003ab2 <StarLPTask+0x75a>
				printf("semaphore 1c release failed\n");
 8003aac:	4886      	ldr	r0, [pc, #536]	; (8003cc8 <StarLPTask+0x970>)
 8003aae:	f021 fd1d 	bl	80254ec <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 8003ab2:	f7fe fe91 	bl	80027d8 <lcd_trigplot>
 8003ab6:	e642      	b.n	800373e <StarLPTask+0x3e6>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8003ab8:	4c84      	ldr	r4, [pc, #528]	; (8003ccc <StarLPTask+0x974>)
 8003aba:	9a07      	ldr	r2, [sp, #28]
 8003abc:	8823      	ldrh	r3, [r4, #0]
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	4b83      	ldr	r3, [pc, #524]	; (8003cd0 <StarLPTask+0x978>)
 8003ac2:	f43f ae2c 	beq.w	800371e <StarLPTask+0x3c6>
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	2a00      	cmp	r2, #0
 8003aca:	f47f ae28 	bne.w	800371e <StarLPTask+0x3c6>
				timeinfo = *localtime(&localepochtime);
 8003ace:	4881      	ldr	r0, [pc, #516]	; (8003cd4 <StarLPTask+0x97c>)
 8003ad0:	f020 fb72 	bl	80241b8 <localtime>
 8003ad4:	4e80      	ldr	r6, [pc, #512]	; (8003cd8 <StarLPTask+0x980>)
 8003ad6:	4684      	mov	ip, r0
 8003ad8:	46b6      	mov	lr, r6
 8003ada:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003ade:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
				lastsec = onesectimer;
 8003ae2:	9b07      	ldr	r3, [sp, #28]
 8003ae4:	8023      	strh	r3, [r4, #0]
				timeinfo = *localtime(&localepochtime);
 8003ae6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003aea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003aee:	f8dc 3000 	ldr.w	r3, [ip]
 8003af2:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();
 8003af6:	f7fe fc5d 	bl	80023b4 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 8003afa:	4b78      	ldr	r3, [pc, #480]	; (8003cdc <StarLPTask+0x984>)
 8003afc:	69f2      	ldr	r2, [r6, #28]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	f43f ae10 	beq.w	8003726 <StarLPTask+0x3ce>
					lcd_date();
 8003b06:	f7fe fcab 	bl	8002460 <lcd_date>
 8003b0a:	e60c      	b.n	8003726 <StarLPTask+0x3ce>
				statuspkt.jabcnt++;
 8003b0c:	4959      	ldr	r1, [pc, #356]	; (8003c74 <StarLPTask+0x91c>)
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8003b0e:	4874      	ldr	r0, [pc, #464]	; (8003ce0 <StarLPTask+0x988>)
				statuspkt.jabcnt++;
 8003b10:	f8b1 2086 	ldrh.w	r2, [r1, #134]	; 0x86
 8003b14:	3201      	adds	r2, #1
 8003b16:	b292      	uxth	r2, r2
 8003b18:	f8a1 2086 	strh.w	r2, [r1, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8003b1c:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8003b1e:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8003b20:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 8003b22:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <StarLPTask+0x98c>)
 8003b24:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8003b26:	f021 fc45 	bl	80253b4 <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 8003b2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <StarLPTask+0x990>)
 8003b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b30:	b93b      	cbnz	r3, 8003b42 <StarLPTask+0x7ea>
					if (trigthresh < 4095)
 8003b32:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <StarLPTask+0x954>)
 8003b34:	f640 71fe 	movw	r1, #4094	; 0xffe
 8003b38:	8813      	ldrh	r3, [r2, #0]
 8003b3a:	428b      	cmp	r3, r1
 8003b3c:	d801      	bhi.n	8003b42 <StarLPTask+0x7ea>
						trigthresh++;
 8003b3e:	3301      	adds	r3, #1
 8003b40:	8013      	strh	r3, [r2, #0]
				if (agc) {
 8003b42:	882b      	ldrh	r3, [r5, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 8088 	bne.w	8003c5a <StarLPTask+0x902>
				jabtrigcnt = statuspkt.trigcount;
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <StarLPTask+0x91c>)
 8003b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b4e:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8003b50:	4b66      	ldr	r3, [pc, #408]	; (8003cec <StarLPTask+0x994>)
 8003b52:	4a67      	ldr	r2, [pc, #412]	; (8003cf0 <StarLPTask+0x998>)
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	6813      	ldr	r3, [r2, #0]
 8003b58:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	dd49      	ble.n	8003bf2 <StarLPTask+0x89a>
					if (trigthresh < 4095)
 8003b5e:	4853      	ldr	r0, [pc, #332]	; (8003cac <StarLPTask+0x954>)
 8003b60:	f640 74fe 	movw	r4, #4094	; 0xffe
 8003b64:	8803      	ldrh	r3, [r0, #0]
 8003b66:	42a3      	cmp	r3, r4
 8003b68:	d801      	bhi.n	8003b6e <StarLPTask+0x816>
						trigthresh++;
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6011      	str	r1, [r2, #0]
 8003b72:	9308      	str	r3, [sp, #32]
 8003b74:	e5cd      	b.n	8003712 <StarLPTask+0x3ba>
			gainchanged = 0;
 8003b76:	9308      	str	r3, [sp, #32]
 8003b78:	e605      	b.n	8003786 <StarLPTask+0x42e>
				gpsbadcount = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	4a5d      	ldr	r2, [pc, #372]	; (8003cf4 <StarLPTask+0x99c>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e614      	b.n	80037ac <StarLPTask+0x454>
	printf("%s----------------------------------------------------------------------------\n", str);
 8003b82:	495d      	ldr	r1, [pc, #372]	; (8003cf8 <StarLPTask+0x9a0>)
 8003b84:	485d      	ldr	r0, [pc, #372]	; (8003cfc <StarLPTask+0x9a4>)
 8003b86:	f021 fc15 	bl	80253b4 <iprintf>
			printf("Downloading...\n");
 8003b8a:	485d      	ldr	r0, [pc, #372]	; (8003d00 <StarLPTask+0x9a8>)
 8003b8c:	f021 fcae 	bl	80254ec <puts>
	printf("%s----------------------------------------------------------------------------\n", str);
 8003b90:	495c      	ldr	r1, [pc, #368]	; (8003d04 <StarLPTask+0x9ac>)
 8003b92:	485a      	ldr	r0, [pc, #360]	; (8003cfc <StarLPTask+0x9a4>)
 8003b94:	f021 fc0e 	bl	80253b4 <iprintf>
			while (http_downloading) {
 8003b98:	f8d9 3000 	ldr.w	r3, [r9]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f43f acdb 	beq.w	8003558 <StarLPTask+0x200>
				HAL_IWDG_Refresh(&hiwdg);
 8003ba2:	4c59      	ldr	r4, [pc, #356]	; (8003d08 <StarLPTask+0x9b0>)
				osDelay(50);
 8003ba4:	2032      	movs	r0, #50	; 0x32
 8003ba6:	f011 fc6b 	bl	8015480 <osDelay>
				HAL_IWDG_Refresh(&hiwdg);
 8003baa:	4620      	mov	r0, r4
 8003bac:	f008 ff06 	bl	800c9bc <HAL_IWDG_Refresh>
			while (http_downloading) {
 8003bb0:	f8d9 3000 	ldr.w	r3, [r9]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f5      	bne.n	8003ba4 <StarLPTask+0x84c>
 8003bb8:	e4ce      	b.n	8003558 <StarLPTask+0x200>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8003bba:	2308      	movs	r3, #8
 8003bbc:	4a53      	ldr	r2, [pc, #332]	; (8003d0c <StarLPTask+0x9b4>)
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4853      	ldr	r0, [pc, #332]	; (8003d10 <StarLPTask+0x9b8>)
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003bc8:	f005 f8a2 	bl	8008d10 <HAL_DAC_Start_DMA>
 8003bcc:	e664      	b.n	8003898 <StarLPTask+0x540>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 8003bce:	f008 f871 	bl	800bcb4 <HAL_GPIO_WritePin>
 8003bd2:	e69d      	b.n	8003910 <StarLPTask+0x5b8>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 8003bd4:	f8df c148 	ldr.w	ip, [pc, #328]	; 8003d20 <StarLPTask+0x9c8>
 8003bd8:	4c37      	ldr	r4, [pc, #220]	; (8003cb8 <StarLPTask+0x960>)
 8003bda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003be0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003be6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8003bea:	f844 0b04 	str.w	r0, [r4], #4
 8003bee:	8021      	strh	r1, [r4, #0]
 8003bf0:	e73a      	b.n	8003a68 <StarLPTask+0x710>
				if (n == 0) {		// no triggers in last 100mS
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1bb      	bne.n	8003b6e <StarLPTask+0x816>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 8003bf6:	482d      	ldr	r0, [pc, #180]	; (8003cac <StarLPTask+0x954>)
 8003bf8:	8803      	ldrh	r3, [r0, #0]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d9b7      	bls.n	8003b6e <StarLPTask+0x816>
						trigthresh--;
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	8003      	strh	r3, [r0, #0]
 8003c02:	e7b4      	b.n	8003b6e <StarLPTask+0x816>
				if (getpressure115() != HAL_OK) {
 8003c04:	f001 ff5e 	bl	8005ac4 <getpressure115>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	f43f adda 	beq.w	80037c2 <StarLPTask+0x46a>
					printf("MPL115A2 error\n\r");
 8003c0e:	4841      	ldr	r0, [pc, #260]	; (8003d14 <StarLPTask+0x9bc>)
 8003c10:	f021 fbd0 	bl	80253b4 <iprintf>
 8003c14:	e5d5      	b.n	80037c2 <StarLPTask+0x46a>
				lcd_showvars();
 8003c16:	f7fe fc5b 	bl	80024d0 <lcd_showvars>
 8003c1a:	e584      	b.n	8003726 <StarLPTask+0x3ce>
					gainchanged = bumppga(-1);
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	f001 ff0a 	bl	8005a38 <bumppga>
 8003c24:	b203      	sxth	r3, r0
 8003c26:	9308      	str	r3, [sp, #32]
				prevtrigs = trigs;
 8003c28:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <StarLPTask+0x9c0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8003c2e:	9b08      	ldr	r3, [sp, #32]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f77f ada8 	ble.w	8003786 <StarLPTask+0x42e>
					if (trigthresh < (4095 - 10))
 8003c36:	8833      	ldrh	r3, [r6, #0]
 8003c38:	f640 72f4 	movw	r2, #4084	; 0xff4
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	f63f ada2 	bhi.w	8003786 <StarLPTask+0x42e>
						trigthresh += 5;
 8003c42:	3305      	adds	r3, #5
 8003c44:	8033      	strh	r3, [r6, #0]
 8003c46:	e59e      	b.n	8003786 <StarLPTask+0x42e>
				if (getpressure3115() != HAL_OK) {
 8003c48:	f001 ffea 	bl	8005c20 <getpressure3115>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	f43f adb8 	beq.w	80037c2 <StarLPTask+0x46a>
					printf("MPL3115A2 error\n\r");
 8003c52:	4832      	ldr	r0, [pc, #200]	; (8003d1c <StarLPTask+0x9c4>)
 8003c54:	f021 fbae 	bl	80253b4 <iprintf>
 8003c58:	e5b3      	b.n	80037c2 <StarLPTask+0x46a>
					gainchanged = bumppga(-1);	// decrease gain
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5e:	f001 feeb 	bl	8005a38 <bumppga>
 8003c62:	b203      	sxth	r3, r0
 8003c64:	9308      	str	r3, [sp, #32]
				jabtrigcnt = statuspkt.trigcount;
 8003c66:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <StarLPTask+0x91c>)
 8003c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6a:	6023      	str	r3, [r4, #0]
 8003c6c:	e54d      	b.n	800370a <StarLPTask+0x3b2>
 8003c6e:	bf00      	nop
 8003c70:	20002df0 	.word	0x20002df0
 8003c74:	20002f3c 	.word	0x20002f3c
 8003c78:	0802afb4 	.word	0x0802afb4
 8003c7c:	2000005c 	.word	0x2000005c
 8003c80:	20003084 	.word	0x20003084
 8003c84:	20003080 	.word	0x20003080
 8003c88:	0802afbc 	.word	0x0802afbc
 8003c8c:	20000238 	.word	0x20000238
 8003c90:	20003074 	.word	0x20003074
 8003c94:	20003078 	.word	0x20003078
 8003c98:	2000007c 	.word	0x2000007c
 8003c9c:	20000750 	.word	0x20000750
 8003ca0:	0802afc4 	.word	0x0802afc4
 8003ca4:	20000130 	.word	0x20000130
 8003ca8:	200006fc 	.word	0x200006fc
 8003cac:	20000002 	.word	0x20000002
 8003cb0:	20000244 	.word	0x20000244
 8003cb4:	200030e8 	.word	0x200030e8
 8003cb8:	2000001c 	.word	0x2000001c
 8003cbc:	0802b06c 	.word	0x0802b06c
 8003cc0:	0802b0bc 	.word	0x0802b0bc
 8003cc4:	0802b0d8 	.word	0x0802b0d8
 8003cc8:	0802b0e4 	.word	0x0802b0e4
 8003ccc:	20000010 	.word	0x20000010
 8003cd0:	20001a00 	.word	0x20001a00
 8003cd4:	20001a98 	.word	0x20001a98
 8003cd8:	20001e74 	.word	0x20001e74
 8003cdc:	200019f4 	.word	0x200019f4
 8003ce0:	0802af98 	.word	0x0802af98
 8003ce4:	20000704 	.word	0x20000704
 8003ce8:	20003070 	.word	0x20003070
 8003cec:	20000758 	.word	0x20000758
 8003cf0:	20002d24 	.word	0x20002d24
 8003cf4:	200020dc 	.word	0x200020dc
 8003cf8:	0802a17c 	.word	0x0802a17c
 8003cfc:	0802aedc 	.word	0x0802aedc
 8003d00:	0802af2c 	.word	0x0802af2c
 8003d04:	0802a290 	.word	0x0802a290
 8003d08:	200025d4 	.word	0x200025d4
 8003d0c:	0802b428 	.word	0x0802b428
 8003d10:	200021dc 	.word	0x200021dc
 8003d14:	0802b134 	.word	0x0802b134
 8003d18:	20002d58 	.word	0x20002d58
 8003d1c:	0802b148 	.word	0x0802b148
 8003d20:	0802b094 	.word	0x0802b094
						gainchanged = bumppga(1);
 8003d24:	2001      	movs	r0, #1
 8003d26:	f001 fe87 	bl	8005a38 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8003d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d2e:	2b0a      	cmp	r3, #10
 8003d30:	f63f af74 	bhi.w	8003c1c <StarLPTask+0x8c4>
						gainchanged = bumppga(1);
 8003d34:	b203      	sxth	r3, r0
 8003d36:	9308      	str	r3, [sp, #32]
 8003d38:	e776      	b.n	8003c28 <StarLPTask+0x8d0>
					printf("GPS bad - rebooting...\n");
 8003d3a:	4808      	ldr	r0, [pc, #32]	; (8003d5c <StarLPTask+0xa04>)
 8003d3c:	f021 fbd6 	bl	80254ec <puts>
					osDelay(3000);
 8003d40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003d44:	f011 fb9c 	bl	8015480 <osDelay>
					rebootme(5);
 8003d48:	2005      	movs	r0, #5
 8003d4a:	f7ff fae3 	bl	8003314 <rebootme>
 8003d4e:	4605      	mov	r5, r0
		printf("Console Rx Queue not created... rebooting...\n");
 8003d50:	4803      	ldr	r0, [pc, #12]	; (8003d60 <StarLPTask+0xa08>)
 8003d52:	f021 fbcb 	bl	80254ec <puts>
		rebootme(0);
 8003d56:	4628      	mov	r0, r5
 8003d58:	f7ff fadc 	bl	8003314 <rebootme>
 8003d5c:	0802b11c 	.word	0x0802b11c
 8003d60:	0802ad84 	.word	0x0802ad84

08003d64 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8003d64:	2100      	movs	r1, #0
 8003d66:	f005 b86f 	b.w	8008e48 <HAL_DAC_Stop_DMA>
 8003d6a:	bf00      	nop

08003d6c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8003d6e:	6803      	ldr	r3, [r0, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d02d      	beq.n	8003dd8 <HAL_TIM_IC_CaptureCallback+0x6c>
}
 8003d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003d7e:	4c1a      	ldr	r4, [pc, #104]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8003d80:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x80>)
 8003d82:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8003d84:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003d86:	3101      	adds	r1, #1
 8003d88:	481a      	ldr	r0, [pc, #104]	; (8003df4 <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 8003d8a:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003d8c:	fba3 5301 	umull	r5, r3, r3, r1
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003d96:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8003d9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003d9e:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8003da0:	4815      	ldr	r0, [pc, #84]	; (8003df8 <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 8003da2:	b1b2      	cbz	r2, 8003dd2 <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003da4:	f007 ffa0 	bl	800bce8 <HAL_GPIO_TogglePin>
		diff = lastcap;
 8003da8:	4d14      	ldr	r5, [pc, #80]	; (8003dfc <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 8003daa:	2100      	movs	r1, #0
		diff = lastcap;
 8003dac:	4e14      	ldr	r6, [pc, #80]	; (8003e00 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003dae:	462b      	mov	r3, r5
 8003db0:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8003db4:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8003dbc:	4298      	cmp	r0, r3
		sum += data[i];
 8003dbe:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8003dc0:	d1f9      	bne.n	8003db6 <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 8003dc2:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 8003dc6:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8003dc8:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003dca:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8003dcc:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003dce:	6033      	str	r3, [r6, #0]
}
 8003dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8003dd2:	f007 ff6f 	bl	800bcb4 <HAL_GPIO_WritePin>
 8003dd6:	e7e7      	b.n	8003da8 <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8003dd8:	480b      	ldr	r0, [pc, #44]	; (8003e08 <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 8003dda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8003dde:	f021 bb85 	b.w	80254ec <puts>
 8003de2:	bf00      	nop
 8003de4:	40000800 	.word	0x40000800
 8003de8:	20002f3c 	.word	0x20002f3c
 8003dec:	88888889 	.word	0x88888889
 8003df0:	20000278 	.word	0x20000278
 8003df4:	2000075c 	.word	0x2000075c
 8003df8:	40020c00 	.word	0x40020c00
 8003dfc:	20002098 	.word	0x20002098
 8003e00:	20002d20 	.word	0x20002d20
 8003e04:	20000770 	.word	0x20000770
 8003e08:	0802b1d8 	.word	0x0802b1d8

08003e0c <getboardpcb>:
void getboardpcb() {
 8003e0c:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4804      	ldr	r0, [pc, #16]	; (8003e24 <getboardpcb+0x18>)
 8003e12:	f007 ff3d 	bl	800bc90 <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 8003e16:	2800      	cmp	r0, #0
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <getboardpcb+0x1c>)
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2216      	moveq	r2, #22
 8003e1e:	220b      	movne	r2, #11
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bd08      	pop	{r3, pc}
 8003e24:	40020800 	.word	0x40020800
 8003e28:	2000208c 	.word	0x2000208c

08003e2c <uart2_rxdone>:
void uart2_rxdone() {
 8003e2c:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 8003e2e:	4807      	ldr	r0, [pc, #28]	; (8003e4c <uart2_rxdone+0x20>)
 8003e30:	2300      	movs	r3, #0
 8003e32:	4907      	ldr	r1, [pc, #28]	; (8003e50 <uart2_rxdone+0x24>)
 8003e34:	461a      	mov	r2, r3
 8003e36:	6800      	ldr	r0, [r0, #0]
 8003e38:	f011 ff4c 	bl	8015cd4 <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4904      	ldr	r1, [pc, #16]	; (8003e50 <uart2_rxdone+0x24>)
 8003e40:	4804      	ldr	r0, [pc, #16]	; (8003e54 <uart2_rxdone+0x28>)
}
 8003e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003e46:	f00f ba45 	b.w	80132d4 <HAL_UART_Receive_IT>
 8003e4a:	bf00      	nop
 8003e4c:	20002094 	.word	0x20002094
 8003e50:	20002090 	.word	0x20002090
 8003e54:	20002980 	.word	0x20002980

08003e58 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8003e58:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e5a:	6803      	ldr	r3, [r0, #0]
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d029      	beq.n	8003eb4 <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8003e60:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d02d      	beq.n	8003ec2 <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8003e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6a:	d02c      	beq.n	8003ec6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8003e6c:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d030      	beq.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8003e72:	4a22      	ldr	r2, [pc, #136]	; (8003efc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d005      	beq.n	8003e84 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8003e78:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8003e7e:	4821      	ldr	r0, [pc, #132]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003e80:	f021 bb34 	b.w	80254ec <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003e84:	b510      	push	{r4, lr}
		t1sec++;
 8003e86:	4920      	ldr	r1, [pc, #128]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8003e88:	4c20      	ldr	r4, [pc, #128]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8003e8a:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8003e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8003e8e:	4820      	ldr	r0, [pc, #128]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8003e90:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8003e92:	3301      	adds	r3, #1
		if (netup)
 8003e94:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8003e96:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8003e98:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8003e9a:	b110      	cbz	r0, 8003ea2 <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8003e9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b9c3      	cbnz	r3, 8003eda <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8003eaa:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8003eac:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8003eae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 8003eb2:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 8003eb4:	4a19      	ldr	r2, [pc, #100]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003eb6:	6813      	ldr	r3, [r2, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	6013      	str	r3, [r2, #0]
		return;
 8003ebc:	4770      	bx	lr
		HAL_IncTick();
 8003ebe:	f004 b96b 	b.w	8008198 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 8003ec2:	f7fc bce3 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8003ec6:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003ec8:	4b15      	ldr	r3, [pc, #84]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003eca:	4816      	ldr	r0, [pc, #88]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003ecc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	f021 ba70 	b.w	80253b4 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 8003ed4:	4814      	ldr	r0, [pc, #80]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003ed6:	f021 bb09 	b.w	80254ec <puts>
			statuspkt.gpsuptime++;
 8003eda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003edc:	3301      	adds	r3, #1
 8003ede:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8003ee0:	f001 f888 	bl	8004ff4 <calcepoch32>
				epochvalid = 1;
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003ee6:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8003ee8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8003eec:	701a      	strb	r2, [r3, #0]
}
 8003eee:	bd10      	pop	{r4, pc}
 8003ef0:	40002000 	.word	0x40002000
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40001000 	.word	0x40001000
 8003f00:	40001800 	.word	0x40001800
 8003f04:	0802b228 	.word	0x0802b228
 8003f08:	20002d54 	.word	0x20002d54
 8003f0c:	20002f3c 	.word	0x20002f3c
 8003f10:	20000752 	.word	0x20000752
 8003f14:	200030e8 	.word	0x200030e8
 8003f18:	200030e0 	.word	0x200030e0
 8003f1c:	20002d4c 	.word	0x20002d4c
 8003f20:	20000770 	.word	0x20000770
 8003f24:	0802b1e8 	.word	0x0802b1e8
 8003f28:	0802b20c 	.word	0x0802b20c

08003f2c <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8003f2c:	4c02      	ldr	r4, [pc, #8]	; (8003f38 <Error_Handler+0xc>)
void Error_Handler(void) {
 8003f2e:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8003f30:	4620      	mov	r0, r4
 8003f32:	f021 fadb 	bl	80254ec <puts>
	while (1) {
 8003f36:	e7fb      	b.n	8003f30 <Error_Handler+0x4>
 8003f38:	0802b250 	.word	0x0802b250

08003f3c <SystemClock_Config>:
void SystemClock_Config(void) {
 8003f3c:	b530      	push	{r4, r5, lr}
 8003f3e:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003f40:	2234      	movs	r2, #52	; 0x34
 8003f42:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f44:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003f46:	a807      	add	r0, sp, #28
 8003f48:	f020 fa96 	bl	8024478 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003f52:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003f56:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 8003f58:	f009 fac0 	bl	800d4dc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4a20      	ldr	r2, [pc, #128]	; (8003fe0 <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003f5e:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f60:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003f64:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003f68:	6411      	str	r1, [r2, #64]	; 0x40
 8003f6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f6c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003f70:	9200      	str	r2, [sp, #0]
 8003f72:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003f7a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8003f7c:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f7e:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f80:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f86:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003f88:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f8a:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f90:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f92:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003f96:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003f9c:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 8003f9e:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fa0:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 8003fa2:	23d8      	movs	r3, #216	; 0xd8
 8003fa4:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8003fa8:	2306      	movs	r3, #6
 8003faa:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003fac:	f009 fad8 	bl	800d560 <HAL_RCC_OscConfig>
 8003fb0:	b9a0      	cbnz	r0, 8003fdc <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003fb2:	f009 fa9b 	bl	800d4ec <HAL_PWREx_EnableOverDrive>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	b980      	cbnz	r0, 8003fdc <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fba:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003fbc:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8003fc0:	a802      	add	r0, sp, #8
 8003fc2:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fc4:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003fcc:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003fd0:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8003fd2:	f009 fd9b 	bl	800db0c <HAL_RCC_ClockConfig>
 8003fd6:	b908      	cbnz	r0, 8003fdc <SystemClock_Config+0xa0>
}
 8003fd8:	b015      	add	sp, #84	; 0x54
 8003fda:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8003fdc:	f7ff ffa6 	bl	8003f2c <Error_Handler>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40007000 	.word	0x40007000

08003fe8 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003fec:	228c      	movs	r2, #140	; 0x8c
 8003fee:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003ff0:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003ff2:	a801      	add	r0, sp, #4
 8003ff4:	f020 fa40 	bl	8024478 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003ff8:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003ffa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003ffe:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004000:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004002:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8004004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004008:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800400a:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800400c:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800400e:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8004010:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004012:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8004016:	f009 fedf 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 800401a:	b908      	cbnz	r0, 8004020 <PeriphCommonClock_Config+0x38>
}
 800401c:	b024      	add	sp, #144	; 0x90
 800401e:	bd10      	pop	{r4, pc}
		Error_Handler();
 8004020:	f7ff ff84 	bl	8003f2c <Error_Handler>

08004024 <main>:
int main(void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b0dc      	sub	sp, #368	; 0x170
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{

	__ASM volatile ("dsb 0xF":::"memory");
 8004028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800402c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004030:	4bc2      	ldr	r3, [pc, #776]	; (800433c <main+0x318>)
 8004032:	2400      	movs	r4, #0
 8004034:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 8004038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800403c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004046:	615a      	str	r2, [r3, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8004048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800404c:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004050:	4dbb      	ldr	r5, [pc, #748]	; (8004340 <main+0x31c>)
	HAL_Init();
 8004052:	f004 f88f 	bl	8008174 <HAL_Init>
	SystemClock_Config();
 8004056:	f7ff ff71 	bl	8003f3c <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800405a:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 800405c:	f7ff ffc4 	bl	8003fe8 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004060:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8004062:	4622      	mov	r2, r4
 8004064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004068:	48b6      	ldr	r0, [pc, #728]	; (8004344 <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800406a:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406e:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004070:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 8004074:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004078:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 800407c:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004080:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004082:	f043 0310 	orr.w	r3, r3, #16
 8004086:	632b      	str	r3, [r5, #48]	; 0x30
 8004088:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	9303      	str	r3, [sp, #12]
 8004090:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004092:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	632b      	str	r3, [r5, #48]	; 0x30
 800409a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80040a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040a6:	f043 0320 	orr.w	r3, r3, #32
 80040aa:	632b      	str	r3, [r5, #48]	; 0x30
 80040ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	9305      	str	r3, [sp, #20]
 80040b4:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80040b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040bc:	632b      	str	r3, [r5, #48]	; 0x30
 80040be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	9306      	str	r3, [sp, #24]
 80040c6:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80040c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	632b      	str	r3, [r5, #48]	; 0x30
 80040d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	9307      	str	r3, [sp, #28]
 80040d8:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80040da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040dc:	f043 0302 	orr.w	r3, r3, #2
 80040e0:	632b      	str	r3, [r5, #48]	; 0x30
 80040e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	9308      	str	r3, [sp, #32]
 80040ea:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80040ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f2:	632b      	str	r3, [r5, #48]	; 0x30
 80040f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	9309      	str	r3, [sp, #36]	; 0x24
 80040fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80040fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004100:	f043 0308 	orr.w	r3, r3, #8
 8004104:	632b      	str	r3, [r5, #48]	; 0x30
 8004106:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	930a      	str	r3, [sp, #40]	; 0x28
 800410e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8004110:	f007 fdd0 	bl	800bcb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8004114:	4622      	mov	r2, r4
 8004116:	f644 0181 	movw	r1, #18561	; 0x4881
 800411a:	488b      	ldr	r0, [pc, #556]	; (8004348 <main+0x324>)
 800411c:	f007 fdca 	bl	800bcb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8004120:	4622      	mov	r2, r4
 8004122:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 8004126:	4889      	ldr	r0, [pc, #548]	; (800434c <main+0x328>)
 8004128:	f007 fdc4 	bl	800bcb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 800412c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8004130:	4887      	ldr	r0, [pc, #540]	; (8004350 <main+0x32c>)
 8004132:	2201      	movs	r2, #1
 8004134:	f007 fdbe 	bl	800bcb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004138:	4622      	mov	r2, r4
 800413a:	2144      	movs	r1, #68	; 0x44
 800413c:	4885      	ldr	r0, [pc, #532]	; (8004354 <main+0x330>)
 800413e:	f007 fdb9 	bl	800bcb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8004142:	4622      	mov	r2, r4
 8004144:	2102      	movs	r1, #2
 8004146:	4882      	ldr	r0, [pc, #520]	; (8004350 <main+0x32c>)
 8004148:	f007 fdb4 	bl	800bcb4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 800414c:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004150:	a955      	add	r1, sp, #340	; 0x154
 8004152:	487e      	ldr	r0, [pc, #504]	; (800434c <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8004154:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004156:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800415a:	f007 faff 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800415e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004162:	a955      	add	r1, sp, #340	; 0x154
 8004164:	487c      	ldr	r0, [pc, #496]	; (8004358 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004166:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004168:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800416e:	f007 faf5 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8004172:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004176:	a955      	add	r1, sp, #340	; 0x154
 8004178:	4872      	ldr	r0, [pc, #456]	; (8004344 <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 800417a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004180:	f007 faec 	bl	800b75c <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004184:	a955      	add	r1, sp, #340	; 0x154
 8004186:	486f      	ldr	r0, [pc, #444]	; (8004344 <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 8004188:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800418c:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004190:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004194:	f007 fae2 	bl	800b75c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004198:	a955      	add	r1, sp, #340	; 0x154
 800419a:	486f      	ldr	r0, [pc, #444]	; (8004358 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800419c:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800419e:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a2:	f007 fadb 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041a6:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a8:	a955      	add	r1, sp, #340	; 0x154
 80041aa:	486c      	ldr	r0, [pc, #432]	; (800435c <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041ac:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b2:	f007 fad3 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80041b6:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ba:	a955      	add	r1, sp, #340	; 0x154
 80041bc:	4862      	ldr	r0, [pc, #392]	; (8004348 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80041be:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c0:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c6:	f007 fac9 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80041ca:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041cc:	a955      	add	r1, sp, #340	; 0x154
 80041ce:	485e      	ldr	r0, [pc, #376]	; (8004348 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80041d0:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d6:	f007 fac1 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 80041da:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041de:	a955      	add	r1, sp, #340	; 0x154
 80041e0:	485c      	ldr	r0, [pc, #368]	; (8004354 <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 80041e2:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041e8:	f007 fab8 	bl	800b75c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041ec:	a955      	add	r1, sp, #340	; 0x154
 80041ee:	4857      	ldr	r0, [pc, #348]	; (800434c <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041f2:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041f6:	f007 fab1 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 80041fa:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041fe:	a955      	add	r1, sp, #340	; 0x154
 8004200:	4852      	ldr	r0, [pc, #328]	; (800434c <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004202:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004204:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004208:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 800420a:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004212:	f007 faa3 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004216:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800421a:	a955      	add	r1, sp, #340	; 0x154
 800421c:	484c      	ldr	r0, [pc, #304]	; (8004350 <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 800421e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004220:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004224:	f007 fa9a 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004228:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800422c:	a955      	add	r1, sp, #340	; 0x154
 800422e:	4848      	ldr	r0, [pc, #288]	; (8004350 <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004230:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004238:	f007 fa90 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 800423c:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800423e:	a955      	add	r1, sp, #340	; 0x154
 8004240:	4844      	ldr	r0, [pc, #272]	; (8004354 <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004242:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004244:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004246:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800424a:	f007 fa87 	bl	800b75c <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800424e:	a955      	add	r1, sp, #340	; 0x154
 8004250:	4840      	ldr	r0, [pc, #256]	; (8004354 <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004252:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800425a:	f007 fa7f 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800425e:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004262:	a955      	add	r1, sp, #340	; 0x154
 8004264:	483c      	ldr	r0, [pc, #240]	; (8004358 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004266:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800426c:	f007 fa76 	bl	800b75c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004270:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	a955      	add	r1, sp, #340	; 0x154
 8004276:	4839      	ldr	r0, [pc, #228]	; (800435c <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004278:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427a:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 800427c:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004280:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004284:	f007 fa6a 	bl	800b75c <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004288:	a955      	add	r1, sp, #340	; 0x154
 800428a:	4831      	ldr	r0, [pc, #196]	; (8004350 <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800428c:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004290:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004294:	f007 fa62 	bl	800b75c <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004298:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 800429a:	4639      	mov	r1, r7
 800429c:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800429e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80042a2:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 80042a4:	632b      	str	r3, [r5, #48]	; 0x30
 80042a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80042b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80042b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042b6:	632b      	str	r3, [r5, #48]	; 0x30
 80042b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 80042ba:	4d29      	ldr	r5, [pc, #164]	; (8004360 <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 80042bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c0:	9302      	str	r3, [sp, #8]
 80042c2:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80042c4:	f004 fbcc 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80042c8:	200b      	movs	r0, #11
 80042ca:	f004 fc13 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80042ce:	4622      	mov	r2, r4
 80042d0:	2106      	movs	r1, #6
 80042d2:	4650      	mov	r0, sl
 80042d4:	f004 fbc4 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80042d8:	4650      	mov	r0, sl
 80042da:	f004 fc0b 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 80042de:	4622      	mov	r2, r4
 80042e0:	2106      	movs	r1, #6
 80042e2:	2010      	movs	r0, #16
 80042e4:	f004 fbbc 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80042e8:	2010      	movs	r0, #16
 80042ea:	f004 fc03 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 80042ee:	4622      	mov	r2, r4
 80042f0:	4639      	mov	r1, r7
 80042f2:	2011      	movs	r0, #17
 80042f4:	f004 fbb4 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80042f8:	2011      	movs	r0, #17
 80042fa:	f004 fbfb 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 80042fe:	4622      	mov	r2, r4
 8004300:	4639      	mov	r1, r7
 8004302:	202f      	movs	r0, #47	; 0x2f
 8004304:	f004 fbac 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004308:	202f      	movs	r0, #47	; 0x2f
 800430a:	f004 fbf3 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 800430e:	4622      	mov	r2, r4
 8004310:	2106      	movs	r1, #6
 8004312:	2039      	movs	r0, #57	; 0x39
 8004314:	f004 fba4 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004318:	2039      	movs	r0, #57	; 0x39
 800431a:	f004 fbeb 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 800431e:	4622      	mov	r2, r4
 8004320:	4649      	mov	r1, r9
 8004322:	203c      	movs	r0, #60	; 0x3c
 8004324:	f004 fb9c 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004328:	203c      	movs	r0, #60	; 0x3c
 800432a:	f004 fbe3 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 800432e:	4622      	mov	r2, r4
 8004330:	4639      	mov	r1, r7
 8004332:	2045      	movs	r0, #69	; 0x45
 8004334:	f004 fb94 	bl	8008a60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004338:	2045      	movs	r0, #69	; 0x45
 800433a:	e013      	b.n	8004364 <main+0x340>
 800433c:	e000ed00 	.word	0xe000ed00
 8004340:	40023800 	.word	0x40023800
 8004344:	40021400 	.word	0x40021400
 8004348:	40020400 	.word	0x40020400
 800434c:	40021000 	.word	0x40021000
 8004350:	40020c00 	.word	0x40020c00
 8004354:	40021800 	.word	0x40021800
 8004358:	40020800 	.word	0x40020800
 800435c:	40020000 	.word	0x40020000
 8004360:	40004400 	.word	0x40004400
 8004364:	f004 fbc6 	bl	8008af4 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8004368:	48bd      	ldr	r0, [pc, #756]	; (8004660 <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 800436a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800436e:	4622      	mov	r2, r4
 8004370:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004372:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004376:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 8004378:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800437c:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 800437e:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004382:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004386:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800438a:	f00f f845 	bl	8013418 <HAL_RS485Ex_Init>
 800438e:	2800      	cmp	r0, #0
 8004390:	f040 8446 	bne.w	8004c20 <main+0xbfc>
	hadc1.Instance = ADC1;
 8004394:	4cb3      	ldr	r4, [pc, #716]	; (8004664 <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004396:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800439a:	4bb3      	ldr	r3, [pc, #716]	; (8004668 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 800439c:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800439e:	9045      	str	r0, [sp, #276]	; 0x114
 80043a0:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80043a2:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80043a4:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80043a6:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043aa:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043ac:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80043ae:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80043b0:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 80043b2:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80043b4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80043b8:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043bc:	4bab      	ldr	r3, [pc, #684]	; (800466c <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 80043be:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80043c2:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80043c6:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043c8:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80043ca:	f003 ff09 	bl	80081e0 <HAL_ADC_Init>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	f040 8426 	bne.w	8004c20 <main+0xbfc>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80043d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80043d8:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80043da:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80043dc:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80043de:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80043e2:	4620      	mov	r0, r4
 80043e4:	f004 fabc 	bl	8008960 <HAL_ADCEx_MultiModeConfigChannel>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	f040 8419 	bne.w	8004c20 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80043ee:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80043f0:	a945      	add	r1, sp, #276	; 0x114
 80043f2:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80043f4:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80043f8:	f004 f9be 	bl	8008778 <HAL_ADC_ConfigChannel>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	f040 840f 	bne.w	8004c20 <main+0xbfc>
	hadc2.Instance = ADC2;
 8004402:	4c9b      	ldr	r4, [pc, #620]	; (8004670 <main+0x64c>)
 8004404:	4b9b      	ldr	r3, [pc, #620]	; (8004674 <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004406:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004408:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800440c:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800440e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004412:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8004414:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8004416:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8004418:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800441a:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 800441e:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004422:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8004426:	4620      	mov	r0, r4
 8004428:	f003 feda 	bl	80081e0 <HAL_ADC_Init>
 800442c:	2800      	cmp	r0, #0
 800442e:	f040 83f7 	bne.w	8004c20 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004432:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004434:	a941      	add	r1, sp, #260	; 0x104
 8004436:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004438:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800443c:	f004 f99c 	bl	8008778 <HAL_ADC_ConfigChannel>
 8004440:	2800      	cmp	r0, #0
 8004442:	f040 83ed 	bne.w	8004c20 <main+0xbfc>
	hadc3.Instance = ADC3;
 8004446:	4c8c      	ldr	r4, [pc, #560]	; (8004678 <main+0x654>)
 8004448:	4b8c      	ldr	r3, [pc, #560]	; (800467c <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800444a:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800444c:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004450:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8004452:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004456:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8004458:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 800445a:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 800445c:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800445e:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8004462:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004466:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 800446a:	4620      	mov	r0, r4
 800446c:	f003 feb8 	bl	80081e0 <HAL_ADC_Init>
 8004470:	2800      	cmp	r0, #0
 8004472:	f040 83d5 	bne.w	8004c20 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004476:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004478:	a93d      	add	r1, sp, #244	; 0xf4
 800447a:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800447c:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004480:	f004 f97a 	bl	8008778 <HAL_ADC_ConfigChannel>
 8004484:	2800      	cmp	r0, #0
 8004486:	f040 83cb 	bne.w	8004c20 <main+0xbfc>
	hrng.Instance = RNG;
 800448a:	487d      	ldr	r0, [pc, #500]	; (8004680 <main+0x65c>)
 800448c:	4b7d      	ldr	r3, [pc, #500]	; (8004684 <main+0x660>)
 800448e:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8004490:	f00a f982 	bl	800e798 <HAL_RNG_Init>
 8004494:	2800      	cmp	r0, #0
 8004496:	f040 83c3 	bne.w	8004c20 <main+0xbfc>
	htim6.Instance = TIM6;
 800449a:	4b7b      	ldr	r3, [pc, #492]	; (8004688 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 800449c:	f642 2230 	movw	r2, #10800	; 0x2a30
 80044a0:	497a      	ldr	r1, [pc, #488]	; (800468c <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80044a2:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a4:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044a6:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 80044aa:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 80044ae:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80044b2:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80044b6:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 80044b8:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80044ba:	f00b ff5d 	bl	8010378 <HAL_TIM_Base_Init>
 80044be:	2800      	cmp	r0, #0
 80044c0:	f040 83ae 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80044c4:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80044c6:	a91f      	add	r1, sp, #124	; 0x7c
 80044c8:	486f      	ldr	r0, [pc, #444]	; (8004688 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80044ca:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80044d0:	f00d fbbc 	bl	8011c4c <HAL_TIMEx_MasterConfigSynchronization>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	f040 83a3 	bne.w	8004c20 <main+0xbfc>
	htim3.Instance = TIM3;
 80044da:	4c6d      	ldr	r4, [pc, #436]	; (8004690 <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 80044dc:	f642 2330 	movw	r3, #10800	; 0x2a30
 80044e0:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 80046b4 <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044e4:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80044e6:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80044e8:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80044ea:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ec:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ee:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80044f0:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044f2:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 80044f4:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 80044f8:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80044fc:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8004500:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8004504:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004508:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800450c:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004510:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 8004512:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004514:	f00b ff30 	bl	8010378 <HAL_TIM_Base_Init>
 8004518:	2800      	cmp	r0, #0
 800451a:	f040 8381 	bne.w	8004c20 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800451e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004522:	a939      	add	r1, sp, #228	; 0xe4
 8004524:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004526:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004528:	f00b f9bc 	bl	800f8a4 <HAL_TIM_ConfigClockSource>
 800452c:	2800      	cmp	r0, #0
 800452e:	f040 8377 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8004532:	4620      	mov	r0, r4
 8004534:	f00c f8bc 	bl	80106b0 <HAL_TIM_PWM_Init>
 8004538:	2800      	cmp	r0, #0
 800453a:	f040 8371 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800453e:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004540:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004542:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004544:	4620      	mov	r0, r4
 8004546:	f00d fb81 	bl	8011c4c <HAL_TIMEx_MasterConfigSynchronization>
 800454a:	2800      	cmp	r0, #0
 800454c:	f040 8368 	bne.w	8004c20 <main+0xbfc>
	sConfigOC.Pulse = 10;
 8004550:	230a      	movs	r3, #10
 8004552:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004556:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004558:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800455a:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800455c:	a955      	add	r1, sp, #340	; 0x154
 800455e:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 8004560:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004564:	f00c fc22 	bl	8010dac <HAL_TIM_PWM_ConfigChannel>
 8004568:	4605      	mov	r5, r0
 800456a:	2800      	cmp	r0, #0
 800456c:	f040 8358 	bne.w	8004c20 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim3);
 8004570:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8004572:	4c48      	ldr	r4, [pc, #288]	; (8004694 <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 8004574:	f002 fa4a 	bl	8006a0c <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 8004578:	4b47      	ldr	r3, [pc, #284]	; (8004698 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800457a:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800457c:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 800457e:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 8004580:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004584:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 8004586:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004588:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800458c:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004590:	f00b fef2 	bl	8010378 <HAL_TIM_Base_Init>
 8004594:	2800      	cmp	r0, #0
 8004596:	f040 8343 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800459a:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800459c:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 800459e:	a919      	add	r1, sp, #100	; 0x64
 80045a0:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80045a2:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 80045a4:	f00d fb52 	bl	8011c4c <HAL_TIMEx_MasterConfigSynchronization>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	f040 8339 	bne.w	8004c20 <main+0xbfc>
	htim1.Instance = TIM1;
 80045ae:	4c3b      	ldr	r4, [pc, #236]	; (800469c <main+0x678>)
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045b2:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 80045b4:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 80045b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80045ba:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 80045bc:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80045be:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 80045c2:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c6:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 80045ca:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80045ce:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80045d2:	4620      	mov	r0, r4
 80045d4:	f00b fed0 	bl	8010378 <HAL_TIM_Base_Init>
 80045d8:	2800      	cmp	r0, #0
 80045da:	f040 8321 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80045de:	a935      	add	r1, sp, #212	; 0xd4
 80045e0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045e2:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80045e4:	f00b f95e 	bl	800f8a4 <HAL_TIM_ConfigClockSource>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	f040 8319 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045ee:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80045f0:	a916      	add	r1, sp, #88	; 0x58
 80045f2:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045f4:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80045f6:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80045fa:	f00d fb27 	bl	8011c4c <HAL_TIMEx_MasterConfigSynchronization>
 80045fe:	4603      	mov	r3, r0
 8004600:	2800      	cmp	r0, #0
 8004602:	f040 830d 	bne.w	8004c20 <main+0xbfc>
	hcrc.Instance = CRC;
 8004606:	4827      	ldr	r0, [pc, #156]	; (80046a4 <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004608:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800460a:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800460c:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800460e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 8004612:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <main+0x684>)
 8004614:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8004616:	f004 fa9b 	bl	8008b50 <HAL_CRC_Init>
 800461a:	2800      	cmp	r0, #0
 800461c:	f040 8300 	bne.w	8004c20 <main+0xbfc>
	htim2.Instance = TIM2;
 8004620:	4c22      	ldr	r4, [pc, #136]	; (80046ac <main+0x688>)
 8004622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004626:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004628:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 800462a:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 800462c:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800462e:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004630:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004632:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004634:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004636:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004638:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800463a:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 800463c:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800463e:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004642:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8004646:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800464a:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800464e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004652:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004656:	4620      	mov	r0, r4
 8004658:	f00b fe8e 	bl	8010378 <HAL_TIM_Base_Init>
 800465c:	e02c      	b.n	80046b8 <main+0x694>
 800465e:	bf00      	nop
 8004660:	20002980 	.word	0x20002980
 8004664:	200020e0 	.word	0x200020e0
 8004668:	40012000 	.word	0x40012000
 800466c:	0f000001 	.word	0x0f000001
 8004670:	20002128 	.word	0x20002128
 8004674:	40012100 	.word	0x40012100
 8004678:	20002170 	.word	0x20002170
 800467c:	40012200 	.word	0x40012200
 8004680:	200025e4 	.word	0x200025e4
 8004684:	50060800 	.word	0x50060800
 8004688:	200028e8 	.word	0x200028e8
 800468c:	40001000 	.word	0x40001000
 8004690:	20002804 	.word	0x20002804
 8004694:	20002934 	.word	0x20002934
 8004698:	40001400 	.word	0x40001400
 800469c:	20002720 	.word	0x20002720
 80046a0:	40010000 	.word	0x40010000
 80046a4:	200021b8 	.word	0x200021b8
 80046a8:	40023000 	.word	0x40023000
 80046ac:	200027b8 	.word	0x200027b8
 80046b0:	ee6b2800 	.word	0xee6b2800
 80046b4:	40000400 	.word	0x40000400
 80046b8:	2800      	cmp	r0, #0
 80046ba:	f040 82b1 	bne.w	8004c20 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80046c2:	a92d      	add	r1, sp, #180	; 0xb4
 80046c4:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046c6:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80046c8:	f00b f8ec 	bl	800f8a4 <HAL_TIM_ConfigClockSource>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	f040 82a7 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80046d2:	4620      	mov	r0, r4
 80046d4:	f00c f8ba 	bl	801084c <HAL_TIM_IC_Init>
 80046d8:	2800      	cmp	r0, #0
 80046da:	f040 82a1 	bne.w	8004c20 <main+0xbfc>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80046de:	2704      	movs	r7, #4
 80046e0:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80046e2:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80046e4:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 80046e6:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80046e8:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80046ea:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80046ee:	f00b fbb3 	bl	800fe58 <HAL_TIM_SlaveConfigSynchro>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f040 8294 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046f8:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80046fa:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046fc:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80046fe:	4620      	mov	r0, r4
 8004700:	f00d faa4 	bl	8011c4c <HAL_TIMEx_MasterConfigSynchronization>
 8004704:	4602      	mov	r2, r0
 8004706:	2800      	cmp	r0, #0
 8004708:	f040 828a 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800470c:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800470e:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 8004712:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004716:	4620      	mov	r0, r4
 8004718:	f00c fd68 	bl	80111ec <HAL_TIM_IC_ConfigChannel>
 800471c:	2800      	cmp	r0, #0
 800471e:	f040 827f 	bne.w	8004c20 <main+0xbfc>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004722:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8004724:	463a      	mov	r2, r7
 8004726:	a931      	add	r1, sp, #196	; 0xc4
 8004728:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800472a:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 800472c:	f00c fd5e 	bl	80111ec <HAL_TIM_IC_ConfigChannel>
 8004730:	2800      	cmp	r0, #0
 8004732:	f040 8275 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8004736:	a931      	add	r1, sp, #196	; 0xc4
 8004738:	4620      	mov	r0, r4
 800473a:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800473c:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 800473e:	f00c fd55 	bl	80111ec <HAL_TIM_IC_ConfigChannel>
 8004742:	2800      	cmp	r0, #0
 8004744:	f040 826c 	bne.w	8004c20 <main+0xbfc>
	huart6.Instance = USART6;
 8004748:	48c1      	ldr	r0, [pc, #772]	; (8004a50 <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800474a:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 800474c:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 8004750:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 8004752:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004754:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8004756:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8004758:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800475c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 8004760:	4bbc      	ldr	r3, [pc, #752]	; (8004a54 <main+0xa30>)
 8004762:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004766:	2310      	movs	r3, #16
 8004768:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800476a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800476e:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8004770:	f00e fc3a 	bl	8012fe8 <HAL_UART_Init>
 8004774:	2800      	cmp	r0, #0
 8004776:	f040 8253 	bne.w	8004c20 <main+0xbfc>
	hdac.Instance = DAC;
 800477a:	4cb7      	ldr	r4, [pc, #732]	; (8004a58 <main+0xa34>)
 800477c:	4bb7      	ldr	r3, [pc, #732]	; (8004a5c <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 800477e:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8004782:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 8004784:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8004786:	f004 fa9f 	bl	8008cc8 <HAL_DAC_Init>
 800478a:	4602      	mov	r2, r0
 800478c:	2800      	cmp	r0, #0
 800478e:	f040 8247 	bne.w	8004c20 <main+0xbfc>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8004792:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8004794:	4620      	mov	r0, r4
 8004796:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004798:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800479a:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 800479c:	f004 fbf0 	bl	8008f80 <HAL_DAC_ConfigChannel>
 80047a0:	4607      	mov	r7, r0
 80047a2:	2800      	cmp	r0, #0
 80047a4:	f040 823c 	bne.w	8004c20 <main+0xbfc>
	MX_FATFS_Init();
 80047a8:	f00f fc92 	bl	80140d0 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 80047ac:	4cac      	ldr	r4, [pc, #688]	; (8004a60 <main+0xa3c>)
 80047ae:	4bad      	ldr	r3, [pc, #692]	; (8004a64 <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80047b0:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 80047b2:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 80047b4:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 80047b6:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047ba:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 80047bc:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 80047c0:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047c2:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 80047c4:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047c8:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047cc:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80047ce:	f007 fca5 	bl	800c11c <HAL_I2C_Init>
 80047d2:	4601      	mov	r1, r0
 80047d4:	2800      	cmp	r0, #0
 80047d6:	f040 8223 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80047da:	4620      	mov	r0, r4
 80047dc:	f007 fff6 	bl	800c7cc <HAL_I2CEx_ConfigAnalogFilter>
 80047e0:	4601      	mov	r1, r0
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f040 821c 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80047e8:	4620      	mov	r0, r4
 80047ea:	f008 f841 	bl	800c870 <HAL_I2CEx_ConfigDigitalFilter>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f040 8215 	bne.w	8004c20 <main+0xbfc>
	huart4.Instance = UART4;
 80047f6:	489c      	ldr	r0, [pc, #624]	; (8004a68 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 80047f8:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80047fc:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004800:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8004802:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8004804:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8004808:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800480c:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 8004810:	4b96      	ldr	r3, [pc, #600]	; (8004a6c <main+0xa48>)
 8004812:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8004816:	f00e fbe7 	bl	8012fe8 <HAL_UART_Init>
 800481a:	4603      	mov	r3, r0
 800481c:	2800      	cmp	r0, #0
 800481e:	f040 81ff 	bne.w	8004c20 <main+0xbfc>
	huart5.Instance = UART5;
 8004822:	4893      	ldr	r0, [pc, #588]	; (8004a70 <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004824:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 8004828:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800482c:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004830:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004834:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 8004836:	4b8f      	ldr	r3, [pc, #572]	; (8004a74 <main+0xa50>)
 8004838:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 800483a:	f00e fbd5 	bl	8012fe8 <HAL_UART_Init>
 800483e:	4602      	mov	r2, r0
 8004840:	2800      	cmp	r0, #0
 8004842:	f040 81ed 	bne.w	8004c20 <main+0xbfc>
	huart3.Instance = USART3;
 8004846:	488c      	ldr	r0, [pc, #560]	; (8004a78 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8004848:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 800484a:	4b8c      	ldr	r3, [pc, #560]	; (8004a7c <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 800484c:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 800484e:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004850:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004852:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004854:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004858:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800485c:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8004860:	f00e fc70 	bl	8013144 <HAL_MultiProcessor_Init>
 8004864:	4603      	mov	r3, r0
 8004866:	2800      	cmp	r0, #0
 8004868:	f040 81da 	bne.w	8004c20 <main+0xbfc>
	hspi4.Instance = SPI4;
 800486c:	4884      	ldr	r0, [pc, #528]	; (8004a80 <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800486e:	4a85      	ldr	r2, [pc, #532]	; (8004a84 <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004870:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004872:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004876:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800487a:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800487e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8004882:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004886:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800488a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800488e:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 8004890:	2307      	movs	r3, #7
 8004892:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004894:	2308      	movs	r3, #8
 8004896:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8004898:	f00a f8b4 	bl	800ea04 <HAL_SPI_Init>
 800489c:	2800      	cmp	r0, #0
 800489e:	f040 81bf 	bne.w	8004c20 <main+0xbfc>
	hspi3.Instance = SPI3;
 80048a2:	4879      	ldr	r0, [pc, #484]	; (8004a88 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 80048a4:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80048a6:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048aa:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80048ac:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 80048ae:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80048b0:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 80048b2:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80048b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80048bc:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80048c0:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 80048c4:	4b71      	ldr	r3, [pc, #452]	; (8004a8c <main+0xa68>)
 80048c6:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80048c8:	f00a f89c 	bl	800ea04 <HAL_SPI_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2800      	cmp	r0, #0
 80048d0:	f040 81a6 	bne.w	8004c20 <main+0xbfc>
	hspi2.Instance = SPI2;
 80048d4:	486e      	ldr	r0, [pc, #440]	; (8004a90 <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80048d6:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8004ac0 <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80048da:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048dc:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048de:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80048e0:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 80048e2:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80048e8:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80048ec:	f44f 7382 	mov.w	r3, #260	; 0x104
 80048f0:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80048f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80048f8:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80048fa:	2338      	movs	r3, #56	; 0x38
 80048fc:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80048fe:	2308      	movs	r3, #8
 8004900:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8004902:	f00a f87f 	bl	800ea04 <HAL_SPI_Init>
 8004906:	2800      	cmp	r0, #0
 8004908:	f040 818a 	bne.w	8004c20 <main+0xbfc>
	hi2c4.Instance = I2C4;
 800490c:	4c61      	ldr	r4, [pc, #388]	; (8004a94 <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800490e:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 8004910:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <main+0xa74>)
 8004912:	4f62      	ldr	r7, [pc, #392]	; (8004a9c <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 8004914:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004916:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004918:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 800491a:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800491e:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8004922:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 8004924:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8004928:	f007 fbf8 	bl	800c11c <HAL_I2C_Init>
 800492c:	4601      	mov	r1, r0
 800492e:	2800      	cmp	r0, #0
 8004930:	f040 8176 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8004934:	4620      	mov	r0, r4
 8004936:	f007 ff49 	bl	800c7cc <HAL_I2CEx_ConfigAnalogFilter>
 800493a:	4601      	mov	r1, r0
 800493c:	2800      	cmp	r0, #0
 800493e:	f040 816f 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8004942:	4620      	mov	r0, r4
 8004944:	f007 ff94 	bl	800c870 <HAL_I2CEx_ConfigDigitalFilter>
 8004948:	2800      	cmp	r0, #0
 800494a:	f040 8169 	bne.w	8004c20 <main+0xbfc>
	hi2c2.Instance = I2C2;
 800494e:	4c54      	ldr	r4, [pc, #336]	; (8004aa0 <main+0xa7c>)
 8004950:	4b54      	ldr	r3, [pc, #336]	; (8004aa4 <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004952:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 8004954:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 8004956:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 8004958:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 800495c:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004960:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8004964:	4620      	mov	r0, r4
 8004966:	f007 fbd9 	bl	800c11c <HAL_I2C_Init>
 800496a:	4601      	mov	r1, r0
 800496c:	2800      	cmp	r0, #0
 800496e:	f040 8157 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8004972:	4620      	mov	r0, r4
 8004974:	f007 ff2a 	bl	800c7cc <HAL_I2CEx_ConfigAnalogFilter>
 8004978:	4601      	mov	r1, r0
 800497a:	2800      	cmp	r0, #0
 800497c:	f040 8150 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8004980:	4620      	mov	r0, r4
 8004982:	f007 ff75 	bl	800c870 <HAL_I2CEx_ConfigDigitalFilter>
 8004986:	2800      	cmp	r0, #0
 8004988:	f040 814a 	bne.w	8004c20 <main+0xbfc>
	htim4.Instance = TIM4;
 800498c:	4c46      	ldr	r4, [pc, #280]	; (8004aa8 <main+0xa84>)
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004990:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 8004992:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 8004994:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004998:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 800499a:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800499c:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800499e:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a0:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80049a2:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049a4:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80049a6:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80049aa:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 80049ae:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 80049b2:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b6:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80049ba:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80049be:	4620      	mov	r0, r4
 80049c0:	f00b fcda 	bl	8010378 <HAL_TIM_Base_Init>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f040 812b 	bne.w	8004c20 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80049ce:	a929      	add	r1, sp, #164	; 0xa4
 80049d0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049d2:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80049d4:	f00a ff66 	bl	800f8a4 <HAL_TIM_ConfigClockSource>
 80049d8:	2800      	cmp	r0, #0
 80049da:	f040 8121 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 80049de:	4620      	mov	r0, r4
 80049e0:	f00b fd98 	bl	8010514 <HAL_TIM_OC_Init>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	f040 811b 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80049ea:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ec:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80049ee:	a910      	add	r1, sp, #64	; 0x40
 80049f0:	482d      	ldr	r0, [pc, #180]	; (8004aa8 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80049f2:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80049f4:	f00d f92a 	bl	8011c4c <HAL_TIMEx_MasterConfigSynchronization>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	f040 8111 	bne.w	8004c20 <main+0xbfc>
	sConfigOC.Pulse = 550;
 80049fe:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a02:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a04:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8004a06:	2208      	movs	r2, #8
 8004a08:	a94e      	add	r1, sp, #312	; 0x138
 8004a0a:	4827      	ldr	r0, [pc, #156]	; (8004aa8 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8004a0c:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 8004a0e:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8004a10:	f00c f84e 	bl	8010ab0 <HAL_TIM_OC_ConfigChannel>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f040 8103 	bne.w	8004c20 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim4);
 8004a1a:	4823      	ldr	r0, [pc, #140]	; (8004aa8 <main+0xa84>)
 8004a1c:	f001 fff6 	bl	8006a0c <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 8004a20:	4823      	ldr	r0, [pc, #140]	; (8004ab0 <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 8004a22:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004a26:	4f23      	ldr	r7, [pc, #140]	; (8004ab4 <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 8004a28:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004a2c:	2306      	movs	r3, #6
 8004a2e:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8004a32:	f007 ff6d 	bl	800c910 <HAL_IWDG_Init>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	f040 80f1 	bne.w	8004c20 <main+0xbfc>
	htim14.Instance = TIM14;
 8004a3e:	481e      	ldr	r0, [pc, #120]	; (8004ab8 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a40:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a44:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <main+0xa98>)
 8004a48:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 8004a4a:	f642 2330 	movw	r3, #10800	; 0x2a30
 8004a4e:	e039      	b.n	8004ac4 <main+0xaa0>
 8004a50:	20002b90 	.word	0x20002b90
 8004a54:	40011400 	.word	0x40011400
 8004a58:	200021dc 	.word	0x200021dc
 8004a5c:	40007400 	.word	0x40007400
 8004a60:	200024f0 	.word	0x200024f0
 8004a64:	40005400 	.word	0x40005400
 8004a68:	20002a88 	.word	0x20002a88
 8004a6c:	40004c00 	.word	0x40004c00
 8004a70:	20002b0c 	.word	0x20002b0c
 8004a74:	40005000 	.word	0x40005000
 8004a78:	20002a04 	.word	0x20002a04
 8004a7c:	40004800 	.word	0x40004800
 8004a80:	200026bc 	.word	0x200026bc
 8004a84:	40013400 	.word	0x40013400
 8004a88:	20002658 	.word	0x20002658
 8004a8c:	40003c00 	.word	0x40003c00
 8004a90:	200025f4 	.word	0x200025f4
 8004a94:	20002588 	.word	0x20002588
 8004a98:	40006000 	.word	0x40006000
 8004a9c:	20404768 	.word	0x20404768
 8004aa0:	2000253c 	.word	0x2000253c
 8004aa4:	40005800 	.word	0x40005800
 8004aa8:	20002850 	.word	0x20002850
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	200025d4 	.word	0x200025d4
 8004ab4:	40003000 	.word	0x40003000
 8004ab8:	2000276c 	.word	0x2000276c
 8004abc:	40002000 	.word	0x40002000
 8004ac0:	40003800 	.word	0x40003800
 8004ac4:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8004aca:	f00b fc55 	bl	8010378 <HAL_TIM_Base_Init>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f040 80a6 	bne.w	8004c20 <main+0xbfc>
	htim5.Instance = TIM5;
 8004ad4:	4f53      	ldr	r7, [pc, #332]	; (8004c24 <main+0xc00>)
	htim5.Init.Period = 4;
 8004ad6:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 8004ad8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004c58 <main+0xc34>
	htim5.Init.Period = 4;
 8004adc:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 8004ae0:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae2:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae4:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004ae6:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 8004ae8:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004aec:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 8004af0:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004af4:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8004af8:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 8004afa:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8004afe:	f00b fc3b 	bl	8010378 <HAL_TIM_Base_Init>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f040 808c 	bne.w	8004c20 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b08:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8004b0c:	a925      	add	r1, sp, #148	; 0x94
 8004b0e:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b10:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8004b12:	f00a fec7 	bl	800f8a4 <HAL_TIM_ConfigClockSource>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f040 8081 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8004b1e:	4638      	mov	r0, r7
 8004b20:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b22:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b24:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8004b26:	f00d f891 	bl	8011c4c <HAL_TIMEx_MasterConfigSynchronization>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d177      	bne.n	8004c20 <main+0xbfc>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8004b30:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 8004b34:	483c      	ldr	r0, [pc, #240]	; (8004c28 <main+0xc04>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8004b36:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 8004b3a:	493c      	ldr	r1, [pc, #240]	; (8004c2c <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8004b3c:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 8004b40:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 8004b42:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004b46:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 8004b48:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b4c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004b50:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 8004b54:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004b58:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8004b5c:	f00e fa44 	bl	8012fe8 <HAL_UART_Init>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d15c      	bne.n	8004c20 <main+0xbfc>
	huart7.Instance = UART7;
 8004b66:	4832      	ldr	r0, [pc, #200]	; (8004c30 <main+0xc0c>)
	huart7.Init.BaudRate = 115200;
 8004b68:	4a32      	ldr	r2, [pc, #200]	; (8004c34 <main+0xc10>)
	huart7.Init.Parity = UART_PARITY_NONE;
 8004b6a:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b6c:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004b6e:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004b70:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 8004b72:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b76:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 8004b7a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004b7e:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8004b82:	230c      	movs	r3, #12
 8004b84:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8004b86:	f00e fa2f 	bl	8012fe8 <HAL_UART_Init>
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d148      	bne.n	8004c20 <main+0xbfc>
	osMutexDef(myMutex01);
 8004b8e:	2600      	movs	r6, #0
	MX_NVIC_Init();
 8004b90:	f7fe fac6 	bl	8003120 <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8004b94:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 8004b96:	4c28      	ldr	r4, [pc, #160]	; (8004c38 <main+0xc14>)
	osMutexDef(myMutex01);
 8004b98:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8004b9c:	f010 fc9a 	bl	80154d4 <osMutexCreate>
 8004ba0:	4b26      	ldr	r3, [pc, #152]	; (8004c3c <main+0xc18>)
 8004ba2:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8004ba8:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8004bac:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 8004bae:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8004bb2:	f010 fceb 	bl	801558c <osSemaphoreCreate>
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <main+0xc1c>)
 8004bb8:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8004bba:	2101      	movs	r1, #1
 8004bbc:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 8004bbe:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8004bc0:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8004bc2:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <main+0xc20>)
 8004bc6:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8004bc8:	f010 fc62 	bl	8015490 <osTimerCreate>
 8004bcc:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <main+0xc24>)
 8004bce:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 8004bd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bd4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8004bd8:	4628      	mov	r0, r5
 8004bda:	4631      	mov	r1, r6
 8004bdc:	f010 fd50 	bl	8015680 <osMessageCreate>
 8004be0:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <main+0xc28>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8004be2:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8004be4:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8004be6:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8004be8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004bf0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	a84e      	add	r0, sp, #312	; 0x138
 8004bf8:	f010 fc10 	bl	801541c <osThreadCreate>
 8004bfc:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <main+0xc2c>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8004bfe:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004c00:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8004c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c06:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004c0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8004c0e:	4631      	mov	r1, r6
 8004c10:	a855      	add	r0, sp, #340	; 0x154
 8004c12:	f010 fc03 	bl	801541c <osThreadCreate>
 8004c16:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <main+0xc30>)
 8004c18:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8004c1a:	f010 fbf1 	bl	8015400 <osKernelStart>
	while (1) {
 8004c1e:	e7fe      	b.n	8004c1e <main+0xbfa>
		Error_Handler();
 8004c20:	f7ff f984 	bl	8003f2c <Error_Handler>
 8004c24:	2000289c 	.word	0x2000289c
 8004c28:	20002c98 	.word	0x20002c98
 8004c2c:	40007c00 	.word	0x40007c00
 8004c30:	20002c14 	.word	0x20002c14
 8004c34:	40007800 	.word	0x40007800
 8004c38:	08029464 	.word	0x08029464
 8004c3c:	20002d30 	.word	0x20002d30
 8004c40:	20002d50 	.word	0x20002d50
 8004c44:	08003185 	.word	0x08003185
 8004c48:	20002d38 	.word	0x20002d38
 8004c4c:	20002d34 	.word	0x20002d34
 8004c50:	200020d8 	.word	0x200020d8
 8004c54:	20002088 	.word	0x20002088
 8004c58:	40000c00 	.word	0x40000c00

08004c5c <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	b084      	sub	sp, #16
	MX_USB_DEVICE_Init();
 8004c60:	f01e fef0 	bl	8023a44 <MX_USB_DEVICE_Init>
	MX_LWIP_Init();
 8004c64:	f00f fa58 	bl	8014118 <MX_LWIP_Init>
	if ((i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 8004c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c6c:	48a6      	ldr	r0, [pc, #664]	; (8004f08 <StartDefaultTask+0x2ac>)
 8004c6e:	f007 f80f 	bl	800bc90 <HAL_GPIO_ReadPin>
 8004c72:	2801      	cmp	r0, #1
 8004c74:	f000 812b 	beq.w	8004ece <StartDefaultTask+0x272>
		stampboot();	// make sure this runing program is in the boot vector (debug can avoid it)
 8004c78:	f7fb ffb6 	bl	8000be8 <stampboot>
	getboardpcb();		// find our daughterboard
 8004c7c:	f7ff f8c6 	bl	8003e0c <getboardpcb>
	printf("%s----------------------------------------------------------------------------\n", str);
 8004c80:	49a2      	ldr	r1, [pc, #648]	; (8004f0c <StartDefaultTask+0x2b0>)
 8004c82:	48a3      	ldr	r0, [pc, #652]	; (8004f10 <StartDefaultTask+0x2b4>)
 8004c84:	f020 fb96 	bl	80253b4 <iprintf>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8004c88:	4da2      	ldr	r5, [pc, #648]	; (8004f14 <StartDefaultTask+0x2b8>)
 8004c8a:	49a3      	ldr	r1, [pc, #652]	; (8004f18 <StartDefaultTask+0x2bc>)
 8004c8c:	f242 702d 	movw	r0, #10029	; 0x272d
 8004c90:	682c      	ldr	r4, [r5, #0]
 8004c92:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8004c96:	c90e      	ldmia	r1, {r1, r2, r3}
 8004c98:	e9cd 0402 	strd	r0, r4, [sp, #8]
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	2410      	movs	r4, #16
 8004ca0:	e9cd 0400 	strd	r0, r4, [sp]
 8004ca4:	489d      	ldr	r0, [pc, #628]	; (8004f1c <StartDefaultTask+0x2c0>)
 8004ca6:	f020 fb85 	bl	80253b4 <iprintf>
	if ((i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 8004caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cae:	4896      	ldr	r0, [pc, #600]	; (8004f08 <StartDefaultTask+0x2ac>)
 8004cb0:	f006 ffee 	bl	800bc90 <HAL_GPIO_ReadPin>
 8004cb4:	2801      	cmp	r0, #1
 8004cb6:	f000 8107 	beq.w	8004ec8 <StartDefaultTask+0x26c>
		stampboot();	// make sure this runing program is in the boot vector (debug can avoid it)
 8004cba:	f7fb ff95 	bl	8000be8 <stampboot>
	crc_rom();
 8004cbe:	f7fe fa89 	bl	80031d4 <crc_rom>
	if (!(netif_is_link_up(&gnetif))) {
 8004cc2:	4b97      	ldr	r3, [pc, #604]	; (8004f20 <StartDefaultTask+0x2c4>)
 8004cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc8:	075b      	lsls	r3, r3, #29
 8004cca:	d41e      	bmi.n	8004d0a <StartDefaultTask+0xae>
		printf("LAN interface appears disconnected\n\r");
 8004ccc:	4895      	ldr	r0, [pc, #596]	; (8004f24 <StartDefaultTask+0x2c8>)
 8004cce:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8004cd0:	4d95      	ldr	r5, [pc, #596]	; (8004f28 <StartDefaultTask+0x2cc>)
		printf("LAN interface appears disconnected\n\r");
 8004cd2:	f020 fb6f 	bl	80253b4 <iprintf>
			osDelay(50);
 8004cd6:	2032      	movs	r0, #50	; 0x32
 8004cd8:	f010 fbd2 	bl	8015480 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f006 ffe6 	bl	800bcb4 <HAL_GPIO_WritePin>
			osDelay(50);
 8004ce8:	2032      	movs	r0, #50	; 0x32
 8004cea:	f010 fbc9 	bl	8015480 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f006 ffdd 	bl	800bcb4 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8004cfa:	3c01      	subs	r4, #1
 8004cfc:	d1eb      	bne.n	8004cd6 <StartDefaultTask+0x7a>
		printf("************* REBOOTING **************\n");
 8004cfe:	488b      	ldr	r0, [pc, #556]	; (8004f2c <StartDefaultTask+0x2d0>)
 8004d00:	f020 fbf4 	bl	80254ec <puts>
		rebootme(0);
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7fe fb05 	bl	8003314 <rebootme>
	netif = netif_default;
 8004d0a:	4a89      	ldr	r2, [pc, #548]	; (8004f30 <StartDefaultTask+0x2d4>)
	globalfreeze = 0;		// Allow UDP streaming
 8004d0c:	2400      	movs	r4, #0
 8004d0e:	4b89      	ldr	r3, [pc, #548]	; (8004f34 <StartDefaultTask+0x2d8>)
	netif = netif_default;
 8004d10:	6810      	ldr	r0, [r2, #0]
 8004d12:	4e89      	ldr	r6, [pc, #548]	; (8004f38 <StartDefaultTask+0x2dc>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8004d14:	4989      	ldr	r1, [pc, #548]	; (8004f3c <StartDefaultTask+0x2e0>)
	globalfreeze = 0;		// Allow UDP streaming
 8004d16:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 8004d18:	6030      	str	r0, [r6, #0]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8004d1a:	f015 ff57 	bl	801abcc <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8004d1e:	4988      	ldr	r1, [pc, #544]	; (8004f40 <StartDefaultTask+0x2e4>)
 8004d20:	6830      	ldr	r0, [r6, #0]
 8004d22:	f015 ff0f 	bl	801ab44 <netif_set_status_callback>
	t2cap[0] = 44444444;
 8004d26:	4b87      	ldr	r3, [pc, #540]	; (8004f44 <StartDefaultTask+0x2e8>)
 8004d28:	4a87      	ldr	r2, [pc, #540]	; (8004f48 <StartDefaultTask+0x2ec>)
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 8004d2a:	f242 702d 	movw	r0, #10029	; 0x272d
	statuspkt.bconf |= (circuitboardpcb << 8);
 8004d2e:	682d      	ldr	r5, [r5, #0]
	t2cap[0] = 44444444;
 8004d30:	601a      	str	r2, [r3, #0]
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 8004d32:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8004d36:	4b85      	ldr	r3, [pc, #532]	; (8004f4c <StartDefaultTask+0x2f0>)
 8004d38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	statuspkt.minorversion = MINORVERSION;
 8004d3c:	2210      	movs	r2, #16
	statuspkt.majorversion = MAJORVERSION;
 8004d3e:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8004d42:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	statuspkt.adctrigoff = TRIG_THRES;
 8004d46:	2264      	movs	r2, #100	; 0x64
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 8004d48:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
	statuspkt.udppknum = 0;
 8004d4c:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8004d4e:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8004d50:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8004d52:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8004d54:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8004d58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8004d5c:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8004d5e:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 8004d60:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8004d64:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8004d68:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004d6c:	f041 0101 	orr.w	r1, r1, #1
 8004d70:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 8004d74:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004d78:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	newbuild = BUILDNO;				// init to the same
 8004d80:	4b73      	ldr	r3, [pc, #460]	; (8004f50 <StartDefaultTask+0x2f4>)
 8004d82:	6018      	str	r0, [r3, #0]
	initsplat();
 8004d84:	f001 f9cc 	bl	8006120 <initsplat>
	stat = setupneo();
 8004d88:	f000 fa68 	bl	800525c <setupneo>
	if (stat != HAL_OK) {
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	f040 80a1 	bne.w	8004ed4 <StartDefaultTask+0x278>
	printf("Setting up timers\n");
 8004d92:	4870      	ldr	r0, [pc, #448]	; (8004f54 <StartDefaultTask+0x2f8>)
 8004d94:	f020 fbaa 	bl	80254ec <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8004d98:	2300      	movs	r3, #0
 8004d9a:	486f      	ldr	r0, [pc, #444]	; (8004f58 <StartDefaultTask+0x2fc>)
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6800      	ldr	r0, [r0, #0]
 8004da2:	f010 fe97 	bl	8015ad4 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8004da6:	486d      	ldr	r0, [pc, #436]	; (8004f5c <StartDefaultTask+0x300>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8004da8:	4c6d      	ldr	r4, [pc, #436]	; (8004f60 <StartDefaultTask+0x304>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8004daa:	f00a fcb9 	bl	800f720 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8004dae:	2200      	movs	r2, #0
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	4611      	mov	r1, r2
 8004db4:	f00c fbde 	bl	8011574 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8004db8:	2200      	movs	r2, #0
 8004dba:	2104      	movs	r1, #4
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	f00c fbd9 	bl	8011574 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	210c      	movs	r1, #12
 8004dc6:	6820      	ldr	r0, [r4, #0]
 8004dc8:	f00c fbd4 	bl	8011574 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f00c fe1e 	bl	8011a10 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f00c fe1a 	bl	8011a10 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8004ddc:	210c      	movs	r1, #12
 8004dde:	4620      	mov	r0, r4
 8004de0:	f00c fe16 	bl	8011a10 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 8004de4:	2301      	movs	r3, #1
 8004de6:	4a57      	ldr	r2, [pc, #348]	; (8004f44 <StartDefaultTask+0x2e8>)
 8004de8:	2108      	movs	r1, #8
 8004dea:	4620      	mov	r0, r4
 8004dec:	f00c fc20 	bl	8011630 <HAL_TIM_IC_Start_DMA>
 8004df0:	b128      	cbz	r0, 8004dfe <StartDefaultTask+0x1a2>
		printf("TIM_Base_Start_DMA err %i", err);
 8004df2:	4601      	mov	r1, r0
 8004df4:	485b      	ldr	r0, [pc, #364]	; (8004f64 <StartDefaultTask+0x308>)
 8004df6:	f020 fadd 	bl	80253b4 <iprintf>
		Error_Handler();
 8004dfa:	f7ff f897 	bl	8003f2c <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8004dfe:	6820      	ldr	r0, [r4, #0]
 8004e00:	2201      	movs	r2, #1
 8004e02:	2108      	movs	r1, #8
	myip = ip.addr;
 8004e04:	4c58      	ldr	r4, [pc, #352]	; (8004f68 <StartDefaultTask+0x30c>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8004e06:	f00c fbb5 	bl	8011574 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8004e0a:	6833      	ldr	r3, [r6, #0]
	ip = dhcp->offered_ip_addr;
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 8004e10:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d062      	beq.n	8004edc <StartDefaultTask+0x280>
	printf("*****************************************\n");
 8004e16:	4855      	ldr	r0, [pc, #340]	; (8004f6c <StartDefaultTask+0x310>)
 8004e18:	f020 fb68 	bl	80254ec <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8004e1c:	6821      	ldr	r1, [r4, #0]
 8004e1e:	4854      	ldr	r0, [pc, #336]	; (8004f70 <StartDefaultTask+0x314>)
 8004e20:	0e0a      	lsrs	r2, r1, #24
 8004e22:	f3c1 4307 	ubfx	r3, r1, #16, #8
	if (http_downloading) {
 8004e26:	4c53      	ldr	r4, [pc, #332]	; (8004f74 <StartDefaultTask+0x318>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8004e28:	9200      	str	r2, [sp, #0]
 8004e2a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8004e2e:	b2c9      	uxtb	r1, r1
 8004e30:	f020 fac0 	bl	80253b4 <iprintf>
	printf("*****************************************\n");
 8004e34:	484d      	ldr	r0, [pc, #308]	; (8004f6c <StartDefaultTask+0x310>)
 8004e36:	f020 fb59 	bl	80254ec <puts>
	HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8004e3a:	484f      	ldr	r0, [pc, #316]	; (8004f78 <StartDefaultTask+0x31c>)
 8004e3c:	f007 fdbe 	bl	800c9bc <HAL_IWDG_Refresh>
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8004e40:	f003 f8e8 	bl	8008014 <initialapisn>
	HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8004e44:	484c      	ldr	r0, [pc, #304]	; (8004f78 <StartDefaultTask+0x31c>)
 8004e46:	f007 fdb9 	bl	800c9bc <HAL_IWDG_Refresh>
	osDelay(4000);
 8004e4a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004e4e:	f010 fb17 	bl	8015480 <osDelay>
	if (http_downloading) {
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d14a      	bne.n	8004eee <StartDefaultTask+0x292>
	printf("Starting httpd web server\n");
 8004e58:	4848      	ldr	r0, [pc, #288]	; (8004f7c <StartDefaultTask+0x320>)
 8004e5a:	f020 fb47 	bl	80254ec <puts>
	uip = locateudp();
 8004e5e:	4d48      	ldr	r5, [pc, #288]	; (8004f80 <StartDefaultTask+0x324>)
	httpd_init();		// start the www server
 8004e60:	f014 f922 	bl	80190a8 <httpd_init>
	while (lptask_init_done == 0)
 8004e64:	4c47      	ldr	r4, [pc, #284]	; (8004f84 <StartDefaultTask+0x328>)
	init_httpd_ssi();	// set up the embedded tag handler
 8004e66:	f002 ff31 	bl	8007ccc <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8004e6a:	4847      	ldr	r0, [pc, #284]	; (8004f88 <StartDefaultTask+0x32c>)
 8004e6c:	f020 fb3e 	bl	80254ec <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8004e70:	2008      	movs	r0, #8
 8004e72:	4a46      	ldr	r2, [pc, #280]	; (8004f8c <StartDefaultTask+0x330>)
 8004e74:	2100      	movs	r1, #0
 8004e76:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004e7a:	9000      	str	r0, [sp, #0]
 8004e7c:	4844      	ldr	r0, [pc, #272]	; (8004f90 <StartDefaultTask+0x334>)
 8004e7e:	f003 ff47 	bl	8008d10 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 8004e82:	4844      	ldr	r0, [pc, #272]	; (8004f94 <StartDefaultTask+0x338>)
 8004e84:	f00a fb94 	bl	800f5b0 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8004e88:	f011 ff70 	bl	8016d6c <xTaskGetCurrentTaskHandle>
 8004e8c:	4b42      	ldr	r3, [pc, #264]	; (8004f98 <StartDefaultTask+0x33c>)
 8004e8e:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8004e90:	f002 fbd0 	bl	8007634 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8004e94:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <StartDefaultTask+0x340>)
 8004e96:	2201      	movs	r2, #1
	uip = locateudp();
 8004e98:	6028      	str	r0, [r5, #0]
	printf("Waiting for lptask to start\n");
 8004e9a:	4841      	ldr	r0, [pc, #260]	; (8004fa0 <StartDefaultTask+0x344>)
	main_init_done = 1; // let lptask now main has initialised
 8004e9c:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8004e9e:	f020 fb25 	bl	80254ec <puts>
	while (lptask_init_done == 0)
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	b92b      	cbnz	r3, 8004eb2 <StartDefaultTask+0x256>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8004ea6:	2064      	movs	r0, #100	; 0x64
 8004ea8:	f010 faea 	bl	8015480 <osDelay>
	while (lptask_init_done == 0)
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f9      	beq.n	8004ea6 <StartDefaultTask+0x24a>
	startadc();		// start the ADC DMA loop
 8004eb2:	f7fb fe0f 	bl	8000ad4 <startadc>
		startudp(uip);	// should never return
 8004eb6:	6828      	ldr	r0, [r5, #0]
 8004eb8:	f002 fbf2 	bl	80076a0 <startudp>
		printf("UDP stream exited!!!\n\r");
 8004ebc:	4839      	ldr	r0, [pc, #228]	; (8004fa4 <StartDefaultTask+0x348>)
 8004ebe:	f020 fa79 	bl	80253b4 <iprintf>
		rebootme(4);
 8004ec2:	2004      	movs	r0, #4
 8004ec4:	f7fe fa26 	bl	8003314 <rebootme>
		swapboot();	//  swap the boot vector
 8004ec8:	f7fb ffe8 	bl	8000e9c <swapboot>
 8004ecc:	e6f7      	b.n	8004cbe <StartDefaultTask+0x62>
		swapboot();	//  swap the boot vector
 8004ece:	f7fb ffe5 	bl	8000e9c <swapboot>
 8004ed2:	e6d3      	b.n	8004c7c <StartDefaultTask+0x20>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8004ed4:	4834      	ldr	r0, [pc, #208]	; (8004fa8 <StartDefaultTask+0x34c>)
 8004ed6:	f020 fa6d 	bl	80253b4 <iprintf>
 8004eda:	e75a      	b.n	8004d92 <StartDefaultTask+0x136>
		printf("***** DHCP Failed ******\n");
 8004edc:	4833      	ldr	r0, [pc, #204]	; (8004fac <StartDefaultTask+0x350>)
 8004ede:	f020 fb05 	bl	80254ec <puts>
		osDelay(200);
 8004ee2:	20c8      	movs	r0, #200	; 0xc8
 8004ee4:	f010 facc 	bl	8015480 <osDelay>
		rebootme(1);
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f7fe fa13 	bl	8003314 <rebootme>
		printf("Downloading...\n");
 8004eee:	4830      	ldr	r0, [pc, #192]	; (8004fb0 <StartDefaultTask+0x354>)
 8004ef0:	f020 fafc 	bl	80254ec <puts>
		while (http_downloading) {
 8004ef4:	e003      	b.n	8004efe <StartDefaultTask+0x2a2>
			osDelay(1000);
 8004ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004efa:	f010 fac1 	bl	8015480 <osDelay>
		while (http_downloading) {
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f8      	bne.n	8004ef6 <StartDefaultTask+0x29a>
 8004f04:	e7a8      	b.n	8004e58 <StartDefaultTask+0x1fc>
 8004f06:	bf00      	nop
 8004f08:	40020800 	.word	0x40020800
 8004f0c:	0802b268 	.word	0x0802b268
 8004f10:	0802aedc 	.word	0x0802aedc
 8004f14:	2000208c 	.word	0x2000208c
 8004f18:	1ff0f000 	.word	0x1ff0f000
 8004f1c:	0802b26c 	.word	0x0802b26c
 8004f20:	200031bc 	.word	0x200031bc
 8004f24:	0802b2ac 	.word	0x0802b2ac
 8004f28:	40020c00 	.word	0x40020c00
 8004f2c:	0802b2d4 	.word	0x0802b2d4
 8004f30:	2002e0ac 	.word	0x2002e0ac
 8004f34:	200030e4 	.word	0x200030e4
 8004f38:	20002d40 	.word	0x20002d40
 8004f3c:	0800331d 	.word	0x0800331d
 8004f40:	08003179 	.word	0x08003179
 8004f44:	20000770 	.word	0x20000770
 8004f48:	02a62b1c 	.word	0x02a62b1c
 8004f4c:	20002f3c 	.word	0x20002f3c
 8004f50:	20002d44 	.word	0x20002d44
 8004f54:	0802b31c 	.word	0x0802b31c
 8004f58:	20002d50 	.word	0x20002d50
 8004f5c:	200028e8 	.word	0x200028e8
 8004f60:	200027b8 	.word	0x200027b8
 8004f64:	0802b330 	.word	0x0802b330
 8004f68:	20002d3c 	.word	0x20002d3c
 8004f6c:	0802b368 	.word	0x0802b368
 8004f70:	0802b394 	.word	0x0802b394
 8004f74:	200018a8 	.word	0x200018a8
 8004f78:	200025d4 	.word	0x200025d4
 8004f7c:	0802b3bc 	.word	0x0802b3bc
 8004f80:	20002d60 	.word	0x20002d60
 8004f84:	20002d28 	.word	0x20002d28
 8004f88:	0802b3d8 	.word	0x0802b3d8
 8004f8c:	0802b428 	.word	0x0802b428
 8004f90:	200021dc 	.word	0x200021dc
 8004f94:	20002934 	.word	0x20002934
 8004f98:	20000804 	.word	0x20000804
 8004f9c:	20002d2c 	.word	0x20002d2c
 8004fa0:	0802b3f4 	.word	0x0802b3f4
 8004fa4:	0802b410 	.word	0x0802b410
 8004fa8:	0802b2fc 	.word	0x0802b2fc
 8004fac:	0802b34c 	.word	0x0802b34c
 8004fb0:	0802af2c 	.word	0x0802af2c

08004fb4 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop

08004fb8 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8004fb8:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8004fba:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8004fc0:	d009      	beq.n	8004fd6 <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8004fc2:	230a      	movs	r3, #10
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	a901      	add	r1, sp, #4
 8004fc8:	4808      	ldr	r0, [pc, #32]	; (8004fec <__io_putchar+0x34>)
 8004fca:	f00d ff65 	bl	8012e98 <HAL_UART_Transmit>

	return ch;
	}
}
 8004fce:	9801      	ldr	r0, [sp, #4]
 8004fd0:	b003      	add	sp, #12
 8004fd2:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4905      	ldr	r1, [pc, #20]	; (8004ff0 <__io_putchar+0x38>)
 8004fdc:	4803      	ldr	r0, [pc, #12]	; (8004fec <__io_putchar+0x34>)
 8004fde:	f00d ff5b 	bl	8012e98 <HAL_UART_Transmit>
}
 8004fe2:	9801      	ldr	r0, [sp, #4]
 8004fe4:	b003      	add	sp, #12
 8004fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fea:	bf00      	nop
 8004fec:	20002980 	.word	0x20002980
 8004ff0:	0802a12c 	.word	0x0802a12c

08004ff4 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <calcepoch32+0x40>)
 8004ff6:	4810      	ldr	r0, [pc, #64]	; (8005038 <calcepoch32+0x44>)
 8004ff8:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8004ffa:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8004ffc:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005000:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005002:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005004:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8005006:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005008:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 800500c:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 800500e:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005010:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8005012:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 8005014:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8005016:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8005018:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 800501a:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 800501e:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 8005020:	f01f fb0a 	bl	8024638 <mktime>
 8005024:	4a05      	ldr	r2, [pc, #20]	; (800503c <calcepoch32+0x48>)
 8005026:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 8005028:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 800502c:	e9c2 3100 	strd	r3, r1, [r2]
}
 8005030:	4418      	add	r0, r3
 8005032:	bd10      	pop	{r4, pc}
 8005034:	20002f3c 	.word	0x20002f3c
 8005038:	20002f10 	.word	0x20002f10
 800503c:	20002df0 	.word	0x20002df0

08005040 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 8005040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 8005046:	b33a      	cbz	r2, 8005098 <printPacket+0x58>
 8005048:	4607      	mov	r7, r0
 800504a:	4616      	mov	r6, r2
 800504c:	1e4d      	subs	r5, r1, #1
 800504e:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 8005050:	f8df a054 	ldr.w	sl, [pc, #84]	; 80050a8 <printPacket+0x68>
 8005054:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80050ac <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8005058:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80050b0 <printPacket+0x70>
 800505c:	e013      	b.n	8005086 <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 800505e:	f8da 1000 	ldr.w	r1, [sl]
 8005062:	1c4b      	adds	r3, r1, #1
 8005064:	f8ca 3000 	str.w	r3, [sl]
 8005068:	f020 f9a4 	bl	80253b4 <iprintf>
	for (byte i = 0; i < len; i++) {
 800506c:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 800506e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005072:	4641      	mov	r1, r8
 8005074:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 8005076:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8005078:	f020 fb86 	bl	8025788 <siprintf>
		printf(temp);
 800507c:	a801      	add	r0, sp, #4
 800507e:	f020 f999 	bl	80253b4 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005082:	42a6      	cmp	r6, r4
 8005084:	d008      	beq.n	8005098 <printPacket+0x58>
		if (i % 16 == 0) {
 8005086:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 800508a:	463a      	mov	r2, r7
 800508c:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 800508e:	d0e6      	beq.n	800505e <printPacket+0x1e>
			printf(" ");
 8005090:	2020      	movs	r0, #32
 8005092:	f020 f9a7 	bl	80253e4 <putchar>
 8005096:	e7e9      	b.n	800506c <printPacket+0x2c>
	}
	printf("\n\r");
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <printPacket+0x64>)
 800509a:	f020 f98b 	bl	80253b4 <iprintf>
}
 800509e:	b002      	add	sp, #8
 80050a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a4:	0802b424 	.word	0x0802b424
 80050a8:	20002de8 	.word	0x20002de8
 80050ac:	0802bb28 	.word	0x0802bb28
 80050b0:	0802bb34 	.word	0x0802bb34

080050b4 <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 80050b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80050b8:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005158 <disableNmea+0xa4>
void disableNmea() {
 80050bc:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 80050be:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80050c0:	4f24      	ldr	r7, [pc, #144]	; (8005154 <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80050c2:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 80050c6:	f10d 0904 	add.w	r9, sp, #4
 80050ca:	ad04      	add	r5, sp, #16
 80050cc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80050d0:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80050d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80050d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80050dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80050e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80050e4:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 80050e8:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80050ec:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 80050f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050f4:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 80050f8:	f829 2b02 	strh.w	r2, [r9], #2
 80050fc:	0c12      	lsrs	r2, r2, #16
 80050fe:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 8005102:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 8005106:	7829      	ldrb	r1, [r5, #0]
 8005108:	786a      	ldrb	r2, [r5, #1]
 800510a:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 800510e:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 8005110:	f88d 100a 	strb.w	r1, [sp, #10]
 8005114:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 8005118:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 800511c:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8005120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005124:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 8005126:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 8005128:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 800512c:	44e6      	add	lr, ip
 800512e:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 8005132:	d1f5      	bne.n	8005120 <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005134:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005136:	2364      	movs	r3, #100	; 0x64
 8005138:	220b      	movs	r2, #11
 800513a:	a901      	add	r1, sp, #4
 800513c:	4638      	mov	r0, r7
 800513e:	f88d c00d 	strb.w	ip, [sp, #13]
 8005142:	f88d e00e 	strb.w	lr, [sp, #14]
 8005146:	f00d fea7 	bl	8012e98 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 800514a:	4545      	cmp	r5, r8
 800514c:	d1d9      	bne.n	8005102 <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 800514e:	b00f      	add	sp, #60	; 0x3c
 8005150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005154:	20002e84 	.word	0x20002e84
 8005158:	080294cc 	.word	0x080294cc

0800515c <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800515c:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 800515e:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005160:	db1c      	blt.n	800519c <isGoodChecksum+0x40>
 8005162:	4910      	ldr	r1, [pc, #64]	; (80051a4 <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 8005164:	2200      	movs	r2, #0
 8005166:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 800516a:	4613      	mov	r3, r2
 800516c:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 800516e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005172:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005174:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 8005176:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8005178:	441a      	add	r2, r3
 800517a:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800517c:	d1f7      	bne.n	800516e <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <isGoodChecksum+0x4c>)
 8005180:	4408      	add	r0, r1
 8005182:	7981      	ldrb	r1, [r0, #6]
 8005184:	4299      	cmp	r1, r3
 8005186:	d002      	beq.n	800518e <isGoodChecksum+0x32>
 8005188:	2000      	movs	r0, #0
}
 800518a:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 800518e:	79c0      	ldrb	r0, [r0, #7]
 8005190:	1a80      	subs	r0, r0, r2
 8005192:	fab0 f080 	clz	r0, r0
 8005196:	0940      	lsrs	r0, r0, #5
}
 8005198:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 800519c:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 800519e:	4613      	mov	r3, r2
 80051a0:	e7ed      	b.n	800517e <isGoodChecksum+0x22>
 80051a2:	bf00      	nop
 80051a4:	20002d69 	.word	0x20002d69
 80051a8:	20002d68 	.word	0x20002d68

080051ac <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 80051ac:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 80051ae:	4c25      	ldr	r4, [pc, #148]	; (8005244 <IsPacketReady+0x98>)
 80051b0:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d814      	bhi.n	80051e0 <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 80051b6:	4a24      	ldr	r2, [pc, #144]	; (8005248 <IsPacketReady+0x9c>)
 80051b8:	4619      	mov	r1, r3
 80051ba:	5cd2      	ldrb	r2, [r2, r3]
 80051bc:	4282      	cmp	r2, r0
 80051be:	d00a      	beq.n	80051d6 <IsPacketReady+0x2a>
 80051c0:	4a22      	ldr	r2, [pc, #136]	; (800524c <IsPacketReady+0xa0>)
 80051c2:	5cd2      	ldrb	r2, [r2, r3]
 80051c4:	4282      	cmp	r2, r0
 80051c6:	d006      	beq.n	80051d6 <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 80051c8:	2200      	movs	r2, #0
 80051ca:	4921      	ldr	r1, [pc, #132]	; (8005250 <IsPacketReady+0xa4>)
			p = 0;
 80051cc:	4613      	mov	r3, r2
			len = 0;
 80051ce:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 80051d0:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 80051d2:	70e3      	strb	r3, [r4, #3]
}
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 80051d6:	3301      	adds	r3, #1
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <IsPacketReady+0xa8>)
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	5450      	strb	r0, [r2, r1]
 80051de:	e7f7      	b.n	80051d0 <IsPacketReady+0x24>
		if (p < 6) {
 80051e0:	2b05      	cmp	r3, #5
 80051e2:	d917      	bls.n	8005214 <IsPacketReady+0x68>
		if (p == 6) {
 80051e4:	2b06      	cmp	r3, #6
 80051e6:	d01b      	beq.n	8005220 <IsPacketReady+0x74>
 80051e8:	4d19      	ldr	r5, [pc, #100]	; (8005250 <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 80051ea:	682a      	ldr	r2, [r5, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	3207      	adds	r2, #7
 80051f0:	429a      	cmp	r2, r3
 80051f2:	dbed      	blt.n	80051d0 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 80051f4:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 80051f6:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 80051f8:	4e16      	ldr	r6, [pc, #88]	; (8005254 <IsPacketReady+0xa8>)
 80051fa:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 80051fc:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 80051fe:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 8005200:	4293      	cmp	r3, r2
 8005202:	d1e5      	bne.n	80051d0 <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 8005204:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 8005206:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 8005208:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 800520a:	f7ff ffa7 	bl	800515c <isGoodChecksum>
 800520e:	b998      	cbnz	r0, 8005238 <IsPacketReady+0x8c>
				p = 0;
 8005210:	4603      	mov	r3, r0
 8005212:	e7dd      	b.n	80051d0 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005214:	490f      	ldr	r1, [pc, #60]	; (8005254 <IsPacketReady+0xa8>)
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	54c8      	strb	r0, [r1, r3]
			return (0);
 800521a:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 800521c:	70e2      	strb	r2, [r4, #3]
}
 800521e:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 8005220:	490c      	ldr	r1, [pc, #48]	; (8005254 <IsPacketReady+0xa8>)
 8005222:	794d      	ldrb	r5, [r1, #5]
 8005224:	790a      	ldrb	r2, [r1, #4]
 8005226:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 800522a:	4d09      	ldr	r5, [pc, #36]	; (8005250 <IsPacketReady+0xa4>)
 800522c:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 800522e:	682a      	ldr	r2, [r5, #0]
 8005230:	2a7f      	cmp	r2, #127	; 0x7f
 8005232:	d9da      	bls.n	80051ea <IsPacketReady+0x3e>
				return 0;
 8005234:	2000      	movs	r0, #0
}
 8005236:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <IsPacketReady+0xac>)
 800523a:	2201      	movs	r2, #1
					return len;
 800523c:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 800523e:	601a      	str	r2, [r3, #0]
}
 8005240:	bd70      	pop	{r4, r5, r6, pc}
 8005242:	bf00      	nop
 8005244:	20000264 	.word	0x20000264
 8005248:	0802bd24 	.word	0x0802bd24
 800524c:	0802bd28 	.word	0x0802bd28
 8005250:	20002f08 	.word	0x20002f08
 8005254:	20002d68 	.word	0x20002d68
 8005258:	20002dfc 	.word	0x20002dfc

0800525c <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 800525c:	4b74      	ldr	r3, [pc, #464]	; (8005430 <setupneo+0x1d4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 8005262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005264:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005266:	f000 80ba 	beq.w	80053de <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 800526a:	2284      	movs	r2, #132	; 0x84
 800526c:	4971      	ldr	r1, [pc, #452]	; (8005434 <setupneo+0x1d8>)
 800526e:	4872      	ldr	r0, [pc, #456]	; (8005438 <setupneo+0x1dc>)
 8005270:	f01f f8da 	bl	8024428 <memcpy>
		gpsuarttx = huart6;
 8005274:	2284      	movs	r2, #132	; 0x84
 8005276:	496f      	ldr	r1, [pc, #444]	; (8005434 <setupneo+0x1d8>)
 8005278:	4870      	ldr	r0, [pc, #448]	; (800543c <setupneo+0x1e0>)
 800527a:	f01f f8d5 	bl	8024428 <memcpy>
		GPSUARTRX = USART6;
 800527e:	4b70      	ldr	r3, [pc, #448]	; (8005440 <setupneo+0x1e4>)
 8005280:	4a70      	ldr	r2, [pc, #448]	; (8005444 <setupneo+0x1e8>)
 8005282:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8005284:	2201      	movs	r2, #1
 8005286:	4970      	ldr	r1, [pc, #448]	; (8005448 <setupneo+0x1ec>)
 8005288:	486b      	ldr	r0, [pc, #428]	; (8005438 <setupneo+0x1dc>)
 800528a:	f00e f89d 	bl	80133c8 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 800528e:	4607      	mov	r7, r0
 8005290:	2800      	cmp	r0, #0
 8005292:	f040 809d 	bne.w	80053d0 <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8005296:	f7ff ff0d 	bl	80050b4 <disableNmea>
	osDelay(500);
 800529a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800529e:	f010 f8ef 	bl	8015480 <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 80052a2:	4b6a      	ldr	r3, [pc, #424]	; (800544c <setupneo+0x1f0>)
 80052a4:	ae01      	add	r6, sp, #4
 80052a6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80052aa:	4d69      	ldr	r5, [pc, #420]	; (8005450 <setupneo+0x1f4>)
 80052ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052b0:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 80052b4:	4867      	ldr	r0, [pc, #412]	; (8005454 <setupneo+0x1f8>)
 80052b6:	f020 f919 	bl	80254ec <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80052ba:	2364      	movs	r3, #100	; 0x64
 80052bc:	2208      	movs	r2, #8
 80052be:	4631      	mov	r1, r6
 80052c0:	485e      	ldr	r0, [pc, #376]	; (800543c <setupneo+0x1e0>)
 80052c2:	f00d fde9 	bl	8012e98 <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 80052c6:	e004      	b.n	80052d2 <setupneo+0x76>
		i++;
		osDelay(1);
 80052c8:	f010 f8da 	bl	8015480 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 80052cc:	3c01      	subs	r4, #1
 80052ce:	f000 80a5 	beq.w	800541c <setupneo+0x1c0>
 80052d2:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 80052d4:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f6      	beq.n	80052c8 <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80052da:	4c5f      	ldr	r4, [pc, #380]	; (8005458 <setupneo+0x1fc>)
 80052dc:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 80052de:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80052e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80052e6:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80052ea:	2364      	movs	r3, #100	; 0x64
 80052ec:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80052ee:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80052f2:	4852      	ldr	r0, [pc, #328]	; (800543c <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80052f4:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80052f8:	4631      	mov	r1, r6
 80052fa:	f00d fdcd 	bl	8012e98 <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 80052fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005302:	f010 f8bd 	bl	8015480 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8005306:	4855      	ldr	r0, [pc, #340]	; (800545c <setupneo+0x200>)
 8005308:	f020 f854 	bl	80253b4 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 800530c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8005310:	46b4      	mov	ip, r6
 8005312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005314:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005318:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 800531a:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800531e:	220e      	movs	r2, #14
 8005320:	2364      	movs	r3, #100	; 0x64
 8005322:	4846      	ldr	r0, [pc, #280]	; (800543c <setupneo+0x1e0>)
 8005324:	f00d fdb8 	bl	8012e98 <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 8005328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800532c:	f010 f8a8 	bl	8015480 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8005330:	484b      	ldr	r0, [pc, #300]	; (8005460 <setupneo+0x204>)
 8005332:	f020 f8db 	bl	80254ec <puts>
	byte packet[] = { 0xB5, // sync char 1
 8005336:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 800533a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800533e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005340:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005346:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800534a:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 800534c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005350:	4631      	mov	r1, r6
 8005352:	222c      	movs	r2, #44	; 0x2c
 8005354:	4839      	ldr	r0, [pc, #228]	; (800543c <setupneo+0x1e0>)
 8005356:	f00d fd9f 	bl	8012e98 <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 800535a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800535e:	f010 f88f 	bl	8015480 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8005362:	4840      	ldr	r0, [pc, #256]	; (8005464 <setupneo+0x208>)
 8005364:	f020 f826 	bl	80253b4 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005368:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 800536c:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800536e:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005370:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 8005372:	ca07      	ldmia	r2, {r0, r1, r2}
 8005374:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005378:	f82c 2b02 	strh.w	r2, [ip], #2
 800537c:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800537e:	4631      	mov	r1, r6
 8005380:	482e      	ldr	r0, [pc, #184]	; (800543c <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 8005382:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005386:	220b      	movs	r2, #11
 8005388:	f00d fd86 	bl	8012e98 <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 800538c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005390:	f010 f876 	bl	8015480 <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005394:	46b4      	mov	ip, r6
 8005396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005398:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800539c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800539e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80053a2:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80053a6:	2364      	movs	r3, #100	; 0x64
 80053a8:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 80053aa:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80053ae:	4631      	mov	r1, r6
 80053b0:	4822      	ldr	r0, [pc, #136]	; (800543c <setupneo+0x1e0>)
 80053b2:	f00d fd71 	bl	8012e98 <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 80053b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053ba:	f010 f861 	bl	8015480 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 80053be:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <setupneo+0x20c>)
 80053c0:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 80053c2:	482a      	ldr	r0, [pc, #168]	; (800546c <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 80053c4:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 80053c6:	f01f fff5 	bl	80253b4 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 80053ca:	4638      	mov	r0, r7
 80053cc:	b00d      	add	sp, #52	; 0x34
 80053ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 80053d0:	4601      	mov	r1, r0
 80053d2:	4827      	ldr	r0, [pc, #156]	; (8005470 <setupneo+0x214>)
 80053d4:	f01f ffee 	bl	80253b4 <iprintf>
}
 80053d8:	4638      	mov	r0, r7
 80053da:	b00d      	add	sp, #52	; 0x34
 80053dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 80053de:	4c25      	ldr	r4, [pc, #148]	; (8005474 <setupneo+0x218>)
 80053e0:	4620      	mov	r0, r4
 80053e2:	f00c feed 	bl	80121c0 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 80053e6:	4620      	mov	r0, r4
 80053e8:	f00c fd52 	bl	8011e90 <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 80053ec:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80053f0:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 80053f2:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80053f4:	f00d fdf8 	bl	8012fe8 <HAL_UART_Init>
 80053f8:	b968      	cbnz	r0, 8005416 <setupneo+0x1ba>
		gpsuartrx = huart8;
 80053fa:	2284      	movs	r2, #132	; 0x84
 80053fc:	491e      	ldr	r1, [pc, #120]	; (8005478 <setupneo+0x21c>)
 80053fe:	480e      	ldr	r0, [pc, #56]	; (8005438 <setupneo+0x1dc>)
 8005400:	f01f f812 	bl	8024428 <memcpy>
		gpsuarttx = huart7;
 8005404:	2284      	movs	r2, #132	; 0x84
 8005406:	491b      	ldr	r1, [pc, #108]	; (8005474 <setupneo+0x218>)
 8005408:	480c      	ldr	r0, [pc, #48]	; (800543c <setupneo+0x1e0>)
 800540a:	f01f f80d 	bl	8024428 <memcpy>
		GPSUARTRX = UART8;
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <setupneo+0x1e4>)
 8005410:	4a1a      	ldr	r2, [pc, #104]	; (800547c <setupneo+0x220>)
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e736      	b.n	8005284 <setupneo+0x28>
			Error_Handler();
 8005416:	f7fe fd89 	bl	8003f2c <Error_Handler>
 800541a:	e7ee      	b.n	80053fa <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 800541c:	4818      	ldr	r0, [pc, #96]	; (8005480 <setupneo+0x224>)
 800541e:	f020 f865 	bl	80254ec <puts>
		osDelay(200);
 8005422:	20c8      	movs	r0, #200	; 0xc8
 8005424:	f010 f82c 	bl	8015480 <osDelay>
		rebootme(2);
 8005428:	2002      	movs	r0, #2
 800542a:	f7fd ff73 	bl	8003314 <rebootme>
 800542e:	e754      	b.n	80052da <setupneo+0x7e>
 8005430:	2000208c 	.word	0x2000208c
 8005434:	20002b90 	.word	0x20002b90
 8005438:	20002e00 	.word	0x20002e00
 800543c:	20002e84 	.word	0x20002e84
 8005440:	20002d64 	.word	0x20002d64
 8005444:	40011400 	.word	0x40011400
 8005448:	20002f34 	.word	0x20002f34
 800544c:	080294c4 	.word	0x080294c4
 8005450:	20002f0c 	.word	0x20002f0c
 8005454:	0802bb3c 	.word	0x0802bb3c
 8005458:	080294ac 	.word	0x080294ac
 800545c:	0802bb7c 	.word	0x0802bb7c
 8005460:	0802bbac 	.word	0x0802bbac
 8005464:	0802bbd4 	.word	0x0802bbd4
 8005468:	20002f3c 	.word	0x20002f3c
 800546c:	0802bbf8 	.word	0x0802bbf8
 8005470:	0802bb54 	.word	0x0802bb54
 8005474:	20002c14 	.word	0x20002c14
 8005478:	20002c98 	.word	0x20002c98
 800547c:	40007c00 	.word	0x40007c00
 8005480:	0802bc20 	.word	0x0802bc20

08005484 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8005484:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005486:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	6803      	ldr	r3, [r0, #0]
 800548c:	4293      	cmp	r3, r2
 800548e:	d011      	beq.n	80054b4 <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8005490:	4a28      	ldr	r2, [pc, #160]	; (8005534 <HAL_UART_RxCpltCallback+0xb0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d024      	beq.n	80054e0 <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8005496:	4a28      	ldr	r2, [pc, #160]	; (8005538 <HAL_UART_RxCpltCallback+0xb4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d025      	beq.n	80054e8 <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 800549c:	4a27      	ldr	r2, [pc, #156]	; (800553c <HAL_UART_RxCpltCallback+0xb8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 80054a2:	4827      	ldr	r0, [pc, #156]	; (8005540 <HAL_UART_RxCpltCallback+0xbc>)
}
 80054a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 80054a8:	f020 b820 	b.w	80254ec <puts>
}
 80054ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 80054b0:	f7fe bcbc 	b.w	8003e2c <uart2_rxdone>
		data = rxdatabuf[0];
 80054b4:	4923      	ldr	r1, [pc, #140]	; (8005544 <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 80054b6:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 80054ba:	4a24      	ldr	r2, [pc, #144]	; (800554c <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 80054bc:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 80054be:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 80054c0:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 80054c2:	f7ff fe73 	bl	80051ac <IsPacketReady>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	dd1c      	ble.n	8005504 <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 80054ca:	2854      	cmp	r0, #84	; 0x54
 80054cc:	d01b      	beq.n	8005506 <HAL_UART_RxCpltCallback+0x82>
 80054ce:	2864      	cmp	r0, #100	; 0x64
 80054d0:	d00e      	beq.n	80054f0 <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 80054d2:	b2c2      	uxtb	r2, r0
 80054d4:	491e      	ldr	r1, [pc, #120]	; (8005550 <HAL_UART_RxCpltCallback+0xcc>)
 80054d6:	481f      	ldr	r0, [pc, #124]	; (8005554 <HAL_UART_RxCpltCallback+0xd0>)
}
 80054d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 80054dc:	f7ff bdb0 	b.w	8005040 <printPacket>
}
 80054e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 80054e4:	f7fc bd38 	b.w	8001f58 <uart5_rxdone>
}
 80054e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 80054ec:	f000 bd0e 	b.w	8005f0c <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <HAL_UART_RxCpltCallback+0xd4>)
 80054f2:	481a      	ldr	r0, [pc, #104]	; (800555c <HAL_UART_RxCpltCallback+0xd8>)
 80054f4:	f1a3 020a 	sub.w	r2, r3, #10
 80054f8:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 80054fc:	f01f ff5a 	bl	80253b4 <iprintf>
				neoispresent = 1;
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <HAL_UART_RxCpltCallback+0xdc>)
 8005502:	601c      	str	r4, [r3, #0]
}
 8005504:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8005506:	4d17      	ldr	r5, [pc, #92]	; (8005564 <HAL_UART_RxCpltCallback+0xe0>)
 8005508:	224e      	movs	r2, #78	; 0x4e
 800550a:	4917      	ldr	r1, [pc, #92]	; (8005568 <HAL_UART_RxCpltCallback+0xe4>)
 800550c:	1d28      	adds	r0, r5, #4
 800550e:	f01e ff8b 	bl	8024428 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8005512:	f7ff fd6f 	bl	8004ff4 <calcepoch32>
 8005516:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 800551a:	7e6b      	ldrb	r3, [r5, #25]
 800551c:	f013 0301 	ands.w	r3, r3, #1
 8005520:	d002      	beq.n	8005528 <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <HAL_UART_RxCpltCallback+0xe8>)
 8005524:	701c      	strb	r4, [r3, #0]
}
 8005526:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 8005528:	4a10      	ldr	r2, [pc, #64]	; (800556c <HAL_UART_RxCpltCallback+0xe8>)
 800552a:	7013      	strb	r3, [r2, #0]
}
 800552c:	bd38      	pop	{r3, r4, r5, pc}
 800552e:	bf00      	nop
 8005530:	20002d64 	.word	0x20002d64
 8005534:	40005000 	.word	0x40005000
 8005538:	40011400 	.word	0x40011400
 800553c:	40004400 	.word	0x40004400
 8005540:	0802bc94 	.word	0x0802bc94
 8005544:	20002f34 	.word	0x20002f34
 8005548:	20002dec 	.word	0x20002dec
 800554c:	20002df8 	.word	0x20002df8
 8005550:	20002d68 	.word	0x20002d68
 8005554:	0802bc78 	.word	0x0802bc78
 8005558:	20002d96 	.word	0x20002d96
 800555c:	0802bc4c 	.word	0x0802bc4c
 8005560:	20002f0c 	.word	0x20002f0c
 8005564:	20002f3c 	.word	0x20002f3c
 8005568:	20002d6e 	.word	0x20002d6e
 800556c:	200030e8 	.word	0x200030e8

08005570 <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005570:	4926      	ldr	r1, [pc, #152]	; (800560c <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005572:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005576:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005578:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 800557a:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 800557c:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 800557e:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005580:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005582:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005584:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005586:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005588:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 800558a:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 800558c:	d02b      	beq.n	80055e6 <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 800558e:	4920      	ldr	r1, [pc, #128]	; (8005610 <HAL_UART_ErrorCallback+0xa0>)
 8005590:	428b      	cmp	r3, r1
 8005592:	d00f      	beq.n	80055b4 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8005594:	491f      	ldr	r1, [pc, #124]	; (8005614 <HAL_UART_ErrorCallback+0xa4>)
 8005596:	428b      	cmp	r3, r1
 8005598:	d000      	beq.n	800559c <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 800559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 800559c:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 80055a0:	481d      	ldr	r0, [pc, #116]	; (8005618 <HAL_UART_ErrorCallback+0xa8>)
 80055a2:	f01f ff07 	bl	80253b4 <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	2202      	movs	r2, #2
 80055aa:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 80055ac:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 80055ae:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 80055b0:	621d      	str	r5, [r3, #32]
}
 80055b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <HAL_UART_ErrorCallback+0xac>)
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d1ee      	bne.n	800559a <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 80055bc:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80055c0:	4a17      	ldr	r2, [pc, #92]	; (8005620 <HAL_UART_ErrorCallback+0xb0>)
 80055c2:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	0710      	lsls	r0, r2, #28
 80055c8:	d500      	bpl.n	80055cc <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 80055ca:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <HAL_UART_ErrorCallback+0xa0>)
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	0751      	lsls	r1, r2, #29
 80055d2:	d501      	bpl.n	80055d8 <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 80055d4:	2204      	movs	r2, #4
 80055d6:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <HAL_UART_ErrorCallback+0xa0>)
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	0792      	lsls	r2, r2, #30
 80055de:	d5dc      	bpl.n	800559a <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 80055e0:	2202      	movs	r2, #2
 80055e2:	621a      	str	r2, [r3, #32]
}
 80055e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 80055e6:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80055ea:	480e      	ldr	r0, [pc, #56]	; (8005624 <HAL_UART_ErrorCallback+0xb4>)
 80055ec:	f01f fee2 	bl	80253b4 <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 80055f0:	462a      	mov	r2, r5
 80055f2:	490d      	ldr	r1, [pc, #52]	; (8005628 <HAL_UART_ErrorCallback+0xb8>)
 80055f4:	480d      	ldr	r0, [pc, #52]	; (800562c <HAL_UART_ErrorCallback+0xbc>)
 80055f6:	f00d fee7 	bl	80133c8 <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 80055fa:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 80055fe:	d0cc      	beq.n	800559a <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8005600:	4601      	mov	r1, r0
 8005602:	480b      	ldr	r0, [pc, #44]	; (8005630 <HAL_UART_ErrorCallback+0xc0>)
}
 8005604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8005608:	f01f bed4 	b.w	80253b4 <iprintf>
 800560c:	20002d64 	.word	0x20002d64
 8005610:	40005000 	.word	0x40005000
 8005614:	40011400 	.word	0x40011400
 8005618:	0802bcf8 	.word	0x0802bcf8
 800561c:	20001a04 	.word	0x20001a04
 8005620:	20001a94 	.word	0x20001a94
 8005624:	0802bcac 	.word	0x0802bcac
 8005628:	20002f34 	.word	0x20002f34
 800562c:	20002e00 	.word	0x20002e00
 8005630:	0802bccc 	.word	0x0802bccc
 8005634:	ffffffff 	.word	0xffffffff

08005638 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8005638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800563c:	ed2d 8b02 	vpush	{d8}
 8005640:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 8005642:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 8005644:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8005646:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800564a:	ae0c      	add	r6, sp, #48	; 0x30
 800564c:	4f6e      	ldr	r7, [pc, #440]	; (8005808 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 800564e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8005830 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 8005652:	f00f ff15 	bl	8015480 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8005656:	2301      	movs	r3, #1
 8005658:	9600      	str	r6, [sp, #0]
 800565a:	b2aa      	uxth	r2, r5
 800565c:	21c1      	movs	r1, #193	; 0xc1
 800565e:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 8005660:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8005662:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8005666:	f006 ffbf 	bl	800c5e8 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800566a:	4604      	mov	r4, r0
 800566c:	2800      	cmp	r0, #0
 800566e:	f040 80a6 	bne.w	80057be <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 8005672:	3501      	adds	r5, #1
 8005674:	2d04      	cmp	r5, #4
 8005676:	d1ee      	bne.n	8005656 <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8005678:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 800567c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8005680:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 8005684:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8005688:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800568c:	485f      	ldr	r0, [pc, #380]	; (800580c <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 800568e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8005692:	495f      	ldr	r1, [pc, #380]	; (8005810 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8005694:	0992      	lsrs	r2, r2, #6
	t = tr;
 8005696:	099c      	lsrs	r4, r3, #6
	p = pr;
 8005698:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800569c:	4a5d      	ldr	r2, [pc, #372]	; (8005814 <getpressure115.part.0+0x1dc>)
	t = tr;
 800569e:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 80056a2:	119d      	asrs	r5, r3, #6
	p = pr;
 80056a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 80056a8:	2400      	movs	r4, #0
	t = tr;
 80056aa:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80056ae:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 80056b2:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 80056b6:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80056ba:	ed9d 7b08 	vldr	d7, [sp, #32]
 80056be:	ed91 4b00 	vldr	d4, [r1]
 80056c2:	4955      	ldr	r1, [pc, #340]	; (8005818 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 80056c4:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80056c6:	eea1 4b07 	vfma.f64	d4, d1, d7
 80056ca:	ed91 6b00 	vldr	d6, [r1]
 80056ce:	ed9d 8b06 	vldr	d8, [sp, #24]
 80056d2:	ed92 0b00 	vldr	d0, [r2]
 80056d6:	eeb0 7b46 	vmov.f64	d7, d6
 80056da:	ed9d 2b08 	vldr	d2, [sp, #32]
 80056de:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80056e2:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 80057d8 <getpressure115.part.0+0x1a0>
 80056e6:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80057e0 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80056ea:	eea0 7b02 	vfma.f64	d7, d0, d2
 80056ee:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80056f2:	ed9d 6b06 	vldr	d6, [sp, #24]
 80056f6:	eea6 5b03 	vfma.f64	d5, d6, d3
 80056fa:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 80056fe:	ed9d 0b06 	vldr	d0, [sp, #24]
 8005702:	f01f ffa3 	bl	802564c <modf>
	t = tr * -0.1706 + 112.27; //C
 8005706:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800570a:	4944      	ldr	r1, [pc, #272]	; (800581c <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800570c:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 8005710:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 8005716:	2264      	movs	r2, #100	; 0x64
 8005718:	4842      	ldr	r0, [pc, #264]	; (8005824 <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 800571a:	ed9f 2b33 	vldr	d2, [pc, #204]	; 80057e8 <getpressure115.part.0+0x1b0>
 800571e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80057f0 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 8005722:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 8005726:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800572a:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80057f8 <getpressure115.part.0+0x1c0>
 800572e:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 8005732:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8005736:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 800573a:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800573e:	ed9f 2b30 	vldr	d2, [pc, #192]	; 8005800 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8005742:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 8005746:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 800574a:	4b37      	ldr	r3, [pc, #220]	; (8005828 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 800574c:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8005750:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005754:	4935      	ldr	r1, [pc, #212]	; (800582c <getpressure115.part.0+0x1f4>)
	temperature = t;
 8005756:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 800575a:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800575e:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 8005762:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005766:	ed9d 7b06 	vldr	d7, [sp, #24]
 800576a:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 800576e:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005772:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 8005776:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800577a:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 800577e:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005782:	feb8 7b47 	vrinta.f64	d7, d7
 8005786:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 800578a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800578e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005792:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 8005796:	ee16 3a10 	vmov	r3, s12
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80057a0:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 80057a4:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80057a6:	ee17 2a10 	vmov	r2, s14
}
 80057aa:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80057ac:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 80057b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057b4:	b00f      	add	sp, #60	; 0x3c
 80057b6:	ecbd 8b02 	vpop	{d8}
 80057ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80057be:	4648      	mov	r0, r9
 80057c0:	4621      	mov	r1, r4
 80057c2:	f01f fdf7 	bl	80253b4 <iprintf>
			if (i == 3)
 80057c6:	2d03      	cmp	r5, #3
 80057c8:	f47f af53 	bne.w	8005672 <getpressure115.part.0+0x3a>
}
 80057cc:	4620      	mov	r0, r4
 80057ce:	b00f      	add	sp, #60	; 0x3c
 80057d0:	ecbd 8b02 	vpop	{d8}
 80057d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057d8:	04411044 	.word	0x04411044
 80057dc:	3fb04411 	.word	0x3fb04411
 80057e0:	00000000 	.word	0x00000000
 80057e4:	40490000 	.word	0x40490000
 80057e8:	86594af5 	.word	0x86594af5
 80057ec:	bfc5d638 	.word	0xbfc5d638
 80057f0:	ae147ae1 	.word	0xae147ae1
 80057f4:	405c1147 	.word	0x405c1147
 80057f8:	00000000 	.word	0x00000000
 80057fc:	40590000 	.word	0x40590000
 8005800:	00000000 	.word	0x00000000
 8005804:	40af4000 	.word	0x40af4000
 8005808:	200024f0 	.word	0x200024f0
 800580c:	20002ff8 	.word	0x20002ff8
 8005810:	20002fe0 	.word	0x20002fe0
 8005814:	20002fe8 	.word	0x20002fe8
 8005818:	20002fd8 	.word	0x20002fd8
 800581c:	20003074 	.word	0x20003074
 8005820:	20003078 	.word	0x20003078
 8005824:	20003084 	.word	0x20003084
 8005828:	20003080 	.word	0x20003080
 800582c:	20002f3c 	.word	0x20002f3c
 8005830:	0802bd2c 	.word	0x0802bd2c

08005834 <cycleleds>:
void cycleleds(void) {
 8005834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005836:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 8005838:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <cycleleds+0x74>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800583a:	4f1c      	ldr	r7, [pc, #112]	; (80058ac <cycleleds+0x78>)
 800583c:	ac01      	add	r4, sp, #4
 800583e:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 8005842:	ca07      	ldmia	r2, {r0, r1, r2}
 8005844:	4623      	mov	r3, r4
 8005846:	4626      	mov	r6, r4
 8005848:	c303      	stmia	r3!, {r0, r1}
 800584a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800584c:	f836 1b02 	ldrh.w	r1, [r6], #2
 8005850:	4638      	mov	r0, r7
 8005852:	2200      	movs	r2, #0
 8005854:	f006 fa2e 	bl	800bcb4 <HAL_GPIO_WritePin>
		osDelay(140);
 8005858:	208c      	movs	r0, #140	; 0x8c
 800585a:	f00f fe11 	bl	8015480 <osDelay>
	for (i = 0; i < 5; i++) {
 800585e:	42ae      	cmp	r6, r5
 8005860:	d1f4      	bne.n	800584c <cycleleds+0x18>
	osDelay(600);
 8005862:	f44f 7016 	mov.w	r0, #600	; 0x258
 8005866:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8005868:	4f10      	ldr	r7, [pc, #64]	; (80058ac <cycleleds+0x78>)
	osDelay(600);
 800586a:	f00f fe09 	bl	8015480 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800586e:	f836 1b02 	ldrh.w	r1, [r6], #2
 8005872:	4638      	mov	r0, r7
 8005874:	2201      	movs	r2, #1
 8005876:	f006 fa1d 	bl	800bcb4 <HAL_GPIO_WritePin>
		osDelay(140);
 800587a:	208c      	movs	r0, #140	; 0x8c
 800587c:	f00f fe00 	bl	8015480 <osDelay>
	for (i = 0; i < 5; i++) {
 8005880:	42ae      	cmp	r6, r5
 8005882:	d1f4      	bne.n	800586e <cycleleds+0x3a>
	osDelay(500);
 8005884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8005888:	4e08      	ldr	r6, [pc, #32]	; (80058ac <cycleleds+0x78>)
	osDelay(500);
 800588a:	f00f fdf9 	bl	8015480 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800588e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8005892:	4630      	mov	r0, r6
 8005894:	2200      	movs	r2, #0
 8005896:	f006 fa0d 	bl	800bcb4 <HAL_GPIO_WritePin>
		osDelay(140);
 800589a:	208c      	movs	r0, #140	; 0x8c
 800589c:	f00f fdf0 	bl	8015480 <osDelay>
	for (i = 0; i < 5; i++) {
 80058a0:	42ac      	cmp	r4, r5
 80058a2:	d1f4      	bne.n	800588e <cycleleds+0x5a>
}
 80058a4:	b005      	add	sp, #20
 80058a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a8:	0802958c 	.word	0x0802958c
 80058ac:	40020c00 	.word	0x40020c00

080058b0 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 80058b0:	b510      	push	{r4, lr}
 80058b2:	4604      	mov	r4, r0
 80058b4:	b082      	sub	sp, #8
	osDelay(5);
 80058b6:	2005      	movs	r0, #5
 80058b8:	f00f fde2 	bl	8015480 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80058bc:	2201      	movs	r2, #1
 80058be:	2104      	movs	r1, #4
 80058c0:	482b      	ldr	r0, [pc, #172]	; (8005970 <setpgagain+0xc0>)
 80058c2:	f006 f9f7 	bl	800bcb4 <HAL_GPIO_WritePin>
	osDelay(5);
 80058c6:	2005      	movs	r0, #5
 80058c8:	f00f fdda 	bl	8015480 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80058cc:	2200      	movs	r2, #0
 80058ce:	2104      	movs	r1, #4
 80058d0:	4827      	ldr	r0, [pc, #156]	; (8005970 <setpgagain+0xc0>)
 80058d2:	f006 f9ef 	bl	800bcb4 <HAL_GPIO_WritePin>
	osDelay(5);
 80058d6:	2005      	movs	r0, #5
 80058d8:	f00f fdd2 	bl	8015480 <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80058dc:	4925      	ldr	r1, [pc, #148]	; (8005974 <setpgagain+0xc4>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80058de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058e2:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80058e4:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80058e6:	4824      	ldr	r0, [pc, #144]	; (8005978 <setpgagain+0xc8>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80058e8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80058ec:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80058f0:	a901      	add	r1, sp, #4
 80058f2:	f009 f9e5 	bl	800ecc0 <HAL_SPI_Transmit>
 80058f6:	bb70      	cbnz	r0, 8005956 <setpgagain+0xa6>
	osDelay(5);
 80058f8:	2005      	movs	r0, #5
 80058fa:	f00f fdc1 	bl	8015480 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80058fe:	2201      	movs	r2, #1
 8005900:	2104      	movs	r1, #4
 8005902:	481b      	ldr	r0, [pc, #108]	; (8005970 <setpgagain+0xc0>)
 8005904:	f006 f9d6 	bl	800bcb4 <HAL_GPIO_WritePin>
	osDelay(5);
 8005908:	2005      	movs	r0, #5
 800590a:	f00f fdb9 	bl	8015480 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800590e:	2200      	movs	r2, #0
 8005910:	2104      	movs	r1, #4
 8005912:	4817      	ldr	r0, [pc, #92]	; (8005970 <setpgagain+0xc0>)
 8005914:	f006 f9ce 	bl	800bcb4 <HAL_GPIO_WritePin>
	osDelay(5);
 8005918:	2005      	movs	r0, #5
 800591a:	f00f fdb1 	bl	8015480 <osDelay>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 800591e:	2c08      	cmp	r4, #8
 8005920:	f244 1001 	movw	r0, #16641	; 0x4101
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8005924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 8005928:	bfb8      	it	lt
 800592a:	f44f 4082 	movlt.w	r0, #16640	; 0x4100
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 800592e:	2201      	movs	r2, #1
 8005930:	a901      	add	r1, sp, #4
 8005932:	f8ad 0004 	strh.w	r0, [sp, #4]
 8005936:	4810      	ldr	r0, [pc, #64]	; (8005978 <setpgagain+0xc8>)
 8005938:	f009 f9c2 	bl	800ecc0 <HAL_SPI_Transmit>
 800593c:	b990      	cbnz	r0, 8005964 <setpgagain+0xb4>
	osDelay(5);
 800593e:	2005      	movs	r0, #5
 8005940:	f00f fd9e 	bl	8015480 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8005944:	2201      	movs	r2, #1
 8005946:	2104      	movs	r1, #4
 8005948:	4809      	ldr	r0, [pc, #36]	; (8005970 <setpgagain+0xc0>)
 800594a:	f006 f9b3 	bl	800bcb4 <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 800594e:	4b0b      	ldr	r3, [pc, #44]	; (800597c <setpgagain+0xcc>)
 8005950:	801c      	strh	r4, [r3, #0]
}
 8005952:	b002      	add	sp, #8
 8005954:	bd10      	pop	{r4, pc}
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 8005956:	4601      	mov	r1, r0
 8005958:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800595c:	4808      	ldr	r0, [pc, #32]	; (8005980 <setpgagain+0xd0>)
 800595e:	f01f fd29 	bl	80253b4 <iprintf>
 8005962:	e7c9      	b.n	80058f8 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 8005964:	4601      	mov	r1, r0
 8005966:	4807      	ldr	r0, [pc, #28]	; (8005984 <setpgagain+0xd4>)
 8005968:	f01f fd24 	bl	80253b4 <iprintf>
 800596c:	e7e7      	b.n	800593e <setpgagain+0x8e>
 800596e:	bf00      	nop
 8005970:	40021800 	.word	0x40021800
 8005974:	0802c188 	.word	0x0802c188
 8005978:	200025f4 	.word	0x200025f4
 800597c:	20003070 	.word	0x20003070
 8005980:	0802bd50 	.word	0x0802bd50
 8005984:	0802bd7c 	.word	0x0802bd7c

08005988 <initpga>:
int initpga() {
 8005988:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800598a:	2201      	movs	r2, #1
int initpga() {
 800598c:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800598e:	2104      	movs	r1, #4
 8005990:	4826      	ldr	r0, [pc, #152]	; (8005a2c <initpga+0xa4>)
 8005992:	f006 f98f 	bl	800bcb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8005996:	2200      	movs	r2, #0
 8005998:	2104      	movs	r1, #4
 800599a:	4824      	ldr	r0, [pc, #144]	; (8005a2c <initpga+0xa4>)
 800599c:	f006 f98a 	bl	800bcb4 <HAL_GPIO_WritePin>
	osDelay(50);
 80059a0:	2032      	movs	r0, #50	; 0x32
 80059a2:	f00f fd6d 	bl	8015480 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80059a6:	2201      	movs	r2, #1
 80059a8:	2104      	movs	r1, #4
 80059aa:	4820      	ldr	r0, [pc, #128]	; (8005a2c <initpga+0xa4>)
 80059ac:	f006 f982 	bl	800bcb4 <HAL_GPIO_WritePin>
	osDelay(5);
 80059b0:	2005      	movs	r0, #5
 80059b2:	f00f fd65 	bl	8015480 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80059b6:	2200      	movs	r2, #0
 80059b8:	2104      	movs	r1, #4
 80059ba:	481c      	ldr	r0, [pc, #112]	; (8005a2c <initpga+0xa4>)
 80059bc:	f006 f97a 	bl	800bcb4 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 80059c0:	2000      	movs	r0, #0
 80059c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8ad 0004 	strh.w	r0, [sp, #4]
 80059cc:	a901      	add	r1, sp, #4
 80059ce:	4818      	ldr	r0, [pc, #96]	; (8005a30 <initpga+0xa8>)
 80059d0:	f009 f976 	bl	800ecc0 <HAL_SPI_Transmit>
 80059d4:	4604      	mov	r4, r0
 80059d6:	bb08      	cbnz	r0, 8005a1c <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 80059d8:	2104      	movs	r1, #4
 80059da:	2201      	movs	r2, #1
 80059dc:	4813      	ldr	r0, [pc, #76]	; (8005a2c <initpga+0xa4>)
 80059de:	f006 f969 	bl	800bcb4 <HAL_GPIO_WritePin>
	osDelay(5);
 80059e2:	2005      	movs	r0, #5
 80059e4:	f00f fd4c 	bl	8015480 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80059e8:	4622      	mov	r2, r4
 80059ea:	2104      	movs	r1, #4
 80059ec:	480f      	ldr	r0, [pc, #60]	; (8005a2c <initpga+0xa4>)
 80059ee:	f006 f961 	bl	800bcb4 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 80059f2:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 80059f6:	2005      	movs	r0, #5
 80059f8:	f00f fd42 	bl	8015480 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 80059fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a00:	2201      	movs	r2, #1
 8005a02:	a901      	add	r1, sp, #4
 8005a04:	480a      	ldr	r0, [pc, #40]	; (8005a30 <initpga+0xa8>)
 8005a06:	f8ad 4004 	strh.w	r4, [sp, #4]
 8005a0a:	f009 f959 	bl	800ecc0 <HAL_SPI_Transmit>
 8005a0e:	4604      	mov	r4, r0
 8005a10:	b920      	cbnz	r0, 8005a1c <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 8005a12:	f7ff ff4d 	bl	80058b0 <setpgagain>
	return (0);
 8005a16:	4620      	mov	r0, r4
}
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4805      	ldr	r0, [pc, #20]	; (8005a34 <initpga+0xac>)
 8005a20:	f01f fcc8 	bl	80253b4 <iprintf>
		return (1);
 8005a24:	2001      	movs	r0, #1
}
 8005a26:	b002      	add	sp, #8
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40021800 	.word	0x40021800
 8005a30:	200025f4 	.word	0x200025f4
 8005a34:	0802bd98 	.word	0x0802bd98

08005a38 <bumppga>:
int bumppga(int i) {
 8005a38:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 8005a3a:	4d1f      	ldr	r5, [pc, #124]	; (8005ab8 <bumppga+0x80>)
int bumppga(int i) {
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	4604      	mov	r4, r0
	gain = pgagain;
 8005a40:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 8005a44:	b28b      	uxth	r3, r1
	gain = pgagain;
 8005a46:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 8005a48:	2b09      	cmp	r3, #9
 8005a4a:	d827      	bhi.n	8005a9c <bumppga+0x64>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <bumppga+0x84>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b0b      	cmp	r3, #11
 8005a52:	d00c      	beq.n	8005a6e <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8005a54:	2c00      	cmp	r4, #0
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	da01      	bge.n	8005a5e <bumppga+0x26>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	dd04      	ble.n	8005a68 <bumppga+0x30>
 8005a5e:	2c00      	cmp	r4, #0
 8005a60:	9b01      	ldr	r3, [sp, #4]
 8005a62:	dd12      	ble.n	8005a8a <bumppga+0x52>
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	dd10      	ble.n	8005a8a <bumppga+0x52>
	return (0);
 8005a68:	2000      	movs	r0, #0
}
 8005a6a:	b003      	add	sp, #12
 8005a6c:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 8005a6e:	2907      	cmp	r1, #7
 8005a70:	dd01      	ble.n	8005a76 <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8005a72:	2307      	movs	r3, #7
 8005a74:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	9b01      	ldr	r3, [sp, #4]
 8005a7a:	da01      	bge.n	8005a80 <bumppga+0x48>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	ddf3      	ble.n	8005a68 <bumppga+0x30>
 8005a80:	9b01      	ldr	r3, [sp, #4]
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	dd01      	ble.n	8005a8a <bumppga+0x52>
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	dcee      	bgt.n	8005a68 <bumppga+0x30>
			gain = gain + i;
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	4423      	add	r3, r4
 8005a8e:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8005a90:	9801      	ldr	r0, [sp, #4]
 8005a92:	f7ff ff0d 	bl	80058b0 <setpgagain>
			return (i);
 8005a96:	4620      	mov	r0, r4
}
 8005a98:	b003      	add	sp, #12
 8005a9a:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 8005a9c:	4808      	ldr	r0, [pc, #32]	; (8005ac0 <bumppga+0x88>)
 8005a9e:	f01f fc89 	bl	80253b4 <iprintf>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <bumppga+0x84>)
		pgagain = 0;
 8005aa4:	2200      	movs	r2, #0
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005aa6:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 8005aa8:	802a      	strh	r2, [r5, #0]
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005aaa:	2b0b      	cmp	r3, #11
 8005aac:	d0e3      	beq.n	8005a76 <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8005aae:	2c00      	cmp	r4, #0
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	dbd2      	blt.n	8005a5a <bumppga+0x22>
 8005ab4:	e7d3      	b.n	8005a5e <bumppga+0x26>
 8005ab6:	bf00      	nop
 8005ab8:	20003070 	.word	0x20003070
 8005abc:	2000208c 	.word	0x2000208c
 8005ac0:	0802bdb4 	.word	0x0802bdb4

08005ac4 <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 8005ac4:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005ac6:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 8005ac8:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005aca:	2100      	movs	r1, #0
 8005acc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005ad0:	f88d 000c 	strb.w	r0, [sp, #12]
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	f88d 100d 	strb.w	r1, [sp, #13]
 8005ada:	aa03      	add	r2, sp, #12
 8005adc:	21c0      	movs	r1, #192	; 0xc0
 8005ade:	4809      	ldr	r0, [pc, #36]	; (8005b04 <getpressure115+0x40>)
 8005ae0:	9400      	str	r4, [sp, #0]
 8005ae2:	f006 fbed 	bl	800c2c0 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005ae6:	b928      	cbnz	r0, 8005af4 <getpressure115+0x30>
 8005ae8:	f7ff fda6 	bl	8005638 <getpressure115.part.0>
 8005aec:	4604      	mov	r4, r0
}
 8005aee:	4620      	mov	r0, r4
 8005af0:	b004      	add	sp, #16
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8005af6:	4804      	ldr	r0, [pc, #16]	; (8005b08 <getpressure115+0x44>)
 8005af8:	f01f fc5c 	bl	80253b4 <iprintf>
}
 8005afc:	4620      	mov	r0, r4
 8005afe:	b004      	add	sp, #16
 8005b00:	bd10      	pop	{r4, pc}
 8005b02:	bf00      	nop
 8005b04:	200024f0 	.word	0x200024f0
 8005b08:	0802bdec 	.word	0x0802bdec

08005b0c <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8005b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b10:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8005b12:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8005b16:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005b1a:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 8005b1e:	ac06      	add	r4, sp, #24
 8005b20:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8005b24:	4f36      	ldr	r7, [pc, #216]	; (8005c00 <initpressure115+0xf4>)
 8005b26:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8005b2a:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8005b2e:	eb09 0204 	add.w	r2, r9, r4
 8005b32:	2301      	movs	r3, #1
 8005b34:	9400      	str	r4, [sp, #0]
 8005b36:	21c0      	movs	r1, #192	; 0xc0
 8005b38:	b292      	uxth	r2, r2
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	441c      	add	r4, r3
 8005b3e:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8005b42:	f006 fd51 	bl	800c5e8 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8005b46:	4605      	mov	r5, r0
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d141      	bne.n	8005bd0 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8005b4c:	45a2      	cmp	sl, r4
 8005b4e:	d1ee      	bne.n	8005b2e <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8005b50:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005b54:	2b5a      	cmp	r3, #90	; 0x5a
 8005b56:	d04a      	beq.n	8005bee <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8005b58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005b5c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8005b60:	badb      	revsh	r3, r3
 8005b62:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8005b66:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8005b6a:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8005b6c:	109b      	asrs	r3, r3, #2
 8005b6e:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 8005b70:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 8005b72:	ee06 2a10 	vmov	s12, r2
 8005b76:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8005b7a:	ee07 3a10 	vmov	s14, r3
 8005b7e:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8005b82:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8005b84:	ee05 1a10 	vmov	s10, r1
 8005b88:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005b8c:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 8005b8e:	ee04 0a10 	vmov	s8, r0
 8005b92:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8005b96:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8005b98:	481c      	ldr	r0, [pc, #112]	; (8005c0c <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8005b9a:	491d      	ldr	r1, [pc, #116]	; (8005c10 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005b9c:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8005ba0:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005ba4:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8005ba6:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8005baa:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 8005bae:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005bb2:	f88d 2014 	strb.w	r2, [sp, #20]
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	aa05      	add	r2, sp, #20
 8005bba:	21c0      	movs	r1, #192	; 0xc0
 8005bbc:	4810      	ldr	r0, [pc, #64]	; (8005c00 <initpressure115+0xf4>)
 8005bbe:	f006 fb7f 	bl	800c2c0 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005bc2:	b968      	cbnz	r0, 8005be0 <initpressure115+0xd4>
 8005bc4:	f7ff fd38 	bl	8005638 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8005bc8:	4628      	mov	r0, r5
 8005bca:	b008      	add	sp, #32
 8005bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8005bd0:	4601      	mov	r1, r0
 8005bd2:	4810      	ldr	r0, [pc, #64]	; (8005c14 <initpressure115+0x108>)
 8005bd4:	f01f fbee 	bl	80253b4 <iprintf>
}
 8005bd8:	4628      	mov	r0, r5
 8005bda:	b008      	add	sp, #32
 8005bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8005be0:	480d      	ldr	r0, [pc, #52]	; (8005c18 <initpressure115+0x10c>)
 8005be2:	f01f fbe7 	bl	80253b4 <iprintf>
}
 8005be6:	4628      	mov	r0, r5
 8005be8:	b008      	add	sp, #32
 8005bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8005bee:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8005bf0:	480a      	ldr	r0, [pc, #40]	; (8005c1c <initpressure115+0x110>)
 8005bf2:	f01f fbdf 	bl	80253b4 <iprintf>
}
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	b008      	add	sp, #32
 8005bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfe:	bf00      	nop
 8005c00:	200024f0 	.word	0x200024f0
 8005c04:	20002ff8 	.word	0x20002ff8
 8005c08:	20002fd8 	.word	0x20002fd8
 8005c0c:	20002fe0 	.word	0x20002fe0
 8005c10:	20002fe8 	.word	0x20002fe8
 8005c14:	0802be10 	.word	0x0802be10
 8005c18:	0802bdec 	.word	0x0802bdec
 8005c1c:	0802be40 	.word	0x0802be40

08005c20 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8005c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8005c26:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8005c28:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c2a:	4f46      	ldr	r7, [pc, #280]	; (8005d44 <getpressure3115+0x124>)
 8005c2c:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8005c2e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8005d64 <getpressure3115+0x144>
	data[0] = 0x55;
 8005c32:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8005c36:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c38:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8005c3c:	f00f fc20 	bl	8015480 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c40:	2301      	movs	r3, #1
 8005c42:	2200      	movs	r2, #0
 8005c44:	21c0      	movs	r1, #192	; 0xc0
 8005c46:	4638      	mov	r0, r7
 8005c48:	9600      	str	r6, [sp, #0]
 8005c4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c4e:	f006 fccb 	bl	800c5e8 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8005c52:	4604      	mov	r4, r0
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d163      	bne.n	8005d20 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8005c58:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8005c5c:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8005c5e:	071b      	lsls	r3, r3, #28
 8005c60:	d401      	bmi.n	8005c66 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8005c62:	2d04      	cmp	r5, #4
 8005c64:	d1e7      	bne.n	8005c36 <getpressure3115+0x16>
 8005c66:	2501      	movs	r5, #1
 8005c68:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c6a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8005c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8005d44 <getpressure3115+0x124>
 8005c72:	46a9      	mov	r9, r5
 8005c74:	b2aa      	uxth	r2, r5
 8005c76:	2301      	movs	r3, #1
 8005c78:	21c0      	movs	r1, #192	; 0xc0
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8005c7e:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c80:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8005c84:	f006 fcb0 	bl	800c5e8 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8005c88:	4604      	mov	r4, r0
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d152      	bne.n	8005d34 <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8005c8e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8005c92:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8005c94:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8005c98:	d1ec      	bne.n	8005c74 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005c9a:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8005c9e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005ca2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005ca6:	0209      	lsls	r1, r1, #8
 8005ca8:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8005cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cb4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005cb8:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8005cba:	4923      	ldr	r1, [pc, #140]	; (8005d48 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005cbc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005cc0:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005cc2:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005cc4:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005cc6:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8005cc8:	9805      	ldr	r0, [sp, #20]
 8005cca:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 8005ccc:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8005cce:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8005cd2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005cd6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 8005cda:	9a04      	ldr	r2, [sp, #16]
 8005cdc:	fba3 0202 	umull	r0, r2, r3, r2
 8005ce0:	0a12      	lsrs	r2, r2, #8
 8005ce2:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005ce4:	9a04      	ldr	r2, [sp, #16]
 8005ce6:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8005cea:	4819      	ldr	r0, [pc, #100]	; (8005d50 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8005cf4:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005cf8:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8005cfa:	9b06      	ldr	r3, [sp, #24]
 8005cfc:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8005cfe:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8005d00:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8005d02:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8005d04:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8005d06:	0912      	lsrs	r2, r2, #4
 8005d08:	4813      	ldr	r0, [pc, #76]	; (8005d58 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 8005d0a:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 8005d0e:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8005d10:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8005d12:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <getpressure3115+0x13c>)
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	b00c      	add	sp, #48	; 0x30
 8005d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8005d20:	4601      	mov	r1, r0
 8005d22:	4640      	mov	r0, r8
 8005d24:	f01f fb46 	bl	80253b4 <iprintf>
			if (trys == 3)
 8005d28:	2d03      	cmp	r5, #3
 8005d2a:	d195      	bne.n	8005c58 <getpressure3115+0x38>
}
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	b00c      	add	sp, #48	; 0x30
 8005d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8005d34:	4601      	mov	r1, r0
 8005d36:	480a      	ldr	r0, [pc, #40]	; (8005d60 <getpressure3115+0x140>)
 8005d38:	f01f fb3c 	bl	80253b4 <iprintf>
}
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	b00c      	add	sp, #48	; 0x30
 8005d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d44:	200024f0 	.word	0x200024f0
 8005d48:	20002f3c 	.word	0x20002f3c
 8005d4c:	10624dd3 	.word	0x10624dd3
 8005d50:	20003074 	.word	0x20003074
 8005d54:	20003078 	.word	0x20003078
 8005d58:	20003080 	.word	0x20003080
 8005d5c:	20003084 	.word	0x20003084
 8005d60:	0802be90 	.word	0x0802be90
 8005d64:	0802be68 	.word	0x0802be68

08005d68 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8005d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6a:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8005d6c:	2501      	movs	r5, #1
 8005d6e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005d72:	220c      	movs	r2, #12
 8005d74:	a908      	add	r1, sp, #32
 8005d76:	462b      	mov	r3, r5
 8005d78:	4832      	ldr	r0, [pc, #200]	; (8005e44 <initpressure3115+0xdc>)
 8005d7a:	9100      	str	r1, [sp, #0]
 8005d7c:	21c0      	movs	r1, #192	; 0xc0
 8005d7e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8005d82:	f006 fc31 	bl	800c5e8 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d145      	bne.n	8005e16 <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8005d8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8005d8e:	2bc4      	cmp	r3, #196	; 0xc4
 8005d90:	d003      	beq.n	8005d9a <initpressure3115+0x32>
		return (HAL_ERROR);
 8005d92:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8005d94:	4620      	mov	r0, r4
 8005d96:	b00b      	add	sp, #44	; 0x2c
 8005d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8005d9a:	4f2b      	ldr	r7, [pc, #172]	; (8005e48 <initpressure3115+0xe0>)
 8005d9c:	aa05      	add	r2, sp, #20
 8005d9e:	21c0      	movs	r1, #192	; 0xc0
 8005da0:	4828      	ldr	r0, [pc, #160]	; (8005e44 <initpressure3115+0xdc>)
 8005da2:	89bb      	ldrh	r3, [r7, #12]
 8005da4:	9600      	str	r6, [sp, #0]
 8005da6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005daa:	2302      	movs	r3, #2
 8005dac:	f006 fa88 	bl	800c2c0 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005db0:	4604      	mov	r4, r0
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d136      	bne.n	8005e24 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8005db6:	8a3b      	ldrh	r3, [r7, #16]
 8005db8:	aa06      	add	r2, sp, #24
 8005dba:	21c0      	movs	r1, #192	; 0xc0
 8005dbc:	4821      	ldr	r0, [pc, #132]	; (8005e44 <initpressure3115+0xdc>)
 8005dbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	9600      	str	r6, [sp, #0]
 8005dc6:	f006 fa7b 	bl	800c2c0 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005dca:	4604      	mov	r4, r0
 8005dcc:	bb70      	cbnz	r0, 8005e2c <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8005dce:	8aba      	ldrh	r2, [r7, #20]
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	21c0      	movs	r1, #192	; 0xc0
 8005dd4:	481b      	ldr	r0, [pc, #108]	; (8005e44 <initpressure3115+0xdc>)
 8005dd6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8005dda:	aa07      	add	r2, sp, #28
 8005ddc:	9600      	str	r6, [sp, #0]
 8005dde:	f006 fa6f 	bl	800c2c0 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005de2:	4604      	mov	r4, r0
 8005de4:	bb50      	cbnz	r0, 8005e3c <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8005de6:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 8005de8:	2064      	movs	r0, #100	; 0x64
 8005dea:	f00f fb49 	bl	8015480 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8005dee:	462b      	mov	r3, r5
 8005df0:	9400      	str	r4, [sp, #0]
 8005df2:	462a      	mov	r2, r5
 8005df4:	21c0      	movs	r1, #192	; 0xc0
 8005df6:	4813      	ldr	r0, [pc, #76]	; (8005e44 <initpressure3115+0xdc>)
 8005df8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8005dfc:	f006 fbf4 	bl	800c5e8 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8005e00:	4604      	mov	r4, r0
 8005e02:	b9b8      	cbnz	r0, 8005e34 <initpressure3115+0xcc>
	result = getpressure3115();
 8005e04:	f7ff ff0c 	bl	8005c20 <getpressure3115>
	if (result != HAL_OK) {
 8005e08:	4604      	mov	r4, r0
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d0c2      	beq.n	8005d94 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8005e0e:	480f      	ldr	r0, [pc, #60]	; (8005e4c <initpressure3115+0xe4>)
 8005e10:	f01f fad0 	bl	80253b4 <iprintf>
 8005e14:	e7be      	b.n	8005d94 <initpressure3115+0x2c>
 8005e16:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8005e18:	480d      	ldr	r0, [pc, #52]	; (8005e50 <initpressure3115+0xe8>)
 8005e1a:	f01f facb 	bl	80253b4 <iprintf>
}
 8005e1e:	4620      	mov	r0, r4
 8005e20:	b00b      	add	sp, #44	; 0x2c
 8005e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8005e24:	480b      	ldr	r0, [pc, #44]	; (8005e54 <initpressure3115+0xec>)
 8005e26:	f01f fac5 	bl	80253b4 <iprintf>
		return (result);
 8005e2a:	e7b3      	b.n	8005d94 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8005e2c:	480a      	ldr	r0, [pc, #40]	; (8005e58 <initpressure3115+0xf0>)
 8005e2e:	f01f fac1 	bl	80253b4 <iprintf>
		return (result);
 8005e32:	e7af      	b.n	8005d94 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8005e34:	4809      	ldr	r0, [pc, #36]	; (8005e5c <initpressure3115+0xf4>)
 8005e36:	f01f fabd 	bl	80253b4 <iprintf>
		return (result);
 8005e3a:	e7ab      	b.n	8005d94 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8005e3c:	4808      	ldr	r0, [pc, #32]	; (8005e60 <initpressure3115+0xf8>)
 8005e3e:	f01f fab9 	bl	80253b4 <iprintf>
		return (result);
 8005e42:	e7a7      	b.n	8005d94 <initpressure3115+0x2c>
 8005e44:	200024f0 	.word	0x200024f0
 8005e48:	0802958c 	.word	0x0802958c
 8005e4c:	0802bf28 	.word	0x0802bf28
 8005e50:	0802bdd0 	.word	0x0802bdd0
 8005e54:	0802beb8 	.word	0x0802beb8
 8005e58:	0802bed4 	.word	0x0802bed4
 8005e5c:	0802bf0c 	.word	0x0802bf0c
 8005e60:	0802bef0 	.word	0x0802bef0

08005e64 <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8005e68:	4820      	ldr	r0, [pc, #128]	; (8005eec <init_esp+0x88>)
 8005e6a:	f01f fb3f 	bl	80254ec <puts>

	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 8005e6e:	2201      	movs	r2, #1
 8005e70:	491f      	ldr	r1, [pc, #124]	; (8005ef0 <init_esp+0x8c>)
 8005e72:	4820      	ldr	r0, [pc, #128]	; (8005ef4 <init_esp+0x90>)
 8005e74:	f00d faa8 	bl	80133c8 <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8005e78:	bb98      	cbnz	r0, 8005ee2 <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e80:	481d      	ldr	r0, [pc, #116]	; (8005ef8 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8005e82:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8005e86:	f005 ff15 	bl	800bcb4 <HAL_GPIO_WritePin>
	osDelay(20);
 8005e8a:	4c1c      	ldr	r4, [pc, #112]	; (8005efc <init_esp+0x98>)
 8005e8c:	2014      	movs	r0, #20
 8005e8e:	4d1c      	ldr	r5, [pc, #112]	; (8005f00 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8005e90:	4e1c      	ldr	r6, [pc, #112]	; (8005f04 <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8005e92:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8005e96:	f00f faf3 	bl	8015480 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ea0:	4815      	ldr	r0, [pc, #84]	; (8005ef8 <init_esp+0x94>)
 8005ea2:	f005 ff07 	bl	800bcb4 <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	e006      	b.n	8005eb8 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 8005eaa:	5cf0      	ldrb	r0, [r6, r3]
 8005eac:	6021      	str	r1, [r4, #0]
 8005eae:	f01f fa99 	bl	80253e4 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	2b60      	cmp	r3, #96	; 0x60
 8005eb6:	d810      	bhi.n	8005eda <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8005eb8:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8005eba:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d1f4      	bne.n	8005eaa <init_esp+0x46>
		osDelay(1);
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	f00f fadd 	bl	8015480 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8005ec6:	3f01      	subs	r7, #1
 8005ec8:	d1ed      	bne.n	8005ea6 <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 8005eca:	20c8      	movs	r0, #200	; 0xc8
 8005ecc:	f00f fad8 	bl	8015480 <osDelay>
	printf("\n");
 8005ed0:	200a      	movs	r0, #10
}
 8005ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 8005ed6:	f01f ba85 	b.w	80253e4 <putchar>
			espoutindex = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	f8c4 8000 	str.w	r8, [r4]
 8005ee0:	e7ea      	b.n	8005eb8 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 8005ee2:	4809      	ldr	r0, [pc, #36]	; (8005f08 <init_esp+0xa4>)
 8005ee4:	f01f fb02 	bl	80254ec <puts>
 8005ee8:	e7c7      	b.n	8005e7a <init_esp+0x16>
 8005eea:	bf00      	nop
 8005eec:	0802bf48 	.word	0x0802bf48
 8005ef0:	20003000 	.word	0x20003000
 8005ef4:	20002b90 	.word	0x20002b90
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	20003004 	.word	0x20003004
 8005f00:	20003068 	.word	0x20003068
 8005f04:	20003008 	.word	0x20003008
 8005f08:	0802bf5c 	.word	0x0802bf5c

08005f0c <uart6_rxdone>:
uart6_rxdone() {
 8005f0c:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 8005f0e:	4c0b      	ldr	r4, [pc, #44]	; (8005f3c <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <uart6_rxdone+0x34>)
	i = esprxindex;
 8005f12:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 8005f14:	7819      	ldrb	r1, [r3, #0]
 8005f16:	1c6b      	adds	r3, r5, #1
 8005f18:	4a0a      	ldr	r2, [pc, #40]	; (8005f44 <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 8005f1a:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 8005f1c:	5551      	strb	r1, [r2, r5]
 8005f1e:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 8005f20:	d902      	bls.n	8005f28 <uart6_rxdone+0x1c>
		esprxindex = 0;
 8005f22:	2200      	movs	r2, #0
 8005f24:	4613      	mov	r3, r2
 8005f26:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 8005f28:	4a07      	ldr	r2, [pc, #28]	; (8005f48 <uart6_rxdone+0x3c>)
 8005f2a:	6812      	ldr	r2, [r2, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d000      	beq.n	8005f32 <uart6_rxdone+0x26>
}
 8005f30:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 8005f32:	4806      	ldr	r0, [pc, #24]	; (8005f4c <uart6_rxdone+0x40>)
 8005f34:	f01f fada 	bl	80254ec <puts>
		esprxindex = i;
 8005f38:	6025      	str	r5, [r4, #0]
}
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	20003068 	.word	0x20003068
 8005f40:	20003000 	.word	0x20003000
 8005f44:	20003008 	.word	0x20003008
 8005f48:	20003004 	.word	0x20003004
 8005f4c:	0802bf74 	.word	0x0802bf74

08005f50 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8005f50:	b510      	push	{r4, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 8005f56:	ac02      	add	r4, sp, #8
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f01f fca6 	bl	80258aa <stpcpy>
	strcat(txbuf, "\r\n");
 8005f5e:	4b0d      	ldr	r3, [pc, #52]	; (8005f94 <esp_cmd+0x44>)
 8005f60:	8819      	ldrh	r1, [r3, #0]
 8005f62:	789a      	ldrb	r2, [r3, #2]
 8005f64:	1b03      	subs	r3, r0, r4
 8005f66:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8005f68:	4621      	mov	r1, r4
	len = strlen(txbuf);
 8005f6a:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 8005f6c:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 8005f6e:	480a      	ldr	r0, [pc, #40]	; (8005f98 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8005f70:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 8005f72:	f01f fa1f 	bl	80253b4 <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 8005f76:	9a01      	ldr	r2, [sp, #4]
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4808      	ldr	r0, [pc, #32]	; (8005f9c <esp_cmd+0x4c>)
 8005f7c:	b292      	uxth	r2, r2
 8005f7e:	f00b ffe3 	bl	8011f48 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8005f82:	b908      	cbnz	r0, 8005f88 <esp_cmd+0x38>
}
 8005f84:	b006      	add	sp, #24
 8005f86:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8005f88:	4601      	mov	r1, r0
 8005f8a:	4805      	ldr	r0, [pc, #20]	; (8005fa0 <esp_cmd+0x50>)
 8005f8c:	f01f fa12 	bl	80253b4 <iprintf>
}
 8005f90:	b006      	add	sp, #24
 8005f92:	bd10      	pop	{r4, pc}
 8005f94:	0802a12c 	.word	0x0802a12c
 8005f98:	0802bf90 	.word	0x0802bf90
 8005f9c:	20002b90 	.word	0x20002b90
 8005fa0:	0802bfa4 	.word	0x0802bfa4

08005fa4 <test_esp>:
void test_esp() {
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8005fa8:	4813      	ldr	r0, [pc, #76]	; (8005ff8 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 8005faa:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 8005fae:	f01f fa9d 	bl	80254ec <puts>
	osDelay(200);
 8005fb2:	4c12      	ldr	r4, [pc, #72]	; (8005ffc <test_esp+0x58>)
 8005fb4:	20c8      	movs	r0, #200	; 0xc8
 8005fb6:	4d12      	ldr	r5, [pc, #72]	; (8006000 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8005fb8:	4e12      	ldr	r6, [pc, #72]	; (8006004 <test_esp+0x60>)
			espoutindex = 0;
 8005fba:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 8005fbe:	f00f fa5f 	bl	8015480 <osDelay>
	esp_cmd(getstatus);	// send the command
 8005fc2:	4811      	ldr	r0, [pc, #68]	; (8006008 <test_esp+0x64>)
 8005fc4:	f7ff ffc4 	bl	8005f50 <esp_cmd>
	while (espoutindex != esprxindex) {
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	e006      	b.n	8005fda <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 8005fcc:	5cf0      	ldrb	r0, [r6, r3]
 8005fce:	6021      	str	r1, [r4, #0]
 8005fd0:	f01f fa08 	bl	80253e4 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	2b60      	cmp	r3, #96	; 0x60
 8005fd8:	d80a      	bhi.n	8005ff0 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 8005fda:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8005fdc:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d1f4      	bne.n	8005fcc <test_esp+0x28>
		osDelay(1);
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	f00f fa4c 	bl	8015480 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 8005fe8:	3f01      	subs	r7, #1
 8005fea:	d1ed      	bne.n	8005fc8 <test_esp+0x24>
}
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f8c4 8000 	str.w	r8, [r4]
 8005ff6:	e7f0      	b.n	8005fda <test_esp+0x36>
 8005ff8:	0802bfc4 	.word	0x0802bfc4
 8005ffc:	20003004 	.word	0x20003004
 8006000:	20003068 	.word	0x20003068
 8006004:	20003008 	.word	0x20003008
 8006008:	20000270 	.word	0x20000270

0800600c <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 800600c:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 800600e:	4818      	ldr	r0, [pc, #96]	; (8006070 <init_ds2485+0x64>)
void init_ds2485(void) {
 8006010:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 8006012:	f01f fa6b 	bl	80254ec <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 8006016:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 800601c:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 800601e:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006022:	2303      	movs	r3, #3
 8006024:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 8006026:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 800602a:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 800602c:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006030:	aa02      	add	r2, sp, #8
 8006032:	4810      	ldr	r0, [pc, #64]	; (8006074 <init_ds2485+0x68>)
 8006034:	f006 f944 	bl	800c2c0 <HAL_I2C_Master_Transmit>
 8006038:	b9a8      	cbnz	r0, 8006066 <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 800603a:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 800603c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 8006040:	f00f fa1e 	bl	8015480 <osDelay>
		data[i] = 0xA5 + i;
 8006044:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8006046:	2181      	movs	r1, #129	; 0x81
 8006048:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 800604a:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 800604e:	aa02      	add	r2, sp, #8
 8006050:	4808      	ldr	r0, [pc, #32]	; (8006074 <init_ds2485+0x68>)
 8006052:	9400      	str	r4, [sp, #0]
 8006054:	f006 f9fc 	bl	800c450 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8006058:	4601      	mov	r1, r0
 800605a:	b110      	cbz	r0, 8006062 <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 800605c:	4806      	ldr	r0, [pc, #24]	; (8006078 <init_ds2485+0x6c>)
 800605e:	f01f f9a9 	bl	80253b4 <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 8006062:	b006      	add	sp, #24
 8006064:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8006066:	4601      	mov	r1, r0
 8006068:	4803      	ldr	r0, [pc, #12]	; (8006078 <init_ds2485+0x6c>)
 800606a:	f01f f9a3 	bl	80253b4 <iprintf>
 800606e:	e7e4      	b.n	800603a <init_ds2485+0x2e>
 8006070:	0802bfec 	.word	0x0802bfec
 8006074:	200024f0 	.word	0x200024f0
 8006078:	0802bff8 	.word	0x0802bff8

0800607c <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4604      	mov	r4, r0
 8006080:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 8006082:	4821      	ldr	r0, [pc, #132]	; (8006108 <readp_ds2485+0x8c>)
 8006084:	f01f fa32 	bl	80254ec <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 8006088:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800608a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 800608e:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8006090:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 8006094:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 800609a:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800609e:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 80060a0:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 80060a4:	aa03      	add	r2, sp, #12
 80060a6:	4819      	ldr	r0, [pc, #100]	; (800610c <readp_ds2485+0x90>)
 80060a8:	f006 f90a 	bl	800c2c0 <HAL_I2C_Master_Transmit>
 80060ac:	bb18      	cbnz	r0, 80060f6 <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 80060ae:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 80060b0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 80060b4:	f00f f9e4 	bl	8015480 <osDelay>
		data[i] = 0x5A + i;
 80060b8:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 80060ba:	b2a3      	uxth	r3, r4
 80060bc:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 80060be:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 80060c2:	2181      	movs	r1, #129	; 0x81
 80060c4:	4811      	ldr	r0, [pc, #68]	; (800610c <readp_ds2485+0x90>)
 80060c6:	9500      	str	r5, [sp, #0]
 80060c8:	f006 f9c2 	bl	800c450 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 80060cc:	b9b8      	cbnz	r0, 80060fe <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 80060ce:	4810      	ldr	r0, [pc, #64]	; (8006110 <readp_ds2485+0x94>)
 80060d0:	f10d 040b 	add.w	r4, sp, #11
 80060d4:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 80060d8:	4d0e      	ldr	r5, [pc, #56]	; (8006114 <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 80060da:	f01f f96b 	bl	80253b4 <iprintf>
		printf("0x%02x ", data[i]);
 80060de:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80060e2:	4628      	mov	r0, r5
 80060e4:	f01f f966 	bl	80253b4 <iprintf>
	for (i = 0; i < 8; i++) {
 80060e8:	42b4      	cmp	r4, r6
 80060ea:	d1f8      	bne.n	80060de <readp_ds2485+0x62>
	}
	printf("\n");
 80060ec:	200a      	movs	r0, #10
 80060ee:	f01f f979 	bl	80253e4 <putchar>
}
 80060f2:	b006      	add	sp, #24
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 80060f6:	4808      	ldr	r0, [pc, #32]	; (8006118 <readp_ds2485+0x9c>)
 80060f8:	f01f f95c 	bl	80253b4 <iprintf>
 80060fc:	e7d7      	b.n	80060ae <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 80060fe:	4601      	mov	r1, r0
 8006100:	4806      	ldr	r0, [pc, #24]	; (800611c <readp_ds2485+0xa0>)
 8006102:	f01f f957 	bl	80253b4 <iprintf>
 8006106:	e7e2      	b.n	80060ce <readp_ds2485+0x52>
 8006108:	0802c01c 	.word	0x0802c01c
 800610c:	200024f0 	.word	0x200024f0
 8006110:	0802c07c 	.word	0x0802c07c
 8006114:	0802c0a4 	.word	0x0802c0a4
 8006118:	0802c034 	.word	0x0802c034
 800611c:	0802c058 	.word	0x0802c058

08006120 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8006120:	b530      	push	{r4, r5, lr}
 8006122:	b083      	sub	sp, #12

	cycleleds();
	osDelay(500);
	printf("Initsplat: LED cycle\n");

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8006124:	4c44      	ldr	r4, [pc, #272]	; (8006238 <initsplat+0x118>)
	cycleleds();
 8006126:	f7ff fb85 	bl	8005834 <cycleleds>
	osDelay(500);
 800612a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800612e:	f00f f9a7 	bl	8015480 <osDelay>
	printf("Initsplat: LED cycle\n");
 8006132:	4842      	ldr	r0, [pc, #264]	; (800623c <initsplat+0x11c>)
 8006134:	f01f f9da 	bl	80254ec <puts>
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	2b0b      	cmp	r3, #11
 800613c:	d062      	beq.n	8006204 <initsplat+0xe4>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 800613e:	4840      	ldr	r0, [pc, #256]	; (8006240 <initsplat+0x120>)
 8006140:	f01f f9d4 	bl	80254ec <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8006144:	4d3f      	ldr	r5, [pc, #252]	; (8006244 <initsplat+0x124>)
	initpga();
 8006146:	f7ff fc1f 	bl	8005988 <initpga>
	osDelay(500);
 800614a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800614e:	f00f f997 	bl	8015480 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8006152:	483d      	ldr	r0, [pc, #244]	; (8006248 <initsplat+0x128>)
 8006154:	f01f f92e 	bl	80253b4 <iprintf>
	psensor = PNONE;
 8006158:	2300      	movs	r3, #0
 800615a:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 800615c:	f7ff fe04 	bl	8005d68 <initpressure3115>
 8006160:	b9d8      	cbnz	r0, 800619a <initsplat+0x7a>
		printf("MPL3115A2 pressure sensor present\n\r");
 8006162:	483a      	ldr	r0, [pc, #232]	; (800624c <initsplat+0x12c>)
 8006164:	f01f f926 	bl	80253b4 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 8006168:	4a39      	ldr	r2, [pc, #228]	; (8006250 <initsplat+0x130>)
		psensor = MPL3115A2;
 800616a:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 800616c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8006170:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 8006172:	f043 0310 	orr.w	r3, r3, #16
 8006176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 800617a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800617e:	f00f f97f 	bl	8015480 <osDelay>

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	2b16      	cmp	r3, #22
 8006186:	d01e      	beq.n	80061c6 <initsplat+0xa6>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8006188:	2200      	movs	r2, #0
 800618a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800618e:	4831      	ldr	r0, [pc, #196]	; (8006254 <initsplat+0x134>)
}
 8006190:	b003      	add	sp, #12
 8006192:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8006196:	f005 bd8d 	b.w	800bcb4 <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 800619a:	f7ff fcb7 	bl	8005b0c <initpressure115>
 800619e:	bb68      	cbnz	r0, 80061fc <initsplat+0xdc>
			printf("MPL115A2 pressure sensor present\n\r");
 80061a0:	482d      	ldr	r0, [pc, #180]	; (8006258 <initsplat+0x138>)
 80061a2:	f01f f907 	bl	80253b4 <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 80061a6:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <initsplat+0x130>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80061a8:	2101      	movs	r1, #1
	osDelay(500);
 80061aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2 << 3);
 80061ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80061b2:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 80061b4:	f043 0308 	orr.w	r3, r3, #8
 80061b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 80061bc:	f00f f960 	bl	8015480 <osDelay>
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	2b16      	cmp	r3, #22
 80061c4:	d1e0      	bne.n	8006188 <initsplat+0x68>
		huart6.Init.BaudRate = 115200;
 80061c6:	4825      	ldr	r0, [pc, #148]	; (800625c <initsplat+0x13c>)
 80061c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80061cc:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 80061ce:	f00c ff0b 	bl	8012fe8 <HAL_UART_Init>
 80061d2:	bb68      	cbnz	r0, 8006230 <initsplat+0x110>
	init_ds2485();
 80061d4:	f7ff ff1a 	bl	800600c <init_ds2485>
	osDelay(80);
 80061d8:	2050      	movs	r0, #80	; 0x50
 80061da:	f00f f951 	bl	8015480 <osDelay>
	readp_ds2485(8);
 80061de:	2008      	movs	r0, #8
 80061e0:	f7ff ff4c 	bl	800607c <readp_ds2485>
		init_esp();
 80061e4:	f7ff fe3e 	bl	8005e64 <init_esp>
		osDelay(500);
 80061e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061ec:	f00f f948 	bl	8015480 <osDelay>
		test_esp();
 80061f0:	f7ff fed8 	bl	8005fa4 <test_esp>
		osDelay(200);
 80061f4:	20c8      	movs	r0, #200	; 0xc8
 80061f6:	f00f f943 	bl	8015480 <osDelay>
 80061fa:	e7c5      	b.n	8006188 <initsplat+0x68>
			printf("NO pressure sensor present\n\r");
 80061fc:	4818      	ldr	r0, [pc, #96]	; (8006260 <initsplat+0x140>)
 80061fe:	f01f f8d9 	bl	80253b4 <iprintf>
 8006202:	e7ba      	b.n	800617a <initsplat+0x5a>
		printf("Initsplat: Dual Mux\n\r");
 8006204:	4817      	ldr	r0, [pc, #92]	; (8006264 <initsplat+0x144>)
 8006206:	f01f f8d5 	bl	80253b4 <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 800620a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800620e:	2301      	movs	r3, #1
 8006210:	4a15      	ldr	r2, [pc, #84]	; (8006268 <initsplat+0x148>)
 8006212:	9000      	str	r0, [sp, #0]
 8006214:	2188      	movs	r1, #136	; 0x88
 8006216:	4815      	ldr	r0, [pc, #84]	; (800626c <initsplat+0x14c>)
 8006218:	f006 f852 	bl	800c2c0 <HAL_I2C_Master_Transmit>
 800621c:	b920      	cbnz	r0, 8006228 <initsplat+0x108>
		osDelay(500);
 800621e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006222:	f00f f92d 	bl	8015480 <osDelay>
 8006226:	e78a      	b.n	800613e <initsplat+0x1e>
		printf("I2C HAL returned error 1\n\r");
 8006228:	4811      	ldr	r0, [pc, #68]	; (8006270 <initsplat+0x150>)
 800622a:	f01f f8c3 	bl	80253b4 <iprintf>
 800622e:	e7f6      	b.n	800621e <initsplat+0xfe>
			Error_Handler();
 8006230:	f7fd fe7c 	bl	8003f2c <Error_Handler>
 8006234:	e7ce      	b.n	80061d4 <initsplat+0xb4>
 8006236:	bf00      	nop
 8006238:	2000208c 	.word	0x2000208c
 800623c:	0802c0ac 	.word	0x0802c0ac
 8006240:	0802c0dc 	.word	0x0802c0dc
 8006244:	2000307c 	.word	0x2000307c
 8006248:	0802c100 	.word	0x0802c100
 800624c:	0802c120 	.word	0x0802c120
 8006250:	20002f3c 	.word	0x20002f3c
 8006254:	40021000 	.word	0x40021000
 8006258:	0802c144 	.word	0x0802c144
 800625c:	20002b90 	.word	0x20002b90
 8006260:	0802c168 	.word	0x0802c168
 8006264:	0802c0c4 	.word	0x0802c0c4
 8006268:	2000027c 	.word	0x2000027c
 800626c:	200024f0 	.word	0x200024f0
 8006270:	0802bdd0 	.word	0x0802bdd0

08006274 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006274:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006276:	2200      	movs	r2, #0
 8006278:	210f      	movs	r1, #15
 800627a:	f06f 0001 	mvn.w	r0, #1
{
 800627e:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8006280:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8006282:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8006284:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006288:	641c      	str	r4, [r3, #64]	; 0x40
 800628a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800628c:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8006290:	9400      	str	r4, [sp, #0]
 8006292:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006294:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8006296:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800629a:	645c      	str	r4, [r3, #68]	; 0x44
 800629c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80062a6:	f002 fbdb 	bl	8008a60 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80062aa:	2200      	movs	r2, #0
 80062ac:	2106      	movs	r1, #6
 80062ae:	2005      	movs	r0, #5
 80062b0:	f002 fbd6 	bl	8008a60 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80062b4:	2005      	movs	r0, #5
 80062b6:	f002 fc1d 	bl	8008af4 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80062ba:	2200      	movs	r2, #0
 80062bc:	2106      	movs	r1, #6
 80062be:	2005      	movs	r0, #5
 80062c0:	f002 fbce 	bl	8008a60 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80062c4:	2005      	movs	r0, #5
 80062c6:	f002 fc15 	bl	8008af4 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 80062ca:	2051      	movs	r0, #81	; 0x51
 80062cc:	2200      	movs	r2, #0
 80062ce:	2106      	movs	r1, #6
 80062d0:	f002 fbc6 	bl	8008a60 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80062d4:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062d6:	b002      	add	sp, #8
 80062d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80062dc:	f002 bc0a 	b.w	8008af4 <HAL_NVIC_EnableIRQ>
 80062e0:	40023800 	.word	0x40023800

080062e4 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80062e4:	4a49      	ldr	r2, [pc, #292]	; (800640c <HAL_ADC_MspInit+0x128>)
 80062e6:	6803      	ldr	r3, [r0, #0]
{
 80062e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 80062ea:	4293      	cmp	r3, r2
{
 80062ec:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ee:	f04f 0400 	mov.w	r4, #0
 80062f2:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80062f6:	9409      	str	r4, [sp, #36]	; 0x24
 80062f8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80062fc:	d007      	beq.n	800630e <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80062fe:	4a44      	ldr	r2, [pc, #272]	; (8006410 <HAL_ADC_MspInit+0x12c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d045      	beq.n	8006390 <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8006304:	4a43      	ldr	r2, [pc, #268]	; (8006414 <HAL_ADC_MspInit+0x130>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d05f      	beq.n	80063ca <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800630a:	b00d      	add	sp, #52	; 0x34
 800630c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800630e:	4b42      	ldr	r3, [pc, #264]	; (8006418 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006310:	2703      	movs	r7, #3
 8006312:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006314:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006318:	4840      	ldr	r0, [pc, #256]	; (800641c <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800631a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 800631e:	4e40      	ldr	r6, [pc, #256]	; (8006420 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
 8006322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006324:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006328:	9201      	str	r2, [sp, #4]
 800632a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800632c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800633c:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800633e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006340:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006344:	f005 fa0a 	bl	800b75c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8006348:	4b36      	ldr	r3, [pc, #216]	; (8006424 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800634a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800634e:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 8006350:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006352:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8006356:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006358:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800635c:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800635e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006362:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006364:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006366:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800636a:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800636c:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800636e:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006376:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006378:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800637c:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006380:	f002 fe80 	bl	8009084 <HAL_DMA_Init>
 8006384:	2800      	cmp	r0, #0
 8006386:	d13d      	bne.n	8006404 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006388:	63ae      	str	r6, [r5, #56]	; 0x38
 800638a:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800638c:	b00d      	add	sp, #52	; 0x34
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006390:	4b21      	ldr	r3, [pc, #132]	; (8006418 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006392:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006394:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006396:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800639a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639e:	645a      	str	r2, [r3, #68]	; 0x44
 80063a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80063a6:	9203      	str	r2, [sp, #12]
 80063a8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ac:	f042 0201 	orr.w	r2, r2, #1
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063b4:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063b6:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ba:	4818      	ldr	r0, [pc, #96]	; (800641c <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063bc:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c2:	f005 f9cb 	bl	800b75c <HAL_GPIO_Init>
}
 80063c6:	b00d      	add	sp, #52	; 0x34
 80063c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063cc:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063ce:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063d0:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 80063d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063d8:	645a      	str	r2, [r3, #68]	; 0x44
 80063da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063dc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80063e0:	9205      	str	r2, [sp, #20]
 80063e2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063ee:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063f4:	4809      	ldr	r0, [pc, #36]	; (800641c <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063f6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f8:	9306      	str	r3, [sp, #24]
 80063fa:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063fc:	f005 f9ae 	bl	800b75c <HAL_GPIO_Init>
}
 8006400:	b00d      	add	sp, #52	; 0x34
 8006402:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8006404:	f7fd fd92 	bl	8003f2c <Error_Handler>
 8006408:	e7be      	b.n	8006388 <HAL_ADC_MspInit+0xa4>
 800640a:	bf00      	nop
 800640c:	40012000 	.word	0x40012000
 8006410:	40012100 	.word	0x40012100
 8006414:	40012200 	.word	0x40012200
 8006418:	40023800 	.word	0x40023800
 800641c:	40020000 	.word	0x40020000
 8006420:	200021f0 	.word	0x200021f0
 8006424:	40026470 	.word	0x40026470

08006428 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <HAL_CRC_MspInit+0x28>)
 800642a:	6802      	ldr	r2, [r0, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d000      	beq.n	8006432 <HAL_CRC_MspInit+0xa>
 8006430:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006432:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 800643a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800643c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006440:	631a      	str	r2, [r3, #48]	; 0x30
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800644c:	b002      	add	sp, #8
 800644e:	4770      	bx	lr
 8006450:	40023000 	.word	0x40023000

08006454 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8006454:	4b2b      	ldr	r3, [pc, #172]	; (8006504 <HAL_DAC_MspInit+0xb0>)
 8006456:	6802      	ldr	r2, [r0, #0]
{
 8006458:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 800645a:	429a      	cmp	r2, r3
{
 800645c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800645e:	f04f 0400 	mov.w	r4, #0
 8006462:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006466:	9405      	str	r4, [sp, #20]
 8006468:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 800646c:	d001      	beq.n	8006472 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800646e:	b008      	add	sp, #32
 8006470:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8006472:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8006476:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006478:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 800647a:	4e23      	ldr	r6, [pc, #140]	; (8006508 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800647c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800647e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
 8006484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006486:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800648a:	9201      	str	r2, [sp, #4]
 800648c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800648e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006496:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064a0:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064a2:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064a4:	4819      	ldr	r0, [pc, #100]	; (800650c <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064aa:	f005 f957 	bl	800b75c <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80064ae:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 80064b2:	4a17      	ldr	r2, [pc, #92]	; (8006510 <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80064b4:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80064b6:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80064b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 80064bc:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064be:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80064c0:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80064c2:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064c4:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80064c6:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80064c8:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80064ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ce:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064d0:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064d2:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80064d4:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80064d6:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80064d8:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80064da:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80064de:	f002 fdd1 	bl	8009084 <HAL_DMA_Init>
 80064e2:	b958      	cbnz	r0, 80064fc <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80064e4:	2200      	movs	r2, #0
 80064e6:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80064e8:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80064ea:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80064ec:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80064ee:	f002 fab7 	bl	8008a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80064f2:	2036      	movs	r0, #54	; 0x36
 80064f4:	f002 fafe 	bl	8008af4 <HAL_NVIC_EnableIRQ>
}
 80064f8:	b008      	add	sp, #32
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80064fc:	f7fd fd16 	bl	8003f2c <Error_Handler>
 8006500:	e7f0      	b.n	80064e4 <HAL_DAC_MspInit+0x90>
 8006502:	bf00      	nop
 8006504:	40007400 	.word	0x40007400
 8006508:	20002250 	.word	0x20002250
 800650c:	40020000 	.word	0x40020000
 8006510:	40026088 	.word	0x40026088

08006514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006514:	b530      	push	{r4, r5, lr}
 8006516:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006518:	2100      	movs	r1, #0
{
 800651a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800651c:	2290      	movs	r2, #144	; 0x90
 800651e:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006520:	910b      	str	r1, [sp, #44]	; 0x2c
 8006522:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8006526:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800652a:	f01d ffa5 	bl	8024478 <memset>
  if(hi2c->Instance==I2C1)
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	4a4a      	ldr	r2, [pc, #296]	; (800665c <HAL_I2C_MspInit+0x148>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8006536:	4a4a      	ldr	r2, [pc, #296]	; (8006660 <HAL_I2C_MspInit+0x14c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d030      	beq.n	800659e <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 800653c:	4a49      	ldr	r2, [pc, #292]	; (8006664 <HAL_I2C_MspInit+0x150>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d057      	beq.n	80065f2 <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006542:	b031      	add	sp, #196	; 0xc4
 8006544:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800654a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800654c:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800654e:	f007 fc43 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 8006552:	2800      	cmp	r0, #0
 8006554:	d178      	bne.n	8006648 <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006556:	4c44      	ldr	r4, [pc, #272]	; (8006668 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8006558:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800655c:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800655e:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006560:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006562:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006564:	f043 0302 	orr.w	r3, r3, #2
 8006568:	6323      	str	r3, [r4, #48]	; 0x30
 800656a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800656c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006570:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006574:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006576:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006578:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800657a:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800657c:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006580:	483a      	ldr	r0, [pc, #232]	; (800666c <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006582:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006584:	f005 f8ea 	bl	800b75c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800658a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800658e:	6423      	str	r3, [r4, #64]	; 0x40
 8006590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006596:	9302      	str	r3, [sp, #8]
 8006598:	9b02      	ldr	r3, [sp, #8]
}
 800659a:	b031      	add	sp, #196	; 0xc4
 800659c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065a2:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80065a4:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065a6:	f007 fc17 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d14f      	bne.n	800664e <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065ae:	4c2e      	ldr	r4, [pc, #184]	; (8006668 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065b0:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065b2:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065b4:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80065b8:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065ba:	f043 0320 	orr.w	r3, r3, #32
 80065be:	6323      	str	r3, [r4, #48]	; 0x30
 80065c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065c2:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065c4:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80065c8:	4829      	ldr	r0, [pc, #164]	; (8006670 <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80065cc:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065ce:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80065d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065d6:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80065d8:	f005 f8c0 	bl	800b75c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80065dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065e2:	6423      	str	r3, [r4, #64]	; 0x40
 80065e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ea:	9304      	str	r3, [sp, #16]
 80065ec:	9b04      	ldr	r3, [sp, #16]
}
 80065ee:	b031      	add	sp, #196	; 0xc4
 80065f0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80065f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065f6:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80065f8:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065fa:	f007 fbed 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 80065fe:	bb48      	cbnz	r0, 8006654 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006600:	4c19      	ldr	r4, [pc, #100]	; (8006668 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006602:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006606:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006608:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800660a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800660c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800660e:	f043 0320 	orr.w	r3, r3, #32
 8006612:	6323      	str	r3, [r4, #48]	; 0x30
 8006614:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006616:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800661a:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800661e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006620:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006622:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006624:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006626:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800662a:	4811      	ldr	r0, [pc, #68]	; (8006670 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800662c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800662e:	f005 f895 	bl	800b75c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006638:	6423      	str	r3, [r4, #64]	; 0x40
 800663a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800663c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006640:	9306      	str	r3, [sp, #24]
 8006642:	9b06      	ldr	r3, [sp, #24]
}
 8006644:	b031      	add	sp, #196	; 0xc4
 8006646:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8006648:	f7fd fc70 	bl	8003f2c <Error_Handler>
 800664c:	e783      	b.n	8006556 <HAL_I2C_MspInit+0x42>
      Error_Handler();
 800664e:	f7fd fc6d 	bl	8003f2c <Error_Handler>
 8006652:	e7ac      	b.n	80065ae <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8006654:	f7fd fc6a 	bl	8003f2c <Error_Handler>
 8006658:	e7d2      	b.n	8006600 <HAL_I2C_MspInit+0xec>
 800665a:	bf00      	nop
 800665c:	40005400 	.word	0x40005400
 8006660:	40005800 	.word	0x40005800
 8006664:	40006000 	.word	0x40006000
 8006668:	40023800 	.word	0x40023800
 800666c:	40020400 	.word	0x40020400
 8006670:	40021400 	.word	0x40021400

08006674 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8006674:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RNG_MspInit+0x24>)
 8006676:	6802      	ldr	r2, [r0, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d000      	beq.n	800667e <HAL_RNG_MspInit+0xa>
 800667c:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <HAL_RNG_MspInit+0x28>)
{
 8006680:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8006682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006688:	635a      	str	r2, [r3, #52]	; 0x34
 800668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8006694:	b002      	add	sp, #8
 8006696:	4770      	bx	lr
 8006698:	50060800 	.word	0x50060800
 800669c:	40023800 	.word	0x40023800

080066a0 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 80066a0:	4a52      	ldr	r2, [pc, #328]	; (80067ec <HAL_SPI_MspInit+0x14c>)
 80066a2:	6803      	ldr	r3, [r0, #0]
{
 80066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 80066a6:	4293      	cmp	r3, r2
{
 80066a8:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066aa:	f04f 0400 	mov.w	r4, #0
 80066ae:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80066b2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80066b6:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 80066b8:	d007      	beq.n	80066ca <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80066ba:	4a4d      	ldr	r2, [pc, #308]	; (80067f0 <HAL_SPI_MspInit+0x150>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d038      	beq.n	8006732 <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 80066c0:	4a4c      	ldr	r2, [pc, #304]	; (80067f4 <HAL_SPI_MspInit+0x154>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d071      	beq.n	80067aa <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80066c6:	b00f      	add	sp, #60	; 0x3c
 80066c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066ca:	4b4b      	ldr	r3, [pc, #300]	; (80067f8 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066cc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80066ce:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80066d0:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80066d4:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066d6:	4849      	ldr	r0, [pc, #292]	; (80067fc <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066dc:	641a      	str	r2, [r3, #64]	; 0x40
 80066de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066e0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80066e4:	9201      	str	r2, [sp, #4]
 80066e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ea:	f042 0204 	orr.w	r2, r2, #4
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
 80066f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f2:	f002 0204 	and.w	r2, r2, #4
 80066f6:	9202      	str	r2, [sp, #8]
 80066f8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fc:	f042 0208 	orr.w	r2, r2, #8
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006704:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006706:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800670a:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800670c:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006710:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006712:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006714:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006716:	f005 f821 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800671a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800671c:	a909      	add	r1, sp, #36	; 0x24
 800671e:	4838      	ldr	r0, [pc, #224]	; (8006800 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006720:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006722:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006724:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006726:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800672a:	f005 f817 	bl	800b75c <HAL_GPIO_Init>
}
 800672e:	b00f      	add	sp, #60	; 0x3c
 8006730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006732:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006734:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006736:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006738:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 800673a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800673c:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800673e:	4831      	ldr	r0, [pc, #196]	; (8006804 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
 8006746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006748:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800674c:	9204      	str	r2, [sp, #16]
 800674e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006752:	4332      	orrs	r2, r6
 8006754:	631a      	str	r2, [r3, #48]	; 0x30
 8006756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006758:	4032      	ands	r2, r6
 800675a:	9205      	str	r2, [sp, #20]
 800675c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800675e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006760:	430a      	orrs	r2, r1
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006766:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006768:	400b      	ands	r3, r1
 800676a:	9306      	str	r3, [sp, #24]
 800676c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800676e:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006770:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006774:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8006776:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006778:	f004 fff0 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800677c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006780:	a909      	add	r1, sp, #36	; 0x24
 8006782:	481e      	ldr	r0, [pc, #120]	; (80067fc <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006784:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006786:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800678a:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800678e:	f004 ffe5 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006792:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006794:	a909      	add	r1, sp, #36	; 0x24
 8006796:	481b      	ldr	r0, [pc, #108]	; (8006804 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006798:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800679a:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800679c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800679e:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067a2:	f004 ffdb 	bl	800b75c <HAL_GPIO_Init>
}
 80067a6:	b00f      	add	sp, #60	; 0x3c
 80067a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ac:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80067ae:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067b0:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 80067b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067b4:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 80067b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ba:	645a      	str	r2, [r3, #68]	; 0x44
 80067bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067be:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80067c2:	9207      	str	r2, [sp, #28]
 80067c4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c8:	f042 0210 	orr.w	r2, r2, #16
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80067ce:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d2:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067d4:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067d8:	480b      	ldr	r0, [pc, #44]	; (8006808 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80067da:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067dc:	9308      	str	r3, [sp, #32]
 80067de:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80067e0:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067e4:	f004 ffba 	bl	800b75c <HAL_GPIO_Init>
}
 80067e8:	b00f      	add	sp, #60	; 0x3c
 80067ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ec:	40003800 	.word	0x40003800
 80067f0:	40003c00 	.word	0x40003c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40020800 	.word	0x40020800
 8006800:	40020c00 	.word	0x40020c00
 8006804:	40020400 	.word	0x40020400
 8006808:	40021000 	.word	0x40021000

0800680c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800680c:	4a73      	ldr	r2, [pc, #460]	; (80069dc <HAL_TIM_Base_MspInit+0x1d0>)
 800680e:	6803      	ldr	r3, [r0, #0]
{
 8006810:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 8006812:	4293      	cmp	r3, r2
{
 8006814:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006816:	f04f 0400 	mov.w	r4, #0
 800681a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800681e:	940d      	str	r4, [sp, #52]	; 0x34
 8006820:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 8006824:	d021      	beq.n	800686a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8006826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682a:	d055      	beq.n	80068d8 <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800682c:	4a6c      	ldr	r2, [pc, #432]	; (80069e0 <HAL_TIM_Base_MspInit+0x1d4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d027      	beq.n	8006882 <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8006832:	4a6c      	ldr	r2, [pc, #432]	; (80069e4 <HAL_TIM_Base_MspInit+0x1d8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d043      	beq.n	80068c0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8006838:	4a6b      	ldr	r2, [pc, #428]	; (80069e8 <HAL_TIM_Base_MspInit+0x1dc>)
 800683a:	4293      	cmp	r3, r2
 800683c:	f000 80a5 	beq.w	800698a <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8006840:	4a6a      	ldr	r2, [pc, #424]	; (80069ec <HAL_TIM_Base_MspInit+0x1e0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	f000 80b4 	beq.w	80069b0 <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8006848:	4a69      	ldr	r2, [pc, #420]	; (80069f0 <HAL_TIM_Base_MspInit+0x1e4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d02d      	beq.n	80068aa <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 800684e:	4a69      	ldr	r2, [pc, #420]	; (80069f4 <HAL_TIM_Base_MspInit+0x1e8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d114      	bne.n	800687e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006854:	4b68      	ldr	r3, [pc, #416]	; (80069f8 <HAL_TIM_Base_MspInit+0x1ec>)
 8006856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006864:	930a      	str	r3, [sp, #40]	; 0x28
 8006866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8006868:	e009      	b.n	800687e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 800686a:	4b63      	ldr	r3, [pc, #396]	; (80069f8 <HAL_TIM_Base_MspInit+0x1ec>)
 800686c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	645a      	str	r2, [r3, #68]	; 0x44
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	9b01      	ldr	r3, [sp, #4]
}
 800687e:	b011      	add	sp, #68	; 0x44
 8006880:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006882:	4b5d      	ldr	r3, [pc, #372]	; (80069f8 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8006884:	4622      	mov	r2, r4
 8006886:	2106      	movs	r1, #6
 8006888:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800688a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800688c:	f044 0402 	orr.w	r4, r4, #2
 8006890:	641c      	str	r4, [r3, #64]	; 0x40
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800689c:	f002 f8e0 	bl	8008a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80068a0:	201d      	movs	r0, #29
 80068a2:	f002 f927 	bl	8008af4 <HAL_NVIC_EnableIRQ>
}
 80068a6:	b011      	add	sp, #68	; 0x44
 80068a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80068aa:	4b53      	ldr	r3, [pc, #332]	; (80069f8 <HAL_TIM_Base_MspInit+0x1ec>)
 80068ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ae:	f042 0220 	orr.w	r2, r2, #32
 80068b2:	641a      	str	r2, [r3, #64]	; 0x40
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	9309      	str	r3, [sp, #36]	; 0x24
 80068bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068be:	e7de      	b.n	800687e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80068c0:	4b4d      	ldr	r3, [pc, #308]	; (80069f8 <HAL_TIM_Base_MspInit+0x1ec>)
 80068c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068c4:	f042 0204 	orr.w	r2, r2, #4
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	9306      	str	r3, [sp, #24]
 80068d2:	9b06      	ldr	r3, [sp, #24]
}
 80068d4:	b011      	add	sp, #68	; 0x44
 80068d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80068d8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068dc:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80068de:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068e0:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 80068e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e4:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068e6:	4845      	ldr	r0, [pc, #276]	; (80069fc <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80068e8:	f042 0201 	orr.w	r2, r2, #1
 80068ec:	641a      	str	r2, [r3, #64]	; 0x40
 80068ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f0:	f002 0201 	and.w	r2, r2, #1
 80068f4:	9202      	str	r2, [sp, #8]
 80068f6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006902:	f002 0201 	and.w	r2, r2, #1
 8006906:	9203      	str	r2, [sp, #12]
 8006908:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800690a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690c:	f042 0202 	orr.w	r2, r2, #2
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006914:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006916:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800691a:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800691c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800691e:	2320      	movs	r3, #32
 8006920:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006922:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006924:	f004 ff1a 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006928:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800692a:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800692e:	4834      	ldr	r0, [pc, #208]	; (8006a00 <HAL_TIM_Base_MspInit+0x1f4>)
 8006930:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006932:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006934:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8006936:	4e33      	ldr	r6, [pc, #204]	; (8006a04 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006938:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800693c:	f004 ff0e 	bl	800b75c <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8006944:	4a30      	ldr	r2, [pc, #192]	; (8006a08 <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8006946:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006948:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800694a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800694e:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8006950:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006954:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8006956:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800695a:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800695c:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 800695e:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006960:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8006962:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006964:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8006968:	f002 fb8c 	bl	8009084 <HAL_DMA_Init>
 800696c:	2800      	cmp	r0, #0
 800696e:	d132      	bne.n	80069d6 <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006970:	2200      	movs	r2, #0
 8006972:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8006974:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006976:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8006978:	62ee      	str	r6, [r5, #44]	; 0x2c
 800697a:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800697c:	f002 f870 	bl	8008a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006980:	201c      	movs	r0, #28
 8006982:	f002 f8b7 	bl	8008af4 <HAL_NVIC_EnableIRQ>
}
 8006986:	b011      	add	sp, #68	; 0x44
 8006988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 800698a:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800698c:	4622      	mov	r2, r4
 800698e:	2105      	movs	r1, #5
 8006990:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006992:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006994:	f044 0408 	orr.w	r4, r4, #8
 8006998:	641c      	str	r4, [r3, #64]	; 0x40
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	9307      	str	r3, [sp, #28]
 80069a2:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80069a4:	f002 f85c 	bl	8008a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80069a8:	2032      	movs	r0, #50	; 0x32
 80069aa:	f002 f8a3 	bl	8008af4 <HAL_NVIC_EnableIRQ>
 80069ae:	e766      	b.n	800687e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80069b0:	4b11      	ldr	r3, [pc, #68]	; (80069f8 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80069b2:	4622      	mov	r2, r4
 80069b4:	2106      	movs	r1, #6
 80069b6:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80069b8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80069ba:	f044 0410 	orr.w	r4, r4, #16
 80069be:	641c      	str	r4, [r3, #64]	; 0x40
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	9308      	str	r3, [sp, #32]
 80069c8:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80069ca:	f002 f849 	bl	8008a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80069ce:	2036      	movs	r0, #54	; 0x36
 80069d0:	f002 f890 	bl	8008af4 <HAL_NVIC_EnableIRQ>
 80069d4:	e753      	b.n	800687e <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 80069d6:	f7fd faa9 	bl	8003f2c <Error_Handler>
 80069da:	e7c9      	b.n	8006970 <HAL_TIM_Base_MspInit+0x164>
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40000400 	.word	0x40000400
 80069e4:	40000800 	.word	0x40000800
 80069e8:	40000c00 	.word	0x40000c00
 80069ec:	40001000 	.word	0x40001000
 80069f0:	40001400 	.word	0x40001400
 80069f4:	40002000 	.word	0x40002000
 80069f8:	40023800 	.word	0x40023800
 80069fc:	40020000 	.word	0x40020000
 8006a00:	40020400 	.word	0x40020400
 8006a04:	200022b0 	.word	0x200022b0
 8006a08:	40026028 	.word	0x40026028

08006a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8006a0c:	491d      	ldr	r1, [pc, #116]	; (8006a84 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a0e:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8006a10:	6802      	ldr	r2, [r0, #0]
{
 8006a12:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8006a14:	428a      	cmp	r2, r1
{
 8006a16:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a18:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006a1c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006a20:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8006a22:	d004      	beq.n	8006a2e <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8006a24:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <HAL_TIM_MspPostInit+0x7c>)
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d016      	beq.n	8006a58 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006a2a:	b008      	add	sp, #32
 8006a2c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a2e:	4b17      	ldr	r3, [pc, #92]	; (8006a8c <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006a30:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a32:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a34:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a38:	f042 0204 	orr.w	r2, r2, #4
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006a40:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a42:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a46:	4812      	ldr	r0, [pc, #72]	; (8006a90 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a48:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a4e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a50:	f004 fe84 	bl	800b75c <HAL_GPIO_Init>
}
 8006a54:	b008      	add	sp, #32
 8006a56:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a58:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a5c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006a5e:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a62:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a66:	4322      	orrs	r2, r4
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006a6c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a6e:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a70:	4808      	ldr	r0, [pc, #32]	; (8006a94 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a72:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a74:	9302      	str	r3, [sp, #8]
 8006a76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a78:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a7a:	f004 fe6f 	bl	800b75c <HAL_GPIO_Init>
}
 8006a7e:	b008      	add	sp, #32
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	40020800 	.word	0x40020800
 8006a94:	40020400 	.word	0x40020400

08006a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9c:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a9e:	2100      	movs	r1, #0
{
 8006aa0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006aa2:	2290      	movs	r2, #144	; 0x90
 8006aa4:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aa6:	9117      	str	r1, [sp, #92]	; 0x5c
 8006aa8:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8006aac:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ab0:	f01d fce2 	bl	8024478 <memset>
  if(huart->Instance==UART4)
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	4aa2      	ldr	r2, [pc, #648]	; (8006d40 <HAL_UART_MspInit+0x2a8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d070      	beq.n	8006b9e <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8006abc:	4aa1      	ldr	r2, [pc, #644]	; (8006d44 <HAL_UART_MspInit+0x2ac>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	f000 80c1 	beq.w	8006c46 <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8006ac4:	4aa0      	ldr	r2, [pc, #640]	; (8006d48 <HAL_UART_MspInit+0x2b0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	f000 815e 	beq.w	8006d88 <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8006acc:	4a9f      	ldr	r2, [pc, #636]	; (8006d4c <HAL_UART_MspInit+0x2b4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00e      	beq.n	8006af0 <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8006ad2:	4a9f      	ldr	r2, [pc, #636]	; (8006d50 <HAL_UART_MspInit+0x2b8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	f000 818e 	beq.w	8006df6 <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8006ada:	4a9e      	ldr	r2, [pc, #632]	; (8006d54 <HAL_UART_MspInit+0x2bc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	f000 81b4 	beq.w	8006e4a <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8006ae2:	4a9d      	ldr	r2, [pc, #628]	; (8006d58 <HAL_UART_MspInit+0x2c0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	f000 81df 	beq.w	8006ea8 <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006aea:	b03c      	add	sp, #240	; 0xf0
 8006aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8006af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006af4:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8006af6:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006af8:	f007 f96e 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f040 8261 	bne.w	8006fc4 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8006b02:	4b96      	ldr	r3, [pc, #600]	; (8006d5c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006b04:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b06:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006b08:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 8006b0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0c:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b0e:	4894      	ldr	r0, [pc, #592]	; (8006d60 <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8006b10:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006b14:	6419      	str	r1, [r3, #64]	; 0x40
 8006b16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006b18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006b1c:	910a      	str	r1, [sp, #40]	; 0x28
 8006b1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b22:	f041 0110 	orr.w	r1, r1, #16
 8006b26:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b28:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006b2c:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b2e:	f003 0310 	and.w	r3, r3, #16
 8006b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b36:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006b3a:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b3e:	f004 fe0d 	bl	800b75c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b42:	4887      	ldr	r0, [pc, #540]	; (8006d60 <HAL_UART_MspInit+0x2c8>)
 8006b44:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006b46:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b48:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b4c:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b50:	f004 fe04 	bl	800b75c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8006b54:	4d83      	ldr	r5, [pc, #524]	; (8006d64 <HAL_UART_MspInit+0x2cc>)
 8006b56:	4a84      	ldr	r2, [pc, #528]	; (8006d68 <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8006b58:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8006b5c:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8006b5e:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8006b62:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8006b6a:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b70:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b72:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b76:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006b7a:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8006b7e:	f002 fa81 	bl	8009084 <HAL_DMA_Init>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f040 8221 	bne.w	8006fca <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2103      	movs	r1, #3
 8006b8c:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8006b8e:	6725      	str	r5, [r4, #112]	; 0x70
 8006b90:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8006b92:	f001 ff65 	bl	8008a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8006b96:	2053      	movs	r0, #83	; 0x53
 8006b98:	f001 ffac 	bl	8008af4 <HAL_NVIC_EnableIRQ>
 8006b9c:	e7a5      	b.n	8006aea <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ba2:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006ba4:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ba6:	f007 f917 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f040 8179 	bne.w	8006ea2 <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8006bb0:	4b6a      	ldr	r3, [pc, #424]	; (8006d5c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb2:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb4:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb6:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8006bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006bba:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bbc:	a913      	add	r1, sp, #76	; 0x4c
 8006bbe:	486b      	ldr	r0, [pc, #428]	; (8006d6c <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8006bc0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8006bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bc8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8006bcc:	9201      	str	r2, [sp, #4]
 8006bce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bda:	f002 0201 	and.w	r2, r2, #1
 8006bde:	9202      	str	r2, [sp, #8]
 8006be0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be4:	433a      	orrs	r2, r7
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30
 8006be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bea:	403a      	ands	r2, r7
 8006bec:	9203      	str	r2, [sp, #12]
 8006bee:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf2:	f042 0204 	orr.w	r2, r2, #4
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bfa:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bfc:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006c00:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c02:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8006c04:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c08:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8006c0a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0c:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c10:	f004 fda4 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c18:	a913      	add	r1, sp, #76	; 0x4c
 8006c1a:	4855      	ldr	r0, [pc, #340]	; (8006d70 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c1c:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1e:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006c22:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c26:	f004 fd99 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c2e:	a913      	add	r1, sp, #76	; 0x4c
 8006c30:	4850      	ldr	r0, [pc, #320]	; (8006d74 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c32:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006c34:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006c36:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c38:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c3c:	f004 fd8e 	bl	800b75c <HAL_GPIO_Init>
}
 8006c40:	b03c      	add	sp, #240	; 0xf0
 8006c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c4a:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006c4c:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c4e:	f007 f8c3 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	f040 81b0 	bne.w	8006fb8 <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006c58:	4b40      	ldr	r3, [pc, #256]	; (8006d5c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c5a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5c:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006c5e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8006c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c64:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c68:	a913      	add	r1, sp, #76	; 0x4c
 8006c6a:	4841      	ldr	r0, [pc, #260]	; (8006d70 <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8006c6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c70:	641a      	str	r2, [r3, #64]	; 0x40
 8006c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c78:	9205      	str	r2, [sp, #20]
 8006c7a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7e:	4332      	orrs	r2, r6
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30
 8006c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c84:	4032      	ands	r2, r6
 8006c86:	9206      	str	r2, [sp, #24]
 8006c88:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8c:	f042 0204 	orr.w	r2, r2, #4
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c94:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	9307      	str	r3, [sp, #28]
 8006c9c:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c9e:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca0:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ca4:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ca8:	f004 fd58 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cac:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cae:	4831      	ldr	r0, [pc, #196]	; (8006d74 <HAL_UART_MspInit+0x2dc>)
 8006cb0:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cb2:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006cb4:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cb6:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006cb8:	4e2f      	ldr	r6, [pc, #188]	; (8006d78 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006cba:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006cbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cc0:	f004 fd4c 	bl	800b75c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006cc4:	4a2d      	ldr	r2, [pc, #180]	; (8006d7c <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006cc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006cca:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ccc:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006cce:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006cd4:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cda:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cdc:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006ce0:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ce4:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006ce8:	f002 f9cc 	bl	8009084 <HAL_DMA_Init>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	f040 8160 	bne.w	8006fb2 <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006cf2:	4d23      	ldr	r5, [pc, #140]	; (8006d80 <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8006cf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006cf8:	4922      	ldr	r1, [pc, #136]	; (8006d84 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cfa:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8006cfc:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006d02:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d04:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006d06:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8006d08:	6726      	str	r6, [r4, #112]	; 0x70
 8006d0a:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d0c:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d0e:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d10:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d12:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d14:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d16:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d18:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006d1c:	f002 f9b2 	bl	8009084 <HAL_DMA_Init>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	f040 8143 	bne.w	8006fac <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8006d26:	2200      	movs	r2, #0
 8006d28:	2107      	movs	r1, #7
 8006d2a:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8006d2c:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006d2e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8006d30:	f001 fe96 	bl	8008a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006d34:	2035      	movs	r0, #53	; 0x35
 8006d36:	f001 fedd 	bl	8008af4 <HAL_NVIC_EnableIRQ>
}
 8006d3a:	b03c      	add	sp, #240	; 0xf0
 8006d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d40:	40004c00 	.word	0x40004c00
 8006d44:	40005000 	.word	0x40005000
 8006d48:	40007800 	.word	0x40007800
 8006d4c:	40007c00 	.word	0x40007c00
 8006d50:	40004400 	.word	0x40004400
 8006d54:	40004800 	.word	0x40004800
 8006d58:	40011400 	.word	0x40011400
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	40021000 	.word	0x40021000
 8006d64:	200023d0 	.word	0x200023d0
 8006d68:	400260a0 	.word	0x400260a0
 8006d6c:	40020000 	.word	0x40020000
 8006d70:	40020400 	.word	0x40020400
 8006d74:	40020800 	.word	0x40020800
 8006d78:	20002310 	.word	0x20002310
 8006d7c:	40026010 	.word	0x40026010
 8006d80:	20002370 	.word	0x20002370
 8006d84:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d8c:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006d8e:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d90:	f007 f822 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f040 8112 	bne.w	8006fbe <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006d9a:	4b8f      	ldr	r3, [pc, #572]	; (8006fd8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006d9c:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006d9e:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006da0:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8006da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006da4:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006da6:	488d      	ldr	r0, [pc, #564]	; (8006fdc <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8006da8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006dac:	641a      	str	r2, [r3, #64]	; 0x40
 8006dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006db4:	9208      	str	r2, [sp, #32]
 8006db6:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dba:	f042 0220 	orr.w	r2, r2, #32
 8006dbe:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc0:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006dc4:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006dc6:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006dc8:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dcc:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dce:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006dd4:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006dd8:	f004 fcc0 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006ddc:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006dde:	a913      	add	r1, sp, #76	; 0x4c
 8006de0:	487e      	ldr	r0, [pc, #504]	; (8006fdc <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de2:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006de4:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006de6:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006de8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006dec:	f004 fcb6 	bl	800b75c <HAL_GPIO_Init>
}
 8006df0:	b03c      	add	sp, #240	; 0xf0
 8006df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006df6:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006df8:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006dfa:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006dfc:	f006 ffec 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	f040 80e5 	bne.w	8006fd0 <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e06:	4b74      	ldr	r3, [pc, #464]	; (8006fd8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e08:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006e0a:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0c:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e10:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006e16:	641a      	str	r2, [r3, #64]	; 0x40
 8006e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e1a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006e1e:	920c      	str	r2, [sp, #48]	; 0x30
 8006e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e24:	f042 0208 	orr.w	r2, r2, #8
 8006e28:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e2a:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e2e:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e30:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e34:	486a      	ldr	r0, [pc, #424]	; (8006fe0 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006e36:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e38:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006e3a:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006e3e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e40:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e44:	f004 fc8a 	bl	800b75c <HAL_GPIO_Init>
 8006e48:	e64f      	b.n	8006aea <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e4e:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006e50:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e52:	f006 ffc1 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f040 809c 	bne.w	8006f94 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e5c:	4b5e      	ldr	r3, [pc, #376]	; (8006fd8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e5e:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006e60:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e64:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e68:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8006e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e72:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006e76:	920e      	str	r2, [sp, #56]	; 0x38
 8006e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e7c:	f042 0208 	orr.w	r2, r2, #8
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e82:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e86:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e88:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e8c:	4854      	ldr	r0, [pc, #336]	; (8006fe0 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006e8e:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e90:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e92:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e96:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e98:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e9c:	f004 fc5e 	bl	800b75c <HAL_GPIO_Init>
 8006ea0:	e623      	b.n	8006aea <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006ea2:	f7fd f843 	bl	8003f2c <Error_Handler>
 8006ea6:	e683      	b.n	8006bb0 <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006eac:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006eae:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006eb0:	f006 ff92 	bl	800ddd8 <HAL_RCCEx_PeriphCLKConfig>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d176      	bne.n	8006fa6 <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006eb8:	4b47      	ldr	r3, [pc, #284]	; (8006fd8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006eba:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ebc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ebe:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 8006ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006ec2:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ec4:	4847      	ldr	r0, [pc, #284]	; (8006fe4 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8006ec6:	f042 0220 	orr.w	r2, r2, #32
 8006eca:	645a      	str	r2, [r3, #68]	; 0x44
 8006ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ece:	f002 0220 	and.w	r2, r2, #32
 8006ed2:	9210      	str	r2, [sp, #64]	; 0x40
 8006ed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ed8:	f042 0204 	orr.w	r2, r2, #4
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30
 8006ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee0:	f002 0204 	and.w	r2, r2, #4
 8006ee4:	9211      	str	r2, [sp, #68]	; 0x44
 8006ee6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eea:	430a      	orrs	r2, r1
 8006eec:	631a      	str	r2, [r3, #48]	; 0x30
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef0:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ef2:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ef4:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006ef6:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ef8:	9312      	str	r3, [sp, #72]	; 0x48
 8006efa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006efc:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f00:	a913      	add	r1, sp, #76	; 0x4c
 8006f02:	f004 fc2b 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f06:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f08:	4837      	ldr	r0, [pc, #220]	; (8006fe8 <HAL_UART_MspInit+0x550>)
 8006f0a:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f0c:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f12:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f14:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006f16:	4e35      	ldr	r6, [pc, #212]	; (8006fec <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006f18:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f1c:	f004 fc1e 	bl	800b75c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006f20:	4a33      	ldr	r2, [pc, #204]	; (8006ff0 <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006f22:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006f26:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006f28:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006f34:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f3a:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f3e:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f42:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006f46:	f002 f89d 	bl	8009084 <HAL_DMA_Init>
 8006f4a:	bb48      	cbnz	r0, 8006fa0 <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006f4c:	4d29      	ldr	r5, [pc, #164]	; (8006ff4 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006f4e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006f52:	4929      	ldr	r1, [pc, #164]	; (8006ff8 <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f54:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006f56:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006f5c:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f5e:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f60:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006f62:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f64:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f66:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f6a:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006f6c:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f6e:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f70:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006f72:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006f74:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006f76:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006f78:	6726      	str	r6, [r4, #112]	; 0x70
 8006f7a:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f7c:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006f80:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f84:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006f88:	f002 f87c 	bl	8009084 <HAL_DMA_Init>
 8006f8c:	b928      	cbnz	r0, 8006f9a <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006f8e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006f90:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8006f92:	e5aa      	b.n	8006aea <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006f94:	f7fc ffca 	bl	8003f2c <Error_Handler>
 8006f98:	e760      	b.n	8006e5c <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8006f9a:	f7fc ffc7 	bl	8003f2c <Error_Handler>
 8006f9e:	e7f6      	b.n	8006f8e <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 8006fa0:	f7fc ffc4 	bl	8003f2c <Error_Handler>
 8006fa4:	e7d2      	b.n	8006f4c <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 8006fa6:	f7fc ffc1 	bl	8003f2c <Error_Handler>
 8006faa:	e785      	b.n	8006eb8 <HAL_UART_MspInit+0x420>
      Error_Handler();
 8006fac:	f7fc ffbe 	bl	8003f2c <Error_Handler>
 8006fb0:	e6b9      	b.n	8006d26 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8006fb2:	f7fc ffbb 	bl	8003f2c <Error_Handler>
 8006fb6:	e69c      	b.n	8006cf2 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8006fb8:	f7fc ffb8 	bl	8003f2c <Error_Handler>
 8006fbc:	e64c      	b.n	8006c58 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8006fbe:	f7fc ffb5 	bl	8003f2c <Error_Handler>
 8006fc2:	e6ea      	b.n	8006d9a <HAL_UART_MspInit+0x302>
      Error_Handler();
 8006fc4:	f7fc ffb2 	bl	8003f2c <Error_Handler>
 8006fc8:	e59b      	b.n	8006b02 <HAL_UART_MspInit+0x6a>
      Error_Handler();
 8006fca:	f7fc ffaf 	bl	8003f2c <Error_Handler>
 8006fce:	e5db      	b.n	8006b88 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8006fd0:	f7fc ffac 	bl	8003f2c <Error_Handler>
 8006fd4:	e717      	b.n	8006e06 <HAL_UART_MspInit+0x36e>
 8006fd6:	bf00      	nop
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40021400 	.word	0x40021400
 8006fe0:	40020c00 	.word	0x40020c00
 8006fe4:	40020800 	.word	0x40020800
 8006fe8:	40021800 	.word	0x40021800
 8006fec:	20002430 	.word	0x20002430
 8006ff0:	40026428 	.word	0x40026428
 8006ff4:	20002490 	.word	0x20002490
 8006ff8:	400264a0 	.word	0x400264a0

08006ffc <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8006ffc:	4a4f      	ldr	r2, [pc, #316]	; (800713c <HAL_UART_MspDeInit+0x140>)
 8006ffe:	6803      	ldr	r3, [r0, #0]
 8007000:	4293      	cmp	r3, r2
{
 8007002:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8007004:	d025      	beq.n	8007052 <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 8007006:	4a4e      	ldr	r2, [pc, #312]	; (8007140 <HAL_UART_MspDeInit+0x144>)
 8007008:	4604      	mov	r4, r0
 800700a:	4293      	cmp	r3, r2
 800700c:	d038      	beq.n	8007080 <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 800700e:	4a4d      	ldr	r2, [pc, #308]	; (8007144 <HAL_UART_MspDeInit+0x148>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d050      	beq.n	80070b6 <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 8007014:	4a4c      	ldr	r2, [pc, #304]	; (8007148 <HAL_UART_MspDeInit+0x14c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d009      	beq.n	800702e <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800701a:	4a4c      	ldr	r2, [pc, #304]	; (800714c <HAL_UART_MspDeInit+0x150>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d056      	beq.n	80070ce <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8007020:	4a4b      	ldr	r2, [pc, #300]	; (8007150 <HAL_UART_MspDeInit+0x154>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d062      	beq.n	80070ec <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8007026:	4a4b      	ldr	r2, [pc, #300]	; (8007154 <HAL_UART_MspDeInit+0x158>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d06c      	beq.n	8007106 <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800702c:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 800702e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8007032:	2103      	movs	r1, #3
 8007034:	4848      	ldr	r0, [pc, #288]	; (8007158 <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 8007036:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800703c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 800703e:	f004 fd33 	bl	800baa8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8007042:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007044:	f002 f9ca 	bl	80093dc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8007048:	2053      	movs	r0, #83	; 0x53
}
 800704a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 800704e:	f001 bd65 	b.w	8008b1c <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 8007052:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8007056:	f248 0101 	movw	r1, #32769	; 0x8001
 800705a:	4840      	ldr	r0, [pc, #256]	; (800715c <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 800705c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800705e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007062:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8007064:	f004 fd20 	bl	800baa8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8007068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800706c:	483c      	ldr	r0, [pc, #240]	; (8007160 <HAL_UART_MspDeInit+0x164>)
 800706e:	f004 fd1b 	bl	800baa8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8007072:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007076:	483b      	ldr	r0, [pc, #236]	; (8007164 <HAL_UART_MspDeInit+0x168>)
}
 8007078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 800707c:	f004 bd14 	b.w	800baa8 <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 8007080:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8007084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007088:	4835      	ldr	r0, [pc, #212]	; (8007160 <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 800708a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800708c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007090:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8007092:	f004 fd09 	bl	800baa8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8007096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800709a:	4832      	ldr	r0, [pc, #200]	; (8007164 <HAL_UART_MspDeInit+0x168>)
 800709c:	f004 fd04 	bl	800baa8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80070a0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80070a2:	f002 f99b 	bl	80093dc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80070a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80070a8:	f002 f998 	bl	80093dc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80070ac:	2035      	movs	r0, #53	; 0x35
}
 80070ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80070b2:	f001 bd33 	b.w	8008b1c <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 80070b6:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 80070ba:	21c0      	movs	r1, #192	; 0xc0
 80070bc:	482a      	ldr	r0, [pc, #168]	; (8007168 <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 80070be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80070c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 80070c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 80070c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 80070ca:	f004 bced 	b.w	800baa8 <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 80070ce:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80070d2:	4826      	ldr	r0, [pc, #152]	; (800716c <HAL_UART_MspDeInit+0x170>)
 80070d4:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 80070d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80070d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070dc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80070de:	f004 fce3 	bl	800baa8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80070e2:	2026      	movs	r0, #38	; 0x26
}
 80070e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80070e8:	f001 bd18 	b.w	8008b1c <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 80070ec:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80070f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80070f4:	481d      	ldr	r0, [pc, #116]	; (800716c <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 80070f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80070f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 80070fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8007100:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8007102:	f004 bcd1 	b.w	800baa8 <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 8007106:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 800710a:	2140      	movs	r1, #64	; 0x40
 800710c:	4815      	ldr	r0, [pc, #84]	; (8007164 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 800710e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007110:	f023 0320 	bic.w	r3, r3, #32
 8007114:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8007116:	f004 fcc7 	bl	800baa8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800711a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800711e:	4814      	ldr	r0, [pc, #80]	; (8007170 <HAL_UART_MspDeInit+0x174>)
 8007120:	f004 fcc2 	bl	800baa8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8007124:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007126:	f002 f959 	bl	80093dc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800712a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800712c:	f002 f956 	bl	80093dc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8007130:	2047      	movs	r0, #71	; 0x47
}
 8007132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8007136:	f001 bcf1 	b.w	8008b1c <HAL_NVIC_DisableIRQ>
 800713a:	bf00      	nop
 800713c:	40004c00 	.word	0x40004c00
 8007140:	40005000 	.word	0x40005000
 8007144:	40007800 	.word	0x40007800
 8007148:	40007c00 	.word	0x40007c00
 800714c:	40004400 	.word	0x40004400
 8007150:	40004800 	.word	0x40004800
 8007154:	40011400 	.word	0x40011400
 8007158:	40021000 	.word	0x40021000
 800715c:	40020000 	.word	0x40020000
 8007160:	40020400 	.word	0x40020400
 8007164:	40020800 	.word	0x40020800
 8007168:	40021400 	.word	0x40021400
 800716c:	40020c00 	.word	0x40020c00
 8007170:	40021800 	.word	0x40021800

08007174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007174:	b530      	push	{r4, r5, lr}
 8007176:	4601      	mov	r1, r0
 8007178:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 800717a:	2200      	movs	r2, #0
 800717c:	202b      	movs	r0, #43	; 0x2b
 800717e:	f001 fc6f 	bl	8008a60 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8007182:	202b      	movs	r0, #43	; 0x2b
 8007184:	f001 fcb6 	bl	8008af4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8007188:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800718a:	a901      	add	r1, sp, #4
 800718c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 800718e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8007190:	4c14      	ldr	r4, [pc, #80]	; (80071e4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8007192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007196:	4d14      	ldr	r5, [pc, #80]	; (80071e8 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8007198:	641a      	str	r2, [r3, #64]	; 0x40
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	9302      	str	r3, [sp, #8]
 80071a2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80071a4:	f006 fdf6 	bl	800dd94 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80071a8:	f006 fdd4 	bl	800dd54 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 80071ac:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80071ae:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 80071b0:	490e      	ldr	r1, [pc, #56]	; (80071ec <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 80071b2:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80071b4:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071b6:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80071b8:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80071bc:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 80071c0:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80071c2:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80071c4:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80071c6:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 80071c8:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80071ca:	f009 f8d5 	bl	8010378 <HAL_TIM_Base_Init>
 80071ce:	b110      	cbz	r0, 80071d6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 80071d0:	2001      	movs	r0, #1
}
 80071d2:	b009      	add	sp, #36	; 0x24
 80071d4:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 80071d6:	4620      	mov	r0, r4
 80071d8:	f008 faa2 	bl	800f720 <HAL_TIM_Base_Start_IT>
}
 80071dc:	b009      	add	sp, #36	; 0x24
 80071de:	bd30      	pop	{r4, r5, pc}
 80071e0:	40023800 	.word	0x40023800
 80071e4:	20003088 	.word	0x20003088
 80071e8:	431bde83 	.word	0x431bde83
 80071ec:	40001800 	.word	0x40001800

080071f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop

080071f4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071f4:	e7fe      	b.n	80071f4 <HardFault_Handler>
 80071f6:	bf00      	nop

080071f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071f8:	e7fe      	b.n	80071f8 <MemManage_Handler>
 80071fa:	bf00      	nop

080071fc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071fc:	e7fe      	b.n	80071fc <BusFault_Handler>
 80071fe:	bf00      	nop

08007200 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007200:	e7fe      	b.n	8007200 <UsageFault_Handler>
 8007202:	bf00      	nop

08007204 <RCC_IRQHandler>:
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop

08007208 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8007208:	4801      	ldr	r0, [pc, #4]	; (8007210 <DMA1_Stream0_IRQHandler+0x8>)
 800720a:	f002 ba53 	b.w	80096b4 <HAL_DMA_IRQHandler>
 800720e:	bf00      	nop
 8007210:	20002310 	.word	0x20002310

08007214 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8007214:	4801      	ldr	r0, [pc, #4]	; (800721c <DMA1_Stream1_IRQHandler+0x8>)
 8007216:	f002 ba4d 	b.w	80096b4 <HAL_DMA_IRQHandler>
 800721a:	bf00      	nop
 800721c:	200022b0 	.word	0x200022b0

08007220 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <DMA1_Stream5_IRQHandler+0x8>)
 8007222:	f002 ba47 	b.w	80096b4 <HAL_DMA_IRQHandler>
 8007226:	bf00      	nop
 8007228:	20002250 	.word	0x20002250

0800722c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800722c:	4801      	ldr	r0, [pc, #4]	; (8007234 <DMA1_Stream6_IRQHandler+0x8>)
 800722e:	f002 ba41 	b.w	80096b4 <HAL_DMA_IRQHandler>
 8007232:	bf00      	nop
 8007234:	200023d0 	.word	0x200023d0

08007238 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007238:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800723a:	4805      	ldr	r0, [pc, #20]	; (8007250 <ADC_IRQHandler+0x18>)
 800723c:	f001 f9ec 	bl	8008618 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8007240:	4804      	ldr	r0, [pc, #16]	; (8007254 <ADC_IRQHandler+0x1c>)
 8007242:	f001 f9e9 	bl	8008618 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8007246:	4804      	ldr	r0, [pc, #16]	; (8007258 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 800724c:	f001 b9e4 	b.w	8008618 <HAL_ADC_IRQHandler>
 8007250:	200020e0 	.word	0x200020e0
 8007254:	20002128 	.word	0x20002128
 8007258:	20002170 	.word	0x20002170

0800725c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800725c:	4801      	ldr	r0, [pc, #4]	; (8007264 <TIM2_IRQHandler+0x8>)
 800725e:	f008 bf03 	b.w	8010068 <HAL_TIM_IRQHandler>
 8007262:	bf00      	nop
 8007264:	200027b8 	.word	0x200027b8

08007268 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007268:	4801      	ldr	r0, [pc, #4]	; (8007270 <TIM3_IRQHandler+0x8>)
 800726a:	f008 befd 	b.w	8010068 <HAL_TIM_IRQHandler>
 800726e:	bf00      	nop
 8007270:	20002804 	.word	0x20002804

08007274 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007274:	4801      	ldr	r0, [pc, #4]	; (800727c <USART2_IRQHandler+0x8>)
 8007276:	f00b b97b 	b.w	8012570 <HAL_UART_IRQHandler>
 800727a:	bf00      	nop
 800727c:	20002980 	.word	0x20002980

08007280 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8007280:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007284:	f004 bd48 	b.w	800bd18 <HAL_GPIO_EXTI_IRQHandler>

08007288 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 800728a:	f008 beed 	b.w	8010068 <HAL_TIM_IRQHandler>
 800728e:	bf00      	nop
 8007290:	20003088 	.word	0x20003088

08007294 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8007296:	f008 bee7 	b.w	8010068 <HAL_TIM_IRQHandler>
 800729a:	bf00      	nop
 800729c:	2000276c 	.word	0x2000276c

080072a0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80072a0:	4801      	ldr	r0, [pc, #4]	; (80072a8 <DMA1_Stream7_IRQHandler+0x8>)
 80072a2:	f002 ba07 	b.w	80096b4 <HAL_DMA_IRQHandler>
 80072a6:	bf00      	nop
 80072a8:	20002370 	.word	0x20002370

080072ac <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <TIM5_IRQHandler+0x8>)
 80072ae:	f008 bedb 	b.w	8010068 <HAL_TIM_IRQHandler>
 80072b2:	bf00      	nop
 80072b4:	2000289c 	.word	0x2000289c

080072b8 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <UART5_IRQHandler+0x8>)
 80072ba:	f00b b959 	b.w	8012570 <HAL_UART_IRQHandler>
 80072be:	bf00      	nop
 80072c0:	20002b0c 	.word	0x20002b0c

080072c4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80072c4:	4804      	ldr	r0, [pc, #16]	; (80072d8 <TIM6_DAC_IRQHandler+0x14>)
{
 80072c6:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 80072c8:	f001 fe26 	bl	8008f18 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80072cc:	4803      	ldr	r0, [pc, #12]	; (80072dc <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80072ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80072d2:	f008 bec9 	b.w	8010068 <HAL_TIM_IRQHandler>
 80072d6:	bf00      	nop
 80072d8:	200021dc 	.word	0x200021dc
 80072dc:	200028e8 	.word	0x200028e8

080072e0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80072e0:	4801      	ldr	r0, [pc, #4]	; (80072e8 <DMA2_Stream1_IRQHandler+0x8>)
 80072e2:	f002 b9e7 	b.w	80096b4 <HAL_DMA_IRQHandler>
 80072e6:	bf00      	nop
 80072e8:	20002430 	.word	0x20002430

080072ec <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80072ec:	4801      	ldr	r0, [pc, #4]	; (80072f4 <DMA2_Stream4_IRQHandler+0x8>)
 80072ee:	f002 b9e1 	b.w	80096b4 <HAL_DMA_IRQHandler>
 80072f2:	bf00      	nop
 80072f4:	200021f0 	.word	0x200021f0

080072f8 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <ETH_IRQHandler+0x8>)
 80072fa:	f003 b95f 	b.w	800a5bc <HAL_ETH_IRQHandler>
 80072fe:	bf00      	nop
 8007300:	200062ac 	.word	0x200062ac

08007304 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <OTG_FS_IRQHandler+0x8>)
 8007306:	f005 bc25 	b.w	800cb54 <HAL_PCD_IRQHandler>
 800730a:	bf00      	nop
 800730c:	2002f948 	.word	0x2002f948

08007310 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <DMA2_Stream6_IRQHandler+0x8>)
 8007312:	f002 b9cf 	b.w	80096b4 <HAL_DMA_IRQHandler>
 8007316:	bf00      	nop
 8007318:	20002490 	.word	0x20002490

0800731c <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800731c:	4801      	ldr	r0, [pc, #4]	; (8007324 <USART6_IRQHandler+0x8>)
 800731e:	f00b b927 	b.w	8012570 <HAL_UART_IRQHandler>
 8007322:	bf00      	nop
 8007324:	20002b90 	.word	0x20002b90

08007328 <FPU_IRQHandler>:
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop

0800732c <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800732c:	4801      	ldr	r0, [pc, #4]	; (8007334 <UART8_IRQHandler+0x8>)
 800732e:	f00b b91f 	b.w	8012570 <HAL_UART_IRQHandler>
 8007332:	bf00      	nop
 8007334:	20002c98 	.word	0x20002c98

08007338 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 8007338:	2001      	movs	r0, #1
 800733a:	4770      	bx	lr

0800733c <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 800733c:	4b02      	ldr	r3, [pc, #8]	; (8007348 <_kill+0xc>)
 800733e:	2216      	movs	r2, #22
	return -1;
}
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8007344:	601a      	str	r2, [r3, #0]
}
 8007346:	4770      	bx	lr
 8007348:	2002fd5c 	.word	0x2002fd5c

0800734c <_exit>:
	errno = EINVAL;
 800734c:	4b01      	ldr	r3, [pc, #4]	; (8007354 <_exit+0x8>)
 800734e:	2216      	movs	r2, #22
 8007350:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 8007352:	e7fe      	b.n	8007352 <_exit+0x6>
 8007354:	2002fd5c 	.word	0x2002fd5c

08007358 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8007358:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800735a:	1e16      	subs	r6, r2, #0
 800735c:	dd07      	ble.n	800736e <_read+0x16>
 800735e:	460c      	mov	r4, r1
 8007360:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8007362:	f3af 8000 	nop.w
 8007366:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800736a:	42a5      	cmp	r5, r4
 800736c:	d1f9      	bne.n	8007362 <_read+0xa>
	}

	return len;
}
 800736e:	4630      	mov	r0, r6
 8007370:	bd70      	pop	{r4, r5, r6, pc}
 8007372:	bf00      	nop

08007374 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8007374:	f04f 30ff 	mov.w	r0, #4294967295
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop

0800737c <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 800737c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8007380:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8007382:	604b      	str	r3, [r1, #4]
}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop

08007388 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8007388:	2001      	movs	r0, #1
 800738a:	4770      	bx	lr

0800738c <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 800738c:	2000      	movs	r0, #0
 800738e:	4770      	bx	lr

08007390 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8007390:	490d      	ldr	r1, [pc, #52]	; (80073c8 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 8007392:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8007394:	4a0d      	ldr	r2, [pc, #52]	; (80073cc <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8007396:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8007398:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800739a:	4c0d      	ldr	r4, [pc, #52]	; (80073d0 <_sbrk+0x40>)
 800739c:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 800739e:	b170      	cbz	r0, 80073be <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80073a0:	4403      	add	r3, r0
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d803      	bhi.n	80073ae <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 80073a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 80073aa:	600b      	str	r3, [r1, #0]
}
 80073ac:	4770      	bx	lr
		errno = ENOMEM;
 80073ae:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <_sbrk+0x44>)
 80073b0:	220c      	movs	r2, #12
		return (void*) -1;
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80073b6:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 80073ba:	601a      	str	r2, [r3, #0]
}
 80073bc:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 80073be:	4c06      	ldr	r4, [pc, #24]	; (80073d8 <_sbrk+0x48>)
 80073c0:	4620      	mov	r0, r4
 80073c2:	600c      	str	r4, [r1, #0]
 80073c4:	e7ec      	b.n	80073a0 <_sbrk+0x10>
 80073c6:	bf00      	nop
 80073c8:	200030d8 	.word	0x200030d8
 80073cc:	20080000 	.word	0x20080000
 80073d0:	00006800 	.word	0x00006800
 80073d4:	2002fd5c 	.word	0x2002fd5c
 80073d8:	2002fd88 	.word	0x2002fd88

080073dc <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073dc:	4a0f      	ldr	r2, [pc, #60]	; (800741c <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80073de:	4b10      	ldr	r3, [pc, #64]	; (8007420 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073e0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80073e4:	490f      	ldr	r1, [pc, #60]	; (8007424 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073e6:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80073ea:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073ec:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 80073f0:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	f040 0001 	orr.w	r0, r0, #1
 80073f8:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 80073fa:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8007400:	4809      	ldr	r0, [pc, #36]	; (8007428 <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8007402:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8007404:	6058      	str	r0, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8007406:	6819      	ldr	r1, [r3, #0]
#else
  extern unsigned int* _progstart;

//	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//	SCB->VTOR = 0x8100000 | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007408:	4808      	ldr	r0, [pc, #32]	; (800742c <SystemInit+0x50>)
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 800740a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800740e:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8007410:	60dc      	str	r4, [r3, #12]

#endif
}
 8007412:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007416:	6090      	str	r0, [r2, #8]
}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	e000ed00 	.word	0xe000ed00
 8007420:	40023800 	.word	0x40023800
 8007424:	fef6ffff 	.word	0xfef6ffff
 8007428:	24003010 	.word	0x24003010
 800742c:	08000000 	.word	0x08000000

08007430 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8007430:	680b      	ldr	r3, [r1, #0]
 8007432:	4a03      	ldr	r2, [pc, #12]	; (8007440 <dnsfound+0x10>)
		ip_ready = -1;
 8007434:	2b00      	cmp	r3, #0
 8007436:	bf08      	it	eq
 8007438:	f04f 33ff 	moveq.w	r3, #4294967295
 800743c:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 800743e:	4770      	bx	lr
 8007440:	200030ec 	.word	0x200030ec

08007444 <myreboot>:
void myreboot(char *msg) {
 8007444:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 8007446:	480a      	ldr	r0, [pc, #40]	; (8007470 <myreboot+0x2c>)
void myreboot(char *msg) {
 8007448:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 800744a:	f01d ffb3 	bl	80253b4 <iprintf>
	osDelay(2000);
 800744e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007452:	f00e f815 	bl	8015480 <osDelay>
	__ASM volatile ("dsb 0xF":::"memory");
 8007456:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800745a:	4906      	ldr	r1, [pc, #24]	; (8007474 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800745c:	4b06      	ldr	r3, [pc, #24]	; (8007478 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800745e:	68ca      	ldr	r2, [r1, #12]
 8007460:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007464:	4313      	orrs	r3, r2
 8007466:	60cb      	str	r3, [r1, #12]
 8007468:	f3bf 8f4f 	dsb	sy
    __NOP();
 800746c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800746e:	e7fd      	b.n	800746c <myreboot+0x28>
 8007470:	0802c1ac 	.word	0x0802c1ac
 8007474:	e000ed00 	.word	0xe000ed00
 8007478:	05fa0004 	.word	0x05fa0004

0800747c <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 800747c:	b500      	push	{lr}
 800747e:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8007480:	f241 3388 	movw	r3, #5000	; 0x1388
 8007484:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <sendudp+0x64>)
 8007486:	f018 feff 	bl	8020288 <udp_sendto>
 800748a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 800748e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007492:	b943      	cbnz	r3, 80074a6 <sendudp+0x2a>
 8007494:	b25a      	sxtb	r2, r3
		busycount = 0;
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <sendudp+0x68>)
 8007498:	601a      	str	r2, [r3, #0]
	return (err);
 800749a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800749e:	b240      	sxtb	r0, r0
 80074a0:	b003      	add	sp, #12
 80074a2:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 80074a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80074aa:	480f      	ldr	r0, [pc, #60]	; (80074e8 <sendudp+0x6c>)
 80074ac:	b249      	sxtb	r1, r1
 80074ae:	f01d ff81 	bl	80253b4 <iprintf>
		vTaskDelay(100); //some delay!
 80074b2:	2064      	movs	r0, #100	; 0x64
 80074b4:	f00f fb32 	bl	8016b1c <vTaskDelay>
		if (err == ERR_MEM) {
 80074b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80074bc:	2bff      	cmp	r3, #255	; 0xff
 80074be:	d00c      	beq.n	80074da <sendudp+0x5e>
		if (err == ERR_USE) {
 80074c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80074c4:	2bf8      	cmp	r3, #248	; 0xf8
 80074c6:	d1e8      	bne.n	800749a <sendudp+0x1e>
			if (busycount++ > 10)
 80074c8:	4a06      	ldr	r2, [pc, #24]	; (80074e4 <sendudp+0x68>)
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	1c59      	adds	r1, r3, #1
 80074ce:	2b0a      	cmp	r3, #10
 80074d0:	6011      	str	r1, [r2, #0]
 80074d2:	dde2      	ble.n	800749a <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 80074d4:	4805      	ldr	r0, [pc, #20]	; (80074ec <sendudp+0x70>)
 80074d6:	f7ff ffb5 	bl	8007444 <myreboot>
			myreboot("sendudp: out of mem");
 80074da:	4805      	ldr	r0, [pc, #20]	; (80074f0 <sendudp+0x74>)
 80074dc:	f7ff ffb2 	bl	8007444 <myreboot>
 80074e0:	20003104 	.word	0x20003104
 80074e4:	200030dc 	.word	0x200030dc
 80074e8:	0802c1c0 	.word	0x0802c1c0
 80074ec:	0802c1e8 	.word	0x0802c1e8
 80074f0:	0802c1d4 	.word	0x0802c1d4

080074f4 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80074f4:	4b25      	ldr	r3, [pc, #148]	; (800758c <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80074f6:	4684      	mov	ip, r0
 80074f8:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80074fa:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80074fe:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8007500:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007504:	4c22      	ldr	r4, [pc, #136]	; (8007590 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8007506:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007508:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800750a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800750e:	4c21      	ldr	r4, [pc, #132]	; (8007594 <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8007510:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007514:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8007518:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800751c:	4c1e      	ldr	r4, [pc, #120]	; (8007598 <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800751e:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007522:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8007526:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800752a:	4a1c      	ldr	r2, [pc, #112]	; (800759c <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800752c:	bfc8      	it	gt
 800752e:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007532:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 8007536:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007538:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	4d18      	ldr	r5, [pc, #96]	; (80075a0 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007540:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007542:	2b00      	cmp	r3, #0
 8007544:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007546:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007548:	bfb8      	it	lt
 800754a:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800754c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800754e:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007550:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007552:	4d15      	ldr	r5, [pc, #84]	; (80075a8 <sendstatus+0xb4>)
 8007554:	b292      	uxth	r2, r2
 8007556:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007558:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800755c:	432a      	orrs	r2, r5
 800755e:	4d13      	ldr	r5, [pc, #76]	; (80075ac <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007560:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007562:	4035      	ands	r5, r6
 8007564:	432a      	orrs	r2, r5
 8007566:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007568:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 800756c:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 800756e:	4a10      	ldr	r2, [pc, #64]	; (80075b0 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8007570:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8007574:	f241 3388 	movw	r3, #5000	; 0x1388
 8007578:	f7ff ff80 	bl	800747c <sendudp>
 800757c:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	6023      	str	r3, [r4, #0]
}
 8007586:	b002      	add	sp, #8
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	bf00      	nop
 800758c:	20000750 	.word	0x20000750
 8007590:	200006fc 	.word	0x200006fc
 8007594:	20003070 	.word	0x20003070
 8007598:	20002f3c 	.word	0x20002f3c
 800759c:	20000708 	.word	0x20000708
 80075a0:	20000002 	.word	0x20000002
 80075a4:	20000704 	.word	0x20000704
 80075a8:	200006e4 	.word	0x200006e4
 80075ac:	ffff0000 	.word	0xffff0000
 80075b0:	20003104 	.word	0x20003104

080075b4 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 80075b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b6:	4604      	mov	r4, r0
 80075b8:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 80075ba:	4818      	ldr	r0, [pc, #96]	; (800761c <dnslookup+0x68>)
 80075bc:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 80075be:	4e18      	ldr	r6, [pc, #96]	; (8007620 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 80075c0:	f01d fef8 	bl	80253b4 <iprintf>
	ip_ready = 0;
 80075c4:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80075c6:	4620      	mov	r0, r4
 80075c8:	4a16      	ldr	r2, [pc, #88]	; (8007624 <dnslookup+0x70>)
 80075ca:	4639      	mov	r1, r7
	ip_ready = 0;
 80075cc:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80075ce:	f012 faff 	bl	8019bd0 <dns_gethostbyname>
 80075d2:	4604      	mov	r4, r0

	switch (err) {
 80075d4:	3005      	adds	r0, #5
 80075d6:	d005      	beq.n	80075e4 <dnslookup+0x30>
 80075d8:	b114      	cbz	r4, 80075e0 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 80075da:	4813      	ldr	r0, [pc, #76]	; (8007628 <dnslookup+0x74>)
 80075dc:	f01d feea 	bl	80253b4 <iprintf>
		break;
	}
	return (err);
}
 80075e0:	4620      	mov	r0, r4
 80075e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 80075e4:	4811      	ldr	r0, [pc, #68]	; (800762c <dnslookup+0x78>)
 80075e6:	2514      	movs	r5, #20
 80075e8:	f01d fee4 	bl	80253b4 <iprintf>
		for (i = 0; i < 20; i++) {
 80075ec:	e001      	b.n	80075f2 <dnslookup+0x3e>
 80075ee:	3d01      	subs	r5, #1
 80075f0:	d0f3      	beq.n	80075da <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 80075f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075f6:	f00d ff43 	bl	8015480 <osDelay>
			printf(".");
 80075fa:	202e      	movs	r0, #46	; 0x2e
 80075fc:	f01d fef2 	bl	80253e4 <putchar>
			if (ip_ready) {
 8007600:	6833      	ldr	r3, [r6, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0f3      	beq.n	80075ee <dnslookup+0x3a>
				if (ip_ready == -1) {
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	d002      	beq.n	8007610 <dnslookup+0x5c>
				return (ERR_OK);
 800760a:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 800760c:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 800760e:	e7e7      	b.n	80075e0 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8007612:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 8007616:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8007618:	e7e2      	b.n	80075e0 <dnslookup+0x2c>
 800761a:	bf00      	nop
 800761c:	0802c204 	.word	0x0802c204
 8007620:	200030ec 	.word	0x200030ec
 8007624:	08007431 	.word	0x08007431
 8007628:	0802c240 	.word	0x0802c240
 800762c:	0802c218 	.word	0x0802c218
 8007630:	0802c234 	.word	0x0802c234

08007634 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8007634:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8007636:	4914      	ldr	r1, [pc, #80]	; (8007688 <locateudp+0x54>)
{
 8007638:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 800763a:	4814      	ldr	r0, [pc, #80]	; (800768c <locateudp+0x58>)
 800763c:	f01d feba 	bl	80253b4 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8007640:	4913      	ldr	r1, [pc, #76]	; (8007690 <locateudp+0x5c>)
 8007642:	4811      	ldr	r0, [pc, #68]	; (8007688 <locateudp+0x54>)
 8007644:	f7ff ffb6 	bl	80075b4 <dnslookup>
 8007648:	b240      	sxtb	r0, r0
 800764a:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 800764e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007652:	b9a3      	cbnz	r3, 800767e <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 8007654:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8007656:	490f      	ldr	r1, [pc, #60]	; (8007694 <locateudp+0x60>)
	ip = udpdestip.addr;
 8007658:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800765a:	480f      	ldr	r0, [pc, #60]	; (8007698 <locateudp+0x64>)
 800765c:	0e22      	lsrs	r2, r4, #24
 800765e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8007662:	e9cd 3200 	strd	r3, r2, [sp]
 8007666:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800766a:	b2e2      	uxtb	r2, r4
 800766c:	f01e f88c 	bl	8025788 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8007670:	4909      	ldr	r1, [pc, #36]	; (8007698 <locateudp+0x64>)
 8007672:	480a      	ldr	r0, [pc, #40]	; (800769c <locateudp+0x68>)
 8007674:	f01d fe9e 	bl	80253b4 <iprintf>
	return (ip);
}
 8007678:	4620      	mov	r0, r4
 800767a:	b004      	add	sp, #16
 800767c:	bd10      	pop	{r4, pc}
		rebootme(3);
 800767e:	2003      	movs	r0, #3
 8007680:	f7fb fe48 	bl	8003314 <rebootme>
 8007684:	e7e6      	b.n	8007654 <locateudp+0x20>
 8007686:	bf00      	nop
 8007688:	20003150 	.word	0x20003150
 800768c:	0802c264 	.word	0x0802c264
 8007690:	20003104 	.word	0x20003104
 8007694:	0802c284 	.word	0x0802c284
 8007698:	200030f4 	.word	0x200030f4
 800769c:	0802c294 	.word	0x0802c294

080076a0 <startudp>:

void startudp(uint32_t ip) {
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	ed2d 8b02 	vpush	{d8}
 80076a8:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80076aa:	f00f fb5f 	bl	8016d6c <xTaskGetCurrentTaskHandle>
 80076ae:	4b75      	ldr	r3, [pc, #468]	; (8007884 <startudp+0x1e4>)
 80076b0:	4602      	mov	r2, r0
	osDelay(1000);
 80076b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80076b6:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 80076b8:	f00d fee2 	bl	8015480 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 80076bc:	f018 feb0 	bl	8020420 <udp_new>
	if (pcb == NULL) {
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f000 80ce 	beq.w	8007862 <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 80076c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ca:	496f      	ldr	r1, [pc, #444]	; (8007888 <startudp+0x1e8>)
 80076cc:	ee08 0a10 	vmov	s16, r0
 80076d0:	f018 fc56 	bl	801ff80 <udp_bind>
 80076d4:	4605      	mov	r5, r0
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f040 80bf 	bne.w	800785a <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80076dc:	2241      	movs	r2, #65	; 0x41
 80076de:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 80076e2:	2036      	movs	r0, #54	; 0x36
 80076e4:	f013 fbca 	bl	801ae7c <pbuf_alloc>

	if (p1 == NULL) {
 80076e8:	9000      	str	r0, [sp, #0]
 80076ea:	2800      	cmp	r0, #0
 80076ec:	f000 80bd 	beq.w	800786a <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 80076f0:	4c66      	ldr	r4, [pc, #408]	; (800788c <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80076f2:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 80076f6:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80076f8:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80076fe:	2241      	movs	r2, #65	; 0x41
 8007700:	f013 fbbc 	bl	801ae7c <pbuf_alloc>
	if (p2 == NULL) {
 8007704:	9001      	str	r0, [sp, #4]
 8007706:	2800      	cmp	r0, #0
 8007708:	f000 80b7 	beq.w	800787a <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 800770c:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800770e:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8007710:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8007712:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8007714:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8007718:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800771a:	2201      	movs	r2, #1
 800771c:	f013 fbae 	bl	801ae7c <pbuf_alloc>
	if (ps == NULL) {
 8007720:	ee08 0a90 	vmov	s17, r0
 8007724:	2800      	cmp	r0, #0
 8007726:	f000 80aa 	beq.w	800787e <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 800772a:	4c59      	ldr	r4, [pc, #356]	; (8007890 <startudp+0x1f0>)
 800772c:	4f59      	ldr	r7, [pc, #356]	; (8007894 <startudp+0x1f4>)
 800772e:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 8007730:	f241 3088 	movw	r0, #5000	; 0x1388
 8007734:	f00d fea4 	bl	8015480 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8007738:	4b57      	ldr	r3, [pc, #348]	; (8007898 <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 800773a:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 800773c:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 800773e:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8007740:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8007742:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8007746:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800774a:	4b54      	ldr	r3, [pc, #336]	; (800789c <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 800774c:	4854      	ldr	r0, [pc, #336]	; (80078a0 <startudp+0x200>)
 800774e:	4e55      	ldr	r6, [pc, #340]	; (80078a4 <startudp+0x204>)
 8007750:	f8df b188 	ldr.w	fp, [pc, #392]	; 80078dc <startudp+0x23c>
 8007754:	f8df a188 	ldr.w	sl, [pc, #392]	; 80078e0 <startudp+0x240>
 8007758:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80078e4 <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 800775c:	4d52      	ldr	r5, [pc, #328]	; (80078a8 <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800775e:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8007760:	f01d fec4 	bl	80254ec <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8007764:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007768:	2001      	movs	r0, #1
 800776a:	f00f fc47 	bl	8016ffc <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 800776e:	2800      	cmp	r0, #0
 8007770:	d05a      	beq.n	8007828 <startudp+0x188>
			sigsend = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8007776:	7833      	ldrb	r3, [r6, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0f3      	beq.n	8007764 <startudp+0xc4>
 800777c:	f8db 3000 	ldr.w	r3, [fp]
 8007780:	f8da 2000 	ldr.w	r2, [sl]
 8007784:	4313      	orrs	r3, r2
 8007786:	d1ed      	bne.n	8007764 <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8007788:	4a48      	ldr	r2, [pc, #288]	; (80078ac <startudp+0x20c>)
 800778a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	2a00      	cmp	r2, #0
 8007792:	bf08      	it	eq
 8007794:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8007796:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8007798:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 800779a:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 800779c:	6822      	ldr	r2, [r4, #0]
 800779e:	684b      	ldr	r3, [r1, #4]
 80077a0:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	684a      	ldr	r2, [r1, #4]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	684a      	ldr	r2, [r1, #4]
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 80077b2:	7b89      	ldrb	r1, [r1, #14]
 80077b4:	2901      	cmp	r1, #1
 80077b6:	d006      	beq.n	80077c6 <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 80077b8:	4628      	mov	r0, r5
 80077ba:	f01d fdfb 	bl	80253b4 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 80077be:	f899 100e 	ldrb.w	r1, [r9, #14]
 80077c2:	2901      	cmp	r1, #1
 80077c4:	d1f8      	bne.n	80077b8 <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 80077c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80077ca:	4649      	mov	r1, r9
 80077cc:	4a38      	ldr	r2, [pc, #224]	; (80078b0 <startudp+0x210>)
 80077ce:	ee18 0a10 	vmov	r0, s16
 80077d2:	f7ff fe53 	bl	800747c <sendudp>
 80077d6:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 80077da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80077de:	3301      	adds	r3, #1
 80077e0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 80077e4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80077e8:	3301      	adds	r3, #1
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	3301      	adds	r3, #1
 80077f4:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 80077f6:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <startudp+0x214>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0b2      	beq.n	8007764 <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 80077fe:	492e      	ldr	r1, [pc, #184]	; (80078b8 <startudp+0x218>)
 8007800:	ee18 2a10 	vmov	r2, s16
 8007804:	2001      	movs	r0, #1
 8007806:	780b      	ldrb	r3, [r1, #0]
 8007808:	ee18 1a90 	vmov	r1, s17
 800780c:	f7ff fe72 	bl	80074f4 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8007810:	2300      	movs	r3, #0
 8007812:	4a28      	ldr	r2, [pc, #160]	; (80078b4 <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8007814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007818:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 800781a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 800781e:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8007820:	f00f fbec 	bl	8016ffc <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8007824:	2800      	cmp	r0, #0
 8007826:	d1a4      	bne.n	8007772 <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8007828:	4b24      	ldr	r3, [pc, #144]	; (80078bc <startudp+0x21c>)
 800782a:	f8d8 2000 	ldr.w	r2, [r8]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4293      	cmp	r3, r2
 8007832:	d097      	beq.n	8007764 <startudp+0xc4>
 8007834:	4a22      	ldr	r2, [pc, #136]	; (80078c0 <startudp+0x220>)
 8007836:	4923      	ldr	r1, [pc, #140]	; (80078c4 <startudp+0x224>)
 8007838:	fb02 f203 	mul.w	r2, r2, r3
 800783c:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 8007840:	d390      	bcc.n	8007764 <startudp+0xc4>
		talive = t1sec;
 8007842:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 8007846:	ee18 2a10 	vmov	r2, s16
 800784a:	4b1b      	ldr	r3, [pc, #108]	; (80078b8 <startudp+0x218>)
 800784c:	ee18 1a90 	vmov	r1, s17
 8007850:	2002      	movs	r0, #2
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f7ff fe4e 	bl	80074f4 <sendstatus>
 8007858:	e784      	b.n	8007764 <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 800785a:	481b      	ldr	r0, [pc, #108]	; (80078c8 <startudp+0x228>)
 800785c:	f01d fe46 	bl	80254ec <puts>
		for (;;)
 8007860:	e7fe      	b.n	8007860 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 8007862:	481a      	ldr	r0, [pc, #104]	; (80078cc <startudp+0x22c>)
 8007864:	f01d fe42 	bl	80254ec <puts>
		for (;;)
 8007868:	e7fe      	b.n	8007868 <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 800786a:	4819      	ldr	r0, [pc, #100]	; (80078d0 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 800786c:	b005      	add	sp, #20
 800786e:	ecbd 8b02 	vpop	{d8}
 8007872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8007876:	f01d be39 	b.w	80254ec <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 800787a:	4816      	ldr	r0, [pc, #88]	; (80078d4 <startudp+0x234>)
 800787c:	e7f6      	b.n	800786c <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 800787e:	4816      	ldr	r0, [pc, #88]	; (80078d8 <startudp+0x238>)
 8007880:	e7f4      	b.n	800786c <startudp+0x1cc>
 8007882:	bf00      	nop
 8007884:	20000804 	.word	0x20000804
 8007888:	080459a4 	.word	0x080459a4
 800788c:	20000754 	.word	0x20000754
 8007890:	20002f3c 	.word	0x20002f3c
 8007894:	2000076c 	.word	0x2000076c
 8007898:	dec0edfe 	.word	0xdec0edfe
 800789c:	20000752 	.word	0x20000752
 80078a0:	0802c340 	.word	0x0802c340
 80078a4:	200030e8 	.word	0x200030e8
 80078a8:	0802c374 	.word	0x0802c374
 80078ac:	200006f8 	.word	0x200006f8
 80078b0:	20003104 	.word	0x20003104
 80078b4:	20000764 	.word	0x20000764
 80078b8:	200006e4 	.word	0x200006e4
 80078bc:	20002d54 	.word	0x20002d54
 80078c0:	eeeeeeef 	.word	0xeeeeeeef
 80078c4:	02222222 	.word	0x02222222
 80078c8:	0802c2c4 	.word	0x0802c2c4
 80078cc:	0802c2a8 	.word	0x0802c2a8
 80078d0:	0802c2e0 	.word	0x0802c2e0
 80078d4:	0802c300 	.word	0x0802c300
 80078d8:	0802c320 	.word	0x0802c320
 80078dc:	200030e4 	.word	0x200030e4
 80078e0:	20000704 	.word	0x20000704
 80078e4:	200030f0 	.word	0x200030f0

080078e8 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 80078ea:	4b52      	ldr	r3, [pc, #328]	; (8007a34 <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80078ec:	4606      	mov	r6, r0
 80078ee:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80078f0:	4851      	ldr	r0, [pc, #324]	; (8007a38 <tag_callback+0x150>)
	if (ledsenabled) {
 80078f2:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80078f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 80078f8:	b35a      	cbz	r2, 8007952 <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80078fa:	f004 f9f5 	bl	800bce8 <HAL_GPIO_TogglePin>
 80078fe:	4c4f      	ldr	r4, [pc, #316]	; (8007a3c <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8007900:	4d4f      	ldr	r5, [pc, #316]	; (8007a40 <tag_callback+0x158>)
 8007902:	e001      	b.n	8007908 <tag_callback+0x20>
 8007904:	f01d fdf2 	bl	80254ec <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8007908:	2101      	movs	r1, #1
 800790a:	6820      	ldr	r0, [r4, #0]
 800790c:	f00e fb7c 	bl	8016008 <xQueueSemaphoreTake>
 8007910:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8007912:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8007914:	2b01      	cmp	r3, #1
 8007916:	d1f5      	bne.n	8007904 <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8007918:	1f32      	subs	r2, r6, #4
 800791a:	2a07      	cmp	r2, #7
 800791c:	d81c      	bhi.n	8007958 <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 800791e:	4949      	ldr	r1, [pc, #292]	; (8007a44 <tag_callback+0x15c>)
 8007920:	4093      	lsls	r3, r2
 8007922:	780a      	ldrb	r2, [r1, #0]
 8007924:	4013      	ands	r3, r2
 8007926:	4a48      	ldr	r2, [pc, #288]	; (8007a48 <tag_callback+0x160>)
 8007928:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 800792a:	bb5b      	cbnz	r3, 8007984 <tag_callback+0x9c>
			strcpy(newstring, "0");
 800792c:	4b47      	ldr	r3, [pc, #284]	; (8007a4c <tag_callback+0x164>)
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8007932:	2300      	movs	r3, #0
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	4619      	mov	r1, r3
 800793a:	f00e f8cb 	bl	8015ad4 <xQueueGenericSend>
 800793e:	2801      	cmp	r0, #1
 8007940:	d002      	beq.n	8007948 <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8007942:	4843      	ldr	r0, [pc, #268]	; (8007a50 <tag_callback+0x168>)
 8007944:	f01d fdd2 	bl	80254ec <puts>
	}
	return (strlen(newstring));
 8007948:	4638      	mov	r0, r7
}
 800794a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 800794e:	f7f8 bc81 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8007952:	f004 f9af 	bl	800bcb4 <HAL_GPIO_WritePin>
 8007956:	e7d2      	b.n	80078fe <tag_callback+0x16>
		switch (index) {
 8007958:	2e14      	cmp	r6, #20
 800795a:	d817      	bhi.n	800798c <tag_callback+0xa4>
 800795c:	e8df f006 	tbb	[pc, r6]
 8007960:	0b655055 	.word	0x0b655055
 8007964:	16161616 	.word	0x16161616
 8007968:	16161616 	.word	0x16161616
 800796c:	343d5a61 	.word	0x343d5a61
 8007970:	464b2429 	.word	0x464b2429
 8007974:	1c          	.byte	0x1c
 8007975:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8007976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800797a:	482f      	ldr	r0, [pc, #188]	; (8007a38 <tag_callback+0x150>)
 800797c:	f004 f988 	bl	800bc90 <HAL_GPIO_ReadPin>
 8007980:	2801      	cmp	r0, #1
 8007982:	d1d3      	bne.n	800792c <tag_callback+0x44>
			strcpy(newstring, "1");
 8007984:	4b33      	ldr	r3, [pc, #204]	; (8007a54 <tag_callback+0x16c>)
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	803b      	strh	r3, [r7, #0]
 800798a:	e7d2      	b.n	8007932 <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 800798c:	4632      	mov	r2, r6
 800798e:	4932      	ldr	r1, [pc, #200]	; (8007a58 <tag_callback+0x170>)
 8007990:	4638      	mov	r0, r7
 8007992:	f01d fef9 	bl	8025788 <siprintf>
			break;
 8007996:	e7cc      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8007998:	4b30      	ldr	r3, [pc, #192]	; (8007a5c <tag_callback+0x174>)
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	bf14      	ite	ne
 80079a0:	2331      	movne	r3, #49	; 0x31
 80079a2:	2330      	moveq	r3, #48	; 0x30
 80079a4:	803b      	strh	r3, [r7, #0]
			break;
 80079a6:	e7c4      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 80079a8:	492d      	ldr	r1, [pc, #180]	; (8007a60 <tag_callback+0x178>)
 80079aa:	4638      	mov	r0, r7
 80079ac:	f01d ff93 	bl	80258d6 <strcpy>
			break;
 80079b0:	e7bf      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 80079b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80079b6:	482b      	ldr	r0, [pc, #172]	; (8007a64 <tag_callback+0x17c>)
 80079b8:	f004 f96a 	bl	800bc90 <HAL_GPIO_ReadPin>
 80079bc:	2800      	cmp	r0, #0
 80079be:	bf14      	ite	ne
 80079c0:	2330      	movne	r3, #48	; 0x30
 80079c2:	2331      	moveq	r3, #49	; 0x31
 80079c4:	803b      	strh	r3, [r7, #0]
			break;
 80079c6:	e7b4      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 80079c8:	4b27      	ldr	r3, [pc, #156]	; (8007a68 <tag_callback+0x180>)
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	f013 0f04 	tst.w	r3, #4
 80079d0:	bf14      	ite	ne
 80079d2:	2331      	movne	r3, #49	; 0x31
 80079d4:	2330      	moveq	r3, #48	; 0x30
 80079d6:	803b      	strh	r3, [r7, #0]
			break;
 80079d8:	e7ab      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 80079da:	4b23      	ldr	r3, [pc, #140]	; (8007a68 <tag_callback+0x180>)
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	f013 0f02 	tst.w	r3, #2
 80079e2:	bf14      	ite	ne
 80079e4:	2331      	movne	r3, #49	; 0x31
 80079e6:	2330      	moveq	r3, #48	; 0x30
 80079e8:	803b      	strh	r3, [r7, #0]
			break;
 80079ea:	e7a2      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 80079ec:	491f      	ldr	r1, [pc, #124]	; (8007a6c <tag_callback+0x184>)
 80079ee:	4638      	mov	r0, r7
 80079f0:	f01d ff71 	bl	80258d6 <strcpy>
			break;
 80079f4:	e79d      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 80079f6:	491e      	ldr	r1, [pc, #120]	; (8007a70 <tag_callback+0x188>)
 80079f8:	4638      	mov	r0, r7
 80079fa:	f01d ff6c 	bl	80258d6 <strcpy>
			break;
 80079fe:	e798      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 8007a00:	491c      	ldr	r1, [pc, #112]	; (8007a74 <tag_callback+0x18c>)
 8007a02:	4638      	mov	r0, r7
 8007a04:	f01d ff67 	bl	80258d6 <strcpy>
			break;
 8007a08:	e793      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 8007a0a:	491b      	ldr	r1, [pc, #108]	; (8007a78 <tag_callback+0x190>)
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f01d ff62 	bl	80258d6 <strcpy>
			break;
 8007a12:	e78e      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8007a14:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <tag_callback+0x180>)
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	3330      	adds	r3, #48	; 0x30
 8007a1e:	803b      	strh	r3, [r7, #0]
			break;
 8007a20:	e787      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, "5");
 8007a22:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <tag_callback+0x194>)
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	803b      	strh	r3, [r7, #0]
			break;
 8007a28:	e783      	b.n	8007932 <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 8007a2a:	4915      	ldr	r1, [pc, #84]	; (8007a80 <tag_callback+0x198>)
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f01d ff52 	bl	80258d6 <strcpy>
			break;
 8007a32:	e77e      	b.n	8007932 <tag_callback+0x4a>
 8007a34:	20000278 	.word	0x20000278
 8007a38:	40020c00 	.word	0x40020c00
 8007a3c:	20002d50 	.word	0x20002d50
 8007a40:	0802c45c 	.word	0x0802c45c
 8007a44:	2000027c 	.word	0x2000027c
 8007a48:	2000310c 	.word	0x2000310c
 8007a4c:	08045580 	.word	0x08045580
 8007a50:	0802c488 	.word	0x0802c488
 8007a54:	0802c23c 	.word	0x0802c23c
 8007a58:	0802c468 	.word	0x0802c468
 8007a5c:	20000018 	.word	0x20000018
 8007a60:	2000008c 	.word	0x2000008c
 8007a64:	40021000 	.word	0x40021000
 8007a68:	20003070 	.word	0x20003070
 8007a6c:	2000001c 	.word	0x2000001c
 8007a70:	20000130 	.word	0x20000130
 8007a74:	2000007c 	.word	0x2000007c
 8007a78:	20000238 	.word	0x20000238
 8007a7c:	08043964 	.word	0x08043964
 8007a80:	2000005c 	.word	0x2000005c

08007a84 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	4615      	mov	r5, r2
 8007a8c:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8007a8e:	220a      	movs	r2, #10
 8007a90:	a903      	add	r1, sp, #12
 8007a92:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8007a94:	4699      	mov	r9, r3
 8007a96:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8007a98:	f01e fcf8 	bl	802648c <strtol>
 8007a9c:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	462a      	mov	r2, r5
 8007aa2:	4871      	ldr	r0, [pc, #452]	; (8007c68 <httpd_cgi_handler+0x1e4>)
 8007aa4:	4633      	mov	r3, r6
 8007aa6:	f01d fc85 	bl	80253b4 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007aaa:	2d00      	cmp	r5, #0
 8007aac:	dd37      	ble.n	8007b1e <httpd_cgi_handler+0x9a>
 8007aae:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8007ab0:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8007c98 <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8007ab4:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8007c9c <httpd_cgi_handler+0x218>
		switch (j) {
 8007ab8:	f1a6 030a 	sub.w	r3, r6, #10
 8007abc:	2b0e      	cmp	r3, #14
 8007abe:	f200 80cc 	bhi.w	8007c5a <httpd_cgi_handler+0x1d6>
 8007ac2:	e8df f003 	tbb	[pc, r3]
 8007ac6:	9eb6      	.short	0x9eb6
 8007ac8:	08080808 	.word	0x08080808
 8007acc:	08080808 	.word	0x08080808
 8007ad0:	864d6073 	.word	0x864d6073
 8007ad4:	3a          	.byte	0x3a
 8007ad5:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 8007ad6:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8007ad8:	2101      	movs	r1, #1
 8007ada:	f1a6 000c 	sub.w	r0, r6, #12
 8007ade:	4b63      	ldr	r3, [pc, #396]	; (8007c6c <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8007ae0:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8007ae2:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8007ae6:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 8007ae8:	2a30      	cmp	r2, #48	; 0x30
 8007aea:	d01b      	beq.n	8007b24 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	4311      	orrs	r1, r2
 8007af0:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8007af2:	f001 0202 	and.w	r2, r1, #2
 8007af6:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8007af8:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 8007afa:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8007afc:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8007b00:	f01d fc58 	bl	80253b4 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8007b04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b08:	2301      	movs	r3, #1
 8007b0a:	4a58      	ldr	r2, [pc, #352]	; (8007c6c <httpd_cgi_handler+0x1e8>)
 8007b0c:	9100      	str	r1, [sp, #0]
 8007b0e:	2188      	movs	r1, #136	; 0x88
 8007b10:	4857      	ldr	r0, [pc, #348]	; (8007c70 <httpd_cgi_handler+0x1ec>)
 8007b12:	f004 fbd5 	bl	800c2c0 <HAL_I2C_Master_Transmit>
 8007b16:	b960      	cbnz	r0, 8007b32 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b18:	3401      	adds	r4, #1
 8007b1a:	42a5      	cmp	r5, r4
 8007b1c:	d1cc      	bne.n	8007ab8 <httpd_cgi_handler+0x34>
}
 8007b1e:	b005      	add	sp, #20
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8007b24:	2101      	movs	r1, #1
 8007b26:	fa01 f600 	lsl.w	r6, r1, r0
 8007b2a:	7819      	ldrb	r1, [r3, #0]
 8007b2c:	ea21 0106 	bic.w	r1, r1, r6
 8007b30:	e7df      	b.n	8007af2 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8007b32:	4850      	ldr	r0, [pc, #320]	; (8007c74 <httpd_cgi_handler+0x1f0>)
 8007b34:	f01d fc3e 	bl	80253b4 <iprintf>
 8007b38:	e7ee      	b.n	8007b18 <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	3c01      	subs	r4, #1
 8007b3e:	484e      	ldr	r0, [pc, #312]	; (8007c78 <httpd_cgi_handler+0x1f4>)
 8007b40:	440c      	add	r4, r1
 8007b42:	4623      	mov	r3, r4
 8007b44:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b48:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007b4a:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b4c:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007b50:	bf18      	it	ne
 8007b52:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b54:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007b56:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b58:	dcf3      	bgt.n	8007b42 <httpd_cgi_handler+0xbe>
}
 8007b5a:	b005      	add	sp, #20
 8007b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b60:	4e46      	ldr	r6, [pc, #280]	; (8007c7c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007b68:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b6a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8007b6c:	2b30      	cmp	r3, #48	; 0x30
 8007b6e:	bf0c      	ite	eq
 8007b70:	f020 0001 	biceq.w	r0, r0, #1
 8007b74:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8007b78:	f7fd fe9a 	bl	80058b0 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b7c:	42a5      	cmp	r5, r4
 8007b7e:	dcf0      	bgt.n	8007b62 <httpd_cgi_handler+0xde>
}
 8007b80:	b005      	add	sp, #20
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	4e3d      	ldr	r6, [pc, #244]	; (8007c7c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007b8e:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b90:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8007b92:	2b30      	cmp	r3, #48	; 0x30
 8007b94:	bf0c      	ite	eq
 8007b96:	f020 0002 	biceq.w	r0, r0, #2
 8007b9a:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8007b9e:	f7fd fe87 	bl	80058b0 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007ba2:	42a5      	cmp	r5, r4
 8007ba4:	dcf0      	bgt.n	8007b88 <httpd_cgi_handler+0x104>
}
 8007ba6:	b005      	add	sp, #20
 8007ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bac:	4e33      	ldr	r6, [pc, #204]	; (8007c7c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007bb4:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007bb6:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8007bb8:	2b30      	cmp	r3, #48	; 0x30
 8007bba:	bf0c      	ite	eq
 8007bbc:	f020 0004 	biceq.w	r0, r0, #4
 8007bc0:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8007bc4:	f7fd fe74 	bl	80058b0 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007bc8:	42a5      	cmp	r5, r4
 8007bca:	dcf0      	bgt.n	8007bae <httpd_cgi_handler+0x12a>
}
 8007bcc:	b005      	add	sp, #20
 8007bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd2:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8007bd4:	4e2a      	ldr	r6, [pc, #168]	; (8007c80 <httpd_cgi_handler+0x1fc>)
 8007bd6:	e004      	b.n	8007be2 <httpd_cgi_handler+0x15e>
 8007bd8:	f004 f86c 	bl	800bcb4 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007bdc:	42a5      	cmp	r5, r4
 8007bde:	dd9e      	ble.n	8007b1e <httpd_cgi_handler+0x9a>
 8007be0:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8007be2:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8007be4:	2201      	movs	r2, #1
 8007be6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bea:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8007bec:	4423      	add	r3, r4
 8007bee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007bf2:	2b31      	cmp	r3, #49	; 0x31
 8007bf4:	d1f0      	bne.n	8007bd8 <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f004 f85c 	bl	800bcb4 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007bfc:	42a5      	cmp	r5, r4
 8007bfe:	dcef      	bgt.n	8007be0 <httpd_cgi_handler+0x15c>
 8007c00:	e78d      	b.n	8007b1e <httpd_cgi_handler+0x9a>
 8007c02:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8007c04:	4e1f      	ldr	r6, [pc, #124]	; (8007c84 <httpd_cgi_handler+0x200>)
 8007c06:	e004      	b.n	8007c12 <httpd_cgi_handler+0x18e>
 8007c08:	f004 f854 	bl	800bcb4 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007c0c:	42ac      	cmp	r4, r5
 8007c0e:	da86      	bge.n	8007b1e <httpd_cgi_handler+0x9a>
 8007c10:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8007c12:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8007c14:	2201      	movs	r2, #1
 8007c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c1a:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8007c1c:	4423      	add	r3, r4
 8007c1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007c22:	2b30      	cmp	r3, #48	; 0x30
 8007c24:	d1f0      	bne.n	8007c08 <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8007c26:	2200      	movs	r2, #0
 8007c28:	f004 f844 	bl	800bcb4 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007c2c:	42a5      	cmp	r5, r4
 8007c2e:	dcef      	bgt.n	8007c10 <httpd_cgi_handler+0x18c>
 8007c30:	e775      	b.n	8007b1e <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8007c32:	4815      	ldr	r0, [pc, #84]	; (8007c88 <httpd_cgi_handler+0x204>)
 8007c34:	f01d fc5a 	bl	80254ec <puts>
			osDelay(500);
 8007c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c3c:	f00d fc20 	bl	8015480 <osDelay>
 8007c40:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007c44:	4911      	ldr	r1, [pc, #68]	; (8007c8c <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007c48:	68ca      	ldr	r2, [r1, #12]
 8007c4a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60cb      	str	r3, [r1, #12]
 8007c52:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007c56:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007c58:	e7fd      	b.n	8007c56 <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8007c5a:	f8d9 1000 	ldr.w	r1, [r9]
 8007c5e:	480d      	ldr	r0, [pc, #52]	; (8007c94 <httpd_cgi_handler+0x210>)
 8007c60:	f01d fba8 	bl	80253b4 <iprintf>
			break;
 8007c64:	e758      	b.n	8007b18 <httpd_cgi_handler+0x94>
 8007c66:	bf00      	nop
 8007c68:	0802c4a0 	.word	0x0802c4a0
 8007c6c:	2000027c 	.word	0x2000027c
 8007c70:	200024f0 	.word	0x200024f0
 8007c74:	0802bdd0 	.word	0x0802bdd0
 8007c78:	20000018 	.word	0x20000018
 8007c7c:	20003070 	.word	0x20003070
 8007c80:	40021000 	.word	0x40021000
 8007c84:	40020c00 	.word	0x40020c00
 8007c88:	0802c4cc 	.word	0x0802c4cc
 8007c8c:	e000ed00 	.word	0xe000ed00
 8007c90:	05fa0004 	.word	0x05fa0004
 8007c94:	0802c504 	.word	0x0802c504
 8007c98:	2000306c 	.word	0x2000306c
 8007c9c:	0802c4e8 	.word	0x0802c4e8

08007ca0 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8007ca0:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8007ca2:	4802      	ldr	r0, [pc, #8]	; (8007cac <httpd_post_receive_data+0xc>)
 8007ca4:	f01d fc22 	bl	80254ec <puts>
}
 8007ca8:	2000      	movs	r0, #0
 8007caa:	bd08      	pop	{r3, pc}
 8007cac:	0802c524 	.word	0x0802c524

08007cb0 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8007cb0:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8007cb2:	4802      	ldr	r0, [pc, #8]	; (8007cbc <httpd_post_begin+0xc>)
 8007cb4:	f01d fc1a 	bl	80254ec <puts>
}
 8007cb8:	2000      	movs	r0, #0
 8007cba:	bd08      	pop	{r3, pc}
 8007cbc:	0802c540 	.word	0x0802c540

08007cc0 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8007cc0:	4801      	ldr	r0, [pc, #4]	; (8007cc8 <httpd_post_finished+0x8>)
 8007cc2:	f01d bc13 	b.w	80254ec <puts>
 8007cc6:	bf00      	nop
 8007cc8:	0802c554 	.word	0x0802c554

08007ccc <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8007ccc:	4803      	ldr	r0, [pc, #12]	; (8007cdc <init_httpd_ssi+0x10>)
 8007cce:	2215      	movs	r2, #21
 8007cd0:	4903      	ldr	r1, [pc, #12]	; (8007ce0 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8007cd2:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8007cd4:	f011 fa30 	bl	8019138 <http_set_ssi_handler>
}
 8007cd8:	bd08      	pop	{r3, pc}
 8007cda:	bf00      	nop
 8007cdc:	080078e9 	.word	0x080078e9
 8007ce0:	20000288 	.word	0x20000288

08007ce4 <parsep2>:

///////////////////////////////////////////////////////
/// parse p2 params
// return 0 for success
//////////////////////////////////////////////////////
int parsep2(char *buf, char *match, int type, void *value) {
 8007ce4:	b570      	push	{r4, r5, r6, lr}
	uint32_t *val;

	i = 0;
	j = 0;
	val = value;
	while ((buf[i]) && (buf[i] != '}')) {
 8007ce6:	7804      	ldrb	r4, [r0, #0]
 8007ce8:	b194      	cbz	r4, 8007d10 <parsep2+0x2c>
 8007cea:	2c7d      	cmp	r4, #125	; 0x7d
 8007cec:	d010      	beq.n	8007d10 <parsep2+0x2c>
	j = 0;
 8007cee:	f04f 0e00 	mov.w	lr, #0
	i = 0;
 8007cf2:	4675      	mov	r5, lr
		if (buf[i++] == match[j]) {
 8007cf4:	f811 600e 	ldrb.w	r6, [r1, lr]
 8007cf8:	f105 0c01 	add.w	ip, r5, #1
 8007cfc:	42a6      	cmp	r6, r4
			j++;
		} else {
			j = 0;
		}
		if (j > 0) {		// started matching something
			if (buf[i] == ':') {		// end of match
 8007cfe:	f810 400c 	ldrb.w	r4, [r0, ip]
		if (buf[i++] == match[j]) {
 8007d02:	d008      	beq.n	8007d16 <parsep2+0x32>
 8007d04:	4665      	mov	r5, ip
			j = 0;
 8007d06:	f04f 0e00 	mov.w	lr, #0
	while ((buf[i]) && (buf[i] != '}')) {
 8007d0a:	b10c      	cbz	r4, 8007d10 <parsep2+0x2c>
 8007d0c:	2c7d      	cmp	r4, #125	; 0x7d
 8007d0e:	d1f1      	bne.n	8007cf4 <parsep2+0x10>
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
				}
			}
		}
	}
	return (-1);
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007d14:	bd70      	pop	{r4, r5, r6, pc}
			if (buf[i] == ':') {		// end of match
 8007d16:	2c3a      	cmp	r4, #58	; 0x3a
			j++;
 8007d18:	f10e 0e01 	add.w	lr, lr, #1
			if (buf[i] == ':') {		// end of match
 8007d1c:	d001      	beq.n	8007d22 <parsep2+0x3e>
		if (buf[i++] == match[j]) {
 8007d1e:	4665      	mov	r5, ip
 8007d20:	e7f3      	b.n	8007d0a <parsep2+0x26>
				if (type == 1) {		// looking for a string
 8007d22:	2a01      	cmp	r2, #1
				i++;
 8007d24:	f105 0502 	add.w	r5, r5, #2
				if (type == 1) {		// looking for a string
 8007d28:	d005      	beq.n	8007d36 <parsep2+0x52>
				} else if (type == 2) { // uint32_t base 10 string
 8007d2a:	2a02      	cmp	r2, #2
 8007d2c:	d01a      	beq.n	8007d64 <parsep2+0x80>
				} else if (type == 3) { // uint32_t hex string
 8007d2e:	2a03      	cmp	r2, #3
 8007d30:	d022      	beq.n	8007d78 <parsep2+0x94>
	while ((buf[i]) && (buf[i] != '}')) {
 8007d32:	5d44      	ldrb	r4, [r0, r5]
 8007d34:	e7e9      	b.n	8007d0a <parsep2+0x26>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007d36:	5d44      	ldrb	r4, [r0, r5]
 8007d38:	1941      	adds	r1, r0, r5
 8007d3a:	b36c      	cbz	r4, 8007d98 <parsep2+0xb4>
 8007d3c:	1e5d      	subs	r5, r3, #1
					j = 0;
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4e17      	ldr	r6, [pc, #92]	; (8007da0 <parsep2+0xbc>)
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007d42:	5d30      	ldrb	r0, [r6, r4]
 8007d44:	0740      	lsls	r0, r0, #29
 8007d46:	d101      	bne.n	8007d4c <parsep2+0x68>
 8007d48:	2c2e      	cmp	r4, #46	; 0x2e
 8007d4a:	d11f      	bne.n	8007d8c <parsep2+0xa8>
						pch[j++] = buf[i++];
 8007d4c:	f805 4f01 	strb.w	r4, [r5, #1]!
 8007d50:	3201      	adds	r2, #1
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007d52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d56:	2c00      	cmp	r4, #0
 8007d58:	d1f3      	bne.n	8007d42 <parsep2+0x5e>
					pch[j] = 0;
 8007d5a:	4413      	add	r3, r2
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	2200      	movs	r2, #0
 8007d60:	701a      	strb	r2, [r3, #0]
}
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%u", val) == 1) ? 0 : -1);
 8007d64:	461a      	mov	r2, r3
 8007d66:	490f      	ldr	r1, [pc, #60]	; (8007da4 <parsep2+0xc0>)
 8007d68:	4428      	add	r0, r5
 8007d6a:	f01d fd2d 	bl	80257c8 <siscanf>
 8007d6e:	3801      	subs	r0, #1
 8007d70:	bf18      	it	ne
 8007d72:	f04f 30ff 	movne.w	r0, #4294967295
}
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
 8007d78:	461a      	mov	r2, r3
 8007d7a:	490b      	ldr	r1, [pc, #44]	; (8007da8 <parsep2+0xc4>)
 8007d7c:	4428      	add	r0, r5
 8007d7e:	f01d fd23 	bl	80257c8 <siscanf>
 8007d82:	3801      	subs	r0, #1
 8007d84:	bf18      	it	ne
 8007d86:	f04f 30ff 	movne.w	r0, #4294967295
}
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
					return ((j > 0) ? 0 : -1);
 8007d8c:	fab2 f082 	clz	r0, r2
					pch[j] = 0;
 8007d90:	4413      	add	r3, r2
					return ((j > 0) ? 0 : -1);
 8007d92:	0940      	lsrs	r0, r0, #5
 8007d94:	4240      	negs	r0, r0
 8007d96:	e7e2      	b.n	8007d5e <parsep2+0x7a>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e7df      	b.n	8007d5e <parsep2+0x7a>
 8007d9e:	bf00      	nop
 8007da0:	08045c01 	.word	0x08045c01
 8007da4:	0802c56c 	.word	0x0802c56c
 8007da8:	0802c570 	.word	0x0802c570

08007dac <returnpage>:

 p2 operands (strings):-
 */

// callback with the page
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8007dac:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile int nconv, res, res2;
	volatile int p1;
	volatile char p2[96];
	volatile char filename[32], s1[16];
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
	char host[17] = "192.168.0.248";
 8007dae:	4b80      	ldr	r3, [pc, #512]	; (8007fb0 <returnpage+0x204>)
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8007db0:	b0b7      	sub	sp, #220	; 0xdc
 8007db2:	4606      	mov	r6, r0
 8007db4:	4615      	mov	r5, r2
 8007db6:	f8ad 100e 	strh.w	r1, [sp, #14]
	char host[17] = "192.168.0.248";
 8007dba:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
	int newfirmware = 0;

//	printf("returnpage:\n");
	if (expectedapage) {
 8007dbe:	4f7d      	ldr	r7, [pc, #500]	; (8007fb4 <returnpage+0x208>)
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8007dc0:	2400      	movs	r4, #0
	char host[17] = "192.168.0.248";
 8007dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007dc4:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8007dc8:	f8ac 3000 	strh.w	r3, [ip]
		if (errorm == 0) {
 8007dcc:	683b      	ldr	r3, [r7, #0]
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8007dce:	940b      	str	r4, [sp, #44]	; 0x2c
	char host[17] = "192.168.0.248";
 8007dd0:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
 8007dd4:	f8ad 4052 	strh.w	r4, [sp, #82]	; 0x52
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8007dd8:	940c      	str	r4, [sp, #48]	; 0x30
		if (errorm == 0) {
 8007dda:	b103      	cbz	r3, 8007dde <returnpage+0x32>
 8007ddc:	b11d      	cbz	r5, 8007de6 <returnpage+0x3a>
				rebootme(0);
			}
			}
		}
	}
	expectedapage = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	603b      	str	r3, [r7, #0]
}
 8007de2:	b037      	add	sp, #220	; 0xdc
 8007de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("server returned page: %.*s\n", charcount, content);
 8007de6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8007dea:	4632      	mov	r2, r6
 8007dec:	4872      	ldr	r0, [pc, #456]	; (8007fb8 <returnpage+0x20c>)
 8007dee:	b289      	uxth	r1, r1
 8007df0:	f01d fae0 	bl	80253b4 <iprintf>
			nconv = sscanf(content, "%5u%48s%u%s", &sn, udp_target, &p1, &p2);
 8007df4:	ab1e      	add	r3, sp, #120	; 0x78
 8007df6:	4630      	mov	r0, r6
 8007df8:	aa04      	add	r2, sp, #16
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	ab08      	add	r3, sp, #32
 8007dfe:	496f      	ldr	r1, [pc, #444]	; (8007fbc <returnpage+0x210>)
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	4b6f      	ldr	r3, [pc, #444]	; (8007fc0 <returnpage+0x214>)
			s1[0] = '\0';
 8007e04:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
			nconv = sscanf(content, "%5u%48s%u%s", &sn, udp_target, &p1, &p2);
 8007e08:	f01d fcde 	bl	80257c8 <siscanf>
 8007e0c:	9005      	str	r0, [sp, #20]
			if (nconv != EOF) {
 8007e0e:	9b05      	ldr	r3, [sp, #20]
 8007e10:	3301      	adds	r3, #1
 8007e12:	f000 80ba 	beq.w	8007f8a <returnpage+0x1de>
				switch (nconv) {
 8007e16:	9b05      	ldr	r3, [sp, #20]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	f200 80c2 	bhi.w	8007fa4 <returnpage+0x1f8>
 8007e20:	e8df f003 	tbb	[pc, r3]
 8007e24:	02515a63 	.word	0x02515a63
					if (p2[0] == '{') {		// its the start of enclosed params
 8007e28:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8007e2c:	2b7b      	cmp	r3, #123	; 0x7b
 8007e2e:	d14a      	bne.n	8007ec6 <returnpage+0x11a>
						res = 0;
 8007e30:	2200      	movs	r2, #0
						res |= parsep2(&p2[1], "fw", 1, filename);
 8007e32:	ab16      	add	r3, sp, #88	; 0x58
 8007e34:	4963      	ldr	r1, [pc, #396]	; (8007fc4 <returnpage+0x218>)
 8007e36:	f10d 0079 	add.w	r0, sp, #121	; 0x79
						res = 0;
 8007e3a:	9206      	str	r2, [sp, #24]
						res2 = 0;
 8007e3c:	9207      	str	r2, [sp, #28]
						res |= parsep2(&p2[1], "fw", 1, filename);
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f7ff ff50 	bl	8007ce4 <parsep2>
 8007e44:	9b06      	ldr	r3, [sp, #24]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e46:	2202      	movs	r2, #2
 8007e48:	495f      	ldr	r1, [pc, #380]	; (8007fc8 <returnpage+0x21c>)
						res |= parsep2(&p2[1], "fw", 1, filename);
 8007e4a:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e4c:	4b5f      	ldr	r3, [pc, #380]	; (8007fcc <returnpage+0x220>)
						res |= parsep2(&p2[1], "fw", 1, filename);
 8007e4e:	9006      	str	r0, [sp, #24]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e50:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007e54:	f7ff ff46 	bl	8007ce4 <parsep2>
 8007e58:	9b06      	ldr	r3, [sp, #24]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	495c      	ldr	r1, [pc, #368]	; (8007fd0 <returnpage+0x224>)
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e5e:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e60:	ab09      	add	r3, sp, #36	; 0x24
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e62:	9006      	str	r0, [sp, #24]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e64:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007e68:	f7ff ff3c 	bl	8007ce4 <parsep2>
 8007e6c:	9b06      	ldr	r3, [sp, #24]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e6e:	2203      	movs	r2, #3
 8007e70:	4958      	ldr	r1, [pc, #352]	; (8007fd4 <returnpage+0x228>)
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e72:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e74:	ab0a      	add	r3, sp, #40	; 0x28
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e76:	9006      	str	r0, [sp, #24]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e78:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007e7c:	f7ff ff32 	bl	8007ce4 <parsep2>
 8007e80:	9b06      	ldr	r3, [sp, #24]
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e82:	2201      	movs	r2, #1
 8007e84:	4954      	ldr	r1, [pc, #336]	; (8007fd8 <returnpage+0x22c>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e86:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e88:	ab11      	add	r3, sp, #68	; 0x44
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e8a:	9006      	str	r0, [sp, #24]
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e8c:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007e90:	f7ff ff28 	bl	8007ce4 <parsep2>
 8007e94:	9b07      	ldr	r3, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007e96:	2203      	movs	r2, #3
 8007e98:	4950      	ldr	r1, [pc, #320]	; (8007fdc <returnpage+0x230>)
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e9a:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007e9c:	ab0c      	add	r3, sp, #48	; 0x30
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e9e:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007ea0:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007ea4:	f7ff ff1e 	bl	8007ce4 <parsep2>
 8007ea8:	9b07      	ldr	r3, [sp, #28]
 8007eaa:	4602      	mov	r2, r0
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8007eac:	494c      	ldr	r1, [pc, #304]	; (8007fe0 <returnpage+0x234>)
 8007eae:	f10d 0079 	add.w	r0, sp, #121	; 0x79
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007eb2:	431a      	orrs	r2, r3
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8007eb4:	ab0d      	add	r3, sp, #52	; 0x34
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007eb6:	9207      	str	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f7ff ff13 	bl	8007ce4 <parsep2>
 8007ebe:	9b07      	ldr	r3, [sp, #28]
 8007ec0:	4318      	orrs	r0, r3
 8007ec2:	9007      	str	r0, [sp, #28]
						if (!(res)) {		// a valid firmware string received
 8007ec4:	9b06      	ldr	r3, [sp, #24]
					if (p1 == 1) {		// reboot
 8007ec6:	9b08      	ldr	r3, [sp, #32]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d053      	beq.n	8007f74 <returnpage+0x1c8>
					if (p1 == 2) {		// freeze the UDP streaming
 8007ecc:	9b08      	ldr	r3, [sp, #32]
 8007ece:	2b02      	cmp	r3, #2
						globalfreeze = 1;
 8007ed0:	4b44      	ldr	r3, [pc, #272]	; (8007fe4 <returnpage+0x238>)
					if (p1 == 2) {		// freeze the UDP streaming
 8007ed2:	d049      	beq.n	8007f68 <returnpage+0x1bc>
						globalfreeze = 0;
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]
					if (strlen(udp_target) < 7) {					// bad url or ip address
 8007ed8:	4839      	ldr	r0, [pc, #228]	; (8007fc0 <returnpage+0x214>)
 8007eda:	f7f8 f9bb 	bl	8000254 <strlen>
 8007ede:	2806      	cmp	r0, #6
 8007ee0:	d959      	bls.n	8007f96 <returnpage+0x1ea>
					printf("Server -> Target UDP host: %s\n", udp_target);
 8007ee2:	4937      	ldr	r1, [pc, #220]	; (8007fc0 <returnpage+0x214>)
 8007ee4:	4840      	ldr	r0, [pc, #256]	; (8007fe8 <returnpage+0x23c>)
 8007ee6:	f01d fa65 	bl	80253b4 <iprintf>
					if (statuspkt.uid != sn) {
 8007eea:	4d40      	ldr	r5, [pc, #256]	; (8007fec <returnpage+0x240>)
 8007eec:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8007ef0:	9a04      	ldr	r2, [sp, #16]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d009      	beq.n	8007f0c <returnpage+0x160>
						statuspkt.uid = sn;
 8007ef8:	9b04      	ldr	r3, [sp, #16]
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8007efa:	483d      	ldr	r0, [pc, #244]	; (8007ff0 <returnpage+0x244>)
						statuspkt.uid = sn;
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8007f02:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
 8007f06:	b289      	uxth	r1, r1
 8007f08:	f01d fa54 	bl	80253b4 <iprintf>
			if (!res) {		// build changed?
 8007f0c:	9b06      	ldr	r3, [sp, #24]
 8007f0e:	b1e3      	cbz	r3, 8007f4a <returnpage+0x19e>
			if ((statuspkt.uid != 0xfeed) && (newbuild != BUILDNO)) {// the version advertised is different to this one running now
 8007f10:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8007f14:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	f43f af5f 	beq.w	8007dde <returnpage+0x32>
 8007f20:	4a2a      	ldr	r2, [pc, #168]	; (8007fcc <returnpage+0x220>)
 8007f22:	f242 732d 	movw	r3, #10029	; 0x272d
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	f43f af58 	beq.w	8007dde <returnpage+0x32>
			if (lptask_init_done == 0)	{
 8007f2e:	4b31      	ldr	r3, [pc, #196]	; (8007ff4 <returnpage+0x248>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	b993      	cbnz	r3, 8007f5a <returnpage+0x1ae>
				osDelay(1000);
 8007f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f38:	f00d faa2 	bl	8015480 <osDelay>
				httploader(filename, host, crc1, crc2);	/// zzz  host ip ??
 8007f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f3e:	a911      	add	r1, sp, #68	; 0x44
 8007f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f42:	a816      	add	r0, sp, #88	; 0x58
 8007f44:	f7f9 ff7c 	bl	8001e40 <httploader>
 8007f48:	e749      	b.n	8007dde <returnpage+0x32>
				printf("Firmware: this build is %d, the server build is %d\n", BUILDNO, newbuild);
 8007f4a:	4b20      	ldr	r3, [pc, #128]	; (8007fcc <returnpage+0x220>)
 8007f4c:	f242 712d 	movw	r1, #10029	; 0x272d
 8007f50:	4829      	ldr	r0, [pc, #164]	; (8007ff8 <returnpage+0x24c>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	f01d fa2e 	bl	80253b4 <iprintf>
 8007f58:	e7da      	b.n	8007f10 <returnpage+0x164>
				printf("Rebooting before loading new firmware, wait...\n");
 8007f5a:	4828      	ldr	r0, [pc, #160]	; (8007ffc <returnpage+0x250>)
 8007f5c:	f01d fac6 	bl	80254ec <puts>
				rebootme(0);
 8007f60:	2000      	movs	r0, #0
 8007f62:	f7fb f9d7 	bl	8003314 <rebootme>
 8007f66:	e73a      	b.n	8007dde <returnpage+0x32>
						globalfreeze = 1;
 8007f68:	2201      	movs	r2, #1
						printf("Server -> commands a streaming freeze\n");
 8007f6a:	4825      	ldr	r0, [pc, #148]	; (8008000 <returnpage+0x254>)
						globalfreeze = 1;
 8007f6c:	601a      	str	r2, [r3, #0]
						printf("Server -> commands a streaming freeze\n");
 8007f6e:	f01d fabd 	bl	80254ec <puts>
 8007f72:	e7b1      	b.n	8007ed8 <returnpage+0x12c>
						printf("Server -> commands a reboot...\n");
 8007f74:	4823      	ldr	r0, [pc, #140]	; (8008004 <returnpage+0x258>)
 8007f76:	f01d fab9 	bl	80254ec <puts>
						osDelay(500);
 8007f7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f7e:	f00d fa7f 	bl	8015480 <osDelay>
						rebootme(6);
 8007f82:	2006      	movs	r0, #6
 8007f84:	f7fb f9c6 	bl	8003314 <rebootme>
 8007f88:	e7a0      	b.n	8007ecc <returnpage+0x120>
				printf("returnpage: (error returned) errno=%d\n", errorm);
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	481e      	ldr	r0, [pc, #120]	; (8008008 <returnpage+0x25c>)
 8007f8e:	4d17      	ldr	r5, [pc, #92]	; (8007fec <returnpage+0x240>)
 8007f90:	f01d fa10 	bl	80253b4 <iprintf>
 8007f94:	e7ba      	b.n	8007f0c <returnpage+0x160>
						strcpy(udp_target, SERVER_DESTINATION);		// default it
 8007f96:	4d1d      	ldr	r5, [pc, #116]	; (800800c <returnpage+0x260>)
 8007f98:	4c09      	ldr	r4, [pc, #36]	; (8007fc0 <returnpage+0x214>)
 8007f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	e79e      	b.n	8007ee2 <returnpage+0x136>
					printf("Wrong number of params from Server -> %d\n", nconv);
 8007fa4:	9905      	ldr	r1, [sp, #20]
 8007fa6:	481a      	ldr	r0, [pc, #104]	; (8008010 <returnpage+0x264>)
 8007fa8:	4d10      	ldr	r5, [pc, #64]	; (8007fec <returnpage+0x240>)
 8007faa:	f01d fa03 	bl	80253b4 <iprintf>
					break;
 8007fae:	e7ad      	b.n	8007f0c <returnpage+0x160>
 8007fb0:	080295a4 	.word	0x080295a4
 8007fb4:	20003108 	.word	0x20003108
 8007fb8:	0802c574 	.word	0x0802c574
 8007fbc:	0802c590 	.word	0x0802c590
 8007fc0:	20003150 	.word	0x20003150
 8007fc4:	0802c59c 	.word	0x0802c59c
 8007fc8:	0802c5a0 	.word	0x0802c5a0
 8007fcc:	20002d44 	.word	0x20002d44
 8007fd0:	0802c5a4 	.word	0x0802c5a4
 8007fd4:	0802c5ac 	.word	0x0802c5ac
 8007fd8:	0802c5b4 	.word	0x0802c5b4
 8007fdc:	0802c5b8 	.word	0x0802c5b8
 8007fe0:	0802c5bc 	.word	0x0802c5bc
 8007fe4:	200030e4 	.word	0x200030e4
 8007fe8:	0802c608 	.word	0x0802c608
 8007fec:	20002f3c 	.word	0x20002f3c
 8007ff0:	0802c628 	.word	0x0802c628
 8007ff4:	20002d28 	.word	0x20002d28
 8007ff8:	0802c69c 	.word	0x0802c69c
 8007ffc:	0802c6d0 	.word	0x0802c6d0
 8008000:	0802c5e0 	.word	0x0802c5e0
 8008004:	0802c5c0 	.word	0x0802c5c0
 8008008:	0802c674 	.word	0x0802c674
 800800c:	0802a2e4 	.word	0x0802a2e4
 8008010:	0802c648 	.word	0x0802c648

08008014 <initialapisn>:

}

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, j;

	j = 1;
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8008018:	4c27      	ldr	r4, [pc, #156]	; (80080b8 <initialapisn+0xa4>)
void initialapisn() {
 800801a:	b084      	sub	sp, #16

	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 800801c:	4d27      	ldr	r5, [pc, #156]	; (80080bc <initialapisn+0xa8>)
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800801e:	f504 6284 	add.w	r2, r4, #1056	; 0x420
 8008022:	4927      	ldr	r1, [pc, #156]	; (80080c0 <initialapisn+0xac>)
 8008024:	4827      	ldr	r0, [pc, #156]	; (80080c4 <initialapisn+0xb0>)
 8008026:	ca1c      	ldmia	r2, {r2, r3, r4}
 8008028:	9400      	str	r4, [sp, #0]
 800802a:	f01d fbad 	bl	8025788 <siprintf>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 800802e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8008032:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8008036:	b29b      	uxth	r3, r3
 8008038:	4293      	cmp	r3, r2
 800803a:	d132      	bne.n	80080a2 <initialapisn+0x8e>
	j = 1;
 800803c:	2701      	movs	r7, #1
	{
		printf("getting S/N and UDP target using http. Try=%d\n", j);
 800803e:	f8df a094 	ldr.w	sl, [pc, #148]	; 80080d4 <initialapisn+0xc0>
	printf("getpage: %s\n", page);
 8008042:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80080c4 <initialapisn+0xb0>
	printf("Control Server is %s\n",SERVER_DESTINATION);
 8008046:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80080d8 <initialapisn+0xc4>
		printf("getting S/N and UDP target using http. Try=%d\n", j);
 800804a:	4639      	mov	r1, r7
 800804c:	4650      	mov	r0, sl
 800804e:	f01d f9b1 	bl	80253b4 <iprintf>
	printf("getpage: %s\n", page);
 8008052:	4649      	mov	r1, r9
 8008054:	481c      	ldr	r0, [pc, #112]	; (80080c8 <initialapisn+0xb4>)
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8008056:	f241 3488 	movw	r4, #5000	; 0x1388
	printf("getpage: %s\n", page);
 800805a:	f01d f9ab 	bl	80253b4 <iprintf>
	printf("Control Server is %s\n",SERVER_DESTINATION);
 800805e:	4641      	mov	r1, r8
 8008060:	481a      	ldr	r0, [pc, #104]	; (80080cc <initialapisn+0xb8>)
		getpage(stmuid);		// get sn and targ
		for (i=0; i<5000; i++) {
			if (statuspkt.uid != 0xfeed)
 8008062:	f64f 66ed 	movw	r6, #65261	; 0xfeed
	printf("Control Server is %s\n",SERVER_DESTINATION);
 8008066:	f01d f9a5 	bl	80253b4 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 800806a:	2300      	movs	r3, #0
 800806c:	4649      	mov	r1, r9
 800806e:	4640      	mov	r0, r8
 8008070:	461a      	mov	r2, r3
 8008072:	f7f9 fe77 	bl	8001d64 <hc_open>
 8008076:	9003      	str	r0, [sp, #12]
		for (i=0; i<5000; i++) {
 8008078:	e003      	b.n	8008082 <initialapisn+0x6e>
				break;
			osDelay(1);
 800807a:	f00d fa01 	bl	8015480 <osDelay>
		for (i=0; i<5000; i++) {
 800807e:	3c01      	subs	r4, #1
 8008080:	d005      	beq.n	800808e <initialapisn+0x7a>
			if (statuspkt.uid != 0xfeed)
 8008082:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
			osDelay(1);
 8008086:	2001      	movs	r0, #1
			if (statuspkt.uid != 0xfeed)
 8008088:	b29b      	uxth	r3, r3
 800808a:	42b3      	cmp	r3, r6
 800808c:	d0f5      	beq.n	800807a <initialapisn+0x66>
		}
		j++;
 800808e:	3701      	adds	r7, #1
		if (j > 5) {
 8008090:	2f05      	cmp	r7, #5
 8008092:	dc09      	bgt.n	80080a8 <initialapisn+0x94>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8008094:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8008098:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 800809c:	b29b      	uxth	r3, r3
 800809e:	4293      	cmp	r3, r2
 80080a0:	d0d3      	beq.n	800804a <initialapisn+0x36>
			printf("************* ABORTED **************\n");
			rebootme(8);
		}
	}
}
 80080a2:	b004      	add	sp, #16
 80080a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("************* ABORTED **************\n");
 80080a8:	4809      	ldr	r0, [pc, #36]	; (80080d0 <initialapisn+0xbc>)
 80080aa:	f01d fa1f 	bl	80254ec <puts>
			rebootme(8);
 80080ae:	2008      	movs	r0, #8
 80080b0:	f7fb f930 	bl	8003314 <rebootme>
 80080b4:	e7ee      	b.n	8008094 <initialapisn+0x80>
 80080b6:	bf00      	nop
 80080b8:	1ff0f000 	.word	0x1ff0f000
 80080bc:	20002f3c 	.word	0x20002f3c
 80080c0:	0802c728 	.word	0x0802c728
 80080c4:	20003110 	.word	0x20003110
 80080c8:	0802c700 	.word	0x0802c700
 80080cc:	0802c710 	.word	0x0802c710
 80080d0:	0802c770 	.word	0x0802c770
 80080d4:	0802c740 	.word	0x0802c740
 80080d8:	0802a2e4 	.word	0x0802a2e4

080080dc <requestapisn>:

void requestapisn() {
 80080dc:	b530      	push	{r4, r5, lr}
	printf("getpage: %s\n", page);
 80080de:	4d0b      	ldr	r5, [pc, #44]	; (800810c <requestapisn+0x30>)
void requestapisn() {
 80080e0:	b083      	sub	sp, #12
	printf("Control Server is %s\n",SERVER_DESTINATION);
 80080e2:	4c0b      	ldr	r4, [pc, #44]	; (8008110 <requestapisn+0x34>)
	printf("updating S/N and UDP target using http\n");
 80080e4:	480b      	ldr	r0, [pc, #44]	; (8008114 <requestapisn+0x38>)
 80080e6:	f01d fa01 	bl	80254ec <puts>
	printf("getpage: %s\n", page);
 80080ea:	4629      	mov	r1, r5
 80080ec:	480a      	ldr	r0, [pc, #40]	; (8008118 <requestapisn+0x3c>)
 80080ee:	f01d f961 	bl	80253b4 <iprintf>
	printf("Control Server is %s\n",SERVER_DESTINATION);
 80080f2:	4621      	mov	r1, r4
 80080f4:	4809      	ldr	r0, [pc, #36]	; (800811c <requestapisn+0x40>)
 80080f6:	f01d f95d 	bl	80253b4 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 80080fa:	2300      	movs	r3, #0
 80080fc:	4629      	mov	r1, r5
 80080fe:	4620      	mov	r0, r4
 8008100:	461a      	mov	r2, r3
 8008102:	f7f9 fe2f 	bl	8001d64 <hc_open>
 8008106:	9001      	str	r0, [sp, #4]
	getpage(stmuid);		// get sn and targ
}
 8008108:	b003      	add	sp, #12
 800810a:	bd30      	pop	{r4, r5, pc}
 800810c:	20003110 	.word	0x20003110
 8008110:	0802a2e4 	.word	0x0802a2e4
 8008114:	0802c798 	.word	0x0802c798
 8008118:	0802c700 	.word	0x0802c700
 800811c:	0802c710 	.word	0x0802c710

08008120 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

 ldr   sp, =_estack      /* set stack pointer */
 8008120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008158 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008124:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008126:	e003      	b.n	8008130 <LoopCopyDataInit>

08008128 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008128:	4b0c      	ldr	r3, [pc, #48]	; (800815c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800812a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800812c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800812e:	3104      	adds	r1, #4

08008130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008130:	480b      	ldr	r0, [pc, #44]	; (8008160 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008132:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008134:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008136:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008138:	d3f6      	bcc.n	8008128 <CopyDataInit>
  ldr  r2, =_sbss
 800813a:	4a0b      	ldr	r2, [pc, #44]	; (8008168 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800813c:	e002      	b.n	8008144 <LoopFillZerobss>

0800813e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800813e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008140:	f842 3b04 	str.w	r3, [r2], #4

08008144 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008144:	4b09      	ldr	r3, [pc, #36]	; (800816c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008146:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008148:	d3f9      	bcc.n	800813e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800814a:	f7ff f947 	bl	80073dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800814e:	f01c f80f 	bl	8024170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008152:	f7fb ff67 	bl	8004024 <main>
  bx  lr    
 8008156:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8008158:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800815c:	080464f4 	.word	0x080464f4
  ldr  r0, =_sdata
 8008160:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008164:	200006c4 	.word	0x200006c4
  ldr  r2, =_sbss
 8008168:	200006c8 	.word	0x200006c8
  ldr  r3, = _ebss
 800816c:	2002fd84 	.word	0x2002fd84

08008170 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008170:	e7fe      	b.n	8008170 <CAN1_RX0_IRQHandler>
 8008172:	Address 0x0000000008008172 is out of bounds.


08008174 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008174:	4a07      	ldr	r2, [pc, #28]	; (8008194 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008176:	2003      	movs	r0, #3
{
 8008178:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800817a:	6813      	ldr	r3, [r2, #0]
 800817c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008182:	f000 fc4f 	bl	8008a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008186:	2000      	movs	r0, #0
 8008188:	f7fe fff4 	bl	8007174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800818c:	f7fe f872 	bl	8006274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8008190:	2000      	movs	r0, #0
 8008192:	bd08      	pop	{r3, pc}
 8008194:	40023c00 	.word	0x40023c00

08008198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008198:	4a03      	ldr	r2, [pc, #12]	; (80081a8 <HAL_IncTick+0x10>)
 800819a:	4b04      	ldr	r3, [pc, #16]	; (80081ac <HAL_IncTick+0x14>)
 800819c:	6811      	ldr	r1, [r2, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	440b      	add	r3, r1
 80081a2:	6013      	str	r3, [r2, #0]
}
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20003190 	.word	0x20003190
 80081ac:	200002e0 	.word	0x200002e0

080081b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80081b0:	4b01      	ldr	r3, [pc, #4]	; (80081b8 <HAL_GetTick+0x8>)
 80081b2:	6818      	ldr	r0, [r3, #0]
}
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	20003190 	.word	0x20003190

080081bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80081c0:	f7ff fff6 	bl	80081b0 <HAL_GetTick>
 80081c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081c6:	1c63      	adds	r3, r4, #1
 80081c8:	d002      	beq.n	80081d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80081ca:	4b04      	ldr	r3, [pc, #16]	; (80081dc <HAL_Delay+0x20>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80081d0:	f7ff ffee 	bl	80081b0 <HAL_GetTick>
 80081d4:	1b43      	subs	r3, r0, r5
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	d3fa      	bcc.n	80081d0 <HAL_Delay+0x14>
  {
  }
}
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	200002e0 	.word	0x200002e0

080081e0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f000 8144 	beq.w	800846e <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80081e6:	6803      	ldr	r3, [r0, #0]
 80081e8:	49a7      	ldr	r1, [pc, #668]	; (8008488 <HAL_ADC_Init+0x2a8>)
 80081ea:	4aa8      	ldr	r2, [pc, #672]	; (800848c <HAL_ADC_Init+0x2ac>)
 80081ec:	428b      	cmp	r3, r1
 80081ee:	bf18      	it	ne
 80081f0:	4293      	cmpne	r3, r2
{
 80081f2:	b570      	push	{r4, r5, r6, lr}
 80081f4:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80081f6:	d003      	beq.n	8008200 <HAL_ADC_Init+0x20>
 80081f8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d177      	bne.n	80082f0 <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8008200:	6863      	ldr	r3, [r4, #4]
 8008202:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008206:	d17c      	bne.n	8008302 <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8008208:	68a3      	ldr	r3, [r4, #8]
 800820a:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800820e:	f040 8082 	bne.w	8008316 <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8008212:	6923      	ldr	r3, [r4, #16]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d84e      	bhi.n	80082b6 <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008218:	69a3      	ldr	r3, [r4, #24]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d845      	bhi.n	80082aa <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800821e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008220:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8008224:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8008228:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800822c:	bf18      	it	ne
 800822e:	2900      	cmpne	r1, #0
 8008230:	bf14      	ite	ne
 8008232:	2301      	movne	r3, #1
 8008234:	2300      	moveq	r3, #0
 8008236:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800823a:	bf0c      	ite	eq
 800823c:	2300      	moveq	r3, #0
 800823e:	f003 0301 	andne.w	r3, r3, #1
 8008242:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 8008246:	bf0c      	ite	eq
 8008248:	2300      	moveq	r3, #0
 800824a:	f003 0301 	andne.w	r3, r3, #1
 800824e:	b123      	cbz	r3, 800825a <HAL_ADC_Init+0x7a>
 8008250:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8008254:	2a01      	cmp	r2, #1
 8008256:	f200 8111 	bhi.w	800847c <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800825a:	68e3      	ldr	r3, [r4, #12]
 800825c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8008260:	d165      	bne.n	800832e <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008262:	69e3      	ldr	r3, [r4, #28]
 8008264:	3b01      	subs	r3, #1
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d85b      	bhi.n	8008322 <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800826a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800826e:	2b01      	cmp	r3, #1
 8008270:	d830      	bhi.n	80082d4 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8008272:	6963      	ldr	r3, [r4, #20]
 8008274:	2b02      	cmp	r3, #2
 8008276:	d835      	bhi.n	80082e4 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8008278:	f894 3020 	ldrb.w	r3, [r4, #32]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d823      	bhi.n	80082c8 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008280:	4b83      	ldr	r3, [pc, #524]	; (8008490 <HAL_ADC_Init+0x2b0>)
 8008282:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008284:	429a      	cmp	r2, r3
 8008286:	d004      	beq.n	8008292 <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8008288:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800828a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800828e:	f040 80e8 	bne.w	8008462 <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8008292:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8008294:	2d00      	cmp	r5, #0
 8008296:	f000 80d4 	beq.w	8008442 <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800829a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800829c:	06db      	lsls	r3, r3, #27
 800829e:	d54c      	bpl.n	800833a <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80082a0:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 80082a2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80082a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 80082a8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80082aa:	f240 1151 	movw	r1, #337	; 0x151
 80082ae:	4879      	ldr	r0, [pc, #484]	; (8008494 <HAL_ADC_Init+0x2b4>)
 80082b0:	f7fc fe80 	bl	8004fb4 <assert_failed>
 80082b4:	e7b3      	b.n	800821e <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80082b6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80082ba:	4876      	ldr	r0, [pc, #472]	; (8008494 <HAL_ADC_Init+0x2b4>)
 80082bc:	f7fc fe7a 	bl	8004fb4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80082c0:	69a3      	ldr	r3, [r4, #24]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d9ab      	bls.n	800821e <HAL_ADC_Init+0x3e>
 80082c6:	e7f0      	b.n	80082aa <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80082c8:	f240 1157 	movw	r1, #343	; 0x157
 80082cc:	4871      	ldr	r0, [pc, #452]	; (8008494 <HAL_ADC_Init+0x2b4>)
 80082ce:	f7fc fe71 	bl	8004fb4 <assert_failed>
 80082d2:	e7d5      	b.n	8008280 <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80082d4:	f240 1155 	movw	r1, #341	; 0x155
 80082d8:	486e      	ldr	r0, [pc, #440]	; (8008494 <HAL_ADC_Init+0x2b4>)
 80082da:	f7fc fe6b 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80082de:	6963      	ldr	r3, [r4, #20]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d9c9      	bls.n	8008278 <HAL_ADC_Init+0x98>
 80082e4:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80082e8:	486a      	ldr	r0, [pc, #424]	; (8008494 <HAL_ADC_Init+0x2b4>)
 80082ea:	f7fc fe63 	bl	8004fb4 <assert_failed>
 80082ee:	e7c3      	b.n	8008278 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80082f0:	f240 114d 	movw	r1, #333	; 0x14d
 80082f4:	4867      	ldr	r0, [pc, #412]	; (8008494 <HAL_ADC_Init+0x2b4>)
 80082f6:	f7fc fe5d 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80082fa:	6863      	ldr	r3, [r4, #4]
 80082fc:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008300:	d082      	beq.n	8008208 <HAL_ADC_Init+0x28>
 8008302:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8008306:	4863      	ldr	r0, [pc, #396]	; (8008494 <HAL_ADC_Init+0x2b4>)
 8008308:	f7fc fe54 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800830c:	68a3      	ldr	r3, [r4, #8]
 800830e:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8008312:	f43f af7e 	beq.w	8008212 <HAL_ADC_Init+0x32>
 8008316:	f240 114f 	movw	r1, #335	; 0x14f
 800831a:	485e      	ldr	r0, [pc, #376]	; (8008494 <HAL_ADC_Init+0x2b4>)
 800831c:	f7fc fe4a 	bl	8004fb4 <assert_failed>
 8008320:	e777      	b.n	8008212 <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008322:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8008326:	485b      	ldr	r0, [pc, #364]	; (8008494 <HAL_ADC_Init+0x2b4>)
 8008328:	f7fc fe44 	bl	8004fb4 <assert_failed>
 800832c:	e79d      	b.n	800826a <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800832e:	f240 1153 	movw	r1, #339	; 0x153
 8008332:	4858      	ldr	r0, [pc, #352]	; (8008494 <HAL_ADC_Init+0x2b4>)
 8008334:	f7fc fe3e 	bl	8004fb4 <assert_failed>
 8008338:	e793      	b.n	8008262 <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 800833a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800833c:	4b56      	ldr	r3, [pc, #344]	; (8008498 <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800833e:	4a57      	ldr	r2, [pc, #348]	; (800849c <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 8008340:	400b      	ands	r3, r1
 8008342:	f043 0302 	orr.w	r3, r3, #2
 8008346:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008348:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800834a:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800834c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8008350:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8008352:	6851      	ldr	r1, [r2, #4]
 8008354:	6860      	ldr	r0, [r4, #4]
 8008356:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008358:	484d      	ldr	r0, [pc, #308]	; (8008490 <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800835a:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800835c:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800835e:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008360:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008364:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800836c:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800836e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008376:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008378:	6859      	ldr	r1, [r3, #4]
 800837a:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800837c:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800837e:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008380:	6899      	ldr	r1, [r3, #8]
 8008382:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8008386:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008388:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800838a:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800838c:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800838e:	ea42 0205 	orr.w	r2, r2, r5
 8008392:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008394:	d05c      	beq.n	8008450 <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008396:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008398:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800839a:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 800839e:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	4311      	orrs	r1, r2
 80083a4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80083a6:	6899      	ldr	r1, [r3, #8]
 80083a8:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80083ac:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	432a      	orrs	r2, r5
 80083b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80083b4:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80083b6:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80083b8:	f021 0102 	bic.w	r1, r1, #2
 80083bc:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80083c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80083c6:	f894 2020 	ldrb.w	r2, [r4, #32]
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	d051      	beq.n	8008472 <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80083ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80083d0:	3a01      	subs	r2, #1
 80083d2:	2a07      	cmp	r2, #7
 80083d4:	d864      	bhi.n	80084a0 <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80083d6:	6859      	ldr	r1, [r3, #4]
 80083d8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80083dc:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80083de:	6859      	ldr	r1, [r3, #4]
 80083e0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80083e4:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80083e6:	6859      	ldr	r1, [r3, #4]
 80083e8:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80083ec:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80083ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80083f0:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80083f2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80083f4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80083f8:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80083fa:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80083fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80083fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008400:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008404:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008406:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008408:	6899      	ldr	r1, [r3, #8]
 800840a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800840e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008410:	6899      	ldr	r1, [r3, #8]
 8008412:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8008416:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 800841a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800841c:	6899      	ldr	r1, [r3, #8]
 800841e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008422:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800842a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800842c:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800842e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008430:	f023 0303 	bic.w	r3, r3, #3
 8008434:	f043 0301 	orr.w	r3, r3, #1
 8008438:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800843a:	2300      	movs	r3, #0
 800843c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008440:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8008442:	4620      	mov	r0, r4
 8008444:	f7fd ff4e 	bl	80062e4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8008448:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800844a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 800844e:	e724      	b.n	800829a <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008456:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800845e:	609a      	str	r2, [r3, #8]
 8008460:	e7a8      	b.n	80083b4 <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8008462:	f240 115b 	movw	r1, #347	; 0x15b
 8008466:	480b      	ldr	r0, [pc, #44]	; (8008494 <HAL_ADC_Init+0x2b4>)
 8008468:	f7fc fda4 	bl	8004fb4 <assert_failed>
 800846c:	e711      	b.n	8008292 <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 800846e:	2001      	movs	r0, #1
}
 8008470:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008478:	605a      	str	r2, [r3, #4]
 800847a:	e7b8      	b.n	80083ee <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800847c:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8008480:	4804      	ldr	r0, [pc, #16]	; (8008494 <HAL_ADC_Init+0x2b4>)
 8008482:	f7fc fd97 	bl	8004fb4 <assert_failed>
 8008486:	e6e8      	b.n	800825a <HAL_ADC_Init+0x7a>
 8008488:	40012000 	.word	0x40012000
 800848c:	40012100 	.word	0x40012100
 8008490:	0f000001 	.word	0x0f000001
 8008494:	0802c7c0 	.word	0x0802c7c0
 8008498:	ffffeefd 	.word	0xffffeefd
 800849c:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80084a0:	f240 71ac 	movw	r1, #1964	; 0x7ac
 80084a4:	4803      	ldr	r0, [pc, #12]	; (80084b4 <HAL_ADC_Init+0x2d4>)
 80084a6:	f7fc fd85 	bl	8004fb4 <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80084aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80084ac:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80084ae:	3a01      	subs	r2, #1
 80084b0:	e791      	b.n	80083d6 <HAL_ADC_Init+0x1f6>
 80084b2:	bf00      	nop
 80084b4:	0802c7c0 	.word	0x0802c7c0

080084b8 <HAL_ADC_Start>:
{
 80084b8:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 80084ba:	2300      	movs	r3, #0
{
 80084bc:	b082      	sub	sp, #8
 80084be:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80084c0:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80084c2:	6983      	ldr	r3, [r0, #24]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d904      	bls.n	80084d2 <HAL_ADC_Start+0x1a>
 80084c8:	f240 21df 	movw	r1, #735	; 0x2df
 80084cc:	4848      	ldr	r0, [pc, #288]	; (80085f0 <HAL_ADC_Start+0x138>)
 80084ce:	f7fc fd71 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80084d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084d4:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80084d8:	d174      	bne.n	80085c4 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 80084da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d079      	beq.n	80085d6 <HAL_ADC_Start+0x11e>
 80084e2:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80084e4:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 80084e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80084ea:	6893      	ldr	r3, [r2, #8]
 80084ec:	07d8      	lsls	r0, r3, #31
 80084ee:	d414      	bmi.n	800851a <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80084f0:	4b40      	ldr	r3, [pc, #256]	; (80085f4 <HAL_ADC_Start+0x13c>)
 80084f2:	4841      	ldr	r0, [pc, #260]	; (80085f8 <HAL_ADC_Start+0x140>)
 80084f4:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80084f6:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80084f8:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80084fc:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008500:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8008502:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008504:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008508:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	b12b      	cbz	r3, 800851a <HAL_ADC_Start+0x62>
      counter--;
 800850e:	9b01      	ldr	r3, [sp, #4]
 8008510:	3b01      	subs	r3, #1
 8008512:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8008514:	9b01      	ldr	r3, [sp, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f9      	bne.n	800850e <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800851a:	6890      	ldr	r0, [r2, #8]
 800851c:	f010 0001 	ands.w	r0, r0, #1
 8008520:	d02c      	beq.n	800857c <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 8008522:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008524:	4b35      	ldr	r3, [pc, #212]	; (80085fc <HAL_ADC_Start+0x144>)
 8008526:	400b      	ands	r3, r1
 8008528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800852c:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800852e:	6853      	ldr	r3, [r2, #4]
 8008530:	0559      	lsls	r1, r3, #21
 8008532:	d505      	bpl.n	8008540 <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008536:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800853a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800853e:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008542:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8008546:	d02f      	beq.n	80085a8 <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008548:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800854a:	f023 0306 	bic.w	r3, r3, #6
 800854e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008550:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8008554:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008556:	4b2a      	ldr	r3, [pc, #168]	; (8008600 <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 8008558:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800855c:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800855e:	6858      	ldr	r0, [r3, #4]
 8008560:	f010 001f 	ands.w	r0, r0, #31
 8008564:	d114      	bne.n	8008590 <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008566:	6893      	ldr	r3, [r2, #8]
 8008568:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800856c:	d10e      	bne.n	800858c <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800856e:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 8008570:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008572:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8008576:	6091      	str	r1, [r2, #8]
}
 8008578:	b002      	add	sp, #8
 800857a:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800857c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800857e:	f043 0310 	orr.w	r3, r3, #16
 8008582:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008584:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008586:	f043 0301 	orr.w	r3, r3, #1
 800858a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800858c:	b002      	add	sp, #8
 800858e:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008590:	481c      	ldr	r0, [pc, #112]	; (8008604 <HAL_ADC_Start+0x14c>)
 8008592:	4282      	cmp	r2, r0
 8008594:	d00a      	beq.n	80085ac <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008596:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008598:	06db      	lsls	r3, r3, #27
 800859a:	d402      	bmi.n	80085a2 <HAL_ADC_Start+0xea>
 800859c:	4c1a      	ldr	r4, [pc, #104]	; (8008608 <HAL_ADC_Start+0x150>)
 800859e:	42a2      	cmp	r2, r4
 80085a0:	d01c      	beq.n	80085dc <HAL_ADC_Start+0x124>
  return HAL_OK;
 80085a2:	2000      	movs	r0, #0
}
 80085a4:	b002      	add	sp, #8
 80085a6:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80085a8:	6463      	str	r3, [r4, #68]	; 0x44
 80085aa:	e7d1      	b.n	8008550 <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80085ac:	6893      	ldr	r3, [r2, #8]
 80085ae:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80085b2:	d103      	bne.n	80085bc <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80085b4:	6893      	ldr	r3, [r2, #8]
 80085b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085ba:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80085bc:	4b10      	ldr	r3, [pc, #64]	; (8008600 <HAL_ADC_Start+0x148>)
  return HAL_OK;
 80085be:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80085c0:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80085c2:	e7e3      	b.n	800858c <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80085c4:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80085c8:	4809      	ldr	r0, [pc, #36]	; (80085f0 <HAL_ADC_Start+0x138>)
 80085ca:	f7fc fcf3 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hadc);
 80085ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d185      	bne.n	80084e2 <HAL_ADC_Start+0x2a>
 80085d6:	2002      	movs	r0, #2
}
 80085d8:	b002      	add	sp, #8
 80085da:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80085dc:	68a0      	ldr	r0, [r4, #8]
 80085de:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80085e2:	d1de      	bne.n	80085a2 <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80085e4:	68a3      	ldr	r3, [r4, #8]
 80085e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085ea:	60a3      	str	r3, [r4, #8]
 80085ec:	e7ce      	b.n	800858c <HAL_ADC_Start+0xd4>
 80085ee:	bf00      	nop
 80085f0:	0802c7c0 	.word	0x0802c7c0
 80085f4:	20000284 	.word	0x20000284
 80085f8:	431bde83 	.word	0x431bde83
 80085fc:	fffff8fe 	.word	0xfffff8fe
 8008600:	40012300 	.word	0x40012300
 8008604:	40012000 	.word	0x40012000
 8008608:	40012200 	.word	0x40012200

0800860c <HAL_ADC_ConvCpltCallback>:
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <HAL_ADC_LevelOutOfWindowCallback>:
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop

08008614 <HAL_ADC_ErrorCallback>:
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop

08008618 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008618:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 800861a:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800861c:	2a01      	cmp	r2, #1
{
 800861e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8008620:	681d      	ldr	r5, [r3, #0]
{
 8008622:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008624:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008626:	d904      	bls.n	8008632 <HAL_ADC_IRQHandler+0x1a>
 8008628:	f240 41c1 	movw	r1, #1217	; 0x4c1
 800862c:	4851      	ldr	r0, [pc, #324]	; (8008774 <HAL_ADC_IRQHandler+0x15c>)
 800862e:	f7fc fcc1 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008632:	69e3      	ldr	r3, [r4, #28]
 8008634:	3b01      	subs	r3, #1
 8008636:	2b0f      	cmp	r3, #15
 8008638:	f200 8086 	bhi.w	8008748 <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800863c:	6963      	ldr	r3, [r4, #20]
 800863e:	2b02      	cmp	r3, #2
 8008640:	d87c      	bhi.n	800873c <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 8008642:	07ab      	lsls	r3, r5, #30
 8008644:	d52c      	bpl.n	80086a0 <HAL_ADC_IRQHandler+0x88>
 8008646:	06b0      	lsls	r0, r6, #26
 8008648:	d52a      	bpl.n	80086a0 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800864a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800864c:	06d9      	lsls	r1, r3, #27
 800864e:	d403      	bmi.n	8008658 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008656:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008660:	d117      	bne.n	8008692 <HAL_ADC_IRQHandler+0x7a>
 8008662:	69a2      	ldr	r2, [r4, #24]
 8008664:	b9aa      	cbnz	r2, 8008692 <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008668:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800866c:	d002      	beq.n	8008674 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800866e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008670:	0552      	lsls	r2, r2, #21
 8008672:	d40e      	bmi.n	8008692 <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	f022 0220 	bic.w	r2, r2, #32
 800867a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800867c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800867e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008682:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008686:	04d8      	lsls	r0, r3, #19
 8008688:	d403      	bmi.n	8008692 <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800868a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800868c:	f043 0301 	orr.w	r3, r3, #1
 8008690:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8008692:	4620      	mov	r0, r4
 8008694:	f7ff ffba 	bl	800860c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	f06f 0212 	mvn.w	r2, #18
 800869e:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80086a0:	0769      	lsls	r1, r5, #29
 80086a2:	d530      	bpl.n	8008706 <HAL_ADC_IRQHandler+0xee>
 80086a4:	0632      	lsls	r2, r6, #24
 80086a6:	d52e      	bpl.n	8008706 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80086a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086aa:	06db      	lsls	r3, r3, #27
 80086ac:	d403      	bmi.n	80086b6 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80086ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80086b4:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80086be:	d11b      	bne.n	80086f8 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80086c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80086c2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80086c6:	d151      	bne.n	800876c <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80086c8:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80086ca:	0551      	lsls	r1, r2, #21
 80086cc:	d414      	bmi.n	80086f8 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80086ce:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80086d0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80086d4:	d110      	bne.n	80086f8 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80086d6:	69a2      	ldr	r2, [r4, #24]
 80086d8:	b972      	cbnz	r2, 80086f8 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086e0:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80086e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e8:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80086ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086ec:	05da      	lsls	r2, r3, #23
 80086ee:	d403      	bmi.n	80086f8 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80086f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086f2:	f043 0301 	orr.w	r3, r3, #1
 80086f6:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 f92f 	bl	800895c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	f06f 020c 	mvn.w	r2, #12
 8008704:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008706:	0673      	lsls	r3, r6, #25
 8008708:	d505      	bpl.n	8008716 <HAL_ADC_IRQHandler+0xfe>
 800870a:	07e8      	lsls	r0, r5, #31
 800870c:	d503      	bpl.n	8008716 <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d41e      	bmi.n	8008754 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 8008716:	06aa      	lsls	r2, r5, #26
 8008718:	d501      	bpl.n	800871e <HAL_ADC_IRQHandler+0x106>
 800871a:	0173      	lsls	r3, r6, #5
 800871c:	d400      	bmi.n	8008720 <HAL_ADC_IRQHandler+0x108>
}
 800871e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008720:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008722:	f06f 0520 	mvn.w	r5, #32
 8008726:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 8008728:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800872a:	f043 0302 	orr.w	r3, r3, #2
 800872e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008730:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8008732:	f7ff ff6f 	bl	8008614 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	601d      	str	r5, [r3, #0]
}
 800873a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800873c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8008740:	480c      	ldr	r0, [pc, #48]	; (8008774 <HAL_ADC_IRQHandler+0x15c>)
 8008742:	f7fc fc37 	bl	8004fb4 <assert_failed>
 8008746:	e77c      	b.n	8008642 <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008748:	f240 41c2 	movw	r1, #1218	; 0x4c2
 800874c:	4809      	ldr	r0, [pc, #36]	; (8008774 <HAL_ADC_IRQHandler+0x15c>)
 800874e:	f7fc fc31 	bl	8004fb4 <assert_failed>
 8008752:	e773      	b.n	800863c <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008754:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008756:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800875c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800875e:	f7ff ff57 	bl	8008610 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	f06f 0201 	mvn.w	r2, #1
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	e7d4      	b.n	8008716 <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800876c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800876e:	0550      	lsls	r0, r2, #21
 8008770:	d4c2      	bmi.n	80086f8 <HAL_ADC_IRQHandler+0xe0>
 8008772:	e7a9      	b.n	80086c8 <HAL_ADC_IRQHandler+0xb0>
 8008774:	0802c7c0 	.word	0x0802c7c0

08008778 <HAL_ADC_ConfigChannel>:
{
 8008778:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800877a:	2300      	movs	r3, #0
{
 800877c:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800877e:	4a71      	ldr	r2, [pc, #452]	; (8008944 <HAL_ADC_ConfigChannel+0x1cc>)
{
 8008780:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 8008782:	9301      	str	r3, [sp, #4]
{
 8008784:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8008786:	680b      	ldr	r3, [r1, #0]
 8008788:	4293      	cmp	r3, r2
 800878a:	bf18      	it	ne
 800878c:	2b12      	cmpne	r3, #18
 800878e:	d902      	bls.n	8008796 <HAL_ADC_ConfigChannel+0x1e>
 8008790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008794:	d142      	bne.n	800881c <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008796:	6863      	ldr	r3, [r4, #4]
 8008798:	3b01      	subs	r3, #1
 800879a:	2b0f      	cmp	r3, #15
 800879c:	d847      	bhi.n	800882e <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800879e:	68a3      	ldr	r3, [r4, #8]
 80087a0:	2b07      	cmp	r3, #7
 80087a2:	d84c      	bhi.n	800883e <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 80087a4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d051      	beq.n	8008850 <HAL_ADC_ConfigChannel+0xd8>
 80087ac:	2301      	movs	r3, #1
 80087ae:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80087b2:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80087b4:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80087b6:	2809      	cmp	r0, #9
 80087b8:	d94d      	bls.n	8008856 <HAL_ADC_ConfigChannel+0xde>
 80087ba:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80087be:	d04a      	beq.n	8008856 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80087c0:	b281      	uxth	r1, r0
 80087c2:	f04f 0c07 	mov.w	ip, #7
 80087c6:	68de      	ldr	r6, [r3, #12]
 80087c8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80087cc:	4f5d      	ldr	r7, [pc, #372]	; (8008944 <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80087ce:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80087d0:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80087d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80087d6:	ea26 060c 	bic.w	r6, r6, ip
 80087da:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80087dc:	f000 8083 	beq.w	80088e6 <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80087e0:	68a6      	ldr	r6, [r4, #8]
 80087e2:	4096      	lsls	r6, r2
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	4316      	orrs	r6, r2
 80087e8:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 80087ea:	6862      	ldr	r2, [r4, #4]
 80087ec:	2a06      	cmp	r2, #6
 80087ee:	d846      	bhi.n	800887e <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80087f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80087f4:	241f      	movs	r4, #31
 80087f6:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80087f8:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80087fa:	4094      	lsls	r4, r2
 80087fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087fe:	ea22 0204 	bic.w	r2, r2, r4
 8008802:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008806:	4311      	orrs	r1, r2
 8008808:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800880a:	4a4f      	ldr	r2, [pc, #316]	; (8008948 <HAL_ADC_ConfigChannel+0x1d0>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d048      	beq.n	80088a2 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 8008810:	2300      	movs	r3, #0
  return HAL_OK;
 8008812:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8008814:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8008818:	b003      	add	sp, #12
 800881a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800881c:	f240 618b 	movw	r1, #1675	; 0x68b
 8008820:	484a      	ldr	r0, [pc, #296]	; (800894c <HAL_ADC_ConfigChannel+0x1d4>)
 8008822:	f7fc fbc7 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008826:	6863      	ldr	r3, [r4, #4]
 8008828:	3b01      	subs	r3, #1
 800882a:	2b0f      	cmp	r3, #15
 800882c:	d9b7      	bls.n	800879e <HAL_ADC_ConfigChannel+0x26>
 800882e:	f240 618c 	movw	r1, #1676	; 0x68c
 8008832:	4846      	ldr	r0, [pc, #280]	; (800894c <HAL_ADC_ConfigChannel+0x1d4>)
 8008834:	f7fc fbbe 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8008838:	68a3      	ldr	r3, [r4, #8]
 800883a:	2b07      	cmp	r3, #7
 800883c:	d9b2      	bls.n	80087a4 <HAL_ADC_ConfigChannel+0x2c>
 800883e:	f240 618d 	movw	r1, #1677	; 0x68d
 8008842:	4842      	ldr	r0, [pc, #264]	; (800894c <HAL_ADC_ConfigChannel+0x1d4>)
 8008844:	f7fc fbb6 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hadc);
 8008848:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800884c:	2b01      	cmp	r3, #1
 800884e:	d1ad      	bne.n	80087ac <HAL_ADC_ConfigChannel+0x34>
 8008850:	2002      	movs	r0, #2
}
 8008852:	b003      	add	sp, #12
 8008854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008856:	b281      	uxth	r1, r0
 8008858:	f04f 0c07 	mov.w	ip, #7
 800885c:	691e      	ldr	r6, [r3, #16]
 800885e:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008862:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008864:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008868:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800886c:	ea26 060c 	bic.w	r6, r6, ip
 8008870:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008872:	691e      	ldr	r6, [r3, #16]
 8008874:	4332      	orrs	r2, r6
 8008876:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 8008878:	6862      	ldr	r2, [r4, #4]
 800887a:	2a06      	cmp	r2, #6
 800887c:	d9b8      	bls.n	80087f0 <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 800887e:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008880:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 8008884:	d81c      	bhi.n	80088c0 <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008886:	3a23      	subs	r2, #35	; 0x23
 8008888:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800888a:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800888c:	4094      	lsls	r4, r2
 800888e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008890:	ea22 0204 	bic.w	r2, r2, r4
 8008894:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008898:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800889a:	4a2b      	ldr	r2, [pc, #172]	; (8008948 <HAL_ADC_ConfigChannel+0x1d0>)
 800889c:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800889e:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80088a0:	d1b6      	bne.n	8008810 <HAL_ADC_ConfigChannel+0x98>
 80088a2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80088a6:	d017      	beq.n	80088d8 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80088a8:	2812      	cmp	r0, #18
 80088aa:	d123      	bne.n	80088f4 <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80088ac:	4b28      	ldr	r3, [pc, #160]	; (8008950 <HAL_ADC_ConfigChannel+0x1d8>)
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80088b4:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80088bc:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80088be:	e7a7      	b.n	8008810 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80088c0:	3a41      	subs	r2, #65	; 0x41
 80088c2:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80088c4:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80088c6:	4094      	lsls	r4, r2
 80088c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ca:	ea22 0204 	bic.w	r2, r2, r4
 80088ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80088d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d2:	4311      	orrs	r1, r2
 80088d4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80088d6:	e798      	b.n	800880a <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80088d8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80088dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80088e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80088e4:	e794      	b.n	8008810 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80088e6:	68a1      	ldr	r1, [r4, #8]
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80088ee:	2112      	movs	r1, #18
 80088f0:	60da      	str	r2, [r3, #12]
 80088f2:	e77a      	b.n	80087ea <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80088f4:	4b13      	ldr	r3, [pc, #76]	; (8008944 <HAL_ADC_ConfigChannel+0x1cc>)
 80088f6:	4298      	cmp	r0, r3
 80088f8:	d001      	beq.n	80088fe <HAL_ADC_ConfigChannel+0x186>
 80088fa:	2811      	cmp	r0, #17
 80088fc:	d188      	bne.n	8008810 <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008900:	4910      	ldr	r1, [pc, #64]	; (8008944 <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8008902:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008904:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8008906:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800890a:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008912:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008914:	f47f af7c 	bne.w	8008810 <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008918:	4b0e      	ldr	r3, [pc, #56]	; (8008954 <HAL_ADC_ConfigChannel+0x1dc>)
 800891a:	4a0f      	ldr	r2, [pc, #60]	; (8008958 <HAL_ADC_ConfigChannel+0x1e0>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	fba2 2303 	umull	r2, r3, r2, r3
 8008922:	0c9b      	lsrs	r3, r3, #18
 8008924:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800892c:	9b01      	ldr	r3, [sp, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f43f af6e 	beq.w	8008810 <HAL_ADC_ConfigChannel+0x98>
        counter--;
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	3b01      	subs	r3, #1
 8008938:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800893a:	9b01      	ldr	r3, [sp, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1f9      	bne.n	8008934 <HAL_ADC_ConfigChannel+0x1bc>
 8008940:	e766      	b.n	8008810 <HAL_ADC_ConfigChannel+0x98>
 8008942:	bf00      	nop
 8008944:	10000012 	.word	0x10000012
 8008948:	40012000 	.word	0x40012000
 800894c:	0802c7c0 	.word	0x0802c7c0
 8008950:	40012300 	.word	0x40012300
 8008954:	20000284 	.word	0x20000284
 8008958:	431bde83 	.word	0x431bde83

0800895c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop

08008960 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8008960:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8008962:	680b      	ldr	r3, [r1, #0]
{
 8008964:	460c      	mov	r4, r1
 8008966:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8008968:	2b19      	cmp	r3, #25
 800896a:	d93e      	bls.n	80089ea <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 800896c:	f240 31af 	movw	r1, #943	; 0x3af
 8008970:	4829      	ldr	r0, [pc, #164]	; (8008a18 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8008972:	f7fc fb1f 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8008976:	6863      	ldr	r3, [r4, #4]
 8008978:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 800897c:	d13e      	bne.n	80089fc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008988:	bf18      	it	ne
 800898a:	2b00      	cmpne	r3, #0
 800898c:	bf14      	ite	ne
 800898e:	2201      	movne	r2, #1
 8008990:	2200      	moveq	r2, #0
 8008992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008996:	bf0c      	ite	eq
 8008998:	2200      	moveq	r2, #0
 800899a:	f002 0201 	andne.w	r2, r2, #1
 800899e:	b112      	cbz	r2, 80089a6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80089a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089a4:	d132      	bne.n	8008a0c <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80089a6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d02c      	beq.n	8008a08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 80089ae:	4b1b      	ldr	r3, [pc, #108]	; (8008a1c <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	f022 021f 	bic.w	r2, r2, #31
 80089b6:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	6821      	ldr	r1, [r4, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80089c6:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	6861      	ldr	r1, [r4, #4]
 80089cc:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80089ce:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 80089d0:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80089d8:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 80089da:	68a0      	ldr	r0, [r4, #8]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 80089e0:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 80089e2:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 80089e4:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 80089e8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 80089ea:	4a0d      	ldr	r2, [pc, #52]	; (8008a20 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	07db      	lsls	r3, r3, #31
 80089f2:	d5bb      	bpl.n	800896c <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 80089f4:	6863      	ldr	r3, [r4, #4]
 80089f6:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 80089fa:	d0c0      	beq.n	800897e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80089fc:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8008a00:	4805      	ldr	r0, [pc, #20]	; (8008a18 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8008a02:	f7fc fad7 	bl	8004fb4 <assert_failed>
 8008a06:	e7ba      	b.n	800897e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8008a08:	2002      	movs	r0, #2
}
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8008a0c:	f240 31b1 	movw	r1, #945	; 0x3b1
 8008a10:	4801      	ldr	r0, [pc, #4]	; (8008a18 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8008a12:	f7fc facf 	bl	8004fb4 <assert_failed>
 8008a16:	e7c6      	b.n	80089a6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008a18:	0802c7f8 	.word	0x0802c7f8
 8008a1c:	40012300 	.word	0x40012300
 8008a20:	02e602e7 	.word	0x02e602e7

08008a24 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008a24:	1ec3      	subs	r3, r0, #3
 8008a26:	2b04      	cmp	r3, #4
{
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008a2c:	d80c      	bhi.n	8008a48 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a2e:	4909      	ldr	r1, [pc, #36]	; (8008a54 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a30:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a32:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8008a36:	4b08      	ldr	r3, [pc, #32]	; (8008a58 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a38:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a3a:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a3e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a40:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 8008a42:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8008a44:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008a46:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008a48:	2191      	movs	r1, #145	; 0x91
 8008a4a:	4804      	ldr	r0, [pc, #16]	; (8008a5c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8008a4c:	f7fc fab2 	bl	8004fb4 <assert_failed>
 8008a50:	e7ed      	b.n	8008a2e <HAL_NVIC_SetPriorityGrouping+0xa>
 8008a52:	bf00      	nop
 8008a54:	e000ed00 	.word	0xe000ed00
 8008a58:	05fa0000 	.word	0x05fa0000
 8008a5c:	0802c834 	.word	0x0802c834

08008a60 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008a60:	2a0f      	cmp	r2, #15
{ 
 8008a62:	b570      	push	{r4, r5, r6, lr}
 8008a64:	4616      	mov	r6, r2
 8008a66:	4605      	mov	r5, r0
 8008a68:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008a6a:	d836      	bhi.n	8008ada <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008a6c:	2c0f      	cmp	r4, #15
 8008a6e:	d82f      	bhi.n	8008ad0 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a70:	4b1c      	ldr	r3, [pc, #112]	; (8008ae4 <HAL_NVIC_SetPriority+0x84>)
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a78:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a7c:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a7e:	2804      	cmp	r0, #4
 8008a80:	bf28      	it	cs
 8008a82:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a84:	2a06      	cmp	r2, #6
 8008a86:	d918      	bls.n	8008aba <HAL_NVIC_SetPriority+0x5a>
 8008a88:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8e:	409a      	lsls	r2, r3
 8008a90:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a94:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008a98:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a9a:	fa01 f100 	lsl.w	r1, r1, r0
 8008a9e:	ea24 0401 	bic.w	r4, r4, r1
 8008aa2:	fa04 f403 	lsl.w	r4, r4, r3
 8008aa6:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8008aaa:	db09      	blt.n	8008ac0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008aac:	0124      	lsls	r4, r4, #4
 8008aae:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <HAL_NVIC_SetPriority+0x88>)
 8008ab0:	b2e4      	uxtb	r4, r4
 8008ab2:	442b      	add	r3, r5
 8008ab4:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
 8008aba:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008abc:	4633      	mov	r3, r6
 8008abe:	e7e9      	b.n	8008a94 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ac0:	f005 050f 	and.w	r5, r5, #15
 8008ac4:	0124      	lsls	r4, r4, #4
 8008ac6:	4b09      	ldr	r3, [pc, #36]	; (8008aec <HAL_NVIC_SetPriority+0x8c>)
 8008ac8:	b2e4      	uxtb	r4, r4
 8008aca:	442b      	add	r3, r5
 8008acc:	761c      	strb	r4, [r3, #24]
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008ad0:	21aa      	movs	r1, #170	; 0xaa
 8008ad2:	4807      	ldr	r0, [pc, #28]	; (8008af0 <HAL_NVIC_SetPriority+0x90>)
 8008ad4:	f7fc fa6e 	bl	8004fb4 <assert_failed>
 8008ad8:	e7ca      	b.n	8008a70 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008ada:	21a9      	movs	r1, #169	; 0xa9
 8008adc:	4804      	ldr	r0, [pc, #16]	; (8008af0 <HAL_NVIC_SetPriority+0x90>)
 8008ade:	f7fc fa69 	bl	8004fb4 <assert_failed>
 8008ae2:	e7c3      	b.n	8008a6c <HAL_NVIC_SetPriority+0xc>
 8008ae4:	e000ed00 	.word	0xe000ed00
 8008ae8:	e000e100 	.word	0xe000e100
 8008aec:	e000ecfc 	.word	0xe000ecfc
 8008af0:	0802c834 	.word	0x0802c834

08008af4 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008af4:	2800      	cmp	r0, #0
 8008af6:	db08      	blt.n	8008b0a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008af8:	f000 011f 	and.w	r1, r0, #31
 8008afc:	2301      	movs	r3, #1
 8008afe:	0940      	lsrs	r0, r0, #5
 8008b00:	4a04      	ldr	r2, [pc, #16]	; (8008b14 <HAL_NVIC_EnableIRQ+0x20>)
 8008b02:	408b      	lsls	r3, r1
 8008b04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008b08:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008b0a:	21bd      	movs	r1, #189	; 0xbd
 8008b0c:	4802      	ldr	r0, [pc, #8]	; (8008b18 <HAL_NVIC_EnableIRQ+0x24>)
 8008b0e:	f7fc ba51 	b.w	8004fb4 <assert_failed>
 8008b12:	bf00      	nop
 8008b14:	e000e100 	.word	0xe000e100
 8008b18:	0802c834 	.word	0x0802c834

08008b1c <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	db0e      	blt.n	8008b3e <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b20:	0943      	lsrs	r3, r0, #5
 8008b22:	2201      	movs	r2, #1
 8008b24:	f000 001f 	and.w	r0, r0, #31
 8008b28:	4907      	ldr	r1, [pc, #28]	; (8008b48 <HAL_NVIC_DisableIRQ+0x2c>)
 8008b2a:	3320      	adds	r3, #32
 8008b2c:	fa02 f000 	lsl.w	r0, r2, r0
 8008b30:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008b34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b38:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008b3c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008b3e:	21cd      	movs	r1, #205	; 0xcd
 8008b40:	4802      	ldr	r0, [pc, #8]	; (8008b4c <HAL_NVIC_DisableIRQ+0x30>)
 8008b42:	f7fc ba37 	b.w	8004fb4 <assert_failed>
 8008b46:	bf00      	nop
 8008b48:	e000e100 	.word	0xe000e100
 8008b4c:	0802c834 	.word	0x0802c834

08008b50 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d075      	beq.n	8008c40 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8008b54:	4b3b      	ldr	r3, [pc, #236]	; (8008c44 <HAL_CRC_Init+0xf4>)
 8008b56:	6802      	ldr	r2, [r0, #0]
 8008b58:	429a      	cmp	r2, r3
{
 8008b5a:	b510      	push	{r4, lr}
 8008b5c:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8008b5e:	d003      	beq.n	8008b68 <HAL_CRC_Init+0x18>
 8008b60:	2170      	movs	r1, #112	; 0x70
 8008b62:	4839      	ldr	r0, [pc, #228]	; (8008c48 <HAL_CRC_Init+0xf8>)
 8008b64:	f7fc fa26 	bl	8004fb4 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008b68:	7f63      	ldrb	r3, [r4, #29]
 8008b6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d055      	beq.n	8008c1e <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008b72:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008b74:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008b76:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008b78:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008b7a:	d838      	bhi.n	8008bee <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d13d      	bne.n	8008bfc <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	4a32      	ldr	r2, [pc, #200]	; (8008c4c <HAL_CRC_Init+0xfc>)
 8008b84:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	f022 0218 	bic.w	r2, r2, #24
 8008b8c:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8008b8e:	7963      	ldrb	r3, [r4, #5]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d83c      	bhi.n	8008c0e <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008b94:	b1e3      	cbz	r3, 8008bd0 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008b96:	6922      	ldr	r2, [r4, #16]
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8008b9c:	6962      	ldr	r2, [r4, #20]
 8008b9e:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8008ba2:	d11d      	bne.n	8008be0 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008ba4:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008ba6:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008ba8:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8008bac:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008bae:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008bb2:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008bb4:	d13d      	bne.n	8008c32 <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008bb6:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008bb8:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008bbe:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008bc0:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008bc2:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008bc4:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008bc6:	d82f      	bhi.n	8008c28 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008bc8:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8008bca:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8008bcc:	7763      	strb	r3, [r4, #29]
}
 8008bce:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8008bd8:	6962      	ldr	r2, [r4, #20]
 8008bda:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8008bde:	d0e1      	beq.n	8008ba4 <HAL_CRC_Init+0x54>
 8008be0:	219c      	movs	r1, #156	; 0x9c
 8008be2:	4819      	ldr	r0, [pc, #100]	; (8008c48 <HAL_CRC_Init+0xf8>)
 8008be4:	f7fc f9e6 	bl	8004fb4 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008be8:	6962      	ldr	r2, [r4, #20]
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	e7da      	b.n	8008ba4 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008bee:	217e      	movs	r1, #126	; 0x7e
 8008bf0:	4815      	ldr	r0, [pc, #84]	; (8008c48 <HAL_CRC_Init+0xf8>)
 8008bf2:	f7fc f9df 	bl	8004fb4 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008bf6:	7923      	ldrb	r3, [r4, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0c1      	beq.n	8008b80 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008c02:	f000 f825 	bl	8008c50 <HAL_CRCEx_Polynomial_Set>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d0c1      	beq.n	8008b8e <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8008c0a:	2001      	movs	r0, #1
}
 8008c0c:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8008c0e:	2190      	movs	r1, #144	; 0x90
 8008c10:	480d      	ldr	r0, [pc, #52]	; (8008c48 <HAL_CRC_Init+0xf8>)
 8008c12:	f7fc f9cf 	bl	8004fb4 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008c16:	7963      	ldrb	r3, [r4, #5]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1bc      	bne.n	8008b96 <HAL_CRC_Init+0x46>
 8008c1c:	e7d8      	b.n	8008bd0 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8008c1e:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8008c20:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8008c22:	f7fd fc01 	bl	8006428 <HAL_CRC_MspInit>
 8008c26:	e7a4      	b.n	8008b72 <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008c28:	21a5      	movs	r1, #165	; 0xa5
 8008c2a:	4807      	ldr	r0, [pc, #28]	; (8008c48 <HAL_CRC_Init+0xf8>)
 8008c2c:	f7fc f9c2 	bl	8004fb4 <assert_failed>
 8008c30:	e7ca      	b.n	8008bc8 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008c32:	4805      	ldr	r0, [pc, #20]	; (8008c48 <HAL_CRC_Init+0xf8>)
 8008c34:	21a0      	movs	r1, #160	; 0xa0
 8008c36:	f7fc f9bd 	bl	8004fb4 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	69a0      	ldr	r0, [r4, #24]
 8008c3e:	e7ba      	b.n	8008bb6 <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8008c40:	2001      	movs	r0, #1
}
 8008c42:	4770      	bx	lr
 8008c44:	40023000 	.word	0x40023000
 8008c48:	0802c870 	.word	0x0802c870
 8008c4c:	04c11db7 	.word	0x04c11db7

08008c50 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8008c50:	f032 0318 	bics.w	r3, r2, #24
{
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	4616      	mov	r6, r2
 8008c58:	4605      	mov	r5, r0
 8008c5a:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8008c5c:	d003      	beq.n	8008c66 <HAL_CRCEx_Polynomial_Set+0x16>
 8008c5e:	215f      	movs	r1, #95	; 0x5f
 8008c60:	4818      	ldr	r0, [pc, #96]	; (8008cc4 <HAL_CRCEx_Polynomial_Set+0x74>)
 8008c62:	f7fc f9a7 	bl	8004fb4 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008c66:	231e      	movs	r3, #30
 8008c68:	e001      	b.n	8008c6e <HAL_CRCEx_Polynomial_Set+0x1e>
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	d315      	bcc.n	8008c9a <HAL_CRCEx_Polynomial_Set+0x4a>
 8008c6e:	fa24 fc03 	lsr.w	ip, r4, r3
 8008c72:	f01c 0f01 	tst.w	ip, #1
 8008c76:	d0f8      	beq.n	8008c6a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8008c78:	2e18      	cmp	r6, #24
 8008c7a:	d80f      	bhi.n	8008c9c <HAL_CRCEx_Polynomial_Set+0x4c>
 8008c7c:	e8df f006 	tbb	[pc, r6]
 8008c80:	0e0e0e12 	.word	0x0e0e0e12
 8008c84:	0e0e0e0e 	.word	0x0e0e0e0e
 8008c88:	0e0e0e1b 	.word	0x0e0e0e1b
 8008c8c:	0e0e0e0e 	.word	0x0e0e0e0e
 8008c90:	0e0e0e1e 	.word	0x0e0e0e1e
 8008c94:	0e0e0e0e 	.word	0x0e0e0e0e
 8008c98:	10          	.byte	0x10
 8008c99:	00          	.byte	0x00
 8008c9a:	b11e      	cbz	r6, 8008ca4 <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8008c9c:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8008ca0:	2b06      	cmp	r3, #6
 8008ca2:	d8fb      	bhi.n	8008c9c <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008ca4:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008ca6:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008ca8:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008caa:	688b      	ldr	r3, [r1, #8]
 8008cac:	f023 0318 	bic.w	r3, r3, #24
 8008cb0:	4333      	orrs	r3, r6
 8008cb2:	608b      	str	r3, [r1, #8]
}
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8008cb6:	2b0f      	cmp	r3, #15
 8008cb8:	d9f4      	bls.n	8008ca4 <HAL_CRCEx_Polynomial_Set+0x54>
 8008cba:	e7ef      	b.n	8008c9c <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 8008cbc:	2b07      	cmp	r3, #7
 8008cbe:	d9f1      	bls.n	8008ca4 <HAL_CRCEx_Polynomial_Set+0x54>
 8008cc0:	e7ec      	b.n	8008c9c <HAL_CRCEx_Polynomial_Set+0x4c>
 8008cc2:	bf00      	nop
 8008cc4:	0802c8a8 	.word	0x0802c8a8

08008cc8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8008cc8:	b1d8      	cbz	r0, 8008d02 <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8008cca:	4b0f      	ldr	r3, [pc, #60]	; (8008d08 <HAL_DAC_Init+0x40>)
 8008ccc:	6802      	ldr	r2, [r0, #0]
 8008cce:	429a      	cmp	r2, r3
{
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8008cd4:	d004      	beq.n	8008ce0 <HAL_DAC_Init+0x18>
 8008cd6:	f240 1115 	movw	r1, #277	; 0x115
 8008cda:	480c      	ldr	r0, [pc, #48]	; (8008d0c <HAL_DAC_Init+0x44>)
 8008cdc:	f7fc f96a 	bl	8004fb4 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008ce0:	7923      	ldrb	r3, [r4, #4]
 8008ce2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008ce6:	b13b      	cbz	r3, 8008cf8 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008ce8:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008cea:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008cec:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8008cee:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8008cf0:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008cf2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8008cf4:	7122      	strb	r2, [r4, #4]
}
 8008cf6:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8008cf8:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8008cfa:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8008cfc:	f7fd fbaa 	bl	8006454 <HAL_DAC_MspInit>
 8008d00:	e7f2      	b.n	8008ce8 <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 8008d02:	2001      	movs	r0, #1
}
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40007400 	.word	0x40007400
 8008d0c:	0802c8e4 	.word	0x0802c8e4

08008d10 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d14:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8008d16:	f031 0310 	bics.w	r3, r1, #16
{
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	4617      	mov	r7, r2
 8008d20:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 8008d22:	d16b      	bne.n	8008dfc <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8008d24:	f036 0304 	bics.w	r3, r6, #4
 8008d28:	d001      	beq.n	8008d2e <HAL_DAC_Start_DMA+0x1e>
 8008d2a:	2e08      	cmp	r6, #8
 8008d2c:	d15b      	bne.n	8008de6 <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 8008d2e:	7962      	ldrb	r2, [r4, #5]
 8008d30:	2a01      	cmp	r2, #1
 8008d32:	d060      	beq.n	8008df6 <HAL_DAC_Start_DMA+0xe6>
 8008d34:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008d36:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 8008d3a:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8008d40:	bb35      	cbnz	r5, 8008d90 <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008d42:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008d44:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008d46:	4b39      	ldr	r3, [pc, #228]	; (8008e2c <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008d48:	4a39      	ldr	r2, [pc, #228]	; (8008e30 <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008d4a:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008d4c:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008d50:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008d56:	4a37      	ldr	r2, [pc, #220]	; (8008e34 <HAL_DAC_Start_DMA+0x124>)
 8008d58:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008d5a:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8008d5e:	d059      	beq.n	8008e14 <HAL_DAC_Start_DMA+0x104>
 8008d60:	2e08      	cmp	r6, #8
 8008d62:	d054      	beq.n	8008e0e <HAL_DAC_Start_DMA+0xfe>
 8008d64:	2e00      	cmp	r6, #0
 8008d66:	d04f      	beq.n	8008e08 <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008d68:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008d6a:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008d6e:	4643      	mov	r3, r8
 8008d70:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008d72:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8008d76:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008d7a:	f000 fbe3 	bl	8009544 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008d7e:	2300      	movs	r3, #0
 8008d80:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8008d82:	b330      	cbz	r0, 8008dd2 <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	f043 0304 	orr.w	r3, r3, #4
 8008d8a:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8008d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008d90:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8008d92:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008d94:	4b28      	ldr	r3, [pc, #160]	; (8008e38 <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008d96:	4a29      	ldr	r2, [pc, #164]	; (8008e3c <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008d98:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008d9a:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008d9e:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008da4:	4a26      	ldr	r2, [pc, #152]	; (8008e40 <HAL_DAC_Start_DMA+0x130>)
 8008da6:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008da8:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8008dac:	d03b      	beq.n	8008e26 <HAL_DAC_Start_DMA+0x116>
 8008dae:	2e08      	cmp	r6, #8
 8008db0:	d036      	beq.n	8008e20 <HAL_DAC_Start_DMA+0x110>
 8008db2:	b396      	cbz	r6, 8008e1a <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008db4:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008db6:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008dba:	4643      	mov	r3, r8
 8008dbc:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008dbe:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8008dc2:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008dc6:	f000 fbbd 	bl	8009544 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8008dca:	2300      	movs	r3, #0
 8008dcc:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d1d8      	bne.n	8008d84 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	f005 0110 	and.w	r1, r5, #16
 8008dd8:	2501      	movs	r5, #1
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	408d      	lsls	r5, r1
 8008dde:	4315      	orrs	r5, r2
 8008de0:	601d      	str	r5, [r3, #0]
}
 8008de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8008de6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8008dea:	4816      	ldr	r0, [pc, #88]	; (8008e44 <HAL_DAC_Start_DMA+0x134>)
 8008dec:	f7fc f8e2 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hdac);
 8008df0:	7962      	ldrb	r2, [r4, #5]
 8008df2:	2a01      	cmp	r2, #1
 8008df4:	d19e      	bne.n	8008d34 <HAL_DAC_Start_DMA+0x24>
 8008df6:	2002      	movs	r0, #2
}
 8008df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008dfc:	f240 210f 	movw	r1, #527	; 0x20f
 8008e00:	4810      	ldr	r0, [pc, #64]	; (8008e44 <HAL_DAC_Start_DMA+0x134>)
 8008e02:	f7fc f8d7 	bl	8004fb4 <assert_failed>
 8008e06:	e78d      	b.n	8008d24 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008e08:	f10c 0208 	add.w	r2, ip, #8
        break;
 8008e0c:	e7ad      	b.n	8008d6a <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008e0e:	f10c 0210 	add.w	r2, ip, #16
        break;
 8008e12:	e7aa      	b.n	8008d6a <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008e14:	f10c 020c 	add.w	r2, ip, #12
        break;
 8008e18:	e7a7      	b.n	8008d6a <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008e1a:	f10c 0214 	add.w	r2, ip, #20
        break;
 8008e1e:	e7ca      	b.n	8008db6 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008e20:	f10c 021c 	add.w	r2, ip, #28
        break;
 8008e24:	e7c7      	b.n	8008db6 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008e26:	f10c 0218 	add.w	r2, ip, #24
        break;
 8008e2a:	e7c4      	b.n	8008db6 <HAL_DAC_Start_DMA+0xa6>
 8008e2c:	08008ed9 	.word	0x08008ed9
 8008e30:	08008eed 	.word	0x08008eed
 8008e34:	08008efd 	.word	0x08008efd
 8008e38:	08009051 	.word	0x08009051
 8008e3c:	08009061 	.word	0x08009061
 8008e40:	0800906d 	.word	0x0800906d
 8008e44:	0802c8e4 	.word	0x0802c8e4

08008e48 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008e48:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8008e4a:	f031 0310 	bics.w	r3, r1, #16
{
 8008e4e:	460d      	mov	r5, r1
 8008e50:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 8008e52:	d11e      	bne.n	8008e92 <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e54:	6803      	ldr	r3, [r0, #0]
 8008e56:	f001 0e10 	and.w	lr, r1, #16
 8008e5a:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8008e5e:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 8008e66:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e6a:	ea20 000c 	bic.w	r0, r0, ip
 8008e6e:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	ea22 0201 	bic.w	r2, r2, r1
 8008e76:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8008e78:	bb05      	cbnz	r5, 8008ebc <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8008e7a:	68a0      	ldr	r0, [r4, #8]
 8008e7c:	f000 fbbe 	bl	80095fc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008e80:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008e82:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008e84:	6813      	ldr	r3, [r2, #0]
 8008e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e8a:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	7123      	strb	r3, [r4, #4]
}
 8008e90:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008e92:	f240 218f 	movw	r1, #655	; 0x28f
 8008e96:	480f      	ldr	r0, [pc, #60]	; (8008ed4 <HAL_DAC_Stop_DMA+0x8c>)
 8008e98:	f7fc f88c 	bl	8004fb4 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e9c:	f005 0510 	and.w	r5, r5, #16
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 8008ea6:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 8008eac:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008eae:	ea22 0200 	bic.w	r2, r2, r0
 8008eb2:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8008eb4:	681d      	ldr	r5, [r3, #0]
 8008eb6:	ea25 0501 	bic.w	r5, r5, r1
 8008eba:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008ebc:	68e0      	ldr	r0, [r4, #12]
 8008ebe:	f000 fb9d 	bl	80095fc <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ec2:	6822      	ldr	r2, [r4, #0]
}
 8008ec4:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ec6:	6813      	ldr	r3, [r2, #0]
 8008ec8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ecc:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	7123      	strb	r3, [r4, #4]
}
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	0802c8e4 	.word	0x0802c8e4

08008ed8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008ed8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eda:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008edc:	4620      	mov	r0, r4
 8008ede:	f7fa ff41 	bl	8003d64 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	7123      	strb	r3, [r4, #4]
}
 8008ee6:	bd10      	pop	{r4, pc}

08008ee8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop

08008eec <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008eec:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008eee:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008ef0:	f7ff fffa 	bl	8008ee8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008ef4:	bd08      	pop	{r3, pc}
 8008ef6:	bf00      	nop

08008ef8 <HAL_DAC_ErrorCallbackCh1>:
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop

08008efc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008efc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008efe:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008f00:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008f02:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008f04:	f043 0304 	orr.w	r3, r3, #4
 8008f08:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008f0a:	f7ff fff5 	bl	8008ef8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	7123      	strb	r3, [r4, #4]
}
 8008f12:	bd10      	pop	{r4, pc}

08008f14 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop

08008f18 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008f18:	6803      	ldr	r3, [r0, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	0491      	lsls	r1, r2, #18
{
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008f22:	d502      	bpl.n	8008f2a <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f26:	0492      	lsls	r2, r2, #18
 8008f28:	d418      	bmi.n	8008f5c <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	0091      	lsls	r1, r2, #2
 8008f2e:	d502      	bpl.n	8008f36 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8008f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f32:	0092      	lsls	r2, r2, #2
 8008f34:	d400      	bmi.n	8008f38 <HAL_DAC_IRQHandler+0x20>
}
 8008f36:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f38:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008f3a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008f3e:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f40:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008f42:	6922      	ldr	r2, [r4, #16]
 8008f44:	f042 0202 	orr.w	r2, r2, #2
 8008f48:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008f4a:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8008f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008f56:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008f58:	f000 b878 	b.w	800904c <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f5c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f62:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008f64:	6902      	ldr	r2, [r0, #16]
 8008f66:	f042 0201 	orr.w	r2, r2, #1
 8008f6a:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008f6c:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f74:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008f76:	f7ff ffcd 	bl	8008f14 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	e7d5      	b.n	8008f2a <HAL_DAC_IRQHandler+0x12>
 8008f7e:	bf00      	nop

08008f80 <HAL_DAC_ConfigChannel>:
{
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008f84:	6808      	ldr	r0, [r1, #0]
{
 8008f86:	4616      	mov	r6, r2
 8008f88:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008f8a:	f020 0308 	bic.w	r3, r0, #8
 8008f8e:	f020 0204 	bic.w	r2, r0, #4
 8008f92:	2b24      	cmp	r3, #36	; 0x24
 8008f94:	bf18      	it	ne
 8008f96:	2a00      	cmpne	r2, #0
 8008f98:	f020 0210 	bic.w	r2, r0, #16
 8008f9c:	bf14      	ite	ne
 8008f9e:	2301      	movne	r3, #1
 8008fa0:	2300      	moveq	r3, #0
 8008fa2:	283c      	cmp	r0, #60	; 0x3c
 8008fa4:	bf0c      	ite	eq
 8008fa6:	2300      	moveq	r3, #0
 8008fa8:	f003 0301 	andne.w	r3, r3, #1
 8008fac:	2a0c      	cmp	r2, #12
 8008fae:	bf0c      	ite	eq
 8008fb0:	2300      	moveq	r3, #0
 8008fb2:	f003 0301 	andne.w	r3, r3, #1
 8008fb6:	b11b      	cbz	r3, 8008fc0 <HAL_DAC_ConfigChannel+0x40>
 8008fb8:	f020 0020 	bic.w	r0, r0, #32
 8008fbc:	2814      	cmp	r0, #20
 8008fbe:	d137      	bne.n	8009030 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008fc0:	686b      	ldr	r3, [r5, #4]
 8008fc2:	f033 0302 	bics.w	r3, r3, #2
 8008fc6:	d12d      	bne.n	8009024 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8008fc8:	f036 0310 	bics.w	r3, r6, #16
 8008fcc:	d120      	bne.n	8009010 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8008fce:	7963      	ldrb	r3, [r4, #5]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d025      	beq.n	8009020 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008fd4:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8008fd8:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008fda:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8008fde:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008fe0:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008fe2:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008fe6:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 8008fea:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008fec:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8008fee:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ff0:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008ff2:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 8008ff6:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ff8:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008ffa:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8008ffc:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008ffe:	4082      	lsls	r2, r0
 8009000:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 8009002:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009004:	ea23 0302 	bic.w	r3, r3, r2
 8009008:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800900a:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 800900c:	7165      	strb	r5, [r4, #5]
}
 800900e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8009010:	f240 31a6 	movw	r1, #934	; 0x3a6
 8009014:	4809      	ldr	r0, [pc, #36]	; (800903c <HAL_DAC_ConfigChannel+0xbc>)
 8009016:	f7fb ffcd 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hdac);
 800901a:	7963      	ldrb	r3, [r4, #5]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d1d9      	bne.n	8008fd4 <HAL_DAC_ConfigChannel+0x54>
 8009020:	2002      	movs	r0, #2
}
 8009022:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8009024:	f240 31a5 	movw	r1, #933	; 0x3a5
 8009028:	4804      	ldr	r0, [pc, #16]	; (800903c <HAL_DAC_ConfigChannel+0xbc>)
 800902a:	f7fb ffc3 	bl	8004fb4 <assert_failed>
 800902e:	e7cb      	b.n	8008fc8 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8009030:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8009034:	4801      	ldr	r0, [pc, #4]	; (800903c <HAL_DAC_ConfigChannel+0xbc>)
 8009036:	f7fb ffbd 	bl	8004fb4 <assert_failed>
 800903a:	e7c1      	b.n	8008fc0 <HAL_DAC_ConfigChannel+0x40>
 800903c:	0802c8e4 	.word	0x0802c8e4

08009040 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop

08009044 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop

08009048 <HAL_DACEx_ErrorCallbackCh2>:
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop

0800904c <HAL_DACEx_DMAUnderrunCallbackCh2>:
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop

08009050 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009050:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009052:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009054:	4620      	mov	r0, r4
 8009056:	f7ff fff3 	bl	8009040 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800905a:	2301      	movs	r3, #1
 800905c:	7123      	strb	r3, [r4, #4]
}
 800905e:	bd10      	pop	{r4, pc}

08009060 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009060:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8009062:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009064:	f7ff ffee 	bl	8009044 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009068:	bd08      	pop	{r3, pc}
 800906a:	bf00      	nop

0800906c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800906c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800906e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009070:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009072:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009074:	f043 0304 	orr.w	r3, r3, #4
 8009078:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800907a:	f7ff ffe5 	bl	8009048 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800907e:	2301      	movs	r3, #1
 8009080:	7123      	strb	r3, [r4, #4]
}
 8009082:	bd10      	pop	{r4, pc}

08009084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8009088:	f7ff f892 	bl	80081b0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800908c:	2c00      	cmp	r4, #0
 800908e:	f000 8156 	beq.w	800933e <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	4605      	mov	r5, r0
 8009096:	4bad      	ldr	r3, [pc, #692]	; (800934c <HAL_DMA_Init+0x2c8>)
 8009098:	49ad      	ldr	r1, [pc, #692]	; (8009350 <HAL_DMA_Init+0x2cc>)
 800909a:	429a      	cmp	r2, r3
 800909c:	bf18      	it	ne
 800909e:	428a      	cmpne	r2, r1
 80090a0:	f101 0118 	add.w	r1, r1, #24
 80090a4:	bf14      	ite	ne
 80090a6:	2301      	movne	r3, #1
 80090a8:	2300      	moveq	r3, #0
 80090aa:	428a      	cmp	r2, r1
 80090ac:	bf0c      	ite	eq
 80090ae:	2300      	moveq	r3, #0
 80090b0:	f003 0301 	andne.w	r3, r3, #1
 80090b4:	3118      	adds	r1, #24
 80090b6:	428a      	cmp	r2, r1
 80090b8:	bf0c      	ite	eq
 80090ba:	2300      	moveq	r3, #0
 80090bc:	f003 0301 	andne.w	r3, r3, #1
 80090c0:	3118      	adds	r1, #24
 80090c2:	428a      	cmp	r2, r1
 80090c4:	bf0c      	ite	eq
 80090c6:	2300      	moveq	r3, #0
 80090c8:	f003 0301 	andne.w	r3, r3, #1
 80090cc:	3118      	adds	r1, #24
 80090ce:	428a      	cmp	r2, r1
 80090d0:	bf0c      	ite	eq
 80090d2:	2300      	moveq	r3, #0
 80090d4:	f003 0301 	andne.w	r3, r3, #1
 80090d8:	3118      	adds	r1, #24
 80090da:	428a      	cmp	r2, r1
 80090dc:	bf0c      	ite	eq
 80090de:	2300      	moveq	r3, #0
 80090e0:	f003 0301 	andne.w	r3, r3, #1
 80090e4:	3118      	adds	r1, #24
 80090e6:	428a      	cmp	r2, r1
 80090e8:	bf0c      	ite	eq
 80090ea:	2300      	moveq	r3, #0
 80090ec:	f003 0301 	andne.w	r3, r3, #1
 80090f0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80090f4:	428a      	cmp	r2, r1
 80090f6:	bf0c      	ite	eq
 80090f8:	2300      	moveq	r3, #0
 80090fa:	f003 0301 	andne.w	r3, r3, #1
 80090fe:	3118      	adds	r1, #24
 8009100:	428a      	cmp	r2, r1
 8009102:	bf0c      	ite	eq
 8009104:	2300      	moveq	r3, #0
 8009106:	f003 0301 	andne.w	r3, r3, #1
 800910a:	3118      	adds	r1, #24
 800910c:	428a      	cmp	r2, r1
 800910e:	bf0c      	ite	eq
 8009110:	2300      	moveq	r3, #0
 8009112:	f003 0301 	andne.w	r3, r3, #1
 8009116:	3118      	adds	r1, #24
 8009118:	428a      	cmp	r2, r1
 800911a:	bf0c      	ite	eq
 800911c:	2300      	moveq	r3, #0
 800911e:	f003 0301 	andne.w	r3, r3, #1
 8009122:	3118      	adds	r1, #24
 8009124:	428a      	cmp	r2, r1
 8009126:	bf0c      	ite	eq
 8009128:	2300      	moveq	r3, #0
 800912a:	f003 0301 	andne.w	r3, r3, #1
 800912e:	3118      	adds	r1, #24
 8009130:	428a      	cmp	r2, r1
 8009132:	bf0c      	ite	eq
 8009134:	2300      	moveq	r3, #0
 8009136:	f003 0301 	andne.w	r3, r3, #1
 800913a:	3118      	adds	r1, #24
 800913c:	428a      	cmp	r2, r1
 800913e:	bf0c      	ite	eq
 8009140:	2300      	moveq	r3, #0
 8009142:	f003 0301 	andne.w	r3, r3, #1
 8009146:	b11b      	cbz	r3, 8009150 <HAL_DMA_Init+0xcc>
 8009148:	4b82      	ldr	r3, [pc, #520]	; (8009354 <HAL_DMA_Init+0x2d0>)
 800914a:	429a      	cmp	r2, r3
 800914c:	f040 8139 	bne.w	80093c2 <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800915a:	bf18      	it	ne
 800915c:	2b00      	cmpne	r3, #0
 800915e:	bf14      	ite	ne
 8009160:	2201      	movne	r2, #1
 8009162:	2200      	moveq	r2, #0
 8009164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009168:	bf0c      	ite	eq
 800916a:	2200      	moveq	r2, #0
 800916c:	f002 0201 	andne.w	r2, r2, #1
 8009170:	b11a      	cbz	r2, 800917a <HAL_DMA_Init+0xf6>
 8009172:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009176:	f040 8129 	bne.w	80093cc <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800917a:	68a3      	ldr	r3, [r4, #8]
 800917c:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8009180:	d002      	beq.n	8009188 <HAL_DMA_Init+0x104>
 8009182:	2b80      	cmp	r3, #128	; 0x80
 8009184:	f040 80a8 	bne.w	80092d8 <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8009188:	68e3      	ldr	r3, [r4, #12]
 800918a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800918e:	f040 80ac 	bne.w	80092ea <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8009198:	f040 80b0 	bne.w	80092fc <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800919c:	6963      	ldr	r3, [r4, #20]
 800919e:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 80091a2:	d003      	beq.n	80091ac <HAL_DMA_Init+0x128>
 80091a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091a8:	f040 8091 	bne.w	80092ce <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80091ac:	69a3      	ldr	r3, [r4, #24]
 80091ae:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 80091b2:	d003      	beq.n	80091bc <HAL_DMA_Init+0x138>
 80091b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091b8:	f040 8084 	bne.w	80092c4 <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80091bc:	69e3      	ldr	r3, [r4, #28]
 80091be:	f033 0220 	bics.w	r2, r3, #32
 80091c2:	d002      	beq.n	80091ca <HAL_DMA_Init+0x146>
 80091c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c8:	d16f      	bne.n	80092aa <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80091ca:	6a23      	ldr	r3, [r4, #32]
 80091cc:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80091d0:	d173      	bne.n	80092ba <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80091d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d4:	f033 0204 	bics.w	r2, r3, #4
 80091d8:	d15f      	bne.n	800929a <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d14d      	bne.n	800927a <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80091de:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80091e0:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80091e2:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 80091e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80091e8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091f4:	e006      	b.n	8009204 <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80091f6:	f7fe ffdb 	bl	80081b0 <HAL_GetTick>
 80091fa:	1b40      	subs	r0, r0, r5
 80091fc:	2805      	cmp	r0, #5
 80091fe:	f200 8082 	bhi.w	8009306 <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	07d1      	lsls	r1, r2, #31
 8009208:	d4f5      	bmi.n	80091f6 <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800920a:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 800920e:	68e1      	ldr	r1, [r4, #12]
 8009210:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009212:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8009214:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009216:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009218:	6921      	ldr	r1, [r4, #16]
 800921a:	430a      	orrs	r2, r1
 800921c:	6961      	ldr	r1, [r4, #20]
 800921e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009220:	69e1      	ldr	r1, [r4, #28]
 8009222:	4302      	orrs	r2, r0
 8009224:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009226:	494c      	ldr	r1, [pc, #304]	; (8009358 <HAL_DMA_Init+0x2d4>)
 8009228:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800922a:	6a25      	ldr	r5, [r4, #32]
 800922c:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800922e:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009230:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009232:	2904      	cmp	r1, #4
 8009234:	d06e      	beq.n	8009314 <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009236:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009238:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800923a:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800923e:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009240:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8009242:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009244:	4945      	ldr	r1, [pc, #276]	; (800935c <HAL_DMA_Init+0x2d8>)
 8009246:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009248:	4845      	ldr	r0, [pc, #276]	; (8009360 <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800924a:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 800924e:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009250:	4a44      	ldr	r2, [pc, #272]	; (8009364 <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009252:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009256:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800925a:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800925e:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009260:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009264:	bf88      	it	hi
 8009266:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009268:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800926a:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800926c:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800926e:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8009270:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009272:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8009274:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009278:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800927a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800927c:	2b03      	cmp	r3, #3
 800927e:	d860      	bhi.n	8009342 <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8009280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009282:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8009286:	d171      	bne.n	800936c <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8009288:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800928a:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800928e:	d0a6      	beq.n	80091de <HAL_DMA_Init+0x15a>
 8009290:	21c8      	movs	r1, #200	; 0xc8
 8009292:	4835      	ldr	r0, [pc, #212]	; (8009368 <HAL_DMA_Init+0x2e4>)
 8009294:	f7fb fe8e 	bl	8004fb4 <assert_failed>
 8009298:	e7a1      	b.n	80091de <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800929a:	21c1      	movs	r1, #193	; 0xc1
 800929c:	4832      	ldr	r0, [pc, #200]	; (8009368 <HAL_DMA_Init+0x2e4>)
 800929e:	f7fb fe89 	bl	8004fb4 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80092a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d09a      	beq.n	80091de <HAL_DMA_Init+0x15a>
 80092a8:	e7e7      	b.n	800927a <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80092aa:	21bf      	movs	r1, #191	; 0xbf
 80092ac:	482e      	ldr	r0, [pc, #184]	; (8009368 <HAL_DMA_Init+0x2e4>)
 80092ae:	f7fb fe81 	bl	8004fb4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80092b2:	6a23      	ldr	r3, [r4, #32]
 80092b4:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80092b8:	d08b      	beq.n	80091d2 <HAL_DMA_Init+0x14e>
 80092ba:	21c0      	movs	r1, #192	; 0xc0
 80092bc:	482a      	ldr	r0, [pc, #168]	; (8009368 <HAL_DMA_Init+0x2e4>)
 80092be:	f7fb fe79 	bl	8004fb4 <assert_failed>
 80092c2:	e786      	b.n	80091d2 <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80092c4:	21be      	movs	r1, #190	; 0xbe
 80092c6:	4828      	ldr	r0, [pc, #160]	; (8009368 <HAL_DMA_Init+0x2e4>)
 80092c8:	f7fb fe74 	bl	8004fb4 <assert_failed>
 80092cc:	e776      	b.n	80091bc <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80092ce:	21bd      	movs	r1, #189	; 0xbd
 80092d0:	4825      	ldr	r0, [pc, #148]	; (8009368 <HAL_DMA_Init+0x2e4>)
 80092d2:	f7fb fe6f 	bl	8004fb4 <assert_failed>
 80092d6:	e769      	b.n	80091ac <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80092d8:	21ba      	movs	r1, #186	; 0xba
 80092da:	4823      	ldr	r0, [pc, #140]	; (8009368 <HAL_DMA_Init+0x2e4>)
 80092dc:	f7fb fe6a 	bl	8004fb4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80092e0:	68e3      	ldr	r3, [r4, #12]
 80092e2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80092e6:	f43f af54 	beq.w	8009192 <HAL_DMA_Init+0x10e>
 80092ea:	21bb      	movs	r1, #187	; 0xbb
 80092ec:	481e      	ldr	r0, [pc, #120]	; (8009368 <HAL_DMA_Init+0x2e4>)
 80092ee:	f7fb fe61 	bl	8004fb4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80092f2:	6923      	ldr	r3, [r4, #16]
 80092f4:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80092f8:	f43f af50 	beq.w	800919c <HAL_DMA_Init+0x118>
 80092fc:	21bc      	movs	r1, #188	; 0xbc
 80092fe:	481a      	ldr	r0, [pc, #104]	; (8009368 <HAL_DMA_Init+0x2e4>)
 8009300:	f7fb fe58 	bl	8004fb4 <assert_failed>
 8009304:	e74a      	b.n	800919c <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009306:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009308:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800930a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800930c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800930e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009312:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009314:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8009318:	4329      	orrs	r1, r5
 800931a:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800931c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800931e:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8009320:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009322:	f021 0107 	bic.w	r1, r1, #7
 8009326:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8009328:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800932c:	2d00      	cmp	r5, #0
 800932e:	d087      	beq.n	8009240 <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009330:	bb08      	cbnz	r0, 8009376 <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 8009332:	2a01      	cmp	r2, #1
 8009334:	d040      	beq.n	80093b8 <HAL_DMA_Init+0x334>
 8009336:	f032 0202 	bics.w	r2, r2, #2
 800933a:	d181      	bne.n	8009240 <HAL_DMA_Init+0x1bc>
 800933c:	e023      	b.n	8009386 <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 800933e:	2001      	movs	r0, #1
}
 8009340:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8009342:	21c6      	movs	r1, #198	; 0xc6
 8009344:	4808      	ldr	r0, [pc, #32]	; (8009368 <HAL_DMA_Init+0x2e4>)
 8009346:	f7fb fe35 	bl	8004fb4 <assert_failed>
 800934a:	e799      	b.n	8009280 <HAL_DMA_Init+0x1fc>
 800934c:	40026010 	.word	0x40026010
 8009350:	40026028 	.word	0x40026028
 8009354:	400264b8 	.word	0x400264b8
 8009358:	e010803f 	.word	0xe010803f
 800935c:	aaaaaaab 	.word	0xaaaaaaab
 8009360:	0802c954 	.word	0x0802c954
 8009364:	fffffc00 	.word	0xfffffc00
 8009368:	0802c91c 	.word	0x0802c91c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800936c:	21c7      	movs	r1, #199	; 0xc7
 800936e:	481a      	ldr	r0, [pc, #104]	; (80093d8 <HAL_DMA_Init+0x354>)
 8009370:	f7fb fe20 	bl	8004fb4 <assert_failed>
 8009374:	e788      	b.n	8009288 <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009376:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800937a:	d00e      	beq.n	800939a <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800937c:	2a02      	cmp	r2, #2
 800937e:	d905      	bls.n	800938c <HAL_DMA_Init+0x308>
 8009380:	2a03      	cmp	r2, #3
 8009382:	f47f af5d 	bne.w	8009240 <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009386:	01ea      	lsls	r2, r5, #7
 8009388:	f57f af5a 	bpl.w	8009240 <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 800938c:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800938e:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8009390:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009392:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8009394:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009398:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800939a:	2a03      	cmp	r2, #3
 800939c:	f63f af50 	bhi.w	8009240 <HAL_DMA_Init+0x1bc>
 80093a0:	a001      	add	r0, pc, #4	; (adr r0, 80093a8 <HAL_DMA_Init+0x324>)
 80093a2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80093a6:	bf00      	nop
 80093a8:	0800938d 	.word	0x0800938d
 80093ac:	08009387 	.word	0x08009387
 80093b0:	0800938d 	.word	0x0800938d
 80093b4:	080093b9 	.word	0x080093b9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80093b8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80093bc:	f47f af40 	bne.w	8009240 <HAL_DMA_Init+0x1bc>
 80093c0:	e7e4      	b.n	800938c <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80093c2:	21b8      	movs	r1, #184	; 0xb8
 80093c4:	4804      	ldr	r0, [pc, #16]	; (80093d8 <HAL_DMA_Init+0x354>)
 80093c6:	f7fb fdf5 	bl	8004fb4 <assert_failed>
 80093ca:	e6c1      	b.n	8009150 <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80093cc:	21b9      	movs	r1, #185	; 0xb9
 80093ce:	4802      	ldr	r0, [pc, #8]	; (80093d8 <HAL_DMA_Init+0x354>)
 80093d0:	f7fb fdf0 	bl	8004fb4 <assert_failed>
 80093d4:	e6d1      	b.n	800917a <HAL_DMA_Init+0xf6>
 80093d6:	bf00      	nop
 80093d8:	0802c91c 	.word	0x0802c91c

080093dc <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80093dc:	2800      	cmp	r0, #0
 80093de:	f000 8097 	beq.w	8009510 <HAL_DMA_DeInit+0x134>
{
 80093e2:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80093e4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80093e8:	4604      	mov	r4, r0
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	b2d8      	uxtb	r0, r3
 80093ee:	f000 808e 	beq.w	800950e <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80093f2:	6822      	ldr	r2, [r4, #0]
 80093f4:	4b4b      	ldr	r3, [pc, #300]	; (8009524 <HAL_DMA_DeInit+0x148>)
 80093f6:	484c      	ldr	r0, [pc, #304]	; (8009528 <HAL_DMA_DeInit+0x14c>)
 80093f8:	494c      	ldr	r1, [pc, #304]	; (800952c <HAL_DMA_DeInit+0x150>)
 80093fa:	429a      	cmp	r2, r3
 80093fc:	bf18      	it	ne
 80093fe:	4282      	cmpne	r2, r0
 8009400:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009404:	bf14      	ite	ne
 8009406:	2301      	movne	r3, #1
 8009408:	2300      	moveq	r3, #0
 800940a:	428a      	cmp	r2, r1
 800940c:	bf0c      	ite	eq
 800940e:	2300      	moveq	r3, #0
 8009410:	f003 0301 	andne.w	r3, r3, #1
 8009414:	3130      	adds	r1, #48	; 0x30
 8009416:	4282      	cmp	r2, r0
 8009418:	bf0c      	ite	eq
 800941a:	2300      	moveq	r3, #0
 800941c:	f003 0301 	andne.w	r3, r3, #1
 8009420:	3030      	adds	r0, #48	; 0x30
 8009422:	428a      	cmp	r2, r1
 8009424:	bf0c      	ite	eq
 8009426:	2300      	moveq	r3, #0
 8009428:	f003 0301 	andne.w	r3, r3, #1
 800942c:	3130      	adds	r1, #48	; 0x30
 800942e:	4282      	cmp	r2, r0
 8009430:	bf0c      	ite	eq
 8009432:	2300      	moveq	r3, #0
 8009434:	f003 0301 	andne.w	r3, r3, #1
 8009438:	3030      	adds	r0, #48	; 0x30
 800943a:	428a      	cmp	r2, r1
 800943c:	bf0c      	ite	eq
 800943e:	2300      	moveq	r3, #0
 8009440:	f003 0301 	andne.w	r3, r3, #1
 8009444:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009448:	4282      	cmp	r2, r0
 800944a:	bf0c      	ite	eq
 800944c:	2300      	moveq	r3, #0
 800944e:	f003 0301 	andne.w	r3, r3, #1
 8009452:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009456:	428a      	cmp	r2, r1
 8009458:	bf0c      	ite	eq
 800945a:	2300      	moveq	r3, #0
 800945c:	f003 0301 	andne.w	r3, r3, #1
 8009460:	3130      	adds	r1, #48	; 0x30
 8009462:	4282      	cmp	r2, r0
 8009464:	bf0c      	ite	eq
 8009466:	2300      	moveq	r3, #0
 8009468:	f003 0301 	andne.w	r3, r3, #1
 800946c:	3030      	adds	r0, #48	; 0x30
 800946e:	428a      	cmp	r2, r1
 8009470:	bf0c      	ite	eq
 8009472:	2300      	moveq	r3, #0
 8009474:	f003 0301 	andne.w	r3, r3, #1
 8009478:	3130      	adds	r1, #48	; 0x30
 800947a:	4282      	cmp	r2, r0
 800947c:	bf0c      	ite	eq
 800947e:	2300      	moveq	r3, #0
 8009480:	f003 0301 	andne.w	r3, r3, #1
 8009484:	3030      	adds	r0, #48	; 0x30
 8009486:	428a      	cmp	r2, r1
 8009488:	bf0c      	ite	eq
 800948a:	2300      	moveq	r3, #0
 800948c:	f003 0301 	andne.w	r3, r3, #1
 8009490:	3130      	adds	r1, #48	; 0x30
 8009492:	4282      	cmp	r2, r0
 8009494:	bf0c      	ite	eq
 8009496:	2300      	moveq	r3, #0
 8009498:	f003 0301 	andne.w	r3, r3, #1
 800949c:	428a      	cmp	r2, r1
 800949e:	bf0c      	ite	eq
 80094a0:	2300      	moveq	r3, #0
 80094a2:	f003 0301 	andne.w	r3, r3, #1
 80094a6:	b113      	cbz	r3, 80094ae <HAL_DMA_DeInit+0xd2>
 80094a8:	4b21      	ldr	r3, [pc, #132]	; (8009530 <HAL_DMA_DeInit+0x154>)
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d132      	bne.n	8009514 <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 80094ae:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094b0:	b2d3      	uxtb	r3, r2
 80094b2:	4920      	ldr	r1, [pc, #128]	; (8009534 <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 80094b4:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094b8:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 80094ba:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 80094bc:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094be:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 80094c2:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 80094c4:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 80094c6:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 80094ca:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094cc:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 80094d0:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 80094d2:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80094d4:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80094d6:	f04f 0021 	mov.w	r0, #33	; 0x21
 80094da:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094dc:	4816      	ldr	r0, [pc, #88]	; (8009538 <HAL_DMA_DeInit+0x15c>)
 80094de:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80094e0:	4916      	ldr	r1, [pc, #88]	; (800953c <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094e2:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80094e4:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094e8:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80094ec:	bf88      	it	hi
 80094ee:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094f0:	4082      	lsls	r2, r0
  return HAL_OK;
 80094f2:	4618      	mov	r0, r3
 80094f4:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094f6:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094f8:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80094fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80094fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8009502:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8009506:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 800950a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800950e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009510:	2001      	movs	r0, #1
}
 8009512:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8009514:	f240 1149 	movw	r1, #329	; 0x149
 8009518:	4809      	ldr	r0, [pc, #36]	; (8009540 <HAL_DMA_DeInit+0x164>)
 800951a:	f7fb fd4b 	bl	8004fb4 <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 800951e:	6822      	ldr	r2, [r4, #0]
 8009520:	e7c5      	b.n	80094ae <HAL_DMA_DeInit+0xd2>
 8009522:	bf00      	nop
 8009524:	40026010 	.word	0x40026010
 8009528:	40026028 	.word	0x40026028
 800952c:	40026040 	.word	0x40026040
 8009530:	400264b8 	.word	0x400264b8
 8009534:	aaaaaaab 	.word	0xaaaaaaab
 8009538:	0802c954 	.word	0x0802c954
 800953c:	fffffc00 	.word	0xfffffc00
 8009540:	0802c91c 	.word	0x0802c91c

08009544 <HAL_DMA_Start_IT>:
{
 8009544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009548:	461e      	mov	r6, r3
 800954a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800954c:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009550:	1e58      	subs	r0, r3, #1
 8009552:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8009556:	4688      	mov	r8, r1
 8009558:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800955a:	4298      	cmp	r0, r3
 800955c:	d83b      	bhi.n	80095d6 <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 800955e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009562:	2b01      	cmp	r3, #1
 8009564:	d040      	beq.n	80095e8 <HAL_DMA_Start_IT+0xa4>
 8009566:	2301      	movs	r3, #1
 8009568:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800956c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009570:	2b01      	cmp	r3, #1
 8009572:	d005      	beq.n	8009580 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8009574:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8009576:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8009578:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800957c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8009580:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009582:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8009584:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009588:	2300      	movs	r3, #0
 800958a:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009592:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009594:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 8009596:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009598:	2b40      	cmp	r3, #64	; 0x40
 800959a:	d028      	beq.n	80095ee <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 800959c:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 80095a0:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80095a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80095a4:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 80095a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80095a8:	408b      	lsls	r3, r1
 80095aa:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	f043 0316 	orr.w	r3, r3, #22
 80095b4:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80095b6:	696b      	ldr	r3, [r5, #20]
 80095b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095bc:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80095be:	b11a      	cbz	r2, 80095c8 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	f043 0308 	orr.w	r3, r3, #8
 80095c6:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80095c8:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095ca:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80095cc:	f043 0301 	orr.w	r3, r3, #1
 80095d0:	602b      	str	r3, [r5, #0]
}
 80095d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80095d6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80095da:	4807      	ldr	r0, [pc, #28]	; (80095f8 <HAL_DMA_Start_IT+0xb4>)
 80095dc:	f7fb fcea 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hdma);
 80095e0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d1be      	bne.n	8009566 <HAL_DMA_Start_IT+0x22>
 80095e8:	2002      	movs	r0, #2
}
 80095ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 80095ee:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 80095f0:	f8c5 800c 	str.w	r8, [r5, #12]
 80095f4:	e7d5      	b.n	80095a2 <HAL_DMA_Start_IT+0x5e>
 80095f6:	bf00      	nop
 80095f8:	0802c91c 	.word	0x0802c91c

080095fc <HAL_DMA_Abort>:
{
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009600:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8009602:	f7fe fdd5 	bl	80081b0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009606:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800960a:	2b02      	cmp	r3, #2
 800960c:	d006      	beq.n	800961c <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800960e:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8009610:	2300      	movs	r3, #0
    return HAL_ERROR;
 8009612:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009614:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009616:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800961a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	4605      	mov	r5, r0
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	f022 0216 	bic.w	r2, r2, #22
 8009626:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009628:	695a      	ldr	r2, [r3, #20]
 800962a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800962e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009630:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009632:	b33a      	cbz	r2, 8009684 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	f022 0208 	bic.w	r2, r2, #8
 800963a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	f022 0201 	bic.w	r2, r2, #1
 8009642:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009644:	e005      	b.n	8009652 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009646:	f7fe fdb3 	bl	80081b0 <HAL_GetTick>
 800964a:	1b43      	subs	r3, r0, r5
 800964c:	2b05      	cmp	r3, #5
 800964e:	d80f      	bhi.n	8009670 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f013 0301 	ands.w	r3, r3, #1
 8009658:	d1f5      	bne.n	8009646 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800965a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800965c:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800965e:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009660:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8009662:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009664:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8009666:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800966a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800966e:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009670:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009672:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8009674:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009676:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8009678:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800967a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800967e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8009682:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009684:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009686:	2a00      	cmp	r2, #0
 8009688:	d1d4      	bne.n	8009634 <HAL_DMA_Abort+0x38>
 800968a:	e7d7      	b.n	800963c <HAL_DMA_Abort+0x40>

0800968c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800968c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8009690:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009692:	2a02      	cmp	r2, #2
 8009694:	d003      	beq.n	800969e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009696:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8009698:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800969a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800969c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800969e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80096a0:	2105      	movs	r1, #5
  return HAL_OK;
 80096a2:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 80096a4:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80096a8:	6813      	ldr	r3, [r2, #0]
 80096aa:	f023 0301 	bic.w	r3, r3, #1
 80096ae:	6013      	str	r3, [r2, #0]
}
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop

080096b4 <HAL_DMA_IRQHandler>:
{
 80096b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 80096b8:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 80096ba:	4b74      	ldr	r3, [pc, #464]	; (800988c <HAL_DMA_IRQHandler+0x1d8>)
{
 80096bc:	b082      	sub	sp, #8
 80096be:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 80096c0:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 80096c2:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80096c4:	2208      	movs	r2, #8
 80096c6:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80096ca:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80096cc:	409a      	lsls	r2, r3
 80096ce:	4222      	tst	r2, r4
 80096d0:	d004      	beq.n	80096dc <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80096d2:	6801      	ldr	r1, [r0, #0]
 80096d4:	680f      	ldr	r7, [r1, #0]
 80096d6:	0778      	lsls	r0, r7, #29
 80096d8:	f100 80ab 	bmi.w	8009832 <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80096dc:	2201      	movs	r2, #1
 80096de:	409a      	lsls	r2, r3
 80096e0:	4222      	tst	r2, r4
 80096e2:	d005      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80096e4:	f8d8 1000 	ldr.w	r1, [r8]
 80096e8:	6949      	ldr	r1, [r1, #20]
 80096ea:	0609      	lsls	r1, r1, #24
 80096ec:	f100 8099 	bmi.w	8009822 <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80096f0:	2204      	movs	r2, #4
 80096f2:	409a      	lsls	r2, r3
 80096f4:	4222      	tst	r2, r4
 80096f6:	d005      	beq.n	8009704 <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80096f8:	f8d8 1000 	ldr.w	r1, [r8]
 80096fc:	6809      	ldr	r1, [r1, #0]
 80096fe:	078f      	lsls	r7, r1, #30
 8009700:	f100 8087 	bmi.w	8009812 <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009704:	2210      	movs	r2, #16
 8009706:	409a      	lsls	r2, r3
 8009708:	4222      	tst	r2, r4
 800970a:	d004      	beq.n	8009716 <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800970c:	f8d8 1000 	ldr.w	r1, [r8]
 8009710:	680f      	ldr	r7, [r1, #0]
 8009712:	0738      	lsls	r0, r7, #28
 8009714:	d468      	bmi.n	80097e8 <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009716:	2220      	movs	r2, #32
 8009718:	409a      	lsls	r2, r3
 800971a:	4222      	tst	r2, r4
 800971c:	d017      	beq.n	800974e <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800971e:	f8d8 1000 	ldr.w	r1, [r8]
 8009722:	680c      	ldr	r4, [r1, #0]
 8009724:	06e0      	lsls	r0, r4, #27
 8009726:	d512      	bpl.n	800974e <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009728:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800972a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800972e:	2a05      	cmp	r2, #5
 8009730:	d039      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009732:	680b      	ldr	r3, [r1, #0]
 8009734:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009738:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800973a:	f000 808d 	beq.w	8009858 <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800973e:	0319      	lsls	r1, r3, #12
 8009740:	f140 8098 	bpl.w	8009874 <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 8009744:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8009748:	b10b      	cbz	r3, 800974e <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 800974a:	4640      	mov	r0, r8
 800974c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800974e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8009752:	2b00      	cmp	r3, #0
 8009754:	d045      	beq.n	80097e2 <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009756:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800975a:	07da      	lsls	r2, r3, #31
 800975c:	d51b      	bpl.n	8009796 <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 800975e:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8009762:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8009764:	494a      	ldr	r1, [pc, #296]	; (8009890 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8009766:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800976a:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800976c:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8009770:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8009774:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	e002      	b.n	8009780 <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800977a:	6813      	ldr	r3, [r2, #0]
 800977c:	07db      	lsls	r3, r3, #31
 800977e:	d504      	bpl.n	800978a <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 8009780:	9b01      	ldr	r3, [sp, #4]
 8009782:	3301      	adds	r3, #1
 8009784:	42ab      	cmp	r3, r5
 8009786:	9301      	str	r3, [sp, #4]
 8009788:	d9f7      	bls.n	800977a <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 800978a:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800978c:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800978e:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8009792:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8009796:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800979a:	b313      	cbz	r3, 80097e2 <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 800979c:	4640      	mov	r0, r8
}
 800979e:	b002      	add	sp, #8
 80097a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80097a4:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80097a6:	680a      	ldr	r2, [r1, #0]
 80097a8:	f022 0216 	bic.w	r2, r2, #22
 80097ac:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80097ae:	694a      	ldr	r2, [r1, #20]
 80097b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097b4:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80097b6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80097ba:	2a00      	cmp	r2, #0
 80097bc:	d060      	beq.n	8009880 <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80097be:	680a      	ldr	r2, [r1, #0]
 80097c0:	f022 0208 	bic.w	r2, r2, #8
 80097c4:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80097c6:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 80097c8:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80097ca:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 80097ce:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80097d0:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 80097d2:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 80097d6:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80097da:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1dc      	bne.n	800979c <HAL_DMA_IRQHandler+0xe8>
}
 80097e2:	b002      	add	sp, #8
 80097e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80097e8:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80097ea:	680a      	ldr	r2, [r1, #0]
 80097ec:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80097f0:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80097f2:	d12a      	bne.n	800984a <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80097f4:	05d7      	lsls	r7, r2, #23
 80097f6:	d403      	bmi.n	8009800 <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80097f8:	680a      	ldr	r2, [r1, #0]
 80097fa:	f022 0208 	bic.w	r2, r2, #8
 80097fe:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8009800:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8009804:	2a00      	cmp	r2, #0
 8009806:	d086      	beq.n	8009716 <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 8009808:	4640      	mov	r0, r8
 800980a:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800980c:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8009810:	e781      	b.n	8009716 <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009812:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009814:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8009818:	f042 0204 	orr.w	r2, r2, #4
 800981c:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8009820:	e770      	b.n	8009704 <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009822:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009824:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8009828:	f042 0202 	orr.w	r2, r2, #2
 800982c:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8009830:	e75e      	b.n	80096f0 <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009832:	680f      	ldr	r7, [r1, #0]
 8009834:	f027 0704 	bic.w	r7, r7, #4
 8009838:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800983a:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800983c:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8009840:	f042 0201 	orr.w	r2, r2, #1
 8009844:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8009848:	e748      	b.n	80096dc <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800984a:	0312      	lsls	r2, r2, #12
 800984c:	d5d8      	bpl.n	8009800 <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800984e:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8009852:	2a00      	cmp	r2, #0
 8009854:	d1d8      	bne.n	8009808 <HAL_DMA_IRQHandler+0x154>
 8009856:	e75e      	b.n	8009716 <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009858:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800985c:	f47f af72 	bne.w	8009744 <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009860:	680a      	ldr	r2, [r1, #0]
 8009862:	f022 0210 	bic.w	r2, r2, #16
 8009866:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009868:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 800986a:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800986e:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8009872:	e767      	b.n	8009744 <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 8009874:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8009878:	2b00      	cmp	r3, #0
 800987a:	f47f af66 	bne.w	800974a <HAL_DMA_IRQHandler+0x96>
 800987e:	e766      	b.n	800974e <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009880:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8009884:	2a00      	cmp	r2, #0
 8009886:	d19a      	bne.n	80097be <HAL_DMA_IRQHandler+0x10a>
 8009888:	e79d      	b.n	80097c6 <HAL_DMA_IRQHandler+0x112>
 800988a:	bf00      	nop
 800988c:	20000284 	.word	0x20000284
 8009890:	1b4e81b5 	.word	0x1b4e81b5

08009894 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8009894:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8009896:	4770      	bx	lr

08009898 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8009898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800989c:	9f08      	ldr	r7, [sp, #32]
 800989e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80098a0:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 80098a4:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80098a6:	1e7d      	subs	r5, r7, #1
{
 80098a8:	4691      	mov	r9, r2
 80098aa:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80098ac:	4285      	cmp	r5, r0
 80098ae:	d85f      	bhi.n	8009970 <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80098b0:	68a0      	ldr	r0, [r4, #8]
 80098b2:	2880      	cmp	r0, #128	; 0x80
 80098b4:	d063      	beq.n	800997e <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80098b6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	f000 8090 	beq.w	80099e0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80098c0:	2301      	movs	r3, #1
 80098c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80098c6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d005      	beq.n	80098da <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80098ce:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 80098d0:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 80098d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 80098d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80098da:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80098dc:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098de:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 80098e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098e4:	f04f 0300 	mov.w	r3, #0
 80098e8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098f0:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 80098f2:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 80098f4:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098f6:	d06a      	beq.n	80099ce <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80098f8:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80098fc:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009900:	4b93      	ldr	r3, [pc, #588]	; (8009b50 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8009902:	429d      	cmp	r5, r3
 8009904:	d941      	bls.n	800998a <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 8009906:	3b48      	subs	r3, #72	; 0x48
 8009908:	4992      	ldr	r1, [pc, #584]	; (8009b54 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800990a:	4a93      	ldr	r2, [pc, #588]	; (8009b58 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800990c:	429d      	cmp	r5, r3
 800990e:	bf18      	it	ne
 8009910:	428d      	cmpne	r5, r1
 8009912:	bf14      	ite	ne
 8009914:	2301      	movne	r3, #1
 8009916:	2300      	moveq	r3, #0
 8009918:	4295      	cmp	r5, r2
 800991a:	bf0c      	ite	eq
 800991c:	2300      	moveq	r3, #0
 800991e:	f003 0301 	andne.w	r3, r3, #1
 8009922:	b11b      	cbz	r3, 800992c <HAL_DMAEx_MultiBufferStart_IT+0x94>
 8009924:	4b8d      	ldr	r3, [pc, #564]	; (8009b5c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009926:	429d      	cmp	r5, r3
 8009928:	f040 812e 	bne.w	8009b88 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 800992c:	4b8c      	ldr	r3, [pc, #560]	; (8009b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800992e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009930:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009932:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009934:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009936:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009938:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800993a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800993c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800993e:	2201      	movs	r2, #1
 8009940:	4b87      	ldr	r3, [pc, #540]	; (8009b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8009942:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009944:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009946:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009948:	f043 0316 	orr.w	r3, r3, #22
 800994c:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800994e:	696b      	ldr	r3, [r5, #20]
 8009950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009954:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009956:	2a00      	cmp	r2, #0
 8009958:	d03e      	beq.n	80099d8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 800995a:	682b      	ldr	r3, [r5, #0]
 800995c:	f043 0308 	orr.w	r3, r3, #8
 8009960:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 8009962:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009964:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8009966:	f043 0301 	orr.w	r3, r3, #1
 800996a:	602b      	str	r3, [r5, #0]
}
 800996c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009970:	487c      	ldr	r0, [pc, #496]	; (8009b64 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8009972:	21a1      	movs	r1, #161	; 0xa1
 8009974:	f7fb fb1e 	bl	8004fb4 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009978:	68a0      	ldr	r0, [r4, #8]
 800997a:	2880      	cmp	r0, #128	; 0x80
 800997c:	d19b      	bne.n	80098b6 <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800997e:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 8009982:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8009984:	6563      	str	r3, [r4, #84]	; 0x54
}
 8009986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800998a:	4b77      	ldr	r3, [pc, #476]	; (8009b68 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800998c:	429d      	cmp	r5, r3
 800998e:	d929      	bls.n	80099e4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8009990:	3ba8      	subs	r3, #168	; 0xa8
 8009992:	4976      	ldr	r1, [pc, #472]	; (8009b6c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8009994:	4a70      	ldr	r2, [pc, #448]	; (8009b58 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8009996:	429d      	cmp	r5, r3
 8009998:	bf18      	it	ne
 800999a:	428d      	cmpne	r5, r1
 800999c:	bf14      	ite	ne
 800999e:	2301      	movne	r3, #1
 80099a0:	2300      	moveq	r3, #0
 80099a2:	4295      	cmp	r5, r2
 80099a4:	bf0c      	ite	eq
 80099a6:	2300      	moveq	r3, #0
 80099a8:	f003 0301 	andne.w	r3, r3, #1
 80099ac:	b113      	cbz	r3, 80099b4 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 80099ae:	4b6b      	ldr	r3, [pc, #428]	; (8009b5c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80099b0:	429d      	cmp	r5, r3
 80099b2:	d15a      	bne.n	8009a6a <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 80099b4:	4b6a      	ldr	r3, [pc, #424]	; (8009b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80099b6:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80099b8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80099ba:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80099bc:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80099be:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099c0:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80099c2:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099c4:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80099c6:	2301      	movs	r3, #1
 80099c8:	4a65      	ldr	r2, [pc, #404]	; (8009b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80099ca:	6093      	str	r3, [r2, #8]
 80099cc:	e7ba      	b.n	8009944 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 80099ce:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 80099d2:	f8c5 800c 	str.w	r8, [r5, #12]
 80099d6:	e793      	b.n	8009900 <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80099d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1bd      	bne.n	800995a <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 80099de:	e7c0      	b.n	8009962 <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 80099e0:	2002      	movs	r0, #2
 80099e2:	e778      	b.n	80098d6 <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80099e4:	4b62      	ldr	r3, [pc, #392]	; (8009b70 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80099e6:	429d      	cmp	r5, r3
 80099e8:	d91f      	bls.n	8009a2a <HAL_DMAEx_MultiBufferStart_IT+0x192>
 80099ea:	3b48      	subs	r3, #72	; 0x48
 80099ec:	495f      	ldr	r1, [pc, #380]	; (8009b6c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80099ee:	4a5a      	ldr	r2, [pc, #360]	; (8009b58 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80099f0:	429d      	cmp	r5, r3
 80099f2:	bf18      	it	ne
 80099f4:	428d      	cmpne	r5, r1
 80099f6:	bf14      	ite	ne
 80099f8:	2301      	movne	r3, #1
 80099fa:	2300      	moveq	r3, #0
 80099fc:	4295      	cmp	r5, r2
 80099fe:	bf0c      	ite	eq
 8009a00:	2300      	moveq	r3, #0
 8009a02:	f003 0301 	andne.w	r3, r3, #1
 8009a06:	b11b      	cbz	r3, 8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8009a08:	4b54      	ldr	r3, [pc, #336]	; (8009b5c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009a0a:	429d      	cmp	r5, r3
 8009a0c:	f040 8152 	bne.w	8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 8009a10:	4b58      	ldr	r3, [pc, #352]	; (8009b74 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009a12:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a14:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a16:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a18:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a1a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009a1c:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a1e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009a20:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009a22:	2301      	movs	r3, #1
 8009a24:	4a53      	ldr	r2, [pc, #332]	; (8009b74 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009a26:	60d3      	str	r3, [r2, #12]
 8009a28:	e78c      	b.n	8009944 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a2a:	4b50      	ldr	r3, [pc, #320]	; (8009b6c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8009a2c:	4949      	ldr	r1, [pc, #292]	; (8009b54 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8009a2e:	4a4a      	ldr	r2, [pc, #296]	; (8009b58 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8009a30:	429d      	cmp	r5, r3
 8009a32:	bf18      	it	ne
 8009a34:	428d      	cmpne	r5, r1
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	4295      	cmp	r5, r2
 8009a3e:	bf0c      	ite	eq
 8009a40:	2300      	moveq	r3, #0
 8009a42:	f003 0301 	andne.w	r3, r3, #1
 8009a46:	b11b      	cbz	r3, 8009a50 <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 8009a48:	4b44      	ldr	r3, [pc, #272]	; (8009b5c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009a4a:	429d      	cmp	r5, r3
 8009a4c:	f040 80be 	bne.w	8009bcc <HAL_DMAEx_MultiBufferStart_IT+0x334>
 8009a50:	4b48      	ldr	r3, [pc, #288]	; (8009b74 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009a52:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a54:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a56:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a58:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a5a:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009a5c:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a5e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009a60:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009a62:	2301      	movs	r3, #1
 8009a64:	4a43      	ldr	r2, [pc, #268]	; (8009b74 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009a66:	6093      	str	r3, [r2, #8]
 8009a68:	e76c      	b.n	8009944 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a6a:	3b48      	subs	r3, #72	; 0x48
 8009a6c:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009a70:	3218      	adds	r2, #24
 8009a72:	429d      	cmp	r5, r3
 8009a74:	bf18      	it	ne
 8009a76:	428d      	cmpne	r5, r1
 8009a78:	bf14      	ite	ne
 8009a7a:	2301      	movne	r3, #1
 8009a7c:	2300      	moveq	r3, #0
 8009a7e:	4295      	cmp	r5, r2
 8009a80:	bf0c      	ite	eq
 8009a82:	2300      	moveq	r3, #0
 8009a84:	f003 0301 	andne.w	r3, r3, #1
 8009a88:	b11b      	cbz	r3, 8009a92 <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 8009a8a:	4b3b      	ldr	r3, [pc, #236]	; (8009b78 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009a8c:	429d      	cmp	r5, r3
 8009a8e:	f040 8210 	bne.w	8009eb2 <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 8009a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a96:	4b39      	ldr	r3, [pc, #228]	; (8009b7c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009a98:	4839      	ldr	r0, [pc, #228]	; (8009b80 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a9a:	4a31      	ldr	r2, [pc, #196]	; (8009b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a9c:	429d      	cmp	r5, r3
 8009a9e:	bf18      	it	ne
 8009aa0:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009aa2:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009aa4:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 8009aa8:	bf14      	ite	ne
 8009aaa:	2301      	movne	r3, #1
 8009aac:	2300      	moveq	r3, #0
 8009aae:	4295      	cmp	r5, r2
 8009ab0:	bf0c      	ite	eq
 8009ab2:	2300      	moveq	r3, #0
 8009ab4:	f003 0301 	andne.w	r3, r3, #1
 8009ab8:	b11b      	cbz	r3, 8009ac2 <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 8009aba:	4b2f      	ldr	r3, [pc, #188]	; (8009b78 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009abc:	429d      	cmp	r5, r3
 8009abe:	f040 8212 	bne.w	8009ee6 <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 8009ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009ac6:	4b2d      	ldr	r3, [pc, #180]	; (8009b7c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009ac8:	482d      	ldr	r0, [pc, #180]	; (8009b80 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009aca:	4925      	ldr	r1, [pc, #148]	; (8009b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009acc:	429d      	cmp	r5, r3
 8009ace:	bf18      	it	ne
 8009ad0:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009ad2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009ad4:	bf14      	ite	ne
 8009ad6:	2301      	movne	r3, #1
 8009ad8:	2300      	moveq	r3, #0
 8009ada:	4a2a      	ldr	r2, [pc, #168]	; (8009b84 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009adc:	4295      	cmp	r5, r2
 8009ade:	bf0c      	ite	eq
 8009ae0:	2300      	moveq	r3, #0
 8009ae2:	f003 0301 	andne.w	r3, r3, #1
 8009ae6:	b11b      	cbz	r3, 8009af0 <HAL_DMAEx_MultiBufferStart_IT+0x258>
 8009ae8:	4b23      	ldr	r3, [pc, #140]	; (8009b78 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009aea:	429d      	cmp	r5, r3
 8009aec:	f040 822b 	bne.w	8009f46 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8009af0:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009af4:	4b22      	ldr	r3, [pc, #136]	; (8009b80 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009af6:	4821      	ldr	r0, [pc, #132]	; (8009b7c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009af8:	4919      	ldr	r1, [pc, #100]	; (8009b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009afa:	429d      	cmp	r5, r3
 8009afc:	bf18      	it	ne
 8009afe:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009b00:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009b02:	bf14      	ite	ne
 8009b04:	2301      	movne	r3, #1
 8009b06:	2300      	moveq	r3, #0
 8009b08:	4a1e      	ldr	r2, [pc, #120]	; (8009b84 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009b0a:	4295      	cmp	r5, r2
 8009b0c:	bf0c      	ite	eq
 8009b0e:	2300      	moveq	r3, #0
 8009b10:	f003 0301 	andne.w	r3, r3, #1
 8009b14:	b11b      	cbz	r3, 8009b1e <HAL_DMAEx_MultiBufferStart_IT+0x286>
 8009b16:	4b18      	ldr	r3, [pc, #96]	; (8009b78 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009b18:	429d      	cmp	r5, r3
 8009b1a:	f040 81fc 	bne.w	8009f16 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8009b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009b22:	4b17      	ldr	r3, [pc, #92]	; (8009b80 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009b24:	4815      	ldr	r0, [pc, #84]	; (8009b7c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009b26:	490e      	ldr	r1, [pc, #56]	; (8009b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009b28:	429d      	cmp	r5, r3
 8009b2a:	bf18      	it	ne
 8009b2c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009b2e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009b30:	bf14      	ite	ne
 8009b32:	2301      	movne	r3, #1
 8009b34:	2300      	moveq	r3, #0
 8009b36:	4a13      	ldr	r2, [pc, #76]	; (8009b84 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009b38:	4295      	cmp	r5, r2
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2300      	moveq	r3, #0
 8009b3e:	f003 0301 	andne.w	r3, r3, #1
 8009b42:	b11b      	cbz	r3, 8009b4c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8009b44:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009b46:	429d      	cmp	r5, r3
 8009b48:	f040 8215 	bne.w	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 8009b4c:	2340      	movs	r3, #64	; 0x40
 8009b4e:	e73b      	b.n	80099c8 <HAL_DMAEx_MultiBufferStart_IT+0x130>
 8009b50:	40026458 	.word	0x40026458
 8009b54:	40026010 	.word	0x40026010
 8009b58:	40026070 	.word	0x40026070
 8009b5c:	40026470 	.word	0x40026470
 8009b60:	40026400 	.word	0x40026400
 8009b64:	0802c95c 	.word	0x0802c95c
 8009b68:	400260b8 	.word	0x400260b8
 8009b6c:	40026410 	.word	0x40026410
 8009b70:	40026058 	.word	0x40026058
 8009b74:	40026000 	.word	0x40026000
 8009b78:	40026488 	.word	0x40026488
 8009b7c:	40026028 	.word	0x40026028
 8009b80:	40026428 	.word	0x40026428
 8009b84:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009b88:	3b48      	subs	r3, #72	; 0x48
 8009b8a:	3118      	adds	r1, #24
 8009b8c:	3218      	adds	r2, #24
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	bf18      	it	ne
 8009b92:	428d      	cmpne	r5, r1
 8009b94:	bf14      	ite	ne
 8009b96:	2301      	movne	r3, #1
 8009b98:	2300      	moveq	r3, #0
 8009b9a:	4295      	cmp	r5, r2
 8009b9c:	bf0c      	ite	eq
 8009b9e:	2300      	moveq	r3, #0
 8009ba0:	f003 0301 	andne.w	r3, r3, #1
 8009ba4:	b11b      	cbz	r3, 8009bae <HAL_DMAEx_MultiBufferStart_IT+0x316>
 8009ba6:	4b7d      	ldr	r3, [pc, #500]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009ba8:	429d      	cmp	r5, r3
 8009baa:	f040 8103 	bne.w	8009db4 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 8009bae:	4b7c      	ldr	r3, [pc, #496]	; (8009da0 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8009bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009bb8:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009bba:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009bbe:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009bc4:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009bc6:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009bc8:	2240      	movs	r2, #64	; 0x40
 8009bca:	e6b9      	b.n	8009940 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009bcc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009bd0:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009bd4:	3218      	adds	r2, #24
 8009bd6:	429d      	cmp	r5, r3
 8009bd8:	bf18      	it	ne
 8009bda:	428d      	cmpne	r5, r1
 8009bdc:	bf14      	ite	ne
 8009bde:	2301      	movne	r3, #1
 8009be0:	2300      	moveq	r3, #0
 8009be2:	4295      	cmp	r5, r2
 8009be4:	bf0c      	ite	eq
 8009be6:	2300      	moveq	r3, #0
 8009be8:	f003 0301 	andne.w	r3, r3, #1
 8009bec:	b11b      	cbz	r3, 8009bf6 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 8009bee:	4b6b      	ldr	r3, [pc, #428]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009bf0:	429d      	cmp	r5, r3
 8009bf2:	f040 81d8 	bne.w	8009fa6 <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 8009bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009bfa:	4b6a      	ldr	r3, [pc, #424]	; (8009da4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009bfc:	486a      	ldr	r0, [pc, #424]	; (8009da8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009bfe:	4a6b      	ldr	r2, [pc, #428]	; (8009dac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c00:	429d      	cmp	r5, r3
 8009c02:	bf18      	it	ne
 8009c04:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009c06:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c08:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8009c0c:	bf14      	ite	ne
 8009c0e:	2301      	movne	r3, #1
 8009c10:	2300      	moveq	r3, #0
 8009c12:	4295      	cmp	r5, r2
 8009c14:	bf0c      	ite	eq
 8009c16:	2300      	moveq	r3, #0
 8009c18:	f003 0301 	andne.w	r3, r3, #1
 8009c1c:	b11b      	cbz	r3, 8009c26 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8009c1e:	4b5f      	ldr	r3, [pc, #380]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009c20:	429d      	cmp	r5, r3
 8009c22:	f040 81d9 	bne.w	8009fd8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8009c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c2a:	4b5e      	ldr	r3, [pc, #376]	; (8009da4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009c2c:	485e      	ldr	r0, [pc, #376]	; (8009da8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c2e:	495f      	ldr	r1, [pc, #380]	; (8009dac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c30:	429d      	cmp	r5, r3
 8009c32:	bf18      	it	ne
 8009c34:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c36:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c38:	bf14      	ite	ne
 8009c3a:	2301      	movne	r3, #1
 8009c3c:	2300      	moveq	r3, #0
 8009c3e:	4a5c      	ldr	r2, [pc, #368]	; (8009db0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009c40:	4295      	cmp	r5, r2
 8009c42:	bf0c      	ite	eq
 8009c44:	2300      	moveq	r3, #0
 8009c46:	f003 0301 	andne.w	r3, r3, #1
 8009c4a:	b11b      	cbz	r3, 8009c54 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8009c4c:	4b53      	ldr	r3, [pc, #332]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009c4e:	429d      	cmp	r5, r3
 8009c50:	f040 822c 	bne.w	800a0ac <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8009c54:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c58:	4b53      	ldr	r3, [pc, #332]	; (8009da8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009c5a:	4852      	ldr	r0, [pc, #328]	; (8009da4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c5c:	4953      	ldr	r1, [pc, #332]	; (8009dac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c5e:	429d      	cmp	r5, r3
 8009c60:	bf18      	it	ne
 8009c62:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c64:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c66:	bf14      	ite	ne
 8009c68:	2301      	movne	r3, #1
 8009c6a:	2300      	moveq	r3, #0
 8009c6c:	4a50      	ldr	r2, [pc, #320]	; (8009db0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009c6e:	4295      	cmp	r5, r2
 8009c70:	bf0c      	ite	eq
 8009c72:	2300      	moveq	r3, #0
 8009c74:	f003 0301 	andne.w	r3, r3, #1
 8009c78:	b11b      	cbz	r3, 8009c82 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009c7a:	4b48      	ldr	r3, [pc, #288]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009c7c:	429d      	cmp	r5, r3
 8009c7e:	f040 81db 	bne.w	800a038 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 8009c82:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c86:	4b47      	ldr	r3, [pc, #284]	; (8009da4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009c88:	4847      	ldr	r0, [pc, #284]	; (8009da8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c8a:	4948      	ldr	r1, [pc, #288]	; (8009dac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	bf18      	it	ne
 8009c90:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c92:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c94:	bf14      	ite	ne
 8009c96:	2301      	movne	r3, #1
 8009c98:	2300      	moveq	r3, #0
 8009c9a:	4a45      	ldr	r2, [pc, #276]	; (8009db0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009c9c:	4295      	cmp	r5, r2
 8009c9e:	bf0c      	ite	eq
 8009ca0:	2300      	moveq	r3, #0
 8009ca2:	f003 0301 	andne.w	r3, r3, #1
 8009ca6:	b11b      	cbz	r3, 8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0x418>
 8009ca8:	4b3c      	ldr	r3, [pc, #240]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009caa:	429d      	cmp	r5, r3
 8009cac:	f040 822d 	bne.w	800a10a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8009cb0:	2340      	movs	r3, #64	; 0x40
 8009cb2:	e6d7      	b.n	8009a64 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009cb4:	3b48      	subs	r3, #72	; 0x48
 8009cb6:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009cba:	3218      	adds	r2, #24
 8009cbc:	429d      	cmp	r5, r3
 8009cbe:	bf18      	it	ne
 8009cc0:	428d      	cmpne	r5, r1
 8009cc2:	bf14      	ite	ne
 8009cc4:	2301      	movne	r3, #1
 8009cc6:	2300      	moveq	r3, #0
 8009cc8:	4295      	cmp	r5, r2
 8009cca:	bf0c      	ite	eq
 8009ccc:	2300      	moveq	r3, #0
 8009cce:	f003 0301 	andne.w	r3, r3, #1
 8009cd2:	b11b      	cbz	r3, 8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x444>
 8009cd4:	4b31      	ldr	r3, [pc, #196]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009cd6:	429d      	cmp	r5, r3
 8009cd8:	f040 81d0 	bne.w	800a07c <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 8009cdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009ce0:	4b31      	ldr	r3, [pc, #196]	; (8009da8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009ce2:	4830      	ldr	r0, [pc, #192]	; (8009da4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009ce4:	4a31      	ldr	r2, [pc, #196]	; (8009dac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009ce6:	429d      	cmp	r5, r3
 8009ce8:	bf18      	it	ne
 8009cea:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009cec:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009cee:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8009cf2:	bf14      	ite	ne
 8009cf4:	2301      	movne	r3, #1
 8009cf6:	2300      	moveq	r3, #0
 8009cf8:	4295      	cmp	r5, r2
 8009cfa:	bf0c      	ite	eq
 8009cfc:	2300      	moveq	r3, #0
 8009cfe:	f003 0301 	andne.w	r3, r3, #1
 8009d02:	b11b      	cbz	r3, 8009d0c <HAL_DMAEx_MultiBufferStart_IT+0x474>
 8009d04:	4b25      	ldr	r3, [pc, #148]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009d06:	429d      	cmp	r5, r3
 8009d08:	f040 817e 	bne.w	800a008 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8009d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009d10:	4b24      	ldr	r3, [pc, #144]	; (8009da4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009d12:	4825      	ldr	r0, [pc, #148]	; (8009da8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009d14:	4925      	ldr	r1, [pc, #148]	; (8009dac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009d16:	429d      	cmp	r5, r3
 8009d18:	bf18      	it	ne
 8009d1a:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009d1c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009d1e:	bf14      	ite	ne
 8009d20:	2301      	movne	r3, #1
 8009d22:	2300      	moveq	r3, #0
 8009d24:	4a22      	ldr	r2, [pc, #136]	; (8009db0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009d26:	4295      	cmp	r5, r2
 8009d28:	bf0c      	ite	eq
 8009d2a:	2300      	moveq	r3, #0
 8009d2c:	f003 0301 	andne.w	r3, r3, #1
 8009d30:	b11b      	cbz	r3, 8009d3a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8009d32:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009d34:	429d      	cmp	r5, r3
 8009d36:	f040 81fe 	bne.w	800a136 <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 8009d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d3e:	4b1a      	ldr	r3, [pc, #104]	; (8009da8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009d40:	4818      	ldr	r0, [pc, #96]	; (8009da4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009d42:	491a      	ldr	r1, [pc, #104]	; (8009dac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d44:	429d      	cmp	r5, r3
 8009d46:	bf18      	it	ne
 8009d48:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009d4a:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d4c:	bf14      	ite	ne
 8009d4e:	2301      	movne	r3, #1
 8009d50:	2300      	moveq	r3, #0
 8009d52:	4a17      	ldr	r2, [pc, #92]	; (8009db0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009d54:	4295      	cmp	r5, r2
 8009d56:	bf0c      	ite	eq
 8009d58:	2300      	moveq	r3, #0
 8009d5a:	f003 0301 	andne.w	r3, r3, #1
 8009d5e:	b11b      	cbz	r3, 8009d68 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009d62:	429d      	cmp	r5, r3
 8009d64:	f040 81ba 	bne.w	800a0dc <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8009d68:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009d6c:	4b0e      	ldr	r3, [pc, #56]	; (8009da8 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009d6e:	480d      	ldr	r0, [pc, #52]	; (8009da4 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d70:	490e      	ldr	r1, [pc, #56]	; (8009dac <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009d72:	429d      	cmp	r5, r3
 8009d74:	bf18      	it	ne
 8009d76:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d78:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009d7a:	bf14      	ite	ne
 8009d7c:	2301      	movne	r3, #1
 8009d7e:	2300      	moveq	r3, #0
 8009d80:	4a0b      	ldr	r2, [pc, #44]	; (8009db0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009d82:	4295      	cmp	r5, r2
 8009d84:	bf0c      	ite	eq
 8009d86:	2300      	moveq	r3, #0
 8009d88:	f003 0301 	andne.w	r3, r3, #1
 8009d8c:	b11b      	cbz	r3, 8009d96 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8009d8e:	4b03      	ldr	r3, [pc, #12]	; (8009d9c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009d90:	429d      	cmp	r5, r3
 8009d92:	f040 81e6 	bne.w	800a162 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	e644      	b.n	8009a24 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 8009d9a:	bf00      	nop
 8009d9c:	40026488 	.word	0x40026488
 8009da0:	40026400 	.word	0x40026400
 8009da4:	40026428 	.word	0x40026428
 8009da8:	40026028 	.word	0x40026028
 8009dac:	40026000 	.word	0x40026000
 8009db0:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009db4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009db8:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009dbc:	3218      	adds	r2, #24
 8009dbe:	429d      	cmp	r5, r3
 8009dc0:	bf18      	it	ne
 8009dc2:	428d      	cmpne	r5, r1
 8009dc4:	bf14      	ite	ne
 8009dc6:	2301      	movne	r3, #1
 8009dc8:	2300      	moveq	r3, #0
 8009dca:	4295      	cmp	r5, r2
 8009dcc:	bf0c      	ite	eq
 8009dce:	2300      	moveq	r3, #0
 8009dd0:	f003 0301 	andne.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 81e6 	beq.w	800a1a6 <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 8009dda:	4ba3      	ldr	r3, [pc, #652]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009ddc:	429d      	cmp	r5, r3
 8009dde:	f000 81e2 	beq.w	800a1a6 <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 8009de2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009de6:	4ba1      	ldr	r3, [pc, #644]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009de8:	48a1      	ldr	r0, [pc, #644]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009dea:	4aa2      	ldr	r2, [pc, #648]	; (800a074 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009dec:	429d      	cmp	r5, r3
 8009dee:	bf18      	it	ne
 8009df0:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009df2:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009df4:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009df8:	bf14      	ite	ne
 8009dfa:	2301      	movne	r3, #1
 8009dfc:	2300      	moveq	r3, #0
 8009dfe:	4295      	cmp	r5, r2
 8009e00:	bf0c      	ite	eq
 8009e02:	2300      	moveq	r3, #0
 8009e04:	f003 0301 	andne.w	r3, r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 81c9 	beq.w	800a1a0 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 8009e0e:	4b96      	ldr	r3, [pc, #600]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009e10:	429d      	cmp	r5, r3
 8009e12:	f000 81c5 	beq.w	800a1a0 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 8009e16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e1a:	4b94      	ldr	r3, [pc, #592]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009e1c:	4894      	ldr	r0, [pc, #592]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009e1e:	4995      	ldr	r1, [pc, #596]	; (800a074 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e20:	429d      	cmp	r5, r3
 8009e22:	bf18      	it	ne
 8009e24:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009e26:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e28:	bf14      	ite	ne
 8009e2a:	2301      	movne	r3, #1
 8009e2c:	2300      	moveq	r3, #0
 8009e2e:	4a92      	ldr	r2, [pc, #584]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009e30:	4295      	cmp	r5, r2
 8009e32:	bf0c      	ite	eq
 8009e34:	2300      	moveq	r3, #0
 8009e36:	f003 0301 	andne.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 81ad 	beq.w	800a19a <HAL_DMAEx_MultiBufferStart_IT+0x902>
 8009e40:	4b89      	ldr	r3, [pc, #548]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009e42:	429d      	cmp	r5, r3
 8009e44:	f000 81a9 	beq.w	800a19a <HAL_DMAEx_MultiBufferStart_IT+0x902>
 8009e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e4c:	4b87      	ldr	r3, [pc, #540]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009e4e:	4888      	ldr	r0, [pc, #544]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e50:	4988      	ldr	r1, [pc, #544]	; (800a074 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e52:	429d      	cmp	r5, r3
 8009e54:	bf18      	it	ne
 8009e56:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e58:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e5a:	bf14      	ite	ne
 8009e5c:	2301      	movne	r3, #1
 8009e5e:	2300      	moveq	r3, #0
 8009e60:	4a85      	ldr	r2, [pc, #532]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009e62:	4295      	cmp	r5, r2
 8009e64:	bf0c      	ite	eq
 8009e66:	2300      	moveq	r3, #0
 8009e68:	f003 0301 	andne.w	r3, r3, #1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 8191 	beq.w	800a194 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 8009e72:	4b7d      	ldr	r3, [pc, #500]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009e74:	429d      	cmp	r5, r3
 8009e76:	f000 818d 	beq.w	800a194 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 8009e7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009e7e:	4b7b      	ldr	r3, [pc, #492]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009e80:	487b      	ldr	r0, [pc, #492]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e82:	497c      	ldr	r1, [pc, #496]	; (800a074 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009e84:	429d      	cmp	r5, r3
 8009e86:	bf18      	it	ne
 8009e88:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e8a:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009e8c:	bf14      	ite	ne
 8009e8e:	2301      	movne	r3, #1
 8009e90:	2300      	moveq	r3, #0
 8009e92:	4a79      	ldr	r2, [pc, #484]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009e94:	4295      	cmp	r5, r2
 8009e96:	bf0c      	ite	eq
 8009e98:	2300      	moveq	r3, #0
 8009e9a:	f003 0301 	andne.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f000 8174 	beq.w	800a18c <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009ea4:	4b70      	ldr	r3, [pc, #448]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009ea6:	429d      	cmp	r5, r3
 8009ea8:	f000 8170 	beq.w	800a18c <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009eac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8009eb0:	e546      	b.n	8009940 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009eb2:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009eb6:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009eba:	3218      	adds	r2, #24
 8009ebc:	429d      	cmp	r5, r3
 8009ebe:	bf18      	it	ne
 8009ec0:	428d      	cmpne	r5, r1
 8009ec2:	bf14      	ite	ne
 8009ec4:	2301      	movne	r3, #1
 8009ec6:	2300      	moveq	r3, #0
 8009ec8:	4295      	cmp	r5, r2
 8009eca:	bf0c      	ite	eq
 8009ecc:	2300      	moveq	r3, #0
 8009ece:	f003 0301 	andne.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 816d 	beq.w	800a1b2 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8009ed8:	4b63      	ldr	r3, [pc, #396]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009eda:	429d      	cmp	r5, r3
 8009edc:	f000 8169 	beq.w	800a1b2 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8009ee0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009ee4:	e5d7      	b.n	8009a96 <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009ee6:	4b62      	ldr	r3, [pc, #392]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009ee8:	4960      	ldr	r1, [pc, #384]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009eea:	4a63      	ldr	r2, [pc, #396]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009eec:	429d      	cmp	r5, r3
 8009eee:	bf18      	it	ne
 8009ef0:	428d      	cmpne	r5, r1
 8009ef2:	bf14      	ite	ne
 8009ef4:	2301      	movne	r3, #1
 8009ef6:	2300      	moveq	r3, #0
 8009ef8:	4295      	cmp	r5, r2
 8009efa:	bf0c      	ite	eq
 8009efc:	2300      	moveq	r3, #0
 8009efe:	f003 0301 	andne.w	r3, r3, #1
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 815b 	beq.w	800a1be <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8009f08:	4b57      	ldr	r3, [pc, #348]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009f0a:	429d      	cmp	r5, r3
 8009f0c:	f000 8157 	beq.w	800a1be <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8009f10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009f14:	e5d7      	b.n	8009ac6 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009f16:	4b55      	ldr	r3, [pc, #340]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009f18:	4955      	ldr	r1, [pc, #340]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009f1a:	4a57      	ldr	r2, [pc, #348]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009f1c:	429d      	cmp	r5, r3
 8009f1e:	bf18      	it	ne
 8009f20:	428d      	cmpne	r5, r1
 8009f22:	bf14      	ite	ne
 8009f24:	2301      	movne	r3, #1
 8009f26:	2300      	moveq	r3, #0
 8009f28:	4295      	cmp	r5, r2
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2300      	moveq	r3, #0
 8009f2e:	f003 0301 	andne.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 8140 	beq.w	800a1b8 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8009f38:	4b4b      	ldr	r3, [pc, #300]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009f3a:	429d      	cmp	r5, r3
 8009f3c:	f000 813c 	beq.w	800a1b8 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8009f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f44:	e5ed      	b.n	8009b22 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009f46:	4b49      	ldr	r3, [pc, #292]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009f48:	4949      	ldr	r1, [pc, #292]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009f4a:	4a4b      	ldr	r2, [pc, #300]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009f4c:	429d      	cmp	r5, r3
 8009f4e:	bf18      	it	ne
 8009f50:	428d      	cmpne	r5, r1
 8009f52:	bf14      	ite	ne
 8009f54:	2301      	movne	r3, #1
 8009f56:	2300      	moveq	r3, #0
 8009f58:	4295      	cmp	r5, r2
 8009f5a:	bf0c      	ite	eq
 8009f5c:	2300      	moveq	r3, #0
 8009f5e:	f003 0301 	andne.w	r3, r3, #1
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 812e 	beq.w	800a1c4 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009f68:	4b3f      	ldr	r3, [pc, #252]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009f6a:	429d      	cmp	r5, r3
 8009f6c:	f000 812a 	beq.w	800a1c4 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f74:	e5be      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009f76:	4b3d      	ldr	r3, [pc, #244]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009f78:	493d      	ldr	r1, [pc, #244]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009f7a:	4a3f      	ldr	r2, [pc, #252]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009f7c:	429d      	cmp	r5, r3
 8009f7e:	bf18      	it	ne
 8009f80:	428d      	cmpne	r5, r1
 8009f82:	bf14      	ite	ne
 8009f84:	2301      	movne	r3, #1
 8009f86:	2300      	moveq	r3, #0
 8009f88:	4295      	cmp	r5, r2
 8009f8a:	bf0c      	ite	eq
 8009f8c:	2300      	moveq	r3, #0
 8009f8e:	f003 0301 	andne.w	r3, r3, #1
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f000 810a 	beq.w	800a1ac <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009f98:	4b33      	ldr	r3, [pc, #204]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009f9a:	429d      	cmp	r5, r3
 8009f9c:	f000 8106 	beq.w	800a1ac <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009fa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009fa4:	e510      	b.n	80099c8 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009fa6:	3b48      	subs	r3, #72	; 0x48
 8009fa8:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009fac:	3218      	adds	r2, #24
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	bf18      	it	ne
 8009fb2:	428d      	cmpne	r5, r1
 8009fb4:	bf14      	ite	ne
 8009fb6:	2301      	movne	r3, #1
 8009fb8:	2300      	moveq	r3, #0
 8009fba:	4295      	cmp	r5, r2
 8009fbc:	bf0c      	ite	eq
 8009fbe:	2300      	moveq	r3, #0
 8009fc0:	f003 0301 	andne.w	r3, r3, #1
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8112 	beq.w	800a1ee <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8009fca:	4b27      	ldr	r3, [pc, #156]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009fcc:	429d      	cmp	r5, r3
 8009fce:	f000 810e 	beq.w	800a1ee <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8009fd2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009fd6:	e610      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009fd8:	4b24      	ldr	r3, [pc, #144]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009fda:	4925      	ldr	r1, [pc, #148]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009fdc:	4a26      	ldr	r2, [pc, #152]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009fde:	429d      	cmp	r5, r3
 8009fe0:	bf18      	it	ne
 8009fe2:	428d      	cmpne	r5, r1
 8009fe4:	bf14      	ite	ne
 8009fe6:	2301      	movne	r3, #1
 8009fe8:	2300      	moveq	r3, #0
 8009fea:	4295      	cmp	r5, r2
 8009fec:	bf0c      	ite	eq
 8009fee:	2300      	moveq	r3, #0
 8009ff0:	f003 0301 	andne.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 80ee 	beq.w	800a1d6 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009ffa:	4b1b      	ldr	r3, [pc, #108]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009ffc:	429d      	cmp	r5, r3
 8009ffe:	f000 80ea 	beq.w	800a1d6 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800a002:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a006:	e610      	b.n	8009c2a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800a008:	4b19      	ldr	r3, [pc, #100]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800a00a:	4918      	ldr	r1, [pc, #96]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800a00c:	4a1a      	ldr	r2, [pc, #104]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800a00e:	429d      	cmp	r5, r3
 800a010:	bf18      	it	ne
 800a012:	428d      	cmpne	r5, r1
 800a014:	bf14      	ite	ne
 800a016:	2301      	movne	r3, #1
 800a018:	2300      	moveq	r3, #0
 800a01a:	4295      	cmp	r5, r2
 800a01c:	bf0c      	ite	eq
 800a01e:	2300      	moveq	r3, #0
 800a020:	f003 0301 	andne.w	r3, r3, #1
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 80e8 	beq.w	800a1fa <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800a02a:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800a02c:	429d      	cmp	r5, r3
 800a02e:	f000 80e4 	beq.w	800a1fa <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800a032:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a036:	e66b      	b.n	8009d10 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a038:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800a03a:	490c      	ldr	r1, [pc, #48]	; (800a06c <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800a03c:	4a0e      	ldr	r2, [pc, #56]	; (800a078 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800a03e:	429d      	cmp	r5, r3
 800a040:	bf18      	it	ne
 800a042:	428d      	cmpne	r5, r1
 800a044:	bf14      	ite	ne
 800a046:	2301      	movne	r3, #1
 800a048:	2300      	moveq	r3, #0
 800a04a:	4295      	cmp	r5, r2
 800a04c:	bf0c      	ite	eq
 800a04e:	2300      	moveq	r3, #0
 800a050:	f003 0301 	andne.w	r3, r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 80bb 	beq.w	800a1d0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800a05a:	4b03      	ldr	r3, [pc, #12]	; (800a068 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800a05c:	429d      	cmp	r5, r3
 800a05e:	f000 80b7 	beq.w	800a1d0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800a062:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a066:	e60e      	b.n	8009c86 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800a068:	400264a0 	.word	0x400264a0
 800a06c:	40026040 	.word	0x40026040
 800a070:	40026440 	.word	0x40026440
 800a074:	40026400 	.word	0x40026400
 800a078:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a07c:	3b48      	subs	r3, #72	; 0x48
 800a07e:	3118      	adds	r1, #24
 800a080:	3218      	adds	r2, #24
 800a082:	429d      	cmp	r5, r3
 800a084:	bf18      	it	ne
 800a086:	428d      	cmpne	r5, r1
 800a088:	bf14      	ite	ne
 800a08a:	2301      	movne	r3, #1
 800a08c:	2300      	moveq	r3, #0
 800a08e:	4295      	cmp	r5, r2
 800a090:	bf0c      	ite	eq
 800a092:	2300      	moveq	r3, #0
 800a094:	f003 0301 	andne.w	r3, r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 80ab 	beq.w	800a1f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800a09e:	4b5a      	ldr	r3, [pc, #360]	; (800a208 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a0a0:	429d      	cmp	r5, r3
 800a0a2:	f000 80a7 	beq.w	800a1f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800a0a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800a0aa:	e619      	b.n	8009ce0 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a0ac:	4b57      	ldr	r3, [pc, #348]	; (800a20c <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a0ae:	4958      	ldr	r1, [pc, #352]	; (800a210 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a0b0:	4a58      	ldr	r2, [pc, #352]	; (800a214 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a0b2:	429d      	cmp	r5, r3
 800a0b4:	bf18      	it	ne
 800a0b6:	428d      	cmpne	r5, r1
 800a0b8:	bf14      	ite	ne
 800a0ba:	2301      	movne	r3, #1
 800a0bc:	2300      	moveq	r3, #0
 800a0be:	4295      	cmp	r5, r2
 800a0c0:	bf0c      	ite	eq
 800a0c2:	2300      	moveq	r3, #0
 800a0c4:	f003 0301 	andne.w	r3, r3, #1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 808a 	beq.w	800a1e2 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800a0ce:	4b4e      	ldr	r3, [pc, #312]	; (800a208 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a0d0:	429d      	cmp	r5, r3
 800a0d2:	f000 8086 	beq.w	800a1e2 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800a0d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0da:	e5bd      	b.n	8009c58 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a0dc:	4b4c      	ldr	r3, [pc, #304]	; (800a210 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a0de:	494b      	ldr	r1, [pc, #300]	; (800a20c <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a0e0:	4a4c      	ldr	r2, [pc, #304]	; (800a214 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a0e2:	429d      	cmp	r5, r3
 800a0e4:	bf18      	it	ne
 800a0e6:	428d      	cmpne	r5, r1
 800a0e8:	bf14      	ite	ne
 800a0ea:	2301      	movne	r3, #1
 800a0ec:	2300      	moveq	r3, #0
 800a0ee:	4295      	cmp	r5, r2
 800a0f0:	bf0c      	ite	eq
 800a0f2:	2300      	moveq	r3, #0
 800a0f4:	f003 0301 	andne.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8081 	beq.w	800a200 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800a0fe:	4b42      	ldr	r3, [pc, #264]	; (800a208 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a100:	429d      	cmp	r5, r3
 800a102:	d07d      	beq.n	800a200 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800a104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a108:	e630      	b.n	8009d6c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a10a:	4b40      	ldr	r3, [pc, #256]	; (800a20c <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a10c:	4940      	ldr	r1, [pc, #256]	; (800a210 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a10e:	4a41      	ldr	r2, [pc, #260]	; (800a214 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a110:	429d      	cmp	r5, r3
 800a112:	bf18      	it	ne
 800a114:	428d      	cmpne	r5, r1
 800a116:	bf14      	ite	ne
 800a118:	2301      	movne	r3, #1
 800a11a:	2300      	moveq	r3, #0
 800a11c:	4295      	cmp	r5, r2
 800a11e:	bf0c      	ite	eq
 800a120:	2300      	moveq	r3, #0
 800a122:	f003 0301 	andne.w	r3, r3, #1
 800a126:	2b00      	cmp	r3, #0
 800a128:	d058      	beq.n	800a1dc <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800a12a:	4b37      	ldr	r3, [pc, #220]	; (800a208 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a12c:	429d      	cmp	r5, r3
 800a12e:	d055      	beq.n	800a1dc <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800a130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a134:	e496      	b.n	8009a64 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a136:	4b35      	ldr	r3, [pc, #212]	; (800a20c <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a138:	4935      	ldr	r1, [pc, #212]	; (800a210 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a13a:	4a36      	ldr	r2, [pc, #216]	; (800a214 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a13c:	429d      	cmp	r5, r3
 800a13e:	bf18      	it	ne
 800a140:	428d      	cmpne	r5, r1
 800a142:	bf14      	ite	ne
 800a144:	2301      	movne	r3, #1
 800a146:	2300      	moveq	r3, #0
 800a148:	4295      	cmp	r5, r2
 800a14a:	bf0c      	ite	eq
 800a14c:	2300      	moveq	r3, #0
 800a14e:	f003 0301 	andne.w	r3, r3, #1
 800a152:	2b00      	cmp	r3, #0
 800a154:	d048      	beq.n	800a1e8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800a156:	4b2c      	ldr	r3, [pc, #176]	; (800a208 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a158:	429d      	cmp	r5, r3
 800a15a:	d045      	beq.n	800a1e8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800a15c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a160:	e5ed      	b.n	8009d3e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a162:	4b2a      	ldr	r3, [pc, #168]	; (800a20c <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a164:	492a      	ldr	r1, [pc, #168]	; (800a210 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a166:	4a2b      	ldr	r2, [pc, #172]	; (800a214 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a168:	429d      	cmp	r5, r3
 800a16a:	bf18      	it	ne
 800a16c:	428d      	cmpne	r5, r1
 800a16e:	bf14      	ite	ne
 800a170:	2301      	movne	r3, #1
 800a172:	2300      	moveq	r3, #0
 800a174:	4295      	cmp	r5, r2
 800a176:	bf0c      	ite	eq
 800a178:	2300      	moveq	r3, #0
 800a17a:	f003 0301 	andne.w	r3, r3, #1
 800a17e:	b323      	cbz	r3, 800a1ca <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800a180:	4b21      	ldr	r3, [pc, #132]	; (800a208 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a182:	429d      	cmp	r5, r3
 800a184:	d021      	beq.n	800a1ca <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800a186:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a18a:	e44b      	b.n	8009a24 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800a18c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a190:	f7ff bbd6 	b.w	8009940 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a194:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a198:	e671      	b.n	8009e7e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a19a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a19e:	e655      	b.n	8009e4c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a1a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1a4:	e639      	b.n	8009e1a <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a1a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1aa:	e61c      	b.n	8009de6 <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a1ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1b0:	e40a      	b.n	80099c8 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a1b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1b6:	e46e      	b.n	8009a96 <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a1b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a1bc:	e4b1      	b.n	8009b22 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a1be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1c2:	e480      	b.n	8009ac6 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a1c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a1c8:	e494      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a1ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1ce:	e429      	b.n	8009a24 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a1d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a1d4:	e557      	b.n	8009c86 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a1d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1da:	e526      	b.n	8009c2a <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a1dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1e0:	e440      	b.n	8009a64 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a1e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a1e6:	e537      	b.n	8009c58 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 800a1e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a1ec:	e5a7      	b.n	8009d3e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a1ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1f2:	e502      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x362>
 800a1f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1f8:	e572      	b.n	8009ce0 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a1fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1fe:	e587      	b.n	8009d10 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a200:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a204:	e5b2      	b.n	8009d6c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800a206:	bf00      	nop
 800a208:	400264a0 	.word	0x400264a0
 800a20c:	40026040 	.word	0x40026040
 800a210:	40026440 	.word	0x40026440
 800a214:	400260a0 	.word	0x400260a0

0800a218 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800a21c:	2900      	cmp	r1, #0
 800a21e:	d15b      	bne.n	800a2d8 <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800a220:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800a224:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a226:	69e3      	ldr	r3, [r4, #28]
 800a228:	b90b      	cbnz	r3, 800a22e <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 800a22a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 800a22e:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a230:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a232:	4b2e      	ldr	r3, [pc, #184]	; (800a2ec <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 800a234:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a236:	402b      	ands	r3, r5
 800a238:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800a23a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a23e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a240:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a242:	f7fd ffbb 	bl	80081bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800a246:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a248:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a24a:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800a24c:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800a24e:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a250:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800a252:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a254:	f7fd ffb2 	bl	80081bc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800a258:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a25a:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a25e:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800a260:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800a262:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800a264:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800a266:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a268:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800a26a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800a26e:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800a270:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a272:	f7fd ffa3 	bl	80081bc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800a276:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a278:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800a27a:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800a27c:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800a27e:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a280:	f7fd ff9c 	bl	80081bc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800a284:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800a286:	491a      	ldr	r1, [pc, #104]	; (800a2f0 <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 800a288:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 800a28c:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a28e:	4a19      	ldr	r2, [pc, #100]	; (800a2f4 <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 800a290:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800a292:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a294:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a296:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800a298:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 800a29a:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a29c:	f7fd ff8e 	bl	80081bc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800a2a0:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a2a2:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a2a4:	4a14      	ldr	r2, [pc, #80]	; (800a2f8 <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800a2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2aa:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a2ac:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800a2ae:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a2b0:	f7fd ff84 	bl	80081bc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800a2b4:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a2b6:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800a2b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a2bc:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 800a2be:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a2c0:	d103      	bne.n	800a2ca <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800a2c2:	69d9      	ldr	r1, [r3, #28]
 800a2c4:	4a0d      	ldr	r2, [pc, #52]	; (800a2fc <ETH_MACDMAConfig+0xe4>)
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800a2ca:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800a2cc:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800a2ce:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800a2d0:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800a2d2:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800a2d4:	645a      	str	r2, [r3, #68]	; 0x44
}
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800a2d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 800a2dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2e0:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 800a2e4:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800a2e8:	e79d      	b.n	800a226 <ETH_MACDMAConfig+0xe>
 800a2ea:	bf00      	nop
 800a2ec:	ff20810f 	.word	0xff20810f
 800a2f0:	f8de3f23 	.word	0xf8de3f23
 800a2f4:	02200004 	.word	0x02200004
 800a2f8:	02c12080 	.word	0x02c12080
 800a2fc:	00010040 	.word	0x00010040
 800a300:	40028000 	.word	0x40028000

0800a304 <HAL_ETH_DMATxDescListInit>:
{
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 800a30a:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800a30e:	2801      	cmp	r0, #1
 800a310:	d03b      	beq.n	800a38a <HAL_ETH_DMATxDescListInit+0x86>
 800a312:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a316:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 800a318:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 800a31c:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800a320:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 800a324:	b31b      	cbz	r3, 800a36e <HAL_ETH_DMATxDescListInit+0x6a>
 800a326:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a328:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 800a32c:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800a330:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800a332:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 800a336:	f10c 36ff 	add.w	r6, ip, #4294967295
 800a33a:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800a33e:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800a340:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800a342:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a344:	f1ba 0f00 	cmp.w	sl, #0
 800a348:	d103      	bne.n	800a352 <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800a34a:	6817      	ldr	r7, [r2, #0]
 800a34c:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 800a350:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 800a352:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 800a354:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 800a358:	bf34      	ite	cc
 800a35a:	4675      	movcc	r5, lr
 800a35c:	f102 0e20 	addcs.w	lr, r2, #32
 800a360:	4563      	cmp	r3, ip
 800a362:	60d5      	str	r5, [r2, #12]
 800a364:	f10c 0501 	add.w	r5, ip, #1
 800a368:	4672      	mov	r2, lr
 800a36a:	46ac      	mov	ip, r5
 800a36c:	d8e3      	bhi.n	800a336 <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800a36e:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 800a372:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800a374:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800a376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37a:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 800a37c:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 800a380:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800a382:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 800a38a:	2002      	movs	r0, #2
}
 800a38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a390 <HAL_ETH_DMARxDescListInit>:
{
 800a390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a394:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 800a396:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800a39a:	2801      	cmp	r0, #1
 800a39c:	d033      	beq.n	800a406 <HAL_ETH_DMARxDescListInit+0x76>
 800a39e:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a3a2:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 800a3a4:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 800a3a6:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800a3aa:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 800a3ae:	b1eb      	cbz	r3, 800a3ec <HAL_ETH_DMARxDescListInit+0x5c>
 800a3b0:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 800a3b2:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a3b6:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800a3b8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a3bc:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 800a3c0:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800a3c4:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800a3c6:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 800a3c8:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800a3cc:	45c6      	cmp	lr, r8
 800a3ce:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800a3d2:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a3d4:	bf34      	ite	cc
 800a3d6:	4675      	movcc	r5, lr
 800a3d8:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 800a3dc:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a3de:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 800a3e0:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 800a3e2:	f10c 0501 	add.w	r5, ip, #1
 800a3e6:	4672      	mov	r2, lr
 800a3e8:	46ac      	mov	ip, r5
 800a3ea:	d8e9      	bhi.n	800a3c0 <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a3ec:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 800a3ee:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800a3f0:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f6:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 800a3f8:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 800a3fc:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800a3fe:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 800a402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 800a406:	2002      	movs	r0, #2
}
 800a408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a40c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800a40c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a410:	2b01      	cmp	r3, #1
 800a412:	d078      	beq.n	800a506 <HAL_ETH_TransmitFrame+0xfa>
 800a414:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a418:	2302      	movs	r3, #2
 800a41a:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 800a41c:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800a420:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 800a424:	2900      	cmp	r1, #0
 800a426:	d03c      	beq.n	800a4a2 <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a428:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a42a:	6818      	ldr	r0, [r3, #0]
 800a42c:	2800      	cmp	r0, #0
 800a42e:	db60      	blt.n	800a4f2 <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800a430:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800a434:	4281      	cmp	r1, r0
{
 800a436:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800a438:	d93c      	bls.n	800a4b4 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800a43a:	4c34      	ldr	r4, [pc, #208]	; (800a50c <HAL_ETH_TransmitFrame+0x100>)
 800a43c:	fba4 4c01 	umull	r4, ip, r4, r1
 800a440:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800a444:	fb00 101c 	mls	r0, r0, ip, r1
 800a448:	2800      	cmp	r0, #0
 800a44a:	d030      	beq.n	800a4ae <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 800a44c:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800a450:	482f      	ldr	r0, [pc, #188]	; (800a510 <HAL_ETH_TransmitFrame+0x104>)
 800a452:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 800a456:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a458:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800a45c:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 800a460:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800a464:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800a468:	e00f      	b.n	800a48a <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 800a46a:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a46c:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 800a46e:	d104      	bne.n	800a47a <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800a470:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800a472:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800a474:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800a478:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a47a:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 800a47c:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a47e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 800a482:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a484:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a486:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800a488:	d03b      	beq.n	800a502 <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800a490:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 800a492:	2c00      	cmp	r4, #0
 800a494:	d1e9      	bne.n	800a46a <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800a496:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a498:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800a49a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800a49e:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 800a4a0:	e7eb      	b.n	800a47a <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 800a4a2:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 800a4a4:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a4a8:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 800a4ac:	4770      	bx	lr
  if (bufcount == 1)
 800a4ae:	f1bc 0f01 	cmp.w	ip, #1
 800a4b2:	d1cd      	bne.n	800a450 <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a4b4:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800a4b6:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a4ba:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a4bc:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800a4c0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a4c2:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a4c4:	6819      	ldr	r1, [r3, #0]
 800a4c6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a4ca:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a4cc:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800a4ce:	6813      	ldr	r3, [r2, #0]
 800a4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d4:	6959      	ldr	r1, [r3, #20]
 800a4d6:	0749      	lsls	r1, r1, #29
 800a4d8:	d503      	bpl.n	800a4e2 <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800a4da:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 800a4dc:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800a4de:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 800a4e0:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 800a4e2:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 800a4e4:	2101      	movs	r1, #1
  return HAL_OK;
 800a4e6:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a4e8:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a4ec:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800a4f0:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800a4f2:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 800a4f4:	2300      	movs	r3, #0
    return HAL_ERROR;
 800a4f6:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800a4f8:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a4fc:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 800a500:	4770      	bx	lr
 800a502:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a504:	e7e3      	b.n	800a4ce <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 800a506:	2002      	movs	r0, #2
}
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	ac02b00b 	.word	0xac02b00b
 800a510:	fffffa0c 	.word	0xfffffa0c

0800a514 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 800a514:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d02f      	beq.n	800a57c <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 800a51c:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a51e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a520:	4602      	mov	r2, r0
{
 800a522:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 800a524:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a526:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a52a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a52e:	6819      	ldr	r1, [r3, #0]
 800a530:	2900      	cmp	r1, #0
 800a532:	db15      	blt.n	800a560 <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 800a534:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800a536:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800a538:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800a53a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800a53e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a542:	d016      	beq.n	800a572 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800a544:	6819      	ldr	r1, [r3, #0]
 800a546:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 800a54a:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800a54c:	d118      	bne.n	800a580 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800a54e:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 800a550:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800a552:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 800a554:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a556:	6819      	ldr	r1, [r3, #0]
 800a558:	2900      	cmp	r1, #0
 800a55a:	db01      	blt.n	800a560 <HAL_ETH_GetReceivedFrame_IT+0x4c>
 800a55c:	2804      	cmp	r0, #4
 800a55e:	d1ea      	bne.n	800a536 <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 800a560:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800a562:	2100      	movs	r1, #0
  return HAL_ERROR;
 800a564:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a566:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a56a:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 800a56e:	bc30      	pop	{r4, r5}
 800a570:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a572:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a574:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 800a576:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a578:	6293      	str	r3, [r2, #40]	; 0x28
 800a57a:	e7ec      	b.n	800a556 <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 800a57c:	2002      	movs	r0, #2
}
 800a57e:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 800a580:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800a582:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 800a584:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 800a586:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 800a588:	d011      	beq.n	800a5ae <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a58a:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a58c:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 800a58e:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a590:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a592:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a594:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 800a598:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a59a:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a59c:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a59e:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 800a5a0:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 800a5a4:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a5a6:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 800a5a8:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 800a5ac:	e7df      	b.n	800a56e <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5b2:	e7eb      	b.n	800a58c <HAL_ETH_GetReceivedFrame_IT+0x78>

0800a5b4 <HAL_ETH_TxCpltCallback>:
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop

0800a5b8 <HAL_ETH_ErrorCallback>:
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop

0800a5bc <HAL_ETH_IRQHandler>:
{
 800a5bc:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800a5be:	6803      	ldr	r3, [r0, #0]
{
 800a5c0:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800a5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c6:	695d      	ldr	r5, [r3, #20]
 800a5c8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800a5cc:	d125      	bne.n	800a61a <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800a5ce:	695a      	ldr	r2, [r3, #20]
 800a5d0:	07d2      	lsls	r2, r2, #31
 800a5d2:	d416      	bmi.n	800a602 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800a5d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a5d8:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	041b      	lsls	r3, r3, #16
 800a5de:	d400      	bmi.n	800a5e2 <HAL_ETH_IRQHandler+0x26>
}
 800a5e0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f7ff ffe8 	bl	800a5b8 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 800a5ee:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a5f4:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a5f6:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a5f8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a5fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a600:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 800a602:	f7ff ffd7 	bl	800a5b4 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	2201      	movs	r2, #1
 800a60a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a60e:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a610:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a614:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a618:	e7dc      	b.n	800a5d4 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800a61a:	f009 ff4f 	bl	80144bc <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800a622:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a628:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a62a:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a62c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a630:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a634:	e7ce      	b.n	800a5d4 <HAL_ETH_IRQHandler+0x18>
 800a636:	bf00      	nop

0800a638 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a638:	8a03      	ldrh	r3, [r0, #16]
 800a63a:	2b20      	cmp	r3, #32
{
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	4604      	mov	r4, r0
 800a640:	460e      	mov	r6, r1
 800a642:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a644:	d834      	bhi.n	800a6b0 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a646:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a64a:	2b82      	cmp	r3, #130	; 0x82
 800a64c:	d039      	beq.n	800a6c2 <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a64e:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 800a650:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a652:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a654:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a658:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a65a:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a65e:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a660:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a662:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a666:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a668:	430b      	orrs	r3, r1
 800a66a:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800a66c:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800a670:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a672:	f7fd fd9d 	bl	80081b0 <HAL_GetTick>
 800a676:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a678:	e004      	b.n	800a684 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800a67a:	6821      	ldr	r1, [r4, #0]
 800a67c:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a67e:	f013 0301 	ands.w	r3, r3, #1
 800a682:	d00d      	beq.n	800a6a0 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800a684:	f7fd fd94 	bl	80081b0 <HAL_GetTick>
 800a688:	1b83      	subs	r3, r0, r6
 800a68a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a68e:	d3f4      	bcc.n	800a67a <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800a690:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a692:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a694:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a696:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a69a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a69e:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a6a0:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800a6a2:	2101      	movs	r1, #1
  return HAL_OK;
 800a6a4:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a6a6:	b292      	uxth	r2, r2
 800a6a8:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800a6aa:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a6b0:	f240 5116 	movw	r1, #1302	; 0x516
 800a6b4:	4804      	ldr	r0, [pc, #16]	; (800a6c8 <HAL_ETH_ReadPHYRegister+0x90>)
 800a6b6:	f7fa fc7d 	bl	8004fb4 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a6ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a6be:	2b82      	cmp	r3, #130	; 0x82
 800a6c0:	d1c5      	bne.n	800a64e <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 800a6c2:	2002      	movs	r0, #2
}
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
 800a6c6:	bf00      	nop
 800a6c8:	0802c998 	.word	0x0802c998

0800a6cc <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a6cc:	8a03      	ldrh	r3, [r0, #16]
 800a6ce:	2b20      	cmp	r3, #32
{
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	460d      	mov	r5, r1
 800a6d6:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a6d8:	d833      	bhi.n	800a742 <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a6da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a6de:	2b42      	cmp	r3, #66	; 0x42
 800a6e0:	d038      	beq.n	800a754 <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a6e2:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 800a6e4:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a6e6:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a6e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800a6ec:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a6ee:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a6f0:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a6f4:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a6f6:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800a6f8:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a6fa:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a6fe:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a700:	430b      	orrs	r3, r1
 800a702:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800a704:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 800a708:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a70a:	f7fd fd51 	bl	80081b0 <HAL_GetTick>
 800a70e:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a710:	e004      	b.n	800a71c <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a716:	f013 0301 	ands.w	r3, r3, #1
 800a71a:	d00d      	beq.n	800a738 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800a71c:	f7fd fd48 	bl	80081b0 <HAL_GetTick>
 800a720:	1b43      	subs	r3, r0, r5
 800a722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a726:	d3f4      	bcc.n	800a712 <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 800a728:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a72a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a72c:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a72e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a736:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800a738:	2201      	movs	r2, #1
  return HAL_OK; 
 800a73a:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a73c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800a740:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a742:	f240 515e 	movw	r1, #1374	; 0x55e
 800a746:	4804      	ldr	r0, [pc, #16]	; (800a758 <HAL_ETH_WritePHYRegister+0x8c>)
 800a748:	f7fa fc34 	bl	8004fb4 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a74c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a750:	2b42      	cmp	r3, #66	; 0x42
 800a752:	d1c6      	bne.n	800a6e2 <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800a754:	2002      	movs	r0, #2
}
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	0802c998 	.word	0x0802c998

0800a75c <HAL_ETH_Init>:
{
 800a75c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800a75e:	2300      	movs	r3, #0
{
 800a760:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800a762:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800a764:	2800      	cmp	r0, #0
 800a766:	f000 80f5 	beq.w	800a954 <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a76a:	6843      	ldr	r3, [r0, #4]
 800a76c:	4604      	mov	r4, r0
 800a76e:	2b01      	cmp	r3, #1
 800a770:	f200 809c 	bhi.w	800a8ac <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a774:	69a3      	ldr	r3, [r4, #24]
 800a776:	2b01      	cmp	r3, #1
 800a778:	f200 808f 	bhi.w	800a89a <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a77c:	69e3      	ldr	r3, [r4, #28]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d873      	bhi.n	800a86a <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a782:	6a23      	ldr	r3, [r4, #32]
 800a784:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a788:	d177      	bne.n	800a87a <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a78a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a78e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a792:	2b00      	cmp	r3, #0
 800a794:	d07b      	beq.n	800a88e <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a796:	4b91      	ldr	r3, [pc, #580]	; (800a9dc <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a798:	4a91      	ldr	r2, [pc, #580]	; (800a9e0 <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a79a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a79c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800a7a0:	6459      	str	r1, [r3, #68]	; 0x44
 800a7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a7ac:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a7ae:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a7b0:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a7b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a7b8:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a7ba:	6851      	ldr	r1, [r2, #4]
 800a7bc:	6a20      	ldr	r0, [r4, #32]
 800a7be:	4301      	orrs	r1, r0
 800a7c0:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	f042 0201 	orr.w	r2, r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800a7ca:	f7fd fcf1 	bl	80081b0 <HAL_GetTick>
 800a7ce:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a7d0:	e005      	b.n	800a7de <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800a7d2:	f7fd fced 	bl	80081b0 <HAL_GetTick>
 800a7d6:	1b43      	subs	r3, r0, r5
 800a7d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a7dc:	d86f      	bhi.n	800a8be <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a7e4:	6812      	ldr	r2, [r2, #0]
 800a7e6:	07d0      	lsls	r0, r2, #31
 800a7e8:	d4f3      	bmi.n	800a7d2 <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 800a7ea:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800a7ec:	f003 faac 	bl	800dd48 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a7f0:	4b7c      	ldr	r3, [pc, #496]	; (800a9e4 <HAL_ETH_Init+0x288>)
 800a7f2:	4a7d      	ldr	r2, [pc, #500]	; (800a9e8 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800a7f4:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a7f8:	4403      	add	r3, r0
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d274      	bcs.n	800a8e8 <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800a7fe:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a802:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a804:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a808:	2100      	movs	r1, #0
 800a80a:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a80c:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a80e:	f7ff ff5d 	bl	800a6cc <HAL_ETH_WritePHYRegister>
 800a812:	4605      	mov	r5, r0
 800a814:	2800      	cmp	r0, #0
 800a816:	d15c      	bne.n	800a8d2 <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 800a818:	20ff      	movs	r0, #255	; 0xff
 800a81a:	f7fd fccf 	bl	80081bc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a81e:	6863      	ldr	r3, [r4, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d178      	bne.n	800a916 <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a824:	68a3      	ldr	r3, [r4, #8]
 800a826:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a82a:	f040 809e 	bne.w	800a96a <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a82e:	68e3      	ldr	r3, [r4, #12]
 800a830:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a834:	f040 8092 	bne.w	800a95c <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800a838:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a83a:	08db      	lsrs	r3, r3, #3
 800a83c:	2100      	movs	r1, #0
 800a83e:	4620      	mov	r0, r4
 800a840:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800a844:	b292      	uxth	r2, r2
 800a846:	f7ff ff41 	bl	800a6cc <HAL_ETH_WritePHYRegister>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d141      	bne.n	800a8d2 <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 800a84e:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a852:	f7fd fcb3 	bl	80081bc <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800a856:	4620      	mov	r0, r4
 800a858:	2100      	movs	r1, #0
 800a85a:	f7ff fcdd 	bl	800a218 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800a85e:	2301      	movs	r3, #1
}
 800a860:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800a862:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a866:	b003      	add	sp, #12
 800a868:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a86a:	21e0      	movs	r1, #224	; 0xe0
 800a86c:	485f      	ldr	r0, [pc, #380]	; (800a9ec <HAL_ETH_Init+0x290>)
 800a86e:	f7fa fba1 	bl	8004fb4 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a872:	6a23      	ldr	r3, [r4, #32]
 800a874:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a878:	d087      	beq.n	800a78a <HAL_ETH_Init+0x2e>
 800a87a:	21e1      	movs	r1, #225	; 0xe1
 800a87c:	485b      	ldr	r0, [pc, #364]	; (800a9ec <HAL_ETH_Init+0x290>)
 800a87e:	f7fa fb99 	bl	8004fb4 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a882:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a886:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d183      	bne.n	800a796 <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 800a88e:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 800a890:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800a894:	f009 fd84 	bl	80143a0 <HAL_ETH_MspInit>
 800a898:	e77d      	b.n	800a796 <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a89a:	21df      	movs	r1, #223	; 0xdf
 800a89c:	4853      	ldr	r0, [pc, #332]	; (800a9ec <HAL_ETH_Init+0x290>)
 800a89e:	f7fa fb89 	bl	8004fb4 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a8a2:	69e3      	ldr	r3, [r4, #28]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	f67f af6c 	bls.w	800a782 <HAL_ETH_Init+0x26>
 800a8aa:	e7de      	b.n	800a86a <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a8ac:	21de      	movs	r1, #222	; 0xde
 800a8ae:	484f      	ldr	r0, [pc, #316]	; (800a9ec <HAL_ETH_Init+0x290>)
 800a8b0:	f7fa fb80 	bl	8004fb4 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a8b4:	69a3      	ldr	r3, [r4, #24]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	f67f af60 	bls.w	800a77c <HAL_ETH_Init+0x20>
 800a8bc:	e7ed      	b.n	800a89a <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a8be:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 800a8c0:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 800a8c2:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a8c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a8c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	b003      	add	sp, #12
 800a8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	f7ff fc9f 	bl	800a218 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800a8da:	2301      	movs	r3, #1
      return HAL_ERROR;
 800a8dc:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 800a8de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	b003      	add	sp, #12
 800a8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800a8e8:	4b41      	ldr	r3, [pc, #260]	; (800a9f0 <HAL_ETH_Init+0x294>)
 800a8ea:	4a42      	ldr	r2, [pc, #264]	; (800a9f4 <HAL_ETH_Init+0x298>)
 800a8ec:	4403      	add	r3, r0
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d90e      	bls.n	800a910 <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800a8f2:	4b41      	ldr	r3, [pc, #260]	; (800a9f8 <HAL_ETH_Init+0x29c>)
 800a8f4:	4a41      	ldr	r2, [pc, #260]	; (800a9fc <HAL_ETH_Init+0x2a0>)
 800a8f6:	4403      	add	r3, r0
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d382      	bcc.n	800a802 <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800a8fc:	4b40      	ldr	r3, [pc, #256]	; (800aa00 <HAL_ETH_Init+0x2a4>)
 800a8fe:	4a41      	ldr	r2, [pc, #260]	; (800aa04 <HAL_ETH_Init+0x2a8>)
 800a900:	4403      	add	r3, r0
 800a902:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800a904:	bf94      	ite	ls
 800a906:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800a90a:	f045 0510 	orrhi.w	r5, r5, #16
 800a90e:	e778      	b.n	800a802 <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800a910:	f045 050c 	orr.w	r5, r5, #12
 800a914:	e775      	b.n	800a802 <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 800a916:	f7fd fc4b 	bl	80081b0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a91a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a91e:	4606      	mov	r6, r0
 800a920:	e002      	b.n	800a928 <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800a922:	9b00      	ldr	r3, [sp, #0]
 800a924:	0759      	lsls	r1, r3, #29
 800a926:	d426      	bmi.n	800a976 <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a928:	466a      	mov	r2, sp
 800a92a:	2101      	movs	r1, #1
 800a92c:	4620      	mov	r0, r4
 800a92e:	f7ff fe83 	bl	800a638 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a932:	f7fd fc3d 	bl	80081b0 <HAL_GetTick>
 800a936:	1b80      	subs	r0, r0, r6
 800a938:	42b8      	cmp	r0, r7
 800a93a:	d9f2      	bls.n	800a922 <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 800a93c:	2101      	movs	r1, #1
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff fc6a 	bl	800a218 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800a944:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800a946:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800a948:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800a94a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800a94e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800a952:	e7bb      	b.n	800a8cc <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 800a954:	2501      	movs	r5, #1
}
 800a956:	4628      	mov	r0, r5
 800a958:	b003      	add	sp, #12
 800a95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a95c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800a960:	4822      	ldr	r0, [pc, #136]	; (800a9ec <HAL_ETH_Init+0x290>)
 800a962:	f7fa fb27 	bl	8004fb4 <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a966:	68e3      	ldr	r3, [r4, #12]
 800a968:	e766      	b.n	800a838 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a96a:	f240 11c5 	movw	r1, #453	; 0x1c5
 800a96e:	481f      	ldr	r0, [pc, #124]	; (800a9ec <HAL_ETH_Init+0x290>)
 800a970:	f7fa fb20 	bl	8004fb4 <assert_failed>
 800a974:	e75b      	b.n	800a82e <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800a976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a97a:	2100      	movs	r1, #0
 800a97c:	4620      	mov	r0, r4
 800a97e:	f7ff fea5 	bl	800a6cc <HAL_ETH_WritePHYRegister>
 800a982:	2800      	cmp	r0, #0
 800a984:	d1a5      	bne.n	800a8d2 <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 800a986:	f7fd fc13 	bl	80081b0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a98a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a98e:	4606      	mov	r6, r0
 800a990:	e002      	b.n	800a998 <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a992:	9b00      	ldr	r3, [sp, #0]
 800a994:	069a      	lsls	r2, r3, #26
 800a996:	d40a      	bmi.n	800a9ae <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a998:	466a      	mov	r2, sp
 800a99a:	2101      	movs	r1, #1
 800a99c:	4620      	mov	r0, r4
 800a99e:	f7ff fe4b 	bl	800a638 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a9a2:	f7fd fc05 	bl	80081b0 <HAL_GetTick>
 800a9a6:	1b80      	subs	r0, r0, r6
 800a9a8:	42b8      	cmp	r0, r7
 800a9aa:	d9f2      	bls.n	800a992 <HAL_ETH_Init+0x236>
 800a9ac:	e7c6      	b.n	800a93c <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800a9ae:	466a      	mov	r2, sp
 800a9b0:	2110      	movs	r1, #16
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7ff fe40 	bl	800a638 <HAL_ETH_ReadPHYRegister>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d18a      	bne.n	800a8d2 <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a9bc:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800a9be:	f013 0204 	ands.w	r2, r3, #4
 800a9c2:	bf18      	it	ne
 800a9c4:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800a9c8:	079b      	lsls	r3, r3, #30
 800a9ca:	60e2      	str	r2, [r4, #12]
 800a9cc:	d501      	bpl.n	800a9d2 <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800a9ce:	60a0      	str	r0, [r4, #8]
 800a9d0:	e741      	b.n	800a856 <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 800a9d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a9d6:	60a3      	str	r3, [r4, #8]
 800a9d8:	e73d      	b.n	800a856 <HAL_ETH_Init+0xfa>
 800a9da:	bf00      	nop
 800a9dc:	40023800 	.word	0x40023800
 800a9e0:	40013800 	.word	0x40013800
 800a9e4:	feced300 	.word	0xfeced300
 800a9e8:	00e4e1c0 	.word	0x00e4e1c0
 800a9ec:	0802c998 	.word	0x0802c998
 800a9f0:	fde9f140 	.word	0xfde9f140
 800a9f4:	017d783f 	.word	0x017d783f
 800a9f8:	fc6c7900 	.word	0xfc6c7900
 800a9fc:	02625a00 	.word	0x02625a00
 800aa00:	fa0a1f00 	.word	0xfa0a1f00
 800aa04:	02faf07f 	.word	0x02faf07f

0800aa08 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800aa08:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d044      	beq.n	800aa9a <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800aa10:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800aa12:	2202      	movs	r2, #2
{  
 800aa14:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800aa16:	2601      	movs	r6, #1
{  
 800aa18:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 800aa1a:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 800aa1c:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800aa20:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800aa24:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800aa26:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa28:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	f042 0208 	orr.w	r2, r2, #8
 800aa30:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa36:	f7fd fbc1 	bl	80081bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800aa3a:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa3c:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800aa42:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	f042 0204 	orr.w	r2, r2, #4
 800aa4a:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa50:	f7fd fbb4 	bl	80081bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800aa54:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa56:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800aa5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800aa60:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800aa62:	699a      	ldr	r2, [r3, #24]
 800aa64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aa68:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa6e:	f7fd fba5 	bl	80081bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800aa72:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800aa74:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 800aa76:	9a01      	ldr	r2, [sp, #4]
 800aa78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa7c:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800aa7e:	699a      	ldr	r2, [r3, #24]
 800aa80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa84:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800aa86:	699a      	ldr	r2, [r3, #24]
 800aa88:	f042 0202 	orr.w	r2, r2, #2
 800aa8c:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 800aa8e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800aa92:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800aa96:	b004      	add	sp, #16
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800aa9a:	2002      	movs	r0, #2
}
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop

0800aaa0 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800aaa0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d046      	beq.n	800ab36 <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800aaa8:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800aaaa:	2102      	movs	r1, #2
{  
 800aaac:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800aaae:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 800aab2:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800aab4:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 800aab8:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 800aaba:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800aabe:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800aac0:	6991      	ldr	r1, [r2, #24]
 800aac2:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aac4:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800aac6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800aaca:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800aacc:	6991      	ldr	r1, [r2, #24]
 800aace:	f021 0102 	bic.w	r1, r1, #2
 800aad2:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800aad4:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	f022 0204 	bic.w	r2, r2, #4
 800aadc:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aae2:	f7fd fb6b 	bl	80081bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800aae6:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aae8:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800aaee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800aaf2:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aafa:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ab00:	f7fd fb5c 	bl	80081bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800ab04:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ab06:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800ab08:	9902      	ldr	r1, [sp, #8]
 800ab0a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800ab0e:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800ab10:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	f022 0208 	bic.w	r2, r2, #8
 800ab18:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ab1e:	f7fd fb4d 	bl	80081bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800ab22:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800ab24:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800ab2a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800ab2e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800ab32:	b004      	add	sp, #16
 800ab34:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800ab36:	2002      	movs	r0, #2
}
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop

0800ab3c <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800ab3c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	f000 8249 	beq.w	800afd8 <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800ab46:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800ab48:	2202      	movs	r2, #2
{
 800ab4a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800ab4c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800ab50:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800ab52:	f04f 0101 	mov.w	r1, #1
 800ab56:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800ab58:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800ab5c:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800ab60:	f040 8207 	bne.w	800af72 <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800ab64:	68eb      	ldr	r3, [r5, #12]
 800ab66:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800ab6a:	f040 8114 	bne.w	800ad96 <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800ab6e:	2c00      	cmp	r4, #0
 800ab70:	f000 8119 	beq.w	800ada6 <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800ab7a:	f040 8139 	bne.w	800adf0 <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800ab7e:	6863      	ldr	r3, [r4, #4]
 800ab80:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800ab84:	f040 816b 	bne.w	800ae5e <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800ab88:	68a3      	ldr	r3, [r4, #8]
 800ab8a:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ab8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab92:	d002      	beq.n	800ab9a <HAL_ETH_ConfigMAC+0x5e>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f040 8221 	bne.w	800afdc <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800ab9a:	68e3      	ldr	r3, [r4, #12]
 800ab9c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800aba0:	f040 8152 	bne.w	800ae48 <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800aba4:	6923      	ldr	r3, [r4, #16]
 800aba6:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800abaa:	f040 8142 	bne.w	800ae32 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800abae:	6963      	ldr	r3, [r4, #20]
 800abb0:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800abb4:	f040 8132 	bne.w	800ae1c <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800abb8:	69a3      	ldr	r3, [r4, #24]
 800abba:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800abbe:	f040 8122 	bne.w	800ae06 <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800abc2:	69e3      	ldr	r3, [r4, #28]
 800abc4:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800abc8:	f040 81a3 	bne.w	800af12 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800abcc:	6a23      	ldr	r3, [r4, #32]
 800abce:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800abd2:	f040 818e 	bne.w	800aef2 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800abd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd8:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800abdc:	f040 8193 	bne.w	800af06 <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800abe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abe2:	f033 0310 	bics.w	r3, r3, #16
 800abe6:	f040 8179 	bne.w	800aedc <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800abea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800abec:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800abf0:	f040 819a 	bne.w	800af28 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800abf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800abf6:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800abfa:	d003      	beq.n	800ac04 <HAL_ETH_ConfigMAC+0xc8>
 800abfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac00:	f040 81d8 	bne.w	800afb4 <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800ac04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac0a:	2a40      	cmp	r2, #64	; 0x40
 800ac0c:	d002      	beq.n	800ac14 <HAL_ETH_ConfigMAC+0xd8>
 800ac0e:	2b80      	cmp	r3, #128	; 0x80
 800ac10:	f040 81ba 	bne.w	800af88 <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800ac14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac16:	f033 0320 	bics.w	r3, r3, #32
 800ac1a:	f040 80de 	bne.w	800adda <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800ac1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac20:	f033 0308 	bics.w	r3, r3, #8
 800ac24:	f040 80cf 	bne.w	800adc6 <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800ac28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	f200 80a5 	bhi.w	800ad7a <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800ac30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ac32:	f240 4204 	movw	r2, #1028	; 0x404
 800ac36:	4293      	cmp	r3, r2
 800ac38:	bf18      	it	ne
 800ac3a:	2b10      	cmpne	r3, #16
 800ac3c:	d003      	beq.n	800ac46 <HAL_ETH_ConfigMAC+0x10a>
 800ac3e:	f033 0304 	bics.w	r3, r3, #4
 800ac42:	f040 81c3 	bne.w	800afcc <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800ac46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ac48:	f033 0202 	bics.w	r2, r3, #2
 800ac4c:	d004      	beq.n	800ac58 <HAL_ETH_ConfigMAC+0x11c>
 800ac4e:	f240 4202 	movw	r2, #1026	; 0x402
 800ac52:	4293      	cmp	r3, r2
 800ac54:	f040 81a3 	bne.w	800af9e <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800ac58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac5e:	f080 816e 	bcs.w	800af3e <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800ac62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac64:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ac68:	f040 8173 	bne.w	800af52 <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800ac6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ac6e:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800ac72:	f040 8178 	bne.w	800af66 <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800ac76:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ac78:	f033 0308 	bics.w	r3, r3, #8
 800ac7c:	f040 8123 	bne.w	800aec6 <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800ac80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac82:	f033 0304 	bics.w	r3, r3, #4
 800ac86:	f040 8113 	bne.w	800aeb0 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800ac8a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ac8c:	f033 0302 	bics.w	r3, r3, #2
 800ac90:	f040 8103 	bne.w	800ae9a <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800ac94:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ac96:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800ac9a:	f040 80f3 	bne.w	800ae84 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800ac9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca4:	f080 80e8 	bcs.w	800ae78 <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800aca8:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800acaa:	49b5      	ldr	r1, [pc, #724]	; (800af80 <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800acac:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800acae:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800acb0:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800acb2:	6860      	ldr	r0, [r4, #4]
 800acb4:	4303      	orrs	r3, r0
 800acb6:	68a0      	ldr	r0, [r4, #8]
 800acb8:	4303      	orrs	r3, r0
 800acba:	68e0      	ldr	r0, [r4, #12]
 800acbc:	4303      	orrs	r3, r0
 800acbe:	6920      	ldr	r0, [r4, #16]
 800acc0:	4303      	orrs	r3, r0
 800acc2:	6960      	ldr	r0, [r4, #20]
 800acc4:	4303      	orrs	r3, r0
 800acc6:	69a0      	ldr	r0, [r4, #24]
 800acc8:	4303      	orrs	r3, r0
 800acca:	69e0      	ldr	r0, [r4, #28]
 800accc:	4303      	orrs	r3, r0
 800acce:	6a20      	ldr	r0, [r4, #32]
 800acd0:	4303      	orrs	r3, r0
 800acd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800acd4:	4303      	orrs	r3, r0
 800acd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800acd8:	4303      	orrs	r3, r0
 800acda:	68a8      	ldr	r0, [r5, #8]
 800acdc:	4303      	orrs	r3, r0
 800acde:	68e8      	ldr	r0, [r5, #12]
 800ace0:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800ace2:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800ace4:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800ace6:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800ace8:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800acea:	f7fd fa67 	bl	80081bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800acee:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800acf0:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800acf2:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800acf6:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800acf8:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800acfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acfc:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800acfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ad00:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800ad02:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ad04:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800ad06:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ad08:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800ad0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ad0c:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800ad0e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ad10:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800ad12:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800ad14:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad16:	f7fd fa51 	bl	80081bc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800ad1a:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800ad1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800ad1e:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800ad20:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800ad22:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800ad24:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800ad28:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800ad2a:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800ad2c:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800ad2e:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800ad32:	4303      	orrs	r3, r0
 800ad34:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ad36:	4303      	orrs	r3, r0
 800ad38:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800ad3a:	4303      	orrs	r3, r0
 800ad3c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800ad3e:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800ad40:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800ad42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad46:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800ad48:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800ad4a:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800ad4c:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad4e:	f7fd fa35 	bl	80081bc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800ad52:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad54:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800ad56:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800ad5a:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800ad60:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad62:	f7fd fa2b 	bl	80081bc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800ad66:	682b      	ldr	r3, [r5, #0]
 800ad68:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800ad6a:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800ad6c:	2201      	movs	r2, #1
  return HAL_OK;  
 800ad6e:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800ad70:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800ad74:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800ad78:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800ad7a:	f240 6123 	movw	r1, #1571	; 0x623
 800ad7e:	4881      	ldr	r0, [pc, #516]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ad80:	f7fa f918 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800ad84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ad86:	f240 4204 	movw	r2, #1028	; 0x404
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	bf18      	it	ne
 800ad8e:	2b10      	cmpne	r3, #16
 800ad90:	f47f af55 	bne.w	800ac3e <HAL_ETH_ConfigMAC+0x102>
 800ad94:	e757      	b.n	800ac46 <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800ad96:	f240 610e 	movw	r1, #1550	; 0x60e
 800ad9a:	487a      	ldr	r0, [pc, #488]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ad9c:	f7fa f90a 	bl	8004fb4 <assert_failed>
  if (macconf != NULL)
 800ada0:	2c00      	cmp	r4, #0
 800ada2:	f47f aee7 	bne.w	800ab74 <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800ada6:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800ada8:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800adaa:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800adae:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800adb0:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800adb2:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800adb6:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800adb8:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800adba:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800adbc:	f7fd f9fe 	bl	80081bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	601c      	str	r4, [r3, #0]
 800adc4:	e7d1      	b.n	800ad6a <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800adc6:	f240 6122 	movw	r1, #1570	; 0x622
 800adca:	486e      	ldr	r0, [pc, #440]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800adcc:	f7fa f8f2 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800add0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800add2:	2b01      	cmp	r3, #1
 800add4:	f67f af2c 	bls.w	800ac30 <HAL_ETH_ConfigMAC+0xf4>
 800add8:	e7cf      	b.n	800ad7a <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800adda:	f240 6121 	movw	r1, #1569	; 0x621
 800adde:	4869      	ldr	r0, [pc, #420]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ade0:	f7fa f8e8 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800ade4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ade6:	f033 0308 	bics.w	r3, r3, #8
 800adea:	f43f af1d 	beq.w	800ac28 <HAL_ETH_ConfigMAC+0xec>
 800adee:	e7ea      	b.n	800adc6 <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800adf0:	f240 6113 	movw	r1, #1555	; 0x613
 800adf4:	4863      	ldr	r0, [pc, #396]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800adf6:	f7fa f8dd 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800adfa:	6863      	ldr	r3, [r4, #4]
 800adfc:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800ae00:	f43f aec2 	beq.w	800ab88 <HAL_ETH_ConfigMAC+0x4c>
 800ae04:	e02b      	b.n	800ae5e <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800ae06:	f240 6119 	movw	r1, #1561	; 0x619
 800ae0a:	485e      	ldr	r0, [pc, #376]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ae0c:	f7fa f8d2 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800ae10:	69e3      	ldr	r3, [r4, #28]
 800ae12:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800ae16:	f43f aed9 	beq.w	800abcc <HAL_ETH_ConfigMAC+0x90>
 800ae1a:	e07a      	b.n	800af12 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800ae1c:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800ae20:	4858      	ldr	r0, [pc, #352]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ae22:	f7fa f8c7 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800ae26:	69a3      	ldr	r3, [r4, #24]
 800ae28:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800ae2c:	f43f aec9 	beq.w	800abc2 <HAL_ETH_ConfigMAC+0x86>
 800ae30:	e7e9      	b.n	800ae06 <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800ae32:	f240 6117 	movw	r1, #1559	; 0x617
 800ae36:	4853      	ldr	r0, [pc, #332]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ae38:	f7fa f8bc 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800ae3c:	6963      	ldr	r3, [r4, #20]
 800ae3e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800ae42:	f43f aeb9 	beq.w	800abb8 <HAL_ETH_ConfigMAC+0x7c>
 800ae46:	e7e9      	b.n	800ae1c <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800ae48:	f240 6116 	movw	r1, #1558	; 0x616
 800ae4c:	484d      	ldr	r0, [pc, #308]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ae4e:	f7fa f8b1 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800ae52:	6923      	ldr	r3, [r4, #16]
 800ae54:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800ae58:	f43f aea9 	beq.w	800abae <HAL_ETH_ConfigMAC+0x72>
 800ae5c:	e7e9      	b.n	800ae32 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800ae5e:	f240 6114 	movw	r1, #1556	; 0x614
 800ae62:	4848      	ldr	r0, [pc, #288]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ae64:	f7fa f8a6 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800ae68:	68a3      	ldr	r3, [r4, #8]
 800ae6a:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ae6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ae72:	f47f ae8f 	bne.w	800ab94 <HAL_ETH_ConfigMAC+0x58>
 800ae76:	e690      	b.n	800ab9a <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800ae78:	f240 612d 	movw	r1, #1581	; 0x62d
 800ae7c:	4841      	ldr	r0, [pc, #260]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ae7e:	f7fa f899 	bl	8004fb4 <assert_failed>
 800ae82:	e711      	b.n	800aca8 <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800ae84:	f240 612c 	movw	r1, #1580	; 0x62c
 800ae88:	483e      	ldr	r0, [pc, #248]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800ae8a:	f7fa f893 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800ae8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae94:	f4ff af08 	bcc.w	800aca8 <HAL_ETH_ConfigMAC+0x16c>
 800ae98:	e7ee      	b.n	800ae78 <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800ae9a:	f240 612b 	movw	r1, #1579	; 0x62b
 800ae9e:	4839      	ldr	r0, [pc, #228]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800aea0:	f7fa f888 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800aea4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aea6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800aeaa:	f43f aef8 	beq.w	800ac9e <HAL_ETH_ConfigMAC+0x162>
 800aeae:	e7e9      	b.n	800ae84 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800aeb0:	f240 612a 	movw	r1, #1578	; 0x62a
 800aeb4:	4833      	ldr	r0, [pc, #204]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800aeb6:	f7fa f87d 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800aeba:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800aebc:	f033 0302 	bics.w	r3, r3, #2
 800aec0:	f43f aee8 	beq.w	800ac94 <HAL_ETH_ConfigMAC+0x158>
 800aec4:	e7e9      	b.n	800ae9a <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800aec6:	f240 6129 	movw	r1, #1577	; 0x629
 800aeca:	482e      	ldr	r0, [pc, #184]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800aecc:	f7fa f872 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800aed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aed2:	f033 0304 	bics.w	r3, r3, #4
 800aed6:	f43f aed8 	beq.w	800ac8a <HAL_ETH_ConfigMAC+0x14e>
 800aeda:	e7e9      	b.n	800aeb0 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800aedc:	f240 611d 	movw	r1, #1565	; 0x61d
 800aee0:	4828      	ldr	r0, [pc, #160]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800aee2:	f7fa f867 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800aee6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aee8:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800aeec:	f43f ae82 	beq.w	800abf4 <HAL_ETH_ConfigMAC+0xb8>
 800aef0:	e01a      	b.n	800af28 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800aef2:	f240 611b 	movw	r1, #1563	; 0x61b
 800aef6:	4823      	ldr	r0, [pc, #140]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800aef8:	f7fa f85c 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800aefc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aefe:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800af02:	f43f ae6d 	beq.w	800abe0 <HAL_ETH_ConfigMAC+0xa4>
 800af06:	f240 611c 	movw	r1, #1564	; 0x61c
 800af0a:	481e      	ldr	r0, [pc, #120]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800af0c:	f7fa f852 	bl	8004fb4 <assert_failed>
 800af10:	e666      	b.n	800abe0 <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800af12:	f240 611a 	movw	r1, #1562	; 0x61a
 800af16:	481b      	ldr	r0, [pc, #108]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800af18:	f7fa f84c 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800af1c:	6a23      	ldr	r3, [r4, #32]
 800af1e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800af22:	f43f ae58 	beq.w	800abd6 <HAL_ETH_ConfigMAC+0x9a>
 800af26:	e7e4      	b.n	800aef2 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800af28:	f240 611e 	movw	r1, #1566	; 0x61e
 800af2c:	4815      	ldr	r0, [pc, #84]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800af2e:	f7fa f841 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800af32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af34:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800af38:	f47f ae60 	bne.w	800abfc <HAL_ETH_ConfigMAC+0xc0>
 800af3c:	e662      	b.n	800ac04 <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800af3e:	f240 6126 	movw	r1, #1574	; 0x626
 800af42:	4810      	ldr	r0, [pc, #64]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800af44:	f7fa f836 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800af48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af4a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800af4e:	f43f ae8d 	beq.w	800ac6c <HAL_ETH_ConfigMAC+0x130>
 800af52:	f240 6127 	movw	r1, #1575	; 0x627
 800af56:	480b      	ldr	r0, [pc, #44]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800af58:	f7fa f82c 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800af5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800af5e:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800af62:	f43f ae88 	beq.w	800ac76 <HAL_ETH_ConfigMAC+0x13a>
 800af66:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800af6a:	4806      	ldr	r0, [pc, #24]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800af6c:	f7fa f822 	bl	8004fb4 <assert_failed>
 800af70:	e681      	b.n	800ac76 <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800af72:	f240 610d 	movw	r1, #1549	; 0x60d
 800af76:	4803      	ldr	r0, [pc, #12]	; (800af84 <HAL_ETH_ConfigMAC+0x448>)
 800af78:	f7fa f81c 	bl	8004fb4 <assert_failed>
 800af7c:	e5f2      	b.n	800ab64 <HAL_ETH_ConfigMAC+0x28>
 800af7e:	bf00      	nop
 800af80:	ff20810f 	.word	0xff20810f
 800af84:	0802c998 	.word	0x0802c998
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800af88:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800af8c:	4816      	ldr	r0, [pc, #88]	; (800afe8 <HAL_ETH_ConfigMAC+0x4ac>)
 800af8e:	f7fa f811 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800af92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af94:	f033 0320 	bics.w	r3, r3, #32
 800af98:	f43f ae41 	beq.w	800ac1e <HAL_ETH_ConfigMAC+0xe2>
 800af9c:	e71d      	b.n	800adda <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800af9e:	f240 6125 	movw	r1, #1573	; 0x625
 800afa2:	4811      	ldr	r0, [pc, #68]	; (800afe8 <HAL_ETH_ConfigMAC+0x4ac>)
 800afa4:	f7fa f806 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800afa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800afaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afae:	f4ff ae58 	bcc.w	800ac62 <HAL_ETH_ConfigMAC+0x126>
 800afb2:	e7c4      	b.n	800af3e <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800afb4:	f240 611f 	movw	r1, #1567	; 0x61f
 800afb8:	480b      	ldr	r0, [pc, #44]	; (800afe8 <HAL_ETH_ConfigMAC+0x4ac>)
 800afba:	f7f9 fffb 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800afbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afc4:	2a40      	cmp	r2, #64	; 0x40
 800afc6:	f47f ae22 	bne.w	800ac0e <HAL_ETH_ConfigMAC+0xd2>
 800afca:	e623      	b.n	800ac14 <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800afcc:	f240 6124 	movw	r1, #1572	; 0x624
 800afd0:	4805      	ldr	r0, [pc, #20]	; (800afe8 <HAL_ETH_ConfigMAC+0x4ac>)
 800afd2:	f7f9 ffef 	bl	8004fb4 <assert_failed>
 800afd6:	e636      	b.n	800ac46 <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800afd8:	2002      	movs	r0, #2
}
 800afda:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800afdc:	f240 6115 	movw	r1, #1557	; 0x615
 800afe0:	4801      	ldr	r0, [pc, #4]	; (800afe8 <HAL_ETH_ConfigMAC+0x4ac>)
 800afe2:	f7f9 ffe7 	bl	8004fb4 <assert_failed>
 800afe6:	e5d8      	b.n	800ab9a <HAL_ETH_ConfigMAC+0x5e>
 800afe8:	0802c998 	.word	0x0802c998

0800afec <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800afec:	4b18      	ldr	r3, [pc, #96]	; (800b050 <FLASH_SetErrorCode+0x64>)
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	079b      	lsls	r3, r3, #30
 800aff2:	d504      	bpl.n	800affe <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800aff4:	4a17      	ldr	r2, [pc, #92]	; (800b054 <FLASH_SetErrorCode+0x68>)
 800aff6:	6993      	ldr	r3, [r2, #24]
 800aff8:	f043 0320 	orr.w	r3, r3, #32
 800affc:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800affe:	4b14      	ldr	r3, [pc, #80]	; (800b050 <FLASH_SetErrorCode+0x64>)
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	06d8      	lsls	r0, r3, #27
 800b004:	d504      	bpl.n	800b010 <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b006:	4a13      	ldr	r2, [pc, #76]	; (800b054 <FLASH_SetErrorCode+0x68>)
 800b008:	6993      	ldr	r3, [r2, #24]
 800b00a:	f043 0310 	orr.w	r3, r3, #16
 800b00e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800b010:	4b0f      	ldr	r3, [pc, #60]	; (800b050 <FLASH_SetErrorCode+0x64>)
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	0699      	lsls	r1, r3, #26
 800b016:	d504      	bpl.n	800b022 <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b018:	4a0e      	ldr	r2, [pc, #56]	; (800b054 <FLASH_SetErrorCode+0x68>)
 800b01a:	6993      	ldr	r3, [r2, #24]
 800b01c:	f043 0308 	orr.w	r3, r3, #8
 800b020:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800b022:	4b0b      	ldr	r3, [pc, #44]	; (800b050 <FLASH_SetErrorCode+0x64>)
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	065a      	lsls	r2, r3, #25
 800b028:	d504      	bpl.n	800b034 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800b02a:	4a0a      	ldr	r2, [pc, #40]	; (800b054 <FLASH_SetErrorCode+0x68>)
 800b02c:	6993      	ldr	r3, [r2, #24]
 800b02e:	f043 0304 	orr.w	r3, r3, #4
 800b032:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800b034:	4b06      	ldr	r3, [pc, #24]	; (800b050 <FLASH_SetErrorCode+0x64>)
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	061b      	lsls	r3, r3, #24
 800b03a:	d504      	bpl.n	800b046 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800b03c:	4a05      	ldr	r2, [pc, #20]	; (800b054 <FLASH_SetErrorCode+0x68>)
 800b03e:	6993      	ldr	r3, [r2, #24]
 800b040:	f043 0302 	orr.w	r3, r3, #2
 800b044:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800b046:	4b02      	ldr	r3, [pc, #8]	; (800b050 <FLASH_SetErrorCode+0x64>)
 800b048:	22f2      	movs	r2, #242	; 0xf2
 800b04a:	60da      	str	r2, [r3, #12]
}
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	40023c00 	.word	0x40023c00
 800b054:	20003194 	.word	0x20003194

0800b058 <FLASH_Program_Byte>:
{
 800b058:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b05a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800b05e:	4604      	mov	r4, r0
 800b060:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800b062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b066:	d304      	bcc.n	800b072 <FLASH_Program_Byte+0x1a>
 800b068:	4b0c      	ldr	r3, [pc, #48]	; (800b09c <FLASH_Program_Byte+0x44>)
 800b06a:	4403      	add	r3, r0
 800b06c:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800b070:	d20e      	bcs.n	800b090 <FLASH_Program_Byte+0x38>
  FLASH->CR &= CR_PSIZE_MASK;
 800b072:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <FLASH_Program_Byte+0x48>)
 800b074:	691a      	ldr	r2, [r3, #16]
 800b076:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b07a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800b07c:	691a      	ldr	r2, [r3, #16]
 800b07e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b080:	691a      	ldr	r2, [r3, #16]
 800b082:	f042 0201 	orr.w	r2, r2, #1
 800b086:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800b088:	7025      	strb	r5, [r4, #0]
	__ASM volatile ("dsb 0xF":::"memory");
 800b08a:	f3bf 8f4f 	dsb	sy
}
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b090:	f240 21ee 	movw	r1, #750	; 0x2ee
 800b094:	4803      	ldr	r0, [pc, #12]	; (800b0a4 <FLASH_Program_Byte+0x4c>)
 800b096:	f7f9 ff8d 	bl	8004fb4 <assert_failed>
 800b09a:	e7ea      	b.n	800b072 <FLASH_Program_Byte+0x1a>
 800b09c:	e00f1000 	.word	0xe00f1000
 800b0a0:	40023c00 	.word	0x40023c00
 800b0a4:	0802c9d0 	.word	0x0802c9d0

0800b0a8 <FLASH_Program_HalfWord>:
{
 800b0a8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b0aa:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800b0b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0b6:	d304      	bcc.n	800b0c2 <FLASH_Program_HalfWord+0x1a>
 800b0b8:	4b0d      	ldr	r3, [pc, #52]	; (800b0f0 <FLASH_Program_HalfWord+0x48>)
 800b0ba:	4403      	add	r3, r0
 800b0bc:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800b0c0:	d210      	bcs.n	800b0e4 <FLASH_Program_HalfWord+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800b0c2:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <FLASH_Program_HalfWord+0x4c>)
 800b0c4:	691a      	ldr	r2, [r3, #16]
 800b0c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b0ca:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800b0cc:	691a      	ldr	r2, [r3, #16]
 800b0ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0d2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b0d4:	691a      	ldr	r2, [r3, #16]
 800b0d6:	f042 0201 	orr.w	r2, r2, #1
 800b0da:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800b0dc:	8025      	strh	r5, [r4, #0]
 800b0de:	f3bf 8f4f 	dsb	sy
}
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b0e4:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800b0e8:	4803      	ldr	r0, [pc, #12]	; (800b0f8 <FLASH_Program_HalfWord+0x50>)
 800b0ea:	f7f9 ff63 	bl	8004fb4 <assert_failed>
 800b0ee:	e7e8      	b.n	800b0c2 <FLASH_Program_HalfWord+0x1a>
 800b0f0:	e00f1000 	.word	0xe00f1000
 800b0f4:	40023c00 	.word	0x40023c00
 800b0f8:	0802c9d0 	.word	0x0802c9d0

0800b0fc <FLASH_Program_Word>:
{
 800b0fc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b0fe:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800b102:	4604      	mov	r4, r0
 800b104:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800b106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b10a:	d304      	bcc.n	800b116 <FLASH_Program_Word+0x1a>
 800b10c:	4b0d      	ldr	r3, [pc, #52]	; (800b144 <FLASH_Program_Word+0x48>)
 800b10e:	4403      	add	r3, r0
 800b110:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800b114:	d210      	bcs.n	800b138 <FLASH_Program_Word+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800b116:	4b0c      	ldr	r3, [pc, #48]	; (800b148 <FLASH_Program_Word+0x4c>)
 800b118:	691a      	ldr	r2, [r3, #16]
 800b11a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b11e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800b120:	691a      	ldr	r2, [r3, #16]
 800b122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b126:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b128:	691a      	ldr	r2, [r3, #16]
 800b12a:	f042 0201 	orr.w	r2, r2, #1
 800b12e:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800b130:	6025      	str	r5, [r4, #0]
 800b132:	f3bf 8f4f 	dsb	sy
}
 800b136:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b138:	f240 21b3 	movw	r1, #691	; 0x2b3
 800b13c:	4803      	ldr	r0, [pc, #12]	; (800b14c <FLASH_Program_Word+0x50>)
 800b13e:	f7f9 ff39 	bl	8004fb4 <assert_failed>
 800b142:	e7e8      	b.n	800b116 <FLASH_Program_Word+0x1a>
 800b144:	e00f1000 	.word	0xe00f1000
 800b148:	40023c00 	.word	0x40023c00
 800b14c:	0802c9d0 	.word	0x0802c9d0

0800b150 <FLASH_Program_DoubleWord>:
{
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800b154:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800b158:	4604      	mov	r4, r0
 800b15a:	4616      	mov	r6, r2
  assert_param(IS_FLASH_ADDRESS(Address));
 800b15c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b160:	d304      	bcc.n	800b16c <FLASH_Program_DoubleWord+0x1c>
 800b162:	4b0f      	ldr	r3, [pc, #60]	; (800b1a0 <FLASH_Program_DoubleWord+0x50>)
 800b164:	4403      	add	r3, r0
 800b166:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800b16a:	d213      	bcs.n	800b194 <FLASH_Program_DoubleWord+0x44>
  FLASH->CR &= CR_PSIZE_MASK;
 800b16c:	490d      	ldr	r1, [pc, #52]	; (800b1a4 <FLASH_Program_DoubleWord+0x54>)
 800b16e:	690b      	ldr	r3, [r1, #16]
 800b170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b174:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b176:	690b      	ldr	r3, [r1, #16]
 800b178:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b17c:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b17e:	690b      	ldr	r3, [r1, #16]
 800b180:	f043 0301 	orr.w	r3, r3, #1
 800b184:	610b      	str	r3, [r1, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800b186:	6026      	str	r6, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800b188:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800b18c:	6065      	str	r5, [r4, #4]
	__ASM volatile ("dsb 0xF":::"memory");
 800b18e:	f3bf 8f4f 	dsb	sy
}
 800b192:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b194:	f240 218e 	movw	r1, #654	; 0x28e
 800b198:	4803      	ldr	r0, [pc, #12]	; (800b1a8 <FLASH_Program_DoubleWord+0x58>)
 800b19a:	f7f9 ff0b 	bl	8004fb4 <assert_failed>
 800b19e:	e7e5      	b.n	800b16c <FLASH_Program_DoubleWord+0x1c>
 800b1a0:	e00f1000 	.word	0xe00f1000
 800b1a4:	40023c00 	.word	0x40023c00
 800b1a8:	0802c9d0 	.word	0x0802c9d0

0800b1ac <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b1ac:	4b06      	ldr	r3, [pc, #24]	; (800b1c8 <HAL_FLASH_Unlock+0x1c>)
 800b1ae:	691a      	ldr	r2, [r3, #16]
 800b1b0:	2a00      	cmp	r2, #0
 800b1b2:	db01      	blt.n	800b1b8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800b1b4:	2000      	movs	r0, #0
}
 800b1b6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b1b8:	4904      	ldr	r1, [pc, #16]	; (800b1cc <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b1ba:	4a05      	ldr	r2, [pc, #20]	; (800b1d0 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b1bc:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b1be:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b1c0:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800b1c2:	0fc0      	lsrs	r0, r0, #31
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40023c00 	.word	0x40023c00
 800b1cc:	45670123 	.word	0x45670123
 800b1d0:	cdef89ab 	.word	0xcdef89ab

0800b1d4 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800b1d4:	4a03      	ldr	r2, [pc, #12]	; (800b1e4 <HAL_FLASH_Lock+0x10>)
}
 800b1d6:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 800b1d8:	6913      	ldr	r3, [r2, #16]
 800b1da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1de:	6113      	str	r3, [r2, #16]
}
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	40023c00 	.word	0x40023c00

0800b1e8 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800b1e8:	4b05      	ldr	r3, [pc, #20]	; (800b200 <HAL_FLASH_OB_Unlock+0x18>)
 800b1ea:	695a      	ldr	r2, [r3, #20]
 800b1ec:	07d2      	lsls	r2, r2, #31
 800b1ee:	d505      	bpl.n	800b1fc <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800b1f0:	4904      	ldr	r1, [pc, #16]	; (800b204 <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
 800b1f2:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800b1f4:	4a04      	ldr	r2, [pc, #16]	; (800b208 <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800b1f6:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800b1f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800b1fa:	4770      	bx	lr
    return HAL_ERROR;
 800b1fc:	2001      	movs	r0, #1
}
 800b1fe:	4770      	bx	lr
 800b200:	40023c00 	.word	0x40023c00
 800b204:	08192a3b 	.word	0x08192a3b
 800b208:	4c5d6e7f 	.word	0x4c5d6e7f

0800b20c <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800b20c:	4a03      	ldr	r2, [pc, #12]	; (800b21c <HAL_FLASH_OB_Lock+0x10>)
}
 800b20e:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800b210:	6953      	ldr	r3, [r2, #20]
 800b212:	f043 0301 	orr.w	r3, r3, #1
 800b216:	6153      	str	r3, [r2, #20]
}
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	40023c00 	.word	0x40023c00

0800b220 <HAL_FLASH_OB_Launch>:
{
 800b220:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800b222:	4c14      	ldr	r4, [pc, #80]	; (800b274 <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b224:	2100      	movs	r1, #0
 800b226:	4a14      	ldr	r2, [pc, #80]	; (800b278 <HAL_FLASH_OB_Launch+0x58>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800b228:	f24c 3650 	movw	r6, #50000	; 0xc350
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800b22c:	6963      	ldr	r3, [r4, #20]
 800b22e:	f043 0302 	orr.w	r3, r3, #2
 800b232:	6163      	str	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b234:	6191      	str	r1, [r2, #24]
  tickstart = HAL_GetTick();
 800b236:	f7fc ffbb 	bl	80081b0 <HAL_GetTick>
 800b23a:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b23c:	e004      	b.n	800b248 <HAL_FLASH_OB_Launch+0x28>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800b23e:	f7fc ffb7 	bl	80081b0 <HAL_GetTick>
 800b242:	1b40      	subs	r0, r0, r5
 800b244:	42b0      	cmp	r0, r6
 800b246:	d80e      	bhi.n	800b266 <HAL_FLASH_OB_Launch+0x46>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b248:	68e3      	ldr	r3, [r4, #12]
 800b24a:	03db      	lsls	r3, r3, #15
 800b24c:	d4f7      	bmi.n	800b23e <HAL_FLASH_OB_Launch+0x1e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800b24e:	68e2      	ldr	r2, [r4, #12]
 800b250:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800b254:	d109      	bne.n	800b26a <HAL_FLASH_OB_Launch+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800b256:	68e0      	ldr	r0, [r4, #12]
 800b258:	f010 0001 	ands.w	r0, r0, #1
 800b25c:	d002      	beq.n	800b264 <HAL_FLASH_OB_Launch+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b25e:	2301      	movs	r3, #1
  return HAL_OK;
 800b260:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b262:	60e3      	str	r3, [r4, #12]
}
 800b264:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800b266:	2003      	movs	r0, #3
}
 800b268:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800b26a:	f7ff febf 	bl	800afec <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b26e:	2001      	movs	r0, #1
}
 800b270:	bd70      	pop	{r4, r5, r6, pc}
 800b272:	bf00      	nop
 800b274:	40023c00 	.word	0x40023c00
 800b278:	20003194 	.word	0x20003194

0800b27c <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800b27c:	4b01      	ldr	r3, [pc, #4]	; (800b284 <HAL_FLASH_GetError+0x8>)
 800b27e:	6998      	ldr	r0, [r3, #24]
}  
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	20003194 	.word	0x20003194

0800b288 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b288:	4b13      	ldr	r3, [pc, #76]	; (800b2d8 <FLASH_WaitForLastOperation+0x50>)
 800b28a:	2200      	movs	r2, #0
{ 
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b290:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b292:	4d12      	ldr	r5, [pc, #72]	; (800b2dc <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800b294:	f7fc ff8c 	bl	80081b0 <HAL_GetTick>
 800b298:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b29a:	e001      	b.n	800b2a0 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800b29c:	1c62      	adds	r2, r4, #1
 800b29e:	d10e      	bne.n	800b2be <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b2a0:	68eb      	ldr	r3, [r5, #12]
 800b2a2:	03db      	lsls	r3, r3, #15
 800b2a4:	d4fa      	bmi.n	800b29c <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800b2a6:	68ea      	ldr	r2, [r5, #12]
 800b2a8:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800b2ac:	d10f      	bne.n	800b2ce <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800b2ae:	68e8      	ldr	r0, [r5, #12]
 800b2b0:	f010 0001 	ands.w	r0, r0, #1
 800b2b4:	d002      	beq.n	800b2bc <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b2b6:	2301      	movs	r3, #1
  return HAL_OK;
 800b2b8:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b2ba:	60eb      	str	r3, [r5, #12]
}  
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800b2be:	b124      	cbz	r4, 800b2ca <FLASH_WaitForLastOperation+0x42>
 800b2c0:	f7fc ff76 	bl	80081b0 <HAL_GetTick>
 800b2c4:	1b80      	subs	r0, r0, r6
 800b2c6:	42a0      	cmp	r0, r4
 800b2c8:	d9ea      	bls.n	800b2a0 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800b2ca:	2003      	movs	r0, #3
}  
 800b2cc:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800b2ce:	f7ff fe8d 	bl	800afec <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b2d2:	2001      	movs	r0, #1
}  
 800b2d4:	bd70      	pop	{r4, r5, r6, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20003194 	.word	0x20003194
 800b2dc:	40023c00 	.word	0x40023c00

0800b2e0 <HAL_FLASH_Program>:
{
 800b2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800b2e4:	4d23      	ldr	r5, [pc, #140]	; (800b374 <HAL_FLASH_Program+0x94>)
{
 800b2e6:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800b2e8:	7d2a      	ldrb	r2, [r5, #20]
 800b2ea:	2a01      	cmp	r2, #1
 800b2ec:	d03a      	beq.n	800b364 <HAL_FLASH_Program+0x84>
 800b2ee:	4698      	mov	r8, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800b2f0:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 800b2f2:	f04f 0301 	mov.w	r3, #1
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	752b      	strb	r3, [r5, #20]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800b2fa:	d81d      	bhi.n	800b338 <HAL_FLASH_Program+0x58>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b2fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b300:	460e      	mov	r6, r1
 800b302:	f7ff ffc1 	bl	800b288 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b306:	b998      	cbnz	r0, 800b330 <HAL_FLASH_Program+0x50>
    switch(TypeProgram)
 800b308:	3c01      	subs	r4, #1
 800b30a:	2c02      	cmp	r4, #2
 800b30c:	d82d      	bhi.n	800b36a <HAL_FLASH_Program+0x8a>
 800b30e:	e8df f004 	tbb	[pc, r4]
 800b312:	1e02      	.short	0x1e02
 800b314:	23          	.byte	0x23
 800b315:	00          	.byte	0x00
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800b316:	b2b9      	uxth	r1, r7
 800b318:	4630      	mov	r0, r6
 800b31a:	f7ff fec5 	bl	800b0a8 <FLASH_Program_HalfWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b31e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b322:	f7ff ffb1 	bl	800b288 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800b326:	4a14      	ldr	r2, [pc, #80]	; (800b378 <HAL_FLASH_Program+0x98>)
 800b328:	6913      	ldr	r3, [r2, #16]
 800b32a:	f023 0301 	bic.w	r3, r3, #1
 800b32e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800b330:	2300      	movs	r3, #0
 800b332:	752b      	strb	r3, [r5, #20]
}
 800b334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800b338:	4810      	ldr	r0, [pc, #64]	; (800b37c <HAL_FLASH_Program+0x9c>)
 800b33a:	21aa      	movs	r1, #170	; 0xaa
 800b33c:	f7f9 fe3a 	bl	8004fb4 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b340:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b344:	f7ff ffa0 	bl	800b288 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b348:	2800      	cmp	r0, #0
 800b34a:	d1f1      	bne.n	800b330 <HAL_FLASH_Program+0x50>
 800b34c:	e7e7      	b.n	800b31e <HAL_FLASH_Program+0x3e>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800b34e:	4639      	mov	r1, r7
 800b350:	4630      	mov	r0, r6
 800b352:	f7ff fed3 	bl	800b0fc <FLASH_Program_Word>
        break;
 800b356:	e7e2      	b.n	800b31e <HAL_FLASH_Program+0x3e>
        FLASH_Program_DoubleWord(Address, Data);
 800b358:	463a      	mov	r2, r7
 800b35a:	4643      	mov	r3, r8
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff fef7 	bl	800b150 <FLASH_Program_DoubleWord>
        break;
 800b362:	e7dc      	b.n	800b31e <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800b364:	2002      	movs	r0, #2
}
 800b366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800b36a:	b2f9      	uxtb	r1, r7
 800b36c:	4630      	mov	r0, r6
 800b36e:	f7ff fe73 	bl	800b058 <FLASH_Program_Byte>
        break;
 800b372:	e7d4      	b.n	800b31e <HAL_FLASH_Program+0x3e>
 800b374:	20003194 	.word	0x20003194
 800b378:	40023c00 	.word	0x40023c00
 800b37c:	0802c9d0 	.word	0x0802c9d0

0800b380 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b380:	2803      	cmp	r0, #3
{
 800b382:	b538      	push	{r3, r4, r5, lr}
 800b384:	4604      	mov	r4, r0
 800b386:	460d      	mov	r5, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b388:	d82f      	bhi.n	800b3ea <FLASH_MassErase+0x6a>
  assert_param(IS_FLASH_BANK(Banks));
 800b38a:	1e6b      	subs	r3, r5, #1
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d81c      	bhi.n	800b3ca <FLASH_MassErase+0x4a>

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800b390:	4b19      	ldr	r3, [pc, #100]	; (800b3f8 <FLASH_MassErase+0x78>)
  if(Banks == FLASH_BANK_BOTH)
 800b392:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
 800b394:	691a      	ldr	r2, [r3, #16]
 800b396:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b39a:	611a      	str	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800b39c:	d10e      	bne.n	800b3bc <FLASH_MassErase+0x3c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800b39e:	6919      	ldr	r1, [r3, #16]
 800b3a0:	f248 0204 	movw	r2, #32772	; 0x8004
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	611a      	str	r2, [r3, #16]
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800b3a8:	4a13      	ldr	r2, [pc, #76]	; (800b3f8 <FLASH_MassErase+0x78>)
 800b3aa:	6910      	ldr	r0, [r2, #16]
 800b3ac:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800b3b0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800b3b4:	6110      	str	r0, [r2, #16]
 800b3b6:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
  else if(Banks == FLASH_BANK_2)
 800b3bc:	2d02      	cmp	r5, #2
 800b3be:	d10e      	bne.n	800b3de <FLASH_MassErase+0x5e>
    FLASH->CR |= FLASH_CR_MER2;
 800b3c0:	691a      	ldr	r2, [r3, #16]
 800b3c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3c6:	611a      	str	r2, [r3, #16]
 800b3c8:	e7ee      	b.n	800b3a8 <FLASH_MassErase+0x28>
  assert_param(IS_FLASH_BANK(Banks));
 800b3ca:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800b3ce:	480b      	ldr	r0, [pc, #44]	; (800b3fc <FLASH_MassErase+0x7c>)
 800b3d0:	f7f9 fdf0 	bl	8004fb4 <assert_failed>
  FLASH->CR &= CR_PSIZE_MASK;
 800b3d4:	4a08      	ldr	r2, [pc, #32]	; (800b3f8 <FLASH_MassErase+0x78>)
 800b3d6:	6913      	ldr	r3, [r2, #16]
 800b3d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3dc:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_MER1;    
 800b3de:	4a06      	ldr	r2, [pc, #24]	; (800b3f8 <FLASH_MassErase+0x78>)
 800b3e0:	6913      	ldr	r3, [r2, #16]
 800b3e2:	f043 0304 	orr.w	r3, r3, #4
 800b3e6:	6113      	str	r3, [r2, #16]
 800b3e8:	e7de      	b.n	800b3a8 <FLASH_MassErase+0x28>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b3ea:	f240 11bb 	movw	r1, #443	; 0x1bb
 800b3ee:	4803      	ldr	r0, [pc, #12]	; (800b3fc <FLASH_MassErase+0x7c>)
 800b3f0:	f7f9 fde0 	bl	8004fb4 <assert_failed>
 800b3f4:	e7c9      	b.n	800b38a <FLASH_MassErase+0xa>
 800b3f6:	bf00      	nop
 800b3f8:	40023c00 	.word	0x40023c00
 800b3fc:	0802ca0c 	.word	0x0802ca0c

0800b400 <HAL_FLASHEx_OBProgram>:
{
 800b400:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800b402:	4d64      	ldr	r5, [pc, #400]	; (800b594 <HAL_FLASHEx_OBProgram+0x194>)
 800b404:	7d2b      	ldrb	r3, [r5, #20]
 800b406:	2b01      	cmp	r3, #1
 800b408:	f000 80bb 	beq.w	800b582 <HAL_FLASHEx_OBProgram+0x182>
 800b40c:	2301      	movs	r3, #1
 800b40e:	4604      	mov	r4, r0
 800b410:	752b      	strb	r3, [r5, #20]
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800b412:	6803      	ldr	r3, [r0, #0]
 800b414:	2b3f      	cmp	r3, #63	; 0x3f
 800b416:	f200 808c 	bhi.w	800b532 <HAL_FLASHEx_OBProgram+0x132>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800b41a:	07d9      	lsls	r1, r3, #31
 800b41c:	d40d      	bmi.n	800b43a <HAL_FLASHEx_OBProgram+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800b41e:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b420:	079a      	lsls	r2, r3, #30
 800b422:	d42c      	bmi.n	800b47e <HAL_FLASHEx_OBProgram+0x7e>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800b424:	075e      	lsls	r6, r3, #29
 800b426:	d440      	bmi.n	800b4aa <HAL_FLASHEx_OBProgram+0xaa>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800b428:	0719      	lsls	r1, r3, #28
 800b42a:	d44f      	bmi.n	800b4cc <HAL_FLASHEx_OBProgram+0xcc>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b42c:	06da      	lsls	r2, r3, #27
 800b42e:	d45b      	bmi.n	800b4e8 <HAL_FLASHEx_OBProgram+0xe8>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800b430:	069b      	lsls	r3, r3, #26
 800b432:	d46c      	bmi.n	800b50e <HAL_FLASHEx_OBProgram+0x10e>
  __HAL_UNLOCK(&pFlash);
 800b434:	2300      	movs	r3, #0
 800b436:	752b      	strb	r3, [r5, #20]
}
 800b438:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800b43a:	6863      	ldr	r3, [r4, #4]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d905      	bls.n	800b44c <HAL_FLASHEx_OBProgram+0x4c>
 800b440:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800b444:	4854      	ldr	r0, [pc, #336]	; (800b598 <HAL_FLASHEx_OBProgram+0x198>)
 800b446:	f7f9 fdb5 	bl	8004fb4 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b44a:	6863      	ldr	r3, [r4, #4]
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 800b44c:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b44e:	2b01      	cmp	r3, #1
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b450:	4b52      	ldr	r3, [pc, #328]	; (800b59c <HAL_FLASHEx_OBProgram+0x19c>)
 800b452:	ea03 0306 	and.w	r3, r3, r6
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b456:	d07f      	beq.n	800b558 <HAL_FLASHEx_OBProgram+0x158>
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b458:	b903      	cbnz	r3, 800b45c <HAL_FLASHEx_OBProgram+0x5c>
 800b45a:	b926      	cbnz	r6, 800b466 <HAL_FLASHEx_OBProgram+0x66>
 800b45c:	f240 314f 	movw	r1, #847	; 0x34f
 800b460:	484d      	ldr	r0, [pc, #308]	; (800b598 <HAL_FLASHEx_OBProgram+0x198>)
 800b462:	f7f9 fda7 	bl	8004fb4 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b466:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b46a:	f7ff ff0d 	bl	800b288 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800b46e:	b918      	cbnz	r0, 800b478 <HAL_FLASHEx_OBProgram+0x78>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 800b470:	4b4b      	ldr	r3, [pc, #300]	; (800b5a0 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b472:	695a      	ldr	r2, [r3, #20]
 800b474:	4316      	orrs	r6, r2
 800b476:	615e      	str	r6, [r3, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	079a      	lsls	r2, r3, #30
 800b47c:	d5d2      	bpl.n	800b424 <HAL_FLASHEx_OBProgram+0x24>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800b47e:	7b26      	ldrb	r6, [r4, #12]
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800b480:	2eaa      	cmp	r6, #170	; 0xaa
 800b482:	bf18      	it	ne
 800b484:	2e55      	cmpne	r6, #85	; 0x55
 800b486:	d006      	beq.n	800b496 <HAL_FLASHEx_OBProgram+0x96>
 800b488:	2ecc      	cmp	r6, #204	; 0xcc
 800b48a:	d004      	beq.n	800b496 <HAL_FLASHEx_OBProgram+0x96>
 800b48c:	f240 316e 	movw	r1, #878	; 0x36e
 800b490:	4841      	ldr	r0, [pc, #260]	; (800b598 <HAL_FLASHEx_OBProgram+0x198>)
 800b492:	f7f9 fd8f 	bl	8004fb4 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b496:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b49a:	f7ff fef5 	bl	800b288 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800b49e:	b908      	cbnz	r0, 800b4a4 <HAL_FLASHEx_OBProgram+0xa4>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800b4a0:	4b3f      	ldr	r3, [pc, #252]	; (800b5a0 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b4a2:	755e      	strb	r6, [r3, #21]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	075e      	lsls	r6, r3, #29
 800b4a8:	d5be      	bpl.n	800b428 <HAL_FLASHEx_OBProgram+0x28>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b4aa:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800b4ae:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b4b0:	f7ff feea 	bl	800b288 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b4b4:	b938      	cbnz	r0, 800b4c6 <HAL_FLASHEx_OBProgram+0xc6>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800b4b6:	493a      	ldr	r1, [pc, #232]	; (800b5a0 <HAL_FLASHEx_OBProgram+0x1a0>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800b4b8:	4b3a      	ldr	r3, [pc, #232]	; (800b5a4 <HAL_FLASHEx_OBProgram+0x1a4>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800b4ba:	4a3b      	ldr	r2, [pc, #236]	; (800b5a8 <HAL_FLASHEx_OBProgram+0x1a8>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800b4bc:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800b4be:	694e      	ldr	r6, [r1, #20]
 800b4c0:	4032      	ands	r2, r6
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	614b      	str	r3, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	0719      	lsls	r1, r3, #28
 800b4ca:	d5af      	bpl.n	800b42c <HAL_FLASHEx_OBProgram+0x2c>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800b4cc:	6926      	ldr	r6, [r4, #16]
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 800b4ce:	f016 0ff3 	tst.w	r6, #243	; 0xf3
 800b4d2:	d158      	bne.n	800b586 <HAL_FLASHEx_OBProgram+0x186>

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800b4d4:	4932      	ldr	r1, [pc, #200]	; (800b5a0 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b4d6:	b2f6      	uxtb	r6, r6
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800b4d8:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800b4da:	694a      	ldr	r2, [r1, #20]
 800b4dc:	f022 020c 	bic.w	r2, r2, #12
 800b4e0:	4332      	orrs	r2, r6
 800b4e2:	614a      	str	r2, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b4e4:	06da      	lsls	r2, r3, #27
 800b4e6:	d5a3      	bpl.n	800b430 <HAL_FLASHEx_OBProgram+0x30>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800b4e8:	69a6      	ldr	r6, [r4, #24]
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800b4ea:	f248 0313 	movw	r3, #32787	; 0x8013
 800b4ee:	429e      	cmp	r6, r3
 800b4f0:	d826      	bhi.n	800b540 <HAL_FLASHEx_OBProgram+0x140>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b4f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b4f6:	f7ff fec7 	bl	800b288 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800b4fa:	b928      	cbnz	r0, 800b508 <HAL_FLASHEx_OBProgram+0x108>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 800b4fc:	4a28      	ldr	r2, [pc, #160]	; (800b5a0 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b4fe:	4b2b      	ldr	r3, [pc, #172]	; (800b5ac <HAL_FLASHEx_OBProgram+0x1ac>)
 800b500:	6991      	ldr	r1, [r2, #24]
 800b502:	400b      	ands	r3, r1
 800b504:	4333      	orrs	r3, r6
 800b506:	6193      	str	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	069b      	lsls	r3, r3, #26
 800b50c:	d592      	bpl.n	800b434 <HAL_FLASHEx_OBProgram+0x34>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 800b50e:	69e4      	ldr	r4, [r4, #28]
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800b510:	f248 0313 	movw	r3, #32787	; 0x8013
 800b514:	429c      	cmp	r4, r3
 800b516:	d819      	bhi.n	800b54c <HAL_FLASHEx_OBProgram+0x14c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b518:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b51c:	f7ff feb4 	bl	800b288 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b520:	2800      	cmp	r0, #0
 800b522:	d187      	bne.n	800b434 <HAL_FLASHEx_OBProgram+0x34>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 800b524:	4a1e      	ldr	r2, [pc, #120]	; (800b5a0 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b526:	6993      	ldr	r3, [r2, #24]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b52e:	6193      	str	r3, [r2, #24]
 800b530:	e780      	b.n	800b434 <HAL_FLASHEx_OBProgram+0x34>
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800b532:	f240 1125 	movw	r1, #293	; 0x125
 800b536:	4818      	ldr	r0, [pc, #96]	; (800b598 <HAL_FLASHEx_OBProgram+0x198>)
 800b538:	f7f9 fd3c 	bl	8004fb4 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	e76c      	b.n	800b41a <HAL_FLASHEx_OBProgram+0x1a>
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800b540:	f240 31a9 	movw	r1, #937	; 0x3a9
 800b544:	4814      	ldr	r0, [pc, #80]	; (800b598 <HAL_FLASHEx_OBProgram+0x198>)
 800b546:	f7f9 fd35 	bl	8004fb4 <assert_failed>
 800b54a:	e7d2      	b.n	800b4f2 <HAL_FLASHEx_OBProgram+0xf2>
 800b54c:	f240 31a9 	movw	r1, #937	; 0x3a9
 800b550:	4811      	ldr	r0, [pc, #68]	; (800b598 <HAL_FLASHEx_OBProgram+0x198>)
 800b552:	f7f9 fd2f 	bl	8004fb4 <assert_failed>
 800b556:	e7df      	b.n	800b518 <HAL_FLASHEx_OBProgram+0x118>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b558:	b96b      	cbnz	r3, 800b576 <HAL_FLASHEx_OBProgram+0x176>
 800b55a:	b166      	cbz	r6, 800b576 <HAL_FLASHEx_OBProgram+0x176>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b55c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b560:	f7ff fe92 	bl	800b288 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b564:	2800      	cmp	r0, #0
 800b566:	d187      	bne.n	800b478 <HAL_FLASHEx_OBProgram+0x78>
    FLASH->OPTCR &= (~WRPSector);  
 800b568:	4a0d      	ldr	r2, [pc, #52]	; (800b5a0 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b56a:	6953      	ldr	r3, [r2, #20]
 800b56c:	ea23 0606 	bic.w	r6, r3, r6
 800b570:	6156      	str	r6, [r2, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	e754      	b.n	800b420 <HAL_FLASHEx_OBProgram+0x20>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b576:	f240 312b 	movw	r1, #811	; 0x32b
 800b57a:	4807      	ldr	r0, [pc, #28]	; (800b598 <HAL_FLASHEx_OBProgram+0x198>)
 800b57c:	f7f9 fd1a 	bl	8004fb4 <assert_failed>
 800b580:	e7ec      	b.n	800b55c <HAL_FLASHEx_OBProgram+0x15c>
  __HAL_LOCK(&pFlash);
 800b582:	2002      	movs	r0, #2
}
 800b584:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_OB_BOR_LEVEL(Level));
 800b586:	f44f 7162 	mov.w	r1, #904	; 0x388
 800b58a:	4803      	ldr	r0, [pc, #12]	; (800b598 <HAL_FLASHEx_OBProgram+0x198>)
 800b58c:	f7f9 fd12 	bl	8004fb4 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	e79f      	b.n	800b4d4 <HAL_FLASHEx_OBProgram+0xd4>
 800b594:	20003194 	.word	0x20003194
 800b598:	0802ca0c 	.word	0x0802ca0c
 800b59c:	f000ffff 	.word	0xf000ffff
 800b5a0:	40023c00 	.word	0x40023c00
 800b5a4:	f00000f0 	.word	0xf00000f0
 800b5a8:	0fffff0f 	.word	0x0fffff0f
 800b5ac:	ffff0000 	.word	0xffff0000

0800b5b0 <HAL_FLASHEx_OBGetConfig>:
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b5b0:	4a11      	ldr	r2, [pc, #68]	; (800b5f8 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800b5b2:	213f      	movs	r1, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b5b4:	4b11      	ldr	r3, [pc, #68]	; (800b5fc <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800b5b6:	6001      	str	r1, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b5b8:	6951      	ldr	r1, [r2, #20]
 800b5ba:	400b      	ands	r3, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800b5bc:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800b5be:	7d51      	ldrb	r1, [r2, #21]
 800b5c0:	29aa      	cmp	r1, #170	; 0xaa
 800b5c2:	b2cb      	uxtb	r3, r1
 800b5c4:	d015      	beq.n	800b5f2 <HAL_FLASHEx_OBGetConfig+0x42>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800b5c6:	7d53      	ldrb	r3, [r2, #21]
 800b5c8:	2bcc      	cmp	r3, #204	; 0xcc
 800b5ca:	bf0c      	ite	eq
 800b5cc:	22cc      	moveq	r2, #204	; 0xcc
 800b5ce:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800b5d0:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800b5d2:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800b5d4:	4a0a      	ldr	r2, [pc, #40]	; (800b600 <HAL_FLASHEx_OBGetConfig+0x50>)
 800b5d6:	6959      	ldr	r1, [r3, #20]
 800b5d8:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800b5da:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800b5dc:	695a      	ldr	r2, [r3, #20]
 800b5de:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800b5e2:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800b5e4:	699a      	ldr	r2, [r3, #24]
 800b5e6:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 800b5e8:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800b5ee:	61c3      	str	r3, [r0, #28]
}
 800b5f0:	4770      	bx	lr
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	e7ec      	b.n	800b5d0 <HAL_FLASHEx_OBGetConfig+0x20>
 800b5f6:	bf00      	nop
 800b5f8:	40023c00 	.word	0x40023c00
 800b5fc:	0fff0000 	.word	0x0fff0000
 800b600:	f00000f0 	.word	0xf00000f0

0800b604 <FLASH_Erase_Sector>:
  assert_param(IS_FLASH_SECTOR(Sector));
 800b604:	2817      	cmp	r0, #23
{
 800b606:	b538      	push	{r3, r4, r5, lr}
 800b608:	4605      	mov	r5, r0
 800b60a:	460c      	mov	r4, r1
  assert_param(IS_FLASH_SECTOR(Sector));
 800b60c:	d82b      	bhi.n	800b666 <FLASH_Erase_Sector+0x62>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b60e:	2c03      	cmp	r4, #3
 800b610:	d821      	bhi.n	800b656 <FLASH_Erase_Sector+0x52>
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b612:	b9dc      	cbnz	r4, 800b64c <FLASH_Erase_Sector+0x48>
  FLASH->CR &= CR_PSIZE_MASK;
 800b614:	4b1a      	ldr	r3, [pc, #104]	; (800b680 <FLASH_Erase_Sector+0x7c>)
  if(Sector > FLASH_SECTOR_11) 
 800b616:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800b618:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800b61a:	bf88      	it	hi
 800b61c:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800b61e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b622:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800b624:	6919      	ldr	r1, [r3, #16]
 800b626:	430c      	orrs	r4, r1
 800b628:	611c      	str	r4, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b62a:	691a      	ldr	r2, [r3, #16]
 800b62c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b630:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b632:	6918      	ldr	r0, [r3, #16]
 800b634:	ea40 05c5 	orr.w	r5, r0, r5, lsl #3
 800b638:	f045 0502 	orr.w	r5, r5, #2
 800b63c:	611d      	str	r5, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b63e:	691a      	ldr	r2, [r3, #16]
 800b640:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b644:	611a      	str	r2, [r3, #16]
 800b646:	f3bf 8f4f 	dsb	sy
}
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b64c:	2c01      	cmp	r4, #1
 800b64e:	d110      	bne.n	800b672 <FLASH_Erase_Sector+0x6e>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b650:	f44f 7480 	mov.w	r4, #256	; 0x100
 800b654:	e7de      	b.n	800b614 <FLASH_Erase_Sector+0x10>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b656:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800b65a:	480a      	ldr	r0, [pc, #40]	; (800b684 <FLASH_Erase_Sector+0x80>)
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b65c:	f44f 7440 	mov.w	r4, #768	; 0x300
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b660:	f7f9 fca8 	bl	8004fb4 <assert_failed>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b664:	e7d6      	b.n	800b614 <FLASH_Erase_Sector+0x10>
  assert_param(IS_FLASH_SECTOR(Sector));
 800b666:	f240 11eb 	movw	r1, #491	; 0x1eb
 800b66a:	4806      	ldr	r0, [pc, #24]	; (800b684 <FLASH_Erase_Sector+0x80>)
 800b66c:	f7f9 fca2 	bl	8004fb4 <assert_failed>
 800b670:	e7cd      	b.n	800b60e <FLASH_Erase_Sector+0xa>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b672:	2c02      	cmp	r4, #2
 800b674:	bf0c      	ite	eq
 800b676:	f44f 7400 	moveq.w	r4, #512	; 0x200
 800b67a:	f44f 7440 	movne.w	r4, #768	; 0x300
 800b67e:	e7c9      	b.n	800b614 <FLASH_Erase_Sector+0x10>
 800b680:	40023c00 	.word	0x40023c00
 800b684:	0802ca0c 	.word	0x0802ca0c

0800b688 <HAL_FLASHEx_Erase>:
{
 800b688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800b68c:	4f2f      	ldr	r7, [pc, #188]	; (800b74c <HAL_FLASHEx_Erase+0xc4>)
 800b68e:	7d3b      	ldrb	r3, [r7, #20]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d040      	beq.n	800b716 <HAL_FLASHEx_Erase+0x8e>
 800b694:	2301      	movs	r3, #1
 800b696:	4604      	mov	r4, r0
 800b698:	4688      	mov	r8, r1
 800b69a:	753b      	strb	r3, [r7, #20]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800b69c:	6803      	ldr	r3, [r0, #0]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d903      	bls.n	800b6aa <HAL_FLASHEx_Erase+0x22>
 800b6a2:	21a5      	movs	r1, #165	; 0xa5
 800b6a4:	482a      	ldr	r0, [pc, #168]	; (800b750 <HAL_FLASHEx_Erase+0xc8>)
 800b6a6:	f7f9 fc85 	bl	8004fb4 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b6aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b6ae:	f7ff fdeb 	bl	800b288 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	bb50      	cbnz	r0, 800b70c <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 800b6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ba:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d034      	beq.n	800b72e <HAL_FLASHEx_Erase+0xa6>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800b6c4:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800b6c8:	442b      	add	r3, r5
 800b6ca:	1e5a      	subs	r2, r3, #1
 800b6cc:	2a17      	cmp	r2, #23
 800b6ce:	d826      	bhi.n	800b71e <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b6d0:	429d      	cmp	r5, r3
 800b6d2:	d21b      	bcs.n	800b70c <HAL_FLASHEx_Erase+0x84>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800b6d4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800b754 <HAL_FLASHEx_Erase+0xcc>
 800b6d8:	e005      	b.n	800b6e6 <HAL_FLASHEx_Erase+0x5e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b6da:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800b6de:	3501      	adds	r5, #1
 800b6e0:	4413      	add	r3, r2
 800b6e2:	42ab      	cmp	r3, r5
 800b6e4:	d912      	bls.n	800b70c <HAL_FLASHEx_Erase+0x84>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	7c21      	ldrb	r1, [r4, #16]
 800b6ea:	f7ff ff8b 	bl	800b604 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b6ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b6f2:	f7ff fdc9 	bl	800b288 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800b6f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6fa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800b6fe:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800b702:	2800      	cmp	r0, #0
 800b704:	d0e9      	beq.n	800b6da <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b706:	4606      	mov	r6, r0
          *SectorError = index;
 800b708:	f8c8 5000 	str.w	r5, [r8]
  __HAL_UNLOCK(&pFlash);
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
 800b710:	753b      	strb	r3, [r7, #20]
}
 800b712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800b716:	2602      	movs	r6, #2
}
 800b718:	4630      	mov	r0, r6
 800b71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800b71e:	21c1      	movs	r1, #193	; 0xc1
 800b720:	480b      	ldr	r0, [pc, #44]	; (800b750 <HAL_FLASHEx_Erase+0xc8>)
 800b722:	f7f9 fc47 	bl	8004fb4 <assert_failed>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b726:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800b72a:	442b      	add	r3, r5
 800b72c:	e7d0      	b.n	800b6d0 <HAL_FLASHEx_Erase+0x48>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800b72e:	6861      	ldr	r1, [r4, #4]
 800b730:	7c20      	ldrb	r0, [r4, #16]
 800b732:	f7ff fe25 	bl	800b380 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b736:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b73a:	f7ff fda5 	bl	800b288 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800b73e:	4a05      	ldr	r2, [pc, #20]	; (800b754 <HAL_FLASHEx_Erase+0xcc>)
 800b740:	4b05      	ldr	r3, [pc, #20]	; (800b758 <HAL_FLASHEx_Erase+0xd0>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b742:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800b744:	6911      	ldr	r1, [r2, #16]
 800b746:	400b      	ands	r3, r1
 800b748:	6113      	str	r3, [r2, #16]
 800b74a:	e7df      	b.n	800b70c <HAL_FLASHEx_Erase+0x84>
 800b74c:	20003194 	.word	0x20003194
 800b750:	0802ca0c 	.word	0x0802ca0c
 800b754:	40023c00 	.word	0x40023c00
 800b758:	ffff7ffb 	.word	0xffff7ffb

0800b75c <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b75c:	4bb9      	ldr	r3, [pc, #740]	; (800ba44 <HAL_GPIO_Init+0x2e8>)
 800b75e:	4aba      	ldr	r2, [pc, #744]	; (800ba48 <HAL_GPIO_Init+0x2ec>)
 800b760:	4290      	cmp	r0, r2
 800b762:	bf18      	it	ne
 800b764:	4298      	cmpne	r0, r3
{
 800b766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b76a:	bf18      	it	ne
 800b76c:	2301      	movne	r3, #1
{
 800b76e:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b770:	bf08      	it	eq
 800b772:	2300      	moveq	r3, #0
{
 800b774:	4606      	mov	r6, r0
 800b776:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b778:	9301      	str	r3, [sp, #4]
 800b77a:	d026      	beq.n	800b7ca <HAL_GPIO_Init+0x6e>
 800b77c:	4bb3      	ldr	r3, [pc, #716]	; (800ba4c <HAL_GPIO_Init+0x2f0>)
 800b77e:	4298      	cmp	r0, r3
 800b780:	d023      	beq.n	800b7ca <HAL_GPIO_Init+0x6e>
 800b782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b786:	4298      	cmp	r0, r3
 800b788:	d01f      	beq.n	800b7ca <HAL_GPIO_Init+0x6e>
 800b78a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b78e:	4298      	cmp	r0, r3
 800b790:	d01b      	beq.n	800b7ca <HAL_GPIO_Init+0x6e>
 800b792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b796:	4298      	cmp	r0, r3
 800b798:	d017      	beq.n	800b7ca <HAL_GPIO_Init+0x6e>
 800b79a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b79e:	4298      	cmp	r0, r3
 800b7a0:	d013      	beq.n	800b7ca <HAL_GPIO_Init+0x6e>
 800b7a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7a6:	4298      	cmp	r0, r3
 800b7a8:	d00f      	beq.n	800b7ca <HAL_GPIO_Init+0x6e>
 800b7aa:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b2:	4290      	cmp	r0, r2
 800b7b4:	bf18      	it	ne
 800b7b6:	4298      	cmpne	r0, r3
 800b7b8:	d007      	beq.n	800b7ca <HAL_GPIO_Init+0x6e>
 800b7ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7be:	4298      	cmp	r0, r3
 800b7c0:	d003      	beq.n	800b7ca <HAL_GPIO_Init+0x6e>
 800b7c2:	21aa      	movs	r1, #170	; 0xaa
 800b7c4:	48a2      	ldr	r0, [pc, #648]	; (800ba50 <HAL_GPIO_Init+0x2f4>)
 800b7c6:	f7f9 fbf5 	bl	8004fb4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b7ca:	883b      	ldrh	r3, [r7, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 811a 	beq.w	800ba06 <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800b7d8:	bf18      	it	ne
 800b7da:	2a03      	cmpne	r2, #3
 800b7dc:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800b7e0:	bf8c      	ite	hi
 800b7e2:	2301      	movhi	r3, #1
 800b7e4:	2300      	movls	r3, #0
 800b7e6:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800b7ea:	bf0c      	ite	eq
 800b7ec:	2300      	moveq	r3, #0
 800b7ee:	f003 0301 	andne.w	r3, r3, #1
 800b7f2:	3a11      	subs	r2, #17
 800b7f4:	2a01      	cmp	r2, #1
 800b7f6:	bf94      	ite	ls
 800b7f8:	2300      	movls	r3, #0
 800b7fa:	f003 0301 	andhi.w	r3, r3, #1
 800b7fe:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800b802:	bf0c      	ite	eq
 800b804:	2300      	moveq	r3, #0
 800b806:	f003 0301 	andne.w	r3, r3, #1
 800b80a:	b11b      	cbz	r3, 800b814 <HAL_GPIO_Init+0xb8>
 800b80c:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800b810:	f040 813e 	bne.w	800ba90 <HAL_GPIO_Init+0x334>
{
 800b814:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b816:	f8df a260 	ldr.w	sl, [pc, #608]	; 800ba78 <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b81a:	46b8      	mov	r8, r7
 800b81c:	e003      	b.n	800b826 <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800b81e:	3501      	adds	r5, #1
 800b820:	2d10      	cmp	r5, #16
 800b822:	f000 80b3 	beq.w	800b98c <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800b826:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b828:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800b82c:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b82e:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800b832:	ea34 0303 	bics.w	r3, r4, r3
 800b836:	d1f2      	bne.n	800b81e <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b838:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b83c:	f001 0303 	and.w	r3, r1, #3
 800b840:	1e5a      	subs	r2, r3, #1
 800b842:	2a01      	cmp	r2, #1
 800b844:	f240 80a5 	bls.w	800b992 <HAL_GPIO_Init+0x236>
 800b848:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b84a:	f04f 0b03 	mov.w	fp, #3
 800b84e:	fa0b fb07 	lsl.w	fp, fp, r7
 800b852:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b856:	2b03      	cmp	r3, #3
 800b858:	d025      	beq.n	800b8a6 <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b85a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800b85e:	2802      	cmp	r0, #2
 800b860:	f200 80b3 	bhi.w	800b9ca <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800b864:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b866:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b868:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b86a:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b86e:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800b872:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b874:	d117      	bne.n	800b8a6 <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b876:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b87a:	280f      	cmp	r0, #15
 800b87c:	f200 80c8 	bhi.w	800ba10 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800b880:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b882:	f005 0e07 	and.w	lr, r5, #7
 800b886:	f04f 0c0f 	mov.w	ip, #15
 800b88a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b88e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800b892:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b894:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b898:	fa0c fe0e 	lsl.w	lr, ip, lr
 800b89c:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b8a0:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800b8a4:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800b8a6:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b8a8:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b8aa:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b8ae:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b8b2:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800b8b6:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b8b8:	d0b1      	beq.n	800b81e <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8ba:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b8be:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b8c2:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b8ca:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8cc:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800b8d0:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b8d4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b8d8:	9203      	str	r2, [sp, #12]
 800b8da:	4a5e      	ldr	r2, [pc, #376]	; (800ba54 <HAL_GPIO_Init+0x2f8>)
 800b8dc:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800b8de:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b8e0:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800b8e2:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b8e4:	40a3      	lsls	r3, r4
 800b8e6:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b8ea:	4857      	ldr	r0, [pc, #348]	; (800ba48 <HAL_GPIO_Init+0x2ec>)
 800b8ec:	4286      	cmp	r6, r0
 800b8ee:	d025      	beq.n	800b93c <HAL_GPIO_Init+0x1e0>
 800b8f0:	9801      	ldr	r0, [sp, #4]
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d07d      	beq.n	800b9f2 <HAL_GPIO_Init+0x296>
 800b8f6:	4855      	ldr	r0, [pc, #340]	; (800ba4c <HAL_GPIO_Init+0x2f0>)
 800b8f8:	4286      	cmp	r6, r0
 800b8fa:	d07f      	beq.n	800b9fc <HAL_GPIO_Init+0x2a0>
 800b8fc:	4856      	ldr	r0, [pc, #344]	; (800ba58 <HAL_GPIO_Init+0x2fc>)
 800b8fe:	4286      	cmp	r6, r0
 800b900:	f000 8091 	beq.w	800ba26 <HAL_GPIO_Init+0x2ca>
 800b904:	4855      	ldr	r0, [pc, #340]	; (800ba5c <HAL_GPIO_Init+0x300>)
 800b906:	4286      	cmp	r6, r0
 800b908:	f000 8092 	beq.w	800ba30 <HAL_GPIO_Init+0x2d4>
 800b90c:	4854      	ldr	r0, [pc, #336]	; (800ba60 <HAL_GPIO_Init+0x304>)
 800b90e:	4286      	cmp	r6, r0
 800b910:	f000 80b4 	beq.w	800ba7c <HAL_GPIO_Init+0x320>
 800b914:	4853      	ldr	r0, [pc, #332]	; (800ba64 <HAL_GPIO_Init+0x308>)
 800b916:	4286      	cmp	r6, r0
 800b918:	f000 80b5 	beq.w	800ba86 <HAL_GPIO_Init+0x32a>
 800b91c:	4852      	ldr	r0, [pc, #328]	; (800ba68 <HAL_GPIO_Init+0x30c>)
 800b91e:	4286      	cmp	r6, r0
 800b920:	f000 808b 	beq.w	800ba3a <HAL_GPIO_Init+0x2de>
 800b924:	4851      	ldr	r0, [pc, #324]	; (800ba6c <HAL_GPIO_Init+0x310>)
 800b926:	4286      	cmp	r6, r0
 800b928:	f000 80b7 	beq.w	800ba9a <HAL_GPIO_Init+0x33e>
 800b92c:	4850      	ldr	r0, [pc, #320]	; (800ba70 <HAL_GPIO_Init+0x314>)
 800b92e:	4286      	cmp	r6, r0
 800b930:	bf0c      	ite	eq
 800b932:	2009      	moveq	r0, #9
 800b934:	200a      	movne	r0, #10
 800b936:	fa00 f404 	lsl.w	r4, r0, r4
 800b93a:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800b93c:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800b93e:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800b942:	4b4c      	ldr	r3, [pc, #304]	; (800ba74 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800b944:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800b946:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b948:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800b94a:	4b4a      	ldr	r3, [pc, #296]	; (800ba74 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b94c:	bf54      	ite	pl
 800b94e:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b950:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b954:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800b956:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800b958:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800b95a:	4b46      	ldr	r3, [pc, #280]	; (800ba74 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b95c:	bf54      	ite	pl
 800b95e:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b960:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b964:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800b966:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800b968:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800b96a:	4b42      	ldr	r3, [pc, #264]	; (800ba74 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b96c:	bf54      	ite	pl
 800b96e:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b970:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800b974:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b976:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800b978:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800b97a:	4a3e      	ldr	r2, [pc, #248]	; (800ba74 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b97c:	bf54      	ite	pl
 800b97e:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800b980:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800b984:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800b986:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b988:	f47f af4d 	bne.w	800b826 <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800b98c:	b005      	add	sp, #20
 800b98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b992:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800b996:	2803      	cmp	r0, #3
 800b998:	d820      	bhi.n	800b9dc <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800b99a:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b99c:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800b9a0:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b9a4:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800b9a8:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b9aa:	ea20 000b 	bic.w	r0, r0, fp
 800b9ae:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800b9b2:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800b9b6:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800b9b8:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b9ba:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b9be:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800b9c2:	40ac      	lsls	r4, r5
 800b9c4:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800b9c6:	6074      	str	r4, [r6, #4]
 800b9c8:	e745      	b.n	800b856 <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b9ca:	21ce      	movs	r1, #206	; 0xce
 800b9cc:	4820      	ldr	r0, [pc, #128]	; (800ba50 <HAL_GPIO_Init+0x2f4>)
 800b9ce:	f7f9 faf1 	bl	8004fb4 <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b9d2:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b9d6:	f001 0303 	and.w	r3, r1, #3
 800b9da:	e743      	b.n	800b864 <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b9dc:	21bd      	movs	r1, #189	; 0xbd
 800b9de:	481c      	ldr	r0, [pc, #112]	; (800ba50 <HAL_GPIO_Init+0x2f4>)
 800b9e0:	f7f9 fae8 	bl	8004fb4 <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b9e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b9e8:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b9ec:	f001 0303 	and.w	r3, r1, #3
 800b9f0:	e7d3      	b.n	800b99a <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	fa00 f404 	lsl.w	r4, r0, r4
 800b9f8:	4323      	orrs	r3, r4
 800b9fa:	e79f      	b.n	800b93c <HAL_GPIO_Init+0x1e0>
 800b9fc:	2002      	movs	r0, #2
 800b9fe:	fa00 f404 	lsl.w	r4, r0, r4
 800ba02:	4323      	orrs	r3, r4
 800ba04:	e79a      	b.n	800b93c <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800ba06:	21ab      	movs	r1, #171	; 0xab
 800ba08:	4811      	ldr	r0, [pc, #68]	; (800ba50 <HAL_GPIO_Init+0x2f4>)
 800ba0a:	f7f9 fad3 	bl	8004fb4 <assert_failed>
 800ba0e:	e6e0      	b.n	800b7d2 <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800ba10:	21db      	movs	r1, #219	; 0xdb
 800ba12:	480f      	ldr	r0, [pc, #60]	; (800ba50 <HAL_GPIO_Init+0x2f4>)
 800ba14:	f7f9 face 	bl	8004fb4 <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ba18:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ba1c:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ba20:	f001 0303 	and.w	r3, r1, #3
 800ba24:	e72c      	b.n	800b880 <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ba26:	2003      	movs	r0, #3
 800ba28:	fa00 f404 	lsl.w	r4, r0, r4
 800ba2c:	4323      	orrs	r3, r4
 800ba2e:	e785      	b.n	800b93c <HAL_GPIO_Init+0x1e0>
 800ba30:	2004      	movs	r0, #4
 800ba32:	fa00 f404 	lsl.w	r4, r0, r4
 800ba36:	4323      	orrs	r3, r4
 800ba38:	e780      	b.n	800b93c <HAL_GPIO_Init+0x1e0>
 800ba3a:	2007      	movs	r0, #7
 800ba3c:	fa00 f404 	lsl.w	r4, r0, r4
 800ba40:	4323      	orrs	r3, r4
 800ba42:	e77b      	b.n	800b93c <HAL_GPIO_Init+0x1e0>
 800ba44:	40020400 	.word	0x40020400
 800ba48:	40020000 	.word	0x40020000
 800ba4c:	40020800 	.word	0x40020800
 800ba50:	0802ca4c 	.word	0x0802ca4c
 800ba54:	40013800 	.word	0x40013800
 800ba58:	40020c00 	.word	0x40020c00
 800ba5c:	40021000 	.word	0x40021000
 800ba60:	40021400 	.word	0x40021400
 800ba64:	40021800 	.word	0x40021800
 800ba68:	40021c00 	.word	0x40021c00
 800ba6c:	40022000 	.word	0x40022000
 800ba70:	40022400 	.word	0x40022400
 800ba74:	40013c00 	.word	0x40013c00
 800ba78:	40023800 	.word	0x40023800
 800ba7c:	2005      	movs	r0, #5
 800ba7e:	fa00 f404 	lsl.w	r4, r0, r4
 800ba82:	4323      	orrs	r3, r4
 800ba84:	e75a      	b.n	800b93c <HAL_GPIO_Init+0x1e0>
 800ba86:	2006      	movs	r0, #6
 800ba88:	fa00 f404 	lsl.w	r4, r0, r4
 800ba8c:	4323      	orrs	r3, r4
 800ba8e:	e755      	b.n	800b93c <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800ba90:	21ac      	movs	r1, #172	; 0xac
 800ba92:	4804      	ldr	r0, [pc, #16]	; (800baa4 <HAL_GPIO_Init+0x348>)
 800ba94:	f7f9 fa8e 	bl	8004fb4 <assert_failed>
 800ba98:	e6bc      	b.n	800b814 <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ba9a:	2008      	movs	r0, #8
 800ba9c:	fa00 f404 	lsl.w	r4, r0, r4
 800baa0:	4323      	orrs	r3, r4
 800baa2:	e74b      	b.n	800b93c <HAL_GPIO_Init+0x1e0>
 800baa4:	0802ca4c 	.word	0x0802ca4c

0800baa8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800baa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800baac:	4f6b      	ldr	r7, [pc, #428]	; (800bc5c <HAL_GPIO_DeInit+0x1b4>)
{
 800baae:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800bab0:	4b6b      	ldr	r3, [pc, #428]	; (800bc60 <HAL_GPIO_DeInit+0x1b8>)
{
 800bab2:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800bab4:	42b8      	cmp	r0, r7
 800bab6:	bf18      	it	ne
 800bab8:	4298      	cmpne	r0, r3
 800baba:	bf14      	ite	ne
 800babc:	2701      	movne	r7, #1
 800babe:	2700      	moveq	r7, #0
 800bac0:	d027      	beq.n	800bb12 <HAL_GPIO_DeInit+0x6a>
 800bac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bac6:	4298      	cmp	r0, r3
 800bac8:	d023      	beq.n	800bb12 <HAL_GPIO_DeInit+0x6a>
 800baca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bace:	4298      	cmp	r0, r3
 800bad0:	d01f      	beq.n	800bb12 <HAL_GPIO_DeInit+0x6a>
 800bad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bad6:	4298      	cmp	r0, r3
 800bad8:	d01b      	beq.n	800bb12 <HAL_GPIO_DeInit+0x6a>
 800bada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bade:	4298      	cmp	r0, r3
 800bae0:	d017      	beq.n	800bb12 <HAL_GPIO_DeInit+0x6a>
 800bae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bae6:	4298      	cmp	r0, r3
 800bae8:	d013      	beq.n	800bb12 <HAL_GPIO_DeInit+0x6a>
 800baea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800baee:	4298      	cmp	r0, r3
 800baf0:	d00f      	beq.n	800bb12 <HAL_GPIO_DeInit+0x6a>
 800baf2:	4a5c      	ldr	r2, [pc, #368]	; (800bc64 <HAL_GPIO_DeInit+0x1bc>)
 800baf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf8:	4290      	cmp	r0, r2
 800bafa:	bf18      	it	ne
 800bafc:	4298      	cmpne	r0, r3
 800bafe:	d008      	beq.n	800bb12 <HAL_GPIO_DeInit+0x6a>
 800bb00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb04:	4298      	cmp	r0, r3
 800bb06:	d004      	beq.n	800bb12 <HAL_GPIO_DeInit+0x6a>
 800bb08:	f240 112b 	movw	r1, #299	; 0x12b
 800bb0c:	4856      	ldr	r0, [pc, #344]	; (800bc68 <HAL_GPIO_DeInit+0x1c0>)
 800bb0e:	f7f9 fa51 	bl	8004fb4 <assert_failed>
{
 800bb12:	2300      	movs	r3, #0
 800bb14:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bc88 <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800bb18:	f8df a140 	ldr.w	sl, [pc, #320]	; 800bc5c <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800bb1c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800bc8c <HAL_GPIO_DeInit+0x1e4>
 800bb20:	e002      	b.n	800bb28 <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800bb22:	3301      	adds	r3, #1
 800bb24:	2b10      	cmp	r3, #16
 800bb26:	d07b      	beq.n	800bc20 <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800bb28:	2001      	movs	r0, #1
 800bb2a:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800bb2e:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800bb32:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800bb36:	d1f4      	bne.n	800bb22 <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800bb38:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bb3c:	f003 0103 	and.w	r1, r3, #3
 800bb40:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800bb44:	4554      	cmp	r4, sl
 800bb46:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bb48:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800bb4c:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bb50:	fa0c fc01 	lsl.w	ip, ip, r1
 800bb54:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800bb58:	d01e      	beq.n	800bb98 <HAL_GPIO_DeInit+0xf0>
 800bb5a:	2f00      	cmp	r7, #0
 800bb5c:	d063      	beq.n	800bc26 <HAL_GPIO_DeInit+0x17e>
 800bb5e:	4843      	ldr	r0, [pc, #268]	; (800bc6c <HAL_GPIO_DeInit+0x1c4>)
 800bb60:	4284      	cmp	r4, r0
 800bb62:	d063      	beq.n	800bc2c <HAL_GPIO_DeInit+0x184>
 800bb64:	4842      	ldr	r0, [pc, #264]	; (800bc70 <HAL_GPIO_DeInit+0x1c8>)
 800bb66:	4284      	cmp	r4, r0
 800bb68:	d064      	beq.n	800bc34 <HAL_GPIO_DeInit+0x18c>
 800bb6a:	4842      	ldr	r0, [pc, #264]	; (800bc74 <HAL_GPIO_DeInit+0x1cc>)
 800bb6c:	4284      	cmp	r4, r0
 800bb6e:	d065      	beq.n	800bc3c <HAL_GPIO_DeInit+0x194>
 800bb70:	4841      	ldr	r0, [pc, #260]	; (800bc78 <HAL_GPIO_DeInit+0x1d0>)
 800bb72:	4284      	cmp	r4, r0
 800bb74:	d066      	beq.n	800bc44 <HAL_GPIO_DeInit+0x19c>
 800bb76:	4841      	ldr	r0, [pc, #260]	; (800bc7c <HAL_GPIO_DeInit+0x1d4>)
 800bb78:	4284      	cmp	r4, r0
 800bb7a:	d053      	beq.n	800bc24 <HAL_GPIO_DeInit+0x17c>
 800bb7c:	4840      	ldr	r0, [pc, #256]	; (800bc80 <HAL_GPIO_DeInit+0x1d8>)
 800bb7e:	4284      	cmp	r4, r0
 800bb80:	d064      	beq.n	800bc4c <HAL_GPIO_DeInit+0x1a4>
 800bb82:	4838      	ldr	r0, [pc, #224]	; (800bc64 <HAL_GPIO_DeInit+0x1bc>)
 800bb84:	4284      	cmp	r4, r0
 800bb86:	d065      	beq.n	800bc54 <HAL_GPIO_DeInit+0x1ac>
 800bb88:	483e      	ldr	r0, [pc, #248]	; (800bc84 <HAL_GPIO_DeInit+0x1dc>)
 800bb8a:	4284      	cmp	r4, r0
 800bb8c:	bf14      	ite	ne
 800bb8e:	200a      	movne	r0, #10
 800bb90:	2009      	moveq	r0, #9
 800bb92:	fa00 f101 	lsl.w	r1, r0, r1
 800bb96:	e000      	b.n	800bb9a <HAL_GPIO_DeInit+0xf2>
 800bb98:	2100      	movs	r1, #0
 800bb9a:	4588      	cmp	r8, r1
 800bb9c:	d11b      	bne.n	800bbd6 <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800bb9e:	f8d9 1000 	ldr.w	r1, [r9]
 800bba2:	ea21 010e 	bic.w	r1, r1, lr
 800bba6:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800bbaa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bbae:	ea21 010e 	bic.w	r1, r1, lr
 800bbb2:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800bbb6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800bbba:	ea21 010e 	bic.w	r1, r1, lr
 800bbbe:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800bbc2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800bbc6:	ea21 010e 	bic.w	r1, r1, lr
 800bbca:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800bbce:	68b1      	ldr	r1, [r6, #8]
 800bbd0:	ea21 010c 	bic.w	r1, r1, ip
 800bbd4:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbd6:	0059      	lsls	r1, r3, #1
 800bbd8:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbda:	f003 0c07 	and.w	ip, r3, #7
 800bbde:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbe0:	fa00 f101 	lsl.w	r1, r0, r1
 800bbe4:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbe6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbea:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbee:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbf2:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbf4:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800bbfc:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbfe:	6a06      	ldr	r6, [r0, #32]
 800bc00:	ea26 060c 	bic.w	r6, r6, ip
 800bc04:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bc06:	68e0      	ldr	r0, [r4, #12]
 800bc08:	ea20 0001 	bic.w	r0, r0, r1
 800bc0c:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bc0e:	6860      	ldr	r0, [r4, #4]
 800bc10:	ea20 0202 	bic.w	r2, r0, r2
 800bc14:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bc16:	68a2      	ldr	r2, [r4, #8]
 800bc18:	ea22 0101 	bic.w	r1, r2, r1
 800bc1c:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bc1e:	d183      	bne.n	800bb28 <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800bc20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800bc24:	2006      	movs	r0, #6
 800bc26:	fa00 f101 	lsl.w	r1, r0, r1
 800bc2a:	e7b6      	b.n	800bb9a <HAL_GPIO_DeInit+0xf2>
 800bc2c:	2002      	movs	r0, #2
 800bc2e:	fa00 f101 	lsl.w	r1, r0, r1
 800bc32:	e7b2      	b.n	800bb9a <HAL_GPIO_DeInit+0xf2>
 800bc34:	2003      	movs	r0, #3
 800bc36:	fa00 f101 	lsl.w	r1, r0, r1
 800bc3a:	e7ae      	b.n	800bb9a <HAL_GPIO_DeInit+0xf2>
 800bc3c:	2004      	movs	r0, #4
 800bc3e:	fa00 f101 	lsl.w	r1, r0, r1
 800bc42:	e7aa      	b.n	800bb9a <HAL_GPIO_DeInit+0xf2>
 800bc44:	2005      	movs	r0, #5
 800bc46:	fa00 f101 	lsl.w	r1, r0, r1
 800bc4a:	e7a6      	b.n	800bb9a <HAL_GPIO_DeInit+0xf2>
 800bc4c:	2007      	movs	r0, #7
 800bc4e:	fa00 f101 	lsl.w	r1, r0, r1
 800bc52:	e7a2      	b.n	800bb9a <HAL_GPIO_DeInit+0xf2>
 800bc54:	2008      	movs	r0, #8
 800bc56:	fa00 f101 	lsl.w	r1, r0, r1
 800bc5a:	e79e      	b.n	800bb9a <HAL_GPIO_DeInit+0xf2>
 800bc5c:	40020000 	.word	0x40020000
 800bc60:	40020400 	.word	0x40020400
 800bc64:	40022000 	.word	0x40022000
 800bc68:	0802ca4c 	.word	0x0802ca4c
 800bc6c:	40020800 	.word	0x40020800
 800bc70:	40020c00 	.word	0x40020c00
 800bc74:	40021000 	.word	0x40021000
 800bc78:	40021400 	.word	0x40021400
 800bc7c:	40021800 	.word	0x40021800
 800bc80:	40021c00 	.word	0x40021c00
 800bc84:	40022400 	.word	0x40022400
 800bc88:	40013800 	.word	0x40013800
 800bc8c:	40013c00 	.word	0x40013c00

0800bc90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bc94:	460c      	mov	r4, r1
 800bc96:	b129      	cbz	r1, 800bca4 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bc98:	692b      	ldr	r3, [r5, #16]
 800bc9a:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800bc9c:	bf14      	ite	ne
 800bc9e:	2001      	movne	r0, #1
 800bca0:	2000      	moveq	r0, #0
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bca4:	f240 1177 	movw	r1, #375	; 0x177
 800bca8:	4801      	ldr	r0, [pc, #4]	; (800bcb0 <HAL_GPIO_ReadPin+0x20>)
 800bcaa:	f7f9 f983 	bl	8004fb4 <assert_failed>
 800bcae:	e7f3      	b.n	800bc98 <HAL_GPIO_ReadPin+0x8>
 800bcb0:	0802ca4c 	.word	0x0802ca4c

0800bcb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bcb4:	b570      	push	{r4, r5, r6, lr}
 800bcb6:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bcb8:	460c      	mov	r4, r1
{
 800bcba:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bcbc:	b161      	cbz	r1, 800bcd8 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800bcbe:	2d01      	cmp	r5, #1
 800bcc0:	d803      	bhi.n	800bcca <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800bcc2:	b905      	cbnz	r5, 800bcc6 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800bcc4:	0424      	lsls	r4, r4, #16
 800bcc6:	61b4      	str	r4, [r6, #24]
  }
}
 800bcc8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800bcca:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800bcce:	4805      	ldr	r0, [pc, #20]	; (800bce4 <HAL_GPIO_WritePin+0x30>)
 800bcd0:	f7f9 f970 	bl	8004fb4 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800bcd4:	61b4      	str	r4, [r6, #24]
}
 800bcd6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bcd8:	f240 1197 	movw	r1, #407	; 0x197
 800bcdc:	4801      	ldr	r0, [pc, #4]	; (800bce4 <HAL_GPIO_WritePin+0x30>)
 800bcde:	f7f9 f969 	bl	8004fb4 <assert_failed>
 800bce2:	e7ec      	b.n	800bcbe <HAL_GPIO_WritePin+0xa>
 800bce4:	0802ca4c 	.word	0x0802ca4c

0800bce8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bcec:	460c      	mov	r4, r1
 800bcee:	b141      	cbz	r1, 800bd02 <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bcf0:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bcf2:	ea04 0301 	and.w	r3, r4, r1
 800bcf6:	ea24 0401 	bic.w	r4, r4, r1
 800bcfa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800bcfe:	61ac      	str	r4, [r5, #24]
}
 800bd00:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bd02:	f240 11af 	movw	r1, #431	; 0x1af
 800bd06:	4802      	ldr	r0, [pc, #8]	; (800bd10 <HAL_GPIO_TogglePin+0x28>)
 800bd08:	f7f9 f954 	bl	8004fb4 <assert_failed>
 800bd0c:	e7f0      	b.n	800bcf0 <HAL_GPIO_TogglePin+0x8>
 800bd0e:	bf00      	nop
 800bd10:	0802ca4c 	.word	0x0802ca4c

0800bd14 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop

0800bd18 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bd18:	4a04      	ldr	r2, [pc, #16]	; (800bd2c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800bd1a:	6951      	ldr	r1, [r2, #20]
 800bd1c:	4201      	tst	r1, r0
 800bd1e:	d100      	bne.n	800bd22 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800bd20:	4770      	bx	lr
{
 800bd22:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bd24:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bd26:	f7ff fff5 	bl	800bd14 <HAL_GPIO_EXTI_Callback>
}
 800bd2a:	bd08      	pop	{r3, pc}
 800bd2c:	40013c00 	.word	0x40013c00

0800bd30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd34:	460d      	mov	r5, r1
 800bd36:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd38:	4926      	ldr	r1, [pc, #152]	; (800bdd4 <I2C_TransferConfig+0xa4>)
{
 800bd3a:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd3c:	4a26      	ldr	r2, [pc, #152]	; (800bdd8 <I2C_TransferConfig+0xa8>)
{
 800bd3e:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd40:	6803      	ldr	r3, [r0, #0]
{
 800bd42:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd44:	4293      	cmp	r3, r2
 800bd46:	bf18      	it	ne
 800bd48:	428b      	cmpne	r3, r1
 800bd4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bd4e:	bf14      	ite	ne
 800bd50:	2201      	movne	r2, #1
 800bd52:	2200      	moveq	r2, #0
 800bd54:	428b      	cmp	r3, r1
 800bd56:	bf0c      	ite	eq
 800bd58:	2200      	moveq	r2, #0
 800bd5a:	f002 0201 	andne.w	r2, r2, #1
 800bd5e:	b112      	cbz	r2, 800bd66 <I2C_TransferConfig+0x36>
 800bd60:	4a1e      	ldr	r2, [pc, #120]	; (800bddc <I2C_TransferConfig+0xac>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d123      	bne.n	800bdae <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800bd66:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800bd6a:	d002      	beq.n	800bd72 <I2C_TransferConfig+0x42>
 800bd6c:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800bd70:	d129      	bne.n	800bdc6 <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800bd72:	4b1b      	ldr	r3, [pc, #108]	; (800bde0 <I2C_TransferConfig+0xb0>)
 800bd74:	429f      	cmp	r7, r3
 800bd76:	d005      	beq.n	800bd84 <I2C_TransferConfig+0x54>
 800bd78:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800bd7c:	4a19      	ldr	r2, [pc, #100]	; (800bde4 <I2C_TransferConfig+0xb4>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d000      	beq.n	800bd84 <I2C_TransferConfig+0x54>
 800bd82:	b9d7      	cbnz	r7, 800bdba <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd84:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd88:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd8c:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800bd90:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd94:	4a14      	ldr	r2, [pc, #80]	; (800bde8 <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd96:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd98:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800bd9c:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800bda2:	ea27 0702 	bic.w	r7, r7, r2
 800bda6:	433b      	orrs	r3, r7
 800bda8:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bdae:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800bdb2:	480e      	ldr	r0, [pc, #56]	; (800bdec <I2C_TransferConfig+0xbc>)
 800bdb4:	f7f9 f8fe 	bl	8004fb4 <assert_failed>
 800bdb8:	e7d5      	b.n	800bd66 <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800bdba:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800bdbe:	480b      	ldr	r0, [pc, #44]	; (800bdec <I2C_TransferConfig+0xbc>)
 800bdc0:	f7f9 f8f8 	bl	8004fb4 <assert_failed>
 800bdc4:	e7de      	b.n	800bd84 <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800bdc6:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800bdca:	4808      	ldr	r0, [pc, #32]	; (800bdec <I2C_TransferConfig+0xbc>)
 800bdcc:	f7f9 f8f2 	bl	8004fb4 <assert_failed>
 800bdd0:	e7cf      	b.n	800bd72 <I2C_TransferConfig+0x42>
 800bdd2:	bf00      	nop
 800bdd4:	40005800 	.word	0x40005800
 800bdd8:	40005400 	.word	0x40005400
 800bddc:	40006000 	.word	0x40006000
 800bde0:	80004000 	.word	0x80004000
 800bde4:	80002000 	.word	0x80002000
 800bde8:	03ff63ff 	.word	0x03ff63ff
 800bdec:	0802ca88 	.word	0x0802ca88

0800bdf0 <I2C_IsErrorOccurred>:
{
 800bdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800bdf4:	6803      	ldr	r3, [r0, #0]
{
 800bdf6:	460d      	mov	r5, r1
 800bdf8:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800bdfa:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bdfc:	f011 0110 	ands.w	r1, r1, #16
 800be00:	d045      	beq.n	800be8e <I2C_IsErrorOccurred+0x9e>
 800be02:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800be04:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be08:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800be0a:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be0e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800be10:	699a      	ldr	r2, [r3, #24]
 800be12:	0696      	lsls	r6, r2, #26
 800be14:	f100 808d 	bmi.w	800bf32 <I2C_IsErrorOccurred+0x142>
 800be18:	f1b9 0f00 	cmp.w	r9, #0
 800be1c:	f040 808d 	bne.w	800bf3a <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800be20:	1c6a      	adds	r2, r5, #1
 800be22:	d152      	bne.n	800beca <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800be24:	699a      	ldr	r2, [r3, #24]
 800be26:	0697      	lsls	r7, r2, #26
 800be28:	d5fc      	bpl.n	800be24 <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be2a:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800be2c:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800be2e:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be32:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800be34:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800be36:	05d5      	lsls	r5, r2, #23
 800be38:	d42d      	bmi.n	800be96 <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800be3a:	0557      	lsls	r7, r2, #21
 800be3c:	d53d      	bpl.n	800beba <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800be42:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be46:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800be48:	0596      	lsls	r6, r2, #22
 800be4a:	d504      	bpl.n	800be56 <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be4c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800be50:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be54:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800be56:	699a      	ldr	r2, [r3, #24]
 800be58:	0790      	lsls	r0, r2, #30
 800be5a:	d501      	bpl.n	800be60 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800be5c:	2200      	movs	r2, #0
 800be5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be60:	699a      	ldr	r2, [r3, #24]
 800be62:	07d2      	lsls	r2, r2, #31
 800be64:	d524      	bpl.n	800beb0 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800be66:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800be68:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800be6a:	4835      	ldr	r0, [pc, #212]	; (800bf40 <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800be6c:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800be70:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be72:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800be74:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800be76:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800be78:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800be7c:	4319      	orrs	r1, r3
 800be7e:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800be80:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be84:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800be88:	4648      	mov	r0, r9
 800be8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800be8e:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800be90:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800be92:	05d5      	lsls	r5, r2, #23
 800be94:	d5d1      	bpl.n	800be3a <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800be96:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800be9a:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800be9e:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bea0:	0550      	lsls	r0, r2, #21
 800bea2:	d5d1      	bpl.n	800be48 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bea4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800bea8:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800beac:	61d8      	str	r0, [r3, #28]
 800beae:	e7cb      	b.n	800be48 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800beb0:	699a      	ldr	r2, [r3, #24]
 800beb2:	f042 0201 	orr.w	r2, r2, #1
 800beb6:	619a      	str	r2, [r3, #24]
 800beb8:	e7d5      	b.n	800be66 <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800beba:	0595      	lsls	r5, r2, #22
 800bebc:	d4c6      	bmi.n	800be4c <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800bebe:	f1b9 0f00 	cmp.w	r9, #0
 800bec2:	d1c8      	bne.n	800be56 <I2C_IsErrorOccurred+0x66>
}
 800bec4:	4648      	mov	r0, r9
 800bec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800beca:	f7fc f971 	bl	80081b0 <HAL_GetTick>
 800bece:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bed0:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bed2:	42a8      	cmp	r0, r5
 800bed4:	d801      	bhi.n	800beda <I2C_IsErrorOccurred+0xea>
 800bed6:	2d00      	cmp	r5, #0
 800bed8:	d19a      	bne.n	800be10 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800beda:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800bedc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bee0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800bee2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bee4:	040e      	lsls	r6, r1, #16
 800bee6:	d50d      	bpl.n	800bf04 <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800bee8:	0441      	lsls	r1, r0, #17
 800beea:	d40b      	bmi.n	800bf04 <I2C_IsErrorOccurred+0x114>
 800beec:	2a20      	cmp	r2, #32
 800beee:	d009      	beq.n	800bf04 <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bef6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800bef8:	f7fc f95a 	bl	80081b0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800befc:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800befe:	4607      	mov	r7, r0
 800bf00:	e000      	b.n	800bf04 <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	699e      	ldr	r6, [r3, #24]
 800bf06:	f016 0620 	ands.w	r6, r6, #32
 800bf0a:	d181      	bne.n	800be10 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bf0c:	f7fc f950 	bl	80081b0 <HAL_GetTick>
 800bf10:	1bc0      	subs	r0, r0, r7
 800bf12:	2819      	cmp	r0, #25
 800bf14:	d9f5      	bls.n	800bf02 <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf16:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800bf18:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800bf1c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf20:	f043 0320 	orr.w	r3, r3, #32
 800bf24:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800bf26:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf2a:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf2c:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800bf30:	e7e8      	b.n	800bf04 <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800bf32:	f1b9 0f00 	cmp.w	r9, #0
 800bf36:	f43f af78 	beq.w	800be2a <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800bf3a:	2104      	movs	r1, #4
 800bf3c:	e7a8      	b.n	800be90 <I2C_IsErrorOccurred+0xa0>
 800bf3e:	bf00      	nop
 800bf40:	fe00e800 	.word	0xfe00e800

0800bf44 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800bf44:	b570      	push	{r4, r5, r6, lr}
 800bf46:	4604      	mov	r4, r0
 800bf48:	460d      	mov	r5, r1
 800bf4a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf4c:	e004      	b.n	800bf58 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf4e:	f7ff ff4f 	bl	800bdf0 <I2C_IsErrorOccurred>
 800bf52:	b950      	cbnz	r0, 800bf6a <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800bf54:	1c6a      	adds	r2, r5, #1
 800bf56:	d10a      	bne.n	800bf6e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf58:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf5a:	4632      	mov	r2, r6
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	079b      	lsls	r3, r3, #30
 800bf64:	d5f3      	bpl.n	800bf4e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800bf66:	2000      	movs	r0, #0
}
 800bf68:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800bf6a:	2001      	movs	r0, #1
}
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf6e:	f7fc f91f 	bl	80081b0 <HAL_GetTick>
 800bf72:	1b80      	subs	r0, r0, r6
 800bf74:	42a8      	cmp	r0, r5
 800bf76:	d801      	bhi.n	800bf7c <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800bf78:	2d00      	cmp	r5, #0
 800bf7a:	d1ed      	bne.n	800bf58 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf7e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf80:	2200      	movs	r2, #0
        return HAL_ERROR;
 800bf82:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf84:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800bf86:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf8a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf8c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf90:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800bf94:	bd70      	pop	{r4, r5, r6, pc}
 800bf96:	bf00      	nop

0800bf98 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfa0:	e008      	b.n	800bfb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfa2:	f7ff ff25 	bl	800bdf0 <I2C_IsErrorOccurred>
 800bfa6:	b9d8      	cbnz	r0, 800bfe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfa8:	f7fc f902 	bl	80081b0 <HAL_GetTick>
 800bfac:	1b80      	subs	r0, r0, r6
 800bfae:	42a0      	cmp	r0, r4
 800bfb0:	d809      	bhi.n	800bfc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800bfb2:	b144      	cbz	r4, 800bfc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfb4:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfb6:	4632      	mov	r2, r6
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	069b      	lsls	r3, r3, #26
 800bfc0:	d5ef      	bpl.n	800bfa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800bfc2:	2000      	movs	r0, #0
}
 800bfc4:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfc6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfc8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfca:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800bfcc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfce:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800bfd0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfd4:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfd6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfda:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800bfe0:	2001      	movs	r0, #1
}
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}

0800bfe4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800bfe4:	b570      	push	{r4, r5, r6, lr}
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	460d      	mov	r5, r1
 800bfea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bfec:	e00c      	b.n	800c008 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfee:	f7ff feff 	bl	800bdf0 <I2C_IsErrorOccurred>
 800bff2:	b9e8      	cbnz	r0, 800c030 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	699a      	ldr	r2, [r3, #24]
 800bff8:	0691      	lsls	r1, r2, #26
 800bffa:	d41b      	bmi.n	800c034 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bffc:	f7fc f8d8 	bl	80081b0 <HAL_GetTick>
 800c000:	1b80      	subs	r0, r0, r6
 800c002:	42a8      	cmp	r0, r5
 800c004:	d809      	bhi.n	800c01a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800c006:	b145      	cbz	r5, 800c01a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c008:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c00a:	4632      	mov	r2, r6
 800c00c:	4629      	mov	r1, r5
 800c00e:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c010:	699b      	ldr	r3, [r3, #24]
 800c012:	075b      	lsls	r3, r3, #29
 800c014:	d5eb      	bpl.n	800bfee <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800c016:	2000      	movs	r0, #0
}
 800c018:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c01a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c01c:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800c01e:	2100      	movs	r1, #0
      return HAL_ERROR;
 800c020:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c022:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800c024:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c028:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c02a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800c030:	2001      	movs	r0, #1
}
 800c032:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c034:	699a      	ldr	r2, [r3, #24]
 800c036:	0752      	lsls	r2, r2, #29
 800c038:	d502      	bpl.n	800c040 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800c03a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c03c:	2a00      	cmp	r2, #0
 800c03e:	d1ea      	bne.n	800c016 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c040:	699a      	ldr	r2, [r3, #24]
 800c042:	f012 0210 	ands.w	r2, r2, #16
 800c046:	d012      	beq.n	800c06e <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c048:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c04a:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c04c:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c04e:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c050:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800c052:	4808      	ldr	r0, [pc, #32]	; (800c074 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c054:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c056:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	4002      	ands	r2, r0
        return HAL_ERROR;
 800c05c:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800c05e:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800c060:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800c064:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c068:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c06e:	6462      	str	r2, [r4, #68]	; 0x44
 800c070:	e7ee      	b.n	800c050 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800c072:	bf00      	nop
 800c074:	fe00e800 	.word	0xfe00e800

0800c078 <I2C_RequestMemoryRead>:
{
 800c078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c07c:	4c26      	ldr	r4, [pc, #152]	; (800c118 <I2C_RequestMemoryRead+0xa0>)
{
 800c07e:	b083      	sub	sp, #12
 800c080:	4698      	mov	r8, r3
 800c082:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c084:	9400      	str	r4, [sp, #0]
{
 800c086:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c088:	2300      	movs	r3, #0
 800c08a:	fa5f f288 	uxtb.w	r2, r8
{
 800c08e:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c092:	f7ff fe4d 	bl	800bd30 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c096:	4628      	mov	r0, r5
 800c098:	463a      	mov	r2, r7
 800c09a:	4621      	mov	r1, r4
 800c09c:	f7ff ff52 	bl	800bf44 <I2C_WaitOnTXISFlagUntilTimeout>
 800c0a0:	b9e0      	cbnz	r0, 800c0dc <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c0a2:	f1b8 0f01 	cmp.w	r8, #1
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	d10d      	bne.n	800c0c6 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c0aa:	fa5f f389 	uxtb.w	r3, r9
 800c0ae:	682a      	ldr	r2, [r5, #0]
 800c0b0:	6293      	str	r3, [r2, #40]	; 0x28
 800c0b2:	e001      	b.n	800c0b8 <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800c0b4:	1c61      	adds	r1, r4, #1
 800c0b6:	d116      	bne.n	800c0e6 <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0b8:	6993      	ldr	r3, [r2, #24]
 800c0ba:	065b      	lsls	r3, r3, #25
 800c0bc:	d5fa      	bpl.n	800c0b4 <I2C_RequestMemoryRead+0x3c>
}
 800c0be:	4630      	mov	r0, r6
 800c0c0:	b003      	add	sp, #12
 800c0c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c0c6:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800c0ca:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c0d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0d2:	463a      	mov	r2, r7
 800c0d4:	f7ff ff36 	bl	800bf44 <I2C_WaitOnTXISFlagUntilTimeout>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0e6      	beq.n	800c0aa <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800c0dc:	2601      	movs	r6, #1
}
 800c0de:	4630      	mov	r0, r6
 800c0e0:	b003      	add	sp, #12
 800c0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0e6:	f7fc f863 	bl	80081b0 <HAL_GetTick>
 800c0ea:	1bc0      	subs	r0, r0, r7
 800c0ec:	4284      	cmp	r4, r0
 800c0ee:	d302      	bcc.n	800c0f6 <I2C_RequestMemoryRead+0x7e>
 800c0f0:	b10c      	cbz	r4, 800c0f6 <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0f2:	682a      	ldr	r2, [r5, #0]
 800c0f4:	e7e0      	b.n	800c0b8 <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c0f8:	2120      	movs	r1, #32
    return HAL_ERROR;
 800c0fa:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0fc:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0fe:	430b      	orrs	r3, r1
}
 800c100:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800c102:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c106:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c108:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c10c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800c110:	b003      	add	sp, #12
 800c112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c116:	bf00      	nop
 800c118:	80002000 	.word	0x80002000

0800c11c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800c11c:	2800      	cmp	r0, #0
 800c11e:	f000 80c1 	beq.w	800c2a4 <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c122:	4b61      	ldr	r3, [pc, #388]	; (800c2a8 <HAL_I2C_Init+0x18c>)
 800c124:	6802      	ldr	r2, [r0, #0]
 800c126:	4961      	ldr	r1, [pc, #388]	; (800c2ac <HAL_I2C_Init+0x190>)
{
 800c128:	b510      	push	{r4, lr}
 800c12a:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c12c:	4860      	ldr	r0, [pc, #384]	; (800c2b0 <HAL_I2C_Init+0x194>)
 800c12e:	429a      	cmp	r2, r3
 800c130:	bf18      	it	ne
 800c132:	4282      	cmpne	r2, r0
 800c134:	bf14      	ite	ne
 800c136:	2301      	movne	r3, #1
 800c138:	2300      	moveq	r3, #0
 800c13a:	428a      	cmp	r2, r1
 800c13c:	bf0c      	ite	eq
 800c13e:	2300      	moveq	r3, #0
 800c140:	f003 0301 	andne.w	r3, r3, #1
 800c144:	b11b      	cbz	r3, 800c14e <HAL_I2C_Init+0x32>
 800c146:	4b5b      	ldr	r3, [pc, #364]	; (800c2b4 <HAL_I2C_Init+0x198>)
 800c148:	429a      	cmp	r2, r3
 800c14a:	f040 80a5 	bne.w	800c298 <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800c14e:	68a3      	ldr	r3, [r4, #8]
 800c150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c154:	f080 809a 	bcs.w	800c28c <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800c158:	68e3      	ldr	r3, [r4, #12]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d855      	bhi.n	800c20c <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800c160:	6923      	ldr	r3, [r4, #16]
 800c162:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800c166:	d15a      	bne.n	800c21e <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800c168:	6963      	ldr	r3, [r4, #20]
 800c16a:	2bff      	cmp	r3, #255	; 0xff
 800c16c:	d85f      	bhi.n	800c22e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800c16e:	69a3      	ldr	r3, [r4, #24]
 800c170:	2b07      	cmp	r3, #7
 800c172:	d864      	bhi.n	800c23e <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800c174:	69e3      	ldr	r3, [r4, #28]
 800c176:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800c17a:	d169      	bne.n	800c250 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800c17c:	6a23      	ldr	r3, [r4, #32]
 800c17e:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c182:	d16e      	bne.n	800c262 <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c184:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c188:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d073      	beq.n	800c278 <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800c190:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c192:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c194:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c196:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800c19a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c19c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c1a0:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800c1a2:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c1a6:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800c1a8:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c1aa:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c1ac:	689a      	ldr	r2, [r3, #8]
 800c1ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c1b2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c1b4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c1b6:	d065      	beq.n	800c284 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c1b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c1bc:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c1be:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c1c0:	d102      	bne.n	800c1c8 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c1c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1c6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c1c8:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800c1ca:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c1ce:	493a      	ldr	r1, [pc, #232]	; (800c2b8 <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c1d0:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c1d2:	4301      	orrs	r1, r0
 800c1d4:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c1d6:	68d9      	ldr	r1, [r3, #12]
 800c1d8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800c1dc:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c1de:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c1e2:	4302      	orrs	r2, r0
 800c1e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c1e8:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c1ec:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1ee:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c1f0:	4301      	orrs	r1, r0
  return HAL_OK;
 800c1f2:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c1f4:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800c1f6:	6819      	ldr	r1, [r3, #0]
 800c1f8:	f041 0101 	orr.w	r1, r1, #1
 800c1fc:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1fe:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c200:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c204:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c206:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c20a:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800c20c:	f240 2117 	movw	r1, #535	; 0x217
 800c210:	482a      	ldr	r0, [pc, #168]	; (800c2bc <HAL_I2C_Init+0x1a0>)
 800c212:	f7f8 fecf 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800c216:	6923      	ldr	r3, [r4, #16]
 800c218:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800c21c:	d0a4      	beq.n	800c168 <HAL_I2C_Init+0x4c>
 800c21e:	f44f 7106 	mov.w	r1, #536	; 0x218
 800c222:	4826      	ldr	r0, [pc, #152]	; (800c2bc <HAL_I2C_Init+0x1a0>)
 800c224:	f7f8 fec6 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800c228:	6963      	ldr	r3, [r4, #20]
 800c22a:	2bff      	cmp	r3, #255	; 0xff
 800c22c:	d99f      	bls.n	800c16e <HAL_I2C_Init+0x52>
 800c22e:	f240 2119 	movw	r1, #537	; 0x219
 800c232:	4822      	ldr	r0, [pc, #136]	; (800c2bc <HAL_I2C_Init+0x1a0>)
 800c234:	f7f8 febe 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800c238:	69a3      	ldr	r3, [r4, #24]
 800c23a:	2b07      	cmp	r3, #7
 800c23c:	d99a      	bls.n	800c174 <HAL_I2C_Init+0x58>
 800c23e:	f240 211a 	movw	r1, #538	; 0x21a
 800c242:	481e      	ldr	r0, [pc, #120]	; (800c2bc <HAL_I2C_Init+0x1a0>)
 800c244:	f7f8 feb6 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800c248:	69e3      	ldr	r3, [r4, #28]
 800c24a:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800c24e:	d095      	beq.n	800c17c <HAL_I2C_Init+0x60>
 800c250:	f240 211b 	movw	r1, #539	; 0x21b
 800c254:	4819      	ldr	r0, [pc, #100]	; (800c2bc <HAL_I2C_Init+0x1a0>)
 800c256:	f7f8 fead 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800c25a:	6a23      	ldr	r3, [r4, #32]
 800c25c:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c260:	d090      	beq.n	800c184 <HAL_I2C_Init+0x68>
 800c262:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800c266:	4815      	ldr	r0, [pc, #84]	; (800c2bc <HAL_I2C_Init+0x1a0>)
 800c268:	f7f8 fea4 	bl	8004fb4 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c26c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c270:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c274:	2b00      	cmp	r3, #0
 800c276:	d18b      	bne.n	800c190 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800c278:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800c27a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800c27e:	f7fa f949 	bl	8006514 <HAL_I2C_MspInit>
 800c282:	e785      	b.n	800c190 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c284:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c288:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c28a:	e79d      	b.n	800c1c8 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800c28c:	f240 2116 	movw	r1, #534	; 0x216
 800c290:	480a      	ldr	r0, [pc, #40]	; (800c2bc <HAL_I2C_Init+0x1a0>)
 800c292:	f7f8 fe8f 	bl	8004fb4 <assert_failed>
 800c296:	e75f      	b.n	800c158 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c298:	f240 2115 	movw	r1, #533	; 0x215
 800c29c:	4807      	ldr	r0, [pc, #28]	; (800c2bc <HAL_I2C_Init+0x1a0>)
 800c29e:	f7f8 fe89 	bl	8004fb4 <assert_failed>
 800c2a2:	e754      	b.n	800c14e <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800c2a4:	2001      	movs	r0, #1
}
 800c2a6:	4770      	bx	lr
 800c2a8:	40005400 	.word	0x40005400
 800c2ac:	40005c00 	.word	0x40005c00
 800c2b0:	40005800 	.word	0x40005800
 800c2b4:	40006000 	.word	0x40006000
 800c2b8:	02008000 	.word	0x02008000
 800c2bc:	0802ca88 	.word	0x0802ca88

0800c2c0 <HAL_I2C_Master_Transmit>:
{
 800c2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c2ca:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2cc:	2b20      	cmp	r3, #32
{
 800c2ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2d0:	d16d      	bne.n	800c3ae <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800c2d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d068      	beq.n	800c3ae <HAL_I2C_Master_Transmit+0xee>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	460f      	mov	r7, r1
 800c2e0:	4691      	mov	r9, r2
 800c2e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c2e6:	f7fb ff63 	bl	80081b0 <HAL_GetTick>
 800c2ea:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2ec:	e004      	b.n	800c2f8 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2ee:	f7fb ff5f 	bl	80081b0 <HAL_GetTick>
 800c2f2:	1b80      	subs	r0, r0, r6
 800c2f4:	2819      	cmp	r0, #25
 800c2f6:	d85e      	bhi.n	800c3b6 <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	6999      	ldr	r1, [r3, #24]
 800c2fc:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800c300:	d1f5      	bne.n	800c2ee <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c302:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800c304:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800c308:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c30a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c30e:	2310      	movs	r3, #16
 800c310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c314:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800c316:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c31a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	2bff      	cmp	r3, #255	; 0xff
 800c320:	d86d      	bhi.n	800c3fe <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800c322:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c324:	4639      	mov	r1, r7
 800c326:	4b48      	ldr	r3, [pc, #288]	; (800c448 <HAL_I2C_Master_Transmit+0x188>)
 800c328:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800c32a:	b292      	uxth	r2, r2
 800c32c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c32e:	b2d2      	uxtb	r2, r2
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c336:	f7ff fcfb 	bl	800bd30 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c33a:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c33e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800c342:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c344:	4632      	mov	r2, r6
 800c346:	4629      	mov	r1, r5
 800c348:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	b1eb      	cbz	r3, 800c38a <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c34e:	f7ff fdf9 	bl	800bf44 <I2C_WaitOnTXISFlagUntilTimeout>
 800c352:	2800      	cmp	r0, #0
 800c354:	d174      	bne.n	800c440 <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c356:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c358:	6821      	ldr	r1, [r4, #0]
 800c35a:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800c35e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c360:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800c362:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c364:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800c366:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c368:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800c36a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c36c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c36e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c370:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c372:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c374:	b292      	uxth	r2, r2
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1e3      	bne.n	800c342 <HAL_I2C_Master_Transmit+0x82>
 800c37a:	bb6a      	cbnz	r2, 800c3d8 <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800c37c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c37e:	4632      	mov	r2, r6
 800c380:	4629      	mov	r1, r5
 800c382:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c384:	b29b      	uxth	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1e1      	bne.n	800c34e <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c38a:	f7ff fe05 	bl	800bf98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d156      	bne.n	800c440 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c392:	6823      	ldr	r3, [r4, #0]
 800c394:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c396:	4d2d      	ldr	r5, [pc, #180]	; (800c44c <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c398:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	402a      	ands	r2, r5
 800c39e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c3a0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c3a4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c3a8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c3ac:	e000      	b.n	800c3b0 <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800c3ae:	2002      	movs	r0, #2
}
 800c3b0:	b003      	add	sp, #12
 800c3b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c3b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c3b8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3ba:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c3bc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c3be:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c3c0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c3c4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c3c6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3ca:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c3ce:	b003      	add	sp, #12
 800c3d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800c3d4:	1c6a      	adds	r2, r5, #1
 800c3d6:	d11d      	bne.n	800c414 <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3d8:	698b      	ldr	r3, [r1, #24]
 800c3da:	061b      	lsls	r3, r3, #24
 800c3dc:	d5fa      	bpl.n	800c3d4 <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c3de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	2bff      	cmp	r3, #255	; 0xff
 800c3e4:	d91f      	bls.n	800c426 <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3e6:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c3ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3ee:	22ff      	movs	r2, #255	; 0xff
 800c3f0:	4639      	mov	r1, r7
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f8cd 8000 	str.w	r8, [sp]
 800c3f8:	f7ff fc9a 	bl	800bd30 <I2C_TransferConfig>
 800c3fc:	e7a1      	b.n	800c342 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3fe:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c400:	4b11      	ldr	r3, [pc, #68]	; (800c448 <HAL_I2C_Master_Transmit+0x188>)
 800c402:	4639      	mov	r1, r7
 800c404:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c406:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c40e:	f7ff fc8f 	bl	800bd30 <I2C_TransferConfig>
 800c412:	e792      	b.n	800c33a <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c414:	f7fb fecc 	bl	80081b0 <HAL_GetTick>
 800c418:	1b80      	subs	r0, r0, r6
 800c41a:	4285      	cmp	r5, r0
 800c41c:	d3cb      	bcc.n	800c3b6 <HAL_I2C_Master_Transmit+0xf6>
 800c41e:	2d00      	cmp	r5, #0
 800c420:	d0c9      	beq.n	800c3b6 <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c422:	6821      	ldr	r1, [r4, #0]
 800c424:	e7d8      	b.n	800c3d8 <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c426:	f8cd 8000 	str.w	r8, [sp]
 800c42a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c42e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c430:	4639      	mov	r1, r7
 800c432:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800c434:	b292      	uxth	r2, r2
 800c436:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c438:	b2d2      	uxtb	r2, r2
 800c43a:	f7ff fc79 	bl	800bd30 <I2C_TransferConfig>
 800c43e:	e780      	b.n	800c342 <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800c440:	2001      	movs	r0, #1
}
 800c442:	b003      	add	sp, #12
 800c444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c448:	80002000 	.word	0x80002000
 800c44c:	fe00e800 	.word	0xfe00e800

0800c450 <HAL_I2C_Master_Receive>:
{
 800c450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c454:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c456:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c45a:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c45c:	2b20      	cmp	r3, #32
{
 800c45e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c460:	f040 8088 	bne.w	800c574 <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800c464:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c468:	4604      	mov	r4, r0
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	f000 8082 	beq.w	800c574 <HAL_I2C_Master_Receive+0x124>
 800c470:	2301      	movs	r3, #1
 800c472:	460f      	mov	r7, r1
 800c474:	4691      	mov	r9, r2
 800c476:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c47a:	f7fb fe99 	bl	80081b0 <HAL_GetTick>
 800c47e:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c480:	e004      	b.n	800c48c <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c482:	f7fb fe95 	bl	80081b0 <HAL_GetTick>
 800c486:	1b80      	subs	r0, r0, r6
 800c488:	2819      	cmp	r0, #25
 800c48a:	d87e      	bhi.n	800c58a <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	6999      	ldr	r1, [r3, #24]
 800c490:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800c494:	d1f5      	bne.n	800c482 <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c496:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800c498:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800c49c:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c49e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c4a2:	2310      	movs	r3, #16
 800c4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4a8:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800c4aa:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c4ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	2bff      	cmp	r3, #255	; 0xff
 800c4b4:	d878      	bhi.n	800c5a8 <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800c4b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	4b49      	ldr	r3, [pc, #292]	; (800c5e0 <HAL_I2C_Master_Receive+0x190>)
 800c4bc:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800c4be:	b292      	uxth	r2, r2
 800c4c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c4c2:	b2d2      	uxtb	r2, r2
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c4ca:	f7ff fc31 	bl	800bd30 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c4ce:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4d2:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800c4d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4d8:	4632      	mov	r2, r6
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d035      	beq.n	800c550 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4e4:	f7ff fd7e 	bl	800bfe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d175      	bne.n	800c5d8 <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c4ec:	6822      	ldr	r2, [r4, #0]
 800c4ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c4f2:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800c4f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c4f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c4f8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c4fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800c4fc:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800c4fe:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800c500:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800c502:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c504:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c506:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800c508:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c50a:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c50c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1e1      	bne.n	800c4d6 <HAL_I2C_Master_Receive+0x86>
 800c512:	2a00      	cmp	r2, #0
 800c514:	d0df      	beq.n	800c4d6 <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c516:	6822      	ldr	r2, [r4, #0]
 800c518:	e001      	b.n	800c51e <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800c51a:	1c69      	adds	r1, r5, #1
 800c51c:	d12e      	bne.n	800c57c <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c51e:	6993      	ldr	r3, [r2, #24]
 800c520:	061b      	lsls	r3, r3, #24
 800c522:	d5fa      	bpl.n	800c51a <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c524:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c526:	b29b      	uxth	r3, r3
 800c528:	2bff      	cmp	r3, #255	; 0xff
 800c52a:	d948      	bls.n	800c5be <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c52c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c530:	22ff      	movs	r2, #255	; 0xff
 800c532:	4639      	mov	r1, r7
 800c534:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c536:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c53a:	f8cd 8000 	str.w	r8, [sp]
 800c53e:	f7ff fbf7 	bl	800bd30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c542:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c544:	4632      	mov	r2, r6
 800c546:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800c548:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c54a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1c9      	bne.n	800c4e4 <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c550:	f7ff fd22 	bl	800bf98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c554:	2800      	cmp	r0, #0
 800c556:	d13f      	bne.n	800c5d8 <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c55c:	4d21      	ldr	r5, [pc, #132]	; (800c5e4 <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c55e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c560:	685a      	ldr	r2, [r3, #4]
 800c562:	402a      	ands	r2, r5
 800c564:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c566:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c56a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c56e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c572:	e000      	b.n	800c576 <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800c574:	2002      	movs	r0, #2
}
 800c576:	b003      	add	sp, #12
 800c578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c57c:	f7fb fe18 	bl	80081b0 <HAL_GetTick>
 800c580:	1b80      	subs	r0, r0, r6
 800c582:	4285      	cmp	r5, r0
 800c584:	d301      	bcc.n	800c58a <HAL_I2C_Master_Receive+0x13a>
 800c586:	2d00      	cmp	r5, #0
 800c588:	d1c5      	bne.n	800c516 <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c58a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c58c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c58e:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c590:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c592:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c594:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c598:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c59a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c59e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c5a2:	b003      	add	sp, #12
 800c5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5a8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c5aa:	4b0d      	ldr	r3, [pc, #52]	; (800c5e0 <HAL_I2C_Master_Receive+0x190>)
 800c5ac:	4639      	mov	r1, r7
 800c5ae:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5b0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c5b8:	f7ff fbba 	bl	800bd30 <I2C_TransferConfig>
 800c5bc:	e787      	b.n	800c4ce <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5be:	f8cd 8000 	str.w	r8, [sp]
 800c5c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c5c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800c5cc:	b292      	uxth	r2, r2
 800c5ce:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5d0:	b2d2      	uxtb	r2, r2
 800c5d2:	f7ff fbad 	bl	800bd30 <I2C_TransferConfig>
 800c5d6:	e77e      	b.n	800c4d6 <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800c5d8:	2001      	movs	r0, #1
}
 800c5da:	b003      	add	sp, #12
 800c5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e0:	80002400 	.word	0x80002400
 800c5e4:	fe00e800 	.word	0xfe00e800

0800c5e8 <HAL_I2C_Mem_Read>:
{
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c5ee:	3b01      	subs	r3, #1
{
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c5f4:	2b01      	cmp	r3, #1
{
 800c5f6:	4688      	mov	r8, r1
 800c5f8:	4691      	mov	r9, r2
 800c5fa:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800c5fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c600:	d904      	bls.n	800c60c <HAL_I2C_Mem_Read+0x24>
 800c602:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800c606:	486e      	ldr	r0, [pc, #440]	; (800c7c0 <HAL_I2C_Mem_Read+0x1d8>)
 800c608:	f7f8 fcd4 	bl	8004fb4 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c60c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800c610:	2b20      	cmp	r3, #32
 800c612:	d17f      	bne.n	800c714 <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800c614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c616:	2b00      	cmp	r3, #0
 800c618:	d075      	beq.n	800c706 <HAL_I2C_Mem_Read+0x11e>
 800c61a:	f1ba 0f00 	cmp.w	sl, #0
 800c61e:	d072      	beq.n	800c706 <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800c620:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800c624:	2b01      	cmp	r3, #1
 800c626:	d075      	beq.n	800c714 <HAL_I2C_Mem_Read+0x12c>
 800c628:	2301      	movs	r3, #1
 800c62a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c62e:	f7fb fdbf 	bl	80081b0 <HAL_GetTick>
 800c632:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c634:	e004      	b.n	800c640 <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c636:	f7fb fdbb 	bl	80081b0 <HAL_GetTick>
 800c63a:	1b80      	subs	r0, r0, r6
 800c63c:	2819      	cmp	r0, #25
 800c63e:	d874      	bhi.n	800c72a <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800c648:	d1f5      	bne.n	800c636 <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800c64a:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c64c:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800c64e:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c652:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800c654:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c656:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c658:	4628      	mov	r0, r5
 800c65a:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c65e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c662:	2140      	movs	r1, #64	; 0x40
 800c664:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c668:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c66a:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800c66e:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c672:	f7ff fd01 	bl	800c078 <I2C_RequestMemoryRead>
 800c676:	2800      	cmp	r0, #0
 800c678:	f040 8083 	bne.w	800c782 <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c67c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c67e:	b29b      	uxth	r3, r3
 800c680:	2bff      	cmp	r3, #255	; 0xff
 800c682:	f240 808e 	bls.w	800c7a2 <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c686:	4b4f      	ldr	r3, [pc, #316]	; (800c7c4 <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c688:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c68a:	4641      	mov	r1, r8
 800c68c:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c68e:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c696:	f7ff fb4b 	bl	800bd30 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c69a:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c69c:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c6a0:	682a      	ldr	r2, [r5, #0]
 800c6a2:	e001      	b.n	800c6a8 <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800c6a4:	1c63      	adds	r3, r4, #1
 800c6a6:	d139      	bne.n	800c71c <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c6a8:	6993      	ldr	r3, [r2, #24]
 800c6aa:	0758      	lsls	r0, r3, #29
 800c6ac:	d5fa      	bpl.n	800c6a4 <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c6ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c6b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6b2:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800c6b4:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800c6b6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800c6b8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c6ba:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800c6bc:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800c6be:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800c6c0:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800c6c2:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c6c4:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c6c6:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800c6c8:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c6ca:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c6cc:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c6ce:	b90b      	cbnz	r3, 800c6d4 <HAL_I2C_Mem_Read+0xec>
 800c6d0:	2a00      	cmp	r2, #0
 800c6d2:	d140      	bne.n	800c756 <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800c6d4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1e1      	bne.n	800c6a0 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6dc:	4632      	mov	r2, r6
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f7ff fc59 	bl	800bf98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d168      	bne.n	800c7bc <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c6ea:	682b      	ldr	r3, [r5, #0]
 800c6ec:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c6ee:	4c36      	ldr	r4, [pc, #216]	; (800c7c8 <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c6f0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c6f2:	685a      	ldr	r2, [r3, #4]
 800c6f4:	4022      	ands	r2, r4
 800c6f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c6f8:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c6fc:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c700:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800c704:	e003      	b.n	800c70e <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c706:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800c70a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c70c:	646b      	str	r3, [r5, #68]	; 0x44
}
 800c70e:	b003      	add	sp, #12
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800c714:	2002      	movs	r0, #2
}
 800c716:	b003      	add	sp, #12
 800c718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c71c:	f7fb fd48 	bl	80081b0 <HAL_GetTick>
 800c720:	1b80      	subs	r0, r0, r6
 800c722:	4284      	cmp	r4, r0
 800c724:	d301      	bcc.n	800c72a <HAL_I2C_Mem_Read+0x142>
 800c726:	2c00      	cmp	r4, #0
 800c728:	d1ba      	bne.n	800c6a0 <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c72a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c72c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c72e:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c730:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c732:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c734:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c738:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c73a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c73e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800c742:	b003      	add	sp, #12
 800c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c748:	f7fb fd32 	bl	80081b0 <HAL_GetTick>
 800c74c:	1b80      	subs	r0, r0, r6
 800c74e:	4284      	cmp	r4, r0
 800c750:	d3eb      	bcc.n	800c72a <HAL_I2C_Mem_Read+0x142>
 800c752:	2c00      	cmp	r4, #0
 800c754:	d0e9      	beq.n	800c72a <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c756:	682a      	ldr	r2, [r5, #0]
 800c758:	e001      	b.n	800c75e <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800c75a:	1c61      	adds	r1, r4, #1
 800c75c:	d1f4      	bne.n	800c748 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c75e:	6993      	ldr	r3, [r2, #24]
 800c760:	061b      	lsls	r3, r3, #24
 800c762:	d5fa      	bpl.n	800c75a <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c764:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c766:	b29b      	uxth	r3, r3
 800c768:	2bff      	cmp	r3, #255	; 0xff
 800c76a:	d90e      	bls.n	800c78a <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c76c:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c774:	22ff      	movs	r2, #255	; 0xff
 800c776:	4641      	mov	r1, r8
 800c778:	4628      	mov	r0, r5
 800c77a:	9700      	str	r7, [sp, #0]
 800c77c:	f7ff fad8 	bl	800bd30 <I2C_TransferConfig>
 800c780:	e7a8      	b.n	800c6d4 <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800c782:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800c784:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800c788:	e7c1      	b.n	800c70e <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c78a:	9700      	str	r7, [sp, #0]
 800c78c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c790:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c792:	4641      	mov	r1, r8
 800c794:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800c796:	b292      	uxth	r2, r2
 800c798:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c79a:	b2d2      	uxtb	r2, r2
 800c79c:	f7ff fac8 	bl	800bd30 <I2C_TransferConfig>
 800c7a0:	e798      	b.n	800c6d4 <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800c7a2:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c7a4:	4641      	mov	r1, r8
 800c7a6:	4b07      	ldr	r3, [pc, #28]	; (800c7c4 <HAL_I2C_Mem_Read+0x1dc>)
 800c7a8:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800c7aa:	b292      	uxth	r2, r2
 800c7ac:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c7ae:	b2d2      	uxtb	r2, r2
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c7b6:	f7ff fabb 	bl	800bd30 <I2C_TransferConfig>
 800c7ba:	e76e      	b.n	800c69a <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800c7bc:	2001      	movs	r0, #1
 800c7be:	e7a6      	b.n	800c70e <HAL_I2C_Mem_Read+0x126>
 800c7c0:	0802ca88 	.word	0x0802ca88
 800c7c4:	80002400 	.word	0x80002400
 800c7c8:	fe00e800 	.word	0xfe00e800

0800c7cc <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c7cc:	4b23      	ldr	r3, [pc, #140]	; (800c85c <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800c7ce:	6802      	ldr	r2, [r0, #0]
{
 800c7d0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c7d2:	4d23      	ldr	r5, [pc, #140]	; (800c860 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800c7d4:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c7d6:	4e23      	ldr	r6, [pc, #140]	; (800c864 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	bf18      	it	ne
 800c7dc:	42aa      	cmpne	r2, r5
{
 800c7de:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c7e0:	bf14      	ite	ne
 800c7e2:	2301      	movne	r3, #1
 800c7e4:	2300      	moveq	r3, #0
 800c7e6:	42b2      	cmp	r2, r6
 800c7e8:	bf0c      	ite	eq
 800c7ea:	2300      	moveq	r3, #0
 800c7ec:	f003 0301 	andne.w	r3, r3, #1
 800c7f0:	b113      	cbz	r3, 800c7f8 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d12c      	bne.n	800c852 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800c7f8:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800c7fc:	d124      	bne.n	800c848 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c7fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c802:	2b20      	cmp	r3, #32
 800c804:	b2de      	uxtb	r6, r3
 800c806:	d11d      	bne.n	800c844 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c808:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d019      	beq.n	800c844 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c810:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c812:	2224      	movs	r2, #36	; 0x24
 800c814:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	f022 0201 	bic.w	r2, r2, #1
 800c81e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c826:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c828:	6819      	ldr	r1, [r3, #0]
 800c82a:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c82c:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800c82e:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800c830:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	f042 0201 	orr.w	r2, r2, #1
 800c838:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c83a:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c83e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c842:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c844:	2002      	movs	r0, #2
}
 800c846:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800c848:	215f      	movs	r1, #95	; 0x5f
 800c84a:	4808      	ldr	r0, [pc, #32]	; (800c86c <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800c84c:	f7f8 fbb2 	bl	8004fb4 <assert_failed>
 800c850:	e7d5      	b.n	800c7fe <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c852:	215e      	movs	r1, #94	; 0x5e
 800c854:	4805      	ldr	r0, [pc, #20]	; (800c86c <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800c856:	f7f8 fbad 	bl	8004fb4 <assert_failed>
 800c85a:	e7cd      	b.n	800c7f8 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800c85c:	40005400 	.word	0x40005400
 800c860:	40005800 	.word	0x40005800
 800c864:	40005c00 	.word	0x40005c00
 800c868:	40006000 	.word	0x40006000
 800c86c:	0802cac0 	.word	0x0802cac0

0800c870 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c870:	4b22      	ldr	r3, [pc, #136]	; (800c8fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800c872:	6802      	ldr	r2, [r0, #0]
{
 800c874:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c876:	4d22      	ldr	r5, [pc, #136]	; (800c900 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800c878:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c87a:	4e22      	ldr	r6, [pc, #136]	; (800c904 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c87c:	429a      	cmp	r2, r3
 800c87e:	bf18      	it	ne
 800c880:	42aa      	cmpne	r2, r5
{
 800c882:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c884:	bf14      	ite	ne
 800c886:	2301      	movne	r3, #1
 800c888:	2300      	moveq	r3, #0
 800c88a:	42b2      	cmp	r2, r6
 800c88c:	bf0c      	ite	eq
 800c88e:	2300      	moveq	r3, #0
 800c890:	f003 0301 	andne.w	r3, r3, #1
 800c894:	b113      	cbz	r3, 800c89c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c896:	4b1c      	ldr	r3, [pc, #112]	; (800c908 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800c898:	429a      	cmp	r2, r3
 800c89a:	d12a      	bne.n	800c8f2 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c89c:	2d0f      	cmp	r5, #15
 800c89e:	d823      	bhi.n	800c8e8 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8a0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c8a4:	2b20      	cmp	r3, #32
 800c8a6:	b2de      	uxtb	r6, r3
 800c8a8:	d11c      	bne.n	800c8e4 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8aa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d018      	beq.n	800c8e4 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c8b2:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c8b4:	2224      	movs	r2, #36	; 0x24
 800c8b6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	f022 0201 	bic.w	r2, r2, #1
 800c8c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c8c2:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c8c4:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c8c8:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8cc:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800c8ce:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800c8d0:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	f042 0201 	orr.w	r2, r2, #1
 800c8d8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c8da:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c8de:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c8e4:	2002      	movs	r0, #2
}
 800c8e6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c8e8:	218d      	movs	r1, #141	; 0x8d
 800c8ea:	4808      	ldr	r0, [pc, #32]	; (800c90c <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c8ec:	f7f8 fb62 	bl	8004fb4 <assert_failed>
 800c8f0:	e7d6      	b.n	800c8a0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c8f2:	218c      	movs	r1, #140	; 0x8c
 800c8f4:	4805      	ldr	r0, [pc, #20]	; (800c90c <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c8f6:	f7f8 fb5d 	bl	8004fb4 <assert_failed>
 800c8fa:	e7cf      	b.n	800c89c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c8fc:	40005400 	.word	0x40005400
 800c900:	40005800 	.word	0x40005800
 800c904:	40005c00 	.word	0x40005c00
 800c908:	40006000 	.word	0x40006000
 800c90c:	0802cac0 	.word	0x0802cac0

0800c910 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c910:	2800      	cmp	r0, #0
 800c912:	d04c      	beq.n	800c9ae <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c914:	6802      	ldr	r2, [r0, #0]
{
 800c916:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c918:	4b26      	ldr	r3, [pc, #152]	; (800c9b4 <HAL_IWDG_Init+0xa4>)
 800c91a:	4604      	mov	r4, r0
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d003      	beq.n	800c928 <HAL_IWDG_Init+0x18>
 800c920:	21b5      	movs	r1, #181	; 0xb5
 800c922:	4825      	ldr	r0, [pc, #148]	; (800c9b8 <HAL_IWDG_Init+0xa8>)
 800c924:	f7f8 fb46 	bl	8004fb4 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c928:	6863      	ldr	r3, [r4, #4]
 800c92a:	2b06      	cmp	r3, #6
 800c92c:	d835      	bhi.n	800c99a <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c934:	d22c      	bcs.n	800c990 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c936:	68e3      	ldr	r3, [r4, #12]
 800c938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c93c:	d223      	bcs.n	800c986 <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c93e:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c942:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c944:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800c948:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c94a:	f245 5055 	movw	r0, #21845	; 0x5555
 800c94e:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c950:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c952:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c954:	f7fb fc2c 	bl	80081b0 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c958:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c95a:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c95c:	68da      	ldr	r2, [r3, #12]
 800c95e:	0751      	lsls	r1, r2, #29
 800c960:	d00a      	beq.n	800c978 <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c962:	f7fb fc25 	bl	80081b0 <HAL_GetTick>
 800c966:	1b43      	subs	r3, r0, r5
 800c968:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c96a:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c96c:	d9f6      	bls.n	800c95c <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c96e:	68da      	ldr	r2, [r3, #12]
 800c970:	0752      	lsls	r2, r2, #29
 800c972:	d0f3      	beq.n	800c95c <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800c974:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800c976:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c978:	6919      	ldr	r1, [r3, #16]
 800c97a:	68e2      	ldr	r2, [r4, #12]
 800c97c:	4291      	cmp	r1, r2
 800c97e:	d011      	beq.n	800c9a4 <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800c980:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c982:	611a      	str	r2, [r3, #16]
}
 800c984:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c986:	21b8      	movs	r1, #184	; 0xb8
 800c988:	480b      	ldr	r0, [pc, #44]	; (800c9b8 <HAL_IWDG_Init+0xa8>)
 800c98a:	f7f8 fb13 	bl	8004fb4 <assert_failed>
 800c98e:	e7d6      	b.n	800c93e <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c990:	21b7      	movs	r1, #183	; 0xb7
 800c992:	4809      	ldr	r0, [pc, #36]	; (800c9b8 <HAL_IWDG_Init+0xa8>)
 800c994:	f7f8 fb0e 	bl	8004fb4 <assert_failed>
 800c998:	e7cd      	b.n	800c936 <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c99a:	21b6      	movs	r1, #182	; 0xb6
 800c99c:	4806      	ldr	r0, [pc, #24]	; (800c9b8 <HAL_IWDG_Init+0xa8>)
 800c99e:	f7f8 fb09 	bl	8004fb4 <assert_failed>
 800c9a2:	e7c4      	b.n	800c92e <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c9a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800c9a8:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c9aa:	601a      	str	r2, [r3, #0]
}
 800c9ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c9ae:	2001      	movs	r0, #1
}
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	40003000 	.word	0x40003000
 800c9b8:	0802cafc 	.word	0x0802cafc

0800c9bc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c9bc:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c9be:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800c9c2:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	601a      	str	r2, [r3, #0]
}
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop

0800c9cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ce:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	f000 809d 	beq.w	800cb10 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800c9d6:	6804      	ldr	r4, [r0, #0]
 800c9d8:	4605      	mov	r5, r0
 800c9da:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800c9de:	d003      	beq.n	800c9e8 <HAL_PCD_Init+0x1c>
 800c9e0:	4b4f      	ldr	r3, [pc, #316]	; (800cb20 <HAL_PCD_Init+0x154>)
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	f040 8081 	bne.w	800caea <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c9e8:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800c9ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 8086 	beq.w	800cb02 <HAL_PCD_Init+0x136>
 800c9f6:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c9f8:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c9fa:	462e      	mov	r6, r5
 800c9fc:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800c9fe:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ca02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca04:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ca06:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800ca0a:	bf08      	it	eq
 800ca0c:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800ca0e:	f006 fe87 	bl	8013720 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca12:	f856 eb10 	ldr.w	lr, [r6], #16
 800ca16:	46b4      	mov	ip, r6
 800ca18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca24:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800ca28:	e884 0003 	stmia.w	r4, {r0, r1}
 800ca2c:	4670      	mov	r0, lr
 800ca2e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ca32:	f006 fdb5 	bl	80135a0 <USB_CoreInit>
 800ca36:	4604      	mov	r4, r0
 800ca38:	b130      	cbz	r0, 800ca48 <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800ca3a:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ca3c:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800ca3e:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ca40:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800ca44:	b00b      	add	sp, #44	; 0x2c
 800ca46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ca48:	4601      	mov	r1, r0
 800ca4a:	6828      	ldr	r0, [r5, #0]
 800ca4c:	f006 fe70 	bl	8013730 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca50:	6868      	ldr	r0, [r5, #4]
 800ca52:	b358      	cbz	r0, 800caac <HAL_PCD_Init+0xe0>
 800ca54:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800ca56:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ca5a:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800ca5c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca60:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800ca64:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800ca68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ca6c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca70:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800ca74:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca78:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ca7a:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800ca7e:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ca80:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca84:	d3ea      	bcc.n	800ca5c <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800ca86:	2200      	movs	r2, #0
 800ca88:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca8c:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800ca8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800ca92:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca96:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800ca98:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca9c:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ca9e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800caa2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800caa6:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800caaa:	d3ed      	bcc.n	800ca88 <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800caac:	466c      	mov	r4, sp
 800caae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cab2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cab6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800caba:	e884 0003 	stmia.w	r4, {r0, r1}
 800cabe:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cac2:	6828      	ldr	r0, [r5, #0]
 800cac4:	f006 feb8 	bl	8013838 <USB_DevInit>
 800cac8:	4604      	mov	r4, r0
 800caca:	2800      	cmp	r0, #0
 800cacc:	d1b5      	bne.n	800ca3a <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800cace:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800cad0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800cad2:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800cad6:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800cad8:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800cadc:	d01c      	beq.n	800cb18 <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800cade:	6828      	ldr	r0, [r5, #0]
 800cae0:	f007 fa72 	bl	8013fc8 <USB_DevDisconnect>
}
 800cae4:	4620      	mov	r0, r4
 800cae6:	b00b      	add	sp, #44	; 0x2c
 800cae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800caea:	2187      	movs	r1, #135	; 0x87
 800caec:	480d      	ldr	r0, [pc, #52]	; (800cb24 <HAL_PCD_Init+0x158>)
 800caee:	f7f8 fa61 	bl	8004fb4 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800caf2:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800caf6:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800caf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f47f af7a 	bne.w	800c9f6 <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800cb02:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800cb04:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800cb08:	f017 f890 	bl	8023c2c <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800cb0c:	6828      	ldr	r0, [r5, #0]
 800cb0e:	e773      	b.n	800c9f8 <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800cb10:	2401      	movs	r4, #1
}
 800cb12:	4620      	mov	r0, r4
 800cb14:	b00b      	add	sp, #44	; 0x2c
 800cb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f000 fcc7 	bl	800d4ac <HAL_PCDEx_ActivateLPM>
 800cb1e:	e7de      	b.n	800cade <HAL_PCD_Init+0x112>
 800cb20:	40040000 	.word	0x40040000
 800cb24:	0802cb38 	.word	0x0802cb38

0800cb28 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800cb28:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d00f      	beq.n	800cb50 <HAL_PCD_Start+0x28>
 800cb30:	2301      	movs	r3, #1
{
 800cb32:	b510      	push	{r4, lr}
 800cb34:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800cb36:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800cb38:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800cb3c:	f006 fde8 	bl	8013710 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cb40:	6820      	ldr	r0, [r4, #0]
 800cb42:	f007 fa31 	bl	8013fa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cb46:	2300      	movs	r3, #0

  return HAL_OK;
 800cb48:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800cb4a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800cb4e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800cb50:	2002      	movs	r0, #2
}
 800cb52:	4770      	bx	lr

0800cb54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cb58:	6807      	ldr	r7, [r0, #0]
{
 800cb5a:	b089      	sub	sp, #36	; 0x24
 800cb5c:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800cb5e:	4638      	mov	r0, r7
 800cb60:	f007 fa70 	bl	8014044 <USB_GetMode>
 800cb64:	b110      	cbz	r0, 800cb6c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800cb66:	b009      	add	sp, #36	; 0x24
 800cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800cb6c:	4683      	mov	fp, r0
 800cb6e:	6820      	ldr	r0, [r4, #0]
 800cb70:	f007 fa3a 	bl	8013fe8 <USB_ReadInterrupts>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d0f6      	beq.n	800cb66 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800cb78:	6820      	ldr	r0, [r4, #0]
 800cb7a:	f007 fa35 	bl	8013fe8 <USB_ReadInterrupts>
 800cb7e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800cb82:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800cb84:	d003      	beq.n	800cb8e <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800cb86:	6943      	ldr	r3, [r0, #20]
 800cb88:	f003 0302 	and.w	r3, r3, #2
 800cb8c:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800cb8e:	f007 fa2b 	bl	8013fe8 <USB_ReadInterrupts>
 800cb92:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cb96:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800cb98:	d012      	beq.n	800cbc0 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cb9a:	6983      	ldr	r3, [r0, #24]
 800cb9c:	f023 0310 	bic.w	r3, r3, #16
 800cba0:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800cba2:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cba4:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800cba8:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	f000 8253 	beq.w	800d058 <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800cbb2:	2b06      	cmp	r3, #6
 800cbb4:	f000 81b1 	beq.w	800cf1a <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cbb8:	6983      	ldr	r3, [r0, #24]
 800cbba:	f043 0310 	orr.w	r3, r3, #16
 800cbbe:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cbc0:	f007 fa12 	bl	8013fe8 <USB_ReadInterrupts>
 800cbc4:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cbc8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cbca:	f040 80cf 	bne.w	800cd6c <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cbce:	f007 fa0b 	bl	8013fe8 <USB_ReadInterrupts>
 800cbd2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cbd6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cbd8:	d175      	bne.n	800ccc6 <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cbda:	f007 fa05 	bl	8013fe8 <USB_ReadInterrupts>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	db5d      	blt.n	800cc9e <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cbe2:	6820      	ldr	r0, [r4, #0]
 800cbe4:	f007 fa00 	bl	8013fe8 <USB_ReadInterrupts>
 800cbe8:	0500      	lsls	r0, r0, #20
 800cbea:	d44d      	bmi.n	800cc88 <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800cbec:	6820      	ldr	r0, [r4, #0]
 800cbee:	f007 f9fb 	bl	8013fe8 <USB_ReadInterrupts>
 800cbf2:	0102      	lsls	r2, r0, #4
 800cbf4:	d514      	bpl.n	800cc20 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800cbf6:	6822      	ldr	r2, [r4, #0]
 800cbf8:	6953      	ldr	r3, [r2, #20]
 800cbfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbfe:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800cc00:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f040 8172 	bne.w	800ceee <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800cc0a:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cc0c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800cc0e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800cc12:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cc14:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800cc18:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cc1c:	f017 f974 	bl	8023f08 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cc20:	6820      	ldr	r0, [r4, #0]
 800cc22:	f007 f9e1 	bl	8013fe8 <USB_ReadInterrupts>
 800cc26:	04c3      	lsls	r3, r0, #19
 800cc28:	f100 8116 	bmi.w	800ce58 <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cc2c:	6820      	ldr	r0, [r4, #0]
 800cc2e:	f007 f9db 	bl	8013fe8 <USB_ReadInterrupts>
 800cc32:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800cc36:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cc38:	f040 80f7 	bne.w	800ce2a <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cc3c:	f007 f9d4 	bl	8013fe8 <USB_ReadInterrupts>
 800cc40:	0707      	lsls	r7, r0, #28
 800cc42:	f100 80e9 	bmi.w	800ce18 <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cc46:	6820      	ldr	r0, [r4, #0]
 800cc48:	f007 f9ce 	bl	8013fe8 <USB_ReadInterrupts>
 800cc4c:	02c6      	lsls	r6, r0, #11
 800cc4e:	f100 80d9 	bmi.w	800ce04 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cc52:	6820      	ldr	r0, [r4, #0]
 800cc54:	f007 f9c8 	bl	8013fe8 <USB_ReadInterrupts>
 800cc58:	0285      	lsls	r5, r0, #10
 800cc5a:	f100 80c9 	bmi.w	800cdf0 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cc5e:	6820      	ldr	r0, [r4, #0]
 800cc60:	f007 f9c2 	bl	8013fe8 <USB_ReadInterrupts>
 800cc64:	0040      	lsls	r0, r0, #1
 800cc66:	f100 80ba 	bmi.w	800cdde <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cc6a:	6820      	ldr	r0, [r4, #0]
 800cc6c:	f007 f9bc 	bl	8013fe8 <USB_ReadInterrupts>
 800cc70:	0741      	lsls	r1, r0, #29
 800cc72:	f57f af78 	bpl.w	800cb66 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800cc76:	6823      	ldr	r3, [r4, #0]
 800cc78:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cc7a:	076a      	lsls	r2, r5, #29
 800cc7c:	f100 820d 	bmi.w	800d09a <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	432a      	orrs	r2, r5
 800cc84:	605a      	str	r2, [r3, #4]
 800cc86:	e76e      	b.n	800cb66 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cc88:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800cc8c:	07d9      	lsls	r1, r3, #31
 800cc8e:	f100 8200 	bmi.w	800d092 <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cc92:	6820      	ldr	r0, [r4, #0]
 800cc94:	6943      	ldr	r3, [r0, #20]
 800cc96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc9a:	6143      	str	r3, [r0, #20]
 800cc9c:	e7a7      	b.n	800cbee <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cc9e:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800cca2:	f022 0201 	bic.w	r2, r2, #1
 800cca6:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800ccaa:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	f000 812c 	beq.w	800cf0c <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f017 f855 	bl	8023d64 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ccba:	6820      	ldr	r0, [r4, #0]
 800ccbc:	6943      	ldr	r3, [r0, #20]
 800ccbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccc2:	6143      	str	r3, [r0, #20]
 800ccc4:	e78e      	b.n	800cbe4 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ccc6:	f007 f99b 	bl	8014000 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800ccca:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cccc:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800ccce:	f1b8 0f00 	cmp.w	r8, #0
 800ccd2:	d082      	beq.n	800cbda <HAL_PCD_IRQHandler+0x86>
 800ccd4:	4626      	mov	r6, r4
 800ccd6:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800ccda:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800ccde:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800cce2:	e009      	b.n	800ccf8 <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800cce4:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800cce8:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800ccec:	f106 061c 	add.w	r6, r6, #28
 800ccf0:	f109 0920 	add.w	r9, r9, #32
 800ccf4:	f000 8126 	beq.w	800cf44 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ccf8:	f018 0f01 	tst.w	r8, #1
 800ccfc:	d0f2      	beq.n	800cce4 <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ccfe:	fa5f f78a 	uxtb.w	r7, sl
 800cd02:	4639      	mov	r1, r7
 800cd04:	f007 f98e 	bl	8014024 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cd08:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cd0a:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cd0c:	d515      	bpl.n	800cd3a <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cd0e:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cd10:	f00a 030f 	and.w	r3, sl, #15
 800cd14:	2201      	movs	r2, #1
 800cd16:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cd18:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800cd1c:	ea23 0302 	bic.w	r3, r3, r2
 800cd20:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cd24:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800cd26:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cd28:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800cd2c:	4299      	cmp	r1, r3
 800cd2e:	f000 81b9 	beq.w	800d0a4 <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cd32:	4639      	mov	r1, r7
 800cd34:	4620      	mov	r0, r4
 800cd36:	f016 ffd9 	bl	8023cec <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cd3a:	0728      	lsls	r0, r5, #28
 800cd3c:	d502      	bpl.n	800cd44 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cd3e:	2308      	movs	r3, #8
 800cd40:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cd44:	06e9      	lsls	r1, r5, #27
 800cd46:	d502      	bpl.n	800cd4e <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cd48:	2310      	movs	r3, #16
 800cd4a:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cd4e:	066a      	lsls	r2, r5, #25
 800cd50:	d502      	bpl.n	800cd58 <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cd52:	2340      	movs	r3, #64	; 0x40
 800cd54:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cd58:	07ab      	lsls	r3, r5, #30
 800cd5a:	d502      	bpl.n	800cd62 <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cd62:	062d      	lsls	r5, r5, #24
 800cd64:	f100 80f1 	bmi.w	800cf4a <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cd68:	6820      	ldr	r0, [r4, #0]
 800cd6a:	e7bb      	b.n	800cce4 <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cd6c:	f007 f940 	bl	8013ff0 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800cd70:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cd72:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800cd74:	2d00      	cmp	r5, #0
 800cd76:	f43f af2a 	beq.w	800cbce <HAL_PCD_IRQHandler+0x7a>
 800cd7a:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800cd7e:	46a2      	mov	sl, r4
      epnum = 0U;
 800cd80:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cd84:	9703      	str	r7, [sp, #12]
 800cd86:	e008      	b.n	800cd9a <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800cd88:	086d      	lsrs	r5, r5, #1
        epnum++;
 800cd8a:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800cd8e:	f106 0620 	add.w	r6, r6, #32
 800cd92:	f10a 0a1c 	add.w	sl, sl, #28
 800cd96:	f000 80d3 	beq.w	800cf40 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800cd9a:	07ef      	lsls	r7, r5, #31
 800cd9c:	d5f4      	bpl.n	800cd88 <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cd9e:	fa5f f788 	uxtb.w	r7, r8
 800cda2:	4639      	mov	r1, r7
 800cda4:	f007 f934 	bl	8014010 <USB_ReadDevOutEPInterrupt>
 800cda8:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cdaa:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800cdac:	f019 0f01 	tst.w	r9, #1
 800cdb0:	f040 8135 	bne.w	800d01e <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800cdb4:	f019 0f08 	tst.w	r9, #8
 800cdb8:	f040 8119 	bne.w	800cfee <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800cdbc:	f019 0f10 	tst.w	r9, #16
 800cdc0:	d001      	beq.n	800cdc6 <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800cdc2:	2310      	movs	r3, #16
 800cdc4:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cdc6:	f019 0f20 	tst.w	r9, #32
 800cdca:	d001      	beq.n	800cdd0 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cdcc:	2320      	movs	r3, #32
 800cdce:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800cdd0:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800cdd4:	d0d8      	beq.n	800cd88 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800cdd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cdda:	60b3      	str	r3, [r6, #8]
 800cddc:	e7d4      	b.n	800cd88 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800cdde:	4620      	mov	r0, r4
 800cde0:	f016 ffcc 	bl	8023d7c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cde4:	6820      	ldr	r0, [r4, #0]
 800cde6:	6943      	ldr	r3, [r0, #20]
 800cde8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cdec:	6143      	str	r3, [r0, #20]
 800cdee:	e73d      	b.n	800cc6c <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	f016 ffba 	bl	8023d6c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cdf8:	6820      	ldr	r0, [r4, #0]
 800cdfa:	6943      	ldr	r3, [r0, #20]
 800cdfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce00:	6143      	str	r3, [r0, #20]
 800ce02:	e72d      	b.n	800cc60 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ce04:	4620      	mov	r0, r4
 800ce06:	2100      	movs	r1, #0
 800ce08:	f016 ffb4 	bl	8023d74 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ce0c:	6820      	ldr	r0, [r4, #0]
 800ce0e:	6943      	ldr	r3, [r0, #20]
 800ce10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce14:	6143      	str	r3, [r0, #20]
 800ce16:	e71d      	b.n	800cc54 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f016 ff71 	bl	8023d00 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ce1e:	6820      	ldr	r0, [r4, #0]
 800ce20:	6943      	ldr	r3, [r0, #20]
 800ce22:	f003 0308 	and.w	r3, r3, #8
 800ce26:	6143      	str	r3, [r0, #20]
 800ce28:	e70e      	b.n	800cc48 <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800ce2a:	f007 f90f 	bl	801404c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ce2e:	6820      	ldr	r0, [r4, #0]
 800ce30:	f006 fdc0 	bl	80139b4 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ce34:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ce36:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ce38:	f000 ff86 	bl	800dd48 <HAL_RCC_GetHCLKFreq>
 800ce3c:	7b22      	ldrb	r2, [r4, #12]
 800ce3e:	4601      	mov	r1, r0
 800ce40:	4628      	mov	r0, r5
 800ce42:	f006 fbeb 	bl	801361c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800ce46:	4620      	mov	r0, r4
 800ce48:	f016 ff5e 	bl	8023d08 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ce4c:	6820      	ldr	r0, [r4, #0]
 800ce4e:	6943      	ldr	r3, [r0, #20]
 800ce50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce54:	6143      	str	r3, [r0, #20]
 800ce56:	e6f1      	b.n	800cc3c <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ce58:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800ce5c:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ce60:	2110      	movs	r1, #16
 800ce62:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ce64:	f023 0301 	bic.w	r3, r3, #1
 800ce68:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ce6a:	f006 fc97 	bl	801379c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce6e:	6860      	ldr	r0, [r4, #4]
 800ce70:	b1e0      	cbz	r0, 800ceac <HAL_PCD_IRQHandler+0x358>
 800ce72:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ce76:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800ce7a:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce7c:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce80:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce82:	3320      	adds	r3, #32
 800ce84:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce86:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800ce8a:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ce8e:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce92:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800ce96:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800ce9a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ce9e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800cea2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800cea6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ceaa:	d1e6      	bne.n	800ce7a <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ceac:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ceae:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ceb0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800ceb4:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ceb6:	b9f2      	cbnz	r2, 800cef6 <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ceb8:	696a      	ldr	r2, [r5, #20]
 800ceba:	f242 032b 	movw	r3, #8235	; 0x202b
 800cebe:	4313      	orrs	r3, r2
 800cec0:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cec2:	692b      	ldr	r3, [r5, #16]
 800cec4:	f043 030b 	orr.w	r3, r3, #11
 800cec8:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ceca:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cece:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800ced2:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ced4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ced8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ceda:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cede:	f007 f8cb 	bl	8014078 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cee2:	6820      	ldr	r0, [r4, #0]
 800cee4:	6943      	ldr	r3, [r0, #20]
 800cee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ceea:	6143      	str	r3, [r0, #20]
 800ceec:	e69f      	b.n	800cc2e <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800ceee:	4620      	mov	r0, r4
 800cef0:	f016 ff20 	bl	8023d34 <HAL_PCD_SuspendCallback>
 800cef4:	e694      	b.n	800cc20 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cef6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800cefa:	f043 030b 	orr.w	r3, r3, #11
 800cefe:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cf02:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800cf04:	f043 030b 	orr.w	r3, r3, #11
 800cf08:	646b      	str	r3, [r5, #68]	; 0x44
 800cf0a:	e7de      	b.n	800ceca <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800cf0c:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cf0e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800cf10:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cf14:	f016 fff8 	bl	8023f08 <HAL_PCDEx_LPM_Callback>
 800cf18:	e6cf      	b.n	800ccba <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf1a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cf1e:	2208      	movs	r2, #8
 800cf20:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800cf24:	4638      	mov	r0, r7
 800cf26:	f006 ffa9 	bl	8013e7c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf2a:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800cf2e:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cf32:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf34:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800cf38:	440b      	add	r3, r1
 800cf3a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800cf3e:	e63b      	b.n	800cbb8 <HAL_PCD_IRQHandler+0x64>
 800cf40:	9f03      	ldr	r7, [sp, #12]
 800cf42:	e644      	b.n	800cbce <HAL_PCD_IRQHandler+0x7a>
 800cf44:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800cf48:	e647      	b.n	800cbda <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800cf4a:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf4e:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800cf52:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf54:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800cf56:	f63f aec5 	bhi.w	800cce4 <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf5a:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800cf5e:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf60:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf64:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800cf68:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800cf6a:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800cf6c:	428a      	cmp	r2, r1
 800cf6e:	bf28      	it	cs
 800cf70:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf72:	9905      	ldr	r1, [sp, #20]
 800cf74:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800cf76:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf78:	b289      	uxth	r1, r1
 800cf7a:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800cf7e:	f0c0 80bc 	bcc.w	800d0fa <HAL_PCD_IRQHandler+0x5a6>
 800cf82:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf86:	46a0      	mov	r8, r4
 800cf88:	9c05      	ldr	r4, [sp, #20]
 800cf8a:	e01a      	b.n	800cfc2 <HAL_PCD_IRQHandler+0x46e>
 800cf8c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cf8e:	463a      	mov	r2, r7
 800cf90:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800cf92:	4658      	mov	r0, fp
 800cf94:	429d      	cmp	r5, r3
 800cf96:	bf28      	it	cs
 800cf98:	461d      	movcs	r5, r3
 800cf9a:	f898 3010 	ldrb.w	r3, [r8, #16]
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	b2ab      	uxth	r3, r5
 800cfa2:	f006 ff55 	bl	8013e50 <USB_WritePacket>
    ep->xfer_buff  += len;
 800cfa6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfa8:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800cfaa:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfac:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800cfae:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800cfb0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800cfb2:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800cfb4:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfb6:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800cfba:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfbc:	f0c0 8096 	bcc.w	800d0ec <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cfc0:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800cfc2:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800cfc4:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cfc8:	d3e0      	bcc.n	800cf8c <HAL_PCD_IRQHandler+0x438>
 800cfca:	4644      	mov	r4, r8
 800cfcc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cfd0:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cfd4:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cfd6:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cfd8:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cfda:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cfde:	f00a 030f 	and.w	r3, sl, #15
 800cfe2:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cfe4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800cfe6:	ea23 0302 	bic.w	r3, r3, r2
 800cfea:	634b      	str	r3, [r1, #52]	; 0x34
 800cfec:	e67a      	b.n	800cce4 <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cfee:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cff0:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cff4:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cffa:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cffc:	485f      	ldr	r0, [pc, #380]	; (800d17c <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cffe:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d000:	4282      	cmp	r2, r0
 800d002:	d961      	bls.n	800d0c8 <HAL_PCD_IRQHandler+0x574>
 800d004:	040a      	lsls	r2, r1, #16
 800d006:	d502      	bpl.n	800d00e <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d008:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d00c:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d00e:	4620      	mov	r0, r4
 800d010:	f016 fe5c 	bl	8023ccc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d014:	6921      	ldr	r1, [r4, #16]
 800d016:	2901      	cmp	r1, #1
 800d018:	d07f      	beq.n	800d11a <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d01a:	6820      	ldr	r0, [r4, #0]
 800d01c:	e6ce      	b.n	800cdbc <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d01e:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800d020:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d022:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d024:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800d028:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d02a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d02e:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800d032:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800d034:	d04d      	beq.n	800d0d2 <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d036:	4952      	ldr	r1, [pc, #328]	; (800d180 <HAL_PCD_IRQHandler+0x62c>)
 800d038:	458c      	cmp	ip, r1
 800d03a:	d062      	beq.n	800d102 <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d03c:	f1b8 0f00 	cmp.w	r8, #0
 800d040:	d104      	bne.n	800d04c <HAL_PCD_IRQHandler+0x4f8>
 800d042:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800d046:	2a00      	cmp	r2, #0
 800d048:	f000 8092 	beq.w	800d170 <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d04c:	4620      	mov	r0, r4
 800d04e:	4639      	mov	r1, r7
 800d050:	f016 fe42 	bl	8023cd8 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d054:	6820      	ldr	r0, [r4, #0]
 800d056:	e6ad      	b.n	800cdb4 <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d058:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800d05c:	421d      	tst	r5, r3
 800d05e:	f43f adab 	beq.w	800cbb8 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d062:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800d066:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800d06a:	4638      	mov	r0, r7
 800d06c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d070:	4615      	mov	r5, r2
 800d072:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800d076:	f006 ff01 	bl	8013e7c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d07a:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d07e:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d080:	442b      	add	r3, r5
 800d082:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d086:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800d08a:	442b      	add	r3, r5
 800d08c:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800d090:	e592      	b.n	800cbb8 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800d092:	4620      	mov	r0, r4
 800d094:	f016 fe4e 	bl	8023d34 <HAL_PCD_SuspendCallback>
 800d098:	e5fb      	b.n	800cc92 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800d09a:	4620      	mov	r0, r4
 800d09c:	f016 fe72 	bl	8023d84 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	e5ed      	b.n	800cc80 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d0a4:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800d0a8:	4413      	add	r3, r2
 800d0aa:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d0ac:	f1ba 0f00 	cmp.w	sl, #0
 800d0b0:	f47f ae3f 	bne.w	800cd32 <HAL_PCD_IRQHandler+0x1de>
 800d0b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f47f ae3b 	bne.w	800cd32 <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d0bc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d0c0:	6820      	ldr	r0, [r4, #0]
 800d0c2:	f006 ffd9 	bl	8014078 <USB_EP0_OutStart>
 800d0c6:	e634      	b.n	800cd32 <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f016 fdff 	bl	8023ccc <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d0ce:	6820      	ldr	r0, [r4, #0]
 800d0d0:	e674      	b.n	800cdbc <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d0d2:	0719      	lsls	r1, r3, #28
 800d0d4:	d51c      	bpl.n	800d110 <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0d6:	4929      	ldr	r1, [pc, #164]	; (800d17c <HAL_PCD_IRQHandler+0x628>)
 800d0d8:	458c      	cmp	ip, r1
 800d0da:	f67f ae6b 	bls.w	800cdb4 <HAL_PCD_IRQHandler+0x260>
 800d0de:	041f      	lsls	r7, r3, #16
 800d0e0:	f57f ae68 	bpl.w	800cdb4 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d0e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0e8:	6093      	str	r3, [r2, #8]
 800d0ea:	e663      	b.n	800cdb4 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d0ec:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800d0ee:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d0f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d0f4:	f8d4 b000 	ldr.w	fp, [r4]
 800d0f8:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800d0fa:	42ab      	cmp	r3, r5
 800d0fc:	f4ff adf2 	bcc.w	800cce4 <HAL_PCD_IRQHandler+0x190>
 800d100:	e768      	b.n	800cfd4 <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d102:	0419      	lsls	r1, r3, #16
 800d104:	d4ee      	bmi.n	800d0e4 <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d106:	0699      	lsls	r1, r3, #26
 800d108:	d5a0      	bpl.n	800d04c <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d10a:	2120      	movs	r1, #32
 800d10c:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d10e:	e79d      	b.n	800d04c <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d110:	0699      	lsls	r1, r3, #26
 800d112:	d508      	bpl.n	800d126 <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d114:	2320      	movs	r3, #32
 800d116:	6093      	str	r3, [r2, #8]
 800d118:	e64c      	b.n	800cdb4 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d11a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d11e:	6820      	ldr	r0, [r4, #0]
 800d120:	f006 ffaa 	bl	8014078 <USB_EP0_OutStart>
 800d124:	e779      	b.n	800d01a <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d126:	f013 0f28 	tst.w	r3, #40	; 0x28
 800d12a:	f47f ae43 	bne.w	800cdb4 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d12e:	4913      	ldr	r1, [pc, #76]	; (800d17c <HAL_PCD_IRQHandler+0x628>)
 800d130:	458c      	cmp	ip, r1
 800d132:	d901      	bls.n	800d138 <HAL_PCD_IRQHandler+0x5e4>
 800d134:	041b      	lsls	r3, r3, #16
 800d136:	d4d5      	bmi.n	800d0e4 <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d138:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800d13a:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d13e:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d142:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800d144:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d148:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800d14c:	440a      	add	r2, r1
 800d14e:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d152:	f1b8 0f00 	cmp.w	r8, #0
 800d156:	f47f af79 	bne.w	800d04c <HAL_PCD_IRQHandler+0x4f8>
 800d15a:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800d15e:	2a00      	cmp	r2, #0
 800d160:	f47f af74 	bne.w	800d04c <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d164:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d168:	2101      	movs	r1, #1
 800d16a:	f006 ff85 	bl	8014078 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d16e:	e76d      	b.n	800d04c <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d170:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d174:	4641      	mov	r1, r8
 800d176:	f006 ff7f 	bl	8014078 <USB_EP0_OutStart>
 800d17a:	e767      	b.n	800d04c <HAL_PCD_IRQHandler+0x4f8>
 800d17c:	4f54300a 	.word	0x4f54300a
 800d180:	4f54310a 	.word	0x4f54310a

0800d184 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800d184:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800d188:	2a01      	cmp	r2, #1
 800d18a:	d00e      	beq.n	800d1aa <HAL_PCD_SetAddress+0x26>
 800d18c:	2201      	movs	r2, #1
{
 800d18e:	b510      	push	{r4, lr}
 800d190:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d192:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800d194:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800d198:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d19c:	f006 fef2 	bl	8013f84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d1a0:	2300      	movs	r3, #0
  return HAL_OK;
 800d1a2:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d1a4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d1a8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800d1aa:	2002      	movs	r0, #2
}
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop

0800d1b0 <HAL_PCD_EP_Open>:
{
 800d1b0:	b510      	push	{r4, lr}
 800d1b2:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800d1b6:	0609      	lsls	r1, r1, #24
{
 800d1b8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800d1ba:	d427      	bmi.n	800d20c <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d1bc:	f04f 0c1c 	mov.w	ip, #28
 800d1c0:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800d1c4:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800d1c8:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800d1cc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800d1d6:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800d1d8:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d1da:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800d1de:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800d1e0:	b10a      	cbz	r2, 800d1e6 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800d1e2:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	d101      	bne.n	800d1ee <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800d1ee:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d018      	beq.n	800d228 <HAL_PCD_EP_Open+0x78>
 800d1f6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d1f8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d1fa:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d1fe:	f006 fbe5 	bl	80139cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d202:	2300      	movs	r3, #0
  return ret;
 800d204:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d206:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d20a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d20c:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800d20e:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d212:	fb00 400e 	mla	r0, r0, lr, r4
 800d216:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800d21a:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800d21e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800d222:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800d226:	e7d6      	b.n	800d1d6 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800d228:	2002      	movs	r0, #2
}
 800d22a:	bd10      	pop	{r4, pc}

0800d22c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800d22c:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d230:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d234:	f04f 011c 	mov.w	r1, #28
{
 800d238:	b510      	push	{r4, lr}
 800d23a:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800d23c:	d11a      	bne.n	800d274 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d23e:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800d242:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800d246:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d248:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d24c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d250:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d254:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800d256:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d019      	beq.n	800d292 <HAL_PCD_EP_Close+0x66>
 800d25e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d260:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d262:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d266:	f006 fbf9 	bl	8013a5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d26a:	2300      	movs	r3, #0
  return HAL_OK;
 800d26c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d26e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d272:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d274:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800d278:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800d27c:	2001      	movs	r0, #1
 800d27e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d282:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d284:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d288:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800d28a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d1e5      	bne.n	800d25e <HAL_PCD_EP_Close+0x32>
 800d292:	2002      	movs	r0, #2
}
 800d294:	bd10      	pop	{r4, pc}
 800d296:	bf00      	nop

0800d298 <HAL_PCD_EP_Receive>:
{
 800d298:	b510      	push	{r4, lr}
 800d29a:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d29e:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800d2a0:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2a4:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800d2a8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2ac:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800d2b0:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800d2b4:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800d2b6:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800d2ba:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800d2be:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800d2c2:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800d2c6:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d2c8:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800d2ca:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800d2cc:	bf08      	it	eq
 800d2ce:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d2d2:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d2d4:	b91c      	cbnz	r4, 800d2de <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d2d6:	f006 fd37 	bl	8013d48 <USB_EP0StartXfer>
}
 800d2da:	2000      	movs	r0, #0
 800d2dc:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d2de:	f006 fc1b 	bl	8013b18 <USB_EPStartXfer>
}
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	bd10      	pop	{r4, pc}
 800d2e6:	bf00      	nop

0800d2e8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d2e8:	f001 010f 	and.w	r1, r1, #15
 800d2ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d2f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800d2f4:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop

0800d2fc <HAL_PCD_EP_Transmit>:
{
 800d2fc:	b510      	push	{r4, lr}
 800d2fe:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d302:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800d304:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d308:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800d30c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d310:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800d312:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800d316:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800d318:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800d31c:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800d320:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d322:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800d326:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800d32a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d32c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800d32e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800d330:	bf08      	it	eq
 800d332:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d336:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d338:	b91c      	cbnz	r4, 800d342 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d33a:	f006 fd05 	bl	8013d48 <USB_EP0StartXfer>
}
 800d33e:	2000      	movs	r0, #0
 800d340:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d342:	f006 fbe9 	bl	8013b18 <USB_EPStartXfer>
}
 800d346:	2000      	movs	r0, #0
 800d348:	bd10      	pop	{r4, pc}
 800d34a:	bf00      	nop

0800d34c <HAL_PCD_EP_SetStall>:
{
 800d34c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d34e:	6843      	ldr	r3, [r0, #4]
 800d350:	f001 050f 	and.w	r5, r1, #15
 800d354:	429d      	cmp	r5, r3
 800d356:	d834      	bhi.n	800d3c2 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800d358:	060b      	lsls	r3, r1, #24
 800d35a:	4604      	mov	r4, r0
 800d35c:	d41d      	bmi.n	800d39a <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800d35e:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800d360:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800d364:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800d368:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d36c:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800d36e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d372:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800d376:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d378:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800d37a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800d37c:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800d380:	429a      	cmp	r2, r3
 800d382:	d01c      	beq.n	800d3be <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d384:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d386:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d38a:	f006 fd9b 	bl	8013ec4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d38e:	b1d5      	cbz	r5, 800d3c6 <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800d390:	2300      	movs	r3, #0
  return HAL_OK;
 800d392:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d394:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d398:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d39a:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800d39c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800d3a0:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3a2:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800d3a6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3aa:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800d3b0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d3b2:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800d3b4:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800d3b6:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d1e2      	bne.n	800d384 <HAL_PCD_EP_SetStall+0x38>
 800d3be:	2002      	movs	r0, #2
}
 800d3c0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d3c2:	2001      	movs	r0, #1
}
 800d3c4:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d3c6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d3ca:	7c21      	ldrb	r1, [r4, #16]
 800d3cc:	6820      	ldr	r0, [r4, #0]
 800d3ce:	f006 fe53 	bl	8014078 <USB_EP0_OutStart>
 800d3d2:	e7dd      	b.n	800d390 <HAL_PCD_EP_SetStall+0x44>

0800d3d4 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d3d4:	6842      	ldr	r2, [r0, #4]
{
 800d3d6:	b538      	push	{r3, r4, r5, lr}
 800d3d8:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d832      	bhi.n	800d446 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800d3e0:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d3e4:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3e6:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800d3ea:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800d3ee:	d119      	bne.n	800d424 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d3f0:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800d3fa:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d3fc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d400:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800d404:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800d406:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800d408:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d018      	beq.n	800d442 <HAL_PCD_EP_ClrStall+0x6e>
 800d410:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d412:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d414:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d418:	f006 fd88 	bl	8013f2c <USB_EPClearStall>
  return HAL_OK;
 800d41c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800d41e:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800d422:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d424:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800d428:	2001      	movs	r0, #1
 800d42a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800d42e:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d430:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d432:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800d436:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800d438:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800d43a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d1e6      	bne.n	800d410 <HAL_PCD_EP_ClrStall+0x3c>
 800d442:	2002      	movs	r0, #2
}
 800d444:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d446:	2001      	movs	r0, #1
}
 800d448:	bd38      	pop	{r3, r4, r5, pc}
 800d44a:	bf00      	nop

0800d44c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d44c:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d44e:	6804      	ldr	r4, [r0, #0]
 800d450:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800d452:	b931      	cbnz	r1, 800d462 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d454:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d458:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800d45a:	2000      	movs	r0, #0
 800d45c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d460:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d462:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800d464:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d468:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800d46c:	d00b      	beq.n	800d486 <HAL_PCDEx_SetTxFiFo+0x3a>
 800d46e:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d470:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800d474:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d476:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800d47a:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d47c:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800d47e:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d480:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800d484:	d3f4      	bcc.n	800d470 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d486:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800d48a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d48e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800d492:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d496:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800d49a:	2000      	movs	r0, #0
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop

0800d4a0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d4a0:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800d4a2:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	6259      	str	r1, [r3, #36]	; 0x24
}
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop

0800d4ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d4ac:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800d4ae:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d4b2:	4909      	ldr	r1, [pc, #36]	; (800d4d8 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d4b4:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800d4b6:	4660      	mov	r0, ip
{
 800d4b8:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800d4ba:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800d4bc:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800d4c0:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d4c4:	6993      	ldr	r3, [r2, #24]
}
 800d4c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d4ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4ce:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d4d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d4d2:	4319      	orrs	r1, r3
 800d4d4:	6551      	str	r1, [r2, #84]	; 0x54
}
 800d4d6:	4770      	bx	lr
 800d4d8:	10000003 	.word	0x10000003

0800d4dc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4dc:	4a02      	ldr	r2, [pc, #8]	; (800d4e8 <HAL_PWR_EnableBkUpAccess+0xc>)
 800d4de:	6813      	ldr	r3, [r2, #0]
 800d4e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4e4:	6013      	str	r3, [r2, #0]
}
 800d4e6:	4770      	bx	lr
 800d4e8:	40007000 	.word	0x40007000

0800d4ec <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800d4ec:	4b1a      	ldr	r3, [pc, #104]	; (800d558 <HAL_PWREx_EnableOverDrive+0x6c>)
 800d4ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800d4f4:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800d4f6:	641a      	str	r2, [r3, #64]	; 0x40
{
 800d4f8:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800d4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d4fc:	4c17      	ldr	r4, [pc, #92]	; (800d55c <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800d4fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d502:	9301      	str	r3, [sp, #4]
 800d504:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d50c:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d50e:	f7fa fe4f 	bl	80081b0 <HAL_GetTick>
 800d512:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d514:	e005      	b.n	800d522 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d516:	f7fa fe4b 	bl	80081b0 <HAL_GetTick>
 800d51a:	1b40      	subs	r0, r0, r5
 800d51c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d520:	d817      	bhi.n	800d552 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d522:	6863      	ldr	r3, [r4, #4]
 800d524:	03da      	lsls	r2, r3, #15
 800d526:	d5f6      	bpl.n	800d516 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d528:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d52a:	4d0c      	ldr	r5, [pc, #48]	; (800d55c <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d52c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d530:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d532:	f7fa fe3d 	bl	80081b0 <HAL_GetTick>
 800d536:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d538:	e005      	b.n	800d546 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d53a:	f7fa fe39 	bl	80081b0 <HAL_GetTick>
 800d53e:	1b00      	subs	r0, r0, r4
 800d540:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d544:	d805      	bhi.n	800d552 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d546:	686b      	ldr	r3, [r5, #4]
 800d548:	039b      	lsls	r3, r3, #14
 800d54a:	d5f6      	bpl.n	800d53a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800d54c:	2000      	movs	r0, #0
}
 800d54e:	b003      	add	sp, #12
 800d550:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800d552:	2003      	movs	r0, #3
}
 800d554:	b003      	add	sp, #12
 800d556:	bd30      	pop	{r4, r5, pc}
 800d558:	40023800 	.word	0x40023800
 800d55c:	40007000 	.word	0x40007000

0800d560 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d560:	2800      	cmp	r0, #0
 800d562:	f000 828c 	beq.w	800da7e <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d566:	6803      	ldr	r3, [r0, #0]
 800d568:	2b0f      	cmp	r3, #15
{
 800d56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56e:	4604      	mov	r4, r0
 800d570:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d572:	f200 8123 	bhi.w	800d7bc <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d576:	07dd      	lsls	r5, r3, #31
 800d578:	d534      	bpl.n	800d5e4 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d57a:	6863      	ldr	r3, [r4, #4]
 800d57c:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800d580:	d003      	beq.n	800d58a <HAL_RCC_OscConfig+0x2a>
 800d582:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d586:	f040 8175 	bne.w	800d874 <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d58a:	4aa3      	ldr	r2, [pc, #652]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
 800d58c:	6893      	ldr	r3, [r2, #8]
 800d58e:	f003 030c 	and.w	r3, r3, #12
 800d592:	2b04      	cmp	r3, #4
 800d594:	d01d      	beq.n	800d5d2 <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d596:	6893      	ldr	r3, [r2, #8]
 800d598:	f003 030c 	and.w	r3, r3, #12
 800d59c:	2b08      	cmp	r3, #8
 800d59e:	d015      	beq.n	800d5cc <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d5a0:	6863      	ldr	r3, [r4, #4]
 800d5a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5a6:	f000 816b 	beq.w	800d880 <HAL_RCC_OscConfig+0x320>
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f000 819c 	beq.w	800d8e8 <HAL_RCC_OscConfig+0x388>
 800d5b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d5b4:	4b98      	ldr	r3, [pc, #608]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	f000 822d 	beq.w	800da16 <HAL_RCC_OscConfig+0x4b6>
 800d5bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d5c8:	601a      	str	r2, [r3, #0]
 800d5ca:	e15e      	b.n	800d88a <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d5cc:	6853      	ldr	r3, [r2, #4]
 800d5ce:	0258      	lsls	r0, r3, #9
 800d5d0:	d5e6      	bpl.n	800d5a0 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5d2:	4b91      	ldr	r3, [pc, #580]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	0399      	lsls	r1, r3, #14
 800d5d8:	d503      	bpl.n	800d5e2 <HAL_RCC_OscConfig+0x82>
 800d5da:	6863      	ldr	r3, [r4, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f000 80ff 	beq.w	800d7e0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	079f      	lsls	r7, r3, #30
 800d5e6:	d531      	bpl.n	800d64c <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d5e8:	68e3      	ldr	r3, [r4, #12]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	f200 80fc 	bhi.w	800d7e8 <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d5f0:	6923      	ldr	r3, [r4, #16]
 800d5f2:	2b1f      	cmp	r3, #31
 800d5f4:	f200 8101 	bhi.w	800d7fa <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d5f8:	4b87      	ldr	r3, [pc, #540]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
 800d5fa:	689a      	ldr	r2, [r3, #8]
 800d5fc:	f012 0f0c 	tst.w	r2, #12
 800d600:	f000 80e7 	beq.w	800d7d2 <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d604:	689a      	ldr	r2, [r3, #8]
 800d606:	f002 020c 	and.w	r2, r2, #12
 800d60a:	2a08      	cmp	r2, #8
 800d60c:	f000 80dd 	beq.w	800d7ca <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d610:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d612:	4d81      	ldr	r5, [pc, #516]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 819d 	beq.w	800d954 <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800d61a:	682b      	ldr	r3, [r5, #0]
 800d61c:	f043 0301 	orr.w	r3, r3, #1
 800d620:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d622:	f7fa fdc5 	bl	80081b0 <HAL_GetTick>
 800d626:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d628:	e005      	b.n	800d636 <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d62a:	f7fa fdc1 	bl	80081b0 <HAL_GetTick>
 800d62e:	1b80      	subs	r0, r0, r6
 800d630:	2802      	cmp	r0, #2
 800d632:	f200 8155 	bhi.w	800d8e0 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d636:	682b      	ldr	r3, [r5, #0]
 800d638:	0798      	lsls	r0, r3, #30
 800d63a:	d5f6      	bpl.n	800d62a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	6922      	ldr	r2, [r4, #16]
 800d640:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d644:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d648:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d64a:	6823      	ldr	r3, [r4, #0]
 800d64c:	071a      	lsls	r2, r3, #28
 800d64e:	d42a      	bmi.n	800d6a6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d650:	075e      	lsls	r6, r3, #29
 800d652:	d544      	bpl.n	800d6de <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800d654:	68a3      	ldr	r3, [r4, #8]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d906      	bls.n	800d668 <HAL_RCC_OscConfig+0x108>
 800d65a:	2b05      	cmp	r3, #5
 800d65c:	d004      	beq.n	800d668 <HAL_RCC_OscConfig+0x108>
 800d65e:	f240 2106 	movw	r1, #518	; 0x206
 800d662:	486e      	ldr	r0, [pc, #440]	; (800d81c <HAL_RCC_OscConfig+0x2bc>)
 800d664:	f7f7 fca6 	bl	8004fb4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d668:	4b6b      	ldr	r3, [pc, #428]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
 800d66a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d66c:	00d5      	lsls	r5, r2, #3
 800d66e:	f140 80ec 	bpl.w	800d84a <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800d672:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d674:	4e6a      	ldr	r6, [pc, #424]	; (800d820 <HAL_RCC_OscConfig+0x2c0>)
 800d676:	6833      	ldr	r3, [r6, #0]
 800d678:	05d8      	lsls	r0, r3, #23
 800d67a:	f140 8121 	bpl.w	800d8c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d67e:	68a3      	ldr	r3, [r4, #8]
 800d680:	2b01      	cmp	r3, #1
 800d682:	f000 8179 	beq.w	800d978 <HAL_RCC_OscConfig+0x418>
 800d686:	2b00      	cmp	r3, #0
 800d688:	f000 8144 	beq.w	800d914 <HAL_RCC_OscConfig+0x3b4>
 800d68c:	2b05      	cmp	r3, #5
 800d68e:	4b62      	ldr	r3, [pc, #392]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
 800d690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d692:	f000 81c8 	beq.w	800da26 <HAL_RCC_OscConfig+0x4c6>
 800d696:	f022 0201 	bic.w	r2, r2, #1
 800d69a:	671a      	str	r2, [r3, #112]	; 0x70
 800d69c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d69e:	f022 0204 	bic.w	r2, r2, #4
 800d6a2:	671a      	str	r2, [r3, #112]	; 0x70
 800d6a4:	e16d      	b.n	800d982 <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d6a6:	6963      	ldr	r3, [r4, #20]
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	f200 80c4 	bhi.w	800d836 <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800d6ae:	4d5a      	ldr	r5, [pc, #360]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f000 80a8 	beq.w	800d806 <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800d6b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d6b8:	f043 0301 	orr.w	r3, r3, #1
 800d6bc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d6be:	f7fa fd77 	bl	80081b0 <HAL_GetTick>
 800d6c2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d6c4:	e005      	b.n	800d6d2 <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d6c6:	f7fa fd73 	bl	80081b0 <HAL_GetTick>
 800d6ca:	1b80      	subs	r0, r0, r6
 800d6cc:	2802      	cmp	r0, #2
 800d6ce:	f200 8107 	bhi.w	800d8e0 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d6d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d6d4:	079b      	lsls	r3, r3, #30
 800d6d6:	d5f6      	bpl.n	800d6c6 <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d6d8:	6823      	ldr	r3, [r4, #0]
 800d6da:	075e      	lsls	r6, r3, #29
 800d6dc:	d4ba      	bmi.n	800d654 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d6de:	69a0      	ldr	r0, [r4, #24]
 800d6e0:	2802      	cmp	r0, #2
 800d6e2:	f200 80bd 	bhi.w	800d860 <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d064      	beq.n	800d7b4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d6ea:	4d4b      	ldr	r5, [pc, #300]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
 800d6ec:	68ab      	ldr	r3, [r5, #8]
 800d6ee:	f003 030c 	and.w	r3, r3, #12
 800d6f2:	2b08      	cmp	r3, #8
 800d6f4:	f000 8158 	beq.w	800d9a8 <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d6f8:	2802      	cmp	r0, #2
 800d6fa:	f040 81ae 	bne.w	800da5a <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d6fe:	69e3      	ldr	r3, [r4, #28]
 800d700:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800d704:	f040 81a3 	bne.w	800da4e <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800d708:	6a23      	ldr	r3, [r4, #32]
 800d70a:	3b02      	subs	r3, #2
 800d70c:	2b3d      	cmp	r3, #61	; 0x3d
 800d70e:	f200 8198 	bhi.w	800da42 <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800d712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d714:	3b32      	subs	r3, #50	; 0x32
 800d716:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800d71a:	f200 818c 	bhi.w	800da36 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800d71e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d720:	2b08      	cmp	r3, #8
 800d722:	f200 8172 	bhi.w	800da0a <HAL_RCC_OscConfig+0x4aa>
 800d726:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800d72a:	fa22 f303 	lsr.w	r3, r2, r3
 800d72e:	07d8      	lsls	r0, r3, #31
 800d730:	f140 816b 	bpl.w	800da0a <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800d734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d736:	3b02      	subs	r3, #2
 800d738:	2b0d      	cmp	r3, #13
 800d73a:	f200 81a8 	bhi.w	800da8e <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800d73e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d740:	3b02      	subs	r3, #2
 800d742:	2b05      	cmp	r3, #5
 800d744:	f200 819d 	bhi.w	800da82 <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d748:	4d33      	ldr	r5, [pc, #204]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
 800d74a:	682b      	ldr	r3, [r5, #0]
 800d74c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d750:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d752:	f7fa fd2d 	bl	80081b0 <HAL_GetTick>
 800d756:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d758:	e005      	b.n	800d766 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d75a:	f7fa fd29 	bl	80081b0 <HAL_GetTick>
 800d75e:	1b80      	subs	r0, r0, r6
 800d760:	2802      	cmp	r0, #2
 800d762:	f200 80bd 	bhi.w	800d8e0 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d766:	682b      	ldr	r3, [r5, #0]
 800d768:	0199      	lsls	r1, r3, #6
 800d76a:	d4f6      	bmi.n	800d75a <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d76c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800d770:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d772:	430b      	orrs	r3, r1
 800d774:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d776:	4e28      	ldr	r6, [pc, #160]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d778:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d77c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800d780:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d784:	0852      	lsrs	r2, r2, #1
 800d786:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d78a:	3a01      	subs	r2, #1
 800d78c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d790:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800d792:	682b      	ldr	r3, [r5, #0]
 800d794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d798:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d79a:	f7fa fd09 	bl	80081b0 <HAL_GetTick>
 800d79e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7a0:	e005      	b.n	800d7ae <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7a2:	f7fa fd05 	bl	80081b0 <HAL_GetTick>
 800d7a6:	1b00      	subs	r0, r0, r4
 800d7a8:	2802      	cmp	r0, #2
 800d7aa:	f200 8099 	bhi.w	800d8e0 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7ae:	6833      	ldr	r3, [r6, #0]
 800d7b0:	019a      	lsls	r2, r3, #6
 800d7b2:	d5f6      	bpl.n	800d7a2 <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800d7b4:	2000      	movs	r0, #0
}
 800d7b6:	b002      	add	sp, #8
 800d7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d7bc:	f240 1163 	movw	r1, #355	; 0x163
 800d7c0:	4816      	ldr	r0, [pc, #88]	; (800d81c <HAL_RCC_OscConfig+0x2bc>)
 800d7c2:	f7f7 fbf7 	bl	8004fb4 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	e6d5      	b.n	800d576 <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	025e      	lsls	r6, r3, #9
 800d7ce:	f53f af1f 	bmi.w	800d610 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7d2:	4b11      	ldr	r3, [pc, #68]	; (800d818 <HAL_RCC_OscConfig+0x2b8>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	079d      	lsls	r5, r3, #30
 800d7d8:	d565      	bpl.n	800d8a6 <HAL_RCC_OscConfig+0x346>
 800d7da:	68e3      	ldr	r3, [r4, #12]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d062      	beq.n	800d8a6 <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800d7e0:	2001      	movs	r0, #1
}
 800d7e2:	b002      	add	sp, #8
 800d7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d7e8:	f240 119b 	movw	r1, #411	; 0x19b
 800d7ec:	480b      	ldr	r0, [pc, #44]	; (800d81c <HAL_RCC_OscConfig+0x2bc>)
 800d7ee:	f7f7 fbe1 	bl	8004fb4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d7f2:	6923      	ldr	r3, [r4, #16]
 800d7f4:	2b1f      	cmp	r3, #31
 800d7f6:	f67f aeff 	bls.w	800d5f8 <HAL_RCC_OscConfig+0x98>
 800d7fa:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d7fe:	4807      	ldr	r0, [pc, #28]	; (800d81c <HAL_RCC_OscConfig+0x2bc>)
 800d800:	f7f7 fbd8 	bl	8004fb4 <assert_failed>
 800d804:	e6f8      	b.n	800d5f8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800d806:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d808:	f023 0301 	bic.w	r3, r3, #1
 800d80c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d80e:	f7fa fccf 	bl	80081b0 <HAL_GetTick>
 800d812:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d814:	e00b      	b.n	800d82e <HAL_RCC_OscConfig+0x2ce>
 800d816:	bf00      	nop
 800d818:	40023800 	.word	0x40023800
 800d81c:	0802cb70 	.word	0x0802cb70
 800d820:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d824:	f7fa fcc4 	bl	80081b0 <HAL_GetTick>
 800d828:	1b80      	subs	r0, r0, r6
 800d82a:	2802      	cmp	r0, #2
 800d82c:	d858      	bhi.n	800d8e0 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d82e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d830:	079f      	lsls	r7, r3, #30
 800d832:	d4f7      	bmi.n	800d824 <HAL_RCC_OscConfig+0x2c4>
 800d834:	e750      	b.n	800d6d8 <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d836:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800d83a:	4898      	ldr	r0, [pc, #608]	; (800da9c <HAL_RCC_OscConfig+0x53c>)
 800d83c:	f7f7 fbba 	bl	8004fb4 <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d840:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800d842:	4d97      	ldr	r5, [pc, #604]	; (800daa0 <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d844:	2b00      	cmp	r3, #0
 800d846:	d0de      	beq.n	800d806 <HAL_RCC_OscConfig+0x2a6>
 800d848:	e735      	b.n	800d6b6 <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d84a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800d84c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800d84e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d852:	641a      	str	r2, [r3, #64]	; 0x40
 800d854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d85a:	9301      	str	r3, [sp, #4]
 800d85c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800d85e:	e709      	b.n	800d674 <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d860:	488e      	ldr	r0, [pc, #568]	; (800da9c <HAL_RCC_OscConfig+0x53c>)
 800d862:	f240 214a 	movw	r1, #586	; 0x24a
 800d866:	f7f7 fba5 	bl	8004fb4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d86a:	69a0      	ldr	r0, [r4, #24]
 800d86c:	2800      	cmp	r0, #0
 800d86e:	f47f af3c 	bne.w	800d6ea <HAL_RCC_OscConfig+0x18a>
 800d872:	e79f      	b.n	800d7b4 <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d874:	f240 1169 	movw	r1, #361	; 0x169
 800d878:	4888      	ldr	r0, [pc, #544]	; (800da9c <HAL_RCC_OscConfig+0x53c>)
 800d87a:	f7f7 fb9b 	bl	8004fb4 <assert_failed>
 800d87e:	e684      	b.n	800d58a <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d880:	4a87      	ldr	r2, [pc, #540]	; (800daa0 <HAL_RCC_OscConfig+0x540>)
 800d882:	6813      	ldr	r3, [r2, #0]
 800d884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d888:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800d88a:	f7fa fc91 	bl	80081b0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d88e:	4e84      	ldr	r6, [pc, #528]	; (800daa0 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800d890:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d892:	e004      	b.n	800d89e <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d894:	f7fa fc8c 	bl	80081b0 <HAL_GetTick>
 800d898:	1b40      	subs	r0, r0, r5
 800d89a:	2864      	cmp	r0, #100	; 0x64
 800d89c:	d820      	bhi.n	800d8e0 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d89e:	6833      	ldr	r3, [r6, #0]
 800d8a0:	039a      	lsls	r2, r3, #14
 800d8a2:	d5f7      	bpl.n	800d894 <HAL_RCC_OscConfig+0x334>
 800d8a4:	e69d      	b.n	800d5e2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8a6:	4a7e      	ldr	r2, [pc, #504]	; (800daa0 <HAL_RCC_OscConfig+0x540>)
 800d8a8:	6921      	ldr	r1, [r4, #16]
 800d8aa:	6813      	ldr	r3, [r2, #0]
 800d8ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d8b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d8b4:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	071a      	lsls	r2, r3, #28
 800d8ba:	f57f aec9 	bpl.w	800d650 <HAL_RCC_OscConfig+0xf0>
 800d8be:	e6f2      	b.n	800d6a6 <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800d8c0:	6833      	ldr	r3, [r6, #0]
 800d8c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8c6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800d8c8:	f7fa fc72 	bl	80081b0 <HAL_GetTick>
 800d8cc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d8ce:	6833      	ldr	r3, [r6, #0]
 800d8d0:	05d9      	lsls	r1, r3, #23
 800d8d2:	f53f aed4 	bmi.w	800d67e <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8d6:	f7fa fc6b 	bl	80081b0 <HAL_GetTick>
 800d8da:	1bc0      	subs	r0, r0, r7
 800d8dc:	2864      	cmp	r0, #100	; 0x64
 800d8de:	d9f6      	bls.n	800d8ce <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800d8e0:	2003      	movs	r0, #3
}
 800d8e2:	b002      	add	sp, #8
 800d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d8e8:	4d6d      	ldr	r5, [pc, #436]	; (800daa0 <HAL_RCC_OscConfig+0x540>)
 800d8ea:	682b      	ldr	r3, [r5, #0]
 800d8ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	682b      	ldr	r3, [r5, #0]
 800d8f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d8fa:	f7fa fc59 	bl	80081b0 <HAL_GetTick>
 800d8fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d900:	e004      	b.n	800d90c <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d902:	f7fa fc55 	bl	80081b0 <HAL_GetTick>
 800d906:	1b80      	subs	r0, r0, r6
 800d908:	2864      	cmp	r0, #100	; 0x64
 800d90a:	d8e9      	bhi.n	800d8e0 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d90c:	682b      	ldr	r3, [r5, #0]
 800d90e:	039b      	lsls	r3, r3, #14
 800d910:	d4f7      	bmi.n	800d902 <HAL_RCC_OscConfig+0x3a2>
 800d912:	e666      	b.n	800d5e2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d914:	4e62      	ldr	r6, [pc, #392]	; (800daa0 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d916:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d91a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d91c:	f023 0301 	bic.w	r3, r3, #1
 800d920:	6733      	str	r3, [r6, #112]	; 0x70
 800d922:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d924:	f023 0304 	bic.w	r3, r3, #4
 800d928:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d92a:	f7fa fc41 	bl	80081b0 <HAL_GetTick>
 800d92e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d930:	e004      	b.n	800d93c <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d932:	f7fa fc3d 	bl	80081b0 <HAL_GetTick>
 800d936:	1bc0      	subs	r0, r0, r7
 800d938:	4540      	cmp	r0, r8
 800d93a:	d8d1      	bhi.n	800d8e0 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d93c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d93e:	079b      	lsls	r3, r3, #30
 800d940:	d4f7      	bmi.n	800d932 <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800d942:	2d00      	cmp	r5, #0
 800d944:	f43f aecb 	beq.w	800d6de <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d948:	4a55      	ldr	r2, [pc, #340]	; (800daa0 <HAL_RCC_OscConfig+0x540>)
 800d94a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d94c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d950:	6413      	str	r3, [r2, #64]	; 0x40
 800d952:	e6c4      	b.n	800d6de <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800d954:	682b      	ldr	r3, [r5, #0]
 800d956:	f023 0301 	bic.w	r3, r3, #1
 800d95a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d95c:	f7fa fc28 	bl	80081b0 <HAL_GetTick>
 800d960:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d962:	e004      	b.n	800d96e <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d964:	f7fa fc24 	bl	80081b0 <HAL_GetTick>
 800d968:	1b80      	subs	r0, r0, r6
 800d96a:	2802      	cmp	r0, #2
 800d96c:	d8b8      	bhi.n	800d8e0 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d96e:	682b      	ldr	r3, [r5, #0]
 800d970:	0799      	lsls	r1, r3, #30
 800d972:	d4f7      	bmi.n	800d964 <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d974:	6823      	ldr	r3, [r4, #0]
 800d976:	e669      	b.n	800d64c <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d978:	4a49      	ldr	r2, [pc, #292]	; (800daa0 <HAL_RCC_OscConfig+0x540>)
 800d97a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800d97c:	f043 0301 	orr.w	r3, r3, #1
 800d980:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d982:	f7fa fc15 	bl	80081b0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d986:	4f46      	ldr	r7, [pc, #280]	; (800daa0 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d988:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d98c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d98e:	e004      	b.n	800d99a <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d990:	f7fa fc0e 	bl	80081b0 <HAL_GetTick>
 800d994:	1b80      	subs	r0, r0, r6
 800d996:	4540      	cmp	r0, r8
 800d998:	d8a2      	bhi.n	800d8e0 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d99c:	079a      	lsls	r2, r3, #30
 800d99e:	d5f7      	bpl.n	800d990 <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800d9a0:	2d00      	cmp	r5, #0
 800d9a2:	f43f ae9c 	beq.w	800d6de <HAL_RCC_OscConfig+0x17e>
 800d9a6:	e7cf      	b.n	800d948 <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d9a8:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800d9aa:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d9ac:	f43f af03 	beq.w	800d7b6 <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d9b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d9b4:	69e1      	ldr	r1, [r4, #28]
 800d9b6:	428b      	cmp	r3, r1
 800d9b8:	f47f af12 	bne.w	800d7e0 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d9bc:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d9c0:	6a21      	ldr	r1, [r4, #32]
 800d9c2:	428b      	cmp	r3, r1
 800d9c4:	f47f af0c 	bne.w	800d7e0 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d9c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d9cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d9ce:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d9d0:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800d9d4:	f47f af04 	bne.w	800d7e0 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d9d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d9da:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800d9de:	085b      	lsrs	r3, r3, #1
 800d9e0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d9e2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800d9e6:	f47f aefb 	bne.w	800d7e0 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d9ea:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800d9ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d9f0:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800d9f4:	f47f aef4 	bne.w	800d7e0 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d9f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d9fa:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d9fe:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800da02:	bf14      	ite	ne
 800da04:	2001      	movne	r0, #1
 800da06:	2000      	moveq	r0, #0
 800da08:	e6d5      	b.n	800d7b6 <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800da0a:	f240 2156 	movw	r1, #598	; 0x256
 800da0e:	4823      	ldr	r0, [pc, #140]	; (800da9c <HAL_RCC_OscConfig+0x53c>)
 800da10:	f7f7 fad0 	bl	8004fb4 <assert_failed>
 800da14:	e68e      	b.n	800d734 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800da16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800da1a:	601a      	str	r2, [r3, #0]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	e731      	b.n	800d88a <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da26:	f042 0204 	orr.w	r2, r2, #4
 800da2a:	671a      	str	r2, [r3, #112]	; 0x70
 800da2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800da2e:	f042 0201 	orr.w	r2, r2, #1
 800da32:	671a      	str	r2, [r3, #112]	; 0x70
 800da34:	e7a5      	b.n	800d982 <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800da36:	f240 2155 	movw	r1, #597	; 0x255
 800da3a:	4818      	ldr	r0, [pc, #96]	; (800da9c <HAL_RCC_OscConfig+0x53c>)
 800da3c:	f7f7 faba 	bl	8004fb4 <assert_failed>
 800da40:	e66d      	b.n	800d71e <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800da42:	f44f 7115 	mov.w	r1, #596	; 0x254
 800da46:	4815      	ldr	r0, [pc, #84]	; (800da9c <HAL_RCC_OscConfig+0x53c>)
 800da48:	f7f7 fab4 	bl	8004fb4 <assert_failed>
 800da4c:	e661      	b.n	800d712 <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800da4e:	f240 2153 	movw	r1, #595	; 0x253
 800da52:	4812      	ldr	r0, [pc, #72]	; (800da9c <HAL_RCC_OscConfig+0x53c>)
 800da54:	f7f7 faae 	bl	8004fb4 <assert_failed>
 800da58:	e656      	b.n	800d708 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800da5a:	682b      	ldr	r3, [r5, #0]
 800da5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800da62:	f7fa fba5 	bl	80081b0 <HAL_GetTick>
 800da66:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da68:	e005      	b.n	800da76 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800da6a:	f7fa fba1 	bl	80081b0 <HAL_GetTick>
 800da6e:	1b00      	subs	r0, r0, r4
 800da70:	2802      	cmp	r0, #2
 800da72:	f63f af35 	bhi.w	800d8e0 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da76:	682b      	ldr	r3, [r5, #0]
 800da78:	019b      	lsls	r3, r3, #6
 800da7a:	d4f6      	bmi.n	800da6a <HAL_RCC_OscConfig+0x50a>
 800da7c:	e69a      	b.n	800d7b4 <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800da7e:	2001      	movs	r0, #1
}
 800da80:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800da82:	f240 2159 	movw	r1, #601	; 0x259
 800da86:	4805      	ldr	r0, [pc, #20]	; (800da9c <HAL_RCC_OscConfig+0x53c>)
 800da88:	f7f7 fa94 	bl	8004fb4 <assert_failed>
 800da8c:	e65c      	b.n	800d748 <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800da8e:	f240 2157 	movw	r1, #599	; 0x257
 800da92:	4802      	ldr	r0, [pc, #8]	; (800da9c <HAL_RCC_OscConfig+0x53c>)
 800da94:	f7f7 fa8e 	bl	8004fb4 <assert_failed>
 800da98:	e651      	b.n	800d73e <HAL_RCC_OscConfig+0x1de>
 800da9a:	bf00      	nop
 800da9c:	0802cb70 	.word	0x0802cb70
 800daa0:	40023800 	.word	0x40023800

0800daa4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800daa4:	4916      	ldr	r1, [pc, #88]	; (800db00 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800daa6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800daa8:	688b      	ldr	r3, [r1, #8]
 800daaa:	f003 030c 	and.w	r3, r3, #12
 800daae:	2b04      	cmp	r3, #4
 800dab0:	d01b      	beq.n	800daea <HAL_RCC_GetSysClockFreq+0x46>
 800dab2:	2b08      	cmp	r3, #8
 800dab4:	d117      	bne.n	800dae6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dab6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800dab8:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800daba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dabe:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800dac0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800dac4:	d113      	bne.n	800daee <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dac6:	480f      	ldr	r0, [pc, #60]	; (800db04 <HAL_RCC_GetSysClockFreq+0x60>)
 800dac8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800dacc:	fba1 0100 	umull	r0, r1, r1, r0
 800dad0:	f7f2 fc6e 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800dad4:	4b0a      	ldr	r3, [pc, #40]	; (800db00 <HAL_RCC_GetSysClockFreq+0x5c>)
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800dadc:	3301      	adds	r3, #1
 800dade:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800dae0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800dae4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800dae6:	4807      	ldr	r0, [pc, #28]	; (800db04 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800dae8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800daea:	4807      	ldr	r0, [pc, #28]	; (800db08 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800daec:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800daee:	4806      	ldr	r0, [pc, #24]	; (800db08 <HAL_RCC_GetSysClockFreq+0x64>)
 800daf0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800daf4:	2300      	movs	r3, #0
 800daf6:	fba1 0100 	umull	r0, r1, r1, r0
 800dafa:	f7f2 fc59 	bl	80003b0 <__aeabi_uldivmod>
 800dafe:	e7e9      	b.n	800dad4 <HAL_RCC_GetSysClockFreq+0x30>
 800db00:	40023800 	.word	0x40023800
 800db04:	00f42400 	.word	0x00f42400
 800db08:	007a1200 	.word	0x007a1200

0800db0c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800db0c:	2800      	cmp	r0, #0
 800db0e:	f000 80f6 	beq.w	800dcfe <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800db12:	6803      	ldr	r3, [r0, #0]
 800db14:	3b01      	subs	r3, #1
 800db16:	2b0e      	cmp	r3, #14
{
 800db18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db1c:	4604      	mov	r4, r0
 800db1e:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800db20:	f200 80d6 	bhi.w	800dcd0 <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800db24:	2d0f      	cmp	r5, #15
 800db26:	f200 80c3 	bhi.w	800dcb0 <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800db2a:	4a81      	ldr	r2, [pc, #516]	; (800dd30 <HAL_RCC_ClockConfig+0x224>)
 800db2c:	6813      	ldr	r3, [r2, #0]
 800db2e:	f003 030f 	and.w	r3, r3, #15
 800db32:	42ab      	cmp	r3, r5
 800db34:	d36f      	bcc.n	800dc16 <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	0798      	lsls	r0, r3, #30
 800db3a:	d530      	bpl.n	800db9e <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db3c:	0759      	lsls	r1, r3, #29
 800db3e:	d504      	bpl.n	800db4a <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800db40:	497c      	ldr	r1, [pc, #496]	; (800dd34 <HAL_RCC_ClockConfig+0x228>)
 800db42:	688a      	ldr	r2, [r1, #8]
 800db44:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800db48:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db4a:	071a      	lsls	r2, r3, #28
 800db4c:	d504      	bpl.n	800db58 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800db4e:	4979      	ldr	r1, [pc, #484]	; (800dd34 <HAL_RCC_ClockConfig+0x228>)
 800db50:	688a      	ldr	r2, [r1, #8]
 800db52:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800db56:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800db58:	68a1      	ldr	r1, [r4, #8]
 800db5a:	f021 0220 	bic.w	r2, r1, #32
 800db5e:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800db62:	2a90      	cmp	r2, #144	; 0x90
 800db64:	bf18      	it	ne
 800db66:	2800      	cmpne	r0, #0
 800db68:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800db6c:	bf14      	ite	ne
 800db6e:	2201      	movne	r2, #1
 800db70:	2200      	moveq	r2, #0
 800db72:	29f0      	cmp	r1, #240	; 0xf0
 800db74:	bf0c      	ite	eq
 800db76:	2200      	moveq	r2, #0
 800db78:	f002 0201 	andne.w	r2, r2, #1
 800db7c:	28a0      	cmp	r0, #160	; 0xa0
 800db7e:	bf0c      	ite	eq
 800db80:	2200      	moveq	r2, #0
 800db82:	f002 0201 	andne.w	r2, r2, #1
 800db86:	b122      	cbz	r2, 800db92 <HAL_RCC_ClockConfig+0x86>
 800db88:	f021 0210 	bic.w	r2, r1, #16
 800db8c:	2ac0      	cmp	r2, #192	; 0xc0
 800db8e:	f040 80b8 	bne.w	800dd02 <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db92:	4868      	ldr	r0, [pc, #416]	; (800dd34 <HAL_RCC_ClockConfig+0x228>)
 800db94:	6882      	ldr	r2, [r0, #8]
 800db96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800db9a:	4311      	orrs	r1, r2
 800db9c:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db9e:	07df      	lsls	r7, r3, #31
 800dba0:	d526      	bpl.n	800dbf0 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800dba2:	6863      	ldr	r3, [r4, #4]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	f200 80a1 	bhi.w	800dcec <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbaa:	4a62      	ldr	r2, [pc, #392]	; (800dd34 <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbac:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbae:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbb0:	f000 8098 	beq.w	800dce4 <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dbb4:	2b02      	cmp	r3, #2
 800dbb6:	f000 8091 	beq.w	800dcdc <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbba:	0791      	lsls	r1, r2, #30
 800dbbc:	d528      	bpl.n	800dc10 <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dbbe:	4e5d      	ldr	r6, [pc, #372]	; (800dd34 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dbc0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dbc4:	68b2      	ldr	r2, [r6, #8]
 800dbc6:	f022 0203 	bic.w	r2, r2, #3
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800dbce:	f7fa faef 	bl	80081b0 <HAL_GetTick>
 800dbd2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dbd4:	e005      	b.n	800dbe2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dbd6:	f7fa faeb 	bl	80081b0 <HAL_GetTick>
 800dbda:	1bc0      	subs	r0, r0, r7
 800dbdc:	4540      	cmp	r0, r8
 800dbde:	f200 808c 	bhi.w	800dcfa <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dbe2:	68b3      	ldr	r3, [r6, #8]
 800dbe4:	6862      	ldr	r2, [r4, #4]
 800dbe6:	f003 030c 	and.w	r3, r3, #12
 800dbea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800dbee:	d1f2      	bne.n	800dbd6 <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dbf0:	4a4f      	ldr	r2, [pc, #316]	; (800dd30 <HAL_RCC_ClockConfig+0x224>)
 800dbf2:	6813      	ldr	r3, [r2, #0]
 800dbf4:	f003 030f 	and.w	r3, r3, #15
 800dbf8:	42ab      	cmp	r3, r5
 800dbfa:	d91a      	bls.n	800dc32 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbfc:	6813      	ldr	r3, [r2, #0]
 800dbfe:	f023 030f 	bic.w	r3, r3, #15
 800dc02:	432b      	orrs	r3, r5
 800dc04:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc06:	6813      	ldr	r3, [r2, #0]
 800dc08:	f003 030f 	and.w	r3, r3, #15
 800dc0c:	42ab      	cmp	r3, r5
 800dc0e:	d010      	beq.n	800dc32 <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800dc10:	2001      	movs	r0, #1
}
 800dc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc16:	6813      	ldr	r3, [r2, #0]
 800dc18:	f023 030f 	bic.w	r3, r3, #15
 800dc1c:	432b      	orrs	r3, r5
 800dc1e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc20:	6813      	ldr	r3, [r2, #0]
 800dc22:	f003 030f 	and.w	r3, r3, #15
 800dc26:	42ab      	cmp	r3, r5
 800dc28:	d1f2      	bne.n	800dc10 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc2a:	6823      	ldr	r3, [r4, #0]
 800dc2c:	0798      	lsls	r0, r3, #30
 800dc2e:	d485      	bmi.n	800db3c <HAL_RCC_ClockConfig+0x30>
 800dc30:	e7b5      	b.n	800db9e <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	075a      	lsls	r2, r3, #29
 800dc36:	d512      	bpl.n	800dc5e <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800dc38:	68e1      	ldr	r1, [r4, #12]
 800dc3a:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800dc3e:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800dc42:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800dc46:	bf18      	it	ne
 800dc48:	2a00      	cmpne	r2, #0
 800dc4a:	d002      	beq.n	800dc52 <HAL_RCC_ClockConfig+0x146>
 800dc4c:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800dc50:	d15f      	bne.n	800dd12 <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dc52:	4838      	ldr	r0, [pc, #224]	; (800dd34 <HAL_RCC_ClockConfig+0x228>)
 800dc54:	6882      	ldr	r2, [r0, #8]
 800dc56:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800dc5a:	430a      	orrs	r2, r1
 800dc5c:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc5e:	071b      	lsls	r3, r3, #28
 800dc60:	d513      	bpl.n	800dc8a <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800dc62:	6922      	ldr	r2, [r4, #16]
 800dc64:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800dc68:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800dc6c:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800dc70:	bf18      	it	ne
 800dc72:	2b00      	cmpne	r3, #0
 800dc74:	d002      	beq.n	800dc7c <HAL_RCC_ClockConfig+0x170>
 800dc76:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800dc7a:	d152      	bne.n	800dd22 <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800dc7c:	492d      	ldr	r1, [pc, #180]	; (800dd34 <HAL_RCC_ClockConfig+0x228>)
 800dc7e:	688b      	ldr	r3, [r1, #8]
 800dc80:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800dc84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800dc88:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dc8a:	f7ff ff0b 	bl	800daa4 <HAL_RCC_GetSysClockFreq>
 800dc8e:	4a29      	ldr	r2, [pc, #164]	; (800dd34 <HAL_RCC_ClockConfig+0x228>)
 800dc90:	4c29      	ldr	r4, [pc, #164]	; (800dd38 <HAL_RCC_ClockConfig+0x22c>)
 800dc92:	4603      	mov	r3, r0
 800dc94:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800dc96:	4829      	ldr	r0, [pc, #164]	; (800dd3c <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dc98:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800dc9c:	4928      	ldr	r1, [pc, #160]	; (800dd40 <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800dc9e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dca0:	5ca2      	ldrb	r2, [r4, r2]
 800dca2:	40d3      	lsrs	r3, r2
 800dca4:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800dca6:	f7f9 fa65 	bl	8007174 <HAL_InitTick>
  return HAL_OK;
 800dcaa:	2000      	movs	r0, #0
}
 800dcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800dcb0:	f240 21de 	movw	r1, #734	; 0x2de
 800dcb4:	4823      	ldr	r0, [pc, #140]	; (800dd44 <HAL_RCC_ClockConfig+0x238>)
 800dcb6:	f7f7 f97d 	bl	8004fb4 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dcba:	4b1d      	ldr	r3, [pc, #116]	; (800dd30 <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800dcbc:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dcbe:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcc0:	6819      	ldr	r1, [r3, #0]
 800dcc2:	f021 010f 	bic.w	r1, r1, #15
 800dcc6:	430d      	orrs	r5, r1
 800dcc8:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcca:	681b      	ldr	r3, [r3, #0]
}
 800dccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800dcd0:	f240 21dd 	movw	r1, #733	; 0x2dd
 800dcd4:	481b      	ldr	r0, [pc, #108]	; (800dd44 <HAL_RCC_ClockConfig+0x238>)
 800dcd6:	f7f7 f96d 	bl	8004fb4 <assert_failed>
 800dcda:	e723      	b.n	800db24 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dcdc:	0190      	lsls	r0, r2, #6
 800dcde:	f53f af6e 	bmi.w	800dbbe <HAL_RCC_ClockConfig+0xb2>
 800dce2:	e795      	b.n	800dc10 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dce4:	0396      	lsls	r6, r2, #14
 800dce6:	f53f af6a 	bmi.w	800dbbe <HAL_RCC_ClockConfig+0xb2>
 800dcea:	e791      	b.n	800dc10 <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800dcec:	f240 3109 	movw	r1, #777	; 0x309
 800dcf0:	4814      	ldr	r0, [pc, #80]	; (800dd44 <HAL_RCC_ClockConfig+0x238>)
 800dcf2:	f7f7 f95f 	bl	8004fb4 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dcf6:	6863      	ldr	r3, [r4, #4]
 800dcf8:	e757      	b.n	800dbaa <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800dcfa:	2003      	movs	r0, #3
 800dcfc:	e789      	b.n	800dc12 <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800dcfe:	2001      	movs	r0, #1
}
 800dd00:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800dd02:	f240 3102 	movw	r1, #770	; 0x302
 800dd06:	480f      	ldr	r0, [pc, #60]	; (800dd44 <HAL_RCC_ClockConfig+0x238>)
 800dd08:	f7f7 f954 	bl	8004fb4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd0c:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	e73f      	b.n	800db92 <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800dd12:	f240 3146 	movw	r1, #838	; 0x346
 800dd16:	480b      	ldr	r0, [pc, #44]	; (800dd44 <HAL_RCC_ClockConfig+0x238>)
 800dd18:	f7f7 f94c 	bl	8004fb4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dd1c:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	e797      	b.n	800dc52 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800dd22:	f240 314d 	movw	r1, #845	; 0x34d
 800dd26:	4807      	ldr	r0, [pc, #28]	; (800dd44 <HAL_RCC_ClockConfig+0x238>)
 800dd28:	f7f7 f944 	bl	8004fb4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800dd2c:	6922      	ldr	r2, [r4, #16]
 800dd2e:	e7a5      	b.n	800dc7c <HAL_RCC_ClockConfig+0x170>
 800dd30:	40023c00 	.word	0x40023c00
 800dd34:	40023800 	.word	0x40023800
 800dd38:	0802c194 	.word	0x0802c194
 800dd3c:	200002e4 	.word	0x200002e4
 800dd40:	20000284 	.word	0x20000284
 800dd44:	0802cb70 	.word	0x0802cb70

0800dd48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800dd48:	4b01      	ldr	r3, [pc, #4]	; (800dd50 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	20000284 	.word	0x20000284

0800dd54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dd54:	4b04      	ldr	r3, [pc, #16]	; (800dd68 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800dd56:	4905      	ldr	r1, [pc, #20]	; (800dd6c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	4a05      	ldr	r2, [pc, #20]	; (800dd70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800dd5c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800dd60:	6808      	ldr	r0, [r1, #0]
 800dd62:	5cd3      	ldrb	r3, [r2, r3]
}
 800dd64:	40d8      	lsrs	r0, r3
 800dd66:	4770      	bx	lr
 800dd68:	40023800 	.word	0x40023800
 800dd6c:	20000284 	.word	0x20000284
 800dd70:	0802c1a4 	.word	0x0802c1a4

0800dd74 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dd74:	4b04      	ldr	r3, [pc, #16]	; (800dd88 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800dd76:	4905      	ldr	r1, [pc, #20]	; (800dd8c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dd78:	689b      	ldr	r3, [r3, #8]
 800dd7a:	4a05      	ldr	r2, [pc, #20]	; (800dd90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800dd7c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800dd80:	6808      	ldr	r0, [r1, #0]
 800dd82:	5cd3      	ldrb	r3, [r2, r3]
}
 800dd84:	40d8      	lsrs	r0, r3
 800dd86:	4770      	bx	lr
 800dd88:	40023800 	.word	0x40023800
 800dd8c:	20000284 	.word	0x20000284
 800dd90:	0802c1a4 	.word	0x0802c1a4

0800dd94 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dd94:	4b0e      	ldr	r3, [pc, #56]	; (800ddd0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dd96:	220f      	movs	r2, #15
 800dd98:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dd9a:	689a      	ldr	r2, [r3, #8]
 800dd9c:	f002 0203 	and.w	r2, r2, #3
 800dda0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dda2:	689a      	ldr	r2, [r3, #8]
 800dda4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800dda8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ddaa:	689a      	ldr	r2, [r3, #8]
 800ddac:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800ddb0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	08db      	lsrs	r3, r3, #3
{
 800ddb6:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ddb8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ddbc:	4c05      	ldr	r4, [pc, #20]	; (800ddd4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ddbe:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ddc0:	6823      	ldr	r3, [r4, #0]
}
 800ddc2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ddc6:	f003 030f 	and.w	r3, r3, #15
 800ddca:	600b      	str	r3, [r1, #0]
}
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	40023800 	.word	0x40023800
 800ddd4:	40023c00 	.word	0x40023c00

0800ddd8 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ddd8:	4a56      	ldr	r2, [pc, #344]	; (800df34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800ddda:	6803      	ldr	r3, [r0, #0]
 800dddc:	401a      	ands	r2, r3
{
 800ddde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dde2:	4604      	mov	r4, r0
 800dde4:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800dde6:	2a00      	cmp	r2, #0
 800dde8:	f000 833f 	beq.w	800e46a <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ddec:	f013 0601 	ands.w	r6, r3, #1
 800ddf0:	d00f      	beq.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800ddf2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ddf4:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800ddf8:	f040 8342 	bne.w	800e480 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ddfc:	4a4e      	ldr	r2, [pc, #312]	; (800df38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ddfe:	6891      	ldr	r1, [r2, #8]
 800de00:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800de04:	6091      	str	r1, [r2, #8]
 800de06:	6891      	ldr	r1, [r2, #8]
 800de08:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800de0a:	fab6 f686 	clz	r6, r6
 800de0e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800de10:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800de12:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800de16:	d014      	beq.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800de18:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800de1a:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800de1e:	f040 838d 	bne.w	800e53c <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800de22:	4945      	ldr	r1, [pc, #276]	; (800df38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800de24:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800de28:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800de2c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800de30:	ea42 0205 	orr.w	r2, r2, r5
 800de34:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800de38:	f000 831f 	beq.w	800e47a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800de3c:	fab5 f585 	clz	r5, r5
 800de40:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800de42:	02d9      	lsls	r1, r3, #11
 800de44:	d514      	bpl.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800de46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800de48:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800de4c:	f040 837d 	bne.w	800e54a <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800de50:	4839      	ldr	r0, [pc, #228]	; (800df38 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800de52:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800de56:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800de5a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800de5e:	ea42 0201 	orr.w	r2, r2, r1
 800de62:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800de66:	f000 8306 	beq.w	800e476 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800de6a:	2900      	cmp	r1, #0
 800de6c:	bf08      	it	eq
 800de6e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800de70:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800de74:	bf18      	it	ne
 800de76:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800de78:	069a      	lsls	r2, r3, #26
 800de7a:	f140 8099 	bpl.w	800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800de7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800de80:	482e      	ldr	r0, [pc, #184]	; (800df3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800de82:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800de86:	bf18      	it	ne
 800de88:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800de8c:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800de90:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800de94:	bf14      	ite	ne
 800de96:	2301      	movne	r3, #1
 800de98:	2300      	moveq	r3, #0
 800de9a:	4287      	cmp	r7, r0
 800de9c:	bf0c      	ite	eq
 800de9e:	2300      	moveq	r3, #0
 800dea0:	f003 0301 	andne.w	r3, r3, #1
 800dea4:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800dea8:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800deac:	4287      	cmp	r7, r0
 800deae:	bf0c      	ite	eq
 800deb0:	2300      	moveq	r3, #0
 800deb2:	f003 0301 	andne.w	r3, r3, #1
 800deb6:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800deba:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800debe:	4281      	cmp	r1, r0
 800dec0:	bf0c      	ite	eq
 800dec2:	2300      	moveq	r3, #0
 800dec4:	f003 0301 	andne.w	r3, r3, #1
 800dec8:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800decc:	4287      	cmp	r7, r0
 800dece:	bf0c      	ite	eq
 800ded0:	2300      	moveq	r3, #0
 800ded2:	f003 0301 	andne.w	r3, r3, #1
 800ded6:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800deda:	4281      	cmp	r1, r0
 800dedc:	bf0c      	ite	eq
 800dede:	2300      	moveq	r3, #0
 800dee0:	f003 0301 	andne.w	r3, r3, #1
 800dee4:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800dee8:	4281      	cmp	r1, r0
 800deea:	bf0c      	ite	eq
 800deec:	2300      	moveq	r3, #0
 800deee:	f003 0301 	andne.w	r3, r3, #1
 800def2:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800def6:	4281      	cmp	r1, r0
 800def8:	bf0c      	ite	eq
 800defa:	2300      	moveq	r3, #0
 800defc:	f003 0301 	andne.w	r3, r3, #1
 800df00:	b12b      	cbz	r3, 800df0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800df02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800df06:	4b0e      	ldr	r3, [pc, #56]	; (800df40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800df08:	429a      	cmp	r2, r3
 800df0a:	f040 8438 	bne.w	800e77e <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800df0e:	4b0a      	ldr	r3, [pc, #40]	; (800df38 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800df10:	4f0c      	ldr	r7, [pc, #48]	; (800df44 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800df12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800df18:	641a      	str	r2, [r3, #64]	; 0x40
 800df1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df20:	9301      	str	r3, [sp, #4]
 800df22:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df2a:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df2c:	f7fa f940 	bl	80081b0 <HAL_GetTick>
 800df30:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800df32:	e010      	b.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800df34:	1dfffff9 	.word	0x1dfffff9
 800df38:	40023800 	.word	0x40023800
 800df3c:	00020300 	.word	0x00020300
 800df40:	001c0300 	.word	0x001c0300
 800df44:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df48:	f7fa f932 	bl	80081b0 <HAL_GetTick>
 800df4c:	eba0 0008 	sub.w	r0, r0, r8
 800df50:	2864      	cmp	r0, #100	; 0x64
 800df52:	f200 8286 	bhi.w	800e462 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	05db      	lsls	r3, r3, #23
 800df5a:	d5f5      	bpl.n	800df48 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800df5c:	4fb0      	ldr	r7, [pc, #704]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800df5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800df60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800df62:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800df66:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800df6a:	d011      	beq.n	800df90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800df6c:	4291      	cmp	r1, r2
 800df6e:	d00f      	beq.n	800df90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800df70:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800df72:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800df74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800df78:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800df7c:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800df7e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800df80:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800df84:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800df86:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800df88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df8a:	07d0      	lsls	r0, r2, #31
 800df8c:	f100 836c 	bmi.w	800e668 <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800df90:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800df94:	f000 82c9 	beq.w	800e52a <HAL_RCCEx_PeriphCLKConfig+0x752>
 800df98:	49a1      	ldr	r1, [pc, #644]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800df9a:	688a      	ldr	r2, [r1, #8]
 800df9c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800dfa0:	608a      	str	r2, [r1, #8]
 800dfa2:	4a9f      	ldr	r2, [pc, #636]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dfa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dfa8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800dfaa:	430b      	orrs	r3, r1
 800dfac:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	06da      	lsls	r2, r3, #27
 800dfb2:	d510      	bpl.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800dfb4:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800dfb6:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800dfba:	f040 82db 	bne.w	800e574 <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dfbe:	4a98      	ldr	r2, [pc, #608]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dfc0:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800dfc4:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800dfc8:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800dfcc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800dfd0:	4339      	orrs	r1, r7
 800dfd2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dfd6:	045f      	lsls	r7, r3, #17
 800dfd8:	d50f      	bpl.n	800dffa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800dfda:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800dfdc:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800dfe0:	d003      	beq.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x212>
 800dfe2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800dfe6:	f040 8299 	bne.w	800e51c <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dfea:	488d      	ldr	r0, [pc, #564]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dfec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dff0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800dff4:	430a      	orrs	r2, r1
 800dff6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dffa:	0418      	lsls	r0, r3, #16
 800dffc:	d50f      	bpl.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800dffe:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800e000:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800e004:	d003      	beq.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x236>
 800e006:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800e00a:	f040 826a 	bne.w	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e00e:	4884      	ldr	r0, [pc, #528]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e010:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e014:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800e018:	430a      	orrs	r2, r1
 800e01a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e01e:	03d9      	lsls	r1, r3, #15
 800e020:	d50f      	bpl.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800e022:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e024:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800e028:	d003      	beq.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e02a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800e02e:	f040 8260 	bne.w	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e032:	487b      	ldr	r0, [pc, #492]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e034:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e038:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800e03c:	430a      	orrs	r2, r1
 800e03e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e042:	039a      	lsls	r2, r3, #14
 800e044:	d50f      	bpl.n	800e066 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800e046:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800e048:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800e04c:	d003      	beq.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800e04e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800e052:	f040 825b 	bne.w	800e50c <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e056:	4872      	ldr	r0, [pc, #456]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e058:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e05c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800e060:	430a      	orrs	r2, r1
 800e062:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e066:	065f      	lsls	r7, r3, #25
 800e068:	d50b      	bpl.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800e06a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e06c:	2903      	cmp	r1, #3
 800e06e:	f200 82b3 	bhi.w	800e5d8 <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e072:	486b      	ldr	r0, [pc, #428]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e074:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e078:	f022 0203 	bic.w	r2, r2, #3
 800e07c:	430a      	orrs	r2, r1
 800e07e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e082:	0618      	lsls	r0, r3, #24
 800e084:	d50c      	bpl.n	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800e086:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e088:	f031 020c 	bics.w	r2, r1, #12
 800e08c:	f040 82b4 	bne.w	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e090:	4863      	ldr	r0, [pc, #396]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e092:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e096:	f022 020c 	bic.w	r2, r2, #12
 800e09a:	430a      	orrs	r2, r1
 800e09c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e0a0:	05d9      	lsls	r1, r3, #23
 800e0a2:	d50c      	bpl.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800e0a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e0a6:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800e0aa:	f040 82ad 	bne.w	800e608 <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e0ae:	485c      	ldr	r0, [pc, #368]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e0b0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e0b4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800e0b8:	430a      	orrs	r2, r1
 800e0ba:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e0be:	059a      	lsls	r2, r3, #22
 800e0c0:	d50c      	bpl.n	800e0dc <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800e0c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800e0c4:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800e0c8:	f040 82a6 	bne.w	800e618 <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e0cc:	4854      	ldr	r0, [pc, #336]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e0ce:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e0d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e0d6:	430a      	orrs	r2, r1
 800e0d8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e0dc:	055f      	lsls	r7, r3, #21
 800e0de:	d50c      	bpl.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800e0e0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e0e2:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800e0e6:	f040 829f 	bne.w	800e628 <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e0ea:	484d      	ldr	r0, [pc, #308]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e0ec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e0f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e0fa:	0518      	lsls	r0, r3, #20
 800e0fc:	d50c      	bpl.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800e0fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e100:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800e104:	f040 8298 	bne.w	800e638 <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e108:	4845      	ldr	r0, [pc, #276]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e10a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e10e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e112:	430a      	orrs	r2, r1
 800e114:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e118:	04d9      	lsls	r1, r3, #19
 800e11a:	d50c      	bpl.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800e11c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e11e:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800e122:	f040 8291 	bne.w	800e648 <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e126:	483e      	ldr	r0, [pc, #248]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e128:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e12c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800e130:	430a      	orrs	r2, r1
 800e132:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e136:	049a      	lsls	r2, r3, #18
 800e138:	d50c      	bpl.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800e13a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800e13c:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800e140:	f040 828a 	bne.w	800e658 <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e144:	4836      	ldr	r0, [pc, #216]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e146:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e14a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e14e:	430a      	orrs	r2, r1
 800e150:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e154:	025f      	lsls	r7, r3, #9
 800e156:	d50c      	bpl.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800e158:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800e15a:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800e15e:	f040 8222 	bne.w	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e162:	482f      	ldr	r0, [pc, #188]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e164:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e168:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800e16c:	430a      	orrs	r2, r1
 800e16e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e172:	0298      	lsls	r0, r3, #10
 800e174:	d510      	bpl.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800e176:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800e178:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800e17c:	f040 821b 	bne.w	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e180:	4827      	ldr	r0, [pc, #156]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800e182:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e186:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800e18a:	bf08      	it	eq
 800e18c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e18e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800e192:	430a      	orrs	r2, r1
 800e194:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800e198:	f013 0f08 	tst.w	r3, #8
 800e19c:	bf18      	it	ne
 800e19e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e1a0:	0359      	lsls	r1, r3, #13
 800e1a2:	d50c      	bpl.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800e1a4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800e1a6:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800e1aa:	f040 821d 	bne.w	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e1ae:	481c      	ldr	r0, [pc, #112]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e1b0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e1b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800e1b8:	430a      	orrs	r2, r1
 800e1ba:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e1be:	021a      	lsls	r2, r3, #8
 800e1c0:	d50d      	bpl.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800e1c2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e1c6:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800e1ca:	f040 81fc 	bne.w	800e5c6 <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e1ce:	4814      	ldr	r0, [pc, #80]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e1d0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e1d4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e1d8:	430a      	orrs	r2, r1
 800e1da:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e1de:	015f      	lsls	r7, r3, #5
 800e1e0:	d50d      	bpl.n	800e1fe <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800e1e2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800e1e6:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800e1ea:	f040 81ca 	bne.w	800e582 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e1ee:	480c      	ldr	r0, [pc, #48]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e1f0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e1f4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800e1f8:	430a      	orrs	r2, r1
 800e1fa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e1fe:	0118      	lsls	r0, r3, #4
 800e200:	d510      	bpl.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800e202:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800e206:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800e20a:	f040 81c3 	bne.w	800e594 <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e20e:	4804      	ldr	r0, [pc, #16]	; (800e220 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e210:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800e214:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800e218:	430a      	orrs	r2, r1
 800e21a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800e21e:	e001      	b.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800e220:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e224:	00d9      	lsls	r1, r3, #3
 800e226:	d50d      	bpl.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800e228:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800e22c:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800e230:	f040 8198 	bne.w	800e564 <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e234:	49b3      	ldr	r1, [pc, #716]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e236:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800e23a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e23e:	4313      	orrs	r3, r2
 800e240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e244:	2e01      	cmp	r6, #1
 800e246:	d003      	beq.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800e248:	6823      	ldr	r3, [r4, #0]
 800e24a:	019a      	lsls	r2, r3, #6
 800e24c:	f140 8083 	bpl.w	800e356 <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e250:	4eac      	ldr	r6, [pc, #688]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e252:	6833      	ldr	r3, [r6, #0]
 800e254:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e258:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e25a:	f7f9 ffa9 	bl	80081b0 <HAL_GetTick>
 800e25e:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e260:	e005      	b.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e262:	f7f9 ffa5 	bl	80081b0 <HAL_GetTick>
 800e266:	1bc0      	subs	r0, r0, r7
 800e268:	2864      	cmp	r0, #100	; 0x64
 800e26a:	f200 80fa 	bhi.w	800e462 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e26e:	6833      	ldr	r3, [r6, #0]
 800e270:	011b      	lsls	r3, r3, #4
 800e272:	d4f6      	bmi.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800e274:	6863      	ldr	r3, [r4, #4]
 800e276:	3b32      	subs	r3, #50	; 0x32
 800e278:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800e27c:	f200 816c 	bhi.w	800e558 <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	07df      	lsls	r7, r3, #31
 800e284:	d517      	bpl.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e286:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e288:	b9aa      	cbnz	r2, 800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e28a:	68a7      	ldr	r7, [r4, #8]
 800e28c:	1eba      	subs	r2, r7, #2
 800e28e:	2a05      	cmp	r2, #5
 800e290:	f200 820c 	bhi.w	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e294:	499b      	ldr	r1, [pc, #620]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e296:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e298:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e29c:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e2a0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800e2a4:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800e2a8:	4332      	orrs	r2, r6
 800e2aa:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800e2ae:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800e2b2:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e2b6:	031e      	lsls	r6, r3, #12
 800e2b8:	f100 80e9 	bmi.w	800e48e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800e2bc:	02d8      	lsls	r0, r3, #11
 800e2be:	d504      	bpl.n	800e2ca <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e2c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e2c2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800e2c6:	f000 80e7 	beq.w	800e498 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e2ca:	01d9      	lsls	r1, r3, #7
 800e2cc:	d514      	bpl.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e2ce:	6927      	ldr	r7, [r4, #16]
 800e2d0:	2f03      	cmp	r7, #3
 800e2d2:	f200 81f9 	bhi.w	800e6c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e2d6:	498b      	ldr	r1, [pc, #556]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e2d8:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e2da:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e2de:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e2e2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800e2e6:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800e2ea:	4332      	orrs	r2, r6
 800e2ec:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800e2f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800e2f4:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e2f8:	019a      	lsls	r2, r3, #6
 800e2fa:	d51a      	bpl.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e2fc:	6923      	ldr	r3, [r4, #16]
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	f200 81dc 	bhi.w	800e6bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e304:	68a3      	ldr	r3, [r4, #8]
 800e306:	3b02      	subs	r3, #2
 800e308:	2b05      	cmp	r3, #5
 800e30a:	f200 81ec 	bhi.w	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e30e:	68e2      	ldr	r2, [r4, #12]
 800e310:	1e93      	subs	r3, r2, #2
 800e312:	2b0d      	cmp	r3, #13
 800e314:	f200 81e0 	bhi.w	800e6d8 <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e318:	6923      	ldr	r3, [r4, #16]
 800e31a:	6861      	ldr	r1, [r4, #4]
 800e31c:	041b      	lsls	r3, r3, #16
 800e31e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800e322:	68a1      	ldr	r1, [r4, #8]
 800e324:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e328:	4976      	ldr	r1, [pc, #472]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e32a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e32e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e332:	4e74      	ldr	r6, [pc, #464]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e334:	6833      	ldr	r3, [r6, #0]
 800e336:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e33a:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e33c:	f7f9 ff38 	bl	80081b0 <HAL_GetTick>
 800e340:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e342:	e005      	b.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e344:	f7f9 ff34 	bl	80081b0 <HAL_GetTick>
 800e348:	1bc0      	subs	r0, r0, r7
 800e34a:	2864      	cmp	r0, #100	; 0x64
 800e34c:	f200 8089 	bhi.w	800e462 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e350:	6833      	ldr	r3, [r6, #0]
 800e352:	011b      	lsls	r3, r3, #4
 800e354:	d5f6      	bpl.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e356:	2d01      	cmp	r5, #1
 800e358:	d003      	beq.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800e35a:	2000      	movs	r0, #0
}
 800e35c:	b003      	add	sp, #12
 800e35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800e362:	4d68      	ldr	r5, [pc, #416]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e36a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800e36c:	f7f9 ff20 	bl	80081b0 <HAL_GetTick>
 800e370:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e372:	e004      	b.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e374:	f7f9 ff1c 	bl	80081b0 <HAL_GetTick>
 800e378:	1b80      	subs	r0, r0, r6
 800e37a:	2864      	cmp	r0, #100	; 0x64
 800e37c:	d871      	bhi.n	800e462 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e37e:	682b      	ldr	r3, [r5, #0]
 800e380:	009f      	lsls	r7, r3, #2
 800e382:	d4f7      	bmi.n	800e374 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800e384:	6963      	ldr	r3, [r4, #20]
 800e386:	3b32      	subs	r3, #50	; 0x32
 800e388:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800e38c:	f200 81b9 	bhi.w	800e702 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	031d      	lsls	r5, r3, #12
 800e394:	f140 81ad 	bpl.w	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800e398:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e39a:	2a00      	cmp	r2, #0
 800e39c:	f040 81a9 	bne.w	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800e3a0:	69a3      	ldr	r3, [r4, #24]
 800e3a2:	3b02      	subs	r3, #2
 800e3a4:	2b0d      	cmp	r3, #13
 800e3a6:	f200 81d5 	bhi.w	800e754 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800e3aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e3ac:	1e59      	subs	r1, r3, #1
 800e3ae:	291f      	cmp	r1, #31
 800e3b0:	f200 81c8 	bhi.w	800e744 <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e3b4:	4a53      	ldr	r2, [pc, #332]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e3b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e3ba:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e3be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e3c2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800e3c6:	4303      	orrs	r3, r0
 800e3c8:	6960      	ldr	r0, [r4, #20]
 800e3ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e3ce:	69a0      	ldr	r0, [r4, #24]
 800e3d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e3d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e3d8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e3dc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800e3e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e3e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e3e8:	6823      	ldr	r3, [r4, #0]
 800e3ea:	0299      	lsls	r1, r3, #10
 800e3ec:	d504      	bpl.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x620>
 800e3ee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800e3f0:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800e3f4:	f000 818b 	beq.w	800e70e <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e3f8:	071a      	lsls	r2, r3, #28
 800e3fa:	d522      	bpl.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800e3fc:	69e3      	ldr	r3, [r4, #28]
 800e3fe:	3b02      	subs	r3, #2
 800e400:	2b05      	cmp	r3, #5
 800e402:	f200 8199 	bhi.w	800e738 <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800e406:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e408:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800e40c:	f040 81a8 	bne.w	800e760 <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e410:	4a3c      	ldr	r2, [pc, #240]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e412:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e414:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e418:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e41c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800e420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e424:	430b      	orrs	r3, r1
 800e426:	69e1      	ldr	r1, [r4, #28]
 800e428:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800e42c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e434:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e438:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800e43c:	4303      	orrs	r3, r0
 800e43e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800e442:	4c30      	ldr	r4, [pc, #192]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e44a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800e44c:	f7f9 feb0 	bl	80081b0 <HAL_GetTick>
 800e450:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	d480      	bmi.n	800e35a <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e458:	f7f9 feaa 	bl	80081b0 <HAL_GetTick>
 800e45c:	1b40      	subs	r0, r0, r5
 800e45e:	2864      	cmp	r0, #100	; 0x64
 800e460:	d9f7      	bls.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800e462:	2003      	movs	r0, #3
}
 800e464:	b003      	add	sp, #12
 800e466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800e46a:	2172      	movs	r1, #114	; 0x72
 800e46c:	4826      	ldr	r0, [pc, #152]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e46e:	f7f6 fda1 	bl	8004fb4 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	e4ba      	b.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800e476:	2601      	movs	r6, #1
 800e478:	e4fa      	b.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800e47a:	2500      	movs	r5, #0
      plli2sused = 1;
 800e47c:	2601      	movs	r6, #1
 800e47e:	e4e0      	b.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800e480:	2178      	movs	r1, #120	; 0x78
 800e482:	4821      	ldr	r0, [pc, #132]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e484:	f7f6 fd96 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e488:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e48a:	6823      	ldr	r3, [r4, #0]
 800e48c:	e4b6      	b.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e48e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e490:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e494:	f47f af12 	bne.w	800e2bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e498:	68e3      	ldr	r3, [r4, #12]
 800e49a:	3b02      	subs	r3, #2
 800e49c:	2b0d      	cmp	r3, #13
 800e49e:	f200 80f7 	bhi.w	800e690 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800e4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4a4:	1e59      	subs	r1, r3, #1
 800e4a6:	291f      	cmp	r1, #31
 800e4a8:	f200 80f8 	bhi.w	800e69c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e4ac:	4a15      	ldr	r2, [pc, #84]	; (800e504 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e4ae:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e4b2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e4b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e4ba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800e4be:	4303      	orrs	r3, r0
 800e4c0:	6860      	ldr	r0, [r4, #4]
 800e4c2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e4c6:	68e0      	ldr	r0, [r4, #12]
 800e4c8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e4cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e4d0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e4d4:	f023 031f 	bic.w	r3, r3, #31
 800e4d8:	430b      	orrs	r3, r1
 800e4da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e4de:	6823      	ldr	r3, [r4, #0]
 800e4e0:	e6f3      	b.n	800e2ca <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800e4e2:	f240 1105 	movw	r1, #261	; 0x105
 800e4e6:	4808      	ldr	r0, [pc, #32]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e4e8:	f7f6 fd64 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e4ec:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	e58d      	b.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800e4f2:	f240 110f 	movw	r1, #271	; 0x10f
 800e4f6:	4804      	ldr	r0, [pc, #16]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e4f8:	f7f6 fd5c 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e4fc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	e597      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e502:	bf00      	nop
 800e504:	40023800 	.word	0x40023800
 800e508:	0802cba8 	.word	0x0802cba8
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800e50c:	f240 1119 	movw	r1, #281	; 0x119
 800e510:	489e      	ldr	r0, [pc, #632]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e512:	f7f6 fd4f 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e516:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	e59c      	b.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800e51c:	21fb      	movs	r1, #251	; 0xfb
 800e51e:	489b      	ldr	r0, [pc, #620]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e520:	f7f6 fd48 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e524:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	e55f      	b.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e52a:	4899      	ldr	r0, [pc, #612]	; (800e790 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800e52c:	4999      	ldr	r1, [pc, #612]	; (800e794 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800e52e:	6882      	ldr	r2, [r0, #8]
 800e530:	4019      	ands	r1, r3
 800e532:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800e536:	430a      	orrs	r2, r1
 800e538:	6082      	str	r2, [r0, #8]
 800e53a:	e532      	b.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800e53c:	2188      	movs	r1, #136	; 0x88
 800e53e:	4893      	ldr	r0, [pc, #588]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e540:	f7f6 fd38 	bl	8004fb4 <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e544:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	e46b      	b.n	800de22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800e54a:	219c      	movs	r1, #156	; 0x9c
 800e54c:	488f      	ldr	r0, [pc, #572]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e54e:	f7f6 fd31 	bl	8004fb4 <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e552:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	e47b      	b.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800e558:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800e55c:	488b      	ldr	r0, [pc, #556]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e55e:	f7f6 fd29 	bl	8004fb4 <assert_failed>
 800e562:	e68d      	b.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800e564:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800e568:	4888      	ldr	r0, [pc, #544]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e56a:	f7f6 fd23 	bl	8004fb4 <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e56e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800e572:	e65f      	b.n	800e234 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800e574:	21f1      	movs	r1, #241	; 0xf1
 800e576:	4885      	ldr	r0, [pc, #532]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e578:	f7f6 fd1c 	bl	8004fb4 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e57c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	e51d      	b.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800e582:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e586:	4881      	ldr	r0, [pc, #516]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e588:	f7f6 fd14 	bl	8004fb4 <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e58c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e590:	6823      	ldr	r3, [r4, #0]
 800e592:	e62c      	b.n	800e1ee <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800e594:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800e598:	487c      	ldr	r0, [pc, #496]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e59a:	f7f6 fd0b 	bl	8004fb4 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e59e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	e633      	b.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800e5a6:	f240 1173 	movw	r1, #371	; 0x173
 800e5aa:	4878      	ldr	r0, [pc, #480]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5ac:	f7f6 fd02 	bl	8004fb4 <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e5b0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e5b2:	6823      	ldr	r3, [r4, #0]
 800e5b4:	e5d5      	b.n	800e162 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800e5b6:	f240 117d 	movw	r1, #381	; 0x17d
 800e5ba:	4874      	ldr	r0, [pc, #464]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5bc:	f7f6 fcfa 	bl	8004fb4 <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e5c0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e5c2:	6823      	ldr	r3, [r4, #0]
 800e5c4:	e5dc      	b.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800e5c6:	f240 119f 	movw	r1, #415	; 0x19f
 800e5ca:	4870      	ldr	r0, [pc, #448]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5cc:	f7f6 fcf2 	bl	8004fb4 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e5d0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	e5fa      	b.n	800e1ce <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800e5d8:	f240 1123 	movw	r1, #291	; 0x123
 800e5dc:	486b      	ldr	r0, [pc, #428]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5de:	f7f6 fce9 	bl	8004fb4 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e5e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e5e4:	6823      	ldr	r3, [r4, #0]
 800e5e6:	e544      	b.n	800e072 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800e5e8:	f240 1195 	movw	r1, #405	; 0x195
 800e5ec:	4867      	ldr	r0, [pc, #412]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5ee:	f7f6 fce1 	bl	8004fb4 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e5f2:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e5f4:	6823      	ldr	r3, [r4, #0]
 800e5f6:	e5da      	b.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800e5f8:	f240 112d 	movw	r1, #301	; 0x12d
 800e5fc:	4863      	ldr	r0, [pc, #396]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5fe:	f7f6 fcd9 	bl	8004fb4 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e602:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	e543      	b.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800e608:	f240 1137 	movw	r1, #311	; 0x137
 800e60c:	485f      	ldr	r0, [pc, #380]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e60e:	f7f6 fcd1 	bl	8004fb4 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e612:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	e54a      	b.n	800e0ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800e618:	f240 1141 	movw	r1, #321	; 0x141
 800e61c:	485b      	ldr	r0, [pc, #364]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e61e:	f7f6 fcc9 	bl	8004fb4 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e622:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e624:	6823      	ldr	r3, [r4, #0]
 800e626:	e551      	b.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800e628:	f240 114b 	movw	r1, #331	; 0x14b
 800e62c:	4857      	ldr	r0, [pc, #348]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e62e:	f7f6 fcc1 	bl	8004fb4 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e632:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e634:	6823      	ldr	r3, [r4, #0]
 800e636:	e558      	b.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800e638:	f240 1155 	movw	r1, #341	; 0x155
 800e63c:	4853      	ldr	r0, [pc, #332]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e63e:	f7f6 fcb9 	bl	8004fb4 <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e642:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e644:	6823      	ldr	r3, [r4, #0]
 800e646:	e55f      	b.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800e648:	f240 115f 	movw	r1, #351	; 0x15f
 800e64c:	484f      	ldr	r0, [pc, #316]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e64e:	f7f6 fcb1 	bl	8004fb4 <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e652:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	e566      	b.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800e658:	f240 1169 	movw	r1, #361	; 0x169
 800e65c:	484b      	ldr	r0, [pc, #300]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e65e:	f7f6 fca9 	bl	8004fb4 <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e662:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e664:	6823      	ldr	r3, [r4, #0]
 800e666:	e56d      	b.n	800e144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800e668:	f7f9 fda2 	bl	80081b0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e66c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800e670:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e672:	e006      	b.n	800e682 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e674:	f7f9 fd9c 	bl	80081b0 <HAL_GetTick>
 800e678:	eba0 0008 	sub.w	r0, r0, r8
 800e67c:	4548      	cmp	r0, r9
 800e67e:	f63f aef0 	bhi.w	800e462 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e684:	0799      	lsls	r1, r3, #30
 800e686:	d5f5      	bpl.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e688:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e68a:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800e68e:	e47f      	b.n	800df90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e690:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800e694:	483d      	ldr	r0, [pc, #244]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e696:	f7f6 fc8d 	bl	8004fb4 <assert_failed>
 800e69a:	e702      	b.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800e69c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800e6a0:	483a      	ldr	r0, [pc, #232]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6a2:	f7f6 fc87 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6a8:	1e59      	subs	r1, r3, #1
 800e6aa:	e6ff      	b.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e6ac:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800e6b0:	4836      	ldr	r0, [pc, #216]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6b2:	f7f6 fc7f 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e6b6:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	e5eb      	b.n	800e294 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e6bc:	f44f 7105 	mov.w	r1, #532	; 0x214
 800e6c0:	4832      	ldr	r0, [pc, #200]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6c2:	f7f6 fc77 	bl	8004fb4 <assert_failed>
 800e6c6:	e61d      	b.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e6c8:	f240 2105 	movw	r1, #517	; 0x205
 800e6cc:	482f      	ldr	r0, [pc, #188]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6ce:	f7f6 fc71 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e6d2:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	e5fe      	b.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e6d8:	f240 2116 	movw	r1, #534	; 0x216
 800e6dc:	482b      	ldr	r0, [pc, #172]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6de:	f7f6 fc69 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e6e2:	68e2      	ldr	r2, [r4, #12]
 800e6e4:	e618      	b.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e6e6:	f240 2115 	movw	r1, #533	; 0x215
 800e6ea:	4828      	ldr	r0, [pc, #160]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6ec:	f7f6 fc62 	bl	8004fb4 <assert_failed>
 800e6f0:	e60d      	b.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e6f2:	02d8      	lsls	r0, r3, #11
 800e6f4:	f57f ae79 	bpl.w	800e3ea <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e6f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e6fa:	2a00      	cmp	r2, #0
 800e6fc:	f47f ae75 	bne.w	800e3ea <HAL_RCCEx_PeriphCLKConfig+0x612>
 800e700:	e64e      	b.n	800e3a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800e702:	f44f 7111 	mov.w	r1, #580	; 0x244
 800e706:	4821      	ldr	r0, [pc, #132]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e708:	f7f6 fc54 	bl	8004fb4 <assert_failed>
 800e70c:	e640      	b.n	800e390 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800e70e:	6a20      	ldr	r0, [r4, #32]
 800e710:	2803      	cmp	r0, #3
 800e712:	d82c      	bhi.n	800e76e <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e714:	491e      	ldr	r1, [pc, #120]	; (800e790 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800e716:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e71a:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e71e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800e722:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800e726:	432a      	orrs	r2, r5
 800e728:	6965      	ldr	r5, [r4, #20]
 800e72a:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800e72e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e732:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800e736:	e65f      	b.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800e738:	f240 216f 	movw	r1, #623	; 0x26f
 800e73c:	4813      	ldr	r0, [pc, #76]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e73e:	f7f6 fc39 	bl	8004fb4 <assert_failed>
 800e742:	e660      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800e744:	f240 214d 	movw	r1, #589	; 0x24d
 800e748:	4810      	ldr	r0, [pc, #64]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e74a:	f7f6 fc33 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e74e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e750:	1e59      	subs	r1, r3, #1
 800e752:	e62f      	b.n	800e3b4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800e754:	f240 214b 	movw	r1, #587	; 0x24b
 800e758:	480c      	ldr	r0, [pc, #48]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e75a:	f7f6 fc2b 	bl	8004fb4 <assert_failed>
 800e75e:	e624      	b.n	800e3aa <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800e760:	480a      	ldr	r0, [pc, #40]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e762:	f44f 711c 	mov.w	r1, #624	; 0x270
 800e766:	f7f6 fc25 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e76a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e76c:	e650      	b.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800e76e:	4807      	ldr	r0, [pc, #28]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e770:	f44f 7118 	mov.w	r1, #608	; 0x260
 800e774:	f7f6 fc1e 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e778:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	e7ca      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800e77e:	21b7      	movs	r1, #183	; 0xb7
 800e780:	4802      	ldr	r0, [pc, #8]	; (800e78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e782:	f7f6 fc17 	bl	8004fb4 <assert_failed>
 800e786:	f7ff bbc2 	b.w	800df0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e78a:	bf00      	nop
 800e78c:	0802cba8 	.word	0x0802cba8
 800e790:	40023800 	.word	0x40023800
 800e794:	0ffffcff 	.word	0x0ffffcff

0800e798 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e798:	b308      	cbz	r0, 800e7de <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800e79a:	4b12      	ldr	r3, [pc, #72]	; (800e7e4 <HAL_RNG_Init+0x4c>)
 800e79c:	6802      	ldr	r2, [r0, #0]
 800e79e:	429a      	cmp	r2, r3
{
 800e7a0:	b510      	push	{r4, lr}
 800e7a2:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800e7a4:	d003      	beq.n	800e7ae <HAL_RNG_Init+0x16>
 800e7a6:	21a3      	movs	r1, #163	; 0xa3
 800e7a8:	480f      	ldr	r0, [pc, #60]	; (800e7e8 <HAL_RNG_Init+0x50>)
 800e7aa:	f7f6 fc03 	bl	8004fb4 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e7ae:	7963      	ldrb	r3, [r4, #5]
 800e7b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e7b4:	b173      	cbz	r3, 800e7d4 <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e7b6:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800e7b8:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e7ba:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800e7bc:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800e7c0:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800e7c2:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800e7c4:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800e7c6:	f043 0304 	orr.w	r3, r3, #4
 800e7ca:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800e7cc:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e7d0:	60a2      	str	r2, [r4, #8]
}
 800e7d2:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800e7d4:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800e7d6:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800e7d8:	f7f7 ff4c 	bl	8006674 <HAL_RNG_MspInit>
 800e7dc:	e7eb      	b.n	800e7b6 <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800e7de:	2001      	movs	r0, #1
}
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	50060800 	.word	0x50060800
 800e7e8:	0802cbe4 	.word	0x0802cbe4

0800e7ec <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800e7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ee:	460c      	mov	r4, r1
 800e7f0:	4615      	mov	r5, r2
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e7f6:	4425      	add	r5, r4
 800e7f8:	f7f9 fcda 	bl	80081b0 <HAL_GetTick>
 800e7fc:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800e7fe:	f7f9 fcd7 	bl	80081b0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e802:	4b25      	ldr	r3, [pc, #148]	; (800e898 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800e804:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800e80c:	fb05 f303 	mul.w	r3, r5, r3
 800e810:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e812:	6832      	ldr	r2, [r6, #0]
 800e814:	e001      	b.n	800e81a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e816:	1c63      	adds	r3, r4, #1
 800e818:	d106      	bne.n	800e828 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e81a:	6893      	ldr	r3, [r2, #8]
 800e81c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800e820:	d1f9      	bne.n	800e816 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800e822:	4618      	mov	r0, r3
}
 800e824:	b003      	add	sp, #12
 800e826:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e828:	f7f9 fcc2 	bl	80081b0 <HAL_GetTick>
 800e82c:	1bc0      	subs	r0, r0, r7
 800e82e:	42a8      	cmp	r0, r5
 800e830:	d208      	bcs.n	800e844 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800e832:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800e834:	2b00      	cmp	r3, #0
      count--;
 800e836:	9b01      	ldr	r3, [sp, #4]
 800e838:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800e83c:	bf08      	it	eq
 800e83e:	2500      	moveq	r5, #0
      count--;
 800e840:	9301      	str	r3, [sp, #4]
 800e842:	e7e6      	b.n	800e812 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e844:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e848:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e84a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e84e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e852:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e854:	d014      	beq.n	800e880 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e856:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800e858:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e85c:	d007      	beq.n	800e86e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800e85e:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800e860:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e862:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800e864:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800e868:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800e86c:	e7da      	b.n	800e824 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e874:	601a      	str	r2, [r3, #0]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e87c:	601a      	str	r2, [r3, #0]
 800e87e:	e7ee      	b.n	800e85e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e880:	68b2      	ldr	r2, [r6, #8]
 800e882:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e886:	d002      	beq.n	800e88e <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800e888:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e88c:	d1e3      	bne.n	800e856 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	e7de      	b.n	800e856 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800e898:	20000284 	.word	0x20000284

0800e89c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8a0:	4615      	mov	r5, r2
 800e8a2:	4698      	mov	r8, r3
 800e8a4:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e8a6:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e8a8:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e8aa:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800e8ac:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e8b0:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e8b2:	f7f9 fc7d 	bl	80081b0 <HAL_GetTick>
 800e8b6:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800e8ba:	f7f9 fc79 	bl	80081b0 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e8be:	4b2e      	ldr	r3, [pc, #184]	; (800e978 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e8c0:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800e8c4:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e8c6:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800e8c8:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e8ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e8ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e8d2:	0d1b      	lsrs	r3, r3, #20
 800e8d4:	fb07 f303 	mul.w	r3, r7, r3
 800e8d8:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e8da:	e00b      	b.n	800e8f4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e8dc:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800e8e0:	d106      	bne.n	800e8f0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e8e2:	f899 300c 	ldrb.w	r3, [r9, #12]
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e8ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e8f0:	1c6b      	adds	r3, r5, #1
 800e8f2:	d106      	bne.n	800e902 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800e8f4:	6893      	ldr	r3, [r2, #8]
 800e8f6:	4023      	ands	r3, r4
 800e8f8:	d1f0      	bne.n	800e8dc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800e8fa:	4618      	mov	r0, r3
}
 800e8fc:	b003      	add	sp, #12
 800e8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e902:	f7f9 fc55 	bl	80081b0 <HAL_GetTick>
 800e906:	eba0 0008 	sub.w	r0, r0, r8
 800e90a:	42b8      	cmp	r0, r7
 800e90c:	d209      	bcs.n	800e922 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800e90e:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e910:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800e912:	2b00      	cmp	r3, #0
      count--;
 800e914:	9b01      	ldr	r3, [sp, #4]
 800e916:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800e91a:	bf08      	it	eq
 800e91c:	2700      	moveq	r7, #0
      count--;
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	e7e8      	b.n	800e8f4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e922:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e926:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e928:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e92c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e930:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e932:	d014      	beq.n	800e95e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e934:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800e936:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e93a:	d007      	beq.n	800e94c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800e93c:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800e93e:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e940:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800e942:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800e946:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800e94a:	e7d7      	b.n	800e8fc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e95a:	601a      	str	r2, [r3, #0]
 800e95c:	e7ee      	b.n	800e93c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e95e:	68b2      	ldr	r2, [r6, #8]
 800e960:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e964:	d002      	beq.n	800e96c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800e966:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e96a:	d1e3      	bne.n	800e934 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e972:	601a      	str	r2, [r3, #0]
 800e974:	e7de      	b.n	800e934 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800e976:	bf00      	nop
 800e978:	20000284 	.word	0x20000284

0800e97c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e97c:	b570      	push	{r4, r5, r6, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	4613      	mov	r3, r2
 800e982:	460e      	mov	r6, r1
 800e984:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e986:	9201      	str	r2, [sp, #4]
 800e988:	460a      	mov	r2, r1
 800e98a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e98e:	f7ff ff85 	bl	800e89c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e992:	9b01      	ldr	r3, [sp, #4]
 800e994:	bb58      	cbnz	r0, 800e9ee <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e996:	4919      	ldr	r1, [pc, #100]	; (800e9fc <SPI_EndRxTxTransaction+0x80>)
 800e998:	4a19      	ldr	r2, [pc, #100]	; (800ea00 <SPI_EndRxTxTransaction+0x84>)
 800e99a:	6808      	ldr	r0, [r1, #0]
 800e99c:	fba2 2000 	umull	r2, r0, r2, r0
 800e9a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e9a4:	0d40      	lsrs	r0, r0, #21
 800e9a6:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e9aa:	686a      	ldr	r2, [r5, #4]
 800e9ac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e9b0:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e9b2:	d107      	bne.n	800e9c4 <SPI_EndRxTxTransaction+0x48>
 800e9b4:	e012      	b.n	800e9dc <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800e9b6:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e9b8:	682a      	ldr	r2, [r5, #0]
      count--;
 800e9ba:	3c01      	subs	r4, #1
 800e9bc:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e9be:	6894      	ldr	r4, [r2, #8]
 800e9c0:	0622      	lsls	r2, r4, #24
 800e9c2:	d502      	bpl.n	800e9ca <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800e9c4:	9c03      	ldr	r4, [sp, #12]
 800e9c6:	2c00      	cmp	r4, #0
 800e9c8:	d1f5      	bne.n	800e9b6 <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e9ca:	4632      	mov	r2, r6
 800e9cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	f7ff ff63 	bl	800e89c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e9d6:	b950      	cbnz	r0, 800e9ee <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800e9d8:	b004      	add	sp, #16
 800e9da:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9dc:	461a      	mov	r2, r3
 800e9de:	4631      	mov	r1, r6
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	9301      	str	r3, [sp, #4]
 800e9e4:	f7ff ff02 	bl	800e7ec <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800e9e8:	9b01      	ldr	r3, [sp, #4]
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d0ed      	beq.n	800e9ca <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9ee:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800e9f0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9f2:	f043 0320 	orr.w	r3, r3, #32
 800e9f6:	662b      	str	r3, [r5, #96]	; 0x60
}
 800e9f8:	b004      	add	sp, #16
 800e9fa:	bd70      	pop	{r4, r5, r6, pc}
 800e9fc:	20000284 	.word	0x20000284
 800ea00:	165e9f81 	.word	0x165e9f81

0800ea04 <HAL_SPI_Init>:
  if (hspi == NULL)
 800ea04:	2800      	cmp	r0, #0
 800ea06:	f000 8128 	beq.w	800ec5a <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800ea0a:	6802      	ldr	r2, [r0, #0]
 800ea0c:	4ba7      	ldr	r3, [pc, #668]	; (800ecac <HAL_SPI_Init+0x2a8>)
 800ea0e:	49a8      	ldr	r1, [pc, #672]	; (800ecb0 <HAL_SPI_Init+0x2ac>)
{
 800ea10:	b570      	push	{r4, r5, r6, lr}
 800ea12:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800ea14:	48a7      	ldr	r0, [pc, #668]	; (800ecb4 <HAL_SPI_Init+0x2b0>)
 800ea16:	429a      	cmp	r2, r3
 800ea18:	bf18      	it	ne
 800ea1a:	4282      	cmpne	r2, r0
 800ea1c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800ea20:	bf14      	ite	ne
 800ea22:	2301      	movne	r3, #1
 800ea24:	2300      	moveq	r3, #0
 800ea26:	428a      	cmp	r2, r1
 800ea28:	bf0c      	ite	eq
 800ea2a:	2300      	moveq	r3, #0
 800ea2c:	f003 0301 	andne.w	r3, r3, #1
 800ea30:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800ea34:	4282      	cmp	r2, r0
 800ea36:	bf0c      	ite	eq
 800ea38:	2300      	moveq	r3, #0
 800ea3a:	f003 0301 	andne.w	r3, r3, #1
 800ea3e:	428a      	cmp	r2, r1
 800ea40:	bf0c      	ite	eq
 800ea42:	2300      	moveq	r3, #0
 800ea44:	f003 0301 	andne.w	r3, r3, #1
 800ea48:	b11b      	cbz	r3, 800ea52 <HAL_SPI_Init+0x4e>
 800ea4a:	4b9b      	ldr	r3, [pc, #620]	; (800ecb8 <HAL_SPI_Init+0x2b4>)
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	f040 80fe 	bne.w	800ec4e <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800ea52:	6863      	ldr	r3, [r4, #4]
 800ea54:	b11b      	cbz	r3, 800ea5e <HAL_SPI_Init+0x5a>
 800ea56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea5a:	f040 80cd 	bne.w	800ebf8 <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800ea5e:	68a3      	ldr	r3, [r4, #8]
 800ea60:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800ea64:	d003      	beq.n	800ea6e <HAL_SPI_Init+0x6a>
 800ea66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea6a:	f040 80db 	bne.w	800ec24 <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800ea6e:	68e2      	ldr	r2, [r4, #12]
 800ea70:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800ea74:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800ea78:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800ea7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ea80:	bf18      	it	ne
 800ea82:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800ea86:	bf14      	ite	ne
 800ea88:	2301      	movne	r3, #1
 800ea8a:	2300      	moveq	r3, #0
 800ea8c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800ea90:	bf0c      	ite	eq
 800ea92:	2300      	moveq	r3, #0
 800ea94:	f003 0301 	andne.w	r3, r3, #1
 800ea98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ea9c:	bf0c      	ite	eq
 800ea9e:	2300      	moveq	r3, #0
 800eaa0:	f003 0301 	andne.w	r3, r3, #1
 800eaa4:	b12b      	cbz	r3, 800eab2 <HAL_SPI_Init+0xae>
 800eaa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eaaa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800eaae:	f040 80f7 	bne.w	800eca0 <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800eab2:	69a3      	ldr	r3, [r4, #24]
 800eab4:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800eab8:	d003      	beq.n	800eac2 <HAL_SPI_Init+0xbe>
 800eaba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eabe:	f040 80a1 	bne.w	800ec04 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800eac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eac4:	f033 0308 	bics.w	r3, r3, #8
 800eac8:	f040 80a6 	bne.w	800ec18 <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800eacc:	69e3      	ldr	r3, [r4, #28]
 800eace:	f023 0318 	bic.w	r3, r3, #24
 800ead2:	2b20      	cmp	r3, #32
 800ead4:	d002      	beq.n	800eadc <HAL_SPI_Init+0xd8>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f040 80d6 	bne.w	800ec88 <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800eadc:	6a23      	ldr	r3, [r4, #32]
 800eade:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800eae2:	f040 80a8 	bne.w	800ec36 <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800eae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eae8:	f033 0210 	bics.w	r2, r3, #16
 800eaec:	d17b      	bne.n	800ebe6 <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d16e      	bne.n	800ebd0 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800eaf2:	6923      	ldr	r3, [r4, #16]
 800eaf4:	f033 0302 	bics.w	r3, r3, #2
 800eaf8:	f040 80c0 	bne.w	800ec7c <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800eafc:	6963      	ldr	r3, [r4, #20]
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d904      	bls.n	800eb0c <HAL_SPI_Init+0x108>
 800eb02:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800eb06:	486d      	ldr	r0, [pc, #436]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800eb08:	f7f6 fa54 	bl	8004fb4 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb0c:	6863      	ldr	r3, [r4, #4]
 800eb0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb12:	f000 80a4 	beq.w	800ec5e <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eb16:	2300      	movs	r3, #0
 800eb18:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb1a:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800eb1c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb20:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800eb22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f000 808b 	beq.w	800ec42 <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800eb2c:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800eb2e:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb30:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800eb32:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800eb36:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800eb38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800eb3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800eb40:	bf8c      	ite	hi
 800eb42:	f04f 0c00 	movhi.w	ip, #0
 800eb46:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800eb4a:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800eb4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800eb50:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800eb54:	d16c      	bne.n	800ec30 <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800eb58:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800eb5c:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb5e:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb62:	6923      	ldr	r3, [r4, #16]
 800eb64:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800eb68:	68a1      	ldr	r1, [r4, #8]
 800eb6a:	f003 0302 	and.w	r3, r3, #2
 800eb6e:	69a6      	ldr	r6, [r4, #24]
 800eb70:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800eb74:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb76:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb78:	431a      	orrs	r2, r3
 800eb7a:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb7c:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb80:	f003 0301 	and.w	r3, r3, #1
 800eb84:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb88:	f003 0310 	and.w	r3, r3, #16
 800eb8c:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb8e:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb90:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb94:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800eb98:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb9c:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb9e:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eba2:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eba6:	430a      	orrs	r2, r1
 800eba8:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ebaa:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ebac:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ebb0:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ebb4:	430a      	orrs	r2, r1
 800ebb6:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ebb8:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ebba:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800ebbc:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ebbe:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ebc0:	69eb      	ldr	r3, [r5, #28]
 800ebc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebc6:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ebc8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ebca:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800ebce:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ebd0:	69e3      	ldr	r3, [r4, #28]
 800ebd2:	f023 0318 	bic.w	r3, r3, #24
 800ebd6:	2b20      	cmp	r3, #32
 800ebd8:	d001      	beq.n	800ebde <HAL_SPI_Init+0x1da>
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d15a      	bne.n	800ec94 <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ebde:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ebe0:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800ebe4:	e799      	b.n	800eb1a <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800ebe6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800ebea:	4834      	ldr	r0, [pc, #208]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ebec:	f7f6 f9e2 	bl	8004fb4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ebf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d1ec      	bne.n	800ebd0 <HAL_SPI_Init+0x1cc>
 800ebf6:	e77c      	b.n	800eaf2 <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800ebf8:	f240 1147 	movw	r1, #327	; 0x147
 800ebfc:	482f      	ldr	r0, [pc, #188]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ebfe:	f7f6 f9d9 	bl	8004fb4 <assert_failed>
 800ec02:	e72c      	b.n	800ea5e <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800ec04:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800ec08:	482c      	ldr	r0, [pc, #176]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ec0a:	f7f6 f9d3 	bl	8004fb4 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800ec0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec10:	f033 0308 	bics.w	r3, r3, #8
 800ec14:	f43f af5a 	beq.w	800eacc <HAL_SPI_Init+0xc8>
 800ec18:	f240 114b 	movw	r1, #331	; 0x14b
 800ec1c:	4827      	ldr	r0, [pc, #156]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ec1e:	f7f6 f9c9 	bl	8004fb4 <assert_failed>
 800ec22:	e753      	b.n	800eacc <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800ec24:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800ec28:	4824      	ldr	r0, [pc, #144]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ec2a:	f7f6 f9c3 	bl	8004fb4 <assert_failed>
 800ec2e:	e71e      	b.n	800ea6e <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec30:	2000      	movs	r0, #0
 800ec32:	62a0      	str	r0, [r4, #40]	; 0x28
 800ec34:	e792      	b.n	800eb5c <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800ec36:	f240 114d 	movw	r1, #333	; 0x14d
 800ec3a:	4820      	ldr	r0, [pc, #128]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ec3c:	f7f6 f9ba 	bl	8004fb4 <assert_failed>
 800ec40:	e751      	b.n	800eae6 <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800ec42:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800ec44:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800ec48:	f7f7 fd2a 	bl	80066a0 <HAL_SPI_MspInit>
 800ec4c:	e76e      	b.n	800eb2c <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800ec4e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800ec52:	481a      	ldr	r0, [pc, #104]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ec54:	f7f6 f9ae 	bl	8004fb4 <assert_failed>
 800ec58:	e6fb      	b.n	800ea52 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800ec5a:	2001      	movs	r0, #1
}
 800ec5c:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ec5e:	69e3      	ldr	r3, [r4, #28]
 800ec60:	f023 0318 	bic.w	r3, r3, #24
 800ec64:	2b20      	cmp	r3, #32
 800ec66:	f43f af58 	beq.w	800eb1a <HAL_SPI_Init+0x116>
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	f43f af55 	beq.w	800eb1a <HAL_SPI_Init+0x116>
 800ec70:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800ec74:	4811      	ldr	r0, [pc, #68]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ec76:	f7f6 f99d 	bl	8004fb4 <assert_failed>
 800ec7a:	e74e      	b.n	800eb1a <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800ec7c:	f240 1151 	movw	r1, #337	; 0x151
 800ec80:	480e      	ldr	r0, [pc, #56]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ec82:	f7f6 f997 	bl	8004fb4 <assert_failed>
 800ec86:	e739      	b.n	800eafc <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ec88:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800ec8c:	480b      	ldr	r0, [pc, #44]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ec8e:	f7f6 f991 	bl	8004fb4 <assert_failed>
 800ec92:	e723      	b.n	800eadc <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ec94:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ec98:	4808      	ldr	r0, [pc, #32]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800ec9a:	f7f6 f98b 	bl	8004fb4 <assert_failed>
 800ec9e:	e79e      	b.n	800ebde <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800eca0:	f240 1149 	movw	r1, #329	; 0x149
 800eca4:	4805      	ldr	r0, [pc, #20]	; (800ecbc <HAL_SPI_Init+0x2b8>)
 800eca6:	f7f6 f985 	bl	8004fb4 <assert_failed>
 800ecaa:	e702      	b.n	800eab2 <HAL_SPI_Init+0xae>
 800ecac:	40013000 	.word	0x40013000
 800ecb0:	40003c00 	.word	0x40003c00
 800ecb4:	40003800 	.word	0x40003800
 800ecb8:	40015400 	.word	0x40015400
 800ecbc:	0802cc1c 	.word	0x0802cc1c

0800ecc0 <HAL_SPI_Transmit>:
{
 800ecc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc4:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ecc6:	6883      	ldr	r3, [r0, #8]
{
 800ecc8:	b082      	sub	sp, #8
 800ecca:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800eccc:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800ecd0:	460f      	mov	r7, r1
 800ecd2:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ecd4:	d171      	bne.n	800edba <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800ecd6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d076      	beq.n	800edcc <HAL_SPI_Transmit+0x10c>
 800ecde:	2301      	movs	r3, #1
 800ece0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800ece4:	f7f9 fa64 	bl	80081b0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ece8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800ecec:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	b2d8      	uxtb	r0, r3
 800ecf2:	d009      	beq.n	800ed08 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800ecf4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800ecf6:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800ecf8:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800ecfa:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ecfe:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800ed02:	b002      	add	sp, #8
 800ed04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800ed08:	2f00      	cmp	r7, #0
 800ed0a:	d0f4      	beq.n	800ecf6 <HAL_SPI_Transmit+0x36>
 800ed0c:	fab8 f388 	clz	r3, r8
 800ed10:	095b      	lsrs	r3, r3, #5
 800ed12:	f1b8 0f00 	cmp.w	r8, #0
 800ed16:	d0ee      	beq.n	800ecf6 <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ed18:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ed1a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ed1c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ed20:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed24:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ed26:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800ed2a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ed2e:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ed30:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800ed34:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed38:	68a3      	ldr	r3, [r4, #8]
 800ed3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800ed3e:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed40:	d07a      	beq.n	800ee38 <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	0652      	lsls	r2, r2, #25
 800ed46:	d403      	bmi.n	800ed50 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed4e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed50:	68e2      	ldr	r2, [r4, #12]
 800ed52:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed56:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed58:	d93c      	bls.n	800edd4 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed5a:	b112      	cbz	r2, 800ed62 <HAL_SPI_Transmit+0xa2>
 800ed5c:	f1b8 0f01 	cmp.w	r8, #1
 800ed60:	d107      	bne.n	800ed72 <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed62:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ed66:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800ed68:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed6a:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800ed6c:	3a01      	subs	r2, #1
 800ed6e:	b292      	uxth	r2, r2
 800ed70:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ed72:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ed74:	b292      	uxth	r2, r2
 800ed76:	b992      	cbnz	r2, 800ed9e <HAL_SPI_Transmit+0xde>
 800ed78:	e072      	b.n	800ee60 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ed7c:	f832 1b02 	ldrh.w	r1, [r2], #2
 800ed80:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800ed82:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed86:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ed88:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ed8c:	fa1f fc8c 	uxth.w	ip, ip
 800ed90:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ed94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d061      	beq.n	800ee60 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ed9c:	6823      	ldr	r3, [r4, #0]
 800ed9e:	689a      	ldr	r2, [r3, #8]
 800eda0:	0797      	lsls	r7, r2, #30
 800eda2:	d4ea      	bmi.n	800ed7a <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eda4:	f7f9 fa04 	bl	80081b0 <HAL_GetTick>
 800eda8:	1b80      	subs	r0, r0, r6
 800edaa:	42a8      	cmp	r0, r5
 800edac:	d301      	bcc.n	800edb2 <HAL_SPI_Transmit+0xf2>
 800edae:	1c68      	adds	r0, r5, #1
 800edb0:	d101      	bne.n	800edb6 <HAL_SPI_Transmit+0xf6>
 800edb2:	2d00      	cmp	r5, #0
 800edb4:	d1ee      	bne.n	800ed94 <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800edb6:	2003      	movs	r0, #3
 800edb8:	e79d      	b.n	800ecf6 <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800edba:	f240 313d 	movw	r1, #829	; 0x33d
 800edbe:	4838      	ldr	r0, [pc, #224]	; (800eea0 <HAL_SPI_Transmit+0x1e0>)
 800edc0:	f7f6 f8f8 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hspi);
 800edc4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d188      	bne.n	800ecde <HAL_SPI_Transmit+0x1e>
 800edcc:	2002      	movs	r0, #2
}
 800edce:	b002      	add	sp, #8
 800edd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edd4:	b112      	cbz	r2, 800eddc <HAL_SPI_Transmit+0x11c>
 800edd6:	f1b8 0f01 	cmp.w	r8, #1
 800edda:	d10b      	bne.n	800edf4 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800eddc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800edde:	b292      	uxth	r2, r2
 800ede0:	2a01      	cmp	r2, #1
 800ede2:	d953      	bls.n	800ee8c <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ede4:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ede8:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800edea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800edec:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800edee:	3b02      	subs	r3, #2
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800edf4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	b983      	cbnz	r3, 800ee1c <HAL_SPI_Transmit+0x15c>
 800edfa:	e031      	b.n	800ee60 <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800edfc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d922      	bls.n	800ee4a <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee04:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ee06:	f831 3b02 	ldrh.w	r3, [r1], #2
 800ee0a:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800ee0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee0e:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ee10:	3b02      	subs	r3, #2
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ee16:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800ee18:	b289      	uxth	r1, r1
 800ee1a:	b309      	cbz	r1, 800ee60 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ee1c:	6822      	ldr	r2, [r4, #0]
 800ee1e:	6893      	ldr	r3, [r2, #8]
 800ee20:	0799      	lsls	r1, r3, #30
 800ee22:	d4eb      	bmi.n	800edfc <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee24:	f7f9 f9c4 	bl	80081b0 <HAL_GetTick>
 800ee28:	1b80      	subs	r0, r0, r6
 800ee2a:	42a8      	cmp	r0, r5
 800ee2c:	d301      	bcc.n	800ee32 <HAL_SPI_Transmit+0x172>
 800ee2e:	1c6b      	adds	r3, r5, #1
 800ee30:	d1c1      	bne.n	800edb6 <HAL_SPI_Transmit+0xf6>
 800ee32:	2d00      	cmp	r5, #0
 800ee34:	d1ef      	bne.n	800ee16 <HAL_SPI_Transmit+0x156>
 800ee36:	e7be      	b.n	800edb6 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee46:	601a      	str	r2, [r3, #0]
 800ee48:	e77b      	b.n	800ed42 <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800ee50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800ee52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ee54:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800ee56:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800ee58:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800ee5a:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ee5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ee5e:	e7da      	b.n	800ee16 <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee60:	4632      	mov	r2, r6
 800ee62:	4629      	mov	r1, r5
 800ee64:	4620      	mov	r0, r4
 800ee66:	f7ff fd89 	bl	800e97c <SPI_EndRxTxTransaction>
 800ee6a:	b108      	cbz	r0, 800ee70 <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee6c:	2320      	movs	r3, #32
 800ee6e:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee70:	68a3      	ldr	r3, [r4, #8]
 800ee72:	b933      	cbnz	r3, 800ee82 <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee74:	6822      	ldr	r2, [r4, #0]
 800ee76:	9301      	str	r3, [sp, #4]
 800ee78:	68d3      	ldr	r3, [r2, #12]
 800ee7a:	9301      	str	r3, [sp, #4]
 800ee7c:	6893      	ldr	r3, [r2, #8]
 800ee7e:	9301      	str	r3, [sp, #4]
 800ee80:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee82:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800ee84:	3800      	subs	r0, #0
 800ee86:	bf18      	it	ne
 800ee88:	2001      	movne	r0, #1
error:
 800ee8a:	e734      	b.n	800ecf6 <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee8c:	783a      	ldrb	r2, [r7, #0]
 800ee8e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800ee90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800ee92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ee94:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800ee96:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800ee98:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800ee9a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ee9c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ee9e:	e7a9      	b.n	800edf4 <HAL_SPI_Transmit+0x134>
 800eea0:	0802cc1c 	.word	0x0802cc1c

0800eea4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eea4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eea6:	4a12      	ldr	r2, [pc, #72]	; (800eef0 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800eeac:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eeae:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800eeb0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800eeb2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800eeb4:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eeb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eeba:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800eebc:	680d      	ldr	r5, [r1, #0]
 800eebe:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eec0:	688d      	ldr	r5, [r1, #8]
 800eec2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eec6:	4d0b      	ldr	r5, [pc, #44]	; (800eef4 <TIM_OC5_SetConfig+0x50>)
 800eec8:	42a8      	cmp	r0, r5
 800eeca:	d00a      	beq.n	800eee2 <TIM_OC5_SetConfig+0x3e>
 800eecc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800eed0:	42a8      	cmp	r0, r5
 800eed2:	d006      	beq.n	800eee2 <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eed4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800eed6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800eed8:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800eeda:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eedc:	6203      	str	r3, [r0, #32]
}
 800eede:	bc30      	pop	{r4, r5}
 800eee0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eee2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eee6:	694d      	ldr	r5, [r1, #20]
 800eee8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800eeec:	e7f2      	b.n	800eed4 <TIM_OC5_SetConfig+0x30>
 800eeee:	bf00      	nop
 800eef0:	fffeff8f 	.word	0xfffeff8f
 800eef4:	40010000 	.word	0x40010000

0800eef8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eef8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eefa:	4a12      	ldr	r2, [pc, #72]	; (800ef44 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eefc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800ef00:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ef02:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800ef04:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800ef06:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800ef08:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ef0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ef0e:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef10:	680d      	ldr	r5, [r1, #0]
 800ef12:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ef16:	688d      	ldr	r5, [r1, #8]
 800ef18:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef1c:	4d0a      	ldr	r5, [pc, #40]	; (800ef48 <TIM_OC6_SetConfig+0x50>)
 800ef1e:	42a8      	cmp	r0, r5
 800ef20:	d00a      	beq.n	800ef38 <TIM_OC6_SetConfig+0x40>
 800ef22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ef26:	42a8      	cmp	r0, r5
 800ef28:	d006      	beq.n	800ef38 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef2a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800ef2c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800ef2e:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800ef30:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef32:	6203      	str	r3, [r0, #32]
}
 800ef34:	bc30      	pop	{r4, r5}
 800ef36:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ef38:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ef3c:	694d      	ldr	r5, [r1, #20]
 800ef3e:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800ef42:	e7f2      	b.n	800ef2a <TIM_OC6_SetConfig+0x32>
 800ef44:	feff8fff 	.word	0xfeff8fff
 800ef48:	40010000 	.word	0x40010000

0800ef4c <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef4c:	6a03      	ldr	r3, [r0, #32]
 800ef4e:	f023 0301 	bic.w	r3, r3, #1
{
 800ef52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef56:	6203      	str	r3, [r0, #32]
{
 800ef58:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800ef5a:	6a05      	ldr	r5, [r0, #32]
{
 800ef5c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800ef5e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef62:	4b27      	ldr	r3, [pc, #156]	; (800f000 <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 800ef64:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 800ef68:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 800ef6a:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef6c:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800ef6e:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800ef70:	688b      	ldr	r3, [r1, #8]
 800ef72:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ef74:	4b23      	ldr	r3, [pc, #140]	; (800f004 <TIM_OC1_SetConfig+0xb8>)
 800ef76:	4298      	cmp	r0, r3
 800ef78:	d00b      	beq.n	800ef92 <TIM_OC1_SetConfig+0x46>
 800ef7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef7e:	4298      	cmp	r0, r3
 800ef80:	d007      	beq.n	800ef92 <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800ef82:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ef84:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ef88:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800ef8a:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800ef8c:	6225      	str	r5, [r4, #32]
}
 800ef8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ef92:	68f3      	ldr	r3, [r6, #12]
 800ef94:	f033 0208 	bics.w	r2, r3, #8
 800ef98:	d120      	bne.n	800efdc <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 800ef9a:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800ef9e:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800efa0:	69b3      	ldr	r3, [r6, #24]
 800efa2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800efa6:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800efaa:	d11e      	bne.n	800efea <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800efac:	6973      	ldr	r3, [r6, #20]
 800efae:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800efb2:	d106      	bne.n	800efc2 <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800efb4:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800efb8:	69b1      	ldr	r1, [r6, #24]
 800efba:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800efbc:	ea42 0803 	orr.w	r8, r2, r3
 800efc0:	e7df      	b.n	800ef82 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800efc2:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800efc6:	4810      	ldr	r0, [pc, #64]	; (800f008 <TIM_OC1_SetConfig+0xbc>)
 800efc8:	f7f5 fff4 	bl	8004fb4 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800efcc:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800efd0:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 800efd2:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800efd4:	430a      	orrs	r2, r1
 800efd6:	ea42 0803 	orr.w	r8, r2, r3
 800efda:	e7d2      	b.n	800ef82 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800efdc:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800efe0:	4809      	ldr	r0, [pc, #36]	; (800f008 <TIM_OC1_SetConfig+0xbc>)
 800efe2:	f7f5 ffe7 	bl	8004fb4 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800efe6:	68f3      	ldr	r3, [r6, #12]
 800efe8:	e7d7      	b.n	800ef9a <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800efea:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800efee:	4806      	ldr	r0, [pc, #24]	; (800f008 <TIM_OC1_SetConfig+0xbc>)
 800eff0:	f7f5 ffe0 	bl	8004fb4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800eff4:	6973      	ldr	r3, [r6, #20]
 800eff6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800effa:	d0db      	beq.n	800efb4 <TIM_OC1_SetConfig+0x68>
 800effc:	e7e1      	b.n	800efc2 <TIM_OC1_SetConfig+0x76>
 800effe:	bf00      	nop
 800f000:	fffeff8c 	.word	0xfffeff8c
 800f004:	40010000 	.word	0x40010000
 800f008:	0802cc54 	.word	0x0802cc54

0800f00c <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f00c:	6a03      	ldr	r3, [r0, #32]
 800f00e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800f012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f016:	6203      	str	r3, [r0, #32]
{
 800f018:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800f01a:	6a05      	ldr	r5, [r0, #32]
{
 800f01c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800f01e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f022:	4b29      	ldr	r3, [pc, #164]	; (800f0c8 <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 800f024:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800f028:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 800f02a:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f02c:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800f02e:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f030:	688b      	ldr	r3, [r1, #8]
 800f032:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f036:	4b25      	ldr	r3, [pc, #148]	; (800f0cc <TIM_OC3_SetConfig+0xc0>)
 800f038:	4298      	cmp	r0, r3
 800f03a:	d00b      	beq.n	800f054 <TIM_OC3_SetConfig+0x48>
 800f03c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f040:	4298      	cmp	r0, r3
 800f042:	d007      	beq.n	800f054 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800f044:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800f046:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800f04a:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800f04c:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800f04e:	6225      	str	r5, [r4, #32]
}
 800f050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f054:	68f3      	ldr	r3, [r6, #12]
 800f056:	f033 0208 	bics.w	r2, r3, #8
 800f05a:	d123      	bne.n	800f0a4 <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 800f05c:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f060:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f064:	69b3      	ldr	r3, [r6, #24]
 800f066:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800f06a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f06e:	d120      	bne.n	800f0b2 <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f070:	6973      	ldr	r3, [r6, #20]
 800f072:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f076:	d107      	bne.n	800f088 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f078:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f07c:	69b1      	ldr	r1, [r6, #24]
 800f07e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800f082:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800f086:	e7dd      	b.n	800f044 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f088:	f641 4103 	movw	r1, #7171	; 0x1c03
 800f08c:	4810      	ldr	r0, [pc, #64]	; (800f0d0 <TIM_OC3_SetConfig+0xc4>)
 800f08e:	f7f5 ff91 	bl	8004fb4 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f092:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f096:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f098:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f09a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800f09e:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800f0a2:	e7cf      	b.n	800f044 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f0a4:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 800f0a8:	4809      	ldr	r0, [pc, #36]	; (800f0d0 <TIM_OC3_SetConfig+0xc4>)
 800f0aa:	f7f5 ff83 	bl	8004fb4 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f0ae:	68f3      	ldr	r3, [r6, #12]
 800f0b0:	e7d4      	b.n	800f05c <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f0b2:	f641 4102 	movw	r1, #7170	; 0x1c02
 800f0b6:	4806      	ldr	r0, [pc, #24]	; (800f0d0 <TIM_OC3_SetConfig+0xc4>)
 800f0b8:	f7f5 ff7c 	bl	8004fb4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f0bc:	6973      	ldr	r3, [r6, #20]
 800f0be:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f0c2:	d0d9      	beq.n	800f078 <TIM_OC3_SetConfig+0x6c>
 800f0c4:	e7e0      	b.n	800f088 <TIM_OC3_SetConfig+0x7c>
 800f0c6:	bf00      	nop
 800f0c8:	fffeff8c 	.word	0xfffeff8c
 800f0cc:	40010000 	.word	0x40010000
 800f0d0:	0802cc54 	.word	0x0802cc54

0800f0d4 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f0d4:	6a03      	ldr	r3, [r0, #32]
 800f0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800f0da:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f0dc:	6203      	str	r3, [r0, #32]
{
 800f0de:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 800f0e0:	6a06      	ldr	r6, [r0, #32]
{
 800f0e2:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 800f0e4:	6842      	ldr	r2, [r0, #4]
{
 800f0e6:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 800f0e8:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800f0ea:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f0ee:	4b16      	ldr	r3, [pc, #88]	; (800f148 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0f0:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f0f2:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0f4:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f0f8:	68ab      	ldr	r3, [r5, #8]
 800f0fa:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0fe:	4b13      	ldr	r3, [pc, #76]	; (800f14c <TIM_OC4_SetConfig+0x78>)
 800f100:	4298      	cmp	r0, r3
 800f102:	d00a      	beq.n	800f11a <TIM_OC4_SetConfig+0x46>
 800f104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f108:	4298      	cmp	r0, r3
 800f10a:	d006      	beq.n	800f11a <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 800f10c:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800f10e:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800f110:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800f112:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800f114:	6226      	str	r6, [r4, #32]
}
 800f116:	b003      	add	sp, #12
 800f118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f11a:	696b      	ldr	r3, [r5, #20]
 800f11c:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800f120:	d104      	bne.n	800f12c <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f122:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f126:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800f12a:	e7ef      	b.n	800f10c <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f12c:	f641 4141 	movw	r1, #7233	; 0x1c41
 800f130:	4807      	ldr	r0, [pc, #28]	; (800f150 <TIM_OC4_SetConfig+0x7c>)
 800f132:	9201      	str	r2, [sp, #4]
 800f134:	f7f5 ff3e 	bl	8004fb4 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f138:	9a01      	ldr	r2, [sp, #4]
 800f13a:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f13c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f140:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800f144:	e7e2      	b.n	800f10c <TIM_OC4_SetConfig+0x38>
 800f146:	bf00      	nop
 800f148:	feff8cff 	.word	0xfeff8cff
 800f14c:	40010000 	.word	0x40010000
 800f150:	0802cc54 	.word	0x0802cc54

0800f154 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f154:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f156:	684a      	ldr	r2, [r1, #4]
{
 800f158:	b570      	push	{r4, r5, r6, lr}
 800f15a:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 800f15c:	6899      	ldr	r1, [r3, #8]
{
 800f15e:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f160:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800f162:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f166:	4980      	ldr	r1, [pc, #512]	; (800f368 <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f168:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f16a:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f16e:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f172:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800f176:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800f178:	f000 8104 	beq.w	800f384 <TIM_SlaveTimer_SetConfig+0x230>
 800f17c:	d953      	bls.n	800f226 <TIM_SlaveTimer_SetConfig+0xd2>
 800f17e:	2a60      	cmp	r2, #96	; 0x60
 800f180:	f000 816b 	beq.w	800f45a <TIM_SlaveTimer_SetConfig+0x306>
 800f184:	2a70      	cmp	r2, #112	; 0x70
 800f186:	d151      	bne.n	800f22c <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f188:	4a78      	ldr	r2, [pc, #480]	; (800f36c <TIM_SlaveTimer_SetConfig+0x218>)
 800f18a:	4979      	ldr	r1, [pc, #484]	; (800f370 <TIM_SlaveTimer_SetConfig+0x21c>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	bf18      	it	ne
 800f190:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f194:	bf14      	ite	ne
 800f196:	2201      	movne	r2, #1
 800f198:	2200      	moveq	r2, #0
 800f19a:	428b      	cmp	r3, r1
 800f19c:	bf0c      	ite	eq
 800f19e:	2200      	moveq	r2, #0
 800f1a0:	f002 0201 	andne.w	r2, r2, #1
 800f1a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f1a8:	428b      	cmp	r3, r1
 800f1aa:	bf0c      	ite	eq
 800f1ac:	2200      	moveq	r2, #0
 800f1ae:	f002 0201 	andne.w	r2, r2, #1
 800f1b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f1b6:	428b      	cmp	r3, r1
 800f1b8:	bf0c      	ite	eq
 800f1ba:	2200      	moveq	r2, #0
 800f1bc:	f002 0201 	andne.w	r2, r2, #1
 800f1c0:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f1c4:	428b      	cmp	r3, r1
 800f1c6:	bf0c      	ite	eq
 800f1c8:	2200      	moveq	r2, #0
 800f1ca:	f002 0201 	andne.w	r2, r2, #1
 800f1ce:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f1d2:	428b      	cmp	r3, r1
 800f1d4:	bf0c      	ite	eq
 800f1d6:	2200      	moveq	r2, #0
 800f1d8:	f002 0201 	andne.w	r2, r2, #1
 800f1dc:	b11a      	cbz	r2, 800f1e6 <TIM_SlaveTimer_SetConfig+0x92>
 800f1de:	4a65      	ldr	r2, [pc, #404]	; (800f374 <TIM_SlaveTimer_SetConfig+0x220>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	f040 81bb 	bne.w	800f55c <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800f1e6:	68e3      	ldr	r3, [r4, #12]
 800f1e8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f1ec:	f040 819e 	bne.w	800f52c <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f1f0:	68a3      	ldr	r3, [r4, #8]
 800f1f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1f6:	bf18      	it	ne
 800f1f8:	2b0a      	cmpne	r3, #10
 800f1fa:	d003      	beq.n	800f204 <TIM_SlaveTimer_SetConfig+0xb0>
 800f1fc:	f033 0302 	bics.w	r3, r3, #2
 800f200:	f040 81a6 	bne.w	800f550 <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f204:	6921      	ldr	r1, [r4, #16]
 800f206:	290f      	cmp	r1, #15
 800f208:	f200 8175 	bhi.w	800f4f6 <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800f20c:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f20e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 800f212:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f214:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f216:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f218:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800f21c:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f21e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f222:	60ab      	str	r3, [r5, #8]
}
 800f224:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800f226:	2a40      	cmp	r2, #64	; 0x40
 800f228:	d03a      	beq.n	800f2a0 <TIM_SlaveTimer_SetConfig+0x14c>
 800f22a:	d901      	bls.n	800f230 <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 800f22c:	2001      	movs	r0, #1
}
 800f22e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800f230:	2a20      	cmp	r2, #32
 800f232:	d002      	beq.n	800f23a <TIM_SlaveTimer_SetConfig+0xe6>
 800f234:	d930      	bls.n	800f298 <TIM_SlaveTimer_SetConfig+0x144>
 800f236:	2a30      	cmp	r2, #48	; 0x30
 800f238:	d1f8      	bne.n	800f22c <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f23a:	4a4c      	ldr	r2, [pc, #304]	; (800f36c <TIM_SlaveTimer_SetConfig+0x218>)
 800f23c:	484c      	ldr	r0, [pc, #304]	; (800f370 <TIM_SlaveTimer_SetConfig+0x21c>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	bf18      	it	ne
 800f242:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f246:	494c      	ldr	r1, [pc, #304]	; (800f378 <TIM_SlaveTimer_SetConfig+0x224>)
 800f248:	4c4c      	ldr	r4, [pc, #304]	; (800f37c <TIM_SlaveTimer_SetConfig+0x228>)
 800f24a:	bf14      	ite	ne
 800f24c:	2201      	movne	r2, #1
 800f24e:	2200      	moveq	r2, #0
 800f250:	4283      	cmp	r3, r0
 800f252:	bf0c      	ite	eq
 800f254:	2200      	moveq	r2, #0
 800f256:	f002 0201 	andne.w	r2, r2, #1
 800f25a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800f25e:	428b      	cmp	r3, r1
 800f260:	bf0c      	ite	eq
 800f262:	2200      	moveq	r2, #0
 800f264:	f002 0201 	andne.w	r2, r2, #1
 800f268:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800f26c:	42a3      	cmp	r3, r4
 800f26e:	bf0c      	ite	eq
 800f270:	2200      	moveq	r2, #0
 800f272:	f002 0201 	andne.w	r2, r2, #1
 800f276:	4283      	cmp	r3, r0
 800f278:	bf0c      	ite	eq
 800f27a:	2200      	moveq	r2, #0
 800f27c:	f002 0201 	andne.w	r2, r2, #1
 800f280:	428b      	cmp	r3, r1
 800f282:	bf0c      	ite	eq
 800f284:	2200      	moveq	r2, #0
 800f286:	f002 0201 	andne.w	r2, r2, #1
 800f28a:	b11a      	cbz	r2, 800f294 <TIM_SlaveTimer_SetConfig+0x140>
 800f28c:	4a39      	ldr	r2, [pc, #228]	; (800f374 <TIM_SlaveTimer_SetConfig+0x220>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	f040 816a 	bne.w	800f568 <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 800f294:	2000      	movs	r0, #0
}
 800f296:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800f298:	f032 0210 	bics.w	r2, r2, #16
 800f29c:	d1c6      	bne.n	800f22c <TIM_SlaveTimer_SetConfig+0xd8>
 800f29e:	e7cc      	b.n	800f23a <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f2a0:	4a32      	ldr	r2, [pc, #200]	; (800f36c <TIM_SlaveTimer_SetConfig+0x218>)
 800f2a2:	4933      	ldr	r1, [pc, #204]	; (800f370 <TIM_SlaveTimer_SetConfig+0x21c>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	bf18      	it	ne
 800f2a8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f2ac:	bf14      	ite	ne
 800f2ae:	2201      	movne	r2, #1
 800f2b0:	2200      	moveq	r2, #0
 800f2b2:	428b      	cmp	r3, r1
 800f2b4:	bf0c      	ite	eq
 800f2b6:	2200      	moveq	r2, #0
 800f2b8:	f002 0201 	andne.w	r2, r2, #1
 800f2bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f2c0:	428b      	cmp	r3, r1
 800f2c2:	bf0c      	ite	eq
 800f2c4:	2200      	moveq	r2, #0
 800f2c6:	f002 0201 	andne.w	r2, r2, #1
 800f2ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f2ce:	428b      	cmp	r3, r1
 800f2d0:	bf0c      	ite	eq
 800f2d2:	2200      	moveq	r2, #0
 800f2d4:	f002 0201 	andne.w	r2, r2, #1
 800f2d8:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f2dc:	428b      	cmp	r3, r1
 800f2de:	bf0c      	ite	eq
 800f2e0:	2200      	moveq	r2, #0
 800f2e2:	f002 0201 	andne.w	r2, r2, #1
 800f2e6:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f2ea:	428b      	cmp	r3, r1
 800f2ec:	bf0c      	ite	eq
 800f2ee:	2200      	moveq	r2, #0
 800f2f0:	f002 0201 	andne.w	r2, r2, #1
 800f2f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f2f8:	428b      	cmp	r3, r1
 800f2fa:	bf0c      	ite	eq
 800f2fc:	2200      	moveq	r2, #0
 800f2fe:	f002 0201 	andne.w	r2, r2, #1
 800f302:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f306:	428b      	cmp	r3, r1
 800f308:	bf0c      	ite	eq
 800f30a:	2200      	moveq	r2, #0
 800f30c:	f002 0201 	andne.w	r2, r2, #1
 800f310:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800f314:	428b      	cmp	r3, r1
 800f316:	bf0c      	ite	eq
 800f318:	2200      	moveq	r2, #0
 800f31a:	f002 0201 	andne.w	r2, r2, #1
 800f31e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f322:	428b      	cmp	r3, r1
 800f324:	bf0c      	ite	eq
 800f326:	2200      	moveq	r2, #0
 800f328:	f002 0201 	andne.w	r2, r2, #1
 800f32c:	b11a      	cbz	r2, 800f336 <TIM_SlaveTimer_SetConfig+0x1e2>
 800f32e:	4a14      	ldr	r2, [pc, #80]	; (800f380 <TIM_SlaveTimer_SetConfig+0x22c>)
 800f330:	4293      	cmp	r3, r2
 800f332:	f040 8126 	bne.w	800f582 <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f336:	6923      	ldr	r3, [r4, #16]
 800f338:	2b0f      	cmp	r3, #15
 800f33a:	f200 80ea 	bhi.w	800f512 <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	2b05      	cmp	r3, #5
 800f342:	f43f af73 	beq.w	800f22c <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 800f346:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f348:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f34a:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800f34c:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f34e:	6a19      	ldr	r1, [r3, #32]
 800f350:	f021 0101 	bic.w	r1, r1, #1
 800f354:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f356:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f358:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f35c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800f360:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f362:	621c      	str	r4, [r3, #32]
}
 800f364:	bd70      	pop	{r4, r5, r6, pc}
 800f366:	bf00      	nop
 800f368:	fffefff8 	.word	0xfffefff8
 800f36c:	40010000 	.word	0x40010000
 800f370:	40000400 	.word	0x40000400
 800f374:	40001800 	.word	0x40001800
 800f378:	40000800 	.word	0x40000800
 800f37c:	40000c00 	.word	0x40000c00
 800f380:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f384:	4a85      	ldr	r2, [pc, #532]	; (800f59c <TIM_SlaveTimer_SetConfig+0x448>)
 800f386:	4986      	ldr	r1, [pc, #536]	; (800f5a0 <TIM_SlaveTimer_SetConfig+0x44c>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	bf18      	it	ne
 800f38c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f390:	bf14      	ite	ne
 800f392:	2201      	movne	r2, #1
 800f394:	2200      	moveq	r2, #0
 800f396:	428b      	cmp	r3, r1
 800f398:	bf0c      	ite	eq
 800f39a:	2200      	moveq	r2, #0
 800f39c:	f002 0201 	andne.w	r2, r2, #1
 800f3a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3a4:	428b      	cmp	r3, r1
 800f3a6:	bf0c      	ite	eq
 800f3a8:	2200      	moveq	r2, #0
 800f3aa:	f002 0201 	andne.w	r2, r2, #1
 800f3ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3b2:	428b      	cmp	r3, r1
 800f3b4:	bf0c      	ite	eq
 800f3b6:	2200      	moveq	r2, #0
 800f3b8:	f002 0201 	andne.w	r2, r2, #1
 800f3bc:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f3c0:	428b      	cmp	r3, r1
 800f3c2:	bf0c      	ite	eq
 800f3c4:	2200      	moveq	r2, #0
 800f3c6:	f002 0201 	andne.w	r2, r2, #1
 800f3ca:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f3ce:	428b      	cmp	r3, r1
 800f3d0:	bf0c      	ite	eq
 800f3d2:	2200      	moveq	r2, #0
 800f3d4:	f002 0201 	andne.w	r2, r2, #1
 800f3d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3dc:	428b      	cmp	r3, r1
 800f3de:	bf0c      	ite	eq
 800f3e0:	2200      	moveq	r2, #0
 800f3e2:	f002 0201 	andne.w	r2, r2, #1
 800f3e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3ea:	428b      	cmp	r3, r1
 800f3ec:	bf0c      	ite	eq
 800f3ee:	2200      	moveq	r2, #0
 800f3f0:	f002 0201 	andne.w	r2, r2, #1
 800f3f4:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800f3f8:	428b      	cmp	r3, r1
 800f3fa:	bf0c      	ite	eq
 800f3fc:	2200      	moveq	r2, #0
 800f3fe:	f002 0201 	andne.w	r2, r2, #1
 800f402:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f406:	428b      	cmp	r3, r1
 800f408:	bf0c      	ite	eq
 800f40a:	2200      	moveq	r2, #0
 800f40c:	f002 0201 	andne.w	r2, r2, #1
 800f410:	b11a      	cbz	r2, 800f41a <TIM_SlaveTimer_SetConfig+0x2c6>
 800f412:	4a64      	ldr	r2, [pc, #400]	; (800f5a4 <TIM_SlaveTimer_SetConfig+0x450>)
 800f414:	4293      	cmp	r3, r2
 800f416:	f040 80ba 	bne.w	800f58e <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f41a:	68a3      	ldr	r3, [r4, #8]
 800f41c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f420:	bf18      	it	ne
 800f422:	2b0a      	cmpne	r3, #10
 800f424:	d003      	beq.n	800f42e <TIM_SlaveTimer_SetConfig+0x2da>
 800f426:	f033 0302 	bics.w	r3, r3, #2
 800f42a:	f040 808b 	bne.w	800f544 <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f42e:	6926      	ldr	r6, [r4, #16]
 800f430:	2e0f      	cmp	r6, #15
 800f432:	d874      	bhi.n	800f51e <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f434:	682b      	ldr	r3, [r5, #0]
 800f436:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800f438:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f43a:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f43c:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f440:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800f444:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f446:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f448:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f44a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f44c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f450:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f456:	6219      	str	r1, [r3, #32]
}
 800f458:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f45a:	4a50      	ldr	r2, [pc, #320]	; (800f59c <TIM_SlaveTimer_SetConfig+0x448>)
 800f45c:	4950      	ldr	r1, [pc, #320]	; (800f5a0 <TIM_SlaveTimer_SetConfig+0x44c>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	bf18      	it	ne
 800f462:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f466:	bf14      	ite	ne
 800f468:	2201      	movne	r2, #1
 800f46a:	2200      	moveq	r2, #0
 800f46c:	428b      	cmp	r3, r1
 800f46e:	bf0c      	ite	eq
 800f470:	2200      	moveq	r2, #0
 800f472:	f002 0201 	andne.w	r2, r2, #1
 800f476:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f47a:	428b      	cmp	r3, r1
 800f47c:	bf0c      	ite	eq
 800f47e:	2200      	moveq	r2, #0
 800f480:	f002 0201 	andne.w	r2, r2, #1
 800f484:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f488:	428b      	cmp	r3, r1
 800f48a:	bf0c      	ite	eq
 800f48c:	2200      	moveq	r2, #0
 800f48e:	f002 0201 	andne.w	r2, r2, #1
 800f492:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f496:	428b      	cmp	r3, r1
 800f498:	bf0c      	ite	eq
 800f49a:	2200      	moveq	r2, #0
 800f49c:	f002 0201 	andne.w	r2, r2, #1
 800f4a0:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f4a4:	428b      	cmp	r3, r1
 800f4a6:	bf0c      	ite	eq
 800f4a8:	2200      	moveq	r2, #0
 800f4aa:	f002 0201 	andne.w	r2, r2, #1
 800f4ae:	b112      	cbz	r2, 800f4b6 <TIM_SlaveTimer_SetConfig+0x362>
 800f4b0:	4a3d      	ldr	r2, [pc, #244]	; (800f5a8 <TIM_SlaveTimer_SetConfig+0x454>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d15f      	bne.n	800f576 <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f4b6:	68a3      	ldr	r3, [r4, #8]
 800f4b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4bc:	bf18      	it	ne
 800f4be:	2b0a      	cmpne	r3, #10
 800f4c0:	d002      	beq.n	800f4c8 <TIM_SlaveTimer_SetConfig+0x374>
 800f4c2:	f033 0302 	bics.w	r3, r3, #2
 800f4c6:	d137      	bne.n	800f538 <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f4c8:	6926      	ldr	r6, [r4, #16]
 800f4ca:	2e0f      	cmp	r6, #15
 800f4cc:	d81a      	bhi.n	800f504 <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4ce:	682b      	ldr	r3, [r5, #0]
 800f4d0:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4d2:	6a18      	ldr	r0, [r3, #32]
 800f4d4:	f020 0010 	bic.w	r0, r0, #16
 800f4d8:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f4da:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800f4dc:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800f4de:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f4e0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f4e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f4e8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800f4ec:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800f4f0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4f2:	621a      	str	r2, [r3, #32]
}
 800f4f4:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f4f6:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 800f4fa:	482c      	ldr	r0, [pc, #176]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f4fc:	f7f5 fd5a 	bl	8004fb4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800f500:	6921      	ldr	r1, [r4, #16]
 800f502:	e683      	b.n	800f20c <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f504:	f641 511f 	movw	r1, #7455	; 0x1d1f
 800f508:	4828      	ldr	r0, [pc, #160]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f50a:	f7f5 fd53 	bl	8004fb4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f50e:	6926      	ldr	r6, [r4, #16]
 800f510:	e7dd      	b.n	800f4ce <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f512:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 800f516:	4825      	ldr	r0, [pc, #148]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f518:	f7f5 fd4c 	bl	8004fb4 <assert_failed>
 800f51c:	e70f      	b.n	800f33e <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f51e:	f641 5111 	movw	r1, #7441	; 0x1d11
 800f522:	4822      	ldr	r0, [pc, #136]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f524:	f7f5 fd46 	bl	8004fb4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f528:	6926      	ldr	r6, [r4, #16]
 800f52a:	e783      	b.n	800f434 <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800f52c:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 800f530:	481e      	ldr	r0, [pc, #120]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f532:	f7f5 fd3f 	bl	8004fb4 <assert_failed>
 800f536:	e65b      	b.n	800f1f0 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f538:	f641 511e 	movw	r1, #7454	; 0x1d1e
 800f53c:	481b      	ldr	r0, [pc, #108]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f53e:	f7f5 fd39 	bl	8004fb4 <assert_failed>
 800f542:	e7c1      	b.n	800f4c8 <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f544:	f641 5110 	movw	r1, #7440	; 0x1d10
 800f548:	4818      	ldr	r0, [pc, #96]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f54a:	f7f5 fd33 	bl	8004fb4 <assert_failed>
 800f54e:	e76e      	b.n	800f42e <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f550:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800f554:	4815      	ldr	r0, [pc, #84]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f556:	f7f5 fd2d 	bl	8004fb4 <assert_failed>
 800f55a:	e653      	b.n	800f204 <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f55c:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 800f560:	4812      	ldr	r0, [pc, #72]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f562:	f7f5 fd27 	bl	8004fb4 <assert_failed>
 800f566:	e63e      	b.n	800f1e6 <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f568:	f641 512e 	movw	r1, #7470	; 0x1d2e
 800f56c:	480f      	ldr	r0, [pc, #60]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f56e:	f7f5 fd21 	bl	8004fb4 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800f572:	2000      	movs	r0, #0
}
 800f574:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f576:	f641 511d 	movw	r1, #7453	; 0x1d1d
 800f57a:	480c      	ldr	r0, [pc, #48]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f57c:	f7f5 fd1a 	bl	8004fb4 <assert_failed>
 800f580:	e799      	b.n	800f4b6 <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f582:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 800f586:	4809      	ldr	r0, [pc, #36]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f588:	f7f5 fd14 	bl	8004fb4 <assert_failed>
 800f58c:	e6d3      	b.n	800f336 <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f58e:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800f592:	4806      	ldr	r0, [pc, #24]	; (800f5ac <TIM_SlaveTimer_SetConfig+0x458>)
 800f594:	f7f5 fd0e 	bl	8004fb4 <assert_failed>
 800f598:	e73f      	b.n	800f41a <TIM_SlaveTimer_SetConfig+0x2c6>
 800f59a:	bf00      	nop
 800f59c:	40010000 	.word	0x40010000
 800f5a0:	40000400 	.word	0x40000400
 800f5a4:	40002000 	.word	0x40002000
 800f5a8:	40001800 	.word	0x40001800
 800f5ac:	0802cc54 	.word	0x0802cc54

0800f5b0 <HAL_TIM_Base_Start>:
{
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f5b4:	4b52      	ldr	r3, [pc, #328]	; (800f700 <HAL_TIM_Base_Start+0x150>)
 800f5b6:	4d53      	ldr	r5, [pc, #332]	; (800f704 <HAL_TIM_Base_Start+0x154>)
 800f5b8:	6822      	ldr	r2, [r4, #0]
 800f5ba:	4953      	ldr	r1, [pc, #332]	; (800f708 <HAL_TIM_Base_Start+0x158>)
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	bf18      	it	ne
 800f5c0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f5c4:	4851      	ldr	r0, [pc, #324]	; (800f70c <HAL_TIM_Base_Start+0x15c>)
 800f5c6:	bf14      	ite	ne
 800f5c8:	2301      	movne	r3, #1
 800f5ca:	2300      	moveq	r3, #0
 800f5cc:	42aa      	cmp	r2, r5
 800f5ce:	bf0c      	ite	eq
 800f5d0:	2300      	moveq	r3, #0
 800f5d2:	f003 0301 	andne.w	r3, r3, #1
 800f5d6:	428a      	cmp	r2, r1
 800f5d8:	bf0c      	ite	eq
 800f5da:	2300      	moveq	r3, #0
 800f5dc:	f003 0301 	andne.w	r3, r3, #1
 800f5e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5e4:	4282      	cmp	r2, r0
 800f5e6:	bf0c      	ite	eq
 800f5e8:	2300      	moveq	r3, #0
 800f5ea:	f003 0301 	andne.w	r3, r3, #1
 800f5ee:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f5f2:	428a      	cmp	r2, r1
 800f5f4:	bf0c      	ite	eq
 800f5f6:	2300      	moveq	r3, #0
 800f5f8:	f003 0301 	andne.w	r3, r3, #1
 800f5fc:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f600:	4282      	cmp	r2, r0
 800f602:	bf0c      	ite	eq
 800f604:	2300      	moveq	r3, #0
 800f606:	f003 0301 	andne.w	r3, r3, #1
 800f60a:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f60e:	428a      	cmp	r2, r1
 800f610:	bf0c      	ite	eq
 800f612:	2300      	moveq	r3, #0
 800f614:	f003 0301 	andne.w	r3, r3, #1
 800f618:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f61c:	4282      	cmp	r2, r0
 800f61e:	bf0c      	ite	eq
 800f620:	2300      	moveq	r3, #0
 800f622:	f003 0301 	andne.w	r3, r3, #1
 800f626:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f62a:	428a      	cmp	r2, r1
 800f62c:	bf0c      	ite	eq
 800f62e:	2300      	moveq	r3, #0
 800f630:	f003 0301 	andne.w	r3, r3, #1
 800f634:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f638:	4282      	cmp	r2, r0
 800f63a:	bf0c      	ite	eq
 800f63c:	2300      	moveq	r3, #0
 800f63e:	f003 0301 	andne.w	r3, r3, #1
 800f642:	428a      	cmp	r2, r1
 800f644:	bf0c      	ite	eq
 800f646:	2300      	moveq	r3, #0
 800f648:	f003 0301 	andne.w	r3, r3, #1
 800f64c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f650:	428a      	cmp	r2, r1
 800f652:	bf0c      	ite	eq
 800f654:	2300      	moveq	r3, #0
 800f656:	f003 0301 	andne.w	r3, r3, #1
 800f65a:	b113      	cbz	r3, 800f662 <HAL_TIM_Base_Start+0xb2>
 800f65c:	4b2c      	ldr	r3, [pc, #176]	; (800f710 <HAL_TIM_Base_Start+0x160>)
 800f65e:	429a      	cmp	r2, r3
 800f660:	d143      	bne.n	800f6ea <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 800f662:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f666:	2b01      	cmp	r3, #1
 800f668:	d13b      	bne.n	800f6e2 <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f66a:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f66c:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f66e:	4b24      	ldr	r3, [pc, #144]	; (800f700 <HAL_TIM_Base_Start+0x150>)
 800f670:	4d24      	ldr	r5, [pc, #144]	; (800f704 <HAL_TIM_Base_Start+0x154>)
 800f672:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f676:	bf18      	it	ne
 800f678:	429a      	cmpne	r2, r3
 800f67a:	4923      	ldr	r1, [pc, #140]	; (800f708 <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f67c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f680:	bf0c      	ite	eq
 800f682:	2301      	moveq	r3, #1
 800f684:	2300      	movne	r3, #0
 800f686:	4c21      	ldr	r4, [pc, #132]	; (800f70c <HAL_TIM_Base_Start+0x15c>)
 800f688:	42aa      	cmp	r2, r5
 800f68a:	bf08      	it	eq
 800f68c:	f043 0301 	orreq.w	r3, r3, #1
 800f690:	4820      	ldr	r0, [pc, #128]	; (800f714 <HAL_TIM_Base_Start+0x164>)
 800f692:	428a      	cmp	r2, r1
 800f694:	bf08      	it	eq
 800f696:	f043 0301 	orreq.w	r3, r3, #1
 800f69a:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800f69e:	42a2      	cmp	r2, r4
 800f6a0:	bf08      	it	eq
 800f6a2:	f043 0301 	orreq.w	r3, r3, #1
 800f6a6:	4282      	cmp	r2, r0
 800f6a8:	bf08      	it	eq
 800f6aa:	f043 0301 	orreq.w	r3, r3, #1
 800f6ae:	428a      	cmp	r2, r1
 800f6b0:	bf08      	it	eq
 800f6b2:	f043 0301 	orreq.w	r3, r3, #1
 800f6b6:	b933      	cbnz	r3, 800f6c6 <HAL_TIM_Base_Start+0x116>
 800f6b8:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800f6bc:	1a10      	subs	r0, r2, r0
 800f6be:	fab0 f080 	clz	r0, r0
 800f6c2:	0940      	lsrs	r0, r0, #5
 800f6c4:	b1b8      	cbz	r0, 800f6f6 <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f6c6:	6891      	ldr	r1, [r2, #8]
 800f6c8:	4b13      	ldr	r3, [pc, #76]	; (800f718 <HAL_TIM_Base_Start+0x168>)
 800f6ca:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6cc:	2b06      	cmp	r3, #6
 800f6ce:	d00a      	beq.n	800f6e6 <HAL_TIM_Base_Start+0x136>
 800f6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6d4:	d007      	beq.n	800f6e6 <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 800f6d6:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800f6d8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800f6da:	f043 0301 	orr.w	r3, r3, #1
 800f6de:	6013      	str	r3, [r2, #0]
}
 800f6e0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f6e2:	2001      	movs	r0, #1
}
 800f6e4:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800f6e6:	2000      	movs	r0, #0
}
 800f6e8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f6ea:	f240 1197 	movw	r1, #407	; 0x197
 800f6ee:	480b      	ldr	r0, [pc, #44]	; (800f71c <HAL_TIM_Base_Start+0x16c>)
 800f6f0:	f7f5 fc60 	bl	8004fb4 <assert_failed>
 800f6f4:	e7b5      	b.n	800f662 <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 800f6f6:	6813      	ldr	r3, [r2, #0]
 800f6f8:	f043 0301 	orr.w	r3, r3, #1
 800f6fc:	6013      	str	r3, [r2, #0]
}
 800f6fe:	bd38      	pop	{r3, r4, r5, pc}
 800f700:	40010000 	.word	0x40010000
 800f704:	40000400 	.word	0x40000400
 800f708:	40000800 	.word	0x40000800
 800f70c:	40000c00 	.word	0x40000c00
 800f710:	40002000 	.word	0x40002000
 800f714:	40010400 	.word	0x40010400
 800f718:	00010007 	.word	0x00010007
 800f71c:	0802cc54 	.word	0x0802cc54

0800f720 <HAL_TIM_Base_Start_IT>:
{
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f724:	4b54      	ldr	r3, [pc, #336]	; (800f878 <HAL_TIM_Base_Start_IT+0x158>)
 800f726:	4d55      	ldr	r5, [pc, #340]	; (800f87c <HAL_TIM_Base_Start_IT+0x15c>)
 800f728:	6822      	ldr	r2, [r4, #0]
 800f72a:	4955      	ldr	r1, [pc, #340]	; (800f880 <HAL_TIM_Base_Start_IT+0x160>)
 800f72c:	429a      	cmp	r2, r3
 800f72e:	bf18      	it	ne
 800f730:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f734:	4853      	ldr	r0, [pc, #332]	; (800f884 <HAL_TIM_Base_Start_IT+0x164>)
 800f736:	bf14      	ite	ne
 800f738:	2301      	movne	r3, #1
 800f73a:	2300      	moveq	r3, #0
 800f73c:	42aa      	cmp	r2, r5
 800f73e:	bf0c      	ite	eq
 800f740:	2300      	moveq	r3, #0
 800f742:	f003 0301 	andne.w	r3, r3, #1
 800f746:	428a      	cmp	r2, r1
 800f748:	bf0c      	ite	eq
 800f74a:	2300      	moveq	r3, #0
 800f74c:	f003 0301 	andne.w	r3, r3, #1
 800f750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f754:	4282      	cmp	r2, r0
 800f756:	bf0c      	ite	eq
 800f758:	2300      	moveq	r3, #0
 800f75a:	f003 0301 	andne.w	r3, r3, #1
 800f75e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f762:	428a      	cmp	r2, r1
 800f764:	bf0c      	ite	eq
 800f766:	2300      	moveq	r3, #0
 800f768:	f003 0301 	andne.w	r3, r3, #1
 800f76c:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f770:	4282      	cmp	r2, r0
 800f772:	bf0c      	ite	eq
 800f774:	2300      	moveq	r3, #0
 800f776:	f003 0301 	andne.w	r3, r3, #1
 800f77a:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f77e:	428a      	cmp	r2, r1
 800f780:	bf0c      	ite	eq
 800f782:	2300      	moveq	r3, #0
 800f784:	f003 0301 	andne.w	r3, r3, #1
 800f788:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f78c:	4282      	cmp	r2, r0
 800f78e:	bf0c      	ite	eq
 800f790:	2300      	moveq	r3, #0
 800f792:	f003 0301 	andne.w	r3, r3, #1
 800f796:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f79a:	428a      	cmp	r2, r1
 800f79c:	bf0c      	ite	eq
 800f79e:	2300      	moveq	r3, #0
 800f7a0:	f003 0301 	andne.w	r3, r3, #1
 800f7a4:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f7a8:	4282      	cmp	r2, r0
 800f7aa:	bf0c      	ite	eq
 800f7ac:	2300      	moveq	r3, #0
 800f7ae:	f003 0301 	andne.w	r3, r3, #1
 800f7b2:	428a      	cmp	r2, r1
 800f7b4:	bf0c      	ite	eq
 800f7b6:	2300      	moveq	r3, #0
 800f7b8:	f003 0301 	andne.w	r3, r3, #1
 800f7bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f7c0:	428a      	cmp	r2, r1
 800f7c2:	bf0c      	ite	eq
 800f7c4:	2300      	moveq	r3, #0
 800f7c6:	f003 0301 	andne.w	r3, r3, #1
 800f7ca:	b113      	cbz	r3, 800f7d2 <HAL_TIM_Base_Start_IT+0xb2>
 800f7cc:	4b2e      	ldr	r3, [pc, #184]	; (800f888 <HAL_TIM_Base_Start_IT+0x168>)
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d147      	bne.n	800f862 <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 800f7d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d13f      	bne.n	800f85a <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7da:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f7dc:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7de:	4b26      	ldr	r3, [pc, #152]	; (800f878 <HAL_TIM_Base_Start_IT+0x158>)
 800f7e0:	4d26      	ldr	r5, [pc, #152]	; (800f87c <HAL_TIM_Base_Start_IT+0x15c>)
 800f7e2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f7e6:	bf18      	it	ne
 800f7e8:	429a      	cmpne	r2, r3
 800f7ea:	4825      	ldr	r0, [pc, #148]	; (800f880 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f7ec:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7f0:	bf0c      	ite	eq
 800f7f2:	2301      	moveq	r3, #1
 800f7f4:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7f6:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7f8:	42aa      	cmp	r2, r5
 800f7fa:	bf08      	it	eq
 800f7fc:	f043 0301 	orreq.w	r3, r3, #1
 800f800:	4c20      	ldr	r4, [pc, #128]	; (800f884 <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f802:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f806:	4282      	cmp	r2, r0
 800f808:	bf08      	it	eq
 800f80a:	f043 0301 	orreq.w	r3, r3, #1
 800f80e:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f812:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f814:	42a2      	cmp	r2, r4
 800f816:	bf08      	it	eq
 800f818:	f043 0301 	orreq.w	r3, r3, #1
 800f81c:	491b      	ldr	r1, [pc, #108]	; (800f88c <HAL_TIM_Base_Start_IT+0x16c>)
 800f81e:	4282      	cmp	r2, r0
 800f820:	bf08      	it	eq
 800f822:	f043 0301 	orreq.w	r3, r3, #1
 800f826:	428a      	cmp	r2, r1
 800f828:	bf08      	it	eq
 800f82a:	f043 0301 	orreq.w	r3, r3, #1
 800f82e:	b933      	cbnz	r3, 800f83e <HAL_TIM_Base_Start_IT+0x11e>
 800f830:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800f834:	1a10      	subs	r0, r2, r0
 800f836:	fab0 f080 	clz	r0, r0
 800f83a:	0940      	lsrs	r0, r0, #5
 800f83c:	b1b8      	cbz	r0, 800f86e <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f83e:	6891      	ldr	r1, [r2, #8]
 800f840:	4b13      	ldr	r3, [pc, #76]	; (800f890 <HAL_TIM_Base_Start_IT+0x170>)
 800f842:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f844:	2b06      	cmp	r3, #6
 800f846:	d00a      	beq.n	800f85e <HAL_TIM_Base_Start_IT+0x13e>
 800f848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f84c:	d007      	beq.n	800f85e <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 800f84e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800f850:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800f852:	f043 0301 	orr.w	r3, r3, #1
 800f856:	6013      	str	r3, [r2, #0]
}
 800f858:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f85a:	2001      	movs	r0, #1
}
 800f85c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800f85e:	2000      	movs	r0, #0
}
 800f860:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f862:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800f866:	480b      	ldr	r0, [pc, #44]	; (800f894 <HAL_TIM_Base_Start_IT+0x174>)
 800f868:	f7f5 fba4 	bl	8004fb4 <assert_failed>
 800f86c:	e7b1      	b.n	800f7d2 <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 800f86e:	6813      	ldr	r3, [r2, #0]
 800f870:	f043 0301 	orr.w	r3, r3, #1
 800f874:	6013      	str	r3, [r2, #0]
}
 800f876:	bd38      	pop	{r3, r4, r5, pc}
 800f878:	40010000 	.word	0x40010000
 800f87c:	40000400 	.word	0x40000400
 800f880:	40000800 	.word	0x40000800
 800f884:	40000c00 	.word	0x40000c00
 800f888:	40002000 	.word	0x40002000
 800f88c:	40014000 	.word	0x40014000
 800f890:	00010007 	.word	0x00010007
 800f894:	0802cc54 	.word	0x0802cc54

0800f898 <HAL_TIM_OC_MspInit>:
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop

0800f89c <HAL_TIM_PWM_MspInit>:
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop

0800f8a0 <HAL_TIM_IC_MspInit>:
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop

0800f8a4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800f8a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	f000 8151 	beq.w	800fb50 <HAL_TIM_ConfigClockSource+0x2ac>
 800f8ae:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800f8b0:	2302      	movs	r3, #2
{
 800f8b2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800f8b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f8b8:	460d      	mov	r5, r1
 800f8ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800f8be:	4604      	mov	r4, r0
 800f8c0:	680b      	ldr	r3, [r1, #0]
 800f8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8c6:	bf18      	it	ne
 800f8c8:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800f8cc:	bf14      	ite	ne
 800f8ce:	2201      	movne	r2, #1
 800f8d0:	2200      	moveq	r2, #0
 800f8d2:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800f8d6:	f002 0201 	and.w	r2, r2, #1
 800f8da:	bf08      	it	eq
 800f8dc:	2200      	moveq	r2, #0
 800f8de:	b112      	cbz	r2, 800f8e6 <HAL_TIM_ConfigClockSource+0x42>
 800f8e0:	2940      	cmp	r1, #64	; 0x40
 800f8e2:	f040 8267 	bne.w	800fdb4 <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 800f8e6:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800f8e8:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8ea:	499a      	ldr	r1, [pc, #616]	; (800fb54 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 800f8ec:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8ee:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800f8f2:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800f8f4:	f000 8138 	beq.w	800fb68 <HAL_TIM_ConfigClockSource+0x2c4>
 800f8f8:	d84f      	bhi.n	800f99a <HAL_TIM_ConfigClockSource+0xf6>
 800f8fa:	2b40      	cmp	r3, #64	; 0x40
 800f8fc:	f000 81d7 	beq.w	800fcae <HAL_TIM_ConfigClockSource+0x40a>
 800f900:	f240 80a2 	bls.w	800fa48 <HAL_TIM_ConfigClockSource+0x1a4>
 800f904:	2b50      	cmp	r3, #80	; 0x50
 800f906:	f040 8097 	bne.w	800fa38 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f90a:	4b93      	ldr	r3, [pc, #588]	; (800fb58 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f90c:	4993      	ldr	r1, [pc, #588]	; (800fb5c <HAL_TIM_ConfigClockSource+0x2b8>)
 800f90e:	429a      	cmp	r2, r3
 800f910:	bf18      	it	ne
 800f912:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f916:	bf14      	ite	ne
 800f918:	2301      	movne	r3, #1
 800f91a:	2300      	moveq	r3, #0
 800f91c:	428a      	cmp	r2, r1
 800f91e:	bf0c      	ite	eq
 800f920:	2300      	moveq	r3, #0
 800f922:	f003 0301 	andne.w	r3, r3, #1
 800f926:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f92a:	428a      	cmp	r2, r1
 800f92c:	bf0c      	ite	eq
 800f92e:	2300      	moveq	r3, #0
 800f930:	f003 0301 	andne.w	r3, r3, #1
 800f934:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f938:	428a      	cmp	r2, r1
 800f93a:	bf0c      	ite	eq
 800f93c:	2300      	moveq	r3, #0
 800f93e:	f003 0301 	andne.w	r3, r3, #1
 800f942:	b11b      	cbz	r3, 800f94c <HAL_TIM_ConfigClockSource+0xa8>
 800f944:	4b86      	ldr	r3, [pc, #536]	; (800fb60 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f946:	429a      	cmp	r2, r3
 800f948:	f040 8222 	bne.w	800fd90 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f94c:	686b      	ldr	r3, [r5, #4]
 800f94e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f952:	bf18      	it	ne
 800f954:	2b0a      	cmpne	r3, #10
 800f956:	d003      	beq.n	800f960 <HAL_TIM_ConfigClockSource+0xbc>
 800f958:	f033 0302 	bics.w	r3, r3, #2
 800f95c:	f040 81fe 	bne.w	800fd5c <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f960:	68ee      	ldr	r6, [r5, #12]
 800f962:	2e0f      	cmp	r6, #15
 800f964:	f200 8242 	bhi.w	800fdec <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f968:	6823      	ldr	r3, [r4, #0]
 800f96a:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800f96c:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f96e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f970:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f974:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800f978:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f97a:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f97c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f97e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f980:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f984:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f98a:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f98c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f98e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f992:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800f996:	609a      	str	r2, [r3, #8]
}
 800f998:	e04f      	b.n	800fa3a <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f99a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f99e:	f000 812c 	beq.w	800fbfa <HAL_TIM_ConfigClockSource+0x356>
 800f9a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9a6:	d17e      	bne.n	800faa6 <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f9a8:	4b6b      	ldr	r3, [pc, #428]	; (800fb58 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f9aa:	496c      	ldr	r1, [pc, #432]	; (800fb5c <HAL_TIM_ConfigClockSource+0x2b8>)
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	bf18      	it	ne
 800f9b0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f9b4:	bf14      	ite	ne
 800f9b6:	2301      	movne	r3, #1
 800f9b8:	2300      	moveq	r3, #0
 800f9ba:	428a      	cmp	r2, r1
 800f9bc:	bf0c      	ite	eq
 800f9be:	2300      	moveq	r3, #0
 800f9c0:	f003 0301 	andne.w	r3, r3, #1
 800f9c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f9c8:	428a      	cmp	r2, r1
 800f9ca:	bf0c      	ite	eq
 800f9cc:	2300      	moveq	r3, #0
 800f9ce:	f003 0301 	andne.w	r3, r3, #1
 800f9d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f9d6:	428a      	cmp	r2, r1
 800f9d8:	bf0c      	ite	eq
 800f9da:	2300      	moveq	r3, #0
 800f9dc:	f003 0301 	andne.w	r3, r3, #1
 800f9e0:	b11b      	cbz	r3, 800f9ea <HAL_TIM_ConfigClockSource+0x146>
 800f9e2:	4b5f      	ldr	r3, [pc, #380]	; (800fb60 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	f040 81c5 	bne.w	800fd74 <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f9ea:	68ab      	ldr	r3, [r5, #8]
 800f9ec:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f9f0:	f040 8210 	bne.w	800fe14 <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f9f4:	686b      	ldr	r3, [r5, #4]
 800f9f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9fa:	bf18      	it	ne
 800f9fc:	2b0a      	cmpne	r3, #10
 800f9fe:	d003      	beq.n	800fa08 <HAL_TIM_ConfigClockSource+0x164>
 800fa00:	f033 0302 	bics.w	r3, r3, #2
 800fa04:	f040 81a4 	bne.w	800fd50 <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fa08:	68ee      	ldr	r6, [r5, #12]
 800fa0a:	2e0f      	cmp	r6, #15
 800fa0c:	f200 81d9 	bhi.w	800fdc2 <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 800fa10:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800fa12:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800fa16:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fa18:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800fa1a:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa1c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800fa20:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fa22:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800fa26:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fa28:	6893      	ldr	r3, [r2, #8]
 800fa2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fa2e:	6093      	str	r3, [r2, #8]
      break;
 800fa30:	e003      	b.n	800fa3a <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800fa32:	f033 0110 	bics.w	r1, r3, #16
 800fa36:	d00c      	beq.n	800fa52 <HAL_TIM_ConfigClockSource+0x1ae>
 800fa38:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800fa3a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800fa3c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800fa3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800fa42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800fa46:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800fa48:	2b20      	cmp	r3, #32
 800fa4a:	d002      	beq.n	800fa52 <HAL_TIM_ConfigClockSource+0x1ae>
 800fa4c:	d9f1      	bls.n	800fa32 <HAL_TIM_ConfigClockSource+0x18e>
 800fa4e:	2b30      	cmp	r3, #48	; 0x30
 800fa50:	d1f2      	bne.n	800fa38 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800fa52:	4941      	ldr	r1, [pc, #260]	; (800fb58 <HAL_TIM_ConfigClockSource+0x2b4>)
 800fa54:	4841      	ldr	r0, [pc, #260]	; (800fb5c <HAL_TIM_ConfigClockSource+0x2b8>)
 800fa56:	428a      	cmp	r2, r1
 800fa58:	bf18      	it	ne
 800fa5a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fa5e:	bf14      	ite	ne
 800fa60:	2101      	movne	r1, #1
 800fa62:	2100      	moveq	r1, #0
 800fa64:	4282      	cmp	r2, r0
 800fa66:	bf0c      	ite	eq
 800fa68:	2100      	moveq	r1, #0
 800fa6a:	f001 0101 	andne.w	r1, r1, #1
 800fa6e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800fa72:	4282      	cmp	r2, r0
 800fa74:	bf0c      	ite	eq
 800fa76:	2100      	moveq	r1, #0
 800fa78:	f001 0101 	andne.w	r1, r1, #1
 800fa7c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800fa80:	4282      	cmp	r2, r0
 800fa82:	bf0c      	ite	eq
 800fa84:	2100      	moveq	r1, #0
 800fa86:	f001 0101 	andne.w	r1, r1, #1
 800fa8a:	b119      	cbz	r1, 800fa94 <HAL_TIM_ConfigClockSource+0x1f0>
 800fa8c:	4934      	ldr	r1, [pc, #208]	; (800fb60 <HAL_TIM_ConfigClockSource+0x2bc>)
 800fa8e:	428a      	cmp	r2, r1
 800fa90:	f040 8176 	bne.w	800fd80 <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 800fa94:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800fa96:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800fa98:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fa9c:	430b      	orrs	r3, r1
 800fa9e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800faa2:	6093      	str	r3, [r2, #8]
}
 800faa4:	e7c9      	b.n	800fa3a <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800faa6:	2b70      	cmp	r3, #112	; 0x70
 800faa8:	d1c6      	bne.n	800fa38 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800faaa:	4b2b      	ldr	r3, [pc, #172]	; (800fb58 <HAL_TIM_ConfigClockSource+0x2b4>)
 800faac:	492b      	ldr	r1, [pc, #172]	; (800fb5c <HAL_TIM_ConfigClockSource+0x2b8>)
 800faae:	429a      	cmp	r2, r3
 800fab0:	bf18      	it	ne
 800fab2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fab6:	bf14      	ite	ne
 800fab8:	2301      	movne	r3, #1
 800faba:	2300      	moveq	r3, #0
 800fabc:	428a      	cmp	r2, r1
 800fabe:	bf0c      	ite	eq
 800fac0:	2300      	moveq	r3, #0
 800fac2:	f003 0301 	andne.w	r3, r3, #1
 800fac6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800faca:	428a      	cmp	r2, r1
 800facc:	bf0c      	ite	eq
 800face:	2300      	moveq	r3, #0
 800fad0:	f003 0301 	andne.w	r3, r3, #1
 800fad4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fad8:	428a      	cmp	r2, r1
 800fada:	bf0c      	ite	eq
 800fadc:	2300      	moveq	r3, #0
 800fade:	f003 0301 	andne.w	r3, r3, #1
 800fae2:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800fae6:	428a      	cmp	r2, r1
 800fae8:	bf0c      	ite	eq
 800faea:	2300      	moveq	r3, #0
 800faec:	f003 0301 	andne.w	r3, r3, #1
 800faf0:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800faf4:	428a      	cmp	r2, r1
 800faf6:	bf0c      	ite	eq
 800faf8:	2300      	moveq	r3, #0
 800fafa:	f003 0301 	andne.w	r3, r3, #1
 800fafe:	b11b      	cbz	r3, 800fb08 <HAL_TIM_ConfigClockSource+0x264>
 800fb00:	4b18      	ldr	r3, [pc, #96]	; (800fb64 <HAL_TIM_ConfigClockSource+0x2c0>)
 800fb02:	429a      	cmp	r2, r3
 800fb04:	f040 818c 	bne.w	800fe20 <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fb08:	68ab      	ldr	r3, [r5, #8]
 800fb0a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800fb0e:	f040 817b 	bne.w	800fe08 <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fb12:	686b      	ldr	r3, [r5, #4]
 800fb14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb18:	bf18      	it	ne
 800fb1a:	2b0a      	cmpne	r3, #10
 800fb1c:	d003      	beq.n	800fb26 <HAL_TIM_ConfigClockSource+0x282>
 800fb1e:	f033 0302 	bics.w	r3, r3, #2
 800fb22:	f040 8121 	bne.w	800fd68 <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fb26:	68ee      	ldr	r6, [r5, #12]
 800fb28:	2e0f      	cmp	r6, #15
 800fb2a:	f200 8166 	bhi.w	800fdfa <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 800fb2e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800fb30:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800fb34:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb36:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800fb38:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb3a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800fb3e:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb40:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800fb44:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800fb46:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fb48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800fb4c:	6093      	str	r3, [r2, #8]
      break;
 800fb4e:	e774      	b.n	800fa3a <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 800fb50:	2002      	movs	r0, #2
}
 800fb52:	4770      	bx	lr
 800fb54:	fffe0088 	.word	0xfffe0088
 800fb58:	40010000 	.word	0x40010000
 800fb5c:	40000400 	.word	0x40000400
 800fb60:	40010400 	.word	0x40010400
 800fb64:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fb68:	4bb0      	ldr	r3, [pc, #704]	; (800fe2c <HAL_TIM_ConfigClockSource+0x588>)
 800fb6a:	49b1      	ldr	r1, [pc, #708]	; (800fe30 <HAL_TIM_ConfigClockSource+0x58c>)
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	bf18      	it	ne
 800fb70:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fb74:	bf14      	ite	ne
 800fb76:	2301      	movne	r3, #1
 800fb78:	2300      	moveq	r3, #0
 800fb7a:	428a      	cmp	r2, r1
 800fb7c:	bf0c      	ite	eq
 800fb7e:	2300      	moveq	r3, #0
 800fb80:	f003 0301 	andne.w	r3, r3, #1
 800fb84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fb88:	428a      	cmp	r2, r1
 800fb8a:	bf0c      	ite	eq
 800fb8c:	2300      	moveq	r3, #0
 800fb8e:	f003 0301 	andne.w	r3, r3, #1
 800fb92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fb96:	428a      	cmp	r2, r1
 800fb98:	bf0c      	ite	eq
 800fb9a:	2300      	moveq	r3, #0
 800fb9c:	f003 0301 	andne.w	r3, r3, #1
 800fba0:	b11b      	cbz	r3, 800fbaa <HAL_TIM_ConfigClockSource+0x306>
 800fba2:	4ba4      	ldr	r3, [pc, #656]	; (800fe34 <HAL_TIM_ConfigClockSource+0x590>)
 800fba4:	429a      	cmp	r2, r3
 800fba6:	f040 80ff 	bne.w	800fda8 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fbaa:	686b      	ldr	r3, [r5, #4]
 800fbac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbb0:	bf18      	it	ne
 800fbb2:	2b0a      	cmpne	r3, #10
 800fbb4:	d003      	beq.n	800fbbe <HAL_TIM_ConfigClockSource+0x31a>
 800fbb6:	f033 0302 	bics.w	r3, r3, #2
 800fbba:	f040 80c3 	bne.w	800fd44 <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fbbe:	68ee      	ldr	r6, [r5, #12]
 800fbc0:	2e0f      	cmp	r6, #15
 800fbc2:	f200 810c 	bhi.w	800fdde <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fbc6:	6823      	ldr	r3, [r4, #0]
 800fbc8:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fbca:	6a18      	ldr	r0, [r3, #32]
 800fbcc:	f020 0010 	bic.w	r0, r0, #16
 800fbd0:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800fbd2:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800fbd4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800fbd6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fbd8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fbdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fbe0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800fbe4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800fbe8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbea:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800fbec:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800fbee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fbf2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800fbf6:	609a      	str	r2, [r3, #8]
}
 800fbf8:	e71f      	b.n	800fa3a <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fbfa:	4b8c      	ldr	r3, [pc, #560]	; (800fe2c <HAL_TIM_ConfigClockSource+0x588>)
 800fbfc:	488c      	ldr	r0, [pc, #560]	; (800fe30 <HAL_TIM_ConfigClockSource+0x58c>)
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	bf18      	it	ne
 800fc02:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fc06:	498c      	ldr	r1, [pc, #560]	; (800fe38 <HAL_TIM_ConfigClockSource+0x594>)
 800fc08:	bf14      	ite	ne
 800fc0a:	2301      	movne	r3, #1
 800fc0c:	2300      	moveq	r3, #0
 800fc0e:	4282      	cmp	r2, r0
 800fc10:	bf0c      	ite	eq
 800fc12:	2300      	moveq	r3, #0
 800fc14:	f003 0301 	andne.w	r3, r3, #1
 800fc18:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fc1c:	428a      	cmp	r2, r1
 800fc1e:	bf0c      	ite	eq
 800fc20:	2300      	moveq	r3, #0
 800fc22:	f003 0301 	andne.w	r3, r3, #1
 800fc26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc2a:	4282      	cmp	r2, r0
 800fc2c:	bf0c      	ite	eq
 800fc2e:	2300      	moveq	r3, #0
 800fc30:	f003 0301 	andne.w	r3, r3, #1
 800fc34:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fc38:	428a      	cmp	r2, r1
 800fc3a:	bf0c      	ite	eq
 800fc3c:	2300      	moveq	r3, #0
 800fc3e:	f003 0301 	andne.w	r3, r3, #1
 800fc42:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800fc46:	4282      	cmp	r2, r0
 800fc48:	bf0c      	ite	eq
 800fc4a:	2300      	moveq	r3, #0
 800fc4c:	f003 0301 	andne.w	r3, r3, #1
 800fc50:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800fc54:	428a      	cmp	r2, r1
 800fc56:	bf0c      	ite	eq
 800fc58:	2300      	moveq	r3, #0
 800fc5a:	f003 0301 	andne.w	r3, r3, #1
 800fc5e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800fc62:	4282      	cmp	r2, r0
 800fc64:	bf0c      	ite	eq
 800fc66:	2300      	moveq	r3, #0
 800fc68:	f003 0301 	andne.w	r3, r3, #1
 800fc6c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fc70:	428a      	cmp	r2, r1
 800fc72:	bf0c      	ite	eq
 800fc74:	2300      	moveq	r3, #0
 800fc76:	f003 0301 	andne.w	r3, r3, #1
 800fc7a:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800fc7e:	4282      	cmp	r2, r0
 800fc80:	bf0c      	ite	eq
 800fc82:	2300      	moveq	r3, #0
 800fc84:	f003 0301 	andne.w	r3, r3, #1
 800fc88:	428a      	cmp	r2, r1
 800fc8a:	bf0c      	ite	eq
 800fc8c:	2300      	moveq	r3, #0
 800fc8e:	f003 0301 	andne.w	r3, r3, #1
 800fc92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fc96:	428a      	cmp	r2, r1
 800fc98:	bf0c      	ite	eq
 800fc9a:	2300      	moveq	r3, #0
 800fc9c:	f003 0301 	andne.w	r3, r3, #1
 800fca0:	b11b      	cbz	r3, 800fcaa <HAL_TIM_ConfigClockSource+0x406>
 800fca2:	4b66      	ldr	r3, [pc, #408]	; (800fe3c <HAL_TIM_ConfigClockSource+0x598>)
 800fca4:	429a      	cmp	r2, r3
 800fca6:	f040 80cd 	bne.w	800fe44 <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 800fcaa:	2000      	movs	r0, #0
 800fcac:	e6c5      	b.n	800fa3a <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fcae:	4b5f      	ldr	r3, [pc, #380]	; (800fe2c <HAL_TIM_ConfigClockSource+0x588>)
 800fcb0:	495f      	ldr	r1, [pc, #380]	; (800fe30 <HAL_TIM_ConfigClockSource+0x58c>)
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	bf18      	it	ne
 800fcb6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fcba:	bf14      	ite	ne
 800fcbc:	2301      	movne	r3, #1
 800fcbe:	2300      	moveq	r3, #0
 800fcc0:	428a      	cmp	r2, r1
 800fcc2:	bf0c      	ite	eq
 800fcc4:	2300      	moveq	r3, #0
 800fcc6:	f003 0301 	andne.w	r3, r3, #1
 800fcca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fcce:	428a      	cmp	r2, r1
 800fcd0:	bf0c      	ite	eq
 800fcd2:	2300      	moveq	r3, #0
 800fcd4:	f003 0301 	andne.w	r3, r3, #1
 800fcd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fcdc:	428a      	cmp	r2, r1
 800fcde:	bf0c      	ite	eq
 800fce0:	2300      	moveq	r3, #0
 800fce2:	f003 0301 	andne.w	r3, r3, #1
 800fce6:	b113      	cbz	r3, 800fcee <HAL_TIM_ConfigClockSource+0x44a>
 800fce8:	4b52      	ldr	r3, [pc, #328]	; (800fe34 <HAL_TIM_ConfigClockSource+0x590>)
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d156      	bne.n	800fd9c <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fcee:	686b      	ldr	r3, [r5, #4]
 800fcf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcf4:	bf18      	it	ne
 800fcf6:	2b0a      	cmpne	r3, #10
 800fcf8:	d002      	beq.n	800fd00 <HAL_TIM_ConfigClockSource+0x45c>
 800fcfa:	f033 0302 	bics.w	r3, r3, #2
 800fcfe:	d11b      	bne.n	800fd38 <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fd00:	68ee      	ldr	r6, [r5, #12]
 800fd02:	2e0f      	cmp	r6, #15
 800fd04:	d864      	bhi.n	800fdd0 <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fd06:	6823      	ldr	r3, [r4, #0]
 800fd08:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800fd0a:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd0c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd0e:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd12:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800fd16:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800fd18:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd1a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd1c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd22:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800fd26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd28:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800fd2a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800fd2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd30:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800fd34:	609a      	str	r2, [r3, #8]
}
 800fd36:	e680      	b.n	800fa3a <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd38:	f241 51a6 	movw	r1, #5542	; 0x15a6
 800fd3c:	4840      	ldr	r0, [pc, #256]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd3e:	f7f5 f939 	bl	8004fb4 <assert_failed>
 800fd42:	e7dd      	b.n	800fd00 <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd44:	f241 5196 	movw	r1, #5526	; 0x1596
 800fd48:	483d      	ldr	r0, [pc, #244]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd4a:	f7f5 f933 	bl	8004fb4 <assert_failed>
 800fd4e:	e736      	b.n	800fbbe <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd50:	f241 5173 	movw	r1, #5491	; 0x1573
 800fd54:	483a      	ldr	r0, [pc, #232]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd56:	f7f5 f92d 	bl	8004fb4 <assert_failed>
 800fd5a:	e655      	b.n	800fa08 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd5c:	f241 5186 	movw	r1, #5510	; 0x1586
 800fd60:	4837      	ldr	r0, [pc, #220]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd62:	f7f5 f927 	bl	8004fb4 <assert_failed>
 800fd66:	e5fb      	b.n	800f960 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd68:	f241 515b 	movw	r1, #5467	; 0x155b
 800fd6c:	4834      	ldr	r0, [pc, #208]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd6e:	f7f5 f921 	bl	8004fb4 <assert_failed>
 800fd72:	e6d8      	b.n	800fb26 <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800fd74:	f241 516f 	movw	r1, #5487	; 0x156f
 800fd78:	4831      	ldr	r0, [pc, #196]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd7a:	f7f5 f91b 	bl	8004fb4 <assert_failed>
 800fd7e:	e634      	b.n	800f9ea <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800fd80:	f241 51b6 	movw	r1, #5558	; 0x15b6
 800fd84:	482e      	ldr	r0, [pc, #184]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd86:	f7f5 f915 	bl	8004fb4 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fd8a:	6822      	ldr	r2, [r4, #0]
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	e681      	b.n	800fa94 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fd90:	f241 5183 	movw	r1, #5507	; 0x1583
 800fd94:	482a      	ldr	r0, [pc, #168]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd96:	f7f5 f90d 	bl	8004fb4 <assert_failed>
 800fd9a:	e5d7      	b.n	800f94c <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fd9c:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800fda0:	4827      	ldr	r0, [pc, #156]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fda2:	f7f5 f907 	bl	8004fb4 <assert_failed>
 800fda6:	e7a2      	b.n	800fcee <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fda8:	f241 5193 	movw	r1, #5523	; 0x1593
 800fdac:	4824      	ldr	r0, [pc, #144]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdae:	f7f5 f901 	bl	8004fb4 <assert_failed>
 800fdb2:	e6fa      	b.n	800fbaa <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800fdb4:	f241 5144 	movw	r1, #5444	; 0x1544
 800fdb8:	4821      	ldr	r0, [pc, #132]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdba:	f7f5 f8fb 	bl	8004fb4 <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 800fdbe:	682b      	ldr	r3, [r5, #0]
 800fdc0:	e591      	b.n	800f8e6 <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fdc2:	f241 5174 	movw	r1, #5492	; 0x1574
 800fdc6:	481e      	ldr	r0, [pc, #120]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdc8:	f7f5 f8f4 	bl	8004fb4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fdcc:	68ee      	ldr	r6, [r5, #12]
 800fdce:	e61f      	b.n	800fa10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fdd0:	f241 51a7 	movw	r1, #5543	; 0x15a7
 800fdd4:	481a      	ldr	r0, [pc, #104]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdd6:	f7f5 f8ed 	bl	8004fb4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fdda:	68ee      	ldr	r6, [r5, #12]
 800fddc:	e793      	b.n	800fd06 <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fdde:	f241 5197 	movw	r1, #5527	; 0x1597
 800fde2:	4817      	ldr	r0, [pc, #92]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fde4:	f7f5 f8e6 	bl	8004fb4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fde8:	68ee      	ldr	r6, [r5, #12]
 800fdea:	e6ec      	b.n	800fbc6 <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fdec:	f241 5187 	movw	r1, #5511	; 0x1587
 800fdf0:	4813      	ldr	r0, [pc, #76]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdf2:	f7f5 f8df 	bl	8004fb4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fdf6:	68ee      	ldr	r6, [r5, #12]
 800fdf8:	e5b6      	b.n	800f968 <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fdfa:	f241 515c 	movw	r1, #5468	; 0x155c
 800fdfe:	4810      	ldr	r0, [pc, #64]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fe00:	f7f5 f8d8 	bl	8004fb4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fe04:	68ee      	ldr	r6, [r5, #12]
 800fe06:	e692      	b.n	800fb2e <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fe08:	f241 515a 	movw	r1, #5466	; 0x155a
 800fe0c:	480c      	ldr	r0, [pc, #48]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fe0e:	f7f5 f8d1 	bl	8004fb4 <assert_failed>
 800fe12:	e67e      	b.n	800fb12 <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fe14:	f241 5172 	movw	r1, #5490	; 0x1572
 800fe18:	4809      	ldr	r0, [pc, #36]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fe1a:	f7f5 f8cb 	bl	8004fb4 <assert_failed>
 800fe1e:	e5e9      	b.n	800f9f4 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fe20:	f241 5157 	movw	r1, #5463	; 0x1557
 800fe24:	4806      	ldr	r0, [pc, #24]	; (800fe40 <HAL_TIM_ConfigClockSource+0x59c>)
 800fe26:	f7f5 f8c5 	bl	8004fb4 <assert_failed>
 800fe2a:	e66d      	b.n	800fb08 <HAL_TIM_ConfigClockSource+0x264>
 800fe2c:	40010000 	.word	0x40010000
 800fe30:	40000400 	.word	0x40000400
 800fe34:	40010400 	.word	0x40010400
 800fe38:	40000800 	.word	0x40000800
 800fe3c:	40002000 	.word	0x40002000
 800fe40:	0802cc54 	.word	0x0802cc54
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fe44:	4803      	ldr	r0, [pc, #12]	; (800fe54 <HAL_TIM_ConfigClockSource+0x5b0>)
 800fe46:	f241 5150 	movw	r1, #5456	; 0x1550
 800fe4a:	f7f5 f8b3 	bl	8004fb4 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800fe4e:	2000      	movs	r0, #0
 800fe50:	e5f3      	b.n	800fa3a <HAL_TIM_ConfigClockSource+0x196>
 800fe52:	bf00      	nop
 800fe54:	0802cc54 	.word	0x0802cc54

0800fe58 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fe58:	6802      	ldr	r2, [r0, #0]
{
 800fe5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fe5c:	4b39      	ldr	r3, [pc, #228]	; (800ff44 <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800fe5e:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fe60:	4f39      	ldr	r7, [pc, #228]	; (800ff48 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800fe62:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fe64:	429a      	cmp	r2, r3
 800fe66:	bf18      	it	ne
 800fe68:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fe6c:	4e37      	ldr	r6, [pc, #220]	; (800ff4c <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800fe6e:	4938      	ldr	r1, [pc, #224]	; (800ff50 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800fe70:	bf14      	ite	ne
 800fe72:	2301      	movne	r3, #1
 800fe74:	2300      	moveq	r3, #0
 800fe76:	42ba      	cmp	r2, r7
 800fe78:	bf0c      	ite	eq
 800fe7a:	2300      	moveq	r3, #0
 800fe7c:	f003 0301 	andne.w	r3, r3, #1
 800fe80:	42b2      	cmp	r2, r6
 800fe82:	bf0c      	ite	eq
 800fe84:	2300      	moveq	r3, #0
 800fe86:	f003 0301 	andne.w	r3, r3, #1
 800fe8a:	428a      	cmp	r2, r1
 800fe8c:	bf0c      	ite	eq
 800fe8e:	2300      	moveq	r3, #0
 800fe90:	f003 0301 	andne.w	r3, r3, #1
 800fe94:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800fe98:	428a      	cmp	r2, r1
 800fe9a:	bf0c      	ite	eq
 800fe9c:	2300      	moveq	r3, #0
 800fe9e:	f003 0301 	andne.w	r3, r3, #1
 800fea2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800fea6:	428a      	cmp	r2, r1
 800fea8:	bf0c      	ite	eq
 800feaa:	2300      	moveq	r3, #0
 800feac:	f003 0301 	andne.w	r3, r3, #1
 800feb0:	b113      	cbz	r3, 800feb8 <HAL_TIM_SlaveConfigSynchro+0x60>
 800feb2:	4b28      	ldr	r3, [pc, #160]	; (800ff54 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d138      	bne.n	800ff2a <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800feb8:	682b      	ldr	r3, [r5, #0]
 800feba:	1f1a      	subs	r2, r3, #4
 800febc:	2a03      	cmp	r2, #3
 800febe:	d902      	bls.n	800fec6 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800fec0:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800fec4:	d12b      	bne.n	800ff1e <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800fec6:	686b      	ldr	r3, [r5, #4]
 800fec8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800fecc:	2b40      	cmp	r3, #64	; 0x40
 800fece:	d000      	beq.n	800fed2 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800fed0:	bb8b      	cbnz	r3, 800ff36 <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800fed2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d01f      	beq.n	800ff1a <HAL_TIM_SlaveConfigSynchro+0xc2>
 800feda:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800fedc:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fede:	4629      	mov	r1, r5
 800fee0:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800fee2:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800fee6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800feea:	f7ff f933 	bl	800f154 <TIM_SlaveTimer_SetConfig>
 800feee:	b968      	cbnz	r0, 800ff0c <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800fef0:	6823      	ldr	r3, [r4, #0]
 800fef2:	68da      	ldr	r2, [r3, #12]
 800fef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fef8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fefa:	68da      	ldr	r2, [r3, #12]
 800fefc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ff00:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ff02:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ff06:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ff0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800ff0c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800ff0e:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800ff10:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ff14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ff18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800ff1a:	2002      	movs	r0, #2
}
 800ff1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800ff1e:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800ff22:	480d      	ldr	r0, [pc, #52]	; (800ff58 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ff24:	f7f5 f846 	bl	8004fb4 <assert_failed>
 800ff28:	e7cd      	b.n	800fec6 <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ff2a:	f241 51f6 	movw	r1, #5622	; 0x15f6
 800ff2e:	480a      	ldr	r0, [pc, #40]	; (800ff58 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ff30:	f7f5 f840 	bl	8004fb4 <assert_failed>
 800ff34:	e7c0      	b.n	800feb8 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800ff36:	f241 51f8 	movw	r1, #5624	; 0x15f8
 800ff3a:	4807      	ldr	r0, [pc, #28]	; (800ff58 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ff3c:	f7f5 f83a 	bl	8004fb4 <assert_failed>
 800ff40:	e7c7      	b.n	800fed2 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800ff42:	bf00      	nop
 800ff44:	40010000 	.word	0x40010000
 800ff48:	40000400 	.word	0x40000400
 800ff4c:	40000800 	.word	0x40000800
 800ff50:	40000c00 	.word	0x40000c00
 800ff54:	40001800 	.word	0x40001800
 800ff58:	0802cc54 	.word	0x0802cc54

0800ff5c <HAL_TIM_OC_DelayElapsedCallback>:
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop

0800ff60 <TIM_DMACaptureCplt>:
{
 800ff60:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff62:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ff64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff66:	4283      	cmp	r3, r0
 800ff68:	d01e      	beq.n	800ffa8 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ff6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ff6c:	4283      	cmp	r3, r0
 800ff6e:	d00b      	beq.n	800ff88 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ff70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff72:	4283      	cmp	r3, r0
 800ff74:	d027      	beq.n	800ffc6 <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ff76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff78:	4283      	cmp	r3, r0
 800ff7a:	d02f      	beq.n	800ffdc <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	f7f3 fef5 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff82:	2300      	movs	r3, #0
 800ff84:	7723      	strb	r3, [r4, #28]
}
 800ff86:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff88:	2202      	movs	r2, #2
 800ff8a:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ff8c:	69db      	ldr	r3, [r3, #28]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1f4      	bne.n	800ff7c <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ff92:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 800ff94:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ff96:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ff9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800ff9e:	f7f3 fee5 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	7723      	strb	r3, [r4, #28]
}
 800ffa6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ffac:	69db      	ldr	r3, [r3, #28]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d1e4      	bne.n	800ff7c <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ffb2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 800ffb6:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ffb8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800ffbc:	f7f3 fed6 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	7723      	strb	r3, [r4, #28]
}
 800ffc4:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ffc6:	2204      	movs	r2, #4
 800ffc8:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ffca:	69db      	ldr	r3, [r3, #28]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1d5      	bne.n	800ff7c <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ffd6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ffda:	e7cf      	b.n	800ff7c <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ffdc:	2208      	movs	r2, #8
 800ffde:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ffe0:	69db      	ldr	r3, [r3, #28]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d1ca      	bne.n	800ff7c <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ffec:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800fff0:	e7c4      	b.n	800ff7c <TIM_DMACaptureCplt+0x1c>
 800fff2:	bf00      	nop

0800fff4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop

0800fff8 <TIM_DMACaptureHalfCplt>:
{
 800fff8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fffa:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fffe:	4283      	cmp	r3, r0
 8010000:	d016      	beq.n	8010030 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010004:	4283      	cmp	r3, r0
 8010006:	d00b      	beq.n	8010020 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010008:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801000a:	4283      	cmp	r3, r0
 801000c:	d018      	beq.n	8010040 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801000e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010010:	4283      	cmp	r3, r0
 8010012:	d01d      	beq.n	8010050 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010014:	4620      	mov	r0, r4
 8010016:	f7ff ffed 	bl	800fff4 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801001a:	2300      	movs	r3, #0
 801001c:	7723      	strb	r3, [r4, #28]
}
 801001e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010020:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010022:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010024:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010026:	f7ff ffe5 	bl	800fff4 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801002a:	2300      	movs	r3, #0
 801002c:	7723      	strb	r3, [r4, #28]
}
 801002e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010030:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010032:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010034:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010036:	f7ff ffdd 	bl	800fff4 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801003a:	2300      	movs	r3, #0
 801003c:	7723      	strb	r3, [r4, #28]
}
 801003e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010040:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010042:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010044:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010046:	f7ff ffd5 	bl	800fff4 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801004a:	2300      	movs	r3, #0
 801004c:	7723      	strb	r3, [r4, #28]
}
 801004e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010050:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010052:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010054:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010056:	f7ff ffcd 	bl	800fff4 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801005a:	2300      	movs	r3, #0
 801005c:	7723      	strb	r3, [r4, #28]
}
 801005e:	bd10      	pop	{r4, pc}

08010060 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010060:	4770      	bx	lr
 8010062:	bf00      	nop

08010064 <HAL_TIM_TriggerCallback>:
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop

08010068 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010068:	6803      	ldr	r3, [r0, #0]
 801006a:	691a      	ldr	r2, [r3, #16]
 801006c:	0791      	lsls	r1, r2, #30
{
 801006e:	b510      	push	{r4, lr}
 8010070:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010072:	d502      	bpl.n	801007a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010074:	68da      	ldr	r2, [r3, #12]
 8010076:	0792      	lsls	r2, r2, #30
 8010078:	d468      	bmi.n	801014c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801007a:	691a      	ldr	r2, [r3, #16]
 801007c:	0752      	lsls	r2, r2, #29
 801007e:	d502      	bpl.n	8010086 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010080:	68da      	ldr	r2, [r3, #12]
 8010082:	0750      	lsls	r0, r2, #29
 8010084:	d44f      	bmi.n	8010126 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010086:	691a      	ldr	r2, [r3, #16]
 8010088:	0711      	lsls	r1, r2, #28
 801008a:	d502      	bpl.n	8010092 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801008c:	68da      	ldr	r2, [r3, #12]
 801008e:	0712      	lsls	r2, r2, #28
 8010090:	d437      	bmi.n	8010102 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010092:	691a      	ldr	r2, [r3, #16]
 8010094:	06d0      	lsls	r0, r2, #27
 8010096:	d502      	bpl.n	801009e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010098:	68da      	ldr	r2, [r3, #12]
 801009a:	06d1      	lsls	r1, r2, #27
 801009c:	d41e      	bmi.n	80100dc <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801009e:	691a      	ldr	r2, [r3, #16]
 80100a0:	07d2      	lsls	r2, r2, #31
 80100a2:	d502      	bpl.n	80100aa <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80100a4:	68da      	ldr	r2, [r3, #12]
 80100a6:	07d0      	lsls	r0, r2, #31
 80100a8:	d469      	bmi.n	801017e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80100aa:	691a      	ldr	r2, [r3, #16]
 80100ac:	0611      	lsls	r1, r2, #24
 80100ae:	d502      	bpl.n	80100b6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80100b0:	68da      	ldr	r2, [r3, #12]
 80100b2:	0612      	lsls	r2, r2, #24
 80100b4:	d46b      	bmi.n	801018e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80100b6:	691a      	ldr	r2, [r3, #16]
 80100b8:	05d0      	lsls	r0, r2, #23
 80100ba:	d502      	bpl.n	80100c2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80100bc:	68da      	ldr	r2, [r3, #12]
 80100be:	0611      	lsls	r1, r2, #24
 80100c0:	d46d      	bmi.n	801019e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80100c2:	691a      	ldr	r2, [r3, #16]
 80100c4:	0652      	lsls	r2, r2, #25
 80100c6:	d502      	bpl.n	80100ce <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80100c8:	68da      	ldr	r2, [r3, #12]
 80100ca:	0650      	lsls	r0, r2, #25
 80100cc:	d46f      	bmi.n	80101ae <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80100ce:	691a      	ldr	r2, [r3, #16]
 80100d0:	0691      	lsls	r1, r2, #26
 80100d2:	d502      	bpl.n	80100da <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80100d4:	68da      	ldr	r2, [r3, #12]
 80100d6:	0692      	lsls	r2, r2, #26
 80100d8:	d449      	bmi.n	801016e <HAL_TIM_IRQHandler+0x106>
}
 80100da:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80100dc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100e0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80100e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80100e4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100e6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80100e8:	69db      	ldr	r3, [r3, #28]
 80100ea:	f413 7f40 	tst.w	r3, #768	; 0x300
 80100ee:	d16f      	bne.n	80101d0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100f0:	f7ff ff34 	bl	800ff5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100f4:	4620      	mov	r0, r4
 80100f6:	f7ff ffb3 	bl	8010060 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100fa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80100fc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100fe:	7722      	strb	r2, [r4, #28]
 8010100:	e7cd      	b.n	801009e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010102:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010106:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8010108:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801010a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801010c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801010e:	69db      	ldr	r3, [r3, #28]
 8010110:	079b      	lsls	r3, r3, #30
 8010112:	d15a      	bne.n	80101ca <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010114:	f7ff ff22 	bl	800ff5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010118:	4620      	mov	r0, r4
 801011a:	f7ff ffa1 	bl	8010060 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801011e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010120:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010122:	7722      	strb	r2, [r4, #28]
 8010124:	e7b5      	b.n	8010092 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010126:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801012a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 801012c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801012e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010130:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010132:	699b      	ldr	r3, [r3, #24]
 8010134:	f413 7f40 	tst.w	r3, #768	; 0x300
 8010138:	d144      	bne.n	80101c4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801013a:	f7ff ff0f 	bl	800ff5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801013e:	4620      	mov	r0, r4
 8010140:	f7ff ff8e 	bl	8010060 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010144:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010146:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010148:	7722      	strb	r2, [r4, #28]
 801014a:	e79c      	b.n	8010086 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801014c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010150:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010152:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010154:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010156:	699b      	ldr	r3, [r3, #24]
 8010158:	0799      	lsls	r1, r3, #30
 801015a:	d130      	bne.n	80101be <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801015c:	f7ff fefe 	bl	800ff5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010160:	4620      	mov	r0, r4
 8010162:	f7ff ff7d 	bl	8010060 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010166:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010168:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801016a:	7722      	strb	r2, [r4, #28]
 801016c:	e785      	b.n	801007a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801016e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8010172:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010174:	611a      	str	r2, [r3, #16]
}
 8010176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 801017a:	f001 be53 	b.w	8011e24 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801017e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8010182:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010184:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8010186:	f7f3 fe67 	bl	8003e58 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801018a:	6823      	ldr	r3, [r4, #0]
 801018c:	e78d      	b.n	80100aa <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801018e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8010192:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010194:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8010196:	f001 fe47 	bl	8011e28 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801019a:	6823      	ldr	r3, [r4, #0]
 801019c:	e78b      	b.n	80100b6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801019e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80101a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80101a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80101a6:	f001 fe41 	bl	8011e2c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80101aa:	6823      	ldr	r3, [r4, #0]
 80101ac:	e789      	b.n	80100c2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80101ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80101b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80101b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80101b6:	f7ff ff55 	bl	8010064 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80101ba:	6823      	ldr	r3, [r4, #0]
 80101bc:	e787      	b.n	80100ce <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80101be:	f7f3 fdd5 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 80101c2:	e7d0      	b.n	8010166 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80101c4:	f7f3 fdd2 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 80101c8:	e7bc      	b.n	8010144 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80101ca:	f7f3 fdcf 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 80101ce:	e7a6      	b.n	801011e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80101d0:	f7f3 fdcc 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 80101d4:	e791      	b.n	80100fa <HAL_TIM_IRQHandler+0x92>
 80101d6:	bf00      	nop

080101d8 <HAL_TIM_ErrorCallback>:
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop

080101dc <TIM_DMAError>:
{
 80101dc:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101de:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80101e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101e2:	4283      	cmp	r3, r0
 80101e4:	d01c      	beq.n	8010220 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80101e8:	4283      	cmp	r3, r0
 80101ea:	d00e      	beq.n	801020a <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80101ee:	4283      	cmp	r3, r0
 80101f0:	d020      	beq.n	8010234 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80101f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80101f4:	4283      	cmp	r3, r0
 80101f6:	d028      	beq.n	801024a <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 80101f8:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 80101fa:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 80101fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8010200:	f7ff ffea 	bl	80101d8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010204:	2300      	movs	r3, #0
 8010206:	7723      	strb	r3, [r4, #28]
}
 8010208:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801020a:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801020c:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 801020e:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010210:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010214:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8010216:	f7ff ffdf 	bl	80101d8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801021a:	2300      	movs	r3, #0
 801021c:	7723      	strb	r3, [r4, #28]
}
 801021e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010220:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 8010222:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010224:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010226:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 801022a:	f7ff ffd5 	bl	80101d8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801022e:	2300      	movs	r3, #0
 8010230:	7723      	strb	r3, [r4, #28]
}
 8010232:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010234:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010236:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 8010238:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801023a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801023e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8010240:	f7ff ffca 	bl	80101d8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010244:	2300      	movs	r3, #0
 8010246:	7723      	strb	r3, [r4, #28]
}
 8010248:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801024a:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801024c:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 801024e:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010250:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010254:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8010256:	f7ff ffbf 	bl	80101d8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801025a:	2300      	movs	r3, #0
 801025c:	7723      	strb	r3, [r4, #28]
}
 801025e:	bd10      	pop	{r4, pc}

08010260 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010260:	4a3c      	ldr	r2, [pc, #240]	; (8010354 <TIM_Base_SetConfig+0xf4>)
 8010262:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8010266:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010268:	eba0 0202 	sub.w	r2, r0, r2
 801026c:	fab2 f282 	clz	r2, r2
{
 8010270:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010272:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8010276:	d010      	beq.n	801029a <TIM_Base_SetConfig+0x3a>
 8010278:	b97a      	cbnz	r2, 801029a <TIM_Base_SetConfig+0x3a>
 801027a:	4d37      	ldr	r5, [pc, #220]	; (8010358 <TIM_Base_SetConfig+0xf8>)
 801027c:	4c37      	ldr	r4, [pc, #220]	; (801035c <TIM_Base_SetConfig+0xfc>)
 801027e:	42a0      	cmp	r0, r4
 8010280:	bf18      	it	ne
 8010282:	42a8      	cmpne	r0, r5
 8010284:	d12b      	bne.n	80102de <TIM_Base_SetConfig+0x7e>
 8010286:	4c36      	ldr	r4, [pc, #216]	; (8010360 <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801028c:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801028e:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 8010290:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010292:	fab4 f484 	clz	r4, r4
 8010296:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010298:	e008      	b.n	80102ac <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 801029a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801029c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80102a0:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102a2:	4c2f      	ldr	r4, [pc, #188]	; (8010360 <TIM_Base_SetConfig+0x100>)
 80102a4:	1b04      	subs	r4, r0, r4
 80102a6:	fab4 f484 	clz	r4, r4
 80102aa:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80102ac:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80102ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80102b2:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102b4:	694d      	ldr	r5, [r1, #20]
 80102b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102ba:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80102bc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102be:	688b      	ldr	r3, [r1, #8]
 80102c0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80102c2:	680b      	ldr	r3, [r1, #0]
 80102c4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80102c6:	b922      	cbnz	r2, 80102d2 <TIM_Base_SetConfig+0x72>
 80102c8:	b91c      	cbnz	r4, 80102d2 <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 80102ca:	2301      	movs	r3, #1
}
 80102cc:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80102ce:	6143      	str	r3, [r0, #20]
}
 80102d0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80102d2:	690b      	ldr	r3, [r1, #16]
 80102d4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80102d6:	2301      	movs	r3, #1
}
 80102d8:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80102da:	6143      	str	r3, [r0, #20]
}
 80102dc:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80102e2:	42a0      	cmp	r0, r4
 80102e4:	d024      	beq.n	8010330 <TIM_Base_SetConfig+0xd0>
 80102e6:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80102ea:	42a0      	cmp	r0, r4
 80102ec:	d020      	beq.n	8010330 <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80102ee:	4c1d      	ldr	r4, [pc, #116]	; (8010364 <TIM_Base_SetConfig+0x104>)
 80102f0:	4d1d      	ldr	r5, [pc, #116]	; (8010368 <TIM_Base_SetConfig+0x108>)
 80102f2:	42a0      	cmp	r0, r4
 80102f4:	bf18      	it	ne
 80102f6:	42a8      	cmpne	r0, r5
 80102f8:	bf0c      	ite	eq
 80102fa:	2401      	moveq	r4, #1
 80102fc:	2400      	movne	r4, #0
 80102fe:	d027      	beq.n	8010350 <TIM_Base_SetConfig+0xf0>
 8010300:	4e1a      	ldr	r6, [pc, #104]	; (801036c <TIM_Base_SetConfig+0x10c>)
 8010302:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8010306:	42a8      	cmp	r0, r5
 8010308:	bf18      	it	ne
 801030a:	42b0      	cmpne	r0, r6
 801030c:	d0ce      	beq.n	80102ac <TIM_Base_SetConfig+0x4c>
 801030e:	4c18      	ldr	r4, [pc, #96]	; (8010370 <TIM_Base_SetConfig+0x110>)
 8010310:	42a0      	cmp	r0, r4
 8010312:	d01d      	beq.n	8010350 <TIM_Base_SetConfig+0xf0>
 8010314:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8010318:	42a0      	cmp	r0, r4
 801031a:	d019      	beq.n	8010350 <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801031c:	694d      	ldr	r5, [r1, #20]
 801031e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010322:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8010324:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010326:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010328:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801032a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801032c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801032e:	e7cc      	b.n	80102ca <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8010330:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010336:	4c0a      	ldr	r4, [pc, #40]	; (8010360 <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 8010338:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801033a:	4d0e      	ldr	r5, [pc, #56]	; (8010374 <TIM_Base_SetConfig+0x114>)
 801033c:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801033e:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010340:	fab4 f484 	clz	r4, r4
 8010344:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010348:	d0b0      	beq.n	80102ac <TIM_Base_SetConfig+0x4c>
 801034a:	2c00      	cmp	r4, #0
 801034c:	d1ae      	bne.n	80102ac <TIM_Base_SetConfig+0x4c>
 801034e:	e7ce      	b.n	80102ee <TIM_Base_SetConfig+0x8e>
 8010350:	2400      	movs	r4, #0
 8010352:	e7ab      	b.n	80102ac <TIM_Base_SetConfig+0x4c>
 8010354:	40010000 	.word	0x40010000
 8010358:	40000400 	.word	0x40000400
 801035c:	40000800 	.word	0x40000800
 8010360:	40010400 	.word	0x40010400
 8010364:	40014400 	.word	0x40014400
 8010368:	40014000 	.word	0x40014000
 801036c:	40014800 	.word	0x40014800
 8010370:	40001c00 	.word	0x40001c00
 8010374:	40000c00 	.word	0x40000c00

08010378 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8010378:	2800      	cmp	r0, #0
 801037a:	f000 80b8 	beq.w	80104ee <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801037e:	6802      	ldr	r2, [r0, #0]
 8010380:	4b5f      	ldr	r3, [pc, #380]	; (8010500 <HAL_TIM_Base_Init+0x188>)
 8010382:	4960      	ldr	r1, [pc, #384]	; (8010504 <HAL_TIM_Base_Init+0x18c>)
 8010384:	429a      	cmp	r2, r3
 8010386:	bf18      	it	ne
 8010388:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 801038c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801038e:	bf14      	ite	ne
 8010390:	2301      	movne	r3, #1
 8010392:	2300      	moveq	r3, #0
 8010394:	4604      	mov	r4, r0
 8010396:	485c      	ldr	r0, [pc, #368]	; (8010508 <HAL_TIM_Base_Init+0x190>)
 8010398:	4282      	cmp	r2, r0
 801039a:	bf0c      	ite	eq
 801039c:	2300      	moveq	r3, #0
 801039e:	f003 0301 	andne.w	r3, r3, #1
 80103a2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80103a6:	428a      	cmp	r2, r1
 80103a8:	bf0c      	ite	eq
 80103aa:	2300      	moveq	r3, #0
 80103ac:	f003 0301 	andne.w	r3, r3, #1
 80103b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103b4:	4282      	cmp	r2, r0
 80103b6:	bf0c      	ite	eq
 80103b8:	2300      	moveq	r3, #0
 80103ba:	f003 0301 	andne.w	r3, r3, #1
 80103be:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80103c2:	428a      	cmp	r2, r1
 80103c4:	bf0c      	ite	eq
 80103c6:	2300      	moveq	r3, #0
 80103c8:	f003 0301 	andne.w	r3, r3, #1
 80103cc:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80103d0:	4282      	cmp	r2, r0
 80103d2:	bf0c      	ite	eq
 80103d4:	2300      	moveq	r3, #0
 80103d6:	f003 0301 	andne.w	r3, r3, #1
 80103da:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80103de:	428a      	cmp	r2, r1
 80103e0:	bf0c      	ite	eq
 80103e2:	2300      	moveq	r3, #0
 80103e4:	f003 0301 	andne.w	r3, r3, #1
 80103e8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80103ec:	4282      	cmp	r2, r0
 80103ee:	bf0c      	ite	eq
 80103f0:	2300      	moveq	r3, #0
 80103f2:	f003 0301 	andne.w	r3, r3, #1
 80103f6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80103fa:	428a      	cmp	r2, r1
 80103fc:	bf0c      	ite	eq
 80103fe:	2300      	moveq	r3, #0
 8010400:	f003 0301 	andne.w	r3, r3, #1
 8010404:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010408:	4282      	cmp	r2, r0
 801040a:	bf0c      	ite	eq
 801040c:	2300      	moveq	r3, #0
 801040e:	f003 0301 	andne.w	r3, r3, #1
 8010412:	428a      	cmp	r2, r1
 8010414:	bf0c      	ite	eq
 8010416:	2300      	moveq	r3, #0
 8010418:	f003 0301 	andne.w	r3, r3, #1
 801041c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010420:	428a      	cmp	r2, r1
 8010422:	bf0c      	ite	eq
 8010424:	2300      	moveq	r3, #0
 8010426:	f003 0301 	andne.w	r3, r3, #1
 801042a:	b113      	cbz	r3, 8010432 <HAL_TIM_Base_Init+0xba>
 801042c:	4b37      	ldr	r3, [pc, #220]	; (801050c <HAL_TIM_Base_Init+0x194>)
 801042e:	429a      	cmp	r2, r3
 8010430:	d15f      	bne.n	80104f2 <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010432:	68a3      	ldr	r3, [r4, #8]
 8010434:	f023 0210 	bic.w	r2, r3, #16
 8010438:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 801043c:	2920      	cmp	r1, #32
 801043e:	bf18      	it	ne
 8010440:	2a00      	cmpne	r2, #0
 8010442:	d001      	beq.n	8010448 <HAL_TIM_Base_Init+0xd0>
 8010444:	2b40      	cmp	r3, #64	; 0x40
 8010446:	d14c      	bne.n	80104e2 <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010448:	6923      	ldr	r3, [r4, #16]
 801044a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801044e:	d002      	beq.n	8010456 <HAL_TIM_Base_Init+0xde>
 8010450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010454:	d12b      	bne.n	80104ae <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010456:	69a3      	ldr	r3, [r4, #24]
 8010458:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801045c:	d130      	bne.n	80104c0 <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801045e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010462:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010466:	b3b3      	cbz	r3, 80104d6 <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010468:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 801046a:	2302      	movs	r3, #2
 801046c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010470:	f851 0b04 	ldr.w	r0, [r1], #4
 8010474:	f7ff fef4 	bl	8010260 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010478:	2301      	movs	r3, #1
  return HAL_OK;
 801047a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801047c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010480:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010484:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010488:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801048c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010498:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801049c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80104a0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80104a4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80104a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80104ac:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80104ae:	f44f 718c 	mov.w	r1, #280	; 0x118
 80104b2:	4817      	ldr	r0, [pc, #92]	; (8010510 <HAL_TIM_Base_Init+0x198>)
 80104b4:	f7f4 fd7e 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80104b8:	69a3      	ldr	r3, [r4, #24]
 80104ba:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80104be:	d0ce      	beq.n	801045e <HAL_TIM_Base_Init+0xe6>
 80104c0:	f240 1119 	movw	r1, #281	; 0x119
 80104c4:	4812      	ldr	r0, [pc, #72]	; (8010510 <HAL_TIM_Base_Init+0x198>)
 80104c6:	f7f4 fd75 	bl	8004fb4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80104ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80104ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1c8      	bne.n	8010468 <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 80104d6:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80104d8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80104dc:	f7f6 f996 	bl	800680c <HAL_TIM_Base_MspInit>
 80104e0:	e7c2      	b.n	8010468 <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80104e2:	f240 1117 	movw	r1, #279	; 0x117
 80104e6:	480a      	ldr	r0, [pc, #40]	; (8010510 <HAL_TIM_Base_Init+0x198>)
 80104e8:	f7f4 fd64 	bl	8004fb4 <assert_failed>
 80104ec:	e7ac      	b.n	8010448 <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 80104ee:	2001      	movs	r0, #1
}
 80104f0:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80104f2:	f44f 718b 	mov.w	r1, #278	; 0x116
 80104f6:	4806      	ldr	r0, [pc, #24]	; (8010510 <HAL_TIM_Base_Init+0x198>)
 80104f8:	f7f4 fd5c 	bl	8004fb4 <assert_failed>
 80104fc:	e799      	b.n	8010432 <HAL_TIM_Base_Init+0xba>
 80104fe:	bf00      	nop
 8010500:	40010000 	.word	0x40010000
 8010504:	40000800 	.word	0x40000800
 8010508:	40000400 	.word	0x40000400
 801050c:	40002000 	.word	0x40002000
 8010510:	0802cc54 	.word	0x0802cc54

08010514 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8010514:	2800      	cmp	r0, #0
 8010516:	f000 80b8 	beq.w	801068a <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801051a:	6802      	ldr	r2, [r0, #0]
 801051c:	4b5f      	ldr	r3, [pc, #380]	; (801069c <HAL_TIM_OC_Init+0x188>)
 801051e:	4960      	ldr	r1, [pc, #384]	; (80106a0 <HAL_TIM_OC_Init+0x18c>)
 8010520:	429a      	cmp	r2, r3
 8010522:	bf18      	it	ne
 8010524:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8010528:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801052a:	bf14      	ite	ne
 801052c:	2301      	movne	r3, #1
 801052e:	2300      	moveq	r3, #0
 8010530:	4604      	mov	r4, r0
 8010532:	485c      	ldr	r0, [pc, #368]	; (80106a4 <HAL_TIM_OC_Init+0x190>)
 8010534:	4282      	cmp	r2, r0
 8010536:	bf0c      	ite	eq
 8010538:	2300      	moveq	r3, #0
 801053a:	f003 0301 	andne.w	r3, r3, #1
 801053e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010542:	428a      	cmp	r2, r1
 8010544:	bf0c      	ite	eq
 8010546:	2300      	moveq	r3, #0
 8010548:	f003 0301 	andne.w	r3, r3, #1
 801054c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010550:	4282      	cmp	r2, r0
 8010552:	bf0c      	ite	eq
 8010554:	2300      	moveq	r3, #0
 8010556:	f003 0301 	andne.w	r3, r3, #1
 801055a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801055e:	428a      	cmp	r2, r1
 8010560:	bf0c      	ite	eq
 8010562:	2300      	moveq	r3, #0
 8010564:	f003 0301 	andne.w	r3, r3, #1
 8010568:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 801056c:	4282      	cmp	r2, r0
 801056e:	bf0c      	ite	eq
 8010570:	2300      	moveq	r3, #0
 8010572:	f003 0301 	andne.w	r3, r3, #1
 8010576:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 801057a:	428a      	cmp	r2, r1
 801057c:	bf0c      	ite	eq
 801057e:	2300      	moveq	r3, #0
 8010580:	f003 0301 	andne.w	r3, r3, #1
 8010584:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010588:	4282      	cmp	r2, r0
 801058a:	bf0c      	ite	eq
 801058c:	2300      	moveq	r3, #0
 801058e:	f003 0301 	andne.w	r3, r3, #1
 8010592:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010596:	428a      	cmp	r2, r1
 8010598:	bf0c      	ite	eq
 801059a:	2300      	moveq	r3, #0
 801059c:	f003 0301 	andne.w	r3, r3, #1
 80105a0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80105a4:	4282      	cmp	r2, r0
 80105a6:	bf0c      	ite	eq
 80105a8:	2300      	moveq	r3, #0
 80105aa:	f003 0301 	andne.w	r3, r3, #1
 80105ae:	428a      	cmp	r2, r1
 80105b0:	bf0c      	ite	eq
 80105b2:	2300      	moveq	r3, #0
 80105b4:	f003 0301 	andne.w	r3, r3, #1
 80105b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105bc:	428a      	cmp	r2, r1
 80105be:	bf0c      	ite	eq
 80105c0:	2300      	moveq	r3, #0
 80105c2:	f003 0301 	andne.w	r3, r3, #1
 80105c6:	b113      	cbz	r3, 80105ce <HAL_TIM_OC_Init+0xba>
 80105c8:	4b37      	ldr	r3, [pc, #220]	; (80106a8 <HAL_TIM_OC_Init+0x194>)
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d15f      	bne.n	801068e <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80105ce:	68a3      	ldr	r3, [r4, #8]
 80105d0:	f023 0210 	bic.w	r2, r3, #16
 80105d4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80105d8:	2920      	cmp	r1, #32
 80105da:	bf18      	it	ne
 80105dc:	2a00      	cmpne	r2, #0
 80105de:	d001      	beq.n	80105e4 <HAL_TIM_OC_Init+0xd0>
 80105e0:	2b40      	cmp	r3, #64	; 0x40
 80105e2:	d14c      	bne.n	801067e <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80105e4:	6923      	ldr	r3, [r4, #16]
 80105e6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80105ea:	d002      	beq.n	80105f2 <HAL_TIM_OC_Init+0xde>
 80105ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105f0:	d12b      	bne.n	801064a <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80105f2:	69a3      	ldr	r3, [r4, #24]
 80105f4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80105f8:	d130      	bne.n	801065c <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80105fa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80105fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010602:	b3b3      	cbz	r3, 8010672 <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010604:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8010606:	2302      	movs	r3, #2
 8010608:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 801060c:	f851 0b04 	ldr.w	r0, [r1], #4
 8010610:	f7ff fe26 	bl	8010260 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010614:	2301      	movs	r3, #1
  return HAL_OK;
 8010616:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010618:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801061c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010620:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010624:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010628:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801062c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010634:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010638:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801063c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010640:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010644:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010648:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801064a:	f240 2197 	movw	r1, #663	; 0x297
 801064e:	4817      	ldr	r0, [pc, #92]	; (80106ac <HAL_TIM_OC_Init+0x198>)
 8010650:	f7f4 fcb0 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010654:	69a3      	ldr	r3, [r4, #24]
 8010656:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801065a:	d0ce      	beq.n	80105fa <HAL_TIM_OC_Init+0xe6>
 801065c:	f44f 7126 	mov.w	r1, #664	; 0x298
 8010660:	4812      	ldr	r0, [pc, #72]	; (80106ac <HAL_TIM_OC_Init+0x198>)
 8010662:	f7f4 fca7 	bl	8004fb4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010666:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801066a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1c8      	bne.n	8010604 <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 8010672:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8010674:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8010678:	f7ff f90e 	bl	800f898 <HAL_TIM_OC_MspInit>
 801067c:	e7c2      	b.n	8010604 <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801067e:	f240 2196 	movw	r1, #662	; 0x296
 8010682:	480a      	ldr	r0, [pc, #40]	; (80106ac <HAL_TIM_OC_Init+0x198>)
 8010684:	f7f4 fc96 	bl	8004fb4 <assert_failed>
 8010688:	e7ac      	b.n	80105e4 <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 801068a:	2001      	movs	r0, #1
}
 801068c:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801068e:	f240 2195 	movw	r1, #661	; 0x295
 8010692:	4806      	ldr	r0, [pc, #24]	; (80106ac <HAL_TIM_OC_Init+0x198>)
 8010694:	f7f4 fc8e 	bl	8004fb4 <assert_failed>
 8010698:	e799      	b.n	80105ce <HAL_TIM_OC_Init+0xba>
 801069a:	bf00      	nop
 801069c:	40010000 	.word	0x40010000
 80106a0:	40000800 	.word	0x40000800
 80106a4:	40000400 	.word	0x40000400
 80106a8:	40002000 	.word	0x40002000
 80106ac:	0802cc54 	.word	0x0802cc54

080106b0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80106b0:	2800      	cmp	r0, #0
 80106b2:	f000 80b8 	beq.w	8010826 <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80106b6:	6802      	ldr	r2, [r0, #0]
 80106b8:	4b5f      	ldr	r3, [pc, #380]	; (8010838 <HAL_TIM_PWM_Init+0x188>)
 80106ba:	4960      	ldr	r1, [pc, #384]	; (801083c <HAL_TIM_PWM_Init+0x18c>)
 80106bc:	429a      	cmp	r2, r3
 80106be:	bf18      	it	ne
 80106c0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 80106c4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80106c6:	bf14      	ite	ne
 80106c8:	2301      	movne	r3, #1
 80106ca:	2300      	moveq	r3, #0
 80106cc:	4604      	mov	r4, r0
 80106ce:	485c      	ldr	r0, [pc, #368]	; (8010840 <HAL_TIM_PWM_Init+0x190>)
 80106d0:	4282      	cmp	r2, r0
 80106d2:	bf0c      	ite	eq
 80106d4:	2300      	moveq	r3, #0
 80106d6:	f003 0301 	andne.w	r3, r3, #1
 80106da:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80106de:	428a      	cmp	r2, r1
 80106e0:	bf0c      	ite	eq
 80106e2:	2300      	moveq	r3, #0
 80106e4:	f003 0301 	andne.w	r3, r3, #1
 80106e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106ec:	4282      	cmp	r2, r0
 80106ee:	bf0c      	ite	eq
 80106f0:	2300      	moveq	r3, #0
 80106f2:	f003 0301 	andne.w	r3, r3, #1
 80106f6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80106fa:	428a      	cmp	r2, r1
 80106fc:	bf0c      	ite	eq
 80106fe:	2300      	moveq	r3, #0
 8010700:	f003 0301 	andne.w	r3, r3, #1
 8010704:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010708:	4282      	cmp	r2, r0
 801070a:	bf0c      	ite	eq
 801070c:	2300      	moveq	r3, #0
 801070e:	f003 0301 	andne.w	r3, r3, #1
 8010712:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010716:	428a      	cmp	r2, r1
 8010718:	bf0c      	ite	eq
 801071a:	2300      	moveq	r3, #0
 801071c:	f003 0301 	andne.w	r3, r3, #1
 8010720:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010724:	4282      	cmp	r2, r0
 8010726:	bf0c      	ite	eq
 8010728:	2300      	moveq	r3, #0
 801072a:	f003 0301 	andne.w	r3, r3, #1
 801072e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010732:	428a      	cmp	r2, r1
 8010734:	bf0c      	ite	eq
 8010736:	2300      	moveq	r3, #0
 8010738:	f003 0301 	andne.w	r3, r3, #1
 801073c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010740:	4282      	cmp	r2, r0
 8010742:	bf0c      	ite	eq
 8010744:	2300      	moveq	r3, #0
 8010746:	f003 0301 	andne.w	r3, r3, #1
 801074a:	428a      	cmp	r2, r1
 801074c:	bf0c      	ite	eq
 801074e:	2300      	moveq	r3, #0
 8010750:	f003 0301 	andne.w	r3, r3, #1
 8010754:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010758:	428a      	cmp	r2, r1
 801075a:	bf0c      	ite	eq
 801075c:	2300      	moveq	r3, #0
 801075e:	f003 0301 	andne.w	r3, r3, #1
 8010762:	b113      	cbz	r3, 801076a <HAL_TIM_PWM_Init+0xba>
 8010764:	4b37      	ldr	r3, [pc, #220]	; (8010844 <HAL_TIM_PWM_Init+0x194>)
 8010766:	429a      	cmp	r2, r3
 8010768:	d15f      	bne.n	801082a <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801076a:	68a3      	ldr	r3, [r4, #8]
 801076c:	f023 0210 	bic.w	r2, r3, #16
 8010770:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8010774:	2920      	cmp	r1, #32
 8010776:	bf18      	it	ne
 8010778:	2a00      	cmpne	r2, #0
 801077a:	d001      	beq.n	8010780 <HAL_TIM_PWM_Init+0xd0>
 801077c:	2b40      	cmp	r3, #64	; 0x40
 801077e:	d14c      	bne.n	801081a <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010780:	6923      	ldr	r3, [r4, #16]
 8010782:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010786:	d002      	beq.n	801078e <HAL_TIM_PWM_Init+0xde>
 8010788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801078c:	d12b      	bne.n	80107e6 <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801078e:	69a3      	ldr	r3, [r4, #24]
 8010790:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010794:	d130      	bne.n	80107f8 <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010796:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801079a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801079e:	b3b3      	cbz	r3, 801080e <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107a0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80107a2:	2302      	movs	r3, #2
 80107a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80107ac:	f7ff fd58 	bl	8010260 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80107b0:	2301      	movs	r3, #1
  return HAL_OK;
 80107b2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80107b4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80107bc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80107c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80107c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80107c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80107d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107d8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80107dc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80107e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80107e4:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80107e6:	f240 5132 	movw	r1, #1330	; 0x532
 80107ea:	4817      	ldr	r0, [pc, #92]	; (8010848 <HAL_TIM_PWM_Init+0x198>)
 80107ec:	f7f4 fbe2 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80107f0:	69a3      	ldr	r3, [r4, #24]
 80107f2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80107f6:	d0ce      	beq.n	8010796 <HAL_TIM_PWM_Init+0xe6>
 80107f8:	f240 5133 	movw	r1, #1331	; 0x533
 80107fc:	4812      	ldr	r0, [pc, #72]	; (8010848 <HAL_TIM_PWM_Init+0x198>)
 80107fe:	f7f4 fbd9 	bl	8004fb4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010802:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010806:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1c8      	bne.n	80107a0 <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 801080e:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8010810:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8010814:	f7ff f842 	bl	800f89c <HAL_TIM_PWM_MspInit>
 8010818:	e7c2      	b.n	80107a0 <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801081a:	f240 5131 	movw	r1, #1329	; 0x531
 801081e:	480a      	ldr	r0, [pc, #40]	; (8010848 <HAL_TIM_PWM_Init+0x198>)
 8010820:	f7f4 fbc8 	bl	8004fb4 <assert_failed>
 8010824:	e7ac      	b.n	8010780 <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 8010826:	2001      	movs	r0, #1
}
 8010828:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801082a:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 801082e:	4806      	ldr	r0, [pc, #24]	; (8010848 <HAL_TIM_PWM_Init+0x198>)
 8010830:	f7f4 fbc0 	bl	8004fb4 <assert_failed>
 8010834:	e799      	b.n	801076a <HAL_TIM_PWM_Init+0xba>
 8010836:	bf00      	nop
 8010838:	40010000 	.word	0x40010000
 801083c:	40000800 	.word	0x40000800
 8010840:	40000400 	.word	0x40000400
 8010844:	40002000 	.word	0x40002000
 8010848:	0802cc54 	.word	0x0802cc54

0801084c <HAL_TIM_IC_Init>:
  if (htim == NULL)
 801084c:	2800      	cmp	r0, #0
 801084e:	f000 80b8 	beq.w	80109c2 <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010852:	6802      	ldr	r2, [r0, #0]
 8010854:	4b5f      	ldr	r3, [pc, #380]	; (80109d4 <HAL_TIM_IC_Init+0x188>)
 8010856:	4960      	ldr	r1, [pc, #384]	; (80109d8 <HAL_TIM_IC_Init+0x18c>)
 8010858:	429a      	cmp	r2, r3
 801085a:	bf18      	it	ne
 801085c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8010860:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010862:	bf14      	ite	ne
 8010864:	2301      	movne	r3, #1
 8010866:	2300      	moveq	r3, #0
 8010868:	4604      	mov	r4, r0
 801086a:	485c      	ldr	r0, [pc, #368]	; (80109dc <HAL_TIM_IC_Init+0x190>)
 801086c:	4282      	cmp	r2, r0
 801086e:	bf0c      	ite	eq
 8010870:	2300      	moveq	r3, #0
 8010872:	f003 0301 	andne.w	r3, r3, #1
 8010876:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801087a:	428a      	cmp	r2, r1
 801087c:	bf0c      	ite	eq
 801087e:	2300      	moveq	r3, #0
 8010880:	f003 0301 	andne.w	r3, r3, #1
 8010884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010888:	4282      	cmp	r2, r0
 801088a:	bf0c      	ite	eq
 801088c:	2300      	moveq	r3, #0
 801088e:	f003 0301 	andne.w	r3, r3, #1
 8010892:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010896:	428a      	cmp	r2, r1
 8010898:	bf0c      	ite	eq
 801089a:	2300      	moveq	r3, #0
 801089c:	f003 0301 	andne.w	r3, r3, #1
 80108a0:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80108a4:	4282      	cmp	r2, r0
 80108a6:	bf0c      	ite	eq
 80108a8:	2300      	moveq	r3, #0
 80108aa:	f003 0301 	andne.w	r3, r3, #1
 80108ae:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80108b2:	428a      	cmp	r2, r1
 80108b4:	bf0c      	ite	eq
 80108b6:	2300      	moveq	r3, #0
 80108b8:	f003 0301 	andne.w	r3, r3, #1
 80108bc:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80108c0:	4282      	cmp	r2, r0
 80108c2:	bf0c      	ite	eq
 80108c4:	2300      	moveq	r3, #0
 80108c6:	f003 0301 	andne.w	r3, r3, #1
 80108ca:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80108ce:	428a      	cmp	r2, r1
 80108d0:	bf0c      	ite	eq
 80108d2:	2300      	moveq	r3, #0
 80108d4:	f003 0301 	andne.w	r3, r3, #1
 80108d8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80108dc:	4282      	cmp	r2, r0
 80108de:	bf0c      	ite	eq
 80108e0:	2300      	moveq	r3, #0
 80108e2:	f003 0301 	andne.w	r3, r3, #1
 80108e6:	428a      	cmp	r2, r1
 80108e8:	bf0c      	ite	eq
 80108ea:	2300      	moveq	r3, #0
 80108ec:	f003 0301 	andne.w	r3, r3, #1
 80108f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80108f4:	428a      	cmp	r2, r1
 80108f6:	bf0c      	ite	eq
 80108f8:	2300      	moveq	r3, #0
 80108fa:	f003 0301 	andne.w	r3, r3, #1
 80108fe:	b113      	cbz	r3, 8010906 <HAL_TIM_IC_Init+0xba>
 8010900:	4b37      	ldr	r3, [pc, #220]	; (80109e0 <HAL_TIM_IC_Init+0x194>)
 8010902:	429a      	cmp	r2, r3
 8010904:	d15f      	bne.n	80109c6 <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010906:	68a3      	ldr	r3, [r4, #8]
 8010908:	f023 0210 	bic.w	r2, r3, #16
 801090c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8010910:	2920      	cmp	r1, #32
 8010912:	bf18      	it	ne
 8010914:	2a00      	cmpne	r2, #0
 8010916:	d001      	beq.n	801091c <HAL_TIM_IC_Init+0xd0>
 8010918:	2b40      	cmp	r3, #64	; 0x40
 801091a:	d14c      	bne.n	80109b6 <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801091c:	6923      	ldr	r3, [r4, #16]
 801091e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010922:	d002      	beq.n	801092a <HAL_TIM_IC_Init+0xde>
 8010924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010928:	d12b      	bne.n	8010982 <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801092a:	69a3      	ldr	r3, [r4, #24]
 801092c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010930:	d130      	bne.n	8010994 <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010932:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010936:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801093a:	b3b3      	cbz	r3, 80109aa <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801093c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 801093e:	2302      	movs	r3, #2
 8010940:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010944:	f851 0b04 	ldr.w	r0, [r1], #4
 8010948:	f7ff fc8a 	bl	8010260 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801094c:	2301      	movs	r3, #1
  return HAL_OK;
 801094e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010950:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010954:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010958:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 801095c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010960:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801096c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010974:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010978:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 801097c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010980:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010982:	f240 71cc 	movw	r1, #1996	; 0x7cc
 8010986:	4817      	ldr	r0, [pc, #92]	; (80109e4 <HAL_TIM_IC_Init+0x198>)
 8010988:	f7f4 fb14 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801098c:	69a3      	ldr	r3, [r4, #24]
 801098e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010992:	d0ce      	beq.n	8010932 <HAL_TIM_IC_Init+0xe6>
 8010994:	f240 71cd 	movw	r1, #1997	; 0x7cd
 8010998:	4812      	ldr	r0, [pc, #72]	; (80109e4 <HAL_TIM_IC_Init+0x198>)
 801099a:	f7f4 fb0b 	bl	8004fb4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 801099e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80109a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d1c8      	bne.n	801093c <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 80109aa:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80109ac:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80109b0:	f7fe ff76 	bl	800f8a0 <HAL_TIM_IC_MspInit>
 80109b4:	e7c2      	b.n	801093c <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80109b6:	f240 71cb 	movw	r1, #1995	; 0x7cb
 80109ba:	480a      	ldr	r0, [pc, #40]	; (80109e4 <HAL_TIM_IC_Init+0x198>)
 80109bc:	f7f4 fafa 	bl	8004fb4 <assert_failed>
 80109c0:	e7ac      	b.n	801091c <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 80109c2:	2001      	movs	r0, #1
}
 80109c4:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80109c6:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80109ca:	4806      	ldr	r0, [pc, #24]	; (80109e4 <HAL_TIM_IC_Init+0x198>)
 80109cc:	f7f4 faf2 	bl	8004fb4 <assert_failed>
 80109d0:	e799      	b.n	8010906 <HAL_TIM_IC_Init+0xba>
 80109d2:	bf00      	nop
 80109d4:	40010000 	.word	0x40010000
 80109d8:	40000800 	.word	0x40000800
 80109dc:	40000400 	.word	0x40000400
 80109e0:	40002000 	.word	0x40002000
 80109e4:	0802cc54 	.word	0x0802cc54

080109e8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109e8:	6a03      	ldr	r3, [r0, #32]
 80109ea:	f023 0310 	bic.w	r3, r3, #16
{
 80109ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109f2:	6203      	str	r3, [r0, #32]
{
 80109f4:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 80109f6:	6a05      	ldr	r5, [r0, #32]
{
 80109f8:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 80109fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80109fe:	4b29      	ldr	r3, [pc, #164]	; (8010aa4 <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 8010a00:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 8010a04:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010a06:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010a08:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010a0a:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010a0e:	688b      	ldr	r3, [r1, #8]
 8010a10:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010a14:	4b24      	ldr	r3, [pc, #144]	; (8010aa8 <TIM_OC2_SetConfig+0xc0>)
 8010a16:	4298      	cmp	r0, r3
 8010a18:	d00b      	beq.n	8010a32 <TIM_OC2_SetConfig+0x4a>
 8010a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010a1e:	4298      	cmp	r0, r3
 8010a20:	d007      	beq.n	8010a32 <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 8010a22:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8010a24:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010a28:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8010a2a:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8010a2c:	6225      	str	r5, [r4, #32]
}
 8010a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010a32:	68f3      	ldr	r3, [r6, #12]
 8010a34:	f033 0208 	bics.w	r2, r3, #8
 8010a38:	d123      	bne.n	8010a82 <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8010a3a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010a3e:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010a42:	69b3      	ldr	r3, [r6, #24]
 8010a44:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 8010a48:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010a4c:	d120      	bne.n	8010a90 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010a4e:	6973      	ldr	r3, [r6, #20]
 8010a50:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010a54:	d107      	bne.n	8010a66 <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010a56:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010a5a:	69b1      	ldr	r1, [r6, #24]
 8010a5c:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8010a60:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8010a64:	e7dd      	b.n	8010a22 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010a66:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 8010a6a:	4810      	ldr	r0, [pc, #64]	; (8010aac <TIM_OC2_SetConfig+0xc4>)
 8010a6c:	f7f4 faa2 	bl	8004fb4 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010a70:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010a74:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010a76:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010a78:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8010a7c:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8010a80:	e7cf      	b.n	8010a22 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010a82:	f641 31aa 	movw	r1, #7082	; 0x1baa
 8010a86:	4809      	ldr	r0, [pc, #36]	; (8010aac <TIM_OC2_SetConfig+0xc4>)
 8010a88:	f7f4 fa94 	bl	8004fb4 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010a8c:	68f3      	ldr	r3, [r6, #12]
 8010a8e:	e7d4      	b.n	8010a3a <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010a90:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 8010a94:	4805      	ldr	r0, [pc, #20]	; (8010aac <TIM_OC2_SetConfig+0xc4>)
 8010a96:	f7f4 fa8d 	bl	8004fb4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010a9a:	6973      	ldr	r3, [r6, #20]
 8010a9c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010aa0:	d0d9      	beq.n	8010a56 <TIM_OC2_SetConfig+0x6e>
 8010aa2:	e7e0      	b.n	8010a66 <TIM_OC2_SetConfig+0x7e>
 8010aa4:	feff8cff 	.word	0xfeff8cff
 8010aa8:	40010000 	.word	0x40010000
 8010aac:	0802cc54 	.word	0x0802cc54

08010ab0 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8010ab0:	2a14      	cmp	r2, #20
{
 8010ab2:	b570      	push	{r4, r5, r6, lr}
 8010ab4:	4614      	mov	r4, r2
 8010ab6:	4605      	mov	r5, r0
 8010ab8:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8010aba:	d937      	bls.n	8010b2c <HAL_TIM_OC_ConfigChannel+0x7c>
 8010abc:	2a3c      	cmp	r2, #60	; 0x3c
 8010abe:	d139      	bne.n	8010b34 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8010ac0:	6833      	ldr	r3, [r6, #0]
 8010ac2:	f023 0210 	bic.w	r2, r3, #16
 8010ac6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8010aca:	2a40      	cmp	r2, #64	; 0x40
 8010acc:	bf18      	it	ne
 8010ace:	2b00      	cmpne	r3, #0
 8010ad0:	d003      	beq.n	8010ada <HAL_TIM_OC_ConfigChannel+0x2a>
 8010ad2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010ad6:	f040 8138 	bne.w	8010d4a <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010ada:	68b3      	ldr	r3, [r6, #8]
 8010adc:	f033 0302 	bics.w	r3, r3, #2
 8010ae0:	d12e      	bne.n	8010b40 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8010ae2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	d033      	beq.n	8010b52 <HAL_TIM_OC_ConfigChannel+0xa2>
 8010aea:	2301      	movs	r3, #1
 8010aec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8010af0:	2c14      	cmp	r4, #20
 8010af2:	d816      	bhi.n	8010b22 <HAL_TIM_OC_ConfigChannel+0x72>
 8010af4:	e8df f014 	tbh	[pc, r4, lsl #1]
 8010af8:	0015002f 	.word	0x0015002f
 8010afc:	00150015 	.word	0x00150015
 8010b00:	00150080 	.word	0x00150080
 8010b04:	00150015 	.word	0x00150015
 8010b08:	001500b5 	.word	0x001500b5
 8010b0c:	00150015 	.word	0x00150015
 8010b10:	001500db 	.word	0x001500db
 8010b14:	00150015 	.word	0x00150015
 8010b18:	00150101 	.word	0x00150101
 8010b1c:	00150015 	.word	0x00150015
 8010b20:	010e      	.short	0x010e
 8010b22:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8010b24:	2300      	movs	r3, #0
 8010b26:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010b2a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 8010b2c:	4b98      	ldr	r3, [pc, #608]	; (8010d90 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 8010b2e:	40d3      	lsrs	r3, r2
 8010b30:	07db      	lsls	r3, r3, #31
 8010b32:	d4c5      	bmi.n	8010ac0 <HAL_TIM_OC_ConfigChannel+0x10>
 8010b34:	f640 71df 	movw	r1, #4063	; 0xfdf
 8010b38:	4896      	ldr	r0, [pc, #600]	; (8010d94 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010b3a:	f7f4 fa3b 	bl	8004fb4 <assert_failed>
 8010b3e:	e7bf      	b.n	8010ac0 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010b40:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8010b44:	4893      	ldr	r0, [pc, #588]	; (8010d94 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010b46:	f7f4 fa35 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(htim);
 8010b4a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d1cb      	bne.n	8010aea <HAL_TIM_OC_ConfigChannel+0x3a>
 8010b52:	2002      	movs	r0, #2
}
 8010b54:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010b56:	6828      	ldr	r0, [r5, #0]
 8010b58:	4b8f      	ldr	r3, [pc, #572]	; (8010d98 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010b5a:	4a90      	ldr	r2, [pc, #576]	; (8010d9c <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010b5c:	4298      	cmp	r0, r3
 8010b5e:	bf18      	it	ne
 8010b60:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010b64:	bf14      	ite	ne
 8010b66:	2301      	movne	r3, #1
 8010b68:	2300      	moveq	r3, #0
 8010b6a:	4290      	cmp	r0, r2
 8010b6c:	bf0c      	ite	eq
 8010b6e:	2300      	moveq	r3, #0
 8010b70:	f003 0301 	andne.w	r3, r3, #1
 8010b74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b78:	4290      	cmp	r0, r2
 8010b7a:	bf0c      	ite	eq
 8010b7c:	2300      	moveq	r3, #0
 8010b7e:	f003 0301 	andne.w	r3, r3, #1
 8010b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b86:	4290      	cmp	r0, r2
 8010b88:	bf0c      	ite	eq
 8010b8a:	2300      	moveq	r3, #0
 8010b8c:	f003 0301 	andne.w	r3, r3, #1
 8010b90:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010b94:	4290      	cmp	r0, r2
 8010b96:	bf0c      	ite	eq
 8010b98:	2300      	moveq	r3, #0
 8010b9a:	f003 0301 	andne.w	r3, r3, #1
 8010b9e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010ba2:	4290      	cmp	r0, r2
 8010ba4:	bf0c      	ite	eq
 8010ba6:	2300      	moveq	r3, #0
 8010ba8:	f003 0301 	andne.w	r3, r3, #1
 8010bac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010bb0:	4290      	cmp	r0, r2
 8010bb2:	bf0c      	ite	eq
 8010bb4:	2300      	moveq	r3, #0
 8010bb6:	f003 0301 	andne.w	r3, r3, #1
 8010bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010bbe:	4290      	cmp	r0, r2
 8010bc0:	bf0c      	ite	eq
 8010bc2:	2300      	moveq	r3, #0
 8010bc4:	f003 0301 	andne.w	r3, r3, #1
 8010bc8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010bcc:	4290      	cmp	r0, r2
 8010bce:	bf0c      	ite	eq
 8010bd0:	2300      	moveq	r3, #0
 8010bd2:	f003 0301 	andne.w	r3, r3, #1
 8010bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010bda:	4290      	cmp	r0, r2
 8010bdc:	bf0c      	ite	eq
 8010bde:	2300      	moveq	r3, #0
 8010be0:	f003 0301 	andne.w	r3, r3, #1
 8010be4:	b11b      	cbz	r3, 8010bee <HAL_TIM_OC_ConfigChannel+0x13e>
 8010be6:	4b6e      	ldr	r3, [pc, #440]	; (8010da0 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 8010be8:	4298      	cmp	r0, r3
 8010bea:	f040 80c9 	bne.w	8010d80 <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010bee:	4631      	mov	r1, r6
 8010bf0:	f7fe f9ac 	bl	800ef4c <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010bf4:	2000      	movs	r0, #0
      break;
 8010bf6:	e795      	b.n	8010b24 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010bf8:	6828      	ldr	r0, [r5, #0]
 8010bfa:	4b67      	ldr	r3, [pc, #412]	; (8010d98 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010bfc:	4a67      	ldr	r2, [pc, #412]	; (8010d9c <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010bfe:	4298      	cmp	r0, r3
 8010c00:	bf18      	it	ne
 8010c02:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010c06:	bf14      	ite	ne
 8010c08:	2301      	movne	r3, #1
 8010c0a:	2300      	moveq	r3, #0
 8010c0c:	4290      	cmp	r0, r2
 8010c0e:	bf0c      	ite	eq
 8010c10:	2300      	moveq	r3, #0
 8010c12:	f003 0301 	andne.w	r3, r3, #1
 8010c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c1a:	4290      	cmp	r0, r2
 8010c1c:	bf0c      	ite	eq
 8010c1e:	2300      	moveq	r3, #0
 8010c20:	f003 0301 	andne.w	r3, r3, #1
 8010c24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c28:	4290      	cmp	r0, r2
 8010c2a:	bf0c      	ite	eq
 8010c2c:	2300      	moveq	r3, #0
 8010c2e:	f003 0301 	andne.w	r3, r3, #1
 8010c32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010c36:	4290      	cmp	r0, r2
 8010c38:	bf0c      	ite	eq
 8010c3a:	2300      	moveq	r3, #0
 8010c3c:	f003 0301 	andne.w	r3, r3, #1
 8010c40:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010c44:	4290      	cmp	r0, r2
 8010c46:	bf0c      	ite	eq
 8010c48:	2300      	moveq	r3, #0
 8010c4a:	f003 0301 	andne.w	r3, r3, #1
 8010c4e:	b11b      	cbz	r3, 8010c58 <HAL_TIM_OC_ConfigChannel+0x1a8>
 8010c50:	4b54      	ldr	r3, [pc, #336]	; (8010da4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 8010c52:	4298      	cmp	r0, r3
 8010c54:	f040 808d 	bne.w	8010d72 <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010c58:	4631      	mov	r1, r6
 8010c5a:	f7ff fec5 	bl	80109e8 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010c5e:	2000      	movs	r0, #0
      break;
 8010c60:	e760      	b.n	8010b24 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010c62:	6828      	ldr	r0, [r5, #0]
 8010c64:	4b4c      	ldr	r3, [pc, #304]	; (8010d98 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010c66:	4a4d      	ldr	r2, [pc, #308]	; (8010d9c <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010c68:	4298      	cmp	r0, r3
 8010c6a:	bf18      	it	ne
 8010c6c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010c70:	bf14      	ite	ne
 8010c72:	2301      	movne	r3, #1
 8010c74:	2300      	moveq	r3, #0
 8010c76:	4290      	cmp	r0, r2
 8010c78:	bf0c      	ite	eq
 8010c7a:	2300      	moveq	r3, #0
 8010c7c:	f003 0301 	andne.w	r3, r3, #1
 8010c80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c84:	4290      	cmp	r0, r2
 8010c86:	bf0c      	ite	eq
 8010c88:	2300      	moveq	r3, #0
 8010c8a:	f003 0301 	andne.w	r3, r3, #1
 8010c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c92:	4290      	cmp	r0, r2
 8010c94:	bf0c      	ite	eq
 8010c96:	2300      	moveq	r3, #0
 8010c98:	f003 0301 	andne.w	r3, r3, #1
 8010c9c:	b113      	cbz	r3, 8010ca4 <HAL_TIM_OC_ConfigChannel+0x1f4>
 8010c9e:	4b42      	ldr	r3, [pc, #264]	; (8010da8 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8010ca0:	4298      	cmp	r0, r3
 8010ca2:	d15f      	bne.n	8010d64 <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010ca4:	4631      	mov	r1, r6
 8010ca6:	f7fe f9b1 	bl	800f00c <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010caa:	2000      	movs	r0, #0
      break;
 8010cac:	e73a      	b.n	8010b24 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010cae:	6828      	ldr	r0, [r5, #0]
 8010cb0:	4b39      	ldr	r3, [pc, #228]	; (8010d98 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010cb2:	4a3a      	ldr	r2, [pc, #232]	; (8010d9c <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010cb4:	4298      	cmp	r0, r3
 8010cb6:	bf18      	it	ne
 8010cb8:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010cbc:	bf14      	ite	ne
 8010cbe:	2301      	movne	r3, #1
 8010cc0:	2300      	moveq	r3, #0
 8010cc2:	4290      	cmp	r0, r2
 8010cc4:	bf0c      	ite	eq
 8010cc6:	2300      	moveq	r3, #0
 8010cc8:	f003 0301 	andne.w	r3, r3, #1
 8010ccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010cd0:	4290      	cmp	r0, r2
 8010cd2:	bf0c      	ite	eq
 8010cd4:	2300      	moveq	r3, #0
 8010cd6:	f003 0301 	andne.w	r3, r3, #1
 8010cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010cde:	4290      	cmp	r0, r2
 8010ce0:	bf0c      	ite	eq
 8010ce2:	2300      	moveq	r3, #0
 8010ce4:	f003 0301 	andne.w	r3, r3, #1
 8010ce8:	b113      	cbz	r3, 8010cf0 <HAL_TIM_OC_ConfigChannel+0x240>
 8010cea:	4b2f      	ldr	r3, [pc, #188]	; (8010da8 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8010cec:	4298      	cmp	r0, r3
 8010cee:	d132      	bne.n	8010d56 <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010cf0:	4631      	mov	r1, r6
 8010cf2:	f7fe f9ef 	bl	800f0d4 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010cf6:	2000      	movs	r0, #0
      break;
 8010cf8:	e714      	b.n	8010b24 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010cfa:	6828      	ldr	r0, [r5, #0]
 8010cfc:	4b26      	ldr	r3, [pc, #152]	; (8010d98 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010cfe:	4298      	cmp	r0, r3
 8010d00:	d003      	beq.n	8010d0a <HAL_TIM_OC_ConfigChannel+0x25a>
 8010d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d06:	4298      	cmp	r0, r3
 8010d08:	d118      	bne.n	8010d3c <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010d0a:	4631      	mov	r1, r6
 8010d0c:	f7fe f8ca 	bl	800eea4 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010d10:	2000      	movs	r0, #0
      break;
 8010d12:	e707      	b.n	8010b24 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010d14:	6828      	ldr	r0, [r5, #0]
 8010d16:	4b20      	ldr	r3, [pc, #128]	; (8010d98 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010d18:	4298      	cmp	r0, r3
 8010d1a:	d003      	beq.n	8010d24 <HAL_TIM_OC_ConfigChannel+0x274>
 8010d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d20:	4298      	cmp	r0, r3
 8010d22:	d104      	bne.n	8010d2e <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010d24:	4631      	mov	r1, r6
 8010d26:	f7fe f8e7 	bl	800eef8 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010d2a:	2000      	movs	r0, #0
      break;
 8010d2c:	e6fa      	b.n	8010b24 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010d2e:	4819      	ldr	r0, [pc, #100]	; (8010d94 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d30:	f241 011d 	movw	r1, #4125	; 0x101d
 8010d34:	f7f4 f93e 	bl	8004fb4 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010d38:	6828      	ldr	r0, [r5, #0]
 8010d3a:	e7f3      	b.n	8010d24 <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010d3c:	4815      	ldr	r0, [pc, #84]	; (8010d94 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d3e:	f241 0113 	movw	r1, #4115	; 0x1013
 8010d42:	f7f4 f937 	bl	8004fb4 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010d46:	6828      	ldr	r0, [r5, #0]
 8010d48:	e7df      	b.n	8010d0a <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8010d4a:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8010d4e:	4811      	ldr	r0, [pc, #68]	; (8010d94 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d50:	f7f4 f930 	bl	8004fb4 <assert_failed>
 8010d54:	e6c1      	b.n	8010ada <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010d56:	480f      	ldr	r0, [pc, #60]	; (8010d94 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d58:	f241 0109 	movw	r1, #4105	; 0x1009
 8010d5c:	f7f4 f92a 	bl	8004fb4 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010d60:	6828      	ldr	r0, [r5, #0]
 8010d62:	e7c5      	b.n	8010cf0 <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010d64:	480b      	ldr	r0, [pc, #44]	; (8010d94 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d66:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010d6a:	f7f4 f923 	bl	8004fb4 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d6e:	6828      	ldr	r0, [r5, #0]
 8010d70:	e798      	b.n	8010ca4 <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010d72:	4808      	ldr	r0, [pc, #32]	; (8010d94 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d74:	f640 71f5 	movw	r1, #4085	; 0xff5
 8010d78:	f7f4 f91c 	bl	8004fb4 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010d7c:	6828      	ldr	r0, [r5, #0]
 8010d7e:	e76b      	b.n	8010c58 <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010d80:	4804      	ldr	r0, [pc, #16]	; (8010d94 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d82:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8010d86:	f7f4 f915 	bl	8004fb4 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010d8a:	6828      	ldr	r0, [r5, #0]
 8010d8c:	e72f      	b.n	8010bee <HAL_TIM_OC_ConfigChannel+0x13e>
 8010d8e:	bf00      	nop
 8010d90:	00111111 	.word	0x00111111
 8010d94:	0802cc54 	.word	0x0802cc54
 8010d98:	40010000 	.word	0x40010000
 8010d9c:	40000400 	.word	0x40000400
 8010da0:	40002000 	.word	0x40002000
 8010da4:	40001800 	.word	0x40001800
 8010da8:	40010400 	.word	0x40010400

08010dac <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8010dac:	2a14      	cmp	r2, #20
{
 8010dae:	b570      	push	{r4, r5, r6, lr}
 8010db0:	4616      	mov	r6, r2
 8010db2:	4605      	mov	r5, r0
 8010db4:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8010db6:	d933      	bls.n	8010e20 <HAL_TIM_PWM_ConfigChannel+0x74>
 8010db8:	2a3c      	cmp	r2, #60	; 0x3c
 8010dba:	d135      	bne.n	8010e28 <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8010dbc:	6822      	ldr	r2, [r4, #0]
 8010dbe:	4b90      	ldr	r3, [pc, #576]	; (8011000 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8010dc0:	4013      	ands	r3, r2
 8010dc2:	2b60      	cmp	r3, #96	; 0x60
 8010dc4:	d004      	beq.n	8010dd0 <HAL_TIM_PWM_ConfigChannel+0x24>
 8010dc6:	f022 0210 	bic.w	r2, r2, #16
 8010dca:	4b8e      	ldr	r3, [pc, #568]	; (8011004 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d147      	bne.n	8010e60 <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010dd0:	68a3      	ldr	r3, [r4, #8]
 8010dd2:	f033 0302 	bics.w	r3, r3, #2
 8010dd6:	d13d      	bne.n	8010e54 <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8010dd8:	6923      	ldr	r3, [r4, #16]
 8010dda:	f033 0304 	bics.w	r3, r3, #4
 8010dde:	d12e      	bne.n	8010e3e <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8010de0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d033      	beq.n	8010e50 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8010de8:	2301      	movs	r3, #1
 8010dea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8010dee:	2e14      	cmp	r6, #20
 8010df0:	d820      	bhi.n	8010e34 <HAL_TIM_PWM_ConfigChannel+0x88>
 8010df2:	e8df f016 	tbh	[pc, r6, lsl #1]
 8010df6:	00a7      	.short	0x00a7
 8010df8:	001f001f 	.word	0x001f001f
 8010dfc:	0115001f 	.word	0x0115001f
 8010e00:	001f001f 	.word	0x001f001f
 8010e04:	0157001f 	.word	0x0157001f
 8010e08:	001f001f 	.word	0x001f001f
 8010e0c:	0057001f 	.word	0x0057001f
 8010e10:	001f001f 	.word	0x001f001f
 8010e14:	008c001f 	.word	0x008c001f
 8010e18:	001f001f 	.word	0x001f001f
 8010e1c:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 8010e20:	4b79      	ldr	r3, [pc, #484]	; (8011008 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8010e22:	40d3      	lsrs	r3, r2
 8010e24:	07db      	lsls	r3, r3, #31
 8010e26:	d4c9      	bmi.n	8010dbc <HAL_TIM_PWM_ConfigChannel+0x10>
 8010e28:	f241 01a7 	movw	r1, #4263	; 0x10a7
 8010e2c:	4877      	ldr	r0, [pc, #476]	; (801100c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010e2e:	f7f4 f8c1 	bl	8004fb4 <assert_failed>
 8010e32:	e7c3      	b.n	8010dbc <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 8010e34:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8010e36:	2300      	movs	r3, #0
 8010e38:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010e3c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8010e3e:	f241 01aa 	movw	r1, #4266	; 0x10aa
 8010e42:	4872      	ldr	r0, [pc, #456]	; (801100c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010e44:	f7f4 f8b6 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(htim);
 8010e48:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d1cb      	bne.n	8010de8 <HAL_TIM_PWM_ConfigChannel+0x3c>
 8010e50:	2002      	movs	r0, #2
}
 8010e52:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010e54:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8010e58:	486c      	ldr	r0, [pc, #432]	; (801100c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010e5a:	f7f4 f8ab 	bl	8004fb4 <assert_failed>
 8010e5e:	e7bb      	b.n	8010dd8 <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8010e60:	f241 01a8 	movw	r1, #4264	; 0x10a8
 8010e64:	4869      	ldr	r0, [pc, #420]	; (801100c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010e66:	f7f4 f8a5 	bl	8004fb4 <assert_failed>
 8010e6a:	e7b1      	b.n	8010dd0 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010e6c:	6828      	ldr	r0, [r5, #0]
 8010e6e:	4b68      	ldr	r3, [pc, #416]	; (8011010 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010e70:	4298      	cmp	r0, r3
 8010e72:	d004      	beq.n	8010e7e <HAL_TIM_PWM_ConfigChannel+0xd2>
 8010e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e78:	4298      	cmp	r0, r3
 8010e7a:	f040 814d 	bne.w	8011118 <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010e7e:	4621      	mov	r1, r4
 8010e80:	f7fe f83a 	bl	800eef8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010e84:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010e86:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e8a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010e8e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010e90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e92:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010e96:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e9a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010e9e:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010ea0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010ea2:	e7c8      	b.n	8010e36 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010ea4:	6828      	ldr	r0, [r5, #0]
 8010ea6:	4b5a      	ldr	r3, [pc, #360]	; (8011010 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010ea8:	4a5a      	ldr	r2, [pc, #360]	; (8011014 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8010eaa:	4298      	cmp	r0, r3
 8010eac:	bf18      	it	ne
 8010eae:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010eb2:	bf14      	ite	ne
 8010eb4:	2301      	movne	r3, #1
 8010eb6:	2300      	moveq	r3, #0
 8010eb8:	4290      	cmp	r0, r2
 8010eba:	bf0c      	ite	eq
 8010ebc:	2300      	moveq	r3, #0
 8010ebe:	f003 0301 	andne.w	r3, r3, #1
 8010ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010ec6:	4290      	cmp	r0, r2
 8010ec8:	bf0c      	ite	eq
 8010eca:	2300      	moveq	r3, #0
 8010ecc:	f003 0301 	andne.w	r3, r3, #1
 8010ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010ed4:	4290      	cmp	r0, r2
 8010ed6:	bf0c      	ite	eq
 8010ed8:	2300      	moveq	r3, #0
 8010eda:	f003 0301 	andne.w	r3, r3, #1
 8010ede:	b11b      	cbz	r3, 8010ee8 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8010ee0:	4b4d      	ldr	r3, [pc, #308]	; (8011018 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8010ee2:	4298      	cmp	r0, r3
 8010ee4:	f040 811f 	bne.w	8011126 <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010ee8:	4621      	mov	r1, r4
 8010eea:	f7fe f8f3 	bl	800f0d4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010eee:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010ef0:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010ef2:	69d9      	ldr	r1, [r3, #28]
 8010ef4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010ef8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010efa:	69d9      	ldr	r1, [r3, #28]
 8010efc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010f00:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010f02:	69da      	ldr	r2, [r3, #28]
 8010f04:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010f08:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010f0a:	61da      	str	r2, [r3, #28]
      break;
 8010f0c:	e793      	b.n	8010e36 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010f0e:	6828      	ldr	r0, [r5, #0]
 8010f10:	4b3f      	ldr	r3, [pc, #252]	; (8011010 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010f12:	4298      	cmp	r0, r3
 8010f14:	d004      	beq.n	8010f20 <HAL_TIM_PWM_ConfigChannel+0x174>
 8010f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010f1a:	4298      	cmp	r0, r3
 8010f1c:	f040 80f5 	bne.w	801110a <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010f20:	4621      	mov	r1, r4
 8010f22:	f7fd ffbf 	bl	800eea4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010f26:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f28:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010f2a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f2c:	f041 0108 	orr.w	r1, r1, #8
 8010f30:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010f32:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f34:	f021 0104 	bic.w	r1, r1, #4
 8010f38:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f3c:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010f3e:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f42:	e778      	b.n	8010e36 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010f44:	6828      	ldr	r0, [r5, #0]
 8010f46:	4b32      	ldr	r3, [pc, #200]	; (8011010 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010f48:	4a32      	ldr	r2, [pc, #200]	; (8011014 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8010f4a:	4298      	cmp	r0, r3
 8010f4c:	bf18      	it	ne
 8010f4e:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010f52:	bf14      	ite	ne
 8010f54:	2301      	movne	r3, #1
 8010f56:	2300      	moveq	r3, #0
 8010f58:	4290      	cmp	r0, r2
 8010f5a:	bf0c      	ite	eq
 8010f5c:	2300      	moveq	r3, #0
 8010f5e:	f003 0301 	andne.w	r3, r3, #1
 8010f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f66:	4290      	cmp	r0, r2
 8010f68:	bf0c      	ite	eq
 8010f6a:	2300      	moveq	r3, #0
 8010f6c:	f003 0301 	andne.w	r3, r3, #1
 8010f70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f74:	4290      	cmp	r0, r2
 8010f76:	bf0c      	ite	eq
 8010f78:	2300      	moveq	r3, #0
 8010f7a:	f003 0301 	andne.w	r3, r3, #1
 8010f7e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010f82:	4290      	cmp	r0, r2
 8010f84:	bf0c      	ite	eq
 8010f86:	2300      	moveq	r3, #0
 8010f88:	f003 0301 	andne.w	r3, r3, #1
 8010f8c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010f90:	4290      	cmp	r0, r2
 8010f92:	bf0c      	ite	eq
 8010f94:	2300      	moveq	r3, #0
 8010f96:	f003 0301 	andne.w	r3, r3, #1
 8010f9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f9e:	4290      	cmp	r0, r2
 8010fa0:	bf0c      	ite	eq
 8010fa2:	2300      	moveq	r3, #0
 8010fa4:	f003 0301 	andne.w	r3, r3, #1
 8010fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010fac:	4290      	cmp	r0, r2
 8010fae:	bf0c      	ite	eq
 8010fb0:	2300      	moveq	r3, #0
 8010fb2:	f003 0301 	andne.w	r3, r3, #1
 8010fb6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010fba:	4290      	cmp	r0, r2
 8010fbc:	bf0c      	ite	eq
 8010fbe:	2300      	moveq	r3, #0
 8010fc0:	f003 0301 	andne.w	r3, r3, #1
 8010fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010fc8:	4290      	cmp	r0, r2
 8010fca:	bf0c      	ite	eq
 8010fcc:	2300      	moveq	r3, #0
 8010fce:	f003 0301 	andne.w	r3, r3, #1
 8010fd2:	b11b      	cbz	r3, 8010fdc <HAL_TIM_PWM_ConfigChannel+0x230>
 8010fd4:	4b11      	ldr	r3, [pc, #68]	; (801101c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8010fd6:	4298      	cmp	r0, r3
 8010fd8:	f040 80ba 	bne.w	8011150 <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010fdc:	4621      	mov	r1, r4
 8010fde:	f7fd ffb5 	bl	800ef4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010fe2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010fe4:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010fe6:	6999      	ldr	r1, [r3, #24]
 8010fe8:	f041 0108 	orr.w	r1, r1, #8
 8010fec:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010fee:	6999      	ldr	r1, [r3, #24]
 8010ff0:	f021 0104 	bic.w	r1, r1, #4
 8010ff4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010ff6:	699a      	ldr	r2, [r3, #24]
 8010ff8:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010ffa:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010ffc:	619a      	str	r2, [r3, #24]
      break;
 8010ffe:	e71a      	b.n	8010e36 <HAL_TIM_PWM_ConfigChannel+0x8a>
 8011000:	fffeffef 	.word	0xfffeffef
 8011004:	00010040 	.word	0x00010040
 8011008:	00111111 	.word	0x00111111
 801100c:	0802cc54 	.word	0x0802cc54
 8011010:	40010000 	.word	0x40010000
 8011014:	40000400 	.word	0x40000400
 8011018:	40010400 	.word	0x40010400
 801101c:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011020:	6828      	ldr	r0, [r5, #0]
 8011022:	4b4f      	ldr	r3, [pc, #316]	; (8011160 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8011024:	4a4f      	ldr	r2, [pc, #316]	; (8011164 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8011026:	4298      	cmp	r0, r3
 8011028:	bf18      	it	ne
 801102a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801102e:	bf14      	ite	ne
 8011030:	2301      	movne	r3, #1
 8011032:	2300      	moveq	r3, #0
 8011034:	4290      	cmp	r0, r2
 8011036:	bf0c      	ite	eq
 8011038:	2300      	moveq	r3, #0
 801103a:	f003 0301 	andne.w	r3, r3, #1
 801103e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011042:	4290      	cmp	r0, r2
 8011044:	bf0c      	ite	eq
 8011046:	2300      	moveq	r3, #0
 8011048:	f003 0301 	andne.w	r3, r3, #1
 801104c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011050:	4290      	cmp	r0, r2
 8011052:	bf0c      	ite	eq
 8011054:	2300      	moveq	r3, #0
 8011056:	f003 0301 	andne.w	r3, r3, #1
 801105a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801105e:	4290      	cmp	r0, r2
 8011060:	bf0c      	ite	eq
 8011062:	2300      	moveq	r3, #0
 8011064:	f003 0301 	andne.w	r3, r3, #1
 8011068:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801106c:	4290      	cmp	r0, r2
 801106e:	bf0c      	ite	eq
 8011070:	2300      	moveq	r3, #0
 8011072:	f003 0301 	andne.w	r3, r3, #1
 8011076:	b113      	cbz	r3, 801107e <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8011078:	4b3b      	ldr	r3, [pc, #236]	; (8011168 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 801107a:	4298      	cmp	r0, r3
 801107c:	d161      	bne.n	8011142 <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801107e:	4621      	mov	r1, r4
 8011080:	f7ff fcb2 	bl	80109e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011084:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011086:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011088:	6999      	ldr	r1, [r3, #24]
 801108a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 801108e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011090:	6999      	ldr	r1, [r3, #24]
 8011092:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8011096:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011098:	699a      	ldr	r2, [r3, #24]
 801109a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 801109e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80110a0:	619a      	str	r2, [r3, #24]
      break;
 80110a2:	e6c8      	b.n	8010e36 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80110a4:	6828      	ldr	r0, [r5, #0]
 80110a6:	4b2e      	ldr	r3, [pc, #184]	; (8011160 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 80110a8:	4a2e      	ldr	r2, [pc, #184]	; (8011164 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 80110aa:	4298      	cmp	r0, r3
 80110ac:	bf18      	it	ne
 80110ae:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80110b2:	bf14      	ite	ne
 80110b4:	2301      	movne	r3, #1
 80110b6:	2300      	moveq	r3, #0
 80110b8:	4290      	cmp	r0, r2
 80110ba:	bf0c      	ite	eq
 80110bc:	2300      	moveq	r3, #0
 80110be:	f003 0301 	andne.w	r3, r3, #1
 80110c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80110c6:	4290      	cmp	r0, r2
 80110c8:	bf0c      	ite	eq
 80110ca:	2300      	moveq	r3, #0
 80110cc:	f003 0301 	andne.w	r3, r3, #1
 80110d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80110d4:	4290      	cmp	r0, r2
 80110d6:	bf0c      	ite	eq
 80110d8:	2300      	moveq	r3, #0
 80110da:	f003 0301 	andne.w	r3, r3, #1
 80110de:	b113      	cbz	r3, 80110e6 <HAL_TIM_PWM_ConfigChannel+0x33a>
 80110e0:	4b22      	ldr	r3, [pc, #136]	; (801116c <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 80110e2:	4298      	cmp	r0, r3
 80110e4:	d126      	bne.n	8011134 <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80110e6:	4621      	mov	r1, r4
 80110e8:	f7fd ff90 	bl	800f00c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80110ec:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80110ee:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80110f0:	69d9      	ldr	r1, [r3, #28]
 80110f2:	f041 0108 	orr.w	r1, r1, #8
 80110f6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80110f8:	69d9      	ldr	r1, [r3, #28]
 80110fa:	f021 0104 	bic.w	r1, r1, #4
 80110fe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011100:	69da      	ldr	r2, [r3, #28]
 8011102:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8011104:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011106:	61da      	str	r2, [r3, #28]
      break;
 8011108:	e695      	b.n	8010e36 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 801110a:	4819      	ldr	r0, [pc, #100]	; (8011170 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801110c:	f241 01f8 	movw	r1, #4344	; 0x10f8
 8011110:	f7f3 ff50 	bl	8004fb4 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011114:	6828      	ldr	r0, [r5, #0]
 8011116:	e703      	b.n	8010f20 <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011118:	4815      	ldr	r0, [pc, #84]	; (8011170 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801111a:	f241 1109 	movw	r1, #4361	; 0x1109
 801111e:	f7f3 ff49 	bl	8004fb4 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011122:	6828      	ldr	r0, [r5, #0]
 8011124:	e6ab      	b.n	8010e7e <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011126:	4812      	ldr	r0, [pc, #72]	; (8011170 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8011128:	f241 01e7 	movw	r1, #4327	; 0x10e7
 801112c:	f7f3 ff42 	bl	8004fb4 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011130:	6828      	ldr	r0, [r5, #0]
 8011132:	e6d9      	b.n	8010ee8 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011134:	480e      	ldr	r0, [pc, #56]	; (8011170 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8011136:	f241 01d6 	movw	r1, #4310	; 0x10d6
 801113a:	f7f3 ff3b 	bl	8004fb4 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801113e:	6828      	ldr	r0, [r5, #0]
 8011140:	e7d1      	b.n	80110e6 <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011142:	480b      	ldr	r0, [pc, #44]	; (8011170 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8011144:	f241 01c5 	movw	r1, #4293	; 0x10c5
 8011148:	f7f3 ff34 	bl	8004fb4 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801114c:	6828      	ldr	r0, [r5, #0]
 801114e:	e796      	b.n	801107e <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011150:	4807      	ldr	r0, [pc, #28]	; (8011170 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8011152:	f241 01b4 	movw	r1, #4276	; 0x10b4
 8011156:	f7f3 ff2d 	bl	8004fb4 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801115a:	6828      	ldr	r0, [r5, #0]
 801115c:	e73e      	b.n	8010fdc <HAL_TIM_PWM_ConfigChannel+0x230>
 801115e:	bf00      	nop
 8011160:	40010000 	.word	0x40010000
 8011164:	40000400 	.word	0x40000400
 8011168:	40001800 	.word	0x40001800
 801116c:	40010400 	.word	0x40010400
 8011170:	0802cc54 	.word	0x0802cc54

08011174 <TIM_TI1_SetConfig>:
{
 8011174:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011176:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011178:	4e1b      	ldr	r6, [pc, #108]	; (80111e8 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801117a:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801117e:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011180:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011182:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8011184:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011186:	d01d      	beq.n	80111c4 <TIM_TI1_SetConfig+0x50>
 8011188:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801118c:	d01a      	beq.n	80111c4 <TIM_TI1_SetConfig+0x50>
 801118e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8011192:	42b0      	cmp	r0, r6
 8011194:	d016      	beq.n	80111c4 <TIM_TI1_SetConfig+0x50>
 8011196:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801119a:	42b0      	cmp	r0, r6
 801119c:	d012      	beq.n	80111c4 <TIM_TI1_SetConfig+0x50>
 801119e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80111a2:	42b0      	cmp	r0, r6
 80111a4:	d00e      	beq.n	80111c4 <TIM_TI1_SetConfig+0x50>
 80111a6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80111aa:	42b0      	cmp	r0, r6
 80111ac:	d00a      	beq.n	80111c4 <TIM_TI1_SetConfig+0x50>
 80111ae:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80111b2:	42b0      	cmp	r0, r6
 80111b4:	d006      	beq.n	80111c4 <TIM_TI1_SetConfig+0x50>
 80111b6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80111ba:	42b0      	cmp	r0, r6
 80111bc:	d002      	beq.n	80111c4 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80111be:	f044 0201 	orr.w	r2, r4, #1
 80111c2:	e002      	b.n	80111ca <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80111c4:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80111c8:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80111ca:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80111cc:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80111d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80111d4:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80111d8:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80111da:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80111dc:	4313      	orrs	r3, r2
}
 80111de:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 80111e0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80111e2:	6201      	str	r1, [r0, #32]
}
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop
 80111e8:	40010000 	.word	0x40010000

080111ec <HAL_TIM_IC_ConfigChannel>:
{
 80111ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80111ee:	4ba8      	ldr	r3, [pc, #672]	; (8011490 <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 80111f0:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80111f2:	6801      	ldr	r1, [r0, #0]
{
 80111f4:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80111f6:	4fa7      	ldr	r7, [pc, #668]	; (8011494 <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 80111f8:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80111fa:	4299      	cmp	r1, r3
 80111fc:	bf18      	it	ne
 80111fe:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 8011202:	4aa5      	ldr	r2, [pc, #660]	; (8011498 <HAL_TIM_IC_ConfigChannel+0x2ac>)
 8011204:	bf14      	ite	ne
 8011206:	2301      	movne	r3, #1
 8011208:	2300      	moveq	r3, #0
 801120a:	42b9      	cmp	r1, r7
 801120c:	bf0c      	ite	eq
 801120e:	2300      	moveq	r3, #0
 8011210:	f003 0301 	andne.w	r3, r3, #1
 8011214:	4291      	cmp	r1, r2
 8011216:	bf0c      	ite	eq
 8011218:	2300      	moveq	r3, #0
 801121a:	f003 0301 	andne.w	r3, r3, #1
 801121e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011222:	4291      	cmp	r1, r2
 8011224:	bf0c      	ite	eq
 8011226:	2300      	moveq	r3, #0
 8011228:	f003 0301 	andne.w	r3, r3, #1
 801122c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011230:	4291      	cmp	r1, r2
 8011232:	bf0c      	ite	eq
 8011234:	2300      	moveq	r3, #0
 8011236:	f003 0301 	andne.w	r3, r3, #1
 801123a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801123e:	4291      	cmp	r1, r2
 8011240:	bf0c      	ite	eq
 8011242:	2300      	moveq	r3, #0
 8011244:	f003 0301 	andne.w	r3, r3, #1
 8011248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801124c:	4291      	cmp	r1, r2
 801124e:	bf0c      	ite	eq
 8011250:	2300      	moveq	r3, #0
 8011252:	f003 0301 	andne.w	r3, r3, #1
 8011256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801125a:	4291      	cmp	r1, r2
 801125c:	bf0c      	ite	eq
 801125e:	2300      	moveq	r3, #0
 8011260:	f003 0301 	andne.w	r3, r3, #1
 8011264:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8011268:	4291      	cmp	r1, r2
 801126a:	bf0c      	ite	eq
 801126c:	2300      	moveq	r3, #0
 801126e:	f003 0301 	andne.w	r3, r3, #1
 8011272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011276:	4291      	cmp	r1, r2
 8011278:	bf0c      	ite	eq
 801127a:	2300      	moveq	r3, #0
 801127c:	f003 0301 	andne.w	r3, r3, #1
 8011280:	b11b      	cbz	r3, 801128a <HAL_TIM_IC_ConfigChannel+0x9e>
 8011282:	4b86      	ldr	r3, [pc, #536]	; (801149c <HAL_TIM_IC_ConfigChannel+0x2b0>)
 8011284:	4299      	cmp	r1, r3
 8011286:	f040 8158 	bne.w	801153a <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 801128a:	6823      	ldr	r3, [r4, #0]
 801128c:	f033 0202 	bics.w	r2, r3, #2
 8011290:	d001      	beq.n	8011296 <HAL_TIM_IC_ConfigChannel+0xaa>
 8011292:	2b0a      	cmp	r3, #10
 8011294:	d11e      	bne.n	80112d4 <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8011296:	6863      	ldr	r3, [r4, #4]
 8011298:	3b01      	subs	r3, #1
 801129a:	2b02      	cmp	r3, #2
 801129c:	d823      	bhi.n	80112e6 <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 801129e:	68a3      	ldr	r3, [r4, #8]
 80112a0:	f033 030c 	bics.w	r3, r3, #12
 80112a4:	d128      	bne.n	80112f8 <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80112a6:	68e3      	ldr	r3, [r4, #12]
 80112a8:	2b0f      	cmp	r3, #15
 80112aa:	d82d      	bhi.n	8011308 <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 80112ac:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d032      	beq.n	801131a <HAL_TIM_IC_ConfigChannel+0x12e>
 80112b4:	2001      	movs	r0, #1
 80112b6:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80112ba:	b386      	cbz	r6, 801131e <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 80112bc:	2e04      	cmp	r6, #4
 80112be:	d042      	beq.n	8011346 <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 80112c0:	2e08      	cmp	r6, #8
 80112c2:	f000 80f3 	beq.w	80114ac <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 80112c6:	2e0c      	cmp	r6, #12
 80112c8:	f000 8095 	beq.w	80113f6 <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 80112cc:	2300      	movs	r3, #0
 80112ce:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80112d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80112d4:	f241 0141 	movw	r1, #4161	; 0x1041
 80112d8:	4871      	ldr	r0, [pc, #452]	; (80114a0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80112da:	f7f3 fe6b 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 80112de:	6863      	ldr	r3, [r4, #4]
 80112e0:	3b01      	subs	r3, #1
 80112e2:	2b02      	cmp	r3, #2
 80112e4:	d9db      	bls.n	801129e <HAL_TIM_IC_ConfigChannel+0xb2>
 80112e6:	f241 0142 	movw	r1, #4162	; 0x1042
 80112ea:	486d      	ldr	r0, [pc, #436]	; (80114a0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80112ec:	f7f3 fe62 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80112f0:	68a3      	ldr	r3, [r4, #8]
 80112f2:	f033 030c 	bics.w	r3, r3, #12
 80112f6:	d0d6      	beq.n	80112a6 <HAL_TIM_IC_ConfigChannel+0xba>
 80112f8:	f241 0143 	movw	r1, #4163	; 0x1043
 80112fc:	4868      	ldr	r0, [pc, #416]	; (80114a0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80112fe:	f7f3 fe59 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8011302:	68e3      	ldr	r3, [r4, #12]
 8011304:	2b0f      	cmp	r3, #15
 8011306:	d9d1      	bls.n	80112ac <HAL_TIM_IC_ConfigChannel+0xc0>
 8011308:	f241 0144 	movw	r1, #4164	; 0x1044
 801130c:	4864      	ldr	r0, [pc, #400]	; (80114a0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801130e:	f7f3 fe51 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(htim);
 8011312:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011316:	2b01      	cmp	r3, #1
 8011318:	d1cc      	bne.n	80112b4 <HAL_TIM_IC_ConfigChannel+0xc8>
 801131a:	2002      	movs	r0, #2
}
 801131c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 801131e:	e9d4 1200 	ldrd	r1, r2, [r4]
 8011322:	68e3      	ldr	r3, [r4, #12]
 8011324:	6828      	ldr	r0, [r5, #0]
 8011326:	f7ff ff25 	bl	8011174 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801132a:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801132c:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801132e:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8011330:	6999      	ldr	r1, [r3, #24]
 8011332:	f021 010c 	bic.w	r1, r1, #12
 8011336:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8011338:	699a      	ldr	r2, [r3, #24]
 801133a:	4322      	orrs	r2, r4
 801133c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 801133e:	2300      	movs	r3, #0
 8011340:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8011344:	e7c5      	b.n	80112d2 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011346:	682a      	ldr	r2, [r5, #0]
 8011348:	4b51      	ldr	r3, [pc, #324]	; (8011490 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 801134a:	4952      	ldr	r1, [pc, #328]	; (8011494 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 801134c:	429a      	cmp	r2, r3
 801134e:	bf18      	it	ne
 8011350:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8011354:	bf14      	ite	ne
 8011356:	2301      	movne	r3, #1
 8011358:	2300      	moveq	r3, #0
 801135a:	428a      	cmp	r2, r1
 801135c:	bf0c      	ite	eq
 801135e:	2300      	moveq	r3, #0
 8011360:	f003 0301 	andne.w	r3, r3, #1
 8011364:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011368:	428a      	cmp	r2, r1
 801136a:	bf0c      	ite	eq
 801136c:	2300      	moveq	r3, #0
 801136e:	f003 0301 	andne.w	r3, r3, #1
 8011372:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011376:	428a      	cmp	r2, r1
 8011378:	bf0c      	ite	eq
 801137a:	2300      	moveq	r3, #0
 801137c:	f003 0301 	andne.w	r3, r3, #1
 8011380:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8011384:	428a      	cmp	r2, r1
 8011386:	bf0c      	ite	eq
 8011388:	2300      	moveq	r3, #0
 801138a:	f003 0301 	andne.w	r3, r3, #1
 801138e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8011392:	428a      	cmp	r2, r1
 8011394:	bf0c      	ite	eq
 8011396:	2300      	moveq	r3, #0
 8011398:	f003 0301 	andne.w	r3, r3, #1
 801139c:	b11b      	cbz	r3, 80113a6 <HAL_TIM_IC_ConfigChannel+0x1ba>
 801139e:	4b41      	ldr	r3, [pc, #260]	; (80114a4 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 80113a0:	429a      	cmp	r2, r3
 80113a2:	f040 80d7 	bne.w	8011554 <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80113a6:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 80113a8:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80113aa:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80113ae:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 80113b0:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80113b4:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80113b6:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 80113b8:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80113ba:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80113bc:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80113be:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80113c2:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80113c6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80113ca:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80113ce:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 80113d0:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80113d2:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80113d4:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80113d8:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 80113da:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80113dc:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80113de:	6991      	ldr	r1, [r2, #24]
 80113e0:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80113e4:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80113e6:	6993      	ldr	r3, [r2, #24]
 80113e8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80113ec:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80113ee:	2300      	movs	r3, #0
 80113f0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80113f4:	e76d      	b.n	80112d2 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80113f6:	682b      	ldr	r3, [r5, #0]
 80113f8:	4a25      	ldr	r2, [pc, #148]	; (8011490 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 80113fa:	4926      	ldr	r1, [pc, #152]	; (8011494 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 80113fc:	4293      	cmp	r3, r2
 80113fe:	bf18      	it	ne
 8011400:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8011404:	bf14      	ite	ne
 8011406:	2201      	movne	r2, #1
 8011408:	2200      	moveq	r2, #0
 801140a:	428b      	cmp	r3, r1
 801140c:	bf0c      	ite	eq
 801140e:	2200      	moveq	r2, #0
 8011410:	f002 0201 	andne.w	r2, r2, #1
 8011414:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011418:	428b      	cmp	r3, r1
 801141a:	bf0c      	ite	eq
 801141c:	2200      	moveq	r2, #0
 801141e:	f002 0201 	andne.w	r2, r2, #1
 8011422:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011426:	428b      	cmp	r3, r1
 8011428:	bf0c      	ite	eq
 801142a:	2200      	moveq	r2, #0
 801142c:	f002 0201 	andne.w	r2, r2, #1
 8011430:	b142      	cbz	r2, 8011444 <HAL_TIM_IC_ConfigChannel+0x258>
 8011432:	4a1d      	ldr	r2, [pc, #116]	; (80114a8 <HAL_TIM_IC_ConfigChannel+0x2bc>)
 8011434:	4293      	cmp	r3, r2
 8011436:	d005      	beq.n	8011444 <HAL_TIM_IC_ConfigChannel+0x258>
 8011438:	f241 017a 	movw	r1, #4218	; 0x107a
 801143c:	4818      	ldr	r0, [pc, #96]	; (80114a0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801143e:	f7f3 fdb9 	bl	8004fb4 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 8011442:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011444:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 8011446:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011448:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801144c:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 801144e:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011452:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011454:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8011456:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011458:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801145a:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801145c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011460:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8011464:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8011468:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801146c:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 801146e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 8011470:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8011472:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011476:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8011478:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 801147a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801147c:	69d9      	ldr	r1, [r3, #28]
 801147e:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8011482:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8011484:	69da      	ldr	r2, [r3, #28]
 8011486:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 801148a:	61da      	str	r2, [r3, #28]
 801148c:	e71e      	b.n	80112cc <HAL_TIM_IC_ConfigChannel+0xe0>
 801148e:	bf00      	nop
 8011490:	40010000 	.word	0x40010000
 8011494:	40000400 	.word	0x40000400
 8011498:	40000800 	.word	0x40000800
 801149c:	40002000 	.word	0x40002000
 80114a0:	0802cc54 	.word	0x0802cc54
 80114a4:	40001800 	.word	0x40001800
 80114a8:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	4a2d      	ldr	r2, [pc, #180]	; (8011564 <HAL_TIM_IC_ConfigChannel+0x378>)
 80114b0:	492d      	ldr	r1, [pc, #180]	; (8011568 <HAL_TIM_IC_ConfigChannel+0x37c>)
 80114b2:	4293      	cmp	r3, r2
 80114b4:	bf18      	it	ne
 80114b6:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80114ba:	bf14      	ite	ne
 80114bc:	2201      	movne	r2, #1
 80114be:	2200      	moveq	r2, #0
 80114c0:	428b      	cmp	r3, r1
 80114c2:	bf0c      	ite	eq
 80114c4:	2200      	moveq	r2, #0
 80114c6:	f002 0201 	andne.w	r2, r2, #1
 80114ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80114ce:	428b      	cmp	r3, r1
 80114d0:	bf0c      	ite	eq
 80114d2:	2200      	moveq	r2, #0
 80114d4:	f002 0201 	andne.w	r2, r2, #1
 80114d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80114dc:	428b      	cmp	r3, r1
 80114de:	bf0c      	ite	eq
 80114e0:	2200      	moveq	r2, #0
 80114e2:	f002 0201 	andne.w	r2, r2, #1
 80114e6:	b112      	cbz	r2, 80114ee <HAL_TIM_IC_ConfigChannel+0x302>
 80114e8:	4a20      	ldr	r2, [pc, #128]	; (801156c <HAL_TIM_IC_ConfigChannel+0x380>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d12b      	bne.n	8011546 <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80114ee:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 80114f0:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80114f2:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80114f6:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 80114f8:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80114fc:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80114fe:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8011500:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8011502:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8011504:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8011506:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801150a:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 801150e:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8011510:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011514:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8011516:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011518:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 801151c:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801151e:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8011520:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8011522:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8011524:	69d9      	ldr	r1, [r3, #28]
 8011526:	f021 010c 	bic.w	r1, r1, #12
 801152a:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801152c:	69da      	ldr	r2, [r3, #28]
 801152e:	4322      	orrs	r2, r4
 8011530:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8011532:	2300      	movs	r3, #0
 8011534:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8011538:	e6cb      	b.n	80112d2 <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801153a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 801153e:	480c      	ldr	r0, [pc, #48]	; (8011570 <HAL_TIM_IC_ConfigChannel+0x384>)
 8011540:	f7f3 fd38 	bl	8004fb4 <assert_failed>
 8011544:	e6a1      	b.n	801128a <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011546:	f241 016a 	movw	r1, #4202	; 0x106a
 801154a:	4809      	ldr	r0, [pc, #36]	; (8011570 <HAL_TIM_IC_ConfigChannel+0x384>)
 801154c:	f7f3 fd32 	bl	8004fb4 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 8011550:	682b      	ldr	r3, [r5, #0]
 8011552:	e7cc      	b.n	80114ee <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011554:	f241 015a 	movw	r1, #4186	; 0x105a
 8011558:	4805      	ldr	r0, [pc, #20]	; (8011570 <HAL_TIM_IC_ConfigChannel+0x384>)
 801155a:	f7f3 fd2b 	bl	8004fb4 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 801155e:	682a      	ldr	r2, [r5, #0]
 8011560:	e721      	b.n	80113a6 <HAL_TIM_IC_ConfigChannel+0x1ba>
 8011562:	bf00      	nop
 8011564:	40010000 	.word	0x40010000
 8011568:	40000400 	.word	0x40000400
 801156c:	40010400 	.word	0x40010400
 8011570:	0802cc54 	.word	0x0802cc54

08011574 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8011574:	4b2b      	ldr	r3, [pc, #172]	; (8011624 <TIM_CCxChannelCmd+0xb0>)
 8011576:	4298      	cmp	r0, r3
{
 8011578:	b530      	push	{r4, r5, lr}
 801157a:	4604      	mov	r4, r0
 801157c:	b083      	sub	sp, #12
 801157e:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8011580:	d031      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 8011582:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011586:	d02e      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 8011588:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 801158c:	4298      	cmp	r0, r3
 801158e:	d02a      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 8011590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011594:	4298      	cmp	r0, r3
 8011596:	d026      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 8011598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801159c:	4298      	cmp	r0, r3
 801159e:	d022      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 80115a0:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 80115a4:	4298      	cmp	r0, r3
 80115a6:	d01e      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 80115a8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80115ac:	4298      	cmp	r0, r3
 80115ae:	d01a      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 80115b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80115b4:	4298      	cmp	r0, r3
 80115b6:	d016      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 80115b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80115bc:	4298      	cmp	r0, r3
 80115be:	d012      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 80115c0:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80115c4:	4298      	cmp	r0, r3
 80115c6:	d00e      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 80115c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80115cc:	4298      	cmp	r0, r3
 80115ce:	d00a      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 80115d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80115d4:	4298      	cmp	r0, r3
 80115d6:	d006      	beq.n	80115e6 <TIM_CCxChannelCmd+0x72>
 80115d8:	f641 6199 	movw	r1, #7833	; 0x1e99
 80115dc:	4812      	ldr	r0, [pc, #72]	; (8011628 <TIM_CCxChannelCmd+0xb4>)
 80115de:	9201      	str	r2, [sp, #4]
 80115e0:	f7f3 fce8 	bl	8004fb4 <assert_failed>
 80115e4:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 80115e6:	2d14      	cmp	r5, #20
 80115e8:	d90f      	bls.n	801160a <TIM_CCxChannelCmd+0x96>
 80115ea:	2d3c      	cmp	r5, #60	; 0x3c
 80115ec:	d111      	bne.n	8011612 <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80115ee:	f005 051f 	and.w	r5, r5, #31
 80115f2:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80115f4:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80115f6:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80115f8:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 80115fa:	ea23 0301 	bic.w	r3, r3, r1
 80115fe:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011600:	6a25      	ldr	r5, [r4, #32]
 8011602:	4315      	orrs	r5, r2
 8011604:	6225      	str	r5, [r4, #32]
}
 8011606:	b003      	add	sp, #12
 8011608:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 801160a:	4b08      	ldr	r3, [pc, #32]	; (801162c <TIM_CCxChannelCmd+0xb8>)
 801160c:	40eb      	lsrs	r3, r5
 801160e:	07db      	lsls	r3, r3, #31
 8011610:	d4ed      	bmi.n	80115ee <TIM_CCxChannelCmd+0x7a>
 8011612:	f641 619a 	movw	r1, #7834	; 0x1e9a
 8011616:	4804      	ldr	r0, [pc, #16]	; (8011628 <TIM_CCxChannelCmd+0xb4>)
 8011618:	9201      	str	r2, [sp, #4]
 801161a:	f7f3 fccb 	bl	8004fb4 <assert_failed>
 801161e:	9a01      	ldr	r2, [sp, #4]
 8011620:	e7e5      	b.n	80115ee <TIM_CCxChannelCmd+0x7a>
 8011622:	bf00      	nop
 8011624:	40010000 	.word	0x40010000
 8011628:	0802cc54 	.word	0x0802cc54
 801162c:	00111111 	.word	0x00111111

08011630 <HAL_TIM_IC_Start_DMA>:
{
 8011630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011634:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011636:	460d      	mov	r5, r1
{
 8011638:	4617      	mov	r7, r2
 801163a:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801163c:	2900      	cmp	r1, #0
 801163e:	f040 8087 	bne.w	8011750 <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011642:	6803      	ldr	r3, [r0, #0]
 8011644:	4aa4      	ldr	r2, [pc, #656]	; (80118d8 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011646:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801164a:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801164c:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011650:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011652:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011656:	d037      	beq.n	80116c8 <HAL_TIM_IC_Start_DMA+0x98>
 8011658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801165c:	d034      	beq.n	80116c8 <HAL_TIM_IC_Start_DMA+0x98>
 801165e:	4a9f      	ldr	r2, [pc, #636]	; (80118dc <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d031      	beq.n	80116c8 <HAL_TIM_IC_Start_DMA+0x98>
 8011664:	4a9e      	ldr	r2, [pc, #632]	; (80118e0 <HAL_TIM_IC_Start_DMA+0x2b0>)
 8011666:	4293      	cmp	r3, r2
 8011668:	d066      	beq.n	8011738 <HAL_TIM_IC_Start_DMA+0x108>
 801166a:	4a9e      	ldr	r2, [pc, #632]	; (80118e4 <HAL_TIM_IC_Start_DMA+0x2b4>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d063      	beq.n	8011738 <HAL_TIM_IC_Start_DMA+0x108>
 8011670:	4a9d      	ldr	r2, [pc, #628]	; (80118e8 <HAL_TIM_IC_Start_DMA+0x2b8>)
 8011672:	4293      	cmp	r3, r2
 8011674:	f040 80f7 	bne.w	8011866 <HAL_TIM_IC_Start_DMA+0x236>
 8011678:	2d14      	cmp	r5, #20
 801167a:	d862      	bhi.n	8011742 <HAL_TIM_IC_Start_DMA+0x112>
 801167c:	4a9b      	ldr	r2, [pc, #620]	; (80118ec <HAL_TIM_IC_Start_DMA+0x2bc>)
 801167e:	40ea      	lsrs	r2, r5
 8011680:	07d2      	lsls	r2, r2, #31
 8011682:	d55e      	bpl.n	8011742 <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8011684:	4994      	ldr	r1, [pc, #592]	; (80118d8 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8011686:	4a95      	ldr	r2, [pc, #596]	; (80118dc <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011688:	428b      	cmp	r3, r1
 801168a:	bf18      	it	ne
 801168c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8011690:	bf14      	ite	ne
 8011692:	2101      	movne	r1, #1
 8011694:	2100      	moveq	r1, #0
 8011696:	4293      	cmp	r3, r2
 8011698:	bf0c      	ite	eq
 801169a:	2100      	moveq	r1, #0
 801169c:	f001 0101 	andne.w	r1, r1, #1
 80116a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80116a4:	4293      	cmp	r3, r2
 80116a6:	bf0c      	ite	eq
 80116a8:	2100      	moveq	r1, #0
 80116aa:	f001 0101 	andne.w	r1, r1, #1
 80116ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80116b2:	4293      	cmp	r3, r2
 80116b4:	bf0c      	ite	eq
 80116b6:	2100      	moveq	r1, #0
 80116b8:	f001 0101 	andne.w	r1, r1, #1
 80116bc:	b121      	cbz	r1, 80116c8 <HAL_TIM_IC_Start_DMA+0x98>
 80116be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80116c2:	4293      	cmp	r3, r2
 80116c4:	f040 80c5 	bne.w	8011852 <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80116c8:	2e02      	cmp	r6, #2
 80116ca:	d06a      	beq.n	80117a2 <HAL_TIM_IC_Start_DMA+0x172>
 80116cc:	f1b9 0f02 	cmp.w	r9, #2
 80116d0:	d067      	beq.n	80117a2 <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80116d2:	2e01      	cmp	r6, #1
 80116d4:	d106      	bne.n	80116e4 <HAL_TIM_IC_Start_DMA+0xb4>
 80116d6:	f1b9 0f01 	cmp.w	r9, #1
 80116da:	d103      	bne.n	80116e4 <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 80116dc:	b92f      	cbnz	r7, 80116ea <HAL_TIM_IC_Start_DMA+0xba>
 80116de:	f1b8 0f00 	cmp.w	r8, #0
 80116e2:	d002      	beq.n	80116ea <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 80116e4:	2001      	movs	r0, #1
}
 80116e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80116ea:	2302      	movs	r3, #2
 80116ec:	2d00      	cmp	r5, #0
 80116ee:	d05b      	beq.n	80117a8 <HAL_TIM_IC_Start_DMA+0x178>
 80116f0:	2d04      	cmp	r5, #4
 80116f2:	f000 8119 	beq.w	8011928 <HAL_TIM_IC_Start_DMA+0x2f8>
 80116f6:	2d08      	cmp	r5, #8
 80116f8:	f000 8141 	beq.w	801197e <HAL_TIM_IC_Start_DMA+0x34e>
 80116fc:	2d0c      	cmp	r5, #12
 80116fe:	f000 815d 	beq.w	80119bc <HAL_TIM_IC_Start_DMA+0x38c>
 8011702:	2d10      	cmp	r5, #16
 8011704:	f000 812f 	beq.w	8011966 <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011708:	4629      	mov	r1, r5
  switch (Channel)
 801170a:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801170c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011710:	2201      	movs	r2, #1
 8011712:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011714:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011718:	f7ff ff2c 	bl	8011574 <TIM_CCxChannelCmd>
  switch (Channel)
 801171c:	2d08      	cmp	r5, #8
 801171e:	f200 812b 	bhi.w	8011978 <HAL_TIM_IC_Start_DMA+0x348>
 8011722:	e8df f015 	tbh	[pc, r5, lsl #1]
 8011726:	010a      	.short	0x010a
 8011728:	01290129 	.word	0x01290129
 801172c:	01350129 	.word	0x01350129
 8011730:	01290129 	.word	0x01290129
 8011734:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011738:	f035 0204 	bics.w	r2, r5, #4
 801173c:	d0a2      	beq.n	8011684 <HAL_TIM_IC_Start_DMA+0x54>
 801173e:	2a08      	cmp	r2, #8
 8011740:	d0a0      	beq.n	8011684 <HAL_TIM_IC_Start_DMA+0x54>
 8011742:	f640 114a 	movw	r1, #2378	; 0x94a
 8011746:	486a      	ldr	r0, [pc, #424]	; (80118f0 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8011748:	f7f3 fc34 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 801174c:	6823      	ldr	r3, [r4, #0]
 801174e:	e799      	b.n	8011684 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011750:	2904      	cmp	r1, #4
 8011752:	f000 8090 	beq.w	8011876 <HAL_TIM_IC_Start_DMA+0x246>
 8011756:	2908      	cmp	r1, #8
 8011758:	f000 80e0 	beq.w	801191c <HAL_TIM_IC_Start_DMA+0x2ec>
 801175c:	290c      	cmp	r1, #12
 801175e:	d07e      	beq.n	801185e <HAL_TIM_IC_Start_DMA+0x22e>
 8011760:	2910      	cmp	r1, #16
 8011762:	f000 814a 	beq.w	80119fa <HAL_TIM_IC_Start_DMA+0x3ca>
 8011766:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 801176a:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801176c:	6823      	ldr	r3, [r4, #0]
 801176e:	4a5a      	ldr	r2, [pc, #360]	; (80118d8 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011770:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011774:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011776:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801177a:	f000 8098 	beq.w	80118ae <HAL_TIM_IC_Start_DMA+0x27e>
 801177e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011782:	f000 8088 	beq.w	8011896 <HAL_TIM_IC_Start_DMA+0x266>
 8011786:	4a55      	ldr	r2, [pc, #340]	; (80118dc <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011788:	4293      	cmp	r3, r2
 801178a:	f47f af6b 	bne.w	8011664 <HAL_TIM_IC_Start_DMA+0x34>
 801178e:	f035 020c 	bics.w	r2, r5, #12
 8011792:	d099      	beq.n	80116c8 <HAL_TIM_IC_Start_DMA+0x98>
 8011794:	4a57      	ldr	r2, [pc, #348]	; (80118f4 <HAL_TIM_IC_Start_DMA+0x2c4>)
 8011796:	4293      	cmp	r3, r2
 8011798:	d1d3      	bne.n	8011742 <HAL_TIM_IC_Start_DMA+0x112>
 801179a:	2d00      	cmp	r5, #0
 801179c:	f43f af72 	beq.w	8011684 <HAL_TIM_IC_Start_DMA+0x54>
 80117a0:	e7cf      	b.n	8011742 <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 80117a2:	2002      	movs	r0, #2
}
 80117a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80117a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80117ac:	4629      	mov	r1, r5
 80117ae:	2201      	movs	r2, #1
 80117b0:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80117b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80117b6:	f7ff fedd 	bl	8011574 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80117ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80117bc:	494e      	ldr	r1, [pc, #312]	; (80118f8 <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80117be:	4643      	mov	r3, r8
 80117c0:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80117c2:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80117c4:	494d      	ldr	r1, [pc, #308]	; (80118fc <HAL_TIM_IC_Start_DMA+0x2cc>)
 80117c6:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80117c8:	494d      	ldr	r1, [pc, #308]	; (8011900 <HAL_TIM_IC_Start_DMA+0x2d0>)
 80117ca:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80117cc:	6821      	ldr	r1, [r4, #0]
 80117ce:	3134      	adds	r1, #52	; 0x34
 80117d0:	f7f7 feb8 	bl	8009544 <HAL_DMA_Start_IT>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	d185      	bne.n	80116e4 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80117d8:	6822      	ldr	r2, [r4, #0]
 80117da:	68d3      	ldr	r3, [r2, #12]
 80117dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80117e0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117e2:	4b3d      	ldr	r3, [pc, #244]	; (80118d8 <HAL_TIM_IC_Start_DMA+0x2a8>)
 80117e4:	4c3d      	ldr	r4, [pc, #244]	; (80118dc <HAL_TIM_IC_Start_DMA+0x2ac>)
 80117e6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80117ea:	bf18      	it	ne
 80117ec:	429a      	cmpne	r2, r3
 80117ee:	493c      	ldr	r1, [pc, #240]	; (80118e0 <HAL_TIM_IC_Start_DMA+0x2b0>)
 80117f0:	bf0c      	ite	eq
 80117f2:	2301      	moveq	r3, #1
 80117f4:	2300      	movne	r3, #0
 80117f6:	42a2      	cmp	r2, r4
 80117f8:	bf08      	it	eq
 80117fa:	f043 0301 	orreq.w	r3, r3, #1
 80117fe:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8011802:	428a      	cmp	r2, r1
 8011804:	bf08      	it	eq
 8011806:	f043 0301 	orreq.w	r3, r3, #1
 801180a:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 801180e:	42a2      	cmp	r2, r4
 8011810:	bf08      	it	eq
 8011812:	f043 0301 	orreq.w	r3, r3, #1
 8011816:	428a      	cmp	r2, r1
 8011818:	bf08      	it	eq
 801181a:	f043 0301 	orreq.w	r3, r3, #1
 801181e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8011822:	428a      	cmp	r2, r1
 8011824:	bf08      	it	eq
 8011826:	f043 0301 	orreq.w	r3, r3, #1
 801182a:	b913      	cbnz	r3, 8011832 <HAL_TIM_IC_Start_DMA+0x202>
 801182c:	4b35      	ldr	r3, [pc, #212]	; (8011904 <HAL_TIM_IC_Start_DMA+0x2d4>)
 801182e:	429a      	cmp	r2, r3
 8011830:	d109      	bne.n	8011846 <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011832:	6891      	ldr	r1, [r2, #8]
 8011834:	4b34      	ldr	r3, [pc, #208]	; (8011908 <HAL_TIM_IC_Start_DMA+0x2d8>)
 8011836:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011838:	2b06      	cmp	r3, #6
 801183a:	f43f af54 	beq.w	80116e6 <HAL_TIM_IC_Start_DMA+0xb6>
 801183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011842:	f43f af50 	beq.w	80116e6 <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 8011846:	6813      	ldr	r3, [r2, #0]
 8011848:	f043 0301 	orr.w	r3, r3, #1
 801184c:	6013      	str	r3, [r2, #0]
}
 801184e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8011852:	f640 114b 	movw	r1, #2379	; 0x94b
 8011856:	4826      	ldr	r0, [pc, #152]	; (80118f0 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8011858:	f7f3 fbac 	bl	8004fb4 <assert_failed>
 801185c:	e734      	b.n	80116c8 <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801185e:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 8011862:	b2f6      	uxtb	r6, r6
 8011864:	e782      	b.n	801176c <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011866:	4a29      	ldr	r2, [pc, #164]	; (801190c <HAL_TIM_IC_Start_DMA+0x2dc>)
 8011868:	4293      	cmp	r3, r2
 801186a:	d128      	bne.n	80118be <HAL_TIM_IC_Start_DMA+0x28e>
 801186c:	f035 0204 	bics.w	r2, r5, #4
 8011870:	f47f af67 	bne.w	8011742 <HAL_TIM_IC_Start_DMA+0x112>
 8011874:	e706      	b.n	8011684 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011876:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801187a:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801187e:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011880:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011882:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011886:	4a14      	ldr	r2, [pc, #80]	; (80118d8 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8011888:	4293      	cmp	r3, r2
 801188a:	f43f af1d 	beq.w	80116c8 <HAL_TIM_IC_Start_DMA+0x98>
 801188e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011892:	f47f af78 	bne.w	8011786 <HAL_TIM_IC_Start_DMA+0x156>
 8011896:	f035 020c 	bics.w	r2, r5, #12
 801189a:	f43f af15 	beq.w	80116c8 <HAL_TIM_IC_Start_DMA+0x98>
 801189e:	4a1c      	ldr	r2, [pc, #112]	; (8011910 <HAL_TIM_IC_Start_DMA+0x2e0>)
 80118a0:	4293      	cmp	r3, r2
 80118a2:	f47f af77 	bne.w	8011794 <HAL_TIM_IC_Start_DMA+0x164>
 80118a6:	2d00      	cmp	r5, #0
 80118a8:	f43f aeec 	beq.w	8011684 <HAL_TIM_IC_Start_DMA+0x54>
 80118ac:	e749      	b.n	8011742 <HAL_TIM_IC_Start_DMA+0x112>
 80118ae:	f025 0204 	bic.w	r2, r5, #4
 80118b2:	2a08      	cmp	r2, #8
 80118b4:	f43f af08 	beq.w	80116c8 <HAL_TIM_IC_Start_DMA+0x98>
 80118b8:	2a10      	cmp	r2, #16
 80118ba:	f43f af05 	beq.w	80116c8 <HAL_TIM_IC_Start_DMA+0x98>
 80118be:	4a15      	ldr	r2, [pc, #84]	; (8011914 <HAL_TIM_IC_Start_DMA+0x2e4>)
 80118c0:	4293      	cmp	r3, r2
 80118c2:	f43f af6a 	beq.w	801179a <HAL_TIM_IC_Start_DMA+0x16a>
 80118c6:	4a14      	ldr	r2, [pc, #80]	; (8011918 <HAL_TIM_IC_Start_DMA+0x2e8>)
 80118c8:	4293      	cmp	r3, r2
 80118ca:	f43f af66 	beq.w	801179a <HAL_TIM_IC_Start_DMA+0x16a>
 80118ce:	4a0d      	ldr	r2, [pc, #52]	; (8011904 <HAL_TIM_IC_Start_DMA+0x2d4>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d0cb      	beq.n	801186c <HAL_TIM_IC_Start_DMA+0x23c>
 80118d4:	e7e3      	b.n	801189e <HAL_TIM_IC_Start_DMA+0x26e>
 80118d6:	bf00      	nop
 80118d8:	40010000 	.word	0x40010000
 80118dc:	40000400 	.word	0x40000400
 80118e0:	40000800 	.word	0x40000800
 80118e4:	40000c00 	.word	0x40000c00
 80118e8:	40010400 	.word	0x40010400
 80118ec:	00111111 	.word	0x00111111
 80118f0:	0802cc54 	.word	0x0802cc54
 80118f4:	40002000 	.word	0x40002000
 80118f8:	0800ff61 	.word	0x0800ff61
 80118fc:	0800fff9 	.word	0x0800fff9
 8011900:	080101dd 	.word	0x080101dd
 8011904:	40001800 	.word	0x40001800
 8011908:	00010007 	.word	0x00010007
 801190c:	40014000 	.word	0x40014000
 8011910:	40001c00 	.word	0x40001c00
 8011914:	40014400 	.word	0x40014400
 8011918:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801191c:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011920:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011924:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011926:	e7ab      	b.n	8011880 <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011928:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801192c:	4629      	mov	r1, r5
 801192e:	2201      	movs	r2, #1
 8011930:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011936:	f7ff fe1d 	bl	8011574 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 801193a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 801193c:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 801193e:	4931      	ldr	r1, [pc, #196]	; (8011a04 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8011940:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8011942:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011944:	4930      	ldr	r1, [pc, #192]	; (8011a08 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8011946:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8011948:	4930      	ldr	r1, [pc, #192]	; (8011a0c <HAL_TIM_IC_Start_DMA+0x3dc>)
 801194a:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 801194c:	6821      	ldr	r1, [r4, #0]
 801194e:	3138      	adds	r1, #56	; 0x38
 8011950:	f7f7 fdf8 	bl	8009544 <HAL_DMA_Start_IT>
 8011954:	2800      	cmp	r0, #0
 8011956:	f47f aec5 	bne.w	80116e4 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801195a:	6822      	ldr	r2, [r4, #0]
 801195c:	68d3      	ldr	r3, [r2, #12]
 801195e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011962:	60d3      	str	r3, [r2, #12]
      break;
 8011964:	e73d      	b.n	80117e2 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011966:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801196a:	2201      	movs	r2, #1
 801196c:	4629      	mov	r1, r5
 801196e:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011970:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011974:	f7ff fdfe 	bl	8011574 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011978:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 801197a:	2001      	movs	r0, #1
 801197c:	e731      	b.n	80117e2 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801197e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011982:	4629      	mov	r1, r5
 8011984:	2201      	movs	r2, #1
 8011986:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011988:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801198c:	f7ff fdf2 	bl	8011574 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011990:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8011992:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011994:	491b      	ldr	r1, [pc, #108]	; (8011a04 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8011996:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011998:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801199a:	491b      	ldr	r1, [pc, #108]	; (8011a08 <HAL_TIM_IC_Start_DMA+0x3d8>)
 801199c:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801199e:	491b      	ldr	r1, [pc, #108]	; (8011a0c <HAL_TIM_IC_Start_DMA+0x3dc>)
 80119a0:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80119a2:	6821      	ldr	r1, [r4, #0]
 80119a4:	313c      	adds	r1, #60	; 0x3c
 80119a6:	f7f7 fdcd 	bl	8009544 <HAL_DMA_Start_IT>
 80119aa:	2800      	cmp	r0, #0
 80119ac:	f47f ae9a 	bne.w	80116e4 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80119b0:	6822      	ldr	r2, [r4, #0]
 80119b2:	68d3      	ldr	r3, [r2, #12]
 80119b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80119b8:	60d3      	str	r3, [r2, #12]
      break;
 80119ba:	e712      	b.n	80117e2 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80119bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80119c0:	4629      	mov	r1, r5
 80119c2:	2201      	movs	r2, #1
 80119c4:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80119c6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80119ca:	f7ff fdd3 	bl	8011574 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80119ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80119d0:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80119d2:	490c      	ldr	r1, [pc, #48]	; (8011a04 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80119d4:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80119d6:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80119d8:	490b      	ldr	r1, [pc, #44]	; (8011a08 <HAL_TIM_IC_Start_DMA+0x3d8>)
 80119da:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80119dc:	490b      	ldr	r1, [pc, #44]	; (8011a0c <HAL_TIM_IC_Start_DMA+0x3dc>)
 80119de:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80119e0:	6821      	ldr	r1, [r4, #0]
 80119e2:	3140      	adds	r1, #64	; 0x40
 80119e4:	f7f7 fdae 	bl	8009544 <HAL_DMA_Start_IT>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	f47f ae7b 	bne.w	80116e4 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80119ee:	6822      	ldr	r2, [r4, #0]
 80119f0:	68d3      	ldr	r3, [r2, #12]
 80119f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80119f6:	60d3      	str	r3, [r2, #12]
      break;
 80119f8:	e6f3      	b.n	80117e2 <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80119fa:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 80119fe:	b2f6      	uxtb	r6, r6
 8011a00:	e6b4      	b.n	801176c <HAL_TIM_IC_Start_DMA+0x13c>
 8011a02:	bf00      	nop
 8011a04:	0800ff61 	.word	0x0800ff61
 8011a08:	0800fff9 	.word	0x0800fff9
 8011a0c:	080101dd 	.word	0x080101dd

08011a10 <HAL_TIM_IC_Stop_DMA>:
{
 8011a10:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011a12:	4b82      	ldr	r3, [pc, #520]	; (8011c1c <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 8011a14:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011a16:	6800      	ldr	r0, [r0, #0]
{
 8011a18:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011a1a:	4298      	cmp	r0, r3
 8011a1c:	f000 80cc 	beq.w	8011bb8 <HAL_TIM_IC_Stop_DMA+0x1a8>
 8011a20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011a24:	d056      	beq.n	8011ad4 <HAL_TIM_IC_Stop_DMA+0xc4>
 8011a26:	4b7e      	ldr	r3, [pc, #504]	; (8011c20 <HAL_TIM_IC_Stop_DMA+0x210>)
 8011a28:	4298      	cmp	r0, r3
 8011a2a:	d053      	beq.n	8011ad4 <HAL_TIM_IC_Stop_DMA+0xc4>
 8011a2c:	4b7d      	ldr	r3, [pc, #500]	; (8011c24 <HAL_TIM_IC_Stop_DMA+0x214>)
 8011a2e:	4298      	cmp	r0, r3
 8011a30:	d050      	beq.n	8011ad4 <HAL_TIM_IC_Stop_DMA+0xc4>
 8011a32:	4b7d      	ldr	r3, [pc, #500]	; (8011c28 <HAL_TIM_IC_Stop_DMA+0x218>)
 8011a34:	4298      	cmp	r0, r3
 8011a36:	d04d      	beq.n	8011ad4 <HAL_TIM_IC_Stop_DMA+0xc4>
 8011a38:	4b7c      	ldr	r3, [pc, #496]	; (8011c2c <HAL_TIM_IC_Stop_DMA+0x21c>)
 8011a3a:	4298      	cmp	r0, r3
 8011a3c:	f000 80bc 	beq.w	8011bb8 <HAL_TIM_IC_Stop_DMA+0x1a8>
 8011a40:	4b7b      	ldr	r3, [pc, #492]	; (8011c30 <HAL_TIM_IC_Stop_DMA+0x220>)
 8011a42:	4298      	cmp	r0, r3
 8011a44:	d00c      	beq.n	8011a60 <HAL_TIM_IC_Stop_DMA+0x50>
 8011a46:	4b7b      	ldr	r3, [pc, #492]	; (8011c34 <HAL_TIM_IC_Stop_DMA+0x224>)
 8011a48:	4298      	cmp	r0, r3
 8011a4a:	f000 80d9 	beq.w	8011c00 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8011a4e:	4b7a      	ldr	r3, [pc, #488]	; (8011c38 <HAL_TIM_IC_Stop_DMA+0x228>)
 8011a50:	4298      	cmp	r0, r3
 8011a52:	f000 80d5 	beq.w	8011c00 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8011a56:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8011a5a:	4298      	cmp	r0, r3
 8011a5c:	f040 80c9 	bne.w	8011bf2 <HAL_TIM_IC_Stop_DMA+0x1e2>
 8011a60:	f035 0304 	bics.w	r3, r5, #4
 8011a64:	f000 80cf 	beq.w	8011c06 <HAL_TIM_IC_Stop_DMA+0x1f6>
 8011a68:	4874      	ldr	r0, [pc, #464]	; (8011c3c <HAL_TIM_IC_Stop_DMA+0x22c>)
 8011a6a:	f640 11e5 	movw	r1, #2533	; 0x9e5
 8011a6e:	f7f3 faa1 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8011a72:	6820      	ldr	r0, [r4, #0]
 8011a74:	4b69      	ldr	r3, [pc, #420]	; (8011c1c <HAL_TIM_IC_Stop_DMA+0x20c>)
 8011a76:	4a6a      	ldr	r2, [pc, #424]	; (8011c20 <HAL_TIM_IC_Stop_DMA+0x210>)
 8011a78:	4298      	cmp	r0, r3
 8011a7a:	bf18      	it	ne
 8011a7c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011a80:	bf14      	ite	ne
 8011a82:	2301      	movne	r3, #1
 8011a84:	2300      	moveq	r3, #0
 8011a86:	4290      	cmp	r0, r2
 8011a88:	bf0c      	ite	eq
 8011a8a:	2300      	moveq	r3, #0
 8011a8c:	f003 0301 	andne.w	r3, r3, #1
 8011a90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011a94:	4290      	cmp	r0, r2
 8011a96:	bf0c      	ite	eq
 8011a98:	2300      	moveq	r3, #0
 8011a9a:	f003 0301 	andne.w	r3, r3, #1
 8011a9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011aa2:	4290      	cmp	r0, r2
 8011aa4:	bf0c      	ite	eq
 8011aa6:	2300      	moveq	r3, #0
 8011aa8:	f003 0301 	andne.w	r3, r3, #1
 8011aac:	b11b      	cbz	r3, 8011ab6 <HAL_TIM_IC_Stop_DMA+0xa6>
 8011aae:	4b5f      	ldr	r3, [pc, #380]	; (8011c2c <HAL_TIM_IC_Stop_DMA+0x21c>)
 8011ab0:	4298      	cmp	r0, r3
 8011ab2:	f040 80a8 	bne.w	8011c06 <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	4629      	mov	r1, r5
 8011aba:	f7ff fd5b 	bl	8011574 <TIM_CCxChannelCmd>
  switch (Channel)
 8011abe:	2d0c      	cmp	r5, #12
 8011ac0:	d80c      	bhi.n	8011adc <HAL_TIM_IC_Stop_DMA+0xcc>
 8011ac2:	e8df f005 	tbb	[pc, r5]
 8011ac6:	0b0d      	.short	0x0b0d
 8011ac8:	0b640b0b 	.word	0x0b640b0b
 8011acc:	0b4a0b0b 	.word	0x0b4a0b0b
 8011ad0:	0b0b      	.short	0x0b0b
 8011ad2:	22          	.byte	0x22
 8011ad3:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011ad4:	f035 030c 	bics.w	r3, r5, #12
 8011ad8:	d1c6      	bne.n	8011a68 <HAL_TIM_IC_Stop_DMA+0x58>
 8011ada:	e7ec      	b.n	8011ab6 <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8011adc:	2001      	movs	r0, #1
}
 8011ade:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011ae0:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011ae4:	68d3      	ldr	r3, [r2, #12]
 8011ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011aea:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011aec:	f7f7 fdce 	bl	800968c <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011af0:	6823      	ldr	r3, [r4, #0]
 8011af2:	f241 1211 	movw	r2, #4369	; 0x1111
 8011af6:	6a19      	ldr	r1, [r3, #32]
 8011af8:	4211      	tst	r1, r2
 8011afa:	d06c      	beq.n	8011bd6 <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011afc:	2301      	movs	r3, #1
 8011afe:	2000      	movs	r0, #0
 8011b00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8011b08:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011b0a:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011b0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011b0e:	68d3      	ldr	r3, [r2, #12]
 8011b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b14:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011b16:	f7f7 fdb9 	bl	800968c <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011b1a:	6823      	ldr	r3, [r4, #0]
 8011b1c:	f241 1211 	movw	r2, #4369	; 0x1111
 8011b20:	6a19      	ldr	r1, [r3, #32]
 8011b22:	4211      	tst	r1, r2
 8011b24:	d161      	bne.n	8011bea <HAL_TIM_IC_Stop_DMA+0x1da>
 8011b26:	6a19      	ldr	r1, [r3, #32]
 8011b28:	f240 4244 	movw	r2, #1092	; 0x444
 8011b2c:	4211      	tst	r1, r2
 8011b2e:	d15c      	bne.n	8011bea <HAL_TIM_IC_Stop_DMA+0x1da>
 8011b30:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b32:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 8011b34:	f022 0201 	bic.w	r2, r2, #1
 8011b38:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b3a:	d036      	beq.n	8011baa <HAL_TIM_IC_Stop_DMA+0x19a>
 8011b3c:	2d08      	cmp	r5, #8
 8011b3e:	d01f      	beq.n	8011b80 <HAL_TIM_IC_Stop_DMA+0x170>
 8011b40:	2d0c      	cmp	r5, #12
 8011b42:	d052      	beq.n	8011bea <HAL_TIM_IC_Stop_DMA+0x1da>
 8011b44:	2d10      	cmp	r5, #16
 8011b46:	f04f 0301 	mov.w	r3, #1
 8011b4a:	d063      	beq.n	8011c14 <HAL_TIM_IC_Stop_DMA+0x204>
 8011b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b50:	2301      	movs	r3, #1
 8011b52:	2000      	movs	r0, #0
 8011b54:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 8011b58:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011b5a:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011b5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011b5e:	68d3      	ldr	r3, [r2, #12]
 8011b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b64:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011b66:	f7f7 fd91 	bl	800968c <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011b6a:	6823      	ldr	r3, [r4, #0]
 8011b6c:	f241 1211 	movw	r2, #4369	; 0x1111
 8011b70:	6a19      	ldr	r1, [r3, #32]
 8011b72:	4211      	tst	r1, r2
 8011b74:	d104      	bne.n	8011b80 <HAL_TIM_IC_Stop_DMA+0x170>
 8011b76:	6a19      	ldr	r1, [r3, #32]
 8011b78:	f240 4244 	movw	r2, #1092	; 0x444
 8011b7c:	4211      	tst	r1, r2
 8011b7e:	d0d7      	beq.n	8011b30 <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b80:	2301      	movs	r3, #1
 8011b82:	2000      	movs	r0, #0
 8011b84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b88:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8011b8c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011b8e:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011b90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011b92:	68d3      	ldr	r3, [r2, #12]
 8011b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011b98:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011b9a:	f7f7 fd77 	bl	800968c <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	f241 1211 	movw	r2, #4369	; 0x1111
 8011ba4:	6a19      	ldr	r1, [r3, #32]
 8011ba6:	4211      	tst	r1, r2
 8011ba8:	d00f      	beq.n	8011bca <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011baa:	2301      	movs	r3, #1
 8011bac:	2000      	movs	r0, #0
 8011bae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8011bb6:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011bb8:	2d14      	cmp	r5, #20
 8011bba:	f63f af55 	bhi.w	8011a68 <HAL_TIM_IC_Stop_DMA+0x58>
 8011bbe:	4b20      	ldr	r3, [pc, #128]	; (8011c40 <HAL_TIM_IC_Stop_DMA+0x230>)
 8011bc0:	40eb      	lsrs	r3, r5
 8011bc2:	07db      	lsls	r3, r3, #31
 8011bc4:	f53f af77 	bmi.w	8011ab6 <HAL_TIM_IC_Stop_DMA+0xa6>
 8011bc8:	e74e      	b.n	8011a68 <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 8011bca:	6a19      	ldr	r1, [r3, #32]
 8011bcc:	f240 4244 	movw	r2, #1092	; 0x444
 8011bd0:	4211      	tst	r1, r2
 8011bd2:	d0ad      	beq.n	8011b30 <HAL_TIM_IC_Stop_DMA+0x120>
 8011bd4:	e7e9      	b.n	8011baa <HAL_TIM_IC_Stop_DMA+0x19a>
 8011bd6:	6a19      	ldr	r1, [r3, #32]
 8011bd8:	f240 4244 	movw	r2, #1092	; 0x444
 8011bdc:	4211      	tst	r1, r2
 8011bde:	d18d      	bne.n	8011afc <HAL_TIM_IC_Stop_DMA+0xec>
 8011be0:	681a      	ldr	r2, [r3, #0]
 8011be2:	f022 0201 	bic.w	r2, r2, #1
 8011be6:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011be8:	e788      	b.n	8011afc <HAL_TIM_IC_Stop_DMA+0xec>
 8011bea:	2301      	movs	r3, #1
 8011bec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011bf0:	e7ae      	b.n	8011b50 <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011bf2:	4b14      	ldr	r3, [pc, #80]	; (8011c44 <HAL_TIM_IC_Stop_DMA+0x234>)
 8011bf4:	4298      	cmp	r0, r3
 8011bf6:	d003      	beq.n	8011c00 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8011bf8:	4b13      	ldr	r3, [pc, #76]	; (8011c48 <HAL_TIM_IC_Stop_DMA+0x238>)
 8011bfa:	4298      	cmp	r0, r3
 8011bfc:	f47f af34 	bne.w	8011a68 <HAL_TIM_IC_Stop_DMA+0x58>
 8011c00:	2d00      	cmp	r5, #0
 8011c02:	f47f af31 	bne.w	8011a68 <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8011c06:	480d      	ldr	r0, [pc, #52]	; (8011c3c <HAL_TIM_IC_Stop_DMA+0x22c>)
 8011c08:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8011c0c:	f7f3 f9d2 	bl	8004fb4 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011c10:	6820      	ldr	r0, [r4, #0]
 8011c12:	e750      	b.n	8011ab6 <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c18:	e79a      	b.n	8011b50 <HAL_TIM_IC_Stop_DMA+0x140>
 8011c1a:	bf00      	nop
 8011c1c:	40010000 	.word	0x40010000
 8011c20:	40000400 	.word	0x40000400
 8011c24:	40000800 	.word	0x40000800
 8011c28:	40000c00 	.word	0x40000c00
 8011c2c:	40010400 	.word	0x40010400
 8011c30:	40014000 	.word	0x40014000
 8011c34:	40014400 	.word	0x40014400
 8011c38:	40014800 	.word	0x40014800
 8011c3c:	0802cc54 	.word	0x0802cc54
 8011c40:	00111111 	.word	0x00111111
 8011c44:	40001c00 	.word	0x40001c00
 8011c48:	40002000 	.word	0x40002000

08011c4c <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011c4c:	6802      	ldr	r2, [r0, #0]
{
 8011c4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011c52:	4b6d      	ldr	r3, [pc, #436]	; (8011e08 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 8011c54:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011c56:	4f6d      	ldr	r7, [pc, #436]	; (8011e0c <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 8011c58:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	bf18      	it	ne
 8011c5e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8011c62:	4e6b      	ldr	r6, [pc, #428]	; (8011e10 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8011c64:	496b      	ldr	r1, [pc, #428]	; (8011e14 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 8011c66:	bf14      	ite	ne
 8011c68:	2301      	movne	r3, #1
 8011c6a:	2300      	moveq	r3, #0
 8011c6c:	42ba      	cmp	r2, r7
 8011c6e:	bf0c      	ite	eq
 8011c70:	2300      	moveq	r3, #0
 8011c72:	f003 0301 	andne.w	r3, r3, #1
 8011c76:	42b2      	cmp	r2, r6
 8011c78:	bf0c      	ite	eq
 8011c7a:	2300      	moveq	r3, #0
 8011c7c:	f003 0301 	andne.w	r3, r3, #1
 8011c80:	428a      	cmp	r2, r1
 8011c82:	bf0c      	ite	eq
 8011c84:	2300      	moveq	r3, #0
 8011c86:	f003 0301 	andne.w	r3, r3, #1
 8011c8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011c8e:	428a      	cmp	r2, r1
 8011c90:	bf0c      	ite	eq
 8011c92:	2300      	moveq	r3, #0
 8011c94:	f003 0301 	andne.w	r3, r3, #1
 8011c98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011c9c:	428a      	cmp	r2, r1
 8011c9e:	bf0c      	ite	eq
 8011ca0:	2300      	moveq	r3, #0
 8011ca2:	f003 0301 	andne.w	r3, r3, #1
 8011ca6:	b11b      	cbz	r3, 8011cb0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011ca8:	4b5b      	ldr	r3, [pc, #364]	; (8011e18 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8011caa:	429a      	cmp	r2, r3
 8011cac:	f040 808c 	bne.w	8011dc8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8011cb0:	682b      	ldr	r3, [r5, #0]
 8011cb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8011cb6:	2b40      	cmp	r3, #64	; 0x40
 8011cb8:	d002      	beq.n	8011cc0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	f040 808a 	bne.w	8011dd4 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8011cc0:	68ab      	ldr	r3, [r5, #8]
 8011cc2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011cc6:	d173      	bne.n	8011db0 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8011cc8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011ccc:	2b01      	cmp	r3, #1
 8011cce:	d078      	beq.n	8011dc2 <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011cd0:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 8011cd2:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cd4:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8011e08 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8011cd8:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cda:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8011e18 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8011cde:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011ce2:	eba2 0009 	sub.w	r0, r2, r9
 8011ce6:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8011cea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cee:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 8011cf2:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cf4:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 8011cf8:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cfa:	0940      	lsrs	r0, r0, #5
 8011cfc:	0949      	lsrs	r1, r1, #5
 8011cfe:	ea50 0301 	orrs.w	r3, r0, r1
 8011d02:	d135      	bne.n	8011d70 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8011d04:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d06:	430b      	orrs	r3, r1
 8011d08:	4940      	ldr	r1, [pc, #256]	; (8011e0c <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8011d0a:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d0e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8011d12:	bf08      	it	eq
 8011d14:	f043 0301 	orreq.w	r3, r3, #1
 8011d18:	428a      	cmp	r2, r1
 8011d1a:	bf08      	it	eq
 8011d1c:	f043 0301 	orreq.w	r3, r3, #1
 8011d20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011d24:	428a      	cmp	r2, r1
 8011d26:	bf08      	it	eq
 8011d28:	f043 0301 	orreq.w	r3, r3, #1
 8011d2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011d30:	428a      	cmp	r2, r1
 8011d32:	bf08      	it	eq
 8011d34:	f043 0301 	orreq.w	r3, r3, #1
 8011d38:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8011d3c:	428a      	cmp	r2, r1
 8011d3e:	bf08      	it	eq
 8011d40:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011d44:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d46:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011d48:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 8011d4a:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d4c:	b913      	cbnz	r3, 8011d54 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011d4e:	4b33      	ldr	r3, [pc, #204]	; (8011e1c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d104      	bne.n	8011d5e <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011d54:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011d56:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011d5a:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011d5c:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8011d5e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8011d60:	2201      	movs	r2, #1

  return HAL_OK;
 8011d62:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8011d64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011d68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8011d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8011d70:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8011d74:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 8011d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011d7c:	bf18      	it	ne
 8011d7e:	2b00      	cmpne	r3, #0
 8011d80:	bf14      	ite	ne
 8011d82:	f04f 0c01 	movne.w	ip, #1
 8011d86:	f04f 0c00 	moveq.w	ip, #0
 8011d8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011d8e:	bf0c      	ite	eq
 8011d90:	f04f 0c00 	moveq.w	ip, #0
 8011d94:	f00c 0c01 	andne.w	ip, ip, #1
 8011d98:	f1bc 0f00 	cmp.w	ip, #0
 8011d9c:	d002      	beq.n	8011da4 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8011d9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011da2:	d11d      	bne.n	8011de0 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011da4:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011da8:	4603      	mov	r3, r0
 8011daa:	ea47 070e 	orr.w	r7, r7, lr
 8011dae:	e7aa      	b.n	8011d06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8011db0:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8011db4:	481a      	ldr	r0, [pc, #104]	; (8011e20 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011db6:	f7f3 f8fd 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(htim);
 8011dba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d186      	bne.n	8011cd0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8011dc2:	2002      	movs	r0, #2
}
 8011dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011dc8:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8011dcc:	4814      	ldr	r0, [pc, #80]	; (8011e20 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011dce:	f7f3 f8f1 	bl	8004fb4 <assert_failed>
 8011dd2:	e76d      	b.n	8011cb0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8011dd4:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8011dd8:	4811      	ldr	r0, [pc, #68]	; (8011e20 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011dda:	f7f3 f8eb 	bl	8004fb4 <assert_failed>
 8011dde:	e76f      	b.n	8011cc0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8011de0:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8011de4:	480e      	ldr	r0, [pc, #56]	; (8011e20 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011de6:	f7f3 f8e5 	bl	8004fb4 <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8011dea:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011dec:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011df0:	eba2 0309 	sub.w	r3, r2, r9
 8011df4:	eba2 0c08 	sub.w	ip, r2, r8
 8011df8:	4258      	negs	r0, r3
 8011dfa:	4158      	adcs	r0, r3
 8011dfc:	f1dc 0100 	rsbs	r1, ip, #0
 8011e00:	eb41 010c 	adc.w	r1, r1, ip
 8011e04:	e7ce      	b.n	8011da4 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8011e06:	bf00      	nop
 8011e08:	40010000 	.word	0x40010000
 8011e0c:	40000400 	.word	0x40000400
 8011e10:	40000800 	.word	0x40000800
 8011e14:	40000c00 	.word	0x40000c00
 8011e18:	40010400 	.word	0x40010400
 8011e1c:	40001800 	.word	0x40001800
 8011e20:	0802cc8c 	.word	0x0802cc8c

08011e24 <HAL_TIMEx_CommutCallback>:
 8011e24:	4770      	bx	lr
 8011e26:	bf00      	nop

08011e28 <HAL_TIMEx_BreakCallback>:
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop

08011e2c <HAL_TIMEx_Break2Callback>:
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop

08011e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011e30:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e32:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011e36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e3a:	e842 3100 	strex	r1, r3, [r2]
 8011e3e:	2900      	cmp	r1, #0
 8011e40:	d1f7      	bne.n	8011e32 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e42:	f102 0308 	add.w	r3, r2, #8
 8011e46:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e4e:	f102 0c08 	add.w	ip, r2, #8
 8011e52:	e84c 3100 	strex	r1, r3, [ip]
 8011e56:	2900      	cmp	r1, #0
 8011e58:	d1f3      	bne.n	8011e42 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e5a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d005      	beq.n	8011e6c <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e60:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8011e62:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011e64:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 8011e66:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e68:	6603      	str	r3, [r0, #96]	; 0x60
}
 8011e6a:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e6c:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e70:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e74:	e842 3100 	strex	r1, r3, [r2]
 8011e78:	2900      	cmp	r1, #0
 8011e7a:	d0f1      	beq.n	8011e60 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e7c:	e852 3f00 	ldrex	r3, [r2]
 8011e80:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e84:	e842 3100 	strex	r1, r3, [r2]
 8011e88:	2900      	cmp	r1, #0
 8011e8a:	d1ef      	bne.n	8011e6c <UART_EndRxTransfer+0x3c>
 8011e8c:	e7e8      	b.n	8011e60 <UART_EndRxTransfer+0x30>
 8011e8e:	bf00      	nop

08011e90 <HAL_UART_DeInit>:
  if (huart == NULL)
 8011e90:	2800      	cmp	r0, #0
 8011e92:	d046      	beq.n	8011f22 <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011e94:	6802      	ldr	r2, [r0, #0]
 8011e96:	4927      	ldr	r1, [pc, #156]	; (8011f34 <HAL_UART_DeInit+0xa4>)
{
 8011e98:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011e9a:	4b27      	ldr	r3, [pc, #156]	; (8011f38 <HAL_UART_DeInit+0xa8>)
 8011e9c:	4604      	mov	r4, r0
 8011e9e:	4827      	ldr	r0, [pc, #156]	; (8011f3c <HAL_UART_DeInit+0xac>)
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	bf18      	it	ne
 8011ea4:	4282      	cmpne	r2, r0
 8011ea6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011eaa:	bf14      	ite	ne
 8011eac:	2301      	movne	r3, #1
 8011eae:	2300      	moveq	r3, #0
 8011eb0:	428a      	cmp	r2, r1
 8011eb2:	bf0c      	ite	eq
 8011eb4:	2300      	moveq	r3, #0
 8011eb6:	f003 0301 	andne.w	r3, r3, #1
 8011eba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ebe:	4282      	cmp	r2, r0
 8011ec0:	bf0c      	ite	eq
 8011ec2:	2300      	moveq	r3, #0
 8011ec4:	f003 0301 	andne.w	r3, r3, #1
 8011ec8:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8011ecc:	428a      	cmp	r2, r1
 8011ece:	bf0c      	ite	eq
 8011ed0:	2300      	moveq	r3, #0
 8011ed2:	f003 0301 	andne.w	r3, r3, #1
 8011ed6:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8011eda:	4282      	cmp	r2, r0
 8011edc:	bf0c      	ite	eq
 8011ede:	2300      	moveq	r3, #0
 8011ee0:	f003 0301 	andne.w	r3, r3, #1
 8011ee4:	428a      	cmp	r2, r1
 8011ee6:	bf0c      	ite	eq
 8011ee8:	2300      	moveq	r3, #0
 8011eea:	f003 0301 	andne.w	r3, r3, #1
 8011eee:	b113      	cbz	r3, 8011ef6 <HAL_UART_DeInit+0x66>
 8011ef0:	4b13      	ldr	r3, [pc, #76]	; (8011f40 <HAL_UART_DeInit+0xb0>)
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d117      	bne.n	8011f26 <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 8011ef6:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8011ef8:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 8011efa:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011efc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8011efe:	6813      	ldr	r3, [r2, #0]
 8011f00:	f023 0301 	bic.w	r3, r3, #1
 8011f04:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8011f06:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 8011f08:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 8011f0a:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 8011f0c:	f7f5 f876 	bl	8006ffc <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f10:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 8011f14:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8011f16:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8011f18:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8011f1c:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f1e:	6625      	str	r5, [r4, #96]	; 0x60
}
 8011f20:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8011f22:	2001      	movs	r0, #1
}
 8011f24:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011f26:	f240 2167 	movw	r1, #615	; 0x267
 8011f2a:	4806      	ldr	r0, [pc, #24]	; (8011f44 <HAL_UART_DeInit+0xb4>)
 8011f2c:	f7f3 f842 	bl	8004fb4 <assert_failed>
  __HAL_UART_DISABLE(huart);
 8011f30:	6822      	ldr	r2, [r4, #0]
 8011f32:	e7e0      	b.n	8011ef6 <HAL_UART_DeInit+0x66>
 8011f34:	40004800 	.word	0x40004800
 8011f38:	40011000 	.word	0x40011000
 8011f3c:	40004400 	.word	0x40004400
 8011f40:	40007c00 	.word	0x40007c00
 8011f44:	0802ccc8 	.word	0x0802ccc8

08011f48 <HAL_UART_Transmit_DMA>:
{
 8011f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8011f4a:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8011f4c:	2f20      	cmp	r7, #32
 8011f4e:	d141      	bne.n	8011fd4 <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 8011f50:	2900      	cmp	r1, #0
 8011f52:	d03d      	beq.n	8011fd0 <HAL_UART_Transmit_DMA+0x88>
 8011f54:	fab2 f682 	clz	r6, r2
 8011f58:	0976      	lsrs	r6, r6, #5
 8011f5a:	2a00      	cmp	r2, #0
 8011f5c:	d038      	beq.n	8011fd0 <HAL_UART_Transmit_DMA+0x88>
 8011f5e:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8011f60:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8011f64:	2801      	cmp	r0, #1
 8011f66:	d035      	beq.n	8011fd4 <HAL_UART_Transmit_DMA+0x8c>
 8011f68:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011f6a:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 8011f6c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8011f6e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 8011f72:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f74:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 8011f78:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8011f7c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011f80:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8011f82:	b190      	cbz	r0, 8011faa <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011f84:	f8df c060 	ldr.w	ip, [pc, #96]	; 8011fe8 <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011f88:	4613      	mov	r3, r2
 8011f8a:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011f8c:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f90:	f8df c058 	ldr.w	ip, [pc, #88]	; 8011fec <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011f94:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8011f96:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f98:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011f9c:	f8df c050 	ldr.w	ip, [pc, #80]	; 8011ff0 <HAL_UART_Transmit_DMA+0xa8>
 8011fa0:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011fa4:	f7f7 face 	bl	8009544 <HAL_DMA_Start_IT>
 8011fa8:	b9b0      	cbnz	r0, 8011fd8 <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011faa:	6822      	ldr	r2, [r4, #0]
 8011fac:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8011fae:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011fb0:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8011fb2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb6:	f102 0308 	add.w	r3, r2, #8
 8011fba:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc2:	f102 0108 	add.w	r1, r2, #8
 8011fc6:	e841 3000 	strex	r0, r3, [r1]
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d1f3      	bne.n	8011fb6 <HAL_UART_Transmit_DMA+0x6e>
}
 8011fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011fd0:	2001      	movs	r0, #1
}
 8011fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011fd4:	2002      	movs	r0, #2
}
 8011fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011fd8:	2310      	movs	r3, #16
        return HAL_ERROR;
 8011fda:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8011fdc:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011fe0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8011fe4:	67a7      	str	r7, [r4, #120]	; 0x78
}
 8011fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fe8:	080120f9 	.word	0x080120f9
 8011fec:	08012141 	.word	0x08012141
 8011ff0:	08012151 	.word	0x08012151

08011ff4 <HAL_UART_Abort>:
{
 8011ff4:	b538      	push	{r3, r4, r5, lr}
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ffa:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8011ffe:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012002:	e843 2100 	strex	r1, r2, [r3]
 8012006:	2900      	cmp	r1, #0
 8012008:	d1f7      	bne.n	8011ffa <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801200a:	f103 0208 	add.w	r2, r3, #8
 801200e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012012:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012016:	f103 0008 	add.w	r0, r3, #8
 801201a:	e840 2100 	strex	r1, r2, [r0]
 801201e:	2900      	cmp	r1, #0
 8012020:	d1f3      	bne.n	801200a <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012022:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012024:	2a01      	cmp	r2, #1
 8012026:	d043      	beq.n	80120b0 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8012028:	6899      	ldr	r1, [r3, #8]
 801202a:	461a      	mov	r2, r3
 801202c:	0608      	lsls	r0, r1, #24
 801202e:	d42a      	bmi.n	8012086 <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012030:	6899      	ldr	r1, [r3, #8]
 8012032:	0649      	lsls	r1, r1, #25
 8012034:	d514      	bpl.n	8012060 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012036:	f103 0208 	add.w	r2, r3, #8
 801203a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801203e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012042:	f103 0008 	add.w	r0, r3, #8
 8012046:	e840 2100 	strex	r1, r2, [r0]
 801204a:	2900      	cmp	r1, #0
 801204c:	d1f3      	bne.n	8012036 <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 801204e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8012050:	2800      	cmp	r0, #0
 8012052:	d03e      	beq.n	80120d2 <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 8012054:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8012056:	f7f7 fad1 	bl	80095fc <HAL_DMA_Abort>
 801205a:	2800      	cmp	r0, #0
 801205c:	d145      	bne.n	80120ea <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801205e:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 8012060:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012062:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 8012064:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 8012066:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 801206a:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 801206c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012070:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012072:	6991      	ldr	r1, [r2, #24]
 8012074:	f041 0108 	orr.w	r1, r1, #8
 8012078:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 801207a:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801207c:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801207e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012080:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8012084:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012086:	f103 0208 	add.w	r2, r3, #8
 801208a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801208e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012092:	f103 0008 	add.w	r0, r3, #8
 8012096:	e840 2100 	strex	r1, r2, [r0]
 801209a:	2900      	cmp	r1, #0
 801209c:	d1f3      	bne.n	8012086 <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 801209e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80120a0:	b120      	cbz	r0, 80120ac <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 80120a2:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80120a4:	f7f7 faaa 	bl	80095fc <HAL_DMA_Abort>
 80120a8:	b9a8      	cbnz	r0, 80120d6 <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80120aa:	6823      	ldr	r3, [r4, #0]
 80120ac:	461a      	mov	r2, r3
 80120ae:	e7bf      	b.n	8012030 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120b0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80120b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b8:	e843 2100 	strex	r1, r2, [r3]
 80120bc:	2900      	cmp	r1, #0
 80120be:	d0b3      	beq.n	8012028 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c0:	e853 2f00 	ldrex	r2, [r3]
 80120c4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c8:	e843 2100 	strex	r1, r2, [r3]
 80120cc:	2900      	cmp	r1, #0
 80120ce:	d1ef      	bne.n	80120b0 <HAL_UART_Abort+0xbc>
 80120d0:	e7aa      	b.n	8012028 <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80120d2:	461a      	mov	r2, r3
 80120d4:	e7c4      	b.n	8012060 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80120d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80120d8:	f7f7 fbdc 	bl	8009894 <HAL_DMA_GetError>
 80120dc:	2820      	cmp	r0, #32
 80120de:	d1e4      	bne.n	80120aa <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80120e0:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 80120e2:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80120e4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80120e8:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80120ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80120ec:	f7f7 fbd2 	bl	8009894 <HAL_DMA_GetError>
 80120f0:	2820      	cmp	r0, #32
 80120f2:	d1b4      	bne.n	801205e <HAL_UART_Abort+0x6a>
 80120f4:	e7f4      	b.n	80120e0 <HAL_UART_Abort+0xec>
 80120f6:	bf00      	nop

080120f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80120f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80120fa:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80120fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012102:	d018      	beq.n	8012136 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8012104:	2300      	movs	r3, #0
 8012106:	6802      	ldr	r2, [r0, #0]
 8012108:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801210c:	f102 0308 	add.w	r3, r2, #8
 8012110:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012118:	f102 0008 	add.w	r0, r2, #8
 801211c:	e840 3100 	strex	r1, r3, [r0]
 8012120:	2900      	cmp	r1, #0
 8012122:	d1f3      	bne.n	801210c <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012124:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801212c:	e842 3100 	strex	r1, r3, [r2]
 8012130:	2900      	cmp	r1, #0
 8012132:	d1f7      	bne.n	8012124 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012134:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8012136:	f7ef ff11 	bl	8001f5c <HAL_UART_TxCpltCallback>
}
 801213a:	bd08      	pop	{r3, pc}

0801213c <HAL_UART_TxHalfCpltCallback>:
 801213c:	4770      	bx	lr
 801213e:	bf00      	nop

08012140 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012140:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8012142:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8012144:	f7ff fffa 	bl	801213c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012148:	bd08      	pop	{r3, pc}
 801214a:	bf00      	nop

0801214c <HAL_UART_RxHalfCpltCallback>:
 801214c:	4770      	bx	lr
 801214e:	bf00      	nop

08012150 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012150:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012152:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012154:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8012156:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012158:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801215a:	6893      	ldr	r3, [r2, #8]
 801215c:	061b      	lsls	r3, r3, #24
 801215e:	d501      	bpl.n	8012164 <UART_DMAError+0x14>
 8012160:	2921      	cmp	r1, #33	; 0x21
 8012162:	d00d      	beq.n	8012180 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012164:	6893      	ldr	r3, [r2, #8]
 8012166:	065b      	lsls	r3, r3, #25
 8012168:	d501      	bpl.n	801216e <UART_DMAError+0x1e>
 801216a:	2c22      	cmp	r4, #34	; 0x22
 801216c:	d016      	beq.n	801219c <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801216e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8012172:	f043 0310 	orr.w	r3, r3, #16
 8012176:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801217a:	f7f3 f9f9 	bl	8005570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801217e:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8012180:	2300      	movs	r3, #0
 8012182:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012186:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801218a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801218e:	e842 3100 	strex	r1, r3, [r2]
 8012192:	2900      	cmp	r1, #0
 8012194:	d1f7      	bne.n	8012186 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8012196:	2320      	movs	r3, #32
 8012198:	6783      	str	r3, [r0, #120]	; 0x78
}
 801219a:	e7e3      	b.n	8012164 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 801219c:	2300      	movs	r3, #0
 801219e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80121a2:	f7ff fe45 	bl	8011e30 <UART_EndRxTransfer>
 80121a6:	e7e2      	b.n	801216e <UART_DMAError+0x1e>

080121a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80121a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80121ac:	2300      	movs	r3, #0
 80121ae:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80121b2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80121b6:	f7f3 f9db 	bl	8005570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121ba:	bd08      	pop	{r3, pc}

080121bc <HAL_UART_AbortCpltCallback>:
 80121bc:	4770      	bx	lr
 80121be:	bf00      	nop

080121c0 <HAL_UART_Abort_IT>:
{
 80121c0:	b570      	push	{r4, r5, r6, lr}
 80121c2:	6803      	ldr	r3, [r0, #0]
 80121c4:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121c6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80121ca:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ce:	e843 2100 	strex	r1, r2, [r3]
 80121d2:	2900      	cmp	r1, #0
 80121d4:	d1f7      	bne.n	80121c6 <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121d6:	f103 0208 	add.w	r2, r3, #8
 80121da:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121de:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121e2:	f103 0008 	add.w	r0, r3, #8
 80121e6:	e840 2100 	strex	r1, r2, [r0]
 80121ea:	2900      	cmp	r1, #0
 80121ec:	d1f3      	bne.n	80121d6 <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121ee:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80121f0:	2a01      	cmp	r2, #1
 80121f2:	d05e      	beq.n	80122b2 <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 80121f4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80121f6:	2800      	cmp	r0, #0
 80121f8:	d071      	beq.n	80122de <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80121fa:	689a      	ldr	r2, [r3, #8]
 80121fc:	461c      	mov	r4, r3
 80121fe:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8012202:	bf18      	it	ne
 8012204:	4a3b      	ldrne	r2, [pc, #236]	; (80122f4 <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 8012206:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8012208:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801220a:	b129      	cbz	r1, 8012218 <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801220c:	689a      	ldr	r2, [r3, #8]
 801220e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8012212:	bf18      	it	ne
 8012214:	4a38      	ldrne	r2, [pc, #224]	; (80122f8 <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 8012216:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8012218:	689a      	ldr	r2, [r3, #8]
 801221a:	0612      	lsls	r2, r2, #24
 801221c:	d430      	bmi.n	8012280 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801221e:	689a      	ldr	r2, [r3, #8]
 8012220:	0656      	lsls	r6, r2, #25
 8012222:	d515      	bpl.n	8012250 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8012224:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012226:	f103 0208 	add.w	r2, r3, #8
 801222a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801222e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012232:	f103 0008 	add.w	r0, r3, #8
 8012236:	e840 2600 	strex	r6, r2, [r0]
 801223a:	2e00      	cmp	r6, #0
 801223c:	d1f3      	bne.n	8012226 <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 801223e:	2900      	cmp	r1, #0
 8012240:	d04f      	beq.n	80122e2 <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012242:	4608      	mov	r0, r1
 8012244:	f7f7 fa22 	bl	800968c <HAL_DMA_Abort_IT>
 8012248:	b1c0      	cbz	r0, 801227c <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 801224a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801224c:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 801224e:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 8012250:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012252:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 8012254:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 8012256:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 8012258:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 801225c:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 801225e:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 8012262:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012264:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012268:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801226a:	69a2      	ldr	r2, [r4, #24]
 801226c:	f042 0208 	orr.w	r2, r2, #8
 8012270:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 8012272:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8012274:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012276:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 8012278:	f7ff ffa0 	bl	80121bc <HAL_UART_AbortCpltCallback>
}
 801227c:	2000      	movs	r0, #0
 801227e:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012280:	f103 0208 	add.w	r2, r3, #8
 8012284:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801228c:	f103 0608 	add.w	r6, r3, #8
 8012290:	e846 2400 	strex	r4, r2, [r6]
 8012294:	2c00      	cmp	r4, #0
 8012296:	d1f3      	bne.n	8012280 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 8012298:	b1e0      	cbz	r0, 80122d4 <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801229a:	f7f7 f9f7 	bl	800968c <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801229e:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80122a0:	b318      	cbz	r0, 80122ea <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 80122a2:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122a4:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 80122a6:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122a8:	461c      	mov	r4, r3
 80122aa:	0651      	lsls	r1, r2, #25
 80122ac:	d5d0      	bpl.n	8012250 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 80122ae:	2401      	movs	r4, #1
 80122b0:	e01e      	b.n	80122f0 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122b2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80122b6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ba:	e843 2100 	strex	r1, r2, [r3]
 80122be:	2900      	cmp	r1, #0
 80122c0:	d098      	beq.n	80121f4 <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c2:	e853 2f00 	ldrex	r2, [r3]
 80122c6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ca:	e843 2100 	strex	r1, r2, [r3]
 80122ce:	2900      	cmp	r1, #0
 80122d0:	d1ef      	bne.n	80122b2 <HAL_UART_Abort_IT+0xf2>
 80122d2:	e78f      	b.n	80121f4 <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122d4:	689a      	ldr	r2, [r3, #8]
 80122d6:	461c      	mov	r4, r3
 80122d8:	0652      	lsls	r2, r2, #25
 80122da:	d5b9      	bpl.n	8012250 <HAL_UART_Abort_IT+0x90>
 80122dc:	e7a2      	b.n	8012224 <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80122de:	461c      	mov	r4, r3
 80122e0:	e792      	b.n	8012208 <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 80122e2:	2c01      	cmp	r4, #1
 80122e4:	d1ca      	bne.n	801227c <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80122e6:	461c      	mov	r4, r3
 80122e8:	e7b2      	b.n	8012250 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122ea:	689a      	ldr	r2, [r3, #8]
 80122ec:	0650      	lsls	r0, r2, #25
 80122ee:	d5c5      	bpl.n	801227c <HAL_UART_Abort_IT+0xbc>
 80122f0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80122f2:	e798      	b.n	8012226 <HAL_UART_Abort_IT+0x66>
 80122f4:	0801233d 	.word	0x0801233d
 80122f8:	080122fd 	.word	0x080122fd

080122fc <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122fc:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 80122fe:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8012300:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 8012304:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 8012306:	b113      	cbz	r3, 801230e <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8012308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801230a:	b103      	cbz	r3, 801230e <UART_DMARxAbortCallback+0x12>
 801230c:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 801230e:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012310:	6802      	ldr	r2, [r0, #0]
 8012312:	210f      	movs	r1, #15
{
 8012314:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8012316:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801231a:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 801231c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012320:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012324:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012326:	6991      	ldr	r1, [r2, #24]
 8012328:	f041 0108 	orr.w	r1, r1, #8
 801232c:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 801232e:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012330:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012332:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8012334:	f7ff ff42 	bl	80121bc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012338:	bd10      	pop	{r4, pc}
 801233a:	bf00      	nop

0801233c <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801233c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 801233e:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 8012340:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 8012344:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8012346:	b113      	cbz	r3, 801234e <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8012348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801234a:	b103      	cbz	r3, 801234e <UART_DMATxAbortCallback+0x12>
 801234c:	4770      	bx	lr
{
 801234e:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8012350:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 8012352:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012354:	6801      	ldr	r1, [r0, #0]
 8012356:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 8012358:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 801235c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012360:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012364:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 8012366:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012368:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801236a:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 801236c:	f7ff ff26 	bl	80121bc <HAL_UART_AbortCpltCallback>
}
 8012370:	bd10      	pop	{r4, pc}
 8012372:	bf00      	nop

08012374 <HAL_UARTEx_RxEventCallback>:
}
 8012374:	4770      	bx	lr
 8012376:	bf00      	nop

08012378 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012378:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801237a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801237c:	2b22      	cmp	r3, #34	; 0x22
 801237e:	d005      	beq.n	801238c <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012380:	6802      	ldr	r2, [r0, #0]
 8012382:	6993      	ldr	r3, [r2, #24]
 8012384:	f043 0308 	orr.w	r3, r3, #8
 8012388:	6193      	str	r3, [r2, #24]
  }
}
 801238a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801238c:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801238e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012394:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012396:	400b      	ands	r3, r1
 8012398:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 801239a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 801239e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80123a0:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 80123a2:	3201      	adds	r2, #1
    huart->RxXferCount--;
 80123a4:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 80123a6:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80123a8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80123ac:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d1e9      	bne.n	801238a <UART_RxISR_8BIT+0x12>
 80123b6:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80123bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123c0:	e843 2100 	strex	r1, r2, [r3]
 80123c4:	2900      	cmp	r1, #0
 80123c6:	d1f7      	bne.n	80123b8 <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123c8:	f103 0208 	add.w	r2, r3, #8
 80123cc:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d4:	f103 0c08 	add.w	ip, r3, #8
 80123d8:	e84c 2100 	strex	r1, r2, [ip]
 80123dc:	2900      	cmp	r1, #0
 80123de:	d1f3      	bne.n	80123c8 <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 80123e0:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 80123e2:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 80123e4:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123e6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80123e8:	2a01      	cmp	r2, #1
 80123ea:	d112      	bne.n	8012412 <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123ec:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ee:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123f2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123f6:	e843 2100 	strex	r1, r2, [r3]
 80123fa:	2900      	cmp	r1, #0
 80123fc:	d1f7      	bne.n	80123ee <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123fe:	69da      	ldr	r2, [r3, #28]
 8012400:	06d2      	lsls	r2, r2, #27
 8012402:	d501      	bpl.n	8012408 <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012404:	2210      	movs	r2, #16
 8012406:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012408:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 801240c:	f7ff ffb2 	bl	8012374 <HAL_UARTEx_RxEventCallback>
}
 8012410:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8012412:	f7f3 f837 	bl	8005484 <HAL_UART_RxCpltCallback>
}
 8012416:	bd08      	pop	{r3, pc}

08012418 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012418:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801241a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801241c:	2b22      	cmp	r3, #34	; 0x22
 801241e:	d005      	beq.n	801242c <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012420:	6802      	ldr	r2, [r0, #0]
 8012422:	6993      	ldr	r3, [r2, #24]
 8012424:	f043 0308 	orr.w	r3, r3, #8
 8012428:	6193      	str	r3, [r2, #24]
  }
}
 801242a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801242c:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 801242e:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8012434:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8012436:	ea02 020c 	and.w	r2, r2, ip
 801243a:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 801243e:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8012442:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8012444:	3a01      	subs	r2, #1
 8012446:	b292      	uxth	r2, r2
 8012448:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 801244c:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8012450:	b292      	uxth	r2, r2
 8012452:	2a00      	cmp	r2, #0
 8012454:	d1e9      	bne.n	801242a <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012456:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801245a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801245e:	e843 2100 	strex	r1, r2, [r3]
 8012462:	2900      	cmp	r1, #0
 8012464:	d1f7      	bne.n	8012456 <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012466:	f103 0208 	add.w	r2, r3, #8
 801246a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801246e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012472:	f103 0c08 	add.w	ip, r3, #8
 8012476:	e84c 2100 	strex	r1, r2, [ip]
 801247a:	2900      	cmp	r1, #0
 801247c:	d1f3      	bne.n	8012466 <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 801247e:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8012480:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8012482:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012484:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8012486:	2a01      	cmp	r2, #1
 8012488:	d112      	bne.n	80124b0 <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801248a:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801248c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012490:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012494:	e843 2100 	strex	r1, r2, [r3]
 8012498:	2900      	cmp	r1, #0
 801249a:	d1f7      	bne.n	801248c <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801249c:	69da      	ldr	r2, [r3, #28]
 801249e:	06d2      	lsls	r2, r2, #27
 80124a0:	d501      	bpl.n	80124a6 <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124a2:	2210      	movs	r2, #16
 80124a4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124a6:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80124aa:	f7ff ff63 	bl	8012374 <HAL_UARTEx_RxEventCallback>
}
 80124ae:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80124b0:	f7f2 ffe8 	bl	8005484 <HAL_UART_RxCpltCallback>
}
 80124b4:	bd08      	pop	{r3, pc}
 80124b6:	bf00      	nop

080124b8 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80124ba:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124bc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d002      	beq.n	80124c8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80124c2:	f7ff fe43 	bl	801214c <HAL_UART_RxHalfCpltCallback>
}
 80124c6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80124c8:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80124cc:	0849      	lsrs	r1, r1, #1
 80124ce:	f7ff ff51 	bl	8012374 <HAL_UARTEx_RxEventCallback>
}
 80124d2:	bd08      	pop	{r3, pc}

080124d4 <UART_DMAReceiveCplt>:
{
 80124d4:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80124d6:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80124da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124de:	d028      	beq.n	8012532 <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 80124e0:	2200      	movs	r2, #0
 80124e2:	6803      	ldr	r3, [r0, #0]
 80124e4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124e8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80124ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f0:	e843 2100 	strex	r1, r2, [r3]
 80124f4:	2900      	cmp	r1, #0
 80124f6:	d1f7      	bne.n	80124e8 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124f8:	f103 0208 	add.w	r2, r3, #8
 80124fc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012500:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012504:	f103 0c08 	add.w	ip, r3, #8
 8012508:	e84c 2100 	strex	r1, r2, [ip]
 801250c:	2900      	cmp	r1, #0
 801250e:	d1f3      	bne.n	80124f8 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012510:	f103 0208 	add.w	r2, r3, #8
 8012514:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801251c:	f103 0c08 	add.w	ip, r3, #8
 8012520:	e84c 2100 	strex	r1, r2, [ip]
 8012524:	2900      	cmp	r1, #0
 8012526:	d1f3      	bne.n	8012510 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8012528:	2220      	movs	r2, #32
 801252a:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801252c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801252e:	2a01      	cmp	r2, #1
 8012530:	d005      	beq.n	801253e <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012532:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8012534:	2b01      	cmp	r3, #1
 8012536:	d013      	beq.n	8012560 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8012538:	f7f2 ffa4 	bl	8005484 <HAL_UART_RxCpltCallback>
}
 801253c:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801253e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012542:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012546:	e843 2100 	strex	r1, r2, [r3]
 801254a:	2900      	cmp	r1, #0
 801254c:	d0f1      	beq.n	8012532 <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801254e:	e853 2f00 	ldrex	r2, [r3]
 8012552:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012556:	e843 2100 	strex	r1, r2, [r3]
 801255a:	2900      	cmp	r1, #0
 801255c:	d1ef      	bne.n	801253e <UART_DMAReceiveCplt+0x6a>
 801255e:	e7e8      	b.n	8012532 <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012560:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8012564:	f7ff ff06 	bl	8012374 <HAL_UARTEx_RxEventCallback>
}
 8012568:	bd08      	pop	{r3, pc}
 801256a:	bf00      	nop

0801256c <HAL_UARTEx_WakeupCallback>:
}
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop

08012570 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012570:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012572:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012576:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012578:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 801257a:	ea12 0f0c 	tst.w	r2, ip
{
 801257e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012582:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012584:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8012586:	d17d      	bne.n	8012684 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012588:	0697      	lsls	r7, r2, #26
 801258a:	d502      	bpl.n	8012592 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801258c:	068e      	lsls	r6, r1, #26
 801258e:	f100 80f4 	bmi.w	801277a <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012592:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012594:	2801      	cmp	r0, #1
 8012596:	d024      	beq.n	80125e2 <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012598:	02d0      	lsls	r0, r2, #11
 801259a:	d502      	bpl.n	80125a2 <HAL_UART_IRQHandler+0x32>
 801259c:	026f      	lsls	r7, r5, #9
 801259e:	f100 80f1 	bmi.w	8012784 <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80125a2:	0616      	lsls	r6, r2, #24
 80125a4:	d414      	bmi.n	80125d0 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80125a6:	0650      	lsls	r0, r2, #25
 80125a8:	d501      	bpl.n	80125ae <HAL_UART_IRQHandler+0x3e>
 80125aa:	064a      	lsls	r2, r1, #25
 80125ac:	d401      	bmi.n	80125b2 <HAL_UART_IRQHandler+0x42>
}
 80125ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125b2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80125b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ba:	e843 2100 	strex	r1, r2, [r3]
 80125be:	2900      	cmp	r1, #0
 80125c0:	d1f7      	bne.n	80125b2 <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 80125c2:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 80125c4:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 80125c6:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 80125c8:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 80125ca:	f7ef fcc7 	bl	8001f5c <HAL_UART_TxCpltCallback>
}
 80125ce:	e7ee      	b.n	80125ae <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80125d0:	060d      	lsls	r5, r1, #24
 80125d2:	d5e8      	bpl.n	80125a6 <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 80125d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d0e9      	beq.n	80125ae <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 80125da:	4620      	mov	r0, r4
}
 80125dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80125e0:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80125e2:	06d7      	lsls	r7, r2, #27
 80125e4:	d5d8      	bpl.n	8012598 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80125e6:	06ce      	lsls	r6, r1, #27
 80125e8:	d5d6      	bpl.n	8012598 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80125ea:	2210      	movs	r2, #16
 80125ec:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80125ee:	689a      	ldr	r2, [r3, #8]
 80125f0:	0655      	lsls	r5, r2, #25
 80125f2:	f140 80d9 	bpl.w	80127a8 <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80125f6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80125f8:	6802      	ldr	r2, [r0, #0]
 80125fa:	6852      	ldr	r2, [r2, #4]
 80125fc:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80125fe:	2a00      	cmp	r2, #0
 8012600:	d0d5      	beq.n	80125ae <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012602:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8012606:	4291      	cmp	r1, r2
 8012608:	d9d1      	bls.n	80125ae <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 801260a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801260e:	69c2      	ldr	r2, [r0, #28]
 8012610:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8012614:	d02e      	beq.n	8012674 <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012616:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801261a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801261e:	e843 2100 	strex	r1, r2, [r3]
 8012622:	2900      	cmp	r1, #0
 8012624:	d1f7      	bne.n	8012616 <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012626:	f103 0208 	add.w	r2, r3, #8
 801262a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801262e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012632:	f103 0508 	add.w	r5, r3, #8
 8012636:	e845 2100 	strex	r1, r2, [r5]
 801263a:	2900      	cmp	r1, #0
 801263c:	d1f3      	bne.n	8012626 <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801263e:	f103 0208 	add.w	r2, r3, #8
 8012642:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801264a:	f103 0508 	add.w	r5, r3, #8
 801264e:	e845 2100 	strex	r1, r2, [r5]
 8012652:	2900      	cmp	r1, #0
 8012654:	d1f3      	bne.n	801263e <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 8012656:	2220      	movs	r2, #32
 8012658:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801265a:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801265c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012660:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012664:	e843 2100 	strex	r1, r2, [r3]
 8012668:	2900      	cmp	r1, #0
 801266a:	d1f7      	bne.n	801265c <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 801266c:	f7f6 ffc6 	bl	80095fc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012670:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8012674:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8012678:	4620      	mov	r0, r4
 801267a:	1ac9      	subs	r1, r1, r3
 801267c:	b289      	uxth	r1, r1
 801267e:	f7ff fe79 	bl	8012374 <HAL_UARTEx_RxEventCallback>
 8012682:	e794      	b.n	80125ae <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8012684:	4864      	ldr	r0, [pc, #400]	; (8012818 <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8012686:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801268a:	4008      	ands	r0, r1
 801268c:	4330      	orrs	r0, r6
 801268e:	d080      	beq.n	8012592 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012690:	07d5      	lsls	r5, r2, #31
 8012692:	461f      	mov	r7, r3
 8012694:	d509      	bpl.n	80126aa <HAL_UART_IRQHandler+0x13a>
 8012696:	05c8      	lsls	r0, r1, #23
 8012698:	d507      	bpl.n	80126aa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801269a:	2001      	movs	r0, #1
 801269c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801269e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80126a2:	f040 0001 	orr.w	r0, r0, #1
 80126a6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126aa:	0795      	lsls	r5, r2, #30
 80126ac:	d560      	bpl.n	8012770 <HAL_UART_IRQHandler+0x200>
 80126ae:	b18e      	cbz	r6, 80126d4 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80126b0:	2002      	movs	r0, #2
 80126b2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80126b4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80126b8:	f040 0004 	orr.w	r0, r0, #4
 80126bc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126c0:	0750      	lsls	r0, r2, #29
 80126c2:	d507      	bpl.n	80126d4 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80126c4:	2004      	movs	r0, #4
 80126c6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80126c8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80126cc:	f040 0002 	orr.w	r0, r0, #2
 80126d0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80126d4:	0710      	lsls	r0, r2, #28
 80126d6:	d50b      	bpl.n	80126f0 <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80126d8:	f001 0020 	and.w	r0, r1, #32
 80126dc:	4330      	orrs	r0, r6
 80126de:	d007      	beq.n	80126f0 <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80126e0:	2008      	movs	r0, #8
 80126e2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80126e4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80126e8:	f040 0008 	orr.w	r0, r0, #8
 80126ec:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80126f0:	0516      	lsls	r6, r2, #20
 80126f2:	d50a      	bpl.n	801270a <HAL_UART_IRQHandler+0x19a>
 80126f4:	014d      	lsls	r5, r1, #5
 80126f6:	d508      	bpl.n	801270a <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80126f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80126fc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80126fe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8012702:	f043 0320 	orr.w	r3, r3, #32
 8012706:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801270a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801270e:	2b00      	cmp	r3, #0
 8012710:	f43f af4d 	beq.w	80125ae <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012714:	0690      	lsls	r0, r2, #26
 8012716:	d501      	bpl.n	801271c <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012718:	0689      	lsls	r1, r1, #26
 801271a:	d43e      	bmi.n	801279a <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 801271c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 8012720:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012722:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012724:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801272c:	431d      	orrs	r5, r3
 801272e:	d06e      	beq.n	801280e <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 8012730:	f7ff fb7e 	bl	8011e30 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012734:	6823      	ldr	r3, [r4, #0]
 8012736:	689a      	ldr	r2, [r3, #8]
 8012738:	0652      	lsls	r2, r2, #25
 801273a:	d52a      	bpl.n	8012792 <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801273c:	f103 0208 	add.w	r2, r3, #8
 8012740:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012748:	f103 0008 	add.w	r0, r3, #8
 801274c:	e840 2100 	strex	r1, r2, [r0]
 8012750:	2900      	cmp	r1, #0
 8012752:	d1f3      	bne.n	801273c <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 8012754:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8012756:	b1e0      	cbz	r0, 8012792 <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012758:	4b30      	ldr	r3, [pc, #192]	; (801281c <HAL_UART_IRQHandler+0x2ac>)
 801275a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801275c:	f7f6 ff96 	bl	800968c <HAL_DMA_Abort_IT>
 8012760:	2800      	cmp	r0, #0
 8012762:	f43f af24 	beq.w	80125ae <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012766:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8012768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801276c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801276e:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012770:	0755      	lsls	r5, r2, #29
 8012772:	d5af      	bpl.n	80126d4 <HAL_UART_IRQHandler+0x164>
 8012774:	2e00      	cmp	r6, #0
 8012776:	d1a5      	bne.n	80126c4 <HAL_UART_IRQHandler+0x154>
 8012778:	e7ac      	b.n	80126d4 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 801277a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801277c:	2b00      	cmp	r3, #0
 801277e:	f47f af2d 	bne.w	80125dc <HAL_UART_IRQHandler+0x6c>
 8012782:	e714      	b.n	80125ae <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012784:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8012788:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801278a:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 801278c:	f7ff feee 	bl	801256c <HAL_UARTEx_WakeupCallback>
    return;
 8012790:	e70d      	b.n	80125ae <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 8012792:	4620      	mov	r0, r4
 8012794:	f7f2 feec 	bl	8005570 <HAL_UART_ErrorCallback>
 8012798:	e709      	b.n	80125ae <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 801279a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801279c:	2b00      	cmp	r3, #0
 801279e:	d0bd      	beq.n	801271c <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 80127a0:	4620      	mov	r0, r4
 80127a2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80127a4:	6827      	ldr	r7, [r4, #0]
 80127a6:	e7b9      	b.n	801271c <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80127a8:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80127ac:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 80127b0:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80127b4:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 80127b6:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80127b8:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80127ba:	2900      	cmp	r1, #0
 80127bc:	f43f aef7 	beq.w	80125ae <HAL_UART_IRQHandler+0x3e>
 80127c0:	2a00      	cmp	r2, #0
 80127c2:	f43f aef4 	beq.w	80125ae <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127c6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80127ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ce:	e843 2000 	strex	r0, r2, [r3]
 80127d2:	2800      	cmp	r0, #0
 80127d4:	d1f7      	bne.n	80127c6 <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127d6:	f103 0208 	add.w	r2, r3, #8
 80127da:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127de:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127e2:	f103 0508 	add.w	r5, r3, #8
 80127e6:	e845 2000 	strex	r0, r2, [r5]
 80127ea:	2800      	cmp	r0, #0
 80127ec:	d1f3      	bne.n	80127d6 <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 80127ee:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80127f0:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 80127f2:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127f4:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127f6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127fa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127fe:	e843 2000 	strex	r0, r2, [r3]
 8012802:	2800      	cmp	r0, #0
 8012804:	d1f7      	bne.n	80127f6 <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012806:	4620      	mov	r0, r4
 8012808:	f7ff fdb4 	bl	8012374 <HAL_UARTEx_RxEventCallback>
 801280c:	e6cf      	b.n	80125ae <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 801280e:	f7f2 feaf 	bl	8005570 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012812:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8012816:	e6ca      	b.n	80125ae <HAL_UART_IRQHandler+0x3e>
 8012818:	04000120 	.word	0x04000120
 801281c:	080121a9 	.word	0x080121a9

08012820 <UART_SetConfig>:
{
 8012820:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8012822:	6842      	ldr	r2, [r0, #4]
{
 8012824:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8012826:	4bac      	ldr	r3, [pc, #688]	; (8012ad8 <UART_SetConfig+0x2b8>)
 8012828:	429a      	cmp	r2, r3
 801282a:	f200 80bb 	bhi.w	80129a4 <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 801282e:	68a3      	ldr	r3, [r4, #8]
 8012830:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8012834:	d002      	beq.n	801283c <UART_SetConfig+0x1c>
 8012836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801283a:	d179      	bne.n	8012930 <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 801283c:	68e3      	ldr	r3, [r4, #12]
 801283e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8012842:	d17e      	bne.n	8012942 <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8012844:	6a23      	ldr	r3, [r4, #32]
 8012846:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 801284a:	f040 8084 	bne.w	8012956 <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 801284e:	6923      	ldr	r3, [r4, #16]
 8012850:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8012854:	d002      	beq.n	801285c <UART_SetConfig+0x3c>
 8012856:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801285a:	d163      	bne.n	8012924 <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 801285c:	6963      	ldr	r3, [r4, #20]
 801285e:	f033 020c 	bics.w	r2, r3, #12
 8012862:	d146      	bne.n	80128f2 <UART_SetConfig+0xd2>
 8012864:	2b00      	cmp	r3, #0
 8012866:	d044      	beq.n	80128f2 <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8012868:	69a3      	ldr	r3, [r4, #24]
 801286a:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 801286e:	d149      	bne.n	8012904 <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8012870:	69e0      	ldr	r0, [r4, #28]
 8012872:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8012876:	d14e      	bne.n	8012916 <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012878:	6921      	ldr	r1, [r4, #16]
 801287a:	68a2      	ldr	r2, [r4, #8]
 801287c:	6823      	ldr	r3, [r4, #0]
 801287e:	430a      	orrs	r2, r1
 8012880:	6961      	ldr	r1, [r4, #20]
 8012882:	681d      	ldr	r5, [r3, #0]
 8012884:	430a      	orrs	r2, r1
 8012886:	4995      	ldr	r1, [pc, #596]	; (8012adc <UART_SetConfig+0x2bc>)
 8012888:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801288a:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801288c:	430a      	orrs	r2, r1
 801288e:	4302      	orrs	r2, r0
 8012890:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012892:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012894:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012896:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 801289a:	4329      	orrs	r1, r5
 801289c:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 801289e:	6a21      	ldr	r1, [r4, #32]
 80128a0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80128a2:	6899      	ldr	r1, [r3, #8]
 80128a4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80128a8:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80128aa:	498d      	ldr	r1, [pc, #564]	; (8012ae0 <UART_SetConfig+0x2c0>)
 80128ac:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80128ae:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80128b0:	d07e      	beq.n	80129b0 <UART_SetConfig+0x190>
 80128b2:	4a8c      	ldr	r2, [pc, #560]	; (8012ae4 <UART_SetConfig+0x2c4>)
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d054      	beq.n	8012962 <UART_SetConfig+0x142>
 80128b8:	4a8b      	ldr	r2, [pc, #556]	; (8012ae8 <UART_SetConfig+0x2c8>)
 80128ba:	4293      	cmp	r3, r2
 80128bc:	f000 812a 	beq.w	8012b14 <UART_SetConfig+0x2f4>
 80128c0:	4a8a      	ldr	r2, [pc, #552]	; (8012aec <UART_SetConfig+0x2cc>)
 80128c2:	4293      	cmp	r3, r2
 80128c4:	f000 8137 	beq.w	8012b36 <UART_SetConfig+0x316>
 80128c8:	4a89      	ldr	r2, [pc, #548]	; (8012af0 <UART_SetConfig+0x2d0>)
 80128ca:	4293      	cmp	r3, r2
 80128cc:	f000 809e 	beq.w	8012a0c <UART_SetConfig+0x1ec>
 80128d0:	4a88      	ldr	r2, [pc, #544]	; (8012af4 <UART_SetConfig+0x2d4>)
 80128d2:	4293      	cmp	r3, r2
 80128d4:	f000 80d1 	beq.w	8012a7a <UART_SetConfig+0x25a>
 80128d8:	4a87      	ldr	r2, [pc, #540]	; (8012af8 <UART_SetConfig+0x2d8>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	f000 8151 	beq.w	8012b82 <UART_SetConfig+0x362>
 80128e0:	4a86      	ldr	r2, [pc, #536]	; (8012afc <UART_SetConfig+0x2dc>)
 80128e2:	4293      	cmp	r3, r2
 80128e4:	f000 8164 	beq.w	8012bb0 <UART_SetConfig+0x390>
    switch (clocksource)
 80128e8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80128ea:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80128ec:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80128f0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80128f2:	f640 3176 	movw	r1, #2934	; 0xb76
 80128f6:	4882      	ldr	r0, [pc, #520]	; (8012b00 <UART_SetConfig+0x2e0>)
 80128f8:	f7f2 fb5c 	bl	8004fb4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80128fc:	69a3      	ldr	r3, [r4, #24]
 80128fe:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8012902:	d0b5      	beq.n	8012870 <UART_SetConfig+0x50>
 8012904:	487e      	ldr	r0, [pc, #504]	; (8012b00 <UART_SetConfig+0x2e0>)
 8012906:	f640 3177 	movw	r1, #2935	; 0xb77
 801290a:	f7f2 fb53 	bl	8004fb4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 801290e:	69e0      	ldr	r0, [r4, #28]
 8012910:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8012914:	d0b0      	beq.n	8012878 <UART_SetConfig+0x58>
 8012916:	487a      	ldr	r0, [pc, #488]	; (8012b00 <UART_SetConfig+0x2e0>)
 8012918:	f640 3178 	movw	r1, #2936	; 0xb78
 801291c:	f7f2 fb4a 	bl	8004fb4 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012920:	69e0      	ldr	r0, [r4, #28]
 8012922:	e7a9      	b.n	8012878 <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8012924:	f640 3175 	movw	r1, #2933	; 0xb75
 8012928:	4875      	ldr	r0, [pc, #468]	; (8012b00 <UART_SetConfig+0x2e0>)
 801292a:	f7f2 fb43 	bl	8004fb4 <assert_failed>
 801292e:	e795      	b.n	801285c <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8012930:	f640 3171 	movw	r1, #2929	; 0xb71
 8012934:	4872      	ldr	r0, [pc, #456]	; (8012b00 <UART_SetConfig+0x2e0>)
 8012936:	f7f2 fb3d 	bl	8004fb4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 801293a:	68e3      	ldr	r3, [r4, #12]
 801293c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8012940:	d080      	beq.n	8012844 <UART_SetConfig+0x24>
 8012942:	f640 3172 	movw	r1, #2930	; 0xb72
 8012946:	486e      	ldr	r0, [pc, #440]	; (8012b00 <UART_SetConfig+0x2e0>)
 8012948:	f7f2 fb34 	bl	8004fb4 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 801294c:	6a23      	ldr	r3, [r4, #32]
 801294e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8012952:	f43f af7c 	beq.w	801284e <UART_SetConfig+0x2e>
 8012956:	f640 3173 	movw	r1, #2931	; 0xb73
 801295a:	4869      	ldr	r0, [pc, #420]	; (8012b00 <UART_SetConfig+0x2e0>)
 801295c:	f7f2 fb2a 	bl	8004fb4 <assert_failed>
 8012960:	e775      	b.n	801284e <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012962:	4b68      	ldr	r3, [pc, #416]	; (8012b04 <UART_SetConfig+0x2e4>)
 8012964:	4a68      	ldr	r2, [pc, #416]	; (8012b08 <UART_SetConfig+0x2e8>)
 8012966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801296a:	f003 030c 	and.w	r3, r3, #12
 801296e:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012970:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012974:	d033      	beq.n	80129de <UART_SetConfig+0x1be>
    switch (clocksource)
 8012976:	2b08      	cmp	r3, #8
 8012978:	d8b6      	bhi.n	80128e8 <UART_SetConfig+0xc8>
 801297a:	a201      	add	r2, pc, #4	; (adr r2, 8012980 <UART_SetConfig+0x160>)
 801297c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012980:	08012a3b 	.word	0x08012a3b
 8012984:	080129c7 	.word	0x080129c7
 8012988:	08012a91 	.word	0x08012a91
 801298c:	080128e9 	.word	0x080128e9
 8012990:	08012a2f 	.word	0x08012a2f
 8012994:	080128e9 	.word	0x080128e9
 8012998:	080128e9 	.word	0x080128e9
 801299c:	080128e9 	.word	0x080128e9
 80129a0:	08012a51 	.word	0x08012a51
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80129a4:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 80129a8:	4855      	ldr	r0, [pc, #340]	; (8012b00 <UART_SetConfig+0x2e0>)
 80129aa:	f7f2 fb03 	bl	8004fb4 <assert_failed>
 80129ae:	e73e      	b.n	801282e <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80129b0:	4b54      	ldr	r3, [pc, #336]	; (8012b04 <UART_SetConfig+0x2e4>)
 80129b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129b6:	f003 0303 	and.w	r3, r3, #3
 80129ba:	3b01      	subs	r3, #1
 80129bc:	2b02      	cmp	r3, #2
 80129be:	d90b      	bls.n	80129d8 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80129c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80129c4:	d066      	beq.n	8012a94 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 80129c6:	f7fb f9d5 	bl	800dd74 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d142      	bne.n	8012a54 <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 80129ce:	2300      	movs	r3, #0
 80129d0:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 80129d2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80129d6:	bd38      	pop	{r3, r4, r5, pc}
 80129d8:	4a4c      	ldr	r2, [pc, #304]	; (8012b0c <UART_SetConfig+0x2ec>)
 80129da:	5cd3      	ldrb	r3, [r2, r3]
 80129dc:	e7c8      	b.n	8012970 <UART_SetConfig+0x150>
    switch (clocksource)
 80129de:	2b08      	cmp	r3, #8
 80129e0:	d882      	bhi.n	80128e8 <UART_SetConfig+0xc8>
 80129e2:	a201      	add	r2, pc, #4	; (adr r2, 80129e8 <UART_SetConfig+0x1c8>)
 80129e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e8:	08012ad1 	.word	0x08012ad1
 80129ec:	08012a95 	.word	0x08012a95
 80129f0:	08012b79 	.word	0x08012b79
 80129f4:	080128e9 	.word	0x080128e9
 80129f8:	08012acb 	.word	0x08012acb
 80129fc:	080128e9 	.word	0x080128e9
 8012a00:	080128e9 	.word	0x080128e9
 8012a04:	080128e9 	.word	0x080128e9
 8012a08:	08012b7d 	.word	0x08012b7d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a0c:	4b3d      	ldr	r3, [pc, #244]	; (8012b04 <UART_SetConfig+0x2e4>)
 8012a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a1a:	d036      	beq.n	8012a8a <UART_SetConfig+0x26a>
 8012a1c:	d810      	bhi.n	8012a40 <UART_SetConfig+0x220>
 8012a1e:	b14b      	cbz	r3, 8012a34 <UART_SetConfig+0x214>
 8012a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a24:	f47f af60 	bne.w	80128e8 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a28:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a2c:	d04d      	beq.n	8012aca <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 8012a2e:	f7fb f839 	bl	800daa4 <HAL_RCC_GetSysClockFreq>
        break;
 8012a32:	e7ca      	b.n	80129ca <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a34:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a38:	d04a      	beq.n	8012ad0 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012a3a:	f7fb f98b 	bl	800dd54 <HAL_RCC_GetPCLK1Freq>
        break;
 8012a3e:	e7c4      	b.n	80129ca <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012a44:	f47f af50 	bne.w	80128e8 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a48:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a4c:	f000 8096 	beq.w	8012b7c <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 8012a50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012a54:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a56:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012a5a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8012a5e:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a62:	f1a3 0110 	sub.w	r1, r3, #16
 8012a66:	4291      	cmp	r1, r2
 8012a68:	f63f af3e 	bhi.w	80128e8 <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012a6c:	6822      	ldr	r2, [r4, #0]
 8012a6e:	2000      	movs	r0, #0
 8012a70:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8012a72:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8012a74:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8012a78:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a7a:	4b22      	ldr	r3, [pc, #136]	; (8012b04 <UART_SetConfig+0x2e4>)
 8012a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a88:	d168      	bne.n	8012b5c <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a8a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a8e:	d073      	beq.n	8012b78 <UART_SetConfig+0x358>
    switch (clocksource)
 8012a90:	481f      	ldr	r0, [pc, #124]	; (8012b10 <UART_SetConfig+0x2f0>)
 8012a92:	e7df      	b.n	8012a54 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012a94:	f7fb f96e 	bl	800dd74 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8012a98:	2800      	cmp	r0, #0
 8012a9a:	d098      	beq.n	80129ce <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012a9c:	0043      	lsls	r3, r0, #1
 8012a9e:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012aa0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012aa4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012aa8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012aac:	f1a3 0210 	sub.w	r2, r3, #16
 8012ab0:	428a      	cmp	r2, r1
 8012ab2:	f63f af19 	bhi.w	80128e8 <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012ab6:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012aba:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8012abe:	6821      	ldr	r1, [r4, #0]
 8012ac0:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012ac2:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8012ac4:	4313      	orrs	r3, r2
 8012ac6:	60cb      	str	r3, [r1, #12]
 8012ac8:	e70f      	b.n	80128ea <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8012aca:	f7fa ffeb 	bl	800daa4 <HAL_RCC_GetSysClockFreq>
        break;
 8012ace:	e7e3      	b.n	8012a98 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012ad0:	f7fb f940 	bl	800dd54 <HAL_RCC_GetPCLK1Freq>
        break;
 8012ad4:	e7e0      	b.n	8012a98 <UART_SetConfig+0x278>
 8012ad6:	bf00      	nop
 8012ad8:	019bfcc0 	.word	0x019bfcc0
 8012adc:	efff69f3 	.word	0xefff69f3
 8012ae0:	40011000 	.word	0x40011000
 8012ae4:	40004400 	.word	0x40004400
 8012ae8:	40004800 	.word	0x40004800
 8012aec:	40004c00 	.word	0x40004c00
 8012af0:	40005000 	.word	0x40005000
 8012af4:	40011400 	.word	0x40011400
 8012af8:	40007800 	.word	0x40007800
 8012afc:	40007c00 	.word	0x40007c00
 8012b00:	0802ccc8 	.word	0x0802ccc8
 8012b04:	40023800 	.word	0x40023800
 8012b08:	0802cd08 	.word	0x0802cd08
 8012b0c:	0802cd04 	.word	0x0802cd04
 8012b10:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b14:	4b32      	ldr	r3, [pc, #200]	; (8012be0 <UART_SetConfig+0x3c0>)
 8012b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012b1e:	2b20      	cmp	r3, #32
 8012b20:	d0b3      	beq.n	8012a8a <UART_SetConfig+0x26a>
 8012b22:	d805      	bhi.n	8012b30 <UART_SetConfig+0x310>
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d085      	beq.n	8012a34 <UART_SetConfig+0x214>
 8012b28:	2b10      	cmp	r3, #16
 8012b2a:	f43f af7d 	beq.w	8012a28 <UART_SetConfig+0x208>
 8012b2e:	e6db      	b.n	80128e8 <UART_SetConfig+0xc8>
 8012b30:	2b30      	cmp	r3, #48	; 0x30
 8012b32:	d089      	beq.n	8012a48 <UART_SetConfig+0x228>
 8012b34:	e6d8      	b.n	80128e8 <UART_SetConfig+0xc8>
 8012b36:	4b2a      	ldr	r3, [pc, #168]	; (8012be0 <UART_SetConfig+0x3c0>)
 8012b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012b40:	2b80      	cmp	r3, #128	; 0x80
 8012b42:	d0a2      	beq.n	8012a8a <UART_SetConfig+0x26a>
 8012b44:	d806      	bhi.n	8012b54 <UART_SetConfig+0x334>
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	f43f af74 	beq.w	8012a34 <UART_SetConfig+0x214>
 8012b4c:	2b40      	cmp	r3, #64	; 0x40
 8012b4e:	f43f af6b 	beq.w	8012a28 <UART_SetConfig+0x208>
 8012b52:	e6c9      	b.n	80128e8 <UART_SetConfig+0xc8>
 8012b54:	2bc0      	cmp	r3, #192	; 0xc0
 8012b56:	f43f af77 	beq.w	8012a48 <UART_SetConfig+0x228>
 8012b5a:	e6c5      	b.n	80128e8 <UART_SetConfig+0xc8>
 8012b5c:	d807      	bhi.n	8012b6e <UART_SetConfig+0x34e>
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	f43f af2e 	beq.w	80129c0 <UART_SetConfig+0x1a0>
 8012b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b68:	f43f af5e 	beq.w	8012a28 <UART_SetConfig+0x208>
 8012b6c:	e6bc      	b.n	80128e8 <UART_SetConfig+0xc8>
 8012b6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012b72:	f43f af69 	beq.w	8012a48 <UART_SetConfig+0x228>
 8012b76:	e6b7      	b.n	80128e8 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012b78:	4b1a      	ldr	r3, [pc, #104]	; (8012be4 <UART_SetConfig+0x3c4>)
 8012b7a:	e790      	b.n	8012a9e <UART_SetConfig+0x27e>
    switch (clocksource)
 8012b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012b80:	e78d      	b.n	8012a9e <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b82:	4b17      	ldr	r3, [pc, #92]	; (8012be0 <UART_SetConfig+0x3c0>)
 8012b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b88:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012b90:	f43f af7b 	beq.w	8012a8a <UART_SetConfig+0x26a>
 8012b94:	d807      	bhi.n	8012ba6 <UART_SetConfig+0x386>
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f43f af4c 	beq.w	8012a34 <UART_SetConfig+0x214>
 8012b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ba0:	f43f af42 	beq.w	8012a28 <UART_SetConfig+0x208>
 8012ba4:	e6a0      	b.n	80128e8 <UART_SetConfig+0xc8>
 8012ba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012baa:	f43f af4d 	beq.w	8012a48 <UART_SetConfig+0x228>
 8012bae:	e69b      	b.n	80128e8 <UART_SetConfig+0xc8>
 8012bb0:	4b0b      	ldr	r3, [pc, #44]	; (8012be0 <UART_SetConfig+0x3c0>)
 8012bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012bb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012bbe:	f43f af64 	beq.w	8012a8a <UART_SetConfig+0x26a>
 8012bc2:	d807      	bhi.n	8012bd4 <UART_SetConfig+0x3b4>
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f43f af35 	beq.w	8012a34 <UART_SetConfig+0x214>
 8012bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012bce:	f43f af2b 	beq.w	8012a28 <UART_SetConfig+0x208>
 8012bd2:	e689      	b.n	80128e8 <UART_SetConfig+0xc8>
 8012bd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012bd8:	f43f af36 	beq.w	8012a48 <UART_SetConfig+0x228>
 8012bdc:	e684      	b.n	80128e8 <UART_SetConfig+0xc8>
 8012bde:	bf00      	nop
 8012be0:	40023800 	.word	0x40023800
 8012be4:	01e84800 	.word	0x01e84800

08012be8 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012be8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012bea:	2bff      	cmp	r3, #255	; 0xff
{
 8012bec:	b510      	push	{r4, lr}
 8012bee:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012bf0:	d87b      	bhi.n	8012cea <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012bf2:	07da      	lsls	r2, r3, #31
 8012bf4:	d50a      	bpl.n	8012c0c <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8012bf6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012bf8:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8012bfc:	f040 808e 	bne.w	8012d1c <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012c00:	6820      	ldr	r0, [r4, #0]
 8012c02:	6842      	ldr	r2, [r0, #4]
 8012c04:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8012c08:	430a      	orrs	r2, r1
 8012c0a:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012c0c:	0798      	lsls	r0, r3, #30
 8012c0e:	d50a      	bpl.n	8012c26 <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8012c10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012c12:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8012c16:	f040 8089 	bne.w	8012d2c <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012c1a:	6820      	ldr	r0, [r4, #0]
 8012c1c:	6842      	ldr	r2, [r0, #4]
 8012c1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012c22:	430a      	orrs	r2, r1
 8012c24:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012c26:	0759      	lsls	r1, r3, #29
 8012c28:	d50a      	bpl.n	8012c40 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8012c2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012c2c:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8012c30:	f040 8084 	bne.w	8012d3c <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012c34:	6820      	ldr	r0, [r4, #0]
 8012c36:	6842      	ldr	r2, [r0, #4]
 8012c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012c3c:	430a      	orrs	r2, r1
 8012c3e:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012c40:	071a      	lsls	r2, r3, #28
 8012c42:	d509      	bpl.n	8012c58 <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8012c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c46:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 8012c4a:	d17f      	bne.n	8012d4c <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012c4c:	6820      	ldr	r0, [r4, #0]
 8012c4e:	6842      	ldr	r2, [r0, #4]
 8012c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012c54:	430a      	orrs	r2, r1
 8012c56:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012c58:	06d8      	lsls	r0, r3, #27
 8012c5a:	d509      	bpl.n	8012c70 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8012c5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012c5e:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8012c62:	d17b      	bne.n	8012d5c <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012c64:	6820      	ldr	r0, [r4, #0]
 8012c66:	6882      	ldr	r2, [r0, #8]
 8012c68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012c6c:	430a      	orrs	r2, r1
 8012c6e:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012c70:	0699      	lsls	r1, r3, #26
 8012c72:	d509      	bpl.n	8012c88 <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8012c74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012c76:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8012c7a:	d177      	bne.n	8012d6c <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012c7c:	6820      	ldr	r0, [r4, #0]
 8012c7e:	6882      	ldr	r2, [r0, #8]
 8012c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012c84:	430a      	orrs	r2, r1
 8012c86:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012c88:	065a      	lsls	r2, r3, #25
 8012c8a:	d521      	bpl.n	8012cd0 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8012c8c:	4b46      	ldr	r3, [pc, #280]	; (8012da8 <UART_AdvFeatureConfig+0x1c0>)
 8012c8e:	6822      	ldr	r2, [r4, #0]
 8012c90:	4846      	ldr	r0, [pc, #280]	; (8012dac <UART_AdvFeatureConfig+0x1c4>)
 8012c92:	4947      	ldr	r1, [pc, #284]	; (8012db0 <UART_AdvFeatureConfig+0x1c8>)
 8012c94:	429a      	cmp	r2, r3
 8012c96:	bf18      	it	ne
 8012c98:	4282      	cmpne	r2, r0
 8012c9a:	bf14      	ite	ne
 8012c9c:	2301      	movne	r3, #1
 8012c9e:	2300      	moveq	r3, #0
 8012ca0:	428a      	cmp	r2, r1
 8012ca2:	bf0c      	ite	eq
 8012ca4:	2300      	moveq	r3, #0
 8012ca6:	f003 0301 	andne.w	r3, r3, #1
 8012caa:	b113      	cbz	r3, 8012cb2 <UART_AdvFeatureConfig+0xca>
 8012cac:	4b41      	ldr	r3, [pc, #260]	; (8012db4 <UART_AdvFeatureConfig+0x1cc>)
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d16b      	bne.n	8012d8a <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8012cb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012cb4:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8012cb8:	d160      	bne.n	8012d7c <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012cba:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012cbc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012cc0:	684b      	ldr	r3, [r1, #4]
 8012cc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012cc6:	ea43 0302 	orr.w	r3, r3, r2
 8012cca:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012ccc:	d014      	beq.n	8012cf8 <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cd0:	061b      	lsls	r3, r3, #24
 8012cd2:	d509      	bpl.n	8012ce8 <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8012cd4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012cd6:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8012cda:	d118      	bne.n	8012d0e <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012cdc:	6821      	ldr	r1, [r4, #0]
 8012cde:	684b      	ldr	r3, [r1, #4]
 8012ce0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	604b      	str	r3, [r1, #4]
}
 8012ce8:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012cea:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8012cee:	4832      	ldr	r0, [pc, #200]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012cf0:	f7f2 f960 	bl	8004fb4 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cf6:	e77c      	b.n	8012bf2 <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8012cf8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012cfa:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8012cfe:	d14a      	bne.n	8012d96 <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d00:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d04:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8012d08:	4302      	orrs	r2, r0
 8012d0a:	604a      	str	r2, [r1, #4]
 8012d0c:	e7e0      	b.n	8012cd0 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8012d0e:	f640 4136 	movw	r1, #3126	; 0xc36
 8012d12:	4829      	ldr	r0, [pc, #164]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d14:	f7f2 f94e 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d18:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012d1a:	e7df      	b.n	8012cdc <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8012d1c:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8012d20:	4825      	ldr	r0, [pc, #148]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d22:	f7f2 f947 	bl	8004fb4 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012d26:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8012d2a:	e769      	b.n	8012c00 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8012d2c:	f640 4105 	movw	r1, #3077	; 0xc05
 8012d30:	4821      	ldr	r0, [pc, #132]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d32:	f7f2 f93f 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012d36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d3a:	e76e      	b.n	8012c1a <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8012d3c:	f640 410c 	movw	r1, #3084	; 0xc0c
 8012d40:	481d      	ldr	r0, [pc, #116]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d42:	f7f2 f937 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012d46:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d4a:	e773      	b.n	8012c34 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8012d4c:	f640 4113 	movw	r1, #3091	; 0xc13
 8012d50:	4819      	ldr	r0, [pc, #100]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d52:	f7f2 f92f 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012d56:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d5a:	e777      	b.n	8012c4c <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8012d5c:	f640 411a 	movw	r1, #3098	; 0xc1a
 8012d60:	4815      	ldr	r0, [pc, #84]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d62:	f7f2 f927 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012d66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d6a:	e77b      	b.n	8012c64 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8012d6c:	f640 4121 	movw	r1, #3105	; 0xc21
 8012d70:	4811      	ldr	r0, [pc, #68]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d72:	f7f2 f91f 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012d76:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d7a:	e77f      	b.n	8012c7c <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8012d7c:	f640 4129 	movw	r1, #3113	; 0xc29
 8012d80:	480d      	ldr	r0, [pc, #52]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d82:	f7f2 f917 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012d88:	e797      	b.n	8012cba <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8012d8a:	f640 4128 	movw	r1, #3112	; 0xc28
 8012d8e:	480a      	ldr	r0, [pc, #40]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d90:	f7f2 f910 	bl	8004fb4 <assert_failed>
 8012d94:	e78d      	b.n	8012cb2 <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8012d96:	f640 412e 	movw	r1, #3118	; 0xc2e
 8012d9a:	4807      	ldr	r0, [pc, #28]	; (8012db8 <UART_AdvFeatureConfig+0x1d0>)
 8012d9c:	f7f2 f90a 	bl	8004fb4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012da0:	6821      	ldr	r1, [r4, #0]
 8012da2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012da4:	e7ac      	b.n	8012d00 <UART_AdvFeatureConfig+0x118>
 8012da6:	bf00      	nop
 8012da8:	40011000 	.word	0x40011000
 8012dac:	40004400 	.word	0x40004400
 8012db0:	40004800 	.word	0x40004800
 8012db4:	40011400 	.word	0x40011400
 8012db8:	0802ccc8 	.word	0x0802ccc8

08012dbc <UART_WaitOnFlagUntilTimeout>:
{
 8012dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012dc4:	4681      	mov	r9, r0
 8012dc6:	460f      	mov	r7, r1
 8012dc8:	4616      	mov	r6, r2
 8012dca:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012dcc:	6805      	ldr	r5, [r0, #0]
 8012dce:	e002      	b.n	8012dd6 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8012dd0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8012dd4:	d10c      	bne.n	8012df0 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012dd6:	69ec      	ldr	r4, [r5, #28]
 8012dd8:	ea37 0304 	bics.w	r3, r7, r4
 8012ddc:	bf0c      	ite	eq
 8012dde:	f04f 0c01 	moveq.w	ip, #1
 8012de2:	f04f 0c00 	movne.w	ip, #0
 8012de6:	45b4      	cmp	ip, r6
 8012de8:	d0f2      	beq.n	8012dd0 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8012dea:	2000      	movs	r0, #0
}
 8012dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012df0:	f7f5 f9de 	bl	80081b0 <HAL_GetTick>
 8012df4:	eba0 000a 	sub.w	r0, r0, sl
 8012df8:	4540      	cmp	r0, r8
 8012dfa:	d82d      	bhi.n	8012e58 <UART_WaitOnFlagUntilTimeout+0x9c>
 8012dfc:	f1b8 0f00 	cmp.w	r8, #0
 8012e00:	d02a      	beq.n	8012e58 <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012e02:	f8d9 5000 	ldr.w	r5, [r9]
 8012e06:	682b      	ldr	r3, [r5, #0]
 8012e08:	462a      	mov	r2, r5
 8012e0a:	0759      	lsls	r1, r3, #29
 8012e0c:	d5e3      	bpl.n	8012dd6 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012e0e:	69eb      	ldr	r3, [r5, #28]
 8012e10:	051b      	lsls	r3, r3, #20
 8012e12:	d5e0      	bpl.n	8012dd6 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e18:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e1a:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012e1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e22:	e842 3100 	strex	r1, r3, [r2]
 8012e26:	2900      	cmp	r1, #0
 8012e28:	d1f7      	bne.n	8012e1a <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e2a:	f102 0308 	add.w	r3, r2, #8
 8012e2e:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e32:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e36:	f102 0008 	add.w	r0, r2, #8
 8012e3a:	e840 3100 	strex	r1, r3, [r0]
 8012e3e:	2900      	cmp	r1, #0
 8012e40:	d1f3      	bne.n	8012e2a <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 8012e42:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8012e44:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8012e46:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8012e4a:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012e4e:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012e52:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8012e56:	e7c9      	b.n	8012dec <UART_WaitOnFlagUntilTimeout+0x30>
 8012e58:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e5c:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012e60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e64:	e842 3100 	strex	r1, r3, [r2]
 8012e68:	2900      	cmp	r1, #0
 8012e6a:	d1f7      	bne.n	8012e5c <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e6c:	f102 0308 	add.w	r3, r2, #8
 8012e70:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e78:	f102 0008 	add.w	r0, r2, #8
 8012e7c:	e840 3100 	strex	r1, r3, [r0]
 8012e80:	2900      	cmp	r1, #0
 8012e82:	d1f3      	bne.n	8012e6c <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8012e84:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8012e86:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8012e88:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8012e8c:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8012e90:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8012e94:	e7aa      	b.n	8012dec <UART_WaitOnFlagUntilTimeout+0x30>
 8012e96:	bf00      	nop

08012e98 <HAL_UART_Transmit>:
{
 8012e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e9c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8012e9e:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8012ea0:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8012ea2:	2b20      	cmp	r3, #32
 8012ea4:	d14b      	bne.n	8012f3e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8012ea6:	460d      	mov	r5, r1
 8012ea8:	2900      	cmp	r1, #0
 8012eaa:	d044      	beq.n	8012f36 <HAL_UART_Transmit+0x9e>
 8012eac:	fab2 f982 	clz	r9, r2
 8012eb0:	4617      	mov	r7, r2
 8012eb2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8012eb6:	2a00      	cmp	r2, #0
 8012eb8:	d03d      	beq.n	8012f36 <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 8012eba:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	d03c      	beq.n	8012f3e <HAL_UART_Transmit+0xa6>
 8012ec4:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ec6:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8012eca:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012ece:	2321      	movs	r3, #33	; 0x21
 8012ed0:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8012ed2:	f7f5 f96d 	bl	80081b0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ed6:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8012ed8:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8012eda:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8012ee2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ee6:	d040      	beq.n	8012f6a <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8012ee8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8012eec:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8012eee:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8012ef0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8012ef4:	b973      	cbnz	r3, 8012f14 <HAL_UART_Transmit+0x7c>
 8012ef6:	e02a      	b.n	8012f4e <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012ef8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8012efc:	6823      	ldr	r3, [r4, #0]
 8012efe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8012f00:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8012f04:	3a01      	subs	r2, #1
 8012f06:	b292      	uxth	r2, r2
 8012f08:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8012f0c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8012f10:	b292      	uxth	r2, r2
 8012f12:	b1e2      	cbz	r2, 8012f4e <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012f14:	4643      	mov	r3, r8
 8012f16:	2200      	movs	r2, #0
 8012f18:	2180      	movs	r1, #128	; 0x80
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	9600      	str	r6, [sp, #0]
 8012f1e:	f7ff ff4d 	bl	8012dbc <UART_WaitOnFlagUntilTimeout>
 8012f22:	b980      	cbnz	r0, 8012f46 <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 8012f24:	2d00      	cmp	r5, #0
 8012f26:	d1e7      	bne.n	8012ef8 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012f28:	f839 3b02 	ldrh.w	r3, [r9], #2
 8012f2c:	6822      	ldr	r2, [r4, #0]
 8012f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f32:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8012f34:	e7e4      	b.n	8012f00 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 8012f36:	2001      	movs	r0, #1
}
 8012f38:	b003      	add	sp, #12
 8012f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8012f3e:	2002      	movs	r0, #2
}
 8012f40:	b003      	add	sp, #12
 8012f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8012f46:	2003      	movs	r0, #3
}
 8012f48:	b003      	add	sp, #12
 8012f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012f4e:	4643      	mov	r3, r8
 8012f50:	2200      	movs	r2, #0
 8012f52:	2140      	movs	r1, #64	; 0x40
 8012f54:	4620      	mov	r0, r4
 8012f56:	9600      	str	r6, [sp, #0]
 8012f58:	f7ff ff30 	bl	8012dbc <UART_WaitOnFlagUntilTimeout>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	d1f2      	bne.n	8012f46 <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8012f60:	2320      	movs	r3, #32
 8012f62:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8012f64:	b003      	add	sp, #12
 8012f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f6a:	6923      	ldr	r3, [r4, #16]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1bb      	bne.n	8012ee8 <HAL_UART_Transmit+0x50>
 8012f70:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8012f72:	461d      	mov	r5, r3
 8012f74:	e7b8      	b.n	8012ee8 <HAL_UART_Transmit+0x50>
 8012f76:	bf00      	nop

08012f78 <UART_CheckIdleState>:
{
 8012f78:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f7a:	2600      	movs	r6, #0
{
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f80:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8012f84:	f7f5 f914 	bl	80081b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012f88:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8012f8a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	0712      	lsls	r2, r2, #28
 8012f90:	d40c      	bmi.n	8012fac <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	075b      	lsls	r3, r3, #29
 8012f96:	d418      	bmi.n	8012fca <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f98:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8012f9a:	2220      	movs	r2, #32
  return HAL_OK;
 8012f9c:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8012f9e:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8012fa0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8012fa4:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fa6:	6623      	str	r3, [r4, #96]	; 0x60
}
 8012fa8:	b002      	add	sp, #8
 8012faa:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012fac:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	4632      	mov	r2, r6
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	9100      	str	r1, [sp, #0]
 8012fb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012fbc:	f7ff fefe 	bl	8012dbc <UART_WaitOnFlagUntilTimeout>
 8012fc0:	b978      	cbnz	r0, 8012fe2 <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	075b      	lsls	r3, r3, #29
 8012fc8:	d5e6      	bpl.n	8012f98 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012fca:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8012fce:	462b      	mov	r3, r5
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012fd6:	9000      	str	r0, [sp, #0]
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f7ff feef 	bl	8012dbc <UART_WaitOnFlagUntilTimeout>
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	d0da      	beq.n	8012f98 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8012fe2:	2003      	movs	r0, #3
}
 8012fe4:	b002      	add	sp, #8
 8012fe6:	bd70      	pop	{r4, r5, r6, pc}

08012fe8 <HAL_UART_Init>:
  if (huart == NULL)
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	f000 8099 	beq.w	8013120 <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012fee:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012ff0:	6802      	ldr	r2, [r0, #0]
{
 8012ff2:	b510      	push	{r4, lr}
 8012ff4:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d051      	beq.n	801309e <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012ffa:	4b4d      	ldr	r3, [pc, #308]	; (8013130 <HAL_UART_Init+0x148>)
 8012ffc:	484d      	ldr	r0, [pc, #308]	; (8013134 <HAL_UART_Init+0x14c>)
 8012ffe:	494e      	ldr	r1, [pc, #312]	; (8013138 <HAL_UART_Init+0x150>)
 8013000:	429a      	cmp	r2, r3
 8013002:	bf18      	it	ne
 8013004:	4282      	cmpne	r2, r0
 8013006:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801300a:	bf14      	ite	ne
 801300c:	2301      	movne	r3, #1
 801300e:	2300      	moveq	r3, #0
 8013010:	428a      	cmp	r2, r1
 8013012:	bf0c      	ite	eq
 8013014:	2300      	moveq	r3, #0
 8013016:	f003 0301 	andne.w	r3, r3, #1
 801301a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801301e:	4282      	cmp	r2, r0
 8013020:	bf0c      	ite	eq
 8013022:	2300      	moveq	r3, #0
 8013024:	f003 0301 	andne.w	r3, r3, #1
 8013028:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 801302c:	428a      	cmp	r2, r1
 801302e:	bf0c      	ite	eq
 8013030:	2300      	moveq	r3, #0
 8013032:	f003 0301 	andne.w	r3, r3, #1
 8013036:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 801303a:	4282      	cmp	r2, r0
 801303c:	bf0c      	ite	eq
 801303e:	2300      	moveq	r3, #0
 8013040:	f003 0301 	andne.w	r3, r3, #1
 8013044:	428a      	cmp	r2, r1
 8013046:	bf0c      	ite	eq
 8013048:	2300      	moveq	r3, #0
 801304a:	f003 0301 	andne.w	r3, r3, #1
 801304e:	b113      	cbz	r3, 8013056 <HAL_UART_Init+0x6e>
 8013050:	4b3a      	ldr	r3, [pc, #232]	; (801313c <HAL_UART_Init+0x154>)
 8013052:	429a      	cmp	r2, r3
 8013054:	d166      	bne.n	8013124 <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8013056:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013058:	2b00      	cmp	r3, #0
 801305a:	d057      	beq.n	801310c <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 801305c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801305e:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013060:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8013062:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8013064:	6813      	ldr	r3, [r2, #0]
 8013066:	f023 0301 	bic.w	r3, r3, #1
 801306a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801306c:	f7ff fbd8 	bl	8012820 <UART_SetConfig>
 8013070:	2801      	cmp	r0, #1
 8013072:	d049      	beq.n	8013108 <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013076:	2b00      	cmp	r3, #0
 8013078:	d14e      	bne.n	8013118 <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801307a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 801307c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801307e:	685a      	ldr	r2, [r3, #4]
 8013080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013084:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013086:	689a      	ldr	r2, [r3, #8]
 8013088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801308c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	f042 0201 	orr.w	r2, r2, #1
}
 8013094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8013098:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801309a:	f7ff bf6d 	b.w	8012f78 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 801309e:	4b24      	ldr	r3, [pc, #144]	; (8013130 <HAL_UART_Init+0x148>)
 80130a0:	4824      	ldr	r0, [pc, #144]	; (8013134 <HAL_UART_Init+0x14c>)
 80130a2:	4925      	ldr	r1, [pc, #148]	; (8013138 <HAL_UART_Init+0x150>)
 80130a4:	429a      	cmp	r2, r3
 80130a6:	bf18      	it	ne
 80130a8:	4282      	cmpne	r2, r0
 80130aa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80130ae:	bf14      	ite	ne
 80130b0:	2301      	movne	r3, #1
 80130b2:	2300      	moveq	r3, #0
 80130b4:	428a      	cmp	r2, r1
 80130b6:	bf0c      	ite	eq
 80130b8:	2300      	moveq	r3, #0
 80130ba:	f003 0301 	andne.w	r3, r3, #1
 80130be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80130c2:	4282      	cmp	r2, r0
 80130c4:	bf0c      	ite	eq
 80130c6:	2300      	moveq	r3, #0
 80130c8:	f003 0301 	andne.w	r3, r3, #1
 80130cc:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 80130d0:	428a      	cmp	r2, r1
 80130d2:	bf0c      	ite	eq
 80130d4:	2300      	moveq	r3, #0
 80130d6:	f003 0301 	andne.w	r3, r3, #1
 80130da:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 80130de:	4282      	cmp	r2, r0
 80130e0:	bf0c      	ite	eq
 80130e2:	2300      	moveq	r3, #0
 80130e4:	f003 0301 	andne.w	r3, r3, #1
 80130e8:	428a      	cmp	r2, r1
 80130ea:	bf0c      	ite	eq
 80130ec:	2300      	moveq	r3, #0
 80130ee:	f003 0301 	andne.w	r3, r3, #1
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d0af      	beq.n	8013056 <HAL_UART_Init+0x6e>
 80130f6:	4b11      	ldr	r3, [pc, #68]	; (801313c <HAL_UART_Init+0x154>)
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d0ac      	beq.n	8013056 <HAL_UART_Init+0x6e>
 80130fc:	f240 1131 	movw	r1, #305	; 0x131
 8013100:	480f      	ldr	r0, [pc, #60]	; (8013140 <HAL_UART_Init+0x158>)
 8013102:	f7f1 ff57 	bl	8004fb4 <assert_failed>
 8013106:	e7a6      	b.n	8013056 <HAL_UART_Init+0x6e>
}
 8013108:	2001      	movs	r0, #1
 801310a:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 801310c:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 801310e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8013112:	f7f3 fcc1 	bl	8006a98 <HAL_UART_MspInit>
 8013116:	e7a1      	b.n	801305c <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 8013118:	4620      	mov	r0, r4
 801311a:	f7ff fd65 	bl	8012be8 <UART_AdvFeatureConfig>
 801311e:	e7ac      	b.n	801307a <HAL_UART_Init+0x92>
}
 8013120:	2001      	movs	r0, #1
 8013122:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8013124:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8013128:	4805      	ldr	r0, [pc, #20]	; (8013140 <HAL_UART_Init+0x158>)
 801312a:	f7f1 ff43 	bl	8004fb4 <assert_failed>
 801312e:	e792      	b.n	8013056 <HAL_UART_Init+0x6e>
 8013130:	40011000 	.word	0x40011000
 8013134:	40004400 	.word	0x40004400
 8013138:	40004800 	.word	0x40004800
 801313c:	40007c00 	.word	0x40007c00
 8013140:	0802ccc8 	.word	0x0802ccc8

08013144 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8013144:	2800      	cmp	r0, #0
 8013146:	d04a      	beq.n	80131de <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8013148:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 801314c:	b570      	push	{r4, r5, r6, lr}
 801314e:	460e      	mov	r6, r1
 8013150:	4604      	mov	r4, r0
 8013152:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8013154:	d13d      	bne.n	80131d2 <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8013156:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013158:	2b00      	cmp	r3, #0
 801315a:	d034      	beq.n	80131c6 <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 801315c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801315e:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013160:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8013162:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8013164:	6813      	ldr	r3, [r2, #0]
 8013166:	f023 0301 	bic.w	r3, r3, #1
 801316a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801316c:	f7ff fb58 	bl	8012820 <UART_SetConfig>
 8013170:	2801      	cmp	r0, #1
 8013172:	d026      	beq.n	80131c2 <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013176:	bb03      	cbnz	r3, 80131ba <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013178:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 801317a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801317e:	685a      	ldr	r2, [r3, #4]
 8013180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013184:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013186:	689a      	ldr	r2, [r3, #8]
 8013188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801318c:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 801318e:	d00d      	beq.n	80131ac <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8013190:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8013192:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8013194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013198:	4315      	orrs	r5, r2
 801319a:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 801319c:	681a      	ldr	r2, [r3, #0]
 801319e:	f042 0201 	orr.w	r2, r2, #1
}
 80131a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 80131a6:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80131a8:	f7ff bee6 	b.w	8012f78 <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80131ac:	6859      	ldr	r1, [r3, #4]
 80131ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80131b2:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 80131b6:	605e      	str	r6, [r3, #4]
 80131b8:	e7ea      	b.n	8013190 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 80131ba:	4620      	mov	r0, r4
 80131bc:	f7ff fd14 	bl	8012be8 <UART_AdvFeatureConfig>
 80131c0:	e7da      	b.n	8013178 <HAL_MultiProcessor_Init+0x34>
}
 80131c2:	2001      	movs	r0, #1
 80131c4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 80131c6:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 80131c8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80131cc:	f7f3 fc64 	bl	8006a98 <HAL_UART_MspInit>
 80131d0:	e7c4      	b.n	801315c <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80131d2:	f240 211d 	movw	r1, #541	; 0x21d
 80131d6:	4803      	ldr	r0, [pc, #12]	; (80131e4 <HAL_MultiProcessor_Init+0xa0>)
 80131d8:	f7f1 feec 	bl	8004fb4 <assert_failed>
 80131dc:	e7bb      	b.n	8013156 <HAL_MultiProcessor_Init+0x12>
}
 80131de:	2001      	movs	r0, #1
 80131e0:	4770      	bx	lr
 80131e2:	bf00      	nop
 80131e4:	0802ccc8 	.word	0x0802ccc8

080131e8 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 80131e8:	6883      	ldr	r3, [r0, #8]
{
 80131ea:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 80131ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 80131f0:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 80131f4:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 80131f6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80131fa:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80131fe:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8013200:	d04f      	beq.n	80132a2 <UART_Start_Receive_IT+0xba>
 8013202:	2b00      	cmp	r3, #0
 8013204:	d043      	beq.n	801328e <UART_Start_Receive_IT+0xa6>
 8013206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801320a:	d057      	beq.n	80132bc <UART_Start_Receive_IT+0xd4>
 801320c:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013210:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013212:	2322      	movs	r3, #34	; 0x22
 8013214:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013216:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801321a:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801321c:	f102 0308 	add.w	r3, r2, #8
 8013220:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013224:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013228:	f102 0408 	add.w	r4, r2, #8
 801322c:	e844 3100 	strex	r1, r3, [r4]
 8013230:	2900      	cmp	r1, #0
 8013232:	d1f3      	bne.n	801321c <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013234:	6883      	ldr	r3, [r0, #8]
 8013236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801323a:	d011      	beq.n	8013260 <UART_Start_Receive_IT+0x78>
 801323c:	4c23      	ldr	r4, [pc, #140]	; (80132cc <UART_Start_Receive_IT+0xe4>)
 801323e:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 8013240:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8013244:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013246:	b18b      	cbz	r3, 801326c <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013248:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801324c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013250:	e842 3100 	strex	r1, r3, [r2]
 8013254:	2900      	cmp	r1, #0
 8013256:	d1f7      	bne.n	8013248 <UART_Start_Receive_IT+0x60>
}
 8013258:	2000      	movs	r0, #0
 801325a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801325e:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013260:	6903      	ldr	r3, [r0, #16]
 8013262:	bb33      	cbnz	r3, 80132b2 <UART_Start_Receive_IT+0xca>
 8013264:	491a      	ldr	r1, [pc, #104]	; (80132d0 <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 8013266:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 801326a:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801326c:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8013270:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013274:	e842 3100 	strex	r1, r3, [r2]
 8013278:	2900      	cmp	r1, #0
 801327a:	d0ed      	beq.n	8013258 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801327c:	e852 3f00 	ldrex	r3, [r2]
 8013280:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013284:	e842 3100 	strex	r1, r3, [r2]
 8013288:	2900      	cmp	r1, #0
 801328a:	d1ef      	bne.n	801326c <UART_Start_Receive_IT+0x84>
 801328c:	e7e4      	b.n	8013258 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 801328e:	6903      	ldr	r3, [r0, #16]
 8013290:	b91b      	cbnz	r3, 801329a <UART_Start_Receive_IT+0xb2>
 8013292:	23ff      	movs	r3, #255	; 0xff
 8013294:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8013298:	e7ba      	b.n	8013210 <UART_Start_Receive_IT+0x28>
 801329a:	237f      	movs	r3, #127	; 0x7f
 801329c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80132a0:	e7b6      	b.n	8013210 <UART_Start_Receive_IT+0x28>
 80132a2:	6903      	ldr	r3, [r0, #16]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d1f4      	bne.n	8013292 <UART_Start_Receive_IT+0xaa>
 80132a8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80132ac:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80132b0:	e7ae      	b.n	8013210 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 80132b2:	4b06      	ldr	r3, [pc, #24]	; (80132cc <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 80132b4:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 80132b8:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 80132ba:	e7c5      	b.n	8013248 <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 80132bc:	6903      	ldr	r3, [r0, #16]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d0eb      	beq.n	801329a <UART_Start_Receive_IT+0xb2>
 80132c2:	233f      	movs	r3, #63	; 0x3f
 80132c4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80132c8:	e7a2      	b.n	8013210 <UART_Start_Receive_IT+0x28>
 80132ca:	bf00      	nop
 80132cc:	08012379 	.word	0x08012379
 80132d0:	08012419 	.word	0x08012419

080132d4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80132d4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80132d6:	2b20      	cmp	r3, #32
 80132d8:	d11e      	bne.n	8013318 <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 80132da:	b1d9      	cbz	r1, 8013314 <HAL_UART_Receive_IT+0x40>
 80132dc:	fab2 f382 	clz	r3, r2
 80132e0:	095b      	lsrs	r3, r3, #5
 80132e2:	b1ba      	cbz	r2, 8013314 <HAL_UART_Receive_IT+0x40>
{
 80132e4:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 80132e6:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 80132ea:	2c01      	cmp	r4, #1
 80132ec:	d016      	beq.n	801331c <HAL_UART_Receive_IT+0x48>
 80132ee:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80132f0:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80132f2:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 80132f4:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80132f8:	6863      	ldr	r3, [r4, #4]
 80132fa:	021b      	lsls	r3, r3, #8
 80132fc:	d507      	bpl.n	801330e <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132fe:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013306:	e844 3500 	strex	r5, r3, [r4]
 801330a:	2d00      	cmp	r5, #0
 801330c:	d1f7      	bne.n	80132fe <HAL_UART_Receive_IT+0x2a>
}
 801330e:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8013310:	f7ff bf6a 	b.w	80131e8 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8013314:	2001      	movs	r0, #1
}
 8013316:	4770      	bx	lr
    return HAL_BUSY;
 8013318:	2002      	movs	r0, #2
 801331a:	4770      	bx	lr
 801331c:	2002      	movs	r0, #2
}
 801331e:	bc30      	pop	{r4, r5}
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop

08013324 <UART_Start_Receive_DMA>:
{
 8013324:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013326:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013328:	2500      	movs	r5, #0
{
 801332a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 801332c:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801332e:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 8013332:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013336:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8013338:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801333a:	b168      	cbz	r0, 8013358 <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801333c:	4e1f      	ldr	r6, [pc, #124]	; (80133bc <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801333e:	4613      	mov	r3, r2
 8013340:	460a      	mov	r2, r1
 8013342:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013344:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013346:	4e1e      	ldr	r6, [pc, #120]	; (80133c0 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013348:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 801334a:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801334c:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801334e:	4e1d      	ldr	r6, [pc, #116]	; (80133c4 <UART_Start_Receive_DMA+0xa0>)
 8013350:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013352:	f7f6 f8f7 	bl	8009544 <HAL_DMA_Start_IT>
 8013356:	bb40      	cbnz	r0, 80133aa <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 8013358:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 801335a:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 801335c:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013360:	b14b      	cbz	r3, 8013376 <UART_Start_Receive_DMA+0x52>
 8013362:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013364:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801336c:	e843 2100 	strex	r1, r2, [r3]
 8013370:	2900      	cmp	r1, #0
 8013372:	d1f7      	bne.n	8013364 <UART_Start_Receive_DMA+0x40>
 8013374:	e000      	b.n	8013378 <UART_Start_Receive_DMA+0x54>
 8013376:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013378:	f103 0208 	add.w	r2, r3, #8
 801337c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013380:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013384:	f103 0008 	add.w	r0, r3, #8
 8013388:	e840 2100 	strex	r1, r2, [r0]
 801338c:	2900      	cmp	r1, #0
 801338e:	d1f3      	bne.n	8013378 <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013390:	f103 0208 	add.w	r2, r3, #8
 8013394:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801339c:	f103 0108 	add.w	r1, r3, #8
 80133a0:	e841 2000 	strex	r0, r2, [r1]
 80133a4:	2800      	cmp	r0, #0
 80133a6:	d1f3      	bne.n	8013390 <UART_Start_Receive_DMA+0x6c>
}
 80133a8:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80133aa:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 80133ac:	2320      	movs	r3, #32
      return HAL_ERROR;
 80133ae:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 80133b0:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80133b4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 80133b8:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80133ba:	bd70      	pop	{r4, r5, r6, pc}
 80133bc:	080124d5 	.word	0x080124d5
 80133c0:	080124b9 	.word	0x080124b9
 80133c4:	08012151 	.word	0x08012151

080133c8 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80133c8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80133ca:	2b20      	cmp	r3, #32
 80133cc:	d11e      	bne.n	801340c <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 80133ce:	b1d9      	cbz	r1, 8013408 <HAL_UART_Receive_DMA+0x40>
 80133d0:	fab2 f382 	clz	r3, r2
 80133d4:	095b      	lsrs	r3, r3, #5
 80133d6:	b1ba      	cbz	r2, 8013408 <HAL_UART_Receive_DMA+0x40>
{
 80133d8:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 80133da:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 80133de:	2c01      	cmp	r4, #1
 80133e0:	d016      	beq.n	8013410 <HAL_UART_Receive_DMA+0x48>
 80133e2:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80133e4:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80133e6:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 80133e8:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80133ec:	6863      	ldr	r3, [r4, #4]
 80133ee:	021b      	lsls	r3, r3, #8
 80133f0:	d507      	bpl.n	8013402 <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133f2:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80133f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133fa:	e844 3500 	strex	r5, r3, [r4]
 80133fe:	2d00      	cmp	r5, #0
 8013400:	d1f7      	bne.n	80133f2 <HAL_UART_Receive_DMA+0x2a>
}
 8013402:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013404:	f7ff bf8e 	b.w	8013324 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8013408:	2001      	movs	r0, #1
}
 801340a:	4770      	bx	lr
    return HAL_BUSY;
 801340c:	2002      	movs	r0, #2
 801340e:	4770      	bx	lr
 8013410:	2002      	movs	r0, #2
}
 8013412:	bc30      	pop	{r4, r5}
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop

08013418 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8013418:	2800      	cmp	r0, #0
 801341a:	f000 808a 	beq.w	8013532 <HAL_RS485Ex_Init+0x11a>
{
 801341e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8013422:	4c47      	ldr	r4, [pc, #284]	; (8013540 <HAL_RS485Ex_Init+0x128>)
 8013424:	4617      	mov	r7, r2
 8013426:	461d      	mov	r5, r3
 8013428:	4a46      	ldr	r2, [pc, #280]	; (8013544 <HAL_RS485Ex_Init+0x12c>)
 801342a:	6803      	ldr	r3, [r0, #0]
 801342c:	460e      	mov	r6, r1
 801342e:	4680      	mov	r8, r0
 8013430:	42a3      	cmp	r3, r4
 8013432:	bf18      	it	ne
 8013434:	4293      	cmpne	r3, r2
 8013436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801343a:	bf14      	ite	ne
 801343c:	2401      	movne	r4, #1
 801343e:	2400      	moveq	r4, #0
 8013440:	4293      	cmp	r3, r2
 8013442:	bf0c      	ite	eq
 8013444:	2400      	moveq	r4, #0
 8013446:	f004 0401 	andne.w	r4, r4, #1
 801344a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801344e:	4293      	cmp	r3, r2
 8013450:	bf0c      	ite	eq
 8013452:	2400      	moveq	r4, #0
 8013454:	f004 0401 	andne.w	r4, r4, #1
 8013458:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801345c:	4293      	cmp	r3, r2
 801345e:	bf0c      	ite	eq
 8013460:	2400      	moveq	r4, #0
 8013462:	f004 0401 	andne.w	r4, r4, #1
 8013466:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 801346a:	4293      	cmp	r3, r2
 801346c:	bf0c      	ite	eq
 801346e:	2400      	moveq	r4, #0
 8013470:	f004 0401 	andne.w	r4, r4, #1
 8013474:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8013478:	4293      	cmp	r3, r2
 801347a:	bf0c      	ite	eq
 801347c:	2400      	moveq	r4, #0
 801347e:	f004 0401 	andne.w	r4, r4, #1
 8013482:	b11c      	cbz	r4, 801348c <HAL_RS485Ex_Init+0x74>
 8013484:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013488:	4293      	cmp	r3, r2
 801348a:	d154      	bne.n	8013536 <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 801348c:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 8013490:	d14a      	bne.n	8013528 <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8013492:	2f1f      	cmp	r7, #31
 8013494:	d843      	bhi.n	801351e <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8013496:	2d1f      	cmp	r5, #31
 8013498:	d83c      	bhi.n	8013514 <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 801349a:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 801349e:	b39b      	cbz	r3, 8013508 <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80134a0:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 80134a4:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80134a6:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 80134a8:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80134ac:	6813      	ldr	r3, [r2, #0]
 80134ae:	f023 0301 	bic.w	r3, r3, #1
 80134b2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80134b4:	f7ff f9b4 	bl	8012820 <UART_SetConfig>
 80134b8:	2801      	cmp	r0, #1
 80134ba:	d022      	beq.n	8013502 <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80134bc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80134c0:	b9db      	cbnz	r3, 80134fa <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80134c2:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80134c6:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80134c8:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80134ca:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80134cc:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80134d0:	4d1d      	ldr	r5, [pc, #116]	; (8013548 <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80134d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80134d6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80134d8:	6899      	ldr	r1, [r3, #8]
 80134da:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80134de:	430e      	orrs	r6, r1
 80134e0:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80134e2:	681a      	ldr	r2, [r3, #0]
 80134e4:	4015      	ands	r5, r2
 80134e6:	432f      	orrs	r7, r5
 80134e8:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80134ea:	681a      	ldr	r2, [r3, #0]
 80134ec:	f042 0201 	orr.w	r2, r2, #1
}
 80134f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 80134f4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80134f6:	f7ff bd3f 	b.w	8012f78 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80134fa:	4640      	mov	r0, r8
 80134fc:	f7ff fb74 	bl	8012be8 <UART_AdvFeatureConfig>
 8013500:	e7df      	b.n	80134c2 <HAL_RS485Ex_Init+0xaa>
}
 8013502:	2001      	movs	r0, #1
 8013504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 8013508:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 801350a:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 801350e:	f7f3 fac3 	bl	8006a98 <HAL_UART_MspInit>
 8013512:	e7c5      	b.n	80134a0 <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8013514:	21aa      	movs	r1, #170	; 0xaa
 8013516:	480d      	ldr	r0, [pc, #52]	; (801354c <HAL_RS485Ex_Init+0x134>)
 8013518:	f7f1 fd4c 	bl	8004fb4 <assert_failed>
 801351c:	e7bd      	b.n	801349a <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 801351e:	21a7      	movs	r1, #167	; 0xa7
 8013520:	480a      	ldr	r0, [pc, #40]	; (801354c <HAL_RS485Ex_Init+0x134>)
 8013522:	f7f1 fd47 	bl	8004fb4 <assert_failed>
 8013526:	e7b6      	b.n	8013496 <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8013528:	21a4      	movs	r1, #164	; 0xa4
 801352a:	4808      	ldr	r0, [pc, #32]	; (801354c <HAL_RS485Ex_Init+0x134>)
 801352c:	f7f1 fd42 	bl	8004fb4 <assert_failed>
 8013530:	e7af      	b.n	8013492 <HAL_RS485Ex_Init+0x7a>
}
 8013532:	2001      	movs	r0, #1
 8013534:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8013536:	21a1      	movs	r1, #161	; 0xa1
 8013538:	4804      	ldr	r0, [pc, #16]	; (801354c <HAL_RS485Ex_Init+0x134>)
 801353a:	f7f1 fd3b 	bl	8004fb4 <assert_failed>
 801353e:	e7a5      	b.n	801348c <HAL_RS485Ex_Init+0x74>
 8013540:	40011000 	.word	0x40011000
 8013544:	40004400 	.word	0x40004400
 8013548:	fc00ffff 	.word	0xfc00ffff
 801354c:	0802cd18 	.word	0x0802cd18

08013550 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013550:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8013552:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013554:	4a11      	ldr	r2, [pc, #68]	; (801359c <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 8013556:	9301      	str	r3, [sp, #4]
 8013558:	e002      	b.n	8013560 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801355a:	6903      	ldr	r3, [r0, #16]
 801355c:	2b00      	cmp	r3, #0
 801355e:	db07      	blt.n	8013570 <USB_CoreReset+0x20>
    if (++count > 200000U)
 8013560:	9b01      	ldr	r3, [sp, #4]
 8013562:	3301      	adds	r3, #1
 8013564:	4293      	cmp	r3, r2
 8013566:	9301      	str	r3, [sp, #4]
 8013568:	d9f7      	bls.n	801355a <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 801356a:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 801356c:	b002      	add	sp, #8
 801356e:	4770      	bx	lr
  count = 0U;
 8013570:	2300      	movs	r3, #0
    if (++count > 200000U)
 8013572:	4a0a      	ldr	r2, [pc, #40]	; (801359c <USB_CoreReset+0x4c>)
  count = 0U;
 8013574:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013576:	6903      	ldr	r3, [r0, #16]
 8013578:	f043 0301 	orr.w	r3, r3, #1
 801357c:	6103      	str	r3, [r0, #16]
 801357e:	e003      	b.n	8013588 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013580:	6903      	ldr	r3, [r0, #16]
 8013582:	f013 0301 	ands.w	r3, r3, #1
 8013586:	d005      	beq.n	8013594 <USB_CoreReset+0x44>
    if (++count > 200000U)
 8013588:	9b01      	ldr	r3, [sp, #4]
 801358a:	3301      	adds	r3, #1
 801358c:	4293      	cmp	r3, r2
 801358e:	9301      	str	r3, [sp, #4]
 8013590:	d9f6      	bls.n	8013580 <USB_CoreReset+0x30>
 8013592:	e7ea      	b.n	801356a <USB_CoreReset+0x1a>
  return HAL_OK;
 8013594:	4618      	mov	r0, r3
}
 8013596:	b002      	add	sp, #8
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	00030d40 	.word	0x00030d40

080135a0 <USB_CoreInit>:
{
 80135a0:	b084      	sub	sp, #16
 80135a2:	b510      	push	{r4, lr}
 80135a4:	f10d 0c0c 	add.w	ip, sp, #12
 80135a8:	4604      	mov	r4, r0
 80135aa:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80135ae:	9b08      	ldr	r3, [sp, #32]
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d122      	bne.n	80135fa <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80135b4:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80135b6:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 80135ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80135bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 80135c0:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80135c2:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80135c4:	68c2      	ldr	r2, [r0, #12]
 80135c6:	ea03 0302 	and.w	r3, r3, r2
 80135ca:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80135cc:	68c3      	ldr	r3, [r0, #12]
 80135ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80135d2:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80135d4:	d01c      	beq.n	8013610 <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 80135d6:	4620      	mov	r0, r4
 80135d8:	f7ff ffba 	bl	8013550 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80135dc:	9b06      	ldr	r3, [sp, #24]
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d107      	bne.n	80135f2 <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80135e2:	68a3      	ldr	r3, [r4, #8]
 80135e4:	f043 0306 	orr.w	r3, r3, #6
 80135e8:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80135ea:	68a3      	ldr	r3, [r4, #8]
 80135ec:	f043 0320 	orr.w	r3, r3, #32
 80135f0:	60a3      	str	r3, [r4, #8]
}
 80135f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135f6:	b004      	add	sp, #16
 80135f8:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80135fa:	68c3      	ldr	r3, [r0, #12]
 80135fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013600:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8013602:	f7ff ffa5 	bl	8013550 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801360c:	63a3      	str	r3, [r4, #56]	; 0x38
 801360e:	e7e5      	b.n	80135dc <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013610:	68c3      	ldr	r3, [r0, #12]
 8013612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013616:	60c3      	str	r3, [r0, #12]
 8013618:	e7dd      	b.n	80135d6 <USB_CoreInit+0x36>
 801361a:	bf00      	nop

0801361c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 801361c:	2a02      	cmp	r2, #2
{
 801361e:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8013620:	d00b      	beq.n	801363a <USB_SetTurnaroundTime+0x1e>
 8013622:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013626:	68d9      	ldr	r1, [r3, #12]
}
 8013628:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801362a:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 801362e:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013630:	68da      	ldr	r2, [r3, #12]
 8013632:	ea42 020c 	orr.w	r2, r2, ip
 8013636:	60da      	str	r2, [r3, #12]
}
 8013638:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801363a:	4a23      	ldr	r2, [pc, #140]	; (80136c8 <USB_SetTurnaroundTime+0xac>)
 801363c:	4823      	ldr	r0, [pc, #140]	; (80136cc <USB_SetTurnaroundTime+0xb0>)
 801363e:	440a      	add	r2, r1
 8013640:	4282      	cmp	r2, r0
 8013642:	d92c      	bls.n	801369e <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013644:	4a22      	ldr	r2, [pc, #136]	; (80136d0 <USB_SetTurnaroundTime+0xb4>)
 8013646:	4823      	ldr	r0, [pc, #140]	; (80136d4 <USB_SetTurnaroundTime+0xb8>)
 8013648:	440a      	add	r2, r1
 801364a:	4282      	cmp	r2, r0
 801364c:	d92a      	bls.n	80136a4 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801364e:	4a22      	ldr	r2, [pc, #136]	; (80136d8 <USB_SetTurnaroundTime+0xbc>)
 8013650:	4822      	ldr	r0, [pc, #136]	; (80136dc <USB_SetTurnaroundTime+0xc0>)
 8013652:	440a      	add	r2, r1
 8013654:	4282      	cmp	r2, r0
 8013656:	d928      	bls.n	80136aa <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013658:	4a21      	ldr	r2, [pc, #132]	; (80136e0 <USB_SetTurnaroundTime+0xc4>)
 801365a:	4822      	ldr	r0, [pc, #136]	; (80136e4 <USB_SetTurnaroundTime+0xc8>)
 801365c:	440a      	add	r2, r1
 801365e:	4282      	cmp	r2, r0
 8013660:	d326      	bcc.n	80136b0 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013662:	4a21      	ldr	r2, [pc, #132]	; (80136e8 <USB_SetTurnaroundTime+0xcc>)
 8013664:	4821      	ldr	r0, [pc, #132]	; (80136ec <USB_SetTurnaroundTime+0xd0>)
 8013666:	440a      	add	r2, r1
 8013668:	4282      	cmp	r2, r0
 801366a:	d924      	bls.n	80136b6 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801366c:	4a20      	ldr	r2, [pc, #128]	; (80136f0 <USB_SetTurnaroundTime+0xd4>)
 801366e:	4821      	ldr	r0, [pc, #132]	; (80136f4 <USB_SetTurnaroundTime+0xd8>)
 8013670:	440a      	add	r2, r1
 8013672:	4282      	cmp	r2, r0
 8013674:	d322      	bcc.n	80136bc <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013676:	4a20      	ldr	r2, [pc, #128]	; (80136f8 <USB_SetTurnaroundTime+0xdc>)
 8013678:	4820      	ldr	r0, [pc, #128]	; (80136fc <USB_SetTurnaroundTime+0xe0>)
 801367a:	440a      	add	r2, r1
 801367c:	4282      	cmp	r2, r0
 801367e:	d3d0      	bcc.n	8013622 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013680:	4a1f      	ldr	r2, [pc, #124]	; (8013700 <USB_SetTurnaroundTime+0xe4>)
 8013682:	4820      	ldr	r0, [pc, #128]	; (8013704 <USB_SetTurnaroundTime+0xe8>)
 8013684:	440a      	add	r2, r1
 8013686:	4282      	cmp	r2, r0
 8013688:	d31b      	bcc.n	80136c2 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801368a:	4a1f      	ldr	r2, [pc, #124]	; (8013708 <USB_SetTurnaroundTime+0xec>)
 801368c:	481f      	ldr	r0, [pc, #124]	; (801370c <USB_SetTurnaroundTime+0xf0>)
 801368e:	440a      	add	r2, r1
 8013690:	4282      	cmp	r2, r0
 8013692:	bf34      	ite	cc
 8013694:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 8013698:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 801369c:	e7c3      	b.n	8013626 <USB_SetTurnaroundTime+0xa>
 801369e:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 80136a2:	e7c0      	b.n	8013626 <USB_SetTurnaroundTime+0xa>
 80136a4:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 80136a8:	e7bd      	b.n	8013626 <USB_SetTurnaroundTime+0xa>
 80136aa:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 80136ae:	e7ba      	b.n	8013626 <USB_SetTurnaroundTime+0xa>
 80136b0:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 80136b4:	e7b7      	b.n	8013626 <USB_SetTurnaroundTime+0xa>
 80136b6:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 80136ba:	e7b4      	b.n	8013626 <USB_SetTurnaroundTime+0xa>
 80136bc:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 80136c0:	e7b1      	b.n	8013626 <USB_SetTurnaroundTime+0xa>
 80136c2:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 80136c6:	e7ae      	b.n	8013626 <USB_SetTurnaroundTime+0xa>
 80136c8:	ff275340 	.word	0xff275340
 80136cc:	000c34ff 	.word	0x000c34ff
 80136d0:	ff1b1e40 	.word	0xff1b1e40
 80136d4:	000f423f 	.word	0x000f423f
 80136d8:	ff0bdc00 	.word	0xff0bdc00
 80136dc:	00124f7f 	.word	0x00124f7f
 80136e0:	fef98c80 	.word	0xfef98c80
 80136e4:	0013d620 	.word	0x0013d620
 80136e8:	fee5b660 	.word	0xfee5b660
 80136ec:	0016e35f 	.word	0x0016e35f
 80136f0:	feced300 	.word	0xfeced300
 80136f4:	001b7740 	.word	0x001b7740
 80136f8:	feb35bc0 	.word	0xfeb35bc0
 80136fc:	002191c0 	.word	0x002191c0
 8013700:	fe91ca00 	.word	0xfe91ca00
 8013704:	00387520 	.word	0x00387520
 8013708:	fe5954e0 	.word	0xfe5954e0
 801370c:	00419ce0 	.word	0x00419ce0

08013710 <USB_EnableGlobalInt>:
{
 8013710:	4603      	mov	r3, r0
}
 8013712:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013714:	689a      	ldr	r2, [r3, #8]
 8013716:	f042 0201 	orr.w	r2, r2, #1
 801371a:	609a      	str	r2, [r3, #8]
}
 801371c:	4770      	bx	lr
 801371e:	bf00      	nop

08013720 <USB_DisableGlobalInt>:
{
 8013720:	4603      	mov	r3, r0
}
 8013722:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013724:	689a      	ldr	r2, [r3, #8]
 8013726:	f022 0201 	bic.w	r2, r2, #1
 801372a:	609a      	str	r2, [r3, #8]
}
 801372c:	4770      	bx	lr
 801372e:	bf00      	nop

08013730 <USB_SetCurrentMode>:
{
 8013730:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013732:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8013734:	2901      	cmp	r1, #1
{
 8013736:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013738:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801373c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 801373e:	d017      	beq.n	8013770 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8013740:	b9a1      	cbnz	r1, 801376c <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013742:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8013744:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801374a:	60c3      	str	r3, [r0, #12]
 801374c:	e001      	b.n	8013752 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801374e:	2c32      	cmp	r4, #50	; 0x32
 8013750:	d00c      	beq.n	801376c <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8013752:	2001      	movs	r0, #1
      ms++;
 8013754:	4404      	add	r4, r0
      HAL_Delay(1U);
 8013756:	f7f4 fd31 	bl	80081bc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 801375a:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801375c:	07db      	lsls	r3, r3, #31
 801375e:	d4f6      	bmi.n	801374e <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8013760:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8013764:	fab0 f080 	clz	r0, r0
 8013768:	0940      	lsrs	r0, r0, #5
}
 801376a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801376c:	2001      	movs	r0, #1
}
 801376e:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013770:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8013772:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013774:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013778:	60c3      	str	r3, [r0, #12]
 801377a:	e001      	b.n	8013780 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801377c:	2c32      	cmp	r4, #50	; 0x32
 801377e:	d0f5      	beq.n	801376c <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8013780:	2001      	movs	r0, #1
      ms++;
 8013782:	4404      	add	r4, r0
      HAL_Delay(1U);
 8013784:	f7f4 fd1a 	bl	80081bc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8013788:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801378a:	07da      	lsls	r2, r3, #31
 801378c:	d5f6      	bpl.n	801377c <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 801378e:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8013792:	fab0 f080 	clz	r0, r0
 8013796:	0940      	lsrs	r0, r0, #5
 8013798:	e7e7      	b.n	801376a <USB_SetCurrentMode+0x3a>
 801379a:	bf00      	nop

0801379c <USB_FlushTxFifo>:
{
 801379c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801379e:	2300      	movs	r3, #0
    if (++count > 200000U)
 80137a0:	4a11      	ldr	r2, [pc, #68]	; (80137e8 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 80137a2:	9301      	str	r3, [sp, #4]
 80137a4:	e002      	b.n	80137ac <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80137a6:	6903      	ldr	r3, [r0, #16]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	db07      	blt.n	80137bc <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 80137ac:	9b01      	ldr	r3, [sp, #4]
 80137ae:	3301      	adds	r3, #1
 80137b0:	4293      	cmp	r3, r2
 80137b2:	9301      	str	r3, [sp, #4]
 80137b4:	d9f7      	bls.n	80137a6 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 80137b6:	2003      	movs	r0, #3
}
 80137b8:	b002      	add	sp, #8
 80137ba:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80137bc:	0189      	lsls	r1, r1, #6
  count = 0U;
 80137be:	2300      	movs	r3, #0
    if (++count > 200000U)
 80137c0:	4a09      	ldr	r2, [pc, #36]	; (80137e8 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80137c2:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80137c6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80137c8:	6101      	str	r1, [r0, #16]
 80137ca:	e003      	b.n	80137d4 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80137cc:	6903      	ldr	r3, [r0, #16]
 80137ce:	f013 0320 	ands.w	r3, r3, #32
 80137d2:	d005      	beq.n	80137e0 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 80137d4:	9b01      	ldr	r3, [sp, #4]
 80137d6:	3301      	adds	r3, #1
 80137d8:	4293      	cmp	r3, r2
 80137da:	9301      	str	r3, [sp, #4]
 80137dc:	d9f6      	bls.n	80137cc <USB_FlushTxFifo+0x30>
 80137de:	e7ea      	b.n	80137b6 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 80137e0:	4618      	mov	r0, r3
}
 80137e2:	b002      	add	sp, #8
 80137e4:	4770      	bx	lr
 80137e6:	bf00      	nop
 80137e8:	00030d40 	.word	0x00030d40

080137ec <USB_FlushRxFifo>:
{
 80137ec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80137ee:	2300      	movs	r3, #0
    if (++count > 200000U)
 80137f0:	4a10      	ldr	r2, [pc, #64]	; (8013834 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 80137f2:	9301      	str	r3, [sp, #4]
 80137f4:	e002      	b.n	80137fc <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80137f6:	6903      	ldr	r3, [r0, #16]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	db07      	blt.n	801380c <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 80137fc:	9b01      	ldr	r3, [sp, #4]
 80137fe:	3301      	adds	r3, #1
 8013800:	4293      	cmp	r3, r2
 8013802:	9301      	str	r3, [sp, #4]
 8013804:	d9f7      	bls.n	80137f6 <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 8013806:	2003      	movs	r0, #3
}
 8013808:	b002      	add	sp, #8
 801380a:	4770      	bx	lr
  count = 0U;
 801380c:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801380e:	2310      	movs	r3, #16
    if (++count > 200000U)
 8013810:	4a08      	ldr	r2, [pc, #32]	; (8013834 <USB_FlushRxFifo+0x48>)
  count = 0U;
 8013812:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013814:	6103      	str	r3, [r0, #16]
 8013816:	e003      	b.n	8013820 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013818:	6903      	ldr	r3, [r0, #16]
 801381a:	f013 0310 	ands.w	r3, r3, #16
 801381e:	d005      	beq.n	801382c <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 8013820:	9b01      	ldr	r3, [sp, #4]
 8013822:	3301      	adds	r3, #1
 8013824:	4293      	cmp	r3, r2
 8013826:	9301      	str	r3, [sp, #4]
 8013828:	d9f6      	bls.n	8013818 <USB_FlushRxFifo+0x2c>
 801382a:	e7ec      	b.n	8013806 <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 801382c:	4618      	mov	r0, r3
}
 801382e:	b002      	add	sp, #8
 8013830:	4770      	bx	lr
 8013832:	bf00      	nop
 8013834:	00030d40 	.word	0x00030d40

08013838 <USB_DevInit>:
{
 8013838:	b084      	sub	sp, #16
 801383a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801383e:	ad09      	add	r5, sp, #36	; 0x24
 8013840:	4604      	mov	r4, r0
 8013842:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013844:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8013848:	2300      	movs	r3, #0
 801384a:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 801384c:	4619      	mov	r1, r3
 801384e:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8013852:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8013854:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8013858:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 801385a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 801385c:	d1f7      	bne.n	801384e <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 801385e:	2e00      	cmp	r6, #0
 8013860:	f040 8092 	bne.w	8013988 <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013864:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8013868:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 801386c:	f043 0302 	orr.w	r3, r3, #2
 8013870:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013874:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013878:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801387a:	6823      	ldr	r3, [r4, #0]
 801387c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013880:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013882:	6823      	ldr	r3, [r4, #0]
 8013884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013888:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 801388a:	2300      	movs	r3, #0
 801388c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013896:	2b01      	cmp	r3, #1
 8013898:	d07d      	beq.n	8013996 <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	f043 0303 	orr.w	r3, r3, #3
 80138a0:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80138a2:	2110      	movs	r1, #16
 80138a4:	4620      	mov	r0, r4
 80138a6:	f7ff ff79 	bl	801379c <USB_FlushTxFifo>
 80138aa:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80138ac:	4620      	mov	r0, r4
 80138ae:	f7ff ff9d 	bl	80137ec <USB_FlushRxFifo>
 80138b2:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 80138b6:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80138b8:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 80138ba:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 80138bc:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 80138be:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80138c0:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 80138c2:	bf18      	it	ne
 80138c4:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80138c6:	b1ed      	cbz	r5, 8013904 <USB_DevInit+0xcc>
 80138c8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80138cc:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80138d0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80138d4:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80138d6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80138da:	e009      	b.n	80138f0 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 80138dc:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80138e0:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80138e2:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80138e6:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80138ea:	3320      	adds	r3, #32
 80138ec:	4295      	cmp	r5, r2
 80138ee:	d02c      	beq.n	801394a <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80138f0:	6819      	ldr	r1, [r3, #0]
 80138f2:	2900      	cmp	r1, #0
 80138f4:	daf2      	bge.n	80138dc <USB_DevInit+0xa4>
      if (i == 0U)
 80138f6:	b112      	cbz	r2, 80138fe <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80138f8:	f8c3 8000 	str.w	r8, [r3]
 80138fc:	e7f0      	b.n	80138e0 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80138fe:	f8c3 9000 	str.w	r9, [r3]
 8013902:	e7ed      	b.n	80138e0 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013904:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8013906:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801390c:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 801390e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8013912:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013914:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8013916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013918:	b91b      	cbnz	r3, 8013922 <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801391a:	69a3      	ldr	r3, [r4, #24]
 801391c:	f043 0310 	orr.w	r3, r3, #16
 8013920:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013922:	69a2      	ldr	r2, [r4, #24]
 8013924:	4b21      	ldr	r3, [pc, #132]	; (80139ac <USB_DevInit+0x174>)
 8013926:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8013928:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801392a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 801392c:	b11a      	cbz	r2, 8013936 <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801392e:	69a3      	ldr	r3, [r4, #24]
 8013930:	f043 0308 	orr.w	r3, r3, #8
 8013934:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8013936:	2e01      	cmp	r6, #1
 8013938:	d103      	bne.n	8013942 <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801393a:	69a2      	ldr	r2, [r4, #24]
 801393c:	4b1c      	ldr	r3, [pc, #112]	; (80139b0 <USB_DevInit+0x178>)
 801393e:	4313      	orrs	r3, r2
 8013940:	61a3      	str	r3, [r4, #24]
}
 8013942:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013946:	b004      	add	sp, #16
 8013948:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801394a:	2200      	movs	r2, #0
 801394c:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013950:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013954:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013958:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801395a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 801395e:	e009      	b.n	8013974 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013960:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013964:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013966:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801396a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801396e:	3320      	adds	r3, #32
 8013970:	4295      	cmp	r5, r2
 8013972:	d0c7      	beq.n	8013904 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013974:	6819      	ldr	r1, [r3, #0]
 8013976:	2900      	cmp	r1, #0
 8013978:	daf2      	bge.n	8013960 <USB_DevInit+0x128>
      if (i == 0U)
 801397a:	b112      	cbz	r2, 8013982 <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801397c:	f8c3 8000 	str.w	r8, [r3]
 8013980:	e7f0      	b.n	8013964 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013982:	f8c3 9000 	str.w	r9, [r3]
 8013986:	e7ed      	b.n	8013964 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013988:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801398a:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801398e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013992:	63a3      	str	r3, [r4, #56]	; 0x38
 8013994:	e779      	b.n	801388a <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 8013996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013998:	b913      	cbnz	r3, 80139a0 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 801399e:	e780      	b.n	80138a2 <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	f043 0301 	orr.w	r3, r3, #1
 80139a6:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 80139a8:	e77b      	b.n	80138a2 <USB_DevInit+0x6a>
 80139aa:	bf00      	nop
 80139ac:	803c3800 	.word	0x803c3800
 80139b0:	40000004 	.word	0x40000004

080139b4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80139b4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80139b8:	f013 0006 	ands.w	r0, r3, #6
 80139bc:	d004      	beq.n	80139c8 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 80139be:	f013 0f02 	tst.w	r3, #2
 80139c2:	bf14      	ite	ne
 80139c4:	2002      	movne	r0, #2
 80139c6:	200f      	moveq	r0, #15
}
 80139c8:	4770      	bx	lr
 80139ca:	bf00      	nop

080139cc <USB_ActivateEndpoint>:
{
 80139cc:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 80139ce:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80139d0:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d020      	beq.n	8013a18 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80139d6:	f002 0c0f 	and.w	ip, r2, #15
 80139da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80139de:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80139e2:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80139e6:	fa03 f30c 	lsl.w	r3, r3, ip
 80139ea:	4323      	orrs	r3, r4
 80139ec:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80139f0:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80139f4:	041b      	lsls	r3, r3, #16
 80139f6:	d40c      	bmi.n	8013a12 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80139f8:	688b      	ldr	r3, [r1, #8]
 80139fa:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 80139fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013a02:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013a04:	4914      	ldr	r1, [pc, #80]	; (8013a58 <USB_ActivateEndpoint+0x8c>)
 8013a06:	4323      	orrs	r3, r4
 8013a08:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8013a0c:	4319      	orrs	r1, r3
 8013a0e:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8013a12:	2000      	movs	r0, #0
 8013a14:	bc30      	pop	{r4, r5}
 8013a16:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013a18:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8013a1c:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013a20:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013a24:	40ab      	lsls	r3, r5
 8013a26:	69e5      	ldr	r5, [r4, #28]
 8013a28:	432b      	orrs	r3, r5
 8013a2a:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013a2c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013a30:	041c      	lsls	r4, r3, #16
 8013a32:	d4ee      	bmi.n	8013a12 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a34:	688b      	ldr	r3, [r1, #8]
 8013a36:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8013a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013a3e:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a40:	4905      	ldr	r1, [pc, #20]	; (8013a58 <USB_ActivateEndpoint+0x8c>)
 8013a42:	432b      	orrs	r3, r5
 8013a44:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8013a48:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8013a4c:	4311      	orrs	r1, r2
}
 8013a4e:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a50:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8013a54:	2000      	movs	r0, #0
 8013a56:	4770      	bx	lr
 8013a58:	10008000 	.word	0x10008000

08013a5c <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 8013a5c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013a5e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013a60:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013a62:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013a66:	d02a      	beq.n	8013abe <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a68:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013a6c:	2a00      	cmp	r2, #0
 8013a6e:	db19      	blt.n	8013aa4 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013a74:	f003 030f 	and.w	r3, r3, #15
 8013a78:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8013a7c:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013a80:	4a23      	ldr	r2, [pc, #140]	; (8013b10 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a82:	ea21 0103 	bic.w	r1, r1, r3
 8013a86:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a8a:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8013a8e:	ea21 0303 	bic.w	r3, r1, r3
 8013a92:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8013a96:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013a98:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013a9c:	401a      	ands	r2, r3
 8013a9e:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 8013aa2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013aa4:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013aa8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013aac:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013ab0:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013ab4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013ab8:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8013abc:	e7d8      	b.n	8013a70 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013abe:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013ac2:	2a00      	cmp	r2, #0
 8013ac4:	da0b      	bge.n	8013ade <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013ac6:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013aca:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013ace:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013ad2:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013ad6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013ada:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013ade:	f003 020f 	and.w	r2, r3, #15
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8013ae8:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013aea:	4a0a      	ldr	r2, [pc, #40]	; (8013b14 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013aec:	ea21 0103 	bic.w	r1, r1, r3
 8013af0:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013af4:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8013af8:	ea21 0303 	bic.w	r3, r1, r3
 8013afc:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8013b00:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013b02:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8013b06:	401a      	ands	r2, r3
 8013b08:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8013b0c:	4770      	bx	lr
 8013b0e:	bf00      	nop
 8013b10:	eff37800 	.word	0xeff37800
 8013b14:	ec337800 	.word	0xec337800

08013b18 <USB_EPStartXfer>:
{
 8013b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8013b1c:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013b1e:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8013b22:	2b01      	cmp	r3, #1
 8013b24:	d051      	beq.n	8013bca <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013b26:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8013b2a:	4c84      	ldr	r4, [pc, #528]	; (8013d3c <USB_EPStartXfer+0x224>)
 8013b2c:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 8013b30:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 8013b34:	402c      	ands	r4, r5
 8013b36:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013b38:	4c81      	ldr	r4, [pc, #516]	; (8013d40 <USB_EPStartXfer+0x228>)
 8013b3a:	691d      	ldr	r5, [r3, #16]
 8013b3c:	402c      	ands	r4, r5
 8013b3e:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8013b40:	694c      	ldr	r4, [r1, #20]
 8013b42:	b384      	cbz	r4, 8013ba6 <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b44:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8013b46:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b48:	4e7e      	ldr	r6, [pc, #504]	; (8013d44 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b4a:	442c      	add	r4, r5
 8013b4c:	f104 34ff 	add.w	r4, r4, #4294967295
 8013b50:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b54:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 8013b58:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013b5a:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b5e:	691d      	ldr	r5, [r3, #16]
 8013b60:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013b64:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b68:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013b6a:	691d      	ldr	r5, [r3, #16]
 8013b6c:	ea44 0405 	orr.w	r4, r4, r5
 8013b70:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8013b72:	d025      	beq.n	8013bc0 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 8013b74:	78cb      	ldrb	r3, [r1, #3]
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	d10c      	bne.n	8013b94 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013b7a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013b7e:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013b82:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013b86:	bf0c      	ite	eq
 8013b88:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013b8c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013b90:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013b94:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013b98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013b9c:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013ba6:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 8013ba8:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013baa:	691d      	ldr	r5, [r3, #16]
 8013bac:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8013bb0:	ea44 0405 	orr.w	r4, r4, r5
 8013bb4:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013bb6:	691c      	ldr	r4, [r3, #16]
 8013bb8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8013bbc:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8013bbe:	d1d9      	bne.n	8013b74 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8013bc0:	68ca      	ldr	r2, [r1, #12]
 8013bc2:	2a00      	cmp	r2, #0
 8013bc4:	d0d6      	beq.n	8013b74 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013bc6:	615a      	str	r2, [r3, #20]
 8013bc8:	e7d4      	b.n	8013b74 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 8013bca:	694d      	ldr	r5, [r1, #20]
 8013bcc:	2d00      	cmp	r5, #0
 8013bce:	d03d      	beq.n	8013c4c <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013bd0:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8013bd4:	4e59      	ldr	r6, [pc, #356]	; (8013d3c <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013bd6:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013bda:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013bde:	4f58      	ldr	r7, [pc, #352]	; (8013d40 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013be0:	ea08 0606 	and.w	r6, r8, r6
 8013be4:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013be8:	eb05 060e 	add.w	r6, r5, lr
 8013bec:	3e01      	subs	r6, #1
 8013bee:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013bf2:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8013bf6:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013bf8:	4e52      	ldr	r6, [pc, #328]	; (8013d44 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013bfa:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013bfe:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 8013c02:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8013c06:	433e      	orrs	r6, r7
 8013c08:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013c0c:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8013c10:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8013c14:	433e      	orrs	r6, r7
 8013c16:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013c1a:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8013c1e:	f891 e003 	ldrb.w	lr, [r1, #3]
 8013c22:	f1be 0f01 	cmp.w	lr, #1
 8013c26:	d057      	beq.n	8013cd8 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 8013c28:	2a01      	cmp	r2, #1
 8013c2a:	d072      	beq.n	8013d12 <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c2c:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013c30:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c34:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013c38:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c3c:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013c40:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8013c44:	4313      	orrs	r3, r2
 8013c46:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8013c4a:	e7a9      	b.n	8013ba0 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c4c:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8013c50:	4e3b      	ldr	r6, [pc, #236]	; (8013d40 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013c52:	4c3a      	ldr	r4, [pc, #232]	; (8013d3c <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 8013c54:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c56:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8013c5a:	ea06 0607 	and.w	r6, r6, r7
 8013c5e:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013c62:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8013c66:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8013c6a:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013c6e:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8013c72:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c76:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013c7a:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8013c7e:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 8013c82:	d03a      	beq.n	8013cfa <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c84:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013c88:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c8c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8013c90:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013c94:	d184      	bne.n	8013ba0 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c96:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013c9a:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013c9e:	6833      	ldr	r3, [r6, #0]
 8013ca0:	bf0c      	ite	eq
 8013ca2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013ca6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013caa:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8013cac:	2a00      	cmp	r2, #0
 8013cae:	f47f af77 	bne.w	8013ba0 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 8013cb2:	b2ad      	uxth	r5, r5
 8013cb4:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8013cb6:	08ad      	lsrs	r5, r5, #2
 8013cb8:	f43f af72 	beq.w	8013ba0 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013cbc:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013cbe:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 8013cc2:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8013cc6:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8013cca:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8013cce:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013cd0:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8013cd4:	d1f9      	bne.n	8013cca <USB_EPStartXfer+0x1b2>
 8013cd6:	e763      	b.n	8013ba0 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013cd8:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8013cda:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013cdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013ce0:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013ce2:	6933      	ldr	r3, [r6, #16]
 8013ce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013ce8:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8013cea:	d017      	beq.n	8013d1c <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013cec:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8013cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013cf4:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013cf8:	e7cd      	b.n	8013c96 <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 8013cfa:	690b      	ldr	r3, [r1, #16]
 8013cfc:	b963      	cbnz	r3, 8013d18 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 8013cfe:	f1be 0f01 	cmp.w	lr, #1
 8013d02:	d00e      	beq.n	8013d22 <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013d04:	6833      	ldr	r3, [r6, #0]
}
 8013d06:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013d08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d0c:	6033      	str	r3, [r6, #0]
}
 8013d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8013d12:	690b      	ldr	r3, [r1, #16]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d0f5      	beq.n	8013d04 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013d18:	6173      	str	r3, [r6, #20]
 8013d1a:	e7f0      	b.n	8013cfe <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8013d1c:	690b      	ldr	r3, [r1, #16]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d1fa      	bne.n	8013d18 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013d22:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013d26:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013d2a:	6833      	ldr	r3, [r6, #0]
 8013d2c:	bf0c      	ite	eq
 8013d2e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013d32:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013d36:	6033      	str	r3, [r6, #0]
 8013d38:	e7e4      	b.n	8013d04 <USB_EPStartXfer+0x1ec>
 8013d3a:	bf00      	nop
 8013d3c:	fff80000 	.word	0xfff80000
 8013d40:	e007ffff 	.word	0xe007ffff
 8013d44:	1ff80000 	.word	0x1ff80000

08013d48 <USB_EP0StartXfer>:
{
 8013d48:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8013d4a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013d4c:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8013d4e:	2b01      	cmp	r3, #1
 8013d50:	d027      	beq.n	8013da2 <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013d52:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8013d56:	4c3c      	ldr	r4, [pc, #240]	; (8013e48 <USB_EP0StartXfer+0x100>)
 8013d58:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8013d5c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8013d60:	402c      	ands	r4, r5
 8013d62:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013d64:	4c39      	ldr	r4, [pc, #228]	; (8013e4c <USB_EP0StartXfer+0x104>)
 8013d66:	691d      	ldr	r5, [r3, #16]
 8013d68:	402c      	ands	r4, r5
 8013d6a:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8013d6c:	694c      	ldr	r4, [r1, #20]
 8013d6e:	b9ac      	cbnz	r4, 8013d9c <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 8013d70:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013d72:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013d74:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8013d78:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013d7a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013d7e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013d80:	691d      	ldr	r5, [r3, #16]
 8013d82:	ea44 0405 	orr.w	r4, r4, r5
 8013d86:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8013d88:	d03e      	beq.n	8013e08 <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013d8a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013d8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d92:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013d96:	2000      	movs	r0, #0
 8013d98:	bcf0      	pop	{r4, r5, r6, r7}
 8013d9a:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8013d9c:	688c      	ldr	r4, [r1, #8]
 8013d9e:	614c      	str	r4, [r1, #20]
 8013da0:	e7e7      	b.n	8013d72 <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013da2:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8013da6:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8013dac:	2d00      	cmp	r5, #0
 8013dae:	d030      	beq.n	8013e12 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013db0:	691f      	ldr	r7, [r3, #16]
 8013db2:	4e25      	ldr	r6, [pc, #148]	; (8013e48 <USB_EP0StartXfer+0x100>)
 8013db4:	403e      	ands	r6, r7
 8013db6:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013db8:	4e24      	ldr	r6, [pc, #144]	; (8013e4c <USB_EP0StartXfer+0x104>)
 8013dba:	691f      	ldr	r7, [r3, #16]
 8013dbc:	403e      	ands	r6, r7
 8013dbe:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8013dc0:	688e      	ldr	r6, [r1, #8]
 8013dc2:	42b5      	cmp	r5, r6
 8013dc4:	d901      	bls.n	8013dca <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 8013dc6:	4635      	mov	r5, r6
 8013dc8:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013dca:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013dcc:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8013dd0:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013dd2:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8013dd6:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013dd8:	691e      	ldr	r6, [r3, #16]
 8013dda:	ea45 0506 	orr.w	r5, r5, r6
 8013dde:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8013de0:	d027      	beq.n	8013e32 <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013de2:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8013de4:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013de6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8013dea:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8013dec:	2900      	cmp	r1, #0
 8013dee:	d0d2      	beq.n	8013d96 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013df0:	f004 020f 	and.w	r2, r4, #15
 8013df4:	2401      	movs	r4, #1
 8013df6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8013dfa:	4094      	lsls	r4, r2
 8013dfc:	431c      	orrs	r4, r3
 8013dfe:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8013e02:	2000      	movs	r0, #0
 8013e04:	bcf0      	pop	{r4, r5, r6, r7}
 8013e06:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8013e08:	68ca      	ldr	r2, [r1, #12]
 8013e0a:	2a00      	cmp	r2, #0
 8013e0c:	d0bd      	beq.n	8013d8a <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013e0e:	615a      	str	r2, [r3, #20]
 8013e10:	e7bb      	b.n	8013d8a <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013e12:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8013e14:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013e16:	4d0d      	ldr	r5, [pc, #52]	; (8013e4c <USB_EP0StartXfer+0x104>)
 8013e18:	ea05 0506 	and.w	r5, r5, r6
 8013e1c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013e1e:	691d      	ldr	r5, [r3, #16]
 8013e20:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013e24:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013e26:	4d08      	ldr	r5, [pc, #32]	; (8013e48 <USB_EP0StartXfer+0x100>)
 8013e28:	691e      	ldr	r6, [r3, #16]
 8013e2a:	ea05 0506 	and.w	r5, r5, r6
 8013e2e:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8013e30:	d1d7      	bne.n	8013de2 <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8013e32:	690a      	ldr	r2, [r1, #16]
 8013e34:	b102      	cbz	r2, 8013e38 <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013e36:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e38:	681a      	ldr	r2, [r3, #0]
}
 8013e3a:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e3c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8013e40:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e42:	601a      	str	r2, [r3, #0]
}
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	fff80000 	.word	0xfff80000
 8013e4c:	e007ffff 	.word	0xe007ffff

08013e50 <USB_WritePacket>:
{
 8013e50:	b410      	push	{r4}
 8013e52:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8013e56:	b964      	cbnz	r4, 8013e72 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8013e58:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8013e5a:	089b      	lsrs	r3, r3, #2
 8013e5c:	d009      	beq.n	8013e72 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013e5e:	3201      	adds	r2, #1
 8013e60:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013e64:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8013e68:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8013e6c:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013e6e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8013e70:	d1fa      	bne.n	8013e68 <USB_WritePacket+0x18>
}
 8013e72:	2000      	movs	r0, #0
 8013e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e78:	4770      	bx	lr
 8013e7a:	bf00      	nop

08013e7c <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8013e7c:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8013e80:	b570      	push	{r4, r5, r6, lr}
 8013e82:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8013e84:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8013e88:	d01a      	beq.n	8013ec0 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013e8a:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8013e8e:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8013e90:	2300      	movs	r3, #0
 8013e92:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013e94:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8013e98:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013e9a:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8013e9e:	d1f8      	bne.n	8013e92 <USB_ReadPacket+0x16>
    pDest++;
 8013ea0:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8013ea4:	b15e      	cbz	r6, 8013ebe <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013ea6:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8013eaa:	4406      	add	r6, r0
 8013eac:	2200      	movs	r2, #0
 8013eae:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013eb0:	fa21 f302 	lsr.w	r3, r1, r2
 8013eb4:	3208      	adds	r2, #8
 8013eb6:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 8013eba:	42b0      	cmp	r0, r6
 8013ebc:	d1f8      	bne.n	8013eb0 <USB_ReadPacket+0x34>
}
 8013ebe:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8013ec0:	4608      	mov	r0, r1
 8013ec2:	e7ef      	b.n	8013ea4 <USB_ReadPacket+0x28>

08013ec4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8013ec4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013ec6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013ec8:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013eca:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013ece:	d00c      	beq.n	8013eea <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ed0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8013ed4:	b10b      	cbz	r3, 8013eda <USB_EPSetStall+0x16>
 8013ed6:	2a00      	cmp	r2, #0
 8013ed8:	da14      	bge.n	8013f04 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013eda:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013ede:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013ee2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013ee6:	2000      	movs	r0, #0
 8013ee8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013eea:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8013eee:	2a00      	cmp	r2, #0
 8013ef0:	db00      	blt.n	8013ef4 <USB_EPSetStall+0x30>
 8013ef2:	b973      	cbnz	r3, 8013f12 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013ef4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013efc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8013f00:	2000      	movs	r0, #0
 8013f02:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013f04:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013f08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013f0c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013f10:	e7e3      	b.n	8013eda <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013f12:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013f1a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013f1e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013f26:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8013f2a:	e7e9      	b.n	8013f00 <USB_EPSetStall+0x3c>

08013f2c <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8013f2c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013f2e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013f30:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013f32:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013f36:	d013      	beq.n	8013f60 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013f38:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013f3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f40:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013f44:	78cb      	ldrb	r3, [r1, #3]
 8013f46:	3b02      	subs	r3, #2
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d901      	bls.n	8013f50 <USB_EPClearStall+0x24>
}
 8013f4c:	2000      	movs	r0, #0
 8013f4e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013f50:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f58:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013f5c:	2000      	movs	r0, #0
 8013f5e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013f60:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f68:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013f6c:	78cb      	ldrb	r3, [r1, #3]
 8013f6e:	3b02      	subs	r3, #2
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d8eb      	bhi.n	8013f4c <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013f74:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f7c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8013f80:	2000      	movs	r0, #0
 8013f82:	4770      	bx	lr

08013f84 <USB_SetDevAddress>:
{
 8013f84:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013f86:	0109      	lsls	r1, r1, #4
}
 8013f88:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013f8a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013f8e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013f92:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8013f96:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013f9a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8013f9e:	4311      	orrs	r1, r2
 8013fa0:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8013fa4:	4770      	bx	lr
 8013fa6:	bf00      	nop

08013fa8 <USB_DevConnect>:
{
 8013fa8:	4603      	mov	r3, r0
}
 8013faa:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013fac:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013fb0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013fb4:	f022 0203 	bic.w	r2, r2, #3
 8013fb8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013fbc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013fc0:	f023 0302 	bic.w	r3, r3, #2
 8013fc4:	604b      	str	r3, [r1, #4]
}
 8013fc6:	4770      	bx	lr

08013fc8 <USB_DevDisconnect>:
{
 8013fc8:	4603      	mov	r3, r0
}
 8013fca:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013fcc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013fd0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013fd4:	f022 0203 	bic.w	r2, r2, #3
 8013fd8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013fdc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013fe0:	f043 0302 	orr.w	r3, r3, #2
 8013fe4:	604b      	str	r3, [r1, #4]
}
 8013fe6:	4770      	bx	lr

08013fe8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8013fe8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8013fea:	6980      	ldr	r0, [r0, #24]
}
 8013fec:	4010      	ands	r0, r2
 8013fee:	4770      	bx	lr

08013ff0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8013ff0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ff4:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8013ff8:	4018      	ands	r0, r3
}
 8013ffa:	0c00      	lsrs	r0, r0, #16
 8013ffc:	4770      	bx	lr
 8013ffe:	bf00      	nop

08014000 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8014000:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014004:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8014008:	4018      	ands	r0, r3
}
 801400a:	b280      	uxth	r0, r0
 801400c:	4770      	bx	lr
 801400e:	bf00      	nop

08014010 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014010:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014014:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014018:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801401c:	6940      	ldr	r0, [r0, #20]
}
 801401e:	4010      	ands	r0, r2
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop

08014024 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8014024:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014028:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801402c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014030:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014034:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014038:	40cb      	lsrs	r3, r1
 801403a:	01db      	lsls	r3, r3, #7
 801403c:	b2db      	uxtb	r3, r3
 801403e:	4313      	orrs	r3, r2
}
 8014040:	4018      	ands	r0, r3
 8014042:	4770      	bx	lr

08014044 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8014044:	6940      	ldr	r0, [r0, #20]
}
 8014046:	f000 0001 	and.w	r0, r0, #1
 801404a:	4770      	bx	lr

0801404c <USB_ActivateSetup>:
{
 801404c:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801404e:	4a09      	ldr	r2, [pc, #36]	; (8014074 <USB_ActivateSetup+0x28>)
}
 8014050:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014052:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8014056:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014058:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 801405c:	4022      	ands	r2, r4
}
 801405e:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014062:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014066:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 801406a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801406e:	604b      	str	r3, [r1, #4]
}
 8014070:	4770      	bx	lr
 8014072:	bf00      	nop
 8014074:	fffff800 	.word	0xfffff800

08014078 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014078:	4b14      	ldr	r3, [pc, #80]	; (80140cc <USB_EP0_OutStart+0x54>)
{
 801407a:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801407c:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801407e:	429c      	cmp	r4, r3
 8014080:	d81a      	bhi.n	80140b8 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014082:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014086:	2300      	movs	r3, #0
  if (dma == 1U)
 8014088:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801408a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801408c:	6903      	ldr	r3, [r0, #16]
 801408e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014092:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014094:	6903      	ldr	r3, [r0, #16]
 8014096:	f043 0318 	orr.w	r3, r3, #24
 801409a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801409c:	6903      	ldr	r3, [r0, #16]
 801409e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80140a2:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 80140a4:	d104      	bne.n	80140b0 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80140a6:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80140a8:	6803      	ldr	r3, [r0, #0]
 80140aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80140ae:	6003      	str	r3, [r0, #0]
}
 80140b0:	2000      	movs	r0, #0
 80140b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140b6:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80140b8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80140bc:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	dae0      	bge.n	8014086 <USB_EP0_OutStart+0xe>
}
 80140c4:	2000      	movs	r0, #0
 80140c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140ca:	4770      	bx	lr
 80140cc:	4f54300a 	.word	0x4f54300a

080140d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80140d0:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80140d2:	4903      	ldr	r1, [pc, #12]	; (80140e0 <MX_FATFS_Init+0x10>)
 80140d4:	4803      	ldr	r0, [pc, #12]	; (80140e4 <MX_FATFS_Init+0x14>)
 80140d6:	f001 f96f 	bl	80153b8 <FATFS_LinkDriver>
 80140da:	4b03      	ldr	r3, [pc, #12]	; (80140e8 <MX_FATFS_Init+0x18>)
 80140dc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80140de:	bd08      	pop	{r3, pc}
 80140e0:	200031b0 	.word	0x200031b0
 80140e4:	200002ec 	.word	0x200002ec
 80140e8:	200031b4 	.word	0x200031b4

080140ec <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80140ec:	4b02      	ldr	r3, [pc, #8]	; (80140f8 <USER_initialize+0xc>)
 80140ee:	2201      	movs	r2, #1
 80140f0:	701a      	strb	r2, [r3, #0]
    return Stat;
 80140f2:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 80140f4:	4770      	bx	lr
 80140f6:	bf00      	nop
 80140f8:	200002e8 	.word	0x200002e8

080140fc <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 80140fc:	2000      	movs	r0, #0
 80140fe:	4770      	bx	lr

08014100 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8014100:	2001      	movs	r0, #1
 8014102:	4770      	bx	lr

08014104 <USER_write>:
 8014104:	2000      	movs	r0, #0
 8014106:	4770      	bx	lr

08014108 <USER_status>:
 8014108:	4b02      	ldr	r3, [pc, #8]	; (8014114 <USER_status+0xc>)
 801410a:	2201      	movs	r2, #1
 801410c:	701a      	strb	r2, [r3, #0]
 801410e:	7818      	ldrb	r0, [r3, #0]
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	200002e8 	.word	0x200002e8

08014118 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8014118:	2100      	movs	r1, #0
{
 801411a:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 801411c:	4608      	mov	r0, r1
{
 801411e:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 8014120:	f003 fe68 	bl	8017df4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8014124:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 8014126:	4b1f      	ldr	r3, [pc, #124]	; (80141a4 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 8014128:	491f      	ldr	r1, [pc, #124]	; (80141a8 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 801412a:	4a20      	ldr	r2, [pc, #128]	; (80141ac <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801412c:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 801412e:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 8014130:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 8014132:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8014134:	481e      	ldr	r0, [pc, #120]	; (80141b0 <MX_LWIP_Init+0x98>)
 8014136:	4d1f      	ldr	r5, [pc, #124]	; (80141b4 <MX_LWIP_Init+0x9c>)
 8014138:	9002      	str	r0, [sp, #8]
 801413a:	481f      	ldr	r0, [pc, #124]	; (80141b8 <MX_LWIP_Init+0xa0>)
 801413c:	9001      	str	r0, [sp, #4]
 801413e:	4628      	mov	r0, r5
 8014140:	f006 fc06 	bl	801a950 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8014144:	4628      	mov	r0, r5
 8014146:	f006 fcb1 	bl	801aaac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801414a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801414e:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8014150:	075b      	lsls	r3, r3, #29
 8014152:	d524      	bpl.n	801419e <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 8014154:	f006 fcb0 	bl	801aab8 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8014158:	4918      	ldr	r1, [pc, #96]	; (80141bc <MX_LWIP_Init+0xa4>)
 801415a:	4816      	ldr	r0, [pc, #88]	; (80141b4 <MX_LWIP_Init+0x9c>)
 801415c:	f006 fd36 	bl	801abcc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8014160:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8014162:	2101      	movs	r1, #1
 8014164:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 8014166:	4e16      	ldr	r6, [pc, #88]	; (80141c0 <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8014168:	4c16      	ldr	r4, [pc, #88]	; (80141c4 <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 801416a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801416e:	f001 fa0d 	bl	801558c <osSemaphoreCreate>
 8014172:	4b15      	ldr	r3, [pc, #84]	; (80141c8 <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 8014174:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8014176:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801417a:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 801417c:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 801417e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014180:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014184:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8014188:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 801418c:	4631      	mov	r1, r6
 801418e:	a807      	add	r0, sp, #28
 8014190:	f001 f944 	bl	801541c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8014194:	4807      	ldr	r0, [pc, #28]	; (80141b4 <MX_LWIP_Init+0x9c>)
 8014196:	f00d fca3 	bl	8021ae0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801419a:	b00e      	add	sp, #56	; 0x38
 801419c:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 801419e:	f006 fcad 	bl	801aafc <netif_set_down>
 80141a2:	e7d9      	b.n	8014158 <MX_LWIP_Init+0x40>
 80141a4:	200031f8 	.word	0x200031f8
 80141a8:	200031fc 	.word	0x200031fc
 80141ac:	20003208 	.word	0x20003208
 80141b0:	08017d6d 	.word	0x08017d6d
 80141b4:	200031bc 	.word	0x200031bc
 80141b8:	080144c9 	.word	0x080144c9
 80141bc:	080146a9 	.word	0x080146a9
 80141c0:	20003200 	.word	0x20003200
 80141c4:	080295b8 	.word	0x080295b8
 80141c8:	200031b8 	.word	0x200031b8

080141cc <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80141cc:	4b2c      	ldr	r3, [pc, #176]	; (8014280 <low_level_output+0xb4>)
{
 80141ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80141d2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 80141d4:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80141d6:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80141d8:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 80141da:	2900      	cmp	r1, #0
 80141dc:	d04d      	beq.n	801427a <low_level_output+0xae>
  bufferoffset = 0;
 80141de:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80141e0:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 80141e4:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80141e6:	6822      	ldr	r2, [r4, #0]
 80141e8:	2a00      	cmp	r2, #0
 80141ea:	db1b      	blt.n	8014224 <low_level_output+0x58>
      byteslefttocopy = q->len;
 80141ec:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80141f0:	1995      	adds	r5, r2, r6
 80141f2:	454d      	cmp	r5, r9
 80141f4:	d93c      	bls.n	8014270 <low_level_output+0xa4>
      payloadoffset = 0;
 80141f6:	2700      	movs	r7, #0
 80141f8:	e002      	b.n	8014200 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80141fa:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80141fc:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80141fe:	d921      	bls.n	8014244 <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8014200:	eba9 0a06 	sub.w	sl, r9, r6
 8014204:	f8db 1004 	ldr.w	r1, [fp, #4]
 8014208:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 801420a:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801420c:	4439      	add	r1, r7
 801420e:	4652      	mov	r2, sl
 8014210:	f010 f90a 	bl	8024428 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8014214:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8014216:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801421a:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801421c:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801421e:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8014220:	42b3      	cmp	r3, r6
 8014222:	daea      	bge.n	80141fa <low_level_output+0x2e>
        errval = ERR_USE;
 8014224:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8014228:	4b15      	ldr	r3, [pc, #84]	; (8014280 <low_level_output+0xb4>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014230:	695a      	ldr	r2, [r3, #20]
 8014232:	0692      	lsls	r2, r2, #26
 8014234:	d503      	bpl.n	801423e <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8014236:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8014238:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801423a:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 801423c:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 801423e:	b003      	add	sp, #12
 8014240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014244:	4618      	mov	r0, r3
 8014246:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8014248:	f8db 1004 	ldr.w	r1, [fp, #4]
 801424c:	462a      	mov	r2, r5
 801424e:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8014250:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8014252:	4439      	add	r1, r7
 8014254:	f010 f8e8 	bl	8024428 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8014258:	f8db b000 	ldr.w	fp, [fp]
 801425c:	9b01      	ldr	r3, [sp, #4]
 801425e:	f1bb 0f00 	cmp.w	fp, #0
 8014262:	d1c0      	bne.n	80141e6 <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 8014264:	4641      	mov	r1, r8
 8014266:	4806      	ldr	r0, [pc, #24]	; (8014280 <low_level_output+0xb4>)
 8014268:	f7f6 f8d0 	bl	800a40c <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 801426c:	2000      	movs	r0, #0
 801426e:	e7db      	b.n	8014228 <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8014270:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 8014272:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8014274:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 8014276:	4615      	mov	r5, r2
 8014278:	e7e6      	b.n	8014248 <low_level_output+0x7c>
  uint32_t framelength = 0;
 801427a:	4688      	mov	r8, r1
 801427c:	e7f2      	b.n	8014264 <low_level_output+0x98>
 801427e:	bf00      	nop
 8014280:	200062ac 	.word	0x200062ac

08014284 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8014284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014288:	f8df 9110 	ldr.w	r9, [pc, #272]	; 801439c <ethernetif_input+0x118>
 801428c:	b083      	sub	sp, #12
 801428e:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8014290:	4b40      	ldr	r3, [pc, #256]	; (8014394 <ethernetif_input+0x110>)
 8014292:	f04f 31ff 	mov.w	r1, #4294967295
 8014296:	6818      	ldr	r0, [r3, #0]
 8014298:	f001 f99e 	bl	80155d8 <osSemaphoreWait>
 801429c:	2800      	cmp	r0, #0
 801429e:	d1f7      	bne.n	8014290 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80142a0:	483d      	ldr	r0, [pc, #244]	; (8014398 <ethernetif_input+0x114>)
 80142a2:	f00f fbb1 	bl	8023a08 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80142a6:	483d      	ldr	r0, [pc, #244]	; (801439c <ethernetif_input+0x118>)
 80142a8:	f7f6 f934 	bl	800a514 <HAL_ETH_GetReceivedFrame_IT>
 80142ac:	4604      	mov	r4, r0
 80142ae:	2800      	cmp	r0, #0
 80142b0:	d168      	bne.n	8014384 <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 80142b2:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 80142b6:	bb51      	cbnz	r1, 801430e <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 80142b8:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80142bc:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80142c0:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80142c4:	b140      	cbz	r0, 80142d8 <ethernetif_input+0x54>
 80142c6:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80142c8:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80142ca:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80142cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80142d0:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80142d2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80142d4:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80142d6:	d1f7      	bne.n	80142c8 <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80142d8:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 80142dc:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80142de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 80142e2:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80142e6:	695a      	ldr	r2, [r3, #20]
 80142e8:	0612      	lsls	r2, r2, #24
 80142ea:	d503      	bpl.n	80142f4 <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80142ec:	2280      	movs	r2, #128	; 0x80
 80142ee:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 80142f0:	2200      	movs	r2, #0
 80142f2:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 80142f4:	f1ba 0f00 	cmp.w	sl, #0
 80142f8:	d044      	beq.n	8014384 <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 80142fa:	9901      	ldr	r1, [sp, #4]
 80142fc:	4650      	mov	r0, sl
 80142fe:	690b      	ldr	r3, [r1, #16]
 8014300:	4798      	blx	r3
 8014302:	2800      	cmp	r0, #0
 8014304:	d142      	bne.n	801438c <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8014306:	4824      	ldr	r0, [pc, #144]	; (8014398 <ethernetif_input+0x114>)
 8014308:	f00f fb84 	bl	8023a14 <sys_mutex_unlock>
      } while(p!=NULL);
 801430c:	e7c8      	b.n	80142a0 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801430e:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8014312:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8014316:	f006 fdb1 	bl	801ae7c <pbuf_alloc>
  if (p != NULL)
 801431a:	4682      	mov	sl, r0
 801431c:	2800      	cmp	r0, #0
 801431e:	d0cb      	beq.n	80142b8 <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8014320:	4683      	mov	fp, r0
    bufferoffset = 0;
 8014322:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014324:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8014328:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 801432c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014330:	1854      	adds	r4, r2, r1
 8014332:	4544      	cmp	r4, r8
 8014334:	d923      	bls.n	801437e <ethernetif_input+0xfa>
      payloadoffset = 0;
 8014336:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8014338:	f8db 0004 	ldr.w	r0, [fp, #4]
 801433c:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8014340:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8014344:	4439      	add	r1, r7
 8014346:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8014348:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801434a:	f010 f86d 	bl	8024428 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801434e:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014350:	4544      	cmp	r4, r8
        bufferoffset = 0;
 8014352:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8014356:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014358:	d8ee      	bhi.n	8014338 <ethernetif_input+0xb4>
 801435a:	4639      	mov	r1, r7
 801435c:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801435e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8014362:	4428      	add	r0, r5
 8014364:	f010 f860 	bl	8024428 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8014368:	f8db b000 	ldr.w	fp, [fp]
 801436c:	f1bb 0f00 	cmp.w	fp, #0
 8014370:	d0a4      	beq.n	80142bc <ethernetif_input+0x38>
 8014372:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 8014374:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014378:	1854      	adds	r4, r2, r1
 801437a:	4544      	cmp	r4, r8
 801437c:	d8db      	bhi.n	8014336 <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801437e:	4439      	add	r1, r7
      payloadoffset = 0;
 8014380:	2500      	movs	r5, #0
 8014382:	e7ec      	b.n	801435e <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 8014384:	4804      	ldr	r0, [pc, #16]	; (8014398 <ethernetif_input+0x114>)
 8014386:	f00f fb45 	bl	8023a14 <sys_mutex_unlock>
      } while(p!=NULL);
 801438a:	e781      	b.n	8014290 <ethernetif_input+0xc>
            pbuf_free(p);
 801438c:	4650      	mov	r0, sl
 801438e:	f006 ff47 	bl	801b220 <pbuf_free>
 8014392:	e7b8      	b.n	8014306 <ethernetif_input+0x82>
 8014394:	200062f4 	.word	0x200062f4
 8014398:	2001e5b4 	.word	0x2001e5b4
 801439c:	200062ac 	.word	0x200062ac

080143a0 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 80143a0:	4b41      	ldr	r3, [pc, #260]	; (80144a8 <HAL_ETH_MspInit+0x108>)
 80143a2:	6802      	ldr	r2, [r0, #0]
{
 80143a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 80143a6:	429a      	cmp	r2, r3
{
 80143a8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80143aa:	f04f 0400 	mov.w	r4, #0
 80143ae:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80143b2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80143b6:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 80143b8:	d001      	beq.n	80143be <HAL_ETH_MspInit+0x1e>
}
 80143ba:	b00d      	add	sp, #52	; 0x34
 80143bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 80143be:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143c2:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80143c4:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80143c6:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 80143c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80143ca:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80143cc:	4837      	ldr	r0, [pc, #220]	; (80144ac <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80143ce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80143d2:	631a      	str	r2, [r3, #48]	; 0x30
 80143d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143d6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80143da:	9200      	str	r2, [sp, #0]
 80143dc:	9a00      	ldr	r2, [sp, #0]
 80143de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80143e4:	631a      	str	r2, [r3, #48]	; 0x30
 80143e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143e8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80143ec:	9201      	str	r2, [sp, #4]
 80143ee:	9a01      	ldr	r2, [sp, #4]
 80143f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143f2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80143f6:	631a      	str	r2, [r3, #48]	; 0x30
 80143f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143fa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80143fe:	9202      	str	r2, [sp, #8]
 8014400:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014404:	f042 0204 	orr.w	r2, r2, #4
 8014408:	631a      	str	r2, [r3, #48]	; 0x30
 801440a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801440c:	f002 0204 	and.w	r2, r2, #4
 8014410:	9203      	str	r2, [sp, #12]
 8014412:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014416:	f042 0201 	orr.w	r2, r2, #1
 801441a:	631a      	str	r2, [r3, #48]	; 0x30
 801441c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801441e:	f002 0201 	and.w	r2, r2, #1
 8014422:	9204      	str	r2, [sp, #16]
 8014424:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014428:	433a      	orrs	r2, r7
 801442a:	631a      	str	r2, [r3, #48]	; 0x30
 801442c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801442e:	403a      	ands	r2, r7
 8014430:	9205      	str	r2, [sp, #20]
 8014432:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801443a:	631a      	str	r2, [r3, #48]	; 0x30
 801443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801443e:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014440:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014444:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014446:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801444a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801444c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801444e:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014450:	f7f7 f984 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8014454:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014456:	a907      	add	r1, sp, #28
 8014458:	4815      	ldr	r0, [pc, #84]	; (80144b0 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 801445a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801445c:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014460:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014464:	f7f7 f97a 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8014468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 801446c:	a907      	add	r1, sp, #28
 801446e:	4811      	ldr	r0, [pc, #68]	; (80144b4 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8014470:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014472:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014476:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 801447a:	f7f7 f96f 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801447e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014482:	a907      	add	r1, sp, #28
 8014484:	480c      	ldr	r0, [pc, #48]	; (80144b8 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8014486:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014488:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801448a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801448c:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014490:	f7f7 f964 	bl	800b75c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8014494:	4622      	mov	r2, r4
 8014496:	2106      	movs	r1, #6
 8014498:	203d      	movs	r0, #61	; 0x3d
 801449a:	f7f4 fae1 	bl	8008a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801449e:	203d      	movs	r0, #61	; 0x3d
 80144a0:	f7f4 fb28 	bl	8008af4 <HAL_NVIC_EnableIRQ>
}
 80144a4:	b00d      	add	sp, #52	; 0x34
 80144a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144a8:	40028000 	.word	0x40028000
 80144ac:	40020800 	.word	0x40020800
 80144b0:	40020000 	.word	0x40020000
 80144b4:	40020400 	.word	0x40020400
 80144b8:	40021800 	.word	0x40021800

080144bc <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 80144bc:	4b01      	ldr	r3, [pc, #4]	; (80144c4 <HAL_ETH_RxCpltCallback+0x8>)
 80144be:	6818      	ldr	r0, [r3, #0]
 80144c0:	f001 b8b6 	b.w	8015630 <osSemaphoreRelease>
 80144c4:	200062f4 	.word	0x200062f4

080144c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80144c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80144ca:	4604      	mov	r4, r0
{
 80144cc:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80144ce:	2800      	cmp	r0, #0
 80144d0:	f000 809e 	beq.w	8014610 <ethernetif_init+0x148>
  heth.Instance = ETH;
 80144d4:	4d52      	ldr	r5, [pc, #328]	; (8014620 <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 80144d6:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80144d8:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80144dc:	4b51      	ldr	r3, [pc, #324]	; (8014624 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 80144de:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 80144e0:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 80144e2:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 80144e6:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80144ea:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 80144ec:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 80144ee:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 80144f0:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80144f4:	494c      	ldr	r1, [pc, #304]	; (8014628 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 80144f6:	4a4d      	ldr	r2, [pc, #308]	; (801462c <ethernetif_init+0x164>)
  netif->output = etharp_output;
 80144f8:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 80144fa:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80144fc:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80144fe:	494c      	ldr	r1, [pc, #304]	; (8014630 <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 8014500:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8014504:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 8014506:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8014508:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 801450c:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8014510:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8014514:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8014518:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 801451a:	4042      	eors	r2, r0
 801451c:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8014520:	404a      	eors	r2, r1
 8014522:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8014526:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 801452a:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 801452e:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8014532:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8014536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801453a:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 801453c:	404b      	eors	r3, r1
 801453e:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8014542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014546:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 801454a:	ab01      	add	r3, sp, #4
 801454c:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801454e:	f7f6 f905 	bl	800a75c <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8014552:	b928      	cbnz	r0, 8014560 <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8014554:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8014558:	f043 0304 	orr.w	r3, r3, #4
 801455c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8014560:	2304      	movs	r3, #4
 8014562:	4a34      	ldr	r2, [pc, #208]	; (8014634 <ethernetif_init+0x16c>)
 8014564:	4934      	ldr	r1, [pc, #208]	; (8014638 <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 8014566:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8014568:	482d      	ldr	r0, [pc, #180]	; (8014620 <ethernetif_init+0x158>)
 801456a:	f7f5 fecb 	bl	800a304 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801456e:	2304      	movs	r3, #4
 8014570:	4a32      	ldr	r2, [pc, #200]	; (801463c <ethernetif_init+0x174>)
 8014572:	4933      	ldr	r1, [pc, #204]	; (8014640 <ethernetif_init+0x178>)
 8014574:	482a      	ldr	r0, [pc, #168]	; (8014620 <ethernetif_init+0x158>)
 8014576:	f7f5 ff0b 	bl	800a390 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801457a:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801457c:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801457e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 8014582:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8014586:	4e2f      	ldr	r6, [pc, #188]	; (8014644 <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8014588:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801458c:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014590:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8014592:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014594:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8014598:	7858      	ldrb	r0, [r3, #1]
 801459a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801459e:	7898      	ldrb	r0, [r3, #2]
 80145a0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80145a4:	78d8      	ldrb	r0, [r3, #3]
 80145a6:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80145aa:	7918      	ldrb	r0, [r3, #4]
 80145ac:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80145b0:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80145b2:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 80145b4:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80145b6:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80145b8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80145bc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 80145c0:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80145c4:	f000 ffe2 	bl	801558c <osSemaphoreCreate>
 80145c8:	4b1f      	ldr	r3, [pc, #124]	; (8014648 <ethernetif_init+0x180>)
 80145ca:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80145cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80145ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145d0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80145d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80145d8:	4621      	mov	r1, r4
 80145da:	a805      	add	r0, sp, #20
 80145dc:	f000 ff1e 	bl	801541c <osThreadCreate>
  HAL_ETH_Start(&heth);
 80145e0:	480f      	ldr	r0, [pc, #60]	; (8014620 <ethernetif_init+0x158>)
 80145e2:	f7f6 fa11 	bl	800aa08 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80145e6:	466a      	mov	r2, sp
 80145e8:	211d      	movs	r1, #29
 80145ea:	480d      	ldr	r0, [pc, #52]	; (8014620 <ethernetif_init+0x158>)
 80145ec:	f7f6 f824 	bl	800a638 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80145f0:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80145f2:	211d      	movs	r1, #29
 80145f4:	480a      	ldr	r0, [pc, #40]	; (8014620 <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 80145f6:	f042 020b 	orr.w	r2, r2, #11
 80145fa:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80145fc:	f7f6 f866 	bl	800a6cc <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8014600:	466a      	mov	r2, sp
 8014602:	211d      	movs	r1, #29
 8014604:	4806      	ldr	r0, [pc, #24]	; (8014620 <ethernetif_init+0x158>)
 8014606:	f7f6 f817 	bl	800a638 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 801460a:	4638      	mov	r0, r7
 801460c:	b00d      	add	sp, #52	; 0x34
 801460e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8014610:	4b0e      	ldr	r3, [pc, #56]	; (801464c <ethernetif_init+0x184>)
 8014612:	f240 223a 	movw	r2, #570	; 0x23a
 8014616:	490e      	ldr	r1, [pc, #56]	; (8014650 <ethernetif_init+0x188>)
 8014618:	480e      	ldr	r0, [pc, #56]	; (8014654 <ethernetif_init+0x18c>)
 801461a:	f010 fecb 	bl	80253b4 <iprintf>
 801461e:	e759      	b.n	80144d4 <ethernetif_init+0xc>
 8014620:	200062ac 	.word	0x200062ac
 8014624:	1ff0f000 	.word	0x1ff0f000
 8014628:	08022661 	.word	0x08022661
 801462c:	40028000 	.word	0x40028000
 8014630:	080141cd 	.word	0x080141cd
 8014634:	20004adc 	.word	0x20004adc
 8014638:	2000328c 	.word	0x2000328c
 801463c:	2000330c 	.word	0x2000330c
 8014640:	2000320c 	.word	0x2000320c
 8014644:	080295d4 	.word	0x080295d4
 8014648:	200062f4 	.word	0x200062f4
 801464c:	0802cd64 	.word	0x0802cd64
 8014650:	0802cd80 	.word	0x0802cd80
 8014654:	0802a008 	.word	0x0802a008

08014658 <sys_now>:
 8014658:	f7f3 bdaa 	b.w	80081b0 <HAL_GetTick>

0801465c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 801465c:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 801465e:	2300      	movs	r3, #0
{
 8014660:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8014662:	4d0f      	ldr	r5, [pc, #60]	; (80146a0 <ethernetif_set_link+0x44>)
{
 8014664:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 8014666:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 8014668:	e003      	b.n	8014672 <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 801466a:	b1b3      	cbz	r3, 801469a <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 801466c:	20c8      	movs	r0, #200	; 0xc8
 801466e:	f000 ff07 	bl	8015480 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8014672:	aa01      	add	r2, sp, #4
 8014674:	2101      	movs	r1, #1
 8014676:	4628      	mov	r0, r5
 8014678:	f7f5 ffde 	bl	800a638 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 801467c:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 801467e:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014680:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 8014684:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014688:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 801468a:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 801468c:	d4ed      	bmi.n	801466a <ethernetif_set_link+0xe>
 801468e:	b113      	cbz	r3, 8014696 <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 8014690:	f006 fa5c 	bl	801ab4c <netif_set_link_up>
 8014694:	e7ea      	b.n	801466c <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8014696:	0753      	lsls	r3, r2, #29
 8014698:	d5e8      	bpl.n	801466c <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 801469a:	f006 fa7d 	bl	801ab98 <netif_set_link_down>
 801469e:	e7e5      	b.n	801466c <ethernetif_set_link+0x10>
 80146a0:	200062ac 	.word	0x200062ac

080146a4 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80146a4:	4770      	bx	lr
 80146a6:	bf00      	nop

080146a8 <ethernetif_update_config>:
{
 80146a8:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 80146aa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 80146ae:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 80146b0:	2100      	movs	r1, #0
{
 80146b2:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 80146b4:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 80146b6:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 80146b8:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 80146ba:	d538      	bpl.n	801472e <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80146bc:	4c32      	ldr	r4, [pc, #200]	; (8014788 <ethernetif_update_config+0xe0>)
 80146be:	6863      	ldr	r3, [r4, #4]
 80146c0:	b9e3      	cbnz	r3, 80146fc <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 80146c2:	68a3      	ldr	r3, [r4, #8]
 80146c4:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80146c8:	d140      	bne.n	801474c <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80146ca:	68e2      	ldr	r2, [r4, #12]
 80146cc:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 80146d0:	d135      	bne.n	801473e <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80146d2:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80146d4:	08d2      	lsrs	r2, r2, #3
 80146d6:	2100      	movs	r1, #0
 80146d8:	482b      	ldr	r0, [pc, #172]	; (8014788 <ethernetif_update_config+0xe0>)
 80146da:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 80146de:	b292      	uxth	r2, r2
 80146e0:	f7f5 fff4 	bl	800a6cc <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80146e4:	2100      	movs	r1, #0
 80146e6:	4828      	ldr	r0, [pc, #160]	; (8014788 <ethernetif_update_config+0xe0>)
 80146e8:	f7f6 fa28 	bl	800ab3c <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 80146ec:	4826      	ldr	r0, [pc, #152]	; (8014788 <ethernetif_update_config+0xe0>)
 80146ee:	f7f6 f98b 	bl	800aa08 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 80146f2:	4628      	mov	r0, r5
 80146f4:	f7ff ffd6 	bl	80146a4 <ethernetif_notify_conn_changed>
}
 80146f8:	b003      	add	sp, #12
 80146fa:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80146fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014700:	4620      	mov	r0, r4
 8014702:	f7f5 ffe3 	bl	800a6cc <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8014706:	f7f3 fd53 	bl	80081b0 <HAL_GetTick>
 801470a:	9000      	str	r0, [sp, #0]
 801470c:	e002      	b.n	8014714 <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801470e:	9b01      	ldr	r3, [sp, #4]
 8014710:	069a      	lsls	r2, r3, #26
 8014712:	d425      	bmi.n	8014760 <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8014714:	aa01      	add	r2, sp, #4
 8014716:	2101      	movs	r1, #1
 8014718:	4620      	mov	r0, r4
 801471a:	f7f5 ff8d 	bl	800a638 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 801471e:	f7f3 fd47 	bl	80081b0 <HAL_GetTick>
 8014722:	9b00      	ldr	r3, [sp, #0]
 8014724:	1ac3      	subs	r3, r0, r3
 8014726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801472a:	d9f0      	bls.n	801470e <ethernetif_update_config+0x66>
 801472c:	e7c9      	b.n	80146c2 <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 801472e:	4816      	ldr	r0, [pc, #88]	; (8014788 <ethernetif_update_config+0xe0>)
 8014730:	f7f6 f9b6 	bl	800aaa0 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 8014734:	4628      	mov	r0, r5
 8014736:	f7ff ffb5 	bl	80146a4 <ethernetif_notify_conn_changed>
}
 801473a:	b003      	add	sp, #12
 801473c:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 801473e:	f240 21e3 	movw	r1, #739	; 0x2e3
 8014742:	4812      	ldr	r0, [pc, #72]	; (801478c <ethernetif_update_config+0xe4>)
 8014744:	f7f0 fc36 	bl	8004fb4 <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8014748:	68e2      	ldr	r2, [r4, #12]
 801474a:	e7c2      	b.n	80146d2 <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801474c:	f240 21e2 	movw	r1, #738	; 0x2e2
 8014750:	480e      	ldr	r0, [pc, #56]	; (801478c <ethernetif_update_config+0xe4>)
 8014752:	f7f0 fc2f 	bl	8004fb4 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8014756:	68e2      	ldr	r2, [r4, #12]
 8014758:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 801475c:	d0b9      	beq.n	80146d2 <ethernetif_update_config+0x2a>
 801475e:	e7ee      	b.n	801473e <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8014760:	aa01      	add	r2, sp, #4
 8014762:	2110      	movs	r1, #16
 8014764:	4808      	ldr	r0, [pc, #32]	; (8014788 <ethernetif_update_config+0xe0>)
 8014766:	f7f5 ff67 	bl	800a638 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 801476a:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801476c:	f013 0204 	ands.w	r2, r3, #4
 8014770:	bf18      	it	ne
 8014772:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 8014776:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8014778:	bf4c      	ite	mi
 801477a:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 801477c:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8014780:	60e2      	str	r2, [r4, #12]
 8014782:	60a3      	str	r3, [r4, #8]
 8014784:	e7ae      	b.n	80146e4 <ethernetif_update_config+0x3c>
 8014786:	bf00      	nop
 8014788:	200062ac 	.word	0x200062ac
 801478c:	0802cd64 	.word	0x0802cd64

08014790 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014790:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8014794:	b183      	cbz	r3, 80147b8 <USBD_CDC_EP0_RxReady+0x28>
{
 8014796:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014798:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801479c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80147a0:	28ff      	cmp	r0, #255	; 0xff
 80147a2:	d007      	beq.n	80147b4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80147a4:	689b      	ldr	r3, [r3, #8]
 80147a6:	4621      	mov	r1, r4
 80147a8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80147ac:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80147ae:	23ff      	movs	r3, #255	; 0xff
 80147b0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 80147b4:	2000      	movs	r0, #0
 80147b6:	bd10      	pop	{r4, pc}
 80147b8:	2000      	movs	r0, #0
 80147ba:	4770      	bx	lr

080147bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80147bc:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80147be:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 80147c0:	4801      	ldr	r0, [pc, #4]	; (80147c8 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80147c2:	801a      	strh	r2, [r3, #0]
}
 80147c4:	4770      	bx	lr
 80147c6:	bf00      	nop
 80147c8:	20000338 	.word	0x20000338

080147cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80147cc:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80147ce:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 80147d0:	4801      	ldr	r0, [pc, #4]	; (80147d8 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80147d2:	801a      	strh	r2, [r3, #0]
}
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop
 80147d8:	2000037c 	.word	0x2000037c

080147dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80147dc:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80147de:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80147e0:	4801      	ldr	r0, [pc, #4]	; (80147e8 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80147e2:	801a      	strh	r2, [r3, #0]
}
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	200003cc 	.word	0x200003cc

080147ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80147ec:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80147ee:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 80147f0:	4801      	ldr	r0, [pc, #4]	; (80147f8 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80147f2:	801a      	strh	r2, [r3, #0]
}
 80147f4:	4770      	bx	lr
 80147f6:	bf00      	nop
 80147f8:	200003c0 	.word	0x200003c0

080147fc <USBD_CDC_DataOut>:
{
 80147fc:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80147fe:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8014802:	b17d      	cbz	r5, 8014824 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014804:	4604      	mov	r4, r0
 8014806:	f00f fb7b 	bl	8023f00 <USBD_LL_GetRxDataSize>
 801480a:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801480c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8014810:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8014814:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8014818:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801481a:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801481e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8014820:	2000      	movs	r0, #0
}
 8014822:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8014824:	2003      	movs	r0, #3
}
 8014826:	bd38      	pop	{r3, r4, r5, pc}

08014828 <USBD_CDC_DataIn>:
{
 8014828:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 801482a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 801482e:	b34d      	cbz	r5, 8014884 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014830:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8014834:	4686      	mov	lr, r0
 8014836:	460a      	mov	r2, r1
 8014838:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801483c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8014840:	b15b      	cbz	r3, 801485a <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014842:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8014846:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 801484a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 801484e:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8014850:	fbb3 f6f4 	udiv	r6, r3, r4
 8014854:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014858:	b164      	cbz	r4, 8014874 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801485a:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 801485e:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014860:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8014864:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8014868:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 801486a:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801486e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8014870:	4620      	mov	r0, r4
}
 8014872:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014874:	4623      	mov	r3, r4
 8014876:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8014878:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801487c:	f00f fb24 	bl	8023ec8 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8014880:	4620      	mov	r0, r4
}
 8014882:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8014884:	2003      	movs	r0, #3
}
 8014886:	bd70      	pop	{r4, r5, r6, pc}

08014888 <USBD_CDC_Setup>:
{
 8014888:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801488a:	f891 c000 	ldrb.w	ip, [r1]
{
 801488e:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8014890:	2300      	movs	r3, #0
{
 8014892:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014894:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 8014898:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801489a:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 801489e:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 80148a2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148a6:	d01c      	beq.n	80148e2 <USBD_CDC_Setup+0x5a>
 80148a8:	2e20      	cmp	r6, #32
 80148aa:	d112      	bne.n	80148d2 <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 80148ac:	88ca      	ldrh	r2, [r1, #6]
 80148ae:	2a00      	cmp	r2, #0
 80148b0:	d036      	beq.n	8014920 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 80148b2:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80148b6:	d055      	beq.n	8014964 <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 80148b8:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80148ba:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80148be:	4639      	mov	r1, r7
 80148c0:	7860      	ldrb	r0, [r4, #1]
 80148c2:	689b      	ldr	r3, [r3, #8]
 80148c4:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80148c6:	88e2      	ldrh	r2, [r4, #6]
 80148c8:	4639      	mov	r1, r7
 80148ca:	4628      	mov	r0, r5
 80148cc:	f000 fd2c 	bl	8015328 <USBD_CtlSendData>
 80148d0:	e004      	b.n	80148dc <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 80148d2:	4621      	mov	r1, r4
 80148d4:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 80148d6:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 80148d8:	f000 fcf0 	bl	80152bc <USBD_CtlError>
}
 80148dc:	4630      	mov	r0, r6
 80148de:	b003      	add	sp, #12
 80148e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 80148e2:	784b      	ldrb	r3, [r1, #1]
 80148e4:	2b0b      	cmp	r3, #11
 80148e6:	d8f4      	bhi.n	80148d2 <USBD_CDC_Setup+0x4a>
 80148e8:	a201      	add	r2, pc, #4	; (adr r2, 80148f0 <USBD_CDC_Setup+0x68>)
 80148ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148ee:	bf00      	nop
 80148f0:	08014933 	.word	0x08014933
 80148f4:	080148dd 	.word	0x080148dd
 80148f8:	080148d3 	.word	0x080148d3
 80148fc:	080148d3 	.word	0x080148d3
 8014900:	080148d3 	.word	0x080148d3
 8014904:	080148d3 	.word	0x080148d3
 8014908:	080148d3 	.word	0x080148d3
 801490c:	080148d3 	.word	0x080148d3
 8014910:	080148d3 	.word	0x080148d3
 8014914:	080148d3 	.word	0x080148d3
 8014918:	08014951 	.word	0x08014951
 801491c:	08014947 	.word	0x08014947
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014920:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 8014924:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014926:	7848      	ldrb	r0, [r1, #1]
 8014928:	689b      	ldr	r3, [r3, #8]
 801492a:	4798      	blx	r3
}
 801492c:	4630      	mov	r0, r6
 801492e:	b003      	add	sp, #12
 8014930:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014932:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014936:	2a03      	cmp	r2, #3
 8014938:	d01e      	beq.n	8014978 <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 801493a:	4621      	mov	r1, r4
 801493c:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 801493e:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 8014940:	f000 fcbc 	bl	80152bc <USBD_CtlError>
        ret = USBD_FAIL;
 8014944:	e7ca      	b.n	80148dc <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014946:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801494a:	2b03      	cmp	r3, #3
 801494c:	d0c6      	beq.n	80148dc <USBD_CDC_Setup+0x54>
 801494e:	e7f4      	b.n	801493a <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014950:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014954:	2b03      	cmp	r3, #3
 8014956:	d1f0      	bne.n	801493a <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014958:	2201      	movs	r2, #1
 801495a:	f10d 0105 	add.w	r1, sp, #5
 801495e:	f000 fce3 	bl	8015328 <USBD_CtlSendData>
 8014962:	e7bb      	b.n	80148dc <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 8014964:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 8014966:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 8014968:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 801496c:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014970:	4639      	mov	r1, r7
 8014972:	f000 fcf1 	bl	8015358 <USBD_CtlPrepareRx>
 8014976:	e7b1      	b.n	80148dc <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014978:	2202      	movs	r2, #2
 801497a:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 801497e:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014980:	f000 fcd2 	bl	8015328 <USBD_CtlSendData>
 8014984:	e7aa      	b.n	80148dc <USBD_CDC_Setup+0x54>
 8014986:	bf00      	nop

08014988 <USBD_CDC_DeInit>:
{
 8014988:	b538      	push	{r3, r4, r5, lr}
 801498a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801498c:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801498e:	2181      	movs	r1, #129	; 0x81
 8014990:	f00f fa4e 	bl	8023e30 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014994:	2101      	movs	r1, #1
 8014996:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014998:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801499a:	f00f fa49 	bl	8023e30 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801499e:	2182      	movs	r1, #130	; 0x82
 80149a0:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80149a2:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80149a6:	f00f fa43 	bl	8023e30 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80149aa:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80149ae:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 80149b0:	b14b      	cbz	r3, 80149c6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80149b2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80149ba:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 80149be:	f00f fd1b 	bl	80243f8 <free>
    pdev->pClassData = NULL;
 80149c2:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80149c6:	2000      	movs	r0, #0
 80149c8:	bd38      	pop	{r3, r4, r5, pc}
 80149ca:	bf00      	nop

080149cc <USBD_CDC_Init>:
{
 80149cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d0:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80149d2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80149d6:	f00f fd07 	bl	80243e8 <malloc>
  if (hcdc == NULL)
 80149da:	4605      	mov	r5, r0
 80149dc:	2800      	cmp	r0, #0
 80149de:	d04c      	beq.n	8014a7a <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149e0:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 80149e2:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149e6:	b393      	cbz	r3, 8014a4e <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80149e8:	2340      	movs	r3, #64	; 0x40
 80149ea:	2202      	movs	r2, #2
 80149ec:	2181      	movs	r1, #129	; 0x81
 80149ee:	4620      	mov	r0, r4
 80149f0:	f00f fa0c 	bl	8023e0c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80149f4:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80149f6:	2340      	movs	r3, #64	; 0x40
 80149f8:	4631      	mov	r1, r6
 80149fa:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80149fc:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80149fe:	4620      	mov	r0, r4
 8014a00:	f00f fa04 	bl	8023e0c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014a04:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014a06:	2203      	movs	r2, #3
 8014a08:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014a0a:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014a0e:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014a10:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014a14:	2308      	movs	r3, #8
 8014a16:	f00f f9f9 	bl	8023e0c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014a1a:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014a1e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8014a22:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014a24:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a2c:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 8014a2e:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8014a32:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a36:	b9ae      	cbnz	r6, 8014a64 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a3c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8014a40:	4641      	mov	r1, r8
 8014a42:	4620      	mov	r0, r4
 8014a44:	f00f fa4e 	bl	8023ee4 <USBD_LL_PrepareReceive>
}
 8014a48:	4630      	mov	r0, r6
 8014a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a52:	2202      	movs	r2, #2
 8014a54:	2181      	movs	r1, #129	; 0x81
 8014a56:	4620      	mov	r0, r4
 8014a58:	f00f f9d8 	bl	8023e0c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014a5c:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a62:	e7c9      	b.n	80149f8 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 8014a64:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014a66:	2340      	movs	r3, #64	; 0x40
 8014a68:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8014a6c:	4641      	mov	r1, r8
 8014a6e:	4620      	mov	r0, r4
 8014a70:	f00f fa38 	bl	8023ee4 <USBD_LL_PrepareReceive>
}
 8014a74:	4630      	mov	r0, r6
 8014a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8014a7a:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8014a7c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014a80:	e7e2      	b.n	8014a48 <USBD_CDC_Init+0x7c>
 8014a82:	bf00      	nop

08014a84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014a84:	4603      	mov	r3, r0
  if (fops == NULL)
 8014a86:	b119      	cbz	r1, 8014a90 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 8014a88:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 8014a8a:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8014a8e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8014a90:	2003      	movs	r0, #3
}
 8014a92:	4770      	bx	lr

08014a94 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014a94:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8014a96:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014a98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8014a9c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014aa0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8014aa4:	4770      	bx	lr
 8014aa6:	bf00      	nop

08014aa8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014aa8:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8014aaa:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8014aac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ab0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8014ab4:	4770      	bx	lr
 8014ab6:	bf00      	nop

08014ab8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014ab8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8014abc:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8014abe:	b19a      	cbz	r2, 8014ae8 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ac0:	7c04      	ldrb	r4, [r0, #16]
 8014ac2:	b144      	cbz	r4, 8014ad6 <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014ac4:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014ac6:	2340      	movs	r3, #64	; 0x40
 8014ac8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014acc:	2101      	movs	r1, #1
 8014ace:	f00f fa09 	bl	8023ee4 <USBD_LL_PrepareReceive>
}
 8014ad2:	4620      	mov	r0, r4
 8014ad4:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ada:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014ade:	2101      	movs	r1, #1
 8014ae0:	f00f fa00 	bl	8023ee4 <USBD_LL_PrepareReceive>
}
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8014ae8:	2403      	movs	r4, #3
}
 8014aea:	4620      	mov	r0, r4
 8014aec:	bd10      	pop	{r4, pc}
 8014aee:	bf00      	nop

08014af0 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014af0:	b1a0      	cbz	r0, 8014b1c <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8014af2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014af6:	b113      	cbz	r3, 8014afe <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8014af8:	2300      	movs	r3, #0
 8014afa:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8014afe:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8014b02:	b113      	cbz	r3, 8014b0a <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8014b04:	2300      	movs	r3, #0
 8014b06:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014b0a:	b109      	cbz	r1, 8014b10 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8014b0c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014b10:	2301      	movs	r3, #1
  pdev->id = id;
 8014b12:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014b14:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014b18:	f00f b938 	b.w	8023d8c <USBD_LL_Init>

  return ret;
}
 8014b1c:	2003      	movs	r0, #3
 8014b1e:	4770      	bx	lr

08014b20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014b20:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 8014b22:	2400      	movs	r4, #0
{
 8014b24:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8014b26:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8014b2a:	b159      	cbz	r1, 8014b44 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014b2c:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8014b2e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014b30:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 8014b34:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8014b38:	4798      	blx	r3
 8014b3a:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8014b3e:	4620      	mov	r0, r4
 8014b40:	b003      	add	sp, #12
 8014b42:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8014b44:	2403      	movs	r4, #3
}
 8014b46:	4620      	mov	r0, r4
 8014b48:	b003      	add	sp, #12
 8014b4a:	bd30      	pop	{r4, r5, pc}

08014b4c <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014b4c:	f00f b950 	b.w	8023df0 <USBD_LL_Start>

08014b50 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8014b50:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014b54:	b10b      	cbz	r3, 8014b5a <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	4718      	bx	r3
  }

  return ret;
}
 8014b5a:	2003      	movs	r0, #3
 8014b5c:	4770      	bx	lr
 8014b5e:	bf00      	nop

08014b60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b60:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014b62:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014b66:	b10b      	cbz	r3, 8014b6c <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014b68:	685b      	ldr	r3, [r3, #4]
 8014b6a:	4798      	blx	r3
  }

  return USBD_OK;
}
 8014b6c:	2000      	movs	r0, #0
 8014b6e:	bd08      	pop	{r3, pc}

08014b70 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014b70:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014b72:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8014b76:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014b78:	4628      	mov	r0, r5
 8014b7a:	f000 fb93 	bl	80152a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014b7e:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8014b80:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8014b84:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8014b88:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8014b8c:	f001 031f 	and.w	r3, r1, #31
 8014b90:	4293      	cmp	r3, r2
 8014b92:	d009      	beq.n	8014ba8 <USBD_LL_SetupStage+0x38>
 8014b94:	2b02      	cmp	r3, #2
 8014b96:	d013      	beq.n	8014bc0 <USBD_LL_SetupStage+0x50>
 8014b98:	b163      	cbz	r3, 8014bb4 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014b9a:	4620      	mov	r0, r4
 8014b9c:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8014ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014ba4:	f00f b952 	b.w	8023e4c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014ba8:	4629      	mov	r1, r5
 8014baa:	4620      	mov	r0, r4
}
 8014bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014bb0:	f000 ba9e 	b.w	80150f0 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014bb4:	4629      	mov	r1, r5
 8014bb6:	4620      	mov	r0, r4
}
 8014bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014bbc:	f000 b8fa 	b.w	8014db4 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014bc0:	4629      	mov	r1, r5
 8014bc2:	4620      	mov	r0, r4
}
 8014bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014bc8:	f000 baca 	b.w	8015160 <USBD_StdEPReq>

08014bcc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014bcc:	b570      	push	{r4, r5, r6, lr}
 8014bce:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014bd0:	b939      	cbnz	r1, 8014be2 <USBD_LL_DataOutStage+0x16>
 8014bd2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014bd4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8014bd8:	460c      	mov	r4, r1
 8014bda:	2a03      	cmp	r2, #3
 8014bdc:	d00e      	beq.n	8014bfc <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8014bde:	2000      	movs	r0, #0
}
 8014be0:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8014be2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014be6:	699b      	ldr	r3, [r3, #24]
 8014be8:	b133      	cbz	r3, 8014bf8 <USBD_LL_DataOutStage+0x2c>
 8014bea:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014bee:	2a03      	cmp	r2, #3
 8014bf0:	d102      	bne.n	8014bf8 <USBD_LL_DataOutStage+0x2c>
}
 8014bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014bf6:	4718      	bx	r3
    return USBD_FAIL;
 8014bf8:	2003      	movs	r0, #3
}
 8014bfa:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8014bfc:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8014c00:	4291      	cmp	r1, r2
 8014c02:	d80d      	bhi.n	8014c20 <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014c04:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014c08:	691b      	ldr	r3, [r3, #16]
 8014c0a:	b123      	cbz	r3, 8014c16 <USBD_LL_DataOutStage+0x4a>
 8014c0c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014c10:	2a03      	cmp	r2, #3
 8014c12:	d100      	bne.n	8014c16 <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8014c14:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8014c16:	4628      	mov	r0, r5
 8014c18:	f000 fbb6 	bl	8015388 <USBD_CtlSendStatus>
  return USBD_OK;
 8014c1c:	2000      	movs	r0, #0
 8014c1e:	e7df      	b.n	8014be0 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8014c20:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014c22:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8014c24:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014c28:	bf28      	it	cs
 8014c2a:	460a      	movcs	r2, r1
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	f000 fba1 	bl	8015374 <USBD_CtlContinueRx>
  return USBD_OK;
 8014c32:	4620      	mov	r0, r4
}
 8014c34:	bd70      	pop	{r4, r5, r6, pc}
 8014c36:	bf00      	nop

08014c38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014c38:	b570      	push	{r4, r5, r6, lr}
 8014c3a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014c3c:	b949      	cbnz	r1, 8014c52 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014c3e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8014c42:	2b02      	cmp	r3, #2
 8014c44:	d012      	beq.n	8014c6c <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8014c46:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8014c4a:	2b01      	cmp	r3, #1
 8014c4c:	d027      	beq.n	8014c9e <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8014c4e:	2000      	movs	r0, #0
}
 8014c50:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8014c52:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014c56:	695b      	ldr	r3, [r3, #20]
 8014c58:	b133      	cbz	r3, 8014c68 <USBD_LL_DataInStage+0x30>
 8014c5a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014c5e:	2a03      	cmp	r2, #3
 8014c60:	d102      	bne.n	8014c68 <USBD_LL_DataInStage+0x30>
}
 8014c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014c66:	4718      	bx	r3
    return USBD_FAIL;
 8014c68:	2003      	movs	r0, #3
}
 8014c6a:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8014c6c:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8014c70:	460d      	mov	r5, r1
 8014c72:	42b3      	cmp	r3, r6
 8014c74:	d818      	bhi.n	8014ca8 <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 8014c76:	d027      	beq.n	8014cc8 <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014c78:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014c7c:	68db      	ldr	r3, [r3, #12]
 8014c7e:	b11b      	cbz	r3, 8014c88 <USBD_LL_DataInStage+0x50>
 8014c80:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8014c84:	2a03      	cmp	r2, #3
 8014c86:	d01c      	beq.n	8014cc2 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c88:	2180      	movs	r1, #128	; 0x80
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	f00f f8de 	bl	8023e4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014c90:	4620      	mov	r0, r4
 8014c92:	f000 fb85 	bl	80153a0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8014c96:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d1d7      	bne.n	8014c4e <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8014c9e:	2300      	movs	r3, #0
  return USBD_OK;
 8014ca0:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 8014ca2:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8014ca6:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8014ca8:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014caa:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8014cac:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014cae:	461a      	mov	r2, r3
 8014cb0:	f000 fb48 	bl	8015344 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014cb4:	462b      	mov	r3, r5
 8014cb6:	462a      	mov	r2, r5
 8014cb8:	4629      	mov	r1, r5
 8014cba:	4620      	mov	r0, r4
 8014cbc:	f00f f912 	bl	8023ee4 <USBD_LL_PrepareReceive>
 8014cc0:	e7c1      	b.n	8014c46 <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	4798      	blx	r3
 8014cc6:	e7df      	b.n	8014c88 <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8014cc8:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d8d4      	bhi.n	8014c78 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8014cce:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d2d0      	bcs.n	8014c78 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014cd6:	460a      	mov	r2, r1
 8014cd8:	f000 fb34 	bl	8015344 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014cdc:	462b      	mov	r3, r5
 8014cde:	462a      	mov	r2, r5
 8014ce0:	4629      	mov	r1, r5
 8014ce2:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8014ce4:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014ce8:	f00f f8fc 	bl	8023ee4 <USBD_LL_PrepareReceive>
 8014cec:	e7ab      	b.n	8014c46 <USBD_LL_DataInStage+0xe>
 8014cee:	bf00      	nop

08014cf0 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8014cf0:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014cf2:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8014cf4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8014cf8:	b570      	push	{r4, r5, r6, lr}
 8014cfa:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014cfc:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014d00:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8014d04:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8014d06:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8014d0a:	b11b      	cbz	r3, 8014d14 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014d0c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014d10:	685b      	ldr	r3, [r3, #4]
 8014d12:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014d14:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014d16:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014d18:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	462b      	mov	r3, r5
 8014d1e:	4611      	mov	r1, r2
 8014d20:	f00f f874 	bl	8023e0c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014d24:	462b      	mov	r3, r5
 8014d26:	2200      	movs	r2, #0
 8014d28:	2180      	movs	r1, #128	; 0x80
 8014d2a:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014d2c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014d30:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014d34:	f00f f86a 	bl	8023e0c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8014d38:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014d3a:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014d3c:	6225      	str	r5, [r4, #32]
}
 8014d3e:	bd70      	pop	{r4, r5, r6, pc}

08014d40 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014d40:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8014d42:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8014d44:	7419      	strb	r1, [r3, #16]
}
 8014d46:	4770      	bx	lr

08014d48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014d48:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014d4a:	2104      	movs	r1, #4

  return USBD_OK;
}
 8014d4c:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8014d4e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014d52:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8014d56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8014d5a:	4770      	bx	lr

08014d5c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014d5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014d60:	2b04      	cmp	r3, #4
 8014d62:	d103      	bne.n	8014d6c <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014d64:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8014d68:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	4770      	bx	lr

08014d70 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d70:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014d74:	2a03      	cmp	r2, #3
 8014d76:	d001      	beq.n	8014d7c <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8014d78:	2000      	movs	r0, #0
 8014d7a:	4770      	bx	lr
{
 8014d7c:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8014d7e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014d82:	69db      	ldr	r3, [r3, #28]
 8014d84:	b103      	cbz	r3, 8014d88 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8014d86:	4798      	blx	r3
}
 8014d88:	2000      	movs	r0, #0
 8014d8a:	bd08      	pop	{r3, pc}

08014d8c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8014d8c:	2000      	movs	r0, #0
 8014d8e:	4770      	bx	lr

08014d90 <USBD_LL_IsoOUTIncomplete>:
 8014d90:	2000      	movs	r0, #0
 8014d92:	4770      	bx	lr

08014d94 <USBD_LL_DevConnected>:
 8014d94:	2000      	movs	r0, #0
 8014d96:	4770      	bx	lr

08014d98 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014d98:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8014d9a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014d9e:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8014da2:	b12a      	cbz	r2, 8014db0 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014da4:	6852      	ldr	r2, [r2, #4]
 8014da6:	7901      	ldrb	r1, [r0, #4]
{
 8014da8:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014daa:	4790      	blx	r2
  }

  return USBD_OK;
}
 8014dac:	2000      	movs	r0, #0
 8014dae:	bd08      	pop	{r3, pc}
 8014db0:	2000      	movs	r0, #0
 8014db2:	4770      	bx	lr

08014db4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014db4:	b570      	push	{r4, r5, r6, lr}
 8014db6:	780c      	ldrb	r4, [r1, #0]
 8014db8:	b082      	sub	sp, #8
 8014dba:	460e      	mov	r6, r1
 8014dbc:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014dbe:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8014dc2:	2c20      	cmp	r4, #32
 8014dc4:	d00e      	beq.n	8014de4 <USBD_StdDevReq+0x30>
 8014dc6:	2c40      	cmp	r4, #64	; 0x40
 8014dc8:	d00c      	beq.n	8014de4 <USBD_StdDevReq+0x30>
 8014dca:	b1a4      	cbz	r4, 8014df6 <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014dcc:	2180      	movs	r1, #128	; 0x80
 8014dce:	4628      	mov	r0, r5
 8014dd0:	f00f f83c 	bl	8023e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014dd4:	2100      	movs	r1, #0
 8014dd6:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8014dd8:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8014dda:	f00f f837 	bl	8023e4c <USBD_LL_StallEP>
}
 8014dde:	4620      	mov	r0, r4
 8014de0:	b002      	add	sp, #8
 8014de2:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014de4:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8014de8:	4631      	mov	r1, r6
 8014dea:	4628      	mov	r0, r5
 8014dec:	689b      	ldr	r3, [r3, #8]
}
 8014dee:	b002      	add	sp, #8
 8014df0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014df4:	4718      	bx	r3
    switch (req->bRequest)
 8014df6:	784b      	ldrb	r3, [r1, #1]
 8014df8:	2b09      	cmp	r3, #9
 8014dfa:	d8e7      	bhi.n	8014dcc <USBD_StdDevReq+0x18>
 8014dfc:	a201      	add	r2, pc, #4	; (adr r2, 8014e04 <USBD_StdDevReq+0x50>)
 8014dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e02:	bf00      	nop
 8014e04:	08014e63 	.word	0x08014e63
 8014e08:	08014e91 	.word	0x08014e91
 8014e0c:	08014dcd 	.word	0x08014dcd
 8014e10:	08014eaf 	.word	0x08014eaf
 8014e14:	08014dcd 	.word	0x08014dcd
 8014e18:	08014eb7 	.word	0x08014eb7
 8014e1c:	08014eef 	.word	0x08014eef
 8014e20:	08014dcd 	.word	0x08014dcd
 8014e24:	08014f13 	.word	0x08014f13
 8014e28:	08014e2d 	.word	0x08014e2d
  cfgidx = (uint8_t)(req->wValue);
 8014e2c:	7889      	ldrb	r1, [r1, #2]
 8014e2e:	4eaa      	ldr	r6, [pc, #680]	; (80150d8 <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014e30:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8014e32:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014e34:	f200 8146 	bhi.w	80150c4 <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 8014e38:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014e3c:	2b02      	cmp	r3, #2
 8014e3e:	f000 8130 	beq.w	80150a2 <USBD_StdDevReq+0x2ee>
 8014e42:	2b03      	cmp	r3, #3
 8014e44:	f000 810c 	beq.w	8015060 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e48:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8014e4a:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e4c:	f00e fffe 	bl	8023e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014e50:	2100      	movs	r1, #0
 8014e52:	4628      	mov	r0, r5
 8014e54:	f00e fffa 	bl	8023e4c <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014e58:	7831      	ldrb	r1, [r6, #0]
 8014e5a:	4628      	mov	r0, r5
 8014e5c:	f7ff fe80 	bl	8014b60 <USBD_ClrClassConfig>
    break;
 8014e60:	e7bd      	b.n	8014dde <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8014e62:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014e66:	3a01      	subs	r2, #1
 8014e68:	2a02      	cmp	r2, #2
 8014e6a:	d868      	bhi.n	8014f3e <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8014e6c:	88ca      	ldrh	r2, [r1, #6]
 8014e6e:	2a02      	cmp	r2, #2
 8014e70:	d165      	bne.n	8014f3e <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014e72:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8014e74:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014e78:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8014e7a:	b10a      	cbz	r2, 8014e80 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014e7c:	2203      	movs	r2, #3
 8014e7e:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014e80:	2202      	movs	r2, #2
 8014e82:	f105 010c 	add.w	r1, r5, #12
 8014e86:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8014e88:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014e8a:	f000 fa4d 	bl	8015328 <USBD_CtlSendData>
    break;
 8014e8e:	e7a6      	b.n	8014dde <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8014e90:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014e94:	3b01      	subs	r3, #1
 8014e96:	2b02      	cmp	r3, #2
 8014e98:	d851      	bhi.n	8014f3e <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e9a:	884b      	ldrh	r3, [r1, #2]
 8014e9c:	2b01      	cmp	r3, #1
 8014e9e:	d19e      	bne.n	8014dde <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8014ea0:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8014ea2:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 8014ea4:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014ea8:	f000 fa6e 	bl	8015388 <USBD_CtlSendStatus>
 8014eac:	e797      	b.n	8014dde <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014eae:	884b      	ldrh	r3, [r1, #2]
 8014eb0:	2b01      	cmp	r3, #1
 8014eb2:	d194      	bne.n	8014dde <USBD_StdDevReq+0x2a>
 8014eb4:	e7f5      	b.n	8014ea2 <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014eb6:	888b      	ldrh	r3, [r1, #4]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d140      	bne.n	8014f3e <USBD_StdDevReq+0x18a>
 8014ebc:	88cb      	ldrh	r3, [r1, #6]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d13d      	bne.n	8014f3e <USBD_StdDevReq+0x18a>
 8014ec2:	884e      	ldrh	r6, [r1, #2]
 8014ec4:	2e7f      	cmp	r6, #127	; 0x7f
 8014ec6:	d83a      	bhi.n	8014f3e <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ec8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014ecc:	2b03      	cmp	r3, #3
 8014ece:	d036      	beq.n	8014f3e <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014ed0:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8014ed2:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014ed6:	f00e ffe9 	bl	8023eac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014eda:	4628      	mov	r0, r5
 8014edc:	f000 fa54 	bl	8015388 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8014ee0:	2e00      	cmp	r6, #0
 8014ee2:	f040 80da 	bne.w	801509a <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014eec:	e777      	b.n	8014dde <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8014eee:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8014ef0:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8014ef2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8014ef6:	0a13      	lsrs	r3, r2, #8
 8014ef8:	3b01      	subs	r3, #1
 8014efa:	2b0e      	cmp	r3, #14
 8014efc:	d81f      	bhi.n	8014f3e <USBD_StdDevReq+0x18a>
 8014efe:	e8df f003 	tbb	[pc, r3]
 8014f02:	6b77      	.short	0x6b77
 8014f04:	4f1e1e59 	.word	0x4f1e1e59
 8014f08:	1e1e1e43 	.word	0x1e1e1e43
 8014f0c:	1e1e1e1e 	.word	0x1e1e1e1e
 8014f10:	29          	.byte	0x29
 8014f11:	00          	.byte	0x00
  if (req->wLength != 1U)
 8014f12:	88ca      	ldrh	r2, [r1, #6]
 8014f14:	2a01      	cmp	r2, #1
 8014f16:	d112      	bne.n	8014f3e <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 8014f18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014f1c:	2b02      	cmp	r3, #2
 8014f1e:	f200 8098 	bhi.w	8015052 <USBD_StdDevReq+0x29e>
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	f43f af52 	beq.w	8014dcc <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8014f28:	4601      	mov	r1, r0
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014f30:	f000 f9fa 	bl	8015328 <USBD_CtlSendData>
      break;
 8014f34:	e753      	b.n	8014dde <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014f36:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014f3a:	699b      	ldr	r3, [r3, #24]
 8014f3c:	b97b      	cbnz	r3, 8014f5e <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014f3e:	2180      	movs	r1, #128	; 0x80
 8014f40:	4628      	mov	r0, r5
 8014f42:	f00e ff83 	bl	8023e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014f46:	2100      	movs	r1, #0
 8014f48:	4628      	mov	r0, r5
 8014f4a:	f00e ff7f 	bl	8023e4c <USBD_LL_StallEP>
}
 8014f4e:	4620      	mov	r0, r4
 8014f50:	b002      	add	sp, #8
 8014f52:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014f54:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014f58:	69db      	ldr	r3, [r3, #28]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d0ef      	beq.n	8014f3e <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014f5e:	f10d 0106 	add.w	r1, sp, #6
 8014f62:	7c28      	ldrb	r0, [r5, #16]
 8014f64:	4798      	blx	r3
    if (req->wLength != 0U)
 8014f66:	88f2      	ldrh	r2, [r6, #6]
 8014f68:	2a00      	cmp	r2, #0
 8014f6a:	d06e      	beq.n	801504a <USBD_StdDevReq+0x296>
      if (len != 0U)
 8014f6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d0e4      	beq.n	8014f3e <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 8014f74:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014f76:	4601      	mov	r1, r0
 8014f78:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 8014f7a:	bf28      	it	cs
 8014f7c:	461a      	movcs	r2, r3
 8014f7e:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014f82:	f000 f9d1 	bl	8015328 <USBD_CtlSendData>
 8014f86:	e72a      	b.n	8014dde <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f88:	7c03      	ldrb	r3, [r0, #16]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d1d7      	bne.n	8014f3e <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014f8e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014f92:	f10d 0006 	add.w	r0, sp, #6
 8014f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f98:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014f9a:	2307      	movs	r3, #7
 8014f9c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014f9e:	e7e2      	b.n	8014f66 <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014fa0:	7c03      	ldrb	r3, [r0, #16]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d1cb      	bne.n	8014f3e <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014fa6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014faa:	f10d 0006 	add.w	r0, sp, #6
 8014fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fb0:	4798      	blx	r3
  if (err != 0U)
 8014fb2:	e7d8      	b.n	8014f66 <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8014fb4:	b2d2      	uxtb	r2, r2
 8014fb6:	2a05      	cmp	r2, #5
 8014fb8:	d8c1      	bhi.n	8014f3e <USBD_StdDevReq+0x18a>
 8014fba:	a301      	add	r3, pc, #4	; (adr r3, 8014fc0 <USBD_StdDevReq+0x20c>)
 8014fbc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8014fc0:	08015031 	.word	0x08015031
 8014fc4:	08015025 	.word	0x08015025
 8014fc8:	08015019 	.word	0x08015019
 8014fcc:	0801500d 	.word	0x0801500d
 8014fd0:	08015001 	.word	0x08015001
 8014fd4:	08014f37 	.word	0x08014f37
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014fd8:	7c03      	ldrb	r3, [r0, #16]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d17e      	bne.n	80150dc <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014fde:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014fe2:	f10d 0006 	add.w	r0, sp, #6
 8014fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fe8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014fea:	2302      	movs	r3, #2
 8014fec:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014fee:	e7ba      	b.n	8014f66 <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014ff0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014ff4:	f10d 0106 	add.w	r1, sp, #6
 8014ff8:	7c00      	ldrb	r0, [r0, #16]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	4798      	blx	r3
  if (err != 0U)
 8014ffe:	e7b2      	b.n	8014f66 <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015000:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015004:	695b      	ldr	r3, [r3, #20]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d1a9      	bne.n	8014f5e <USBD_StdDevReq+0x1aa>
 801500a:	e798      	b.n	8014f3e <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801500c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015010:	691b      	ldr	r3, [r3, #16]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d1a3      	bne.n	8014f5e <USBD_StdDevReq+0x1aa>
 8015016:	e792      	b.n	8014f3e <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015018:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801501c:	68db      	ldr	r3, [r3, #12]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d19d      	bne.n	8014f5e <USBD_StdDevReq+0x1aa>
 8015022:	e78c      	b.n	8014f3e <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015024:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015028:	689b      	ldr	r3, [r3, #8]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d197      	bne.n	8014f5e <USBD_StdDevReq+0x1aa>
 801502e:	e786      	b.n	8014f3e <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015030:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d191      	bne.n	8014f5e <USBD_StdDevReq+0x1aa>
 801503a:	e780      	b.n	8014f3e <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801503c:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 801503e:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015040:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8015042:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015046:	f7ff fd8b 	bl	8014b60 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801504a:	4628      	mov	r0, r5
 801504c:	f000 f99c 	bl	8015388 <USBD_CtlSendStatus>
 8015050:	e6c5      	b.n	8014dde <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8015052:	2b03      	cmp	r3, #3
 8015054:	f47f aeba 	bne.w	8014dcc <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015058:	1d01      	adds	r1, r0, #4
 801505a:	f000 f965 	bl	8015328 <USBD_CtlSendData>
      break;
 801505e:	e6be      	b.n	8014dde <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 8015060:	2900      	cmp	r1, #0
 8015062:	d0eb      	beq.n	801503c <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 8015064:	6841      	ldr	r1, [r0, #4]
 8015066:	2901      	cmp	r1, #1
 8015068:	d0ef      	beq.n	801504a <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801506a:	b2c9      	uxtb	r1, r1
 801506c:	f7ff fd78 	bl	8014b60 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8015070:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015072:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 8015074:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015076:	f7ff fd6b 	bl	8014b50 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 801507a:	4606      	mov	r6, r0
 801507c:	2800      	cmp	r0, #0
 801507e:	d0e4      	beq.n	801504a <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015080:	2180      	movs	r1, #128	; 0x80
 8015082:	4628      	mov	r0, r5
 8015084:	f00e fee2 	bl	8023e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015088:	2100      	movs	r1, #0
 801508a:	4628      	mov	r0, r5
 801508c:	4634      	mov	r4, r6
 801508e:	f00e fedd 	bl	8023e4c <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015092:	7929      	ldrb	r1, [r5, #4]
 8015094:	4628      	mov	r0, r5
 8015096:	f7ff fd63 	bl	8014b60 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801509a:	2302      	movs	r3, #2
 801509c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80150a0:	e69d      	b.n	8014dde <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 80150a2:	2900      	cmp	r1, #0
 80150a4:	d0d1      	beq.n	801504a <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 80150a6:	2101      	movs	r1, #1
 80150a8:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80150aa:	f7ff fd51 	bl	8014b50 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80150ae:	4604      	mov	r4, r0
 80150b0:	2800      	cmp	r0, #0
 80150b2:	f47f af44 	bne.w	8014f3e <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 80150b6:	4628      	mov	r0, r5
 80150b8:	f000 f966 	bl	8015388 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80150bc:	2303      	movs	r3, #3
 80150be:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80150c2:	e68c      	b.n	8014dde <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80150c4:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 80150c6:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80150c8:	f00e fec0 	bl	8023e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80150cc:	2100      	movs	r1, #0
 80150ce:	4628      	mov	r0, r5
 80150d0:	f00e febc 	bl	8023e4c <USBD_LL_StallEP>
}
 80150d4:	e683      	b.n	8014dde <USBD_StdDevReq+0x2a>
 80150d6:	bf00      	nop
 80150d8:	200062f8 	.word	0x200062f8
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80150dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80150e0:	f10d 0006 	add.w	r0, sp, #6
 80150e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80150e8:	2302      	movs	r3, #2
 80150ea:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80150ec:	e73b      	b.n	8014f66 <USBD_StdDevReq+0x1b2>
 80150ee:	bf00      	nop

080150f0 <USBD_StdItfReq>:
{
 80150f0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80150f2:	780b      	ldrb	r3, [r1, #0]
{
 80150f4:	460d      	mov	r5, r1
 80150f6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80150f8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80150fc:	2a40      	cmp	r2, #64	; 0x40
 80150fe:	d00b      	beq.n	8015118 <USBD_StdItfReq+0x28>
 8015100:	065b      	lsls	r3, r3, #25
 8015102:	d509      	bpl.n	8015118 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8015104:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015106:	2180      	movs	r1, #128	; 0x80
 8015108:	f00e fea0 	bl	8023e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801510c:	4620      	mov	r0, r4
 801510e:	4629      	mov	r1, r5
 8015110:	f00e fe9c 	bl	8023e4c <USBD_LL_StallEP>
}
 8015114:	4628      	mov	r0, r5
 8015116:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8015118:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 801511c:	3b01      	subs	r3, #1
 801511e:	2b02      	cmp	r3, #2
 8015120:	d812      	bhi.n	8015148 <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015122:	792b      	ldrb	r3, [r5, #4]
 8015124:	2b01      	cmp	r3, #1
 8015126:	d80f      	bhi.n	8015148 <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015128:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 801512c:	4629      	mov	r1, r5
 801512e:	4620      	mov	r0, r4
 8015130:	689b      	ldr	r3, [r3, #8]
 8015132:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8015134:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015136:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8015138:	2b00      	cmp	r3, #0
 801513a:	d1eb      	bne.n	8015114 <USBD_StdItfReq+0x24>
 801513c:	2800      	cmp	r0, #0
 801513e:	d1e9      	bne.n	8015114 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 8015140:	4620      	mov	r0, r4
 8015142:	f000 f921 	bl	8015388 <USBD_CtlSendStatus>
 8015146:	e7e5      	b.n	8015114 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015148:	2180      	movs	r1, #128	; 0x80
 801514a:	4620      	mov	r0, r4
 801514c:	f00e fe7e 	bl	8023e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015150:	2100      	movs	r1, #0
 8015152:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8015154:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8015156:	f00e fe79 	bl	8023e4c <USBD_LL_StallEP>
}
 801515a:	4628      	mov	r0, r5
 801515c:	bd38      	pop	{r3, r4, r5, pc}
 801515e:	bf00      	nop

08015160 <USBD_StdEPReq>:
{
 8015160:	b570      	push	{r4, r5, r6, lr}
 8015162:	780b      	ldrb	r3, [r1, #0]
 8015164:	460d      	mov	r5, r1
 8015166:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015168:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801516c:	2b20      	cmp	r3, #32
 801516e:	d00c      	beq.n	801518a <USBD_StdEPReq+0x2a>
 8015170:	2b40      	cmp	r3, #64	; 0x40
 8015172:	d00a      	beq.n	801518a <USBD_StdEPReq+0x2a>
 8015174:	b18b      	cbz	r3, 801519a <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015176:	2180      	movs	r1, #128	; 0x80
 8015178:	4620      	mov	r0, r4
 801517a:	f00e fe67 	bl	8023e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801517e:	2100      	movs	r1, #0
 8015180:	4620      	mov	r0, r4
 8015182:	f00e fe63 	bl	8023e4c <USBD_LL_StallEP>
}
 8015186:	2000      	movs	r0, #0
 8015188:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801518a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 801518e:	4629      	mov	r1, r5
 8015190:	4620      	mov	r0, r4
 8015192:	689b      	ldr	r3, [r3, #8]
}
 8015194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015198:	4718      	bx	r3
    switch (req->bRequest)
 801519a:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 801519c:	888a      	ldrh	r2, [r1, #4]
 801519e:	2b01      	cmp	r3, #1
 80151a0:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 80151a2:	d036      	beq.n	8015212 <USBD_StdEPReq+0xb2>
 80151a4:	2b03      	cmp	r3, #3
 80151a6:	d023      	beq.n	80151f0 <USBD_StdEPReq+0x90>
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d1e4      	bne.n	8015176 <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 80151ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80151b0:	2b02      	cmp	r3, #2
 80151b2:	d04c      	beq.n	801524e <USBD_StdEPReq+0xee>
 80151b4:	2b03      	cmp	r3, #3
 80151b6:	d1de      	bne.n	8015176 <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80151b8:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 80151bc:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80151be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80151c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 80151c6:	d453      	bmi.n	8015270 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80151c8:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d0d2      	beq.n	8015176 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80151d0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80151d4:	2514      	movs	r5, #20
 80151d6:	fb05 0503 	mla	r5, r5, r3, r0
 80151da:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d152      	bne.n	8015288 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 80151e2:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80151e4:	2202      	movs	r2, #2
 80151e6:	4629      	mov	r1, r5
 80151e8:	4620      	mov	r0, r4
 80151ea:	f000 f89d 	bl	8015328 <USBD_CtlSendData>
          break;
 80151ee:	e7ca      	b.n	8015186 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80151f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80151f4:	2b02      	cmp	r3, #2
 80151f6:	d021      	beq.n	801523c <USBD_StdEPReq+0xdc>
 80151f8:	2b03      	cmp	r3, #3
 80151fa:	d1bc      	bne.n	8015176 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80151fc:	886b      	ldrh	r3, [r5, #2]
 80151fe:	b923      	cbnz	r3, 801520a <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015200:	064a      	lsls	r2, r1, #25
 8015202:	d002      	beq.n	801520a <USBD_StdEPReq+0xaa>
 8015204:	88eb      	ldrh	r3, [r5, #6]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d049      	beq.n	801529e <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 801520a:	4620      	mov	r0, r4
 801520c:	f000 f8bc 	bl	8015388 <USBD_CtlSendStatus>
        break;
 8015210:	e7b9      	b.n	8015186 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8015212:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015216:	2b02      	cmp	r3, #2
 8015218:	d010      	beq.n	801523c <USBD_StdEPReq+0xdc>
 801521a:	2b03      	cmp	r3, #3
 801521c:	d1ab      	bne.n	8015176 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 801521e:	886b      	ldrh	r3, [r5, #2]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d1b0      	bne.n	8015186 <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8015224:	064e      	lsls	r6, r1, #25
 8015226:	d135      	bne.n	8015294 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 8015228:	4620      	mov	r0, r4
 801522a:	f000 f8ad 	bl	8015388 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801522e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8015232:	4629      	mov	r1, r5
 8015234:	4620      	mov	r0, r4
 8015236:	689b      	ldr	r3, [r3, #8]
 8015238:	4798      	blx	r3
 801523a:	e7a4      	b.n	8015186 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801523c:	064b      	lsls	r3, r1, #25
 801523e:	d09a      	beq.n	8015176 <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015240:	f00e fe04 	bl	8023e4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015244:	2180      	movs	r1, #128	; 0x80
 8015246:	4620      	mov	r0, r4
 8015248:	f00e fe00 	bl	8023e4c <USBD_LL_StallEP>
 801524c:	e79b      	b.n	8015186 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801524e:	0648      	lsls	r0, r1, #25
 8015250:	d191      	bne.n	8015176 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015252:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 8015254:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015258:	f04f 0202 	mov.w	r2, #2
 801525c:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801525e:	bf4c      	ite	mi
 8015260:	f104 0114 	addmi.w	r1, r4, #20
 8015264:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 8015268:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801526a:	f000 f85d 	bl	8015328 <USBD_CtlSendData>
        break;
 801526e:	e78a      	b.n	8015186 <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015270:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015272:	2b00      	cmp	r3, #0
 8015274:	f43f af7f 	beq.w	8015176 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015278:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801527c:	1c5d      	adds	r5, r3, #1
 801527e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8015282:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8015286:	e7aa      	b.n	80151de <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015288:	4620      	mov	r0, r4
 801528a:	f00e fdfb 	bl	8023e84 <USBD_LL_IsStallEP>
 801528e:	b120      	cbz	r0, 801529a <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8015290:	2301      	movs	r3, #1
 8015292:	e7a6      	b.n	80151e2 <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015294:	f00e fde8 	bl	8023e68 <USBD_LL_ClearStallEP>
 8015298:	e7c6      	b.n	8015228 <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 801529a:	6028      	str	r0, [r5, #0]
 801529c:	e7a2      	b.n	80151e4 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801529e:	f00e fdd5 	bl	8023e4c <USBD_LL_StallEP>
 80152a2:	e7b2      	b.n	801520a <USBD_StdEPReq+0xaa>

080152a4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80152a4:	780b      	ldrb	r3, [r1, #0]
 80152a6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80152a8:	784b      	ldrb	r3, [r1, #1]
 80152aa:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80152ac:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 80152ae:	8043      	strh	r3, [r0, #2]
 80152b0:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 80152b2:	8083      	strh	r3, [r0, #4]
 80152b4:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 80152b6:	80c3      	strh	r3, [r0, #6]
}
 80152b8:	4770      	bx	lr
 80152ba:	bf00      	nop

080152bc <USBD_CtlError>:
{
 80152bc:	b510      	push	{r4, lr}
 80152be:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80152c0:	2180      	movs	r1, #128	; 0x80
 80152c2:	f00e fdc3 	bl	8023e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80152c6:	2100      	movs	r1, #0
 80152c8:	4620      	mov	r0, r4
}
 80152ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80152ce:	f00e bdbd 	b.w	8023e4c <USBD_LL_StallEP>
 80152d2:	bf00      	nop

080152d4 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80152d4:	b318      	cbz	r0, 801531e <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80152d6:	7803      	ldrb	r3, [r0, #0]
{
 80152d8:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 80152da:	b30b      	cbz	r3, 8015320 <USBD_GetString+0x4c>
 80152dc:	4604      	mov	r4, r0
 80152de:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80152e2:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 80152e6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80152ea:	b2db      	uxtb	r3, r3
 80152ec:	2d00      	cmp	r5, #0
 80152ee:	d1f8      	bne.n	80152e2 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80152f0:	3301      	adds	r3, #1
 80152f2:	005b      	lsls	r3, r3, #1
 80152f4:	b2dc      	uxtb	r4, r3
 80152f6:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80152f8:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80152fa:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80152fc:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80152fe:	7804      	ldrb	r4, [r0, #0]
 8015300:	b15c      	cbz	r4, 801531a <USBD_GetString+0x46>
  idx++;
 8015302:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8015304:	2500      	movs	r5, #0
    idx++;
 8015306:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8015308:	54cc      	strb	r4, [r1, r3]
    idx++;
 801530a:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 801530c:	b2d2      	uxtb	r2, r2
    idx++;
 801530e:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8015310:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8015312:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8015316:	2c00      	cmp	r4, #0
 8015318:	d1f5      	bne.n	8015306 <USBD_GetString+0x32>
}
 801531a:	bc30      	pop	{r4, r5}
 801531c:	4770      	bx	lr
 801531e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8015320:	2402      	movs	r4, #2
 8015322:	4623      	mov	r3, r4
 8015324:	e7e7      	b.n	80152f6 <USBD_GetString+0x22>
 8015326:	bf00      	nop

08015328 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015328:	b510      	push	{r4, lr}
 801532a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801532c:	2402      	movs	r4, #2
{
 801532e:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015330:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015332:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8015336:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801533a:	f00e fdc5 	bl	8023ec8 <USBD_LL_Transmit>

  return USBD_OK;
}
 801533e:	2000      	movs	r0, #0
 8015340:	bd10      	pop	{r4, pc}
 8015342:	bf00      	nop

08015344 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015344:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015346:	2100      	movs	r1, #0
{
 8015348:	b508      	push	{r3, lr}
 801534a:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801534c:	4662      	mov	r2, ip
 801534e:	f00e fdbb 	bl	8023ec8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8015352:	2000      	movs	r0, #0
 8015354:	bd08      	pop	{r3, pc}
 8015356:	bf00      	nop

08015358 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015358:	b510      	push	{r4, lr}
 801535a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801535c:	2403      	movs	r4, #3
{
 801535e:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015360:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015362:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8015366:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801536a:	f00e fdbb 	bl	8023ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801536e:	2000      	movs	r0, #0
 8015370:	bd10      	pop	{r4, pc}
 8015372:	bf00      	nop

08015374 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015374:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015376:	2100      	movs	r1, #0
{
 8015378:	b508      	push	{r3, lr}
 801537a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801537c:	4662      	mov	r2, ip
 801537e:	f00e fdb1 	bl	8023ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8015382:	2000      	movs	r0, #0
 8015384:	bd08      	pop	{r3, pc}
 8015386:	bf00      	nop

08015388 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015388:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801538a:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801538c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801538e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015392:	461a      	mov	r2, r3
 8015394:	4619      	mov	r1, r3
 8015396:	f00e fd97 	bl	8023ec8 <USBD_LL_Transmit>

  return USBD_OK;
}
 801539a:	2000      	movs	r0, #0
 801539c:	bd08      	pop	{r3, pc}
 801539e:	bf00      	nop

080153a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80153a0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80153a2:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153a4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80153a6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153aa:	461a      	mov	r2, r3
 80153ac:	4619      	mov	r1, r3
 80153ae:	f00e fd99 	bl	8023ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80153b2:	2000      	movs	r0, #0
 80153b4:	bd08      	pop	{r3, pc}
 80153b6:	bf00      	nop

080153b8 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80153b8:	4b10      	ldr	r3, [pc, #64]	; (80153fc <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80153ba:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 80153bc:	7a5c      	ldrb	r4, [r3, #9]
 80153be:	b9cc      	cbnz	r4, 80153f4 <FATFS_LinkDriver+0x3c>
 80153c0:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 80153c2:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 80153c6:	7a5c      	ldrb	r4, [r3, #9]
 80153c8:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80153ca:	7a5c      	ldrb	r4, [r3, #9]
 80153cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80153d0:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80153d2:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 80153d4:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80153d6:	441c      	add	r4, r3
 80153d8:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 80153da:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 80153dc:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80153de:	b2e4      	uxtb	r4, r4
 80153e0:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 80153e2:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 80153e4:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80153e6:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80153e8:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 80153ea:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80153ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80153f0:	708b      	strb	r3, [r1, #2]
}
 80153f2:	4770      	bx	lr
  uint8_t ret = 1;
 80153f4:	2001      	movs	r0, #1
}
 80153f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153fa:	4770      	bx	lr
 80153fc:	200062fc 	.word	0x200062fc

08015400 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015400:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8015402:	f001 f9c9 	bl	8016798 <vTaskStartScheduler>
  
  return osOK;
}
 8015406:	2000      	movs	r0, #0
 8015408:	bd08      	pop	{r3, pc}
 801540a:	bf00      	nop

0801540c <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801540c:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8015410:	b10b      	cbz	r3, 8015416 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8015412:	f001 ba23 	b.w	801685c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8015416:	f001 ba1b 	b.w	8016850 <xTaskGetTickCount>
 801541a:	bf00      	nop

0801541c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801541c:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801541e:	6944      	ldr	r4, [r0, #20]
{
 8015420:	b086      	sub	sp, #24
 8015422:	4684      	mov	ip, r0
 8015424:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015426:	b1ac      	cbz	r4, 8015454 <osThreadCreate+0x38>
 8015428:	6986      	ldr	r6, [r0, #24]
 801542a:	b19e      	cbz	r6, 8015454 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801542c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015430:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 8015434:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015438:	f8dc 2010 	ldr.w	r2, [ip, #16]
 801543c:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 801543e:	bf14      	ite	ne
 8015440:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015444:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015446:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801544a:	9500      	str	r5, [sp, #0]
 801544c:	f001 f932 	bl	80166b4 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8015450:	b006      	add	sp, #24
 8015452:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015454:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 8015458:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 801545c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 801545e:	bf14      	ite	ne
 8015460:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015462:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015464:	e9dc 1000 	ldrd	r1, r0, [ip]
 8015468:	9400      	str	r4, [sp, #0]
 801546a:	ac05      	add	r4, sp, #20
 801546c:	9401      	str	r4, [sp, #4]
 801546e:	f001 f961 	bl	8016734 <xTaskCreate>
 8015472:	2801      	cmp	r0, #1
  return handle;
 8015474:	bf0c      	ite	eq
 8015476:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8015478:	2000      	movne	r0, #0
}
 801547a:	b006      	add	sp, #24
 801547c:	bd70      	pop	{r4, r5, r6, pc}
 801547e:	bf00      	nop

08015480 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015480:	2801      	cmp	r0, #1
{
 8015482:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015484:	bf38      	it	cc
 8015486:	2001      	movcc	r0, #1
 8015488:	f001 fb48 	bl	8016b1c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801548c:	2000      	movs	r0, #0
 801548e:	bd08      	pop	{r3, pc}

08015490 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8015490:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8015492:	6844      	ldr	r4, [r0, #4]
{
 8015494:	b082      	sub	sp, #8
 8015496:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 8015498:	b16c      	cbz	r4, 80154b6 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 801549a:	f1a1 0201 	sub.w	r2, r1, #1
 801549e:	6800      	ldr	r0, [r0, #0]
 80154a0:	2101      	movs	r1, #1
 80154a2:	fab2 f282 	clz	r2, r2
 80154a6:	0952      	lsrs	r2, r2, #5
 80154a8:	e9cd 0400 	strd	r0, r4, [sp]
 80154ac:	4808      	ldr	r0, [pc, #32]	; (80154d0 <osTimerCreate+0x40>)
 80154ae:	f001 fee9 	bl	8017284 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 80154b2:	b002      	add	sp, #8
 80154b4:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 80154b6:	f1a1 0201 	sub.w	r2, r1, #1
 80154ba:	6804      	ldr	r4, [r0, #0]
 80154bc:	2101      	movs	r1, #1
 80154be:	4804      	ldr	r0, [pc, #16]	; (80154d0 <osTimerCreate+0x40>)
 80154c0:	fab2 f282 	clz	r2, r2
 80154c4:	9400      	str	r4, [sp, #0]
 80154c6:	0952      	lsrs	r2, r2, #5
 80154c8:	f001 feac 	bl	8017224 <xTimerCreate>
}
 80154cc:	b002      	add	sp, #8
 80154ce:	bd10      	pop	{r4, pc}
 80154d0:	0802a290 	.word	0x0802a290

080154d4 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80154d4:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80154d6:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 80154d8:	b109      	cbz	r1, 80154de <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80154da:	f000 bbc9 	b.w	8015c70 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80154de:	f000 bbdf 	b.w	8015ca0 <xQueueCreateMutex>
 80154e2:	bf00      	nop

080154e4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80154e4:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80154e6:	2400      	movs	r4, #0
{
 80154e8:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 80154ea:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80154ec:	b310      	cbz	r0, 8015534 <osMutexWait+0x50>
 80154ee:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80154f2:	b933      	cbnz	r3, 8015502 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80154f4:	f000 fd88 	bl	8016008 <xQueueSemaphoreTake>
 80154f8:	2801      	cmp	r0, #1
 80154fa:	d118      	bne.n	801552e <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80154fc:	2000      	movs	r0, #0
}
 80154fe:	b002      	add	sp, #8
 8015500:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8015502:	aa01      	add	r2, sp, #4
 8015504:	4621      	mov	r1, r4
 8015506:	f000 fe63 	bl	80161d0 <xQueueReceiveFromISR>
 801550a:	2801      	cmp	r0, #1
 801550c:	d10f      	bne.n	801552e <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 801550e:	9b01      	ldr	r3, [sp, #4]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d0f3      	beq.n	80154fc <osMutexWait+0x18>
 8015514:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801551c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015520:	f3bf 8f4f 	dsb	sy
 8015524:	f3bf 8f6f 	isb	sy
  return osOK;
 8015528:	4620      	mov	r0, r4
}
 801552a:	b002      	add	sp, #8
 801552c:	bd10      	pop	{r4, pc}
    return osErrorOS;
 801552e:	20ff      	movs	r0, #255	; 0xff
}
 8015530:	b002      	add	sp, #8
 8015532:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8015534:	2080      	movs	r0, #128	; 0x80
}
 8015536:	b002      	add	sp, #8
 8015538:	bd10      	pop	{r4, pc}
 801553a:	bf00      	nop

0801553c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 801553c:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 801553e:	2400      	movs	r4, #0
{
 8015540:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 8015542:	9401      	str	r4, [sp, #4]
 8015544:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8015548:	b19b      	cbz	r3, 8015572 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801554a:	a901      	add	r1, sp, #4
 801554c:	f000 fc34 	bl	8015db8 <xQueueGiveFromISR>
 8015550:	2801      	cmp	r0, #1
 8015552:	d114      	bne.n	801557e <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015554:	9b01      	ldr	r3, [sp, #4]
 8015556:	b1ab      	cbz	r3, 8015584 <osMutexRelease+0x48>
 8015558:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801555c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015560:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015564:	f3bf 8f4f 	dsb	sy
 8015568:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 801556c:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 801556e:	b002      	add	sp, #8
 8015570:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8015572:	461a      	mov	r2, r3
 8015574:	4619      	mov	r1, r3
 8015576:	f000 faad 	bl	8015ad4 <xQueueGenericSend>
 801557a:	2801      	cmp	r0, #1
 801557c:	d002      	beq.n	8015584 <osMutexRelease+0x48>
    result = osErrorOS;
 801557e:	20ff      	movs	r0, #255	; 0xff
}
 8015580:	b002      	add	sp, #8
 8015582:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8015584:	2000      	movs	r0, #0
}
 8015586:	b002      	add	sp, #8
 8015588:	bd10      	pop	{r4, pc}
 801558a:	bf00      	nop

0801558c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801558c:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801558e:	6844      	ldr	r4, [r0, #4]
{ 
 8015590:	b083      	sub	sp, #12
 8015592:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8015594:	b184      	cbz	r4, 80155b8 <osSemaphoreCreate+0x2c>
    if (count == 1) {
 8015596:	2901      	cmp	r1, #1
 8015598:	d003      	beq.n	80155a2 <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801559a:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 801559c:	4620      	mov	r0, r4
 801559e:	b003      	add	sp, #12
 80155a0:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80155a2:	2200      	movs	r2, #0
 80155a4:	2503      	movs	r5, #3
 80155a6:	4623      	mov	r3, r4
 80155a8:	4611      	mov	r1, r2
 80155aa:	9500      	str	r5, [sp, #0]
 80155ac:	f000 fa08 	bl	80159c0 <xQueueGenericCreateStatic>
 80155b0:	4604      	mov	r4, r0
}
 80155b2:	4620      	mov	r0, r4
 80155b4:	b003      	add	sp, #12
 80155b6:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 80155b8:	2901      	cmp	r1, #1
 80155ba:	d1ef      	bne.n	801559c <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 80155bc:	4621      	mov	r1, r4
 80155be:	2203      	movs	r2, #3
 80155c0:	f000 fa56 	bl	8015a70 <xQueueGenericCreate>
 80155c4:	4604      	mov	r4, r0
 80155c6:	2800      	cmp	r0, #0
 80155c8:	d0e8      	beq.n	801559c <osSemaphoreCreate+0x10>
 80155ca:	2300      	movs	r3, #0
 80155cc:	461a      	mov	r2, r3
 80155ce:	4619      	mov	r1, r3
 80155d0:	f000 fa80 	bl	8015ad4 <xQueueGenericSend>
 80155d4:	e7e2      	b.n	801559c <osSemaphoreCreate+0x10>
 80155d6:	bf00      	nop

080155d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80155d8:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80155da:	2400      	movs	r4, #0
{
 80155dc:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 80155de:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80155e0:	b310      	cbz	r0, 8015628 <osSemaphoreWait+0x50>
 80155e2:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80155e6:	b933      	cbnz	r3, 80155f6 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80155e8:	f000 fd0e 	bl	8016008 <xQueueSemaphoreTake>
 80155ec:	2801      	cmp	r0, #1
 80155ee:	d118      	bne.n	8015622 <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80155f0:	2000      	movs	r0, #0
}
 80155f2:	b002      	add	sp, #8
 80155f4:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80155f6:	aa01      	add	r2, sp, #4
 80155f8:	4621      	mov	r1, r4
 80155fa:	f000 fde9 	bl	80161d0 <xQueueReceiveFromISR>
 80155fe:	2801      	cmp	r0, #1
 8015600:	d10f      	bne.n	8015622 <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8015602:	9b01      	ldr	r3, [sp, #4]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d0f3      	beq.n	80155f0 <osSemaphoreWait+0x18>
 8015608:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801560c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015610:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015614:	f3bf 8f4f 	dsb	sy
 8015618:	f3bf 8f6f 	isb	sy
  return osOK;
 801561c:	4620      	mov	r0, r4
}
 801561e:	b002      	add	sp, #8
 8015620:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8015622:	20ff      	movs	r0, #255	; 0xff
}
 8015624:	b002      	add	sp, #8
 8015626:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8015628:	2080      	movs	r0, #128	; 0x80
}
 801562a:	b002      	add	sp, #8
 801562c:	bd10      	pop	{r4, pc}
 801562e:	bf00      	nop

08015630 <osSemaphoreRelease>:
 8015630:	b510      	push	{r4, lr}
 8015632:	2400      	movs	r4, #0
 8015634:	b082      	sub	sp, #8
 8015636:	9401      	str	r4, [sp, #4]
 8015638:	f3ef 8305 	mrs	r3, IPSR
 801563c:	b19b      	cbz	r3, 8015666 <osSemaphoreRelease+0x36>
 801563e:	a901      	add	r1, sp, #4
 8015640:	f000 fbba 	bl	8015db8 <xQueueGiveFromISR>
 8015644:	2801      	cmp	r0, #1
 8015646:	d114      	bne.n	8015672 <osSemaphoreRelease+0x42>
 8015648:	9b01      	ldr	r3, [sp, #4]
 801564a:	b1ab      	cbz	r3, 8015678 <osSemaphoreRelease+0x48>
 801564c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015654:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015658:	f3bf 8f4f 	dsb	sy
 801565c:	f3bf 8f6f 	isb	sy
 8015660:	4620      	mov	r0, r4
 8015662:	b002      	add	sp, #8
 8015664:	bd10      	pop	{r4, pc}
 8015666:	461a      	mov	r2, r3
 8015668:	4619      	mov	r1, r3
 801566a:	f000 fa33 	bl	8015ad4 <xQueueGenericSend>
 801566e:	2801      	cmp	r0, #1
 8015670:	d002      	beq.n	8015678 <osSemaphoreRelease+0x48>
 8015672:	20ff      	movs	r0, #255	; 0xff
 8015674:	b002      	add	sp, #8
 8015676:	bd10      	pop	{r4, pc}
 8015678:	2000      	movs	r0, #0
 801567a:	b002      	add	sp, #8
 801567c:	bd10      	pop	{r4, pc}
 801567e:	bf00      	nop

08015680 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8015680:	6882      	ldr	r2, [r0, #8]
 8015682:	b15a      	cbz	r2, 801569c <osMessageCreate+0x1c>
 8015684:	68c3      	ldr	r3, [r0, #12]
 8015686:	b14b      	cbz	r3, 801569c <osMessageCreate+0x1c>
{
 8015688:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801568a:	2400      	movs	r4, #0
{
 801568c:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801568e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8015692:	9400      	str	r4, [sp, #0]
 8015694:	f000 f994 	bl	80159c0 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015698:	b002      	add	sp, #8
 801569a:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801569c:	2200      	movs	r2, #0
 801569e:	e9d0 0100 	ldrd	r0, r1, [r0]
 80156a2:	f000 b9e5 	b.w	8015a70 <xQueueGenericCreate>
 80156a6:	bf00      	nop

080156a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80156a8:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80156aa:	2400      	movs	r4, #0
{
 80156ac:	b084      	sub	sp, #16
 80156ae:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80156b0:	9403      	str	r4, [sp, #12]
 80156b2:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 80156b6:	b15b      	cbz	r3, 80156d0 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80156b8:	4623      	mov	r3, r4
 80156ba:	aa03      	add	r2, sp, #12
 80156bc:	a901      	add	r1, sp, #4
 80156be:	f000 fb09 	bl	8015cd4 <xQueueGenericSendFromISR>
 80156c2:	2801      	cmp	r0, #1
 80156c4:	d10c      	bne.n	80156e0 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80156c6:	9b03      	ldr	r3, [sp, #12]
 80156c8:	b96b      	cbnz	r3, 80156e6 <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80156ca:	2000      	movs	r0, #0
}
 80156cc:	b004      	add	sp, #16
 80156ce:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80156d0:	2a01      	cmp	r2, #1
 80156d2:	a901      	add	r1, sp, #4
 80156d4:	bf38      	it	cc
 80156d6:	2201      	movcc	r2, #1
 80156d8:	f000 f9fc 	bl	8015ad4 <xQueueGenericSend>
 80156dc:	2801      	cmp	r0, #1
 80156de:	d0f4      	beq.n	80156ca <osMessagePut+0x22>
      return osErrorOS;
 80156e0:	20ff      	movs	r0, #255	; 0xff
}
 80156e2:	b004      	add	sp, #16
 80156e4:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80156e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80156ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80156f2:	f3bf 8f4f 	dsb	sy
 80156f6:	f3bf 8f6f 	isb	sy
  return osOK;
 80156fa:	4620      	mov	r0, r4
}
 80156fc:	b004      	add	sp, #16
 80156fe:	bd10      	pop	{r4, pc}

08015700 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015700:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8015702:	2600      	movs	r6, #0
{
 8015704:	b084      	sub	sp, #16
 8015706:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 8015708:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 801570c:	b379      	cbz	r1, 801576e <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 801570e:	460b      	mov	r3, r1
 8015710:	9600      	str	r6, [sp, #0]
 8015712:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8015716:	b991      	cbnz	r1, 801573e <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8015718:	a902      	add	r1, sp, #8
 801571a:	4618      	mov	r0, r3
 801571c:	4615      	mov	r5, r2
 801571e:	f000 fbab 	bl	8015e78 <xQueueReceive>
 8015722:	2801      	cmp	r0, #1
 8015724:	d02d      	beq.n	8015782 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8015726:	2d00      	cmp	r5, #0
 8015728:	bf18      	it	ne
 801572a:	2540      	movne	r5, #64	; 0x40
 801572c:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 801572e:	ab04      	add	r3, sp, #16
 8015730:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015738:	4620      	mov	r0, r4
 801573a:	b004      	add	sp, #16
 801573c:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801573e:	466a      	mov	r2, sp
 8015740:	4618      	mov	r0, r3
 8015742:	a902      	add	r1, sp, #8
 8015744:	f000 fd44 	bl	80161d0 <xQueueReceiveFromISR>
      event.status = osOK;
 8015748:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 801574a:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 801574c:	bf0c      	ite	eq
 801574e:	2210      	moveq	r2, #16
 8015750:	2200      	movne	r2, #0
 8015752:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8015754:	2b00      	cmp	r3, #0
 8015756:	d0ea      	beq.n	801572e <osMessageGet+0x2e>
 8015758:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801575c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015760:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015764:	f3bf 8f4f 	dsb	sy
 8015768:	f3bf 8f6f 	isb	sy
 801576c:	e7df      	b.n	801572e <osMessageGet+0x2e>
    event.status = osErrorParameter;
 801576e:	2380      	movs	r3, #128	; 0x80
 8015770:	9301      	str	r3, [sp, #4]
    return event;
 8015772:	ab04      	add	r3, sp, #16
 8015774:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015778:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801577c:	4620      	mov	r0, r4
 801577e:	b004      	add	sp, #16
 8015780:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8015782:	2310      	movs	r3, #16
 8015784:	9301      	str	r3, [sp, #4]
 8015786:	e7d2      	b.n	801572e <osMessageGet+0x2e>

08015788 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015788:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801578c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015790:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015792:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015794:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015796:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015798:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801579c:	4770      	bx	lr
 801579e:	bf00      	nop

080157a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80157a0:	2300      	movs	r3, #0
 80157a2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop

080157a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80157a8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80157aa:	6802      	ldr	r2, [r0, #0]
{
 80157ac:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80157ae:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80157b0:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 80157b2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80157b4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80157b6:	689c      	ldr	r4, [r3, #8]
 80157b8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80157ba:	6099      	str	r1, [r3, #8]
}
 80157bc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80157c0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80157c2:	6002      	str	r2, [r0, #0]
}
 80157c4:	4770      	bx	lr
 80157c6:	bf00      	nop

080157c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80157c8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80157ca:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80157cc:	1c6b      	adds	r3, r5, #1
 80157ce:	d010      	beq.n	80157f2 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80157d0:	f100 0308 	add.w	r3, r0, #8
 80157d4:	461c      	mov	r4, r3
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	42aa      	cmp	r2, r5
 80157dc:	d9fa      	bls.n	80157d4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80157de:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80157e0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80157e2:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80157e4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80157e6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80157e8:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80157ea:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80157ec:	6002      	str	r2, [r0, #0]
}
 80157ee:	bc30      	pop	{r4, r5}
 80157f0:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80157f2:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80157f4:	6863      	ldr	r3, [r4, #4]
 80157f6:	e7f2      	b.n	80157de <vListInsert+0x16>

080157f8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80157f8:	6903      	ldr	r3, [r0, #16]
{
 80157fa:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80157fc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80157fe:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8015802:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8015804:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015808:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801580a:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 801580c:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015810:	bf08      	it	eq
 8015812:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8015814:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8015816:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8015818:	3a01      	subs	r2, #1
 801581a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 801581c:	6818      	ldr	r0, [r3, #0]
}
 801581e:	4770      	bx	lr

08015820 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015820:	b570      	push	{r4, r5, r6, lr}
 8015822:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015824:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8015826:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015828:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801582a:	b92a      	cbnz	r2, 8015838 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801582c:	6805      	ldr	r5, [r0, #0]
 801582e:	b365      	cbz	r5, 801588a <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015830:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8015832:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015834:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8015836:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8015838:	b97d      	cbnz	r5, 801585a <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801583a:	6840      	ldr	r0, [r0, #4]
 801583c:	f00e fdf4 	bl	8024428 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015840:	6863      	ldr	r3, [r4, #4]
 8015842:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015844:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015846:	68a2      	ldr	r2, [r4, #8]
 8015848:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801584a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801584c:	d319      	bcc.n	8015882 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801584e:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015850:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8015852:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015854:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015856:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015858:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801585a:	68c0      	ldr	r0, [r0, #12]
 801585c:	f00e fde4 	bl	8024428 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015860:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015862:	68e3      	ldr	r3, [r4, #12]
 8015864:	4251      	negs	r1, r2
 8015866:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015868:	6822      	ldr	r2, [r4, #0]
 801586a:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801586c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801586e:	d202      	bcs.n	8015876 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015870:	68a3      	ldr	r3, [r4, #8]
 8015872:	440b      	add	r3, r1
 8015874:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8015876:	2d02      	cmp	r5, #2
 8015878:	d00d      	beq.n	8015896 <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801587a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 801587c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801587e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015880:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015882:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8015884:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015886:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015888:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801588a:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801588c:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801588e:	f001 fadb 	bl	8016e48 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015892:	60a5      	str	r5, [r4, #8]
 8015894:	e7ce      	b.n	8015834 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015896:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8015898:	f04f 0000 	mov.w	r0, #0
 801589c:	bf38      	it	cc
 801589e:	2601      	movcc	r6, #1
 80158a0:	e7c8      	b.n	8015834 <prvCopyDataToQueue+0x14>
 80158a2:	bf00      	nop

080158a4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80158a4:	b570      	push	{r4, r5, r6, lr}
 80158a6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80158a8:	f001 ff64 	bl	8017774 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80158ac:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80158b0:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80158b2:	2c00      	cmp	r4, #0
 80158b4:	dd14      	ble.n	80158e0 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158b6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80158ba:	e003      	b.n	80158c4 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80158bc:	1e63      	subs	r3, r4, #1
 80158be:	b2da      	uxtb	r2, r3
 80158c0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80158c2:	b16a      	cbz	r2, 80158e0 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158c6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158c8:	b153      	cbz	r3, 80158e0 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158ca:	f001 f9a5 	bl	8016c18 <xTaskRemoveFromEventList>
 80158ce:	2800      	cmp	r0, #0
 80158d0:	d0f4      	beq.n	80158bc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80158d2:	f001 fa45 	bl	8016d60 <vTaskMissedYield>
			--cTxLock;
 80158d6:	1e63      	subs	r3, r4, #1
 80158d8:	b2da      	uxtb	r2, r3
 80158da:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80158dc:	2a00      	cmp	r2, #0
 80158de:	d1f1      	bne.n	80158c4 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80158e0:	23ff      	movs	r3, #255	; 0xff
 80158e2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80158e6:	f001 ff6b 	bl	80177c0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80158ea:	f001 ff43 	bl	8017774 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80158ee:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80158f2:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80158f4:	2c00      	cmp	r4, #0
 80158f6:	dd14      	ble.n	8015922 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158f8:	f105 0610 	add.w	r6, r5, #16
 80158fc:	e003      	b.n	8015906 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80158fe:	1e63      	subs	r3, r4, #1
 8015900:	b2da      	uxtb	r2, r3
 8015902:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015904:	b16a      	cbz	r2, 8015922 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015906:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015908:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801590a:	b153      	cbz	r3, 8015922 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801590c:	f001 f984 	bl	8016c18 <xTaskRemoveFromEventList>
 8015910:	2800      	cmp	r0, #0
 8015912:	d0f4      	beq.n	80158fe <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8015914:	f001 fa24 	bl	8016d60 <vTaskMissedYield>
				--cRxLock;
 8015918:	1e63      	subs	r3, r4, #1
 801591a:	b2da      	uxtb	r2, r3
 801591c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801591e:	2a00      	cmp	r2, #0
 8015920:	d1f1      	bne.n	8015906 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015922:	23ff      	movs	r3, #255	; 0xff
 8015924:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8015928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 801592c:	f001 bf48 	b.w	80177c0 <vPortExitCritical>

08015930 <xQueueGenericReset>:
{
 8015930:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8015932:	b1e0      	cbz	r0, 801596e <xQueueGenericReset+0x3e>
 8015934:	4604      	mov	r4, r0
 8015936:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8015938:	f001 ff1c 	bl	8017774 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801593c:	6822      	ldr	r2, [r4, #0]
 801593e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015942:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015944:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015948:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801594a:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801594c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801594e:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015950:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8015952:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015954:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015956:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8015958:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801595c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8015960:	b985      	cbnz	r5, 8015984 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015962:	6923      	ldr	r3, [r4, #16]
 8015964:	b9d3      	cbnz	r3, 801599c <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 8015966:	f001 ff2b 	bl	80177c0 <vPortExitCritical>
}
 801596a:	2001      	movs	r0, #1
 801596c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801596e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015972:	b672      	cpsid	i
 8015974:	f383 8811 	msr	BASEPRI, r3
 8015978:	f3bf 8f6f 	isb	sy
 801597c:	f3bf 8f4f 	dsb	sy
 8015980:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015982:	e7fe      	b.n	8015982 <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015984:	f104 0010 	add.w	r0, r4, #16
 8015988:	f7ff fefe 	bl	8015788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801598c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015990:	f7ff fefa 	bl	8015788 <vListInitialise>
	taskEXIT_CRITICAL();
 8015994:	f001 ff14 	bl	80177c0 <vPortExitCritical>
}
 8015998:	2001      	movs	r0, #1
 801599a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801599c:	f104 0010 	add.w	r0, r4, #16
 80159a0:	f001 f93a 	bl	8016c18 <xTaskRemoveFromEventList>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d0de      	beq.n	8015966 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80159a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80159ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80159b4:	f3bf 8f4f 	dsb	sy
 80159b8:	f3bf 8f6f 	isb	sy
 80159bc:	e7d3      	b.n	8015966 <xQueueGenericReset+0x36>
 80159be:	bf00      	nop

080159c0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80159c0:	b950      	cbnz	r0, 80159d8 <xQueueGenericCreateStatic+0x18>
 80159c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159c6:	b672      	cpsid	i
 80159c8:	f383 8811 	msr	BASEPRI, r3
 80159cc:	f3bf 8f6f 	isb	sy
 80159d0:	f3bf 8f4f 	dsb	sy
 80159d4:	b662      	cpsie	i
 80159d6:	e7fe      	b.n	80159d6 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80159d8:	b17b      	cbz	r3, 80159fa <xQueueGenericCreateStatic+0x3a>
	{
 80159da:	b510      	push	{r4, lr}
 80159dc:	460c      	mov	r4, r1
 80159de:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80159e0:	b33a      	cbz	r2, 8015a32 <xQueueGenericCreateStatic+0x72>
 80159e2:	b9a9      	cbnz	r1, 8015a10 <xQueueGenericCreateStatic+0x50>
 80159e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159e8:	b672      	cpsid	i
 80159ea:	f383 8811 	msr	BASEPRI, r3
 80159ee:	f3bf 8f6f 	isb	sy
 80159f2:	f3bf 8f4f 	dsb	sy
 80159f6:	b662      	cpsie	i
 80159f8:	e7fe      	b.n	80159f8 <xQueueGenericCreateStatic+0x38>
 80159fa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159fe:	b672      	cpsid	i
 8015a00:	f383 8811 	msr	BASEPRI, r3
 8015a04:	f3bf 8f6f 	isb	sy
 8015a08:	f3bf 8f4f 	dsb	sy
 8015a0c:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8015a0e:	e7fe      	b.n	8015a0e <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015a10:	b17a      	cbz	r2, 8015a32 <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015a12:	2148      	movs	r1, #72	; 0x48
 8015a14:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015a16:	9903      	ldr	r1, [sp, #12]
 8015a18:	2948      	cmp	r1, #72	; 0x48
 8015a1a:	d017      	beq.n	8015a4c <xQueueGenericCreateStatic+0x8c>
 8015a1c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a20:	b672      	cpsid	i
 8015a22:	f383 8811 	msr	BASEPRI, r3
 8015a26:	f3bf 8f6f 	isb	sy
 8015a2a:	f3bf 8f4f 	dsb	sy
 8015a2e:	b662      	cpsie	i
 8015a30:	e7fe      	b.n	8015a30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015a32:	2c00      	cmp	r4, #0
 8015a34:	d0ed      	beq.n	8015a12 <xQueueGenericCreateStatic+0x52>
 8015a36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a3a:	b672      	cpsid	i
 8015a3c:	f383 8811 	msr	BASEPRI, r3
 8015a40:	f3bf 8f6f 	isb	sy
 8015a44:	f3bf 8f4f 	dsb	sy
 8015a48:	b662      	cpsie	i
 8015a4a:	e7fe      	b.n	8015a4a <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015a4c:	2c00      	cmp	r4, #0
 8015a4e:	bf08      	it	eq
 8015a50:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015a52:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8015a54:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a56:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015a58:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8015a5c:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8015a5e:	641c      	str	r4, [r3, #64]	; 0x40
 8015a60:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015a62:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a64:	f7ff ff64 	bl	8015930 <xQueueGenericReset>
	}
 8015a68:	9b01      	ldr	r3, [sp, #4]
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	b004      	add	sp, #16
 8015a6e:	bd10      	pop	{r4, pc}

08015a70 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015a70:	b950      	cbnz	r0, 8015a88 <xQueueGenericCreate+0x18>
 8015a72:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a76:	b672      	cpsid	i
 8015a78:	f383 8811 	msr	BASEPRI, r3
 8015a7c:	f3bf 8f6f 	isb	sy
 8015a80:	f3bf 8f4f 	dsb	sy
 8015a84:	b662      	cpsie	i
 8015a86:	e7fe      	b.n	8015a86 <xQueueGenericCreate+0x16>
	{
 8015a88:	b570      	push	{r4, r5, r6, lr}
 8015a8a:	4605      	mov	r5, r0
 8015a8c:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8015a8e:	b979      	cbnz	r1, 8015ab0 <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015a90:	2048      	movs	r0, #72	; 0x48
 8015a92:	f001 ffd9 	bl	8017a48 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015a96:	4604      	mov	r4, r0
 8015a98:	b1c0      	cbz	r0, 8015acc <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a9a:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015a9e:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015aa0:	2101      	movs	r1, #1
 8015aa2:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8015aa4:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015aa8:	f7ff ff42 	bl	8015930 <xQueueGenericReset>
	}
 8015aac:	4620      	mov	r0, r4
 8015aae:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ab0:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015ab4:	3048      	adds	r0, #72	; 0x48
 8015ab6:	f001 ffc7 	bl	8017a48 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015aba:	4604      	mov	r4, r0
 8015abc:	b130      	cbz	r0, 8015acc <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015abe:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015ac0:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015ac4:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015ac8:	6003      	str	r3, [r0, #0]
 8015aca:	e7e9      	b.n	8015aa0 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015acc:	2400      	movs	r4, #0
	}
 8015ace:	4620      	mov	r0, r4
 8015ad0:	bd70      	pop	{r4, r5, r6, pc}
 8015ad2:	bf00      	nop

08015ad4 <xQueueGenericSend>:
{
 8015ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ad8:	b085      	sub	sp, #20
 8015ada:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8015adc:	2800      	cmp	r0, #0
 8015ade:	f000 8083 	beq.w	8015be8 <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ae2:	460f      	mov	r7, r1
 8015ae4:	4604      	mov	r4, r0
 8015ae6:	461e      	mov	r6, r3
 8015ae8:	2900      	cmp	r1, #0
 8015aea:	d06b      	beq.n	8015bc4 <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015aec:	2e02      	cmp	r6, #2
 8015aee:	d10d      	bne.n	8015b0c <xQueueGenericSend+0x38>
 8015af0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d00a      	beq.n	8015b0c <xQueueGenericSend+0x38>
 8015af6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015afa:	b672      	cpsid	i
 8015afc:	f383 8811 	msr	BASEPRI, r3
 8015b00:	f3bf 8f6f 	isb	sy
 8015b04:	f3bf 8f4f 	dsb	sy
 8015b08:	b662      	cpsie	i
 8015b0a:	e7fe      	b.n	8015b0a <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b0c:	f001 f934 	bl	8016d78 <xTaskGetSchedulerState>
 8015b10:	2800      	cmp	r0, #0
 8015b12:	d074      	beq.n	8015bfe <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b14:	f1a6 0802 	sub.w	r8, r6, #2
 8015b18:	2500      	movs	r5, #0
 8015b1a:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8015b1e:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b20:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8015b24:	e007      	b.n	8015b36 <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8015b26:	f001 fe4b 	bl	80177c0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	f7ff feba 	bl	80158a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015b30:	f000 ffe2 	bl	8016af8 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b34:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8015b36:	f001 fe1d 	bl	8017774 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015b3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015b3e:	4290      	cmp	r0, r2
 8015b40:	d36b      	bcc.n	8015c1a <xQueueGenericSend+0x146>
 8015b42:	f1b8 0f00 	cmp.w	r8, #0
 8015b46:	d168      	bne.n	8015c1a <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b48:	9b01      	ldr	r3, [sp, #4]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d07d      	beq.n	8015c4a <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8015b4e:	2d00      	cmp	r5, #0
 8015b50:	d046      	beq.n	8015be0 <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 8015b52:	f001 fe35 	bl	80177c0 <vPortExitCritical>
		vTaskSuspendAll();
 8015b56:	f000 fe73 	bl	8016840 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b5a:	f001 fe0b 	bl	8017774 <vPortEnterCritical>
 8015b5e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015b62:	2bff      	cmp	r3, #255	; 0xff
 8015b64:	d101      	bne.n	8015b6a <xQueueGenericSend+0x96>
 8015b66:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8015b6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015b6e:	2bff      	cmp	r3, #255	; 0xff
 8015b70:	d101      	bne.n	8015b76 <xQueueGenericSend+0xa2>
 8015b72:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8015b76:	f001 fe23 	bl	80177c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b7a:	a901      	add	r1, sp, #4
 8015b7c:	a802      	add	r0, sp, #8
 8015b7e:	f001 f8a3 	bl	8016cc8 <xTaskCheckForTimeOut>
 8015b82:	2800      	cmp	r0, #0
 8015b84:	d165      	bne.n	8015c52 <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 8015b86:	f001 fdf5 	bl	8017774 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015b8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015b8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d1c9      	bne.n	8015b26 <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 8015b92:	f001 fe15 	bl	80177c0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015b96:	9901      	ldr	r1, [sp, #4]
 8015b98:	f104 0010 	add.w	r0, r4, #16
 8015b9c:	f001 f800 	bl	8016ba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	f7ff fe7f 	bl	80158a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015ba6:	f000 ffa7 	bl	8016af8 <xTaskResumeAll>
 8015baa:	2800      	cmp	r0, #0
 8015bac:	d1c2      	bne.n	8015b34 <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8015bae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bb6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015bba:	f3bf 8f4f 	dsb	sy
 8015bbe:	f3bf 8f6f 	isb	sy
 8015bc2:	e7b7      	b.n	8015b34 <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015bc4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d090      	beq.n	8015aec <xQueueGenericSend+0x18>
 8015bca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015bce:	b672      	cpsid	i
 8015bd0:	f383 8811 	msr	BASEPRI, r3
 8015bd4:	f3bf 8f6f 	isb	sy
 8015bd8:	f3bf 8f4f 	dsb	sy
 8015bdc:	b662      	cpsie	i
 8015bde:	e7fe      	b.n	8015bde <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015be0:	a802      	add	r0, sp, #8
 8015be2:	f001 f865 	bl	8016cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015be6:	e7b4      	b.n	8015b52 <xQueueGenericSend+0x7e>
 8015be8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015bec:	b672      	cpsid	i
 8015bee:	f383 8811 	msr	BASEPRI, r3
 8015bf2:	f3bf 8f6f 	isb	sy
 8015bf6:	f3bf 8f4f 	dsb	sy
 8015bfa:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015bfc:	e7fe      	b.n	8015bfc <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015bfe:	9b01      	ldr	r3, [sp, #4]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d087      	beq.n	8015b14 <xQueueGenericSend+0x40>
 8015c04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c08:	b672      	cpsid	i
 8015c0a:	f383 8811 	msr	BASEPRI, r3
 8015c0e:	f3bf 8f6f 	isb	sy
 8015c12:	f3bf 8f4f 	dsb	sy
 8015c16:	b662      	cpsie	i
 8015c18:	e7fe      	b.n	8015c18 <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015c1a:	4632      	mov	r2, r6
 8015c1c:	4639      	mov	r1, r7
 8015c1e:	4620      	mov	r0, r4
 8015c20:	f7ff fdfe 	bl	8015820 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c26:	b9db      	cbnz	r3, 8015c60 <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 8015c28:	b148      	cbz	r0, 8015c3e <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8015c2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c32:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015c36:	f3bf 8f4f 	dsb	sy
 8015c3a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8015c3e:	f001 fdbf 	bl	80177c0 <vPortExitCritical>
				return pdPASS;
 8015c42:	2001      	movs	r0, #1
}
 8015c44:	b005      	add	sp, #20
 8015c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8015c4a:	f001 fdb9 	bl	80177c0 <vPortExitCritical>
					return errQUEUE_FULL;
 8015c4e:	4640      	mov	r0, r8
 8015c50:	e7f8      	b.n	8015c44 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 8015c52:	4620      	mov	r0, r4
 8015c54:	f7ff fe26 	bl	80158a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c58:	f000 ff4e 	bl	8016af8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8015c5c:	2000      	movs	r0, #0
 8015c5e:	e7f1      	b.n	8015c44 <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015c60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015c64:	f000 ffd8 	bl	8016c18 <xTaskRemoveFromEventList>
 8015c68:	2800      	cmp	r0, #0
 8015c6a:	d0e8      	beq.n	8015c3e <xQueueGenericSend+0x16a>
 8015c6c:	e7dd      	b.n	8015c2a <xQueueGenericSend+0x156>
 8015c6e:	bf00      	nop

08015c70 <xQueueCreateMutexStatic>:
	{
 8015c70:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015c72:	2200      	movs	r2, #0
	{
 8015c74:	4604      	mov	r4, r0
 8015c76:	b082      	sub	sp, #8
 8015c78:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015c7a:	2001      	movs	r0, #1
 8015c7c:	4611      	mov	r1, r2
 8015c7e:	9400      	str	r4, [sp, #0]
 8015c80:	f7ff fe9e 	bl	80159c0 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8015c84:	4604      	mov	r4, r0
 8015c86:	b138      	cbz	r0, 8015c98 <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015c88:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015c8e:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015c90:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015c92:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015c94:	f7ff ff1e 	bl	8015ad4 <xQueueGenericSend>
	}
 8015c98:	4620      	mov	r0, r4
 8015c9a:	b002      	add	sp, #8
 8015c9c:	bd10      	pop	{r4, pc}
 8015c9e:	bf00      	nop

08015ca0 <xQueueCreateMutex>:
	{
 8015ca0:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015ca2:	2048      	movs	r0, #72	; 0x48
 8015ca4:	f001 fed0 	bl	8017a48 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015ca8:	4604      	mov	r4, r0
 8015caa:	b188      	cbz	r0, 8015cd0 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015cac:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8015cae:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015cb0:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015cb2:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8015cb6:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015cba:	f7ff fe39 	bl	8015930 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015cbe:	462b      	mov	r3, r5
 8015cc0:	462a      	mov	r2, r5
 8015cc2:	4629      	mov	r1, r5
 8015cc4:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015cc6:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015cc8:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015cca:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015ccc:	f7ff ff02 	bl	8015ad4 <xQueueGenericSend>
	}
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	bd38      	pop	{r3, r4, r5, pc}

08015cd4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	d053      	beq.n	8015d80 <xQueueGenericSendFromISR+0xac>
{
 8015cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cdc:	460e      	mov	r6, r1
 8015cde:	4604      	mov	r4, r0
 8015ce0:	4617      	mov	r7, r2
 8015ce2:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ce4:	b359      	cbz	r1, 8015d3e <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ce6:	2d02      	cmp	r5, #2
 8015ce8:	d10d      	bne.n	8015d06 <xQueueGenericSendFromISR+0x32>
 8015cea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	d00a      	beq.n	8015d06 <xQueueGenericSendFromISR+0x32>
 8015cf0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015cf4:	b672      	cpsid	i
 8015cf6:	f383 8811 	msr	BASEPRI, r3
 8015cfa:	f3bf 8f6f 	isb	sy
 8015cfe:	f3bf 8f4f 	dsb	sy
 8015d02:	b662      	cpsie	i
 8015d04:	e7fe      	b.n	8015d04 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d06:	f001 fe3b 	bl	8017980 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015d0a:	f3ef 8811 	mrs	r8, BASEPRI
 8015d0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015d12:	b672      	cpsid	i
 8015d14:	f383 8811 	msr	BASEPRI, r3
 8015d18:	f3bf 8f6f 	isb	sy
 8015d1c:	f3bf 8f4f 	dsb	sy
 8015d20:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015d22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015d24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015d26:	429a      	cmp	r2, r3
 8015d28:	d317      	bcc.n	8015d5a <xQueueGenericSendFromISR+0x86>
 8015d2a:	f1a5 0002 	sub.w	r0, r5, #2
 8015d2e:	fab0 f080 	clz	r0, r0
 8015d32:	0940      	lsrs	r0, r0, #5
 8015d34:	b988      	cbnz	r0, 8015d5a <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015d36:	f388 8811 	msr	BASEPRI, r8
}
 8015d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d0d0      	beq.n	8015ce6 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8015d44:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015d48:	b672      	cpsid	i
 8015d4a:	f383 8811 	msr	BASEPRI, r3
 8015d4e:	f3bf 8f6f 	isb	sy
 8015d52:	f3bf 8f4f 	dsb	sy
 8015d56:	b662      	cpsie	i
 8015d58:	e7fe      	b.n	8015d58 <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d5a:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8015d5c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d60:	4631      	mov	r1, r6
 8015d62:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8015d64:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d66:	f7ff fd5b 	bl	8015820 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8015d6a:	1c6b      	adds	r3, r5, #1
 8015d6c:	d013      	beq.n	8015d96 <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015d6e:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8015d70:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015d72:	b25b      	sxtb	r3, r3
 8015d74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8015d78:	f388 8811 	msr	BASEPRI, r8
}
 8015d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8015d80:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015d84:	b672      	cpsid	i
 8015d86:	f383 8811 	msr	BASEPRI, r3
 8015d8a:	f3bf 8f6f 	isb	sy
 8015d8e:	f3bf 8f4f 	dsb	sy
 8015d92:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015d94:	e7fe      	b.n	8015d94 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d98:	b90b      	cbnz	r3, 8015d9e <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8015d9a:	2001      	movs	r0, #1
 8015d9c:	e7cb      	b.n	8015d36 <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015da2:	f000 ff39 	bl	8016c18 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8015da6:	2800      	cmp	r0, #0
 8015da8:	d0f7      	beq.n	8015d9a <xQueueGenericSendFromISR+0xc6>
 8015daa:	2f00      	cmp	r7, #0
 8015dac:	d0f5      	beq.n	8015d9a <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015dae:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015db0:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015db2:	603b      	str	r3, [r7, #0]
 8015db4:	e7bf      	b.n	8015d36 <xQueueGenericSendFromISR+0x62>
 8015db6:	bf00      	nop

08015db8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8015db8:	b380      	cbz	r0, 8015e1c <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8015dba:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8015dbc:	b570      	push	{r4, r5, r6, lr}
 8015dbe:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8015dc0:	b153      	cbz	r3, 8015dd8 <xQueueGiveFromISR+0x20>
 8015dc2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015dc6:	b672      	cpsid	i
 8015dc8:	f383 8811 	msr	BASEPRI, r3
 8015dcc:	f3bf 8f6f 	isb	sy
 8015dd0:	f3bf 8f4f 	dsb	sy
 8015dd4:	b662      	cpsie	i
 8015dd6:	e7fe      	b.n	8015dd6 <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015dd8:	6803      	ldr	r3, [r0, #0]
 8015dda:	460d      	mov	r5, r1
 8015ddc:	b34b      	cbz	r3, 8015e32 <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015dde:	f001 fdcf 	bl	8017980 <vPortValidateInterruptPriority>
	__asm volatile
 8015de2:	f3ef 8611 	mrs	r6, BASEPRI
 8015de6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015dea:	b672      	cpsid	i
 8015dec:	f383 8811 	msr	BASEPRI, r3
 8015df0:	f3bf 8f6f 	isb	sy
 8015df4:	f3bf 8f4f 	dsb	sy
 8015df8:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015dfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015dfc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d925      	bls.n	8015e4e <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8015e02:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e06:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8015e08:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e0a:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8015e0c:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8015e0e:	d022      	beq.n	8015e56 <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015e10:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8015e12:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015e14:	b25b      	sxtb	r3, r3
 8015e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015e1a:	e019      	b.n	8015e50 <xQueueGiveFromISR+0x98>
	__asm volatile
 8015e1c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e20:	b672      	cpsid	i
 8015e22:	f383 8811 	msr	BASEPRI, r3
 8015e26:	f3bf 8f6f 	isb	sy
 8015e2a:	f3bf 8f4f 	dsb	sy
 8015e2e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015e30:	e7fe      	b.n	8015e30 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015e32:	6883      	ldr	r3, [r0, #8]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d0d2      	beq.n	8015dde <xQueueGiveFromISR+0x26>
 8015e38:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e3c:	b672      	cpsid	i
 8015e3e:	f383 8811 	msr	BASEPRI, r3
 8015e42:	f3bf 8f6f 	isb	sy
 8015e46:	f3bf 8f4f 	dsb	sy
 8015e4a:	b662      	cpsie	i
 8015e4c:	e7fe      	b.n	8015e4c <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8015e4e:	2000      	movs	r0, #0
	__asm volatile
 8015e50:	f386 8811 	msr	BASEPRI, r6
}
 8015e54:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e58:	b90b      	cbnz	r3, 8015e5e <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8015e5a:	2001      	movs	r0, #1
 8015e5c:	e7f8      	b.n	8015e50 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015e62:	f000 fed9 	bl	8016c18 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8015e66:	2d00      	cmp	r5, #0
 8015e68:	d0f7      	beq.n	8015e5a <xQueueGiveFromISR+0xa2>
 8015e6a:	2800      	cmp	r0, #0
 8015e6c:	d0f5      	beq.n	8015e5a <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015e6e:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015e70:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015e72:	602b      	str	r3, [r5, #0]
 8015e74:	e7ec      	b.n	8015e50 <xQueueGiveFromISR+0x98>
 8015e76:	bf00      	nop

08015e78 <xQueueReceive>:
{
 8015e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e7c:	b085      	sub	sp, #20
 8015e7e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015e80:	2800      	cmp	r0, #0
 8015e82:	f000 80a4 	beq.w	8015fce <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e86:	460d      	mov	r5, r1
 8015e88:	4604      	mov	r4, r0
 8015e8a:	2900      	cmp	r1, #0
 8015e8c:	d047      	beq.n	8015f1e <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015e8e:	f000 ff73 	bl	8016d78 <xTaskGetSchedulerState>
 8015e92:	2800      	cmp	r0, #0
 8015e94:	d051      	beq.n	8015f3a <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 8015e96:	f001 fc6d 	bl	8017774 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e9a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e9c:	2e00      	cmp	r6, #0
 8015e9e:	d16b      	bne.n	8015f78 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ea0:	9b01      	ldr	r3, [sp, #4]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d035      	beq.n	8015f12 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8015ea6:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015ea8:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8015eac:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015eb0:	a802      	add	r0, sp, #8
 8015eb2:	f000 fefd 	bl	8016cb0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8015eb6:	f001 fc83 	bl	80177c0 <vPortExitCritical>
		vTaskSuspendAll();
 8015eba:	f000 fcc1 	bl	8016840 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015ebe:	f001 fc59 	bl	8017774 <vPortEnterCritical>
 8015ec2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015ec6:	2bff      	cmp	r3, #255	; 0xff
 8015ec8:	d101      	bne.n	8015ece <xQueueReceive+0x56>
 8015eca:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8015ece:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015ed2:	2bff      	cmp	r3, #255	; 0xff
 8015ed4:	d101      	bne.n	8015eda <xQueueReceive+0x62>
 8015ed6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015eda:	f001 fc71 	bl	80177c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015ede:	a901      	add	r1, sp, #4
 8015ee0:	a802      	add	r0, sp, #8
 8015ee2:	f000 fef1 	bl	8016cc8 <xTaskCheckForTimeOut>
 8015ee6:	2800      	cmp	r0, #0
 8015ee8:	d135      	bne.n	8015f56 <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 8015eea:	f001 fc43 	bl	8017774 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d056      	beq.n	8015fa2 <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 8015ef4:	f001 fc64 	bl	80177c0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f7ff fcd3 	bl	80158a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015efe:	f000 fdfb 	bl	8016af8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8015f02:	f001 fc37 	bl	8017774 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f06:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f08:	2e00      	cmp	r6, #0
 8015f0a:	d135      	bne.n	8015f78 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015f0c:	9b01      	ldr	r3, [sp, #4]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d1d1      	bne.n	8015eb6 <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8015f12:	f001 fc55 	bl	80177c0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8015f16:	2000      	movs	r0, #0
}
 8015f18:	b005      	add	sp, #20
 8015f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015f1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d0b4      	beq.n	8015e8e <xQueueReceive+0x16>
	__asm volatile
 8015f24:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015f28:	b672      	cpsid	i
 8015f2a:	f383 8811 	msr	BASEPRI, r3
 8015f2e:	f3bf 8f6f 	isb	sy
 8015f32:	f3bf 8f4f 	dsb	sy
 8015f36:	b662      	cpsie	i
 8015f38:	e7fe      	b.n	8015f38 <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f3a:	9b01      	ldr	r3, [sp, #4]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d0aa      	beq.n	8015e96 <xQueueReceive+0x1e>
 8015f40:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015f44:	b672      	cpsid	i
 8015f46:	f383 8811 	msr	BASEPRI, r3
 8015f4a:	f3bf 8f6f 	isb	sy
 8015f4e:	f3bf 8f4f 	dsb	sy
 8015f52:	b662      	cpsie	i
 8015f54:	e7fe      	b.n	8015f54 <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 8015f56:	4620      	mov	r0, r4
 8015f58:	f7ff fca4 	bl	80158a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015f5c:	f000 fdcc 	bl	8016af8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8015f60:	f001 fc08 	bl	8017774 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d0d3      	beq.n	8015f12 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8015f6a:	f001 fc29 	bl	80177c0 <vPortExitCritical>
		taskENTER_CRITICAL();
 8015f6e:	f001 fc01 	bl	8017774 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f72:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f74:	2e00      	cmp	r6, #0
 8015f76:	d0c9      	beq.n	8015f0c <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f78:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015f7a:	b152      	cbz	r2, 8015f92 <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f7c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f7e:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f80:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f82:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f84:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f86:	d301      	bcc.n	8015f8c <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015f88:	6821      	ldr	r1, [r4, #0]
 8015f8a:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015f8c:	4628      	mov	r0, r5
 8015f8e:	f00e fa4b 	bl	8024428 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015f92:	3e01      	subs	r6, #1
 8015f94:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f96:	6923      	ldr	r3, [r4, #16]
 8015f98:	bb23      	cbnz	r3, 8015fe4 <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 8015f9a:	f001 fc11 	bl	80177c0 <vPortExitCritical>
				return pdPASS;
 8015f9e:	2001      	movs	r0, #1
 8015fa0:	e7ba      	b.n	8015f18 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8015fa2:	f001 fc0d 	bl	80177c0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015fa6:	9901      	ldr	r1, [sp, #4]
 8015fa8:	4640      	mov	r0, r8
 8015faa:	f000 fdf9 	bl	8016ba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015fae:	4620      	mov	r0, r4
 8015fb0:	f7ff fc78 	bl	80158a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015fb4:	f000 fda0 	bl	8016af8 <xTaskResumeAll>
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	d1d8      	bne.n	8015f6e <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8015fbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015fc0:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8015fc4:	f3bf 8f4f 	dsb	sy
 8015fc8:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8015fcc:	e7cf      	b.n	8015f6e <xQueueReceive+0xf6>
 8015fce:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015fd2:	b672      	cpsid	i
 8015fd4:	f383 8811 	msr	BASEPRI, r3
 8015fd8:	f3bf 8f6f 	isb	sy
 8015fdc:	f3bf 8f4f 	dsb	sy
 8015fe0:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8015fe2:	e7fe      	b.n	8015fe2 <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015fe4:	f104 0010 	add.w	r0, r4, #16
 8015fe8:	f000 fe16 	bl	8016c18 <xTaskRemoveFromEventList>
 8015fec:	2800      	cmp	r0, #0
 8015fee:	d0d4      	beq.n	8015f9a <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8015ff0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ff8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015ffc:	f3bf 8f4f 	dsb	sy
 8016000:	f3bf 8f6f 	isb	sy
 8016004:	e7c9      	b.n	8015f9a <xQueueReceive+0x122>
 8016006:	bf00      	nop

08016008 <xQueueSemaphoreTake>:
{
 8016008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801600a:	b085      	sub	sp, #20
 801600c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801600e:	2800      	cmp	r0, #0
 8016010:	d057      	beq.n	80160c2 <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 8016012:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8016014:	4604      	mov	r4, r0
 8016016:	b156      	cbz	r6, 801602e <xQueueSemaphoreTake+0x26>
 8016018:	f04f 0330 	mov.w	r3, #48	; 0x30
 801601c:	b672      	cpsid	i
 801601e:	f383 8811 	msr	BASEPRI, r3
 8016022:	f3bf 8f6f 	isb	sy
 8016026:	f3bf 8f4f 	dsb	sy
 801602a:	b662      	cpsie	i
 801602c:	e7fe      	b.n	801602c <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801602e:	f000 fea3 	bl	8016d78 <xTaskGetSchedulerState>
 8016032:	4605      	mov	r5, r0
 8016034:	2800      	cmp	r0, #0
 8016036:	d04f      	beq.n	80160d8 <xQueueSemaphoreTake+0xd0>
 8016038:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 801603a:	f001 fb9b 	bl	8017774 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801603e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8016040:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016042:	bb8b      	cbnz	r3, 80160a8 <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8016044:	9b01      	ldr	r3, [sp, #4]
 8016046:	2b00      	cmp	r3, #0
 8016048:	f000 809f 	beq.w	801618a <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 801604c:	2d00      	cmp	r5, #0
 801604e:	d05d      	beq.n	801610c <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 8016050:	f001 fbb6 	bl	80177c0 <vPortExitCritical>
		vTaskSuspendAll();
 8016054:	f000 fbf4 	bl	8016840 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016058:	f001 fb8c 	bl	8017774 <vPortEnterCritical>
 801605c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016060:	2bff      	cmp	r3, #255	; 0xff
 8016062:	d101      	bne.n	8016068 <xQueueSemaphoreTake+0x60>
 8016064:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8016068:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801606c:	2bff      	cmp	r3, #255	; 0xff
 801606e:	d101      	bne.n	8016074 <xQueueSemaphoreTake+0x6c>
 8016070:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016074:	f001 fba4 	bl	80177c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016078:	a901      	add	r1, sp, #4
 801607a:	a802      	add	r0, sp, #8
 801607c:	f000 fe24 	bl	8016cc8 <xTaskCheckForTimeOut>
 8016080:	2800      	cmp	r0, #0
 8016082:	d137      	bne.n	80160f4 <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 8016084:	f001 fb76 	bl	8017774 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801608a:	2b00      	cmp	r3, #0
 801608c:	d042      	beq.n	8016114 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 801608e:	f001 fb97 	bl	80177c0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8016092:	4620      	mov	r0, r4
 8016094:	f7ff fc06 	bl	80158a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016098:	f000 fd2e 	bl	8016af8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801609c:	f001 fb6a 	bl	8017774 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80160a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80160a2:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d0cd      	beq.n	8016044 <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80160a8:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80160aa:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80160ac:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80160ae:	2a00      	cmp	r2, #0
 80160b0:	f000 8089 	beq.w	80161c6 <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80160b4:	6923      	ldr	r3, [r4, #16]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d174      	bne.n	80161a4 <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 80160ba:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 80160bc:	f001 fb80 	bl	80177c0 <vPortExitCritical>
				return pdPASS;
 80160c0:	e046      	b.n	8016150 <xQueueSemaphoreTake+0x148>
 80160c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80160c6:	b672      	cpsid	i
 80160c8:	f383 8811 	msr	BASEPRI, r3
 80160cc:	f3bf 8f6f 	isb	sy
 80160d0:	f3bf 8f4f 	dsb	sy
 80160d4:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 80160d6:	e7fe      	b.n	80160d6 <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80160d8:	9b01      	ldr	r3, [sp, #4]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d03b      	beq.n	8016156 <xQueueSemaphoreTake+0x14e>
 80160de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80160e2:	b672      	cpsid	i
 80160e4:	f383 8811 	msr	BASEPRI, r3
 80160e8:	f3bf 8f6f 	isb	sy
 80160ec:	f3bf 8f4f 	dsb	sy
 80160f0:	b662      	cpsie	i
 80160f2:	e7fe      	b.n	80160f2 <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 80160f4:	4620      	mov	r0, r4
 80160f6:	f7ff fbd5 	bl	80158a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80160fa:	f000 fcfd 	bl	8016af8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80160fe:	f001 fb39 	bl	8017774 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016104:	b30b      	cbz	r3, 801614a <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 8016106:	f001 fb5b 	bl	80177c0 <vPortExitCritical>
	return xReturn;
 801610a:	e7c7      	b.n	801609c <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801610c:	a802      	add	r0, sp, #8
 801610e:	f000 fdcf 	bl	8016cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016112:	e79d      	b.n	8016050 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 8016114:	f001 fb54 	bl	80177c0 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016118:	6823      	ldr	r3, [r4, #0]
 801611a:	b36b      	cbz	r3, 8016178 <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801611c:	9901      	ldr	r1, [sp, #4]
 801611e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016122:	f000 fd3d 	bl	8016ba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016126:	4620      	mov	r0, r4
 8016128:	f7ff fbbc 	bl	80158a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801612c:	f000 fce4 	bl	8016af8 <xTaskResumeAll>
 8016130:	2800      	cmp	r0, #0
 8016132:	d1b3      	bne.n	801609c <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 8016134:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801613c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016140:	f3bf 8f4f 	dsb	sy
 8016144:	f3bf 8f6f 	isb	sy
 8016148:	e7a8      	b.n	801609c <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 801614a:	f001 fb39 	bl	80177c0 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 801614e:	b926      	cbnz	r6, 801615a <xQueueSemaphoreTake+0x152>
}
 8016150:	4630      	mov	r0, r6
 8016152:	b005      	add	sp, #20
 8016154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016156:	4606      	mov	r6, r0
 8016158:	e76f      	b.n	801603a <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 801615a:	f001 fb0b 	bl	8017774 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801615e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016160:	b119      	cbz	r1, 801616a <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016162:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016164:	6819      	ldr	r1, [r3, #0]
 8016166:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801616a:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 801616c:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801616e:	f000 fecb 	bl	8016f08 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8016172:	f001 fb25 	bl	80177c0 <vPortExitCritical>
 8016176:	e7eb      	b.n	8016150 <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 8016178:	f001 fafc 	bl	8017774 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801617c:	68a0      	ldr	r0, [r4, #8]
 801617e:	f000 fe0b 	bl	8016d98 <xTaskPriorityInherit>
 8016182:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8016184:	f001 fb1c 	bl	80177c0 <vPortExitCritical>
 8016188:	e7c8      	b.n	801611c <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 801618a:	2e00      	cmp	r6, #0
 801618c:	d0f1      	beq.n	8016172 <xQueueSemaphoreTake+0x16a>
 801618e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016192:	b672      	cpsid	i
 8016194:	f383 8811 	msr	BASEPRI, r3
 8016198:	f3bf 8f6f 	isb	sy
 801619c:	f3bf 8f4f 	dsb	sy
 80161a0:	b662      	cpsie	i
 80161a2:	e7fe      	b.n	80161a2 <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161a4:	f104 0010 	add.w	r0, r4, #16
 80161a8:	f000 fd36 	bl	8016c18 <xTaskRemoveFromEventList>
 80161ac:	2800      	cmp	r0, #0
 80161ae:	d084      	beq.n	80160ba <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 80161b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80161b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80161bc:	f3bf 8f4f 	dsb	sy
 80161c0:	f3bf 8f6f 	isb	sy
 80161c4:	e779      	b.n	80160ba <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80161c6:	f000 ff0d 	bl	8016fe4 <pvTaskIncrementMutexHeldCount>
 80161ca:	60a0      	str	r0, [r4, #8]
 80161cc:	e772      	b.n	80160b4 <xQueueSemaphoreTake+0xac>
 80161ce:	bf00      	nop

080161d0 <xQueueReceiveFromISR>:
{
 80161d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80161d4:	b330      	cbz	r0, 8016224 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80161d6:	460e      	mov	r6, r1
 80161d8:	4604      	mov	r4, r0
 80161da:	4617      	mov	r7, r2
 80161dc:	b1a1      	cbz	r1, 8016208 <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80161de:	f001 fbcf 	bl	8017980 <vPortValidateInterruptPriority>
	__asm volatile
 80161e2:	f3ef 8911 	mrs	r9, BASEPRI
 80161e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80161ea:	b672      	cpsid	i
 80161ec:	f383 8811 	msr	BASEPRI, r3
 80161f0:	f3bf 8f6f 	isb	sy
 80161f4:	f3bf 8f4f 	dsb	sy
 80161f8:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80161fa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80161fc:	b9ed      	cbnz	r5, 801623a <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 80161fe:	4628      	mov	r0, r5
	__asm volatile
 8016200:	f389 8811 	msr	BASEPRI, r9
}
 8016204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016208:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801620a:	2b00      	cmp	r3, #0
 801620c:	d0e7      	beq.n	80161de <xQueueReceiveFromISR+0xe>
	__asm volatile
 801620e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016212:	b672      	cpsid	i
 8016214:	f383 8811 	msr	BASEPRI, r3
 8016218:	f3bf 8f6f 	isb	sy
 801621c:	f3bf 8f4f 	dsb	sy
 8016220:	b662      	cpsie	i
 8016222:	e7fe      	b.n	8016222 <xQueueReceiveFromISR+0x52>
 8016224:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016228:	b672      	cpsid	i
 801622a:	f383 8811 	msr	BASEPRI, r3
 801622e:	f3bf 8f6f 	isb	sy
 8016232:	f3bf 8f4f 	dsb	sy
 8016236:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016238:	e7fe      	b.n	8016238 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 801623a:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801623e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8016240:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016244:	b142      	cbz	r2, 8016258 <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016246:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016248:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801624a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801624c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801624e:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016250:	d215      	bcs.n	801627e <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016252:	4630      	mov	r0, r6
 8016254:	f00e f8e8 	bl	8024428 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016258:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 801625a:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801625e:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8016260:	d009      	beq.n	8016276 <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016262:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8016266:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016268:	b25b      	sxtb	r3, r3
 801626a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 801626e:	f389 8811 	msr	BASEPRI, r9
}
 8016272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016276:	6923      	ldr	r3, [r4, #16]
 8016278:	b923      	cbnz	r3, 8016284 <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 801627a:	2001      	movs	r0, #1
 801627c:	e7c0      	b.n	8016200 <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801627e:	6821      	ldr	r1, [r4, #0]
 8016280:	60e1      	str	r1, [r4, #12]
 8016282:	e7e6      	b.n	8016252 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016284:	f104 0010 	add.w	r0, r4, #16
 8016288:	f000 fcc6 	bl	8016c18 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 801628c:	2f00      	cmp	r7, #0
 801628e:	d0f4      	beq.n	801627a <xQueueReceiveFromISR+0xaa>
 8016290:	2800      	cmp	r0, #0
 8016292:	d0f2      	beq.n	801627a <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016294:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8016296:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016298:	603b      	str	r3, [r7, #0]
 801629a:	e7b1      	b.n	8016200 <xQueueReceiveFromISR+0x30>

0801629c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801629c:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801629e:	2300      	movs	r3, #0
 80162a0:	4c08      	ldr	r4, [pc, #32]	; (80162c4 <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80162a2:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 80162a6:	b12a      	cbz	r2, 80162b4 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80162a8:	3301      	adds	r3, #1
 80162aa:	2b08      	cmp	r3, #8
 80162ac:	d1f9      	bne.n	80162a2 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80162ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162b2:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 80162b4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80162b8:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 80162bc:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 80162c0:	6050      	str	r0, [r2, #4]
	}
 80162c2:	4770      	bx	lr
 80162c4:	20006308 	.word	0x20006308

080162c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80162c8:	b570      	push	{r4, r5, r6, lr}
 80162ca:	4604      	mov	r4, r0
 80162cc:	460e      	mov	r6, r1
 80162ce:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80162d0:	f001 fa50 	bl	8017774 <vPortEnterCritical>
 80162d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80162d8:	2bff      	cmp	r3, #255	; 0xff
 80162da:	d102      	bne.n	80162e2 <vQueueWaitForMessageRestricted+0x1a>
 80162dc:	2300      	movs	r3, #0
 80162de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80162e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80162e6:	2bff      	cmp	r3, #255	; 0xff
 80162e8:	d102      	bne.n	80162f0 <vQueueWaitForMessageRestricted+0x28>
 80162ea:	2300      	movs	r3, #0
 80162ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80162f0:	f001 fa66 	bl	80177c0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80162f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80162f6:	b123      	cbz	r3, 8016302 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80162f8:	4620      	mov	r0, r4
	}
 80162fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80162fe:	f7ff bad1 	b.w	80158a4 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016302:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016306:	462a      	mov	r2, r5
 8016308:	4631      	mov	r1, r6
 801630a:	f000 fc65 	bl	8016bd8 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 801630e:	4620      	mov	r0, r4
	}
 8016310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8016314:	f7ff bac6 	b.w	80158a4 <prvUnlockQueue>

08016318 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801631c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801631e:	f001 fa29 	bl	8017774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016322:	4a35      	ldr	r2, [pc, #212]	; (80163f8 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8016324:	4d35      	ldr	r5, [pc, #212]	; (80163fc <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8016326:	6813      	ldr	r3, [r2, #0]
 8016328:	3301      	adds	r3, #1
 801632a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801632c:	682b      	ldr	r3, [r5, #0]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d034      	beq.n	801639c <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016332:	4e33      	ldr	r6, [pc, #204]	; (8016400 <prvAddNewTaskToReadyList+0xe8>)
 8016334:	6833      	ldr	r3, [r6, #0]
 8016336:	b343      	cbz	r3, 801638a <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016338:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801633a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8016424 <prvAddNewTaskToReadyList+0x10c>
 801633e:	2201      	movs	r2, #1
		uxTaskNumber++;
 8016340:	4f30      	ldr	r7, [pc, #192]	; (8016404 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8016342:	4931      	ldr	r1, [pc, #196]	; (8016408 <prvAddNewTaskToReadyList+0xf0>)
 8016344:	409a      	lsls	r2, r3
 8016346:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801634a:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	3301      	adds	r3, #1
 8016352:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8016354:	680b      	ldr	r3, [r1, #0]
 8016356:	431a      	orrs	r2, r3
 8016358:	600a      	str	r2, [r1, #0]
 801635a:	1d21      	adds	r1, r4, #4
 801635c:	f7ff fa24 	bl	80157a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016360:	f001 fa2e 	bl	80177c0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016364:	6833      	ldr	r3, [r6, #0]
 8016366:	b173      	cbz	r3, 8016386 <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016368:	682a      	ldr	r2, [r5, #0]
 801636a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801636c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801636e:	429a      	cmp	r2, r3
 8016370:	d209      	bcs.n	8016386 <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016372:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801637a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801637e:	f3bf 8f4f 	dsb	sy
 8016382:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801638a:	682a      	ldr	r2, [r5, #0]
 801638c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801638e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016390:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8016424 <prvAddNewTaskToReadyList+0x10c>
 8016394:	429a      	cmp	r2, r3
 8016396:	d8d2      	bhi.n	801633e <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8016398:	602c      	str	r4, [r5, #0]
 801639a:	e7d0      	b.n	801633e <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 801639c:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801639e:	6813      	ldr	r3, [r2, #0]
 80163a0:	2b01      	cmp	r3, #1
 80163a2:	d004      	beq.n	80163ae <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 80163a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80163a6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8016424 <prvAddNewTaskToReadyList+0x10c>
 80163aa:	4e15      	ldr	r6, [pc, #84]	; (8016400 <prvAddNewTaskToReadyList+0xe8>)
 80163ac:	e7c7      	b.n	801633e <prvAddNewTaskToReadyList+0x26>
 80163ae:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8016424 <prvAddNewTaskToReadyList+0x10c>
 80163b2:	4646      	mov	r6, r8
 80163b4:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80163b8:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80163ba:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80163bc:	f7ff f9e4 	bl	8015788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80163c0:	42b7      	cmp	r7, r6
 80163c2:	d1f9      	bne.n	80163b8 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 80163c4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8016428 <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 80163c8:	4f10      	ldr	r7, [pc, #64]	; (801640c <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 80163ca:	4648      	mov	r0, r9
 80163cc:	4e0c      	ldr	r6, [pc, #48]	; (8016400 <prvAddNewTaskToReadyList+0xe8>)
 80163ce:	f7ff f9db 	bl	8015788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80163d2:	4638      	mov	r0, r7
 80163d4:	f7ff f9d8 	bl	8015788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80163d8:	480d      	ldr	r0, [pc, #52]	; (8016410 <prvAddNewTaskToReadyList+0xf8>)
 80163da:	f7ff f9d5 	bl	8015788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80163de:	480d      	ldr	r0, [pc, #52]	; (8016414 <prvAddNewTaskToReadyList+0xfc>)
 80163e0:	f7ff f9d2 	bl	8015788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80163e4:	480c      	ldr	r0, [pc, #48]	; (8016418 <prvAddNewTaskToReadyList+0x100>)
 80163e6:	f7ff f9cf 	bl	8015788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80163ea:	4b0c      	ldr	r3, [pc, #48]	; (801641c <prvAddNewTaskToReadyList+0x104>)
 80163ec:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80163f0:	4b0b      	ldr	r3, [pc, #44]	; (8016420 <prvAddNewTaskToReadyList+0x108>)
 80163f2:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80163f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 80163f6:	e7a2      	b.n	801633e <prvAddNewTaskToReadyList+0x26>
 80163f8:	200063e0 	.word	0x200063e0
 80163fc:	20006348 	.word	0x20006348
 8016400:	2000643c 	.word	0x2000643c
 8016404:	200063f0 	.word	0x200063f0
 8016408:	200063f4 	.word	0x200063f4
 801640c:	2000640c 	.word	0x2000640c
 8016410:	20006428 	.word	0x20006428
 8016414:	20006454 	.word	0x20006454
 8016418:	20006440 	.word	0x20006440
 801641c:	2000634c 	.word	0x2000634c
 8016420:	20006350 	.word	0x20006350
 8016424:	20006354 	.word	0x20006354
 8016428:	200063f8 	.word	0x200063f8

0801642c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801642e:	4b1b      	ldr	r3, [pc, #108]	; (801649c <prvAddCurrentTaskToDelayedList+0x70>)
{
 8016430:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016432:	4e1b      	ldr	r6, [pc, #108]	; (80164a0 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8016434:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8016436:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016438:	6833      	ldr	r3, [r6, #0]
 801643a:	1d18      	adds	r0, r3, #4
 801643c:	f7ff f9dc 	bl	80157f8 <uxListRemove>
 8016440:	b948      	cbnz	r0, 8016456 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016442:	6833      	ldr	r3, [r6, #0]
 8016444:	4917      	ldr	r1, [pc, #92]	; (80164a4 <prvAddCurrentTaskToDelayedList+0x78>)
 8016446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016448:	2301      	movs	r3, #1
 801644a:	fa03 f202 	lsl.w	r2, r3, r2
 801644e:	680b      	ldr	r3, [r1, #0]
 8016450:	ea23 0302 	bic.w	r3, r3, r2
 8016454:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016456:	1c63      	adds	r3, r4, #1
 8016458:	d100      	bne.n	801645c <prvAddCurrentTaskToDelayedList+0x30>
 801645a:	b9bf      	cbnz	r7, 801648c <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 801645c:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801645e:	6833      	ldr	r3, [r6, #0]
 8016460:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8016462:	d307      	bcc.n	8016474 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016464:	4b10      	ldr	r3, [pc, #64]	; (80164a8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8016466:	6818      	ldr	r0, [r3, #0]
 8016468:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801646a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801646e:	3104      	adds	r1, #4
 8016470:	f7ff b9aa 	b.w	80157c8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016474:	4b0d      	ldr	r3, [pc, #52]	; (80164ac <prvAddCurrentTaskToDelayedList+0x80>)
 8016476:	6818      	ldr	r0, [r3, #0]
 8016478:	6831      	ldr	r1, [r6, #0]
 801647a:	3104      	adds	r1, #4
 801647c:	f7ff f9a4 	bl	80157c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016480:	4b0b      	ldr	r3, [pc, #44]	; (80164b0 <prvAddCurrentTaskToDelayedList+0x84>)
 8016482:	681a      	ldr	r2, [r3, #0]
 8016484:	42a2      	cmp	r2, r4
 8016486:	d900      	bls.n	801648a <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8016488:	601c      	str	r4, [r3, #0]
}
 801648a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801648c:	6831      	ldr	r1, [r6, #0]
 801648e:	4809      	ldr	r0, [pc, #36]	; (80164b4 <prvAddCurrentTaskToDelayedList+0x88>)
 8016490:	3104      	adds	r1, #4
}
 8016492:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016496:	f7ff b987 	b.w	80157a8 <vListInsertEnd>
 801649a:	bf00      	nop
 801649c:	20006468 	.word	0x20006468
 80164a0:	20006348 	.word	0x20006348
 80164a4:	200063f4 	.word	0x200063f4
 80164a8:	20006350 	.word	0x20006350
 80164ac:	2000634c 	.word	0x2000634c
 80164b0:	20006420 	.word	0x20006420
 80164b4:	20006440 	.word	0x20006440

080164b8 <prvDeleteTCB>:
	{
 80164b8:	b510      	push	{r4, lr}
 80164ba:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80164bc:	304c      	adds	r0, #76	; 0x4c
 80164be:	f00f f869 	bl	8025594 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80164c2:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 80164c6:	b173      	cbz	r3, 80164e6 <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80164c8:	2b01      	cmp	r3, #1
 80164ca:	d015      	beq.n	80164f8 <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80164cc:	2b02      	cmp	r3, #2
 80164ce:	d012      	beq.n	80164f6 <prvDeleteTCB+0x3e>
	__asm volatile
 80164d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80164d4:	b672      	cpsid	i
 80164d6:	f383 8811 	msr	BASEPRI, r3
 80164da:	f3bf 8f6f 	isb	sy
 80164de:	f3bf 8f4f 	dsb	sy
 80164e2:	b662      	cpsie	i
 80164e4:	e7fe      	b.n	80164e4 <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 80164e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80164e8:	f001 fb4a 	bl	8017b80 <vPortFree>
				vPortFree( pxTCB );
 80164ec:	4620      	mov	r0, r4
	}
 80164ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80164f2:	f001 bb45 	b.w	8017b80 <vPortFree>
	}
 80164f6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80164f8:	4620      	mov	r0, r4
	}
 80164fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80164fe:	f001 bb3f 	b.w	8017b80 <vPortFree>
 8016502:	bf00      	nop

08016504 <prvIdleTask>:
{
 8016504:	4c16      	ldr	r4, [pc, #88]	; (8016560 <prvIdleTask+0x5c>)
				taskYIELD();
 8016506:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 801650a:	4e16      	ldr	r6, [pc, #88]	; (8016564 <prvIdleTask+0x60>)
 801650c:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8016510:	4d15      	ldr	r5, [pc, #84]	; (8016568 <prvIdleTask+0x64>)
 8016512:	f8df a058 	ldr.w	sl, [pc, #88]	; 801656c <prvIdleTask+0x68>
{
 8016516:	b580      	push	{r7, lr}
 8016518:	e011      	b.n	801653e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 801651a:	f001 f92b 	bl	8017774 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801651e:	68f3      	ldr	r3, [r6, #12]
 8016520:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016522:	1d38      	adds	r0, r7, #4
 8016524:	f7ff f968 	bl	80157f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016528:	682b      	ldr	r3, [r5, #0]
 801652a:	3b01      	subs	r3, #1
 801652c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 801652e:	6823      	ldr	r3, [r4, #0]
 8016530:	3b01      	subs	r3, #1
 8016532:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8016534:	f001 f944 	bl	80177c0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8016538:	4638      	mov	r0, r7
 801653a:	f7ff ffbd 	bl	80164b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801653e:	6823      	ldr	r3, [r4, #0]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d1ea      	bne.n	801651a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016544:	f8da 3000 	ldr.w	r3, [sl]
 8016548:	2b01      	cmp	r3, #1
 801654a:	d905      	bls.n	8016558 <prvIdleTask+0x54>
				taskYIELD();
 801654c:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8016550:	f3bf 8f4f 	dsb	sy
 8016554:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8016558:	f7ea fe6c 	bl	8001234 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801655c:	e7ef      	b.n	801653e <prvIdleTask+0x3a>
 801655e:	bf00      	nop
 8016560:	200063e4 	.word	0x200063e4
 8016564:	20006454 	.word	0x20006454
 8016568:	200063e0 	.word	0x200063e0
 801656c:	20006354 	.word	0x20006354

08016570 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 8016570:	4b1d      	ldr	r3, [pc, #116]	; (80165e8 <vTaskSwitchContext.part.0+0x78>)
 8016572:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 8016574:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 8016576:	4c1d      	ldr	r4, [pc, #116]	; (80165ec <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 8016578:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801657a:	6822      	ldr	r2, [r4, #0]
 801657c:	6823      	ldr	r3, [r4, #0]
 801657e:	6812      	ldr	r2, [r2, #0]
 8016580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016582:	429a      	cmp	r2, r3
 8016584:	d927      	bls.n	80165d6 <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016586:	4b1a      	ldr	r3, [pc, #104]	; (80165f0 <vTaskSwitchContext.part.0+0x80>)
 8016588:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801658a:	fab3 f383 	clz	r3, r3
 801658e:	b2db      	uxtb	r3, r3
 8016590:	4a18      	ldr	r2, [pc, #96]	; (80165f4 <vTaskSwitchContext.part.0+0x84>)
 8016592:	f1c3 031f 	rsb	r3, r3, #31
 8016596:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801659a:	0099      	lsls	r1, r3, #2
 801659c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80165a0:	5850      	ldr	r0, [r2, r1]
 80165a2:	b950      	cbnz	r0, 80165ba <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 80165a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80165a8:	b672      	cpsid	i
 80165aa:	f383 8811 	msr	BASEPRI, r3
 80165ae:	f3bf 8f6f 	isb	sy
 80165b2:	f3bf 8f4f 	dsb	sy
 80165b6:	b662      	cpsie	i
 80165b8:	e7fe      	b.n	80165b8 <vTaskSwitchContext.part.0+0x48>
 80165ba:	6858      	ldr	r0, [r3, #4]
 80165bc:	3108      	adds	r1, #8
 80165be:	6840      	ldr	r0, [r0, #4]
 80165c0:	440a      	add	r2, r1
 80165c2:	4290      	cmp	r0, r2
 80165c4:	6058      	str	r0, [r3, #4]
 80165c6:	d00c      	beq.n	80165e2 <vTaskSwitchContext.part.0+0x72>
 80165c8:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80165ca:	4a0b      	ldr	r2, [pc, #44]	; (80165f8 <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165cc:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80165ce:	6823      	ldr	r3, [r4, #0]
 80165d0:	334c      	adds	r3, #76	; 0x4c
 80165d2:	6013      	str	r3, [r2, #0]
}
 80165d4:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 80165d6:	6820      	ldr	r0, [r4, #0]
 80165d8:	6821      	ldr	r1, [r4, #0]
 80165da:	3134      	adds	r1, #52	; 0x34
 80165dc:	f7ea fe2c 	bl	8001238 <vApplicationStackOverflowHook>
 80165e0:	e7d1      	b.n	8016586 <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165e2:	6840      	ldr	r0, [r0, #4]
 80165e4:	6058      	str	r0, [r3, #4]
 80165e6:	e7ef      	b.n	80165c8 <vTaskSwitchContext.part.0+0x58>
 80165e8:	2000646c 	.word	0x2000646c
 80165ec:	20006348 	.word	0x20006348
 80165f0:	200063f4 	.word	0x200063f4
 80165f4:	20006354 	.word	0x20006354
 80165f8:	20000490 	.word	0x20000490

080165fc <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80165fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016600:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016602:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016604:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8016608:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801660a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801660c:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801660e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016612:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016616:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 801661a:	2900      	cmp	r1, #0
 801661c:	d041      	beq.n	80166a2 <prvInitialiseNewTask.constprop.0+0xa6>
 801661e:	f101 3cff 	add.w	ip, r1, #4294967295
 8016622:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8016626:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016628:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 801662c:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8016630:	b10d      	cbz	r5, 8016636 <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016632:	458c      	cmp	ip, r1
 8016634:	d1f8      	bne.n	8016628 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016636:	2300      	movs	r3, #0
 8016638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801663c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 801663e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016642:	1d20      	adds	r0, r4, #4
 8016644:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8016646:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 801664a:	bf28      	it	cs
 801664c:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 801664e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8016650:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016652:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016656:	f7ff f8a3 	bl	80157a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801665a:	f104 0018 	add.w	r0, r4, #24
 801665e:	f7ff f89f 	bl	80157a0 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016662:	4651      	mov	r1, sl
 8016664:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 8016666:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801666a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801666e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016670:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016672:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016674:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016678:	f00d fefe 	bl	8024478 <memset>
 801667c:	4b0a      	ldr	r3, [pc, #40]	; (80166a8 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801667e:	464a      	mov	r2, r9
 8016680:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016682:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016684:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016686:	4b09      	ldr	r3, [pc, #36]	; (80166ac <prvInitialiseNewTask.constprop.0+0xb0>)
 8016688:	6563      	str	r3, [r4, #84]	; 0x54
 801668a:	4b09      	ldr	r3, [pc, #36]	; (80166b0 <prvInitialiseNewTask.constprop.0+0xb4>)
 801668c:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801668e:	f001 f847 	bl	8017720 <pxPortInitialiseStack>
 8016692:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8016694:	f1b8 0f00 	cmp.w	r8, #0
 8016698:	d001      	beq.n	801669e <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801669a:	f8c8 4000 	str.w	r4, [r8]
}
 801669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80166a2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80166a6:	e7c9      	b.n	801663c <prvInitialiseNewTask.constprop.0+0x40>
 80166a8:	08045d24 	.word	0x08045d24
 80166ac:	08045d44 	.word	0x08045d44
 80166b0:	08045d04 	.word	0x08045d04

080166b4 <xTaskCreateStatic>:
	{
 80166b4:	b530      	push	{r4, r5, lr}
 80166b6:	b087      	sub	sp, #28
 80166b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80166ba:	b1e4      	cbz	r4, 80166f6 <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 80166bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80166be:	b17d      	cbz	r5, 80166e0 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 80166c0:	25b4      	movs	r5, #180	; 0xb4
 80166c2:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80166c4:	9d05      	ldr	r5, [sp, #20]
 80166c6:	2db4      	cmp	r5, #180	; 0xb4
 80166c8:	d020      	beq.n	801670c <xTaskCreateStatic+0x58>
 80166ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166ce:	b672      	cpsid	i
 80166d0:	f383 8811 	msr	BASEPRI, r3
 80166d4:	f3bf 8f6f 	isb	sy
 80166d8:	f3bf 8f4f 	dsb	sy
 80166dc:	b662      	cpsie	i
 80166de:	e7fe      	b.n	80166de <xTaskCreateStatic+0x2a>
 80166e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166e4:	b672      	cpsid	i
 80166e6:	f383 8811 	msr	BASEPRI, r3
 80166ea:	f3bf 8f6f 	isb	sy
 80166ee:	f3bf 8f4f 	dsb	sy
 80166f2:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 80166f4:	e7fe      	b.n	80166f4 <xTaskCreateStatic+0x40>
 80166f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166fa:	b672      	cpsid	i
 80166fc:	f383 8811 	msr	BASEPRI, r3
 8016700:	f3bf 8f6f 	isb	sy
 8016704:	f3bf 8f4f 	dsb	sy
 8016708:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 801670a:	e7fe      	b.n	801670a <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801670c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801670e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016710:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016712:	9502      	str	r5, [sp, #8]
 8016714:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016716:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016718:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801671a:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801671e:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016720:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016722:	9401      	str	r4, [sp, #4]
 8016724:	f7ff ff6a 	bl	80165fc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016728:	980c      	ldr	r0, [sp, #48]	; 0x30
 801672a:	f7ff fdf5 	bl	8016318 <prvAddNewTaskToReadyList>
	}
 801672e:	9804      	ldr	r0, [sp, #16]
 8016730:	b007      	add	sp, #28
 8016732:	bd30      	pop	{r4, r5, pc}

08016734 <xTaskCreate>:
	{
 8016734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016738:	4607      	mov	r7, r0
 801673a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801673c:	0090      	lsls	r0, r2, #2
	{
 801673e:	4615      	mov	r5, r2
 8016740:	4688      	mov	r8, r1
 8016742:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016744:	f001 f980 	bl	8017a48 <pvPortMalloc>
			if( pxStack != NULL )
 8016748:	b1d8      	cbz	r0, 8016782 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801674a:	4604      	mov	r4, r0
 801674c:	20b4      	movs	r0, #180	; 0xb4
 801674e:	f001 f97b 	bl	8017a48 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8016752:	4606      	mov	r6, r0
 8016754:	b1d0      	cbz	r0, 801678c <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8016756:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016758:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801675a:	464b      	mov	r3, r9
 801675c:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801675e:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016762:	4641      	mov	r1, r8
 8016764:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016766:	4638      	mov	r0, r7
 8016768:	9602      	str	r6, [sp, #8]
 801676a:	9401      	str	r4, [sp, #4]
 801676c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801676e:	9400      	str	r4, [sp, #0]
 8016770:	f7ff ff44 	bl	80165fc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016774:	4630      	mov	r0, r6
 8016776:	f7ff fdcf 	bl	8016318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801677a:	2001      	movs	r0, #1
	}
 801677c:	b005      	add	sp, #20
 801677e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016782:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8016786:	b005      	add	sp, #20
 8016788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 801678c:	4620      	mov	r0, r4
 801678e:	f001 f9f7 	bl	8017b80 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016792:	f04f 30ff 	mov.w	r0, #4294967295
 8016796:	e7f1      	b.n	801677c <xTaskCreate+0x48>

08016798 <vTaskStartScheduler>:
{
 8016798:	b510      	push	{r4, lr}
 801679a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801679c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801679e:	aa07      	add	r2, sp, #28
 80167a0:	a906      	add	r1, sp, #24
 80167a2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80167a4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80167a8:	f7ea fd4a 	bl	8001240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80167ac:	4623      	mov	r3, r4
 80167ae:	9a07      	ldr	r2, [sp, #28]
 80167b0:	9400      	str	r4, [sp, #0]
 80167b2:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80167b6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80167ba:	491a      	ldr	r1, [pc, #104]	; (8016824 <vTaskStartScheduler+0x8c>)
 80167bc:	481a      	ldr	r0, [pc, #104]	; (8016828 <vTaskStartScheduler+0x90>)
 80167be:	f7ff ff79 	bl	80166b4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80167c2:	b1f8      	cbz	r0, 8016804 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 80167c4:	f000 fcfa 	bl	80171bc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80167c8:	2801      	cmp	r0, #1
 80167ca:	d11d      	bne.n	8016808 <vTaskStartScheduler+0x70>
 80167cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80167d0:	b672      	cpsid	i
 80167d2:	f383 8811 	msr	BASEPRI, r3
 80167d6:	f3bf 8f6f 	isb	sy
 80167da:	f3bf 8f4f 	dsb	sy
 80167de:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80167e0:	4b12      	ldr	r3, [pc, #72]	; (801682c <vTaskStartScheduler+0x94>)
 80167e2:	4a13      	ldr	r2, [pc, #76]	; (8016830 <vTaskStartScheduler+0x98>)
 80167e4:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80167e6:	4913      	ldr	r1, [pc, #76]	; (8016834 <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80167e8:	334c      	adds	r3, #76	; 0x4c
 80167ea:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80167ec:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 80167f0:	4a11      	ldr	r2, [pc, #68]	; (8016838 <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80167f2:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80167f4:	4b11      	ldr	r3, [pc, #68]	; (801683c <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 80167f6:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80167f8:	601c      	str	r4, [r3, #0]
}
 80167fa:	b008      	add	sp, #32
 80167fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8016800:	f001 b854 	b.w	80178ac <xPortStartScheduler>
}
 8016804:	b008      	add	sp, #32
 8016806:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016808:	3001      	adds	r0, #1
 801680a:	d1fb      	bne.n	8016804 <vTaskStartScheduler+0x6c>
 801680c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016810:	b672      	cpsid	i
 8016812:	f383 8811 	msr	BASEPRI, r3
 8016816:	f3bf 8f6f 	isb	sy
 801681a:	f3bf 8f4f 	dsb	sy
 801681e:	b662      	cpsie	i
 8016820:	e7fe      	b.n	8016820 <vTaskStartScheduler+0x88>
 8016822:	bf00      	nop
 8016824:	0802cd90 	.word	0x0802cd90
 8016828:	08016505 	.word	0x08016505
 801682c:	20006348 	.word	0x20006348
 8016830:	20000490 	.word	0x20000490
 8016834:	20006420 	.word	0x20006420
 8016838:	2000643c 	.word	0x2000643c
 801683c:	20006468 	.word	0x20006468

08016840 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8016840:	4a02      	ldr	r2, [pc, #8]	; (801684c <vTaskSuspendAll+0xc>)
 8016842:	6813      	ldr	r3, [r2, #0]
 8016844:	3301      	adds	r3, #1
 8016846:	6013      	str	r3, [r2, #0]
}
 8016848:	4770      	bx	lr
 801684a:	bf00      	nop
 801684c:	200063ec 	.word	0x200063ec

08016850 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8016850:	4b01      	ldr	r3, [pc, #4]	; (8016858 <xTaskGetTickCount+0x8>)
 8016852:	6818      	ldr	r0, [r3, #0]
}
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop
 8016858:	20006468 	.word	0x20006468

0801685c <xTaskGetTickCountFromISR>:
{
 801685c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801685e:	f001 f88f 	bl	8017980 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8016862:	4b01      	ldr	r3, [pc, #4]	; (8016868 <xTaskGetTickCountFromISR+0xc>)
 8016864:	6818      	ldr	r0, [r3, #0]
}
 8016866:	bd08      	pop	{r3, pc}
 8016868:	20006468 	.word	0x20006468

0801686c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801686c:	4b52      	ldr	r3, [pc, #328]	; (80169b8 <xTaskIncrementTick+0x14c>)
 801686e:	681b      	ldr	r3, [r3, #0]
{
 8016870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016874:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016876:	2b00      	cmp	r3, #0
 8016878:	d14c      	bne.n	8016914 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801687a:	4b50      	ldr	r3, [pc, #320]	; (80169bc <xTaskIncrementTick+0x150>)
 801687c:	681d      	ldr	r5, [r3, #0]
 801687e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8016880:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016882:	2d00      	cmp	r5, #0
 8016884:	d054      	beq.n	8016930 <xTaskIncrementTick+0xc4>
 8016886:	4b4e      	ldr	r3, [pc, #312]	; (80169c0 <xTaskIncrementTick+0x154>)
 8016888:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 801688a:	9b01      	ldr	r3, [sp, #4]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	42ab      	cmp	r3, r5
 8016890:	d85d      	bhi.n	801694e <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016892:	4e4c      	ldr	r6, [pc, #304]	; (80169c4 <xTaskIncrementTick+0x158>)
 8016894:	6833      	ldr	r3, [r6, #0]
 8016896:	681c      	ldr	r4, [r3, #0]
 8016898:	2c00      	cmp	r4, #0
 801689a:	d07c      	beq.n	8016996 <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 801689c:	2400      	movs	r4, #0
 801689e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80169dc <xTaskIncrementTick+0x170>
 80168a2:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80169e0 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 80168a6:	f04f 0a01 	mov.w	sl, #1
 80168aa:	4f47      	ldr	r7, [pc, #284]	; (80169c8 <xTaskIncrementTick+0x15c>)
 80168ac:	e024      	b.n	80168f8 <xTaskIncrementTick+0x8c>
 80168ae:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80168b0:	f7fe ffa2 	bl	80157f8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80168b4:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80168b8:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80168bc:	9900      	ldr	r1, [sp, #0]
 80168be:	b112      	cbz	r2, 80168c6 <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80168c0:	f7fe ff9a 	bl	80157f8 <uxListRemove>
 80168c4:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 80168c6:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	fa0a f200 	lsl.w	r2, sl, r0
 80168d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80168d4:	431a      	orrs	r2, r3
 80168d6:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80168da:	603a      	str	r2, [r7, #0]
 80168dc:	f7fe ff64 	bl	80157a8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80168e0:	f8d9 3000 	ldr.w	r3, [r9]
 80168e4:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80168e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80168ea:	429a      	cmp	r2, r3
 80168ec:	bf28      	it	cs
 80168ee:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80168f0:	6833      	ldr	r3, [r6, #0]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d052      	beq.n	801699e <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168f8:	6833      	ldr	r3, [r6, #0]
 80168fa:	68db      	ldr	r3, [r3, #12]
 80168fc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016900:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016904:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8016908:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801690a:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 801690c:	d2cf      	bcs.n	80168ae <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 801690e:	9b01      	ldr	r3, [sp, #4]
 8016910:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016912:	e021      	b.n	8016958 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 8016914:	4a2d      	ldr	r2, [pc, #180]	; (80169cc <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 8016916:	2400      	movs	r4, #0
		++uxPendedTicks;
 8016918:	6813      	ldr	r3, [r2, #0]
 801691a:	3301      	adds	r3, #1
 801691c:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 801691e:	4b2c      	ldr	r3, [pc, #176]	; (80169d0 <xTaskIncrementTick+0x164>)
 8016920:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8016922:	2b00      	cmp	r3, #0
}
 8016924:	bf0c      	ite	eq
 8016926:	4620      	moveq	r0, r4
 8016928:	2001      	movne	r0, #1
 801692a:	b003      	add	sp, #12
 801692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8016930:	4b24      	ldr	r3, [pc, #144]	; (80169c4 <xTaskIncrementTick+0x158>)
 8016932:	681a      	ldr	r2, [r3, #0]
 8016934:	6812      	ldr	r2, [r2, #0]
 8016936:	b1da      	cbz	r2, 8016970 <xTaskIncrementTick+0x104>
 8016938:	f04f 0330 	mov.w	r3, #48	; 0x30
 801693c:	b672      	cpsid	i
 801693e:	f383 8811 	msr	BASEPRI, r3
 8016942:	f3bf 8f6f 	isb	sy
 8016946:	f3bf 8f4f 	dsb	sy
 801694a:	b662      	cpsie	i
 801694c:	e7fe      	b.n	801694c <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 801694e:	2400      	movs	r4, #0
 8016950:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80169dc <xTaskIncrementTick+0x170>
 8016954:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80169e0 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016958:	f8d9 3000 	ldr.w	r3, [r9]
 801695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801695e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8016968:	2b02      	cmp	r3, #2
 801696a:	bf28      	it	cs
 801696c:	2401      	movcs	r4, #1
 801696e:	e7d6      	b.n	801691e <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 8016970:	4a18      	ldr	r2, [pc, #96]	; (80169d4 <xTaskIncrementTick+0x168>)
 8016972:	6818      	ldr	r0, [r3, #0]
 8016974:	6811      	ldr	r1, [r2, #0]
 8016976:	6019      	str	r1, [r3, #0]
 8016978:	4917      	ldr	r1, [pc, #92]	; (80169d8 <xTaskIncrementTick+0x16c>)
 801697a:	6010      	str	r0, [r2, #0]
 801697c:	680a      	ldr	r2, [r1, #0]
 801697e:	3201      	adds	r2, #1
 8016980:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016982:	681a      	ldr	r2, [r3, #0]
 8016984:	6812      	ldr	r2, [r2, #0]
 8016986:	b97a      	cbnz	r2, 80169a8 <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8016988:	4b0d      	ldr	r3, [pc, #52]	; (80169c0 <xTaskIncrementTick+0x154>)
 801698a:	461a      	mov	r2, r3
 801698c:	9301      	str	r3, [sp, #4]
 801698e:	f04f 33ff 	mov.w	r3, #4294967295
 8016992:	6013      	str	r3, [r2, #0]
 8016994:	e779      	b.n	801688a <xTaskIncrementTick+0x1e>
 8016996:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80169dc <xTaskIncrementTick+0x170>
 801699a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80169e0 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801699e:	f04f 33ff 	mov.w	r3, #4294967295
 80169a2:	9a01      	ldr	r2, [sp, #4]
 80169a4:	6013      	str	r3, [r2, #0]
					break;
 80169a6:	e7d7      	b.n	8016958 <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169a8:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80169aa:	4a05      	ldr	r2, [pc, #20]	; (80169c0 <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169ac:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80169ae:	9201      	str	r2, [sp, #4]
 80169b0:	68db      	ldr	r3, [r3, #12]
 80169b2:	685b      	ldr	r3, [r3, #4]
 80169b4:	6013      	str	r3, [r2, #0]
}
 80169b6:	e768      	b.n	801688a <xTaskIncrementTick+0x1e>
 80169b8:	200063ec 	.word	0x200063ec
 80169bc:	20006468 	.word	0x20006468
 80169c0:	20006420 	.word	0x20006420
 80169c4:	2000634c 	.word	0x2000634c
 80169c8:	200063f4 	.word	0x200063f4
 80169cc:	200063e8 	.word	0x200063e8
 80169d0:	2000646c 	.word	0x2000646c
 80169d4:	20006350 	.word	0x20006350
 80169d8:	20006424 	.word	0x20006424
 80169dc:	20006354 	.word	0x20006354
 80169e0:	20006348 	.word	0x20006348

080169e4 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80169e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e8:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80169ea:	f000 fec3 	bl	8017774 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80169ee:	4b38      	ldr	r3, [pc, #224]	; (8016ad0 <xTaskResumeAll.part.0+0xec>)
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	3a01      	subs	r2, #1
 80169f4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d159      	bne.n	8016ab0 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80169fc:	4b35      	ldr	r3, [pc, #212]	; (8016ad4 <xTaskResumeAll.part.0+0xf0>)
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d055      	beq.n	8016ab0 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016a04:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016aec <xTaskResumeAll.part.0+0x108>
 8016a08:	f8da 3000 	ldr.w	r3, [sl]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d05c      	beq.n	8016aca <xTaskResumeAll.part.0+0xe6>
 8016a10:	4d31      	ldr	r5, [pc, #196]	; (8016ad8 <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 8016a12:	2601      	movs	r6, #1
 8016a14:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8016af0 <xTaskResumeAll.part.0+0x10c>
 8016a18:	4f30      	ldr	r7, [pc, #192]	; (8016adc <xTaskResumeAll.part.0+0xf8>)
 8016a1a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8016af4 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a1e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016a22:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016a24:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016a28:	f104 0018 	add.w	r0, r4, #24
 8016a2c:	f7fe fee4 	bl	80157f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016a30:	4658      	mov	r0, fp
 8016a32:	f7fe fee1 	bl	80157f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016a36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016a38:	682a      	ldr	r2, [r5, #0]
 8016a3a:	4659      	mov	r1, fp
 8016a3c:	fa06 f300 	lsl.w	r3, r6, r0
 8016a40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016a44:	4313      	orrs	r3, r2
 8016a46:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8016a4a:	602b      	str	r3, [r5, #0]
 8016a4c:	f7fe feac 	bl	80157a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d301      	bcc.n	8016a5e <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 8016a5a:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016a5e:	f8da 3000 	ldr.w	r3, [sl]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d1db      	bne.n	8016a1e <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a66:	4b1e      	ldr	r3, [pc, #120]	; (8016ae0 <xTaskResumeAll.part.0+0xfc>)
 8016a68:	681a      	ldr	r2, [r3, #0]
 8016a6a:	6812      	ldr	r2, [r2, #0]
 8016a6c:	b342      	cbz	r2, 8016ac0 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a6e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016a70:	4b1c      	ldr	r3, [pc, #112]	; (8016ae4 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a72:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016a74:	68d2      	ldr	r2, [r2, #12]
 8016a76:	6852      	ldr	r2, [r2, #4]
 8016a78:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016a7a:	4e1b      	ldr	r6, [pc, #108]	; (8016ae8 <xTaskResumeAll.part.0+0x104>)
 8016a7c:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016a7e:	b144      	cbz	r4, 8016a92 <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 8016a80:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8016a82:	f7ff fef3 	bl	801686c <xTaskIncrementTick>
 8016a86:	b108      	cbz	r0, 8016a8c <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8016a88:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016a8c:	3c01      	subs	r4, #1
 8016a8e:	d1f8      	bne.n	8016a82 <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 8016a90:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8016a92:	f8d9 3000 	ldr.w	r3, [r9]
 8016a96:	b15b      	cbz	r3, 8016ab0 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8016a98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016aa0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016aa4:	f3bf 8f4f 	dsb	sy
 8016aa8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8016aac:	2001      	movs	r0, #1
 8016aae:	e000      	b.n	8016ab2 <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8016ab4:	f000 fe84 	bl	80177c0 <vPortExitCritical>
}
 8016ab8:	9801      	ldr	r0, [sp, #4]
 8016aba:	b003      	add	sp, #12
 8016abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8016ac0:	4b08      	ldr	r3, [pc, #32]	; (8016ae4 <xTaskResumeAll.part.0+0x100>)
 8016ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8016ac6:	601a      	str	r2, [r3, #0]
 8016ac8:	e7d7      	b.n	8016a7a <xTaskResumeAll.part.0+0x96>
 8016aca:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8016af4 <xTaskResumeAll.part.0+0x110>
 8016ace:	e7d4      	b.n	8016a7a <xTaskResumeAll.part.0+0x96>
 8016ad0:	200063ec 	.word	0x200063ec
 8016ad4:	200063e0 	.word	0x200063e0
 8016ad8:	200063f4 	.word	0x200063f4
 8016adc:	20006348 	.word	0x20006348
 8016ae0:	2000634c 	.word	0x2000634c
 8016ae4:	20006420 	.word	0x20006420
 8016ae8:	200063e8 	.word	0x200063e8
 8016aec:	20006428 	.word	0x20006428
 8016af0:	20006354 	.word	0x20006354
 8016af4:	2000646c 	.word	0x2000646c

08016af8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8016af8:	4b07      	ldr	r3, [pc, #28]	; (8016b18 <xTaskResumeAll+0x20>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	b953      	cbnz	r3, 8016b14 <xTaskResumeAll+0x1c>
 8016afe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b02:	b672      	cpsid	i
 8016b04:	f383 8811 	msr	BASEPRI, r3
 8016b08:	f3bf 8f6f 	isb	sy
 8016b0c:	f3bf 8f4f 	dsb	sy
 8016b10:	b662      	cpsie	i
 8016b12:	e7fe      	b.n	8016b12 <xTaskResumeAll+0x1a>
 8016b14:	f7ff bf66 	b.w	80169e4 <xTaskResumeAll.part.0>
 8016b18:	200063ec 	.word	0x200063ec

08016b1c <vTaskDelay>:
	{
 8016b1c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016b1e:	b950      	cbnz	r0, 8016b36 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8016b20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b28:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016b2c:	f3bf 8f4f 	dsb	sy
 8016b30:	f3bf 8f6f 	isb	sy
	}
 8016b34:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8016b36:	4c12      	ldr	r4, [pc, #72]	; (8016b80 <vTaskDelay+0x64>)
 8016b38:	6821      	ldr	r1, [r4, #0]
 8016b3a:	b151      	cbz	r1, 8016b52 <vTaskDelay+0x36>
 8016b3c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b40:	b672      	cpsid	i
 8016b42:	f383 8811 	msr	BASEPRI, r3
 8016b46:	f3bf 8f6f 	isb	sy
 8016b4a:	f3bf 8f4f 	dsb	sy
 8016b4e:	b662      	cpsie	i
 8016b50:	e7fe      	b.n	8016b50 <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 8016b52:	6823      	ldr	r3, [r4, #0]
 8016b54:	3301      	adds	r3, #1
 8016b56:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016b58:	f7ff fc68 	bl	801642c <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8016b5c:	6823      	ldr	r3, [r4, #0]
 8016b5e:	b953      	cbnz	r3, 8016b76 <vTaskDelay+0x5a>
 8016b60:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b64:	b672      	cpsid	i
 8016b66:	f383 8811 	msr	BASEPRI, r3
 8016b6a:	f3bf 8f6f 	isb	sy
 8016b6e:	f3bf 8f4f 	dsb	sy
 8016b72:	b662      	cpsie	i
 8016b74:	e7fe      	b.n	8016b74 <vTaskDelay+0x58>
 8016b76:	f7ff ff35 	bl	80169e4 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8016b7a:	2800      	cmp	r0, #0
 8016b7c:	d0d0      	beq.n	8016b20 <vTaskDelay+0x4>
	}
 8016b7e:	bd10      	pop	{r4, pc}
 8016b80:	200063ec 	.word	0x200063ec

08016b84 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016b84:	4b04      	ldr	r3, [pc, #16]	; (8016b98 <vTaskSwitchContext+0x14>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	b11b      	cbz	r3, 8016b92 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8016b8a:	4b04      	ldr	r3, [pc, #16]	; (8016b9c <vTaskSwitchContext+0x18>)
 8016b8c:	2201      	movs	r2, #1
 8016b8e:	601a      	str	r2, [r3, #0]
}
 8016b90:	4770      	bx	lr
 8016b92:	f7ff bced 	b.w	8016570 <vTaskSwitchContext.part.0>
 8016b96:	bf00      	nop
 8016b98:	200063ec 	.word	0x200063ec
 8016b9c:	2000646c 	.word	0x2000646c

08016ba0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8016ba0:	b160      	cbz	r0, 8016bbc <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016ba2:	4b0c      	ldr	r3, [pc, #48]	; (8016bd4 <vTaskPlaceOnEventList+0x34>)
{
 8016ba4:	b510      	push	{r4, lr}
 8016ba6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016ba8:	6819      	ldr	r1, [r3, #0]
 8016baa:	3118      	adds	r1, #24
 8016bac:	f7fe fe0c 	bl	80157c8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	2101      	movs	r1, #1
}
 8016bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016bb8:	f7ff bc38 	b.w	801642c <prvAddCurrentTaskToDelayedList>
 8016bbc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016bc0:	b672      	cpsid	i
 8016bc2:	f383 8811 	msr	BASEPRI, r3
 8016bc6:	f3bf 8f6f 	isb	sy
 8016bca:	f3bf 8f4f 	dsb	sy
 8016bce:	b662      	cpsie	i
	configASSERT( pxEventList );
 8016bd0:	e7fe      	b.n	8016bd0 <vTaskPlaceOnEventList+0x30>
 8016bd2:	bf00      	nop
 8016bd4:	20006348 	.word	0x20006348

08016bd8 <vTaskPlaceOnEventListRestricted>:
	{
 8016bd8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8016bda:	b180      	cbz	r0, 8016bfe <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016bdc:	4b0d      	ldr	r3, [pc, #52]	; (8016c14 <vTaskPlaceOnEventListRestricted+0x3c>)
 8016bde:	460d      	mov	r5, r1
 8016be0:	4614      	mov	r4, r2
 8016be2:	6819      	ldr	r1, [r3, #0]
 8016be4:	3118      	adds	r1, #24
 8016be6:	f7fe fddf 	bl	80157a8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8016bea:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016bec:	4621      	mov	r1, r4
 8016bee:	bf0c      	ite	eq
 8016bf0:	4628      	moveq	r0, r5
 8016bf2:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8016bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016bfa:	f7ff bc17 	b.w	801642c <prvAddCurrentTaskToDelayedList>
 8016bfe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016c02:	b672      	cpsid	i
 8016c04:	f383 8811 	msr	BASEPRI, r3
 8016c08:	f3bf 8f6f 	isb	sy
 8016c0c:	f3bf 8f4f 	dsb	sy
 8016c10:	b662      	cpsie	i
		configASSERT( pxEventList );
 8016c12:	e7fe      	b.n	8016c12 <vTaskPlaceOnEventListRestricted+0x3a>
 8016c14:	20006348 	.word	0x20006348

08016c18 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c18:	68c3      	ldr	r3, [r0, #12]
{
 8016c1a:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c1c:	68dc      	ldr	r4, [r3, #12]
{
 8016c1e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8016c20:	b364      	cbz	r4, 8016c7c <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016c22:	f104 0518 	add.w	r5, r4, #24
 8016c26:	4628      	mov	r0, r5
 8016c28:	f7fe fde6 	bl	80157f8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c2c:	4b1a      	ldr	r3, [pc, #104]	; (8016c98 <xTaskRemoveFromEventList+0x80>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	b17b      	cbz	r3, 8016c52 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016c32:	4629      	mov	r1, r5
 8016c34:	4819      	ldr	r0, [pc, #100]	; (8016c9c <xTaskRemoveFromEventList+0x84>)
 8016c36:	f7fe fdb7 	bl	80157a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016c3a:	4b19      	ldr	r3, [pc, #100]	; (8016ca0 <xTaskRemoveFromEventList+0x88>)
 8016c3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d925      	bls.n	8016c92 <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8016c46:	2301      	movs	r3, #1
 8016c48:	4a16      	ldr	r2, [pc, #88]	; (8016ca4 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 8016c4a:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8016c4c:	6013      	str	r3, [r2, #0]
}
 8016c4e:	b003      	add	sp, #12
 8016c50:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016c52:	1d21      	adds	r1, r4, #4
 8016c54:	4608      	mov	r0, r1
 8016c56:	9101      	str	r1, [sp, #4]
 8016c58:	f7fe fdce 	bl	80157f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016c5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016c5e:	4a12      	ldr	r2, [pc, #72]	; (8016ca8 <xTaskRemoveFromEventList+0x90>)
 8016c60:	2301      	movs	r3, #1
 8016c62:	9901      	ldr	r1, [sp, #4]
 8016c64:	6815      	ldr	r5, [r2, #0]
 8016c66:	4083      	lsls	r3, r0
 8016c68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016c6c:	432b      	orrs	r3, r5
 8016c6e:	6013      	str	r3, [r2, #0]
 8016c70:	4b0e      	ldr	r3, [pc, #56]	; (8016cac <xTaskRemoveFromEventList+0x94>)
 8016c72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016c76:	f7fe fd97 	bl	80157a8 <vListInsertEnd>
 8016c7a:	e7de      	b.n	8016c3a <xTaskRemoveFromEventList+0x22>
 8016c7c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016c80:	b672      	cpsid	i
 8016c82:	f383 8811 	msr	BASEPRI, r3
 8016c86:	f3bf 8f6f 	isb	sy
 8016c8a:	f3bf 8f4f 	dsb	sy
 8016c8e:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8016c90:	e7fe      	b.n	8016c90 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8016c92:	2000      	movs	r0, #0
}
 8016c94:	b003      	add	sp, #12
 8016c96:	bd30      	pop	{r4, r5, pc}
 8016c98:	200063ec 	.word	0x200063ec
 8016c9c:	20006428 	.word	0x20006428
 8016ca0:	20006348 	.word	0x20006348
 8016ca4:	2000646c 	.word	0x2000646c
 8016ca8:	200063f4 	.word	0x200063f4
 8016cac:	20006354 	.word	0x20006354

08016cb0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016cb0:	4a03      	ldr	r2, [pc, #12]	; (8016cc0 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016cb2:	4b04      	ldr	r3, [pc, #16]	; (8016cc4 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016cb4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	e9c0 2300 	strd	r2, r3, [r0]
}
 8016cbc:	4770      	bx	lr
 8016cbe:	bf00      	nop
 8016cc0:	20006424 	.word	0x20006424
 8016cc4:	20006468 	.word	0x20006468

08016cc8 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8016cc8:	b338      	cbz	r0, 8016d1a <xTaskCheckForTimeOut+0x52>
{
 8016cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ccc:	460d      	mov	r5, r1
 8016cce:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8016cd0:	b1c1      	cbz	r1, 8016d04 <xTaskCheckForTimeOut+0x3c>
 8016cd2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8016cd4:	f000 fd4e 	bl	8017774 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8016cd8:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8016cda:	4a1f      	ldr	r2, [pc, #124]	; (8016d58 <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8016cdc:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8016cde:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8016ce0:	d034      	beq.n	8016d4c <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016ce2:	f8df c078 	ldr.w	ip, [pc, #120]	; 8016d5c <xTaskCheckForTimeOut+0x94>
 8016ce6:	6826      	ldr	r6, [r4, #0]
 8016ce8:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016cec:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016cee:	42be      	cmp	r6, r7
 8016cf0:	d01e      	beq.n	8016d30 <xTaskCheckForTimeOut+0x68>
 8016cf2:	4288      	cmp	r0, r1
 8016cf4:	d81c      	bhi.n	8016d30 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8016cf6:	2001      	movs	r0, #1
 8016cf8:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8016cfa:	f000 fd61 	bl	80177c0 <vPortExitCritical>
}
 8016cfe:	9801      	ldr	r0, [sp, #4]
 8016d00:	b003      	add	sp, #12
 8016d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d08:	b672      	cpsid	i
 8016d0a:	f383 8811 	msr	BASEPRI, r3
 8016d0e:	f3bf 8f6f 	isb	sy
 8016d12:	f3bf 8f4f 	dsb	sy
 8016d16:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8016d18:	e7fe      	b.n	8016d18 <xTaskCheckForTimeOut+0x50>
 8016d1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d1e:	b672      	cpsid	i
 8016d20:	f383 8811 	msr	BASEPRI, r3
 8016d24:	f3bf 8f6f 	isb	sy
 8016d28:	f3bf 8f4f 	dsb	sy
 8016d2c:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8016d2e:	e7fe      	b.n	8016d2e <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016d30:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016d34:	4573      	cmp	r3, lr
 8016d36:	d90b      	bls.n	8016d50 <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 8016d38:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016d3a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016d3e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8016d40:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8016d42:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8016d44:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016d46:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8016d4a:	e7d5      	b.n	8016cf8 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8016d4c:	2000      	movs	r0, #0
 8016d4e:	e7d3      	b.n	8016cf8 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8016d50:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8016d52:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8016d54:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8016d56:	e7cf      	b.n	8016cf8 <xTaskCheckForTimeOut+0x30>
 8016d58:	20006468 	.word	0x20006468
 8016d5c:	20006424 	.word	0x20006424

08016d60 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8016d60:	4b01      	ldr	r3, [pc, #4]	; (8016d68 <vTaskMissedYield+0x8>)
 8016d62:	2201      	movs	r2, #1
 8016d64:	601a      	str	r2, [r3, #0]
}
 8016d66:	4770      	bx	lr
 8016d68:	2000646c 	.word	0x2000646c

08016d6c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8016d6c:	4b01      	ldr	r3, [pc, #4]	; (8016d74 <xTaskGetCurrentTaskHandle+0x8>)
 8016d6e:	6818      	ldr	r0, [r3, #0]
	}
 8016d70:	4770      	bx	lr
 8016d72:	bf00      	nop
 8016d74:	20006348 	.word	0x20006348

08016d78 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8016d78:	4b05      	ldr	r3, [pc, #20]	; (8016d90 <xTaskGetSchedulerState+0x18>)
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	b133      	cbz	r3, 8016d8c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d7e:	4b05      	ldr	r3, [pc, #20]	; (8016d94 <xTaskGetSchedulerState+0x1c>)
 8016d80:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	bf0c      	ite	eq
 8016d86:	2002      	moveq	r0, #2
 8016d88:	2000      	movne	r0, #0
 8016d8a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016d8c:	2001      	movs	r0, #1
	}
 8016d8e:	4770      	bx	lr
 8016d90:	2000643c 	.word	0x2000643c
 8016d94:	200063ec 	.word	0x200063ec

08016d98 <xTaskPriorityInherit>:
	{
 8016d98:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8016d9a:	4604      	mov	r4, r0
	{
 8016d9c:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8016d9e:	b1c8      	cbz	r0, 8016dd4 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016da0:	4d26      	ldr	r5, [pc, #152]	; (8016e3c <xTaskPriorityInherit+0xa4>)
 8016da2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016da4:	682a      	ldr	r2, [r5, #0]
 8016da6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016da8:	4293      	cmp	r3, r2
 8016daa:	d215      	bcs.n	8016dd8 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016dac:	6982      	ldr	r2, [r0, #24]
 8016dae:	2a00      	cmp	r2, #0
 8016db0:	db04      	blt.n	8016dbc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016db2:	682a      	ldr	r2, [r5, #0]
 8016db4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016db6:	f1c2 0207 	rsb	r2, r2, #7
 8016dba:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016dbc:	4e20      	ldr	r6, [pc, #128]	; (8016e40 <xTaskPriorityInherit+0xa8>)
 8016dbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016dc2:	6962      	ldr	r2, [r4, #20]
 8016dc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016dc8:	429a      	cmp	r2, r3
 8016dca:	d00e      	beq.n	8016dea <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016dcc:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8016dce:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dd2:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8016dd4:	b002      	add	sp, #8
 8016dd6:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016dd8:	682b      	ldr	r3, [r5, #0]
 8016dda:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dde:	4298      	cmp	r0, r3
 8016de0:	bf2c      	ite	cs
 8016de2:	2000      	movcs	r0, #0
 8016de4:	2001      	movcc	r0, #1
	}
 8016de6:	b002      	add	sp, #8
 8016de8:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016dea:	1d21      	adds	r1, r4, #4
 8016dec:	4608      	mov	r0, r1
 8016dee:	9101      	str	r1, [sp, #4]
 8016df0:	f7fe fd02 	bl	80157f8 <uxListRemove>
 8016df4:	9901      	ldr	r1, [sp, #4]
 8016df6:	b970      	cbnz	r0, 8016e16 <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8016df8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016dfa:	4a12      	ldr	r2, [pc, #72]	; (8016e44 <xTaskPriorityInherit+0xac>)
 8016dfc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8016e00:	009b      	lsls	r3, r3, #2
 8016e02:	58f3      	ldr	r3, [r6, r3]
 8016e04:	b943      	cbnz	r3, 8016e18 <xTaskPriorityInherit+0x80>
 8016e06:	2301      	movs	r3, #1
 8016e08:	fa03 f000 	lsl.w	r0, r3, r0
 8016e0c:	6813      	ldr	r3, [r2, #0]
 8016e0e:	ea23 0300 	bic.w	r3, r3, r0
 8016e12:	6013      	str	r3, [r2, #0]
 8016e14:	e000      	b.n	8016e18 <xTaskPriorityInherit+0x80>
 8016e16:	4a0b      	ldr	r2, [pc, #44]	; (8016e44 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016e18:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016e1a:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016e20:	2401      	movs	r4, #1
 8016e22:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8016e26:	fa04 f303 	lsl.w	r3, r4, r3
 8016e2a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8016e2e:	432b      	orrs	r3, r5
 8016e30:	6013      	str	r3, [r2, #0]
 8016e32:	f7fe fcb9 	bl	80157a8 <vListInsertEnd>
				xReturn = pdTRUE;
 8016e36:	4620      	mov	r0, r4
 8016e38:	e7cc      	b.n	8016dd4 <xTaskPriorityInherit+0x3c>
 8016e3a:	bf00      	nop
 8016e3c:	20006348 	.word	0x20006348
 8016e40:	20006354 	.word	0x20006354
 8016e44:	200063f4 	.word	0x200063f4

08016e48 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8016e48:	b340      	cbz	r0, 8016e9c <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 8016e4a:	4b2c      	ldr	r3, [pc, #176]	; (8016efc <xTaskPriorityDisinherit+0xb4>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	4283      	cmp	r3, r0
	{
 8016e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e52:	4604      	mov	r4, r0
 8016e54:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 8016e56:	d00a      	beq.n	8016e6e <xTaskPriorityDisinherit+0x26>
 8016e58:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e5c:	b672      	cpsid	i
 8016e5e:	f383 8811 	msr	BASEPRI, r3
 8016e62:	f3bf 8f6f 	isb	sy
 8016e66:	f3bf 8f4f 	dsb	sy
 8016e6a:	b662      	cpsie	i
 8016e6c:	e7fe      	b.n	8016e6c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8016e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e70:	b14b      	cbz	r3, 8016e86 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016e72:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8016e74:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016e76:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8016e78:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016e7a:	4291      	cmp	r1, r2
 8016e7c:	d000      	beq.n	8016e80 <xTaskPriorityDisinherit+0x38>
 8016e7e:	b17b      	cbz	r3, 8016ea0 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8016e80:	2000      	movs	r0, #0
	}
 8016e82:	b003      	add	sp, #12
 8016e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e8a:	b672      	cpsid	i
 8016e8c:	f383 8811 	msr	BASEPRI, r3
 8016e90:	f3bf 8f6f 	isb	sy
 8016e94:	f3bf 8f4f 	dsb	sy
 8016e98:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8016e9a:	e7fe      	b.n	8016e9a <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8016e9c:	2000      	movs	r0, #0
	}
 8016e9e:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016ea0:	1d01      	adds	r1, r0, #4
 8016ea2:	4608      	mov	r0, r1
 8016ea4:	9101      	str	r1, [sp, #4]
 8016ea6:	f7fe fca7 	bl	80157f8 <uxListRemove>
 8016eaa:	9901      	ldr	r1, [sp, #4]
 8016eac:	b1a0      	cbz	r0, 8016ed8 <xTaskPriorityDisinherit+0x90>
 8016eae:	4814      	ldr	r0, [pc, #80]	; (8016f00 <xTaskPriorityDisinherit+0xb8>)
 8016eb0:	4a14      	ldr	r2, [pc, #80]	; (8016f04 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8016eb4:	2501      	movs	r5, #1
 8016eb6:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016eb8:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ebe:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8016ec0:	fa05 f403 	lsl.w	r4, r5, r3
 8016ec4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016ec8:	4334      	orrs	r4, r6
 8016eca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016ece:	6014      	str	r4, [r2, #0]
 8016ed0:	f7fe fc6a 	bl	80157a8 <vListInsertEnd>
					xReturn = pdTRUE;
 8016ed4:	4628      	mov	r0, r5
		return xReturn;
 8016ed6:	e7d4      	b.n	8016e82 <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016ed8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8016eda:	4809      	ldr	r0, [pc, #36]	; (8016f00 <xTaskPriorityDisinherit+0xb8>)
 8016edc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8016ee0:	4a08      	ldr	r2, [pc, #32]	; (8016f04 <xTaskPriorityDisinherit+0xbc>)
 8016ee2:	009b      	lsls	r3, r3, #2
 8016ee4:	58c3      	ldr	r3, [r0, r3]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d1e3      	bne.n	8016eb2 <xTaskPriorityDisinherit+0x6a>
 8016eea:	2301      	movs	r3, #1
 8016eec:	fa03 f505 	lsl.w	r5, r3, r5
 8016ef0:	6813      	ldr	r3, [r2, #0]
 8016ef2:	ea23 0305 	bic.w	r3, r3, r5
 8016ef6:	6013      	str	r3, [r2, #0]
 8016ef8:	e7db      	b.n	8016eb2 <xTaskPriorityDisinherit+0x6a>
 8016efa:	bf00      	nop
 8016efc:	20006348 	.word	0x20006348
 8016f00:	20006354 	.word	0x20006354
 8016f04:	200063f4 	.word	0x200063f4

08016f08 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	d044      	beq.n	8016f96 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8016f0c:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 8016f0e:	b530      	push	{r4, r5, lr}
 8016f10:	4604      	mov	r4, r0
 8016f12:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8016f14:	b153      	cbz	r3, 8016f2c <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016f16:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016f18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016f1a:	4281      	cmp	r1, r0
 8016f1c:	bf38      	it	cc
 8016f1e:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016f20:	428a      	cmp	r2, r1
 8016f22:	d001      	beq.n	8016f28 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8016f24:	2b01      	cmp	r3, #1
 8016f26:	d00c      	beq.n	8016f42 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 8016f28:	b003      	add	sp, #12
 8016f2a:	bd30      	pop	{r4, r5, pc}
 8016f2c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f30:	b672      	cpsid	i
 8016f32:	f383 8811 	msr	BASEPRI, r3
 8016f36:	f3bf 8f6f 	isb	sy
 8016f3a:	f3bf 8f4f 	dsb	sy
 8016f3e:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8016f40:	e7fe      	b.n	8016f40 <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 8016f42:	4b25      	ldr	r3, [pc, #148]	; (8016fd8 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	42a3      	cmp	r3, r4
 8016f48:	d026      	beq.n	8016f98 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016f4a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8016f4c:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	db02      	blt.n	8016f58 <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f52:	f1c1 0107 	rsb	r1, r1, #7
 8016f56:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016f58:	4d20      	ldr	r5, [pc, #128]	; (8016fdc <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8016f5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016f5e:	6961      	ldr	r1, [r4, #20]
 8016f60:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8016f64:	4299      	cmp	r1, r3
 8016f66:	d1df      	bne.n	8016f28 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f68:	1d21      	adds	r1, r4, #4
 8016f6a:	4608      	mov	r0, r1
 8016f6c:	9101      	str	r1, [sp, #4]
 8016f6e:	f7fe fc43 	bl	80157f8 <uxListRemove>
 8016f72:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016f74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f76:	b1d0      	cbz	r0, 8016fae <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016f78:	2301      	movs	r3, #1
 8016f7a:	0090      	lsls	r0, r2, #2
 8016f7c:	4c18      	ldr	r4, [pc, #96]	; (8016fe0 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016f7e:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8016f80:	4410      	add	r0, r2
 8016f82:	6822      	ldr	r2, [r4, #0]
 8016f84:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8016f88:	4313      	orrs	r3, r2
 8016f8a:	6023      	str	r3, [r4, #0]
	}
 8016f8c:	b003      	add	sp, #12
 8016f8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8016f92:	f7fe bc09 	b.w	80157a8 <vListInsertEnd>
 8016f96:	4770      	bx	lr
 8016f98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f9c:	b672      	cpsid	i
 8016f9e:	f383 8811 	msr	BASEPRI, r3
 8016fa2:	f3bf 8f6f 	isb	sy
 8016fa6:	f3bf 8f4f 	dsb	sy
 8016faa:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8016fac:	e7fe      	b.n	8016fac <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016fae:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8016fb2:	0090      	lsls	r0, r2, #2
 8016fb4:	009b      	lsls	r3, r3, #2
 8016fb6:	58eb      	ldr	r3, [r5, r3]
 8016fb8:	b11b      	cbz	r3, 8016fc2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8016fba:	2301      	movs	r3, #1
 8016fbc:	4c08      	ldr	r4, [pc, #32]	; (8016fe0 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016fbe:	4093      	lsls	r3, r2
 8016fc0:	e7de      	b.n	8016f80 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8016fc2:	4c07      	ldr	r4, [pc, #28]	; (8016fe0 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	f8d4 c000 	ldr.w	ip, [r4]
 8016fca:	4093      	lsls	r3, r2
 8016fcc:	ea2c 0c03 	bic.w	ip, ip, r3
 8016fd0:	f8c4 c000 	str.w	ip, [r4]
 8016fd4:	e7d4      	b.n	8016f80 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8016fd6:	bf00      	nop
 8016fd8:	20006348 	.word	0x20006348
 8016fdc:	20006354 	.word	0x20006354
 8016fe0:	200063f4 	.word	0x200063f4

08016fe4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8016fe4:	4b04      	ldr	r3, [pc, #16]	; (8016ff8 <pvTaskIncrementMutexHeldCount+0x14>)
 8016fe6:	681a      	ldr	r2, [r3, #0]
 8016fe8:	b11a      	cbz	r2, 8016ff2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8016fea:	6819      	ldr	r1, [r3, #0]
 8016fec:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8016fee:	3201      	adds	r2, #1
 8016ff0:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8016ff2:	6818      	ldr	r0, [r3, #0]
	}
 8016ff4:	4770      	bx	lr
 8016ff6:	bf00      	nop
 8016ff8:	20006348 	.word	0x20006348

08016ffc <ulTaskNotifyTake>:
	{
 8016ffc:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8016ffe:	4c1a      	ldr	r4, [pc, #104]	; (8017068 <ulTaskNotifyTake+0x6c>)
	{
 8017000:	4606      	mov	r6, r0
 8017002:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8017004:	f000 fbb6 	bl	8017774 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8017008:	6823      	ldr	r3, [r4, #0]
 801700a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801700e:	b923      	cbnz	r3, 801701a <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8017010:	6823      	ldr	r3, [r4, #0]
 8017012:	2101      	movs	r1, #1
 8017014:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 8017018:	b9c5      	cbnz	r5, 801704c <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 801701a:	f000 fbd1 	bl	80177c0 <vPortExitCritical>
		taskENTER_CRITICAL();
 801701e:	f000 fba9 	bl	8017774 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8017022:	6823      	ldr	r3, [r4, #0]
 8017024:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 8017028:	b125      	cbz	r5, 8017034 <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801702a:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 801702c:	b156      	cbz	r6, 8017044 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801702e:	2200      	movs	r2, #0
 8017030:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017034:	6823      	ldr	r3, [r4, #0]
 8017036:	2200      	movs	r2, #0
 8017038:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 801703c:	f000 fbc0 	bl	80177c0 <vPortExitCritical>
	}
 8017040:	4628      	mov	r0, r5
 8017042:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8017044:	1e6a      	subs	r2, r5, #1
 8017046:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 801704a:	e7f3      	b.n	8017034 <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801704c:	4628      	mov	r0, r5
 801704e:	f7ff f9ed 	bl	801642c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8017052:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801705a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801705e:	f3bf 8f4f 	dsb	sy
 8017062:	f3bf 8f6f 	isb	sy
 8017066:	e7d8      	b.n	801701a <ulTaskNotifyTake+0x1e>
 8017068:	20006348 	.word	0x20006348

0801706c <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 801706c:	b318      	cbz	r0, 80170b6 <vTaskNotifyGiveFromISR+0x4a>
	{
 801706e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017070:	b083      	sub	sp, #12
 8017072:	4604      	mov	r4, r0
 8017074:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017076:	f000 fc83 	bl	8017980 <vPortValidateInterruptPriority>
	__asm volatile
 801707a:	f3ef 8611 	mrs	r6, BASEPRI
 801707e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017082:	b672      	cpsid	i
 8017084:	f383 8811 	msr	BASEPRI, r3
 8017088:	f3bf 8f6f 	isb	sy
 801708c:	f3bf 8f4f 	dsb	sy
 8017090:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017092:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017094:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017098:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801709c:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 801709e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80170a2:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 80170a4:	f103 0301 	add.w	r3, r3, #1
 80170a8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80170ac:	d00e      	beq.n	80170cc <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 80170ae:	f386 8811 	msr	BASEPRI, r6
	}
 80170b2:	b003      	add	sp, #12
 80170b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 80170b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80170ba:	b672      	cpsid	i
 80170bc:	f383 8811 	msr	BASEPRI, r3
 80170c0:	f3bf 8f6f 	isb	sy
 80170c4:	f3bf 8f4f 	dsb	sy
 80170c8:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 80170ca:	e7fe      	b.n	80170ca <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80170cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80170ce:	b153      	cbz	r3, 80170e6 <vTaskNotifyGiveFromISR+0x7a>
 80170d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80170d4:	b672      	cpsid	i
 80170d6:	f383 8811 	msr	BASEPRI, r3
 80170da:	f3bf 8f6f 	isb	sy
 80170de:	f3bf 8f4f 	dsb	sy
 80170e2:	b662      	cpsie	i
 80170e4:	e7fe      	b.n	80170e4 <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80170e6:	4b14      	ldr	r3, [pc, #80]	; (8017138 <vTaskNotifyGiveFromISR+0xcc>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	b18b      	cbz	r3, 8017110 <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80170ec:	f104 0118 	add.w	r1, r4, #24
 80170f0:	4812      	ldr	r0, [pc, #72]	; (801713c <vTaskNotifyGiveFromISR+0xd0>)
 80170f2:	f7fe fb59 	bl	80157a8 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80170f6:	4b12      	ldr	r3, [pc, #72]	; (8017140 <vTaskNotifyGiveFromISR+0xd4>)
 80170f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170fe:	429a      	cmp	r2, r3
 8017100:	d9d5      	bls.n	80170ae <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 8017102:	b10d      	cbz	r5, 8017108 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8017104:	2301      	movs	r3, #1
 8017106:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 8017108:	4b0e      	ldr	r3, [pc, #56]	; (8017144 <vTaskNotifyGiveFromISR+0xd8>)
 801710a:	2201      	movs	r2, #1
 801710c:	601a      	str	r2, [r3, #0]
 801710e:	e7ce      	b.n	80170ae <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017110:	1d21      	adds	r1, r4, #4
 8017112:	4608      	mov	r0, r1
 8017114:	9101      	str	r1, [sp, #4]
 8017116:	f7fe fb6f 	bl	80157f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801711a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801711c:	4b0a      	ldr	r3, [pc, #40]	; (8017148 <vTaskNotifyGiveFromISR+0xdc>)
 801711e:	4087      	lsls	r7, r0
 8017120:	4a0a      	ldr	r2, [pc, #40]	; (801714c <vTaskNotifyGiveFromISR+0xe0>)
 8017122:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017126:	9901      	ldr	r1, [sp, #4]
 8017128:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801712c:	681a      	ldr	r2, [r3, #0]
 801712e:	4317      	orrs	r7, r2
 8017130:	601f      	str	r7, [r3, #0]
 8017132:	f7fe fb39 	bl	80157a8 <vListInsertEnd>
 8017136:	e7de      	b.n	80170f6 <vTaskNotifyGiveFromISR+0x8a>
 8017138:	200063ec 	.word	0x200063ec
 801713c:	20006428 	.word	0x20006428
 8017140:	20006348 	.word	0x20006348
 8017144:	2000646c 	.word	0x2000646c
 8017148:	200063f4 	.word	0x200063f4
 801714c:	20006354 	.word	0x20006354

08017150 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017150:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8017152:	4c12      	ldr	r4, [pc, #72]	; (801719c <prvCheckForValidListAndQueue+0x4c>)
{
 8017154:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8017156:	f000 fb0d 	bl	8017774 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 801715a:	6825      	ldr	r5, [r4, #0]
 801715c:	b125      	cbz	r5, 8017168 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 801715e:	b003      	add	sp, #12
 8017160:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8017164:	f000 bb2c 	b.w	80177c0 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8017168:	4f0d      	ldr	r7, [pc, #52]	; (80171a0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 801716a:	4e0e      	ldr	r6, [pc, #56]	; (80171a4 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 801716c:	4638      	mov	r0, r7
 801716e:	f7fe fb0b 	bl	8015788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017172:	4630      	mov	r0, r6
 8017174:	f7fe fb08 	bl	8015788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017178:	4a0b      	ldr	r2, [pc, #44]	; (80171a8 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801717a:	9500      	str	r5, [sp, #0]
 801717c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 801717e:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017180:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8017182:	4a0a      	ldr	r2, [pc, #40]	; (80171ac <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017184:	4b0a      	ldr	r3, [pc, #40]	; (80171b0 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8017186:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017188:	4a0a      	ldr	r2, [pc, #40]	; (80171b4 <prvCheckForValidListAndQueue+0x64>)
 801718a:	f7fe fc19 	bl	80159c0 <xQueueGenericCreateStatic>
 801718e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8017190:	2800      	cmp	r0, #0
 8017192:	d0e4      	beq.n	801715e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017194:	4908      	ldr	r1, [pc, #32]	; (80171b8 <prvCheckForValidListAndQueue+0x68>)
 8017196:	f7ff f881 	bl	801629c <vQueueAddToRegistry>
 801719a:	e7e0      	b.n	801715e <prvCheckForValidListAndQueue+0xe>
 801719c:	2000658c 	.word	0x2000658c
 80171a0:	20006518 	.word	0x20006518
 80171a4:	2000652c 	.word	0x2000652c
 80171a8:	20006470 	.word	0x20006470
 80171ac:	20006474 	.word	0x20006474
 80171b0:	20006544 	.word	0x20006544
 80171b4:	20006478 	.word	0x20006478
 80171b8:	0802cd98 	.word	0x0802cd98

080171bc <xTimerCreateTimerTask>:
{
 80171bc:	b530      	push	{r4, r5, lr}
 80171be:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 80171c0:	f7ff ffc6 	bl	8017150 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80171c4:	4b13      	ldr	r3, [pc, #76]	; (8017214 <xTimerCreateTimerTask+0x58>)
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	b1cb      	cbz	r3, 80171fe <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80171ca:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80171cc:	aa07      	add	r2, sp, #28
 80171ce:	a906      	add	r1, sp, #24
 80171d0:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80171d2:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80171d4:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80171d8:	f7ea f842 	bl	8001260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80171dc:	4623      	mov	r3, r4
 80171de:	9a07      	ldr	r2, [sp, #28]
 80171e0:	9500      	str	r5, [sp, #0]
 80171e2:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80171e6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80171ea:	490b      	ldr	r1, [pc, #44]	; (8017218 <xTimerCreateTimerTask+0x5c>)
 80171ec:	480b      	ldr	r0, [pc, #44]	; (801721c <xTimerCreateTimerTask+0x60>)
 80171ee:	f7ff fa61 	bl	80166b4 <xTaskCreateStatic>
 80171f2:	4b0b      	ldr	r3, [pc, #44]	; (8017220 <xTimerCreateTimerTask+0x64>)
 80171f4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80171f6:	b110      	cbz	r0, 80171fe <xTimerCreateTimerTask+0x42>
}
 80171f8:	2001      	movs	r0, #1
 80171fa:	b009      	add	sp, #36	; 0x24
 80171fc:	bd30      	pop	{r4, r5, pc}
 80171fe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017202:	b672      	cpsid	i
 8017204:	f383 8811 	msr	BASEPRI, r3
 8017208:	f3bf 8f6f 	isb	sy
 801720c:	f3bf 8f4f 	dsb	sy
 8017210:	b662      	cpsie	i
	configASSERT( xReturn );
 8017212:	e7fe      	b.n	8017212 <xTimerCreateTimerTask+0x56>
 8017214:	2000658c 	.word	0x2000658c
 8017218:	0802cda0 	.word	0x0802cda0
 801721c:	0801741d 	.word	0x0801741d
 8017220:	20006590 	.word	0x20006590

08017224 <xTimerCreate>:
	{
 8017224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017228:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801722a:	2028      	movs	r0, #40	; 0x28
	{
 801722c:	4688      	mov	r8, r1
 801722e:	4615      	mov	r5, r2
 8017230:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8017232:	f000 fc09 	bl	8017a48 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8017236:	4604      	mov	r4, r0
 8017238:	b1b0      	cbz	r0, 8017268 <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 801723a:	2300      	movs	r3, #0
 801723c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8017240:	f1b8 0f00 	cmp.w	r8, #0
 8017244:	d013      	beq.n	801726e <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 8017246:	f7ff ff83 	bl	8017150 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801724a:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801724c:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 801724e:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8017250:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 8017252:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8017256:	f7fe faa3 	bl	80157a0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801725a:	b12d      	cbz	r5, 8017268 <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801725c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8017260:	f043 0304 	orr.w	r3, r3, #4
 8017264:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8017268:	4620      	mov	r0, r4
 801726a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801726e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017272:	b672      	cpsid	i
 8017274:	f383 8811 	msr	BASEPRI, r3
 8017278:	f3bf 8f6f 	isb	sy
 801727c:	f3bf 8f4f 	dsb	sy
 8017280:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8017282:	e7fe      	b.n	8017282 <xTimerCreate+0x5e>

08017284 <xTimerCreateStatic>:
	{
 8017284:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8017286:	2428      	movs	r4, #40	; 0x28
	{
 8017288:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 801728a:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 801728c:	9d05      	ldr	r5, [sp, #20]
 801728e:	2d28      	cmp	r5, #40	; 0x28
 8017290:	d00a      	beq.n	80172a8 <xTimerCreateStatic+0x24>
 8017292:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017296:	b672      	cpsid	i
 8017298:	f383 8811 	msr	BASEPRI, r3
 801729c:	f3bf 8f6f 	isb	sy
 80172a0:	f3bf 8f4f 	dsb	sy
 80172a4:	b662      	cpsie	i
 80172a6:	e7fe      	b.n	80172a6 <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80172a8:	4604      	mov	r4, r0
 80172aa:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 80172ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80172ae:	b318      	cbz	r0, 80172f8 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80172b0:	2002      	movs	r0, #2
 80172b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80172b4:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80172b8:	b349      	cbz	r1, 801730e <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 80172ba:	9101      	str	r1, [sp, #4]
 80172bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80172c0:	f7ff ff46 	bl	8017150 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80172c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80172c6:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 80172c8:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 80172ca:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80172cc:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80172ce:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 80172d0:	9b03      	ldr	r3, [sp, #12]
 80172d2:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80172d4:	4613      	mov	r3, r2
 80172d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80172d8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80172da:	f7fe fa61 	bl	80157a0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80172de:	9a02      	ldr	r2, [sp, #8]
 80172e0:	b13a      	cbz	r2, 80172f2 <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80172e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80172e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80172ea:	f043 0304 	orr.w	r3, r3, #4
 80172ee:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 80172f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80172f4:	b007      	add	sp, #28
 80172f6:	bd30      	pop	{r4, r5, pc}
 80172f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80172fc:	b672      	cpsid	i
 80172fe:	f383 8811 	msr	BASEPRI, r3
 8017302:	f3bf 8f6f 	isb	sy
 8017306:	f3bf 8f4f 	dsb	sy
 801730a:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 801730c:	e7fe      	b.n	801730c <xTimerCreateStatic+0x88>
 801730e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017312:	b672      	cpsid	i
 8017314:	f383 8811 	msr	BASEPRI, r3
 8017318:	f3bf 8f6f 	isb	sy
 801731c:	f3bf 8f4f 	dsb	sy
 8017320:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8017322:	e7fe      	b.n	8017322 <xTimerCreateStatic+0x9e>

08017324 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8017324:	b1c8      	cbz	r0, 801735a <xTimerGenericCommand+0x36>
{
 8017326:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8017328:	4d19      	ldr	r5, [pc, #100]	; (8017390 <xTimerGenericCommand+0x6c>)
{
 801732a:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 801732c:	682c      	ldr	r4, [r5, #0]
 801732e:	b18c      	cbz	r4, 8017354 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017330:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017332:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8017334:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017338:	dc1a      	bgt.n	8017370 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801733a:	f7ff fd1d 	bl	8016d78 <xTaskGetSchedulerState>
 801733e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017340:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017344:	d01d      	beq.n	8017382 <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017346:	4669      	mov	r1, sp
 8017348:	461a      	mov	r2, r3
 801734a:	6828      	ldr	r0, [r5, #0]
 801734c:	f7fe fbc2 	bl	8015ad4 <xQueueGenericSend>
}
 8017350:	b005      	add	sp, #20
 8017352:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8017354:	4620      	mov	r0, r4
}
 8017356:	b005      	add	sp, #20
 8017358:	bd30      	pop	{r4, r5, pc}
 801735a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801735e:	b672      	cpsid	i
 8017360:	f383 8811 	msr	BASEPRI, r3
 8017364:	f3bf 8f6f 	isb	sy
 8017368:	f3bf 8f4f 	dsb	sy
 801736c:	b662      	cpsie	i
	configASSERT( xTimer );
 801736e:	e7fe      	b.n	801736e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017370:	469c      	mov	ip, r3
 8017372:	4669      	mov	r1, sp
 8017374:	2300      	movs	r3, #0
 8017376:	4620      	mov	r0, r4
 8017378:	4662      	mov	r2, ip
 801737a:	f7fe fcab 	bl	8015cd4 <xQueueGenericSendFromISR>
}
 801737e:	b005      	add	sp, #20
 8017380:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017382:	9a08      	ldr	r2, [sp, #32]
 8017384:	4669      	mov	r1, sp
 8017386:	6828      	ldr	r0, [r5, #0]
 8017388:	f7fe fba4 	bl	8015ad4 <xQueueGenericSend>
 801738c:	e7e3      	b.n	8017356 <xTimerGenericCommand+0x32>
 801738e:	bf00      	nop
 8017390:	2000658c 	.word	0x2000658c

08017394 <prvSwitchTimerLists>:
{
 8017394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017398:	4e1e      	ldr	r6, [pc, #120]	; (8017414 <prvSwitchTimerLists+0x80>)
 801739a:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801739c:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80173a0:	e00d      	b.n	80173be <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80173a2:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80173a4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80173a6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80173a8:	1d25      	adds	r5, r4, #4
 80173aa:	4628      	mov	r0, r5
 80173ac:	f7fe fa24 	bl	80157f8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80173b0:	6a23      	ldr	r3, [r4, #32]
 80173b2:	4620      	mov	r0, r4
 80173b4:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80173b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80173ba:	075b      	lsls	r3, r3, #29
 80173bc:	d40a      	bmi.n	80173d4 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80173be:	6833      	ldr	r3, [r6, #0]
 80173c0:	681a      	ldr	r2, [r3, #0]
 80173c2:	2a00      	cmp	r2, #0
 80173c4:	d1ed      	bne.n	80173a2 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 80173c6:	4a14      	ldr	r2, [pc, #80]	; (8017418 <prvSwitchTimerLists+0x84>)
 80173c8:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80173ca:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80173cc:	6031      	str	r1, [r6, #0]
}
 80173ce:	b002      	add	sp, #8
 80173d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80173d4:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80173d6:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80173d8:	2300      	movs	r3, #0
 80173da:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80173dc:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80173de:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 80173e0:	42af      	cmp	r7, r5
 80173e2:	d205      	bcs.n	80173f0 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80173e4:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80173e6:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80173e8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80173ea:	f7fe f9ed 	bl	80157c8 <vListInsert>
 80173ee:	e7e6      	b.n	80173be <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80173f0:	4619      	mov	r1, r3
 80173f2:	f8cd 8000 	str.w	r8, [sp]
 80173f6:	f7ff ff95 	bl	8017324 <xTimerGenericCommand>
				configASSERT( xResult );
 80173fa:	2800      	cmp	r0, #0
 80173fc:	d1df      	bne.n	80173be <prvSwitchTimerLists+0x2a>
 80173fe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017402:	b672      	cpsid	i
 8017404:	f383 8811 	msr	BASEPRI, r3
 8017408:	f3bf 8f6f 	isb	sy
 801740c:	f3bf 8f4f 	dsb	sy
 8017410:	b662      	cpsie	i
 8017412:	e7fe      	b.n	8017412 <prvSwitchTimerLists+0x7e>
 8017414:	20006470 	.word	0x20006470
 8017418:	20006474 	.word	0x20006474

0801741c <prvTimerTask>:
{
 801741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017420:	4e9a      	ldr	r6, [pc, #616]	; (801768c <prvTimerTask+0x270>)
 8017422:	b087      	sub	sp, #28
 8017424:	4d9a      	ldr	r5, [pc, #616]	; (8017690 <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 8017426:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 801742a:	4c9a      	ldr	r4, [pc, #616]	; (8017694 <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801742c:	6833      	ldr	r3, [r6, #0]
 801742e:	681f      	ldr	r7, [r3, #0]
 8017430:	2f00      	cmp	r7, #0
 8017432:	f000 80ac 	beq.w	801758e <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017436:	68db      	ldr	r3, [r3, #12]
 8017438:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 801743a:	f7ff fa01 	bl	8016840 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801743e:	f7ff fa07 	bl	8016850 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8017442:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8017444:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8017446:	4290      	cmp	r0, r2
 8017448:	f0c0 80a9 	bcc.w	801759e <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801744c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 801744e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017450:	f200 80ca 	bhi.w	80175e8 <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 8017454:	f7ff fb50 	bl	8016af8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017458:	6832      	ldr	r2, [r6, #0]
 801745a:	68d2      	ldr	r2, [r2, #12]
 801745c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017460:	f10b 0804 	add.w	r8, fp, #4
 8017464:	4640      	mov	r0, r8
 8017466:	f7fe f9c7 	bl	80157f8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801746a:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 801746e:	0743      	lsls	r3, r0, #29
 8017470:	f100 80ca 	bmi.w	8017608 <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017474:	f020 0001 	bic.w	r0, r0, #1
 8017478:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801747c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8017480:	4658      	mov	r0, fp
 8017482:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017484:	2200      	movs	r2, #0
 8017486:	a902      	add	r1, sp, #8
 8017488:	6820      	ldr	r0, [r4, #0]
 801748a:	f7fe fcf5 	bl	8015e78 <xQueueReceive>
 801748e:	2800      	cmp	r0, #0
 8017490:	d0cc      	beq.n	801742c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017492:	9b02      	ldr	r3, [sp, #8]
 8017494:	2b00      	cmp	r3, #0
 8017496:	db71      	blt.n	801757c <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017498:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	b113      	cbz	r3, 80174a4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801749e:	1d38      	adds	r0, r7, #4
 80174a0:	f7fe f9aa 	bl	80157f8 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80174a4:	f7ff f9d4 	bl	8016850 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80174a8:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80174aa:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 80174ac:	4298      	cmp	r0, r3
 80174ae:	d37d      	bcc.n	80175ac <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 80174b0:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80174b2:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 80174b6:	2b09      	cmp	r3, #9
 80174b8:	d8e4      	bhi.n	8017484 <prvTimerTask+0x68>
 80174ba:	e8df f003 	tbb	[pc, r3]
 80174be:	0505      	.short	0x0505
 80174c0:	56394f05 	.word	0x56394f05
 80174c4:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80174c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80174cc:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80174ce:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80174d2:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80174d4:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80174d6:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80174da:	185a      	adds	r2, r3, r1
 80174dc:	bf2c      	ite	cs
 80174de:	2001      	movcs	r0, #1
 80174e0:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 80174e2:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80174e4:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80174e6:	f200 8081 	bhi.w	80175ec <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174ea:	eba8 0303 	sub.w	r3, r8, r3
 80174ee:	4299      	cmp	r1, r3
 80174f0:	f200 80b5 	bhi.w	801765e <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80174f4:	6a3b      	ldr	r3, [r7, #32]
 80174f6:	4638      	mov	r0, r7
 80174f8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80174fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80174fe:	0759      	lsls	r1, r3, #29
 8017500:	d5c0      	bpl.n	8017484 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017502:	2200      	movs	r2, #0
 8017504:	69bb      	ldr	r3, [r7, #24]
 8017506:	4638      	mov	r0, r7
 8017508:	9200      	str	r2, [sp, #0]
 801750a:	9a03      	ldr	r2, [sp, #12]
 801750c:	441a      	add	r2, r3
 801750e:	2300      	movs	r3, #0
 8017510:	4619      	mov	r1, r3
 8017512:	f7ff ff07 	bl	8017324 <xTimerGenericCommand>
							configASSERT( xResult );
 8017516:	2800      	cmp	r0, #0
 8017518:	d1b4      	bne.n	8017484 <prvTimerTask+0x68>
 801751a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801751e:	b672      	cpsid	i
 8017520:	f383 8811 	msr	BASEPRI, r3
 8017524:	f3bf 8f6f 	isb	sy
 8017528:	f3bf 8f4f 	dsb	sy
 801752c:	b662      	cpsie	i
 801752e:	e7fe      	b.n	801752e <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017530:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017534:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017536:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801753a:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801753c:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017540:	2b00      	cmp	r3, #0
 8017542:	f000 8098 	beq.w	8017676 <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017546:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017548:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801754a:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 801754c:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801754e:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8017550:	d856      	bhi.n	8017600 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017552:	4b51      	ldr	r3, [pc, #324]	; (8017698 <prvTimerTask+0x27c>)
 8017554:	6818      	ldr	r0, [r3, #0]
 8017556:	f7fe f937 	bl	80157c8 <vListInsert>
	return xProcessTimerNow;
 801755a:	e793      	b.n	8017484 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801755c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017560:	f023 0301 	bic.w	r3, r3, #1
 8017564:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 8017568:	e78c      	b.n	8017484 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801756a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801756e:	079a      	lsls	r2, r3, #30
 8017570:	d56c      	bpl.n	801764c <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017572:	f023 0301 	bic.w	r3, r3, #1
 8017576:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801757a:	e783      	b.n	8017484 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801757c:	9b03      	ldr	r3, [sp, #12]
 801757e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017582:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017584:	9b02      	ldr	r3, [sp, #8]
 8017586:	2b00      	cmp	r3, #0
 8017588:	f6ff af7c 	blt.w	8017484 <prvTimerTask+0x68>
 801758c:	e784      	b.n	8017498 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 801758e:	f7ff f957 	bl	8016840 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8017592:	f7ff f95d 	bl	8016850 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8017596:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8017598:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 801759a:	4282      	cmp	r2, r0
 801759c:	d909      	bls.n	80175b2 <prvTimerTask+0x196>
		prvSwitchTimerLists();
 801759e:	f7ff fef9 	bl	8017394 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80175a2:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80175a6:	f7ff faa7 	bl	8016af8 <xTaskResumeAll>
 80175aa:	e76b      	b.n	8017484 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 80175ac:	f7ff fef2 	bl	8017394 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80175b0:	e77e      	b.n	80174b0 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80175b2:	4b39      	ldr	r3, [pc, #228]	; (8017698 <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 80175b4:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80175b8:	681a      	ldr	r2, [r3, #0]
 80175ba:	6812      	ldr	r2, [r2, #0]
 80175bc:	fab2 f282 	clz	r2, r2
 80175c0:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80175c2:	eba7 010a 	sub.w	r1, r7, sl
 80175c6:	6820      	ldr	r0, [r4, #0]
 80175c8:	f7fe fe7e 	bl	80162c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80175cc:	f7ff fa94 	bl	8016af8 <xTaskResumeAll>
 80175d0:	2800      	cmp	r0, #0
 80175d2:	f47f af57 	bne.w	8017484 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 80175d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80175da:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 80175de:	f3bf 8f4f 	dsb	sy
 80175e2:	f3bf 8f6f 	isb	sy
 80175e6:	e74d      	b.n	8017484 <prvTimerTask+0x68>
 80175e8:	2200      	movs	r2, #0
 80175ea:	e7ea      	b.n	80175c2 <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80175ec:	4543      	cmp	r3, r8
 80175ee:	d902      	bls.n	80175f6 <prvTimerTask+0x1da>
 80175f0:	2800      	cmp	r0, #0
 80175f2:	f43f af7f 	beq.w	80174f4 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80175f6:	1d39      	adds	r1, r7, #4
 80175f8:	6830      	ldr	r0, [r6, #0]
 80175fa:	f7fe f8e5 	bl	80157c8 <vListInsert>
	return xProcessTimerNow;
 80175fe:	e741      	b.n	8017484 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017600:	6830      	ldr	r0, [r6, #0]
 8017602:	f7fe f8e1 	bl	80157c8 <vListInsert>
 8017606:	e73d      	b.n	8017484 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017608:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801760c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017610:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8017612:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017614:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8017618:	d31c      	bcc.n	8017654 <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801761a:	ebaa 0307 	sub.w	r3, sl, r7
 801761e:	429a      	cmp	r2, r3
 8017620:	d823      	bhi.n	801766a <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017622:	2300      	movs	r3, #0
 8017624:	463a      	mov	r2, r7
 8017626:	4658      	mov	r0, fp
 8017628:	4619      	mov	r1, r3
 801762a:	9300      	str	r3, [sp, #0]
 801762c:	f7ff fe7a 	bl	8017324 <xTimerGenericCommand>
			configASSERT( xResult );
 8017630:	2800      	cmp	r0, #0
 8017632:	f47f af23 	bne.w	801747c <prvTimerTask+0x60>
 8017636:	f04f 0330 	mov.w	r3, #48	; 0x30
 801763a:	b672      	cpsid	i
 801763c:	f383 8811 	msr	BASEPRI, r3
 8017640:	f3bf 8f6f 	isb	sy
 8017644:	f3bf 8f4f 	dsb	sy
 8017648:	b662      	cpsie	i
 801764a:	e7fe      	b.n	801764a <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 801764c:	4638      	mov	r0, r7
 801764e:	f000 fa97 	bl	8017b80 <vPortFree>
 8017652:	e717      	b.n	8017484 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017654:	4641      	mov	r1, r8
 8017656:	6830      	ldr	r0, [r6, #0]
 8017658:	f7fe f8b6 	bl	80157c8 <vListInsert>
	return xProcessTimerNow;
 801765c:	e70e      	b.n	801747c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801765e:	4b0e      	ldr	r3, [pc, #56]	; (8017698 <prvTimerTask+0x27c>)
 8017660:	1d39      	adds	r1, r7, #4
 8017662:	6818      	ldr	r0, [r3, #0]
 8017664:	f7fe f8b0 	bl	80157c8 <vListInsert>
	return xProcessTimerNow;
 8017668:	e70c      	b.n	8017484 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801766a:	4b0b      	ldr	r3, [pc, #44]	; (8017698 <prvTimerTask+0x27c>)
 801766c:	4641      	mov	r1, r8
 801766e:	6818      	ldr	r0, [r3, #0]
 8017670:	f7fe f8aa 	bl	80157c8 <vListInsert>
	return xProcessTimerNow;
 8017674:	e702      	b.n	801747c <prvTimerTask+0x60>
 8017676:	f04f 0330 	mov.w	r3, #48	; 0x30
 801767a:	b672      	cpsid	i
 801767c:	f383 8811 	msr	BASEPRI, r3
 8017680:	f3bf 8f6f 	isb	sy
 8017684:	f3bf 8f4f 	dsb	sy
 8017688:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801768a:	e7fe      	b.n	801768a <prvTimerTask+0x26e>
 801768c:	20006470 	.word	0x20006470
 8017690:	20006540 	.word	0x20006540
 8017694:	2000658c 	.word	0x2000658c
 8017698:	20006474 	.word	0x20006474

0801769c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801769c:	4808      	ldr	r0, [pc, #32]	; (80176c0 <prvPortStartFirstTask+0x24>)
 801769e:	6800      	ldr	r0, [r0, #0]
 80176a0:	6800      	ldr	r0, [r0, #0]
 80176a2:	f380 8808 	msr	MSP, r0
 80176a6:	f04f 0000 	mov.w	r0, #0
 80176aa:	f380 8814 	msr	CONTROL, r0
 80176ae:	b662      	cpsie	i
 80176b0:	b661      	cpsie	f
 80176b2:	f3bf 8f4f 	dsb	sy
 80176b6:	f3bf 8f6f 	isb	sy
 80176ba:	df00      	svc	0
 80176bc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80176be:	0000      	.short	0x0000
 80176c0:	e000ed08 	.word	0xe000ed08

080176c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80176c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80176d4 <vPortEnableVFP+0x10>
 80176c8:	6801      	ldr	r1, [r0, #0]
 80176ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80176ce:	6001      	str	r1, [r0, #0]
 80176d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80176d2:	0000      	.short	0x0000
 80176d4:	e000ed88 	.word	0xe000ed88

080176d8 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80176d8:	4b10      	ldr	r3, [pc, #64]	; (801771c <prvTaskExitError+0x44>)
{
 80176da:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80176dc:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80176de:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 80176e0:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80176e2:	3301      	adds	r3, #1
 80176e4:	d00a      	beq.n	80176fc <prvTaskExitError+0x24>
 80176e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80176ea:	b672      	cpsid	i
 80176ec:	f383 8811 	msr	BASEPRI, r3
 80176f0:	f3bf 8f6f 	isb	sy
 80176f4:	f3bf 8f4f 	dsb	sy
 80176f8:	b662      	cpsie	i
 80176fa:	e7fe      	b.n	80176fa <prvTaskExitError+0x22>
 80176fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017700:	b672      	cpsid	i
 8017702:	f383 8811 	msr	BASEPRI, r3
 8017706:	f3bf 8f6f 	isb	sy
 801770a:	f3bf 8f4f 	dsb	sy
 801770e:	b662      	cpsie	i
	while( ulDummy == 0 )
 8017710:	9b01      	ldr	r3, [sp, #4]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d0fc      	beq.n	8017710 <prvTaskExitError+0x38>
}
 8017716:	b002      	add	sp, #8
 8017718:	4770      	bx	lr
 801771a:	bf00      	nop
 801771c:	20000410 	.word	0x20000410

08017720 <pxPortInitialiseStack>:
{
 8017720:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017722:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017726:	4809      	ldr	r0, [pc, #36]	; (801774c <pxPortInitialiseStack+0x2c>)
{
 8017728:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801772a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801772e:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017732:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8017736:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801773a:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801773e:	f06f 0102 	mvn.w	r1, #2
}
 8017742:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017746:	f843 1c24 	str.w	r1, [r3, #-36]
}
 801774a:	4770      	bx	lr
 801774c:	080176d9 	.word	0x080176d9

08017750 <SVC_Handler>:
	__asm volatile (
 8017750:	4b07      	ldr	r3, [pc, #28]	; (8017770 <pxCurrentTCBConst2>)
 8017752:	6819      	ldr	r1, [r3, #0]
 8017754:	6808      	ldr	r0, [r1, #0]
 8017756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801775a:	f380 8809 	msr	PSP, r0
 801775e:	f3bf 8f6f 	isb	sy
 8017762:	f04f 0000 	mov.w	r0, #0
 8017766:	f380 8811 	msr	BASEPRI, r0
 801776a:	4770      	bx	lr
 801776c:	f3af 8000 	nop.w

08017770 <pxCurrentTCBConst2>:
 8017770:	20006348 	.word	0x20006348

08017774 <vPortEnterCritical>:
 8017774:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017778:	b672      	cpsid	i
 801777a:	f383 8811 	msr	BASEPRI, r3
 801777e:	f3bf 8f6f 	isb	sy
 8017782:	f3bf 8f4f 	dsb	sy
 8017786:	b662      	cpsie	i
	uxCriticalNesting++;
 8017788:	4a0c      	ldr	r2, [pc, #48]	; (80177bc <vPortEnterCritical+0x48>)
 801778a:	6813      	ldr	r3, [r2, #0]
 801778c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801778e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8017790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8017792:	d000      	beq.n	8017796 <vPortEnterCritical+0x22>
}
 8017794:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017796:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801779a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 801779e:	b2db      	uxtb	r3, r3
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d0f7      	beq.n	8017794 <vPortEnterCritical+0x20>
 80177a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80177a8:	b672      	cpsid	i
 80177aa:	f383 8811 	msr	BASEPRI, r3
 80177ae:	f3bf 8f6f 	isb	sy
 80177b2:	f3bf 8f4f 	dsb	sy
 80177b6:	b662      	cpsie	i
 80177b8:	e7fe      	b.n	80177b8 <vPortEnterCritical+0x44>
 80177ba:	bf00      	nop
 80177bc:	20000410 	.word	0x20000410

080177c0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80177c0:	4a09      	ldr	r2, [pc, #36]	; (80177e8 <vPortExitCritical+0x28>)
 80177c2:	6813      	ldr	r3, [r2, #0]
 80177c4:	b953      	cbnz	r3, 80177dc <vPortExitCritical+0x1c>
 80177c6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80177ca:	b672      	cpsid	i
 80177cc:	f383 8811 	msr	BASEPRI, r3
 80177d0:	f3bf 8f6f 	isb	sy
 80177d4:	f3bf 8f4f 	dsb	sy
 80177d8:	b662      	cpsie	i
 80177da:	e7fe      	b.n	80177da <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80177dc:	3b01      	subs	r3, #1
 80177de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80177e0:	b90b      	cbnz	r3, 80177e6 <vPortExitCritical+0x26>
	__asm volatile
 80177e2:	f383 8811 	msr	BASEPRI, r3
}
 80177e6:	4770      	bx	lr
 80177e8:	20000410 	.word	0x20000410
 80177ec:	ffffffff 	.word	0xffffffff

080177f0 <PendSV_Handler>:
	__asm volatile
 80177f0:	f3ef 8009 	mrs	r0, PSP
 80177f4:	f3bf 8f6f 	isb	sy
 80177f8:	4b15      	ldr	r3, [pc, #84]	; (8017850 <pxCurrentTCBConst>)
 80177fa:	681a      	ldr	r2, [r3, #0]
 80177fc:	f01e 0f10 	tst.w	lr, #16
 8017800:	bf08      	it	eq
 8017802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801780a:	6010      	str	r0, [r2, #0]
 801780c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017810:	f04f 0030 	mov.w	r0, #48	; 0x30
 8017814:	b672      	cpsid	i
 8017816:	f380 8811 	msr	BASEPRI, r0
 801781a:	f3bf 8f4f 	dsb	sy
 801781e:	f3bf 8f6f 	isb	sy
 8017822:	b662      	cpsie	i
 8017824:	f7ff f9ae 	bl	8016b84 <vTaskSwitchContext>
 8017828:	f04f 0000 	mov.w	r0, #0
 801782c:	f380 8811 	msr	BASEPRI, r0
 8017830:	bc09      	pop	{r0, r3}
 8017832:	6819      	ldr	r1, [r3, #0]
 8017834:	6808      	ldr	r0, [r1, #0]
 8017836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801783a:	f01e 0f10 	tst.w	lr, #16
 801783e:	bf08      	it	eq
 8017840:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017844:	f380 8809 	msr	PSP, r0
 8017848:	f3bf 8f6f 	isb	sy
 801784c:	4770      	bx	lr
 801784e:	bf00      	nop

08017850 <pxCurrentTCBConst>:
 8017850:	20006348 	.word	0x20006348

08017854 <SysTick_Handler>:
{
 8017854:	b508      	push	{r3, lr}
	__asm volatile
 8017856:	f04f 0330 	mov.w	r3, #48	; 0x30
 801785a:	b672      	cpsid	i
 801785c:	f383 8811 	msr	BASEPRI, r3
 8017860:	f3bf 8f6f 	isb	sy
 8017864:	f3bf 8f4f 	dsb	sy
 8017868:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801786a:	f7fe ffff 	bl	801686c <xTaskIncrementTick>
 801786e:	b128      	cbz	r0, 801787c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017870:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017878:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 801787c:	2300      	movs	r3, #0
 801787e:	f383 8811 	msr	BASEPRI, r3
}
 8017882:	bd08      	pop	{r3, pc}

08017884 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017884:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8017888:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801788a:	4b06      	ldr	r3, [pc, #24]	; (80178a4 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801788c:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801788e:	4806      	ldr	r0, [pc, #24]	; (80178a8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017890:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017892:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	fba0 0303 	umull	r0, r3, r0, r3
 801789a:	099b      	lsrs	r3, r3, #6
 801789c:	3b01      	subs	r3, #1
 801789e:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80178a0:	6111      	str	r1, [r2, #16]
}
 80178a2:	4770      	bx	lr
 80178a4:	20000284 	.word	0x20000284
 80178a8:	10624dd3 	.word	0x10624dd3

080178ac <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80178ac:	4b30      	ldr	r3, [pc, #192]	; (8017970 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80178ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80178b2:	4830      	ldr	r0, [pc, #192]	; (8017974 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80178b4:	4930      	ldr	r1, [pc, #192]	; (8017978 <xPortStartScheduler+0xcc>)
{
 80178b6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80178b8:	781a      	ldrb	r2, [r3, #0]
{
 80178ba:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80178bc:	b2d2      	uxtb	r2, r2
 80178be:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80178c0:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80178c2:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80178c6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80178c8:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80178ca:	b2db      	uxtb	r3, r3
 80178cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80178d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80178d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178dc:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80178de:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178e0:	d50f      	bpl.n	8017902 <xPortStartScheduler+0x56>
 80178e2:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80178e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80178e8:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178ea:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80178ec:	005b      	lsls	r3, r3, #1
 80178ee:	b2db      	uxtb	r3, r3
 80178f0:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80178f8:	061b      	lsls	r3, r3, #24
 80178fa:	d4f3      	bmi.n	80178e4 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80178fc:	2903      	cmp	r1, #3
 80178fe:	d00b      	beq.n	8017918 <xPortStartScheduler+0x6c>
 8017900:	6001      	str	r1, [r0, #0]
	__asm volatile
 8017902:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017906:	b672      	cpsid	i
 8017908:	f383 8811 	msr	BASEPRI, r3
 801790c:	f3bf 8f6f 	isb	sy
 8017910:	f3bf 8f4f 	dsb	sy
 8017914:	b662      	cpsie	i
 8017916:	e7fe      	b.n	8017916 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017918:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801791a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801791e:	4a14      	ldr	r2, [pc, #80]	; (8017970 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017920:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017924:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8017926:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017928:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801792a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801792c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8017930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017934:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017938:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 801793c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017940:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8017944:	f7ff ff9e 	bl	8017884 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8017948:	4b0c      	ldr	r3, [pc, #48]	; (801797c <xPortStartScheduler+0xd0>)
 801794a:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801794c:	f7ff feba 	bl	80176c4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017950:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8017954:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017958:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 801795c:	f7ff fe9e 	bl	801769c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8017960:	f7ff f910 	bl	8016b84 <vTaskSwitchContext>
}
 8017964:	4628      	mov	r0, r5
	prvTaskExitError();
 8017966:	f7ff feb7 	bl	80176d8 <prvTaskExitError>
}
 801796a:	b003      	add	sp, #12
 801796c:	bd30      	pop	{r4, r5, pc}
 801796e:	bf00      	nop
 8017970:	e000e400 	.word	0xe000e400
 8017974:	20006598 	.word	0x20006598
 8017978:	20006594 	.word	0x20006594
 801797c:	20000410 	.word	0x20000410

08017980 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017980:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017984:	2b0f      	cmp	r3, #15
 8017986:	d910      	bls.n	80179aa <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017988:	4913      	ldr	r1, [pc, #76]	; (80179d8 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801798a:	4a14      	ldr	r2, [pc, #80]	; (80179dc <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801798c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801798e:	7812      	ldrb	r2, [r2, #0]
 8017990:	429a      	cmp	r2, r3
 8017992:	d90a      	bls.n	80179aa <vPortValidateInterruptPriority+0x2a>
 8017994:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017998:	b672      	cpsid	i
 801799a:	f383 8811 	msr	BASEPRI, r3
 801799e:	f3bf 8f6f 	isb	sy
 80179a2:	f3bf 8f4f 	dsb	sy
 80179a6:	b662      	cpsie	i
 80179a8:	e7fe      	b.n	80179a8 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80179aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80179ae:	4a0c      	ldr	r2, [pc, #48]	; (80179e0 <vPortValidateInterruptPriority+0x60>)
 80179b0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80179b4:	6812      	ldr	r2, [r2, #0]
 80179b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80179ba:	4293      	cmp	r3, r2
 80179bc:	d90a      	bls.n	80179d4 <vPortValidateInterruptPriority+0x54>
 80179be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80179c2:	b672      	cpsid	i
 80179c4:	f383 8811 	msr	BASEPRI, r3
 80179c8:	f3bf 8f6f 	isb	sy
 80179cc:	f3bf 8f4f 	dsb	sy
 80179d0:	b662      	cpsie	i
 80179d2:	e7fe      	b.n	80179d2 <vPortValidateInterruptPriority+0x52>
	}
 80179d4:	4770      	bx	lr
 80179d6:	bf00      	nop
 80179d8:	e000e3f0 	.word	0xe000e3f0
 80179dc:	20006594 	.word	0x20006594
 80179e0:	20006598 	.word	0x20006598

080179e4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80179e4:	4b16      	ldr	r3, [pc, #88]	; (8017a40 <prvInsertBlockIntoFreeList+0x5c>)
{
 80179e6:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80179e8:	461a      	mov	r2, r3
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	4283      	cmp	r3, r0
 80179ee:	d3fb      	bcc.n	80179e8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80179f0:	6851      	ldr	r1, [r2, #4]
 80179f2:	eb02 0c01 	add.w	ip, r2, r1
 80179f6:	4560      	cmp	r0, ip
 80179f8:	d00b      	beq.n	8017a12 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80179fa:	6841      	ldr	r1, [r0, #4]
 80179fc:	eb00 0c01 	add.w	ip, r0, r1
 8017a00:	4563      	cmp	r3, ip
 8017a02:	d00e      	beq.n	8017a22 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017a04:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017a06:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017a08:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017a0c:	bf18      	it	ne
 8017a0e:	6010      	strne	r0, [r2, #0]
}
 8017a10:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017a12:	6844      	ldr	r4, [r0, #4]
 8017a14:	4610      	mov	r0, r2
 8017a16:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017a18:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017a1c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017a1e:	4563      	cmp	r3, ip
 8017a20:	d1f0      	bne.n	8017a04 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017a22:	4c08      	ldr	r4, [pc, #32]	; (8017a44 <prvInsertBlockIntoFreeList+0x60>)
 8017a24:	6824      	ldr	r4, [r4, #0]
 8017a26:	42a3      	cmp	r3, r4
 8017a28:	d0ec      	beq.n	8017a04 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 8017a2a:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017a2c:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017a30:	4421      	add	r1, r4
}
 8017a32:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017a36:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017a3a:	bf18      	it	ne
 8017a3c:	6010      	strne	r0, [r2, #0]
}
 8017a3e:	4770      	bx	lr
 8017a40:	2001e5ac 	.word	0x2001e5ac
 8017a44:	2000659c 	.word	0x2000659c

08017a48 <pvPortMalloc>:
{
 8017a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a4c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8017a4e:	f7fe fef7 	bl	8016840 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8017a52:	f8df c128 	ldr.w	ip, [pc, #296]	; 8017b7c <pvPortMalloc+0x134>
 8017a56:	f8dc 3000 	ldr.w	r3, [ip]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d05d      	beq.n	8017b1a <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017a5e:	4b42      	ldr	r3, [pc, #264]	; (8017b68 <pvPortMalloc+0x120>)
 8017a60:	681d      	ldr	r5, [r3, #0]
 8017a62:	422c      	tst	r4, r5
 8017a64:	d130      	bne.n	8017ac8 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 8017a66:	b37c      	cbz	r4, 8017ac8 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017a68:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8017a6a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017a6e:	d002      	beq.n	8017a76 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017a70:	f021 0107 	bic.w	r1, r1, #7
 8017a74:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017a76:	b339      	cbz	r1, 8017ac8 <pvPortMalloc+0x80>
 8017a78:	4f3c      	ldr	r7, [pc, #240]	; (8017b6c <pvPortMalloc+0x124>)
 8017a7a:	683e      	ldr	r6, [r7, #0]
 8017a7c:	428e      	cmp	r6, r1
 8017a7e:	d323      	bcc.n	8017ac8 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 8017a80:	483b      	ldr	r0, [pc, #236]	; (8017b70 <pvPortMalloc+0x128>)
 8017a82:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017a84:	e003      	b.n	8017a8e <pvPortMalloc+0x46>
 8017a86:	6823      	ldr	r3, [r4, #0]
 8017a88:	b123      	cbz	r3, 8017a94 <pvPortMalloc+0x4c>
 8017a8a:	4620      	mov	r0, r4
 8017a8c:	461c      	mov	r4, r3
 8017a8e:	6862      	ldr	r2, [r4, #4]
 8017a90:	428a      	cmp	r2, r1
 8017a92:	d3f8      	bcc.n	8017a86 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8017a94:	f8dc 3000 	ldr.w	r3, [ip]
 8017a98:	42a3      	cmp	r3, r4
 8017a9a:	d015      	beq.n	8017ac8 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017a9c:	6803      	ldr	r3, [r0, #0]
 8017a9e:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017aa2:	6823      	ldr	r3, [r4, #0]
 8017aa4:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017aa6:	1a53      	subs	r3, r2, r1
 8017aa8:	2b10      	cmp	r3, #16
 8017aaa:	d91b      	bls.n	8017ae4 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017aac:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017aae:	0742      	lsls	r2, r0, #29
 8017ab0:	d013      	beq.n	8017ada <pvPortMalloc+0x92>
 8017ab2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017ab6:	b672      	cpsid	i
 8017ab8:	f383 8811 	msr	BASEPRI, r3
 8017abc:	f3bf 8f6f 	isb	sy
 8017ac0:	f3bf 8f4f 	dsb	sy
 8017ac4:	b662      	cpsie	i
 8017ac6:	e7fe      	b.n	8017ac6 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8017ac8:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 8017acc:	f7ff f814 	bl	8016af8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8017ad0:	f7e9 fbb4 	bl	800123c <vApplicationMallocFailedHook>
}
 8017ad4:	4640      	mov	r0, r8
 8017ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017ada:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017adc:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017ade:	f7ff ff81 	bl	80179e4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017ae2:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017ae4:	4b23      	ldr	r3, [pc, #140]	; (8017b74 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017ae6:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017ae8:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017aea:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017aec:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017aee:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017af0:	bf38      	it	cc
 8017af2:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8017af4:	2300      	movs	r3, #0
 8017af6:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 8017afa:	f7fe fffd 	bl	8016af8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017afe:	f018 0f07 	tst.w	r8, #7
 8017b02:	d0e7      	beq.n	8017ad4 <pvPortMalloc+0x8c>
 8017b04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b08:	b672      	cpsid	i
 8017b0a:	f383 8811 	msr	BASEPRI, r3
 8017b0e:	f3bf 8f6f 	isb	sy
 8017b12:	f3bf 8f4f 	dsb	sy
 8017b16:	b662      	cpsie	i
 8017b18:	e7fe      	b.n	8017b18 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 8017b1a:	4b17      	ldr	r3, [pc, #92]	; (8017b78 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017b1c:	075d      	lsls	r5, r3, #29
 8017b1e:	d11b      	bne.n	8017b58 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017b20:	461a      	mov	r2, r3
 8017b22:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8017b26:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8017b28:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 8017b2a:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017b2c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017b30:	f023 0307 	bic.w	r3, r3, #7
}
 8017b34:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017b36:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8017b38:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8017b3c:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017b40:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017b44:	4b0a      	ldr	r3, [pc, #40]	; (8017b70 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 8017b46:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017b4a:	4b0a      	ldr	r3, [pc, #40]	; (8017b74 <pvPortMalloc+0x12c>)
 8017b4c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017b4e:	4b07      	ldr	r3, [pc, #28]	; (8017b6c <pvPortMalloc+0x124>)
 8017b50:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017b52:	4b05      	ldr	r3, [pc, #20]	; (8017b68 <pvPortMalloc+0x120>)
 8017b54:	601e      	str	r6, [r3, #0]
}
 8017b56:	e784      	b.n	8017a62 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017b58:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017b5a:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8017b5e:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017b62:	4610      	mov	r0, r2
 8017b64:	e7e0      	b.n	8017b28 <pvPortMalloc+0xe0>
 8017b66:	bf00      	nop
 8017b68:	2001e5a0 	.word	0x2001e5a0
 8017b6c:	2001e5a4 	.word	0x2001e5a4
 8017b70:	2001e5ac 	.word	0x2001e5ac
 8017b74:	2001e5a8 	.word	0x2001e5a8
 8017b78:	200065a0 	.word	0x200065a0
 8017b7c:	2000659c 	.word	0x2000659c

08017b80 <vPortFree>:
	if( pv != NULL )
 8017b80:	b1f0      	cbz	r0, 8017bc0 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017b82:	4a1c      	ldr	r2, [pc, #112]	; (8017bf4 <vPortFree+0x74>)
 8017b84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b88:	6812      	ldr	r2, [r2, #0]
 8017b8a:	4213      	tst	r3, r2
 8017b8c:	d00d      	beq.n	8017baa <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017b8e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8017b92:	b1b1      	cbz	r1, 8017bc2 <vPortFree+0x42>
 8017b94:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b98:	b672      	cpsid	i
 8017b9a:	f383 8811 	msr	BASEPRI, r3
 8017b9e:	f3bf 8f6f 	isb	sy
 8017ba2:	f3bf 8f4f 	dsb	sy
 8017ba6:	b662      	cpsie	i
 8017ba8:	e7fe      	b.n	8017ba8 <vPortFree+0x28>
 8017baa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017bae:	b672      	cpsid	i
 8017bb0:	f383 8811 	msr	BASEPRI, r3
 8017bb4:	f3bf 8f6f 	isb	sy
 8017bb8:	f3bf 8f4f 	dsb	sy
 8017bbc:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017bbe:	e7fe      	b.n	8017bbe <vPortFree+0x3e>
 8017bc0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017bc2:	ea23 0302 	bic.w	r3, r3, r2
{
 8017bc6:	b500      	push	{lr}
 8017bc8:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017bca:	f840 3c04 	str.w	r3, [r0, #-4]
 8017bce:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8017bd0:	f7fe fe36 	bl	8016840 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017bd4:	4a08      	ldr	r2, [pc, #32]	; (8017bf8 <vPortFree+0x78>)
 8017bd6:	9801      	ldr	r0, [sp, #4]
 8017bd8:	6811      	ldr	r1, [r2, #0]
 8017bda:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017bde:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017be0:	440b      	add	r3, r1
 8017be2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017be4:	f7ff fefe 	bl	80179e4 <prvInsertBlockIntoFreeList>
}
 8017be8:	b003      	add	sp, #12
 8017bea:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8017bee:	f7fe bf83 	b.w	8016af8 <xTaskResumeAll>
 8017bf2:	bf00      	nop
 8017bf4:	2001e5a0 	.word	0x2001e5a0
 8017bf8:	2001e5a4 	.word	0x2001e5a4

08017bfc <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8017bfc:	f003 bb10 	b.w	801b220 <pbuf_free>

08017c00 <tcpip_thread>:
{
 8017c00:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8017c02:	4839      	ldr	r0, [pc, #228]	; (8017ce8 <tcpip_thread+0xe8>)
{
 8017c04:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8017c06:	f00b feff 	bl	8023a08 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8017c0a:	4b38      	ldr	r3, [pc, #224]	; (8017cec <tcpip_thread+0xec>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	b113      	cbz	r3, 8017c16 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8017c10:	4a37      	ldr	r2, [pc, #220]	; (8017cf0 <tcpip_thread+0xf0>)
 8017c12:	6810      	ldr	r0, [r2, #0]
 8017c14:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8017c16:	4d34      	ldr	r5, [pc, #208]	; (8017ce8 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8017c18:	4e36      	ldr	r6, [pc, #216]	; (8017cf4 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017c1a:	4f37      	ldr	r7, [pc, #220]	; (8017cf8 <tcpip_thread+0xf8>)
 8017c1c:	e010      	b.n	8017c40 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8017c1e:	b168      	cbz	r0, 8017c3c <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8017c20:	4628      	mov	r0, r5
 8017c22:	f00b fef7 	bl	8023a14 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8017c26:	4622      	mov	r2, r4
 8017c28:	a901      	add	r1, sp, #4
 8017c2a:	4630      	mov	r0, r6
 8017c2c:	f00b fea8 	bl	8023980 <sys_arch_mbox_fetch>
 8017c30:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8017c32:	4628      	mov	r0, r5
 8017c34:	f00b fee8 	bl	8023a08 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8017c38:	3401      	adds	r4, #1
 8017c3a:	d111      	bne.n	8017c60 <tcpip_thread+0x60>
    sys_check_timeouts();
 8017c3c:	f008 f85c 	bl	801fcf8 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8017c40:	f008 f882 	bl	801fd48 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8017c44:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8017c46:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8017c48:	d1e9      	bne.n	8017c1e <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8017c4a:	4628      	mov	r0, r5
 8017c4c:	f00b fee2 	bl	8023a14 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8017c50:	2200      	movs	r2, #0
 8017c52:	a901      	add	r1, sp, #4
 8017c54:	4630      	mov	r0, r6
 8017c56:	f00b fe93 	bl	8023980 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8017c5a:	4628      	mov	r0, r5
 8017c5c:	f00b fed4 	bl	8023a08 <sys_mutex_lock>
    if (msg == NULL) {
 8017c60:	9c01      	ldr	r4, [sp, #4]
 8017c62:	b37c      	cbz	r4, 8017cc4 <tcpip_thread+0xc4>
  switch (msg->type) {
 8017c64:	7823      	ldrb	r3, [r4, #0]
 8017c66:	2b04      	cmp	r3, #4
 8017c68:	d837      	bhi.n	8017cda <tcpip_thread+0xda>
 8017c6a:	e8df f003 	tbb	[pc, r3]
 8017c6e:	1821      	.short	0x1821
 8017c70:	070f      	.short	0x070f
 8017c72:	03          	.byte	0x03
 8017c73:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017c74:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8017c78:	4798      	blx	r3
      break;
 8017c7a:	e7e1      	b.n	8017c40 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017c7c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8017c80:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017c82:	4621      	mov	r1, r4
 8017c84:	2009      	movs	r0, #9
 8017c86:	f002 fdb3 	bl	801a7f0 <memp_free>
      break;
 8017c8a:	e7d9      	b.n	8017c40 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8017c8c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8017c90:	f008 f814 	bl	801fcbc <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017c94:	4621      	mov	r1, r4
 8017c96:	2009      	movs	r0, #9
 8017c98:	f002 fdaa 	bl	801a7f0 <memp_free>
      break;
 8017c9c:	e7d0      	b.n	8017c40 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8017c9e:	1d20      	adds	r0, r4, #4
 8017ca0:	c807      	ldmia	r0, {r0, r1, r2}
 8017ca2:	f007 ffed 	bl	801fc80 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017ca6:	4621      	mov	r1, r4
 8017ca8:	2009      	movs	r0, #9
 8017caa:	f002 fda1 	bl	801a7f0 <memp_free>
      break;
 8017cae:	e7c7      	b.n	8017c40 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8017cb0:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8017cb4:	6860      	ldr	r0, [r4, #4]
 8017cb6:	4798      	blx	r3
 8017cb8:	b958      	cbnz	r0, 8017cd2 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8017cba:	4621      	mov	r1, r4
 8017cbc:	200a      	movs	r0, #10
 8017cbe:	f002 fd97 	bl	801a7f0 <memp_free>
      break;
 8017cc2:	e7bd      	b.n	8017c40 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017cc4:	463b      	mov	r3, r7
 8017cc6:	2291      	movs	r2, #145	; 0x91
 8017cc8:	490c      	ldr	r1, [pc, #48]	; (8017cfc <tcpip_thread+0xfc>)
 8017cca:	480d      	ldr	r0, [pc, #52]	; (8017d00 <tcpip_thread+0x100>)
 8017ccc:	f00d fb72 	bl	80253b4 <iprintf>
      continue;
 8017cd0:	e7b6      	b.n	8017c40 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8017cd2:	6860      	ldr	r0, [r4, #4]
 8017cd4:	f003 faa4 	bl	801b220 <pbuf_free>
 8017cd8:	e7ef      	b.n	8017cba <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017cda:	463b      	mov	r3, r7
 8017cdc:	22cf      	movs	r2, #207	; 0xcf
 8017cde:	4907      	ldr	r1, [pc, #28]	; (8017cfc <tcpip_thread+0xfc>)
 8017ce0:	4807      	ldr	r0, [pc, #28]	; (8017d00 <tcpip_thread+0x100>)
 8017ce2:	f00d fb67 	bl	80253b4 <iprintf>
      break;
 8017ce6:	e7ab      	b.n	8017c40 <tcpip_thread+0x40>
 8017ce8:	2001e5b4 	.word	0x2001e5b4
 8017cec:	2001e5b8 	.word	0x2001e5b8
 8017cf0:	2001e5bc 	.word	0x2001e5bc
 8017cf4:	2001e5c0 	.word	0x2001e5c0
 8017cf8:	0802cda8 	.word	0x0802cda8
 8017cfc:	0802cdd8 	.word	0x0802cdd8
 8017d00:	0802a008 	.word	0x0802a008

08017d04 <tcpip_inpkt>:
{
 8017d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d06:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d08:	4814      	ldr	r0, [pc, #80]	; (8017d5c <tcpip_inpkt+0x58>)
{
 8017d0a:	460e      	mov	r6, r1
 8017d0c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d0e:	f00b fe59 	bl	80239c4 <sys_mbox_valid>
 8017d12:	b188      	cbz	r0, 8017d38 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8017d14:	22fe      	movs	r2, #254	; 0xfe
 8017d16:	4912      	ldr	r1, [pc, #72]	; (8017d60 <tcpip_inpkt+0x5c>)
 8017d18:	200a      	movs	r0, #10
 8017d1a:	f002 fd33 	bl	801a784 <memp_malloc_fn>
  if (msg == NULL) {
 8017d1e:	4604      	mov	r4, r0
 8017d20:	b1c0      	cbz	r0, 8017d54 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8017d22:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8017d24:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8017d26:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d28:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8017d2a:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d2c:	480b      	ldr	r0, [pc, #44]	; (8017d5c <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 8017d2e:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d30:	f00b fe1c 	bl	802396c <sys_mbox_trypost>
 8017d34:	b938      	cbnz	r0, 8017d46 <tcpip_inpkt+0x42>
}
 8017d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d38:	4b09      	ldr	r3, [pc, #36]	; (8017d60 <tcpip_inpkt+0x5c>)
 8017d3a:	22fc      	movs	r2, #252	; 0xfc
 8017d3c:	4909      	ldr	r1, [pc, #36]	; (8017d64 <tcpip_inpkt+0x60>)
 8017d3e:	480a      	ldr	r0, [pc, #40]	; (8017d68 <tcpip_inpkt+0x64>)
 8017d40:	f00d fb38 	bl	80253b4 <iprintf>
 8017d44:	e7e6      	b.n	8017d14 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8017d46:	4621      	mov	r1, r4
 8017d48:	200a      	movs	r0, #10
 8017d4a:	f002 fd51 	bl	801a7f0 <memp_free>
    return ERR_MEM;
 8017d4e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8017d54:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d5a:	bf00      	nop
 8017d5c:	2001e5c0 	.word	0x2001e5c0
 8017d60:	0802cda8 	.word	0x0802cda8
 8017d64:	0802cdf8 	.word	0x0802cdf8
 8017d68:	0802a008 	.word	0x0802a008

08017d6c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8017d6c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8017d70:	f013 0f18 	tst.w	r3, #24
 8017d74:	d002      	beq.n	8017d7c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8017d76:	4a03      	ldr	r2, [pc, #12]	; (8017d84 <tcpip_input+0x18>)
 8017d78:	f7ff bfc4 	b.w	8017d04 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 8017d7c:	4a02      	ldr	r2, [pc, #8]	; (8017d88 <tcpip_input+0x1c>)
 8017d7e:	f7ff bfc1 	b.w	8017d04 <tcpip_inpkt>
 8017d82:	bf00      	nop
 8017d84:	0802382d 	.word	0x0802382d
 8017d88:	08022a89 	.word	0x08022a89

08017d8c <tcpip_try_callback>:
{
 8017d8c:	b570      	push	{r4, r5, r6, lr}
 8017d8e:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d90:	4814      	ldr	r0, [pc, #80]	; (8017de4 <tcpip_try_callback+0x58>)
{
 8017d92:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d94:	f00b fe16 	bl	80239c4 <sys_mbox_valid>
 8017d98:	b188      	cbz	r0, 8017dbe <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8017d9a:	f240 125f 	movw	r2, #351	; 0x15f
 8017d9e:	4912      	ldr	r1, [pc, #72]	; (8017de8 <tcpip_try_callback+0x5c>)
 8017da0:	2009      	movs	r0, #9
 8017da2:	f002 fcef 	bl	801a784 <memp_malloc_fn>
  if (msg == NULL) {
 8017da6:	4604      	mov	r4, r0
 8017da8:	b1c0      	cbz	r0, 8017ddc <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8017daa:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017dac:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8017dae:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017db2:	480c      	ldr	r0, [pc, #48]	; (8017de4 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8017db4:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017db6:	f00b fdd9 	bl	802396c <sys_mbox_trypost>
 8017dba:	b940      	cbnz	r0, 8017dce <tcpip_try_callback+0x42>
}
 8017dbc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017dbe:	4b0a      	ldr	r3, [pc, #40]	; (8017de8 <tcpip_try_callback+0x5c>)
 8017dc0:	f240 125d 	movw	r2, #349	; 0x15d
 8017dc4:	4909      	ldr	r1, [pc, #36]	; (8017dec <tcpip_try_callback+0x60>)
 8017dc6:	480a      	ldr	r0, [pc, #40]	; (8017df0 <tcpip_try_callback+0x64>)
 8017dc8:	f00d faf4 	bl	80253b4 <iprintf>
 8017dcc:	e7e5      	b.n	8017d9a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8017dce:	4621      	mov	r1, r4
 8017dd0:	2009      	movs	r0, #9
 8017dd2:	f002 fd0d 	bl	801a7f0 <memp_free>
    return ERR_MEM;
 8017dd6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017dda:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8017ddc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017de0:	bd70      	pop	{r4, r5, r6, pc}
 8017de2:	bf00      	nop
 8017de4:	2001e5c0 	.word	0x2001e5c0
 8017de8:	0802cda8 	.word	0x0802cda8
 8017dec:	0802cdf8 	.word	0x0802cdf8
 8017df0:	0802a008 	.word	0x0802a008

08017df4 <tcpip_init>:
{
 8017df4:	b530      	push	{r4, r5, lr}
 8017df6:	b083      	sub	sp, #12
 8017df8:	4605      	mov	r5, r0
 8017dfa:	460c      	mov	r4, r1
  lwip_init();
 8017dfc:	f001 ffae 	bl	8019d5c <lwip_init>
  tcpip_init_done = initfunc;
 8017e00:	4a15      	ldr	r2, [pc, #84]	; (8017e58 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017e02:	2140      	movs	r1, #64	; 0x40
  tcpip_init_done_arg = arg;
 8017e04:	4b15      	ldr	r3, [pc, #84]	; (8017e5c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017e06:	4816      	ldr	r0, [pc, #88]	; (8017e60 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8017e08:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8017e0a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017e0c:	f00b fd98 	bl	8023940 <sys_mbox_new>
 8017e10:	b968      	cbnz	r0, 8017e2e <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8017e12:	4814      	ldr	r0, [pc, #80]	; (8017e64 <tcpip_init+0x70>)
 8017e14:	f00b fde8 	bl	80239e8 <sys_mutex_new>
 8017e18:	b9a8      	cbnz	r0, 8017e46 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e20:	4911      	ldr	r1, [pc, #68]	; (8017e68 <tcpip_init+0x74>)
 8017e22:	9200      	str	r2, [sp, #0]
 8017e24:	4811      	ldr	r0, [pc, #68]	; (8017e6c <tcpip_init+0x78>)
 8017e26:	f00b fdf9 	bl	8023a1c <sys_thread_new>
}
 8017e2a:	b003      	add	sp, #12
 8017e2c:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8017e2e:	4b10      	ldr	r3, [pc, #64]	; (8017e70 <tcpip_init+0x7c>)
 8017e30:	f240 2261 	movw	r2, #609	; 0x261
 8017e34:	490f      	ldr	r1, [pc, #60]	; (8017e74 <tcpip_init+0x80>)
 8017e36:	4810      	ldr	r0, [pc, #64]	; (8017e78 <tcpip_init+0x84>)
 8017e38:	f00d fabc 	bl	80253b4 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8017e3c:	4809      	ldr	r0, [pc, #36]	; (8017e64 <tcpip_init+0x70>)
 8017e3e:	f00b fdd3 	bl	80239e8 <sys_mutex_new>
 8017e42:	2800      	cmp	r0, #0
 8017e44:	d0e9      	beq.n	8017e1a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8017e46:	4b0a      	ldr	r3, [pc, #40]	; (8017e70 <tcpip_init+0x7c>)
 8017e48:	f240 2265 	movw	r2, #613	; 0x265
 8017e4c:	490b      	ldr	r1, [pc, #44]	; (8017e7c <tcpip_init+0x88>)
 8017e4e:	480a      	ldr	r0, [pc, #40]	; (8017e78 <tcpip_init+0x84>)
 8017e50:	f00d fab0 	bl	80253b4 <iprintf>
 8017e54:	e7e1      	b.n	8017e1a <tcpip_init+0x26>
 8017e56:	bf00      	nop
 8017e58:	2001e5b8 	.word	0x2001e5b8
 8017e5c:	2001e5bc 	.word	0x2001e5bc
 8017e60:	2001e5c0 	.word	0x2001e5c0
 8017e64:	2001e5b4 	.word	0x2001e5b4
 8017e68:	08017c01 	.word	0x08017c01
 8017e6c:	0802ce50 	.word	0x0802ce50
 8017e70:	0802cda8 	.word	0x0802cda8
 8017e74:	0802ce08 	.word	0x0802ce08
 8017e78:	0802a008 	.word	0x0802a008
 8017e7c:	0802ce2c 	.word	0x0802ce2c

08017e80 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8017e80:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8017e82:	4801      	ldr	r0, [pc, #4]	; (8017e88 <pbuf_free_callback+0x8>)
 8017e84:	f7ff bf82 	b.w	8017d8c <tcpip_try_callback>
 8017e88:	08017bfd 	.word	0x08017bfd

08017e8c <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8017e8c:	b1e8      	cbz	r0, 8017eca <fs_open+0x3e>
{
 8017e8e:	b570      	push	{r4, r5, r6, lr}
 8017e90:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8017e92:	b1b9      	cbz	r1, 8017ec4 <fs_open+0x38>
 8017e94:	4606      	mov	r6, r0
 8017e96:	490e      	ldr	r1, [pc, #56]	; (8017ed0 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017e98:	4c0e      	ldr	r4, [pc, #56]	; (8017ed4 <fs_open+0x48>)
 8017e9a:	e000      	b.n	8017e9e <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 8017e9c:	6861      	ldr	r1, [r4, #4]
 8017e9e:	4628      	mov	r0, r5
 8017ea0:	f7e8 f9ce 	bl	8000240 <strcmp>
 8017ea4:	b128      	cbz	r0, 8017eb2 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017ea6:	6824      	ldr	r4, [r4, #0]
 8017ea8:	2c00      	cmp	r4, #0
 8017eaa:	d1f7      	bne.n	8017e9c <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8017eac:	f06f 0005 	mvn.w	r0, #5
}
 8017eb0:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8017eb2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8017eb6:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8017eb8:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 8017eba:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 8017ebe:	7c23      	ldrb	r3, [r4, #16]
 8017ec0:	7433      	strb	r3, [r6, #16]
}
 8017ec2:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8017ec4:	f06f 000f 	mvn.w	r0, #15
}
 8017ec8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8017eca:	f06f 000f 	mvn.w	r0, #15
}
 8017ece:	4770      	bx	lr
 8017ed0:	08037ce4 	.word	0x08037ce4
 8017ed4:	08042e50 	.word	0x08042e50

08017ed8 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8017ed8:	4770      	bx	lr
 8017eda:	bf00      	nop

08017edc <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8017edc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8017ee0:	1a10      	subs	r0, r2, r0
 8017ee2:	4770      	bx	lr

08017ee4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8017ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8017ee8:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8017eea:	b374      	cbz	r4, 8017f4a <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8017eec:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8017ef0:	4617      	mov	r7, r2
 8017ef2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8017ef6:	4605      	mov	r5, r0
 8017ef8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8017efc:	460e      	mov	r6, r1
 8017efe:	4698      	mov	r8, r3
 8017f00:	fa1f fc8c 	uxth.w	ip, ip
 8017f04:	4594      	cmp	ip, r2
 8017f06:	bf28      	it	cs
 8017f08:	4694      	movcs	ip, r2
 8017f0a:	4564      	cmp	r4, ip
 8017f0c:	bf28      	it	cs
 8017f0e:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8017f10:	4643      	mov	r3, r8
 8017f12:	4622      	mov	r2, r4
 8017f14:	4631      	mov	r1, r6
 8017f16:	4628      	mov	r0, r5
 8017f18:	f006 fd1a 	bl	801e950 <tcp_write>
    if (err == ERR_MEM) {
 8017f1c:	1c43      	adds	r3, r0, #1
 8017f1e:	d007      	beq.n	8017f30 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8017f20:	b970      	cbnz	r0, 8017f40 <http_write+0x5c>
 8017f22:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8017f24:	8b6b      	ldrh	r3, [r5, #26]
 8017f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017f2a:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 8017f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 8017f30:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8017f34:	b123      	cbz	r3, 8017f40 <http_write+0x5c>
 8017f36:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 8017f3a:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 8017f3c:	2b08      	cmp	r3, #8
 8017f3e:	d901      	bls.n	8017f44 <http_write+0x60>
    *length = 0;
 8017f40:	2400      	movs	r4, #0
 8017f42:	e7ee      	b.n	8017f22 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 8017f44:	2c01      	cmp	r4, #1
 8017f46:	d8e3      	bhi.n	8017f10 <http_write+0x2c>
 8017f48:	e7fa      	b.n	8017f40 <http_write+0x5c>
    return ERR_OK;
 8017f4a:	4620      	mov	r0, r4
}
 8017f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f50 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8017f50:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 8017f52:	4b0e      	ldr	r3, [pc, #56]	; (8017f8c <http_get_404_file+0x3c>)
{
 8017f54:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8017f56:	4604      	mov	r4, r0
 8017f58:	4619      	mov	r1, r3
  *uri = "/404.html";
 8017f5a:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8017f5c:	f7ff ff96 	bl	8017e8c <fs_open>
  if (err != ERR_OK) {
 8017f60:	b908      	cbnz	r0, 8017f66 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 8017f62:	4620      	mov	r0, r4
 8017f64:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8017f66:	490a      	ldr	r1, [pc, #40]	; (8017f90 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8017f68:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8017f6a:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8017f6c:	f7ff ff8e 	bl	8017e8c <fs_open>
    if (err != ERR_OK) {
 8017f70:	2800      	cmp	r0, #0
 8017f72:	d0f6      	beq.n	8017f62 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8017f74:	4907      	ldr	r1, [pc, #28]	; (8017f94 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8017f76:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8017f78:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8017f7a:	f7ff ff87 	bl	8017e8c <fs_open>
      if (err != ERR_OK) {
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	d0ef      	beq.n	8017f62 <http_get_404_file+0x12>
        *uri = NULL;
 8017f82:	2300      	movs	r3, #0
        return NULL;
 8017f84:	461c      	mov	r4, r3
        *uri = NULL;
 8017f86:	602b      	str	r3, [r5, #0]
        return NULL;
 8017f88:	e7eb      	b.n	8017f62 <http_get_404_file+0x12>
 8017f8a:	bf00      	nop
 8017f8c:	08042e64 	.word	0x08042e64
 8017f90:	08042e70 	.word	0x08042e70
 8017f94:	08042e7c 	.word	0x08042e7c

08017f98 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8017f98:	bb82      	cbnz	r2, 8017ffc <http_accept+0x64>
{
 8017f9a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8017f9c:	fab1 f581 	clz	r5, r1
 8017fa0:	460c      	mov	r4, r1
 8017fa2:	096d      	lsrs	r5, r5, #5
 8017fa4:	b339      	cbz	r1, 8017ff6 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8017fa6:	2101      	movs	r1, #1
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f003 fec3 	bl	801bd34 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8017fae:	2034      	movs	r0, #52	; 0x34
 8017fb0:	f002 fa46 	bl	801a440 <mem_malloc>
  if (ret != NULL) {
 8017fb4:	4606      	mov	r6, r0
 8017fb6:	b1d8      	cbz	r0, 8017ff0 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8017fb8:	2234      	movs	r2, #52	; 0x34
 8017fba:	4629      	mov	r1, r5
 8017fbc:	f00c fa5c 	bl	8024478 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8017fc0:	4631      	mov	r1, r6
 8017fc2:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8017fc4:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8017fc6:	f003 feeb 	bl	801bda0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8017fca:	4620      	mov	r0, r4
 8017fcc:	490d      	ldr	r1, [pc, #52]	; (8018004 <http_accept+0x6c>)
 8017fce:	f003 feeb 	bl	801bda8 <tcp_recv>
  altcp_err(pcb, http_err);
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	490c      	ldr	r1, [pc, #48]	; (8018008 <http_accept+0x70>)
 8017fd6:	f003 ff1f 	bl	801be18 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8017fda:	2204      	movs	r2, #4
 8017fdc:	4620      	mov	r0, r4
 8017fde:	490b      	ldr	r1, [pc, #44]	; (801800c <http_accept+0x74>)
 8017fe0:	f003 ff3c 	bl	801be5c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8017fe4:	4620      	mov	r0, r4
 8017fe6:	490a      	ldr	r1, [pc, #40]	; (8018010 <http_accept+0x78>)
 8017fe8:	f003 fefa 	bl	801bde0 <tcp_sent>

  return ERR_OK;
 8017fec:	4628      	mov	r0, r5
}
 8017fee:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8017ff0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017ff4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8017ff6:	f06f 0005 	mvn.w	r0, #5
}
 8017ffa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8017ffc:	f06f 0005 	mvn.w	r0, #5
}
 8018000:	4770      	bx	lr
 8018002:	bf00      	nop
 8018004:	08018c71 	.word	0x08018c71
 8018008:	08018559 	.word	0x08018559
 801800c:	08018c19 	.word	0x08018c19
 8018010:	08018c01 	.word	0x08018c01

08018014 <http_init_file>:
{
 8018014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018018:	b087      	sub	sp, #28
 801801a:	4604      	mov	r4, r0
  if (file != NULL) {
 801801c:	460e      	mov	r6, r1
{
 801801e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8018022:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018024:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 8018028:	2900      	cmp	r1, #0
 801802a:	f000 80aa 	beq.w	8018182 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801802e:	680b      	ldr	r3, [r1, #0]
 8018030:	2b00      	cmp	r3, #0
 8018032:	f000 80ac 	beq.w	801818e <http_init_file+0x17a>
    if (tag_check) {
 8018036:	2f00      	cmp	r7, #0
 8018038:	d16f      	bne.n	801811a <http_init_file+0x106>
    hs->handle = file;
 801803a:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 801803c:	2d00      	cmp	r5, #0
 801803e:	d04f      	beq.n	80180e0 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 8018040:	782b      	ldrb	r3, [r5, #0]
 8018042:	2b00      	cmp	r3, #0
 8018044:	f000 80c0 	beq.w	80181c8 <http_init_file+0x1b4>
 8018048:	4b61      	ldr	r3, [pc, #388]	; (80181d0 <http_init_file+0x1bc>)
 801804a:	2701      	movs	r7, #1
 801804c:	9405      	str	r4, [sp, #20]
 801804e:	462c      	mov	r4, r5
 8018050:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80181d4 <http_init_file+0x1c0>
 8018054:	4698      	mov	r8, r3
 8018056:	9304      	str	r3, [sp, #16]
 8018058:	e017      	b.n	801808a <http_init_file+0x76>
 801805a:	2d0e      	cmp	r5, #14
      *pair = '\0';
 801805c:	f04f 0300 	mov.w	r3, #0
 8018060:	bfcc      	ite	gt
 8018062:	2500      	movgt	r5, #0
 8018064:	2501      	movle	r5, #1
 8018066:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 801806a:	4620      	mov	r0, r4
 801806c:	213d      	movs	r1, #61	; 0x3d
 801806e:	f00d fc25 	bl	80258bc <strchr>
    if (equals) {
 8018072:	b320      	cbz	r0, 80180be <http_init_file+0xaa>
      *equals = '\0';
 8018074:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8018078:	f108 0804 	add.w	r8, r8, #4
 801807c:	3701      	adds	r7, #1
 801807e:	465c      	mov	r4, fp
      *equals = '\0';
 8018080:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8018084:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8018088:	b30d      	cbz	r5, 80180ce <http_init_file+0xba>
    pair = strchr(pair, '&');
 801808a:	4620      	mov	r0, r4
 801808c:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 801808e:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8018092:	1e7d      	subs	r5, r7, #1
 8018094:	f00d fc12 	bl	80258bc <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8018098:	46ba      	mov	sl, r7
    if (pair) {
 801809a:	4683      	mov	fp, r0
 801809c:	2800      	cmp	r0, #0
 801809e:	d1dc      	bne.n	801805a <http_init_file+0x46>
      pair = strchr(equals, ' ');
 80180a0:	4620      	mov	r0, r4
 80180a2:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80180a4:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 80180a6:	f00d fc09 	bl	80258bc <strchr>
      if (pair) {
 80180aa:	2800      	cmp	r0, #0
 80180ac:	d0dd      	beq.n	801806a <http_init_file+0x56>
        *pair = '\0';
 80180ae:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 80180b2:	213d      	movs	r1, #61	; 0x3d
 80180b4:	4620      	mov	r0, r4
 80180b6:	f00d fc01 	bl	80258bc <strchr>
    if (equals) {
 80180ba:	2800      	cmp	r0, #0
 80180bc:	d1da      	bne.n	8018074 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 80180be:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80180c2:	3701      	adds	r7, #1
 80180c4:	f108 0804 	add.w	r8, r8, #4
 80180c8:	465c      	mov	r4, fp
 80180ca:	2d00      	cmp	r5, #0
 80180cc:	d1dd      	bne.n	801808a <http_init_file+0x76>
 80180ce:	4652      	mov	r2, sl
 80180d0:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 80180d2:	9b04      	ldr	r3, [sp, #16]
 80180d4:	4630      	mov	r0, r6
 80180d6:	9903      	ldr	r1, [sp, #12]
 80180d8:	9300      	str	r3, [sp, #0]
 80180da:	4b3e      	ldr	r3, [pc, #248]	; (80181d4 <http_init_file+0x1c0>)
 80180dc:	f7ef fcd2 	bl	8007a84 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80180e0:	e9d6 3200 	ldrd	r3, r2, [r6]
 80180e4:	2a00      	cmp	r2, #0
    hs->file = file->data;
 80180e6:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80180e8:	db5c      	blt.n	80181a4 <http_init_file+0x190>
    hs->retries = 0;
 80180ea:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 80180ec:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 80180ee:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 80180f0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80180f4:	7c1b      	ldrb	r3, [r3, #16]
 80180f6:	07d9      	lsls	r1, r3, #31
 80180f8:	d526      	bpl.n	8018148 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80180fa:	9b02      	ldr	r3, [sp, #8]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d132      	bne.n	8018166 <http_init_file+0x152>
  if (hs->keepalive) {
 8018100:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8018104:	b12b      	cbz	r3, 8018112 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 8018106:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018108:	2b00      	cmp	r3, #0
 801810a:	d054      	beq.n	80181b6 <http_init_file+0x1a2>
      hs->keepalive = 0;
 801810c:	2300      	movs	r3, #0
 801810e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8018112:	2000      	movs	r0, #0
 8018114:	b007      	add	sp, #28
 8018116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 801811a:	f44f 7090 	mov.w	r0, #288	; 0x120
 801811e:	f002 f98f 	bl	801a440 <mem_malloc>
  if (ret != NULL) {
 8018122:	4607      	mov	r7, r0
 8018124:	2800      	cmp	r0, #0
 8018126:	d088      	beq.n	801803a <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8018128:	f44f 7290 	mov.w	r2, #288	; 0x120
 801812c:	2100      	movs	r1, #0
 801812e:	f00c f9a3 	bl	8024478 <memset>
        ssi->parsed = file->data;
 8018132:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 8018134:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 8018136:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8018138:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 801813c:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 801813e:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8018140:	2d00      	cmp	r5, #0
 8018142:	f47f af7d 	bne.w	8018040 <http_init_file+0x2c>
 8018146:	e7cb      	b.n	80180e0 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 8018148:	4b23      	ldr	r3, [pc, #140]	; (80181d8 <http_init_file+0x1c4>)
 801814a:	f640 1243 	movw	r2, #2371	; 0x943
 801814e:	4923      	ldr	r1, [pc, #140]	; (80181dc <http_init_file+0x1c8>)
 8018150:	4823      	ldr	r0, [pc, #140]	; (80181e0 <http_init_file+0x1cc>)
 8018152:	f00d f92f 	bl	80253b4 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8018156:	9b02      	ldr	r3, [sp, #8]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d0d1      	beq.n	8018100 <http_init_file+0xec>
 801815c:	6963      	ldr	r3, [r4, #20]
 801815e:	7c1b      	ldrb	r3, [r3, #16]
 8018160:	07db      	lsls	r3, r3, #31
 8018162:	d5cd      	bpl.n	8018100 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8018164:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018166:	491f      	ldr	r1, [pc, #124]	; (80181e4 <http_init_file+0x1d0>)
 8018168:	69a0      	ldr	r0, [r4, #24]
 801816a:	f001 f823 	bl	80191b4 <lwip_strnstr>
      if (file_start != NULL) {
 801816e:	2800      	cmp	r0, #0
 8018170:	d0c6      	beq.n	8018100 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8018172:	3004      	adds	r0, #4
 8018174:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8018176:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8018178:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 801817a:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 801817c:	1a9b      	subs	r3, r3, r2
 801817e:	6263      	str	r3, [r4, #36]	; 0x24
 8018180:	e7be      	b.n	8018100 <http_init_file+0xec>
    hs->file = NULL;
 8018182:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8018186:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8018188:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801818c:	e7b8      	b.n	8018100 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801818e:	4b12      	ldr	r3, [pc, #72]	; (80181d8 <http_init_file+0x1c4>)
 8018190:	f640 120b 	movw	r2, #2315	; 0x90b
 8018194:	4914      	ldr	r1, [pc, #80]	; (80181e8 <http_init_file+0x1d4>)
 8018196:	4812      	ldr	r0, [pc, #72]	; (80181e0 <http_init_file+0x1cc>)
 8018198:	f00d f90c 	bl	80253b4 <iprintf>
    if (tag_check) {
 801819c:	2f00      	cmp	r7, #0
 801819e:	f43f af4c 	beq.w	801803a <http_init_file+0x26>
 80181a2:	e7ba      	b.n	801811a <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80181a4:	f640 1234 	movw	r2, #2356	; 0x934
 80181a8:	4b0b      	ldr	r3, [pc, #44]	; (80181d8 <http_init_file+0x1c4>)
 80181aa:	4910      	ldr	r1, [pc, #64]	; (80181ec <http_init_file+0x1d8>)
 80181ac:	480c      	ldr	r0, [pc, #48]	; (80181e0 <http_init_file+0x1cc>)
 80181ae:	f00d f901 	bl	80253b4 <iprintf>
      hs->left = (u32_t)file->len;
 80181b2:	6872      	ldr	r2, [r6, #4]
 80181b4:	e799      	b.n	80180ea <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 80181b6:	6963      	ldr	r3, [r4, #20]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d0aa      	beq.n	8018112 <http_init_file+0xfe>
 80181bc:	7c1b      	ldrb	r3, [r3, #16]
 80181be:	f003 0303 	and.w	r3, r3, #3
 80181c2:	2b01      	cmp	r3, #1
 80181c4:	d1a5      	bne.n	8018112 <http_init_file+0xfe>
 80181c6:	e7a1      	b.n	801810c <http_init_file+0xf8>
    return (0);
 80181c8:	461a      	mov	r2, r3
 80181ca:	4b01      	ldr	r3, [pc, #4]	; (80181d0 <http_init_file+0x1bc>)
 80181cc:	9304      	str	r3, [sp, #16]
 80181ce:	e780      	b.n	80180d2 <http_init_file+0xbe>
 80181d0:	2001e5c4 	.word	0x2001e5c4
 80181d4:	2001e604 	.word	0x2001e604
 80181d8:	08042e88 	.word	0x08042e88
 80181dc:	08042ef4 	.word	0x08042ef4
 80181e0:	0802a008 	.word	0x0802a008
 80181e4:	0802a28c 	.word	0x0802a28c
 80181e8:	08042ec0 	.word	0x08042ec0
 80181ec:	08042ed4 	.word	0x08042ed4

080181f0 <http_find_file>:
{
 80181f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181f4:	ed2d 8b02 	vpush	{d8}
 80181f8:	b087      	sub	sp, #28
 80181fa:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 80181fc:	4608      	mov	r0, r1
 80181fe:	460c      	mov	r4, r1
{
 8018200:	4690      	mov	r8, r2
 8018202:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 8018204:	f7e8 f826 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8018208:	4606      	mov	r6, r0
 801820a:	b148      	cbz	r0, 8018220 <http_find_file+0x30>
 801820c:	f100 39ff 	add.w	r9, r0, #4294967295
 8018210:	f814 3009 	ldrb.w	r3, [r4, r9]
 8018214:	2b2f      	cmp	r3, #47	; 0x2f
 8018216:	d06a      	beq.n	80182ee <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 8018218:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 801821a:	f04f 0900 	mov.w	r9, #0
 801821e:	e001      	b.n	8018224 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 8018220:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8018222:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 8018224:	213f      	movs	r1, #63	; 0x3f
 8018226:	4620      	mov	r0, r4
 8018228:	f00d fb48 	bl	80258bc <strchr>
    if (params != NULL) {
 801822c:	4606      	mov	r6, r0
 801822e:	b118      	cbz	r0, 8018238 <http_find_file+0x48>
      *params = '\0';
 8018230:	2300      	movs	r3, #0
 8018232:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 8018236:	9c05      	ldr	r4, [sp, #20]
 8018238:	4621      	mov	r1, r4
 801823a:	4628      	mov	r0, r5
 801823c:	f7ff fe26 	bl	8017e8c <fs_open>
    if (err == ERR_OK) {
 8018240:	b9b0      	cbnz	r0, 8018270 <http_find_file+0x80>
    if (file != NULL) {
 8018242:	b1e7      	cbz	r7, 801827e <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8018244:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8018248:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 801824a:	f019 0908 	ands.w	r9, r9, #8
 801824e:	d01d      	beq.n	801828c <http_find_file+0x9c>
        tag_check = 1;
 8018250:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8018254:	4623      	mov	r3, r4
 8018256:	4642      	mov	r2, r8
 8018258:	4639      	mov	r1, r7
 801825a:	4628      	mov	r0, r5
 801825c:	9601      	str	r6, [sp, #4]
 801825e:	f8cd 9000 	str.w	r9, [sp]
 8018262:	f7ff fed7 	bl	8018014 <http_init_file>
}
 8018266:	b007      	add	sp, #28
 8018268:	ecbd 8b02 	vpop	{d8}
 801826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8018270:	a905      	add	r1, sp, #20
 8018272:	4628      	mov	r0, r5
 8018274:	f7ff fe6c 	bl	8017f50 <http_get_404_file>
 8018278:	4607      	mov	r7, r0
    if (file != NULL) {
 801827a:	2f00      	cmp	r7, #0
 801827c:	d1e2      	bne.n	8018244 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 801827e:	a905      	add	r1, sp, #20
 8018280:	4628      	mov	r0, r5
 8018282:	f7ff fe65 	bl	8017f50 <http_get_404_file>
 8018286:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8018288:	9c05      	ldr	r4, [sp, #20]
 801828a:	e7e3      	b.n	8018254 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 801828c:	213f      	movs	r1, #63	; 0x3f
 801828e:	4620      	mov	r0, r4
 8018290:	f00d fb14 	bl	80258bc <strchr>
    if (param != NULL) {
 8018294:	4682      	mov	sl, r0
 8018296:	b108      	cbz	r0, 801829c <http_find_file+0xac>
      *param = 0;
 8018298:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 801829c:	212e      	movs	r1, #46	; 0x2e
 801829e:	4620      	mov	r0, r4
 80182a0:	f00d fb0c 	bl	80258bc <strchr>
 80182a4:	4603      	mov	r3, r0
 80182a6:	b138      	cbz	r0, 80182b8 <http_find_file+0xc8>
 80182a8:	1c58      	adds	r0, r3, #1
 80182aa:	212e      	movs	r1, #46	; 0x2e
 80182ac:	461c      	mov	r4, r3
 80182ae:	f00d fb05 	bl	80258bc <strchr>
 80182b2:	4603      	mov	r3, r0
 80182b4:	2800      	cmp	r0, #0
 80182b6:	d1f7      	bne.n	80182a8 <http_find_file+0xb8>
  u8_t tag_check = 0;
 80182b8:	4940      	ldr	r1, [pc, #256]	; (80183bc <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80182ba:	4620      	mov	r0, r4
 80182bc:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80183cc <http_find_file+0x1dc>
 80182c0:	f000 ffa0 	bl	8019204 <lwip_stricmp>
 80182c4:	b148      	cbz	r0, 80182da <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80182c6:	4b3e      	ldr	r3, [pc, #248]	; (80183c0 <http_find_file+0x1d0>)
 80182c8:	459b      	cmp	fp, r3
 80182ca:	d008      	beq.n	80182de <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80182cc:	f85b 1b04 	ldr.w	r1, [fp], #4
 80182d0:	4620      	mov	r0, r4
 80182d2:	f000 ff97 	bl	8019204 <lwip_stricmp>
 80182d6:	2800      	cmp	r0, #0
 80182d8:	d1f5      	bne.n	80182c6 <http_find_file+0xd6>
        tag_check = 1;
 80182da:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 80182de:	f1ba 0f00 	cmp.w	sl, #0
 80182e2:	d0d1      	beq.n	8018288 <http_find_file+0x98>
      *param = '?';
 80182e4:	233f      	movs	r3, #63	; 0x3f
 80182e6:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80182ea:	9c05      	ldr	r4, [sp, #20]
 80182ec:	e7b2      	b.n	8018254 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80182ee:	4b35      	ldr	r3, [pc, #212]	; (80183c4 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80182f0:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80182f2:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80182f4:	d106      	bne.n	8018304 <http_find_file+0x114>
 80182f6:	f1a0 0001 	sub.w	r0, r0, #1
 80182fa:	fab0 f080 	clz	r0, r0
 80182fe:	0940      	lsrs	r0, r0, #5
 8018300:	2800      	cmp	r0, #0
 8018302:	d057      	beq.n	80183b4 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8018304:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8018308:	bf28      	it	cs
 801830a:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 801830e:	2e01      	cmp	r6, #1
 8018310:	d008      	beq.n	8018324 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 8018312:	464a      	mov	r2, r9
 8018314:	4621      	mov	r1, r4
 8018316:	482b      	ldr	r0, [pc, #172]	; (80183c4 <http_find_file+0x1d4>)
 8018318:	f00c f886 	bl	8024428 <memcpy>
      http_uri_buf[copy_len] = 0;
 801831c:	2300      	movs	r3, #0
 801831e:	9a02      	ldr	r2, [sp, #8]
 8018320:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 8018324:	462f      	mov	r7, r5
 8018326:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 801832a:	f8df a098 	ldr.w	sl, [pc, #152]	; 80183c4 <http_find_file+0x1d4>
 801832e:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 8018332:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 8018334:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 8018336:	d012      	beq.n	801835e <http_find_file+0x16e>
        if (len_left > 0) {
 8018338:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 801833c:	d113      	bne.n	8018366 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 801833e:	4641      	mov	r1, r8
 8018340:	4628      	mov	r0, r5
 8018342:	f7ff fda3 	bl	8017e8c <fs_open>
      if (err == ERR_OK) {
 8018346:	b338      	cbz	r0, 8018398 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8018348:	f10b 0b01 	add.w	fp, fp, #1
 801834c:	f1bb 0f05 	cmp.w	fp, #5
 8018350:	d1ef      	bne.n	8018332 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 8018352:	ee18 8a10 	vmov	r8, s16
 8018356:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8018358:	f04f 0900 	mov.w	r9, #0
 801835c:	e762      	b.n	8018224 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 801835e:	4b1a      	ldr	r3, [pc, #104]	; (80183c8 <http_find_file+0x1d8>)
 8018360:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8018364:	e7eb      	b.n	801833e <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8018366:	4b18      	ldr	r3, [pc, #96]	; (80183c8 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018368:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801836a:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 801836e:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018370:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8018372:	4608      	mov	r0, r1
 8018374:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8018376:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801837a:	f7e7 ff6b 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801837e:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018380:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8018382:	4282      	cmp	r2, r0
 8018384:	bf28      	it	cs
 8018386:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018388:	4620      	mov	r0, r4
 801838a:	9203      	str	r2, [sp, #12]
 801838c:	f00c f84c 	bl	8024428 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8018390:	2300      	movs	r3, #0
 8018392:	9a03      	ldr	r2, [sp, #12]
 8018394:	54a3      	strb	r3, [r4, r2]
 8018396:	e7d2      	b.n	801833e <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 8018398:	4a0b      	ldr	r2, [pc, #44]	; (80183c8 <http_find_file+0x1d8>)
        uri = file_name;
 801839a:	4644      	mov	r4, r8
 801839c:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 80183a0:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 80183a4:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 80183a6:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 80183aa:	2d00      	cmp	r5, #0
 80183ac:	f43f af3a 	beq.w	8018224 <http_find_file+0x34>
  char *params = NULL;
 80183b0:	4606      	mov	r6, r0
 80183b2:	e74f      	b.n	8018254 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 80183b4:	462f      	mov	r7, r5
 80183b6:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 80183b8:	4681      	mov	r9, r0
 80183ba:	e733      	b.n	8018224 <http_find_file+0x34>
 80183bc:	08042f48 	.word	0x08042f48
 80183c0:	08043194 	.word	0x08043194
 80183c4:	2001e644 	.word	0x2001e644
 80183c8:	080431a4 	.word	0x080431a4
 80183cc:	08043184 	.word	0x08043184

080183d0 <http_post_rxpbuf>:
{
 80183d0:	b538      	push	{r3, r4, r5, lr}
 80183d2:	4604      	mov	r4, r0
  if (p != NULL) {
 80183d4:	b1c9      	cbz	r1, 801840a <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 80183d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80183d8:	890a      	ldrh	r2, [r1, #8]
 80183da:	4293      	cmp	r3, r2
 80183dc:	d31a      	bcc.n	8018414 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 80183de:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 80183e0:	4620      	mov	r0, r4
 80183e2:	6323      	str	r3, [r4, #48]	; 0x30
 80183e4:	f7ef fc5c 	bl	8007ca0 <httpd_post_receive_data>
  if (err != ERR_OK) {
 80183e8:	b178      	cbz	r0, 801840a <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 80183ea:	2300      	movs	r3, #0
 80183ec:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 80183ee:	490a      	ldr	r1, [pc, #40]	; (8018418 <http_post_rxpbuf+0x48>)
 80183f0:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80183f2:	4620      	mov	r0, r4
 80183f4:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 80183f6:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80183f8:	f7ef fc62 	bl	8007cc0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 80183fc:	462a      	mov	r2, r5
 80183fe:	4620      	mov	r0, r4
 8018400:	4905      	ldr	r1, [pc, #20]	; (8018418 <http_post_rxpbuf+0x48>)
}
 8018402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8018406:	f7ff bef3 	b.w	80181f0 <http_find_file>
  if (hs->post_content_len_left == 0) {
 801840a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801840c:	2b00      	cmp	r3, #0
 801840e:	d0ee      	beq.n	80183ee <http_post_rxpbuf+0x1e>
}
 8018410:	2000      	movs	r0, #0
 8018412:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 8018414:	2300      	movs	r3, #0
 8018416:	e7e3      	b.n	80183e0 <http_post_rxpbuf+0x10>
 8018418:	2001e644 	.word	0x2001e644

0801841c <http_find_error_file>:
  if (error_nr == 501) {
 801841c:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 8018420:	4a17      	ldr	r2, [pc, #92]	; (8018480 <http_find_error_file+0x64>)
 8018422:	4299      	cmp	r1, r3
 8018424:	4b17      	ldr	r3, [pc, #92]	; (8018484 <http_find_error_file+0x68>)
 8018426:	4918      	ldr	r1, [pc, #96]	; (8018488 <http_find_error_file+0x6c>)
{
 8018428:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 801842a:	4e18      	ldr	r6, [pc, #96]	; (801848c <http_find_error_file+0x70>)
 801842c:	bf18      	it	ne
 801842e:	461e      	movne	r6, r3
 8018430:	4b17      	ldr	r3, [pc, #92]	; (8018490 <http_find_error_file+0x74>)
 8018432:	bf18      	it	ne
 8018434:	460b      	movne	r3, r1
{
 8018436:	b084      	sub	sp, #16
 8018438:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801843a:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 801843c:	4d15      	ldr	r5, [pc, #84]	; (8018494 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801843e:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 8018440:	bf08      	it	eq
 8018442:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8018444:	f7ff fd22 	bl	8017e8c <fs_open>
 8018448:	9b03      	ldr	r3, [sp, #12]
 801844a:	b128      	cbz	r0, 8018458 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 801844c:	4629      	mov	r1, r5
 801844e:	4620      	mov	r0, r4
 8018450:	f7ff fd1c 	bl	8017e8c <fs_open>
 8018454:	b948      	cbnz	r0, 801846a <http_find_error_file+0x4e>
    uri = uri2;
 8018456:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8018458:	2200      	movs	r2, #0
 801845a:	4621      	mov	r1, r4
 801845c:	4620      	mov	r0, r4
 801845e:	e9cd 2200 	strd	r2, r2, [sp]
 8018462:	f7ff fdd7 	bl	8018014 <http_init_file>
}
 8018466:	b004      	add	sp, #16
 8018468:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 801846a:	4631      	mov	r1, r6
 801846c:	4620      	mov	r0, r4
 801846e:	f7ff fd0d 	bl	8017e8c <fs_open>
 8018472:	b908      	cbnz	r0, 8018478 <http_find_error_file+0x5c>
    uri = uri3;
 8018474:	4633      	mov	r3, r6
 8018476:	e7ef      	b.n	8018458 <http_find_error_file+0x3c>
    return ERR_ARG;
 8018478:	f06f 000f 	mvn.w	r0, #15
 801847c:	e7f3      	b.n	8018466 <http_find_error_file+0x4a>
 801847e:	bf00      	nop
 8018480:	08042f2c 	.word	0x08042f2c
 8018484:	08042f44 	.word	0x08042f44
 8018488:	08042f5c 	.word	0x08042f5c
 801848c:	08042f20 	.word	0x08042f20
 8018490:	08042f38 	.word	0x08042f38
 8018494:	08042f50 	.word	0x08042f50

08018498 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8018498:	b538      	push	{r3, r4, r5, lr}
 801849a:	4605      	mov	r5, r0
  if (hs != NULL) {
 801849c:	460c      	mov	r4, r1
 801849e:	2900      	cmp	r1, #0
 80184a0:	d041      	beq.n	8018526 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 80184a2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80184a4:	bb83      	cbnz	r3, 8018508 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 80184a6:	2100      	movs	r1, #0
 80184a8:	4628      	mov	r0, r5
 80184aa:	f003 fc79 	bl	801bda0 <tcp_arg>
  altcp_recv(pcb, NULL);
 80184ae:	2100      	movs	r1, #0
 80184b0:	4628      	mov	r0, r5
 80184b2:	f003 fc79 	bl	801bda8 <tcp_recv>
  altcp_err(pcb, NULL);
 80184b6:	2100      	movs	r1, #0
 80184b8:	4628      	mov	r0, r5
 80184ba:	f003 fcad 	bl	801be18 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80184be:	2200      	movs	r2, #0
 80184c0:	4628      	mov	r0, r5
 80184c2:	4611      	mov	r1, r2
 80184c4:	f003 fcca 	bl	801be5c <tcp_poll>
  altcp_sent(pcb, NULL);
 80184c8:	4628      	mov	r0, r5
 80184ca:	2100      	movs	r1, #0
 80184cc:	f003 fc88 	bl	801bde0 <tcp_sent>
  if (hs->handle) {
 80184d0:	6960      	ldr	r0, [r4, #20]
 80184d2:	b118      	cbz	r0, 80184dc <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 80184d4:	f7ff fd00 	bl	8017ed8 <fs_close>
    hs->handle = NULL;
 80184d8:	2300      	movs	r3, #0
 80184da:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80184dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80184de:	b118      	cbz	r0, 80184e8 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 80184e0:	f001 fdf2 	bl	801a0c8 <mem_free>
    hs->ssi = NULL;
 80184e4:	2300      	movs	r3, #0
 80184e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80184e8:	6a20      	ldr	r0, [r4, #32]
 80184ea:	b118      	cbz	r0, 80184f4 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 80184ec:	f002 fe98 	bl	801b220 <pbuf_free>
    hs->req = NULL;
 80184f0:	2300      	movs	r3, #0
 80184f2:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 80184f4:	4620      	mov	r0, r4
 80184f6:	f001 fde7 	bl	801a0c8 <mem_free>
  err = altcp_close(pcb);
 80184fa:	4628      	mov	r0, r5
 80184fc:	f004 fb0c 	bl	801cb18 <tcp_close>
  if (err != ERR_OK) {
 8018500:	4604      	mov	r4, r0
 8018502:	b948      	cbnz	r0, 8018518 <http_close_or_abort_conn.constprop.0+0x80>
}
 8018504:	4620      	mov	r0, r4
 8018506:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8018508:	4911      	ldr	r1, [pc, #68]	; (8018550 <http_close_or_abort_conn.constprop.0+0xb8>)
 801850a:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801850c:	223f      	movs	r2, #63	; 0x3f
 801850e:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 8018510:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8018512:	f7ef fbd5 	bl	8007cc0 <httpd_post_finished>
 8018516:	e7c6      	b.n	80184a6 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8018518:	4628      	mov	r0, r5
 801851a:	2204      	movs	r2, #4
 801851c:	490d      	ldr	r1, [pc, #52]	; (8018554 <http_close_or_abort_conn.constprop.0+0xbc>)
 801851e:	f003 fc9d 	bl	801be5c <tcp_poll>
}
 8018522:	4620      	mov	r0, r4
 8018524:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 8018526:	f003 fc3b 	bl	801bda0 <tcp_arg>
  altcp_recv(pcb, NULL);
 801852a:	4621      	mov	r1, r4
 801852c:	4628      	mov	r0, r5
 801852e:	f003 fc3b 	bl	801bda8 <tcp_recv>
  altcp_err(pcb, NULL);
 8018532:	4621      	mov	r1, r4
 8018534:	4628      	mov	r0, r5
 8018536:	f003 fc6f 	bl	801be18 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801853a:	4621      	mov	r1, r4
 801853c:	4628      	mov	r0, r5
 801853e:	4622      	mov	r2, r4
 8018540:	f003 fc8c 	bl	801be5c <tcp_poll>
  altcp_sent(pcb, NULL);
 8018544:	4621      	mov	r1, r4
 8018546:	4628      	mov	r0, r5
 8018548:	f003 fc4a 	bl	801bde0 <tcp_sent>
  if (hs != NULL) {
 801854c:	e7d5      	b.n	80184fa <http_close_or_abort_conn.constprop.0+0x62>
 801854e:	bf00      	nop
 8018550:	2001e644 	.word	0x2001e644
 8018554:	08018c19 	.word	0x08018c19

08018558 <http_err>:
  if (hs != NULL) {
 8018558:	b1c0      	cbz	r0, 801858c <http_err+0x34>
{
 801855a:	b510      	push	{r4, lr}
 801855c:	4604      	mov	r4, r0
  if (hs->handle) {
 801855e:	6940      	ldr	r0, [r0, #20]
 8018560:	b118      	cbz	r0, 801856a <http_err+0x12>
    fs_close(hs->handle);
 8018562:	f7ff fcb9 	bl	8017ed8 <fs_close>
    hs->handle = NULL;
 8018566:	2300      	movs	r3, #0
 8018568:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801856a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801856c:	b118      	cbz	r0, 8018576 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 801856e:	f001 fdab 	bl	801a0c8 <mem_free>
    hs->ssi = NULL;
 8018572:	2300      	movs	r3, #0
 8018574:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8018576:	6a20      	ldr	r0, [r4, #32]
 8018578:	b118      	cbz	r0, 8018582 <http_err+0x2a>
    pbuf_free(hs->req);
 801857a:	f002 fe51 	bl	801b220 <pbuf_free>
    hs->req = NULL;
 801857e:	2300      	movs	r3, #0
 8018580:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8018582:	4620      	mov	r0, r4
}
 8018584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8018588:	f001 bd9e 	b.w	801a0c8 <mem_free>
 801858c:	4770      	bx	lr
 801858e:	bf00      	nop

08018590 <http_eof>:
{
 8018590:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8018592:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8018596:	b1fb      	cbz	r3, 80185d8 <http_eof+0x48>
 8018598:	4605      	mov	r5, r0
  if (hs->handle) {
 801859a:	6948      	ldr	r0, [r1, #20]
 801859c:	460c      	mov	r4, r1
 801859e:	b118      	cbz	r0, 80185a8 <http_eof+0x18>
    fs_close(hs->handle);
 80185a0:	f7ff fc9a 	bl	8017ed8 <fs_close>
    hs->handle = NULL;
 80185a4:	2300      	movs	r3, #0
 80185a6:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80185a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80185aa:	b118      	cbz	r0, 80185b4 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 80185ac:	f001 fd8c 	bl	801a0c8 <mem_free>
    hs->ssi = NULL;
 80185b0:	2300      	movs	r3, #0
 80185b2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80185b4:	6a20      	ldr	r0, [r4, #32]
 80185b6:	b108      	cbz	r0, 80185bc <http_eof+0x2c>
    pbuf_free(hs->req);
 80185b8:	f002 fe32 	bl	801b220 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 80185bc:	2234      	movs	r2, #52	; 0x34
 80185be:	2100      	movs	r1, #0
 80185c0:	4620      	mov	r0, r4
 80185c2:	f00b ff59 	bl	8024478 <memset>
    hs->keepalive = 1;
 80185c6:	2301      	movs	r3, #1
    hs->pcb = pcb;
 80185c8:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 80185ca:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 80185ce:	8b6b      	ldrh	r3, [r5, #26]
 80185d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185d4:	836b      	strh	r3, [r5, #26]
}
 80185d6:	bd38      	pop	{r3, r4, r5, pc}
 80185d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 80185dc:	f7ff bf5c 	b.w	8018498 <http_close_or_abort_conn.constprop.0>

080185e0 <http_send>:
{
 80185e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 80185e4:	460d      	mov	r5, r1
{
 80185e6:	b087      	sub	sp, #28
  if (hs == NULL) {
 80185e8:	2900      	cmp	r1, #0
 80185ea:	f000 824b 	beq.w	8018a84 <http_send+0x4a4>
  if (hs->left == 0) {
 80185ee:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80185f0:	4607      	mov	r7, r0
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	f000 818c 	beq.w	8018910 <http_send+0x330>
  if (hs->ssi) {
 80185f8:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80185fa:	2c00      	cmp	r4, #0
 80185fc:	f000 819a 	beq.w	8018934 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 8018600:	6823      	ldr	r3, [r4, #0]
 8018602:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8018604:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8018608:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 801860a:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 801860e:	f200 80c3 	bhi.w	8018798 <http_send+0x1b8>
  u8_t data_to_send = 0;
 8018612:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 8018616:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018618:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 801861c:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018620:	2b04      	cmp	r3, #4
 8018622:	d003      	beq.n	801862c <http_send+0x4c>
 8018624:	68e1      	ldr	r1, [r4, #12]
 8018626:	2900      	cmp	r1, #0
 8018628:	f000 8091 	beq.w	801874e <http_send+0x16e>
 801862c:	2e00      	cmp	r6, #0
 801862e:	f040 811b 	bne.w	8018868 <http_send+0x288>
    if (len == 0) {
 8018632:	2a00      	cmp	r2, #0
 8018634:	f000 811b 	beq.w	801886e <http_send+0x28e>
    switch (ssi->tag_state) {
 8018638:	2b04      	cmp	r3, #4
 801863a:	d8f1      	bhi.n	8018620 <http_send+0x40>
 801863c:	e8df f003 	tbb	[pc, r3]
 8018640:	23407466 	.word	0x23407466
 8018644:	03          	.byte	0x03
 8018645:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8018646:	68a3      	ldr	r3, [r4, #8]
 8018648:	69a9      	ldr	r1, [r5, #24]
 801864a:	428b      	cmp	r3, r1
 801864c:	f240 80f1 	bls.w	8018832 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8018650:	6863      	ldr	r3, [r4, #4]
 8018652:	4299      	cmp	r1, r3
 8018654:	f200 81fc 	bhi.w	8018a50 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018658:	1a5a      	subs	r2, r3, r1
 801865a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 801865e:	4282      	cmp	r2, r0
 8018660:	f340 8117 	ble.w	8018892 <http_send+0x2b2>
 8018664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018668:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801866c:	2300      	movs	r3, #0
 801866e:	f10d 0216 	add.w	r2, sp, #22
 8018672:	4638      	mov	r0, r7
 8018674:	f7ff fc36 	bl	8017ee4 <http_write>
          if (err == ERR_OK) {
 8018678:	2800      	cmp	r0, #0
 801867a:	f000 81fe 	beq.w	8018a7a <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801867e:	4606      	mov	r6, r0
    if (len == 0) {
 8018680:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018684:	e11a      	b.n	80188bc <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8018686:	6821      	ldr	r1, [r4, #0]
 8018688:	8a20      	ldrh	r0, [r4, #16]
 801868a:	f891 e000 	ldrb.w	lr, [r1]
 801868e:	2800      	cmp	r0, #0
 8018690:	f040 80b9 	bne.w	8018806 <http_send+0x226>
 8018694:	f1ae 0c09 	sub.w	ip, lr, #9
 8018698:	fa5f fc8c 	uxtb.w	ip, ip
 801869c:	f1bc 0f17 	cmp.w	ip, #23
 80186a0:	f200 80b1 	bhi.w	8018806 <http_send+0x226>
 80186a4:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8018a4c <http_send+0x46c>
 80186a8:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80186ac:	f01c 0f01 	tst.w	ip, #1
 80186b0:	f000 80a9 	beq.w	8018806 <http_send+0x226>
          ssi->parsed++;
 80186b4:	3101      	adds	r1, #1
 80186b6:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 80186b8:	68e1      	ldr	r1, [r4, #12]
 80186ba:	3901      	subs	r1, #1
 80186bc:	60e1      	str	r1, [r4, #12]
          break;
 80186be:	e7af      	b.n	8018620 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80186c0:	8a20      	ldrh	r0, [r4, #16]
 80186c2:	2800      	cmp	r0, #0
 80186c4:	f040 8083 	bne.w	80187ce <http_send+0x1ee>
 80186c8:	6821      	ldr	r1, [r4, #0]
 80186ca:	f891 e000 	ldrb.w	lr, [r1]
 80186ce:	f1ae 0c09 	sub.w	ip, lr, #9
 80186d2:	fa5f fc8c 	uxtb.w	ip, ip
 80186d6:	f1bc 0f17 	cmp.w	ip, #23
 80186da:	f240 8110 	bls.w	80188fe <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80186de:	f8df c350 	ldr.w	ip, [pc, #848]	; 8018a30 <http_send+0x450>
 80186e2:	f894 9014 	ldrb.w	r9, [r4, #20]
 80186e6:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 80186ea:	f8dc c004 	ldr.w	ip, [ip, #4]
 80186ee:	f89c c000 	ldrb.w	ip, [ip]
 80186f2:	45f4      	cmp	ip, lr
 80186f4:	f000 8083 	beq.w	80187fe <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80186f8:	f100 0c01 	add.w	ip, r0, #1
 80186fc:	4420      	add	r0, r4
 80186fe:	f8a4 c010 	strh.w	ip, [r4, #16]
 8018702:	f891 c000 	ldrb.w	ip, [r1]
 8018706:	f880 c016 	strb.w	ip, [r0, #22]
 801870a:	e7d3      	b.n	80186b4 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 801870c:	6821      	ldr	r1, [r4, #0]
 801870e:	7808      	ldrb	r0, [r1, #0]
 8018710:	283c      	cmp	r0, #60	; 0x3c
 8018712:	d002      	beq.n	801871a <http_send+0x13a>
 8018714:	282f      	cmp	r0, #47	; 0x2f
 8018716:	d1cd      	bne.n	80186b4 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8018718:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 801871a:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 801871c:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 801871e:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 8018720:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8018724:	8223      	strh	r3, [r4, #16]
            break;
 8018726:	e7c5      	b.n	80186b4 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8018728:	49c1      	ldr	r1, [pc, #772]	; (8018a30 <http_send+0x450>)
 801872a:	7d20      	ldrb	r0, [r4, #20]
 801872c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018730:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8018734:	f811 100c 	ldrb.w	r1, [r1, ip]
 8018738:	2900      	cmp	r1, #0
 801873a:	f040 8086 	bne.w	801884a <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 801873e:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8018740:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018742:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8018744:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018748:	2900      	cmp	r1, #0
 801874a:	f47f af6f 	bne.w	801862c <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 801874e:	6823      	ldr	r3, [r4, #0]
 8018750:	69a9      	ldr	r1, [r5, #24]
 8018752:	428b      	cmp	r3, r1
 8018754:	f240 808b 	bls.w	801886e <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018758:	1a5b      	subs	r3, r3, r1
 801875a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801875e:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018760:	4293      	cmp	r3, r2
 8018762:	bfa8      	it	ge
 8018764:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018766:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801876a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801876e:	2300      	movs	r3, #0
 8018770:	f7ff fbb8 	bl	8017ee4 <http_write>
    if (err == ERR_OK) {
 8018774:	2800      	cmp	r0, #0
 8018776:	d17a      	bne.n	801886e <http_send+0x28e>
    hs->file += len;
 8018778:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 801877c:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 8018780:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8018782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8018784:	440a      	add	r2, r1
    hs->left -= len;
 8018786:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8018788:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 801878a:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801878c:	2b00      	cmp	r3, #0
 801878e:	d071      	beq.n	8018874 <http_send+0x294>
}
 8018790:	4640      	mov	r0, r8
 8018792:	b007      	add	sp, #28
 8018794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018798:	1a5b      	subs	r3, r3, r1
 801879a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801879e:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80187a0:	4293      	cmp	r3, r2
 80187a2:	bfa8      	it	ge
 80187a4:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80187a6:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80187aa:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80187ae:	2300      	movs	r3, #0
 80187b0:	f7ff fb98 	bl	8017ee4 <http_write>
    if (err == ERR_OK) {
 80187b4:	4606      	mov	r6, r0
 80187b6:	2800      	cmp	r0, #0
 80187b8:	f000 8154 	beq.w	8018a64 <http_send+0x484>
  u8_t data_to_send = 0;
 80187bc:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 80187c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d052      	beq.n	801886e <http_send+0x28e>
    if (len == 0) {
 80187c8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80187cc:	e724      	b.n	8018618 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80187ce:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8018a30 <http_send+0x450>
 80187d2:	7d21      	ldrb	r1, [r4, #20]
 80187d4:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 80187d8:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80187dc:	6821      	ldr	r1, [r4, #0]
 80187de:	f89e a000 	ldrb.w	sl, [lr]
 80187e2:	f891 c000 	ldrb.w	ip, [r1]
 80187e6:	45e2      	cmp	sl, ip
 80187e8:	d072      	beq.n	80188d0 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80187ea:	f1ac 0c09 	sub.w	ip, ip, #9
 80187ee:	fa5f fc8c 	uxtb.w	ip, ip
 80187f2:	f1bc 0f17 	cmp.w	ip, #23
 80187f6:	d964      	bls.n	80188c2 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80187f8:	2807      	cmp	r0, #7
 80187fa:	f67f af7d 	bls.w	80186f8 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 80187fe:	2300      	movs	r3, #0
 8018800:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8018804:	e756      	b.n	80186b4 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8018806:	f894 9014 	ldrb.w	r9, [r4, #20]
 801880a:	f8df c224 	ldr.w	ip, [pc, #548]	; 8018a30 <http_send+0x450>
 801880e:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8018812:	f8dc c004 	ldr.w	ip, [ip, #4]
 8018816:	f81c 9000 	ldrb.w	r9, [ip, r0]
 801881a:	45f1      	cmp	r9, lr
 801881c:	f000 80a1 	beq.w	8018962 <http_send+0x382>
          ssi->parse_left--;
 8018820:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 8018822:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8018824:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8018828:	3b01      	subs	r3, #1
          ssi->parsed++;
 801882a:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 801882c:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 801882e:	2300      	movs	r3, #0
 8018830:	e6f8      	b.n	8018624 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8018832:	8a21      	ldrh	r1, [r4, #16]
 8018834:	8a60      	ldrh	r0, [r4, #18]
 8018836:	4281      	cmp	r1, r0
 8018838:	f0c0 80e0 	bcc.w	80189fc <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 801883c:	6023      	str	r3, [r4, #0]
 801883e:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 8018840:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8018844:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8018848:	e6ec      	b.n	8018624 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 801884a:	6820      	ldr	r0, [r4, #0]
 801884c:	f890 e000 	ldrb.w	lr, [r0]
 8018850:	458e      	cmp	lr, r1
 8018852:	f000 80ce 	beq.w	80189f2 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 8018856:	2300      	movs	r3, #0
 8018858:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 801885c:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 801885e:	3001      	adds	r0, #1
          ssi->parse_left--;
 8018860:	3901      	subs	r1, #1
          ssi->parsed++;
 8018862:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8018864:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8018866:	e6db      	b.n	8018620 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8018868:	2b04      	cmp	r3, #4
 801886a:	f47f af70 	bne.w	801874e <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801886e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018870:	2b00      	cmp	r3, #0
 8018872:	d18d      	bne.n	8018790 <http_send+0x1b0>
 8018874:	6968      	ldr	r0, [r5, #20]
 8018876:	f7ff fb31 	bl	8017edc <fs_bytes_left>
 801887a:	2800      	cmp	r0, #0
 801887c:	dc88      	bgt.n	8018790 <http_send+0x1b0>
      return 0;
 801887e:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 8018882:	4638      	mov	r0, r7
 8018884:	4629      	mov	r1, r5
 8018886:	f7ff fe83 	bl	8018590 <http_eof>
}
 801888a:	4640      	mov	r0, r8
 801888c:	b007      	add	sp, #28
 801888e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018892:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018894:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 8018898:	2a00      	cmp	r2, #0
 801889a:	f47f aee7 	bne.w	801866c <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 801889e:	428b      	cmp	r3, r1
 80188a0:	d805      	bhi.n	80188ae <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 80188a2:	68a0      	ldr	r0, [r4, #8]
 80188a4:	1ac3      	subs	r3, r0, r3
 80188a6:	441a      	add	r2, r3
 80188a8:	b292      	uxth	r2, r2
 80188aa:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 80188ae:	4411      	add	r1, r2
 80188b0:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 80188b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 80188b4:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 80188b8:	1a9b      	subs	r3, r3, r2
 80188ba:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80188bc:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80188c0:	e6ae      	b.n	8018620 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80188c2:	f8df a188 	ldr.w	sl, [pc, #392]	; 8018a4c <http_send+0x46c>
 80188c6:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80188ca:	f01c 0f01 	tst.w	ip, #1
 80188ce:	d093      	beq.n	80187f8 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 80188d0:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80188d2:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 80188d4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80188d8:	f200 80e0 	bhi.w	8018a9c <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80188dc:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 80188de:	4420      	add	r0, r4
 80188e0:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80188e4:	f89e 3000 	ldrb.w	r3, [lr]
 80188e8:	780a      	ldrb	r2, [r1, #0]
 80188ea:	429a      	cmp	r2, r3
 80188ec:	f000 80cf 	beq.w	8018a8e <http_send+0x4ae>
              ssi->tag_index = 0;
 80188f0:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80188f4:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 80188f8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80188fc:	e6da      	b.n	80186b4 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80188fe:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8018a4c <http_send+0x46c>
 8018902:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8018906:	f01c 0f01 	tst.w	ip, #1
 801890a:	f47f aed3 	bne.w	80186b4 <http_send+0xd4>
 801890e:	e6e6      	b.n	80186de <http_send+0xfe>
  if (hs->handle == NULL) {
 8018910:	6948      	ldr	r0, [r1, #20]
 8018912:	2800      	cmp	r0, #0
 8018914:	d0b3      	beq.n	801887e <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 8018916:	f7ff fae1 	bl	8017edc <fs_bytes_left>
  if (bytes_left <= 0) {
 801891a:	2800      	cmp	r0, #0
 801891c:	ddaf      	ble.n	801887e <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 801891e:	4b45      	ldr	r3, [pc, #276]	; (8018a34 <http_send+0x454>)
 8018920:	f240 429d 	movw	r2, #1181	; 0x49d
 8018924:	4944      	ldr	r1, [pc, #272]	; (8018a38 <http_send+0x458>)
 8018926:	4845      	ldr	r0, [pc, #276]	; (8018a3c <http_send+0x45c>)
 8018928:	f00c fd44 	bl	80253b4 <iprintf>
  if (hs->ssi) {
 801892c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801892e:	2c00      	cmp	r4, #0
 8018930:	f47f ae66 	bne.w	8018600 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8018934:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8018938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801893c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801893e:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8018940:	428a      	cmp	r2, r1
 8018942:	bf88      	it	hi
 8018944:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018946:	4623      	mov	r3, r4
 8018948:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801894a:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801894e:	f10d 0216 	add.w	r2, sp, #22
 8018952:	f7ff fac7 	bl	8017ee4 <http_write>
  if (err == ERR_OK) {
 8018956:	2800      	cmp	r0, #0
 8018958:	f43f af0e 	beq.w	8018778 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801895c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 801895e:	46a0      	mov	r8, r4
 8018960:	e714      	b.n	801878c <http_send+0x1ac>
          ssi->parsed++;
 8018962:	3101      	adds	r1, #1
          ssi->tag_index++;
 8018964:	3001      	adds	r0, #1
          ssi->parsed++;
 8018966:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 8018968:	b280      	uxth	r0, r0
          ssi->parse_left--;
 801896a:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 801896c:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 801896e:	3901      	subs	r1, #1
 8018970:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8018972:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8018976:	2900      	cmp	r1, #0
 8018978:	f47f ae52 	bne.w	8018620 <http_send+0x40>
  ssi = hs->ssi;
 801897c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8018980:	f1b9 0f00 	cmp.w	r9, #0
 8018984:	f000 8115 	beq.w	8018bb2 <http_send+0x5d2>
  if (httpd_ssi_handler
 8018988:	4b2d      	ldr	r3, [pc, #180]	; (8018a40 <http_send+0x460>)
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	9300      	str	r3, [sp, #0]
 801898e:	2b00      	cmp	r3, #0
 8018990:	f000 8093 	beq.w	8018aba <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 8018994:	4b2b      	ldr	r3, [pc, #172]	; (8018a44 <http_send+0x464>)
 8018996:	681a      	ldr	r2, [r3, #0]
 8018998:	2a00      	cmp	r2, #0
 801899a:	f000 808e 	beq.w	8018aba <http_send+0x4da>
 801899e:	4b2a      	ldr	r3, [pc, #168]	; (8018a48 <http_send+0x468>)
 80189a0:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80189a2:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 80189a4:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80189a6:	f340 8088 	ble.w	8018aba <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80189aa:	f109 0a16 	add.w	sl, r9, #22
 80189ae:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80189b0:	2300      	movs	r3, #0
 80189b2:	9503      	str	r5, [sp, #12]
 80189b4:	460d      	mov	r5, r1
 80189b6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80189ba:	4656      	mov	r6, sl
 80189bc:	461c      	mov	r4, r3
 80189be:	4692      	mov	sl, r2
 80189c0:	e003      	b.n	80189ca <http_send+0x3ea>
 80189c2:	3401      	adds	r4, #1
 80189c4:	42a5      	cmp	r5, r4
 80189c6:	f000 8105 	beq.w	8018bd4 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80189ca:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 80189ce:	4630      	mov	r0, r6
 80189d0:	f7e7 fc36 	bl	8000240 <strcmp>
 80189d4:	2800      	cmp	r0, #0
 80189d6:	d1f4      	bne.n	80189c2 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 80189d8:	4623      	mov	r3, r4
 80189da:	22fe      	movs	r2, #254	; 0xfe
 80189dc:	f109 011f 	add.w	r1, r9, #31
 80189e0:	9e02      	ldr	r6, [sp, #8]
 80189e2:	4618      	mov	r0, r3
 80189e4:	9b00      	ldr	r3, [sp, #0]
 80189e6:	9c01      	ldr	r4, [sp, #4]
 80189e8:	9d03      	ldr	r5, [sp, #12]
 80189ea:	4798      	blx	r3
 80189ec:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 80189f0:	e0a6      	b.n	8018b40 <http_send+0x560>
            ssi->tag_index++;
 80189f2:	f10c 0c01 	add.w	ip, ip, #1
 80189f6:	f8a4 c010 	strh.w	ip, [r4, #16]
 80189fa:	e72f      	b.n	801885c <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 80189fc:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80189fe:	311f      	adds	r1, #31
 8018a00:	f10d 0216 	add.w	r2, sp, #22
 8018a04:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8018a06:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8018a0a:	4421      	add	r1, r4
 8018a0c:	4638      	mov	r0, r7
 8018a0e:	f7ff fa69 	bl	8017ee4 <http_write>
              ssi->tag_index += len;
 8018a12:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 8018a16:	4606      	mov	r6, r0
 8018a18:	2800      	cmp	r0, #0
 8018a1a:	f47f af4f 	bne.w	80188bc <http_send+0x2dc>
              ssi->tag_index += len;
 8018a1e:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8018a20:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 8018a24:	4413      	add	r3, r2
 8018a26:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018a28:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8018a2c:	e5f8      	b.n	8018620 <http_send+0x40>
 8018a2e:	bf00      	nop
 8018a30:	08043194 	.word	0x08043194
 8018a34:	08042e88 	.word	0x08042e88
 8018a38:	08042f68 	.word	0x08042f68
 8018a3c:	0802a008 	.word	0x0802a008
 8018a40:	2001ea88 	.word	0x2001ea88
 8018a44:	2001ea8c 	.word	0x2001ea8c
 8018a48:	2001e684 	.word	0x2001e684
 8018a4c:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8018a50:	4b63      	ldr	r3, [pc, #396]	; (8018be0 <http_send+0x600>)
 8018a52:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8018a56:	4963      	ldr	r1, [pc, #396]	; (8018be4 <http_send+0x604>)
 8018a58:	4863      	ldr	r0, [pc, #396]	; (8018be8 <http_send+0x608>)
 8018a5a:	f00c fcab 	bl	80253b4 <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018a5e:	6863      	ldr	r3, [r4, #4]
 8018a60:	69a9      	ldr	r1, [r5, #24]
 8018a62:	e5f9      	b.n	8018658 <http_send+0x78>
      hs->file += len;
 8018a64:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 8018a68:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 8018a6c:	69ab      	ldr	r3, [r5, #24]
 8018a6e:	4413      	add	r3, r2
 8018a70:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8018a72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018a74:	1a9b      	subs	r3, r3, r2
 8018a76:	626b      	str	r3, [r5, #36]	; 0x24
 8018a78:	e6a2      	b.n	80187c0 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 8018a7a:	6863      	ldr	r3, [r4, #4]
 8018a7c:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018a7e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018a82:	e70c      	b.n	801889e <http_send+0x2be>
    return 0;
 8018a84:	4688      	mov	r8, r1
}
 8018a86:	4640      	mov	r0, r8
 8018a88:	b007      	add	sp, #28
 8018a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 8018a8e:	2301      	movs	r3, #1
 8018a90:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018a92:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8018a96:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018a9a:	e60b      	b.n	80186b4 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8018a9c:	4b50      	ldr	r3, [pc, #320]	; (8018be0 <http_send+0x600>)
 8018a9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8018aa2:	4952      	ldr	r1, [pc, #328]	; (8018bec <http_send+0x60c>)
 8018aa4:	4850      	ldr	r0, [pc, #320]	; (8018be8 <http_send+0x608>)
 8018aa6:	f00c fc85 	bl	80253b4 <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8018aaa:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8018aac:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8018aae:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8018ab2:	6821      	ldr	r1, [r4, #0]
 8018ab4:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8018ab8:	e710      	b.n	80188dc <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8018aba:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8018abe:	4650      	mov	r0, sl
 8018ac0:	f7e7 fbc8 	bl	8000254 <strlen>
 8018ac4:	28e4      	cmp	r0, #228	; 0xe4
 8018ac6:	d865      	bhi.n	8018b94 <http_send+0x5b4>
 8018ac8:	2809      	cmp	r0, #9
 8018aca:	bf28      	it	cs
 8018acc:	2009      	movcs	r0, #9
 8018ace:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8018ad2:	4686      	mov	lr, r0
 8018ad4:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018ad6:	f100 0319 	add.w	r3, r0, #25
 8018ada:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018adc:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8018bfc <http_send+0x61c>
 8018ae0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018ae4:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8018ae8:	f8bc 3000 	ldrh.w	r3, [ip]
 8018aec:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018af0:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018af4:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018af8:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018afa:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018afe:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018b00:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018b04:	f00b fc90 	bl	8024428 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018b08:	4b39      	ldr	r3, [pc, #228]	; (8018bf0 <http_send+0x610>)
 8018b0a:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018b0c:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018b0e:	eb09 0e02 	add.w	lr, r9, r2
 8018b12:	6818      	ldr	r0, [r3, #0]
 8018b14:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018b18:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018b1a:	799b      	ldrb	r3, [r3, #6]
 8018b1c:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 8018b20:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018b24:	f8ae c004 	strh.w	ip, [lr, #4]
 8018b28:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018b2c:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 8018b30:	f7e7 fb90 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8018b34:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8018b38:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8018b3a:	d232      	bcs.n	8018ba2 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 8018b3c:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 8018b40:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 8018b42:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 8018b44:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 8018b46:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 8018b4a:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 8018b4c:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8018b50:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8018b52:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8018b54:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8018b56:	d802      	bhi.n	8018b5e <http_send+0x57e>
    if (len == 0) {
 8018b58:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018b5c:	e566      	b.n	801862c <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018b5e:	1a52      	subs	r2, r2, r1
 8018b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018b64:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018b66:	429a      	cmp	r2, r3
 8018b68:	bfa8      	it	ge
 8018b6a:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018b6c:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018b6e:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018b72:	f10d 0216 	add.w	r2, sp, #22
 8018b76:	f7ff f9b5 	bl	8017ee4 <http_write>
              if (err == ERR_OK) {
 8018b7a:	4606      	mov	r6, r0
 8018b7c:	2800      	cmp	r0, #0
 8018b7e:	f47f ad7f 	bne.w	8018680 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8018b82:	6861      	ldr	r1, [r4, #4]
 8018b84:	69ab      	ldr	r3, [r5, #24]
 8018b86:	4299      	cmp	r1, r3
 8018b88:	d91b      	bls.n	8018bc2 <http_send+0x5e2>
                hs->file += len;
 8018b8a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018b8e:	4413      	add	r3, r2
 8018b90:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8018b92:	e68e      	b.n	80188b2 <http_send+0x2d2>
 8018b94:	233a      	movs	r3, #58	; 0x3a
 8018b96:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8018b98:	f04f 0e09 	mov.w	lr, #9
 8018b9c:	e9cd 3200 	strd	r3, r2, [sp]
 8018ba0:	e79c      	b.n	8018adc <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8018ba2:	4b0f      	ldr	r3, [pc, #60]	; (8018be0 <http_send+0x600>)
 8018ba4:	f240 323f 	movw	r2, #831	; 0x33f
 8018ba8:	4912      	ldr	r1, [pc, #72]	; (8018bf4 <http_send+0x614>)
 8018baa:	480f      	ldr	r0, [pc, #60]	; (8018be8 <http_send+0x608>)
 8018bac:	f00c fc02 	bl	80253b4 <iprintf>
 8018bb0:	e7c4      	b.n	8018b3c <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8018bb2:	4b0b      	ldr	r3, [pc, #44]	; (8018be0 <http_send+0x600>)
 8018bb4:	f240 3206 	movw	r2, #774	; 0x306
 8018bb8:	490f      	ldr	r1, [pc, #60]	; (8018bf8 <http_send+0x618>)
 8018bba:	480b      	ldr	r0, [pc, #44]	; (8018be8 <http_send+0x608>)
 8018bbc:	f00c fbfa 	bl	80253b4 <iprintf>
 8018bc0:	e6e2      	b.n	8018988 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018bc2:	68a2      	ldr	r2, [r4, #8]
 8018bc4:	1a52      	subs	r2, r2, r1
 8018bc6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8018bca:	440a      	add	r2, r1
 8018bcc:	b292      	uxth	r2, r2
 8018bce:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018bd2:	e7dc      	b.n	8018b8e <http_send+0x5ae>
 8018bd4:	46b2      	mov	sl, r6
 8018bd6:	9c01      	ldr	r4, [sp, #4]
 8018bd8:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 8018bdc:	e76f      	b.n	8018abe <http_send+0x4de>
 8018bde:	bf00      	nop
 8018be0:	08042e88 	.word	0x08042e88
 8018be4:	08042ff0 	.word	0x08042ff0
 8018be8:	0802a008 	.word	0x0802a008
 8018bec:	08042fa0 	.word	0x08042fa0
 8018bf0:	08042fd8 	.word	0x08042fd8
 8018bf4:	08042fe0 	.word	0x08042fe0
 8018bf8:	08042fb8 	.word	0x08042fb8
 8018bfc:	08042fc4 	.word	0x08042fc4

08018c00 <http_sent>:
{
 8018c00:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8018c02:	4603      	mov	r3, r0
 8018c04:	b130      	cbz	r0, 8018c14 <http_sent+0x14>
  hs->retries = 0;
 8018c06:	2200      	movs	r2, #0
 8018c08:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8018c0a:	4619      	mov	r1, r3
  hs->retries = 0;
 8018c0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8018c10:	f7ff fce6 	bl	80185e0 <http_send>
}
 8018c14:	2000      	movs	r0, #0
 8018c16:	bd08      	pop	{r3, pc}

08018c18 <http_poll>:
{
 8018c18:	b510      	push	{r4, lr}
 8018c1a:	460c      	mov	r4, r1
  if (hs == NULL) {
 8018c1c:	b1a8      	cbz	r0, 8018c4a <http_poll+0x32>
    hs->retries++;
 8018c1e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8018c22:	3301      	adds	r3, #1
 8018c24:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8018c26:	2b04      	cmp	r3, #4
    hs->retries++;
 8018c28:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8018c2c:	d019      	beq.n	8018c62 <http_poll+0x4a>
    if (hs->handle) {
 8018c2e:	6943      	ldr	r3, [r0, #20]
 8018c30:	b123      	cbz	r3, 8018c3c <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8018c32:	4601      	mov	r1, r0
 8018c34:	4620      	mov	r0, r4
 8018c36:	f7ff fcd3 	bl	80185e0 <http_send>
 8018c3a:	b908      	cbnz	r0, 8018c40 <http_poll+0x28>
  return ERR_OK;
 8018c3c:	2000      	movs	r0, #0
}
 8018c3e:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8018c40:	4620      	mov	r0, r4
 8018c42:	f006 fc9f 	bl	801f584 <tcp_output>
  return ERR_OK;
 8018c46:	2000      	movs	r0, #0
 8018c48:	e7f9      	b.n	8018c3e <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8018c4a:	4601      	mov	r1, r0
 8018c4c:	4620      	mov	r0, r4
 8018c4e:	f7ff fc23 	bl	8018498 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8018c52:	3001      	adds	r0, #1
 8018c54:	d1f2      	bne.n	8018c3c <http_poll+0x24>
      altcp_abort(pcb);
 8018c56:	4620      	mov	r0, r4
 8018c58:	f003 fd66 	bl	801c728 <tcp_abort>
      return ERR_ABRT;
 8018c5c:	f06f 000c 	mvn.w	r0, #12
}
 8018c60:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8018c62:	4601      	mov	r1, r0
 8018c64:	4620      	mov	r0, r4
 8018c66:	f7ff fc17 	bl	8018498 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 8018c6a:	2000      	movs	r0, #0
}
 8018c6c:	bd10      	pop	{r4, pc}
 8018c6e:	bf00      	nop

08018c70 <http_recv>:
{
 8018c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c74:	4605      	mov	r5, r0
 8018c76:	b08d      	sub	sp, #52	; 0x34
 8018c78:	460e      	mov	r6, r1
 8018c7a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8018c7c:	b9ab      	cbnz	r3, 8018caa <http_recv+0x3a>
 8018c7e:	fab2 f782 	clz	r7, r2
 8018c82:	097f      	lsrs	r7, r7, #5
 8018c84:	b1ca      	cbz	r2, 8018cba <http_recv+0x4a>
 8018c86:	b188      	cbz	r0, 8018cac <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 8018c88:	8911      	ldrh	r1, [r2, #8]
 8018c8a:	4630      	mov	r0, r6
 8018c8c:	f002 ff48 	bl	801bb20 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8018c90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	f040 813c 	bne.w	8018f10 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 8018c98:	696b      	ldr	r3, [r5, #20]
 8018c9a:	b1b3      	cbz	r3, 8018cca <http_recv+0x5a>
      pbuf_free(p);
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	f002 fabf 	bl	801b220 <pbuf_free>
}
 8018ca2:	2000      	movs	r0, #0
 8018ca4:	b00d      	add	sp, #52	; 0x34
 8018ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8018caa:	b132      	cbz	r2, 8018cba <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 8018cac:	4630      	mov	r0, r6
 8018cae:	8921      	ldrh	r1, [r4, #8]
 8018cb0:	f002 ff36 	bl	801bb20 <tcp_recved>
      pbuf_free(p);
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f002 fab3 	bl	801b220 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 8018cba:	4629      	mov	r1, r5
 8018cbc:	4630      	mov	r0, r6
 8018cbe:	f7ff fbeb 	bl	8018498 <http_close_or_abort_conn.constprop.0>
}
 8018cc2:	2000      	movs	r0, #0
 8018cc4:	b00d      	add	sp, #52	; 0x34
 8018cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8018cca:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 8018ccc:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	f040 8173 	bne.w	8018fba <http_recv+0x34a>
  if (hs->req == NULL) {
 8018cd4:	2800      	cmp	r0, #0
 8018cd6:	f000 8136 	beq.w	8018f46 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 8018cda:	4621      	mov	r1, r4
 8018cdc:	f002 fad2 	bl	801b284 <pbuf_cat>
  pbuf_ref(p);
 8018ce0:	4620      	mov	r0, r4
 8018ce2:	f002 fabb 	bl	801b25c <pbuf_ref>
  if (hs->req->next != NULL) {
 8018ce6:	6a28      	ldr	r0, [r5, #32]
 8018ce8:	6803      	ldr	r3, [r0, #0]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	f000 812d 	beq.w	8018f4a <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018cf0:	8907      	ldrh	r7, [r0, #8]
 8018cf2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018cf6:	49bc      	ldr	r1, [pc, #752]	; (8018fe8 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018cf8:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 8018cfa:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018cfc:	bf28      	it	cs
 8018cfe:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018d00:	2300      	movs	r3, #0
 8018d02:	463a      	mov	r2, r7
 8018d04:	f002 fb30 	bl	801b368 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8018d08:	2f06      	cmp	r7, #6
 8018d0a:	f240 80ef 	bls.w	8018eec <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8018d0e:	463a      	mov	r2, r7
 8018d10:	49b6      	ldr	r1, [pc, #728]	; (8018fec <http_recv+0x37c>)
 8018d12:	4640      	mov	r0, r8
 8018d14:	f000 fa4e 	bl	80191b4 <lwip_strnstr>
    if (crlf != NULL) {
 8018d18:	2800      	cmp	r0, #0
 8018d1a:	f000 80e7 	beq.w	8018eec <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 8018d1e:	2204      	movs	r2, #4
 8018d20:	49b3      	ldr	r1, [pc, #716]	; (8018ff0 <http_recv+0x380>)
 8018d22:	4640      	mov	r0, r8
 8018d24:	f00d fb1a 	bl	802635c <strncmp>
 8018d28:	4682      	mov	sl, r0
 8018d2a:	2800      	cmp	r0, #0
 8018d2c:	f040 8118 	bne.w	8018f60 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8018d30:	1f3a      	subs	r2, r7, #4
 8018d32:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8018d36:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018d3a:	49ae      	ldr	r1, [pc, #696]	; (8018ff4 <http_recv+0x384>)
 8018d3c:	b292      	uxth	r2, r2
 8018d3e:	4658      	mov	r0, fp
 8018d40:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8018d44:	f000 fa36 	bl	80191b4 <lwip_strnstr>
      if (sp2 == NULL) {
 8018d48:	9a05      	ldr	r2, [sp, #20]
 8018d4a:	4681      	mov	r9, r0
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	f000 8123 	beq.w	8018f98 <http_recv+0x328>
      int is_09 = 0;
 8018d52:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 8018d54:	9305      	str	r3, [sp, #20]
 8018d56:	f1b9 0f00 	cmp.w	r9, #0
 8018d5a:	f000 80c7 	beq.w	8018eec <http_recv+0x27c>
 8018d5e:	9b04      	ldr	r3, [sp, #16]
 8018d60:	4599      	cmp	r9, r3
 8018d62:	f240 80c3 	bls.w	8018eec <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8018d66:	463a      	mov	r2, r7
 8018d68:	49a3      	ldr	r1, [pc, #652]	; (8018ff8 <http_recv+0x388>)
 8018d6a:	4640      	mov	r0, r8
 8018d6c:	f000 fa22 	bl	80191b4 <lwip_strnstr>
 8018d70:	2800      	cmp	r0, #0
 8018d72:	f000 80bb 	beq.w	8018eec <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8018d76:	9b05      	ldr	r3, [sp, #20]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	f000 812b 	beq.w	8018fd4 <http_recv+0x364>
            hs->keepalive = 0;
 8018d7e:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8018d80:	eba9 020b 	sub.w	r2, r9, fp
 8018d84:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 8018d88:	2100      	movs	r1, #0
 8018d8a:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 8018d8c:	b292      	uxth	r2, r2
          *sp1 = 0;
 8018d8e:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8018d90:	f80b 1002 	strb.w	r1, [fp, r2]
 8018d94:	445a      	add	r2, fp
 8018d96:	9206      	str	r2, [sp, #24]
          if (is_post) {
 8018d98:	f1ba 0f00 	cmp.w	sl, #0
 8018d9c:	f000 8113 	beq.w	8018fc6 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8018da0:	f109 0301 	add.w	r3, r9, #1
 8018da4:	4994      	ldr	r1, [pc, #592]	; (8018ff8 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 8018da6:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8018daa:	eba3 0208 	sub.w	r2, r3, r8
 8018dae:	4618      	mov	r0, r3
 8018db0:	9305      	str	r3, [sp, #20]
 8018db2:	1aba      	subs	r2, r7, r2
 8018db4:	f000 f9fe 	bl	80191b4 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8018db8:	9008      	str	r0, [sp, #32]
 8018dba:	2800      	cmp	r0, #0
 8018dbc:	f000 8168 	beq.w	8019090 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8018dc0:	9b05      	ldr	r3, [sp, #20]
 8018dc2:	498e      	ldr	r1, [pc, #568]	; (8018ffc <http_recv+0x38c>)
 8018dc4:	1ac2      	subs	r2, r0, r3
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f000 f9f4 	bl	80191b4 <lwip_strnstr>
    if (scontent_len != NULL) {
 8018dcc:	4603      	mov	r3, r0
 8018dce:	9009      	str	r0, [sp, #36]	; 0x24
 8018dd0:	2800      	cmp	r0, #0
 8018dd2:	f000 812f 	beq.w	8019034 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8018dd6:	3310      	adds	r3, #16
 8018dd8:	220a      	movs	r2, #10
 8018dda:	4984      	ldr	r1, [pc, #528]	; (8018fec <http_recv+0x37c>)
 8018ddc:	4618      	mov	r0, r3
 8018dde:	9307      	str	r3, [sp, #28]
 8018de0:	f000 f9e8 	bl	80191b4 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8018de4:	2800      	cmp	r0, #0
 8018de6:	f000 8125 	beq.w	8019034 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 8018dea:	9b07      	ldr	r3, [sp, #28]
 8018dec:	4618      	mov	r0, r3
 8018dee:	f00b f8bd 	bl	8023f6c <atoi>
        if (content_len == 0) {
 8018df2:	1e02      	subs	r2, r0, #0
 8018df4:	9207      	str	r2, [sp, #28]
 8018df6:	f040 811b 	bne.w	8019030 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8018dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dfc:	7c1b      	ldrb	r3, [r3, #16]
 8018dfe:	2b30      	cmp	r3, #48	; 0x30
 8018e00:	f040 8118 	bne.w	8019034 <http_recv+0x3c4>
 8018e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e06:	7c5b      	ldrb	r3, [r3, #17]
 8018e08:	2b0d      	cmp	r3, #13
 8018e0a:	f040 8113 	bne.w	8019034 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018e0e:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8018e10:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8018e12:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018e14:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018e16:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 8018e18:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8019014 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 8018e1c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018e20:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8018e24:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 8018e26:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018e28:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018e2a:	9a05      	ldr	r2, [sp, #20]
 8018e2c:	bfb4      	ite	lt
 8018e2e:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018e30:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8018e34:	429f      	cmp	r7, r3
 8018e36:	bfa8      	it	ge
 8018e38:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018e3a:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8018e3c:	2700      	movs	r7, #0
 8018e3e:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 8018e42:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018e44:	9807      	ldr	r0, [sp, #28]
 8018e46:	f8cd b004 	str.w	fp, [sp, #4]
 8018e4a:	9000      	str	r0, [sp, #0]
 8018e4c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 8018e50:	9003      	str	r0, [sp, #12]
 8018e52:	203f      	movs	r0, #63	; 0x3f
 8018e54:	9002      	str	r0, [sp, #8]
 8018e56:	4628      	mov	r0, r5
 8018e58:	f7ee ff2a 	bl	8007cb0 <httpd_post_begin>
          if (err == ERR_OK) {
 8018e5c:	2800      	cmp	r0, #0
 8018e5e:	f040 80f7 	bne.w	8019050 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 8018e62:	9807      	ldr	r0, [sp, #28]
 8018e64:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8018e66:	f1ba 0f00 	cmp.w	sl, #0
 8018e6a:	f000 80d5 	beq.w	8019018 <http_recv+0x3a8>
 8018e6e:	4652      	mov	r2, sl
 8018e70:	e005      	b.n	8018e7e <http_recv+0x20e>
              q = q->next;
 8018e72:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8018e74:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018e78:	2a00      	cmp	r2, #0
 8018e7a:	f000 80cd 	beq.w	8019018 <http_recv+0x3a8>
 8018e7e:	8953      	ldrh	r3, [r2, #10]
 8018e80:	4543      	cmp	r3, r8
              start_offset -= q->len;
 8018e82:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018e86:	d9f4      	bls.n	8018e72 <http_recv+0x202>
 8018e88:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 8018e8a:	4641      	mov	r1, r8
 8018e8c:	4610      	mov	r0, r2
 8018e8e:	f002 f93b 	bl	801b108 <pbuf_remove_header>
              pbuf_ref(q);
 8018e92:	4650      	mov	r0, sl
 8018e94:	f002 f9e2 	bl	801b25c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8018e98:	4651      	mov	r1, sl
 8018e9a:	4628      	mov	r0, r5
 8018e9c:	f7ff fa98 	bl	80183d0 <http_post_rxpbuf>
 8018ea0:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8018ea2:	2f00      	cmp	r7, #0
 8018ea4:	f000 80ba 	beq.w	801901c <http_recv+0x3ac>
              *sp1 = ' ';
 8018ea8:	2320      	movs	r3, #32
 8018eaa:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8018eac:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8018eb0:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018eb2:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018eb4:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8018eb8:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8018eba:	d022      	beq.n	8018f02 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8018ebc:	2f00      	cmp	r7, #0
 8018ebe:	d048      	beq.n	8018f52 <http_recv+0x2e2>
 8018ec0:	1d7a      	adds	r2, r7, #5
 8018ec2:	f43f aeeb 	beq.w	8018c9c <http_recv+0x2c>
 8018ec6:	f027 0308 	bic.w	r3, r7, #8
 8018eca:	b25b      	sxtb	r3, r3
 8018ecc:	3310      	adds	r3, #16
 8018ece:	d12e      	bne.n	8018f2e <http_recv+0x2be>
        if (hs->req != NULL) {
 8018ed0:	6a28      	ldr	r0, [r5, #32]
 8018ed2:	b3a0      	cbz	r0, 8018f3e <http_recv+0x2ce>
          pbuf_free(hs->req);
 8018ed4:	f002 f9a4 	bl	801b220 <pbuf_free>
          hs->req = NULL;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8018edc:	4620      	mov	r0, r4
 8018ede:	f002 f99f 	bl	801b220 <pbuf_free>
      if (parsed == ERR_OK) {
 8018ee2:	b1df      	cbz	r7, 8018f1c <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 8018ee4:	3710      	adds	r7, #16
 8018ee6:	f43f aee8 	beq.w	8018cba <http_recv+0x4a>
 8018eea:	e6ea      	b.n	8018cc2 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 8018eec:	6a28      	ldr	r0, [r5, #32]
 8018eee:	f002 f9ab 	bl	801b248 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8018ef2:	6a2b      	ldr	r3, [r5, #32]
 8018ef4:	891b      	ldrh	r3, [r3, #8]
 8018ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018efa:	d202      	bcs.n	8018f02 <http_recv+0x292>
 8018efc:	2805      	cmp	r0, #5
 8018efe:	f67f aecd 	bls.w	8018c9c <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8018f02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8018f06:	4628      	mov	r0, r5
 8018f08:	f7ff fa88 	bl	801841c <http_find_error_file>
 8018f0c:	4607      	mov	r7, r0
 8018f0e:	e7d5      	b.n	8018ebc <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 8018f10:	4621      	mov	r1, r4
 8018f12:	4628      	mov	r0, r5
    hs->retries = 0;
 8018f14:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8018f18:	f7ff fa5a 	bl	80183d0 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8018f1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	f47f aecf 	bne.w	8018cc2 <http_recv+0x52>
      http_send(pcb, hs);
 8018f24:	4629      	mov	r1, r5
 8018f26:	4630      	mov	r0, r6
 8018f28:	f7ff fb5a 	bl	80185e0 <http_send>
 8018f2c:	e6c9      	b.n	8018cc2 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8018f2e:	4b34      	ldr	r3, [pc, #208]	; (8019000 <http_recv+0x390>)
 8018f30:	f640 2204 	movw	r2, #2564	; 0xa04
 8018f34:	4933      	ldr	r1, [pc, #204]	; (8019004 <http_recv+0x394>)
 8018f36:	4834      	ldr	r0, [pc, #208]	; (8019008 <http_recv+0x398>)
 8018f38:	f00c fa3c 	bl	80253b4 <iprintf>
 8018f3c:	e7c8      	b.n	8018ed0 <http_recv+0x260>
      pbuf_free(p);
 8018f3e:	4620      	mov	r0, r4
 8018f40:	f002 f96e 	bl	801b220 <pbuf_free>
      if (parsed == ERR_OK) {
 8018f44:	e7ce      	b.n	8018ee4 <http_recv+0x274>
    hs->req = p;
 8018f46:	622c      	str	r4, [r5, #32]
 8018f48:	e6ca      	b.n	8018ce0 <http_recv+0x70>
    data = (char *)p->payload;
 8018f4a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8018f4e:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8018f50:	e6da      	b.n	8018d08 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8018f52:	1d7b      	adds	r3, r7, #5
 8018f54:	f43f aea2 	beq.w	8018c9c <http_recv+0x2c>
        if (hs->req != NULL) {
 8018f58:	6a28      	ldr	r0, [r5, #32]
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	d0be      	beq.n	8018edc <http_recv+0x26c>
 8018f5e:	e7b9      	b.n	8018ed4 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 8018f60:	2205      	movs	r2, #5
 8018f62:	492a      	ldr	r1, [pc, #168]	; (801900c <http_recv+0x39c>)
 8018f64:	4640      	mov	r0, r8
 8018f66:	f00d f9f9 	bl	802635c <strncmp>
 8018f6a:	9005      	str	r0, [sp, #20]
 8018f6c:	b9d8      	cbnz	r0, 8018fa6 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8018f6e:	f1a7 0a05 	sub.w	sl, r7, #5
 8018f72:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 8018f76:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018f7a:	491e      	ldr	r1, [pc, #120]	; (8018ff4 <http_recv+0x384>)
 8018f7c:	fa1f fa8a 	uxth.w	sl, sl
 8018f80:	4658      	mov	r0, fp
        sp1 = data + 4;
 8018f82:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018f84:	4652      	mov	r2, sl
 8018f86:	f000 f915 	bl	80191b4 <lwip_strnstr>
      if (sp2 == NULL) {
 8018f8a:	4681      	mov	r9, r0
 8018f8c:	2800      	cmp	r0, #0
 8018f8e:	d059      	beq.n	8019044 <http_recv+0x3d4>
        is_post = 1;
 8018f90:	f04f 0a01 	mov.w	sl, #1
 8018f94:	9b05      	ldr	r3, [sp, #20]
 8018f96:	e6dd      	b.n	8018d54 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018f98:	4914      	ldr	r1, [pc, #80]	; (8018fec <http_recv+0x37c>)
 8018f9a:	4658      	mov	r0, fp
 8018f9c:	f000 f90a 	bl	80191b4 <lwip_strnstr>
        is_09 = 1;
 8018fa0:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018fa2:	4681      	mov	r9, r0
        if (is_post) {
 8018fa4:	e6d6      	b.n	8018d54 <http_recv+0xe4>
        data[4] = 0;
 8018fa6:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8018fa8:	f240 11f5 	movw	r1, #501	; 0x1f5
 8018fac:	4628      	mov	r0, r5
        data[4] = 0;
 8018fae:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8018fb2:	f7ff fa33 	bl	801841c <http_find_error_file>
 8018fb6:	4607      	mov	r7, r0
 8018fb8:	e780      	b.n	8018ebc <http_recv+0x24c>
        if (hs->req != NULL) {
 8018fba:	2800      	cmp	r0, #0
 8018fbc:	f43f ae6e 	beq.w	8018c9c <http_recv+0x2c>
 8018fc0:	f06f 0707 	mvn.w	r7, #7
 8018fc4:	e786      	b.n	8018ed4 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 8018fc6:	461a      	mov	r2, r3
 8018fc8:	4659      	mov	r1, fp
 8018fca:	4628      	mov	r0, r5
 8018fcc:	f7ff f910 	bl	80181f0 <http_find_file>
 8018fd0:	4607      	mov	r7, r0
 8018fd2:	e773      	b.n	8018ebc <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8018fd4:	463a      	mov	r2, r7
 8018fd6:	490e      	ldr	r1, [pc, #56]	; (8019010 <http_recv+0x3a0>)
 8018fd8:	4640      	mov	r0, r8
 8018fda:	f000 f8eb 	bl	80191b4 <lwip_strnstr>
 8018fde:	9b05      	ldr	r3, [sp, #20]
 8018fe0:	2800      	cmp	r0, #0
 8018fe2:	d047      	beq.n	8019074 <http_recv+0x404>
            hs->keepalive = 1;
 8018fe4:	2001      	movs	r0, #1
 8018fe6:	e6cb      	b.n	8018d80 <http_recv+0x110>
 8018fe8:	2001e688 	.word	0x2001e688
 8018fec:	0802a12c 	.word	0x0802a12c
 8018ff0:	08043008 	.word	0x08043008
 8018ff4:	0802c53c 	.word	0x0802c53c
 8018ff8:	0802a28c 	.word	0x0802a28c
 8018ffc:	0802a294 	.word	0x0802a294
 8019000:	08042e88 	.word	0x08042e88
 8019004:	08043048 	.word	0x08043048
 8019008:	0802a008 	.word	0x0802a008
 801900c:	08043010 	.word	0x08043010
 8019010:	08043018 	.word	0x08043018
 8019014:	2001e644 	.word	0x2001e644
            } else if (hs->post_content_len_left == 0) {
 8019018:	9b07      	ldr	r3, [sp, #28]
 801901a:	b303      	cbz	r3, 801905e <http_recv+0x3ee>
        if (hs->req != NULL) {
 801901c:	6a28      	ldr	r0, [r5, #32]
 801901e:	b398      	cbz	r0, 8019088 <http_recv+0x418>
          pbuf_free(hs->req);
 8019020:	f002 f8fe 	bl	801b220 <pbuf_free>
          hs->req = NULL;
 8019024:	2300      	movs	r3, #0
      pbuf_free(p);
 8019026:	4620      	mov	r0, r4
          hs->req = NULL;
 8019028:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801902a:	f002 f8f9 	bl	801b220 <pbuf_free>
      if (parsed == ERR_OK) {
 801902e:	e775      	b.n	8018f1c <http_recv+0x2ac>
        if (content_len >= 0) {
 8019030:	f6bf aeed 	bge.w	8018e0e <http_recv+0x19e>
              *sp1 = ' ';
 8019034:	2320      	movs	r3, #32
 8019036:	9a04      	ldr	r2, [sp, #16]
 8019038:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801903a:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801903c:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8019040:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8019042:	e75e      	b.n	8018f02 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8019044:	4652      	mov	r2, sl
 8019046:	4658      	mov	r0, fp
 8019048:	4915      	ldr	r1, [pc, #84]	; (80190a0 <http_recv+0x430>)
 801904a:	f000 f8b3 	bl	80191b4 <lwip_strnstr>
        if (is_post) {
 801904e:	e758      	b.n	8018f02 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 8019050:	463a      	mov	r2, r7
 8019052:	4659      	mov	r1, fp
 8019054:	4628      	mov	r0, r5
 8019056:	f7ff f8cb 	bl	80181f0 <http_find_file>
 801905a:	4607      	mov	r7, r0
 801905c:	e721      	b.n	8018ea2 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 801905e:	9907      	ldr	r1, [sp, #28]
 8019060:	2241      	movs	r2, #65	; 0x41
 8019062:	4608      	mov	r0, r1
 8019064:	f001 ff0a 	bl	801ae7c <pbuf_alloc>
 8019068:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 801906a:	4628      	mov	r0, r5
 801906c:	f7ff f9b0 	bl	80183d0 <http_post_rxpbuf>
 8019070:	4607      	mov	r7, r0
 8019072:	e716      	b.n	8018ea2 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8019074:	463a      	mov	r2, r7
 8019076:	490b      	ldr	r1, [pc, #44]	; (80190a4 <http_recv+0x434>)
 8019078:	4640      	mov	r0, r8
 801907a:	f000 f89b 	bl	80191b4 <lwip_strnstr>
            hs->keepalive = 1;
 801907e:	3800      	subs	r0, #0
 8019080:	9b05      	ldr	r3, [sp, #20]
 8019082:	bf18      	it	ne
 8019084:	2001      	movne	r0, #1
 8019086:	e67b      	b.n	8018d80 <http_recv+0x110>
      pbuf_free(p);
 8019088:	4620      	mov	r0, r4
 801908a:	f002 f8c9 	bl	801b220 <pbuf_free>
      if (parsed == ERR_OK) {
 801908e:	e745      	b.n	8018f1c <http_recv+0x2ac>
              *sp1 = ' ';
 8019090:	2320      	movs	r3, #32
 8019092:	9a04      	ldr	r2, [sp, #16]
 8019094:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8019096:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8019098:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801909c:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 801909e:	e5fd      	b.n	8018c9c <http_recv+0x2c>
 80190a0:	0802a12c 	.word	0x0802a12c
 80190a4:	08043030 	.word	0x08043030

080190a8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80190a8:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80190aa:	202e      	movs	r0, #46	; 0x2e
 80190ac:	f003 fc60 	bl	801c970 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80190b0:	b358      	cbz	r0, 801910a <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80190b2:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80190b4:	2101      	movs	r1, #1
 80190b6:	f002 fe3d 	bl	801bd34 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80190ba:	2250      	movs	r2, #80	; 0x50
 80190bc:	4917      	ldr	r1, [pc, #92]	; (801911c <httpd_init+0x74>)
 80190be:	4620      	mov	r0, r4
 80190c0:	f002 fc0c 	bl	801b8dc <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80190c4:	b958      	cbnz	r0, 80190de <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 80190c6:	4620      	mov	r0, r4
 80190c8:	21ff      	movs	r1, #255	; 0xff
 80190ca:	f002 fce9 	bl	801baa0 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80190ce:	4604      	mov	r4, r0
 80190d0:	b198      	cbz	r0, 80190fa <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 80190d2:	4620      	mov	r0, r4
 80190d4:	4912      	ldr	r1, [pc, #72]	; (8019120 <httpd_init+0x78>)
}
 80190d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 80190da:	f002 beb9 	b.w	801be50 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80190de:	4b11      	ldr	r3, [pc, #68]	; (8019124 <httpd_init+0x7c>)
 80190e0:	f640 2257 	movw	r2, #2647	; 0xa57
 80190e4:	4910      	ldr	r1, [pc, #64]	; (8019128 <httpd_init+0x80>)
 80190e6:	4811      	ldr	r0, [pc, #68]	; (801912c <httpd_init+0x84>)
 80190e8:	f00c f964 	bl	80253b4 <iprintf>
    pcb = altcp_listen(pcb);
 80190ec:	4620      	mov	r0, r4
 80190ee:	21ff      	movs	r1, #255	; 0xff
 80190f0:	f002 fcd6 	bl	801baa0 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80190f4:	4604      	mov	r4, r0
 80190f6:	2800      	cmp	r0, #0
 80190f8:	d1eb      	bne.n	80190d2 <httpd_init+0x2a>
 80190fa:	4b0a      	ldr	r3, [pc, #40]	; (8019124 <httpd_init+0x7c>)
 80190fc:	f640 2259 	movw	r2, #2649	; 0xa59
 8019100:	490b      	ldr	r1, [pc, #44]	; (8019130 <httpd_init+0x88>)
 8019102:	480a      	ldr	r0, [pc, #40]	; (801912c <httpd_init+0x84>)
 8019104:	f00c f956 	bl	80253b4 <iprintf>
 8019108:	e7e3      	b.n	80190d2 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801910a:	4b06      	ldr	r3, [pc, #24]	; (8019124 <httpd_init+0x7c>)
 801910c:	f640 2272 	movw	r2, #2674	; 0xa72
 8019110:	4908      	ldr	r1, [pc, #32]	; (8019134 <httpd_init+0x8c>)
 8019112:	4806      	ldr	r0, [pc, #24]	; (801912c <httpd_init+0x84>)
}
 8019114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8019118:	f00c b94c 	b.w	80253b4 <iprintf>
 801911c:	080459a4 	.word	0x080459a4
 8019120:	08017f99 	.word	0x08017f99
 8019124:	08042e88 	.word	0x08042e88
 8019128:	08043090 	.word	0x08043090
 801912c:	0802a008 	.word	0x0802a008
 8019130:	080430ac 	.word	0x080430ac
 8019134:	08043074 	.word	0x08043074

08019138 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8019138:	b570      	push	{r4, r5, r6, lr}
 801913a:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801913c:	4606      	mov	r6, r0
{
 801913e:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8019140:	b1c8      	cbz	r0, 8019176 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 8019142:	4b11      	ldr	r3, [pc, #68]	; (8019188 <http_set_ssi_handler+0x50>)
 8019144:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8019146:	b175      	cbz	r5, 8019166 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8019148:	2c00      	cmp	r4, #0
 801914a:	dd04      	ble.n	8019156 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 801914c:	4a0f      	ldr	r2, [pc, #60]	; (801918c <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 801914e:	4b10      	ldr	r3, [pc, #64]	; (8019190 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 8019150:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 8019152:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8019154:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8019156:	4b0f      	ldr	r3, [pc, #60]	; (8019194 <http_set_ssi_handler+0x5c>)
 8019158:	f640 229f 	movw	r2, #2719	; 0xa9f
 801915c:	490e      	ldr	r1, [pc, #56]	; (8019198 <http_set_ssi_handler+0x60>)
 801915e:	480f      	ldr	r0, [pc, #60]	; (801919c <http_set_ssi_handler+0x64>)
 8019160:	f00c f928 	bl	80253b4 <iprintf>
 8019164:	e7f2      	b.n	801914c <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 8019166:	4b0b      	ldr	r3, [pc, #44]	; (8019194 <http_set_ssi_handler+0x5c>)
 8019168:	f640 229e 	movw	r2, #2718	; 0xa9e
 801916c:	490c      	ldr	r1, [pc, #48]	; (80191a0 <http_set_ssi_handler+0x68>)
 801916e:	480b      	ldr	r0, [pc, #44]	; (801919c <http_set_ssi_handler+0x64>)
 8019170:	f00c f920 	bl	80253b4 <iprintf>
 8019174:	e7e8      	b.n	8019148 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8019176:	4b07      	ldr	r3, [pc, #28]	; (8019194 <http_set_ssi_handler+0x5c>)
 8019178:	f640 2297 	movw	r2, #2711	; 0xa97
 801917c:	4909      	ldr	r1, [pc, #36]	; (80191a4 <http_set_ssi_handler+0x6c>)
 801917e:	4807      	ldr	r0, [pc, #28]	; (801919c <http_set_ssi_handler+0x64>)
 8019180:	f00c f918 	bl	80253b4 <iprintf>
 8019184:	e7dd      	b.n	8019142 <http_set_ssi_handler+0xa>
 8019186:	bf00      	nop
 8019188:	2001ea88 	.word	0x2001ea88
 801918c:	2001ea8c 	.word	0x2001ea8c
 8019190:	2001e684 	.word	0x2001e684
 8019194:	08042e88 	.word	0x08042e88
 8019198:	080430f4 	.word	0x080430f4
 801919c:	0802a008 	.word	0x0802a008
 80191a0:	080430e4 	.word	0x080430e4
 80191a4:	080430cc 	.word	0x080430cc

080191a8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80191a8:	ba40      	rev16	r0, r0
}
 80191aa:	b280      	uxth	r0, r0
 80191ac:	4770      	bx	lr
 80191ae:	bf00      	nop

080191b0 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80191b0:	ba00      	rev	r0, r0
 80191b2:	4770      	bx	lr

080191b4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80191b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b8:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 80191ba:	4608      	mov	r0, r1
{
 80191bc:	4688      	mov	r8, r1
 80191be:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 80191c0:	f7e7 f848 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 80191c4:	b1c0      	cbz	r0, 80191f8 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80191c6:	4605      	mov	r5, r0
 80191c8:	7820      	ldrb	r0, [r4, #0]
 80191ca:	b1b0      	cbz	r0, 80191fa <lwip_strnstr+0x46>
 80191cc:	4426      	add	r6, r4
 80191ce:	1962      	adds	r2, r4, r5
 80191d0:	4296      	cmp	r6, r2
 80191d2:	d314      	bcc.n	80191fe <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80191d4:	f898 7000 	ldrb.w	r7, [r8]
 80191d8:	e005      	b.n	80191e6 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80191da:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80191de:	1962      	adds	r2, r4, r5
 80191e0:	b158      	cbz	r0, 80191fa <lwip_strnstr+0x46>
 80191e2:	4296      	cmp	r6, r2
 80191e4:	d30b      	bcc.n	80191fe <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80191e6:	4287      	cmp	r7, r0
 80191e8:	d1f7      	bne.n	80191da <lwip_strnstr+0x26>
 80191ea:	4620      	mov	r0, r4
 80191ec:	462a      	mov	r2, r5
 80191ee:	4641      	mov	r1, r8
 80191f0:	f00d f8b4 	bl	802635c <strncmp>
 80191f4:	2800      	cmp	r0, #0
 80191f6:	d1f0      	bne.n	80191da <lwip_strnstr+0x26>
 80191f8:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 80191fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 80191fe:	2000      	movs	r0, #0
}
 8019200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019204 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8019204:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8019208:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801920c:	4293      	cmp	r3, r2
 801920e:	d01c      	beq.n	801924a <lwip_stricmp+0x46>
 8019210:	f043 0c20 	orr.w	ip, r3, #32
{
 8019214:	b500      	push	{lr}
 8019216:	f042 0e20 	orr.w	lr, r2, #32
 801921a:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801921e:	2a19      	cmp	r2, #25
 8019220:	d810      	bhi.n	8019244 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8019222:	45f4      	cmp	ip, lr
 8019224:	d10e      	bne.n	8019244 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8019226:	b1a3      	cbz	r3, 8019252 <lwip_stricmp+0x4e>
    c1 = *str1++;
 8019228:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801922c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8019230:	4293      	cmp	r3, r2
 8019232:	d0f8      	beq.n	8019226 <lwip_stricmp+0x22>
 8019234:	f043 0c20 	orr.w	ip, r3, #32
 8019238:	f042 0e20 	orr.w	lr, r2, #32
 801923c:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8019240:	2a19      	cmp	r2, #25
 8019242:	d9ee      	bls.n	8019222 <lwip_stricmp+0x1e>
        return 1;
 8019244:	2001      	movs	r0, #1
  return 0;
}
 8019246:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 801924a:	2b00      	cmp	r3, #0
 801924c:	d1da      	bne.n	8019204 <lwip_stricmp>
  return 0;
 801924e:	4618      	mov	r0, r3
}
 8019250:	4770      	bx	lr
  return 0;
 8019252:	4618      	mov	r0, r3
}
 8019254:	f85d fb04 	ldr.w	pc, [sp], #4

08019258 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8019258:	4684      	mov	ip, r0
 801925a:	b570      	push	{r4, r5, r6, lr}
 801925c:	e004      	b.n	8019268 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801925e:	42b4      	cmp	r4, r6
 8019260:	d113      	bne.n	801928a <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 8019262:	42e8      	cmn	r0, r5
 8019264:	d013      	beq.n	801928e <lwip_strnicmp+0x36>
 8019266:	b193      	cbz	r3, 801928e <lwip_strnicmp+0x36>
    c1 = *str1++;
 8019268:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 801926c:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 8019270:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8019274:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 8019278:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 801927a:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801927e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 8019282:	d0ee      	beq.n	8019262 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8019284:	f1be 0f19 	cmp.w	lr, #25
 8019288:	d9e9      	bls.n	801925e <lwip_strnicmp+0x6>
        return 1;
 801928a:	2001      	movs	r0, #1
  return 0;
}
 801928c:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 801928e:	2000      	movs	r0, #0
}
 8019290:	bd70      	pop	{r4, r5, r6, pc}
 8019292:	bf00      	nop

08019294 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8019294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019298:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801929a:	4f24      	ldr	r7, [pc, #144]	; (801932c <dns_call_found+0x98>)
 801929c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80192a0:	4c23      	ldr	r4, [pc, #140]	; (8019330 <dns_call_found+0x9c>)
{
 80192a2:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80192a4:	012e      	lsls	r6, r5, #4
 80192a6:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 80192aa:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 80192ae:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80192b2:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80192b6:	6823      	ldr	r3, [r4, #0]
 80192b8:	b143      	cbz	r3, 80192cc <dns_call_found+0x38>
 80192ba:	7a22      	ldrb	r2, [r4, #8]
 80192bc:	42aa      	cmp	r2, r5
 80192be:	d105      	bne.n	80192cc <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80192c0:	6862      	ldr	r2, [r4, #4]
 80192c2:	4651      	mov	r1, sl
 80192c4:	4640      	mov	r0, r8
 80192c6:	4798      	blx	r3
      dns_requests[i].found = NULL;
 80192c8:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80192cc:	340c      	adds	r4, #12
 80192ce:	454c      	cmp	r4, r9
 80192d0:	d1f1      	bne.n	80192b6 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80192d2:	1973      	adds	r3, r6, r5
 80192d4:	2400      	movs	r4, #0
 80192d6:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80192da:	4f14      	ldr	r7, [pc, #80]	; (801932c <dns_call_found+0x98>)
 80192dc:	7bd9      	ldrb	r1, [r3, #15]
 80192de:	463a      	mov	r2, r7
    if (i == idx) {
 80192e0:	b2e3      	uxtb	r3, r4
 80192e2:	3401      	adds	r4, #1
 80192e4:	429d      	cmp	r5, r3
 80192e6:	d002      	beq.n	80192ee <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80192e8:	7a93      	ldrb	r3, [r2, #10]
 80192ea:	2b02      	cmp	r3, #2
 80192ec:	d015      	beq.n	801931a <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80192ee:	2c04      	cmp	r4, #4
 80192f0:	f502 7288 	add.w	r2, r2, #272	; 0x110
 80192f4:	d1f4      	bne.n	80192e0 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80192f6:	2903      	cmp	r1, #3
 80192f8:	d80d      	bhi.n	8019316 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80192fa:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80192fc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8019334 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8019300:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8019304:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8019308:	f007 f860 	bl	80203cc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801930c:	2200      	movs	r2, #0
 801930e:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8019310:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8019312:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8019316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801931a:	7bd3      	ldrb	r3, [r2, #15]
 801931c:	428b      	cmp	r3, r1
 801931e:	d1e6      	bne.n	80192ee <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8019320:	4435      	add	r5, r6
 8019322:	2304      	movs	r3, #4
 8019324:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8019328:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801932a:	e7f4      	b.n	8019316 <dns_call_found+0x82>
 801932c:	2001eae0 	.word	0x2001eae0
 8019330:	2001eaa4 	.word	0x2001eaa4
 8019334:	2001ea94 	.word	0x2001ea94

08019338 <dns_send.isra.0>:
dns_send(u8_t idx)
 8019338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801933c:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 801933e:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8019340:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 8019344:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8019346:	9301      	str	r3, [sp, #4]
 8019348:	4b56      	ldr	r3, [pc, #344]	; (80194a4 <dns_send.isra.0+0x16c>)
 801934a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801934e:	7ae3      	ldrb	r3, [r4, #11]
 8019350:	2b01      	cmp	r3, #1
 8019352:	d907      	bls.n	8019364 <dns_send.isra.0+0x2c>
 8019354:	4b54      	ldr	r3, [pc, #336]	; (80194a8 <dns_send.isra.0+0x170>)
 8019356:	f240 22fa 	movw	r2, #762	; 0x2fa
 801935a:	4954      	ldr	r1, [pc, #336]	; (80194ac <dns_send.isra.0+0x174>)
 801935c:	4854      	ldr	r0, [pc, #336]	; (80194b0 <dns_send.isra.0+0x178>)
 801935e:	f00c f829 	bl	80253b4 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8019362:	7ae3      	ldrb	r3, [r4, #11]
 8019364:	4a53      	ldr	r2, [pc, #332]	; (80194b4 <dns_send.isra.0+0x17c>)
 8019366:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801936a:	2c00      	cmp	r4, #0
 801936c:	f000 808b 	beq.w	8019486 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8019370:	9b01      	ldr	r3, [sp, #4]
 8019372:	4e4c      	ldr	r6, [pc, #304]	; (80194a4 <dns_send.isra.0+0x16c>)
 8019374:	eb03 0409 	add.w	r4, r3, r9
 8019378:	0124      	lsls	r4, r4, #4
 801937a:	f104 0510 	add.w	r5, r4, #16
 801937e:	4435      	add	r5, r6
 8019380:	4628      	mov	r0, r5
 8019382:	f7e6 ff67 	bl	8000254 <strlen>
 8019386:	3012      	adds	r0, #18
 8019388:	f44f 7220 	mov.w	r2, #640	; 0x280
 801938c:	b281      	uxth	r1, r0
 801938e:	2036      	movs	r0, #54	; 0x36
 8019390:	f001 fd74 	bl	801ae7c <pbuf_alloc>
  if (p != NULL) {
 8019394:	4680      	mov	r8, r0
 8019396:	2800      	cmp	r0, #0
 8019398:	d06d      	beq.n	8019476 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 801939a:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801939c:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 801939e:	260c      	movs	r6, #12
    --hostname;
 80193a0:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 80193a2:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 80193a4:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80193a8:	9305      	str	r3, [sp, #20]
 80193aa:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 80193ae:	f7ff fefb 	bl	80191a8 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 80193b2:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 80193b4:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80193b8:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 80193ba:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 80193be:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80193c2:	4632      	mov	r2, r6
 80193c4:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 80193c6:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80193ca:	f002 f81d 	bl	801b408 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80193ce:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 80193d0:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80193d2:	2b2e      	cmp	r3, #46	; 0x2e
 80193d4:	d052      	beq.n	801947c <dns_send.isra.0+0x144>
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d050      	beq.n	801947c <dns_send.isra.0+0x144>
      ++hostname;
 80193da:	463d      	mov	r5, r7
 80193dc:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 80193e0:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80193e2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80193e6:	2b2e      	cmp	r3, #46	; 0x2e
 80193e8:	b2e4      	uxtb	r4, r4
 80193ea:	d001      	beq.n	80193f0 <dns_send.isra.0+0xb8>
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d1f7      	bne.n	80193e0 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 80193f0:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 80193f4:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 80193f6:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 80193fa:	4433      	add	r3, r6
 80193fc:	4553      	cmp	r3, sl
 80193fe:	dc37      	bgt.n	8019470 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 8019400:	4622      	mov	r2, r4
 8019402:	4631      	mov	r1, r6
 8019404:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8019406:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8019408:	f002 f8e4 	bl	801b5d4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801940c:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 801940e:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8019410:	465a      	mov	r2, fp
 8019412:	4639      	mov	r1, r7
 8019414:	b29b      	uxth	r3, r3
 8019416:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8019418:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801941a:	f002 f85b 	bl	801b4d4 <pbuf_take_at>
    } while (*hostname != 0);
 801941e:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8019420:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8019422:	2a00      	cmp	r2, #0
 8019424:	d1d3      	bne.n	80193ce <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 8019426:	4631      	mov	r1, r6
 8019428:	4640      	mov	r0, r8
 801942a:	f002 f8d3 	bl	801b5d4 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801942e:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 8019432:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8019434:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8019436:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801943a:	4640      	mov	r0, r8
 801943c:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 801943e:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8019442:	2204      	movs	r2, #4
 8019444:	f002 f846 	bl	801b4d4 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8019448:	9b01      	ldr	r3, [sp, #4]
 801944a:	4a16      	ldr	r2, [pc, #88]	; (80194a4 <dns_send.isra.0+0x16c>)
 801944c:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801944e:	4919      	ldr	r1, [pc, #100]	; (80194b4 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 8019450:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8019452:	4b19      	ldr	r3, [pc, #100]	; (80194b8 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 8019454:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 8019458:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801945c:	f89b 000f 	ldrb.w	r0, [fp, #15]
 8019460:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019464:	4641      	mov	r1, r8
 8019466:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801946a:	2335      	movs	r3, #53	; 0x35
 801946c:	f006 ff0c 	bl	8020288 <udp_sendto>
    pbuf_free(p);
 8019470:	4640      	mov	r0, r8
 8019472:	f001 fed5 	bl	801b220 <pbuf_free>
}
 8019476:	b007      	add	sp, #28
 8019478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801947c:	2300      	movs	r3, #0
      ++hostname;
 801947e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8019480:	469b      	mov	fp, r3
 8019482:	461c      	mov	r4, r3
 8019484:	e7b9      	b.n	80193fa <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 8019486:	4648      	mov	r0, r9
 8019488:	4621      	mov	r1, r4
 801948a:	f7ff ff03 	bl	8019294 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 801948e:	9b01      	ldr	r3, [sp, #4]
 8019490:	444b      	add	r3, r9
 8019492:	4699      	mov	r9, r3
 8019494:	4b03      	ldr	r3, [pc, #12]	; (80194a4 <dns_send.isra.0+0x16c>)
 8019496:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 801949a:	f88b 400a 	strb.w	r4, [fp, #10]
}
 801949e:	b007      	add	sp, #28
 80194a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194a4:	2001eae0 	.word	0x2001eae0
 80194a8:	080431cc 	.word	0x080431cc
 80194ac:	080431fc 	.word	0x080431fc
 80194b0:	0802a008 	.word	0x0802a008
 80194b4:	2001ead8 	.word	0x2001ead8
 80194b8:	2001ea94 	.word	0x2001ea94

080194bc <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80194bc:	2803      	cmp	r0, #3
{
 80194be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194c2:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80194c4:	d846      	bhi.n	8019554 <dns_check_entry+0x98>

  switch (entry->state) {
 80194c6:	4e3a      	ldr	r6, [pc, #232]	; (80195b0 <dns_check_entry+0xf4>)
 80194c8:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80194cc:	0125      	lsls	r5, r4, #4
 80194ce:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 80194d2:	7a9b      	ldrb	r3, [r3, #10]
 80194d4:	2b03      	cmp	r3, #3
 80194d6:	d861      	bhi.n	801959c <dns_check_entry+0xe0>
 80194d8:	e8df f003 	tbb	[pc, r3]
 80194dc:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80194e0:	192b      	adds	r3, r5, r4
 80194e2:	011b      	lsls	r3, r3, #4
 80194e4:	58f2      	ldr	r2, [r6, r3]
 80194e6:	2a00      	cmp	r2, #0
 80194e8:	d140      	bne.n	801956c <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80194ea:	442c      	add	r4, r5
 80194ec:	2300      	movs	r3, #0
 80194ee:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80194f2:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 80194f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194f8:	4f2e      	ldr	r7, [pc, #184]	; (80195b4 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 80194fa:	f00b ffff 	bl	80254fc <rand>
 80194fe:	4b2c      	ldr	r3, [pc, #176]	; (80195b0 <dns_check_entry+0xf4>)
 8019500:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019502:	7a9a      	ldrb	r2, [r3, #10]
 8019504:	2a02      	cmp	r2, #2
 8019506:	d02d      	beq.n	8019564 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8019508:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801950c:	429f      	cmp	r7, r3
 801950e:	d1f8      	bne.n	8019502 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 8019510:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 8019512:	2202      	movs	r2, #2
      entry->tmr = 1;
 8019514:	2301      	movs	r3, #1
      err = dns_send(i);
 8019516:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 8019518:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 801951c:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 801951e:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 8019520:	81b3      	strh	r3, [r6, #12]
}
 8019522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8019526:	f7ff bf07 	b.w	8019338 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 801952a:	192a      	adds	r2, r5, r4
 801952c:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8019530:	7b13      	ldrb	r3, [r2, #12]
 8019532:	3b01      	subs	r3, #1
 8019534:	b2db      	uxtb	r3, r3
 8019536:	7313      	strb	r3, [r2, #12]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d1db      	bne.n	80194f4 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801953c:	7b53      	ldrb	r3, [r2, #13]
 801953e:	3301      	adds	r3, #1
 8019540:	b2db      	uxtb	r3, r3
 8019542:	2b04      	cmp	r3, #4
 8019544:	7353      	strb	r3, [r2, #13]
 8019546:	d016      	beq.n	8019576 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 8019548:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801954a:	4620      	mov	r0, r4
}
 801954c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 8019550:	f7ff bef2 	b.w	8019338 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8019554:	4b18      	ldr	r3, [pc, #96]	; (80195b8 <dns_check_entry+0xfc>)
 8019556:	f240 421c 	movw	r2, #1052	; 0x41c
 801955a:	4918      	ldr	r1, [pc, #96]	; (80195bc <dns_check_entry+0x100>)
 801955c:	4818      	ldr	r0, [pc, #96]	; (80195c0 <dns_check_entry+0x104>)
 801955e:	f00b ff29 	bl	80253b4 <iprintf>
 8019562:	e7b0      	b.n	80194c6 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019564:	891a      	ldrh	r2, [r3, #8]
 8019566:	428a      	cmp	r2, r1
 8019568:	d1ce      	bne.n	8019508 <dns_check_entry+0x4c>
 801956a:	e7c6      	b.n	80194fa <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801956c:	3a01      	subs	r2, #1
 801956e:	50f2      	str	r2, [r6, r3]
 8019570:	2a00      	cmp	r2, #0
 8019572:	d0ba      	beq.n	80194ea <dns_check_entry+0x2e>
 8019574:	e7be      	b.n	80194f4 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8019576:	7ad3      	ldrb	r3, [r2, #11]
 8019578:	b913      	cbnz	r3, 8019580 <dns_check_entry+0xc4>
 801957a:	4b12      	ldr	r3, [pc, #72]	; (80195c4 <dns_check_entry+0x108>)
 801957c:	685b      	ldr	r3, [r3, #4]
 801957e:	b94b      	cbnz	r3, 8019594 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 8019580:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 8019582:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 8019584:	2100      	movs	r1, #0
 8019586:	f7ff fe85 	bl	8019294 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 801958a:	2300      	movs	r3, #0
 801958c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8019590:	72b3      	strb	r3, [r6, #10]
            break;
 8019592:	e7af      	b.n	80194f4 <dns_check_entry+0x38>
            entry->server_idx++;
 8019594:	2301      	movs	r3, #1
 8019596:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 8019598:	8193      	strh	r3, [r2, #12]
 801959a:	e7d6      	b.n	801954a <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801959c:	4b06      	ldr	r3, [pc, #24]	; (80195b8 <dns_check_entry+0xfc>)
 801959e:	f240 425b 	movw	r2, #1115	; 0x45b
 80195a2:	4909      	ldr	r1, [pc, #36]	; (80195c8 <dns_check_entry+0x10c>)
 80195a4:	4806      	ldr	r0, [pc, #24]	; (80195c0 <dns_check_entry+0x104>)
}
 80195a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80195aa:	f00b bf03 	b.w	80253b4 <iprintf>
 80195ae:	bf00      	nop
 80195b0:	2001eae0 	.word	0x2001eae0
 80195b4:	2001ef20 	.word	0x2001ef20
 80195b8:	080431cc 	.word	0x080431cc
 80195bc:	08043214 	.word	0x08043214
 80195c0:	0802a008 	.word	0x0802a008
 80195c4:	2001ead8 	.word	0x2001ead8
 80195c8:	08043230 	.word	0x08043230

080195cc <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80195cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195d0:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80195d2:	8912      	ldrh	r2, [r2, #8]
{
 80195d4:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80195d6:	2a0f      	cmp	r2, #15
 80195d8:	d805      	bhi.n	80195e6 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 80195da:	4620      	mov	r0, r4
 80195dc:	f001 fe20 	bl	801b220 <pbuf_free>
  return;
}
 80195e0:	b00d      	add	sp, #52	; 0x34
 80195e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 80195e6:	4699      	mov	r9, r3
 80195e8:	220c      	movs	r2, #12
 80195ea:	2300      	movs	r3, #0
 80195ec:	a906      	add	r1, sp, #24
 80195ee:	4620      	mov	r0, r4
 80195f0:	f001 feba 	bl	801b368 <pbuf_copy_partial>
 80195f4:	280c      	cmp	r0, #12
 80195f6:	4605      	mov	r5, r0
 80195f8:	d1ef      	bne.n	80195da <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 80195fa:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 80198f0 <dns_recv+0x324>
 80195fe:	2600      	movs	r6, #0
 8019600:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8019604:	f7ff fdd0 	bl	80191a8 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8019608:	4643      	mov	r3, r8
 801960a:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 801960c:	7a9a      	ldrb	r2, [r3, #10]
 801960e:	2a02      	cmp	r2, #2
 8019610:	d008      	beq.n	8019624 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8019612:	3601      	adds	r6, #1
 8019614:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8019618:	2e04      	cmp	r6, #4
 801961a:	d0de      	beq.n	80195da <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 801961c:	7a9a      	ldrb	r2, [r3, #10]
 801961e:	b2f7      	uxtb	r7, r6
 8019620:	2a02      	cmp	r2, #2
 8019622:	d1f6      	bne.n	8019612 <dns_recv+0x46>
 8019624:	891a      	ldrh	r2, [r3, #8]
 8019626:	4282      	cmp	r2, r0
 8019628:	d1f3      	bne.n	8019612 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801962a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801962e:	f7ff fdbb 	bl	80191a8 <lwip_htons>
 8019632:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8019634:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8019638:	f7ff fdb6 	bl	80191a8 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801963c:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 8019640:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 8019642:	09db      	lsrs	r3, r3, #7
 8019644:	d0c9      	beq.n	80195da <dns_recv+0xe>
 8019646:	f1ba 0f01 	cmp.w	sl, #1
 801964a:	d1c6      	bne.n	80195da <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 801964c:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8019650:	49a5      	ldr	r1, [pc, #660]	; (80198e8 <dns_recv+0x31c>)
 8019652:	f8d9 2000 	ldr.w	r2, [r9]
 8019656:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 801965a:	7adb      	ldrb	r3, [r3, #11]
 801965c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8019660:	429a      	cmp	r2, r3
 8019662:	d1ba      	bne.n	80195da <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8019664:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8019668:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801966c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80198f4 <dns_recv+0x328>
 8019670:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8019674:	f103 0210 	add.w	r2, r3, #16
 8019678:	9301      	str	r3, [sp, #4]
 801967a:	4442      	add	r2, r8
 801967c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8019680:	462e      	mov	r6, r5
 8019682:	4627      	mov	r7, r4
 8019684:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 8019686:	4631      	mov	r1, r6
 8019688:	4638      	mov	r0, r7
 801968a:	f001 ff93 	bl	801b5b4 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801968e:	2800      	cmp	r0, #0
 8019690:	db2d      	blt.n	80196ee <dns_recv+0x122>
 8019692:	455e      	cmp	r6, fp
 8019694:	d02b      	beq.n	80196ee <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 8019696:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 801969a:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 801969c:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 801969e:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 80196a0:	d025      	beq.n	80196ee <dns_recv+0x122>
      while (n > 0) {
 80196a2:	b330      	cbz	r0, 80196f2 <dns_recv+0x126>
 80196a4:	46aa      	mov	sl, r5
 80196a6:	182c      	adds	r4, r5, r0
 80196a8:	e01b      	b.n	80196e2 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80196aa:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 80196ae:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80196b0:	f819 2000 	ldrb.w	r2, [r9, r0]
 80196b4:	4601      	mov	r1, r0
        ++query;
 80196b6:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80196b8:	f002 0203 	and.w	r2, r2, #3
 80196bc:	2a01      	cmp	r2, #1
 80196be:	f819 2003 	ldrb.w	r2, [r9, r3]
 80196c2:	f002 0203 	and.w	r2, r2, #3
 80196c6:	bf08      	it	eq
 80196c8:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 80196cc:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80196ce:	2a01      	cmp	r2, #1
 80196d0:	bf08      	it	eq
 80196d2:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 80196d4:	455e      	cmp	r6, fp
        response_offset++;
 80196d6:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 80196d8:	d009      	beq.n	80196ee <dns_recv+0x122>
 80196da:	4299      	cmp	r1, r3
 80196dc:	d107      	bne.n	80196ee <dns_recv+0x122>
      while (n > 0) {
 80196de:	4554      	cmp	r4, sl
 80196e0:	d007      	beq.n	80196f2 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 80196e2:	4631      	mov	r1, r6
 80196e4:	4638      	mov	r0, r7
 80196e6:	f001 ff65 	bl	801b5b4 <pbuf_try_get_at>
        if (c < 0) {
 80196ea:	1e03      	subs	r3, r0, #0
 80196ec:	dadd      	bge.n	80196aa <dns_recv+0xde>
 80196ee:	463c      	mov	r4, r7
 80196f0:	e773      	b.n	80195da <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 80196f2:	4631      	mov	r1, r6
 80196f4:	4638      	mov	r0, r7
 80196f6:	f001 ff5d 	bl	801b5b4 <pbuf_try_get_at>
    if (n < 0) {
 80196fa:	2800      	cmp	r0, #0
      ++query;
 80196fc:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 8019700:	dbf5      	blt.n	80196ee <dns_recv+0x122>
  } while (n != 0);
 8019702:	d1c0      	bne.n	8019686 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 8019704:	4635      	mov	r5, r6
 8019706:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801970a:	463c      	mov	r4, r7
 801970c:	9e03      	ldr	r6, [sp, #12]
 801970e:	454d      	cmp	r5, r9
 8019710:	9f02      	ldr	r7, [sp, #8]
 8019712:	f43f af62 	beq.w	80195da <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 8019716:	f105 0a01 	add.w	sl, r5, #1
 801971a:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 801971e:	45ca      	cmp	sl, r9
 8019720:	f43f af5b 	beq.w	80195da <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8019724:	4653      	mov	r3, sl
 8019726:	2204      	movs	r2, #4
 8019728:	a904      	add	r1, sp, #16
 801972a:	4620      	mov	r0, r4
 801972c:	f001 fe1c 	bl	801b368 <pbuf_copy_partial>
 8019730:	2804      	cmp	r0, #4
 8019732:	f47f af52 	bne.w	80195da <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8019736:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801973a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801973e:	f47f af4c 	bne.w	80195da <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8019742:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8019746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801974a:	f47f af46 	bne.w	80195da <dns_recv+0xe>
 801974e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8019752:	459a      	cmp	sl, r3
 8019754:	f63f af41 	bhi.w	80195da <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8019758:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801975c:	071b      	lsls	r3, r3, #28
 801975e:	d017      	beq.n	8019790 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8019760:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019764:	fb03 8306 	mla	r3, r3, r6, r8
 8019768:	7adb      	ldrb	r3, [r3, #11]
 801976a:	2b00      	cmp	r3, #0
 801976c:	f040 80ae 	bne.w	80198cc <dns_recv+0x300>
 8019770:	4b5d      	ldr	r3, [pc, #372]	; (80198e8 <dns_recv+0x31c>)
 8019772:	685b      	ldr	r3, [r3, #4]
 8019774:	2b00      	cmp	r3, #0
 8019776:	f000 80a9 	beq.w	80198cc <dns_recv+0x300>
            entry->tmr     = 1;
 801977a:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 801977e:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8019780:	fb03 8606 	mla	r6, r3, r6, r8
 8019784:	f240 3301 	movw	r3, #769	; 0x301
 8019788:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 801978a:	f7ff fe97 	bl	80194bc <dns_check_entry>
            goto ignore_packet;
 801978e:	e724      	b.n	80195da <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8019790:	3505      	adds	r5, #5
 8019792:	f8dd a000 	ldr.w	sl, [sp]
 8019796:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8019798:	f1ba 0f00 	cmp.w	sl, #0
 801979c:	f000 8096 	beq.w	80198cc <dns_recv+0x300>
 80197a0:	8923      	ldrh	r3, [r4, #8]
 80197a2:	42ab      	cmp	r3, r5
 80197a4:	d80b      	bhi.n	80197be <dns_recv+0x1f2>
 80197a6:	e091      	b.n	80198cc <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 80197a8:	8922      	ldrh	r2, [r4, #8]
 80197aa:	4293      	cmp	r3, r2
 80197ac:	f6bf af15 	bge.w	80195da <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 80197b0:	4629      	mov	r1, r5
 80197b2:	f001 feff 	bl	801b5b4 <pbuf_try_get_at>
    if (n < 0) {
 80197b6:	2800      	cmp	r0, #0
 80197b8:	f6ff af0f 	blt.w	80195da <dns_recv+0xe>
  } while (n != 0);
 80197bc:	d017      	beq.n	80197ee <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 80197be:	4629      	mov	r1, r5
 80197c0:	4620      	mov	r0, r4
 80197c2:	f001 fef7 	bl	801b5b4 <pbuf_try_get_at>
 80197c6:	f105 0b01 	add.w	fp, r5, #1
 80197ca:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 80197cc:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 80197ce:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 80197d2:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 80197d4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 80197d8:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 80197da:	f6ff aefe 	blt.w	80195da <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 80197de:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 80197e0:	f1bb 0f00 	cmp.w	fp, #0
 80197e4:	f43f aef9 	beq.w	80195da <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 80197e8:	2ac0      	cmp	r2, #192	; 0xc0
 80197ea:	d1dd      	bne.n	80197a8 <dns_recv+0x1dc>
 80197ec:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 80197ee:	454d      	cmp	r5, r9
 80197f0:	f43f aef3 	beq.w	80195da <dns_recv+0xe>
  return (u16_t)(offset + 1);
 80197f4:	f105 0b01 	add.w	fp, r5, #1
 80197f8:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 80197fc:	45cb      	cmp	fp, r9
 80197fe:	f43f aeec 	beq.w	80195da <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8019802:	465b      	mov	r3, fp
 8019804:	220a      	movs	r2, #10
 8019806:	a909      	add	r1, sp, #36	; 0x24
 8019808:	4620      	mov	r0, r4
 801980a:	f001 fdad 	bl	801b368 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 801980e:	280a      	cmp	r0, #10
 8019810:	f47f aee3 	bne.w	80195da <dns_recv+0xe>
 8019814:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8019818:	459b      	cmp	fp, r3
 801981a:	f63f aede 	bhi.w	80195da <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801981e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8019822:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8019824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8019828:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801982a:	d013      	beq.n	8019854 <dns_recv+0x288>
 801982c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8019830:	f7ff fcba 	bl	80191a8 <lwip_htons>
 8019834:	4428      	add	r0, r5
 8019836:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801983a:	f6bf aece 	bge.w	80195da <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801983e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 8019842:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8019846:	f7ff fcaf 	bl	80191a8 <lwip_htons>
 801984a:	4405      	add	r5, r0
            --nanswers;
 801984c:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8019850:	b2ad      	uxth	r5, r5
            --nanswers;
 8019852:	e7a1      	b.n	8019798 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8019854:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019858:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 801985c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019860:	d1e6      	bne.n	8019830 <dns_recv+0x264>
 8019862:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019866:	d1e3      	bne.n	8019830 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8019868:	462b      	mov	r3, r5
 801986a:	2204      	movs	r2, #4
 801986c:	a905      	add	r1, sp, #20
 801986e:	4620      	mov	r0, r4
 8019870:	f001 fd7a 	bl	801b368 <pbuf_copy_partial>
 8019874:	2804      	cmp	r0, #4
 8019876:	f47f aeb0 	bne.w	80195da <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801987a:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801987e:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8019880:	fb03 f606 	mul.w	r6, r3, r6
 8019884:	9b05      	ldr	r3, [sp, #20]
 8019886:	eb08 0406 	add.w	r4, r8, r6
 801988a:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 801988c:	f001 fcc8 	bl	801b220 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019890:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019892:	f7ff fc8d 	bl	80191b0 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 8019896:	4a15      	ldr	r2, [pc, #84]	; (80198ec <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019898:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 801989a:	9901      	ldr	r1, [sp, #4]
 801989c:	4638      	mov	r0, r7
  entry->ttl = ttl;
 801989e:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 80198a0:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 80198a4:	bf28      	it	cs
 80198a6:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 80198a8:	4441      	add	r1, r8
  entry->ttl = ttl;
 80198aa:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 80198ae:	2303      	movs	r3, #3
 80198b0:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 80198b2:	f7ff fcef 	bl	8019294 <dns_call_found>
  if (entry->ttl == 0) {
 80198b6:	f858 3006 	ldr.w	r3, [r8, r6]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	f47f ae90 	bne.w	80195e0 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 80198c0:	7aa2      	ldrb	r2, [r4, #10]
 80198c2:	2a03      	cmp	r2, #3
 80198c4:	f47f ae8c 	bne.w	80195e0 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 80198c8:	72a3      	strb	r3, [r4, #10]
                  return;
 80198ca:	e689      	b.n	80195e0 <dns_recv+0x14>
        pbuf_free(p);
 80198cc:	4620      	mov	r0, r4
 80198ce:	f001 fca7 	bl	801b220 <pbuf_free>
        dns_call_found(i, NULL);
 80198d2:	2100      	movs	r1, #0
 80198d4:	4638      	mov	r0, r7
 80198d6:	f7ff fcdd 	bl	8019294 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 80198da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80198de:	2200      	movs	r2, #0
 80198e0:	fb03 8606 	mla	r6, r3, r6, r8
 80198e4:	72b2      	strb	r2, [r6, #10]
        return;
 80198e6:	e67b      	b.n	80195e0 <dns_recv+0x14>
 80198e8:	2001ead8 	.word	0x2001ead8
 80198ec:	00093a80 	.word	0x00093a80
 80198f0:	2001eae0 	.word	0x2001eae0
 80198f4:	08045c01 	.word	0x08045c01

080198f8 <dns_init>:
}
 80198f8:	4770      	bx	lr
 80198fa:	bf00      	nop

080198fc <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 80198fc:	2801      	cmp	r0, #1
 80198fe:	d900      	bls.n	8019902 <dns_setserver+0x6>
}
 8019900:	4770      	bx	lr
    if (dnsserver != NULL) {
 8019902:	b121      	cbz	r1, 801990e <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8019904:	4b05      	ldr	r3, [pc, #20]	; (801991c <dns_setserver+0x20>)
 8019906:	680a      	ldr	r2, [r1, #0]
 8019908:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 801990c:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 801990e:	4a04      	ldr	r2, [pc, #16]	; (8019920 <dns_setserver+0x24>)
 8019910:	4b02      	ldr	r3, [pc, #8]	; (801991c <dns_setserver+0x20>)
 8019912:	6812      	ldr	r2, [r2, #0]
 8019914:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8019918:	4770      	bx	lr
 801991a:	bf00      	nop
 801991c:	2001ead8 	.word	0x2001ead8
 8019920:	080459a4 	.word	0x080459a4

08019924 <dns_tmr>:
{
 8019924:	b508      	push	{r3, lr}
    dns_check_entry(i);
 8019926:	2000      	movs	r0, #0
 8019928:	f7ff fdc8 	bl	80194bc <dns_check_entry>
 801992c:	2001      	movs	r0, #1
 801992e:	f7ff fdc5 	bl	80194bc <dns_check_entry>
 8019932:	2002      	movs	r0, #2
 8019934:	f7ff fdc2 	bl	80194bc <dns_check_entry>
 8019938:	2003      	movs	r0, #3
}
 801993a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 801993e:	f7ff bdbd 	b.w	80194bc <dns_check_entry>
 8019942:	bf00      	nop

08019944 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8019944:	2900      	cmp	r1, #0
 8019946:	f000 812e 	beq.w	8019ba6 <dns_gethostbyname_addrtype+0x262>
{
 801994a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 801994e:	fab0 f780 	clz	r7, r0
{
 8019952:	b083      	sub	sp, #12
 8019954:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 8019956:	097f      	lsrs	r7, r7, #5
 8019958:	2800      	cmp	r0, #0
 801995a:	f000 8103 	beq.w	8019b64 <dns_gethostbyname_addrtype+0x220>
 801995e:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 8019960:	7803      	ldrb	r3, [r0, #0]
 8019962:	2b00      	cmp	r3, #0
 8019964:	f000 80fe 	beq.w	8019b64 <dns_gethostbyname_addrtype+0x220>
 8019968:	4615      	mov	r5, r2
 801996a:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 801996c:	f7e6 fc72 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8019970:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 8019972:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8019974:	f200 80f6 	bhi.w	8019b64 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8019978:	4641      	mov	r1, r8
 801997a:	4630      	mov	r0, r6
 801997c:	f009 fa46 	bl	8022e0c <ip4addr_aton>
 8019980:	b118      	cbz	r0, 801998a <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8019982:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8019984:	b003      	add	sp, #12
 8019986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801998a:	4f88      	ldr	r7, [pc, #544]	; (8019bac <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 801998c:	4604      	mov	r4, r0
 801998e:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8019990:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 8019994:	2b03      	cmp	r3, #3
 8019996:	d03a      	beq.n	8019a0e <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019998:	3401      	adds	r4, #1
 801999a:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801999e:	2c04      	cmp	r4, #4
 80199a0:	d1f6      	bne.n	8019990 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 80199a2:	4b83      	ldr	r3, [pc, #524]	; (8019bb0 <dns_gethostbyname_addrtype+0x26c>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	f000 80f6 	beq.w	8019b98 <dns_gethostbyname_addrtype+0x254>
 80199ac:	2400      	movs	r4, #0
 80199ae:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8019bbc <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80199b2:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 80199b6:	fa5f f884 	uxtb.w	r8, r4
 80199ba:	2b02      	cmp	r3, #2
 80199bc:	d040      	beq.n	8019a40 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80199be:	3401      	adds	r4, #1
 80199c0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80199c4:	2c04      	cmp	r4, #4
 80199c6:	d1f4      	bne.n	80199b2 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80199c8:	4a7a      	ldr	r2, [pc, #488]	; (8019bb4 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 80199ca:	4623      	mov	r3, r4
 80199cc:	4f7a      	ldr	r7, [pc, #488]	; (8019bb8 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80199ce:	2400      	movs	r4, #0
 80199d0:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 80199d2:	46a4      	mov	ip, r4
 80199d4:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 80199d6:	7a90      	ldrb	r0, [r2, #10]
 80199d8:	fa5f f884 	uxtb.w	r8, r4
 80199dc:	2800      	cmp	r0, #0
 80199de:	d041      	beq.n	8019a64 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 80199e0:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80199e2:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 80199e6:	d023      	beq.n	8019a30 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80199e8:	2c04      	cmp	r4, #4
 80199ea:	f502 7288 	add.w	r2, r2, #272	; 0x110
 80199ee:	d1f2      	bne.n	80199d6 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 80199f0:	2b04      	cmp	r3, #4
 80199f2:	d007      	beq.n	8019a04 <dns_gethostbyname_addrtype+0xc0>
 80199f4:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 80199f8:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 80199fc:	7aa2      	ldrb	r2, [r4, #10]
 80199fe:	2a03      	cmp	r2, #3
 8019a00:	f000 80ae 	beq.w	8019b60 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 8019a04:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019a08:	b003      	add	sp, #12
 8019a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8019a0e:	4651      	mov	r1, sl
 8019a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019a14:	4630      	mov	r0, r6
 8019a16:	f7ff fc1f 	bl	8019258 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8019a1a:	2800      	cmp	r0, #0
 8019a1c:	d1bc      	bne.n	8019998 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8019a1e:	4b66      	ldr	r3, [pc, #408]	; (8019bb8 <dns_gethostbyname_addrtype+0x274>)
 8019a20:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8019a24:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8019a28:	6863      	ldr	r3, [r4, #4]
 8019a2a:	f8c8 3000 	str.w	r3, [r8]
 8019a2e:	e7a9      	b.n	8019984 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8019a30:	7b90      	ldrb	r0, [r2, #14]
 8019a32:	1a08      	subs	r0, r1, r0
 8019a34:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 8019a36:	4560      	cmp	r0, ip
 8019a38:	d9d6      	bls.n	80199e8 <dns_gethostbyname_addrtype+0xa4>
 8019a3a:	4643      	mov	r3, r8
 8019a3c:	4684      	mov	ip, r0
 8019a3e:	e7d3      	b.n	80199e8 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8019a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019a44:	4639      	mov	r1, r7
 8019a46:	4630      	mov	r0, r6
 8019a48:	f7ff fc06 	bl	8019258 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019a4c:	2800      	cmp	r0, #0
 8019a4e:	d1b6      	bne.n	80199be <dns_gethostbyname_addrtype+0x7a>
 8019a50:	4b5a      	ldr	r3, [pc, #360]	; (8019bbc <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 8019a52:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a54:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 8019a56:	2a00      	cmp	r2, #0
 8019a58:	f000 8091 	beq.w	8019b7e <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a5c:	3001      	adds	r0, #1
 8019a5e:	2804      	cmp	r0, #4
 8019a60:	d1f7      	bne.n	8019a52 <dns_gethostbyname_addrtype+0x10e>
 8019a62:	e7ac      	b.n	80199be <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 8019a64:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8019a68:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a6c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8019bbc <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 8019a70:	2700      	movs	r7, #0
 8019a72:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 8019a74:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a76:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 8019a78:	b12b      	cbz	r3, 8019a86 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a7a:	3701      	adds	r7, #1
 8019a7c:	2f04      	cmp	r7, #4
 8019a7e:	d1f9      	bne.n	8019a74 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 8019a80:	f04f 30ff 	mov.w	r0, #4294967295
 8019a84:	e7c0      	b.n	8019a08 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 8019a86:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 8019a8a:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 8019a8c:	f104 0010 	add.w	r0, r4, #16
 8019a90:	4631      	mov	r1, r6
  req->found = found;
 8019a92:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 8019a96:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 8019a9a:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 8019a9c:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 8019aa0:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 8019aa4:	2201      	movs	r2, #1
 8019aa6:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 8019aa8:	464a      	mov	r2, r9
 8019aaa:	f00a fcbd 	bl	8024428 <memcpy>
  entry->name[namelen] = 0;
 8019aae:	44a1      	add	r9, r4
 8019ab0:	9b01      	ldr	r3, [sp, #4]
 8019ab2:	461d      	mov	r5, r3
 8019ab4:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 8019ab8:	007b      	lsls	r3, r7, #1
 8019aba:	9301      	str	r3, [sp, #4]
 8019abc:	4b40      	ldr	r3, [pc, #256]	; (8019bc0 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 8019abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ac2:	b2ee      	uxtb	r6, r5
 8019ac4:	b30a      	cbz	r2, 8019b0a <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8019ac6:	3501      	adds	r5, #1
 8019ac8:	2d04      	cmp	r5, #4
 8019aca:	d1f8      	bne.n	8019abe <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8019acc:	483d      	ldr	r0, [pc, #244]	; (8019bc4 <dns_gethostbyname_addrtype+0x280>)
 8019ace:	2304      	movs	r3, #4
 8019ad0:	7806      	ldrb	r6, [r0, #0]
 8019ad2:	3601      	adds	r6, #1
 8019ad4:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8019ad6:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 8019ad8:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8019ada:	d901      	bls.n	8019ae0 <dns_gethostbyname_addrtype+0x19c>
 8019adc:	2600      	movs	r6, #0
      idx = 0;
 8019ade:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 8019ae0:	4d37      	ldr	r5, [pc, #220]	; (8019bc0 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8019ae2:	1c71      	adds	r1, r6, #1
 8019ae4:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8019ae6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8019aea:	2a00      	cmp	r2, #0
 8019aec:	d13d      	bne.n	8019b6a <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8019aee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019af2:	b2ce      	uxtb	r6, r1
 8019af4:	d1ef      	bne.n	8019ad6 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 8019af6:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 8019af8:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 8019afc:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 8019afe:	443a      	add	r2, r7
 8019b00:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8019b04:	2304      	movs	r3, #4
 8019b06:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 8019b08:	e73c      	b.n	8019984 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8019b0a:	202e      	movs	r0, #46	; 0x2e
 8019b0c:	f006 fc9c 	bl	8020448 <udp_new_ip_type>
  if (pcb == NULL) {
 8019b10:	4681      	mov	r9, r0
 8019b12:	2800      	cmp	r0, #0
 8019b14:	d043      	beq.n	8019b9e <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8019b16:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8019bcc <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 8019b1a:	f00b fcef 	bl	80254fc <rand>
 8019b1e:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 8019b20:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8019b24:	d3f9      	bcc.n	8019b1a <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8019b26:	4659      	mov	r1, fp
 8019b28:	4648      	mov	r0, r9
 8019b2a:	f006 fa29 	bl	801ff80 <udp_bind>
  } while (err == ERR_USE);
 8019b2e:	f110 0f08 	cmn.w	r0, #8
 8019b32:	d0f2      	beq.n	8019b1a <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 8019b34:	b9d8      	cbnz	r0, 8019b6e <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 8019b36:	4602      	mov	r2, r0
 8019b38:	4923      	ldr	r1, [pc, #140]	; (8019bc8 <dns_gethostbyname_addrtype+0x284>)
 8019b3a:	4648      	mov	r0, r9
 8019b3c:	f006 fc34 	bl	80203a8 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 8019b40:	4b1f      	ldr	r3, [pc, #124]	; (8019bc0 <dns_gethostbyname_addrtype+0x27c>)
 8019b42:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 8019b46:	4b1f      	ldr	r3, [pc, #124]	; (8019bc4 <dns_gethostbyname_addrtype+0x280>)
 8019b48:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 8019b4a:	4a1a      	ldr	r2, [pc, #104]	; (8019bb4 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 8019b4c:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 8019b4e:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 8019b50:	7813      	ldrb	r3, [r2, #0]
 8019b52:	3301      	adds	r3, #1
 8019b54:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8019b56:	f7ff fcb1 	bl	80194bc <dns_check_entry>
  return ERR_INPROGRESS;
 8019b5a:	f06f 0004 	mvn.w	r0, #4
 8019b5e:	e711      	b.n	8019984 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 8019b60:	4698      	mov	r8, r3
 8019b62:	e783      	b.n	8019a6c <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 8019b64:	f06f 000f 	mvn.w	r0, #15
 8019b68:	e70c      	b.n	8019984 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 8019b6a:	7006      	strb	r6, [r0, #0]
      return idx;
 8019b6c:	e7ed      	b.n	8019b4a <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 8019b6e:	4648      	mov	r0, r9
 8019b70:	f006 fc2c 	bl	80203cc <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8019b74:	2300      	movs	r3, #0
 8019b76:	4a12      	ldr	r2, [pc, #72]	; (8019bc0 <dns_gethostbyname_addrtype+0x27c>)
 8019b78:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8019b7c:	e7a6      	b.n	8019acc <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 8019b7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019b82:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 8019b86:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 8019b8a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 8019b8e:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 8019b92:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 8019b96:	e6f5      	b.n	8019984 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 8019b98:	f06f 0005 	mvn.w	r0, #5
 8019b9c:	e6f2      	b.n	8019984 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 8019b9e:	4b08      	ldr	r3, [pc, #32]	; (8019bc0 <dns_gethostbyname_addrtype+0x27c>)
 8019ba0:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8019ba4:	e792      	b.n	8019acc <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 8019ba6:	f06f 000f 	mvn.w	r0, #15
}
 8019baa:	4770      	bx	lr
 8019bac:	2001eaf0 	.word	0x2001eaf0
 8019bb0:	2001ead8 	.word	0x2001ead8
 8019bb4:	2001ead4 	.word	0x2001ead4
 8019bb8:	2001eae0 	.word	0x2001eae0
 8019bbc:	2001eaa4 	.word	0x2001eaa4
 8019bc0:	2001ea94 	.word	0x2001ea94
 8019bc4:	2001ea90 	.word	0x2001ea90
 8019bc8:	080195cd 	.word	0x080195cd
 8019bcc:	080459a4 	.word	0x080459a4

08019bd0 <dns_gethostbyname>:
{
 8019bd0:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019bd2:	2400      	movs	r4, #0
{
 8019bd4:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019bd6:	9400      	str	r4, [sp, #0]
 8019bd8:	f7ff feb4 	bl	8019944 <dns_gethostbyname_addrtype>
}
 8019bdc:	b002      	add	sp, #8
 8019bde:	bd10      	pop	{r4, pc}

08019be0 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8019be0:	2300      	movs	r3, #0
{
 8019be2:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8019be4:	4299      	cmp	r1, r3
{
 8019be6:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 8019be8:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 8019bec:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8019bf0:	dd05      	ble.n	8019bfe <lwip_standard_chksum+0x1e>
 8019bf2:	b124      	cbz	r4, 8019bfe <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8019bf4:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8019bf8:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8019bfa:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8019bfe:	2901      	cmp	r1, #1
 8019c00:	dd28      	ble.n	8019c54 <lwip_standard_chksum+0x74>
 8019c02:	3902      	subs	r1, #2
  u32_t sum = 0;
 8019c04:	2300      	movs	r3, #0
 8019c06:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8019c0a:	f10e 0c01 	add.w	ip, lr, #1
 8019c0e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8019c12:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8019c16:	4584      	cmp	ip, r0
    sum += *ps++;
 8019c18:	4413      	add	r3, r2
  while (len > 1) {
 8019c1a:	d1fa      	bne.n	8019c12 <lwip_standard_chksum+0x32>
    len -= 2;
 8019c1c:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 8019c20:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8019c24:	2901      	cmp	r1, #1
 8019c26:	d103      	bne.n	8019c30 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8019c28:	f89c 2000 	ldrb.w	r2, [ip]
 8019c2c:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8019c30:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019c34:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8019c36:	b298      	uxth	r0, r3
 8019c38:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8019c3c:	b298      	uxth	r0, r3
 8019c3e:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8019c42:	b124      	cbz	r4, 8019c4e <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 8019c44:	0203      	lsls	r3, r0, #8
 8019c46:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019c4a:	b29b      	uxth	r3, r3
 8019c4c:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8019c4e:	b280      	uxth	r0, r0
 8019c50:	b002      	add	sp, #8
 8019c52:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 8019c54:	4684      	mov	ip, r0
  u32_t sum = 0;
 8019c56:	2300      	movs	r3, #0
 8019c58:	e7e4      	b.n	8019c24 <lwip_standard_chksum+0x44>
 8019c5a:	bf00      	nop

08019c5c <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8019c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c60:	4688      	mov	r8, r1
 8019c62:	4617      	mov	r7, r2
 8019c64:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8019c66:	b1f8      	cbz	r0, 8019ca8 <inet_cksum_pseudo_base+0x4c>
 8019c68:	4605      	mov	r5, r0
  int swapped = 0;
 8019c6a:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8019c6c:	8969      	ldrh	r1, [r5, #10]
 8019c6e:	6868      	ldr	r0, [r5, #4]
 8019c70:	f7ff ffb6 	bl	8019be0 <lwip_standard_chksum>
 8019c74:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8019c76:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 8019c78:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 8019c7a:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 8019c7e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8019c82:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8019c86:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8019c8a:	d004      	beq.n	8019c96 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 8019c8c:	b29b      	uxth	r3, r3
 8019c8e:	f086 0601 	eor.w	r6, r6, #1
 8019c92:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8019c96:	682d      	ldr	r5, [r5, #0]
 8019c98:	2d00      	cmp	r5, #0
 8019c9a:	d1e7      	bne.n	8019c6c <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8019c9c:	b126      	cbz	r6, 8019ca8 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8019c9e:	0222      	lsls	r2, r4, #8
 8019ca0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019ca4:	b292      	uxth	r2, r2
 8019ca6:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8019ca8:	4640      	mov	r0, r8
 8019caa:	f7ff fa7d 	bl	80191a8 <lwip_htons>
 8019cae:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8019cb0:	4638      	mov	r0, r7
 8019cb2:	f7ff fa79 	bl	80191a8 <lwip_htons>
 8019cb6:	4428      	add	r0, r5
 8019cb8:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8019cba:	b2a0      	uxth	r0, r4
 8019cbc:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8019cc0:	b2a0      	uxth	r0, r4
 8019cc2:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8019cc6:	43c0      	mvns	r0, r0
}
 8019cc8:	b280      	uxth	r0, r0
 8019cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cce:	bf00      	nop

08019cd0 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8019cd0:	b430      	push	{r4, r5}
 8019cd2:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 8019cd4:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 8019cd6:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8019cd8:	0c23      	lsrs	r3, r4, #16
 8019cda:	fa13 f384 	uxtah	r3, r3, r4
 8019cde:	fa13 f385 	uxtah	r3, r3, r5
 8019ce2:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 8019ce6:	b29c      	uxth	r4, r3
 8019ce8:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8019cec:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8019cee:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 8019cf2:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8019cf4:	f7ff bfb2 	b.w	8019c5c <inet_cksum_pseudo_base>

08019cf8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8019cf8:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8019cfa:	f7ff ff71 	bl	8019be0 <lwip_standard_chksum>
 8019cfe:	43c0      	mvns	r0, r0
}
 8019d00:	b280      	uxth	r0, r0
 8019d02:	bd08      	pop	{r3, pc}

08019d04 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8019d04:	b338      	cbz	r0, 8019d56 <inet_chksum_pbuf+0x52>
{
 8019d06:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8019d08:	2600      	movs	r6, #0
 8019d0a:	4605      	mov	r5, r0
  acc = 0;
 8019d0c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 8019d0e:	8969      	ldrh	r1, [r5, #10]
 8019d10:	6868      	ldr	r0, [r5, #4]
 8019d12:	f7ff ff65 	bl	8019be0 <lwip_standard_chksum>
 8019d16:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8019d18:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8019d1a:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 8019d1c:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8019d20:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8019d24:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8019d28:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8019d2c:	d004      	beq.n	8019d38 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8019d2e:	b29b      	uxth	r3, r3
 8019d30:	f086 0601 	eor.w	r6, r6, #1
 8019d34:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8019d38:	682d      	ldr	r5, [r5, #0]
 8019d3a:	2d00      	cmp	r5, #0
 8019d3c:	d1e7      	bne.n	8019d0e <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8019d3e:	b13e      	cbz	r6, 8019d50 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8019d40:	0220      	lsls	r0, r4, #8
 8019d42:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019d46:	b280      	uxth	r0, r0
 8019d48:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8019d4a:	43c0      	mvns	r0, r0
 8019d4c:	b280      	uxth	r0, r0
}
 8019d4e:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 8019d50:	43e0      	mvns	r0, r4
 8019d52:	b280      	uxth	r0, r0
}
 8019d54:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8019d56:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8019d5a:	4770      	bx	lr

08019d5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8019d5c:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8019d5e:	f009 fe37 	bl	80239d0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8019d62:	f000 f975 	bl	801a050 <mem_init>
  memp_init();
 8019d66:	f000 fcf9 	bl	801a75c <memp_init>
  pbuf_init();
  netif_init();
 8019d6a:	f000 fdbd 	bl	801a8e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8019d6e:	f005 fffd 	bl	801fd6c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019d72:	f001 fd89 	bl	801b888 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8019d76:	f7ff fdbf 	bl	80198f8 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8019d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8019d7e:	f005 bf4d 	b.w	801fc1c <sys_timeouts_init>
 8019d82:	bf00      	nop

08019d84 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019d84:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 8019d88:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 8019d8a:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019d8e:	4299      	cmp	r1, r3
 8019d90:	d81b      	bhi.n	8019dca <mem_link_valid+0x46>
 8019d92:	459c      	cmp	ip, r3
 8019d94:	bf94      	ite	ls
 8019d96:	2200      	movls	r2, #0
 8019d98:	2201      	movhi	r2, #1
 8019d9a:	b9b2      	cbnz	r2, 8019dca <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 8019d9c:	4b0f      	ldr	r3, [pc, #60]	; (8019ddc <mem_link_valid+0x58>)
{
 8019d9e:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 8019da0:	681c      	ldr	r4, [r3, #0]
 8019da2:	1b03      	subs	r3, r0, r4
 8019da4:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019da6:	4299      	cmp	r1, r3
 8019da8:	d002      	beq.n	8019db0 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019daa:	5a61      	ldrh	r1, [r4, r1]
 8019dac:	4299      	cmp	r1, r3
 8019dae:	d10e      	bne.n	8019dce <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019db0:	4a0b      	ldr	r2, [pc, #44]	; (8019de0 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 8019db2:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019db4:	6812      	ldr	r2, [r2, #0]
 8019db6:	42a2      	cmp	r2, r4
 8019db8:	d00d      	beq.n	8019dd6 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019dba:	8860      	ldrh	r0, [r4, #2]
 8019dbc:	1ac0      	subs	r0, r0, r3
 8019dbe:	fab0 f080 	clz	r0, r0
 8019dc2:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 8019dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019dc8:	4770      	bx	lr
    return 0;
 8019dca:	2000      	movs	r0, #0
}
 8019dcc:	4770      	bx	lr
    return 0;
 8019dce:	4610      	mov	r0, r2
}
 8019dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019dd4:	4770      	bx	lr
  return 1;
 8019dd6:	2001      	movs	r0, #1
 8019dd8:	e7f4      	b.n	8019dc4 <mem_link_valid+0x40>
 8019dda:	bf00      	nop
 8019ddc:	2001ef44 	.word	0x2001ef44
 8019de0:	2001ef48 	.word	0x2001ef48

08019de4 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8019de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 8019de8:	4f5f      	ldr	r7, [pc, #380]	; (8019f68 <mem_sanity+0x184>)
 8019dea:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8019dec:	7935      	ldrb	r5, [r6, #4]
 8019dee:	2d01      	cmp	r5, #1
 8019df0:	d907      	bls.n	8019e02 <mem_sanity+0x1e>
 8019df2:	4b5e      	ldr	r3, [pc, #376]	; (8019f6c <mem_sanity+0x188>)
 8019df4:	f240 223f 	movw	r2, #575	; 0x23f
 8019df8:	495d      	ldr	r1, [pc, #372]	; (8019f70 <mem_sanity+0x18c>)
 8019dfa:	485e      	ldr	r0, [pc, #376]	; (8019f74 <mem_sanity+0x190>)
 8019dfc:	f00b fada 	bl	80253b4 <iprintf>
  last_used = mem->used;
 8019e00:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8019e02:	8873      	ldrh	r3, [r6, #2]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	f040 80a7 	bne.w	8019f58 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019e0a:	8834      	ldrh	r4, [r6, #0]
 8019e0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8019e10:	429c      	cmp	r4, r3
 8019e12:	f200 8098 	bhi.w	8019f46 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 8019e16:	683b      	ldr	r3, [r7, #0]
 8019e18:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 8019e1a:	429c      	cmp	r4, r3
 8019e1c:	d961      	bls.n	8019ee2 <mem_sanity+0xfe>
 8019e1e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8019f90 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8019e22:	f8df a148 	ldr.w	sl, [pc, #328]	; 8019f6c <mem_sanity+0x188>
 8019e26:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8019f94 <mem_sanity+0x1b0>
 8019e2a:	4e52      	ldr	r6, [pc, #328]	; (8019f74 <mem_sanity+0x190>)
 8019e2c:	e012      	b.n	8019e54 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8019e2e:	2b01      	cmp	r3, #1
 8019e30:	d006      	beq.n	8019e40 <mem_sanity+0x5c>
 8019e32:	4653      	mov	r3, sl
 8019e34:	f240 2251 	movw	r2, #593	; 0x251
 8019e38:	494f      	ldr	r1, [pc, #316]	; (8019f78 <mem_sanity+0x194>)
 8019e3a:	4630      	mov	r0, r6
 8019e3c:	f00b faba 	bl	80253b4 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8019e40:	4620      	mov	r0, r4
 8019e42:	f7ff ff9f 	bl	8019d84 <mem_link_valid>
 8019e46:	b380      	cbz	r0, 8019eaa <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 8019e48:	683b      	ldr	r3, [r7, #0]
 8019e4a:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 8019e4c:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 8019e4e:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8019e50:	42a3      	cmp	r3, r4
 8019e52:	d246      	bcs.n	8019ee2 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8019e54:	f8d8 2000 	ldr.w	r2, [r8]
 8019e58:	42a2      	cmp	r2, r4
 8019e5a:	d942      	bls.n	8019ee2 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8019e5c:	1ce2      	adds	r2, r4, #3
 8019e5e:	f022 0203 	bic.w	r2, r2, #3
 8019e62:	4294      	cmp	r4, r2
 8019e64:	d006      	beq.n	8019e74 <mem_sanity+0x90>
 8019e66:	4653      	mov	r3, sl
 8019e68:	f240 2249 	movw	r2, #585	; 0x249
 8019e6c:	4649      	mov	r1, r9
 8019e6e:	4630      	mov	r0, r6
 8019e70:	f00b faa0 	bl	80253b4 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8019e74:	8862      	ldrh	r2, [r4, #2]
 8019e76:	f242 7310 	movw	r3, #10000	; 0x2710
 8019e7a:	429a      	cmp	r2, r3
 8019e7c:	d81d      	bhi.n	8019eba <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019e7e:	8822      	ldrh	r2, [r4, #0]
 8019e80:	f242 7310 	movw	r3, #10000	; 0x2710
 8019e84:	429a      	cmp	r2, r3
 8019e86:	d824      	bhi.n	8019ed2 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8019e88:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 8019e8a:	2d00      	cmp	r5, #0
 8019e8c:	d0cf      	beq.n	8019e2e <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8019e8e:	2b01      	cmp	r3, #1
 8019e90:	d9d6      	bls.n	8019e40 <mem_sanity+0x5c>
 8019e92:	4653      	mov	r3, sl
 8019e94:	f240 2253 	movw	r2, #595	; 0x253
 8019e98:	4938      	ldr	r1, [pc, #224]	; (8019f7c <mem_sanity+0x198>)
 8019e9a:	4630      	mov	r0, r6
 8019e9c:	f00b fa8a 	bl	80253b4 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8019ea0:	4620      	mov	r0, r4
 8019ea2:	f7ff ff6f 	bl	8019d84 <mem_link_valid>
 8019ea6:	2800      	cmp	r0, #0
 8019ea8:	d1ce      	bne.n	8019e48 <mem_sanity+0x64>
 8019eaa:	4653      	mov	r3, sl
 8019eac:	f240 2256 	movw	r2, #598	; 0x256
 8019eb0:	4933      	ldr	r1, [pc, #204]	; (8019f80 <mem_sanity+0x19c>)
 8019eb2:	4630      	mov	r0, r6
 8019eb4:	f00b fa7e 	bl	80253b4 <iprintf>
 8019eb8:	e7c6      	b.n	8019e48 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8019eba:	4653      	mov	r3, sl
 8019ebc:	f240 224a 	movw	r2, #586	; 0x24a
 8019ec0:	4930      	ldr	r1, [pc, #192]	; (8019f84 <mem_sanity+0x1a0>)
 8019ec2:	4630      	mov	r0, r6
 8019ec4:	f00b fa76 	bl	80253b4 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019ec8:	8822      	ldrh	r2, [r4, #0]
 8019eca:	f242 7310 	movw	r3, #10000	; 0x2710
 8019ece:	429a      	cmp	r2, r3
 8019ed0:	d9da      	bls.n	8019e88 <mem_sanity+0xa4>
 8019ed2:	4653      	mov	r3, sl
 8019ed4:	f240 224b 	movw	r2, #587	; 0x24b
 8019ed8:	492b      	ldr	r1, [pc, #172]	; (8019f88 <mem_sanity+0x1a4>)
 8019eda:	4630      	mov	r0, r6
 8019edc:	f00b fa6a 	bl	80253b4 <iprintf>
 8019ee0:	e7d2      	b.n	8019e88 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8019ee2:	f242 7210 	movw	r2, #10000	; 0x2710
 8019ee6:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 8019ee8:	4294      	cmp	r4, r2
 8019eea:	d006      	beq.n	8019efa <mem_sanity+0x116>
 8019eec:	4b1f      	ldr	r3, [pc, #124]	; (8019f6c <mem_sanity+0x188>)
 8019eee:	f240 225b 	movw	r2, #603	; 0x25b
 8019ef2:	4926      	ldr	r1, [pc, #152]	; (8019f8c <mem_sanity+0x1a8>)
 8019ef4:	481f      	ldr	r0, [pc, #124]	; (8019f74 <mem_sanity+0x190>)
 8019ef6:	f00b fa5d 	bl	80253b4 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 8019efa:	7923      	ldrb	r3, [r4, #4]
 8019efc:	2b01      	cmp	r3, #1
 8019efe:	d006      	beq.n	8019f0e <mem_sanity+0x12a>
 8019f00:	4b1a      	ldr	r3, [pc, #104]	; (8019f6c <mem_sanity+0x188>)
 8019f02:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8019f06:	491a      	ldr	r1, [pc, #104]	; (8019f70 <mem_sanity+0x18c>)
 8019f08:	481a      	ldr	r0, [pc, #104]	; (8019f74 <mem_sanity+0x190>)
 8019f0a:	f00b fa53 	bl	80253b4 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 8019f0e:	8862      	ldrh	r2, [r4, #2]
 8019f10:	f242 7310 	movw	r3, #10000	; 0x2710
 8019f14:	429a      	cmp	r2, r3
 8019f16:	d006      	beq.n	8019f26 <mem_sanity+0x142>
 8019f18:	4b14      	ldr	r3, [pc, #80]	; (8019f6c <mem_sanity+0x188>)
 8019f1a:	f240 225d 	movw	r2, #605	; 0x25d
 8019f1e:	4919      	ldr	r1, [pc, #100]	; (8019f84 <mem_sanity+0x1a0>)
 8019f20:	4814      	ldr	r0, [pc, #80]	; (8019f74 <mem_sanity+0x190>)
 8019f22:	f00b fa47 	bl	80253b4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8019f26:	8822      	ldrh	r2, [r4, #0]
 8019f28:	f242 7310 	movw	r3, #10000	; 0x2710
 8019f2c:	429a      	cmp	r2, r3
 8019f2e:	d101      	bne.n	8019f34 <mem_sanity+0x150>
}
 8019f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8019f34:	4b0d      	ldr	r3, [pc, #52]	; (8019f6c <mem_sanity+0x188>)
 8019f36:	f240 225e 	movw	r2, #606	; 0x25e
 8019f3a:	4913      	ldr	r1, [pc, #76]	; (8019f88 <mem_sanity+0x1a4>)
 8019f3c:	480d      	ldr	r0, [pc, #52]	; (8019f74 <mem_sanity+0x190>)
}
 8019f3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8019f42:	f00b ba37 	b.w	80253b4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019f46:	4b09      	ldr	r3, [pc, #36]	; (8019f6c <mem_sanity+0x188>)
 8019f48:	f240 2242 	movw	r2, #578	; 0x242
 8019f4c:	490e      	ldr	r1, [pc, #56]	; (8019f88 <mem_sanity+0x1a4>)
 8019f4e:	4809      	ldr	r0, [pc, #36]	; (8019f74 <mem_sanity+0x190>)
 8019f50:	f00b fa30 	bl	80253b4 <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 8019f54:	8834      	ldrh	r4, [r6, #0]
 8019f56:	e75e      	b.n	8019e16 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8019f58:	4b04      	ldr	r3, [pc, #16]	; (8019f6c <mem_sanity+0x188>)
 8019f5a:	f240 2241 	movw	r2, #577	; 0x241
 8019f5e:	4909      	ldr	r1, [pc, #36]	; (8019f84 <mem_sanity+0x1a0>)
 8019f60:	4804      	ldr	r0, [pc, #16]	; (8019f74 <mem_sanity+0x190>)
 8019f62:	f00b fa27 	bl	80253b4 <iprintf>
 8019f66:	e750      	b.n	8019e0a <mem_sanity+0x26>
 8019f68:	2001ef44 	.word	0x2001ef44
 8019f6c:	08043250 	.word	0x08043250
 8019f70:	08043280 	.word	0x08043280
 8019f74:	0802a008 	.word	0x0802a008
 8019f78:	080432e8 	.word	0x080432e8
 8019f7c:	08043300 	.word	0x08043300
 8019f80:	0804331c 	.word	0x0804331c
 8019f84:	08043298 	.word	0x08043298
 8019f88:	080432b4 	.word	0x080432b4
 8019f8c:	08043334 	.word	0x08043334
 8019f90:	2001ef48 	.word	0x2001ef48
 8019f94:	080432d0 	.word	0x080432d0

08019f98 <mem_overflow_check_raw>:
{
 8019f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f9c:	1e4c      	subs	r4, r1, #1
 8019f9e:	310f      	adds	r1, #15
 8019fa0:	b0a3      	sub	sp, #140	; 0x8c
 8019fa2:	4606      	mov	r6, r0
 8019fa4:	4615      	mov	r5, r2
 8019fa6:	4698      	mov	r8, r3
 8019fa8:	4404      	add	r4, r0
 8019faa:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019fac:	f8df 9074 	ldr.w	r9, [pc, #116]	; 801a024 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 8019fb0:	f8df b074 	ldr.w	fp, [pc, #116]	; 801a028 <mem_overflow_check_raw+0x90>
 8019fb4:	f8df a074 	ldr.w	sl, [pc, #116]	; 801a02c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019fb8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019fbc:	464a      	mov	r2, r9
 8019fbe:	2180      	movs	r1, #128	; 0x80
 8019fc0:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8019fc2:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019fc4:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8019fc6:	d009      	beq.n	8019fdc <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019fc8:	f8cd 8000 	str.w	r8, [sp]
 8019fcc:	f00b fba8 	bl	8025720 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8019fd0:	465b      	mov	r3, fp
 8019fd2:	226d      	movs	r2, #109	; 0x6d
 8019fd4:	a902      	add	r1, sp, #8
 8019fd6:	4650      	mov	r0, sl
 8019fd8:	f00b f9ec 	bl	80253b4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8019fdc:	42bc      	cmp	r4, r7
 8019fde:	d1eb      	bne.n	8019fb8 <mem_overflow_check_raw+0x20>
 8019fe0:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019fe4:	4f0e      	ldr	r7, [pc, #56]	; (801a020 <mem_overflow_check_raw+0x88>)
 8019fe6:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 8019fe8:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801a028 <mem_overflow_check_raw+0x90>
 8019fec:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801a02c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019ff0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019ff4:	463a      	mov	r2, r7
 8019ff6:	2180      	movs	r1, #128	; 0x80
 8019ff8:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8019ffa:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019ffc:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8019ffe:	d009      	beq.n	801a014 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801a000:	f8cd 8000 	str.w	r8, [sp]
 801a004:	f00b fb8c 	bl	8025720 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801a008:	4653      	mov	r3, sl
 801a00a:	2278      	movs	r2, #120	; 0x78
 801a00c:	a902      	add	r1, sp, #8
 801a00e:	4648      	mov	r0, r9
 801a010:	f00b f9d0 	bl	80253b4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 801a014:	42b4      	cmp	r4, r6
 801a016:	d1eb      	bne.n	8019ff0 <mem_overflow_check_raw+0x58>
}
 801a018:	b023      	add	sp, #140	; 0x8c
 801a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a01e:	bf00      	nop
 801a020:	08043368 	.word	0x08043368
 801a024:	08043348 	.word	0x08043348
 801a028:	08043250 	.word	0x08043250
 801a02c:	0802a008 	.word	0x0802a008

0801a030 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a030:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801a034:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a036:	f840 3c10 	str.w	r3, [r0, #-16]
 801a03a:	f840 3c0c 	str.w	r3, [r0, #-12]
 801a03e:	f840 3c08 	str.w	r3, [r0, #-8]
 801a042:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801a046:	5043      	str	r3, [r0, r1]
 801a048:	6053      	str	r3, [r2, #4]
 801a04a:	6093      	str	r3, [r2, #8]
 801a04c:	60d3      	str	r3, [r2, #12]
}
 801a04e:	4770      	bx	lr

0801a050 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a050:	4b14      	ldr	r3, [pc, #80]	; (801a0a4 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 801a052:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 801a056:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801a058:	4913      	ldr	r1, [pc, #76]	; (801a0a8 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a05a:	f023 0303 	bic.w	r3, r3, #3
{
 801a05e:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 801a060:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 801a062:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a064:	4c11      	ldr	r4, [pc, #68]	; (801a0ac <mem_init+0x5c>)
  mem->used = 0;
 801a066:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801a068:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 801a06a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 801a06e:	4910      	ldr	r1, [pc, #64]	; (801a0b0 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a070:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 801a072:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 801a074:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 801a078:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 801a07c:	f7ff feb2 	bl	8019de4 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 801a080:	6822      	ldr	r2, [r4, #0]
 801a082:	4b0c      	ldr	r3, [pc, #48]	; (801a0b4 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801a084:	480c      	ldr	r0, [pc, #48]	; (801a0b8 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 801a086:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801a088:	f009 fcae 	bl	80239e8 <sys_mutex_new>
 801a08c:	b900      	cbnz	r0, 801a090 <mem_init+0x40>
}
 801a08e:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801a090:	4b0a      	ldr	r3, [pc, #40]	; (801a0bc <mem_init+0x6c>)
 801a092:	f240 221f 	movw	r2, #543	; 0x21f
 801a096:	490a      	ldr	r1, [pc, #40]	; (801a0c0 <mem_init+0x70>)
 801a098:	480a      	ldr	r0, [pc, #40]	; (801a0c4 <mem_init+0x74>)
}
 801a09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801a09e:	f00b b989 	b.w	80253b4 <iprintf>
 801a0a2:	bf00      	nop
 801a0a4:	2001ef4f 	.word	0x2001ef4f
 801a0a8:	2001ef48 	.word	0x2001ef48
 801a0ac:	2001ef44 	.word	0x2001ef44
 801a0b0:	27102710 	.word	0x27102710
 801a0b4:	2001ef38 	.word	0x2001ef38
 801a0b8:	2001ef40 	.word	0x2001ef40
 801a0bc:	08043250 	.word	0x08043250
 801a0c0:	08043388 	.word	0x08043388
 801a0c4:	0802a008 	.word	0x0802a008

0801a0c8 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801a0c8:	2800      	cmp	r0, #0
 801a0ca:	d07f      	beq.n	801a1cc <mem_free+0x104>
{
 801a0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801a0d0:	f010 0803 	ands.w	r8, r0, #3
 801a0d4:	4604      	mov	r4, r0
 801a0d6:	d170      	bne.n	801a1ba <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801a0d8:	4e5c      	ldr	r6, [pc, #368]	; (801a24c <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801a0da:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801a0de:	6833      	ldr	r3, [r6, #0]
 801a0e0:	42ab      	cmp	r3, r5
 801a0e2:	d805      	bhi.n	801a0f0 <mem_free+0x28>
 801a0e4:	4f5a      	ldr	r7, [pc, #360]	; (801a250 <mem_free+0x188>)
 801a0e6:	f100 030c 	add.w	r3, r0, #12
 801a0ea:	683a      	ldr	r2, [r7, #0]
 801a0ec:	429a      	cmp	r2, r3
 801a0ee:	d208      	bcs.n	801a102 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801a0f0:	4b58      	ldr	r3, [pc, #352]	; (801a254 <mem_free+0x18c>)
 801a0f2:	f240 227f 	movw	r2, #639	; 0x27f
 801a0f6:	4958      	ldr	r1, [pc, #352]	; (801a258 <mem_free+0x190>)
 801a0f8:	4858      	ldr	r0, [pc, #352]	; (801a25c <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801a0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801a0fe:	f00b b959 	b.w	80253b4 <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801a102:	4b57      	ldr	r3, [pc, #348]	; (801a260 <mem_free+0x198>)
 801a104:	4a57      	ldr	r2, [pc, #348]	; (801a264 <mem_free+0x19c>)
 801a106:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801a10a:	f7ff ff45 	bl	8019f98 <mem_overflow_check_raw>
  if (!mem->used) {
 801a10e:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801a112:	2b00      	cmp	r3, #0
 801a114:	f000 8082 	beq.w	801a21c <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 801a118:	4628      	mov	r0, r5
 801a11a:	f7ff fe33 	bl	8019d84 <mem_link_valid>
 801a11e:	2800      	cmp	r0, #0
 801a120:	f000 8085 	beq.w	801a22e <mem_free+0x166>
  mem->used = 0;
 801a124:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 801a128:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801a288 <mem_free+0x1c0>
 801a12c:	f8d8 3000 	ldr.w	r3, [r8]
 801a130:	42ab      	cmp	r3, r5
 801a132:	d901      	bls.n	801a138 <mem_free+0x70>
    lfree = mem;
 801a134:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801a138:	6833      	ldr	r3, [r6, #0]
 801a13a:	429d      	cmp	r5, r3
 801a13c:	d351      	bcc.n	801a1e2 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801a13e:	683b      	ldr	r3, [r7, #0]
 801a140:	429d      	cmp	r5, r3
 801a142:	d258      	bcs.n	801a1f6 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801a144:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801a148:	f242 7210 	movw	r2, #10000	; 0x2710
 801a14c:	4293      	cmp	r3, r2
 801a14e:	d83e      	bhi.n	801a1ce <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 801a150:	6832      	ldr	r2, [r6, #0]
 801a152:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801a154:	429d      	cmp	r5, r3
 801a156:	d013      	beq.n	801a180 <mem_free+0xb8>
 801a158:	7919      	ldrb	r1, [r3, #4]
 801a15a:	b989      	cbnz	r1, 801a180 <mem_free+0xb8>
 801a15c:	6839      	ldr	r1, [r7, #0]
 801a15e:	428b      	cmp	r3, r1
 801a160:	d00e      	beq.n	801a180 <mem_free+0xb8>
    if (lfree == nmem) {
 801a162:	f8d8 1000 	ldr.w	r1, [r8]
 801a166:	428b      	cmp	r3, r1
 801a168:	d06d      	beq.n	801a246 <mem_free+0x17e>
    mem->next = nmem->next;
 801a16a:	8819      	ldrh	r1, [r3, #0]
 801a16c:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801a170:	f242 7110 	movw	r1, #10000	; 0x2710
 801a174:	881b      	ldrh	r3, [r3, #0]
 801a176:	428b      	cmp	r3, r1
 801a178:	d002      	beq.n	801a180 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801a17a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 801a17c:	1aa9      	subs	r1, r5, r2
 801a17e:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 801a180:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 801a184:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 801a186:	429d      	cmp	r5, r3
 801a188:	d010      	beq.n	801a1ac <mem_free+0xe4>
 801a18a:	7918      	ldrb	r0, [r3, #4]
 801a18c:	b970      	cbnz	r0, 801a1ac <mem_free+0xe4>
    if (lfree == mem) {
 801a18e:	f8d8 0000 	ldr.w	r0, [r8]
 801a192:	4285      	cmp	r5, r0
 801a194:	d054      	beq.n	801a240 <mem_free+0x178>
    pmem->next = mem->next;
 801a196:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801a19a:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 801a19e:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801a1a0:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801a1a4:	4283      	cmp	r3, r0
 801a1a6:	d001      	beq.n	801a1ac <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801a1a8:	441a      	add	r2, r3
 801a1aa:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 801a1ac:	f7ff fe1a 	bl	8019de4 <mem_sanity>
  mem_free_count = 1;
 801a1b0:	4b2d      	ldr	r3, [pc, #180]	; (801a268 <mem_free+0x1a0>)
 801a1b2:	2201      	movs	r2, #1
 801a1b4:	701a      	strb	r2, [r3, #0]
}
 801a1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801a1ba:	4b26      	ldr	r3, [pc, #152]	; (801a254 <mem_free+0x18c>)
 801a1bc:	f240 2273 	movw	r2, #627	; 0x273
 801a1c0:	492a      	ldr	r1, [pc, #168]	; (801a26c <mem_free+0x1a4>)
 801a1c2:	4826      	ldr	r0, [pc, #152]	; (801a25c <mem_free+0x194>)
}
 801a1c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801a1c8:	f00b b8f4 	b.w	80253b4 <iprintf>
 801a1cc:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801a1ce:	4b21      	ldr	r3, [pc, #132]	; (801a254 <mem_free+0x18c>)
 801a1d0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801a1d4:	4926      	ldr	r1, [pc, #152]	; (801a270 <mem_free+0x1a8>)
 801a1d6:	4821      	ldr	r0, [pc, #132]	; (801a25c <mem_free+0x194>)
 801a1d8:	f00b f8ec 	bl	80253b4 <iprintf>
  nmem = ptr_to_mem(mem->next);
 801a1dc:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801a1e0:	e7b6      	b.n	801a150 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801a1e2:	4b1c      	ldr	r3, [pc, #112]	; (801a254 <mem_free+0x18c>)
 801a1e4:	f240 12df 	movw	r2, #479	; 0x1df
 801a1e8:	4922      	ldr	r1, [pc, #136]	; (801a274 <mem_free+0x1ac>)
 801a1ea:	481c      	ldr	r0, [pc, #112]	; (801a25c <mem_free+0x194>)
 801a1ec:	f00b f8e2 	bl	80253b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801a1f0:	683b      	ldr	r3, [r7, #0]
 801a1f2:	429d      	cmp	r5, r3
 801a1f4:	d306      	bcc.n	801a204 <mem_free+0x13c>
 801a1f6:	4b17      	ldr	r3, [pc, #92]	; (801a254 <mem_free+0x18c>)
 801a1f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a1fc:	491e      	ldr	r1, [pc, #120]	; (801a278 <mem_free+0x1b0>)
 801a1fe:	4817      	ldr	r0, [pc, #92]	; (801a25c <mem_free+0x194>)
 801a200:	f00b f8d8 	bl	80253b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801a204:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d09b      	beq.n	801a144 <mem_free+0x7c>
 801a20c:	4b11      	ldr	r3, [pc, #68]	; (801a254 <mem_free+0x18c>)
 801a20e:	f240 12e1 	movw	r2, #481	; 0x1e1
 801a212:	491a      	ldr	r1, [pc, #104]	; (801a27c <mem_free+0x1b4>)
 801a214:	4811      	ldr	r0, [pc, #68]	; (801a25c <mem_free+0x194>)
 801a216:	f00b f8cd 	bl	80253b4 <iprintf>
 801a21a:	e793      	b.n	801a144 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801a21c:	4b0d      	ldr	r3, [pc, #52]	; (801a254 <mem_free+0x18c>)
 801a21e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801a222:	4917      	ldr	r1, [pc, #92]	; (801a280 <mem_free+0x1b8>)
 801a224:	480d      	ldr	r0, [pc, #52]	; (801a25c <mem_free+0x194>)
}
 801a226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801a22a:	f00b b8c3 	b.w	80253b4 <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801a22e:	4b09      	ldr	r3, [pc, #36]	; (801a254 <mem_free+0x18c>)
 801a230:	f240 2295 	movw	r2, #661	; 0x295
 801a234:	4913      	ldr	r1, [pc, #76]	; (801a284 <mem_free+0x1bc>)
 801a236:	4809      	ldr	r0, [pc, #36]	; (801a25c <mem_free+0x194>)
}
 801a238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801a23c:	f00b b8ba 	b.w	80253b4 <iprintf>
      lfree = pmem;
 801a240:	f8c8 3000 	str.w	r3, [r8]
 801a244:	e7a7      	b.n	801a196 <mem_free+0xce>
      lfree = mem;
 801a246:	f8c8 5000 	str.w	r5, [r8]
 801a24a:	e78e      	b.n	801a16a <mem_free+0xa2>
 801a24c:	2001ef44 	.word	0x2001ef44
 801a250:	2001ef48 	.word	0x2001ef48
 801a254:	08043250 	.word	0x08043250
 801a258:	080433c8 	.word	0x080433c8
 801a25c:	0802a008 	.word	0x0802a008
 801a260:	0802a290 	.word	0x0802a290
 801a264:	080433e4 	.word	0x080433e4
 801a268:	2001ef3c 	.word	0x2001ef3c
 801a26c:	080433a4 	.word	0x080433a4
 801a270:	08043498 	.word	0x08043498
 801a274:	08043448 	.word	0x08043448
 801a278:	08043460 	.word	0x08043460
 801a27c:	0804347c 	.word	0x0804347c
 801a280:	080433ec 	.word	0x080433ec
 801a284:	08043414 	.word	0x08043414
 801a288:	2001ef38 	.word	0x2001ef38

0801a28c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801a290:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801a292:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801a296:	f024 0403 	bic.w	r4, r4, #3
 801a29a:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 801a29c:	2c0c      	cmp	r4, #12
 801a29e:	bf38      	it	cc
 801a2a0:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801a2a2:	3420      	adds	r4, #32
 801a2a4:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801a2a6:	429c      	cmp	r4, r3
 801a2a8:	d87a      	bhi.n	801a3a0 <mem_trim+0x114>
 801a2aa:	42a1      	cmp	r1, r4
 801a2ac:	460e      	mov	r6, r1
 801a2ae:	d877      	bhi.n	801a3a0 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801a2b0:	4f58      	ldr	r7, [pc, #352]	; (801a414 <mem_trim+0x188>)
 801a2b2:	4605      	mov	r5, r0
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	4283      	cmp	r3, r0
 801a2b8:	d803      	bhi.n	801a2c2 <mem_trim+0x36>
 801a2ba:	4b57      	ldr	r3, [pc, #348]	; (801a418 <mem_trim+0x18c>)
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	4283      	cmp	r3, r0
 801a2c0:	d810      	bhi.n	801a2e4 <mem_trim+0x58>
 801a2c2:	4b56      	ldr	r3, [pc, #344]	; (801a41c <mem_trim+0x190>)
 801a2c4:	f240 22d1 	movw	r2, #721	; 0x2d1
 801a2c8:	4955      	ldr	r1, [pc, #340]	; (801a420 <mem_trim+0x194>)
 801a2ca:	4856      	ldr	r0, [pc, #344]	; (801a424 <mem_trim+0x198>)
 801a2cc:	f00b f872 	bl	80253b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	42ab      	cmp	r3, r5
 801a2d4:	d902      	bls.n	801a2dc <mem_trim+0x50>
{
 801a2d6:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 801a2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801a2dc:	4b4e      	ldr	r3, [pc, #312]	; (801a418 <mem_trim+0x18c>)
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	429d      	cmp	r5, r3
 801a2e2:	d2f8      	bcs.n	801a2d6 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801a2e4:	4b50      	ldr	r3, [pc, #320]	; (801a428 <mem_trim+0x19c>)
 801a2e6:	4628      	mov	r0, r5
 801a2e8:	4a50      	ldr	r2, [pc, #320]	; (801a42c <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801a2ea:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801a2ee:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 801a2f2:	f7ff fe51 	bl	8019f98 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 801a2f6:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801a2f8:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 801a2fc:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801a300:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 801a304:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801a308:	eba3 0308 	sub.w	r3, r3, r8
 801a30c:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801a30e:	429c      	cmp	r4, r3
 801a310:	d83d      	bhi.n	801a38e <mem_trim+0x102>
  if (newsize == size) {
 801a312:	d0e0      	beq.n	801a2d6 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 801a314:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 801a318:	f899 0004 	ldrb.w	r0, [r9, #4]
 801a31c:	2800      	cmp	r0, #0
 801a31e:	d142      	bne.n	801a3a6 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a320:	f242 7310 	movw	r3, #10000	; 0x2710
 801a324:	4299      	cmp	r1, r3
 801a326:	d061      	beq.n	801a3ec <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a328:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 801a32c:	4940      	ldr	r1, [pc, #256]	; (801a430 <mem_trim+0x1a4>)
    next = mem2->next;
 801a32e:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a332:	441c      	add	r4, r3
    if (lfree == mem2) {
 801a334:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a336:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 801a338:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 801a33a:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 801a33e:	d053      	beq.n	801a3e8 <mem_trim+0x15c>
    mem2->used = 0;
 801a340:	2100      	movs	r1, #0
    mem2->next = next;
 801a342:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 801a344:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801a348:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a34a:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801a34e:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a352:	881b      	ldrh	r3, [r3, #0]
 801a354:	428b      	cmp	r3, r1
 801a356:	d001      	beq.n	801a35c <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a358:	4413      	add	r3, r2
 801a35a:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a35c:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801a360:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 801a362:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a366:	f845 3c10 	str.w	r3, [r5, #-16]
 801a36a:	f845 3c0c 	str.w	r3, [r5, #-12]
 801a36e:	f845 3c08 	str.w	r3, [r5, #-8]
 801a372:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801a376:	51ab      	str	r3, [r5, r6]
 801a378:	6053      	str	r3, [r2, #4]
 801a37a:	6093      	str	r3, [r2, #8]
 801a37c:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 801a37e:	f7ff fd31 	bl	8019de4 <mem_sanity>
  mem_free_count = 1;
 801a382:	4b2c      	ldr	r3, [pc, #176]	; (801a434 <mem_trim+0x1a8>)
 801a384:	2201      	movs	r2, #1
  return rmem;
 801a386:	4628      	mov	r0, r5
  mem_free_count = 1;
 801a388:	701a      	strb	r2, [r3, #0]
}
 801a38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801a38e:	4b23      	ldr	r3, [pc, #140]	; (801a41c <mem_trim+0x190>)
 801a390:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801a394:	4928      	ldr	r1, [pc, #160]	; (801a438 <mem_trim+0x1ac>)
 801a396:	4823      	ldr	r0, [pc, #140]	; (801a424 <mem_trim+0x198>)
 801a398:	f00b f80c 	bl	80253b4 <iprintf>
    return NULL;
 801a39c:	2000      	movs	r0, #0
 801a39e:	e79b      	b.n	801a2d8 <mem_trim+0x4c>
    return NULL;
 801a3a0:	2000      	movs	r0, #0
}
 801a3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801a3a6:	f104 0014 	add.w	r0, r4, #20
 801a3aa:	4298      	cmp	r0, r3
 801a3ac:	d8d6      	bhi.n	801a35c <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a3ae:	f108 0308 	add.w	r3, r8, #8
 801a3b2:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a3b4:	f242 7310 	movw	r3, #10000	; 0x2710
 801a3b8:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a3ba:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a3bc:	d01f      	beq.n	801a3fe <mem_trim+0x172>
    if (mem2 < lfree) {
 801a3be:	481c      	ldr	r0, [pc, #112]	; (801a430 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 801a3c0:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 801a3c2:	6807      	ldr	r7, [r0, #0]
 801a3c4:	429f      	cmp	r7, r3
 801a3c6:	d900      	bls.n	801a3ca <mem_trim+0x13e>
      lfree = mem2;
 801a3c8:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 801a3ca:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 801a3cc:	2100      	movs	r1, #0
    mem2->prev = ptr;
 801a3ce:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801a3d2:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a3d4:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801a3d8:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a3dc:	881b      	ldrh	r3, [r3, #0]
 801a3de:	428b      	cmp	r3, r1
 801a3e0:	d0bc      	beq.n	801a35c <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a3e2:	441a      	add	r2, r3
 801a3e4:	8054      	strh	r4, [r2, #2]
 801a3e6:	e7b9      	b.n	801a35c <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 801a3e8:	600b      	str	r3, [r1, #0]
 801a3ea:	e7a9      	b.n	801a340 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a3ec:	f240 22f5 	movw	r2, #757	; 0x2f5
 801a3f0:	4b0a      	ldr	r3, [pc, #40]	; (801a41c <mem_trim+0x190>)
 801a3f2:	4912      	ldr	r1, [pc, #72]	; (801a43c <mem_trim+0x1b0>)
 801a3f4:	480b      	ldr	r0, [pc, #44]	; (801a424 <mem_trim+0x198>)
 801a3f6:	f00a ffdd 	bl	80253b4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a3fa:	683a      	ldr	r2, [r7, #0]
 801a3fc:	e794      	b.n	801a328 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a3fe:	f240 3216 	movw	r2, #790	; 0x316
 801a402:	490e      	ldr	r1, [pc, #56]	; (801a43c <mem_trim+0x1b0>)
 801a404:	4b05      	ldr	r3, [pc, #20]	; (801a41c <mem_trim+0x190>)
 801a406:	4807      	ldr	r0, [pc, #28]	; (801a424 <mem_trim+0x198>)
 801a408:	f00a ffd4 	bl	80253b4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a40c:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 801a40e:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 801a412:	e7d4      	b.n	801a3be <mem_trim+0x132>
 801a414:	2001ef44 	.word	0x2001ef44
 801a418:	2001ef48 	.word	0x2001ef48
 801a41c:	08043250 	.word	0x08043250
 801a420:	080434c4 	.word	0x080434c4
 801a424:	0802a008 	.word	0x0802a008
 801a428:	0802a290 	.word	0x0802a290
 801a42c:	080433e4 	.word	0x080433e4
 801a430:	2001ef38 	.word	0x2001ef38
 801a434:	2001ef3c 	.word	0x2001ef3c
 801a438:	080434dc 	.word	0x080434dc
 801a43c:	080434fc 	.word	0x080434fc

0801a440 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801a440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801a444:	4680      	mov	r8, r0
 801a446:	2800      	cmp	r0, #0
 801a448:	f000 80b2 	beq.w	801a5b0 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801a44c:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801a450:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801a454:	f02b 0b03 	bic.w	fp, fp, #3
 801a458:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 801a45c:	f1bb 0f0c 	cmp.w	fp, #12
 801a460:	bf38      	it	cc
 801a462:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801a466:	f10b 0720 	add.w	r7, fp, #32
 801a46a:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801a46c:	42a7      	cmp	r7, r4
 801a46e:	f200 809f 	bhi.w	801a5b0 <mem_malloc+0x170>
 801a472:	42b8      	cmp	r0, r7
 801a474:	bf94      	ite	ls
 801a476:	f04f 0a00 	movls.w	sl, #0
 801a47a:	f04f 0a01 	movhi.w	sl, #1
 801a47e:	f1ba 0f00 	cmp.w	sl, #0
 801a482:	f040 8095 	bne.w	801a5b0 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801a486:	4866      	ldr	r0, [pc, #408]	; (801a620 <mem_malloc+0x1e0>)
 801a488:	f009 fabe 	bl	8023a08 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 801a48c:	4b65      	ldr	r3, [pc, #404]	; (801a624 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a48e:	eba4 0c07 	sub.w	ip, r4, r7
 801a492:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801a64c <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 801a496:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a498:	f06f 0e07 	mvn.w	lr, #7
 801a49c:	4d62      	ldr	r5, [pc, #392]	; (801a628 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a49e:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 801a4a2:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a4a4:	b2b3      	uxth	r3, r6
 801a4a6:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 801a4a8:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a4aa:	d97a      	bls.n	801a5a2 <mem_malloc+0x162>
      mem_free_count = 0;
 801a4ac:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a4b0:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 801a4b4:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 801a4b6:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 801a4b8:	2900      	cmp	r1, #0
 801a4ba:	d1f0      	bne.n	801a49e <mem_malloc+0x5e>
      if ((!mem->used) &&
 801a4bc:	7923      	ldrb	r3, [r4, #4]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d16b      	bne.n	801a59a <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a4c2:	8821      	ldrh	r1, [r4, #0]
 801a4c4:	440a      	add	r2, r1
 801a4c6:	460b      	mov	r3, r1
      if ((!mem->used) &&
 801a4c8:	42ba      	cmp	r2, r7
 801a4ca:	d3ec      	bcc.n	801a4a6 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801a4cc:	f107 0314 	add.w	r3, r7, #20
 801a4d0:	429a      	cmp	r2, r3
 801a4d2:	d371      	bcc.n	801a5b8 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801a4d4:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a4d8:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801a4dc:	44b2      	add	sl, r6
 801a4de:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a4e2:	459a      	cmp	sl, r3
 801a4e4:	f000 808f 	beq.w	801a606 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 801a4e8:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 801a4ec:	2200      	movs	r2, #0
 801a4ee:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801a4f0:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 801a4f4:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 801a4f8:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 801a4fa:	2301      	movs	r3, #1
          mem->next = ptr2;
 801a4fc:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 801a500:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801a502:	f830 300a 	ldrh.w	r3, [r0, sl]
 801a506:	4293      	cmp	r3, r2
 801a508:	d002      	beq.n	801a510 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801a50a:	4418      	add	r0, r3
 801a50c:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801a510:	f8d9 3000 	ldr.w	r3, [r9]
 801a514:	42a3      	cmp	r3, r4
 801a516:	f040 8081 	bne.w	801a61c <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 801a51a:	4b42      	ldr	r3, [pc, #264]	; (801a624 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 801a51c:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 801a51e:	4e43      	ldr	r6, [pc, #268]	; (801a62c <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 801a520:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 801a524:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 801a526:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 801a52a:	791a      	ldrb	r2, [r3, #4]
 801a52c:	b942      	cbnz	r2, 801a540 <mem_malloc+0x100>
 801a52e:	e009      	b.n	801a544 <mem_malloc+0x104>
            mem_free_count = 0;
 801a530:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 801a532:	782a      	ldrb	r2, [r5, #0]
 801a534:	2a00      	cmp	r2, #0
 801a536:	d142      	bne.n	801a5be <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 801a538:	881b      	ldrh	r3, [r3, #0]
 801a53a:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 801a53c:	791a      	ldrb	r2, [r3, #4]
 801a53e:	b10a      	cbz	r2, 801a544 <mem_malloc+0x104>
 801a540:	4299      	cmp	r1, r3
 801a542:	d1f5      	bne.n	801a530 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 801a544:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801a548:	f8d9 3000 	ldr.w	r3, [r9]
 801a54c:	4299      	cmp	r1, r3
 801a54e:	d004      	beq.n	801a55a <mem_malloc+0x11a>
 801a550:	f8d9 3000 	ldr.w	r3, [r9]
 801a554:	791b      	ldrb	r3, [r3, #4]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d14d      	bne.n	801a5f6 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a55a:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801a55c:	4830      	ldr	r0, [pc, #192]	; (801a620 <mem_malloc+0x1e0>)
 801a55e:	f009 fa59 	bl	8023a14 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a562:	6833      	ldr	r3, [r6, #0]
 801a564:	4427      	add	r7, r4
 801a566:	42bb      	cmp	r3, r7
 801a568:	d33d      	bcc.n	801a5e6 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a56a:	07a3      	lsls	r3, r4, #30
 801a56c:	d12c      	bne.n	801a5c8 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801a56e:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a572:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 801a576:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 801a57a:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a57e:	60a3      	str	r3, [r4, #8]
 801a580:	60e3      	str	r3, [r4, #12]
 801a582:	6123      	str	r3, [r4, #16]
 801a584:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801a586:	f845 3008 	str.w	r3, [r5, r8]
 801a58a:	6053      	str	r3, [r2, #4]
 801a58c:	6093      	str	r3, [r2, #8]
 801a58e:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 801a590:	f7ff fc28 	bl	8019de4 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 801a594:	4628      	mov	r0, r5
 801a596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a59a:	8826      	ldrh	r6, [r4, #0]
 801a59c:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a59e:	459c      	cmp	ip, r3
 801a5a0:	d884      	bhi.n	801a4ac <mem_malloc+0x6c>
  return NULL;
 801a5a2:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801a5a4:	481e      	ldr	r0, [pc, #120]	; (801a620 <mem_malloc+0x1e0>)
 801a5a6:	f009 fa35 	bl	8023a14 <sys_mutex_unlock>
}
 801a5aa:	4628      	mov	r0, r5
 801a5ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 801a5b0:	2500      	movs	r5, #0
}
 801a5b2:	4628      	mov	r0, r5
 801a5b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 801a5b8:	2301      	movs	r3, #1
 801a5ba:	7123      	strb	r3, [r4, #4]
 801a5bc:	e7a8      	b.n	801a510 <mem_malloc+0xd0>
        if (mem == lfree) {
 801a5be:	f8d9 3000 	ldr.w	r3, [r9]
 801a5c2:	42a3      	cmp	r3, r4
 801a5c4:	d0af      	beq.n	801a526 <mem_malloc+0xe6>
 801a5c6:	e7c8      	b.n	801a55a <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a5c8:	4b19      	ldr	r3, [pc, #100]	; (801a630 <mem_malloc+0x1f0>)
 801a5ca:	f240 32bb 	movw	r2, #955	; 0x3bb
 801a5ce:	4919      	ldr	r1, [pc, #100]	; (801a634 <mem_malloc+0x1f4>)
 801a5d0:	4819      	ldr	r0, [pc, #100]	; (801a638 <mem_malloc+0x1f8>)
 801a5d2:	f00a feef 	bl	80253b4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801a5d6:	4b16      	ldr	r3, [pc, #88]	; (801a630 <mem_malloc+0x1f0>)
 801a5d8:	f240 32bd 	movw	r2, #957	; 0x3bd
 801a5dc:	4917      	ldr	r1, [pc, #92]	; (801a63c <mem_malloc+0x1fc>)
 801a5de:	4816      	ldr	r0, [pc, #88]	; (801a638 <mem_malloc+0x1f8>)
 801a5e0:	f00a fee8 	bl	80253b4 <iprintf>
 801a5e4:	e7c3      	b.n	801a56e <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a5e6:	4b12      	ldr	r3, [pc, #72]	; (801a630 <mem_malloc+0x1f0>)
 801a5e8:	f240 32b9 	movw	r2, #953	; 0x3b9
 801a5ec:	4914      	ldr	r1, [pc, #80]	; (801a640 <mem_malloc+0x200>)
 801a5ee:	4812      	ldr	r0, [pc, #72]	; (801a638 <mem_malloc+0x1f8>)
 801a5f0:	f00a fee0 	bl	80253b4 <iprintf>
 801a5f4:	e7b9      	b.n	801a56a <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801a5f6:	4b0e      	ldr	r3, [pc, #56]	; (801a630 <mem_malloc+0x1f0>)
 801a5f8:	f240 32b5 	movw	r2, #949	; 0x3b5
 801a5fc:	4911      	ldr	r1, [pc, #68]	; (801a644 <mem_malloc+0x204>)
 801a5fe:	480e      	ldr	r0, [pc, #56]	; (801a638 <mem_malloc+0x1f8>)
 801a600:	f00a fed8 	bl	80253b4 <iprintf>
 801a604:	e7a9      	b.n	801a55a <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a606:	4b0a      	ldr	r3, [pc, #40]	; (801a630 <mem_malloc+0x1f0>)
 801a608:	f240 3287 	movw	r2, #903	; 0x387
 801a60c:	490e      	ldr	r1, [pc, #56]	; (801a648 <mem_malloc+0x208>)
 801a60e:	480a      	ldr	r0, [pc, #40]	; (801a638 <mem_malloc+0x1f8>)
 801a610:	f00a fed0 	bl	80253b4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a614:	4b03      	ldr	r3, [pc, #12]	; (801a624 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 801a616:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 801a618:	6818      	ldr	r0, [r3, #0]
 801a61a:	e765      	b.n	801a4e8 <mem_malloc+0xa8>
 801a61c:	4e03      	ldr	r6, [pc, #12]	; (801a62c <mem_malloc+0x1ec>)
 801a61e:	e79c      	b.n	801a55a <mem_malloc+0x11a>
 801a620:	2001ef40 	.word	0x2001ef40
 801a624:	2001ef44 	.word	0x2001ef44
 801a628:	2001ef3c 	.word	0x2001ef3c
 801a62c:	2001ef48 	.word	0x2001ef48
 801a630:	08043250 	.word	0x08043250
 801a634:	0804355c 	.word	0x0804355c
 801a638:	0802a008 	.word	0x0802a008
 801a63c:	0804358c 	.word	0x0804358c
 801a640:	0804352c 	.word	0x0804352c
 801a644:	08043510 	.word	0x08043510
 801a648:	080434fc 	.word	0x080434fc
 801a64c:	2001ef38 	.word	0x2001ef38

0801a650 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 801a650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a654:	4f12      	ldr	r7, [pc, #72]	; (801a6a0 <memp_overflow_check_all+0x50>)
 801a656:	2308      	movs	r3, #8
 801a658:	4c12      	ldr	r4, [pc, #72]	; (801a6a4 <memp_overflow_check_all+0x54>)
 801a65a:	4d13      	ldr	r5, [pc, #76]	; (801a6a8 <memp_overflow_check_all+0x58>)
 801a65c:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801a660:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801a6ac <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801a664:	3403      	adds	r4, #3
 801a666:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a66a:	b183      	cbz	r3, 801a68e <memp_overflow_check_all+0x3e>
 801a66c:	88a9      	ldrh	r1, [r5, #4]
 801a66e:	2600      	movs	r6, #0
 801a670:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801a672:	f104 001c 	add.w	r0, r4, #28
 801a676:	682b      	ldr	r3, [r5, #0]
 801a678:	464a      	mov	r2, r9
 801a67a:	f7ff fc8d 	bl	8019f98 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a67e:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a680:	88e8      	ldrh	r0, [r5, #6]
 801a682:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a684:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a688:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a68a:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a68c:	d8f0      	bhi.n	801a670 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801a68e:	45b8      	cmp	r8, r7
 801a690:	d004      	beq.n	801a69c <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801a692:	f857 5b04 	ldr.w	r5, [r7], #4
 801a696:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a698:	88eb      	ldrh	r3, [r5, #6]
 801a69a:	e7e3      	b.n	801a664 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 801a69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6a0:	08043840 	.word	0x08043840
 801a6a4:	200296c8 	.word	0x200296c8
 801a6a8:	080437ac 	.word	0x080437ac
 801a6ac:	080435b0 	.word	0x080435b0

0801a6b0 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801a6b0:	078b      	lsls	r3, r1, #30
{
 801a6b2:	b570      	push	{r4, r5, r6, lr}
 801a6b4:	460c      	mov	r4, r1
 801a6b6:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 801a6b8:	d11f      	bne.n	801a6fa <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801a6ba:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801a6bc:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 801a6c0:	6811      	ldr	r1, [r2, #0]
 801a6c2:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 801a6c6:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a6c8:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801a6cc:	b15a      	cbz	r2, 801a6e6 <do_memp_free_pool+0x36>
      if (t == h) {
 801a6ce:	429a      	cmp	r2, r3
 801a6d0:	d105      	bne.n	801a6de <do_memp_free_pool+0x2e>
 801a6d2:	e009      	b.n	801a6e8 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a6d4:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a6d6:	b133      	cbz	r3, 801a6e6 <do_memp_free_pool+0x36>
 801a6d8:	b12a      	cbz	r2, 801a6e6 <do_memp_free_pool+0x36>
      if (t == h) {
 801a6da:	4293      	cmp	r3, r2
 801a6dc:	d004      	beq.n	801a6e8 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a6de:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a6e0:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a6e2:	2a00      	cmp	r2, #0
 801a6e4:	d1f6      	bne.n	801a6d4 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801a6e6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801a6e8:	4b08      	ldr	r3, [pc, #32]	; (801a70c <do_memp_free_pool+0x5c>)
 801a6ea:	f240 1285 	movw	r2, #389	; 0x185
 801a6ee:	4908      	ldr	r1, [pc, #32]	; (801a710 <do_memp_free_pool+0x60>)
 801a6f0:	4808      	ldr	r0, [pc, #32]	; (801a714 <do_memp_free_pool+0x64>)
}
 801a6f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801a6f6:	f00a be5d 	b.w	80253b4 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801a6fa:	4b04      	ldr	r3, [pc, #16]	; (801a70c <do_memp_free_pool+0x5c>)
 801a6fc:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801a700:	4905      	ldr	r1, [pc, #20]	; (801a718 <do_memp_free_pool+0x68>)
 801a702:	4804      	ldr	r0, [pc, #16]	; (801a714 <do_memp_free_pool+0x64>)
 801a704:	f00a fe56 	bl	80253b4 <iprintf>
 801a708:	e7d7      	b.n	801a6ba <do_memp_free_pool+0xa>
 801a70a:	bf00      	nop
 801a70c:	080435b8 	.word	0x080435b8
 801a710:	08043608 	.word	0x08043608
 801a714:	0802a008 	.word	0x0802a008
 801a718:	080435e8 	.word	0x080435e8

0801a71c <memp_init_pool>:
{
 801a71c:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 801a71e:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 801a720:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 801a722:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 801a726:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801a728:	b1b1      	cbz	r1, 801a758 <memp_init_pool+0x3c>
 801a72a:	3403      	adds	r4, #3
 801a72c:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a72e:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 801a730:	4616      	mov	r6, r2
 801a732:	f024 0403 	bic.w	r4, r4, #3
 801a736:	e001      	b.n	801a73c <memp_init_pool+0x20>
    memp->next = *desc->tab;
 801a738:	68eb      	ldr	r3, [r5, #12]
 801a73a:	681a      	ldr	r2, [r3, #0]
 801a73c:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a73e:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 801a742:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801a744:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a746:	f7ff fc73 	bl	801a030 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a74a:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 801a74c:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 801a74e:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 801a752:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a754:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 801a756:	dcef      	bgt.n	801a738 <memp_init_pool+0x1c>
}
 801a758:	bd70      	pop	{r4, r5, r6, pc}
 801a75a:	bf00      	nop

0801a75c <memp_init>:
{
 801a75c:	b538      	push	{r3, r4, r5, lr}
 801a75e:	4c07      	ldr	r4, [pc, #28]	; (801a77c <memp_init+0x20>)
 801a760:	4807      	ldr	r0, [pc, #28]	; (801a780 <memp_init+0x24>)
 801a762:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 801a766:	e001      	b.n	801a76c <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 801a768:	f854 0b04 	ldr.w	r0, [r4], #4
 801a76c:	f7ff ffd6 	bl	801a71c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801a770:	42ac      	cmp	r4, r5
 801a772:	d1f9      	bne.n	801a768 <memp_init+0xc>
}
 801a774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 801a778:	f7ff bf6a 	b.w	801a650 <memp_overflow_check_all>
 801a77c:	08043840 	.word	0x08043840
 801a780:	080437ac 	.word	0x080437ac

0801a784 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a784:	280f      	cmp	r0, #15
{
 801a786:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a788:	d81d      	bhi.n	801a7c6 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 801a78a:	4604      	mov	r4, r0
 801a78c:	460e      	mov	r6, r1
 801a78e:	4615      	mov	r5, r2
 801a790:	f7ff ff5e 	bl	801a650 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801a794:	4b11      	ldr	r3, [pc, #68]	; (801a7dc <memp_malloc_fn+0x58>)
 801a796:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a79a:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 801a79c:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 801a79e:	b144      	cbz	r4, 801a7b2 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 801a7a0:	6822      	ldr	r2, [r4, #0]
 801a7a2:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a7a8:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 801a7aa:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a7ae:	d102      	bne.n	801a7b6 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 801a7b0:	341c      	adds	r4, #28
}
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a7b6:	4b0a      	ldr	r3, [pc, #40]	; (801a7e0 <memp_malloc_fn+0x5c>)
 801a7b8:	f44f 728c 	mov.w	r2, #280	; 0x118
 801a7bc:	4909      	ldr	r1, [pc, #36]	; (801a7e4 <memp_malloc_fn+0x60>)
 801a7be:	480a      	ldr	r0, [pc, #40]	; (801a7e8 <memp_malloc_fn+0x64>)
 801a7c0:	f00a fdf8 	bl	80253b4 <iprintf>
 801a7c4:	e7f4      	b.n	801a7b0 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a7c6:	2400      	movs	r4, #0
 801a7c8:	4b05      	ldr	r3, [pc, #20]	; (801a7e0 <memp_malloc_fn+0x5c>)
 801a7ca:	f240 1257 	movw	r2, #343	; 0x157
 801a7ce:	4907      	ldr	r1, [pc, #28]	; (801a7ec <memp_malloc_fn+0x68>)
 801a7d0:	4805      	ldr	r0, [pc, #20]	; (801a7e8 <memp_malloc_fn+0x64>)
 801a7d2:	f00a fdef 	bl	80253b4 <iprintf>
}
 801a7d6:	4620      	mov	r0, r4
 801a7d8:	bd70      	pop	{r4, r5, r6, pc}
 801a7da:	bf00      	nop
 801a7dc:	0804383c 	.word	0x0804383c
 801a7e0:	080435b8 	.word	0x080435b8
 801a7e4:	08043628 	.word	0x08043628
 801a7e8:	0802a008 	.word	0x0802a008
 801a7ec:	0804364c 	.word	0x0804364c

0801a7f0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a7f0:	280f      	cmp	r0, #15
 801a7f2:	d80e      	bhi.n	801a812 <memp_free+0x22>
{
 801a7f4:	b570      	push	{r4, r5, r6, lr}
 801a7f6:	460d      	mov	r5, r1

  if (mem == NULL) {
 801a7f8:	b151      	cbz	r1, 801a810 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801a7fa:	4604      	mov	r4, r0
 801a7fc:	f7ff ff28 	bl	801a650 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801a800:	4b07      	ldr	r3, [pc, #28]	; (801a820 <memp_free+0x30>)
 801a802:	4629      	mov	r1, r5
 801a804:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801a808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 801a80c:	f7ff bf50 	b.w	801a6b0 <do_memp_free_pool>
}
 801a810:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a812:	4b04      	ldr	r3, [pc, #16]	; (801a824 <memp_free+0x34>)
 801a814:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801a818:	4903      	ldr	r1, [pc, #12]	; (801a828 <memp_free+0x38>)
 801a81a:	4804      	ldr	r0, [pc, #16]	; (801a82c <memp_free+0x3c>)
 801a81c:	f00a bdca 	b.w	80253b4 <iprintf>
 801a820:	0804383c 	.word	0x0804383c
 801a824:	080435b8 	.word	0x080435b8
 801a828:	0804366c 	.word	0x0804366c
 801a82c:	0802a008 	.word	0x0802a008

0801a830 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801a830:	f06f 000b 	mvn.w	r0, #11
 801a834:	4770      	bx	lr
 801a836:	bf00      	nop

0801a838 <netif_issue_reports>:
{
 801a838:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a83a:	4604      	mov	r4, r0
 801a83c:	b150      	cbz	r0, 801a854 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801a83e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801a842:	f003 0205 	and.w	r2, r3, #5
 801a846:	2a05      	cmp	r2, #5
 801a848:	d103      	bne.n	801a852 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801a84a:	6862      	ldr	r2, [r4, #4]
 801a84c:	b10a      	cbz	r2, 801a852 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801a84e:	071b      	lsls	r3, r3, #28
 801a850:	d408      	bmi.n	801a864 <netif_issue_reports+0x2c>
}
 801a852:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a854:	4b06      	ldr	r3, [pc, #24]	; (801a870 <netif_issue_reports+0x38>)
 801a856:	f240 326d 	movw	r2, #877	; 0x36d
 801a85a:	4906      	ldr	r1, [pc, #24]	; (801a874 <netif_issue_reports+0x3c>)
 801a85c:	4806      	ldr	r0, [pc, #24]	; (801a878 <netif_issue_reports+0x40>)
 801a85e:	f00a fda9 	bl	80253b4 <iprintf>
 801a862:	e7ec      	b.n	801a83e <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 801a864:	1d21      	adds	r1, r4, #4
 801a866:	4620      	mov	r0, r4
}
 801a868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 801a86c:	f007 bfac 	b.w	80227c8 <etharp_request>
 801a870:	0804387c 	.word	0x0804387c
 801a874:	080438b0 	.word	0x080438b0
 801a878:	0802a008 	.word	0x0802a008

0801a87c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a87c:	b570      	push	{r4, r5, r6, lr}
 801a87e:	4605      	mov	r5, r0
 801a880:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a882:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a884:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a886:	b301      	cbz	r1, 801a8ca <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801a888:	686b      	ldr	r3, [r5, #4]
 801a88a:	6822      	ldr	r2, [r4, #0]
 801a88c:	429a      	cmp	r2, r3
 801a88e:	d101      	bne.n	801a894 <netif_do_set_ipaddr.isra.0+0x18>
}
 801a890:	b002      	add	sp, #8
 801a892:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801a894:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a896:	4630      	mov	r0, r6
 801a898:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 801a89a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a89c:	f002 fa5a 	bl	801cd54 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801a8a0:	a901      	add	r1, sp, #4
 801a8a2:	4630      	mov	r0, r6
 801a8a4:	f005 fde4 	bl	8020470 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801a8a8:	a901      	add	r1, sp, #4
 801a8aa:	4630      	mov	r0, r6
 801a8ac:	f000 ff6c 	bl	801b788 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a8b0:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a8b2:	2101      	movs	r1, #1
 801a8b4:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a8b6:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a8b8:	f7ff ffbe 	bl	801a838 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801a8bc:	69eb      	ldr	r3, [r5, #28]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d0e6      	beq.n	801a890 <netif_do_set_ipaddr.isra.0+0x14>
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	4798      	blx	r3
}
 801a8c6:	b002      	add	sp, #8
 801a8c8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a8ca:	4b04      	ldr	r3, [pc, #16]	; (801a8dc <netif_do_set_ipaddr.isra.0+0x60>)
 801a8cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 801a8d0:	4903      	ldr	r1, [pc, #12]	; (801a8e0 <netif_do_set_ipaddr.isra.0+0x64>)
 801a8d2:	4804      	ldr	r0, [pc, #16]	; (801a8e4 <netif_do_set_ipaddr.isra.0+0x68>)
 801a8d4:	f00a fd6e 	bl	80253b4 <iprintf>
 801a8d8:	e7d6      	b.n	801a888 <netif_do_set_ipaddr.isra.0+0xc>
 801a8da:	bf00      	nop
 801a8dc:	0804387c 	.word	0x0804387c
 801a8e0:	080438d4 	.word	0x080438d4
 801a8e4:	0802a008 	.word	0x0802a008

0801a8e8 <netif_init>:
}
 801a8e8:	4770      	bx	lr
 801a8ea:	bf00      	nop

0801a8ec <netif_set_addr>:
{
 801a8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801a8ee:	2900      	cmp	r1, #0
{
 801a8f0:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 801a8f2:	4b16      	ldr	r3, [pc, #88]	; (801a94c <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 801a8f4:	460c      	mov	r4, r1
{
 801a8f6:	b083      	sub	sp, #12
 801a8f8:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801a8fa:	bf14      	ite	ne
 801a8fc:	460c      	movne	r4, r1
 801a8fe:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 801a900:	b30a      	cbz	r2, 801a946 <netif_set_addr+0x5a>
 801a902:	4616      	mov	r6, r2
  if (gw == NULL) {
 801a904:	b1ef      	cbz	r7, 801a942 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 801a906:	6823      	ldr	r3, [r4, #0]
 801a908:	b993      	cbnz	r3, 801a930 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a90a:	4621      	mov	r1, r4
 801a90c:	aa01      	add	r2, sp, #4
 801a90e:	4628      	mov	r0, r5
 801a910:	f7ff ffb4 	bl	801a87c <netif_do_set_ipaddr.isra.0>
 801a914:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801a916:	6833      	ldr	r3, [r6, #0]
 801a918:	68aa      	ldr	r2, [r5, #8]
 801a91a:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a91c:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801a91e:	bf18      	it	ne
 801a920:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a922:	683b      	ldr	r3, [r7, #0]
 801a924:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801a926:	bf18      	it	ne
 801a928:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801a92a:	b119      	cbz	r1, 801a934 <netif_set_addr+0x48>
}
 801a92c:	b003      	add	sp, #12
 801a92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 801a930:	2100      	movs	r1, #0
 801a932:	e7f0      	b.n	801a916 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a934:	aa01      	add	r2, sp, #4
 801a936:	4621      	mov	r1, r4
 801a938:	4628      	mov	r0, r5
 801a93a:	f7ff ff9f 	bl	801a87c <netif_do_set_ipaddr.isra.0>
}
 801a93e:	b003      	add	sp, #12
 801a940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801a942:	4f02      	ldr	r7, [pc, #8]	; (801a94c <netif_set_addr+0x60>)
 801a944:	e7df      	b.n	801a906 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801a946:	461e      	mov	r6, r3
 801a948:	e7dc      	b.n	801a904 <netif_set_addr+0x18>
 801a94a:	bf00      	nop
 801a94c:	080459a4 	.word	0x080459a4

0801a950 <netif_add>:
{
 801a950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a954:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a956:	4606      	mov	r6, r0
 801a958:	2800      	cmp	r0, #0
 801a95a:	f000 8081 	beq.w	801aa60 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a95e:	2d00      	cmp	r5, #0
 801a960:	f000 8087 	beq.w	801aa72 <netif_add+0x122>
  if (ipaddr == NULL) {
 801a964:	2900      	cmp	r1, #0
 801a966:	d06f      	beq.n	801aa48 <netif_add+0xf8>
  if (netmask == NULL) {
 801a968:	2a00      	cmp	r2, #0
 801a96a:	d068      	beq.n	801aa3e <netif_add+0xee>
  if (gw == NULL) {
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d069      	beq.n	801aa44 <netif_add+0xf4>
  netif->state = state;
 801a970:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801a972:	2400      	movs	r4, #0
  netif->num = netif_num;
 801a974:	f8df a128 	ldr.w	sl, [pc, #296]	; 801aaa0 <netif_add+0x150>
  netif->state = state;
 801a978:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 801a97a:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 801a97c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 801a97e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 801a980:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801a984:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801a986:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 801a98a:	483e      	ldr	r0, [pc, #248]	; (801aa84 <netif_add+0x134>)
  netif->flags = 0;
 801a98c:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 801a990:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a992:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801a994:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801a996:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 801a99a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a99e:	f7ff ffa5 	bl	801a8ec <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801a9a2:	4630      	mov	r0, r6
 801a9a4:	47a8      	blx	r5
 801a9a6:	2800      	cmp	r0, #0
 801a9a8:	d157      	bne.n	801aa5a <netif_add+0x10a>
      if (netif->num == 255) {
 801a9aa:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801a9ae:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801aaa4 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a9b2:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801aa94 <netif_add+0x144>
 801a9b6:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801aaa8 <netif_add+0x158>
 801a9ba:	4f33      	ldr	r7, [pc, #204]	; (801aa88 <netif_add+0x138>)
      if (netif->num == 255) {
 801a9bc:	2aff      	cmp	r2, #255	; 0xff
 801a9be:	d102      	bne.n	801a9c6 <netif_add+0x76>
        netif->num = 0;
 801a9c0:	2300      	movs	r3, #0
 801a9c2:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a9c6:	f8d8 4000 	ldr.w	r4, [r8]
 801a9ca:	2c00      	cmp	r4, #0
 801a9cc:	d042      	beq.n	801aa54 <netif_add+0x104>
      num_netifs = 0;
 801a9ce:	2500      	movs	r5, #0
 801a9d0:	e007      	b.n	801a9e2 <netif_add+0x92>
        if (netif2->num == netif->num) {
 801a9d2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a9d6:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a9da:	429a      	cmp	r2, r3
 801a9dc:	d014      	beq.n	801aa08 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a9de:	6824      	ldr	r4, [r4, #0]
 801a9e0:	b1fc      	cbz	r4, 801aa22 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a9e2:	42a6      	cmp	r6, r4
        num_netifs++;
 801a9e4:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a9e8:	d013      	beq.n	801aa12 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801a9ea:	2dff      	cmp	r5, #255	; 0xff
 801a9ec:	ddf1      	ble.n	801a9d2 <netif_add+0x82>
 801a9ee:	465b      	mov	r3, fp
 801a9f0:	f240 128d 	movw	r2, #397	; 0x18d
 801a9f4:	4925      	ldr	r1, [pc, #148]	; (801aa8c <netif_add+0x13c>)
 801a9f6:	4638      	mov	r0, r7
 801a9f8:	f00a fcdc 	bl	80253b4 <iprintf>
        if (netif2->num == netif->num) {
 801a9fc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801aa00:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801aa04:	429a      	cmp	r2, r3
 801aa06:	d1ea      	bne.n	801a9de <netif_add+0x8e>
          netif->num++;
 801aa08:	3201      	adds	r2, #1
 801aa0a:	b2d2      	uxtb	r2, r2
 801aa0c:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 801aa10:	e7d4      	b.n	801a9bc <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801aa12:	465b      	mov	r3, fp
 801aa14:	f240 128b 	movw	r2, #395	; 0x18b
 801aa18:	4649      	mov	r1, r9
 801aa1a:	4638      	mov	r0, r7
 801aa1c:	f00a fcca 	bl	80253b4 <iprintf>
 801aa20:	e7e3      	b.n	801a9ea <netif_add+0x9a>
  netif->next = netif_list;
 801aa22:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801aa26:	2bfe      	cmp	r3, #254	; 0xfe
 801aa28:	d012      	beq.n	801aa50 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801aa2a:	3301      	adds	r3, #1
 801aa2c:	b2db      	uxtb	r3, r3
  return netif;
 801aa2e:	4630      	mov	r0, r6
  netif->next = netif_list;
 801aa30:	6034      	str	r4, [r6, #0]
 801aa32:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801aa36:	f8c8 6000 	str.w	r6, [r8]
}
 801aa3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801aa3e:	4a14      	ldr	r2, [pc, #80]	; (801aa90 <netif_add+0x140>)
  if (gw == NULL) {
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d195      	bne.n	801a970 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801aa44:	4b12      	ldr	r3, [pc, #72]	; (801aa90 <netif_add+0x140>)
 801aa46:	e793      	b.n	801a970 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801aa48:	4911      	ldr	r1, [pc, #68]	; (801aa90 <netif_add+0x140>)
  if (netmask == NULL) {
 801aa4a:	2a00      	cmp	r2, #0
 801aa4c:	d18e      	bne.n	801a96c <netif_add+0x1c>
 801aa4e:	e7f6      	b.n	801aa3e <netif_add+0xee>
    netif_num = 0;
 801aa50:	2300      	movs	r3, #0
 801aa52:	e7ec      	b.n	801aa2e <netif_add+0xde>
  if (netif->num == 254) {
 801aa54:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801aa58:	e7e5      	b.n	801aa26 <netif_add+0xd6>
    return NULL;
 801aa5a:	4620      	mov	r0, r4
}
 801aa5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801aa60:	4b0c      	ldr	r3, [pc, #48]	; (801aa94 <netif_add+0x144>)
 801aa62:	f240 1227 	movw	r2, #295	; 0x127
 801aa66:	490c      	ldr	r1, [pc, #48]	; (801aa98 <netif_add+0x148>)
 801aa68:	4807      	ldr	r0, [pc, #28]	; (801aa88 <netif_add+0x138>)
 801aa6a:	f00a fca3 	bl	80253b4 <iprintf>
 801aa6e:	4630      	mov	r0, r6
 801aa70:	e7e3      	b.n	801aa3a <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801aa72:	4b08      	ldr	r3, [pc, #32]	; (801aa94 <netif_add+0x144>)
 801aa74:	f44f 7294 	mov.w	r2, #296	; 0x128
 801aa78:	4908      	ldr	r1, [pc, #32]	; (801aa9c <netif_add+0x14c>)
 801aa7a:	4803      	ldr	r0, [pc, #12]	; (801aa88 <netif_add+0x138>)
 801aa7c:	f00a fc9a 	bl	80253b4 <iprintf>
 801aa80:	4628      	mov	r0, r5
 801aa82:	e7da      	b.n	801aa3a <netif_add+0xea>
 801aa84:	0801a831 	.word	0x0801a831
 801aa88:	0802a008 	.word	0x0802a008
 801aa8c:	08043938 	.word	0x08043938
 801aa90:	080459a4 	.word	0x080459a4
 801aa94:	0804387c 	.word	0x0804387c
 801aa98:	080438e4 	.word	0x080438e4
 801aa9c:	08043900 	.word	0x08043900
 801aaa0:	2002e0b4 	.word	0x2002e0b4
 801aaa4:	2002e0b0 	.word	0x2002e0b0
 801aaa8:	08043924 	.word	0x08043924

0801aaac <netif_set_default>:
  netif_default = netif;
 801aaac:	4b01      	ldr	r3, [pc, #4]	; (801aab4 <netif_set_default+0x8>)
 801aaae:	6018      	str	r0, [r3, #0]
}
 801aab0:	4770      	bx	lr
 801aab2:	bf00      	nop
 801aab4:	2002e0ac 	.word	0x2002e0ac

0801aab8 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801aab8:	b198      	cbz	r0, 801aae2 <netif_set_up+0x2a>
{
 801aaba:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801aabc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801aac0:	4604      	mov	r4, r0
 801aac2:	07da      	lsls	r2, r3, #31
 801aac4:	d40c      	bmi.n	801aae0 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801aac6:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 801aaca:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 801aacc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 801aad0:	b102      	cbz	r2, 801aad4 <netif_set_up+0x1c>
 801aad2:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801aad4:	4620      	mov	r0, r4
 801aad6:	2103      	movs	r1, #3
}
 801aad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801aadc:	f7ff beac 	b.w	801a838 <netif_issue_reports>
}
 801aae0:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801aae2:	4b03      	ldr	r3, [pc, #12]	; (801aaf0 <netif_set_up+0x38>)
 801aae4:	f44f 7254 	mov.w	r2, #848	; 0x350
 801aae8:	4902      	ldr	r1, [pc, #8]	; (801aaf4 <netif_set_up+0x3c>)
 801aaea:	4803      	ldr	r0, [pc, #12]	; (801aaf8 <netif_set_up+0x40>)
 801aaec:	f00a bc62 	b.w	80253b4 <iprintf>
 801aaf0:	0804387c 	.word	0x0804387c
 801aaf4:	08043968 	.word	0x08043968
 801aaf8:	0802a008 	.word	0x0802a008

0801aafc <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801aafc:	b1a8      	cbz	r0, 801ab2a <netif_set_down+0x2e>
{
 801aafe:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801ab00:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801ab04:	4604      	mov	r4, r0
 801ab06:	07da      	lsls	r2, r3, #31
 801ab08:	d50b      	bpl.n	801ab22 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801ab0a:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801ab0e:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801ab10:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801ab14:	d406      	bmi.n	801ab24 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801ab16:	69e3      	ldr	r3, [r4, #28]
 801ab18:	b11b      	cbz	r3, 801ab22 <netif_set_down+0x26>
 801ab1a:	4620      	mov	r0, r4
}
 801ab1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801ab20:	4718      	bx	r3
}
 801ab22:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801ab24:	f007 fbc8 	bl	80222b8 <etharp_cleanup_netif>
 801ab28:	e7f5      	b.n	801ab16 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801ab2a:	4b03      	ldr	r3, [pc, #12]	; (801ab38 <netif_set_down+0x3c>)
 801ab2c:	f240 329b 	movw	r2, #923	; 0x39b
 801ab30:	4902      	ldr	r1, [pc, #8]	; (801ab3c <netif_set_down+0x40>)
 801ab32:	4803      	ldr	r0, [pc, #12]	; (801ab40 <netif_set_down+0x44>)
 801ab34:	f00a bc3e 	b.w	80253b4 <iprintf>
 801ab38:	0804387c 	.word	0x0804387c
 801ab3c:	08043984 	.word	0x08043984
 801ab40:	0802a008 	.word	0x0802a008

0801ab44 <netif_set_status_callback>:
  if (netif) {
 801ab44:	b100      	cbz	r0, 801ab48 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801ab46:	61c1      	str	r1, [r0, #28]
}
 801ab48:	4770      	bx	lr
 801ab4a:	bf00      	nop

0801ab4c <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801ab4c:	b1b8      	cbz	r0, 801ab7e <netif_set_link_up+0x32>
{
 801ab4e:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801ab50:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801ab54:	4604      	mov	r4, r0
 801ab56:	075a      	lsls	r2, r3, #29
 801ab58:	d500      	bpl.n	801ab5c <netif_set_link_up+0x10>
}
 801ab5a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801ab5c:	f043 0304 	orr.w	r3, r3, #4
 801ab60:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801ab64:	f006 fd96 	bl	8021694 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801ab68:	2103      	movs	r1, #3
 801ab6a:	4620      	mov	r0, r4
 801ab6c:	f7ff fe64 	bl	801a838 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 801ab70:	6a23      	ldr	r3, [r4, #32]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d0f1      	beq.n	801ab5a <netif_set_link_up+0xe>
 801ab76:	4620      	mov	r0, r4
}
 801ab78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801ab7c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801ab7e:	4b03      	ldr	r3, [pc, #12]	; (801ab8c <netif_set_link_up+0x40>)
 801ab80:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801ab84:	4902      	ldr	r1, [pc, #8]	; (801ab90 <netif_set_link_up+0x44>)
 801ab86:	4803      	ldr	r0, [pc, #12]	; (801ab94 <netif_set_link_up+0x48>)
 801ab88:	f00a bc14 	b.w	80253b4 <iprintf>
 801ab8c:	0804387c 	.word	0x0804387c
 801ab90:	080439a4 	.word	0x080439a4
 801ab94:	0802a008 	.word	0x0802a008

0801ab98 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801ab98:	b158      	cbz	r0, 801abb2 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801ab9a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801ab9e:	0751      	lsls	r1, r2, #29
 801aba0:	d506      	bpl.n	801abb0 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801aba2:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801aba6:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801aba8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801abac:	b101      	cbz	r1, 801abb0 <netif_set_link_down+0x18>
 801abae:	4708      	bx	r1
}
 801abb0:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801abb2:	4b03      	ldr	r3, [pc, #12]	; (801abc0 <netif_set_link_down+0x28>)
 801abb4:	f240 4206 	movw	r2, #1030	; 0x406
 801abb8:	4902      	ldr	r1, [pc, #8]	; (801abc4 <netif_set_link_down+0x2c>)
 801abba:	4803      	ldr	r0, [pc, #12]	; (801abc8 <netif_set_link_down+0x30>)
 801abbc:	f00a bbfa 	b.w	80253b4 <iprintf>
 801abc0:	0804387c 	.word	0x0804387c
 801abc4:	080439c8 	.word	0x080439c8
 801abc8:	0802a008 	.word	0x0802a008

0801abcc <netif_set_link_callback>:
  if (netif) {
 801abcc:	b100      	cbz	r0, 801abd0 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 801abce:	6201      	str	r1, [r0, #32]
}
 801abd0:	4770      	bx	lr
 801abd2:	bf00      	nop

0801abd4 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801abd4:	4602      	mov	r2, r0
 801abd6:	b158      	cbz	r0, 801abf0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801abd8:	4b06      	ldr	r3, [pc, #24]	; (801abf4 <netif_get_by_index+0x20>)
 801abda:	6818      	ldr	r0, [r3, #0]
 801abdc:	b910      	cbnz	r0, 801abe4 <netif_get_by_index+0x10>
 801abde:	e007      	b.n	801abf0 <netif_get_by_index+0x1c>
 801abe0:	6800      	ldr	r0, [r0, #0]
 801abe2:	b130      	cbz	r0, 801abf2 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 801abe4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801abe8:	3301      	adds	r3, #1
 801abea:	b2db      	uxtb	r3, r3
 801abec:	4293      	cmp	r3, r2
 801abee:	d1f7      	bne.n	801abe0 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 801abf0:	4770      	bx	lr
 801abf2:	4770      	bx	lr
 801abf4:	2002e0b0 	.word	0x2002e0b0

0801abf8 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801abf8:	4907      	ldr	r1, [pc, #28]	; (801ac18 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801abfa:	2200      	movs	r2, #0
 801abfc:	4b07      	ldr	r3, [pc, #28]	; (801ac1c <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801abfe:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801ac00:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801ac02:	b910      	cbnz	r0, 801ac0a <pbuf_free_ooseq_callback+0x12>
 801ac04:	e006      	b.n	801ac14 <pbuf_free_ooseq_callback+0x1c>
 801ac06:	68c0      	ldr	r0, [r0, #12]
 801ac08:	b120      	cbz	r0, 801ac14 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801ac0a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d0fa      	beq.n	801ac06 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801ac10:	f002 b8ca 	b.w	801cda8 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801ac14:	4770      	bx	lr
 801ac16:	bf00      	nop
 801ac18:	2002e0bc 	.word	0x2002e0bc
 801ac1c:	2002e0b5 	.word	0x2002e0b5

0801ac20 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 801ac20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801ac24:	4604      	mov	r4, r0
 801ac26:	2800      	cmp	r0, #0
 801ac28:	d052      	beq.n	801acd0 <pbuf_free.part.0+0xb0>
  count = 0;
 801ac2a:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ac2c:	4f29      	ldr	r7, [pc, #164]	; (801acd4 <pbuf_free.part.0+0xb4>)
 801ac2e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801ace4 <pbuf_free.part.0+0xc4>
 801ac32:	4e29      	ldr	r6, [pc, #164]	; (801acd8 <pbuf_free.part.0+0xb8>)
 801ac34:	e00a      	b.n	801ac4c <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801ac36:	6923      	ldr	r3, [r4, #16]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d03b      	beq.n	801acb4 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 801ac3c:	4620      	mov	r0, r4
 801ac3e:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801ac40:	3501      	adds	r5, #1
 801ac42:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801ac44:	f1b9 0f00 	cmp.w	r9, #0
 801ac48:	d01b      	beq.n	801ac82 <pbuf_free.part.0+0x62>
 801ac4a:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ac4c:	7ba3      	ldrb	r3, [r4, #14]
 801ac4e:	b1db      	cbz	r3, 801ac88 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 801ac50:	3b01      	subs	r3, #1
 801ac52:	b2db      	uxtb	r3, r3
 801ac54:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801ac56:	b9a3      	cbnz	r3, 801ac82 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801ac58:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801ac5a:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801ac5e:	079b      	lsls	r3, r3, #30
 801ac60:	d4e9      	bmi.n	801ac36 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801ac62:	7b23      	ldrb	r3, [r4, #12]
 801ac64:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801ac68:	2b02      	cmp	r3, #2
 801ac6a:	d01e      	beq.n	801acaa <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801ac6c:	2b01      	cmp	r3, #1
 801ac6e:	d02a      	beq.n	801acc6 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801ac70:	b99b      	cbnz	r3, 801ac9a <pbuf_free.part.0+0x7a>
      count++;
 801ac72:	3501      	adds	r5, #1
          mem_free(p);
 801ac74:	4620      	mov	r0, r4
 801ac76:	f7ff fa27 	bl	801a0c8 <mem_free>
      count++;
 801ac7a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801ac7c:	f1b9 0f00 	cmp.w	r9, #0
 801ac80:	d1e3      	bne.n	801ac4a <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801ac82:	4628      	mov	r0, r5
 801ac84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ac88:	463b      	mov	r3, r7
 801ac8a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801ac8e:	4641      	mov	r1, r8
 801ac90:	4630      	mov	r0, r6
 801ac92:	f00a fb8f 	bl	80253b4 <iprintf>
    ref = --(p->ref);
 801ac96:	7ba3      	ldrb	r3, [r4, #14]
 801ac98:	e7da      	b.n	801ac50 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801ac9a:	463b      	mov	r3, r7
 801ac9c:	f240 320f 	movw	r2, #783	; 0x30f
 801aca0:	490e      	ldr	r1, [pc, #56]	; (801acdc <pbuf_free.part.0+0xbc>)
 801aca2:	4630      	mov	r0, r6
 801aca4:	f00a fb86 	bl	80253b4 <iprintf>
 801aca8:	e7ca      	b.n	801ac40 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801acaa:	4621      	mov	r1, r4
 801acac:	200f      	movs	r0, #15
 801acae:	f7ff fd9f 	bl	801a7f0 <memp_free>
 801acb2:	e7c5      	b.n	801ac40 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801acb4:	463b      	mov	r3, r7
 801acb6:	f240 22ff 	movw	r2, #767	; 0x2ff
 801acba:	4909      	ldr	r1, [pc, #36]	; (801ace0 <pbuf_free.part.0+0xc0>)
 801acbc:	4630      	mov	r0, r6
 801acbe:	f00a fb79 	bl	80253b4 <iprintf>
        pc->custom_free_function(p);
 801acc2:	6923      	ldr	r3, [r4, #16]
 801acc4:	e7ba      	b.n	801ac3c <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 801acc6:	4621      	mov	r1, r4
 801acc8:	200e      	movs	r0, #14
 801acca:	f7ff fd91 	bl	801a7f0 <memp_free>
 801acce:	e7b7      	b.n	801ac40 <pbuf_free.part.0+0x20>
  count = 0;
 801acd0:	4605      	mov	r5, r0
 801acd2:	e7d6      	b.n	801ac82 <pbuf_free.part.0+0x62>
 801acd4:	080439ec 	.word	0x080439ec
 801acd8:	0802a008 	.word	0x0802a008
 801acdc:	08043a58 	.word	0x08043a58
 801ace0:	08043a34 	.word	0x08043a34
 801ace4:	08043a1c 	.word	0x08043a1c

0801ace8 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801ace8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 801acec:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801acee:	f8df a124 	ldr.w	sl, [pc, #292]	; 801ae14 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801acf2:	4605      	mov	r5, r0
 801acf4:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 801acf6:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801acf8:	8944      	ldrh	r4, [r0, #10]
 801acfa:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801acfc:	f8df b128 	ldr.w	fp, [pc, #296]	; 801ae28 <pbuf_copy.part.0+0x140>
 801ad00:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801ae1c <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801ad04:	1be4      	subs	r4, r4, r7
 801ad06:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801ad08:	6868      	ldr	r0, [r5, #4]
 801ad0a:	4294      	cmp	r4, r2
 801ad0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ad10:	4438      	add	r0, r7
 801ad12:	bf28      	it	cs
 801ad14:	4614      	movcs	r4, r2
 801ad16:	4431      	add	r1, r6
 801ad18:	4622      	mov	r2, r4
    offset_to += len;
 801ad1a:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801ad1c:	f009 fb84 	bl	8024428 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ad20:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801ad22:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ad24:	429f      	cmp	r7, r3
 801ad26:	d837      	bhi.n	801ad98 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801ad28:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801ad2c:	4296      	cmp	r6, r2
 801ad2e:	d829      	bhi.n	801ad84 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 801ad30:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 801ad32:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 801ad34:	d317      	bcc.n	801ad66 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 801ad36:	429f      	cmp	r7, r3
      p_from = p_from->next;
 801ad38:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 801ad3c:	d04b      	beq.n	801add6 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801ad3e:	f1b8 0f00 	cmp.w	r8, #0
 801ad42:	d144      	bne.n	801adce <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801ad44:	892a      	ldrh	r2, [r5, #8]
 801ad46:	896b      	ldrh	r3, [r5, #10]
 801ad48:	429a      	cmp	r2, r3
 801ad4a:	d14c      	bne.n	801ade6 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ad4c:	6828      	ldr	r0, [r5, #0]
 801ad4e:	b140      	cbz	r0, 801ad62 <pbuf_copy.part.0+0x7a>
 801ad50:	4b30      	ldr	r3, [pc, #192]	; (801ae14 <pbuf_copy.part.0+0x12c>)
 801ad52:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801ad56:	4930      	ldr	r1, [pc, #192]	; (801ae18 <pbuf_copy.part.0+0x130>)
 801ad58:	4830      	ldr	r0, [pc, #192]	; (801ae1c <pbuf_copy.part.0+0x134>)
 801ad5a:	f00a fb2b 	bl	80253b4 <iprintf>
 801ad5e:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 801ad62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 801ad66:	429f      	cmp	r7, r3
 801ad68:	d040      	beq.n	801adec <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801ad6a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801ad6e:	4293      	cmp	r3, r2
 801ad70:	d01a      	beq.n	801ada8 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801ad72:	896c      	ldrh	r4, [r5, #10]
 801ad74:	2d00      	cmp	r5, #0
 801ad76:	d0c5      	beq.n	801ad04 <pbuf_copy.part.0+0x1c>
 801ad78:	892b      	ldrh	r3, [r5, #8]
 801ad7a:	42a3      	cmp	r3, r4
 801ad7c:	d045      	beq.n	801ae0a <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801ad7e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801ad82:	e7bf      	b.n	801ad04 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801ad84:	f240 32da 	movw	r2, #986	; 0x3da
 801ad88:	4653      	mov	r3, sl
 801ad8a:	4925      	ldr	r1, [pc, #148]	; (801ae20 <pbuf_copy.part.0+0x138>)
 801ad8c:	4648      	mov	r0, r9
 801ad8e:	f00a fb11 	bl	80253b4 <iprintf>
    if (offset_from >= p_from->len) {
 801ad92:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801ad96:	e7cb      	b.n	801ad30 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ad98:	4653      	mov	r3, sl
 801ad9a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801ad9e:	4659      	mov	r1, fp
 801ada0:	4648      	mov	r0, r9
 801ada2:	f00a fb07 	bl	80253b4 <iprintf>
 801ada6:	e7bf      	b.n	801ad28 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ada8:	f8d8 3000 	ldr.w	r3, [r8]
 801adac:	2b00      	cmp	r3, #0
 801adae:	d0e0      	beq.n	801ad72 <pbuf_copy.part.0+0x8a>
 801adb0:	4b18      	ldr	r3, [pc, #96]	; (801ae14 <pbuf_copy.part.0+0x12c>)
 801adb2:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801adb6:	4918      	ldr	r1, [pc, #96]	; (801ae18 <pbuf_copy.part.0+0x130>)
 801adb8:	4818      	ldr	r0, [pc, #96]	; (801ae1c <pbuf_copy.part.0+0x134>)
 801adba:	f00a fafb 	bl	80253b4 <iprintf>
 801adbe:	f06f 0005 	mvn.w	r0, #5
}
 801adc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801adc6:	f1b8 0f00 	cmp.w	r8, #0
 801adca:	d00a      	beq.n	801ade2 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 801adcc:	2700      	movs	r7, #0
 801adce:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801add0:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801add4:	e7c9      	b.n	801ad6a <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 801add6:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801add8:	2d00      	cmp	r5, #0
 801adda:	d1f4      	bne.n	801adc6 <pbuf_copy.part.0+0xde>
 801addc:	f1b8 0f00 	cmp.w	r8, #0
 801ade0:	d108      	bne.n	801adf4 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801ade2:	2d00      	cmp	r5, #0
 801ade4:	d1ae      	bne.n	801ad44 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 801ade6:	2000      	movs	r0, #0
}
 801ade8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801adec:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801adee:	b10d      	cbz	r5, 801adf4 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 801adf0:	2700      	movs	r7, #0
 801adf2:	e7ed      	b.n	801add0 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801adf4:	4b07      	ldr	r3, [pc, #28]	; (801ae14 <pbuf_copy.part.0+0x12c>)
 801adf6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801adfa:	490a      	ldr	r1, [pc, #40]	; (801ae24 <pbuf_copy.part.0+0x13c>)
 801adfc:	4807      	ldr	r0, [pc, #28]	; (801ae1c <pbuf_copy.part.0+0x134>)
 801adfe:	f00a fad9 	bl	80253b4 <iprintf>
 801ae02:	f06f 000f 	mvn.w	r0, #15
}
 801ae06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ae0a:	682b      	ldr	r3, [r5, #0]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d0b6      	beq.n	801ad7e <pbuf_copy.part.0+0x96>
 801ae10:	e79e      	b.n	801ad50 <pbuf_copy.part.0+0x68>
 801ae12:	bf00      	nop
 801ae14:	080439ec 	.word	0x080439ec
 801ae18:	08043ab0 	.word	0x08043ab0
 801ae1c:	0802a008 	.word	0x0802a008
 801ae20:	08043a84 	.word	0x08043a84
 801ae24:	08043aa0 	.word	0x08043aa0
 801ae28:	08043a6c 	.word	0x08043a6c

0801ae2c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801ae2c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801ae30:	2b01      	cmp	r3, #1
{
 801ae32:	b570      	push	{r4, r5, r6, lr}
 801ae34:	4614      	mov	r4, r2
 801ae36:	4606      	mov	r6, r0
 801ae38:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801ae3a:	d110      	bne.n	801ae5e <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801ae3c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801ae40:	490b      	ldr	r1, [pc, #44]	; (801ae70 <pbuf_alloc_reference+0x44>)
 801ae42:	200e      	movs	r0, #14
 801ae44:	f7ff fc9e 	bl	801a784 <memp_malloc_fn>
  if (p == NULL) {
 801ae48:	b140      	cbz	r0, 801ae5c <pbuf_alloc_reference+0x30>
  p->next = NULL;
 801ae4a:	2300      	movs	r3, #0
  p->ref = 1;
 801ae4c:	2201      	movs	r2, #1
  p->payload = payload;
 801ae4e:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 801ae50:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 801ae52:	6003      	str	r3, [r0, #0]
  p->len = len;
 801ae54:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 801ae56:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 801ae58:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 801ae5a:	81c2      	strh	r2, [r0, #14]
}
 801ae5c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801ae5e:	4b04      	ldr	r3, [pc, #16]	; (801ae70 <pbuf_alloc_reference+0x44>)
 801ae60:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801ae64:	4903      	ldr	r1, [pc, #12]	; (801ae74 <pbuf_alloc_reference+0x48>)
 801ae66:	4804      	ldr	r0, [pc, #16]	; (801ae78 <pbuf_alloc_reference+0x4c>)
 801ae68:	f00a faa4 	bl	80253b4 <iprintf>
 801ae6c:	e7e6      	b.n	801ae3c <pbuf_alloc_reference+0x10>
 801ae6e:	bf00      	nop
 801ae70:	080439ec 	.word	0x080439ec
 801ae74:	08043adc 	.word	0x08043adc
 801ae78:	0802a008 	.word	0x0802a008

0801ae7c <pbuf_alloc>:
  switch (type) {
 801ae7c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 801ae80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae84:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801ae86:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801ae8a:	d03d      	beq.n	801af08 <pbuf_alloc+0x8c>
 801ae8c:	d80e      	bhi.n	801aeac <pbuf_alloc+0x30>
 801ae8e:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 801ae92:	2c01      	cmp	r4, #1
 801ae94:	d033      	beq.n	801aefe <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801ae96:	4b41      	ldr	r3, [pc, #260]	; (801af9c <pbuf_alloc+0x120>)
 801ae98:	f240 1227 	movw	r2, #295	; 0x127
 801ae9c:	4940      	ldr	r1, [pc, #256]	; (801afa0 <pbuf_alloc+0x124>)
      return NULL;
 801ae9e:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801aea0:	4840      	ldr	r0, [pc, #256]	; (801afa4 <pbuf_alloc+0x128>)
 801aea2:	f00a fa87 	bl	80253b4 <iprintf>
}
 801aea6:	4628      	mov	r0, r5
 801aea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 801aeac:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801aeb0:	d1f1      	bne.n	801ae96 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801aeb2:	f10a 0303 	add.w	r3, sl, #3
 801aeb6:	1cca      	adds	r2, r1, #3
 801aeb8:	4606      	mov	r6, r0
 801aeba:	f022 0203 	bic.w	r2, r2, #3
 801aebe:	f023 0303 	bic.w	r3, r3, #3
 801aec2:	4413      	add	r3, r2
 801aec4:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801aec6:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801aeca:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801aecc:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801aece:	d34d      	bcc.n	801af6c <pbuf_alloc+0xf0>
 801aed0:	4282      	cmp	r2, r0
 801aed2:	d84b      	bhi.n	801af6c <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801aed4:	f7ff fab4 	bl	801a440 <mem_malloc>
      if (p == NULL) {
 801aed8:	4605      	mov	r5, r0
 801aeda:	2800      	cmp	r0, #0
 801aedc:	d0e3      	beq.n	801aea6 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801aede:	1983      	adds	r3, r0, r6
  p->next = NULL;
 801aee0:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 801aee2:	4a31      	ldr	r2, [pc, #196]	; (801afa8 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801aee4:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 801aee6:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 801aeea:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801aeec:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 801aef0:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 801aef4:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801aef6:	6043      	str	r3, [r0, #4]
}
 801aef8:	4628      	mov	r0, r5
 801aefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 801aefe:	2000      	movs	r0, #0
}
 801af00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 801af04:	f7ff bf92 	b.w	801ae2c <pbuf_alloc_reference>
  switch (type) {
 801af08:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801af0a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801af9c <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 801af0e:	4f27      	ldr	r7, [pc, #156]	; (801afac <pbuf_alloc+0x130>)
  switch (type) {
 801af10:	4625      	mov	r5, r4
 801af12:	e009      	b.n	801af28 <pbuf_alloc+0xac>
          last->next = q;
 801af14:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801af16:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801af1a:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 801af1e:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 801af22:	f1b9 0f00 	cmp.w	r9, #0
 801af26:	d0be      	beq.n	801aea6 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801af28:	22f3      	movs	r2, #243	; 0xf3
 801af2a:	4641      	mov	r1, r8
 801af2c:	200f      	movs	r0, #15
 801af2e:	4626      	mov	r6, r4
 801af30:	f7ff fc28 	bl	801a784 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af34:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801af38:	2100      	movs	r1, #0
        if (q == NULL) {
 801af3a:	4604      	mov	r4, r0
 801af3c:	b1d0      	cbz	r0, 801af74 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af3e:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801af42:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 801af46:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af4a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801af4e:	3213      	adds	r2, #19
  p->next = NULL;
 801af50:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af52:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801af54:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801af58:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af5a:	454b      	cmp	r3, r9
  p->payload = payload;
 801af5c:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af5e:	bf28      	it	cs
 801af60:	464b      	movcs	r3, r9
  p->len = len;
 801af62:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801af64:	2d00      	cmp	r5, #0
 801af66:	d1d5      	bne.n	801af14 <pbuf_alloc+0x98>
 801af68:	4605      	mov	r5, r0
 801af6a:	e7d4      	b.n	801af16 <pbuf_alloc+0x9a>
          return NULL;
 801af6c:	2500      	movs	r5, #0
}
 801af6e:	4628      	mov	r0, r5
 801af70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 801af74:	4e0e      	ldr	r6, [pc, #56]	; (801afb0 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801af76:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801af78:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801af7a:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 801af7c:	b133      	cbz	r3, 801af8c <pbuf_alloc+0x110>
          if (p) {
 801af7e:	2d00      	cmp	r5, #0
 801af80:	d0f4      	beq.n	801af6c <pbuf_alloc+0xf0>
  if (p == NULL) {
 801af82:	4628      	mov	r0, r5
          return NULL;
 801af84:	2500      	movs	r5, #0
 801af86:	f7ff fe4b 	bl	801ac20 <pbuf_free.part.0>
 801af8a:	e78c      	b.n	801aea6 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801af8c:	4601      	mov	r1, r0
 801af8e:	4809      	ldr	r0, [pc, #36]	; (801afb4 <pbuf_alloc+0x138>)
 801af90:	f7fc fefc 	bl	8017d8c <tcpip_try_callback>
 801af94:	2800      	cmp	r0, #0
 801af96:	d0f2      	beq.n	801af7e <pbuf_alloc+0x102>
 801af98:	7034      	strb	r4, [r6, #0]
 801af9a:	e7f0      	b.n	801af7e <pbuf_alloc+0x102>
 801af9c:	080439ec 	.word	0x080439ec
 801afa0:	08043af0 	.word	0x08043af0
 801afa4:	0802a008 	.word	0x0802a008
 801afa8:	00010080 	.word	0x00010080
 801afac:	00010082 	.word	0x00010082
 801afb0:	2002e0b5 	.word	0x2002e0b5
 801afb4:	0801abf9 	.word	0x0801abf9

0801afb8 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801afb8:	3003      	adds	r0, #3
 801afba:	f020 0003 	bic.w	r0, r0, #3
{
 801afbe:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801afc0:	eb01 0e00 	add.w	lr, r1, r0
{
 801afc4:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801afc8:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801afca:	45e6      	cmp	lr, ip
 801afcc:	d80d      	bhi.n	801afea <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 801afce:	b104      	cbz	r4, 801afd2 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801afd0:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801afd2:	4618      	mov	r0, r3
  p->next = NULL;
 801afd4:	2300      	movs	r3, #0
  p->payload = payload;
 801afd6:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 801afd8:	2402      	movs	r4, #2
  p->next = NULL;
 801afda:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801afdc:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 801afde:	8101      	strh	r1, [r0, #8]
  p->len = len;
 801afe0:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 801afe2:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 801afe4:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 801afe6:	81c3      	strh	r3, [r0, #14]
}
 801afe8:	bd10      	pop	{r4, pc}
    return NULL;
 801afea:	2000      	movs	r0, #0
}
 801afec:	bd10      	pop	{r4, pc}
 801afee:	bf00      	nop

0801aff0 <pbuf_realloc>:
{
 801aff0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801aff2:	4604      	mov	r4, r0
{
 801aff4:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801aff6:	2800      	cmp	r0, #0
 801aff8:	d037      	beq.n	801b06a <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 801affa:	8922      	ldrh	r2, [r4, #8]
 801affc:	42aa      	cmp	r2, r5
 801affe:	d91b      	bls.n	801b038 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 801b000:	8963      	ldrh	r3, [r4, #10]
 801b002:	429d      	cmp	r5, r3
 801b004:	d90d      	bls.n	801b022 <pbuf_realloc+0x32>
 801b006:	1aa9      	subs	r1, r5, r2
 801b008:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801b00a:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 801b00c:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801b00e:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801b010:	b29d      	uxth	r5, r3
    q = q->next;
 801b012:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801b014:	2c00      	cmp	r4, #0
 801b016:	d030      	beq.n	801b07a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 801b018:	8963      	ldrh	r3, [r4, #10]
 801b01a:	42ab      	cmp	r3, r5
 801b01c:	d201      	bcs.n	801b022 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801b01e:	8922      	ldrh	r2, [r4, #8]
 801b020:	e7f3      	b.n	801b00a <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801b022:	7b22      	ldrb	r2, [r4, #12]
 801b024:	0712      	lsls	r2, r2, #28
 801b026:	d008      	beq.n	801b03a <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 801b028:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 801b02a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 801b02c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801b02e:	b108      	cbz	r0, 801b034 <pbuf_realloc+0x44>
  if (p == NULL) {
 801b030:	f7ff fdf6 	bl	801ac20 <pbuf_free.part.0>
  q->next = NULL;
 801b034:	2300      	movs	r3, #0
 801b036:	6023      	str	r3, [r4, #0]
}
 801b038:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801b03a:	429d      	cmp	r5, r3
 801b03c:	d0f4      	beq.n	801b028 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801b03e:	7b63      	ldrb	r3, [r4, #13]
 801b040:	079b      	lsls	r3, r3, #30
 801b042:	d4f1      	bmi.n	801b028 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801b044:	6863      	ldr	r3, [r4, #4]
 801b046:	4620      	mov	r0, r4
 801b048:	1b1b      	subs	r3, r3, r4
 801b04a:	18e9      	adds	r1, r5, r3
 801b04c:	b289      	uxth	r1, r1
 801b04e:	f7ff f91d 	bl	801a28c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801b052:	4604      	mov	r4, r0
 801b054:	2800      	cmp	r0, #0
 801b056:	d1e7      	bne.n	801b028 <pbuf_realloc+0x38>
 801b058:	4b0c      	ldr	r3, [pc, #48]	; (801b08c <pbuf_realloc+0x9c>)
 801b05a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801b05e:	490c      	ldr	r1, [pc, #48]	; (801b090 <pbuf_realloc+0xa0>)
 801b060:	480c      	ldr	r0, [pc, #48]	; (801b094 <pbuf_realloc+0xa4>)
 801b062:	f00a f9a7 	bl	80253b4 <iprintf>
  q->len = rem_len;
 801b066:	8164      	strh	r4, [r4, #10]
 801b068:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801b06a:	4b08      	ldr	r3, [pc, #32]	; (801b08c <pbuf_realloc+0x9c>)
 801b06c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801b070:	4909      	ldr	r1, [pc, #36]	; (801b098 <pbuf_realloc+0xa8>)
 801b072:	4808      	ldr	r0, [pc, #32]	; (801b094 <pbuf_realloc+0xa4>)
 801b074:	f00a f99e 	bl	80253b4 <iprintf>
 801b078:	e7bf      	b.n	801affa <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801b07a:	4b04      	ldr	r3, [pc, #16]	; (801b08c <pbuf_realloc+0x9c>)
 801b07c:	f240 12af 	movw	r2, #431	; 0x1af
 801b080:	4906      	ldr	r1, [pc, #24]	; (801b09c <pbuf_realloc+0xac>)
 801b082:	4804      	ldr	r0, [pc, #16]	; (801b094 <pbuf_realloc+0xa4>)
 801b084:	f00a f996 	bl	80253b4 <iprintf>
  while (rem_len > q->len) {
 801b088:	8963      	ldrh	r3, [r4, #10]
 801b08a:	deff      	udf	#255	; 0xff
 801b08c:	080439ec 	.word	0x080439ec
 801b090:	08043b3c 	.word	0x08043b3c
 801b094:	0802a008 	.word	0x0802a008
 801b098:	08043b0c 	.word	0x08043b0c
 801b09c:	08043b24 	.word	0x08043b24

0801b0a0 <pbuf_add_header>:
{
 801b0a0:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b0a2:	b310      	cbz	r0, 801b0ea <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801b0a4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801b0a8:	d20c      	bcs.n	801b0c4 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 801b0aa:	b169      	cbz	r1, 801b0c8 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 801b0ac:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801b0b0:	8902      	ldrh	r2, [r0, #8]
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	4462      	add	r2, ip
 801b0b6:	b292      	uxth	r2, r2
 801b0b8:	4594      	cmp	ip, r2
 801b0ba:	d803      	bhi.n	801b0c4 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801b0bc:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801b0c0:	2800      	cmp	r0, #0
 801b0c2:	db03      	blt.n	801b0cc <pbuf_add_header+0x2c>
    return 1;
 801b0c4:	2001      	movs	r0, #1
}
 801b0c6:	bd08      	pop	{r3, pc}
    return 0;
 801b0c8:	4608      	mov	r0, r1
}
 801b0ca:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801b0cc:	6858      	ldr	r0, [r3, #4]
 801b0ce:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801b0d0:	f103 0010 	add.w	r0, r3, #16
 801b0d4:	4281      	cmp	r1, r0
 801b0d6:	d3f5      	bcc.n	801b0c4 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801b0d8:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801b0dc:	2000      	movs	r0, #0
  p->payload = payload;
 801b0de:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b0e0:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801b0e2:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b0e4:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801b0e8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b0ea:	4b04      	ldr	r3, [pc, #16]	; (801b0fc <pbuf_add_header+0x5c>)
 801b0ec:	f240 12df 	movw	r2, #479	; 0x1df
 801b0f0:	4903      	ldr	r1, [pc, #12]	; (801b100 <pbuf_add_header+0x60>)
 801b0f2:	4804      	ldr	r0, [pc, #16]	; (801b104 <pbuf_add_header+0x64>)
 801b0f4:	f00a f95e 	bl	80253b4 <iprintf>
    return 1;
 801b0f8:	2001      	movs	r0, #1
}
 801b0fa:	bd08      	pop	{r3, pc}
 801b0fc:	080439ec 	.word	0x080439ec
 801b100:	08045418 	.word	0x08045418
 801b104:	0802a008 	.word	0x0802a008

0801b108 <pbuf_remove_header>:
{
 801b108:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b10a:	b1c8      	cbz	r0, 801b140 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801b10c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801b110:	d21f      	bcs.n	801b152 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801b112:	b199      	cbz	r1, 801b13c <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801b114:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801b118:	8942      	ldrh	r2, [r0, #10]
 801b11a:	4603      	mov	r3, r0
 801b11c:	4594      	cmp	ip, r2
 801b11e:	d81a      	bhi.n	801b156 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801b120:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801b122:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801b126:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801b12a:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801b12c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801b12e:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801b132:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801b134:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801b136:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801b13a:	bd08      	pop	{r3, pc}
    return 0;
 801b13c:	4608      	mov	r0, r1
}
 801b13e:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b140:	4b09      	ldr	r3, [pc, #36]	; (801b168 <pbuf_remove_header+0x60>)
 801b142:	f240 224b 	movw	r2, #587	; 0x24b
 801b146:	4909      	ldr	r1, [pc, #36]	; (801b16c <pbuf_remove_header+0x64>)
 801b148:	4809      	ldr	r0, [pc, #36]	; (801b170 <pbuf_remove_header+0x68>)
 801b14a:	f00a f933 	bl	80253b4 <iprintf>
    return 1;
 801b14e:	2001      	movs	r0, #1
}
 801b150:	bd08      	pop	{r3, pc}
    return 1;
 801b152:	2001      	movs	r0, #1
}
 801b154:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801b156:	4b04      	ldr	r3, [pc, #16]	; (801b168 <pbuf_remove_header+0x60>)
 801b158:	f240 2255 	movw	r2, #597	; 0x255
 801b15c:	4905      	ldr	r1, [pc, #20]	; (801b174 <pbuf_remove_header+0x6c>)
 801b15e:	4804      	ldr	r0, [pc, #16]	; (801b170 <pbuf_remove_header+0x68>)
 801b160:	f00a f928 	bl	80253b4 <iprintf>
 801b164:	2001      	movs	r0, #1
}
 801b166:	bd08      	pop	{r3, pc}
 801b168:	080439ec 	.word	0x080439ec
 801b16c:	08045418 	.word	0x08045418
 801b170:	0802a008 	.word	0x0802a008
 801b174:	08043b58 	.word	0x08043b58

0801b178 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801b178:	2900      	cmp	r1, #0
 801b17a:	db1a      	blt.n	801b1b2 <pbuf_header_force+0x3a>
{
 801b17c:	b508      	push	{r3, lr}
 801b17e:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801b180:	b1d0      	cbz	r0, 801b1b8 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801b182:	b341      	cbz	r1, 801b1d6 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801b184:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801b188:	891a      	ldrh	r2, [r3, #8]
 801b18a:	4462      	add	r2, ip
 801b18c:	b292      	uxth	r2, r2
 801b18e:	4594      	cmp	ip, r2
 801b190:	d81f      	bhi.n	801b1d2 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801b192:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801b196:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801b198:	6858      	ldr	r0, [r3, #4]
 801b19a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801b19e:	db14      	blt.n	801b1ca <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801b1a0:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801b1a4:	2000      	movs	r0, #0
  p->payload = payload;
 801b1a6:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b1a8:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801b1aa:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b1ac:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801b1b0:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801b1b2:	4249      	negs	r1, r1
 801b1b4:	f7ff bfa8 	b.w	801b108 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801b1b8:	4b08      	ldr	r3, [pc, #32]	; (801b1dc <pbuf_header_force+0x64>)
 801b1ba:	f240 12df 	movw	r2, #479	; 0x1df
 801b1be:	4908      	ldr	r1, [pc, #32]	; (801b1e0 <pbuf_header_force+0x68>)
 801b1c0:	4808      	ldr	r0, [pc, #32]	; (801b1e4 <pbuf_header_force+0x6c>)
 801b1c2:	f00a f8f7 	bl	80253b4 <iprintf>
    return 1;
 801b1c6:	2001      	movs	r0, #1
}
 801b1c8:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801b1ca:	f103 0010 	add.w	r0, r3, #16
 801b1ce:	4281      	cmp	r1, r0
 801b1d0:	d2e6      	bcs.n	801b1a0 <pbuf_header_force+0x28>
    return 1;
 801b1d2:	2001      	movs	r0, #1
}
 801b1d4:	bd08      	pop	{r3, pc}
    return 0;
 801b1d6:	4608      	mov	r0, r1
}
 801b1d8:	bd08      	pop	{r3, pc}
 801b1da:	bf00      	nop
 801b1dc:	080439ec 	.word	0x080439ec
 801b1e0:	08045418 	.word	0x08045418
 801b1e4:	0802a008 	.word	0x0802a008

0801b1e8 <pbuf_free_header>:
{
 801b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (free_left && p) {
 801b1ea:	4604      	mov	r4, r0
 801b1ec:	b158      	cbz	r0, 801b206 <pbuf_free_header+0x1e>
 801b1ee:	460d      	mov	r5, r1
 801b1f0:	b149      	cbz	r1, 801b206 <pbuf_free_header+0x1e>
      f->next = 0;
 801b1f2:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 801b1f4:	8963      	ldrh	r3, [r4, #10]
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 801b1fa:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 801b1fe:	d904      	bls.n	801b20a <pbuf_free_header+0x22>
      pbuf_remove_header(p, free_left);
 801b200:	4629      	mov	r1, r5
 801b202:	f7ff ff81 	bl	801b108 <pbuf_remove_header>
}
 801b206:	4620      	mov	r0, r4
 801b208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 801b20a:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 801b20c:	b295      	uxth	r5, r2
      f->next = 0;
 801b20e:	6027      	str	r7, [r4, #0]
  if (p == NULL) {
 801b210:	4634      	mov	r4, r6
 801b212:	f7ff fd05 	bl	801ac20 <pbuf_free.part.0>
  while (free_left && p) {
 801b216:	b10d      	cbz	r5, 801b21c <pbuf_free_header+0x34>
 801b218:	2e00      	cmp	r6, #0
 801b21a:	d1eb      	bne.n	801b1f4 <pbuf_free_header+0xc>
      p = p->next;
 801b21c:	4634      	mov	r4, r6
 801b21e:	e7f2      	b.n	801b206 <pbuf_free_header+0x1e>

0801b220 <pbuf_free>:
  if (p == NULL) {
 801b220:	b108      	cbz	r0, 801b226 <pbuf_free+0x6>
 801b222:	f7ff bcfd 	b.w	801ac20 <pbuf_free.part.0>
{
 801b226:	b510      	push	{r4, lr}
 801b228:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801b22a:	4b04      	ldr	r3, [pc, #16]	; (801b23c <pbuf_free+0x1c>)
 801b22c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801b230:	4903      	ldr	r1, [pc, #12]	; (801b240 <pbuf_free+0x20>)
 801b232:	4804      	ldr	r0, [pc, #16]	; (801b244 <pbuf_free+0x24>)
 801b234:	f00a f8be 	bl	80253b4 <iprintf>
}
 801b238:	4620      	mov	r0, r4
 801b23a:	bd10      	pop	{r4, pc}
 801b23c:	080439ec 	.word	0x080439ec
 801b240:	08045418 	.word	0x08045418
 801b244:	0802a008 	.word	0x0802a008

0801b248 <pbuf_clen>:
  while (p != NULL) {
 801b248:	4603      	mov	r3, r0
 801b24a:	b130      	cbz	r0, 801b25a <pbuf_clen+0x12>
  len = 0;
 801b24c:	2000      	movs	r0, #0
    ++len;
 801b24e:	3001      	adds	r0, #1
    p = p->next;
 801b250:	681b      	ldr	r3, [r3, #0]
    ++len;
 801b252:	b280      	uxth	r0, r0
  while (p != NULL) {
 801b254:	2b00      	cmp	r3, #0
 801b256:	d1fa      	bne.n	801b24e <pbuf_clen+0x6>
 801b258:	4770      	bx	lr
}
 801b25a:	4770      	bx	lr

0801b25c <pbuf_ref>:
  if (p != NULL) {
 801b25c:	b120      	cbz	r0, 801b268 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801b25e:	7b83      	ldrb	r3, [r0, #14]
 801b260:	3301      	adds	r3, #1
 801b262:	b2db      	uxtb	r3, r3
 801b264:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b266:	b103      	cbz	r3, 801b26a <pbuf_ref+0xe>
}
 801b268:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b26a:	4b03      	ldr	r3, [pc, #12]	; (801b278 <pbuf_ref+0x1c>)
 801b26c:	f240 3242 	movw	r2, #834	; 0x342
 801b270:	4902      	ldr	r1, [pc, #8]	; (801b27c <pbuf_ref+0x20>)
 801b272:	4803      	ldr	r0, [pc, #12]	; (801b280 <pbuf_ref+0x24>)
 801b274:	f00a b89e 	b.w	80253b4 <iprintf>
 801b278:	080439ec 	.word	0x080439ec
 801b27c:	08043b78 	.word	0x08043b78
 801b280:	0802a008 	.word	0x0802a008

0801b284 <pbuf_cat>:
{
 801b284:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801b286:	b330      	cbz	r0, 801b2d6 <pbuf_cat+0x52>
 801b288:	460d      	mov	r5, r1
 801b28a:	b321      	cbz	r1, 801b2d6 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801b28c:	6803      	ldr	r3, [r0, #0]
 801b28e:	4604      	mov	r4, r0
 801b290:	b13b      	cbz	r3, 801b2a2 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b292:	8922      	ldrh	r2, [r4, #8]
 801b294:	8928      	ldrh	r0, [r5, #8]
 801b296:	4402      	add	r2, r0
 801b298:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801b29a:	461c      	mov	r4, r3
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d1f7      	bne.n	801b292 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801b2a2:	8963      	ldrh	r3, [r4, #10]
 801b2a4:	8922      	ldrh	r2, [r4, #8]
 801b2a6:	429a      	cmp	r2, r3
 801b2a8:	d010      	beq.n	801b2cc <pbuf_cat+0x48>
 801b2aa:	4b0f      	ldr	r3, [pc, #60]	; (801b2e8 <pbuf_cat+0x64>)
 801b2ac:	f240 3262 	movw	r2, #866	; 0x362
 801b2b0:	490e      	ldr	r1, [pc, #56]	; (801b2ec <pbuf_cat+0x68>)
 801b2b2:	480f      	ldr	r0, [pc, #60]	; (801b2f0 <pbuf_cat+0x6c>)
 801b2b4:	f00a f87e 	bl	80253b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801b2b8:	6823      	ldr	r3, [r4, #0]
 801b2ba:	b133      	cbz	r3, 801b2ca <pbuf_cat+0x46>
 801b2bc:	4b0a      	ldr	r3, [pc, #40]	; (801b2e8 <pbuf_cat+0x64>)
 801b2be:	f240 3263 	movw	r2, #867	; 0x363
 801b2c2:	490c      	ldr	r1, [pc, #48]	; (801b2f4 <pbuf_cat+0x70>)
 801b2c4:	480a      	ldr	r0, [pc, #40]	; (801b2f0 <pbuf_cat+0x6c>)
 801b2c6:	f00a f875 	bl	80253b4 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b2ca:	8923      	ldrh	r3, [r4, #8]
 801b2cc:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801b2ce:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b2d0:	4413      	add	r3, r2
 801b2d2:	8123      	strh	r3, [r4, #8]
}
 801b2d4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801b2d6:	4b04      	ldr	r3, [pc, #16]	; (801b2e8 <pbuf_cat+0x64>)
 801b2d8:	f240 3259 	movw	r2, #857	; 0x359
 801b2dc:	4906      	ldr	r1, [pc, #24]	; (801b2f8 <pbuf_cat+0x74>)
 801b2de:	4804      	ldr	r0, [pc, #16]	; (801b2f0 <pbuf_cat+0x6c>)
}
 801b2e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801b2e4:	f00a b866 	b.w	80253b4 <iprintf>
 801b2e8:	080439ec 	.word	0x080439ec
 801b2ec:	08043bc4 	.word	0x08043bc4
 801b2f0:	0802a008 	.word	0x0802a008
 801b2f4:	08043bf4 	.word	0x08043bf4
 801b2f8:	08043b8c 	.word	0x08043b8c

0801b2fc <pbuf_chain>:
{
 801b2fc:	b510      	push	{r4, lr}
 801b2fe:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801b300:	f7ff ffc0 	bl	801b284 <pbuf_cat>
  if (p != NULL) {
 801b304:	b124      	cbz	r4, 801b310 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801b306:	7ba3      	ldrb	r3, [r4, #14]
 801b308:	3301      	adds	r3, #1
 801b30a:	b2db      	uxtb	r3, r3
 801b30c:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b30e:	b103      	cbz	r3, 801b312 <pbuf_chain+0x16>
}
 801b310:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b312:	4b04      	ldr	r3, [pc, #16]	; (801b324 <pbuf_chain+0x28>)
 801b314:	f240 3242 	movw	r2, #834	; 0x342
 801b318:	4903      	ldr	r1, [pc, #12]	; (801b328 <pbuf_chain+0x2c>)
 801b31a:	4804      	ldr	r0, [pc, #16]	; (801b32c <pbuf_chain+0x30>)
}
 801b31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b320:	f00a b848 	b.w	80253b4 <iprintf>
 801b324:	080439ec 	.word	0x080439ec
 801b328:	08043b78 	.word	0x08043b78
 801b32c:	0802a008 	.word	0x0802a008

0801b330 <pbuf_copy>:
{
 801b330:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b332:	b140      	cbz	r0, 801b346 <pbuf_copy+0x16>
 801b334:	b139      	cbz	r1, 801b346 <pbuf_copy+0x16>
 801b336:	8902      	ldrh	r2, [r0, #8]
 801b338:	890b      	ldrh	r3, [r1, #8]
 801b33a:	429a      	cmp	r2, r3
 801b33c:	d303      	bcc.n	801b346 <pbuf_copy+0x16>
}
 801b33e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b342:	f7ff bcd1 	b.w	801ace8 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b346:	4b05      	ldr	r3, [pc, #20]	; (801b35c <pbuf_copy+0x2c>)
 801b348:	f240 32c9 	movw	r2, #969	; 0x3c9
 801b34c:	4904      	ldr	r1, [pc, #16]	; (801b360 <pbuf_copy+0x30>)
 801b34e:	4805      	ldr	r0, [pc, #20]	; (801b364 <pbuf_copy+0x34>)
 801b350:	f00a f830 	bl	80253b4 <iprintf>
}
 801b354:	f06f 000f 	mvn.w	r0, #15
 801b358:	bd08      	pop	{r3, pc}
 801b35a:	bf00      	nop
 801b35c:	080439ec 	.word	0x080439ec
 801b360:	08043c04 	.word	0x08043c04
 801b364:	0802a008 	.word	0x0802a008

0801b368 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801b368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801b36c:	4605      	mov	r5, r0
 801b36e:	b370      	cbz	r0, 801b3ce <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801b370:	460f      	mov	r7, r1
 801b372:	2900      	cmp	r1, #0
 801b374:	d036      	beq.n	801b3e4 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b376:	4690      	mov	r8, r2
 801b378:	b392      	cbz	r2, 801b3e0 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801b37a:	2600      	movs	r6, #0
 801b37c:	e005      	b.n	801b38a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801b37e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b380:	682d      	ldr	r5, [r5, #0]
 801b382:	f1b8 0f00 	cmp.w	r8, #0
 801b386:	d01f      	beq.n	801b3c8 <pbuf_copy_partial+0x60>
 801b388:	b1f5      	cbz	r5, 801b3c8 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b38a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801b38c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801b390:	b11b      	cbz	r3, 801b39a <pbuf_copy_partial+0x32>
 801b392:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801b394:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801b398:	d2f1      	bcs.n	801b37e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801b39a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b39e:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801b3a0:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b3a4:	4419      	add	r1, r3
 801b3a6:	4544      	cmp	r4, r8
 801b3a8:	bf28      	it	cs
 801b3aa:	4644      	movcs	r4, r8
 801b3ac:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801b3ae:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801b3b0:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b3b4:	f009 f838 	bl	8024428 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801b3b8:	b2b6      	uxth	r6, r6
      offset = 0;
 801b3ba:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801b3bc:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b3c0:	682d      	ldr	r5, [r5, #0]
 801b3c2:	f1b8 0f00 	cmp.w	r8, #0
 801b3c6:	d1df      	bne.n	801b388 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801b3c8:	4630      	mov	r0, r6
 801b3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801b3ce:	4b0a      	ldr	r3, [pc, #40]	; (801b3f8 <pbuf_copy_partial+0x90>)
 801b3d0:	f240 420a 	movw	r2, #1034	; 0x40a
 801b3d4:	4909      	ldr	r1, [pc, #36]	; (801b3fc <pbuf_copy_partial+0x94>)
 801b3d6:	462e      	mov	r6, r5
 801b3d8:	4809      	ldr	r0, [pc, #36]	; (801b400 <pbuf_copy_partial+0x98>)
 801b3da:	f009 ffeb 	bl	80253b4 <iprintf>
 801b3de:	e7f3      	b.n	801b3c8 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801b3e0:	4616      	mov	r6, r2
 801b3e2:	e7f1      	b.n	801b3c8 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801b3e4:	4b04      	ldr	r3, [pc, #16]	; (801b3f8 <pbuf_copy_partial+0x90>)
 801b3e6:	f240 420b 	movw	r2, #1035	; 0x40b
 801b3ea:	4906      	ldr	r1, [pc, #24]	; (801b404 <pbuf_copy_partial+0x9c>)
 801b3ec:	463e      	mov	r6, r7
 801b3ee:	4804      	ldr	r0, [pc, #16]	; (801b400 <pbuf_copy_partial+0x98>)
 801b3f0:	f009 ffe0 	bl	80253b4 <iprintf>
 801b3f4:	e7e8      	b.n	801b3c8 <pbuf_copy_partial+0x60>
 801b3f6:	bf00      	nop
 801b3f8:	080439ec 	.word	0x080439ec
 801b3fc:	08043c34 	.word	0x08043c34
 801b400:	0802a008 	.word	0x0802a008
 801b404:	08043c54 	.word	0x08043c54

0801b408 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801b408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801b40c:	2800      	cmp	r0, #0
 801b40e:	d049      	beq.n	801b4a4 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801b410:	460f      	mov	r7, r1
 801b412:	2900      	cmp	r1, #0
 801b414:	d03c      	beq.n	801b490 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801b416:	8903      	ldrh	r3, [r0, #8]
 801b418:	4604      	mov	r4, r0
 801b41a:	4690      	mov	r8, r2
 801b41c:	4293      	cmp	r3, r2
 801b41e:	d32d      	bcc.n	801b47c <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b420:	b34a      	cbz	r2, 801b476 <pbuf_take+0x6e>
 801b422:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801b424:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801b426:	f8df b094 	ldr.w	fp, [pc, #148]	; 801b4bc <pbuf_take+0xb4>
 801b42a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801b4d0 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801b42e:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801b430:	19b9      	adds	r1, r7, r6
 801b432:	6860      	ldr	r0, [r4, #4]
 801b434:	42aa      	cmp	r2, r5
 801b436:	bf28      	it	cs
 801b438:	462a      	movcs	r2, r5
 801b43a:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801b43c:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801b43e:	f008 fff3 	bl	8024428 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b442:	6824      	ldr	r4, [r4, #0]
 801b444:	ebb5 0509 	subs.w	r5, r5, r9
 801b448:	d009      	beq.n	801b45e <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801b44a:	2c00      	cmp	r4, #0
 801b44c:	d1ef      	bne.n	801b42e <pbuf_take+0x26>
 801b44e:	465b      	mov	r3, fp
 801b450:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801b454:	4651      	mov	r1, sl
 801b456:	4818      	ldr	r0, [pc, #96]	; (801b4b8 <pbuf_take+0xb0>)
 801b458:	f009 ffac 	bl	80253b4 <iprintf>
 801b45c:	e7e7      	b.n	801b42e <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801b45e:	45b0      	cmp	r8, r6
 801b460:	d009      	beq.n	801b476 <pbuf_take+0x6e>
 801b462:	4b16      	ldr	r3, [pc, #88]	; (801b4bc <pbuf_take+0xb4>)
 801b464:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801b468:	4915      	ldr	r1, [pc, #84]	; (801b4c0 <pbuf_take+0xb8>)
 801b46a:	4813      	ldr	r0, [pc, #76]	; (801b4b8 <pbuf_take+0xb0>)
 801b46c:	f009 ffa2 	bl	80253b4 <iprintf>
  return ERR_OK;
 801b470:	4628      	mov	r0, r5
}
 801b472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801b476:	2000      	movs	r0, #0
}
 801b478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801b47c:	4b0f      	ldr	r3, [pc, #60]	; (801b4bc <pbuf_take+0xb4>)
 801b47e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801b482:	4910      	ldr	r1, [pc, #64]	; (801b4c4 <pbuf_take+0xbc>)
 801b484:	480c      	ldr	r0, [pc, #48]	; (801b4b8 <pbuf_take+0xb0>)
 801b486:	f009 ff95 	bl	80253b4 <iprintf>
 801b48a:	f04f 30ff 	mov.w	r0, #4294967295
 801b48e:	e7f3      	b.n	801b478 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801b490:	4b0a      	ldr	r3, [pc, #40]	; (801b4bc <pbuf_take+0xb4>)
 801b492:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801b496:	490c      	ldr	r1, [pc, #48]	; (801b4c8 <pbuf_take+0xc0>)
 801b498:	4807      	ldr	r0, [pc, #28]	; (801b4b8 <pbuf_take+0xb0>)
 801b49a:	f009 ff8b 	bl	80253b4 <iprintf>
 801b49e:	f06f 000f 	mvn.w	r0, #15
 801b4a2:	e7e9      	b.n	801b478 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801b4a4:	4b05      	ldr	r3, [pc, #20]	; (801b4bc <pbuf_take+0xb4>)
 801b4a6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801b4aa:	4908      	ldr	r1, [pc, #32]	; (801b4cc <pbuf_take+0xc4>)
 801b4ac:	4802      	ldr	r0, [pc, #8]	; (801b4b8 <pbuf_take+0xb0>)
 801b4ae:	f009 ff81 	bl	80253b4 <iprintf>
 801b4b2:	f06f 000f 	mvn.w	r0, #15
 801b4b6:	e7df      	b.n	801b478 <pbuf_take+0x70>
 801b4b8:	0802a008 	.word	0x0802a008
 801b4bc:	080439ec 	.word	0x080439ec
 801b4c0:	08043ce4 	.word	0x08043ce4
 801b4c4:	08043cac 	.word	0x08043cac
 801b4c8:	08043c90 	.word	0x08043c90
 801b4cc:	08043c78 	.word	0x08043c78
 801b4d0:	08043ccc 	.word	0x08043ccc

0801b4d4 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b4d4:	b390      	cbz	r0, 801b53c <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801b4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4da:	460f      	mov	r7, r1
 801b4dc:	4604      	mov	r4, r0
 801b4de:	e002      	b.n	801b4e6 <pbuf_take_at+0x12>
    q = q->next;
 801b4e0:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b4e2:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801b4e4:	b334      	cbz	r4, 801b534 <pbuf_take_at+0x60>
 801b4e6:	8965      	ldrh	r5, [r4, #10]
 801b4e8:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801b4ea:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801b4ee:	d9f7      	bls.n	801b4e0 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801b4f0:	8921      	ldrh	r1, [r4, #8]
 801b4f2:	189e      	adds	r6, r3, r2
 801b4f4:	42b1      	cmp	r1, r6
 801b4f6:	db1d      	blt.n	801b534 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801b4f8:	1ae9      	subs	r1, r5, r3
 801b4fa:	428a      	cmp	r2, r1
 801b4fc:	dc07      	bgt.n	801b50e <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801b4fe:	6860      	ldr	r0, [r4, #4]
 801b500:	4639      	mov	r1, r7
 801b502:	4418      	add	r0, r3
 801b504:	f008 ff90 	bl	8024428 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801b508:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801b50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801b50e:	fa1f f881 	uxth.w	r8, r1
 801b512:	6860      	ldr	r0, [r4, #4]
 801b514:	4639      	mov	r1, r7
 801b516:	4642      	mov	r2, r8
 801b518:	4418      	add	r0, r3
 801b51a:	f008 ff85 	bl	8024428 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801b51e:	1b70      	subs	r0, r6, r5
 801b520:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801b522:	2a00      	cmp	r2, #0
 801b524:	d0f0      	beq.n	801b508 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801b526:	eb07 0108 	add.w	r1, r7, r8
 801b52a:	6820      	ldr	r0, [r4, #0]
}
 801b52c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801b530:	f7ff bf6a 	b.w	801b408 <pbuf_take>
  return ERR_MEM;
 801b534:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801b53c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b540:	4770      	bx	lr
 801b542:	bf00      	nop

0801b544 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801b544:	b538      	push	{r3, r4, r5, lr}
 801b546:	4615      	mov	r5, r2
 801b548:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801b54a:	8929      	ldrh	r1, [r5, #8]
 801b54c:	f7ff fc96 	bl	801ae7c <pbuf_alloc>
  if (q == NULL) {
 801b550:	4604      	mov	r4, r0
 801b552:	b138      	cbz	r0, 801b564 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b554:	8902      	ldrh	r2, [r0, #8]
 801b556:	892b      	ldrh	r3, [r5, #8]
 801b558:	429a      	cmp	r2, r3
 801b55a:	d305      	bcc.n	801b568 <pbuf_clone+0x24>
 801b55c:	4629      	mov	r1, r5
 801b55e:	f7ff fbc3 	bl	801ace8 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b562:	b940      	cbnz	r0, 801b576 <pbuf_clone+0x32>
  return q;
}
 801b564:	4620      	mov	r0, r4
 801b566:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b568:	4b07      	ldr	r3, [pc, #28]	; (801b588 <pbuf_clone+0x44>)
 801b56a:	f240 32c9 	movw	r2, #969	; 0x3c9
 801b56e:	4907      	ldr	r1, [pc, #28]	; (801b58c <pbuf_clone+0x48>)
 801b570:	4807      	ldr	r0, [pc, #28]	; (801b590 <pbuf_clone+0x4c>)
 801b572:	f009 ff1f 	bl	80253b4 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b576:	4b04      	ldr	r3, [pc, #16]	; (801b588 <pbuf_clone+0x44>)
 801b578:	f240 5224 	movw	r2, #1316	; 0x524
 801b57c:	4905      	ldr	r1, [pc, #20]	; (801b594 <pbuf_clone+0x50>)
 801b57e:	4804      	ldr	r0, [pc, #16]	; (801b590 <pbuf_clone+0x4c>)
 801b580:	f009 ff18 	bl	80253b4 <iprintf>
}
 801b584:	4620      	mov	r0, r4
 801b586:	bd38      	pop	{r3, r4, r5, pc}
 801b588:	080439ec 	.word	0x080439ec
 801b58c:	08043c04 	.word	0x08043c04
 801b590:	0802a008 	.word	0x0802a008
 801b594:	08043cfc 	.word	0x08043cfc

0801b598 <pbuf_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b598:	b918      	cbnz	r0, 801b5a2 <pbuf_get_at+0xa>
 801b59a:	e00a      	b.n	801b5b2 <pbuf_get_at+0x1a>
    q = q->next;
 801b59c:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b59e:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5a0:	b130      	cbz	r0, 801b5b0 <pbuf_get_at+0x18>
 801b5a2:	8943      	ldrh	r3, [r0, #10]
 801b5a4:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b5a6:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5aa:	d9f7      	bls.n	801b59c <pbuf_get_at+0x4>
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
 801b5ac:	6843      	ldr	r3, [r0, #4]
 801b5ae:	5c58      	ldrb	r0, [r3, r1]
}
 801b5b0:	4770      	bx	lr
 801b5b2:	4770      	bx	lr

0801b5b4 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5b4:	b140      	cbz	r0, 801b5c8 <pbuf_try_get_at+0x14>
 801b5b6:	8943      	ldrh	r3, [r0, #10]
 801b5b8:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b5ba:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5be:	d806      	bhi.n	801b5ce <pbuf_try_get_at+0x1a>
    q = q->next;
 801b5c0:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b5c2:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5c4:	2800      	cmp	r0, #0
 801b5c6:	d1f6      	bne.n	801b5b6 <pbuf_try_get_at+0x2>
  }
  return -1;
 801b5c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b5cc:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801b5ce:	6843      	ldr	r3, [r0, #4]
 801b5d0:	5c58      	ldrb	r0, [r3, r1]
 801b5d2:	4770      	bx	lr

0801b5d4 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5d4:	b918      	cbnz	r0, 801b5de <pbuf_put_at+0xa>
 801b5d6:	e00a      	b.n	801b5ee <pbuf_put_at+0x1a>
    q = q->next;
 801b5d8:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b5da:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5dc:	b130      	cbz	r0, 801b5ec <pbuf_put_at+0x18>
 801b5de:	8943      	ldrh	r3, [r0, #10]
 801b5e0:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b5e2:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5e6:	d9f7      	bls.n	801b5d8 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801b5e8:	6843      	ldr	r3, [r0, #4]
 801b5ea:	545a      	strb	r2, [r3, r1]
  }
}
 801b5ec:	4770      	bx	lr
 801b5ee:	4770      	bx	lr

0801b5f0 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801b5f0:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801b5f2:	8905      	ldrh	r5, [r0, #8]
 801b5f4:	18cc      	adds	r4, r1, r3
 801b5f6:	42a5      	cmp	r5, r4
 801b5f8:	db2e      	blt.n	801b658 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801b5fa:	8944      	ldrh	r4, [r0, #10]
 801b5fc:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801b5fe:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801b602:	d803      	bhi.n	801b60c <pbuf_memcmp+0x1c>
    q = q->next;
 801b604:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801b606:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801b608:	2800      	cmp	r0, #0
 801b60a:	d1f6      	bne.n	801b5fa <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801b60c:	b1f3      	cbz	r3, 801b64c <pbuf_memcmp+0x5c>
 801b60e:	2500      	movs	r5, #0
 801b610:	1e56      	subs	r6, r2, #1
 801b612:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801b614:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801b618:	4604      	mov	r4, r0
 801b61a:	fa1f fc8c 	uxth.w	ip, ip
 801b61e:	b920      	cbnz	r0, 801b62a <pbuf_memcmp+0x3a>
 801b620:	e00b      	b.n	801b63a <pbuf_memcmp+0x4a>
    q = q->next;
 801b622:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b624:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801b628:	b13c      	cbz	r4, 801b63a <pbuf_memcmp+0x4a>
 801b62a:	8962      	ldrh	r2, [r4, #10]
 801b62c:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801b62e:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801b632:	d2f6      	bcs.n	801b622 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801b634:	6862      	ldr	r2, [r4, #4]
 801b636:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801b63a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801b63e:	42a2      	cmp	r2, r4
 801b640:	d106      	bne.n	801b650 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801b642:	3501      	adds	r5, #1
 801b644:	fa1f fe85 	uxth.w	lr, r5
 801b648:	4573      	cmp	r3, lr
 801b64a:	d8e3      	bhi.n	801b614 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801b64c:	2000      	movs	r0, #0
}
 801b64e:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801b650:	f10e 0001 	add.w	r0, lr, #1
 801b654:	b280      	uxth	r0, r0
}
 801b656:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801b658:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b65c:	bd70      	pop	{r4, r5, r6, pc}
 801b65e:	bf00      	nop

0801b660 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b662:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801b664:	8905      	ldrh	r5, [r0, #8]
{
 801b666:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801b668:	4422      	add	r2, r4
 801b66a:	4295      	cmp	r5, r2
 801b66c:	db15      	blt.n	801b69a <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801b66e:	1aed      	subs	r5, r5, r3
 801b670:	4606      	mov	r6, r0
 801b672:	460f      	mov	r7, r1
 801b674:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801b676:	42a5      	cmp	r5, r4
 801b678:	d204      	bcs.n	801b684 <pbuf_memfind+0x24>
 801b67a:	e00e      	b.n	801b69a <pbuf_memfind+0x3a>
 801b67c:	fa1f f48c 	uxth.w	r4, ip
 801b680:	42a5      	cmp	r5, r4
 801b682:	d30a      	bcc.n	801b69a <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801b684:	4621      	mov	r1, r4
 801b686:	463a      	mov	r2, r7
 801b688:	4630      	mov	r0, r6
 801b68a:	f7ff ffb1 	bl	801b5f0 <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801b68e:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801b692:	2800      	cmp	r0, #0
 801b694:	d1f2      	bne.n	801b67c <pbuf_memfind+0x1c>
 801b696:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801b698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801b69a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b6a0 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801b6a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b6a4:	4e33      	ldr	r6, [pc, #204]	; (801b774 <raw_input+0xd4>)
{
 801b6a6:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b6a8:	6831      	ldr	r1, [r6, #0]
 801b6aa:	6970      	ldr	r0, [r6, #20]
 801b6ac:	f007 fb90 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801b6b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b6b4:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801b6b6:	4b30      	ldr	r3, [pc, #192]	; (801b778 <raw_input+0xd8>)
 801b6b8:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801b6ba:	2c00      	cmp	r4, #0
 801b6bc:	d056      	beq.n	801b76c <raw_input+0xcc>
 801b6be:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801b6c0:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b6c2:	f106 0b10 	add.w	fp, r6, #16
 801b6c6:	46ca      	mov	sl, r9
  prev = NULL;
 801b6c8:	4606      	mov	r6, r0
 801b6ca:	e004      	b.n	801b6d6 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801b6cc:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801b6ce:	4626      	mov	r6, r4
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d037      	beq.n	801b744 <raw_input+0xa4>
 801b6d4:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801b6d6:	7c23      	ldrb	r3, [r4, #16]
 801b6d8:	42ab      	cmp	r3, r5
 801b6da:	d1f7      	bne.n	801b6cc <raw_input+0x2c>
 801b6dc:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b6de:	b13a      	cbz	r2, 801b6f0 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b6e0:	4b24      	ldr	r3, [pc, #144]	; (801b774 <raw_input+0xd4>)
 801b6e2:	685b      	ldr	r3, [r3, #4]
 801b6e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b6e8:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b6ea:	b2db      	uxtb	r3, r3
 801b6ec:	429a      	cmp	r2, r3
 801b6ee:	d1ed      	bne.n	801b6cc <raw_input+0x2c>
 801b6f0:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801b6f2:	f1ba 0f00 	cmp.w	sl, #0
 801b6f6:	d027      	beq.n	801b748 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d1e7      	bne.n	801b6cc <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801b6fc:	7c63      	ldrb	r3, [r4, #17]
 801b6fe:	07db      	lsls	r3, r3, #31
 801b700:	d504      	bpl.n	801b70c <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801b702:	4b1c      	ldr	r3, [pc, #112]	; (801b774 <raw_input+0xd4>)
 801b704:	6862      	ldr	r2, [r4, #4]
 801b706:	691b      	ldr	r3, [r3, #16]
 801b708:	429a      	cmp	r2, r3
 801b70a:	d1df      	bne.n	801b6cc <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801b70c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801b710:	f1b9 0f00 	cmp.w	r9, #0
 801b714:	d0da      	beq.n	801b6cc <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b716:	465b      	mov	r3, fp
 801b718:	4642      	mov	r2, r8
 801b71a:	4621      	mov	r1, r4
 801b71c:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801b71e:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b722:	47c8      	blx	r9
        if (eaten != 0) {
 801b724:	b9c8      	cbnz	r0, 801b75a <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801b726:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b72a:	42bb      	cmp	r3, r7
 801b72c:	d013      	beq.n	801b756 <raw_input+0xb6>
 801b72e:	4b13      	ldr	r3, [pc, #76]	; (801b77c <raw_input+0xdc>)
 801b730:	22c0      	movs	r2, #192	; 0xc0
 801b732:	4913      	ldr	r1, [pc, #76]	; (801b780 <raw_input+0xe0>)
 801b734:	4626      	mov	r6, r4
 801b736:	4813      	ldr	r0, [pc, #76]	; (801b784 <raw_input+0xe4>)
 801b738:	f009 fe3c 	bl	80253b4 <iprintf>
    pcb = pcb->next;
 801b73c:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801b73e:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801b740:	2b00      	cmp	r3, #0
 801b742:	d1c7      	bne.n	801b6d4 <raw_input+0x34>
  }
  return ret;
}
 801b744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d0d7      	beq.n	801b6fc <raw_input+0x5c>
 801b74c:	4a09      	ldr	r2, [pc, #36]	; (801b774 <raw_input+0xd4>)
 801b74e:	6952      	ldr	r2, [r2, #20]
 801b750:	4293      	cmp	r3, r2
 801b752:	d1bb      	bne.n	801b6cc <raw_input+0x2c>
 801b754:	e7d2      	b.n	801b6fc <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801b756:	2002      	movs	r0, #2
 801b758:	e7b8      	b.n	801b6cc <raw_input+0x2c>
          if (prev != NULL) {
 801b75a:	b14e      	cbz	r6, 801b770 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801b75c:	4906      	ldr	r1, [pc, #24]	; (801b778 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801b75e:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801b760:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801b762:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801b764:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801b766:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801b768:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801b76a:	e7eb      	b.n	801b744 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801b76c:	4620      	mov	r0, r4
 801b76e:	e7e9      	b.n	801b744 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801b770:	2001      	movs	r0, #1
 801b772:	e7e7      	b.n	801b744 <raw_input+0xa4>
 801b774:	2001ef20 	.word	0x2001ef20
 801b778:	2002e0b8 	.word	0x2002e0b8
 801b77c:	08043d10 	.word	0x08043d10
 801b780:	08043d40 	.word	0x08043d40
 801b784:	0802a008 	.word	0x0802a008

0801b788 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b788:	b110      	cbz	r0, 801b790 <raw_netif_ip_addr_changed+0x8>
 801b78a:	6802      	ldr	r2, [r0, #0]
 801b78c:	b101      	cbz	r1, 801b790 <raw_netif_ip_addr_changed+0x8>
 801b78e:	b902      	cbnz	r2, 801b792 <raw_netif_ip_addr_changed+0xa>
 801b790:	4770      	bx	lr
 801b792:	680b      	ldr	r3, [r1, #0]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d0fb      	beq.n	801b790 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801b798:	4b08      	ldr	r3, [pc, #32]	; (801b7bc <raw_netif_ip_addr_changed+0x34>)
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d0f7      	beq.n	801b790 <raw_netif_ip_addr_changed+0x8>
{
 801b7a0:	b410      	push	{r4}
 801b7a2:	e000      	b.n	801b7a6 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801b7a4:	6802      	ldr	r2, [r0, #0]
 801b7a6:	681c      	ldr	r4, [r3, #0]
 801b7a8:	4294      	cmp	r4, r2
 801b7aa:	d101      	bne.n	801b7b0 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801b7ac:	680a      	ldr	r2, [r1, #0]
 801b7ae:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801b7b0:	68db      	ldr	r3, [r3, #12]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d1f6      	bne.n	801b7a4 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801b7b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7ba:	4770      	bx	lr
 801b7bc:	2002e0b8 	.word	0x2002e0b8

0801b7c0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801b7c0:	b4f0      	push	{r4, r5, r6, r7}
 801b7c2:	4f13      	ldr	r7, [pc, #76]	; (801b810 <tcp_new_port+0x50>)
 801b7c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801b7c8:	4e12      	ldr	r6, [pc, #72]	; (801b814 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801b7ca:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801b7ce:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b7d0:	4d11      	ldr	r5, [pc, #68]	; (801b818 <tcp_new_port+0x58>)
  tcp_port++;
 801b7d2:	3001      	adds	r0, #1
 801b7d4:	4c11      	ldr	r4, [pc, #68]	; (801b81c <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b7d6:	462b      	mov	r3, r5
  tcp_port++;
 801b7d8:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b7da:	4560      	cmp	r0, ip
 801b7dc:	bf08      	it	eq
 801b7de:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	b913      	cbnz	r3, 801b7ec <tcp_new_port+0x2c>
 801b7e6:	e00b      	b.n	801b800 <tcp_new_port+0x40>
 801b7e8:	68db      	ldr	r3, [r3, #12]
 801b7ea:	b14b      	cbz	r3, 801b800 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801b7ec:	8ada      	ldrh	r2, [r3, #22]
 801b7ee:	4282      	cmp	r2, r0
 801b7f0:	d1fa      	bne.n	801b7e8 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801b7f2:	3901      	subs	r1, #1
 801b7f4:	b289      	uxth	r1, r1
 801b7f6:	2900      	cmp	r1, #0
 801b7f8:	d1eb      	bne.n	801b7d2 <tcp_new_port+0x12>
 801b7fa:	8038      	strh	r0, [r7, #0]
          return 0;
 801b7fc:	4608      	mov	r0, r1
 801b7fe:	e005      	b.n	801b80c <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b800:	42b4      	cmp	r4, r6
 801b802:	d002      	beq.n	801b80a <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b804:	f854 3b04 	ldr.w	r3, [r4], #4
 801b808:	e7eb      	b.n	801b7e2 <tcp_new_port+0x22>
 801b80a:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801b80c:	bcf0      	pop	{r4, r5, r6, r7}
 801b80e:	4770      	bx	lr
 801b810:	20000418 	.word	0x20000418
 801b814:	08044480 	.word	0x08044480
 801b818:	2002e0c8 	.word	0x2002e0c8
 801b81c:	08044474 	.word	0x08044474

0801b820 <tcp_close_shutdown_fin>:
{
 801b820:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b822:	4604      	mov	r4, r0
 801b824:	b310      	cbz	r0, 801b86c <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801b826:	7d23      	ldrb	r3, [r4, #20]
 801b828:	2b04      	cmp	r3, #4
 801b82a:	d005      	beq.n	801b838 <tcp_close_shutdown_fin+0x18>
 801b82c:	2b07      	cmp	r3, #7
 801b82e:	d00e      	beq.n	801b84e <tcp_close_shutdown_fin+0x2e>
 801b830:	2b03      	cmp	r3, #3
 801b832:	d001      	beq.n	801b838 <tcp_close_shutdown_fin+0x18>
 801b834:	2000      	movs	r0, #0
}
 801b836:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801b838:	4620      	mov	r0, r4
 801b83a:	f003 fd33 	bl	801f2a4 <tcp_send_fin>
      if (err == ERR_OK) {
 801b83e:	b950      	cbnz	r0, 801b856 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801b840:	2305      	movs	r3, #5
 801b842:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801b844:	4620      	mov	r0, r4
 801b846:	f003 fe9d 	bl	801f584 <tcp_output>
 801b84a:	2000      	movs	r0, #0
}
 801b84c:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801b84e:	4620      	mov	r0, r4
 801b850:	f003 fd28 	bl	801f2a4 <tcp_send_fin>
      if (err == ERR_OK) {
 801b854:	b138      	cbz	r0, 801b866 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801b856:	1c43      	adds	r3, r0, #1
 801b858:	d1ed      	bne.n	801b836 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b85a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801b85c:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b85e:	f043 0308 	orr.w	r3, r3, #8
 801b862:	8363      	strh	r3, [r4, #26]
}
 801b864:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801b866:	2309      	movs	r3, #9
 801b868:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801b86a:	e7eb      	b.n	801b844 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b86c:	4b03      	ldr	r3, [pc, #12]	; (801b87c <tcp_close_shutdown_fin+0x5c>)
 801b86e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801b872:	4903      	ldr	r1, [pc, #12]	; (801b880 <tcp_close_shutdown_fin+0x60>)
 801b874:	4803      	ldr	r0, [pc, #12]	; (801b884 <tcp_close_shutdown_fin+0x64>)
 801b876:	f009 fd9d 	bl	80253b4 <iprintf>
 801b87a:	e7d4      	b.n	801b826 <tcp_close_shutdown_fin+0x6>
 801b87c:	08043d8c 	.word	0x08043d8c
 801b880:	08043dbc 	.word	0x08043dbc
 801b884:	0802a008 	.word	0x0802a008

0801b888 <tcp_init>:
{
 801b888:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b88a:	f009 fe37 	bl	80254fc <rand>
 801b88e:	4b02      	ldr	r3, [pc, #8]	; (801b898 <tcp_init+0x10>)
 801b890:	4a02      	ldr	r2, [pc, #8]	; (801b89c <tcp_init+0x14>)
 801b892:	4303      	orrs	r3, r0
 801b894:	8013      	strh	r3, [r2, #0]
}
 801b896:	bd08      	pop	{r3, pc}
 801b898:	ffffc000 	.word	0xffffc000
 801b89c:	20000418 	.word	0x20000418

0801b8a0 <tcp_free>:
{
 801b8a0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b8a2:	7d03      	ldrb	r3, [r0, #20]
{
 801b8a4:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b8a6:	2b01      	cmp	r3, #1
 801b8a8:	d005      	beq.n	801b8b6 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801b8aa:	4621      	mov	r1, r4
 801b8ac:	2002      	movs	r0, #2
}
 801b8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b8b2:	f7fe bf9d 	b.w	801a7f0 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b8b6:	4906      	ldr	r1, [pc, #24]	; (801b8d0 <tcp_free+0x30>)
 801b8b8:	22d4      	movs	r2, #212	; 0xd4
 801b8ba:	4b06      	ldr	r3, [pc, #24]	; (801b8d4 <tcp_free+0x34>)
 801b8bc:	4806      	ldr	r0, [pc, #24]	; (801b8d8 <tcp_free+0x38>)
 801b8be:	f009 fd79 	bl	80253b4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801b8c2:	4621      	mov	r1, r4
 801b8c4:	2002      	movs	r0, #2
}
 801b8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b8ca:	f7fe bf91 	b.w	801a7f0 <memp_free>
 801b8ce:	bf00      	nop
 801b8d0:	08043dc8 	.word	0x08043dc8
 801b8d4:	08043d8c 	.word	0x08043d8c
 801b8d8:	0802a008 	.word	0x0802a008

0801b8dc <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801b8dc:	2900      	cmp	r1, #0
{
 801b8de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801b8e0:	4b26      	ldr	r3, [pc, #152]	; (801b97c <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801b8e2:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801b8e4:	bf14      	ite	ne
 801b8e6:	460e      	movne	r6, r1
 801b8e8:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8ea:	2800      	cmp	r0, #0
 801b8ec:	d03c      	beq.n	801b968 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b8ee:	7d03      	ldrb	r3, [r0, #20]
 801b8f0:	4607      	mov	r7, r0
 801b8f2:	bb7b      	cbnz	r3, 801b954 <tcp_bind+0x78>
  if (port == 0) {
 801b8f4:	b31a      	cbz	r2, 801b93e <tcp_bind+0x62>
 801b8f6:	4922      	ldr	r1, [pc, #136]	; (801b980 <tcp_bind+0xa4>)
 801b8f8:	4b22      	ldr	r3, [pc, #136]	; (801b984 <tcp_bind+0xa8>)
 801b8fa:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	b913      	cbnz	r3, 801b908 <tcp_bind+0x2c>
 801b902:	e00e      	b.n	801b922 <tcp_bind+0x46>
 801b904:	68db      	ldr	r3, [r3, #12]
 801b906:	b163      	cbz	r3, 801b922 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801b908:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801b90c:	4594      	cmp	ip, r2
 801b90e:	d1f9      	bne.n	801b904 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b910:	681c      	ldr	r4, [r3, #0]
 801b912:	b11c      	cbz	r4, 801b91c <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801b914:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b916:	b10d      	cbz	r5, 801b91c <tcp_bind+0x40>
 801b918:	42ac      	cmp	r4, r5
 801b91a:	d1f3      	bne.n	801b904 <tcp_bind+0x28>
              return ERR_USE;
 801b91c:	f06f 0007 	mvn.w	r0, #7
}
 801b920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801b922:	4281      	cmp	r1, r0
 801b924:	d113      	bne.n	801b94e <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801b926:	6833      	ldr	r3, [r6, #0]
 801b928:	b103      	cbz	r3, 801b92c <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b92a:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b92c:	4b16      	ldr	r3, [pc, #88]	; (801b988 <tcp_bind+0xac>)
  pcb->local_port = port;
 801b92e:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b930:	681a      	ldr	r2, [r3, #0]
 801b932:	601f      	str	r7, [r3, #0]
 801b934:	60fa      	str	r2, [r7, #12]
 801b936:	f004 f951 	bl	801fbdc <tcp_timer_needed>
  return ERR_OK;
 801b93a:	2000      	movs	r0, #0
}
 801b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801b93e:	f7ff ff3f 	bl	801b7c0 <tcp_new_port>
    if (port == 0) {
 801b942:	4602      	mov	r2, r0
 801b944:	2800      	cmp	r0, #0
 801b946:	d1ee      	bne.n	801b926 <tcp_bind+0x4a>
      return ERR_BUF;
 801b948:	f06f 0001 	mvn.w	r0, #1
}
 801b94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b94e:	f851 3b04 	ldr.w	r3, [r1], #4
 801b952:	e7d4      	b.n	801b8fe <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b954:	4b0d      	ldr	r3, [pc, #52]	; (801b98c <tcp_bind+0xb0>)
 801b956:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b95a:	490d      	ldr	r1, [pc, #52]	; (801b990 <tcp_bind+0xb4>)
 801b95c:	480d      	ldr	r0, [pc, #52]	; (801b994 <tcp_bind+0xb8>)
 801b95e:	f009 fd29 	bl	80253b4 <iprintf>
 801b962:	f06f 0005 	mvn.w	r0, #5
}
 801b966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b968:	4b08      	ldr	r3, [pc, #32]	; (801b98c <tcp_bind+0xb0>)
 801b96a:	f240 22a9 	movw	r2, #681	; 0x2a9
 801b96e:	490a      	ldr	r1, [pc, #40]	; (801b998 <tcp_bind+0xbc>)
 801b970:	4808      	ldr	r0, [pc, #32]	; (801b994 <tcp_bind+0xb8>)
 801b972:	f009 fd1f 	bl	80253b4 <iprintf>
 801b976:	f06f 000f 	mvn.w	r0, #15
}
 801b97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b97c:	080459a4 	.word	0x080459a4
 801b980:	08044474 	.word	0x08044474
 801b984:	2002e0c8 	.word	0x2002e0c8
 801b988:	2002e0c4 	.word	0x2002e0c4
 801b98c:	08043d8c 	.word	0x08043d8c
 801b990:	08043df4 	.word	0x08043df4
 801b994:	0802a008 	.word	0x0802a008
 801b998:	08043ddc 	.word	0x08043ddc

0801b99c <tcp_listen_with_backlog_and_err>:
{
 801b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b99e:	4604      	mov	r4, r0
{
 801b9a0:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b9a2:	2800      	cmp	r0, #0
 801b9a4:	d060      	beq.n	801ba68 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b9a6:	7d05      	ldrb	r5, [r0, #20]
 801b9a8:	2d00      	cmp	r5, #0
 801b9aa:	d14a      	bne.n	801ba42 <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801b9ac:	f240 3272 	movw	r2, #882	; 0x372
 801b9b0:	4933      	ldr	r1, [pc, #204]	; (801ba80 <tcp_listen_with_backlog_and_err+0xe4>)
 801b9b2:	2003      	movs	r0, #3
 801b9b4:	f7fe fee6 	bl	801a784 <memp_malloc_fn>
  if (lpcb == NULL) {
 801b9b8:	4606      	mov	r6, r0
 801b9ba:	2800      	cmp	r0, #0
 801b9bc:	d051      	beq.n	801ba62 <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801b9be:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801b9c0:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801b9c2:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801b9c4:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801b9c6:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801b9c8:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801b9ca:	7d62      	ldrb	r2, [r4, #21]
 801b9cc:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801b9ce:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801b9d0:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801b9d2:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801b9d4:	7ae2      	ldrb	r2, [r4, #11]
 801b9d6:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801b9d8:	7aa2      	ldrb	r2, [r4, #10]
 801b9da:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801b9dc:	6822      	ldr	r2, [r4, #0]
 801b9de:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801b9e0:	b99b      	cbnz	r3, 801ba0a <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b9e2:	7d23      	ldrb	r3, [r4, #20]
 801b9e4:	2b01      	cmp	r3, #1
 801b9e6:	d020      	beq.n	801ba2a <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801b9e8:	4621      	mov	r1, r4
 801b9ea:	2002      	movs	r0, #2
 801b9ec:	f7fe ff00 	bl	801a7f0 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b9f0:	4b24      	ldr	r3, [pc, #144]	; (801ba84 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801b9f2:	4925      	ldr	r1, [pc, #148]	; (801ba88 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b9f4:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801b9f6:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b9f8:	60f2      	str	r2, [r6, #12]
 801b9fa:	601e      	str	r6, [r3, #0]
 801b9fc:	f004 f8ee 	bl	801fbdc <tcp_timer_needed>
  res = ERR_OK;
 801ba00:	2300      	movs	r3, #0
  if (err != NULL) {
 801ba02:	b107      	cbz	r7, 801ba06 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801ba04:	703b      	strb	r3, [r7, #0]
}
 801ba06:	4630      	mov	r0, r6
 801ba08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801ba0a:	4a20      	ldr	r2, [pc, #128]	; (801ba8c <tcp_listen_with_backlog_and_err+0xf0>)
 801ba0c:	6813      	ldr	r3, [r2, #0]
 801ba0e:	42a3      	cmp	r3, r4
 801ba10:	d012      	beq.n	801ba38 <tcp_listen_with_backlog_and_err+0x9c>
 801ba12:	b12b      	cbz	r3, 801ba20 <tcp_listen_with_backlog_and_err+0x84>
 801ba14:	68d9      	ldr	r1, [r3, #12]
 801ba16:	42a1      	cmp	r1, r4
 801ba18:	d01e      	beq.n	801ba58 <tcp_listen_with_backlog_and_err+0xbc>
 801ba1a:	460b      	mov	r3, r1
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d1f9      	bne.n	801ba14 <tcp_listen_with_backlog_and_err+0x78>
 801ba20:	2300      	movs	r3, #0
 801ba22:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ba24:	7d23      	ldrb	r3, [r4, #20]
 801ba26:	2b01      	cmp	r3, #1
 801ba28:	d1de      	bne.n	801b9e8 <tcp_listen_with_backlog_and_err+0x4c>
 801ba2a:	4b15      	ldr	r3, [pc, #84]	; (801ba80 <tcp_listen_with_backlog_and_err+0xe4>)
 801ba2c:	22d4      	movs	r2, #212	; 0xd4
 801ba2e:	4918      	ldr	r1, [pc, #96]	; (801ba90 <tcp_listen_with_backlog_and_err+0xf4>)
 801ba30:	4818      	ldr	r0, [pc, #96]	; (801ba94 <tcp_listen_with_backlog_and_err+0xf8>)
 801ba32:	f009 fcbf 	bl	80253b4 <iprintf>
 801ba36:	e7d7      	b.n	801b9e8 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801ba38:	68e3      	ldr	r3, [r4, #12]
 801ba3a:	6013      	str	r3, [r2, #0]
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	60e3      	str	r3, [r4, #12]
 801ba40:	e7f0      	b.n	801ba24 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801ba42:	4b0f      	ldr	r3, [pc, #60]	; (801ba80 <tcp_listen_with_backlog_and_err+0xe4>)
 801ba44:	f240 325a 	movw	r2, #858	; 0x35a
 801ba48:	4913      	ldr	r1, [pc, #76]	; (801ba98 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801ba4a:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801ba4c:	4811      	ldr	r0, [pc, #68]	; (801ba94 <tcp_listen_with_backlog_and_err+0xf8>)
 801ba4e:	f009 fcb1 	bl	80253b4 <iprintf>
 801ba52:	f06f 030e 	mvn.w	r3, #14
 801ba56:	e7d4      	b.n	801ba02 <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801ba58:	68e2      	ldr	r2, [r4, #12]
 801ba5a:	60da      	str	r2, [r3, #12]
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	60e3      	str	r3, [r4, #12]
 801ba60:	e7e0      	b.n	801ba24 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801ba62:	f04f 33ff 	mov.w	r3, #4294967295
 801ba66:	e7cc      	b.n	801ba02 <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ba68:	4b05      	ldr	r3, [pc, #20]	; (801ba80 <tcp_listen_with_backlog_and_err+0xe4>)
 801ba6a:	f240 3259 	movw	r2, #857	; 0x359
 801ba6e:	490b      	ldr	r1, [pc, #44]	; (801ba9c <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801ba70:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ba72:	4808      	ldr	r0, [pc, #32]	; (801ba94 <tcp_listen_with_backlog_and_err+0xf8>)
 801ba74:	f009 fc9e 	bl	80253b4 <iprintf>
 801ba78:	f06f 030f 	mvn.w	r3, #15
 801ba7c:	e7c1      	b.n	801ba02 <tcp_listen_with_backlog_and_err+0x66>
 801ba7e:	bf00      	nop
 801ba80:	08043d8c 	.word	0x08043d8c
 801ba84:	2002e0c8 	.word	0x2002e0c8
 801ba88:	0801c731 	.word	0x0801c731
 801ba8c:	2002e0c4 	.word	0x2002e0c4
 801ba90:	08043dc8 	.word	0x08043dc8
 801ba94:	0802a008 	.word	0x0802a008
 801ba98:	08043e4c 	.word	0x08043e4c
 801ba9c:	08043e1c 	.word	0x08043e1c

0801baa0 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801baa0:	2200      	movs	r2, #0
 801baa2:	f7ff bf7b 	b.w	801b99c <tcp_listen_with_backlog_and_err>
 801baa6:	bf00      	nop

0801baa8 <tcp_update_rcv_ann_wnd>:
{
 801baa8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801baaa:	4604      	mov	r4, r0
 801baac:	b1c0      	cbz	r0, 801bae0 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801baae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801bab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801bab2:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801bab6:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801bab8:	1ad0      	subs	r0, r2, r3
 801baba:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801babe:	4428      	add	r0, r5
 801bac0:	bf94      	ite	ls
 801bac2:	eba0 010c 	subls.w	r1, r0, ip
 801bac6:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801baca:	2900      	cmp	r1, #0
 801bacc:	db01      	blt.n	801bad2 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801bace:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801bad0:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801bad2:	1aea      	subs	r2, r5, r3
 801bad4:	2a00      	cmp	r2, #0
 801bad6:	dd0b      	ble.n	801baf0 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801bad8:	2300      	movs	r3, #0
    return 0;
 801bada:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801badc:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801bade:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801bae0:	4b0b      	ldr	r3, [pc, #44]	; (801bb10 <tcp_update_rcv_ann_wnd+0x68>)
 801bae2:	f240 32a6 	movw	r2, #934	; 0x3a6
 801bae6:	490b      	ldr	r1, [pc, #44]	; (801bb14 <tcp_update_rcv_ann_wnd+0x6c>)
 801bae8:	480b      	ldr	r0, [pc, #44]	; (801bb18 <tcp_update_rcv_ann_wnd+0x70>)
 801baea:	f009 fc63 	bl	80253b4 <iprintf>
 801baee:	e7de      	b.n	801baae <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801baf0:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801baf2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801baf6:	d202      	bcs.n	801bafe <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801baf8:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801bafa:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801bafc:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801bafe:	4b04      	ldr	r3, [pc, #16]	; (801bb10 <tcp_update_rcv_ann_wnd+0x68>)
 801bb00:	f240 32b6 	movw	r2, #950	; 0x3b6
 801bb04:	4905      	ldr	r1, [pc, #20]	; (801bb1c <tcp_update_rcv_ann_wnd+0x74>)
 801bb06:	4804      	ldr	r0, [pc, #16]	; (801bb18 <tcp_update_rcv_ann_wnd+0x70>)
 801bb08:	f009 fc54 	bl	80253b4 <iprintf>
 801bb0c:	e7f4      	b.n	801baf8 <tcp_update_rcv_ann_wnd+0x50>
 801bb0e:	bf00      	nop
 801bb10:	08043d8c 	.word	0x08043d8c
 801bb14:	08043e84 	.word	0x08043e84
 801bb18:	0802a008 	.word	0x0802a008
 801bb1c:	08043ea8 	.word	0x08043ea8

0801bb20 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801bb20:	b340      	cbz	r0, 801bb74 <tcp_recved+0x54>
{
 801bb22:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801bb24:	7d03      	ldrb	r3, [r0, #20]
 801bb26:	4605      	mov	r5, r0
 801bb28:	460c      	mov	r4, r1
 801bb2a:	2b01      	cmp	r3, #1
 801bb2c:	d01a      	beq.n	801bb64 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801bb2e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801bb30:	1919      	adds	r1, r3, r4
 801bb32:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801bb34:	428b      	cmp	r3, r1
 801bb36:	d802      	bhi.n	801bb3e <tcp_recved+0x1e>
 801bb38:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801bb3c:	d901      	bls.n	801bb42 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801bb3e:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801bb42:	4628      	mov	r0, r5
 801bb44:	8529      	strh	r1, [r5, #40]	; 0x28
 801bb46:	f7ff ffaf 	bl	801baa8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801bb4a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801bb4e:	d200      	bcs.n	801bb52 <tcp_recved+0x32>
}
 801bb50:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801bb52:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801bb54:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801bb56:	f043 0302 	orr.w	r3, r3, #2
 801bb5a:	836b      	strh	r3, [r5, #26]
}
 801bb5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801bb60:	f003 bd10 	b.w	801f584 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801bb64:	4b07      	ldr	r3, [pc, #28]	; (801bb84 <tcp_recved+0x64>)
 801bb66:	f240 32d2 	movw	r2, #978	; 0x3d2
 801bb6a:	4907      	ldr	r1, [pc, #28]	; (801bb88 <tcp_recved+0x68>)
 801bb6c:	4807      	ldr	r0, [pc, #28]	; (801bb8c <tcp_recved+0x6c>)
 801bb6e:	f009 fc21 	bl	80253b4 <iprintf>
 801bb72:	e7dc      	b.n	801bb2e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801bb74:	4b03      	ldr	r3, [pc, #12]	; (801bb84 <tcp_recved+0x64>)
 801bb76:	f240 32cf 	movw	r2, #975	; 0x3cf
 801bb7a:	4905      	ldr	r1, [pc, #20]	; (801bb90 <tcp_recved+0x70>)
 801bb7c:	4803      	ldr	r0, [pc, #12]	; (801bb8c <tcp_recved+0x6c>)
 801bb7e:	f009 bc19 	b.w	80253b4 <iprintf>
 801bb82:	bf00      	nop
 801bb84:	08043d8c 	.word	0x08043d8c
 801bb88:	08043edc 	.word	0x08043edc
 801bb8c:	0802a008 	.word	0x0802a008
 801bb90:	08043ec4 	.word	0x08043ec4

0801bb94 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb96:	2800      	cmp	r0, #0
 801bb98:	f000 808c 	beq.w	801bcb4 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801bb9c:	2900      	cmp	r1, #0
 801bb9e:	d07f      	beq.n	801bca0 <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801bba0:	461e      	mov	r6, r3
 801bba2:	7d03      	ldrb	r3, [r0, #20]
 801bba4:	4604      	mov	r4, r0
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d16a      	bne.n	801bc80 <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801bbaa:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bbac:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801bbae:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801bbb0:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bbb2:	2800      	cmp	r0, #0
 801bbb4:	d049      	beq.n	801bc4a <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801bbb6:	f7ff f80d 	bl	801abd4 <netif_get_by_index>
 801bbba:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801bbbc:	2d00      	cmp	r5, #0
 801bbbe:	d06c      	beq.n	801bc9a <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801bbc0:	6823      	ldr	r3, [r4, #0]
 801bbc2:	b90b      	cbnz	r3, 801bbc8 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801bbc4:	686b      	ldr	r3, [r5, #4]
 801bbc6:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801bbc8:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801bbca:	b927      	cbnz	r7, 801bbd6 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801bbcc:	f7ff fdf8 	bl	801b7c0 <tcp_new_port>
 801bbd0:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801bbd2:	2800      	cmp	r0, #0
 801bbd4:	d05e      	beq.n	801bc94 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801bbd6:	4b3c      	ldr	r3, [pc, #240]	; (801bcc8 <tcp_connect+0x134>)
 801bbd8:	4a3c      	ldr	r2, [pc, #240]	; (801bccc <tcp_connect+0x138>)
 801bbda:	6811      	ldr	r1, [r2, #0]
 801bbdc:	681a      	ldr	r2, [r3, #0]
 801bbde:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801bbe0:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801bbe4:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801bbe6:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801bbe8:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801bbea:	4b39      	ldr	r3, [pc, #228]	; (801bcd0 <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801bbec:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801bbee:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801bbf0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801bbf2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801bbf6:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801bbfe:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d037      	beq.n	801bc74 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801bc04:	2b28      	cmp	r3, #40	; 0x28
 801bc06:	d907      	bls.n	801bc18 <tcp_connect+0x84>
 801bc08:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801bc0c:	b292      	uxth	r2, r2
 801bc0e:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801bc12:	bf28      	it	cs
 801bc14:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801bc18:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801bc1a:	2102      	movs	r1, #2
 801bc1c:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801bc1e:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801bc20:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801bc24:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801bc28:	f003 fa90 	bl	801f14c <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801bc2c:	4605      	mov	r5, r0
 801bc2e:	b9f8      	cbnz	r0, 801bc70 <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801bc30:	2302      	movs	r3, #2
 801bc32:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801bc34:	b187      	cbz	r7, 801bc58 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801bc36:	4a27      	ldr	r2, [pc, #156]	; (801bcd4 <tcp_connect+0x140>)
 801bc38:	6813      	ldr	r3, [r2, #0]
 801bc3a:	42a3      	cmp	r3, r4
 801bc3c:	d01d      	beq.n	801bc7a <tcp_connect+0xe6>
 801bc3e:	b15b      	cbz	r3, 801bc58 <tcp_connect+0xc4>
 801bc40:	68da      	ldr	r2, [r3, #12]
 801bc42:	42a2      	cmp	r2, r4
 801bc44:	d006      	beq.n	801bc54 <tcp_connect+0xc0>
 801bc46:	4613      	mov	r3, r2
 801bc48:	e7f9      	b.n	801bc3e <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bc4a:	1d20      	adds	r0, r4, #4
 801bc4c:	f006 fee4 	bl	8022a18 <ip4_route>
 801bc50:	4605      	mov	r5, r0
 801bc52:	e7b3      	b.n	801bbbc <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801bc54:	68e2      	ldr	r2, [r4, #12]
 801bc56:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801bc58:	4b1f      	ldr	r3, [pc, #124]	; (801bcd8 <tcp_connect+0x144>)
 801bc5a:	681a      	ldr	r2, [r3, #0]
 801bc5c:	601c      	str	r4, [r3, #0]
 801bc5e:	60e2      	str	r2, [r4, #12]
 801bc60:	f003 ffbc 	bl	801fbdc <tcp_timer_needed>
 801bc64:	4b1d      	ldr	r3, [pc, #116]	; (801bcdc <tcp_connect+0x148>)
 801bc66:	2201      	movs	r2, #1
    tcp_output(pcb);
 801bc68:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801bc6a:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801bc6c:	f003 fc8a 	bl	801f584 <tcp_output>
}
 801bc70:	4628      	mov	r0, r5
 801bc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc74:	f44f 7206 	mov.w	r2, #536	; 0x218
 801bc78:	e7ce      	b.n	801bc18 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801bc7a:	68e3      	ldr	r3, [r4, #12]
 801bc7c:	6013      	str	r3, [r2, #0]
 801bc7e:	e7eb      	b.n	801bc58 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801bc80:	4b17      	ldr	r3, [pc, #92]	; (801bce0 <tcp_connect+0x14c>)
 801bc82:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801bc86:	4917      	ldr	r1, [pc, #92]	; (801bce4 <tcp_connect+0x150>)
 801bc88:	f06f 0509 	mvn.w	r5, #9
 801bc8c:	4816      	ldr	r0, [pc, #88]	; (801bce8 <tcp_connect+0x154>)
 801bc8e:	f009 fb91 	bl	80253b4 <iprintf>
 801bc92:	e7ed      	b.n	801bc70 <tcp_connect+0xdc>
      return ERR_BUF;
 801bc94:	f06f 0501 	mvn.w	r5, #1
 801bc98:	e7ea      	b.n	801bc70 <tcp_connect+0xdc>
    return ERR_RTE;
 801bc9a:	f06f 0503 	mvn.w	r5, #3
 801bc9e:	e7e7      	b.n	801bc70 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801bca0:	4b0f      	ldr	r3, [pc, #60]	; (801bce0 <tcp_connect+0x14c>)
 801bca2:	f240 4236 	movw	r2, #1078	; 0x436
 801bca6:	4911      	ldr	r1, [pc, #68]	; (801bcec <tcp_connect+0x158>)
 801bca8:	f06f 050f 	mvn.w	r5, #15
 801bcac:	480e      	ldr	r0, [pc, #56]	; (801bce8 <tcp_connect+0x154>)
 801bcae:	f009 fb81 	bl	80253b4 <iprintf>
 801bcb2:	e7dd      	b.n	801bc70 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801bcb4:	4b0a      	ldr	r3, [pc, #40]	; (801bce0 <tcp_connect+0x14c>)
 801bcb6:	f240 4235 	movw	r2, #1077	; 0x435
 801bcba:	490d      	ldr	r1, [pc, #52]	; (801bcf0 <tcp_connect+0x15c>)
 801bcbc:	f06f 050f 	mvn.w	r5, #15
 801bcc0:	4809      	ldr	r0, [pc, #36]	; (801bce8 <tcp_connect+0x154>)
 801bcc2:	f009 fb77 	bl	80253b4 <iprintf>
 801bcc6:	e7d3      	b.n	801bc70 <tcp_connect+0xdc>
 801bcc8:	20000414 	.word	0x20000414
 801bccc:	2002e0cc 	.word	0x2002e0cc
 801bcd0:	08600860 	.word	0x08600860
 801bcd4:	2002e0c4 	.word	0x2002e0c4
 801bcd8:	2002e0bc 	.word	0x2002e0bc
 801bcdc:	2002e0c0 	.word	0x2002e0c0
 801bce0:	08043d8c 	.word	0x08043d8c
 801bce4:	08043f3c 	.word	0x08043f3c
 801bce8:	0802a008 	.word	0x0802a008
 801bcec:	08043f20 	.word	0x08043f20
 801bcf0:	08043f04 	.word	0x08043f04

0801bcf4 <tcp_segs_free>:
  while (seg != NULL) {
 801bcf4:	b170      	cbz	r0, 801bd14 <tcp_segs_free+0x20>
{
 801bcf6:	b538      	push	{r3, r4, r5, lr}
 801bcf8:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801bcfa:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801bcfc:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bcfe:	6868      	ldr	r0, [r5, #4]
 801bd00:	b108      	cbz	r0, 801bd06 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801bd02:	f7ff fa8d 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bd06:	4629      	mov	r1, r5
 801bd08:	2004      	movs	r0, #4
 801bd0a:	f7fe fd71 	bl	801a7f0 <memp_free>
  while (seg != NULL) {
 801bd0e:	2c00      	cmp	r4, #0
 801bd10:	d1f3      	bne.n	801bcfa <tcp_segs_free+0x6>
}
 801bd12:	bd38      	pop	{r3, r4, r5, pc}
 801bd14:	4770      	bx	lr
 801bd16:	bf00      	nop

0801bd18 <tcp_seg_free>:
  if (seg != NULL) {
 801bd18:	b158      	cbz	r0, 801bd32 <tcp_seg_free+0x1a>
{
 801bd1a:	b510      	push	{r4, lr}
 801bd1c:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801bd1e:	6840      	ldr	r0, [r0, #4]
 801bd20:	b108      	cbz	r0, 801bd26 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801bd22:	f7ff fa7d 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bd26:	4621      	mov	r1, r4
 801bd28:	2004      	movs	r0, #4
}
 801bd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801bd2e:	f7fe bd5f 	b.w	801a7f0 <memp_free>
 801bd32:	4770      	bx	lr

0801bd34 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801bd34:	b108      	cbz	r0, 801bd3a <tcp_setprio+0x6>
  pcb->prio = prio;
 801bd36:	7541      	strb	r1, [r0, #21]
}
 801bd38:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801bd3a:	4b03      	ldr	r3, [pc, #12]	; (801bd48 <tcp_setprio+0x14>)
 801bd3c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801bd40:	4902      	ldr	r1, [pc, #8]	; (801bd4c <tcp_setprio+0x18>)
 801bd42:	4803      	ldr	r0, [pc, #12]	; (801bd50 <tcp_setprio+0x1c>)
 801bd44:	f009 bb36 	b.w	80253b4 <iprintf>
 801bd48:	08043d8c 	.word	0x08043d8c
 801bd4c:	08043f6c 	.word	0x08043f6c
 801bd50:	0802a008 	.word	0x0802a008

0801bd54 <tcp_seg_copy>:
{
 801bd54:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801bd56:	4605      	mov	r5, r0
 801bd58:	b1a0      	cbz	r0, 801bd84 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801bd5a:	f240 6284 	movw	r2, #1668	; 0x684
 801bd5e:	490d      	ldr	r1, [pc, #52]	; (801bd94 <tcp_seg_copy+0x40>)
 801bd60:	2004      	movs	r0, #4
 801bd62:	f7fe fd0f 	bl	801a784 <memp_malloc_fn>
  if (cseg == NULL) {
 801bd66:	4604      	mov	r4, r0
 801bd68:	b150      	cbz	r0, 801bd80 <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801bd6a:	6868      	ldr	r0, [r5, #4]
 801bd6c:	6829      	ldr	r1, [r5, #0]
 801bd6e:	68aa      	ldr	r2, [r5, #8]
 801bd70:	68eb      	ldr	r3, [r5, #12]
 801bd72:	6060      	str	r0, [r4, #4]
 801bd74:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801bd76:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801bd78:	60a2      	str	r2, [r4, #8]
 801bd7a:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801bd7c:	f7ff fa6e 	bl	801b25c <pbuf_ref>
}
 801bd80:	4620      	mov	r0, r4
 801bd82:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801bd84:	4b03      	ldr	r3, [pc, #12]	; (801bd94 <tcp_seg_copy+0x40>)
 801bd86:	f240 6282 	movw	r2, #1666	; 0x682
 801bd8a:	4903      	ldr	r1, [pc, #12]	; (801bd98 <tcp_seg_copy+0x44>)
 801bd8c:	4803      	ldr	r0, [pc, #12]	; (801bd9c <tcp_seg_copy+0x48>)
 801bd8e:	f009 fb11 	bl	80253b4 <iprintf>
 801bd92:	e7e2      	b.n	801bd5a <tcp_seg_copy+0x6>
 801bd94:	08043d8c 	.word	0x08043d8c
 801bd98:	08043f88 	.word	0x08043f88
 801bd9c:	0802a008 	.word	0x0802a008

0801bda0 <tcp_arg>:
  if (pcb != NULL) {
 801bda0:	b100      	cbz	r0, 801bda4 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801bda2:	6101      	str	r1, [r0, #16]
}
 801bda4:	4770      	bx	lr
 801bda6:	bf00      	nop

0801bda8 <tcp_recv>:
  if (pcb != NULL) {
 801bda8:	b140      	cbz	r0, 801bdbc <tcp_recv+0x14>
{
 801bdaa:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801bdac:	7d03      	ldrb	r3, [r0, #20]
 801bdae:	4604      	mov	r4, r0
 801bdb0:	460d      	mov	r5, r1
 801bdb2:	2b01      	cmp	r3, #1
 801bdb4:	d003      	beq.n	801bdbe <tcp_recv+0x16>
    pcb->recv = recv;
 801bdb6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801bdba:	bd38      	pop	{r3, r4, r5, pc}
 801bdbc:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801bdbe:	4b05      	ldr	r3, [pc, #20]	; (801bdd4 <tcp_recv+0x2c>)
 801bdc0:	f240 72df 	movw	r2, #2015	; 0x7df
 801bdc4:	4904      	ldr	r1, [pc, #16]	; (801bdd8 <tcp_recv+0x30>)
 801bdc6:	4805      	ldr	r0, [pc, #20]	; (801bddc <tcp_recv+0x34>)
 801bdc8:	f009 faf4 	bl	80253b4 <iprintf>
    pcb->recv = recv;
 801bdcc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801bdd0:	bd38      	pop	{r3, r4, r5, pc}
 801bdd2:	bf00      	nop
 801bdd4:	08043d8c 	.word	0x08043d8c
 801bdd8:	08043fa4 	.word	0x08043fa4
 801bddc:	0802a008 	.word	0x0802a008

0801bde0 <tcp_sent>:
  if (pcb != NULL) {
 801bde0:	b140      	cbz	r0, 801bdf4 <tcp_sent+0x14>
{
 801bde2:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801bde4:	7d03      	ldrb	r3, [r0, #20]
 801bde6:	4604      	mov	r4, r0
 801bde8:	460d      	mov	r5, r1
 801bdea:	2b01      	cmp	r3, #1
 801bdec:	d003      	beq.n	801bdf6 <tcp_sent+0x16>
    pcb->sent = sent;
 801bdee:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801bdf2:	bd38      	pop	{r3, r4, r5, pc}
 801bdf4:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801bdf6:	4b05      	ldr	r3, [pc, #20]	; (801be0c <tcp_sent+0x2c>)
 801bdf8:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801bdfc:	4904      	ldr	r1, [pc, #16]	; (801be10 <tcp_sent+0x30>)
 801bdfe:	4805      	ldr	r0, [pc, #20]	; (801be14 <tcp_sent+0x34>)
 801be00:	f009 fad8 	bl	80253b4 <iprintf>
    pcb->sent = sent;
 801be04:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801be08:	bd38      	pop	{r3, r4, r5, pc}
 801be0a:	bf00      	nop
 801be0c:	08043d8c 	.word	0x08043d8c
 801be10:	08043fcc 	.word	0x08043fcc
 801be14:	0802a008 	.word	0x0802a008

0801be18 <tcp_err>:
  if (pcb != NULL) {
 801be18:	b140      	cbz	r0, 801be2c <tcp_err+0x14>
{
 801be1a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801be1c:	7d03      	ldrb	r3, [r0, #20]
 801be1e:	4604      	mov	r4, r0
 801be20:	460d      	mov	r5, r1
 801be22:	2b01      	cmp	r3, #1
 801be24:	d003      	beq.n	801be2e <tcp_err+0x16>
    pcb->errf = err;
 801be26:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801be2a:	bd38      	pop	{r3, r4, r5, pc}
 801be2c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801be2e:	4b05      	ldr	r3, [pc, #20]	; (801be44 <tcp_err+0x2c>)
 801be30:	f640 020d 	movw	r2, #2061	; 0x80d
 801be34:	4904      	ldr	r1, [pc, #16]	; (801be48 <tcp_err+0x30>)
 801be36:	4805      	ldr	r0, [pc, #20]	; (801be4c <tcp_err+0x34>)
 801be38:	f009 fabc 	bl	80253b4 <iprintf>
    pcb->errf = err;
 801be3c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801be40:	bd38      	pop	{r3, r4, r5, pc}
 801be42:	bf00      	nop
 801be44:	08043d8c 	.word	0x08043d8c
 801be48:	08043ff4 	.word	0x08043ff4
 801be4c:	0802a008 	.word	0x0802a008

0801be50 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801be50:	b118      	cbz	r0, 801be5a <tcp_accept+0xa>
 801be52:	7d03      	ldrb	r3, [r0, #20]
 801be54:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801be56:	bf08      	it	eq
 801be58:	6181      	streq	r1, [r0, #24]
}
 801be5a:	4770      	bx	lr

0801be5c <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801be5c:	b1a8      	cbz	r0, 801be8a <tcp_poll+0x2e>
{
 801be5e:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801be60:	7d03      	ldrb	r3, [r0, #20]
 801be62:	460e      	mov	r6, r1
 801be64:	4604      	mov	r4, r0
 801be66:	4615      	mov	r5, r2
 801be68:	2b01      	cmp	r3, #1
 801be6a:	d003      	beq.n	801be74 <tcp_poll+0x18>
  pcb->poll = poll;
 801be6c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801be70:	7765      	strb	r5, [r4, #29]
}
 801be72:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801be74:	4b08      	ldr	r3, [pc, #32]	; (801be98 <tcp_poll+0x3c>)
 801be76:	f640 023e 	movw	r2, #2110	; 0x83e
 801be7a:	4908      	ldr	r1, [pc, #32]	; (801be9c <tcp_poll+0x40>)
 801be7c:	4808      	ldr	r0, [pc, #32]	; (801bea0 <tcp_poll+0x44>)
 801be7e:	f009 fa99 	bl	80253b4 <iprintf>
  pcb->poll = poll;
 801be82:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801be86:	7765      	strb	r5, [r4, #29]
}
 801be88:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801be8a:	4b03      	ldr	r3, [pc, #12]	; (801be98 <tcp_poll+0x3c>)
 801be8c:	f640 023d 	movw	r2, #2109	; 0x83d
 801be90:	4904      	ldr	r1, [pc, #16]	; (801bea4 <tcp_poll+0x48>)
 801be92:	4803      	ldr	r0, [pc, #12]	; (801bea0 <tcp_poll+0x44>)
 801be94:	f009 ba8e 	b.w	80253b4 <iprintf>
 801be98:	08043d8c 	.word	0x08043d8c
 801be9c:	08044034 	.word	0x08044034
 801bea0:	0802a008 	.word	0x0802a008
 801bea4:	0804401c 	.word	0x0804401c

0801bea8 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801bea8:	2800      	cmp	r0, #0
 801beaa:	d041      	beq.n	801bf30 <tcp_pcb_purge+0x88>
{
 801beac:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801beae:	7d03      	ldrb	r3, [r0, #20]
 801beb0:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801beb2:	2b0a      	cmp	r3, #10
 801beb4:	d001      	beq.n	801beba <tcp_pcb_purge+0x12>
 801beb6:	2b01      	cmp	r3, #1
 801beb8:	d800      	bhi.n	801bebc <tcp_pcb_purge+0x14>
}
 801beba:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801bebc:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801bebe:	b118      	cbz	r0, 801bec8 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801bec0:	f7ff f9ae 	bl	801b220 <pbuf_free>
      pcb->refused_data = NULL;
 801bec4:	2300      	movs	r3, #0
 801bec6:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801bec8:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801beca:	b164      	cbz	r4, 801bee6 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801becc:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801bece:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bed0:	6870      	ldr	r0, [r6, #4]
 801bed2:	b108      	cbz	r0, 801bed8 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801bed4:	f7ff f9a4 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bed8:	4631      	mov	r1, r6
 801beda:	2004      	movs	r0, #4
 801bedc:	f7fe fc88 	bl	801a7f0 <memp_free>
  while (seg != NULL) {
 801bee0:	2c00      	cmp	r4, #0
 801bee2:	d1f3      	bne.n	801becc <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801bee4:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801bee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801beea:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801beec:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801beee:	b15c      	cbz	r4, 801bf08 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801bef0:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801bef2:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bef4:	6870      	ldr	r0, [r6, #4]
 801bef6:	b108      	cbz	r0, 801befc <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801bef8:	f7ff f992 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801befc:	4631      	mov	r1, r6
 801befe:	2004      	movs	r0, #4
 801bf00:	f7fe fc76 	bl	801a7f0 <memp_free>
  while (seg != NULL) {
 801bf04:	2c00      	cmp	r4, #0
 801bf06:	d1f3      	bne.n	801bef0 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801bf08:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801bf0a:	b15c      	cbz	r4, 801bf24 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801bf0c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801bf0e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bf10:	6870      	ldr	r0, [r6, #4]
 801bf12:	b108      	cbz	r0, 801bf18 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801bf14:	f7ff f984 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bf18:	4631      	mov	r1, r6
 801bf1a:	2004      	movs	r0, #4
 801bf1c:	f7fe fc68 	bl	801a7f0 <memp_free>
  while (seg != NULL) {
 801bf20:	2c00      	cmp	r4, #0
 801bf22:	d1f3      	bne.n	801bf0c <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801bf24:	2300      	movs	r3, #0
 801bf26:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801bf2a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801bf2e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801bf30:	4b03      	ldr	r3, [pc, #12]	; (801bf40 <tcp_pcb_purge+0x98>)
 801bf32:	f640 0251 	movw	r2, #2129	; 0x851
 801bf36:	4903      	ldr	r1, [pc, #12]	; (801bf44 <tcp_pcb_purge+0x9c>)
 801bf38:	4803      	ldr	r0, [pc, #12]	; (801bf48 <tcp_pcb_purge+0xa0>)
 801bf3a:	f009 ba3b 	b.w	80253b4 <iprintf>
 801bf3e:	bf00      	nop
 801bf40:	08043d8c 	.word	0x08043d8c
 801bf44:	08044054 	.word	0x08044054
 801bf48:	0802a008 	.word	0x0802a008

0801bf4c <tcp_slowtmr>:
{
 801bf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801bf50:	4da9      	ldr	r5, [pc, #676]	; (801c1f8 <tcp_slowtmr+0x2ac>)
{
 801bf52:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801bf54:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801c224 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801bf58:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bf5a:	4fa8      	ldr	r7, [pc, #672]	; (801c1fc <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801bf5c:	3301      	adds	r3, #1
 801bf5e:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801bf60:	f89b 3000 	ldrb.w	r3, [fp]
 801bf64:	3301      	adds	r3, #1
 801bf66:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801bf6a:	4ba5      	ldr	r3, [pc, #660]	; (801c200 <tcp_slowtmr+0x2b4>)
 801bf6c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801bf6e:	2c00      	cmp	r4, #0
 801bf70:	f000 808a 	beq.w	801c088 <tcp_slowtmr+0x13c>
  prev = NULL;
 801bf74:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bf76:	46b1      	mov	r9, r6
 801bf78:	7d23      	ldrb	r3, [r4, #20]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	f000 80fc 	beq.w	801c178 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801bf80:	2b01      	cmp	r3, #1
 801bf82:	f000 8104 	beq.w	801c18e <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801bf86:	2b0a      	cmp	r3, #10
 801bf88:	f000 810c 	beq.w	801c1a4 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801bf8c:	f89b 2000 	ldrb.w	r2, [fp]
 801bf90:	7fa3      	ldrb	r3, [r4, #30]
 801bf92:	4293      	cmp	r3, r2
 801bf94:	f000 8113 	beq.w	801c1be <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801bf98:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801bf9a:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801bf9c:	2b02      	cmp	r3, #2
 801bf9e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801bfa2:	f000 8112 	beq.w	801c1ca <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801bfa6:	2a0b      	cmp	r2, #11
 801bfa8:	f240 80cb 	bls.w	801c142 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801bfac:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801bfb0:	2b06      	cmp	r3, #6
 801bfb2:	f000 80b7 	beq.w	801c124 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801bfb6:	f894 a009 	ldrb.w	sl, [r4, #9]
 801bfba:	f01a 0a08 	ands.w	sl, sl, #8
 801bfbe:	d01d      	beq.n	801bffc <tcp_slowtmr+0xb0>
 801bfc0:	2b04      	cmp	r3, #4
 801bfc2:	d007      	beq.n	801bfd4 <tcp_slowtmr+0x88>
 801bfc4:	f1a3 0307 	sub.w	r3, r3, #7
 801bfc8:	fab3 f383 	clz	r3, r3
 801bfcc:	095b      	lsrs	r3, r3, #5
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	f000 80b4 	beq.w	801c13c <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801bfd4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801bfd8:	4b8a      	ldr	r3, [pc, #552]	; (801c204 <tcp_slowtmr+0x2b8>)
 801bfda:	488b      	ldr	r0, [pc, #556]	; (801c208 <tcp_slowtmr+0x2bc>)
 801bfdc:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bfde:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801bfe0:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bfe4:	6a20      	ldr	r0, [r4, #32]
 801bfe6:	1a12      	subs	r2, r2, r0
 801bfe8:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801bfec:	f240 8160 	bls.w	801c2b0 <tcp_slowtmr+0x364>
        ++pcb_remove;
 801bff0:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801bff4:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801bff8:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801bffc:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801bffe:	b156      	cbz	r6, 801c016 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801c000:	682b      	ldr	r3, [r5, #0]
 801c002:	6a22      	ldr	r2, [r4, #32]
 801c004:	1a9a      	subs	r2, r3, r2
 801c006:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801c00a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801c00e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801c012:	f080 80e1 	bcs.w	801c1d8 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801c016:	7d23      	ldrb	r3, [r4, #20]
 801c018:	2b03      	cmp	r3, #3
 801c01a:	d057      	beq.n	801c0cc <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801c01c:	2b09      	cmp	r3, #9
 801c01e:	d15a      	bne.n	801c0d6 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c020:	682b      	ldr	r3, [r5, #0]
 801c022:	6a22      	ldr	r2, [r4, #32]
 801c024:	1a9b      	subs	r3, r3, r2
 801c026:	2bf0      	cmp	r3, #240	; 0xf0
 801c028:	d955      	bls.n	801c0d6 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801c02a:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801c02c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801c030:	f7ff ff3a 	bl	801bea8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c034:	4b72      	ldr	r3, [pc, #456]	; (801c200 <tcp_slowtmr+0x2b4>)
 801c036:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801c038:	f1b9 0f00 	cmp.w	r9, #0
 801c03c:	f000 817e 	beq.w	801c33c <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c040:	42a3      	cmp	r3, r4
 801c042:	f000 81df 	beq.w	801c404 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801c046:	68e3      	ldr	r3, [r4, #12]
 801c048:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801c04c:	f1ba 0f00 	cmp.w	sl, #0
 801c050:	f040 8147 	bne.w	801c2e2 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c054:	7d23      	ldrb	r3, [r4, #20]
 801c056:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801c058:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c05c:	f000 8153 	beq.w	801c306 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801c060:	4621      	mov	r1, r4
 801c062:	2002      	movs	r0, #2
 801c064:	f7fe fbc4 	bl	801a7f0 <memp_free>
      tcp_active_pcbs_changed = 0;
 801c068:	4c68      	ldr	r4, [pc, #416]	; (801c20c <tcp_slowtmr+0x2c0>)
 801c06a:	2300      	movs	r3, #0
 801c06c:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801c06e:	b13e      	cbz	r6, 801c080 <tcp_slowtmr+0x134>
 801c070:	f06f 010c 	mvn.w	r1, #12
 801c074:	4650      	mov	r0, sl
 801c076:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801c078:	7823      	ldrb	r3, [r4, #0]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	f47f af75 	bne.w	801bf6a <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801c080:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801c082:	2c00      	cmp	r4, #0
 801c084:	f47f af78 	bne.w	801bf78 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801c088:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801c228 <tcp_slowtmr+0x2dc>
 801c08c:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801c090:	b1cc      	cbz	r4, 801c0c6 <tcp_slowtmr+0x17a>
  prev = NULL;
 801c092:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c094:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801c1fc <tcp_slowtmr+0x2b0>
 801c098:	f8df a190 	ldr.w	sl, [pc, #400]	; 801c22c <tcp_slowtmr+0x2e0>
 801c09c:	4f5c      	ldr	r7, [pc, #368]	; (801c210 <tcp_slowtmr+0x2c4>)
 801c09e:	7d23      	ldrb	r3, [r4, #20]
 801c0a0:	2b0a      	cmp	r3, #10
 801c0a2:	d006      	beq.n	801c0b2 <tcp_slowtmr+0x166>
 801c0a4:	4643      	mov	r3, r8
 801c0a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801c0aa:	4651      	mov	r1, sl
 801c0ac:	4638      	mov	r0, r7
 801c0ae:	f009 f981 	bl	80253b4 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c0b2:	682b      	ldr	r3, [r5, #0]
 801c0b4:	6a22      	ldr	r2, [r4, #32]
 801c0b6:	1a9b      	subs	r3, r3, r2
 801c0b8:	2bf0      	cmp	r3, #240	; 0xf0
 801c0ba:	f200 80d4 	bhi.w	801c266 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801c0be:	4626      	mov	r6, r4
 801c0c0:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801c0c2:	2c00      	cmp	r4, #0
 801c0c4:	d1eb      	bne.n	801c09e <tcp_slowtmr+0x152>
}
 801c0c6:	b007      	add	sp, #28
 801c0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c0cc:	682b      	ldr	r3, [r5, #0]
 801c0ce:	6a22      	ldr	r2, [r4, #32]
 801c0d0:	1a9b      	subs	r3, r3, r2
 801c0d2:	2b28      	cmp	r3, #40	; 0x28
 801c0d4:	d8a9      	bhi.n	801c02a <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801c0d6:	f1b8 0f00 	cmp.w	r8, #0
 801c0da:	d1a6      	bne.n	801c02a <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801c0dc:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801c0de:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801c0e0:	3301      	adds	r3, #1
      pcb = pcb->next;
 801c0e2:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801c0e4:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801c0e6:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801c0e8:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801c0ea:	d815      	bhi.n	801c118 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801c0ec:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801c20c <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801c0f0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801c0f4:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801c0f8:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	f000 80ce 	beq.w	801c29e <tcp_slowtmr+0x352>
 801c102:	4621      	mov	r1, r4
 801c104:	6920      	ldr	r0, [r4, #16]
 801c106:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801c108:	f899 3000 	ldrb.w	r3, [r9]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	f47f af2c 	bne.w	801bf6a <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801c112:	2800      	cmp	r0, #0
 801c114:	f000 80c3 	beq.w	801c29e <tcp_slowtmr+0x352>
 801c118:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801c11a:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801c11c:	2c00      	cmp	r4, #0
 801c11e:	f47f af2b 	bne.w	801bf78 <tcp_slowtmr+0x2c>
 801c122:	e7b1      	b.n	801c088 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801c124:	8b63      	ldrh	r3, [r4, #26]
 801c126:	06db      	lsls	r3, r3, #27
 801c128:	d508      	bpl.n	801c13c <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c12a:	682b      	ldr	r3, [r5, #0]
 801c12c:	6a22      	ldr	r2, [r4, #32]
 801c12e:	1a9b      	subs	r3, r3, r2
 801c130:	2b28      	cmp	r3, #40	; 0x28
 801c132:	d903      	bls.n	801c13c <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801c134:	f108 0801 	add.w	r8, r8, #1
 801c138:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801c13c:	f04f 0a00 	mov.w	sl, #0
 801c140:	e75c      	b.n	801bffc <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801c142:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801c146:	f1b8 0f00 	cmp.w	r8, #0
 801c14a:	d071      	beq.n	801c230 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801c14c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c14e:	b133      	cbz	r3, 801c15e <tcp_slowtmr+0x212>
 801c150:	463b      	mov	r3, r7
 801c152:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801c156:	492f      	ldr	r1, [pc, #188]	; (801c214 <tcp_slowtmr+0x2c8>)
 801c158:	482d      	ldr	r0, [pc, #180]	; (801c210 <tcp_slowtmr+0x2c4>)
 801c15a:	f009 f92b 	bl	80253b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801c15e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c160:	2b00      	cmp	r3, #0
 801c162:	f000 8171 	beq.w	801c448 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801c166:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801c16a:	2b0b      	cmp	r3, #11
 801c16c:	f240 80d2 	bls.w	801c314 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801c170:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801c172:	f04f 0801 	mov.w	r8, #1
 801c176:	e71b      	b.n	801bfb0 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801c178:	463b      	mov	r3, r7
 801c17a:	f240 42be 	movw	r2, #1214	; 0x4be
 801c17e:	4926      	ldr	r1, [pc, #152]	; (801c218 <tcp_slowtmr+0x2cc>)
 801c180:	4823      	ldr	r0, [pc, #140]	; (801c210 <tcp_slowtmr+0x2c4>)
 801c182:	f009 f917 	bl	80253b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801c186:	7d23      	ldrb	r3, [r4, #20]
 801c188:	2b01      	cmp	r3, #1
 801c18a:	f47f aefc 	bne.w	801bf86 <tcp_slowtmr+0x3a>
 801c18e:	463b      	mov	r3, r7
 801c190:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801c194:	4921      	ldr	r1, [pc, #132]	; (801c21c <tcp_slowtmr+0x2d0>)
 801c196:	481e      	ldr	r0, [pc, #120]	; (801c210 <tcp_slowtmr+0x2c4>)
 801c198:	f009 f90c 	bl	80253b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801c19c:	7d23      	ldrb	r3, [r4, #20]
 801c19e:	2b0a      	cmp	r3, #10
 801c1a0:	f47f aef4 	bne.w	801bf8c <tcp_slowtmr+0x40>
 801c1a4:	463b      	mov	r3, r7
 801c1a6:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801c1aa:	491d      	ldr	r1, [pc, #116]	; (801c220 <tcp_slowtmr+0x2d4>)
 801c1ac:	4818      	ldr	r0, [pc, #96]	; (801c210 <tcp_slowtmr+0x2c4>)
 801c1ae:	f009 f901 	bl	80253b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801c1b2:	f89b 2000 	ldrb.w	r2, [fp]
 801c1b6:	7fa3      	ldrb	r3, [r4, #30]
 801c1b8:	4293      	cmp	r3, r2
 801c1ba:	f47f aeed 	bne.w	801bf98 <tcp_slowtmr+0x4c>
      continue;
 801c1be:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801c1c0:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801c1c2:	2c00      	cmp	r4, #0
 801c1c4:	f47f aed8 	bne.w	801bf78 <tcp_slowtmr+0x2c>
 801c1c8:	e75e      	b.n	801c088 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801c1ca:	2a05      	cmp	r2, #5
 801c1cc:	d9b9      	bls.n	801c142 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801c1ce:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801c1d2:	f04f 0801 	mov.w	r8, #1
 801c1d6:	e711      	b.n	801bffc <tcp_slowtmr+0xb0>
 801c1d8:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801c1da:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801c1dc:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801c1de:	6860      	ldr	r0, [r4, #4]
 801c1e0:	b108      	cbz	r0, 801c1e6 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801c1e2:	f7ff f81d 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c1e6:	4621      	mov	r1, r4
 801c1e8:	2004      	movs	r0, #4
 801c1ea:	f7fe fb01 	bl	801a7f0 <memp_free>
  while (seg != NULL) {
 801c1ee:	2e00      	cmp	r6, #0
 801c1f0:	d1f3      	bne.n	801c1da <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801c1f2:	9c05      	ldr	r4, [sp, #20]
 801c1f4:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801c1f6:	e70e      	b.n	801c016 <tcp_slowtmr+0xca>
 801c1f8:	2002e0cc 	.word	0x2002e0cc
 801c1fc:	08043d8c 	.word	0x08043d8c
 801c200:	2002e0bc 	.word	0x2002e0bc
 801c204:	000a4cb8 	.word	0x000a4cb8
 801c208:	10624dd3 	.word	0x10624dd3
 801c20c:	2002e0c0 	.word	0x2002e0c0
 801c210:	0802a008 	.word	0x0802a008
 801c214:	080440f8 	.word	0x080440f8
 801c218:	08044070 	.word	0x08044070
 801c21c:	0804409c 	.word	0x0804409c
 801c220:	080440c8 	.word	0x080440c8
 801c224:	2002e0d1 	.word	0x2002e0d1
 801c228:	2002e0d4 	.word	0x2002e0d4
 801c22c:	080441bc 	.word	0x080441bc
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801c230:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801c234:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801c238:	b291      	uxth	r1, r2
 801c23a:	4281      	cmp	r1, r0
 801c23c:	d802      	bhi.n	801c244 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801c23e:	1c4a      	adds	r2, r1, #1
 801c240:	b212      	sxth	r2, r2
 801c242:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801c244:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801c248:	4291      	cmp	r1, r2
 801c24a:	f73f aeb1 	bgt.w	801bfb0 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801c24e:	4620      	mov	r0, r4
 801c250:	f003 f85a 	bl	801f308 <tcp_rexmit_rto_prepare>
 801c254:	2800      	cmp	r0, #0
 801c256:	f000 80a0 	beq.w	801c39a <tcp_slowtmr+0x44e>
 801c25a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	f000 8098 	beq.w	801c392 <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801c262:	7d23      	ldrb	r3, [r4, #20]
 801c264:	e6a4      	b.n	801bfb0 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801c266:	4620      	mov	r0, r4
 801c268:	f7ff fe1e 	bl	801bea8 <tcp_pcb_purge>
      if (prev != NULL) {
 801c26c:	2e00      	cmp	r6, #0
 801c26e:	f000 80d1 	beq.w	801c414 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801c272:	f8d9 3000 	ldr.w	r3, [r9]
 801c276:	42a3      	cmp	r3, r4
 801c278:	f000 80ee 	beq.w	801c458 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801c27c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801c280:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c284:	7d23      	ldrb	r3, [r4, #20]
 801c286:	2b01      	cmp	r3, #1
 801c288:	f000 80d7 	beq.w	801c43a <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801c28c:	4621      	mov	r1, r4
      pcb = pcb->next;
 801c28e:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801c290:	2002      	movs	r0, #2
 801c292:	f7fe faad 	bl	801a7f0 <memp_free>
  while (pcb != NULL) {
 801c296:	2c00      	cmp	r4, #0
 801c298:	f47f af01 	bne.w	801c09e <tcp_slowtmr+0x152>
 801c29c:	e713      	b.n	801c0c6 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801c29e:	4620      	mov	r0, r4
 801c2a0:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801c2a2:	4634      	mov	r4, r6
          tcp_output(prev);
 801c2a4:	f003 f96e 	bl	801f584 <tcp_output>
  while (pcb != NULL) {
 801c2a8:	2c00      	cmp	r4, #0
 801c2aa:	f47f ae65 	bne.w	801bf78 <tcp_slowtmr+0x2c>
 801c2ae:	e6eb      	b.n	801c088 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801c2b0:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801c2b4:	4870      	ldr	r0, [pc, #448]	; (801c478 <tcp_slowtmr+0x52c>)
 801c2b6:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801c2ba:	4b70      	ldr	r3, [pc, #448]	; (801c47c <tcp_slowtmr+0x530>)
 801c2bc:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c2c0:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801c2c4:	f67f af3a 	bls.w	801c13c <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801c2c8:	4620      	mov	r0, r4
 801c2ca:	f003 fb91 	bl	801f9f0 <tcp_keepalive>
        if (err == ERR_OK) {
 801c2ce:	2800      	cmp	r0, #0
 801c2d0:	f47f af34 	bne.w	801c13c <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801c2d4:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801c2d8:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801c2da:	3301      	adds	r3, #1
 801c2dc:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801c2e0:	e68c      	b.n	801bffc <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c2e2:	8b23      	ldrh	r3, [r4, #24]
 801c2e4:	4620      	mov	r0, r4
 801c2e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c2e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801c2ea:	9302      	str	r3, [sp, #8]
 801c2ec:	8ae3      	ldrh	r3, [r4, #22]
 801c2ee:	9301      	str	r3, [sp, #4]
 801c2f0:	1d23      	adds	r3, r4, #4
 801c2f2:	9300      	str	r3, [sp, #0]
 801c2f4:	4623      	mov	r3, r4
 801c2f6:	f003 f8cb 	bl	801f490 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c2fa:	7d23      	ldrb	r3, [r4, #20]
 801c2fc:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801c2fe:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c302:	f47f aead 	bne.w	801c060 <tcp_slowtmr+0x114>
 801c306:	463b      	mov	r3, r7
 801c308:	22d4      	movs	r2, #212	; 0xd4
 801c30a:	495d      	ldr	r1, [pc, #372]	; (801c480 <tcp_slowtmr+0x534>)
 801c30c:	485d      	ldr	r0, [pc, #372]	; (801c484 <tcp_slowtmr+0x538>)
 801c30e:	f009 f851 	bl	80253b4 <iprintf>
 801c312:	e6a5      	b.n	801c060 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801c314:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801c318:	4a5b      	ldr	r2, [pc, #364]	; (801c488 <tcp_slowtmr+0x53c>)
 801c31a:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801c31c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801c320:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801c324:	4293      	cmp	r3, r2
 801c326:	d216      	bcs.n	801c356 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801c328:	3301      	adds	r3, #1
 801c32a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801c32c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801c32e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801c332:	d210      	bcs.n	801c356 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801c334:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801c336:	f04f 0800 	mov.w	r8, #0
 801c33a:	e639      	b.n	801bfb0 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801c33c:	42a3      	cmp	r3, r4
 801c33e:	d006      	beq.n	801c34e <tcp_slowtmr+0x402>
 801c340:	463b      	mov	r3, r7
 801c342:	f240 5271 	movw	r2, #1393	; 0x571
 801c346:	4951      	ldr	r1, [pc, #324]	; (801c48c <tcp_slowtmr+0x540>)
 801c348:	484e      	ldr	r0, [pc, #312]	; (801c484 <tcp_slowtmr+0x538>)
 801c34a:	f009 f833 	bl	80253b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 801c34e:	68e3      	ldr	r3, [r4, #12]
 801c350:	4a4f      	ldr	r2, [pc, #316]	; (801c490 <tcp_slowtmr+0x544>)
 801c352:	6013      	str	r3, [r2, #0]
 801c354:	e67a      	b.n	801c04c <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801c356:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801c35a:	b936      	cbnz	r6, 801c36a <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801c35c:	4620      	mov	r0, r4
 801c35e:	f003 fb6d 	bl	801fa3c <tcp_zero_window_probe>
 801c362:	b140      	cbz	r0, 801c376 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801c364:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801c366:	7d23      	ldrb	r3, [r4, #20]
 801c368:	e622      	b.n	801bfb0 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801c36a:	4631      	mov	r1, r6
 801c36c:	4620      	mov	r0, r4
 801c36e:	f002 fe17 	bl	801efa0 <tcp_split_unsent_seg>
 801c372:	2800      	cmp	r0, #0
 801c374:	d078      	beq.n	801c468 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801c376:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801c37a:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801c37e:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801c380:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801c384:	f63f af6d 	bhi.w	801c262 <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801c388:	3301      	adds	r3, #1
 801c38a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801c38e:	7d23      	ldrb	r3, [r4, #20]
 801c390:	e60e      	b.n	801bfb0 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801c392:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c394:	2b00      	cmp	r3, #0
 801c396:	f43f af64 	beq.w	801c262 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801c39a:	7d23      	ldrb	r3, [r4, #20]
 801c39c:	2b02      	cmp	r3, #2
 801c39e:	d014      	beq.n	801c3ca <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801c3a0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801c3a4:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801c3a8:	2a0c      	cmp	r2, #12
 801c3aa:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801c3ae:	bf28      	it	cs
 801c3b0:	220c      	movcs	r2, #12
 801c3b2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801c3b6:	4937      	ldr	r1, [pc, #220]	; (801c494 <tcp_slowtmr+0x548>)
 801c3b8:	5c8a      	ldrb	r2, [r1, r2]
 801c3ba:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801c3bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c3c0:	4293      	cmp	r3, r2
 801c3c2:	bfa8      	it	ge
 801c3c4:	4613      	movge	r3, r2
 801c3c6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801c3ca:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801c3ce:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801c3d0:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c3d4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801c3d6:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801c3d8:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c3dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801c3e0:	bf28      	it	cs
 801c3e2:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c3e4:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c3e6:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801c3ea:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c3ee:	bf88      	it	hi
 801c3f0:	4613      	movhi	r3, r2
 801c3f2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801c3f6:	2300      	movs	r3, #0
 801c3f8:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801c3fa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801c3fe:	f003 faab 	bl	801f958 <tcp_rexmit_rto_commit>
 801c402:	e72e      	b.n	801c262 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c404:	463b      	mov	r3, r7
 801c406:	f240 526d 	movw	r2, #1389	; 0x56d
 801c40a:	4923      	ldr	r1, [pc, #140]	; (801c498 <tcp_slowtmr+0x54c>)
 801c40c:	481d      	ldr	r0, [pc, #116]	; (801c484 <tcp_slowtmr+0x538>)
 801c40e:	f008 ffd1 	bl	80253b4 <iprintf>
 801c412:	e618      	b.n	801c046 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801c414:	f8d9 3000 	ldr.w	r3, [r9]
 801c418:	42a3      	cmp	r3, r4
 801c41a:	d006      	beq.n	801c42a <tcp_slowtmr+0x4de>
 801c41c:	4643      	mov	r3, r8
 801c41e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801c422:	491e      	ldr	r1, [pc, #120]	; (801c49c <tcp_slowtmr+0x550>)
 801c424:	4638      	mov	r0, r7
 801c426:	f008 ffc5 	bl	80253b4 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c42a:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801c42c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c430:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801c432:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c436:	f47f af29 	bne.w	801c28c <tcp_slowtmr+0x340>
 801c43a:	4643      	mov	r3, r8
 801c43c:	22d4      	movs	r2, #212	; 0xd4
 801c43e:	4910      	ldr	r1, [pc, #64]	; (801c480 <tcp_slowtmr+0x534>)
 801c440:	4638      	mov	r0, r7
 801c442:	f008 ffb7 	bl	80253b4 <iprintf>
 801c446:	e721      	b.n	801c28c <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801c448:	463b      	mov	r3, r7
 801c44a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801c44e:	4914      	ldr	r1, [pc, #80]	; (801c4a0 <tcp_slowtmr+0x554>)
 801c450:	480c      	ldr	r0, [pc, #48]	; (801c484 <tcp_slowtmr+0x538>)
 801c452:	f008 ffaf 	bl	80253b4 <iprintf>
 801c456:	e686      	b.n	801c166 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801c458:	4643      	mov	r3, r8
 801c45a:	f240 52af 	movw	r2, #1455	; 0x5af
 801c45e:	4911      	ldr	r1, [pc, #68]	; (801c4a4 <tcp_slowtmr+0x558>)
 801c460:	4638      	mov	r0, r7
 801c462:	f008 ffa7 	bl	80253b4 <iprintf>
 801c466:	e709      	b.n	801c27c <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801c468:	4620      	mov	r0, r4
 801c46a:	f003 f88b 	bl	801f584 <tcp_output>
 801c46e:	2800      	cmp	r0, #0
 801c470:	d181      	bne.n	801c376 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801c472:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801c474:	7d23      	ldrb	r3, [r4, #20]
 801c476:	e59b      	b.n	801bfb0 <tcp_slowtmr+0x64>
 801c478:	000124f8 	.word	0x000124f8
 801c47c:	10624dd3 	.word	0x10624dd3
 801c480:	08043dc8 	.word	0x08043dc8
 801c484:	0802a008 	.word	0x0802a008
 801c488:	08044480 	.word	0x08044480
 801c48c:	08044190 	.word	0x08044190
 801c490:	2002e0bc 	.word	0x2002e0bc
 801c494:	08044460 	.word	0x08044460
 801c498:	08044164 	.word	0x08044164
 801c49c:	08044214 	.word	0x08044214
 801c4a0:	0804412c 	.word	0x0804412c
 801c4a4:	080441ec 	.word	0x080441ec

0801c4a8 <tcp_pcb_remove>:
{
 801c4a8:	b538      	push	{r3, r4, r5, lr}
 801c4aa:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c4ac:	460c      	mov	r4, r1
 801c4ae:	2900      	cmp	r1, #0
 801c4b0:	d04a      	beq.n	801c548 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c4b2:	2d00      	cmp	r5, #0
 801c4b4:	d051      	beq.n	801c55a <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801c4b6:	682b      	ldr	r3, [r5, #0]
 801c4b8:	42a3      	cmp	r3, r4
 801c4ba:	d032      	beq.n	801c522 <tcp_pcb_remove+0x7a>
 801c4bc:	b12b      	cbz	r3, 801c4ca <tcp_pcb_remove+0x22>
 801c4be:	68da      	ldr	r2, [r3, #12]
 801c4c0:	42a2      	cmp	r2, r4
 801c4c2:	d03e      	beq.n	801c542 <tcp_pcb_remove+0x9a>
 801c4c4:	4613      	mov	r3, r2
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d1f9      	bne.n	801c4be <tcp_pcb_remove+0x16>
 801c4ca:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801c4cc:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801c4ce:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801c4d0:	f7ff fcea 	bl	801bea8 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801c4d4:	7d23      	ldrb	r3, [r4, #20]
 801c4d6:	2b0a      	cmp	r3, #10
 801c4d8:	d02d      	beq.n	801c536 <tcp_pcb_remove+0x8e>
 801c4da:	2b01      	cmp	r3, #1
 801c4dc:	d01d      	beq.n	801c51a <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801c4de:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801c4e0:	07da      	lsls	r2, r3, #31
 801c4e2:	d421      	bmi.n	801c528 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c4e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c4e6:	b133      	cbz	r3, 801c4f6 <tcp_pcb_remove+0x4e>
 801c4e8:	4b20      	ldr	r3, [pc, #128]	; (801c56c <tcp_pcb_remove+0xc4>)
 801c4ea:	f640 0293 	movw	r2, #2195	; 0x893
 801c4ee:	4920      	ldr	r1, [pc, #128]	; (801c570 <tcp_pcb_remove+0xc8>)
 801c4f0:	4820      	ldr	r0, [pc, #128]	; (801c574 <tcp_pcb_remove+0xcc>)
 801c4f2:	f008 ff5f 	bl	80253b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801c4f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c4f8:	b133      	cbz	r3, 801c508 <tcp_pcb_remove+0x60>
 801c4fa:	4b1c      	ldr	r3, [pc, #112]	; (801c56c <tcp_pcb_remove+0xc4>)
 801c4fc:	f640 0294 	movw	r2, #2196	; 0x894
 801c500:	491d      	ldr	r1, [pc, #116]	; (801c578 <tcp_pcb_remove+0xd0>)
 801c502:	481c      	ldr	r0, [pc, #112]	; (801c574 <tcp_pcb_remove+0xcc>)
 801c504:	f008 ff56 	bl	80253b4 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801c508:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801c50a:	b133      	cbz	r3, 801c51a <tcp_pcb_remove+0x72>
 801c50c:	4b17      	ldr	r3, [pc, #92]	; (801c56c <tcp_pcb_remove+0xc4>)
 801c50e:	f640 0296 	movw	r2, #2198	; 0x896
 801c512:	491a      	ldr	r1, [pc, #104]	; (801c57c <tcp_pcb_remove+0xd4>)
 801c514:	4817      	ldr	r0, [pc, #92]	; (801c574 <tcp_pcb_remove+0xcc>)
 801c516:	f008 ff4d 	bl	80253b4 <iprintf>
  pcb->state = CLOSED;
 801c51a:	2300      	movs	r3, #0
 801c51c:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801c51e:	82e3      	strh	r3, [r4, #22]
}
 801c520:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801c522:	68e3      	ldr	r3, [r4, #12]
 801c524:	602b      	str	r3, [r5, #0]
 801c526:	e7d0      	b.n	801c4ca <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801c528:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801c52c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801c52e:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801c530:	f003 f828 	bl	801f584 <tcp_output>
  if (pcb->state != LISTEN) {
 801c534:	7d23      	ldrb	r3, [r4, #20]
 801c536:	2b01      	cmp	r3, #1
 801c538:	d0ef      	beq.n	801c51a <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c53a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d1d3      	bne.n	801c4e8 <tcp_pcb_remove+0x40>
 801c540:	e7d9      	b.n	801c4f6 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801c542:	68e2      	ldr	r2, [r4, #12]
 801c544:	60da      	str	r2, [r3, #12]
 801c546:	e7c0      	b.n	801c4ca <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c548:	4b08      	ldr	r3, [pc, #32]	; (801c56c <tcp_pcb_remove+0xc4>)
 801c54a:	f640 0283 	movw	r2, #2179	; 0x883
 801c54e:	490c      	ldr	r1, [pc, #48]	; (801c580 <tcp_pcb_remove+0xd8>)
 801c550:	4808      	ldr	r0, [pc, #32]	; (801c574 <tcp_pcb_remove+0xcc>)
 801c552:	f008 ff2f 	bl	80253b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c556:	2d00      	cmp	r5, #0
 801c558:	d1ad      	bne.n	801c4b6 <tcp_pcb_remove+0xe>
 801c55a:	4b04      	ldr	r3, [pc, #16]	; (801c56c <tcp_pcb_remove+0xc4>)
 801c55c:	f640 0284 	movw	r2, #2180	; 0x884
 801c560:	4908      	ldr	r1, [pc, #32]	; (801c584 <tcp_pcb_remove+0xdc>)
 801c562:	4804      	ldr	r0, [pc, #16]	; (801c574 <tcp_pcb_remove+0xcc>)
 801c564:	f008 ff26 	bl	80253b4 <iprintf>
 801c568:	e7a5      	b.n	801c4b6 <tcp_pcb_remove+0xe>
 801c56a:	bf00      	nop
 801c56c:	08043d8c 	.word	0x08043d8c
 801c570:	08044278 	.word	0x08044278
 801c574:	0802a008 	.word	0x0802a008
 801c578:	08044290 	.word	0x08044290
 801c57c:	080442ac 	.word	0x080442ac
 801c580:	0804423c 	.word	0x0804423c
 801c584:	08044258 	.word	0x08044258

0801c588 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c588:	2800      	cmp	r0, #0
 801c58a:	f000 80ad 	beq.w	801c6e8 <tcp_abandon+0x160>
{
 801c58e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c592:	7d03      	ldrb	r3, [r0, #20]
{
 801c594:	b087      	sub	sp, #28
 801c596:	4605      	mov	r5, r0
 801c598:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c59a:	2b01      	cmp	r3, #1
 801c59c:	f000 808b 	beq.w	801c6b6 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801c5a0:	2b0a      	cmp	r3, #10
 801c5a2:	f000 8093 	beq.w	801c6cc <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801c5a6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801c5a8:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801c5ac:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801c5b0:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801c5b4:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801c5b6:	b96b      	cbnz	r3, 801c5d4 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801c5b8:	8aef      	ldrh	r7, [r5, #22]
 801c5ba:	2f00      	cmp	r7, #0
 801c5bc:	d052      	beq.n	801c664 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c5be:	4a51      	ldr	r2, [pc, #324]	; (801c704 <tcp_abandon+0x17c>)
 801c5c0:	6813      	ldr	r3, [r2, #0]
 801c5c2:	42ab      	cmp	r3, r5
 801c5c4:	d074      	beq.n	801c6b0 <tcp_abandon+0x128>
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d050      	beq.n	801c66c <tcp_abandon+0xe4>
 801c5ca:	68da      	ldr	r2, [r3, #12]
 801c5cc:	42aa      	cmp	r2, r5
 801c5ce:	d04b      	beq.n	801c668 <tcp_abandon+0xe0>
 801c5d0:	4613      	mov	r3, r2
 801c5d2:	e7f8      	b.n	801c5c6 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c5d4:	4629      	mov	r1, r5
 801c5d6:	484c      	ldr	r0, [pc, #304]	; (801c708 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801c5d8:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c5da:	f7ff ff65 	bl	801c4a8 <tcp_pcb_remove>
 801c5de:	4b4b      	ldr	r3, [pc, #300]	; (801c70c <tcp_abandon+0x184>)
 801c5e0:	2201      	movs	r2, #1
 801c5e2:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801c5e4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801c5e6:	b164      	cbz	r4, 801c602 <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801c5e8:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c5ea:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c5ec:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c5f0:	b108      	cbz	r0, 801c5f6 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801c5f2:	f7fe fe15 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c5f6:	4651      	mov	r1, sl
 801c5f8:	2004      	movs	r0, #4
 801c5fa:	f7fe f8f9 	bl	801a7f0 <memp_free>
  while (seg != NULL) {
 801c5fe:	2c00      	cmp	r4, #0
 801c600:	d1f2      	bne.n	801c5e8 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801c602:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801c604:	b164      	cbz	r4, 801c620 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801c606:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c608:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c60a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c60e:	b108      	cbz	r0, 801c614 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801c610:	f7fe fe06 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c614:	4651      	mov	r1, sl
 801c616:	2004      	movs	r0, #4
 801c618:	f7fe f8ea 	bl	801a7f0 <memp_free>
  while (seg != NULL) {
 801c61c:	2c00      	cmp	r4, #0
 801c61e:	d1f2      	bne.n	801c606 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801c620:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801c622:	b164      	cbz	r4, 801c63e <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801c624:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c626:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c628:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c62c:	b108      	cbz	r0, 801c632 <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801c62e:	f7fe fdf7 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c632:	4651      	mov	r1, sl
 801c634:	2004      	movs	r0, #4
 801c636:	f7fe f8db 	bl	801a7f0 <memp_free>
  while (seg != NULL) {
 801c63a:	2c00      	cmp	r4, #0
 801c63c:	d1f2      	bne.n	801c624 <tcp_abandon+0x9c>
    if (send_rst) {
 801c63e:	b9ce      	cbnz	r6, 801c674 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c640:	7d2b      	ldrb	r3, [r5, #20]
 801c642:	2b01      	cmp	r3, #1
 801c644:	d024      	beq.n	801c690 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801c646:	4629      	mov	r1, r5
 801c648:	2002      	movs	r0, #2
 801c64a:	f7fe f8d1 	bl	801a7f0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c64e:	f1b8 0f00 	cmp.w	r8, #0
 801c652:	d02a      	beq.n	801c6aa <tcp_abandon+0x122>
 801c654:	f06f 010c 	mvn.w	r1, #12
 801c658:	4648      	mov	r0, r9
 801c65a:	4643      	mov	r3, r8
}
 801c65c:	b007      	add	sp, #28
 801c65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c662:	4718      	bx	r3
    int send_rst = 0;
 801c664:	461e      	mov	r6, r3
 801c666:	e7bd      	b.n	801c5e4 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c668:	68ea      	ldr	r2, [r5, #12]
 801c66a:	60da      	str	r2, [r3, #12]
 801c66c:	2700      	movs	r7, #0
    int send_rst = 0;
 801c66e:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c670:	60ef      	str	r7, [r5, #12]
 801c672:	e7b7      	b.n	801c5e4 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801c674:	9701      	str	r7, [sp, #4]
 801c676:	465a      	mov	r2, fp
 801c678:	8b2b      	ldrh	r3, [r5, #24]
 801c67a:	4628      	mov	r0, r5
 801c67c:	9905      	ldr	r1, [sp, #20]
 801c67e:	9302      	str	r3, [sp, #8]
 801c680:	1d2b      	adds	r3, r5, #4
 801c682:	9300      	str	r3, [sp, #0]
 801c684:	462b      	mov	r3, r5
 801c686:	f002 ff03 	bl	801f490 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c68a:	7d2b      	ldrb	r3, [r5, #20]
 801c68c:	2b01      	cmp	r3, #1
 801c68e:	d1da      	bne.n	801c646 <tcp_abandon+0xbe>
 801c690:	491f      	ldr	r1, [pc, #124]	; (801c710 <tcp_abandon+0x188>)
 801c692:	22d4      	movs	r2, #212	; 0xd4
 801c694:	4b1f      	ldr	r3, [pc, #124]	; (801c714 <tcp_abandon+0x18c>)
 801c696:	4820      	ldr	r0, [pc, #128]	; (801c718 <tcp_abandon+0x190>)
 801c698:	f008 fe8c 	bl	80253b4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801c69c:	4629      	mov	r1, r5
 801c69e:	2002      	movs	r0, #2
 801c6a0:	f7fe f8a6 	bl	801a7f0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c6a4:	f1b8 0f00 	cmp.w	r8, #0
 801c6a8:	d1d4      	bne.n	801c654 <tcp_abandon+0xcc>
}
 801c6aa:	b007      	add	sp, #28
 801c6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c6b0:	68eb      	ldr	r3, [r5, #12]
 801c6b2:	6013      	str	r3, [r2, #0]
 801c6b4:	e7da      	b.n	801c66c <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c6b6:	4b17      	ldr	r3, [pc, #92]	; (801c714 <tcp_abandon+0x18c>)
 801c6b8:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c6bc:	4917      	ldr	r1, [pc, #92]	; (801c71c <tcp_abandon+0x194>)
 801c6be:	4816      	ldr	r0, [pc, #88]	; (801c718 <tcp_abandon+0x190>)
 801c6c0:	f008 fe78 	bl	80253b4 <iprintf>
  if (pcb->state == TIME_WAIT) {
 801c6c4:	7d2b      	ldrb	r3, [r5, #20]
 801c6c6:	2b0a      	cmp	r3, #10
 801c6c8:	f47f af6d 	bne.w	801c5a6 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801c6cc:	4629      	mov	r1, r5
 801c6ce:	4814      	ldr	r0, [pc, #80]	; (801c720 <tcp_abandon+0x198>)
 801c6d0:	f7ff feea 	bl	801c4a8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c6d4:	7d2b      	ldrb	r3, [r5, #20]
 801c6d6:	2b01      	cmp	r3, #1
 801c6d8:	d00d      	beq.n	801c6f6 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801c6da:	4629      	mov	r1, r5
 801c6dc:	2002      	movs	r0, #2
}
 801c6de:	b007      	add	sp, #28
 801c6e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801c6e4:	f7fe b884 	b.w	801a7f0 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c6e8:	4b0a      	ldr	r3, [pc, #40]	; (801c714 <tcp_abandon+0x18c>)
 801c6ea:	f240 223d 	movw	r2, #573	; 0x23d
 801c6ee:	490d      	ldr	r1, [pc, #52]	; (801c724 <tcp_abandon+0x19c>)
 801c6f0:	4809      	ldr	r0, [pc, #36]	; (801c718 <tcp_abandon+0x190>)
 801c6f2:	f008 be5f 	b.w	80253b4 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c6f6:	4b07      	ldr	r3, [pc, #28]	; (801c714 <tcp_abandon+0x18c>)
 801c6f8:	22d4      	movs	r2, #212	; 0xd4
 801c6fa:	4905      	ldr	r1, [pc, #20]	; (801c710 <tcp_abandon+0x188>)
 801c6fc:	4806      	ldr	r0, [pc, #24]	; (801c718 <tcp_abandon+0x190>)
 801c6fe:	f008 fe59 	bl	80253b4 <iprintf>
 801c702:	e7ea      	b.n	801c6da <tcp_abandon+0x152>
 801c704:	2002e0c4 	.word	0x2002e0c4
 801c708:	2002e0bc 	.word	0x2002e0bc
 801c70c:	2002e0c0 	.word	0x2002e0c0
 801c710:	08043dc8 	.word	0x08043dc8
 801c714:	08043d8c 	.word	0x08043d8c
 801c718:	0802a008 	.word	0x0802a008
 801c71c:	080442e0 	.word	0x080442e0
 801c720:	2002e0d4 	.word	0x2002e0d4
 801c724:	080442c4 	.word	0x080442c4

0801c728 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801c728:	2101      	movs	r1, #1
 801c72a:	f7ff bf2d 	b.w	801c588 <tcp_abandon>
 801c72e:	bf00      	nop

0801c730 <tcp_accept_null>:
{
 801c730:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c732:	460c      	mov	r4, r1
 801c734:	b131      	cbz	r1, 801c744 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801c736:	4620      	mov	r0, r4
 801c738:	2101      	movs	r1, #1
 801c73a:	f7ff ff25 	bl	801c588 <tcp_abandon>
}
 801c73e:	f06f 000c 	mvn.w	r0, #12
 801c742:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c744:	4b06      	ldr	r3, [pc, #24]	; (801c760 <tcp_accept_null+0x30>)
 801c746:	f240 320f 	movw	r2, #783	; 0x30f
 801c74a:	4906      	ldr	r1, [pc, #24]	; (801c764 <tcp_accept_null+0x34>)
 801c74c:	4806      	ldr	r0, [pc, #24]	; (801c768 <tcp_accept_null+0x38>)
 801c74e:	f008 fe31 	bl	80253b4 <iprintf>
  tcp_abandon(pcb, 1);
 801c752:	4620      	mov	r0, r4
 801c754:	2101      	movs	r1, #1
 801c756:	f7ff ff17 	bl	801c588 <tcp_abandon>
}
 801c75a:	f06f 000c 	mvn.w	r0, #12
 801c75e:	bd10      	pop	{r4, pc}
 801c760:	08043d8c 	.word	0x08043d8c
 801c764:	08044314 	.word	0x08044314
 801c768:	0802a008 	.word	0x0802a008

0801c76c <tcp_netif_ip_addr_changed_pcblist>:
{
 801c76c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c76e:	4605      	mov	r5, r0
{
 801c770:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c772:	b178      	cbz	r0, 801c794 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801c774:	b134      	cbz	r4, 801c784 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c776:	6822      	ldr	r2, [r4, #0]
 801c778:	682b      	ldr	r3, [r5, #0]
 801c77a:	429a      	cmp	r2, r3
 801c77c:	d003      	beq.n	801c786 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801c77e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801c780:	2c00      	cmp	r4, #0
 801c782:	d1f8      	bne.n	801c776 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801c784:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801c786:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801c788:	4620      	mov	r0, r4
 801c78a:	2101      	movs	r1, #1
      pcb = next;
 801c78c:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801c78e:	f7ff fefb 	bl	801c588 <tcp_abandon>
      pcb = next;
 801c792:	e7ef      	b.n	801c774 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c794:	4b03      	ldr	r3, [pc, #12]	; (801c7a4 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801c796:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801c79a:	4903      	ldr	r1, [pc, #12]	; (801c7a8 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801c79c:	4803      	ldr	r0, [pc, #12]	; (801c7ac <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801c79e:	f008 fe09 	bl	80253b4 <iprintf>
 801c7a2:	e7e7      	b.n	801c774 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801c7a4:	08043d8c 	.word	0x08043d8c
 801c7a8:	08044334 	.word	0x08044334
 801c7ac:	0802a008 	.word	0x0802a008

0801c7b0 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7b0:	4b0f      	ldr	r3, [pc, #60]	; (801c7f0 <tcp_kill_state+0x40>)
 801c7b2:	6819      	ldr	r1, [r3, #0]
 801c7b4:	b1d1      	cbz	r1, 801c7ec <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c7b6:	4b0f      	ldr	r3, [pc, #60]	; (801c7f4 <tcp_kill_state+0x44>)
  inactivity = 0;
 801c7b8:	2200      	movs	r2, #0
{
 801c7ba:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c7bc:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801c7be:	4614      	mov	r4, r2
 801c7c0:	e001      	b.n	801c7c6 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7c2:	68c9      	ldr	r1, [r1, #12]
 801c7c4:	b159      	cbz	r1, 801c7de <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801c7c6:	7d0b      	ldrb	r3, [r1, #20]
 801c7c8:	4283      	cmp	r3, r0
 801c7ca:	d1fa      	bne.n	801c7c2 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c7cc:	6a0b      	ldr	r3, [r1, #32]
 801c7ce:	1aeb      	subs	r3, r5, r3
 801c7d0:	4293      	cmp	r3, r2
 801c7d2:	d3f6      	bcc.n	801c7c2 <tcp_kill_state+0x12>
 801c7d4:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7d6:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c7d8:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7da:	2900      	cmp	r1, #0
 801c7dc:	d1f3      	bne.n	801c7c6 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801c7de:	b11c      	cbz	r4, 801c7e8 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801c7e0:	4620      	mov	r0, r4
}
 801c7e2:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801c7e4:	f7ff bed0 	b.w	801c588 <tcp_abandon>
}
 801c7e8:	bc30      	pop	{r4, r5}
 801c7ea:	4770      	bx	lr
 801c7ec:	4770      	bx	lr
 801c7ee:	bf00      	nop
 801c7f0:	2002e0bc 	.word	0x2002e0bc
 801c7f4:	2002e0cc 	.word	0x2002e0cc

0801c7f8 <tcp_alloc>:
{
 801c7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c7fa:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801c7fe:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c800:	494f      	ldr	r1, [pc, #316]	; (801c940 <tcp_alloc+0x148>)
 801c802:	2002      	movs	r0, #2
 801c804:	f7fd ffbe 	bl	801a784 <memp_malloc_fn>
  if (pcb == NULL) {
 801c808:	4603      	mov	r3, r0
 801c80a:	b320      	cbz	r0, 801c856 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c80c:	229c      	movs	r2, #156	; 0x9c
 801c80e:	2100      	movs	r1, #0
 801c810:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801c812:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c816:	f007 fe2f 	bl	8024478 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801c81a:	494a      	ldr	r1, [pc, #296]	; (801c944 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c81c:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c81e:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801c820:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801c822:	4849      	ldr	r0, [pc, #292]	; (801c948 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801c828:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801c82a:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801c82c:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c82e:	4a47      	ldr	r2, [pc, #284]	; (801c94c <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801c830:	4947      	ldr	r1, [pc, #284]	; (801c950 <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801c832:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801c836:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801c838:	4c46      	ldr	r4, [pc, #280]	; (801c954 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801c83a:	4847      	ldr	r0, [pc, #284]	; (801c958 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801c83c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c840:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801c844:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c846:	4945      	ldr	r1, [pc, #276]	; (801c95c <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801c848:	6498      	str	r0, [r3, #72]	; 0x48
}
 801c84a:	4618      	mov	r0, r3
    pcb->prio = prio;
 801c84c:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801c84e:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c850:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801c852:	72da      	strb	r2, [r3, #11]
}
 801c854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801c856:	4e42      	ldr	r6, [pc, #264]	; (801c960 <tcp_alloc+0x168>)
 801c858:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801c85a:	b15c      	cbz	r4, 801c874 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801c85c:	4620      	mov	r0, r4
 801c85e:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801c860:	8b43      	ldrh	r3, [r0, #26]
 801c862:	0719      	lsls	r1, r3, #28
 801c864:	d5f9      	bpl.n	801c85a <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c866:	f023 0308 	bic.w	r3, r3, #8
 801c86a:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801c86c:	f7fe ffd8 	bl	801b820 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801c870:	2c00      	cmp	r4, #0
 801c872:	d1f3      	bne.n	801c85c <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c874:	4b3b      	ldr	r3, [pc, #236]	; (801c964 <tcp_alloc+0x16c>)
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	b193      	cbz	r3, 801c8a0 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c87a:	4a33      	ldr	r2, [pc, #204]	; (801c948 <tcp_alloc+0x150>)
 801c87c:	4618      	mov	r0, r3
 801c87e:	6a19      	ldr	r1, [r3, #32]
 801c880:	6814      	ldr	r4, [r2, #0]
 801c882:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c884:	68db      	ldr	r3, [r3, #12]
 801c886:	b143      	cbz	r3, 801c89a <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c888:	6a1a      	ldr	r2, [r3, #32]
 801c88a:	1aa2      	subs	r2, r4, r2
 801c88c:	428a      	cmp	r2, r1
 801c88e:	d3f9      	bcc.n	801c884 <tcp_alloc+0x8c>
 801c890:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c892:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c894:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c896:	2b00      	cmp	r3, #0
 801c898:	d1f6      	bne.n	801c888 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801c89a:	2101      	movs	r1, #1
 801c89c:	f7ff fe74 	bl	801c588 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8a0:	f240 7239 	movw	r2, #1849	; 0x739
 801c8a4:	4926      	ldr	r1, [pc, #152]	; (801c940 <tcp_alloc+0x148>)
 801c8a6:	2002      	movs	r0, #2
 801c8a8:	f7fd ff6c 	bl	801a784 <memp_malloc_fn>
    if (pcb == NULL) {
 801c8ac:	4603      	mov	r3, r0
 801c8ae:	2800      	cmp	r0, #0
 801c8b0:	d1ac      	bne.n	801c80c <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801c8b2:	2009      	movs	r0, #9
 801c8b4:	f7ff ff7c 	bl	801c7b0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8b8:	f240 723f 	movw	r2, #1855	; 0x73f
 801c8bc:	4920      	ldr	r1, [pc, #128]	; (801c940 <tcp_alloc+0x148>)
 801c8be:	2002      	movs	r0, #2
 801c8c0:	f7fd ff60 	bl	801a784 <memp_malloc_fn>
      if (pcb == NULL) {
 801c8c4:	4603      	mov	r3, r0
 801c8c6:	2800      	cmp	r0, #0
 801c8c8:	d1a0      	bne.n	801c80c <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801c8ca:	2008      	movs	r0, #8
 801c8cc:	f7ff ff70 	bl	801c7b0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8d0:	f240 7245 	movw	r2, #1861	; 0x745
 801c8d4:	491a      	ldr	r1, [pc, #104]	; (801c940 <tcp_alloc+0x148>)
 801c8d6:	2002      	movs	r0, #2
 801c8d8:	f7fd ff54 	bl	801a784 <memp_malloc_fn>
        if (pcb == NULL) {
 801c8dc:	4603      	mov	r3, r0
 801c8de:	2800      	cmp	r0, #0
 801c8e0:	d194      	bne.n	801c80c <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c8e2:	062a      	lsls	r2, r5, #24
 801c8e4:	d42a      	bmi.n	801c93c <tcp_alloc+0x144>
  if (mprio == 0) {
 801c8e6:	b1ed      	cbz	r5, 801c924 <tcp_alloc+0x12c>
 801c8e8:	462a      	mov	r2, r5
  mprio--;
 801c8ea:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8ec:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801c8ee:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8f0:	b1c2      	cbz	r2, 801c924 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c8f2:	4815      	ldr	r0, [pc, #84]	; (801c948 <tcp_alloc+0x150>)
  inactivity = 0;
 801c8f4:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c8f6:	6807      	ldr	r7, [r0, #0]
 801c8f8:	e005      	b.n	801c906 <tcp_alloc+0x10e>
 801c8fa:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801c8fc:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801c8fe:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801c900:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c902:	68d2      	ldr	r2, [r2, #12]
 801c904:	b14a      	cbz	r2, 801c91a <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801c906:	7d50      	ldrb	r0, [r2, #21]
 801c908:	4288      	cmp	r0, r1
 801c90a:	d3f6      	bcc.n	801c8fa <tcp_alloc+0x102>
 801c90c:	d1f9      	bne.n	801c902 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c90e:	6a14      	ldr	r4, [r2, #32]
 801c910:	eba7 0e04 	sub.w	lr, r7, r4
 801c914:	45b6      	cmp	lr, r6
 801c916:	d3f4      	bcc.n	801c902 <tcp_alloc+0x10a>
 801c918:	e7f0      	b.n	801c8fc <tcp_alloc+0x104>
  if (inactive != NULL) {
 801c91a:	b11b      	cbz	r3, 801c924 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801c91c:	2101      	movs	r1, #1
 801c91e:	4618      	mov	r0, r3
 801c920:	f7ff fe32 	bl	801c588 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c924:	f240 724b 	movw	r2, #1867	; 0x74b
 801c928:	4905      	ldr	r1, [pc, #20]	; (801c940 <tcp_alloc+0x148>)
 801c92a:	2002      	movs	r0, #2
 801c92c:	f7fd ff2a 	bl	801a784 <memp_malloc_fn>
  if (pcb != NULL) {
 801c930:	4603      	mov	r3, r0
 801c932:	2800      	cmp	r0, #0
 801c934:	f47f af6a 	bne.w	801c80c <tcp_alloc+0x14>
}
 801c938:	4618      	mov	r0, r3
 801c93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c93c:	227f      	movs	r2, #127	; 0x7f
 801c93e:	e7d4      	b.n	801c8ea <tcp_alloc+0xf2>
 801c940:	08043d8c 	.word	0x08043d8c
 801c944:	2002e0d1 	.word	0x2002e0d1
 801c948:	2002e0cc 	.word	0x2002e0cc
 801c94c:	006ddd00 	.word	0x006ddd00
 801c950:	0801cb55 	.word	0x0801cb55
 801c954:	0218ffff 	.word	0x0218ffff
 801c958:	04300001 	.word	0x04300001
 801c95c:	08600860 	.word	0x08600860
 801c960:	2002e0bc 	.word	0x2002e0bc
 801c964:	2002e0d4 	.word	0x2002e0d4

0801c968 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801c968:	2040      	movs	r0, #64	; 0x40
 801c96a:	f7ff bf45 	b.w	801c7f8 <tcp_alloc>
 801c96e:	bf00      	nop

0801c970 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c970:	2040      	movs	r0, #64	; 0x40
 801c972:	f7ff bf41 	b.w	801c7f8 <tcp_alloc>
 801c976:	bf00      	nop

0801c978 <tcp_close_shutdown>:
{
 801c978:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c97a:	4604      	mov	r4, r0
{
 801c97c:	b085      	sub	sp, #20
 801c97e:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c980:	2800      	cmp	r0, #0
 801c982:	d06a      	beq.n	801ca5a <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801c984:	7d23      	ldrb	r3, [r4, #20]
 801c986:	b11d      	cbz	r5, 801c990 <tcp_close_shutdown+0x18>
 801c988:	2b04      	cmp	r3, #4
 801c98a:	d00c      	beq.n	801c9a6 <tcp_close_shutdown+0x2e>
 801c98c:	2b07      	cmp	r3, #7
 801c98e:	d00a      	beq.n	801c9a6 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801c990:	2b01      	cmp	r3, #1
 801c992:	d06a      	beq.n	801ca6a <tcp_close_shutdown+0xf2>
 801c994:	2b02      	cmp	r3, #2
 801c996:	d030      	beq.n	801c9fa <tcp_close_shutdown+0x82>
 801c998:	b333      	cbz	r3, 801c9e8 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801c99a:	4620      	mov	r0, r4
}
 801c99c:	b005      	add	sp, #20
 801c99e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801c9a2:	f7fe bf3d 	b.w	801b820 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c9a6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c9a8:	2a00      	cmp	r2, #0
 801c9aa:	d037      	beq.n	801ca1c <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801c9ac:	8b63      	ldrh	r3, [r4, #26]
 801c9ae:	06db      	lsls	r3, r3, #27
 801c9b0:	f140 8084 	bpl.w	801cabc <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c9b4:	8b21      	ldrh	r1, [r4, #24]
 801c9b6:	1d20      	adds	r0, r4, #4
 801c9b8:	8ae2      	ldrh	r2, [r4, #22]
 801c9ba:	4623      	mov	r3, r4
 801c9bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801c9c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c9c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801c9c4:	9000      	str	r0, [sp, #0]
 801c9c6:	4620      	mov	r0, r4
 801c9c8:	f002 fd62 	bl	801f490 <tcp_rst>
      tcp_pcb_purge(pcb);
 801c9cc:	4620      	mov	r0, r4
 801c9ce:	f7ff fa6b 	bl	801bea8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801c9d2:	4a45      	ldr	r2, [pc, #276]	; (801cae8 <tcp_close_shutdown+0x170>)
 801c9d4:	6813      	ldr	r3, [r2, #0]
 801c9d6:	42a3      	cmp	r3, r4
 801c9d8:	d030      	beq.n	801ca3c <tcp_close_shutdown+0xc4>
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d030      	beq.n	801ca40 <tcp_close_shutdown+0xc8>
 801c9de:	68da      	ldr	r2, [r3, #12]
 801c9e0:	42a2      	cmp	r2, r4
 801c9e2:	d068      	beq.n	801cab6 <tcp_close_shutdown+0x13e>
 801c9e4:	4613      	mov	r3, r2
 801c9e6:	e7f8      	b.n	801c9da <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801c9e8:	8ae3      	ldrh	r3, [r4, #22]
 801c9ea:	b9e3      	cbnz	r3, 801ca26 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801c9ec:	4621      	mov	r1, r4
 801c9ee:	2002      	movs	r0, #2
 801c9f0:	f7fd fefe 	bl	801a7f0 <memp_free>
}
 801c9f4:	2000      	movs	r0, #0
 801c9f6:	b005      	add	sp, #20
 801c9f8:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c9fa:	4621      	mov	r1, r4
 801c9fc:	483a      	ldr	r0, [pc, #232]	; (801cae8 <tcp_close_shutdown+0x170>)
 801c9fe:	f7ff fd53 	bl	801c4a8 <tcp_pcb_remove>
 801ca02:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ca04:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801ca06:	4a39      	ldr	r2, [pc, #228]	; (801caec <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ca08:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801ca0a:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ca0c:	d1ee      	bne.n	801c9ec <tcp_close_shutdown+0x74>
 801ca0e:	4b38      	ldr	r3, [pc, #224]	; (801caf0 <tcp_close_shutdown+0x178>)
 801ca10:	22d4      	movs	r2, #212	; 0xd4
 801ca12:	4938      	ldr	r1, [pc, #224]	; (801caf4 <tcp_close_shutdown+0x17c>)
 801ca14:	4838      	ldr	r0, [pc, #224]	; (801caf8 <tcp_close_shutdown+0x180>)
 801ca16:	f008 fccd 	bl	80253b4 <iprintf>
 801ca1a:	e7e7      	b.n	801c9ec <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801ca1c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801ca1e:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801ca22:	d0b5      	beq.n	801c990 <tcp_close_shutdown+0x18>
 801ca24:	e7c2      	b.n	801c9ac <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ca26:	4a35      	ldr	r2, [pc, #212]	; (801cafc <tcp_close_shutdown+0x184>)
 801ca28:	6813      	ldr	r3, [r2, #0]
 801ca2a:	42a3      	cmp	r3, r4
 801ca2c:	d051      	beq.n	801cad2 <tcp_close_shutdown+0x15a>
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d03e      	beq.n	801cab0 <tcp_close_shutdown+0x138>
 801ca32:	68da      	ldr	r2, [r3, #12]
 801ca34:	42a2      	cmp	r2, r4
 801ca36:	d039      	beq.n	801caac <tcp_close_shutdown+0x134>
 801ca38:	4613      	mov	r3, r2
 801ca3a:	e7f8      	b.n	801ca2e <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801ca3c:	68e3      	ldr	r3, [r4, #12]
 801ca3e:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801ca40:	4b2f      	ldr	r3, [pc, #188]	; (801cb00 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801ca42:	2000      	movs	r0, #0
 801ca44:	4a29      	ldr	r2, [pc, #164]	; (801caec <tcp_close_shutdown+0x174>)
 801ca46:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801ca48:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801ca4a:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801ca4c:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801ca4e:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801ca50:	d03c      	beq.n	801cacc <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ca52:	7d23      	ldrb	r3, [r4, #20]
 801ca54:	2b01      	cmp	r3, #1
 801ca56:	d1c9      	bne.n	801c9ec <tcp_close_shutdown+0x74>
 801ca58:	e7d9      	b.n	801ca0e <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801ca5a:	4b25      	ldr	r3, [pc, #148]	; (801caf0 <tcp_close_shutdown+0x178>)
 801ca5c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801ca60:	4928      	ldr	r1, [pc, #160]	; (801cb04 <tcp_close_shutdown+0x18c>)
 801ca62:	4825      	ldr	r0, [pc, #148]	; (801caf8 <tcp_close_shutdown+0x180>)
 801ca64:	f008 fca6 	bl	80253b4 <iprintf>
 801ca68:	e78c      	b.n	801c984 <tcp_close_shutdown+0xc>
 801ca6a:	4927      	ldr	r1, [pc, #156]	; (801cb08 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801ca6c:	2000      	movs	r0, #0
  switch (pcb->state) {
 801ca6e:	4b23      	ldr	r3, [pc, #140]	; (801cafc <tcp_close_shutdown+0x184>)
 801ca70:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801ca74:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801ca76:	b133      	cbz	r3, 801ca86 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801ca78:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801ca7a:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801ca7c:	bf08      	it	eq
 801ca7e:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801ca80:	68db      	ldr	r3, [r3, #12]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d1f8      	bne.n	801ca78 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801ca86:	42a9      	cmp	r1, r5
 801ca88:	d002      	beq.n	801ca90 <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801ca8a:	f851 3b04 	ldr.w	r3, [r1], #4
 801ca8e:	e7f1      	b.n	801ca74 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801ca90:	4621      	mov	r1, r4
 801ca92:	481e      	ldr	r0, [pc, #120]	; (801cb0c <tcp_close_shutdown+0x194>)
 801ca94:	f7ff fd08 	bl	801c4a8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801ca98:	7d23      	ldrb	r3, [r4, #20]
 801ca9a:	2b01      	cmp	r3, #1
 801ca9c:	d01c      	beq.n	801cad8 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801ca9e:	4621      	mov	r1, r4
 801caa0:	2003      	movs	r0, #3
 801caa2:	f7fd fea5 	bl	801a7f0 <memp_free>
}
 801caa6:	2000      	movs	r0, #0
 801caa8:	b005      	add	sp, #20
 801caaa:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801caac:	68e2      	ldr	r2, [r4, #12]
 801caae:	60da      	str	r2, [r3, #12]
 801cab0:	2300      	movs	r3, #0
 801cab2:	60e3      	str	r3, [r4, #12]
 801cab4:	e79a      	b.n	801c9ec <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801cab6:	68e2      	ldr	r2, [r4, #12]
 801cab8:	60da      	str	r2, [r3, #12]
 801caba:	e7c1      	b.n	801ca40 <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801cabc:	4b0c      	ldr	r3, [pc, #48]	; (801caf0 <tcp_close_shutdown+0x178>)
 801cabe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801cac2:	4913      	ldr	r1, [pc, #76]	; (801cb10 <tcp_close_shutdown+0x198>)
 801cac4:	480c      	ldr	r0, [pc, #48]	; (801caf8 <tcp_close_shutdown+0x180>)
 801cac6:	f008 fc75 	bl	80253b4 <iprintf>
 801caca:	e773      	b.n	801c9b4 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801cacc:	f001 fd9e 	bl	801e60c <tcp_trigger_input_pcb_close>
 801cad0:	e790      	b.n	801c9f4 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801cad2:	68e3      	ldr	r3, [r4, #12]
 801cad4:	6013      	str	r3, [r2, #0]
 801cad6:	e7eb      	b.n	801cab0 <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801cad8:	4b05      	ldr	r3, [pc, #20]	; (801caf0 <tcp_close_shutdown+0x178>)
 801cada:	22df      	movs	r2, #223	; 0xdf
 801cadc:	490d      	ldr	r1, [pc, #52]	; (801cb14 <tcp_close_shutdown+0x19c>)
 801cade:	4806      	ldr	r0, [pc, #24]	; (801caf8 <tcp_close_shutdown+0x180>)
 801cae0:	f008 fc68 	bl	80253b4 <iprintf>
 801cae4:	e7db      	b.n	801ca9e <tcp_close_shutdown+0x126>
 801cae6:	bf00      	nop
 801cae8:	2002e0bc 	.word	0x2002e0bc
 801caec:	2002e0c0 	.word	0x2002e0c0
 801caf0:	08043d8c 	.word	0x08043d8c
 801caf4:	08043dc8 	.word	0x08043dc8
 801caf8:	0802a008 	.word	0x0802a008
 801cafc:	2002e0c4 	.word	0x2002e0c4
 801cb00:	2002e100 	.word	0x2002e100
 801cb04:	08044368 	.word	0x08044368
 801cb08:	08044478 	.word	0x08044478
 801cb0c:	2002e0c8 	.word	0x2002e0c8
 801cb10:	08044388 	.word	0x08044388
 801cb14:	080443a4 	.word	0x080443a4

0801cb18 <tcp_close>:
{
 801cb18:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb1a:	b158      	cbz	r0, 801cb34 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801cb1c:	7d03      	ldrb	r3, [r0, #20]
 801cb1e:	2b01      	cmp	r3, #1
 801cb20:	d003      	beq.n	801cb2a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801cb22:	8b43      	ldrh	r3, [r0, #26]
 801cb24:	f043 0310 	orr.w	r3, r3, #16
 801cb28:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801cb2a:	2101      	movs	r1, #1
}
 801cb2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801cb30:	f7ff bf22 	b.w	801c978 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb34:	4b04      	ldr	r3, [pc, #16]	; (801cb48 <tcp_close+0x30>)
 801cb36:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801cb3a:	4904      	ldr	r1, [pc, #16]	; (801cb4c <tcp_close+0x34>)
 801cb3c:	4804      	ldr	r0, [pc, #16]	; (801cb50 <tcp_close+0x38>)
 801cb3e:	f008 fc39 	bl	80253b4 <iprintf>
}
 801cb42:	f06f 000f 	mvn.w	r0, #15
 801cb46:	bd08      	pop	{r3, pc}
 801cb48:	08043d8c 	.word	0x08043d8c
 801cb4c:	080443c0 	.word	0x080443c0
 801cb50:	0802a008 	.word	0x0802a008

0801cb54 <tcp_recv_null>:
{
 801cb54:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb56:	b1c9      	cbz	r1, 801cb8c <tcp_recv_null+0x38>
  if (p != NULL) {
 801cb58:	4614      	mov	r4, r2
 801cb5a:	4608      	mov	r0, r1
 801cb5c:	b13a      	cbz	r2, 801cb6e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801cb5e:	8911      	ldrh	r1, [r2, #8]
 801cb60:	f7fe ffde 	bl	801bb20 <tcp_recved>
    pbuf_free(p);
 801cb64:	4620      	mov	r0, r4
 801cb66:	f7fe fb5b 	bl	801b220 <pbuf_free>
  return ERR_OK;
 801cb6a:	2000      	movs	r0, #0
}
 801cb6c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801cb6e:	b10b      	cbz	r3, 801cb74 <tcp_recv_null+0x20>
  return ERR_OK;
 801cb70:	4610      	mov	r0, r2
}
 801cb72:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801cb74:	7d0b      	ldrb	r3, [r1, #20]
 801cb76:	2b01      	cmp	r3, #1
 801cb78:	d003      	beq.n	801cb82 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801cb7a:	8b4b      	ldrh	r3, [r1, #26]
 801cb7c:	f043 0310 	orr.w	r3, r3, #16
 801cb80:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801cb82:	2101      	movs	r1, #1
}
 801cb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801cb88:	f7ff bef6 	b.w	801c978 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb8c:	4b04      	ldr	r3, [pc, #16]	; (801cba0 <tcp_recv_null+0x4c>)
 801cb8e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801cb92:	4904      	ldr	r1, [pc, #16]	; (801cba4 <tcp_recv_null+0x50>)
 801cb94:	4804      	ldr	r0, [pc, #16]	; (801cba8 <tcp_recv_null+0x54>)
 801cb96:	f008 fc0d 	bl	80253b4 <iprintf>
 801cb9a:	f06f 000f 	mvn.w	r0, #15
}
 801cb9e:	bd10      	pop	{r4, pc}
 801cba0:	08043d8c 	.word	0x08043d8c
 801cba4:	080443d8 	.word	0x080443d8
 801cba8:	0802a008 	.word	0x0802a008

0801cbac <tcp_process_refused_data>:
{
 801cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801cbae:	b378      	cbz	r0, 801cc10 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801cbb0:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801cbb2:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801cbb4:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801cbb8:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801cbba:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801cbbc:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801cbbe:	b156      	cbz	r6, 801cbd6 <tcp_process_refused_data+0x2a>
 801cbc0:	4601      	mov	r1, r0
 801cbc2:	462a      	mov	r2, r5
 801cbc4:	6900      	ldr	r0, [r0, #16]
 801cbc6:	47b0      	blx	r6
    if (err == ERR_OK) {
 801cbc8:	b158      	cbz	r0, 801cbe2 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801cbca:	300d      	adds	r0, #13
 801cbcc:	d01d      	beq.n	801cc0a <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801cbce:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801cbd2:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801cbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801cbd6:	8929      	ldrh	r1, [r5, #8]
 801cbd8:	f7fe ffa2 	bl	801bb20 <tcp_recved>
    pbuf_free(p);
 801cbdc:	4628      	mov	r0, r5
 801cbde:	f7fe fb1f 	bl	801b220 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801cbe2:	06bb      	lsls	r3, r7, #26
 801cbe4:	d50f      	bpl.n	801cc06 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801cbe6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801cbe8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801cbec:	d001      	beq.n	801cbf2 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801cbee:	3301      	adds	r3, #1
 801cbf0:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801cbf2:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801cbf6:	b135      	cbz	r5, 801cc06 <tcp_process_refused_data+0x5a>
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	4621      	mov	r1, r4
 801cbfc:	6920      	ldr	r0, [r4, #16]
 801cbfe:	461a      	mov	r2, r3
 801cc00:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801cc02:	300d      	adds	r0, #13
 801cc04:	d001      	beq.n	801cc0a <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801cc06:	2000      	movs	r0, #0
}
 801cc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801cc0a:	f06f 000c 	mvn.w	r0, #12
}
 801cc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc10:	4b04      	ldr	r3, [pc, #16]	; (801cc24 <tcp_process_refused_data+0x78>)
 801cc12:	f240 6209 	movw	r2, #1545	; 0x609
 801cc16:	4904      	ldr	r1, [pc, #16]	; (801cc28 <tcp_process_refused_data+0x7c>)
 801cc18:	4804      	ldr	r0, [pc, #16]	; (801cc2c <tcp_process_refused_data+0x80>)
 801cc1a:	f008 fbcb 	bl	80253b4 <iprintf>
 801cc1e:	f06f 000f 	mvn.w	r0, #15
}
 801cc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc24:	08043d8c 	.word	0x08043d8c
 801cc28:	080443f4 	.word	0x080443f4
 801cc2c:	0802a008 	.word	0x0802a008

0801cc30 <tcp_fasttmr>:
{
 801cc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801cc34:	4d1c      	ldr	r5, [pc, #112]	; (801cca8 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801cc36:	2700      	movs	r7, #0
 801cc38:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801ccb0 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801cc3c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801cc3e:	4e1b      	ldr	r6, [pc, #108]	; (801ccac <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801cc40:	3301      	adds	r3, #1
 801cc42:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801cc44:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801cc48:	b1bc      	cbz	r4, 801cc7a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801cc4a:	782a      	ldrb	r2, [r5, #0]
 801cc4c:	7fa3      	ldrb	r3, [r4, #30]
 801cc4e:	4293      	cmp	r3, r2
 801cc50:	d015      	beq.n	801cc7e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801cc52:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801cc54:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801cc56:	07d9      	lsls	r1, r3, #31
 801cc58:	d41a      	bmi.n	801cc90 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801cc5a:	071a      	lsls	r2, r3, #28
 801cc5c:	d411      	bmi.n	801cc82 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801cc5e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801cc60:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801cc64:	b133      	cbz	r3, 801cc74 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801cc66:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801cc68:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801cc6a:	f7ff ff9f 	bl	801cbac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801cc6e:	7833      	ldrb	r3, [r6, #0]
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d1e7      	bne.n	801cc44 <tcp_fasttmr+0x14>
      pcb = next;
 801cc74:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801cc76:	2c00      	cmp	r4, #0
 801cc78:	d1e7      	bne.n	801cc4a <tcp_fasttmr+0x1a>
}
 801cc7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801cc7e:	68e4      	ldr	r4, [r4, #12]
 801cc80:	e7e2      	b.n	801cc48 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801cc82:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801cc86:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801cc88:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801cc8a:	f7fe fdc9 	bl	801b820 <tcp_close_shutdown_fin>
 801cc8e:	e7e6      	b.n	801cc5e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801cc90:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801cc94:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801cc96:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801cc98:	f002 fc74 	bl	801f584 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cc9c:	8b63      	ldrh	r3, [r4, #26]
 801cc9e:	f023 0303 	bic.w	r3, r3, #3
 801cca2:	b29b      	uxth	r3, r3
 801cca4:	8363      	strh	r3, [r4, #26]
 801cca6:	e7d8      	b.n	801cc5a <tcp_fasttmr+0x2a>
 801cca8:	2002e0d1 	.word	0x2002e0d1
 801ccac:	2002e0c0 	.word	0x2002e0c0
 801ccb0:	2002e0bc 	.word	0x2002e0bc

0801ccb4 <tcp_tmr>:
{
 801ccb4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801ccb6:	f7ff ffbb 	bl	801cc30 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801ccba:	4a06      	ldr	r2, [pc, #24]	; (801ccd4 <tcp_tmr+0x20>)
 801ccbc:	7813      	ldrb	r3, [r2, #0]
 801ccbe:	3301      	adds	r3, #1
 801ccc0:	b2db      	uxtb	r3, r3
 801ccc2:	7013      	strb	r3, [r2, #0]
 801ccc4:	07db      	lsls	r3, r3, #31
 801ccc6:	d400      	bmi.n	801ccca <tcp_tmr+0x16>
}
 801ccc8:	bd08      	pop	{r3, pc}
 801ccca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801ccce:	f7ff b93d 	b.w	801bf4c <tcp_slowtmr>
 801ccd2:	bf00      	nop
 801ccd4:	2002e0d0 	.word	0x2002e0d0

0801ccd8 <tcp_next_iss>:
{
 801ccd8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801ccda:	b130      	cbz	r0, 801ccea <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801ccdc:	4b07      	ldr	r3, [pc, #28]	; (801ccfc <tcp_next_iss+0x24>)
 801ccde:	4a08      	ldr	r2, [pc, #32]	; (801cd00 <tcp_next_iss+0x28>)
 801cce0:	6818      	ldr	r0, [r3, #0]
 801cce2:	6812      	ldr	r2, [r2, #0]
 801cce4:	4410      	add	r0, r2
 801cce6:	6018      	str	r0, [r3, #0]
}
 801cce8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801ccea:	4b06      	ldr	r3, [pc, #24]	; (801cd04 <tcp_next_iss+0x2c>)
 801ccec:	f640 02af 	movw	r2, #2223	; 0x8af
 801ccf0:	4905      	ldr	r1, [pc, #20]	; (801cd08 <tcp_next_iss+0x30>)
 801ccf2:	4806      	ldr	r0, [pc, #24]	; (801cd0c <tcp_next_iss+0x34>)
 801ccf4:	f008 fb5e 	bl	80253b4 <iprintf>
 801ccf8:	e7f0      	b.n	801ccdc <tcp_next_iss+0x4>
 801ccfa:	bf00      	nop
 801ccfc:	20000414 	.word	0x20000414
 801cd00:	2002e0cc 	.word	0x2002e0cc
 801cd04:	08043d8c 	.word	0x08043d8c
 801cd08:	0804441c 	.word	0x0804441c
 801cd0c:	0802a008 	.word	0x0802a008

0801cd10 <tcp_eff_send_mss_netif>:
{
 801cd10:	b538      	push	{r3, r4, r5, lr}
 801cd12:	4605      	mov	r5, r0
 801cd14:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801cd16:	b172      	cbz	r2, 801cd36 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801cd18:	b144      	cbz	r4, 801cd2c <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801cd1a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801cd1c:	b133      	cbz	r3, 801cd2c <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801cd1e:	2b28      	cmp	r3, #40	; 0x28
 801cd20:	d906      	bls.n	801cd30 <tcp_eff_send_mss_netif+0x20>
 801cd22:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801cd24:	b29b      	uxth	r3, r3
 801cd26:	429d      	cmp	r5, r3
 801cd28:	bf28      	it	cs
 801cd2a:	461d      	movcs	r5, r3
}
 801cd2c:	4628      	mov	r0, r5
 801cd2e:	bd38      	pop	{r3, r4, r5, pc}
 801cd30:	2500      	movs	r5, #0
 801cd32:	4628      	mov	r0, r5
 801cd34:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801cd36:	4b04      	ldr	r3, [pc, #16]	; (801cd48 <tcp_eff_send_mss_netif+0x38>)
 801cd38:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801cd3c:	4903      	ldr	r1, [pc, #12]	; (801cd4c <tcp_eff_send_mss_netif+0x3c>)
 801cd3e:	4804      	ldr	r0, [pc, #16]	; (801cd50 <tcp_eff_send_mss_netif+0x40>)
 801cd40:	f008 fb38 	bl	80253b4 <iprintf>
 801cd44:	e7e8      	b.n	801cd18 <tcp_eff_send_mss_netif+0x8>
 801cd46:	bf00      	nop
 801cd48:	08043d8c 	.word	0x08043d8c
 801cd4c:	08044438 	.word	0x08044438
 801cd50:	0802a008 	.word	0x0802a008

0801cd54 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801cd54:	b308      	cbz	r0, 801cd9a <tcp_netif_ip_addr_changed+0x46>
{
 801cd56:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801cd58:	6803      	ldr	r3, [r0, #0]
 801cd5a:	4604      	mov	r4, r0
 801cd5c:	b903      	cbnz	r3, 801cd60 <tcp_netif_ip_addr_changed+0xc>
}
 801cd5e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801cd60:	4b0e      	ldr	r3, [pc, #56]	; (801cd9c <tcp_netif_ip_addr_changed+0x48>)
 801cd62:	460d      	mov	r5, r1
 801cd64:	6819      	ldr	r1, [r3, #0]
 801cd66:	f7ff fd01 	bl	801c76c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801cd6a:	4b0d      	ldr	r3, [pc, #52]	; (801cda0 <tcp_netif_ip_addr_changed+0x4c>)
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	6819      	ldr	r1, [r3, #0]
 801cd70:	f7ff fcfc 	bl	801c76c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801cd74:	2d00      	cmp	r5, #0
 801cd76:	d0f2      	beq.n	801cd5e <tcp_netif_ip_addr_changed+0xa>
 801cd78:	682b      	ldr	r3, [r5, #0]
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d0ef      	beq.n	801cd5e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cd7e:	4b09      	ldr	r3, [pc, #36]	; (801cda4 <tcp_netif_ip_addr_changed+0x50>)
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d0eb      	beq.n	801cd5e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801cd86:	6819      	ldr	r1, [r3, #0]
 801cd88:	6822      	ldr	r2, [r4, #0]
 801cd8a:	4291      	cmp	r1, r2
 801cd8c:	d101      	bne.n	801cd92 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801cd8e:	682a      	ldr	r2, [r5, #0]
 801cd90:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cd92:	68db      	ldr	r3, [r3, #12]
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d1f6      	bne.n	801cd86 <tcp_netif_ip_addr_changed+0x32>
}
 801cd98:	bd38      	pop	{r3, r4, r5, pc}
 801cd9a:	4770      	bx	lr
 801cd9c:	2002e0bc 	.word	0x2002e0bc
 801cda0:	2002e0c4 	.word	0x2002e0c4
 801cda4:	2002e0c8 	.word	0x2002e0c8

0801cda8 <tcp_free_ooseq>:
{
 801cda8:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801cdaa:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801cdac:	b16c      	cbz	r4, 801cdca <tcp_free_ooseq+0x22>
 801cdae:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801cdb0:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801cdb2:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801cdb4:	6868      	ldr	r0, [r5, #4]
 801cdb6:	b108      	cbz	r0, 801cdbc <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801cdb8:	f7fe fa32 	bl	801b220 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801cdbc:	4629      	mov	r1, r5
 801cdbe:	2004      	movs	r0, #4
 801cdc0:	f7fd fd16 	bl	801a7f0 <memp_free>
  while (seg != NULL) {
 801cdc4:	2c00      	cmp	r4, #0
 801cdc6:	d1f3      	bne.n	801cdb0 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801cdc8:	6774      	str	r4, [r6, #116]	; 0x74
}
 801cdca:	bd70      	pop	{r4, r5, r6, pc}

0801cdcc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801cdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801cdce:	4605      	mov	r5, r0
{
 801cdd0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801cdd2:	2800      	cmp	r0, #0
 801cdd4:	d03e      	beq.n	801ce54 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801cdd6:	68eb      	ldr	r3, [r5, #12]
 801cdd8:	8998      	ldrh	r0, [r3, #12]
 801cdda:	f7fc f9e5 	bl	80191a8 <lwip_htons>
 801cdde:	07c2      	lsls	r2, r0, #31
 801cde0:	d432      	bmi.n	801ce48 <tcp_oos_insert_segment+0x7c>
 801cde2:	4e20      	ldr	r6, [pc, #128]	; (801ce64 <tcp_oos_insert_segment+0x98>)
 801cde4:	e005      	b.n	801cdf2 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801cde6:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801cde8:	4620      	mov	r0, r4
 801cdea:	f7fe ff95 	bl	801bd18 <tcp_seg_free>
    while (next &&
 801cdee:	463c      	mov	r4, r7
 801cdf0:	b1ef      	cbz	r7, 801ce2e <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801cdf2:	68e1      	ldr	r1, [r4, #12]
 801cdf4:	8923      	ldrh	r3, [r4, #8]
 801cdf6:	6837      	ldr	r7, [r6, #0]
 801cdf8:	892a      	ldrh	r2, [r5, #8]
 801cdfa:	6848      	ldr	r0, [r1, #4]
 801cdfc:	443a      	add	r2, r7
 801cdfe:	4403      	add	r3, r0
 801ce00:	1ad3      	subs	r3, r2, r3
    while (next &&
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	db15      	blt.n	801ce32 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ce06:	8988      	ldrh	r0, [r1, #12]
 801ce08:	f7fc f9ce 	bl	80191a8 <lwip_htons>
 801ce0c:	07c3      	lsls	r3, r0, #31
 801ce0e:	d5ea      	bpl.n	801cde6 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ce10:	68eb      	ldr	r3, [r5, #12]
 801ce12:	2001      	movs	r0, #1
 801ce14:	899f      	ldrh	r7, [r3, #12]
 801ce16:	f7fc f9c7 	bl	80191a8 <lwip_htons>
 801ce1a:	68eb      	ldr	r3, [r5, #12]
 801ce1c:	4338      	orrs	r0, r7
      next = next->next;
 801ce1e:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ce20:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801ce22:	4620      	mov	r0, r4
 801ce24:	f7fe ff78 	bl	801bd18 <tcp_seg_free>
    while (next &&
 801ce28:	463c      	mov	r4, r7
 801ce2a:	2f00      	cmp	r7, #0
 801ce2c:	d1e1      	bne.n	801cdf2 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801ce2e:	602c      	str	r4, [r5, #0]
}
 801ce30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801ce32:	1a12      	subs	r2, r2, r0
    if (next &&
 801ce34:	2a00      	cmp	r2, #0
 801ce36:	ddfa      	ble.n	801ce2e <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ce38:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801ce3a:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ce3c:	b289      	uxth	r1, r1
 801ce3e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801ce40:	f7fe f8d6 	bl	801aff0 <pbuf_realloc>
  cseg->next = next;
 801ce44:	602c      	str	r4, [r5, #0]
}
 801ce46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801ce48:	4620      	mov	r0, r4
    next = NULL;
 801ce4a:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801ce4c:	f7fe ff52 	bl	801bcf4 <tcp_segs_free>
  cseg->next = next;
 801ce50:	602c      	str	r4, [r5, #0]
}
 801ce52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ce54:	4b04      	ldr	r3, [pc, #16]	; (801ce68 <tcp_oos_insert_segment+0x9c>)
 801ce56:	f240 421f 	movw	r2, #1055	; 0x41f
 801ce5a:	4904      	ldr	r1, [pc, #16]	; (801ce6c <tcp_oos_insert_segment+0xa0>)
 801ce5c:	4804      	ldr	r0, [pc, #16]	; (801ce70 <tcp_oos_insert_segment+0xa4>)
 801ce5e:	f008 faa9 	bl	80253b4 <iprintf>
 801ce62:	e7b8      	b.n	801cdd6 <tcp_oos_insert_segment+0xa>
 801ce64:	2002e0fc 	.word	0x2002e0fc
 801ce68:	08044488 	.word	0x08044488
 801ce6c:	080444bc 	.word	0x080444bc
 801ce70:	0802a008 	.word	0x0802a008

0801ce74 <tcp_input_delayed_close>:
{
 801ce74:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ce76:	4604      	mov	r4, r0
 801ce78:	b1c8      	cbz	r0, 801ceae <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801ce7a:	4b11      	ldr	r3, [pc, #68]	; (801cec0 <tcp_input_delayed_close+0x4c>)
 801ce7c:	781b      	ldrb	r3, [r3, #0]
 801ce7e:	f013 0310 	ands.w	r3, r3, #16
 801ce82:	d101      	bne.n	801ce88 <tcp_input_delayed_close+0x14>
  return 0;
 801ce84:	4618      	mov	r0, r3
}
 801ce86:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ce88:	8b63      	ldrh	r3, [r4, #26]
 801ce8a:	06db      	lsls	r3, r3, #27
 801ce8c:	d406      	bmi.n	801ce9c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ce8e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801ce92:	b11b      	cbz	r3, 801ce9c <tcp_input_delayed_close+0x28>
 801ce94:	f06f 010e 	mvn.w	r1, #14
 801ce98:	6920      	ldr	r0, [r4, #16]
 801ce9a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ce9c:	4621      	mov	r1, r4
 801ce9e:	4809      	ldr	r0, [pc, #36]	; (801cec4 <tcp_input_delayed_close+0x50>)
 801cea0:	f7ff fb02 	bl	801c4a8 <tcp_pcb_remove>
    tcp_free(pcb);
 801cea4:	4620      	mov	r0, r4
 801cea6:	f7fe fcfb 	bl	801b8a0 <tcp_free>
 801ceaa:	2001      	movs	r0, #1
}
 801ceac:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ceae:	4b06      	ldr	r3, [pc, #24]	; (801cec8 <tcp_input_delayed_close+0x54>)
 801ceb0:	f240 225a 	movw	r2, #602	; 0x25a
 801ceb4:	4905      	ldr	r1, [pc, #20]	; (801cecc <tcp_input_delayed_close+0x58>)
 801ceb6:	4806      	ldr	r0, [pc, #24]	; (801ced0 <tcp_input_delayed_close+0x5c>)
 801ceb8:	f008 fa7c 	bl	80253b4 <iprintf>
 801cebc:	e7dd      	b.n	801ce7a <tcp_input_delayed_close+0x6>
 801cebe:	bf00      	nop
 801cec0:	2002e0f8 	.word	0x2002e0f8
 801cec4:	2002e0bc 	.word	0x2002e0bc
 801cec8:	08044488 	.word	0x08044488
 801cecc:	080444e4 	.word	0x080444e4
 801ced0:	0802a008 	.word	0x0802a008

0801ced4 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801ced4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ced8:	b083      	sub	sp, #12
 801ceda:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801cedc:	2900      	cmp	r1, #0
 801cede:	d03d      	beq.n	801cf5c <tcp_free_acked_segments.constprop.0+0x88>
 801cee0:	4607      	mov	r7, r0
 801cee2:	460c      	mov	r4, r1
 801cee4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801cfac <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cee8:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801cfa0 <tcp_free_acked_segments.constprop.0+0xcc>
 801ceec:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801cfb0 <tcp_free_acked_segments.constprop.0+0xdc>
 801cef0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801cfa8 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801cef4:	68e3      	ldr	r3, [r4, #12]
 801cef6:	6858      	ldr	r0, [r3, #4]
 801cef8:	f7fc f95a 	bl	80191b0 <lwip_htonl>
 801cefc:	68e3      	ldr	r3, [r4, #12]
 801cefe:	4605      	mov	r5, r0
 801cf00:	8926      	ldrh	r6, [r4, #8]
 801cf02:	8998      	ldrh	r0, [r3, #12]
 801cf04:	f7fc f950 	bl	80191a8 <lwip_htons>
 801cf08:	f8d8 3000 	ldr.w	r3, [r8]
 801cf0c:	f010 0003 	ands.w	r0, r0, #3
 801cf10:	eba5 0503 	sub.w	r5, r5, r3
 801cf14:	bf18      	it	ne
 801cf16:	2001      	movne	r0, #1
 801cf18:	4435      	add	r5, r6
 801cf1a:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801cf1c:	2800      	cmp	r0, #0
 801cf1e:	dc37      	bgt.n	801cf90 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801cf20:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801cf24:	f7fe f990 	bl	801b248 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cf28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801cf2c:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cf2e:	4298      	cmp	r0, r3
 801cf30:	d824      	bhi.n	801cf7c <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cf32:	491a      	ldr	r1, [pc, #104]	; (801cf9c <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cf34:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cf36:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801cf38:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cf3a:	880d      	ldrh	r5, [r1, #0]
 801cf3c:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cf3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cf42:	1953      	adds	r3, r2, r5
 801cf44:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801cf46:	f7fe fee7 	bl	801bd18 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801cf4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801cf4e:	b11b      	cbz	r3, 801cf58 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801cf50:	9b01      	ldr	r3, [sp, #4]
 801cf52:	ea56 0503 	orrs.w	r5, r6, r3
 801cf56:	d006      	beq.n	801cf66 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801cf58:	2e00      	cmp	r6, #0
 801cf5a:	d1cb      	bne.n	801cef4 <tcp_free_acked_segments.constprop.0+0x20>
 801cf5c:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801cf5e:	4628      	mov	r0, r5
 801cf60:	b003      	add	sp, #12
 801cf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801cf66:	4b0e      	ldr	r3, [pc, #56]	; (801cfa0 <tcp_free_acked_segments.constprop.0+0xcc>)
 801cf68:	f240 4261 	movw	r2, #1121	; 0x461
 801cf6c:	490d      	ldr	r1, [pc, #52]	; (801cfa4 <tcp_free_acked_segments.constprop.0+0xd0>)
 801cf6e:	480e      	ldr	r0, [pc, #56]	; (801cfa8 <tcp_free_acked_segments.constprop.0+0xd4>)
 801cf70:	f008 fa20 	bl	80253b4 <iprintf>
}
 801cf74:	4628      	mov	r0, r5
 801cf76:	b003      	add	sp, #12
 801cf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cf7c:	465b      	mov	r3, fp
 801cf7e:	f240 4257 	movw	r2, #1111	; 0x457
 801cf82:	4651      	mov	r1, sl
 801cf84:	4648      	mov	r0, r9
 801cf86:	f008 fa15 	bl	80253b4 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cf8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801cf8e:	e7d0      	b.n	801cf32 <tcp_free_acked_segments.constprop.0+0x5e>
 801cf90:	4625      	mov	r5, r4
}
 801cf92:	4628      	mov	r0, r5
 801cf94:	b003      	add	sp, #12
 801cf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf9a:	bf00      	nop
 801cf9c:	2002e0f0 	.word	0x2002e0f0
 801cfa0:	08044488 	.word	0x08044488
 801cfa4:	08044534 	.word	0x08044534
 801cfa8:	0802a008 	.word	0x0802a008
 801cfac:	2002e0d8 	.word	0x2002e0d8
 801cfb0:	0804450c 	.word	0x0804450c

0801cfb4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801cfb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801cfb8:	4604      	mov	r4, r0
 801cfba:	2800      	cmp	r0, #0
 801cfbc:	f000 8200 	beq.w	801d3c0 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801cfc0:	7d23      	ldrb	r3, [r4, #20]
 801cfc2:	2b03      	cmp	r3, #3
 801cfc4:	f240 811e 	bls.w	801d204 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801cfc8:	4bb4      	ldr	r3, [pc, #720]	; (801d29c <tcp_receive+0x2e8>)
 801cfca:	781b      	ldrb	r3, [r3, #0]
 801cfcc:	06dd      	lsls	r5, r3, #27
 801cfce:	f100 8097 	bmi.w	801d100 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cfd2:	4fb3      	ldr	r7, [pc, #716]	; (801d2a0 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cfd4:	4eb3      	ldr	r6, [pc, #716]	; (801d2a4 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cfd6:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cfd8:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cfda:	2900      	cmp	r1, #0
 801cfdc:	d07f      	beq.n	801d0de <tcp_receive+0x12a>
 801cfde:	7d22      	ldrb	r2, [r4, #20]
 801cfe0:	2a06      	cmp	r2, #6
 801cfe2:	d87c      	bhi.n	801d0de <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cfe4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801cfe6:	eba2 0803 	sub.w	r8, r2, r3
 801cfea:	f1b8 0f01 	cmp.w	r8, #1
 801cfee:	d405      	bmi.n	801cffc <tcp_receive+0x48>
 801cff0:	1c50      	adds	r0, r2, #1
 801cff2:	1ac0      	subs	r0, r0, r3
 801cff4:	1a41      	subs	r1, r0, r1
 801cff6:	2900      	cmp	r1, #0
 801cff8:	f340 81f3 	ble.w	801d3e2 <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801cffc:	1a99      	subs	r1, r3, r2
 801cffe:	2900      	cmp	r1, #0
 801d000:	f2c0 81ea 	blt.w	801d3d8 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d004:	f103 0c01 	add.w	ip, r3, #1
 801d008:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801d00a:	ebac 0102 	sub.w	r1, ip, r2
 801d00e:	1a09      	subs	r1, r1, r0
 801d010:	2900      	cmp	r1, #0
 801d012:	dc39      	bgt.n	801d088 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801d014:	429a      	cmp	r2, r3
 801d016:	f000 8470 	beq.w	801d8fa <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801d01a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801d01c:	2d00      	cmp	r5, #0
 801d01e:	f000 8378 	beq.w	801d712 <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801d022:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801d024:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d028:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801d02c:	6842      	ldr	r2, [r0, #4]
 801d02e:	429a      	cmp	r2, r3
 801d030:	d019      	beq.n	801d066 <tcp_receive+0xb2>
              if (prev == NULL) {
 801d032:	f1b8 0f00 	cmp.w	r8, #0
 801d036:	f000 815b 	beq.w	801d2f0 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d03a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801d03e:	6849      	ldr	r1, [r1, #4]
 801d040:	ebae 0101 	sub.w	r1, lr, r1
 801d044:	2900      	cmp	r1, #0
 801d046:	db04      	blt.n	801d052 <tcp_receive+0x9e>
 801d048:	ebac 0102 	sub.w	r1, ip, r2
 801d04c:	2900      	cmp	r1, #0
 801d04e:	f340 8369 	ble.w	801d724 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801d052:	6829      	ldr	r1, [r5, #0]
 801d054:	46a8      	mov	r8, r5
 801d056:	2900      	cmp	r1, #0
 801d058:	f000 8159 	beq.w	801d30e <tcp_receive+0x35a>
 801d05c:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801d05e:	68e8      	ldr	r0, [r5, #12]
 801d060:	6842      	ldr	r2, [r0, #4]
 801d062:	429a      	cmp	r2, r3
 801d064:	d1e5      	bne.n	801d032 <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801d066:	4890      	ldr	r0, [pc, #576]	; (801d2a8 <tcp_receive+0x2f4>)
 801d068:	892b      	ldrh	r3, [r5, #8]
 801d06a:	8902      	ldrh	r2, [r0, #8]
 801d06c:	429a      	cmp	r2, r3
 801d06e:	d90b      	bls.n	801d088 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d070:	f7fe fe70 	bl	801bd54 <tcp_seg_copy>
                if (cseg != NULL) {
 801d074:	b140      	cbz	r0, 801d088 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801d076:	f1b8 0f00 	cmp.w	r8, #0
 801d07a:	f000 8414 	beq.w	801d8a6 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801d07e:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801d082:	4629      	mov	r1, r5
 801d084:	f7ff fea2 	bl	801cdcc <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d088:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801d08a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801d08e:	f002 ba47 	b.w	801f520 <tcp_send_empty_ack>
      if (tcplen == 0) {
 801d092:	4f83      	ldr	r7, [pc, #524]	; (801d2a0 <tcp_receive+0x2ec>)
 801d094:	8839      	ldrh	r1, [r7, #0]
 801d096:	2900      	cmp	r1, #0
 801d098:	f040 8116 	bne.w	801d2c8 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801d09c:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801d09e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d0a0:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801d0a4:	4470      	add	r0, lr
 801d0a6:	4560      	cmp	r0, ip
 801d0a8:	f040 810e 	bne.w	801d2c8 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801d0ac:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801d0ae:	0400      	lsls	r0, r0, #16
 801d0b0:	f100 810a 	bmi.w	801d2c8 <tcp_receive+0x314>
 801d0b4:	4590      	cmp	r8, r2
 801d0b6:	f040 8107 	bne.w	801d2c8 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801d0ba:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801d0be:	28ff      	cmp	r0, #255	; 0xff
 801d0c0:	f000 8393 	beq.w	801d7ea <tcp_receive+0x836>
                ++pcb->dupacks;
 801d0c4:	3001      	adds	r0, #1
 801d0c6:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801d0c8:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801d0ca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801d0ce:	f200 838c 	bhi.w	801d7ea <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801d0d2:	f000 8396 	beq.w	801d802 <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801d0d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801d0d8:	2800      	cmp	r0, #0
 801d0da:	f040 80b6 	bne.w	801d24a <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d0de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d0e0:	1a99      	subs	r1, r3, r2
 801d0e2:	2900      	cmp	r1, #0
 801d0e4:	db06      	blt.n	801d0f4 <tcp_receive+0x140>
 801d0e6:	f1c2 0201 	rsb	r2, r2, #1
 801d0ea:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801d0ec:	1a52      	subs	r2, r2, r1
 801d0ee:	4413      	add	r3, r2
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	dd03      	ble.n	801d0fc <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801d0f4:	8b63      	ldrh	r3, [r4, #26]
 801d0f6:	f043 0302 	orr.w	r3, r3, #2
 801d0fa:	8363      	strh	r3, [r4, #26]
}
 801d0fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d100:	4e68      	ldr	r6, [pc, #416]	; (801d2a4 <tcp_receive+0x2f0>)
 801d102:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801d104:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801d106:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d10a:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801d10c:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d110:	2900      	cmp	r1, #0
 801d112:	db7f      	blt.n	801d214 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d114:	4d65      	ldr	r5, [pc, #404]	; (801d2ac <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d116:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d118:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d11a:	f000 80d9 	beq.w	801d2d0 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d11e:	4594      	cmp	ip, r2
 801d120:	f000 80df 	beq.w	801d2e2 <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801d124:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801d128:	eba2 0108 	sub.w	r1, r2, r8
 801d12c:	2900      	cmp	r1, #0
 801d12e:	ddb0      	ble.n	801d092 <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d130:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d132:	1ad3      	subs	r3, r2, r3
 801d134:	2b00      	cmp	r3, #0
 801d136:	dc7d      	bgt.n	801d234 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801d138:	8b63      	ldrh	r3, [r4, #26]
 801d13a:	0758      	lsls	r0, r3, #29
 801d13c:	d509      	bpl.n	801d152 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801d13e:	f023 0304 	bic.w	r3, r3, #4
 801d142:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801d144:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801d148:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801d14c:	2300      	movs	r3, #0
 801d14e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d152:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801d156:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801d158:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d15a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801d15e:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d160:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801d164:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801d166:	f04f 0300 	mov.w	r3, #0
 801d16a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801d16e:	d913      	bls.n	801d198 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801d170:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801d174:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801d176:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801d17a:	429a      	cmp	r2, r3
 801d17c:	f200 81c9 	bhi.w	801d512 <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801d180:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801d184:	4411      	add	r1, r2
 801d186:	b289      	uxth	r1, r1
 801d188:	428a      	cmp	r2, r1
 801d18a:	f200 82a9 	bhi.w	801d6e0 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801d18e:	428b      	cmp	r3, r1
 801d190:	f240 82a8 	bls.w	801d6e4 <tcp_receive+0x730>
 801d194:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801d198:	4620      	mov	r0, r4
 801d19a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801d19e:	f7ff fe99 	bl	801ced4 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801d1a2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d1a4:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801d1a6:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801d1a8:	4620      	mov	r0, r4
 801d1aa:	f7ff fe93 	bl	801ced4 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801d1ae:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801d1b0:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801d1b2:	fab2 f382 	clz	r3, r2
 801d1b6:	095b      	lsrs	r3, r3, #5
 801d1b8:	425b      	negs	r3, r3
 801d1ba:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801d1bc:	2300      	movs	r3, #0
 801d1be:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801d1c0:	2800      	cmp	r0, #0
 801d1c2:	f000 81a3 	beq.w	801d50c <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801d1c6:	4b3a      	ldr	r3, [pc, #232]	; (801d2b0 <tcp_receive+0x2fc>)
 801d1c8:	8819      	ldrh	r1, [r3, #0]
 801d1ca:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801d1ce:	440b      	add	r3, r1
 801d1d0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801d1d4:	8b63      	ldrh	r3, [r4, #26]
 801d1d6:	0519      	lsls	r1, r3, #20
 801d1d8:	f140 80fa 	bpl.w	801d3d0 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801d1dc:	2a00      	cmp	r2, #0
 801d1de:	f000 81af 	beq.w	801d540 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801d1e2:	68d3      	ldr	r3, [r2, #12]
 801d1e4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801d1e6:	6858      	ldr	r0, [r3, #4]
 801d1e8:	f7fb ffe2 	bl	80191b0 <lwip_htonl>
 801d1ec:	1a38      	subs	r0, r7, r0
 801d1ee:	2800      	cmp	r0, #0
 801d1f0:	f300 80ee 	bgt.w	801d3d0 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801d1f4:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d1f6:	4f2a      	ldr	r7, [pc, #168]	; (801d2a0 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801d1f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d1fc:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801d1fe:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d200:	6833      	ldr	r3, [r6, #0]
 801d202:	e01d      	b.n	801d240 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801d204:	4b2b      	ldr	r3, [pc, #172]	; (801d2b4 <tcp_receive+0x300>)
 801d206:	f240 427c 	movw	r2, #1148	; 0x47c
 801d20a:	492b      	ldr	r1, [pc, #172]	; (801d2b8 <tcp_receive+0x304>)
 801d20c:	482b      	ldr	r0, [pc, #172]	; (801d2bc <tcp_receive+0x308>)
 801d20e:	f008 f8d1 	bl	80253b4 <iprintf>
 801d212:	e6d9      	b.n	801cfc8 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d214:	4a2a      	ldr	r2, [pc, #168]	; (801d2c0 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d216:	4d25      	ldr	r5, [pc, #148]	; (801d2ac <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d218:	6812      	ldr	r2, [r2, #0]
 801d21a:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d21c:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801d21e:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801d222:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801d226:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801d228:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d22c:	bf38      	it	cc
 801d22e:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801d232:	e777      	b.n	801d124 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d234:	4f1a      	ldr	r7, [pc, #104]	; (801d2a0 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801d236:	4620      	mov	r0, r4
 801d238:	f002 f972 	bl	801f520 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d23c:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d23e:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801d240:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801d242:	2800      	cmp	r0, #0
 801d244:	f43f aec9 	beq.w	801cfda <tcp_receive+0x26>
 801d248:	682a      	ldr	r2, [r5, #0]
 801d24a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801d24c:	1aaa      	subs	r2, r5, r2
 801d24e:	2a00      	cmp	r2, #0
 801d250:	f6bf aec3 	bge.w	801cfda <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801d254:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801d258:	b280      	uxth	r0, r0
 801d25a:	4a1a      	ldr	r2, [pc, #104]	; (801d2c4 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801d25c:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801d260:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801d264:	ebae 020c 	sub.w	r2, lr, ip
 801d268:	1a12      	subs	r2, r2, r0
 801d26a:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801d26c:	4415      	add	r5, r2
      if (m < 0) {
 801d26e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801d272:	b22d      	sxth	r5, r5
 801d274:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801d276:	d003      	beq.n	801d280 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801d278:	ebac 0c0e 	sub.w	ip, ip, lr
 801d27c:	4460      	add	r0, ip
 801d27e:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801d280:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801d284:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801d288:	4410      	add	r0, r2
      pcb->rttest = 0;
 801d28a:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801d28c:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801d28e:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d290:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801d294:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d296:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801d29a:	e69e      	b.n	801cfda <tcp_receive+0x26>
 801d29c:	2002e0dc 	.word	0x2002e0dc
 801d2a0:	2002e116 	.word	0x2002e116
 801d2a4:	2002e0fc 	.word	0x2002e0fc
 801d2a8:	2002e0e0 	.word	0x2002e0e0
 801d2ac:	2002e0d8 	.word	0x2002e0d8
 801d2b0:	2002e0f0 	.word	0x2002e0f0
 801d2b4:	08044488 	.word	0x08044488
 801d2b8:	08044570 	.word	0x08044570
 801d2bc:	0802a008 	.word	0x0802a008
 801d2c0:	2002e108 	.word	0x2002e108
 801d2c4:	2002e0cc 	.word	0x2002e0cc
        pcb->dupacks = 0;
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801d2ce:	e7b7      	b.n	801d240 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d2d0:	ebac 0102 	sub.w	r1, ip, r2
 801d2d4:	2900      	cmp	r1, #0
 801d2d6:	f6bf af22 	bge.w	801d11e <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d2da:	49ac      	ldr	r1, [pc, #688]	; (801d58c <tcp_receive+0x5d8>)
 801d2dc:	6809      	ldr	r1, [r1, #0]
 801d2de:	89c9      	ldrh	r1, [r1, #14]
 801d2e0:	e79d      	b.n	801d21e <tcp_receive+0x26a>
 801d2e2:	49aa      	ldr	r1, [pc, #680]	; (801d58c <tcp_receive+0x5d8>)
 801d2e4:	6809      	ldr	r1, [r1, #0]
 801d2e6:	89c9      	ldrh	r1, [r1, #14]
 801d2e8:	458e      	cmp	lr, r1
 801d2ea:	f4bf af1b 	bcs.w	801d124 <tcp_receive+0x170>
 801d2ee:	e796      	b.n	801d21e <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d2f0:	1a99      	subs	r1, r3, r2
 801d2f2:	2900      	cmp	r1, #0
 801d2f4:	f6bf aead 	bge.w	801d052 <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d2f8:	48a5      	ldr	r0, [pc, #660]	; (801d590 <tcp_receive+0x5dc>)
 801d2fa:	f7fe fd2b 	bl	801bd54 <tcp_seg_copy>
                  if (cseg != NULL) {
 801d2fe:	2800      	cmp	r0, #0
 801d300:	f43f aec2 	beq.w	801d088 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801d304:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801d306:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801d308:	f7ff fd60 	bl	801cdcc <tcp_oos_insert_segment>
 801d30c:	e6bc      	b.n	801d088 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801d30e:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801d310:	2b00      	cmp	r3, #0
 801d312:	f77f aeb9 	ble.w	801d088 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d316:	8980      	ldrh	r0, [r0, #12]
 801d318:	f7fb ff46 	bl	80191a8 <lwip_htons>
 801d31c:	07c1      	lsls	r1, r0, #31
 801d31e:	f53f aeb3 	bmi.w	801d088 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801d322:	489b      	ldr	r0, [pc, #620]	; (801d590 <tcp_receive+0x5dc>)
 801d324:	f7fe fd16 	bl	801bd54 <tcp_seg_copy>
 801d328:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801d32a:	2800      	cmp	r0, #0
 801d32c:	f43f aeac 	beq.w	801d088 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d330:	68eb      	ldr	r3, [r5, #12]
 801d332:	892a      	ldrh	r2, [r5, #8]
 801d334:	6859      	ldr	r1, [r3, #4]
 801d336:	6833      	ldr	r3, [r6, #0]
 801d338:	440a      	add	r2, r1
 801d33a:	1ad2      	subs	r2, r2, r3
 801d33c:	2a00      	cmp	r2, #0
 801d33e:	dd05      	ble.n	801d34c <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d340:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801d342:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d344:	b299      	uxth	r1, r3
 801d346:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801d348:	f7fd fe52 	bl	801aff0 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d34c:	6832      	ldr	r2, [r6, #0]
 801d34e:	883b      	ldrh	r3, [r7, #0]
 801d350:	4413      	add	r3, r2
 801d352:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d354:	1a9b      	subs	r3, r3, r2
 801d356:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801d358:	1a9b      	subs	r3, r3, r2
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	f77f ae94 	ble.w	801d088 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d360:	682b      	ldr	r3, [r5, #0]
 801d362:	68db      	ldr	r3, [r3, #12]
 801d364:	8998      	ldrh	r0, [r3, #12]
 801d366:	f7fb ff1f 	bl	80191a8 <lwip_htons>
 801d36a:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d36c:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d36e:	f100 82b1 	bmi.w	801d8d4 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d372:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801d374:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801d376:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d378:	1a89      	subs	r1, r1, r2
 801d37a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d37c:	4411      	add	r1, r2
 801d37e:	b289      	uxth	r1, r1
 801d380:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d382:	f7fd fe35 	bl	801aff0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d386:	682b      	ldr	r3, [r5, #0]
 801d388:	891d      	ldrh	r5, [r3, #8]
 801d38a:	68db      	ldr	r3, [r3, #12]
 801d38c:	8998      	ldrh	r0, [r3, #12]
 801d38e:	f7fb ff0b 	bl	80191a8 <lwip_htons>
 801d392:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d396:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801d398:	bf18      	it	ne
 801d39a:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d39c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801d39e:	442b      	add	r3, r5
 801d3a0:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d3a2:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801d3a4:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d3a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d3a8:	4413      	add	r3, r2
 801d3aa:	4299      	cmp	r1, r3
 801d3ac:	f43f ae6c 	beq.w	801d088 <tcp_receive+0xd4>
 801d3b0:	4b78      	ldr	r3, [pc, #480]	; (801d594 <tcp_receive+0x5e0>)
 801d3b2:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d3b6:	4978      	ldr	r1, [pc, #480]	; (801d598 <tcp_receive+0x5e4>)
 801d3b8:	4878      	ldr	r0, [pc, #480]	; (801d59c <tcp_receive+0x5e8>)
 801d3ba:	f007 fffb 	bl	80253b4 <iprintf>
 801d3be:	e663      	b.n	801d088 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801d3c0:	4b74      	ldr	r3, [pc, #464]	; (801d594 <tcp_receive+0x5e0>)
 801d3c2:	f240 427b 	movw	r2, #1147	; 0x47b
 801d3c6:	4976      	ldr	r1, [pc, #472]	; (801d5a0 <tcp_receive+0x5ec>)
 801d3c8:	4874      	ldr	r0, [pc, #464]	; (801d59c <tcp_receive+0x5e8>)
 801d3ca:	f007 fff3 	bl	80253b4 <iprintf>
 801d3ce:	e5f7      	b.n	801cfc0 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d3d0:	4f74      	ldr	r7, [pc, #464]	; (801d5a4 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d3d2:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d3d4:	8839      	ldrh	r1, [r7, #0]
 801d3d6:	e733      	b.n	801d240 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801d3d8:	8b63      	ldrh	r3, [r4, #26]
 801d3da:	f043 0302 	orr.w	r3, r3, #2
 801d3de:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d3e0:	e652      	b.n	801d088 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801d3e2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801d590 <tcp_receive+0x5dc>
 801d3e6:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d3ea:	2d00      	cmp	r5, #0
 801d3ec:	f000 8170 	beq.w	801d6d0 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d3f0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801d3f4:	4598      	cmp	r8, r3
 801d3f6:	f200 80c0 	bhi.w	801d57a <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d3fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801d3fe:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d402:	891a      	ldrh	r2, [r3, #8]
 801d404:	4542      	cmp	r2, r8
 801d406:	f0c0 80ad 	bcc.w	801d564 <tcp_receive+0x5b0>
      inseg.len -= off;
 801d40a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d40e:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801d412:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d416:	b292      	uxth	r2, r2
      inseg.len -= off;
 801d418:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801d41c:	896b      	ldrh	r3, [r5, #10]
 801d41e:	4543      	cmp	r3, r8
 801d420:	d20a      	bcs.n	801d438 <tcp_receive+0x484>
        p->len = 0;
 801d422:	2100      	movs	r1, #0
        off -= p->len;
 801d424:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801d428:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801d42a:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801d42c:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801d42e:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801d432:	896b      	ldrh	r3, [r5, #10]
 801d434:	4543      	cmp	r3, r8
 801d436:	d3f5      	bcc.n	801d424 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801d438:	4641      	mov	r1, r8
 801d43a:	4628      	mov	r0, r5
 801d43c:	f7fd fe64 	bl	801b108 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801d440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d442:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d446:	6033      	str	r3, [r6, #0]
 801d448:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d44a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	f43f ae1b 	beq.w	801d088 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801d452:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d456:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801d45a:	8998      	ldrh	r0, [r3, #12]
 801d45c:	f7fb fea4 	bl	80191a8 <lwip_htons>
 801d460:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801d464:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801d466:	bf18      	it	ne
 801d468:	2301      	movne	r3, #1
 801d46a:	442b      	add	r3, r5
 801d46c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801d46e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801d470:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801d472:	f0c0 8181 	bcc.w	801d778 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801d476:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d478:	2b00      	cmp	r3, #0
 801d47a:	f000 80a0 	beq.w	801d5be <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d47e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d482:	8998      	ldrh	r0, [r3, #12]
 801d484:	f7fb fe90 	bl	80191a8 <lwip_htons>
 801d488:	07c2      	lsls	r2, r0, #31
 801d48a:	f100 8095 	bmi.w	801d5b8 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801d48e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801d490:	b955      	cbnz	r5, 801d4a8 <tcp_receive+0x4f4>
 801d492:	e1f4      	b.n	801d87e <tcp_receive+0x8ca>
              next = next->next;
 801d494:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801d498:	4628      	mov	r0, r5
 801d49a:	f7fe fc3d 	bl	801bd18 <tcp_seg_free>
            while (next &&
 801d49e:	4645      	mov	r5, r8
 801d4a0:	f1b8 0f00 	cmp.w	r8, #0
 801d4a4:	f000 81eb 	beq.w	801d87e <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801d4a8:	68e8      	ldr	r0, [r5, #12]
 801d4aa:	883a      	ldrh	r2, [r7, #0]
 801d4ac:	f8d6 e000 	ldr.w	lr, [r6]
 801d4b0:	892b      	ldrh	r3, [r5, #8]
 801d4b2:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801d4b6:	eb02 010e 	add.w	r1, r2, lr
 801d4ba:	4463      	add	r3, ip
 801d4bc:	1acb      	subs	r3, r1, r3
            while (next &&
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	f2c0 81a5 	blt.w	801d80e <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d4c4:	8980      	ldrh	r0, [r0, #12]
 801d4c6:	f7fb fe6f 	bl	80191a8 <lwip_htons>
 801d4ca:	07c3      	lsls	r3, r0, #31
 801d4cc:	d5e2      	bpl.n	801d494 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801d4ce:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d4d2:	8998      	ldrh	r0, [r3, #12]
 801d4d4:	f7fb fe68 	bl	80191a8 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d4d8:	0780      	lsls	r0, r0, #30
 801d4da:	d4db      	bmi.n	801d494 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d4dc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d4e0:	2001      	movs	r0, #1
 801d4e2:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801d4e6:	f7fb fe5f 	bl	80191a8 <lwip_htons>
 801d4ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d4ee:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801d4f2:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d4f6:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801d4f8:	b280      	uxth	r0, r0
 801d4fa:	f7fb fe55 	bl	80191a8 <lwip_htons>
 801d4fe:	f010 0003 	ands.w	r0, r0, #3
 801d502:	bf18      	it	ne
 801d504:	2001      	movne	r0, #1
 801d506:	4440      	add	r0, r8
 801d508:	8038      	strh	r0, [r7, #0]
 801d50a:	e7c3      	b.n	801d494 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801d50c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801d510:	e659      	b.n	801d1c6 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801d512:	8b62      	ldrh	r2, [r4, #26]
 801d514:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801d518:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801d51a:	bf14      	ite	ne
 801d51c:	2001      	movne	r0, #1
 801d51e:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801d520:	fb12 f200 	smulbb	r2, r2, r0
 801d524:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801d526:	428a      	cmp	r2, r1
 801d528:	bf94      	ite	ls
 801d52a:	1898      	addls	r0, r3, r2
 801d52c:	1858      	addhi	r0, r3, r1
 801d52e:	b282      	uxth	r2, r0
 801d530:	4293      	cmp	r3, r2
 801d532:	f240 80e0 	bls.w	801d6f6 <tcp_receive+0x742>
 801d536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d53a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801d53e:	e62b      	b.n	801d198 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801d540:	b148      	cbz	r0, 801d556 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801d542:	68c3      	ldr	r3, [r0, #12]
 801d544:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801d546:	6858      	ldr	r0, [r3, #4]
 801d548:	f7fb fe32 	bl	80191b0 <lwip_htonl>
 801d54c:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801d54e:	2800      	cmp	r0, #0
 801d550:	f73f af3e 	bgt.w	801d3d0 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801d554:	8b63      	ldrh	r3, [r4, #26]
 801d556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d55a:	4f12      	ldr	r7, [pc, #72]	; (801d5a4 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801d55c:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d55e:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d560:	6833      	ldr	r3, [r6, #0]
 801d562:	e66d      	b.n	801d240 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d564:	4b0b      	ldr	r3, [pc, #44]	; (801d594 <tcp_receive+0x5e0>)
 801d566:	f240 5297 	movw	r2, #1431	; 0x597
 801d56a:	490f      	ldr	r1, [pc, #60]	; (801d5a8 <tcp_receive+0x5f4>)
 801d56c:	480b      	ldr	r0, [pc, #44]	; (801d59c <tcp_receive+0x5e8>)
 801d56e:	f007 ff21 	bl	80253b4 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d572:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d576:	891a      	ldrh	r2, [r3, #8]
 801d578:	e747      	b.n	801d40a <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d57a:	4b06      	ldr	r3, [pc, #24]	; (801d594 <tcp_receive+0x5e0>)
 801d57c:	f240 5295 	movw	r2, #1429	; 0x595
 801d580:	490a      	ldr	r1, [pc, #40]	; (801d5ac <tcp_receive+0x5f8>)
 801d582:	4806      	ldr	r0, [pc, #24]	; (801d59c <tcp_receive+0x5e8>)
 801d584:	f007 ff16 	bl	80253b4 <iprintf>
 801d588:	e737      	b.n	801d3fa <tcp_receive+0x446>
 801d58a:	bf00      	nop
 801d58c:	2002e108 	.word	0x2002e108
 801d590:	2002e0e0 	.word	0x2002e0e0
 801d594:	08044488 	.word	0x08044488
 801d598:	080445bc 	.word	0x080445bc
 801d59c:	0802a008 	.word	0x0802a008
 801d5a0:	08044554 	.word	0x08044554
 801d5a4:	2002e116 	.word	0x2002e116
 801d5a8:	080445ac 	.word	0x080445ac
 801d5ac:	0804459c 	.word	0x0804459c
              pcb->ooseq = pcb->ooseq->next;
 801d5b0:	6803      	ldr	r3, [r0, #0]
 801d5b2:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801d5b4:	f7fe fbb0 	bl	801bd18 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801d5b8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801d5ba:	2800      	cmp	r0, #0
 801d5bc:	d1f8      	bne.n	801d5b0 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801d5be:	883a      	ldrh	r2, [r7, #0]
 801d5c0:	6831      	ldr	r1, [r6, #0]
 801d5c2:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d5c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801d5c6:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d5c8:	4293      	cmp	r3, r2
 801d5ca:	f0c0 80cb 	bcc.w	801d764 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801d5ce:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801d5d0:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801d5d2:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801d5d4:	f7fe fa68 	bl	801baa8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801d5d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d5dc:	891a      	ldrh	r2, [r3, #8]
 801d5de:	b122      	cbz	r2, 801d5ea <tcp_receive+0x636>
          recv_data = inseg.p;
 801d5e0:	4ab2      	ldr	r2, [pc, #712]	; (801d8ac <tcp_receive+0x8f8>)
 801d5e2:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801d5e4:	2300      	movs	r3, #0
 801d5e6:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d5ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d5ee:	8998      	ldrh	r0, [r3, #12]
 801d5f0:	f7fb fdda 	bl	80191a8 <lwip_htons>
 801d5f4:	07c2      	lsls	r2, r0, #31
 801d5f6:	d504      	bpl.n	801d602 <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801d5f8:	4aad      	ldr	r2, [pc, #692]	; (801d8b0 <tcp_receive+0x8fc>)
 801d5fa:	7813      	ldrb	r3, [r2, #0]
 801d5fc:	f043 0320 	orr.w	r3, r3, #32
 801d600:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801d602:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801d604:	2d00      	cmp	r5, #0
 801d606:	d07b      	beq.n	801d700 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d608:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801d8b8 <tcp_receive+0x904>
 801d60c:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801d8d0 <tcp_receive+0x91c>
 801d610:	4fa8      	ldr	r7, [pc, #672]	; (801d8b4 <tcp_receive+0x900>)
 801d612:	e033      	b.n	801d67c <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d614:	68eb      	ldr	r3, [r5, #12]
 801d616:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801d61a:	8998      	ldrh	r0, [r3, #12]
 801d61c:	f7fb fdc4 	bl	80191a8 <lwip_htons>
 801d620:	f010 0003 	ands.w	r0, r0, #3
 801d624:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d626:	bf18      	it	ne
 801d628:	2001      	movne	r0, #1
 801d62a:	4450      	add	r0, sl
 801d62c:	1a18      	subs	r0, r3, r0
 801d62e:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801d630:	4620      	mov	r0, r4
 801d632:	f7fe fa39 	bl	801baa8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801d636:	6869      	ldr	r1, [r5, #4]
 801d638:	890b      	ldrh	r3, [r1, #8]
 801d63a:	b13b      	cbz	r3, 801d64c <tcp_receive+0x698>
            if (recv_data) {
 801d63c:	4b9b      	ldr	r3, [pc, #620]	; (801d8ac <tcp_receive+0x8f8>)
 801d63e:	6818      	ldr	r0, [r3, #0]
 801d640:	2800      	cmp	r0, #0
 801d642:	d05b      	beq.n	801d6fc <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801d644:	f7fd fe1e 	bl	801b284 <pbuf_cat>
            cseg->p = NULL;
 801d648:	2300      	movs	r3, #0
 801d64a:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d64c:	68eb      	ldr	r3, [r5, #12]
 801d64e:	8998      	ldrh	r0, [r3, #12]
 801d650:	f7fb fdaa 	bl	80191a8 <lwip_htons>
 801d654:	07c3      	lsls	r3, r0, #31
 801d656:	d509      	bpl.n	801d66c <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801d658:	4a95      	ldr	r2, [pc, #596]	; (801d8b0 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d65a:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801d65c:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d65e:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801d660:	f043 0320 	orr.w	r3, r3, #32
 801d664:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d666:	d101      	bne.n	801d66c <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801d668:	2307      	movs	r3, #7
 801d66a:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801d66c:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801d66e:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801d670:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801d672:	f7fe fb51 	bl	801bd18 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d676:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801d678:	2d00      	cmp	r5, #0
 801d67a:	d041      	beq.n	801d700 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d67c:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801d67e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d680:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801d682:	428b      	cmp	r3, r1
 801d684:	d13c      	bne.n	801d700 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801d686:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d688:	8990      	ldrh	r0, [r2, #12]
 801d68a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801d68e:	f7fb fd8b 	bl	80191a8 <lwip_htons>
 801d692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d694:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d698:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d69c:	bf18      	it	ne
 801d69e:	2001      	movne	r0, #1
 801d6a0:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d6a2:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d6a4:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d6a6:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d6aa:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d6ac:	8998      	ldrh	r0, [r3, #12]
 801d6ae:	f7fb fd7b 	bl	80191a8 <lwip_htons>
 801d6b2:	f010 0003 	ands.w	r0, r0, #3
 801d6b6:	bf18      	it	ne
 801d6b8:	2001      	movne	r0, #1
 801d6ba:	4458      	add	r0, fp
 801d6bc:	4582      	cmp	sl, r0
 801d6be:	d2a9      	bcs.n	801d614 <tcp_receive+0x660>
 801d6c0:	464b      	mov	r3, r9
 801d6c2:	f240 622b 	movw	r2, #1579	; 0x62b
 801d6c6:	4641      	mov	r1, r8
 801d6c8:	4638      	mov	r0, r7
 801d6ca:	f007 fe73 	bl	80253b4 <iprintf>
 801d6ce:	e7a1      	b.n	801d614 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d6d0:	4b79      	ldr	r3, [pc, #484]	; (801d8b8 <tcp_receive+0x904>)
 801d6d2:	f240 5294 	movw	r2, #1428	; 0x594
 801d6d6:	4979      	ldr	r1, [pc, #484]	; (801d8bc <tcp_receive+0x908>)
 801d6d8:	4876      	ldr	r0, [pc, #472]	; (801d8b4 <tcp_receive+0x900>)
 801d6da:	f007 fe6b 	bl	80253b4 <iprintf>
 801d6de:	e687      	b.n	801d3f0 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801d6e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d6e4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d6e6:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d6e8:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d6ea:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d6ee:	b292      	uxth	r2, r2
 801d6f0:	4293      	cmp	r3, r2
 801d6f2:	f63f af20 	bhi.w	801d536 <tcp_receive+0x582>
 801d6f6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801d6fa:	e54d      	b.n	801d198 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801d6fc:	6019      	str	r1, [r3, #0]
 801d6fe:	e7a3      	b.n	801d648 <tcp_receive+0x694>
        tcp_ack(pcb);
 801d700:	8b63      	ldrh	r3, [r4, #26]
 801d702:	07d8      	lsls	r0, r3, #31
 801d704:	d50a      	bpl.n	801d71c <tcp_receive+0x768>
 801d706:	f023 0301 	bic.w	r3, r3, #1
 801d70a:	f043 0302 	orr.w	r3, r3, #2
 801d70e:	8363      	strh	r3, [r4, #26]
 801d710:	e4f4      	b.n	801d0fc <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d712:	486b      	ldr	r0, [pc, #428]	; (801d8c0 <tcp_receive+0x90c>)
 801d714:	f7fe fb1e 	bl	801bd54 <tcp_seg_copy>
 801d718:	6760      	str	r0, [r4, #116]	; 0x74
 801d71a:	e4b5      	b.n	801d088 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801d71c:	f043 0301 	orr.w	r3, r3, #1
 801d720:	8363      	strh	r3, [r4, #26]
 801d722:	e4eb      	b.n	801d0fc <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d724:	4866      	ldr	r0, [pc, #408]	; (801d8c0 <tcp_receive+0x90c>)
 801d726:	f7fe fb15 	bl	801bd54 <tcp_seg_copy>
                  if (cseg != NULL) {
 801d72a:	4607      	mov	r7, r0
 801d72c:	2800      	cmp	r0, #0
 801d72e:	f43f acab 	beq.w	801d088 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d732:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d736:	6832      	ldr	r2, [r6, #0]
 801d738:	6859      	ldr	r1, [r3, #4]
 801d73a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801d73e:	440b      	add	r3, r1
 801d740:	1a9b      	subs	r3, r3, r2
 801d742:	2b00      	cmp	r3, #0
 801d744:	dd07      	ble.n	801d756 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d746:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801d748:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d74c:	b291      	uxth	r1, r2
 801d74e:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d752:	f7fd fc4d 	bl	801aff0 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801d756:	4629      	mov	r1, r5
 801d758:	4638      	mov	r0, r7
                    prev->next = cseg;
 801d75a:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801d75e:	f7ff fb35 	bl	801cdcc <tcp_oos_insert_segment>
 801d762:	e491      	b.n	801d088 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d764:	4b54      	ldr	r3, [pc, #336]	; (801d8b8 <tcp_receive+0x904>)
 801d766:	f240 6207 	movw	r2, #1543	; 0x607
 801d76a:	4956      	ldr	r1, [pc, #344]	; (801d8c4 <tcp_receive+0x910>)
 801d76c:	4851      	ldr	r0, [pc, #324]	; (801d8b4 <tcp_receive+0x900>)
 801d76e:	f007 fe21 	bl	80253b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d772:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d774:	883a      	ldrh	r2, [r7, #0]
 801d776:	e72a      	b.n	801d5ce <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d778:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d77c:	8998      	ldrh	r0, [r3, #12]
 801d77e:	f7fb fd13 	bl	80191a8 <lwip_htons>
 801d782:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d784:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d788:	d47d      	bmi.n	801d886 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d78a:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801d78c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d78e:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d792:	f7fb fd09 	bl	80191a8 <lwip_htons>
 801d796:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801d798:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d79c:	d503      	bpl.n	801d7a6 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801d79e:	3901      	subs	r1, #1
 801d7a0:	b289      	uxth	r1, r1
 801d7a2:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801d7a6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d7aa:	f7fd fc21 	bl	801aff0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801d7ae:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d7b2:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801d7b6:	8998      	ldrh	r0, [r3, #12]
 801d7b8:	f7fb fcf6 	bl	80191a8 <lwip_htons>
 801d7bc:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d7c0:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801d7c2:	bf18      	it	ne
 801d7c4:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d7c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801d7c8:	442b      	add	r3, r5
 801d7ca:	b29b      	uxth	r3, r3
 801d7cc:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d7ce:	4413      	add	r3, r2
 801d7d0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801d7d2:	440a      	add	r2, r1
 801d7d4:	4293      	cmp	r3, r2
 801d7d6:	f43f ae4e 	beq.w	801d476 <tcp_receive+0x4c2>
 801d7da:	4b37      	ldr	r3, [pc, #220]	; (801d8b8 <tcp_receive+0x904>)
 801d7dc:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801d7e0:	4939      	ldr	r1, [pc, #228]	; (801d8c8 <tcp_receive+0x914>)
 801d7e2:	4834      	ldr	r0, [pc, #208]	; (801d8b4 <tcp_receive+0x900>)
 801d7e4:	f007 fde6 	bl	80253b4 <iprintf>
 801d7e8:	e645      	b.n	801d476 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d7ea:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801d7ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d7f2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801d7f4:	4413      	add	r3, r2
 801d7f6:	b29b      	uxth	r3, r3
 801d7f8:	429a      	cmp	r2, r3
 801d7fa:	bf88      	it	hi
 801d7fc:	460b      	movhi	r3, r1
 801d7fe:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801d802:	4620      	mov	r0, r4
 801d804:	f001 fe0a 	bl	801f41c <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d808:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d80a:	6833      	ldr	r3, [r6, #0]
 801d80c:	e518      	b.n	801d240 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801d80e:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801d812:	2b00      	cmp	r3, #0
 801d814:	dc01      	bgt.n	801d81a <tcp_receive+0x866>
            pcb->ooseq = next;
 801d816:	6765      	str	r5, [r4, #116]	; 0x74
 801d818:	e6d4      	b.n	801d5c4 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d81a:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d81e:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d822:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d826:	8998      	ldrh	r0, [r3, #12]
 801d828:	f7fb fcbe 	bl	80191a8 <lwip_htons>
 801d82c:	0781      	lsls	r1, r0, #30
 801d82e:	d504      	bpl.n	801d83a <tcp_receive+0x886>
                inseg.len -= 1;
 801d830:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801d834:	3b01      	subs	r3, #1
 801d836:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801d83a:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801d83e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d842:	f7fd fbd5 	bl	801aff0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d846:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d84a:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801d84e:	8998      	ldrh	r0, [r3, #12]
 801d850:	f7fb fcaa 	bl	80191a8 <lwip_htons>
 801d854:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d858:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801d85a:	bf18      	it	ne
 801d85c:	2001      	movne	r0, #1
 801d85e:	eb08 0200 	add.w	r2, r8, r0
 801d862:	b292      	uxth	r2, r2
 801d864:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d866:	6859      	ldr	r1, [r3, #4]
 801d868:	6833      	ldr	r3, [r6, #0]
 801d86a:	4413      	add	r3, r2
 801d86c:	428b      	cmp	r3, r1
 801d86e:	d0d2      	beq.n	801d816 <tcp_receive+0x862>
 801d870:	4b11      	ldr	r3, [pc, #68]	; (801d8b8 <tcp_receive+0x904>)
 801d872:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801d876:	4915      	ldr	r1, [pc, #84]	; (801d8cc <tcp_receive+0x918>)
 801d878:	480e      	ldr	r0, [pc, #56]	; (801d8b4 <tcp_receive+0x900>)
 801d87a:	f007 fd9b 	bl	80253b4 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801d87e:	883a      	ldrh	r2, [r7, #0]
 801d880:	6831      	ldr	r1, [r6, #0]
 801d882:	4411      	add	r1, r2
 801d884:	e7c7      	b.n	801d816 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d886:	899d      	ldrh	r5, [r3, #12]
 801d888:	4628      	mov	r0, r5
 801d88a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801d88e:	f7fb fc8b 	bl	80191a8 <lwip_htons>
 801d892:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801d896:	f7fb fc87 	bl	80191a8 <lwip_htons>
 801d89a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d89e:	4328      	orrs	r0, r5
 801d8a0:	8198      	strh	r0, [r3, #12]
 801d8a2:	b280      	uxth	r0, r0
 801d8a4:	e772      	b.n	801d78c <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801d8a6:	6760      	str	r0, [r4, #116]	; 0x74
 801d8a8:	f7ff bbeb 	b.w	801d082 <tcp_receive+0xce>
 801d8ac:	2002e0f4 	.word	0x2002e0f4
 801d8b0:	2002e0f8 	.word	0x2002e0f8
 801d8b4:	0802a008 	.word	0x0802a008
 801d8b8:	08044488 	.word	0x08044488
 801d8bc:	0804458c 	.word	0x0804458c
 801d8c0:	2002e0e0 	.word	0x2002e0e0
 801d8c4:	08044630 	.word	0x08044630
 801d8c8:	080445bc 	.word	0x080445bc
 801d8cc:	080445f4 	.word	0x080445f4
 801d8d0:	08044650 	.word	0x08044650
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d8d4:	68db      	ldr	r3, [r3, #12]
 801d8d6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801d8da:	4640      	mov	r0, r8
 801d8dc:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801d8e0:	f7fb fc62 	bl	80191a8 <lwip_htons>
 801d8e4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801d8e8:	f7fb fc5e 	bl	80191a8 <lwip_htons>
 801d8ec:	682b      	ldr	r3, [r5, #0]
 801d8ee:	ea48 0800 	orr.w	r8, r8, r0
 801d8f2:	68da      	ldr	r2, [r3, #12]
 801d8f4:	f8a2 800c 	strh.w	r8, [r2, #12]
 801d8f8:	e53b      	b.n	801d372 <tcp_receive+0x3be>
 801d8fa:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801d900 <tcp_receive+0x94c>
 801d8fe:	e5a8      	b.n	801d452 <tcp_receive+0x49e>
 801d900:	2002e0e0 	.word	0x2002e0e0

0801d904 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d904:	494a      	ldr	r1, [pc, #296]	; (801da30 <tcp_parseopt.part.0+0x12c>)
 801d906:	4b4b      	ldr	r3, [pc, #300]	; (801da34 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d908:	4a4b      	ldr	r2, [pc, #300]	; (801da38 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801d90a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d90e:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d912:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d914:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d916:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d91a:	4b48      	ldr	r3, [pc, #288]	; (801da3c <tcp_parseopt.part.0+0x138>)
 801d91c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801da40 <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d920:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801d922:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d926:	681d      	ldr	r5, [r3, #0]
 801d928:	f8b9 2000 	ldrh.w	r2, [r9]
 801d92c:	f102 0c14 	add.w	ip, r2, #20
 801d930:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d932:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801d934:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d938:	d96d      	bls.n	801da16 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801d93a:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d93c:	b1ac      	cbz	r4, 801d96a <tcp_parseopt.part.0+0x66>
 801d93e:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801d940:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d944:	d811      	bhi.n	801d96a <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801d946:	b2c9      	uxtb	r1, r1
 801d948:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801d94a:	2901      	cmp	r1, #1
 801d94c:	d011      	beq.n	801d972 <tcp_parseopt.part.0+0x6e>
 801d94e:	2902      	cmp	r1, #2
 801d950:	d017      	beq.n	801d982 <tcp_parseopt.part.0+0x7e>
 801d952:	b191      	cbz	r1, 801d97a <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d954:	b10c      	cbz	r4, 801d95a <tcp_parseopt.part.0+0x56>
 801d956:	4573      	cmp	r3, lr
 801d958:	d242      	bcs.n	801d9e0 <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801d95a:	442b      	add	r3, r5
 801d95c:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801d95e:	2b01      	cmp	r3, #1
 801d960:	d961      	bls.n	801da26 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d962:	441a      	add	r2, r3
 801d964:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d966:	2101      	movs	r1, #1
 801d968:	e7e0      	b.n	801d92c <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801d96a:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801d96e:	2901      	cmp	r1, #1
 801d970:	d1ed      	bne.n	801d94e <tcp_parseopt.part.0+0x4a>
 801d972:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801d976:	461a      	mov	r2, r3
 801d978:	e7db      	b.n	801d932 <tcp_parseopt.part.0+0x2e>
 801d97a:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801d97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801d982:	1c91      	adds	r1, r2, #2
 801d984:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d986:	b10c      	cbz	r4, 801d98c <tcp_parseopt.part.0+0x88>
 801d988:	4573      	cmp	r3, lr
 801d98a:	d224      	bcs.n	801d9d6 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801d98c:	442b      	add	r3, r5
 801d98e:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d990:	2b04      	cmp	r3, #4
 801d992:	d145      	bne.n	801da20 <tcp_parseopt.part.0+0x11c>
 801d994:	1c4b      	adds	r3, r1, #1
 801d996:	42b3      	cmp	r3, r6
 801d998:	da42      	bge.n	801da20 <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801d99a:	1cd3      	adds	r3, r2, #3
 801d99c:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d99e:	b384      	cbz	r4, 801da02 <tcp_parseopt.part.0+0xfe>
 801d9a0:	458e      	cmp	lr, r1
 801d9a2:	d822      	bhi.n	801d9ea <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d9a4:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801d9a8:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d9aa:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801d9ac:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801d9ae:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d9b0:	f814 c001 	ldrb.w	ip, [r4, r1]
 801d9b4:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d9b8:	d820      	bhi.n	801d9fc <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d9ba:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801d9be:	b2c9      	uxtb	r1, r1
 801d9c0:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801d9c2:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d9c6:	1e59      	subs	r1, r3, #1
 801d9c8:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801d9cc:	bf28      	it	cs
 801d9ce:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801d9d2:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801d9d4:	e7c7      	b.n	801d966 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d9d6:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d9da:	b2db      	uxtb	r3, r3
 801d9dc:	5ce3      	ldrb	r3, [r4, r3]
 801d9de:	e7d7      	b.n	801d990 <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d9e0:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d9e4:	b2db      	uxtb	r3, r3
 801d9e6:	5ce3      	ldrb	r3, [r4, r3]
 801d9e8:	e7b9      	b.n	801d95e <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801d9ea:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801d9ec:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d9ee:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d9f0:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801d9f4:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d9f6:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d9fa:	d9de      	bls.n	801d9ba <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801d9fc:	442b      	add	r3, r5
 801d9fe:	7d1b      	ldrb	r3, [r3, #20]
 801da00:	e7df      	b.n	801d9c2 <tcp_parseopt.part.0+0xbe>
 801da02:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801da04:	3204      	adds	r2, #4
    return opts[optidx];
 801da06:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801da08:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801da0c:	b292      	uxth	r2, r2
    return opts[optidx];
 801da0e:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801da10:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801da14:	e7d5      	b.n	801d9c2 <tcp_parseopt.part.0+0xbe>
 801da16:	2900      	cmp	r1, #0
 801da18:	d0b1      	beq.n	801d97e <tcp_parseopt.part.0+0x7a>
 801da1a:	f8a9 2000 	strh.w	r2, [r9]
 801da1e:	e7ae      	b.n	801d97e <tcp_parseopt.part.0+0x7a>
 801da20:	f8a9 1000 	strh.w	r1, [r9]
 801da24:	e7ab      	b.n	801d97e <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801da26:	3202      	adds	r2, #2
 801da28:	f8a9 2000 	strh.w	r2, [r9]
 801da2c:	e7a7      	b.n	801d97e <tcp_parseopt.part.0+0x7a>
 801da2e:	bf00      	nop
 801da30:	2002e10c 	.word	0x2002e10c
 801da34:	2002e110 	.word	0x2002e110
 801da38:	2002e114 	.word	0x2002e114
 801da3c:	2002e108 	.word	0x2002e108
 801da40:	2002e104 	.word	0x2002e104

0801da44 <tcp_input>:
{
 801da44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801da48:	4604      	mov	r4, r0
{
 801da4a:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801da4c:	2800      	cmp	r0, #0
 801da4e:	f000 80d2 	beq.w	801dbf6 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801da52:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801da54:	4e6b      	ldr	r6, [pc, #428]	; (801dc04 <tcp_input+0x1c0>)
 801da56:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801da58:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801da5a:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801da5c:	d805      	bhi.n	801da6a <tcp_input+0x26>
  pbuf_free(p);
 801da5e:	4620      	mov	r0, r4
}
 801da60:	b009      	add	sp, #36	; 0x24
 801da62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801da66:	f7fd bbdb 	b.w	801b220 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801da6a:	4f67      	ldr	r7, [pc, #412]	; (801dc08 <tcp_input+0x1c4>)
 801da6c:	6839      	ldr	r1, [r7, #0]
 801da6e:	6978      	ldr	r0, [r7, #20]
 801da70:	f005 f9ae 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
 801da74:	2800      	cmp	r0, #0
 801da76:	d1f2      	bne.n	801da5e <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801da78:	697b      	ldr	r3, [r7, #20]
 801da7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801da7e:	2be0      	cmp	r3, #224	; 0xe0
 801da80:	d0ed      	beq.n	801da5e <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801da82:	f107 0314 	add.w	r3, r7, #20
 801da86:	f107 0910 	add.w	r9, r7, #16
 801da8a:	2106      	movs	r1, #6
 801da8c:	4620      	mov	r0, r4
 801da8e:	9300      	str	r3, [sp, #0]
 801da90:	464b      	mov	r3, r9
 801da92:	8922      	ldrh	r2, [r4, #8]
 801da94:	f7fc f91c 	bl	8019cd0 <ip_chksum_pseudo>
    if (chksum != 0) {
 801da98:	4605      	mov	r5, r0
 801da9a:	2800      	cmp	r0, #0
 801da9c:	d1df      	bne.n	801da5e <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801da9e:	6833      	ldr	r3, [r6, #0]
 801daa0:	8998      	ldrh	r0, [r3, #12]
 801daa2:	f7fb fb81 	bl	80191a8 <lwip_htons>
 801daa6:	0a80      	lsrs	r0, r0, #10
 801daa8:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801daac:	2913      	cmp	r1, #19
 801daae:	d9d6      	bls.n	801da5e <tcp_input+0x1a>
 801dab0:	8923      	ldrh	r3, [r4, #8]
 801dab2:	b28a      	uxth	r2, r1
 801dab4:	428b      	cmp	r3, r1
 801dab6:	d3d2      	bcc.n	801da5e <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801dab8:	f1a2 0314 	sub.w	r3, r2, #20
 801dabc:	4853      	ldr	r0, [pc, #332]	; (801dc0c <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801dabe:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801dc38 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801dac2:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801dac4:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801dac8:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801daca:	8960      	ldrh	r0, [r4, #10]
 801dacc:	4290      	cmp	r0, r2
 801dace:	f080 819f 	bcs.w	801de10 <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801dad2:	6823      	ldr	r3, [r4, #0]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	f000 837b 	beq.w	801e1d0 <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801dada:	2114      	movs	r1, #20
 801dadc:	4620      	mov	r0, r4
 801dade:	f7fd fb13 	bl	801b108 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801dae2:	4b4a      	ldr	r3, [pc, #296]	; (801dc0c <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801dae4:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801dae6:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801dae8:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801daec:	4b48      	ldr	r3, [pc, #288]	; (801dc10 <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801daee:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801daf0:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801daf4:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801daf6:	f7fd fb07 	bl	801b108 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801dafa:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801dafc:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801db00:	8943      	ldrh	r3, [r0, #10]
 801db02:	455b      	cmp	r3, fp
 801db04:	d3ab      	bcc.n	801da5e <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801db06:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801db08:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801db0a:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801db0e:	f7fd fafb 	bl	801b108 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801db12:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801db14:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801db16:	442b      	add	r3, r5
 801db18:	eba3 030a 	sub.w	r3, r3, sl
 801db1c:	b29b      	uxth	r3, r3
 801db1e:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801db20:	2a00      	cmp	r2, #0
 801db22:	f040 835c 	bne.w	801e1de <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801db26:	6822      	ldr	r2, [r4, #0]
 801db28:	8912      	ldrh	r2, [r2, #8]
 801db2a:	429a      	cmp	r2, r3
 801db2c:	d005      	beq.n	801db3a <tcp_input+0xf6>
 801db2e:	4b39      	ldr	r3, [pc, #228]	; (801dc14 <tcp_input+0x1d0>)
 801db30:	22e0      	movs	r2, #224	; 0xe0
 801db32:	4939      	ldr	r1, [pc, #228]	; (801dc18 <tcp_input+0x1d4>)
 801db34:	4839      	ldr	r0, [pc, #228]	; (801dc1c <tcp_input+0x1d8>)
 801db36:	f007 fc3d 	bl	80253b4 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801db3a:	6835      	ldr	r5, [r6, #0]
 801db3c:	8828      	ldrh	r0, [r5, #0]
 801db3e:	f7fb fb33 	bl	80191a8 <lwip_htons>
 801db42:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801db44:	6835      	ldr	r5, [r6, #0]
 801db46:	8868      	ldrh	r0, [r5, #2]
 801db48:	f7fb fb2e 	bl	80191a8 <lwip_htons>
 801db4c:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801db4e:	6835      	ldr	r5, [r6, #0]
 801db50:	6868      	ldr	r0, [r5, #4]
 801db52:	f7fb fb2d 	bl	80191b0 <lwip_htonl>
 801db56:	4b32      	ldr	r3, [pc, #200]	; (801dc20 <tcp_input+0x1dc>)
 801db58:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801db5a:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801db5c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801db5e:	68a8      	ldr	r0, [r5, #8]
 801db60:	f7fb fb26 	bl	80191b0 <lwip_htonl>
 801db64:	4b2f      	ldr	r3, [pc, #188]	; (801dc24 <tcp_input+0x1e0>)
 801db66:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801db68:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801db6a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801db6c:	89e8      	ldrh	r0, [r5, #14]
 801db6e:	f7fb fb1b 	bl	80191a8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801db72:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801db74:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801db76:	8998      	ldrh	r0, [r3, #12]
 801db78:	f7fb fb16 	bl	80191a8 <lwip_htons>
 801db7c:	492a      	ldr	r1, [pc, #168]	; (801dc28 <tcp_input+0x1e4>)
 801db7e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801db82:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801db84:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801db86:	0782      	lsls	r2, r0, #30
 801db88:	f040 8139 	bne.w	801ddfe <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801db8c:	4a27      	ldr	r2, [pc, #156]	; (801dc2c <tcp_input+0x1e8>)
 801db8e:	9205      	str	r2, [sp, #20]
 801db90:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db92:	4b27      	ldr	r3, [pc, #156]	; (801dc30 <tcp_input+0x1ec>)
 801db94:	681d      	ldr	r5, [r3, #0]
 801db96:	2d00      	cmp	r5, #0
 801db98:	f000 80e0 	beq.w	801dd5c <tcp_input+0x318>
  prev = NULL;
 801db9c:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801dba0:	4b1c      	ldr	r3, [pc, #112]	; (801dc14 <tcp_input+0x1d0>)
 801dba2:	f8df b098 	ldr.w	fp, [pc, #152]	; 801dc3c <tcp_input+0x1f8>
 801dba6:	f8df a074 	ldr.w	sl, [pc, #116]	; 801dc1c <tcp_input+0x1d8>
 801dbaa:	e019      	b.n	801dbe0 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801dbac:	2a0a      	cmp	r2, #10
 801dbae:	f000 80cd 	beq.w	801dd4c <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801dbb2:	2a01      	cmp	r2, #1
 801dbb4:	f000 80c3 	beq.w	801dd3e <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dbb8:	7a29      	ldrb	r1, [r5, #8]
 801dbba:	b131      	cbz	r1, 801dbca <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801dbbc:	687a      	ldr	r2, [r7, #4]
 801dbbe:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801dbc2:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dbc4:	b2d2      	uxtb	r2, r2
 801dbc6:	4291      	cmp	r1, r2
 801dbc8:	d104      	bne.n	801dbd4 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801dbca:	6832      	ldr	r2, [r6, #0]
 801dbcc:	8b28      	ldrh	r0, [r5, #24]
 801dbce:	8811      	ldrh	r1, [r2, #0]
 801dbd0:	4288      	cmp	r0, r1
 801dbd2:	d035      	beq.n	801dc40 <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dbd4:	68ea      	ldr	r2, [r5, #12]
 801dbd6:	46a8      	mov	r8, r5
 801dbd8:	2a00      	cmp	r2, #0
 801dbda:	f000 80bf 	beq.w	801dd5c <tcp_input+0x318>
 801dbde:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801dbe0:	7d2a      	ldrb	r2, [r5, #20]
 801dbe2:	2a00      	cmp	r2, #0
 801dbe4:	d1e2      	bne.n	801dbac <tcp_input+0x168>
 801dbe6:	22fb      	movs	r2, #251	; 0xfb
 801dbe8:	4659      	mov	r1, fp
 801dbea:	4650      	mov	r0, sl
 801dbec:	f007 fbe2 	bl	80253b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801dbf0:	7d2a      	ldrb	r2, [r5, #20]
 801dbf2:	4b08      	ldr	r3, [pc, #32]	; (801dc14 <tcp_input+0x1d0>)
 801dbf4:	e7da      	b.n	801dbac <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801dbf6:	4b07      	ldr	r3, [pc, #28]	; (801dc14 <tcp_input+0x1d0>)
 801dbf8:	2283      	movs	r2, #131	; 0x83
 801dbfa:	490e      	ldr	r1, [pc, #56]	; (801dc34 <tcp_input+0x1f0>)
 801dbfc:	4807      	ldr	r0, [pc, #28]	; (801dc1c <tcp_input+0x1d8>)
 801dbfe:	f007 fbd9 	bl	80253b4 <iprintf>
 801dc02:	e726      	b.n	801da52 <tcp_input+0xe>
 801dc04:	2002e108 	.word	0x2002e108
 801dc08:	2001ef20 	.word	0x2001ef20
 801dc0c:	2002e114 	.word	0x2002e114
 801dc10:	2002e10c 	.word	0x2002e10c
 801dc14:	08044488 	.word	0x08044488
 801dc18:	080446ac 	.word	0x080446ac
 801dc1c:	0802a008 	.word	0x0802a008
 801dc20:	2002e0fc 	.word	0x2002e0fc
 801dc24:	2002e0d8 	.word	0x2002e0d8
 801dc28:	2002e0dc 	.word	0x2002e0dc
 801dc2c:	2002e116 	.word	0x2002e116
 801dc30:	2002e0bc 	.word	0x2002e0bc
 801dc34:	08044678 	.word	0x08044678
 801dc38:	2002e110 	.word	0x2002e110
 801dc3c:	080446cc 	.word	0x080446cc
    if (pcb->remote_port == tcphdr->src &&
 801dc40:	8852      	ldrh	r2, [r2, #2]
 801dc42:	8ae9      	ldrh	r1, [r5, #22]
 801dc44:	4291      	cmp	r1, r2
 801dc46:	d1c5      	bne.n	801dbd4 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801dc48:	6869      	ldr	r1, [r5, #4]
 801dc4a:	693a      	ldr	r2, [r7, #16]
 801dc4c:	4291      	cmp	r1, r2
 801dc4e:	d1c1      	bne.n	801dbd4 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801dc50:	6829      	ldr	r1, [r5, #0]
 801dc52:	697a      	ldr	r2, [r7, #20]
 801dc54:	4291      	cmp	r1, r2
 801dc56:	d1bd      	bne.n	801dbd4 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801dc58:	68eb      	ldr	r3, [r5, #12]
 801dc5a:	42ab      	cmp	r3, r5
 801dc5c:	f000 846e 	beq.w	801e53c <tcp_input+0xaf8>
      if (prev != NULL) {
 801dc60:	f1b8 0f00 	cmp.w	r8, #0
 801dc64:	d009      	beq.n	801dc7a <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801dc66:	4a75      	ldr	r2, [pc, #468]	; (801de3c <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801dc68:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801dc6c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801dc6e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801dc70:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801dc72:	68eb      	ldr	r3, [r5, #12]
 801dc74:	42ab      	cmp	r3, r5
 801dc76:	f000 8447 	beq.w	801e508 <tcp_input+0xac4>
    inseg.next = NULL;
 801dc7a:	2300      	movs	r3, #0
 801dc7c:	4f70      	ldr	r7, [pc, #448]	; (801de40 <tcp_input+0x3fc>)
    recv_data = NULL;
 801dc7e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801de68 <tcp_input+0x424>
    recv_flags = 0;
 801dc82:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801de6c <tcp_input+0x428>
    recv_acked = 0;
 801dc86:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801de70 <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801dc8a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801dc8c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801dc8e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801dc92:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801dc96:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801dc9a:	4b6a      	ldr	r3, [pc, #424]	; (801de44 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801dc9c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801dc9e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801dca0:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801dca2:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801dca4:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801dca6:	071a      	lsls	r2, r3, #28
 801dca8:	d503      	bpl.n	801dcb2 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801dcaa:	7b62      	ldrb	r2, [r4, #13]
 801dcac:	f042 0201 	orr.w	r2, r2, #1
 801dcb0:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801dcb2:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801dcb4:	b172      	cbz	r2, 801dcd4 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801dcb6:	4628      	mov	r0, r5
 801dcb8:	f7fe ff78 	bl	801cbac <tcp_process_refused_data>
 801dcbc:	300d      	adds	r0, #13
 801dcbe:	f000 8296 	beq.w	801e1ee <tcp_input+0x7aa>
 801dcc2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801dcc4:	b123      	cbz	r3, 801dcd0 <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801dcc6:	9b05      	ldr	r3, [sp, #20]
 801dcc8:	881b      	ldrh	r3, [r3, #0]
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	f040 828f 	bne.w	801e1ee <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801dcd0:	4b5c      	ldr	r3, [pc, #368]	; (801de44 <tcp_input+0x400>)
 801dcd2:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801dcd4:	4c5c      	ldr	r4, [pc, #368]	; (801de48 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801dcd6:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801dcd8:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801dcda:	f140 8163 	bpl.w	801dfa4 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801dcde:	7d29      	ldrb	r1, [r5, #20]
 801dce0:	2902      	cmp	r1, #2
 801dce2:	f000 8350 	beq.w	801e386 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801dce6:	4b59      	ldr	r3, [pc, #356]	; (801de4c <tcp_input+0x408>)
 801dce8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	429a      	cmp	r2, r3
 801dcee:	f000 844a 	beq.w	801e586 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801dcf2:	1a9b      	subs	r3, r3, r2
 801dcf4:	d404      	bmi.n	801dd00 <tcp_input+0x2bc>
 801dcf6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801dcf8:	1a9b      	subs	r3, r3, r2
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	f340 833e 	ble.w	801e37c <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801dd00:	f89a 3000 	ldrb.w	r3, [sl]
 801dd04:	0718      	lsls	r0, r3, #28
 801dd06:	f140 8278 	bpl.w	801e1fa <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801dd0a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801dd0e:	b11b      	cbz	r3, 801dd18 <tcp_input+0x2d4>
 801dd10:	f06f 010d 	mvn.w	r1, #13
 801dd14:	6928      	ldr	r0, [r5, #16]
 801dd16:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801dd18:	4848      	ldr	r0, [pc, #288]	; (801de3c <tcp_input+0x3f8>)
 801dd1a:	4629      	mov	r1, r5
 801dd1c:	f7fe fbc4 	bl	801c4a8 <tcp_pcb_remove>
        tcp_free(pcb);
 801dd20:	4628      	mov	r0, r5
 801dd22:	f7fd fdbd 	bl	801b8a0 <tcp_free>
    tcp_input_pcb = NULL;
 801dd26:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801dd28:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801dd2a:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801dd2c:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801dd30:	b110      	cbz	r0, 801dd38 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801dd32:	f7fd fa75 	bl	801b220 <pbuf_free>
      inseg.p = NULL;
 801dd36:	607d      	str	r5, [r7, #4]
}
 801dd38:	b009      	add	sp, #36	; 0x24
 801dd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801dd3e:	22fd      	movs	r2, #253	; 0xfd
 801dd40:	4943      	ldr	r1, [pc, #268]	; (801de50 <tcp_input+0x40c>)
 801dd42:	4650      	mov	r0, sl
 801dd44:	f007 fb36 	bl	80253b4 <iprintf>
 801dd48:	4b42      	ldr	r3, [pc, #264]	; (801de54 <tcp_input+0x410>)
 801dd4a:	e735      	b.n	801dbb8 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801dd4c:	22fc      	movs	r2, #252	; 0xfc
 801dd4e:	4942      	ldr	r1, [pc, #264]	; (801de58 <tcp_input+0x414>)
 801dd50:	4650      	mov	r0, sl
 801dd52:	f007 fb2f 	bl	80253b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801dd56:	7d2a      	ldrb	r2, [r5, #20]
 801dd58:	4b3e      	ldr	r3, [pc, #248]	; (801de54 <tcp_input+0x410>)
 801dd5a:	e72a      	b.n	801dbb2 <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dd5c:	4b3f      	ldr	r3, [pc, #252]	; (801de5c <tcp_input+0x418>)
 801dd5e:	681d      	ldr	r5, [r3, #0]
 801dd60:	2d00      	cmp	r5, #0
 801dd62:	d05b      	beq.n	801de1c <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dd64:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801de54 <tcp_input+0x410>
 801dd68:	f8df b108 	ldr.w	fp, [pc, #264]	; 801de74 <tcp_input+0x430>
 801dd6c:	f8df a108 	ldr.w	sl, [pc, #264]	; 801de78 <tcp_input+0x434>
 801dd70:	e002      	b.n	801dd78 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dd72:	68ed      	ldr	r5, [r5, #12]
 801dd74:	2d00      	cmp	r5, #0
 801dd76:	d051      	beq.n	801de1c <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dd78:	7d2b      	ldrb	r3, [r5, #20]
 801dd7a:	2b0a      	cmp	r3, #10
 801dd7c:	4643      	mov	r3, r8
 801dd7e:	d005      	beq.n	801dd8c <tcp_input+0x348>
 801dd80:	f240 121f 	movw	r2, #287	; 0x11f
 801dd84:	4659      	mov	r1, fp
 801dd86:	4650      	mov	r0, sl
 801dd88:	f007 fb14 	bl	80253b4 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dd8c:	7a2a      	ldrb	r2, [r5, #8]
 801dd8e:	b132      	cbz	r2, 801dd9e <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801dd96:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dd98:	b2db      	uxtb	r3, r3
 801dd9a:	429a      	cmp	r2, r3
 801dd9c:	d1e9      	bne.n	801dd72 <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801dd9e:	6832      	ldr	r2, [r6, #0]
 801dda0:	8b2b      	ldrh	r3, [r5, #24]
 801dda2:	8811      	ldrh	r1, [r2, #0]
 801dda4:	428b      	cmp	r3, r1
 801dda6:	d1e4      	bne.n	801dd72 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801dda8:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801ddaa:	8ae8      	ldrh	r0, [r5, #22]
 801ddac:	4290      	cmp	r0, r2
 801ddae:	d1e0      	bne.n	801dd72 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801ddb0:	6869      	ldr	r1, [r5, #4]
 801ddb2:	693a      	ldr	r2, [r7, #16]
 801ddb4:	4291      	cmp	r1, r2
 801ddb6:	d1dc      	bne.n	801dd72 <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ddb8:	6829      	ldr	r1, [r5, #0]
 801ddba:	697a      	ldr	r2, [r7, #20]
 801ddbc:	4291      	cmp	r1, r2
 801ddbe:	d1d8      	bne.n	801dd72 <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801ddc0:	4a20      	ldr	r2, [pc, #128]	; (801de44 <tcp_input+0x400>)
 801ddc2:	7812      	ldrb	r2, [r2, #0]
 801ddc4:	0757      	lsls	r7, r2, #29
 801ddc6:	f53f ae4a 	bmi.w	801da5e <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801ddca:	0796      	lsls	r6, r2, #30
 801ddcc:	f140 8395 	bpl.w	801e4fa <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801ddd0:	4a1e      	ldr	r2, [pc, #120]	; (801de4c <tcp_input+0x408>)
 801ddd2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801ddd4:	6812      	ldr	r2, [r2, #0]
 801ddd6:	1a51      	subs	r1, r2, r1
 801ddd8:	d404      	bmi.n	801dde4 <tcp_input+0x3a0>
 801ddda:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801dddc:	1b89      	subs	r1, r1, r6
 801ddde:	2900      	cmp	r1, #0
 801dde0:	f340 83ba 	ble.w	801e558 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801dde4:	9b05      	ldr	r3, [sp, #20]
 801dde6:	881b      	ldrh	r3, [r3, #0]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	f43f ae38 	beq.w	801da5e <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801ddee:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801ddf0:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801ddf2:	f043 0302 	orr.w	r3, r3, #2
 801ddf6:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801ddf8:	f001 fbc4 	bl	801f584 <tcp_output>
        pbuf_free(p);
 801ddfc:	e62f      	b.n	801da5e <tcp_input+0x1a>
    tcplen++;
 801ddfe:	1c5a      	adds	r2, r3, #1
 801de00:	4917      	ldr	r1, [pc, #92]	; (801de60 <tcp_input+0x41c>)
 801de02:	b292      	uxth	r2, r2
 801de04:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801de06:	4293      	cmp	r3, r2
    tcplen++;
 801de08:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801de0a:	f67f aec2 	bls.w	801db92 <tcp_input+0x14e>
 801de0e:	e626      	b.n	801da5e <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801de10:	4a14      	ldr	r2, [pc, #80]	; (801de64 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801de12:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801de14:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801de16:	f7fd f977 	bl	801b108 <pbuf_remove_header>
 801de1a:	e68e      	b.n	801db3a <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801de1c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801de7c <tcp_input+0x438>
 801de20:	f8da 8000 	ldr.w	r8, [sl]
 801de24:	f1b8 0f00 	cmp.w	r8, #0
 801de28:	f000 8237 	beq.w	801e29a <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801de2c:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801de30:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801de32:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801de34:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801de36:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801de3a:	e027      	b.n	801de8c <tcp_input+0x448>
 801de3c:	2002e0bc 	.word	0x2002e0bc
 801de40:	2002e0e0 	.word	0x2002e0e0
 801de44:	2002e0dc 	.word	0x2002e0dc
 801de48:	2002e100 	.word	0x2002e100
 801de4c:	2002e0fc 	.word	0x2002e0fc
 801de50:	08044720 	.word	0x08044720
 801de54:	08044488 	.word	0x08044488
 801de58:	080446f4 	.word	0x080446f4
 801de5c:	2002e0d4 	.word	0x2002e0d4
 801de60:	2002e116 	.word	0x2002e116
 801de64:	2002e10c 	.word	0x2002e10c
 801de68:	2002e0f4 	.word	0x2002e0f4
 801de6c:	2002e0f8 	.word	0x2002e0f8
 801de70:	2002e0f0 	.word	0x2002e0f0
 801de74:	080447a0 	.word	0x080447a0
 801de78:	0802a008 	.word	0x0802a008
 801de7c:	2002e0c8 	.word	0x2002e0c8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801de80:	68eb      	ldr	r3, [r5, #12]
 801de82:	4629      	mov	r1, r5
 801de84:	461d      	mov	r5, r3
 801de86:	2b00      	cmp	r3, #0
 801de88:	f000 8208 	beq.w	801e29c <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801de8c:	7a2a      	ldrb	r2, [r5, #8]
 801de8e:	b12a      	cbz	r2, 801de9c <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801de90:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801de94:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801de96:	b2db      	uxtb	r3, r3
 801de98:	429a      	cmp	r2, r3
 801de9a:	d1f1      	bne.n	801de80 <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801de9c:	8aea      	ldrh	r2, [r5, #22]
 801de9e:	8843      	ldrh	r3, [r0, #2]
 801dea0:	429a      	cmp	r2, r3
 801dea2:	d1ed      	bne.n	801de80 <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801dea4:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801dea6:	b10a      	cbz	r2, 801deac <tcp_input+0x468>
 801dea8:	4572      	cmp	r2, lr
 801deaa:	d1e9      	bne.n	801de80 <tcp_input+0x43c>
      if (prev != NULL) {
 801deac:	b129      	cbz	r1, 801deba <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801deae:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801deb0:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801deb4:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801deb6:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801deba:	4a9d      	ldr	r2, [pc, #628]	; (801e130 <tcp_input+0x6ec>)
 801debc:	7812      	ldrb	r2, [r2, #0]
 801debe:	0751      	lsls	r1, r2, #29
 801dec0:	f53f adcd 	bmi.w	801da5e <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801dec4:	f012 0810 	ands.w	r8, r2, #16
 801dec8:	f040 8273 	bne.w	801e3b2 <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801decc:	0791      	lsls	r1, r2, #30
 801dece:	f57f adc6 	bpl.w	801da5e <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801ded2:	7d68      	ldrb	r0, [r5, #21]
 801ded4:	f7fe fc90 	bl	801c7f8 <tcp_alloc>
    if (npcb == NULL) {
 801ded8:	4681      	mov	r9, r0
 801deda:	2800      	cmp	r0, #0
 801dedc:	f000 82ce 	beq.w	801e47c <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801dee0:	4b94      	ldr	r3, [pc, #592]	; (801e134 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801dee2:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801dee4:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801dee6:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801dee8:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801deea:	7849      	ldrb	r1, [r1, #1]
 801deec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801def0:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801def2:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801def4:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801def6:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801def8:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801defa:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801defc:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801defe:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801df00:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801df02:	2303      	movs	r3, #3
 801df04:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801df06:	f7fe fee7 	bl	801ccd8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801df0a:	4b8a      	ldr	r3, [pc, #552]	; (801e134 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801df0c:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801df10:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801df12:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801df16:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801df18:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801df1c:	4a86      	ldr	r2, [pc, #536]	; (801e138 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801df1e:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801df22:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801df24:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801df28:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801df2c:	7a6b      	ldrb	r3, [r5, #9]
 801df2e:	f003 030c 	and.w	r3, r3, #12
 801df32:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801df36:	7a2b      	ldrb	r3, [r5, #8]
 801df38:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801df3c:	6813      	ldr	r3, [r2, #0]
 801df3e:	f8c2 9000 	str.w	r9, [r2]
 801df42:	f8c9 300c 	str.w	r3, [r9, #12]
 801df46:	f001 fe49 	bl	801fbdc <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801df4a:	4b7c      	ldr	r3, [pc, #496]	; (801e13c <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801df4c:	4a7c      	ldr	r2, [pc, #496]	; (801e140 <tcp_input+0x6fc>)
 801df4e:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801df50:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801df52:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801df54:	b12b      	cbz	r3, 801df62 <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801df56:	4b7b      	ldr	r3, [pc, #492]	; (801e144 <tcp_input+0x700>)
 801df58:	4648      	mov	r0, r9
 801df5a:	f8a3 8000 	strh.w	r8, [r3]
 801df5e:	f7ff fcd1 	bl	801d904 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801df62:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801df64:	f109 0204 	add.w	r2, r9, #4
 801df68:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801df6c:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801df6e:	4610      	mov	r0, r2
 801df70:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801df72:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801df76:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801df7a:	f004 fd4d 	bl	8022a18 <ip4_route>
 801df7e:	9a05      	ldr	r2, [sp, #20]
 801df80:	4601      	mov	r1, r0
 801df82:	4628      	mov	r0, r5
 801df84:	f7fe fec4 	bl	801cd10 <tcp_eff_send_mss_netif>
 801df88:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801df8a:	2112      	movs	r1, #18
 801df8c:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801df8e:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801df92:	f001 f8db 	bl	801f14c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801df96:	2800      	cmp	r0, #0
 801df98:	f040 82ca 	bne.w	801e530 <tcp_input+0xaec>
    tcp_output(npcb);
 801df9c:	4648      	mov	r0, r9
 801df9e:	f001 faf1 	bl	801f584 <tcp_output>
 801dfa2:	e55c      	b.n	801da5e <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801dfa4:	f013 0102 	ands.w	r1, r3, #2
 801dfa8:	d004      	beq.n	801dfb4 <tcp_input+0x570>
 801dfaa:	7d2a      	ldrb	r2, [r5, #20]
 801dfac:	3a02      	subs	r2, #2
 801dfae:	2a01      	cmp	r2, #1
 801dfb0:	f200 81e4 	bhi.w	801e37c <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801dfb4:	8b6a      	ldrh	r2, [r5, #26]
 801dfb6:	06d0      	lsls	r0, r2, #27
 801dfb8:	d402      	bmi.n	801dfc0 <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801dfba:	4a63      	ldr	r2, [pc, #396]	; (801e148 <tcp_input+0x704>)
 801dfbc:	6812      	ldr	r2, [r2, #0]
 801dfbe:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801dfc0:	4a5e      	ldr	r2, [pc, #376]	; (801e13c <tcp_input+0x6f8>)
 801dfc2:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801dfc4:	2200      	movs	r2, #0
 801dfc6:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801dfca:	b140      	cbz	r0, 801dfde <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801dfcc:	485d      	ldr	r0, [pc, #372]	; (801e144 <tcp_input+0x700>)
 801dfce:	8002      	strh	r2, [r0, #0]
 801dfd0:	4628      	mov	r0, r5
 801dfd2:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801dfd6:	f7ff fc95 	bl	801d904 <tcp_parseopt.part.0>
 801dfda:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801dfde:	7d2a      	ldrb	r2, [r5, #20]
 801dfe0:	3a02      	subs	r2, #2
 801dfe2:	2a07      	cmp	r2, #7
 801dfe4:	f63f ae8c 	bhi.w	801dd00 <tcp_input+0x2bc>
 801dfe8:	e8df f002 	tbb	[pc, r2]
 801dfec:	89041331 	.word	0x89041331
 801dff0:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801dff4:	4628      	mov	r0, r5
 801dff6:	f7fe ffdd 	bl	801cfb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801dffa:	f89a 3000 	ldrb.w	r3, [sl]
 801dffe:	069e      	lsls	r6, r3, #26
 801e000:	f57f ae7e 	bpl.w	801dd00 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801e004:	8b6b      	ldrh	r3, [r5, #26]
 801e006:	f043 0302 	orr.w	r3, r3, #2
 801e00a:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801e00c:	2307      	movs	r3, #7
 801e00e:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801e010:	e676      	b.n	801dd00 <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801e012:	06da      	lsls	r2, r3, #27
 801e014:	f140 821c 	bpl.w	801e450 <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e018:	4b4c      	ldr	r3, [pc, #304]	; (801e14c <tcp_input+0x708>)
 801e01a:	6819      	ldr	r1, [r3, #0]
 801e01c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801e01e:	43db      	mvns	r3, r3
 801e020:	42cb      	cmn	r3, r1
 801e022:	d404      	bmi.n	801e02e <tcp_input+0x5ea>
 801e024:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801e026:	1acb      	subs	r3, r1, r3
 801e028:	2b00      	cmp	r3, #0
 801e02a:	f340 823a 	ble.w	801e4a2 <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e02e:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e030:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e032:	8810      	ldrh	r0, [r2, #0]
 801e034:	4a3f      	ldr	r2, [pc, #252]	; (801e134 <tcp_input+0x6f0>)
 801e036:	6812      	ldr	r2, [r2, #0]
 801e038:	4402      	add	r2, r0
 801e03a:	8818      	ldrh	r0, [r3, #0]
 801e03c:	9002      	str	r0, [sp, #8]
 801e03e:	4628      	mov	r0, r5
 801e040:	885b      	ldrh	r3, [r3, #2]
 801e042:	e9cd 9300 	strd	r9, r3, [sp]
 801e046:	4b42      	ldr	r3, [pc, #264]	; (801e150 <tcp_input+0x70c>)
 801e048:	f001 fa22 	bl	801f490 <tcp_rst>
    if (err != ERR_ABRT) {
 801e04c:	e658      	b.n	801dd00 <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801e04e:	f003 0212 	and.w	r2, r3, #18
 801e052:	2a12      	cmp	r2, #18
 801e054:	f000 813b 	beq.w	801e2ce <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801e058:	06d9      	lsls	r1, r3, #27
 801e05a:	f57f ae51 	bpl.w	801dd00 <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e05e:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e060:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e062:	8811      	ldrh	r1, [r2, #0]
 801e064:	4a33      	ldr	r2, [pc, #204]	; (801e134 <tcp_input+0x6f0>)
 801e066:	8818      	ldrh	r0, [r3, #0]
 801e068:	6812      	ldr	r2, [r2, #0]
 801e06a:	440a      	add	r2, r1
 801e06c:	4937      	ldr	r1, [pc, #220]	; (801e14c <tcp_input+0x708>)
 801e06e:	6809      	ldr	r1, [r1, #0]
 801e070:	9002      	str	r0, [sp, #8]
 801e072:	4628      	mov	r0, r5
 801e074:	885b      	ldrh	r3, [r3, #2]
 801e076:	e9cd 9300 	strd	r9, r3, [sp]
 801e07a:	4b35      	ldr	r3, [pc, #212]	; (801e150 <tcp_input+0x70c>)
 801e07c:	f001 fa08 	bl	801f490 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801e080:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801e084:	2b05      	cmp	r3, #5
 801e086:	f63f ae3b 	bhi.w	801dd00 <tcp_input+0x2bc>
          pcb->rtime = 0;
 801e08a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801e08c:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801e08e:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801e090:	f001 fc80 	bl	801f994 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801e094:	e634      	b.n	801dd00 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801e096:	4628      	mov	r0, r5
 801e098:	f7fe ff8c 	bl	801cfb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e09c:	4b24      	ldr	r3, [pc, #144]	; (801e130 <tcp_input+0x6ec>)
 801e09e:	781b      	ldrb	r3, [r3, #0]
 801e0a0:	06de      	lsls	r6, r3, #27
 801e0a2:	f57f ae2d 	bpl.w	801dd00 <tcp_input+0x2bc>
 801e0a6:	4b29      	ldr	r3, [pc, #164]	; (801e14c <tcp_input+0x708>)
 801e0a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	429a      	cmp	r2, r3
 801e0ae:	f47f ae27 	bne.w	801dd00 <tcp_input+0x2bc>
 801e0b2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	f47f ae23 	bne.w	801dd00 <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801e0ba:	f89a 3000 	ldrb.w	r3, [sl]
 801e0be:	f043 0310 	orr.w	r3, r3, #16
 801e0c2:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801e0c6:	e61b      	b.n	801dd00 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801e0c8:	4628      	mov	r0, r5
 801e0ca:	f7fe ff73 	bl	801cfb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e0ce:	f89a 3000 	ldrb.w	r3, [sl]
 801e0d2:	069a      	lsls	r2, r3, #26
 801e0d4:	f57f ae14 	bpl.w	801dd00 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801e0d8:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801e0da:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801e0dc:	f043 0302 	orr.w	r3, r3, #2
 801e0e0:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801e0e2:	f7fd fee1 	bl	801bea8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e0e6:	4b14      	ldr	r3, [pc, #80]	; (801e138 <tcp_input+0x6f4>)
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	42ab      	cmp	r3, r5
 801e0ec:	d061      	beq.n	801e1b2 <tcp_input+0x76e>
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d062      	beq.n	801e1b8 <tcp_input+0x774>
 801e0f2:	68da      	ldr	r2, [r3, #12]
 801e0f4:	42aa      	cmp	r2, r5
 801e0f6:	f000 8210 	beq.w	801e51a <tcp_input+0xad6>
 801e0fa:	4613      	mov	r3, r2
 801e0fc:	e7f7      	b.n	801e0ee <tcp_input+0x6aa>
      tcp_receive(pcb);
 801e0fe:	4628      	mov	r0, r5
 801e100:	f7fe ff58 	bl	801cfb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e104:	f89a 3000 	ldrb.w	r3, [sl]
 801e108:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e10c:	4b08      	ldr	r3, [pc, #32]	; (801e130 <tcp_input+0x6ec>)
 801e10e:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801e110:	f000 818e 	beq.w	801e430 <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e114:	06d8      	lsls	r0, r3, #27
 801e116:	d504      	bpl.n	801e122 <tcp_input+0x6de>
 801e118:	4b0c      	ldr	r3, [pc, #48]	; (801e14c <tcp_input+0x708>)
 801e11a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	429a      	cmp	r2, r3
 801e120:	d038      	beq.n	801e194 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801e122:	8b6b      	ldrh	r3, [r5, #26]
 801e124:	f043 0302 	orr.w	r3, r3, #2
 801e128:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801e12a:	2308      	movs	r3, #8
 801e12c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801e12e:	e5e7      	b.n	801dd00 <tcp_input+0x2bc>
 801e130:	2002e0dc 	.word	0x2002e0dc
 801e134:	2002e0fc 	.word	0x2002e0fc
 801e138:	2002e0bc 	.word	0x2002e0bc
 801e13c:	2002e114 	.word	0x2002e114
 801e140:	2002e0c0 	.word	0x2002e0c0
 801e144:	2002e104 	.word	0x2002e104
 801e148:	2002e0cc 	.word	0x2002e0cc
 801e14c:	2002e0d8 	.word	0x2002e0d8
 801e150:	2001ef34 	.word	0x2001ef34
      tcp_receive(pcb);
 801e154:	4628      	mov	r0, r5
 801e156:	f7fe ff2d 	bl	801cfb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e15a:	4ba8      	ldr	r3, [pc, #672]	; (801e3fc <tcp_input+0x9b8>)
 801e15c:	781b      	ldrb	r3, [r3, #0]
 801e15e:	06db      	lsls	r3, r3, #27
 801e160:	f57f adce 	bpl.w	801dd00 <tcp_input+0x2bc>
 801e164:	4ba6      	ldr	r3, [pc, #664]	; (801e400 <tcp_input+0x9bc>)
 801e166:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	429a      	cmp	r2, r3
 801e16c:	f47f adc8 	bne.w	801dd00 <tcp_input+0x2bc>
 801e170:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801e172:	2b00      	cmp	r3, #0
 801e174:	f47f adc4 	bne.w	801dd00 <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801e178:	4628      	mov	r0, r5
 801e17a:	f7fd fe95 	bl	801bea8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e17e:	4ba1      	ldr	r3, [pc, #644]	; (801e404 <tcp_input+0x9c0>)
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	42ab      	cmp	r3, r5
 801e184:	d015      	beq.n	801e1b2 <tcp_input+0x76e>
 801e186:	b1bb      	cbz	r3, 801e1b8 <tcp_input+0x774>
 801e188:	68da      	ldr	r2, [r3, #12]
 801e18a:	42aa      	cmp	r2, r5
 801e18c:	f000 81c5 	beq.w	801e51a <tcp_input+0xad6>
 801e190:	4613      	mov	r3, r2
 801e192:	e7f8      	b.n	801e186 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e194:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801e196:	2b00      	cmp	r3, #0
 801e198:	d1c3      	bne.n	801e122 <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801e19a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801e19c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801e19e:	f043 0302 	orr.w	r3, r3, #2
 801e1a2:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801e1a4:	f7fd fe80 	bl	801bea8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801e1a8:	4b96      	ldr	r3, [pc, #600]	; (801e404 <tcp_input+0x9c0>)
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	42ab      	cmp	r3, r5
 801e1ae:	f040 81b7 	bne.w	801e520 <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801e1b2:	68eb      	ldr	r3, [r5, #12]
 801e1b4:	4a93      	ldr	r2, [pc, #588]	; (801e404 <tcp_input+0x9c0>)
 801e1b6:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e1b8:	4b93      	ldr	r3, [pc, #588]	; (801e408 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801e1ba:	220a      	movs	r2, #10
 801e1bc:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e1be:	681a      	ldr	r2, [r3, #0]
 801e1c0:	601d      	str	r5, [r3, #0]
 801e1c2:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801e1c4:	2201      	movs	r2, #1
 801e1c6:	4b91      	ldr	r3, [pc, #580]	; (801e40c <tcp_input+0x9c8>)
 801e1c8:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e1ca:	f001 fd07 	bl	801fbdc <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801e1ce:	e597      	b.n	801dd00 <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801e1d0:	4b8f      	ldr	r3, [pc, #572]	; (801e410 <tcp_input+0x9cc>)
 801e1d2:	22c2      	movs	r2, #194	; 0xc2
 801e1d4:	498f      	ldr	r1, [pc, #572]	; (801e414 <tcp_input+0x9d0>)
 801e1d6:	4890      	ldr	r0, [pc, #576]	; (801e418 <tcp_input+0x9d4>)
 801e1d8:	f007 f8ec 	bl	80253b4 <iprintf>
 801e1dc:	e47d      	b.n	801dada <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801e1de:	4b8c      	ldr	r3, [pc, #560]	; (801e410 <tcp_input+0x9cc>)
 801e1e0:	22df      	movs	r2, #223	; 0xdf
 801e1e2:	498e      	ldr	r1, [pc, #568]	; (801e41c <tcp_input+0x9d8>)
 801e1e4:	488c      	ldr	r0, [pc, #560]	; (801e418 <tcp_input+0x9d4>)
 801e1e6:	f007 f8e5 	bl	80253b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801e1ea:	8923      	ldrh	r3, [r4, #8]
 801e1ec:	e49b      	b.n	801db26 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801e1ee:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	f000 80d9 	beq.w	801e3a8 <tcp_input+0x964>
 801e1f6:	4c8a      	ldr	r4, [pc, #552]	; (801e420 <tcp_input+0x9dc>)
 801e1f8:	e595      	b.n	801dd26 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801e1fa:	f8bb 2000 	ldrh.w	r2, [fp]
 801e1fe:	b15a      	cbz	r2, 801e218 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801e200:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801e204:	b12b      	cbz	r3, 801e212 <tcp_input+0x7ce>
 801e206:	4629      	mov	r1, r5
 801e208:	6928      	ldr	r0, [r5, #16]
 801e20a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801e20c:	300d      	adds	r0, #13
 801e20e:	f43f ad8a 	beq.w	801dd26 <tcp_input+0x2e2>
          recv_acked = 0;
 801e212:	2300      	movs	r3, #0
 801e214:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801e218:	4628      	mov	r0, r5
 801e21a:	f7fe fe2b 	bl	801ce74 <tcp_input_delayed_close>
 801e21e:	2800      	cmp	r0, #0
 801e220:	f47f ad81 	bne.w	801dd26 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801e224:	f8d8 3000 	ldr.w	r3, [r8]
 801e228:	b1fb      	cbz	r3, 801e26a <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801e22a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801e22c:	b133      	cbz	r3, 801e23c <tcp_input+0x7f8>
 801e22e:	4b78      	ldr	r3, [pc, #480]	; (801e410 <tcp_input+0x9cc>)
 801e230:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801e234:	497b      	ldr	r1, [pc, #492]	; (801e424 <tcp_input+0x9e0>)
 801e236:	4878      	ldr	r0, [pc, #480]	; (801e418 <tcp_input+0x9d4>)
 801e238:	f007 f8bc 	bl	80253b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801e23c:	8b6b      	ldrh	r3, [r5, #26]
 801e23e:	f013 0310 	ands.w	r3, r3, #16
 801e242:	f040 8113 	bne.w	801e46c <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801e246:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801e24a:	2e00      	cmp	r6, #0
 801e24c:	f000 8121 	beq.w	801e492 <tcp_input+0xa4e>
 801e250:	f8d8 2000 	ldr.w	r2, [r8]
 801e254:	4629      	mov	r1, r5
 801e256:	6928      	ldr	r0, [r5, #16]
 801e258:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801e25a:	f110 0f0d 	cmn.w	r0, #13
 801e25e:	f43f ad62 	beq.w	801dd26 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801e262:	b110      	cbz	r0, 801e26a <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801e264:	f8d8 3000 	ldr.w	r3, [r8]
 801e268:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801e26a:	f89a 3000 	ldrb.w	r3, [sl]
 801e26e:	0699      	lsls	r1, r3, #26
 801e270:	d507      	bpl.n	801e282 <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801e272:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801e274:	2b00      	cmp	r3, #0
 801e276:	f000 80ad 	beq.w	801e3d4 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801e27a:	7b5a      	ldrb	r2, [r3, #13]
 801e27c:	f042 0220 	orr.w	r2, r2, #32
 801e280:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801e282:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801e284:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801e286:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801e288:	f7fe fdf4 	bl	801ce74 <tcp_input_delayed_close>
 801e28c:	2800      	cmp	r0, #0
 801e28e:	f47f ad4a 	bne.w	801dd26 <tcp_input+0x2e2>
        tcp_output(pcb);
 801e292:	4628      	mov	r0, r5
 801e294:	f001 f976 	bl	801f584 <tcp_output>
 801e298:	e545      	b.n	801dd26 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801e29a:	6830      	ldr	r0, [r6, #0]
 801e29c:	8980      	ldrh	r0, [r0, #12]
 801e29e:	f7fa ff83 	bl	80191a8 <lwip_htons>
 801e2a2:	f010 0004 	ands.w	r0, r0, #4
 801e2a6:	f47f abda 	bne.w	801da5e <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e2aa:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e2ac:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e2ae:	8811      	ldrh	r1, [r2, #0]
 801e2b0:	4a5d      	ldr	r2, [pc, #372]	; (801e428 <tcp_input+0x9e4>)
 801e2b2:	881d      	ldrh	r5, [r3, #0]
 801e2b4:	6812      	ldr	r2, [r2, #0]
 801e2b6:	440a      	add	r2, r1
 801e2b8:	4951      	ldr	r1, [pc, #324]	; (801e400 <tcp_input+0x9bc>)
 801e2ba:	6809      	ldr	r1, [r1, #0]
 801e2bc:	9502      	str	r5, [sp, #8]
 801e2be:	885b      	ldrh	r3, [r3, #2]
 801e2c0:	e9cd 9300 	strd	r9, r3, [sp]
 801e2c4:	4b59      	ldr	r3, [pc, #356]	; (801e42c <tcp_input+0x9e8>)
 801e2c6:	f001 f8e3 	bl	801f490 <tcp_rst>
 801e2ca:	f7ff bbc8 	b.w	801da5e <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801e2ce:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801e2d0:	494b      	ldr	r1, [pc, #300]	; (801e400 <tcp_input+0x9bc>)
 801e2d2:	3201      	adds	r2, #1
 801e2d4:	6809      	ldr	r1, [r1, #0]
 801e2d6:	428a      	cmp	r2, r1
 801e2d8:	f47f aebe 	bne.w	801e058 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801e2dc:	4b52      	ldr	r3, [pc, #328]	; (801e428 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801e2de:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801e2e0:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801e2e2:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e2e4:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801e2e6:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801e2e8:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e2ea:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801e2ec:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801e2ee:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801e2f0:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e2f2:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801e2f4:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801e2f6:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801e2f8:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801e2fc:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e2fe:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e302:	9205      	str	r2, [sp, #20]
 801e304:	f004 fb88 	bl	8022a18 <ip4_route>
 801e308:	9a05      	ldr	r2, [sp, #20]
 801e30a:	4601      	mov	r1, r0
 801e30c:	4630      	mov	r0, r6
 801e30e:	f7fe fcff 	bl	801cd10 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e312:	f241 131c 	movw	r3, #4380	; 0x111c
 801e316:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e318:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e31a:	0081      	lsls	r1, r0, #2
 801e31c:	429a      	cmp	r2, r3
 801e31e:	4616      	mov	r6, r2
 801e320:	bf38      	it	cc
 801e322:	461e      	movcc	r6, r3
 801e324:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801e328:	f240 814d 	bls.w	801e5c6 <tcp_input+0xb82>
 801e32c:	b28b      	uxth	r3, r1
 801e32e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801e332:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801e336:	2b00      	cmp	r3, #0
 801e338:	f000 813d 	beq.w	801e5b6 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801e33c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801e340:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801e342:	3b01      	subs	r3, #1
 801e344:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801e348:	2e00      	cmp	r6, #0
 801e34a:	f000 812f 	beq.w	801e5ac <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801e34e:	6833      	ldr	r3, [r6, #0]
 801e350:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801e352:	4630      	mov	r0, r6
 801e354:	f7fd fce0 	bl	801bd18 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801e358:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	f000 8122 	beq.w	801e5a4 <tcp_input+0xb60>
          pcb->rtime = 0;
 801e360:	2300      	movs	r3, #0
 801e362:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801e364:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801e368:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801e36c:	b133      	cbz	r3, 801e37c <tcp_input+0x938>
 801e36e:	2200      	movs	r2, #0
 801e370:	4629      	mov	r1, r5
 801e372:	6928      	ldr	r0, [r5, #16]
 801e374:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801e376:	300d      	adds	r0, #13
 801e378:	f43f acd5 	beq.w	801dd26 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801e37c:	8b6b      	ldrh	r3, [r5, #26]
 801e37e:	f043 0302 	orr.w	r3, r3, #2
 801e382:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801e384:	e4bc      	b.n	801dd00 <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801e386:	4b1e      	ldr	r3, [pc, #120]	; (801e400 <tcp_input+0x9bc>)
 801e388:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	429a      	cmp	r2, r3
 801e38e:	f47f acb7 	bne.w	801dd00 <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801e392:	f89a 3000 	ldrb.w	r3, [sl]
 801e396:	f043 0308 	orr.w	r3, r3, #8
 801e39a:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801e39e:	8b6b      	ldrh	r3, [r5, #26]
 801e3a0:	f023 0301 	bic.w	r3, r3, #1
 801e3a4:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801e3a6:	e4ab      	b.n	801dd00 <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801e3a8:	4628      	mov	r0, r5
 801e3aa:	4c1d      	ldr	r4, [pc, #116]	; (801e420 <tcp_input+0x9dc>)
 801e3ac:	f001 f8b8 	bl	801f520 <tcp_send_empty_ack>
 801e3b0:	e4b9      	b.n	801dd26 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e3b2:	8802      	ldrh	r2, [r0, #0]
 801e3b4:	e9cd 9300 	strd	r9, r3, [sp]
 801e3b8:	9b05      	ldr	r3, [sp, #20]
 801e3ba:	9202      	str	r2, [sp, #8]
 801e3bc:	881a      	ldrh	r2, [r3, #0]
 801e3be:	4b1a      	ldr	r3, [pc, #104]	; (801e428 <tcp_input+0x9e4>)
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	441a      	add	r2, r3
 801e3c4:	4b0e      	ldr	r3, [pc, #56]	; (801e400 <tcp_input+0x9bc>)
 801e3c6:	4628      	mov	r0, r5
 801e3c8:	6819      	ldr	r1, [r3, #0]
 801e3ca:	4b18      	ldr	r3, [pc, #96]	; (801e42c <tcp_input+0x9e8>)
 801e3cc:	f001 f860 	bl	801f490 <tcp_rst>
 801e3d0:	f7ff bb45 	b.w	801da5e <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801e3d4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801e3d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801e3da:	d001      	beq.n	801e3e0 <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801e3dc:	3301      	adds	r3, #1
 801e3de:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801e3e0:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801e3e4:	2e00      	cmp	r6, #0
 801e3e6:	f43f af4c 	beq.w	801e282 <tcp_input+0x83e>
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	4629      	mov	r1, r5
 801e3ee:	6928      	ldr	r0, [r5, #16]
 801e3f0:	461a      	mov	r2, r3
 801e3f2:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801e3f4:	300d      	adds	r0, #13
 801e3f6:	f47f af44 	bne.w	801e282 <tcp_input+0x83e>
 801e3fa:	e494      	b.n	801dd26 <tcp_input+0x2e2>
 801e3fc:	2002e0dc 	.word	0x2002e0dc
 801e400:	2002e0d8 	.word	0x2002e0d8
 801e404:	2002e0bc 	.word	0x2002e0bc
 801e408:	2002e0d4 	.word	0x2002e0d4
 801e40c:	2002e0c0 	.word	0x2002e0c0
 801e410:	08044488 	.word	0x08044488
 801e414:	08044690 	.word	0x08044690
 801e418:	0802a008 	.word	0x0802a008
 801e41c:	080446a0 	.word	0x080446a0
 801e420:	2002e100 	.word	0x2002e100
 801e424:	0804483c 	.word	0x0804483c
 801e428:	2002e0fc 	.word	0x2002e0fc
 801e42c:	2001ef34 	.word	0x2001ef34
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e430:	06d9      	lsls	r1, r3, #27
 801e432:	f57f ac65 	bpl.w	801dd00 <tcp_input+0x2bc>
 801e436:	4b6a      	ldr	r3, [pc, #424]	; (801e5e0 <tcp_input+0xb9c>)
 801e438:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	429a      	cmp	r2, r3
 801e43e:	f47f ac5f 	bne.w	801dd00 <tcp_input+0x2bc>
 801e442:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801e444:	2b00      	cmp	r3, #0
 801e446:	f47f ac5b 	bne.w	801dd00 <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801e44a:	2306      	movs	r3, #6
 801e44c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801e44e:	e457      	b.n	801dd00 <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801e450:	2900      	cmp	r1, #0
 801e452:	f43f ac55 	beq.w	801dd00 <tcp_input+0x2bc>
 801e456:	4b63      	ldr	r3, [pc, #396]	; (801e5e4 <tcp_input+0xba0>)
 801e458:	681a      	ldr	r2, [r3, #0]
 801e45a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e45c:	3b01      	subs	r3, #1
 801e45e:	4293      	cmp	r3, r2
 801e460:	f47f ac4e 	bne.w	801dd00 <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801e464:	4628      	mov	r0, r5
 801e466:	f000 ff95 	bl	801f394 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801e46a:	e449      	b.n	801dd00 <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801e46c:	f8d8 0000 	ldr.w	r0, [r8]
 801e470:	f7fc fed6 	bl	801b220 <pbuf_free>
            tcp_abort(pcb);
 801e474:	4628      	mov	r0, r5
 801e476:	f7fe f957 	bl	801c728 <tcp_abort>
            goto aborted;
 801e47a:	e454      	b.n	801dd26 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801e47c:	69ab      	ldr	r3, [r5, #24]
 801e47e:	2b00      	cmp	r3, #0
 801e480:	f43f aaed 	beq.w	801da5e <tcp_input+0x1a>
 801e484:	4601      	mov	r1, r0
 801e486:	f04f 32ff 	mov.w	r2, #4294967295
 801e48a:	6928      	ldr	r0, [r5, #16]
 801e48c:	4798      	blx	r3
 801e48e:	f7ff bae6 	b.w	801da5e <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801e492:	4633      	mov	r3, r6
 801e494:	4630      	mov	r0, r6
 801e496:	f8d8 2000 	ldr.w	r2, [r8]
 801e49a:	4629      	mov	r1, r5
 801e49c:	f7fe fb5a 	bl	801cb54 <tcp_recv_null>
 801e4a0:	e6db      	b.n	801e25a <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801e4a2:	2304      	movs	r3, #4
 801e4a4:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801e4a6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	d0e3      	beq.n	801e474 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e4ac:	699b      	ldr	r3, [r3, #24]
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	d05d      	beq.n	801e56e <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e4b2:	2200      	movs	r2, #0
 801e4b4:	4629      	mov	r1, r5
 801e4b6:	6928      	ldr	r0, [r5, #16]
 801e4b8:	4798      	blx	r3
          if (err != ERR_OK) {
 801e4ba:	2800      	cmp	r0, #0
 801e4bc:	d153      	bne.n	801e566 <tcp_input+0xb22>
          tcp_receive(pcb);
 801e4be:	4628      	mov	r0, r5
 801e4c0:	f7fe fd78 	bl	801cfb4 <tcp_receive>
          if (recv_acked != 0) {
 801e4c4:	f8bb 3000 	ldrh.w	r3, [fp]
 801e4c8:	b113      	cbz	r3, 801e4d0 <tcp_input+0xa8c>
            recv_acked--;
 801e4ca:	3b01      	subs	r3, #1
 801e4cc:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e4d0:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801e4d2:	f241 131c 	movw	r3, #4380	; 0x111c
 801e4d6:	004a      	lsls	r2, r1, #1
 801e4d8:	0088      	lsls	r0, r1, #2
 801e4da:	429a      	cmp	r2, r3
 801e4dc:	4616      	mov	r6, r2
 801e4de:	bf38      	it	cc
 801e4e0:	461e      	movcc	r6, r3
 801e4e2:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801e4e6:	d959      	bls.n	801e59c <tcp_input+0xb58>
 801e4e8:	b283      	uxth	r3, r0
 801e4ea:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801e4ee:	f89a 3000 	ldrb.w	r3, [sl]
 801e4f2:	069b      	lsls	r3, r3, #26
 801e4f4:	f57f ac04 	bpl.w	801dd00 <tcp_input+0x2bc>
 801e4f8:	e584      	b.n	801e004 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801e4fa:	07d0      	lsls	r0, r2, #31
 801e4fc:	f57f ac72 	bpl.w	801dde4 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801e500:	4b39      	ldr	r3, [pc, #228]	; (801e5e8 <tcp_input+0xba4>)
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	622b      	str	r3, [r5, #32]
 801e506:	e46d      	b.n	801dde4 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801e508:	4b38      	ldr	r3, [pc, #224]	; (801e5ec <tcp_input+0xba8>)
 801e50a:	f240 1215 	movw	r2, #277	; 0x115
 801e50e:	4938      	ldr	r1, [pc, #224]	; (801e5f0 <tcp_input+0xbac>)
 801e510:	4838      	ldr	r0, [pc, #224]	; (801e5f4 <tcp_input+0xbb0>)
 801e512:	f006 ff4f 	bl	80253b4 <iprintf>
 801e516:	f7ff bbb0 	b.w	801dc7a <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801e51a:	68ea      	ldr	r2, [r5, #12]
 801e51c:	60da      	str	r2, [r3, #12]
 801e51e:	e64b      	b.n	801e1b8 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801e520:	2b00      	cmp	r3, #0
 801e522:	f43f ae49 	beq.w	801e1b8 <tcp_input+0x774>
 801e526:	68da      	ldr	r2, [r3, #12]
 801e528:	42aa      	cmp	r2, r5
 801e52a:	d0f6      	beq.n	801e51a <tcp_input+0xad6>
 801e52c:	4613      	mov	r3, r2
 801e52e:	e7f7      	b.n	801e520 <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801e530:	2100      	movs	r1, #0
 801e532:	4648      	mov	r0, r9
 801e534:	f7fe f828 	bl	801c588 <tcp_abandon>
      return;
 801e538:	f7ff ba91 	b.w	801da5e <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801e53c:	4b2b      	ldr	r3, [pc, #172]	; (801e5ec <tcp_input+0xba8>)
 801e53e:	f240 120d 	movw	r2, #269	; 0x10d
 801e542:	492d      	ldr	r1, [pc, #180]	; (801e5f8 <tcp_input+0xbb4>)
 801e544:	482b      	ldr	r0, [pc, #172]	; (801e5f4 <tcp_input+0xbb0>)
 801e546:	f006 ff35 	bl	80253b4 <iprintf>
      if (prev != NULL) {
 801e54a:	f1b8 0f00 	cmp.w	r8, #0
 801e54e:	f43f ab90 	beq.w	801dc72 <tcp_input+0x22e>
 801e552:	68eb      	ldr	r3, [r5, #12]
 801e554:	f7ff bb87 	b.w	801dc66 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e558:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801e55c:	9b05      	ldr	r3, [sp, #20]
 801e55e:	f8cd 9000 	str.w	r9, [sp]
 801e562:	881b      	ldrh	r3, [r3, #0]
 801e564:	e72d      	b.n	801e3c2 <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801e566:	300d      	adds	r0, #13
 801e568:	f43f abdd 	beq.w	801dd26 <tcp_input+0x2e2>
 801e56c:	e782      	b.n	801e474 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e56e:	4b1f      	ldr	r3, [pc, #124]	; (801e5ec <tcp_input+0xba8>)
 801e570:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801e574:	4921      	ldr	r1, [pc, #132]	; (801e5fc <tcp_input+0xbb8>)
 801e576:	481f      	ldr	r0, [pc, #124]	; (801e5f4 <tcp_input+0xbb0>)
 801e578:	f006 ff1c 	bl	80253b4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e57c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801e57e:	699b      	ldr	r3, [r3, #24]
 801e580:	2b00      	cmp	r3, #0
 801e582:	d196      	bne.n	801e4b2 <tcp_input+0xa6e>
 801e584:	e776      	b.n	801e474 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801e586:	2900      	cmp	r1, #0
 801e588:	f47f af03 	bne.w	801e392 <tcp_input+0x94e>
 801e58c:	4b17      	ldr	r3, [pc, #92]	; (801e5ec <tcp_input+0xba8>)
 801e58e:	f44f 724e 	mov.w	r2, #824	; 0x338
 801e592:	491b      	ldr	r1, [pc, #108]	; (801e600 <tcp_input+0xbbc>)
 801e594:	4817      	ldr	r0, [pc, #92]	; (801e5f4 <tcp_input+0xbb0>)
 801e596:	f006 ff0d 	bl	80253b4 <iprintf>
 801e59a:	e6fa      	b.n	801e392 <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e59c:	429a      	cmp	r2, r3
 801e59e:	bf88      	it	hi
 801e5a0:	b293      	uxthhi	r3, r2
 801e5a2:	e7a2      	b.n	801e4ea <tcp_input+0xaa6>
          pcb->rtime = -1;
 801e5a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e5a8:	862b      	strh	r3, [r5, #48]	; 0x30
 801e5aa:	e6dd      	b.n	801e368 <tcp_input+0x924>
          rseg = pcb->unsent;
 801e5ac:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e5ae:	b176      	cbz	r6, 801e5ce <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801e5b0:	6833      	ldr	r3, [r6, #0]
 801e5b2:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e5b4:	e6cd      	b.n	801e352 <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801e5b6:	4b0d      	ldr	r3, [pc, #52]	; (801e5ec <tcp_input+0xba8>)
 801e5b8:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801e5bc:	4911      	ldr	r1, [pc, #68]	; (801e604 <tcp_input+0xbc0>)
 801e5be:	480d      	ldr	r0, [pc, #52]	; (801e5f4 <tcp_input+0xbb0>)
 801e5c0:	f006 fef8 	bl	80253b4 <iprintf>
 801e5c4:	e6ba      	b.n	801e33c <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e5c6:	429a      	cmp	r2, r3
 801e5c8:	bf88      	it	hi
 801e5ca:	b293      	uxthhi	r3, r2
 801e5cc:	e6af      	b.n	801e32e <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e5ce:	4b07      	ldr	r3, [pc, #28]	; (801e5ec <tcp_input+0xba8>)
 801e5d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 801e5d4:	490c      	ldr	r1, [pc, #48]	; (801e608 <tcp_input+0xbc4>)
 801e5d6:	4807      	ldr	r0, [pc, #28]	; (801e5f4 <tcp_input+0xbb0>)
 801e5d8:	f006 feec 	bl	80253b4 <iprintf>
 801e5dc:	e7e8      	b.n	801e5b0 <tcp_input+0xb6c>
 801e5de:	bf00      	nop
 801e5e0:	2002e0d8 	.word	0x2002e0d8
 801e5e4:	2002e0fc 	.word	0x2002e0fc
 801e5e8:	2002e0cc 	.word	0x2002e0cc
 801e5ec:	08044488 	.word	0x08044488
 801e5f0:	08044774 	.word	0x08044774
 801e5f4:	0802a008 	.word	0x0802a008
 801e5f8:	08044748 	.word	0x08044748
 801e5fc:	0804481c 	.word	0x0804481c
 801e600:	080447d0 	.word	0x080447d0
 801e604:	080447f0 	.word	0x080447f0
 801e608:	08044808 	.word	0x08044808

0801e60c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801e60c:	4a02      	ldr	r2, [pc, #8]	; (801e618 <tcp_trigger_input_pcb_close+0xc>)
 801e60e:	7813      	ldrb	r3, [r2, #0]
 801e610:	f043 0310 	orr.w	r3, r3, #16
 801e614:	7013      	strb	r3, [r2, #0]
}
 801e616:	4770      	bx	lr
 801e618:	2002e0f8 	.word	0x2002e0f8

0801e61c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801e61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e620:	9f08      	ldr	r7, [sp, #32]
 801e622:	4680      	mov	r8, r0
 801e624:	460d      	mov	r5, r1
 801e626:	4614      	mov	r4, r2
 801e628:	461e      	mov	r6, r3
 801e62a:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801e62e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801e632:	2f00      	cmp	r7, #0
 801e634:	d033      	beq.n	801e69e <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801e636:	42a5      	cmp	r5, r4
 801e638:	d20e      	bcs.n	801e658 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e63a:	f019 0f02 	tst.w	r9, #2
 801e63e:	d008      	beq.n	801e652 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801e640:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801e644:	f021 0103 	bic.w	r1, r1, #3
 801e648:	428c      	cmp	r4, r1
 801e64a:	bf28      	it	cs
 801e64c:	460c      	movcs	r4, r1
 801e64e:	b2a1      	uxth	r1, r4
 801e650:	e003      	b.n	801e65a <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e652:	8b7b      	ldrh	r3, [r7, #26]
 801e654:	065b      	lsls	r3, r3, #25
 801e656:	d518      	bpl.n	801e68a <tcp_pbuf_prealloc+0x6e>
 801e658:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801e65a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e65e:	4640      	mov	r0, r8
 801e660:	f7fc fc0c 	bl	801ae7c <pbuf_alloc>
  if (p == NULL) {
 801e664:	4604      	mov	r4, r0
 801e666:	b168      	cbz	r0, 801e684 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801e668:	6803      	ldr	r3, [r0, #0]
 801e66a:	b133      	cbz	r3, 801e67a <tcp_pbuf_prealloc+0x5e>
 801e66c:	4b0f      	ldr	r3, [pc, #60]	; (801e6ac <tcp_pbuf_prealloc+0x90>)
 801e66e:	f240 120b 	movw	r2, #267	; 0x10b
 801e672:	490f      	ldr	r1, [pc, #60]	; (801e6b0 <tcp_pbuf_prealloc+0x94>)
 801e674:	480f      	ldr	r0, [pc, #60]	; (801e6b4 <tcp_pbuf_prealloc+0x98>)
 801e676:	f006 fe9d 	bl	80253b4 <iprintf>
  *oversize = p->len - length;
 801e67a:	8963      	ldrh	r3, [r4, #10]
 801e67c:	1b5b      	subs	r3, r3, r5
 801e67e:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801e680:	8125      	strh	r5, [r4, #8]
 801e682:	8165      	strh	r5, [r4, #10]
  return p;
}
 801e684:	4620      	mov	r0, r4
 801e686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801e68a:	f1ba 0f00 	cmp.w	sl, #0
 801e68e:	d0d7      	beq.n	801e640 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801e690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e692:	2b00      	cmp	r3, #0
 801e694:	d1d4      	bne.n	801e640 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801e696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e698:	2b00      	cmp	r3, #0
 801e69a:	d1d1      	bne.n	801e640 <tcp_pbuf_prealloc+0x24>
 801e69c:	e7dc      	b.n	801e658 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801e69e:	4b03      	ldr	r3, [pc, #12]	; (801e6ac <tcp_pbuf_prealloc+0x90>)
 801e6a0:	22e9      	movs	r2, #233	; 0xe9
 801e6a2:	4905      	ldr	r1, [pc, #20]	; (801e6b8 <tcp_pbuf_prealloc+0x9c>)
 801e6a4:	4803      	ldr	r0, [pc, #12]	; (801e6b4 <tcp_pbuf_prealloc+0x98>)
 801e6a6:	f006 fe85 	bl	80253b4 <iprintf>
 801e6aa:	e7c4      	b.n	801e636 <tcp_pbuf_prealloc+0x1a>
 801e6ac:	08044858 	.word	0x08044858
 801e6b0:	080448ac 	.word	0x080448ac
 801e6b4:	0802a008 	.word	0x0802a008
 801e6b8:	0804488c 	.word	0x0804488c

0801e6bc <tcp_create_segment>:
{
 801e6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6c0:	460e      	mov	r6, r1
 801e6c2:	f89d a020 	ldrb.w	sl, [sp, #32]
 801e6c6:	4690      	mov	r8, r2
 801e6c8:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e6ca:	4607      	mov	r7, r0
 801e6cc:	2800      	cmp	r0, #0
 801e6ce:	d04c      	beq.n	801e76a <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e6d0:	2e00      	cmp	r6, #0
 801e6d2:	d052      	beq.n	801e77a <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e6d4:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e6d8:	22a8      	movs	r2, #168	; 0xa8
 801e6da:	4931      	ldr	r1, [pc, #196]	; (801e7a0 <tcp_create_segment+0xe4>)
 801e6dc:	2004      	movs	r0, #4
 801e6de:	f7fc f851 	bl	801a784 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e6e2:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e6e6:	4604      	mov	r4, r0
 801e6e8:	2800      	cmp	r0, #0
 801e6ea:	d054      	beq.n	801e796 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801e6ec:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801e6f0:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e6f2:	8932      	ldrh	r2, [r6, #8]
 801e6f4:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801e6f8:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e6fa:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801e6fc:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e6fe:	d32c      	bcc.n	801e75a <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801e700:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e704:	4630      	mov	r0, r6
 801e706:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801e708:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e70a:	f7fc fcc9 	bl	801b0a0 <pbuf_add_header>
 801e70e:	4606      	mov	r6, r0
 801e710:	2800      	cmp	r0, #0
 801e712:	d139      	bne.n	801e788 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e714:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e716:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e718:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e71a:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e71e:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e722:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e726:	f7fa fd3f 	bl	80191a8 <lwip_htons>
 801e72a:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801e72e:	8b38      	ldrh	r0, [r7, #24]
 801e730:	68e7      	ldr	r7, [r4, #12]
 801e732:	f7fa fd39 	bl	80191a8 <lwip_htons>
 801e736:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801e738:	4648      	mov	r0, r9
 801e73a:	68e7      	ldr	r7, [r4, #12]
 801e73c:	f7fa fd38 	bl	80191b0 <lwip_htonl>
 801e740:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e742:	ea45 0008 	orr.w	r0, r5, r8
 801e746:	68e7      	ldr	r7, [r4, #12]
 801e748:	f7fa fd2e 	bl	80191a8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801e74c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e74e:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801e750:	749e      	strb	r6, [r3, #18]
 801e752:	74de      	strb	r6, [r3, #19]
}
 801e754:	4620      	mov	r0, r4
 801e756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e75a:	22b0      	movs	r2, #176	; 0xb0
 801e75c:	4b10      	ldr	r3, [pc, #64]	; (801e7a0 <tcp_create_segment+0xe4>)
 801e75e:	4911      	ldr	r1, [pc, #68]	; (801e7a4 <tcp_create_segment+0xe8>)
 801e760:	4811      	ldr	r0, [pc, #68]	; (801e7a8 <tcp_create_segment+0xec>)
 801e762:	f006 fe27 	bl	80253b4 <iprintf>
  seg->len = p->tot_len - optlen;
 801e766:	8932      	ldrh	r2, [r6, #8]
 801e768:	e7ca      	b.n	801e700 <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e76a:	4b0d      	ldr	r3, [pc, #52]	; (801e7a0 <tcp_create_segment+0xe4>)
 801e76c:	22a3      	movs	r2, #163	; 0xa3
 801e76e:	490f      	ldr	r1, [pc, #60]	; (801e7ac <tcp_create_segment+0xf0>)
 801e770:	480d      	ldr	r0, [pc, #52]	; (801e7a8 <tcp_create_segment+0xec>)
 801e772:	f006 fe1f 	bl	80253b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e776:	2e00      	cmp	r6, #0
 801e778:	d1ac      	bne.n	801e6d4 <tcp_create_segment+0x18>
 801e77a:	4b09      	ldr	r3, [pc, #36]	; (801e7a0 <tcp_create_segment+0xe4>)
 801e77c:	22a4      	movs	r2, #164	; 0xa4
 801e77e:	490c      	ldr	r1, [pc, #48]	; (801e7b0 <tcp_create_segment+0xf4>)
 801e780:	4809      	ldr	r0, [pc, #36]	; (801e7a8 <tcp_create_segment+0xec>)
 801e782:	f006 fe17 	bl	80253b4 <iprintf>
 801e786:	e7a5      	b.n	801e6d4 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801e788:	4620      	mov	r0, r4
    return NULL;
 801e78a:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801e78c:	f7fd fac4 	bl	801bd18 <tcp_seg_free>
}
 801e790:	4620      	mov	r0, r4
 801e792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801e796:	4630      	mov	r0, r6
 801e798:	f7fc fd42 	bl	801b220 <pbuf_free>
    return NULL;
 801e79c:	e7da      	b.n	801e754 <tcp_create_segment+0x98>
 801e79e:	bf00      	nop
 801e7a0:	08044858 	.word	0x08044858
 801e7a4:	08044904 	.word	0x08044904
 801e7a8:	0802a008 	.word	0x0802a008
 801e7ac:	080448c0 	.word	0x080448c0
 801e7b0:	080448e0 	.word	0x080448e0

0801e7b4 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e7b4:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e7b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e7ba:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e7bc:	4606      	mov	r6, r0
 801e7be:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e7c0:	2022      	movs	r0, #34	; 0x22
 801e7c2:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e7c6:	461c      	mov	r4, r3
 801e7c8:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801e7cc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801e7d0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e7d4:	f7fc fb52 	bl	801ae7c <pbuf_alloc>
  if (p != NULL) {
 801e7d8:	4605      	mov	r5, r0
 801e7da:	b300      	cbz	r0, 801e81e <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e7dc:	8943      	ldrh	r3, [r0, #10]
 801e7de:	2b13      	cmp	r3, #19
 801e7e0:	d920      	bls.n	801e824 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801e7e2:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801e7e4:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801e7e6:	f7fa fcdf 	bl	80191a8 <lwip_htons>
 801e7ea:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801e7ec:	4650      	mov	r0, sl
 801e7ee:	f7fa fcdb 	bl	80191a8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801e7f2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801e7f4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801e7f6:	4630      	mov	r0, r6
 801e7f8:	f7fa fcda 	bl	80191b0 <lwip_htonl>
 801e7fc:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e7fe:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801e802:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e804:	f7fa fcd0 	bl	80191a8 <lwip_htons>
 801e808:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801e80a:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e80c:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801e80e:	f7fa fccb 	bl	80191a8 <lwip_htons>
    tcphdr->chksum = 0;
 801e812:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801e814:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801e816:	7423      	strb	r3, [r4, #16]
 801e818:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801e81a:	74a3      	strb	r3, [r4, #18]
 801e81c:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801e81e:	4628      	mov	r0, r5
 801e820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e824:	4b03      	ldr	r3, [pc, #12]	; (801e834 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801e826:	f240 7223 	movw	r2, #1827	; 0x723
 801e82a:	4903      	ldr	r1, [pc, #12]	; (801e838 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801e82c:	4803      	ldr	r0, [pc, #12]	; (801e83c <tcp_output_alloc_header_common.constprop.0+0x88>)
 801e82e:	f006 fdc1 	bl	80253b4 <iprintf>
 801e832:	e7d6      	b.n	801e7e2 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801e834:	08044858 	.word	0x08044858
 801e838:	0804491c 	.word	0x0804491c
 801e83c:	0802a008 	.word	0x0802a008

0801e840 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801e840:	b570      	push	{r4, r5, r6, lr}
 801e842:	460d      	mov	r5, r1
 801e844:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e846:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801e848:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e84a:	b190      	cbz	r0, 801e872 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801e84c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801e84e:	2210      	movs	r2, #16
 801e850:	8b21      	ldrh	r1, [r4, #24]
 801e852:	9302      	str	r3, [sp, #8]
 801e854:	e9cd 1200 	strd	r1, r2, [sp]
 801e858:	4632      	mov	r2, r6
 801e85a:	4629      	mov	r1, r5
 801e85c:	8ae3      	ldrh	r3, [r4, #22]
 801e85e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e860:	f7ff ffa8 	bl	801e7b4 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801e864:	b118      	cbz	r0, 801e86e <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e866:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801e868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e86a:	4413      	add	r3, r2
 801e86c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801e86e:	b004      	add	sp, #16
 801e870:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e872:	4b04      	ldr	r3, [pc, #16]	; (801e884 <tcp_output_alloc_header.constprop.0+0x44>)
 801e874:	f240 7242 	movw	r2, #1858	; 0x742
 801e878:	4903      	ldr	r1, [pc, #12]	; (801e888 <tcp_output_alloc_header.constprop.0+0x48>)
 801e87a:	4804      	ldr	r0, [pc, #16]	; (801e88c <tcp_output_alloc_header.constprop.0+0x4c>)
 801e87c:	f006 fd9a 	bl	80253b4 <iprintf>
 801e880:	e7e4      	b.n	801e84c <tcp_output_alloc_header.constprop.0+0xc>
 801e882:	bf00      	nop
 801e884:	08044858 	.word	0x08044858
 801e888:	0804494c 	.word	0x0804494c
 801e88c:	0802a008 	.word	0x0802a008

0801e890 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801e890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e894:	4605      	mov	r5, r0
 801e896:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e898:	460c      	mov	r4, r1
{
 801e89a:	4690      	mov	r8, r2
 801e89c:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e89e:	2900      	cmp	r1, #0
 801e8a0:	d034      	beq.n	801e90c <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e8a2:	2d00      	cmp	r5, #0
 801e8a4:	d03a      	beq.n	801e91c <tcp_output_control_segment+0x8c>
 801e8a6:	7a28      	ldrb	r0, [r5, #8]
 801e8a8:	bb10      	cbnz	r0, 801e8f0 <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801e8aa:	4630      	mov	r0, r6
 801e8ac:	f004 f8b4 	bl	8022a18 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801e8b0:	4607      	mov	r7, r0
 801e8b2:	b310      	cbz	r0, 801e8fa <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e8b4:	9600      	str	r6, [sp, #0]
 801e8b6:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801e8b8:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e8bc:	2106      	movs	r1, #6
 801e8be:	8922      	ldrh	r2, [r4, #8]
 801e8c0:	4620      	mov	r0, r4
 801e8c2:	f7fb fa05 	bl	8019cd0 <ip_chksum_pseudo>
 801e8c6:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801e8ca:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801e8cc:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801e8ce:	9500      	str	r5, [sp, #0]
 801e8d0:	2506      	movs	r5, #6
 801e8d2:	4632      	mov	r2, r6
 801e8d4:	4641      	mov	r1, r8
 801e8d6:	9501      	str	r5, [sp, #4]
 801e8d8:	4620      	mov	r0, r4
 801e8da:	9702      	str	r7, [sp, #8]
 801e8dc:	f004 fa66 	bl	8022dac <ip4_output_if>
 801e8e0:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801e8e2:	4620      	mov	r0, r4
 801e8e4:	f7fc fc9c 	bl	801b220 <pbuf_free>
  return err;
}
 801e8e8:	4628      	mov	r0, r5
 801e8ea:	b005      	add	sp, #20
 801e8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801e8f0:	f7fc f970 	bl	801abd4 <netif_get_by_index>
  if (netif == NULL) {
 801e8f4:	4607      	mov	r7, r0
 801e8f6:	2800      	cmp	r0, #0
 801e8f8:	d1dc      	bne.n	801e8b4 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801e8fa:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801e8fe:	4620      	mov	r0, r4
 801e900:	f7fc fc8e 	bl	801b220 <pbuf_free>
}
 801e904:	4628      	mov	r0, r5
 801e906:	b005      	add	sp, #20
 801e908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e90c:	4b0d      	ldr	r3, [pc, #52]	; (801e944 <tcp_output_control_segment+0xb4>)
 801e90e:	f240 7287 	movw	r2, #1927	; 0x787
 801e912:	490d      	ldr	r1, [pc, #52]	; (801e948 <tcp_output_control_segment+0xb8>)
 801e914:	480d      	ldr	r0, [pc, #52]	; (801e94c <tcp_output_control_segment+0xbc>)
 801e916:	f006 fd4d 	bl	80253b4 <iprintf>
 801e91a:	e7c2      	b.n	801e8a2 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801e91c:	4630      	mov	r0, r6
 801e91e:	f004 f87b 	bl	8022a18 <ip4_route>
  if (netif == NULL) {
 801e922:	4607      	mov	r7, r0
 801e924:	2800      	cmp	r0, #0
 801e926:	d0e8      	beq.n	801e8fa <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e928:	9600      	str	r6, [sp, #0]
 801e92a:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801e92c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e930:	2106      	movs	r1, #6
 801e932:	8922      	ldrh	r2, [r4, #8]
 801e934:	4620      	mov	r0, r4
 801e936:	f7fb f9cb 	bl	8019cd0 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801e93a:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e93c:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801e940:	e7c5      	b.n	801e8ce <tcp_output_control_segment+0x3e>
 801e942:	bf00      	nop
 801e944:	08044858 	.word	0x08044858
 801e948:	08044974 	.word	0x08044974
 801e94c:	0802a008 	.word	0x0802a008

0801e950 <tcp_write>:
{
 801e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801e954:	2400      	movs	r4, #0
{
 801e956:	b091      	sub	sp, #68	; 0x44
 801e958:	9107      	str	r1, [sp, #28]
 801e95a:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801e95c:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801e960:	2800      	cmp	r0, #0
 801e962:	f000 82fc 	beq.w	801ef5e <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801e966:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801e96a:	4692      	mov	sl, r2
 801e96c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801e96e:	4681      	mov	r9, r0
 801e970:	085b      	lsrs	r3, r3, #1
 801e972:	4293      	cmp	r3, r2
 801e974:	bf28      	it	cs
 801e976:	4613      	movcs	r3, r2
 801e978:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	bf08      	it	eq
 801e97e:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e980:	9b07      	ldr	r3, [sp, #28]
 801e982:	2b00      	cmp	r3, #0
 801e984:	f000 82df 	beq.w	801ef46 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801e988:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801e98a:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801e98c:	2a02      	cmp	r2, #2
 801e98e:	d902      	bls.n	801e996 <tcp_write+0x46>
 801e990:	2b07      	cmp	r3, #7
 801e992:	f040 829c 	bne.w	801eece <tcp_write+0x57e>
  } else if (len == 0) {
 801e996:	f1ba 0f00 	cmp.w	sl, #0
 801e99a:	f000 80ec 	beq.w	801eb76 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801e99e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801e9a2:	4553      	cmp	r3, sl
 801e9a4:	f0c0 82b6 	bcc.w	801ef14 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801e9a8:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801e9ac:	2e08      	cmp	r6, #8
 801e9ae:	f200 82b1 	bhi.w	801ef14 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e9b2:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801e9b6:	2e00      	cmp	r6, #0
 801e9b8:	f000 80d3 	beq.w	801eb62 <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	f040 80dc 	bne.w	801eb7a <tcp_write+0x22a>
 801e9c2:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801e9c6:	f1b8 0f00 	cmp.w	r8, #0
 801e9ca:	f000 8263 	beq.w	801ee94 <tcp_write+0x544>
 801e9ce:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e9d0:	461a      	mov	r2, r3
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d1fb      	bne.n	801e9d0 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e9d8:	7a94      	ldrb	r4, [r2, #10]
 801e9da:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e9dc:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e9de:	00a4      	lsls	r4, r4, #2
 801e9e0:	920b      	str	r2, [sp, #44]	; 0x2c
 801e9e2:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e9e6:	191a      	adds	r2, r3, r4
 801e9e8:	4593      	cmp	fp, r2
 801e9ea:	f2c0 81a6 	blt.w	801ed3a <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e9ee:	ebab 0404 	sub.w	r4, fp, r4
 801e9f2:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801e9f4:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e9f8:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801e9fa:	930a      	str	r3, [sp, #40]	; 0x28
 801e9fc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801ea00:	2b00      	cmp	r3, #0
 801ea02:	f000 80cf 	beq.w	801eba4 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ea06:	42a3      	cmp	r3, r4
 801ea08:	f200 818a 	bhi.w	801ed20 <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ea0c:	45a2      	cmp	sl, r4
 801ea0e:	4653      	mov	r3, sl
 801ea10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ea12:	bf28      	it	cs
 801ea14:	4623      	movcs	r3, r4
 801ea16:	4293      	cmp	r3, r2
 801ea18:	bf28      	it	cs
 801ea1a:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801ea1c:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801ea1e:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ea20:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801ea22:	b292      	uxth	r2, r2
      space -= oversize_used;
 801ea24:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801ea26:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ea2a:	2a00      	cmp	r2, #0
 801ea2c:	f000 8183 	beq.w	801ed36 <tcp_write+0x3e6>
 801ea30:	459a      	cmp	sl, r3
 801ea32:	f000 8180 	beq.w	801ed36 <tcp_write+0x3e6>
 801ea36:	4bb2      	ldr	r3, [pc, #712]	; (801ed00 <tcp_write+0x3b0>)
 801ea38:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ea3c:	49b1      	ldr	r1, [pc, #708]	; (801ed04 <tcp_write+0x3b4>)
 801ea3e:	48b2      	ldr	r0, [pc, #712]	; (801ed08 <tcp_write+0x3b8>)
 801ea40:	f006 fcb8 	bl	80253b4 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ea44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ea46:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ea48:	459a      	cmp	sl, r3
 801ea4a:	f200 80b0 	bhi.w	801ebae <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801ea4e:	2300      	movs	r3, #0
 801ea50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ea52:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801ea54:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801ea56:	45a2      	cmp	sl, r4
 801ea58:	f240 80ee 	bls.w	801ec38 <tcp_write+0x2e8>
 801ea5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea5e:	f04f 0800 	mov.w	r8, #0
 801ea62:	f003 0301 	and.w	r3, r3, #1
 801ea66:	f8cd 8014 	str.w	r8, [sp, #20]
 801ea6a:	9308      	str	r3, [sp, #32]
 801ea6c:	4643      	mov	r3, r8
 801ea6e:	46d8      	mov	r8, fp
 801ea70:	469b      	mov	fp, r3
 801ea72:	e042      	b.n	801eafa <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ea74:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	f040 80f0 	bne.w	801ec5e <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801ea7e:	2201      	movs	r2, #1
 801ea80:	4629      	mov	r1, r5
 801ea82:	2036      	movs	r0, #54	; 0x36
 801ea84:	f7fc f9fa 	bl	801ae7c <pbuf_alloc>
 801ea88:	2800      	cmp	r0, #0
 801ea8a:	f000 8100 	beq.w	801ec8e <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ea8e:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ea90:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ea92:	9006      	str	r0, [sp, #24]
 801ea94:	4422      	add	r2, r4
 801ea96:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ea98:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ea9c:	2036      	movs	r0, #54	; 0x36
 801ea9e:	f7fc f9ed 	bl	801ae7c <pbuf_alloc>
 801eaa2:	9b06      	ldr	r3, [sp, #24]
 801eaa4:	4607      	mov	r7, r0
 801eaa6:	2800      	cmp	r0, #0
 801eaa8:	f000 8195 	beq.w	801edd6 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801eaac:	4619      	mov	r1, r3
 801eaae:	f7fc fbe9 	bl	801b284 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801eab2:	4638      	mov	r0, r7
 801eab4:	f7fc fbc8 	bl	801b248 <pbuf_clen>
 801eab8:	4430      	add	r0, r6
 801eaba:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801eabc:	2e09      	cmp	r6, #9
 801eabe:	d84a      	bhi.n	801eb56 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801eac0:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801eac4:	2200      	movs	r2, #0
 801eac6:	4639      	mov	r1, r7
 801eac8:	4648      	mov	r0, r9
 801eaca:	4423      	add	r3, r4
 801eacc:	9200      	str	r2, [sp, #0]
 801eace:	f7ff fdf5 	bl	801e6bc <tcp_create_segment>
 801ead2:	4607      	mov	r7, r0
 801ead4:	2800      	cmp	r0, #0
 801ead6:	f000 80da 	beq.w	801ec8e <tcp_write+0x33e>
    if (queue == NULL) {
 801eada:	9b05      	ldr	r3, [sp, #20]
 801eadc:	2b00      	cmp	r3, #0
 801eade:	f000 80a3 	beq.w	801ec28 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801eae2:	f1bb 0f00 	cmp.w	fp, #0
 801eae6:	f000 80c2 	beq.w	801ec6e <tcp_write+0x31e>
    pos += seglen;
 801eaea:	442c      	add	r4, r5
      prev_seg->next = seg;
 801eaec:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801eaf0:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801eaf2:	45a2      	cmp	sl, r4
 801eaf4:	f240 809e 	bls.w	801ec34 <tcp_write+0x2e4>
 801eaf8:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801eafa:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801eafe:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801eb00:	b2ad      	uxth	r5, r5
 801eb02:	4545      	cmp	r5, r8
 801eb04:	bf28      	it	cs
 801eb06:	4645      	movcs	r5, r8
 801eb08:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	d0b2      	beq.n	801ea74 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801eb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb10:	4642      	mov	r2, r8
 801eb12:	4629      	mov	r1, r5
 801eb14:	2036      	movs	r0, #54	; 0x36
 801eb16:	e9cd 9300 	strd	r9, r3, [sp]
 801eb1a:	9b05      	ldr	r3, [sp, #20]
 801eb1c:	fab3 f383 	clz	r3, r3
 801eb20:	095b      	lsrs	r3, r3, #5
 801eb22:	9302      	str	r3, [sp, #8]
 801eb24:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801eb28:	f7ff fd78 	bl	801e61c <tcp_pbuf_prealloc>
 801eb2c:	4607      	mov	r7, r0
 801eb2e:	2800      	cmp	r0, #0
 801eb30:	f000 80ad 	beq.w	801ec8e <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801eb34:	8943      	ldrh	r3, [r0, #10]
 801eb36:	42ab      	cmp	r3, r5
 801eb38:	f0c0 80a1 	bcc.w	801ec7e <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801eb3c:	9b07      	ldr	r3, [sp, #28]
 801eb3e:	462a      	mov	r2, r5
 801eb40:	6878      	ldr	r0, [r7, #4]
 801eb42:	1919      	adds	r1, r3, r4
 801eb44:	f005 fc70 	bl	8024428 <memcpy>
    queuelen += pbuf_clen(p);
 801eb48:	4638      	mov	r0, r7
 801eb4a:	f7fc fb7d 	bl	801b248 <pbuf_clen>
 801eb4e:	4430      	add	r0, r6
 801eb50:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801eb52:	2e09      	cmp	r6, #9
 801eb54:	d9b4      	bls.n	801eac0 <tcp_write+0x170>
      pbuf_free(p);
 801eb56:	4638      	mov	r0, r7
 801eb58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801eb5c:	f7fc fb60 	bl	801b220 <pbuf_free>
      goto memerr;
 801eb60:	e097      	b.n	801ec92 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	f000 80b6 	beq.w	801ecd4 <tcp_write+0x384>
 801eb68:	4b65      	ldr	r3, [pc, #404]	; (801ed00 <tcp_write+0x3b0>)
 801eb6a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801eb6e:	4967      	ldr	r1, [pc, #412]	; (801ed0c <tcp_write+0x3bc>)
 801eb70:	4865      	ldr	r0, [pc, #404]	; (801ed08 <tcp_write+0x3b8>)
 801eb72:	f006 fc1f 	bl	80253b4 <iprintf>
  queuelen = pcb->snd_queuelen;
 801eb76:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801eb7a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801eb7e:	f1b8 0f00 	cmp.w	r8, #0
 801eb82:	f47f af24 	bne.w	801e9ce <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801eb86:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	f040 80ac 	bne.w	801ece8 <tcp_write+0x398>
  while (pos < len) {
 801eb90:	f1ba 0f00 	cmp.w	sl, #0
 801eb94:	f000 81c7 	beq.w	801ef26 <tcp_write+0x5d6>
          extendlen = seglen;
 801eb98:	2400      	movs	r4, #0
 801eb9a:	940d      	str	r4, [sp, #52]	; 0x34
 801eb9c:	940c      	str	r4, [sp, #48]	; 0x30
 801eb9e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801eba2:	e75b      	b.n	801ea5c <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801eba4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801eba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eba8:	459a      	cmp	sl, r3
 801ebaa:	f67f af50 	bls.w	801ea4e <tcp_write+0xfe>
 801ebae:	2c00      	cmp	r4, #0
 801ebb0:	f43f af4d 	beq.w	801ea4e <tcp_write+0xfe>
 801ebb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ebb6:	8912      	ldrh	r2, [r2, #8]
 801ebb8:	920d      	str	r2, [sp, #52]	; 0x34
 801ebba:	2a00      	cmp	r2, #0
 801ebbc:	f000 809c 	beq.w	801ecf8 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ebc0:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ebc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ebc6:	42a7      	cmp	r7, r4
 801ebc8:	bfa8      	it	ge
 801ebca:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ebcc:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ebce:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ebd0:	f100 8187 	bmi.w	801eee2 <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ebd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebd6:	685a      	ldr	r2, [r3, #4]
 801ebd8:	4613      	mov	r3, r2
 801ebda:	6812      	ldr	r2, [r2, #0]
 801ebdc:	2a00      	cmp	r2, #0
 801ebde:	d1fb      	bne.n	801ebd8 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ebe0:	920c      	str	r2, [sp, #48]	; 0x30
 801ebe2:	7b1a      	ldrb	r2, [r3, #12]
 801ebe4:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801ebe8:	d106      	bne.n	801ebf8 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ebea:	895a      	ldrh	r2, [r3, #10]
 801ebec:	685b      	ldr	r3, [r3, #4]
 801ebee:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ebf0:	9a07      	ldr	r2, [sp, #28]
 801ebf2:	429a      	cmp	r2, r3
 801ebf4:	f000 8167 	beq.w	801eec6 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ebf8:	2201      	movs	r2, #1
 801ebfa:	4629      	mov	r1, r5
 801ebfc:	2000      	movs	r0, #0
 801ebfe:	f7fc f93d 	bl	801ae7c <pbuf_alloc>
 801ec02:	900c      	str	r0, [sp, #48]	; 0x30
 801ec04:	2800      	cmp	r0, #0
 801ec06:	f000 813e 	beq.w	801ee86 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ec0a:	9b07      	ldr	r3, [sp, #28]
 801ec0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ec0e:	440b      	add	r3, r1
 801ec10:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801ec12:	f7fc fb19 	bl	801b248 <pbuf_clen>
 801ec16:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801ec18:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801ec1a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801ec1c:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801ec1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec20:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ec22:	18ec      	adds	r4, r5, r3
 801ec24:	b2a4      	uxth	r4, r4
 801ec26:	e716      	b.n	801ea56 <tcp_write+0x106>
    pos += seglen;
 801ec28:	442c      	add	r4, r5
 801ec2a:	9005      	str	r0, [sp, #20]
 801ec2c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801ec2e:	45a2      	cmp	sl, r4
 801ec30:	f63f af62 	bhi.w	801eaf8 <tcp_write+0x1a8>
 801ec34:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801ec38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	f000 80db 	beq.w	801edf6 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801ec40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ec42:	6854      	ldr	r4, [r2, #4]
 801ec44:	2c00      	cmp	r4, #0
 801ec46:	f000 8090 	beq.w	801ed6a <tcp_write+0x41a>
 801ec4a:	469b      	mov	fp, r3
 801ec4c:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801ec4e:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801ec50:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801ec52:	445b      	add	r3, fp
 801ec54:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801ec56:	2a00      	cmp	r2, #0
 801ec58:	d079      	beq.n	801ed4e <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801ec5a:	4614      	mov	r4, r2
 801ec5c:	e7f7      	b.n	801ec4e <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ec5e:	4b28      	ldr	r3, [pc, #160]	; (801ed00 <tcp_write+0x3b0>)
 801ec60:	f240 2271 	movw	r2, #625	; 0x271
 801ec64:	492a      	ldr	r1, [pc, #168]	; (801ed10 <tcp_write+0x3c0>)
 801ec66:	4828      	ldr	r0, [pc, #160]	; (801ed08 <tcp_write+0x3b8>)
 801ec68:	f006 fba4 	bl	80253b4 <iprintf>
 801ec6c:	e707      	b.n	801ea7e <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ec6e:	4b24      	ldr	r3, [pc, #144]	; (801ed00 <tcp_write+0x3b0>)
 801ec70:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ec74:	4927      	ldr	r1, [pc, #156]	; (801ed14 <tcp_write+0x3c4>)
 801ec76:	4824      	ldr	r0, [pc, #144]	; (801ed08 <tcp_write+0x3b8>)
 801ec78:	f006 fb9c 	bl	80253b4 <iprintf>
 801ec7c:	e735      	b.n	801eaea <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801ec7e:	4b20      	ldr	r3, [pc, #128]	; (801ed00 <tcp_write+0x3b0>)
 801ec80:	f240 2266 	movw	r2, #614	; 0x266
 801ec84:	4924      	ldr	r1, [pc, #144]	; (801ed18 <tcp_write+0x3c8>)
 801ec86:	4820      	ldr	r0, [pc, #128]	; (801ed08 <tcp_write+0x3b8>)
 801ec88:	f006 fb94 	bl	80253b4 <iprintf>
 801ec8c:	e756      	b.n	801eb3c <tcp_write+0x1ec>
 801ec8e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ec92:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801ec96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec9a:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801ec9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eca0:	b113      	cbz	r3, 801eca8 <tcp_write+0x358>
    pbuf_free(concat_p);
 801eca2:	4618      	mov	r0, r3
 801eca4:	f7fc fabc 	bl	801b220 <pbuf_free>
  if (queue != NULL) {
 801eca8:	f1b8 0f00 	cmp.w	r8, #0
 801ecac:	d002      	beq.n	801ecb4 <tcp_write+0x364>
    tcp_segs_free(queue);
 801ecae:	4640      	mov	r0, r8
 801ecb0:	f7fd f820 	bl	801bcf4 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801ecb4:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801ecb8:	b13b      	cbz	r3, 801ecca <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ecba:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801ecbe:	b923      	cbnz	r3, 801ecca <tcp_write+0x37a>
 801ecc0:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	f000 808c 	beq.w	801ede2 <tcp_write+0x492>
  return ERR_MEM;
 801ecca:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ecce:	b011      	add	sp, #68	; 0x44
 801ecd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ecd4:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	f47f af45 	bne.w	801eb68 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ecde:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	f43f af58 	beq.w	801eb98 <tcp_write+0x248>
 801ece8:	4b05      	ldr	r3, [pc, #20]	; (801ed00 <tcp_write+0x3b0>)
 801ecea:	f240 224a 	movw	r2, #586	; 0x24a
 801ecee:	490b      	ldr	r1, [pc, #44]	; (801ed1c <tcp_write+0x3cc>)
 801ecf0:	4805      	ldr	r0, [pc, #20]	; (801ed08 <tcp_write+0x3b8>)
 801ecf2:	f006 fb5f 	bl	80253b4 <iprintf>
 801ecf6:	e74b      	b.n	801eb90 <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 801ecf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ecfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ecfc:	930c      	str	r3, [sp, #48]	; 0x30
 801ecfe:	e6ad      	b.n	801ea5c <tcp_write+0x10c>
 801ed00:	08044858 	.word	0x08044858
 801ed04:	08044a94 	.word	0x08044a94
 801ed08:	0802a008 	.word	0x0802a008
 801ed0c:	08044a28 	.word	0x08044a28
 801ed10:	08044b50 	.word	0x08044b50
 801ed14:	08044b60 	.word	0x08044b60
 801ed18:	08044b10 	.word	0x08044b10
 801ed1c:	08044ae0 	.word	0x08044ae0
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ed20:	4b94      	ldr	r3, [pc, #592]	; (801ef74 <tcp_write+0x624>)
 801ed22:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801ed26:	4994      	ldr	r1, [pc, #592]	; (801ef78 <tcp_write+0x628>)
 801ed28:	4894      	ldr	r0, [pc, #592]	; (801ef7c <tcp_write+0x62c>)
 801ed2a:	f006 fb43 	bl	80253b4 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ed2e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ed32:	930a      	str	r3, [sp, #40]	; 0x28
 801ed34:	e66a      	b.n	801ea0c <tcp_write+0xbc>
 801ed36:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ed38:	e735      	b.n	801eba6 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ed3a:	4b8e      	ldr	r3, [pc, #568]	; (801ef74 <tcp_write+0x624>)
 801ed3c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ed40:	498f      	ldr	r1, [pc, #572]	; (801ef80 <tcp_write+0x630>)
 801ed42:	488e      	ldr	r0, [pc, #568]	; (801ef7c <tcp_write+0x62c>)
 801ed44:	f006 fb36 	bl	80253b4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ed48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed4a:	891b      	ldrh	r3, [r3, #8]
 801ed4c:	e64f      	b.n	801e9ee <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801ed4e:	8963      	ldrh	r3, [r4, #10]
 801ed50:	465a      	mov	r2, fp
 801ed52:	6860      	ldr	r0, [r4, #4]
 801ed54:	4629      	mov	r1, r5
 801ed56:	4418      	add	r0, r3
 801ed58:	f005 fb66 	bl	8024428 <memcpy>
        p->len += oversize_used;
 801ed5c:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ed5e:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801ed60:	445b      	add	r3, fp
 801ed62:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ed64:	2a00      	cmp	r2, #0
 801ed66:	f47f af78 	bne.w	801ec5a <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 801ed6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ed6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ed6e:	8913      	ldrh	r3, [r2, #8]
 801ed70:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 801ed72:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801ed76:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 801ed78:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801ed7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d061      	beq.n	801ee46 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 801ed82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ed84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ed86:	6860      	ldr	r0, [r4, #4]
 801ed88:	4629      	mov	r1, r5
 801ed8a:	f7fc fa7b 	bl	801b284 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801ed8e:	892a      	ldrh	r2, [r5, #8]
 801ed90:	8923      	ldrh	r3, [r4, #8]
 801ed92:	4413      	add	r3, r2
 801ed94:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801ed96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed98:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801ed9c:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 801eda0:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 801eda4:	4453      	add	r3, sl
 801eda6:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801edaa:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801edae:	eba3 0a0a 	sub.w	sl, r3, sl
 801edb2:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801edb6:	b11e      	cbz	r6, 801edc0 <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 801edb8:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801edbc:	2b00      	cmp	r3, #0
 801edbe:	d036      	beq.n	801ee2e <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801edc0:	b12f      	cbz	r7, 801edce <tcp_write+0x47e>
 801edc2:	68fb      	ldr	r3, [r7, #12]
 801edc4:	b11b      	cbz	r3, 801edce <tcp_write+0x47e>
 801edc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801edc8:	f012 0502 	ands.w	r5, r2, #2
 801edcc:	d025      	beq.n	801ee1a <tcp_write+0x4ca>
  return ERR_OK;
 801edce:	2000      	movs	r0, #0
}
 801edd0:	b011      	add	sp, #68	; 0x44
 801edd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801edd6:	4618      	mov	r0, r3
 801edd8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801eddc:	f7fc fa20 	bl	801b220 <pbuf_free>
        goto memerr;
 801ede0:	e757      	b.n	801ec92 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ede2:	4b64      	ldr	r3, [pc, #400]	; (801ef74 <tcp_write+0x624>)
 801ede4:	f240 3227 	movw	r2, #807	; 0x327
 801ede8:	4966      	ldr	r1, [pc, #408]	; (801ef84 <tcp_write+0x634>)
 801edea:	4864      	ldr	r0, [pc, #400]	; (801ef7c <tcp_write+0x62c>)
 801edec:	f006 fae2 	bl	80253b4 <iprintf>
  return ERR_MEM;
 801edf0:	f04f 30ff 	mov.w	r0, #4294967295
 801edf4:	e76b      	b.n	801ecce <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801edf6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801edfa:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801edfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d051      	beq.n	801eea8 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801ee04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	d1bb      	bne.n	801ed82 <tcp_write+0x432>
 801ee0a:	4b5a      	ldr	r3, [pc, #360]	; (801ef74 <tcp_write+0x624>)
 801ee0c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801ee10:	495d      	ldr	r1, [pc, #372]	; (801ef88 <tcp_write+0x638>)
 801ee12:	485a      	ldr	r0, [pc, #360]	; (801ef7c <tcp_write+0x62c>)
 801ee14:	f006 face 	bl	80253b4 <iprintf>
 801ee18:	e7b3      	b.n	801ed82 <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801ee1a:	2008      	movs	r0, #8
 801ee1c:	899c      	ldrh	r4, [r3, #12]
 801ee1e:	f7fa f9c3 	bl	80191a8 <lwip_htons>
 801ee22:	4602      	mov	r2, r0
 801ee24:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801ee26:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801ee28:	4314      	orrs	r4, r2
 801ee2a:	819c      	strh	r4, [r3, #12]
 801ee2c:	e74f      	b.n	801ecce <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 801ee2e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801ee32:	2b00      	cmp	r3, #0
 801ee34:	d1c4      	bne.n	801edc0 <tcp_write+0x470>
 801ee36:	4b4f      	ldr	r3, [pc, #316]	; (801ef74 <tcp_write+0x624>)
 801ee38:	f240 3212 	movw	r2, #786	; 0x312
 801ee3c:	4951      	ldr	r1, [pc, #324]	; (801ef84 <tcp_write+0x634>)
 801ee3e:	484f      	ldr	r0, [pc, #316]	; (801ef7c <tcp_write+0x62c>)
 801ee40:	f006 fab8 	bl	80253b4 <iprintf>
 801ee44:	e7bc      	b.n	801edc0 <tcp_write+0x470>
  } else if (extendlen > 0) {
 801ee46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d0a4      	beq.n	801ed96 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ee4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee4e:	6859      	ldr	r1, [r3, #4]
 801ee50:	2900      	cmp	r1, #0
 801ee52:	d02e      	beq.n	801eeb2 <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ee54:	680a      	ldr	r2, [r1, #0]
 801ee56:	2a00      	cmp	r2, #0
 801ee58:	d07f      	beq.n	801ef5a <tcp_write+0x60a>
 801ee5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee5c:	e000      	b.n	801ee60 <tcp_write+0x510>
 801ee5e:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801ee60:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ee62:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801ee64:	4423      	add	r3, r4
 801ee66:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ee68:	4611      	mov	r1, r2
 801ee6a:	2800      	cmp	r0, #0
 801ee6c:	d1f7      	bne.n	801ee5e <tcp_write+0x50e>
    p->tot_len += extendlen;
 801ee6e:	8913      	ldrh	r3, [r2, #8]
 801ee70:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ee72:	440b      	add	r3, r1
 801ee74:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801ee76:	8953      	ldrh	r3, [r2, #10]
 801ee78:	440b      	add	r3, r1
 801ee7a:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 801ee7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ee7e:	8913      	ldrh	r3, [r2, #8]
 801ee80:	440b      	add	r3, r1
 801ee82:	8113      	strh	r3, [r2, #8]
 801ee84:	e787      	b.n	801ed96 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ee86:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801ee8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ee8e:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801ee92:	e70f      	b.n	801ecb4 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ee94:	4b37      	ldr	r3, [pc, #220]	; (801ef74 <tcp_write+0x624>)
 801ee96:	f240 1255 	movw	r2, #341	; 0x155
 801ee9a:	493c      	ldr	r1, [pc, #240]	; (801ef8c <tcp_write+0x63c>)
 801ee9c:	4837      	ldr	r0, [pc, #220]	; (801ef7c <tcp_write+0x62c>)
 801ee9e:	f006 fa89 	bl	80253b4 <iprintf>
  queuelen = pcb->snd_queuelen;
 801eea2:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801eea6:	e668      	b.n	801eb7a <tcp_write+0x22a>
  } else if (extendlen > 0) {
 801eea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eeaa:	b19b      	cbz	r3, 801eed4 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801eeac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eeae:	2b00      	cmp	r3, #0
 801eeb0:	d1cc      	bne.n	801ee4c <tcp_write+0x4fc>
 801eeb2:	4b30      	ldr	r3, [pc, #192]	; (801ef74 <tcp_write+0x624>)
 801eeb4:	f240 22e6 	movw	r2, #742	; 0x2e6
 801eeb8:	4935      	ldr	r1, [pc, #212]	; (801ef90 <tcp_write+0x640>)
 801eeba:	4830      	ldr	r0, [pc, #192]	; (801ef7c <tcp_write+0x62c>)
 801eebc:	f006 fa7a 	bl	80253b4 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801eec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eec2:	6859      	ldr	r1, [r3, #4]
 801eec4:	e7c6      	b.n	801ee54 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801eec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eec8:	bba3      	cbnz	r3, 801ef34 <tcp_write+0x5e4>
          extendlen = seglen;
 801eeca:	950d      	str	r5, [sp, #52]	; 0x34
 801eecc:	e6a7      	b.n	801ec1e <tcp_write+0x2ce>
    return ERR_CONN;
 801eece:	f06f 000a 	mvn.w	r0, #10
 801eed2:	e6fc      	b.n	801ecce <tcp_write+0x37e>
  if (last_unsent == NULL) {
 801eed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	f47f af5d 	bne.w	801ed96 <tcp_write+0x446>
    pcb->unsent = queue;
 801eedc:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801eee0:	e75c      	b.n	801ed9c <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801eee2:	e9cd 9300 	strd	r9, r3, [sp]
 801eee6:	2301      	movs	r3, #1
 801eee8:	4622      	mov	r2, r4
 801eeea:	4629      	mov	r1, r5
 801eeec:	2000      	movs	r0, #0
 801eeee:	9302      	str	r3, [sp, #8]
 801eef0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801eef4:	f7ff fb92 	bl	801e61c <tcp_pbuf_prealloc>
 801eef8:	4603      	mov	r3, r0
 801eefa:	4604      	mov	r4, r0
 801eefc:	900c      	str	r0, [sp, #48]	; 0x30
 801eefe:	2800      	cmp	r0, #0
 801ef00:	d0c1      	beq.n	801ee86 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ef02:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ef04:	462a      	mov	r2, r5
 801ef06:	9907      	ldr	r1, [sp, #28]
 801ef08:	4401      	add	r1, r0
 801ef0a:	6858      	ldr	r0, [r3, #4]
 801ef0c:	f005 fa8c 	bl	8024428 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801ef10:	4620      	mov	r0, r4
 801ef12:	e67e      	b.n	801ec12 <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ef14:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801ef18:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ef1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ef20:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801ef24:	e6d3      	b.n	801ecce <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801ef26:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ef2a:	46d0      	mov	r8, sl
 801ef2c:	4657      	mov	r7, sl
 801ef2e:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801ef32:	e7d3      	b.n	801eedc <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801ef34:	4b0f      	ldr	r3, [pc, #60]	; (801ef74 <tcp_write+0x624>)
 801ef36:	f240 2231 	movw	r2, #561	; 0x231
 801ef3a:	4916      	ldr	r1, [pc, #88]	; (801ef94 <tcp_write+0x644>)
 801ef3c:	480f      	ldr	r0, [pc, #60]	; (801ef7c <tcp_write+0x62c>)
 801ef3e:	f006 fa39 	bl	80253b4 <iprintf>
          extendlen = seglen;
 801ef42:	950d      	str	r5, [sp, #52]	; 0x34
 801ef44:	e66b      	b.n	801ec1e <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801ef46:	4b0b      	ldr	r3, [pc, #44]	; (801ef74 <tcp_write+0x624>)
 801ef48:	f240 12ad 	movw	r2, #429	; 0x1ad
 801ef4c:	4912      	ldr	r1, [pc, #72]	; (801ef98 <tcp_write+0x648>)
 801ef4e:	480b      	ldr	r0, [pc, #44]	; (801ef7c <tcp_write+0x62c>)
 801ef50:	f006 fa30 	bl	80253b4 <iprintf>
 801ef54:	f06f 000f 	mvn.w	r0, #15
 801ef58:	e6b9      	b.n	801ecce <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ef5a:	460a      	mov	r2, r1
 801ef5c:	e787      	b.n	801ee6e <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801ef5e:	4b05      	ldr	r3, [pc, #20]	; (801ef74 <tcp_write+0x624>)
 801ef60:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801ef64:	490d      	ldr	r1, [pc, #52]	; (801ef9c <tcp_write+0x64c>)
 801ef66:	4805      	ldr	r0, [pc, #20]	; (801ef7c <tcp_write+0x62c>)
 801ef68:	f006 fa24 	bl	80253b4 <iprintf>
 801ef6c:	f06f 000f 	mvn.w	r0, #15
 801ef70:	e6ad      	b.n	801ecce <tcp_write+0x37e>
 801ef72:	bf00      	nop
 801ef74:	08044858 	.word	0x08044858
 801ef78:	08044a74 	.word	0x08044a74
 801ef7c:	0802a008 	.word	0x0802a008
 801ef80:	08044a5c 	.word	0x08044a5c
 801ef84:	08044be4 	.word	0x08044be4
 801ef88:	08044b74 	.word	0x08044b74
 801ef8c:	080449ec 	.word	0x080449ec
 801ef90:	08044bac 	.word	0x08044bac
 801ef94:	08044ab4 	.word	0x08044ab4
 801ef98:	080449b8 	.word	0x080449b8
 801ef9c:	080449a0 	.word	0x080449a0

0801efa0 <tcp_split_unsent_seg>:
{
 801efa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801efa4:	4605      	mov	r5, r0
{
 801efa6:	b083      	sub	sp, #12
 801efa8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801efaa:	2800      	cmp	r0, #0
 801efac:	f000 80a7 	beq.w	801f0fe <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 801efb0:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801efb2:	b376      	cbz	r6, 801f012 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 801efb4:	2c00      	cmp	r4, #0
 801efb6:	f000 80b3 	beq.w	801f120 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 801efba:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801efbe:	45a1      	cmp	r9, r4
 801efc0:	f240 8099 	bls.w	801f0f6 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801efc4:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801efc6:	42a3      	cmp	r3, r4
 801efc8:	d328      	bcc.n	801f01c <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 801efca:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801efce:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801efd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801efd6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801efd8:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801efdc:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801efe0:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801efe4:	eb08 010b 	add.w	r1, r8, fp
 801efe8:	b289      	uxth	r1, r1
 801efea:	f7fb ff47 	bl	801ae7c <pbuf_alloc>
  if (p == NULL) {
 801efee:	4607      	mov	r7, r0
 801eff0:	b178      	cbz	r0, 801f012 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 801eff2:	6870      	ldr	r0, [r6, #4]
 801eff4:	8932      	ldrh	r2, [r6, #8]
 801eff6:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801eff8:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801effa:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801effc:	4642      	mov	r2, r8
 801effe:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 801f000:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801f002:	b29b      	uxth	r3, r3
 801f004:	f7fc f9b0 	bl	801b368 <pbuf_copy_partial>
 801f008:	4540      	cmp	r0, r8
 801f00a:	d01d      	beq.n	801f048 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 801f00c:	4638      	mov	r0, r7
 801f00e:	f7fc f907 	bl	801b220 <pbuf_free>
  return ERR_MEM;
 801f012:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f016:	b003      	add	sp, #12
 801f018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801f01c:	4b45      	ldr	r3, [pc, #276]	; (801f134 <tcp_split_unsent_seg+0x194>)
 801f01e:	f240 325b 	movw	r2, #859	; 0x35b
 801f022:	4945      	ldr	r1, [pc, #276]	; (801f138 <tcp_split_unsent_seg+0x198>)
 801f024:	4845      	ldr	r0, [pc, #276]	; (801f13c <tcp_split_unsent_seg+0x19c>)
 801f026:	f006 f9c5 	bl	80253b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801f02a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801f02e:	f1b9 0f00 	cmp.w	r9, #0
 801f032:	d1ca      	bne.n	801efca <tcp_split_unsent_seg+0x2a>
 801f034:	4b3f      	ldr	r3, [pc, #252]	; (801f134 <tcp_split_unsent_seg+0x194>)
 801f036:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801f03a:	4941      	ldr	r1, [pc, #260]	; (801f140 <tcp_split_unsent_seg+0x1a0>)
 801f03c:	483f      	ldr	r0, [pc, #252]	; (801f13c <tcp_split_unsent_seg+0x19c>)
 801f03e:	f006 f9b9 	bl	80253b4 <iprintf>
  remainder = useg->len - split;
 801f042:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801f046:	e7c0      	b.n	801efca <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f048:	68f3      	ldr	r3, [r6, #12]
 801f04a:	8998      	ldrh	r0, [r3, #12]
 801f04c:	f7fa f8ac 	bl	80191a8 <lwip_htons>
  if (split_flags & TCP_PSH) {
 801f050:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f054:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 801f058:	d159      	bne.n	801f10e <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f05a:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801f05e:	f018 0f01 	tst.w	r8, #1
 801f062:	d003      	beq.n	801f06c <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 801f064:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801f068:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801f06c:	68f3      	ldr	r3, [r6, #12]
 801f06e:	6858      	ldr	r0, [r3, #4]
 801f070:	f7fa f89e 	bl	80191b0 <lwip_htonl>
 801f074:	f8cd a000 	str.w	sl, [sp]
 801f078:	1823      	adds	r3, r4, r0
 801f07a:	465a      	mov	r2, fp
 801f07c:	4639      	mov	r1, r7
 801f07e:	4628      	mov	r0, r5
 801f080:	f7ff fb1c 	bl	801e6bc <tcp_create_segment>
  if (seg == NULL) {
 801f084:	4682      	mov	sl, r0
 801f086:	2800      	cmp	r0, #0
 801f088:	d0c0      	beq.n	801f00c <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f08a:	6870      	ldr	r0, [r6, #4]
 801f08c:	eba4 0409 	sub.w	r4, r4, r9
 801f090:	f7fc f8da 	bl	801b248 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f094:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f096:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f09a:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f09c:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f09e:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f0a0:	4610      	mov	r0, r2
 801f0a2:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f0a4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f0a8:	b289      	uxth	r1, r1
 801f0aa:	f7fb ffa1 	bl	801aff0 <pbuf_realloc>
  useg->len -= remainder;
 801f0ae:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f0b0:	4640      	mov	r0, r8
  useg->len -= remainder;
 801f0b2:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f0b4:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 801f0b6:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f0b8:	899c      	ldrh	r4, [r3, #12]
 801f0ba:	f7fa f875 	bl	80191a8 <lwip_htons>
 801f0be:	68f3      	ldr	r3, [r6, #12]
 801f0c0:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f0c2:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f0c4:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f0c6:	f7fc f8bf 	bl	801b248 <pbuf_clen>
 801f0ca:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f0ce:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f0d0:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f0d4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f0d8:	f7fc f8b6 	bl	801b248 <pbuf_clen>
 801f0dc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f0e0:	4418      	add	r0, r3
  seg->next = useg->next;
 801f0e2:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f0e4:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801f0e8:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801f0ec:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801f0f0:	f8da 3000 	ldr.w	r3, [sl]
 801f0f4:	b183      	cbz	r3, 801f118 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 801f0f6:	2000      	movs	r0, #0
}
 801f0f8:	b003      	add	sp, #12
 801f0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801f0fe:	4b0d      	ldr	r3, [pc, #52]	; (801f134 <tcp_split_unsent_seg+0x194>)
 801f100:	f240 324b 	movw	r2, #843	; 0x34b
 801f104:	490f      	ldr	r1, [pc, #60]	; (801f144 <tcp_split_unsent_seg+0x1a4>)
 801f106:	480d      	ldr	r0, [pc, #52]	; (801f13c <tcp_split_unsent_seg+0x19c>)
 801f108:	f006 f954 	bl	80253b4 <iprintf>
 801f10c:	e750      	b.n	801efb0 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801f10e:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801f112:	f04f 0b08 	mov.w	fp, #8
 801f116:	e7a2      	b.n	801f05e <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 801f118:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 801f11a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801f11e:	e77a      	b.n	801f016 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801f120:	4b04      	ldr	r3, [pc, #16]	; (801f134 <tcp_split_unsent_seg+0x194>)
 801f122:	f240 3253 	movw	r2, #851	; 0x353
 801f126:	4908      	ldr	r1, [pc, #32]	; (801f148 <tcp_split_unsent_seg+0x1a8>)
 801f128:	4804      	ldr	r0, [pc, #16]	; (801f13c <tcp_split_unsent_seg+0x19c>)
 801f12a:	f006 f943 	bl	80253b4 <iprintf>
    return ERR_VAL;
 801f12e:	f06f 0005 	mvn.w	r0, #5
 801f132:	e770      	b.n	801f016 <tcp_split_unsent_seg+0x76>
 801f134:	08044858 	.word	0x08044858
 801f138:	08044c4c 	.word	0x08044c4c
 801f13c:	0802a008 	.word	0x0802a008
 801f140:	08044c5c 	.word	0x08044c5c
 801f144:	08044c04 	.word	0x08044c04
 801f148:	08044c28 	.word	0x08044c28

0801f14c <tcp_enqueue_flags>:
{
 801f14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f150:	f011 0703 	ands.w	r7, r1, #3
{
 801f154:	b082      	sub	sp, #8
 801f156:	460d      	mov	r5, r1
 801f158:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f15a:	d05e      	beq.n	801f21a <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801f15c:	2c00      	cmp	r4, #0
 801f15e:	d065      	beq.n	801f22c <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 801f160:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f164:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801f168:	d049      	beq.n	801f1fe <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f16a:	2104      	movs	r1, #4
 801f16c:	2036      	movs	r0, #54	; 0x36
 801f16e:	f7fb fe85 	bl	801ae7c <pbuf_alloc>
 801f172:	4606      	mov	r6, r0
 801f174:	2800      	cmp	r0, #0
 801f176:	d049      	beq.n	801f20c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801f178:	8943      	ldrh	r3, [r0, #10]
 801f17a:	2b03      	cmp	r3, #3
 801f17c:	d872      	bhi.n	801f264 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 801f17e:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801f182:	4b40      	ldr	r3, [pc, #256]	; (801f284 <tcp_enqueue_flags+0x138>)
 801f184:	f240 4239 	movw	r2, #1081	; 0x439
 801f188:	493f      	ldr	r1, [pc, #252]	; (801f288 <tcp_enqueue_flags+0x13c>)
 801f18a:	4840      	ldr	r0, [pc, #256]	; (801f28c <tcp_enqueue_flags+0x140>)
 801f18c:	f006 f912 	bl	80253b4 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801f190:	4631      	mov	r1, r6
 801f192:	f8cd 8000 	str.w	r8, [sp]
 801f196:	462a      	mov	r2, r5
 801f198:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801f19a:	4620      	mov	r0, r4
 801f19c:	f7ff fa8e 	bl	801e6bc <tcp_create_segment>
 801f1a0:	4606      	mov	r6, r0
 801f1a2:	2800      	cmp	r0, #0
 801f1a4:	d032      	beq.n	801f20c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801f1a6:	68c3      	ldr	r3, [r0, #12]
 801f1a8:	079a      	lsls	r2, r3, #30
 801f1aa:	d153      	bne.n	801f254 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801f1ac:	8933      	ldrh	r3, [r6, #8]
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d144      	bne.n	801f23c <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 801f1b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	d04b      	beq.n	801f250 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801f1b8:	461a      	mov	r2, r3
 801f1ba:	681b      	ldr	r3, [r3, #0]
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	d1fb      	bne.n	801f1b8 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801f1c0:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801f1c2:	2300      	movs	r3, #0
 801f1c4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801f1c8:	b117      	cbz	r7, 801f1d0 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801f1ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801f1cc:	3301      	adds	r3, #1
 801f1ce:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801f1d0:	07eb      	lsls	r3, r5, #31
 801f1d2:	d503      	bpl.n	801f1dc <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801f1d4:	8b63      	ldrh	r3, [r4, #26]
 801f1d6:	f043 0320 	orr.w	r3, r3, #32
 801f1da:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f1dc:	6870      	ldr	r0, [r6, #4]
 801f1de:	f7fc f833 	bl	801b248 <pbuf_clen>
 801f1e2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801f1e6:	4418      	add	r0, r3
 801f1e8:	b280      	uxth	r0, r0
 801f1ea:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801f1ee:	b118      	cbz	r0, 801f1f8 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801f1f0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801f1f2:	2800      	cmp	r0, #0
 801f1f4:	d039      	beq.n	801f26a <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 801f1f6:	2000      	movs	r0, #0
}
 801f1f8:	b002      	add	sp, #8
 801f1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f1fe:	4641      	mov	r1, r8
 801f200:	2036      	movs	r0, #54	; 0x36
 801f202:	f7fb fe3b 	bl	801ae7c <pbuf_alloc>
 801f206:	4606      	mov	r6, r0
 801f208:	2800      	cmp	r0, #0
 801f20a:	d1c1      	bne.n	801f190 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f20c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 801f20e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f216:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 801f218:	e7ee      	b.n	801f1f8 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f21a:	4b1a      	ldr	r3, [pc, #104]	; (801f284 <tcp_enqueue_flags+0x138>)
 801f21c:	f240 4211 	movw	r2, #1041	; 0x411
 801f220:	491b      	ldr	r1, [pc, #108]	; (801f290 <tcp_enqueue_flags+0x144>)
 801f222:	481a      	ldr	r0, [pc, #104]	; (801f28c <tcp_enqueue_flags+0x140>)
 801f224:	f006 f8c6 	bl	80253b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801f228:	2c00      	cmp	r4, #0
 801f22a:	d199      	bne.n	801f160 <tcp_enqueue_flags+0x14>
 801f22c:	4b15      	ldr	r3, [pc, #84]	; (801f284 <tcp_enqueue_flags+0x138>)
 801f22e:	f240 4213 	movw	r2, #1043	; 0x413
 801f232:	4918      	ldr	r1, [pc, #96]	; (801f294 <tcp_enqueue_flags+0x148>)
 801f234:	4815      	ldr	r0, [pc, #84]	; (801f28c <tcp_enqueue_flags+0x140>)
 801f236:	f006 f8bd 	bl	80253b4 <iprintf>
 801f23a:	e791      	b.n	801f160 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801f23c:	4b11      	ldr	r3, [pc, #68]	; (801f284 <tcp_enqueue_flags+0x138>)
 801f23e:	f240 4243 	movw	r2, #1091	; 0x443
 801f242:	4915      	ldr	r1, [pc, #84]	; (801f298 <tcp_enqueue_flags+0x14c>)
 801f244:	4811      	ldr	r0, [pc, #68]	; (801f28c <tcp_enqueue_flags+0x140>)
 801f246:	f006 f8b5 	bl	80253b4 <iprintf>
  if (pcb->unsent == NULL) {
 801f24a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	d1b3      	bne.n	801f1b8 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801f250:	66e6      	str	r6, [r4, #108]	; 0x6c
 801f252:	e7b6      	b.n	801f1c2 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801f254:	4b0b      	ldr	r3, [pc, #44]	; (801f284 <tcp_enqueue_flags+0x138>)
 801f256:	f240 4242 	movw	r2, #1090	; 0x442
 801f25a:	4910      	ldr	r1, [pc, #64]	; (801f29c <tcp_enqueue_flags+0x150>)
 801f25c:	480b      	ldr	r0, [pc, #44]	; (801f28c <tcp_enqueue_flags+0x140>)
 801f25e:	f006 f8a9 	bl	80253b4 <iprintf>
 801f262:	e7a3      	b.n	801f1ac <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801f264:	f04f 0801 	mov.w	r8, #1
 801f268:	e792      	b.n	801f190 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801f26a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801f26c:	2c00      	cmp	r4, #0
 801f26e:	d1c3      	bne.n	801f1f8 <tcp_enqueue_flags+0xac>
 801f270:	4b04      	ldr	r3, [pc, #16]	; (801f284 <tcp_enqueue_flags+0x138>)
 801f272:	f240 4265 	movw	r2, #1125	; 0x465
 801f276:	490a      	ldr	r1, [pc, #40]	; (801f2a0 <tcp_enqueue_flags+0x154>)
 801f278:	4804      	ldr	r0, [pc, #16]	; (801f28c <tcp_enqueue_flags+0x140>)
 801f27a:	f006 f89b 	bl	80253b4 <iprintf>
  return ERR_OK;
 801f27e:	4620      	mov	r0, r4
 801f280:	e7ba      	b.n	801f1f8 <tcp_enqueue_flags+0xac>
 801f282:	bf00      	nop
 801f284:	08044858 	.word	0x08044858
 801f288:	08044ce4 	.word	0x08044ce4
 801f28c:	0802a008 	.word	0x0802a008
 801f290:	08044c6c 	.word	0x08044c6c
 801f294:	08044cc4 	.word	0x08044cc4
 801f298:	08044d38 	.word	0x08044d38
 801f29c:	08044d20 	.word	0x08044d20
 801f2a0:	08044d64 	.word	0x08044d64

0801f2a4 <tcp_send_fin>:
{
 801f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f2a6:	4606      	mov	r6, r0
 801f2a8:	b188      	cbz	r0, 801f2ce <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801f2aa:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801f2ac:	b14c      	cbz	r4, 801f2c2 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f2ae:	4625      	mov	r5, r4
 801f2b0:	6824      	ldr	r4, [r4, #0]
 801f2b2:	2c00      	cmp	r4, #0
 801f2b4:	d1fb      	bne.n	801f2ae <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801f2b6:	68eb      	ldr	r3, [r5, #12]
 801f2b8:	8998      	ldrh	r0, [r3, #12]
 801f2ba:	f7f9 ff75 	bl	80191a8 <lwip_htons>
 801f2be:	0743      	lsls	r3, r0, #29
 801f2c0:	d00d      	beq.n	801f2de <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801f2c2:	4630      	mov	r0, r6
 801f2c4:	2101      	movs	r1, #1
}
 801f2c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801f2ca:	f7ff bf3f 	b.w	801f14c <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f2ce:	4b0b      	ldr	r3, [pc, #44]	; (801f2fc <tcp_send_fin+0x58>)
 801f2d0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801f2d4:	490a      	ldr	r1, [pc, #40]	; (801f300 <tcp_send_fin+0x5c>)
 801f2d6:	480b      	ldr	r0, [pc, #44]	; (801f304 <tcp_send_fin+0x60>)
 801f2d8:	f006 f86c 	bl	80253b4 <iprintf>
 801f2dc:	e7e5      	b.n	801f2aa <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f2de:	68eb      	ldr	r3, [r5, #12]
 801f2e0:	2001      	movs	r0, #1
 801f2e2:	899f      	ldrh	r7, [r3, #12]
 801f2e4:	f7f9 ff60 	bl	80191a8 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801f2e8:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f2ea:	4338      	orrs	r0, r7
 801f2ec:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 801f2ee:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f2f2:	8190      	strh	r0, [r2, #12]
}
 801f2f4:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801f2f6:	8373      	strh	r3, [r6, #26]
}
 801f2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f2fa:	bf00      	nop
 801f2fc:	08044858 	.word	0x08044858
 801f300:	08044d8c 	.word	0x08044d8c
 801f304:	0802a008 	.word	0x0802a008

0801f308 <tcp_rexmit_rto_prepare>:
{
 801f308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801f30a:	4605      	mov	r5, r0
 801f30c:	2800      	cmp	r0, #0
 801f30e:	d032      	beq.n	801f376 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 801f310:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 801f312:	b132      	cbz	r2, 801f322 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f314:	6813      	ldr	r3, [r2, #0]
 801f316:	4614      	mov	r4, r2
 801f318:	b15b      	cbz	r3, 801f332 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 801f31a:	6863      	ldr	r3, [r4, #4]
 801f31c:	7b9b      	ldrb	r3, [r3, #14]
 801f31e:	2b01      	cmp	r3, #1
 801f320:	d003      	beq.n	801f32a <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 801f322:	f06f 0305 	mvn.w	r3, #5
}
 801f326:	4618      	mov	r0, r3
 801f328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f32a:	6824      	ldr	r4, [r4, #0]
 801f32c:	6823      	ldr	r3, [r4, #0]
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d1f3      	bne.n	801f31a <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 801f332:	6863      	ldr	r3, [r4, #4]
 801f334:	7b9b      	ldrb	r3, [r3, #14]
 801f336:	2b01      	cmp	r3, #1
 801f338:	d1f3      	bne.n	801f322 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 801f33a:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 801f33c:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 801f33e:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 801f340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801f344:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 801f346:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f348:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 801f34a:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f34e:	6858      	ldr	r0, [r3, #4]
 801f350:	f7f9 ff2e 	bl	80191b0 <lwip_htonl>
 801f354:	68e3      	ldr	r3, [r4, #12]
 801f356:	4606      	mov	r6, r0
 801f358:	8924      	ldrh	r4, [r4, #8]
 801f35a:	8998      	ldrh	r0, [r3, #12]
 801f35c:	f7f9 ff24 	bl	80191a8 <lwip_htons>
 801f360:	f010 0003 	ands.w	r0, r0, #3
 801f364:	4426      	add	r6, r4
  return ERR_OK;
 801f366:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f368:	bf18      	it	ne
 801f36a:	2001      	movne	r0, #1
  pcb->rttest = 0;
 801f36c:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f36e:	4430      	add	r0, r6
 801f370:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 801f372:	4618      	mov	r0, r3
 801f374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801f376:	4b04      	ldr	r3, [pc, #16]	; (801f388 <tcp_rexmit_rto_prepare+0x80>)
 801f378:	f240 6263 	movw	r2, #1635	; 0x663
 801f37c:	4903      	ldr	r1, [pc, #12]	; (801f38c <tcp_rexmit_rto_prepare+0x84>)
 801f37e:	4804      	ldr	r0, [pc, #16]	; (801f390 <tcp_rexmit_rto_prepare+0x88>)
 801f380:	f006 f818 	bl	80253b4 <iprintf>
 801f384:	e7c4      	b.n	801f310 <tcp_rexmit_rto_prepare+0x8>
 801f386:	bf00      	nop
 801f388:	08044858 	.word	0x08044858
 801f38c:	08044da8 	.word	0x08044da8
 801f390:	0802a008 	.word	0x0802a008

0801f394 <tcp_rexmit>:
{
 801f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f396:	4607      	mov	r7, r0
 801f398:	2800      	cmp	r0, #0
 801f39a:	d031      	beq.n	801f400 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 801f39c:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801f39e:	b34e      	cbz	r6, 801f3f4 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 801f3a0:	6873      	ldr	r3, [r6, #4]
 801f3a2:	7b9b      	ldrb	r3, [r3, #14]
 801f3a4:	2b01      	cmp	r3, #1
 801f3a6:	d125      	bne.n	801f3f4 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 801f3a8:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801f3aa:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801f3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801f3b0:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801f3b2:	b91b      	cbnz	r3, 801f3bc <tcp_rexmit+0x28>
 801f3b4:	e00f      	b.n	801f3d6 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801f3b6:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801f3b8:	682b      	ldr	r3, [r5, #0]
 801f3ba:	b163      	cbz	r3, 801f3d6 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f3bc:	68db      	ldr	r3, [r3, #12]
 801f3be:	6858      	ldr	r0, [r3, #4]
 801f3c0:	f7f9 fef6 	bl	80191b0 <lwip_htonl>
 801f3c4:	68f3      	ldr	r3, [r6, #12]
 801f3c6:	4604      	mov	r4, r0
 801f3c8:	6858      	ldr	r0, [r3, #4]
 801f3ca:	f7f9 fef1 	bl	80191b0 <lwip_htonl>
 801f3ce:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801f3d0:	2c00      	cmp	r4, #0
 801f3d2:	dbf0      	blt.n	801f3b6 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 801f3d4:	682b      	ldr	r3, [r5, #0]
 801f3d6:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801f3d8:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801f3da:	6833      	ldr	r3, [r6, #0]
 801f3dc:	b16b      	cbz	r3, 801f3fa <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 801f3de:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801f3e2:	2bff      	cmp	r3, #255	; 0xff
 801f3e4:	d002      	beq.n	801f3ec <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801f3e6:	3301      	adds	r3, #1
 801f3e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801f3ec:	2300      	movs	r3, #0
  return ERR_OK;
 801f3ee:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801f3f0:	637b      	str	r3, [r7, #52]	; 0x34
}
 801f3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801f3f4:	f06f 0005 	mvn.w	r0, #5
}
 801f3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801f3fa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801f3fe:	e7ee      	b.n	801f3de <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f400:	4b03      	ldr	r3, [pc, #12]	; (801f410 <tcp_rexmit+0x7c>)
 801f402:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801f406:	4903      	ldr	r1, [pc, #12]	; (801f414 <tcp_rexmit+0x80>)
 801f408:	4803      	ldr	r0, [pc, #12]	; (801f418 <tcp_rexmit+0x84>)
 801f40a:	f005 ffd3 	bl	80253b4 <iprintf>
 801f40e:	e7c5      	b.n	801f39c <tcp_rexmit+0x8>
 801f410:	08044858 	.word	0x08044858
 801f414:	08044dcc 	.word	0x08044dcc
 801f418:	0802a008 	.word	0x0802a008

0801f41c <tcp_rexmit_fast>:
{
 801f41c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f41e:	4604      	mov	r4, r0
 801f420:	b340      	cbz	r0, 801f474 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801f422:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f424:	b113      	cbz	r3, 801f42c <tcp_rexmit_fast+0x10>
 801f426:	8b63      	ldrh	r3, [r4, #26]
 801f428:	075b      	lsls	r3, r3, #29
 801f42a:	d500      	bpl.n	801f42e <tcp_rexmit_fast+0x12>
}
 801f42c:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801f42e:	4620      	mov	r0, r4
 801f430:	f7ff ffb0 	bl	801f394 <tcp_rexmit>
 801f434:	2800      	cmp	r0, #0
 801f436:	d1f9      	bne.n	801f42c <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f438:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801f43c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f440:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f442:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f444:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f448:	bf28      	it	cs
 801f44a:	4619      	movcs	r1, r3
 801f44c:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f44e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f452:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f456:	d902      	bls.n	801f45e <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801f458:	b283      	uxth	r3, r0
 801f45a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 801f45e:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f460:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801f462:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f466:	4413      	add	r3, r2
      pcb->rtime = 0;
 801f468:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f46a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801f46e:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 801f470:	8622      	strh	r2, [r4, #48]	; 0x30
}
 801f472:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f474:	4b03      	ldr	r3, [pc, #12]	; (801f484 <tcp_rexmit_fast+0x68>)
 801f476:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801f47a:	4903      	ldr	r1, [pc, #12]	; (801f488 <tcp_rexmit_fast+0x6c>)
 801f47c:	4803      	ldr	r0, [pc, #12]	; (801f48c <tcp_rexmit_fast+0x70>)
 801f47e:	f005 ff99 	bl	80253b4 <iprintf>
 801f482:	e7ce      	b.n	801f422 <tcp_rexmit_fast+0x6>
 801f484:	08044858 	.word	0x08044858
 801f488:	08044de4 	.word	0x08044de4
 801f48c:	0802a008 	.word	0x0802a008

0801f490 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801f490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f494:	b084      	sub	sp, #16
 801f496:	4607      	mov	r7, r0
 801f498:	460e      	mov	r6, r1
 801f49a:	4615      	mov	r5, r2
 801f49c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f4a0:	461c      	mov	r4, r3
{
 801f4a2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801f4a6:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f4aa:	b1fb      	cbz	r3, 801f4ec <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f4ac:	f1b8 0f00 	cmp.w	r8, #0
 801f4b0:	d026      	beq.n	801f500 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801f4b2:	4630      	mov	r0, r6
 801f4b4:	f7f9 fe7c 	bl	80191b0 <lwip_htonl>
 801f4b8:	2114      	movs	r1, #20
 801f4ba:	4602      	mov	r2, r0
 801f4bc:	4628      	mov	r0, r5
 801f4be:	f246 0508 	movw	r5, #24584	; 0x6008
 801f4c2:	464b      	mov	r3, r9
 801f4c4:	f8cd a000 	str.w	sl, [sp]
 801f4c8:	e9cd 1501 	strd	r1, r5, [sp, #4]
 801f4cc:	2100      	movs	r1, #0
 801f4ce:	f7ff f971 	bl	801e7b4 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801f4d2:	4601      	mov	r1, r0
 801f4d4:	b138      	cbz	r0, 801f4e6 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f4d6:	4643      	mov	r3, r8
 801f4d8:	4622      	mov	r2, r4
 801f4da:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801f4dc:	b004      	add	sp, #16
 801f4de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f4e2:	f7ff b9d5 	b.w	801e890 <tcp_output_control_segment>
}
 801f4e6:	b004      	add	sp, #16
 801f4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f4ec:	4b08      	ldr	r3, [pc, #32]	; (801f510 <tcp_rst+0x80>)
 801f4ee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801f4f2:	4908      	ldr	r1, [pc, #32]	; (801f514 <tcp_rst+0x84>)
 801f4f4:	4808      	ldr	r0, [pc, #32]	; (801f518 <tcp_rst+0x88>)
 801f4f6:	f005 ff5d 	bl	80253b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f4fa:	f1b8 0f00 	cmp.w	r8, #0
 801f4fe:	d1d8      	bne.n	801f4b2 <tcp_rst+0x22>
 801f500:	4b03      	ldr	r3, [pc, #12]	; (801f510 <tcp_rst+0x80>)
 801f502:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801f506:	4905      	ldr	r1, [pc, #20]	; (801f51c <tcp_rst+0x8c>)
 801f508:	4803      	ldr	r0, [pc, #12]	; (801f518 <tcp_rst+0x88>)
 801f50a:	f005 ff53 	bl	80253b4 <iprintf>
 801f50e:	e7d0      	b.n	801f4b2 <tcp_rst+0x22>
 801f510:	08044858 	.word	0x08044858
 801f514:	08044e04 	.word	0x08044e04
 801f518:	0802a008 	.word	0x0802a008
 801f51c:	08044e20 	.word	0x08044e20

0801f520 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801f520:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f522:	4604      	mov	r4, r0
 801f524:	b1c0      	cbz	r0, 801f558 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801f526:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f528:	f7f9 fe42 	bl	80191b0 <lwip_htonl>
 801f52c:	2100      	movs	r1, #0
 801f52e:	4602      	mov	r2, r0
 801f530:	4620      	mov	r0, r4
 801f532:	f7ff f985 	bl	801e840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f536:	4601      	mov	r1, r0
 801f538:	b1b0      	cbz	r0, 801f568 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f53a:	1d23      	adds	r3, r4, #4
 801f53c:	4622      	mov	r2, r4
 801f53e:	4620      	mov	r0, r4
 801f540:	f7ff f9a6 	bl	801e890 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f544:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801f546:	b118      	cbz	r0, 801f550 <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f548:	f043 0303 	orr.w	r3, r3, #3
 801f54c:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801f54e:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f550:	f023 0303 	bic.w	r3, r3, #3
 801f554:	8363      	strh	r3, [r4, #26]
}
 801f556:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f558:	4b07      	ldr	r3, [pc, #28]	; (801f578 <tcp_send_empty_ack+0x58>)
 801f55a:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801f55e:	4907      	ldr	r1, [pc, #28]	; (801f57c <tcp_send_empty_ack+0x5c>)
 801f560:	4807      	ldr	r0, [pc, #28]	; (801f580 <tcp_send_empty_ack+0x60>)
 801f562:	f005 ff27 	bl	80253b4 <iprintf>
 801f566:	e7de      	b.n	801f526 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f568:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801f56a:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f56e:	f043 0303 	orr.w	r3, r3, #3
 801f572:	8363      	strh	r3, [r4, #26]
}
 801f574:	bd10      	pop	{r4, pc}
 801f576:	bf00      	nop
 801f578:	08044858 	.word	0x08044858
 801f57c:	08044e3c 	.word	0x08044e3c
 801f580:	0802a008 	.word	0x0802a008

0801f584 <tcp_output>:
{
 801f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f588:	4604      	mov	r4, r0
{
 801f58a:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f58c:	2800      	cmp	r0, #0
 801f58e:	f000 81bc 	beq.w	801f90a <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f592:	7d23      	ldrb	r3, [r4, #20]
 801f594:	2b01      	cmp	r3, #1
 801f596:	f000 8173 	beq.w	801f880 <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 801f59a:	4bb3      	ldr	r3, [pc, #716]	; (801f868 <tcp_output+0x2e4>)
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	42a3      	cmp	r3, r4
 801f5a0:	f000 817a 	beq.w	801f898 <tcp_output+0x314>
  seg = pcb->unsent;
 801f5a4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801f5a6:	b345      	cbz	r5, 801f5fa <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f5a8:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801f5aa:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f5ae:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801f5b2:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f5b6:	2800      	cmp	r0, #0
 801f5b8:	f040 81af 	bne.w	801f91a <tcp_output+0x396>
    return ip_route(src, dst);
 801f5bc:	4648      	mov	r0, r9
 801f5be:	f003 fa2b 	bl	8022a18 <ip4_route>
 801f5c2:	4682      	mov	sl, r0
  if (netif == NULL) {
 801f5c4:	f1ba 0f00 	cmp.w	sl, #0
 801f5c8:	f000 81b9 	beq.w	801f93e <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 801f5cc:	6823      	ldr	r3, [r4, #0]
 801f5ce:	b913      	cbnz	r3, 801f5d6 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801f5d0:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f5d4:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f5d6:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f5d8:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f5da:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f5dc:	bf28      	it	cs
 801f5de:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f5e0:	f7f9 fde6 	bl	80191b0 <lwip_htonl>
 801f5e4:	892b      	ldrh	r3, [r5, #8]
 801f5e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801f5e8:	1a9b      	subs	r3, r3, r2
 801f5ea:	4418      	add	r0, r3
 801f5ec:	42b8      	cmp	r0, r7
 801f5ee:	d90f      	bls.n	801f610 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801f5f0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801f5f4:	42bb      	cmp	r3, r7
 801f5f6:	f000 8159 	beq.w	801f8ac <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 801f5fa:	8b62      	ldrh	r2, [r4, #26]
 801f5fc:	0791      	lsls	r1, r2, #30
 801f5fe:	f100 814f 	bmi.w	801f8a0 <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801f606:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f608:	8362      	strh	r2, [r4, #26]
}
 801f60a:	b005      	add	sp, #20
 801f60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801f610:	2300      	movs	r3, #0
 801f612:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 801f616:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 801f618:	2b00      	cmp	r3, #0
 801f61a:	f000 8157 	beq.w	801f8cc <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 801f61e:	4698      	mov	r8, r3
 801f620:	681b      	ldr	r3, [r3, #0]
 801f622:	2b00      	cmp	r3, #0
 801f624:	d1fb      	bne.n	801f61e <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 801f626:	464e      	mov	r6, r9
 801f628:	e0b7      	b.n	801f79a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801f62a:	68eb      	ldr	r3, [r5, #12]
 801f62c:	2010      	movs	r0, #16
 801f62e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801f632:	f7f9 fdb9 	bl	80191a8 <lwip_htons>
 801f636:	ea49 0000 	orr.w	r0, r9, r0
 801f63a:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f63e:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 801f642:	686b      	ldr	r3, [r5, #4]
 801f644:	7b9b      	ldrb	r3, [r3, #14]
 801f646:	2b01      	cmp	r3, #1
 801f648:	d160      	bne.n	801f70c <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f64a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f64c:	f7f9 fdb0 	bl	80191b0 <lwip_htonl>
 801f650:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f654:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801f656:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f65a:	f7f9 fda5 	bl	80191a8 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f65e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801f660:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f662:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f666:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f668:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f66c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801f66e:	7aab      	ldrb	r3, [r5, #10]
 801f670:	07db      	lsls	r3, r3, #31
 801f672:	f100 80d0 	bmi.w	801f816 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f676:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801f67a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801f67e:	2b00      	cmp	r3, #0
 801f680:	da01      	bge.n	801f686 <tcp_output+0x102>
    pcb->rtime = 0;
 801f682:	2300      	movs	r3, #0
 801f684:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801f686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f688:	2b00      	cmp	r3, #0
 801f68a:	f000 80b9 	beq.w	801f800 <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f68e:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801f690:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f694:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801f696:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f698:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801f69c:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801f69e:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f6a2:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801f6a4:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801f6a6:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 801f6a8:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801f6aa:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801f6ac:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801f6ae:	f889 c010 	strb.w	ip, [r9, #16]
 801f6b2:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801f6b6:	7aab      	ldrb	r3, [r5, #10]
 801f6b8:	009b      	lsls	r3, r3, #2
 801f6ba:	f003 0304 	and.w	r3, r3, #4
 801f6be:	3314      	adds	r3, #20
 801f6c0:	444b      	add	r3, r9
 801f6c2:	459b      	cmp	fp, r3
 801f6c4:	d00a      	beq.n	801f6dc <tcp_output+0x158>
 801f6c6:	f240 621c 	movw	r2, #1564	; 0x61c
 801f6ca:	4b68      	ldr	r3, [pc, #416]	; (801f86c <tcp_output+0x2e8>)
 801f6cc:	4968      	ldr	r1, [pc, #416]	; (801f870 <tcp_output+0x2ec>)
 801f6ce:	4869      	ldr	r0, [pc, #420]	; (801f874 <tcp_output+0x2f0>)
 801f6d0:	f005 fe70 	bl	80253b4 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801f6d4:	6868      	ldr	r0, [r5, #4]
 801f6d6:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f6da:	8902      	ldrh	r2, [r0, #8]
 801f6dc:	4623      	mov	r3, r4
 801f6de:	2106      	movs	r1, #6
 801f6e0:	9600      	str	r6, [sp, #0]
 801f6e2:	f7fa faf5 	bl	8019cd0 <ip_chksum_pseudo>
 801f6e6:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801f6ea:	6868      	ldr	r0, [r5, #4]
 801f6ec:	4632      	mov	r2, r6
 801f6ee:	f8cd a008 	str.w	sl, [sp, #8]
 801f6f2:	4621      	mov	r1, r4
 801f6f4:	7aa3      	ldrb	r3, [r4, #10]
 801f6f6:	9300      	str	r3, [sp, #0]
 801f6f8:	2306      	movs	r3, #6
 801f6fa:	9301      	str	r3, [sp, #4]
 801f6fc:	7ae3      	ldrb	r3, [r4, #11]
 801f6fe:	f003 fb55 	bl	8022dac <ip4_output_if>
    if (err != ERR_OK) {
 801f702:	2800      	cmp	r0, #0
 801f704:	f040 8116 	bne.w	801f934 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f708:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 801f70c:	682b      	ldr	r3, [r5, #0]
 801f70e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801f710:	7d23      	ldrb	r3, [r4, #20]
 801f712:	2b02      	cmp	r3, #2
 801f714:	d003      	beq.n	801f71e <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f716:	8b63      	ldrh	r3, [r4, #26]
 801f718:	f023 0303 	bic.w	r3, r3, #3
 801f71c:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f71e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f722:	f7f9 fd45 	bl	80191b0 <lwip_htonl>
 801f726:	68eb      	ldr	r3, [r5, #12]
 801f728:	4681      	mov	r9, r0
 801f72a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801f72e:	8998      	ldrh	r0, [r3, #12]
 801f730:	f7f9 fd3a 	bl	80191a8 <lwip_htons>
 801f734:	f010 0003 	ands.w	r0, r0, #3
 801f738:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f73a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f73c:	bf18      	it	ne
 801f73e:	2001      	movne	r0, #1
 801f740:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801f742:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f746:	1a1b      	subs	r3, r3, r0
 801f748:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801f74a:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 801f74c:	bfb8      	it	lt
 801f74e:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801f750:	8998      	ldrh	r0, [r3, #12]
 801f752:	f7f9 fd29 	bl	80191a8 <lwip_htons>
 801f756:	f010 0003 	ands.w	r0, r0, #3
 801f75a:	bf18      	it	ne
 801f75c:	2001      	movne	r0, #1
 801f75e:	eb10 0f09 	cmn.w	r0, r9
 801f762:	d046      	beq.n	801f7f2 <tcp_output+0x26e>
      seg->next = NULL;
 801f764:	2300      	movs	r3, #0
 801f766:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 801f768:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f76a:	2b00      	cmp	r3, #0
 801f76c:	d045      	beq.n	801f7fa <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801f76e:	68eb      	ldr	r3, [r5, #12]
 801f770:	6858      	ldr	r0, [r3, #4]
 801f772:	f7f9 fd1d 	bl	80191b0 <lwip_htonl>
 801f776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f77a:	4681      	mov	r9, r0
 801f77c:	6858      	ldr	r0, [r3, #4]
 801f77e:	f7f9 fd17 	bl	80191b0 <lwip_htonl>
 801f782:	eba9 0000 	sub.w	r0, r9, r0
 801f786:	2800      	cmp	r0, #0
 801f788:	f2c0 80a2 	blt.w	801f8d0 <tcp_output+0x34c>
          useg->next = seg;
 801f78c:	f8c8 5000 	str.w	r5, [r8]
 801f790:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801f792:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801f794:	2d00      	cmp	r5, #0
 801f796:	f000 80c4 	beq.w	801f922 <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801f79a:	68eb      	ldr	r3, [r5, #12]
 801f79c:	6858      	ldr	r0, [r3, #4]
 801f79e:	f7f9 fd07 	bl	80191b0 <lwip_htonl>
 801f7a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801f7a4:	1ac0      	subs	r0, r0, r3
 801f7a6:	892b      	ldrh	r3, [r5, #8]
 801f7a8:	4418      	add	r0, r3
  while (seg != NULL &&
 801f7aa:	42b8      	cmp	r0, r7
 801f7ac:	f200 80bb 	bhi.w	801f926 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 801f7b0:	68eb      	ldr	r3, [r5, #12]
 801f7b2:	8998      	ldrh	r0, [r3, #12]
 801f7b4:	f7f9 fcf8 	bl	80191a8 <lwip_htons>
 801f7b8:	0742      	lsls	r2, r0, #29
 801f7ba:	d412      	bmi.n	801f7e2 <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f7bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f7be:	b14b      	cbz	r3, 801f7d4 <tcp_output+0x250>
 801f7c0:	8b63      	ldrh	r3, [r4, #26]
 801f7c2:	f013 0f44 	tst.w	r3, #68	; 0x44
 801f7c6:	461a      	mov	r2, r3
 801f7c8:	d104      	bne.n	801f7d4 <tcp_output+0x250>
 801f7ca:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801f7cc:	2900      	cmp	r1, #0
 801f7ce:	d038      	beq.n	801f842 <tcp_output+0x2be>
 801f7d0:	6808      	ldr	r0, [r1, #0]
 801f7d2:	b388      	cbz	r0, 801f838 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 801f7d4:	7d23      	ldrb	r3, [r4, #20]
 801f7d6:	2b02      	cmp	r3, #2
 801f7d8:	f47f af27 	bne.w	801f62a <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f7dc:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f7e0:	e72f      	b.n	801f642 <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 801f7e2:	4b22      	ldr	r3, [pc, #136]	; (801f86c <tcp_output+0x2e8>)
 801f7e4:	f240 5236 	movw	r2, #1334	; 0x536
 801f7e8:	4923      	ldr	r1, [pc, #140]	; (801f878 <tcp_output+0x2f4>)
 801f7ea:	4822      	ldr	r0, [pc, #136]	; (801f874 <tcp_output+0x2f0>)
 801f7ec:	f005 fde2 	bl	80253b4 <iprintf>
 801f7f0:	e7e4      	b.n	801f7bc <tcp_output+0x238>
      tcp_seg_free(seg);
 801f7f2:	4628      	mov	r0, r5
 801f7f4:	f7fc fa90 	bl	801bd18 <tcp_seg_free>
 801f7f8:	e7cb      	b.n	801f792 <tcp_output+0x20e>
        pcb->unacked = seg;
 801f7fa:	46a8      	mov	r8, r5
 801f7fc:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801f7fe:	e7c8      	b.n	801f792 <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 801f800:	4b1e      	ldr	r3, [pc, #120]	; (801f87c <tcp_output+0x2f8>)
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f806:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f80a:	f7f9 fcd1 	bl	80191b0 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f80e:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f812:	63a0      	str	r0, [r4, #56]	; 0x38
 801f814:	e73b      	b.n	801f68e <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f816:	4632      	mov	r2, r6
 801f818:	4651      	mov	r1, sl
 801f81a:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801f81e:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f822:	f7fd fa75 	bl	801cd10 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801f826:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801f82a:	f7f9 fcc1 	bl	80191b0 <lwip_htonl>
 801f82e:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f832:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f836:	e720      	b.n	801f67a <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f838:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801f83c:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801f83e:	4584      	cmp	ip, r0
 801f840:	d2c8      	bcs.n	801f7d4 <tcp_output+0x250>
 801f842:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801f846:	2800      	cmp	r0, #0
 801f848:	d0c4      	beq.n	801f7d4 <tcp_output+0x250>
 801f84a:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801f84e:	2808      	cmp	r0, #8
 801f850:	d8c0      	bhi.n	801f7d4 <tcp_output+0x250>
 801f852:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801f856:	d1bd      	bne.n	801f7d4 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 801f858:	2900      	cmp	r1, #0
 801f85a:	f47f aed2 	bne.w	801f602 <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 801f85e:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f860:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 801f862:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801f866:	e6cc      	b.n	801f602 <tcp_output+0x7e>
 801f868:	2002e100 	.word	0x2002e100
 801f86c:	08044858 	.word	0x08044858
 801f870:	08044eb4 	.word	0x08044eb4
 801f874:	0802a008 	.word	0x0802a008
 801f878:	08044e9c 	.word	0x08044e9c
 801f87c:	2002e0cc 	.word	0x2002e0cc
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f880:	4b30      	ldr	r3, [pc, #192]	; (801f944 <tcp_output+0x3c0>)
 801f882:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801f886:	4930      	ldr	r1, [pc, #192]	; (801f948 <tcp_output+0x3c4>)
 801f888:	4830      	ldr	r0, [pc, #192]	; (801f94c <tcp_output+0x3c8>)
 801f88a:	f005 fd93 	bl	80253b4 <iprintf>
  if (tcp_input_pcb == pcb) {
 801f88e:	4b30      	ldr	r3, [pc, #192]	; (801f950 <tcp_output+0x3cc>)
 801f890:	681b      	ldr	r3, [r3, #0]
 801f892:	42a3      	cmp	r3, r4
 801f894:	f47f ae86 	bne.w	801f5a4 <tcp_output+0x20>
    return ERR_OK;
 801f898:	2000      	movs	r0, #0
}
 801f89a:	b005      	add	sp, #20
 801f89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801f8a0:	4620      	mov	r0, r4
}
 801f8a2:	b005      	add	sp, #20
 801f8a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801f8a8:	f7ff be3a 	b.w	801f520 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801f8ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	f47f aea3 	bne.w	801f5fa <tcp_output+0x76>
 801f8b4:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801f8b8:	2b00      	cmp	r3, #0
 801f8ba:	f47f ae9e 	bne.w	801f5fa <tcp_output+0x76>
      pcb->persist_cnt = 0;
 801f8be:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801f8c2:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801f8c6:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801f8ca:	e696      	b.n	801f5fa <tcp_output+0x76>
 801f8cc:	4698      	mov	r8, r3
 801f8ce:	e6aa      	b.n	801f626 <tcp_output+0xa2>
          while (*cur_seg &&
 801f8d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801f8d2:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801f8d6:	b92b      	cbnz	r3, 801f8e4 <tcp_output+0x360>
 801f8d8:	e013      	b.n	801f902 <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 801f8da:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801f8de:	f8db 3000 	ldr.w	r3, [fp]
 801f8e2:	b173      	cbz	r3, 801f902 <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f8e4:	68db      	ldr	r3, [r3, #12]
 801f8e6:	6858      	ldr	r0, [r3, #4]
 801f8e8:	f7f9 fc62 	bl	80191b0 <lwip_htonl>
 801f8ec:	68eb      	ldr	r3, [r5, #12]
 801f8ee:	4681      	mov	r9, r0
 801f8f0:	6858      	ldr	r0, [r3, #4]
 801f8f2:	f7f9 fc5d 	bl	80191b0 <lwip_htonl>
 801f8f6:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801f8fa:	2800      	cmp	r0, #0
 801f8fc:	dbed      	blt.n	801f8da <tcp_output+0x356>
          seg->next = (*cur_seg);
 801f8fe:	f8db 3000 	ldr.w	r3, [fp]
 801f902:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801f904:	f8cb 5000 	str.w	r5, [fp]
 801f908:	e743      	b.n	801f792 <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f90a:	4b0e      	ldr	r3, [pc, #56]	; (801f944 <tcp_output+0x3c0>)
 801f90c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801f910:	4910      	ldr	r1, [pc, #64]	; (801f954 <tcp_output+0x3d0>)
 801f912:	480e      	ldr	r0, [pc, #56]	; (801f94c <tcp_output+0x3c8>)
 801f914:	f005 fd4e 	bl	80253b4 <iprintf>
 801f918:	e63b      	b.n	801f592 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801f91a:	f7fb f95b 	bl	801abd4 <netif_get_by_index>
 801f91e:	4682      	mov	sl, r0
 801f920:	e650      	b.n	801f5c4 <tcp_output+0x40>
 801f922:	8b63      	ldrh	r3, [r4, #26]
 801f924:	e79b      	b.n	801f85e <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f926:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 801f928:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f92a:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801f92c:	2900      	cmp	r1, #0
 801f92e:	f47f ae68 	bne.w	801f602 <tcp_output+0x7e>
 801f932:	e794      	b.n	801f85e <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f934:	8b63      	ldrh	r3, [r4, #26]
 801f936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f93a:	8363      	strh	r3, [r4, #26]
      return err;
 801f93c:	e665      	b.n	801f60a <tcp_output+0x86>
    return ERR_RTE;
 801f93e:	f06f 0003 	mvn.w	r0, #3
 801f942:	e662      	b.n	801f60a <tcp_output+0x86>
 801f944:	08044858 	.word	0x08044858
 801f948:	08044e74 	.word	0x08044e74
 801f94c:	0802a008 	.word	0x0802a008
 801f950:	2002e100 	.word	0x2002e100
 801f954:	08044e5c 	.word	0x08044e5c

0801f958 <tcp_rexmit_rto_commit>:
{
 801f958:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f95a:	4604      	mov	r4, r0
 801f95c:	b158      	cbz	r0, 801f976 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801f95e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f962:	2bff      	cmp	r3, #255	; 0xff
 801f964:	d002      	beq.n	801f96c <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801f966:	3301      	adds	r3, #1
 801f968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f96c:	4620      	mov	r0, r4
}
 801f96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f972:	f7ff be07 	b.w	801f584 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f976:	4b04      	ldr	r3, [pc, #16]	; (801f988 <tcp_rexmit_rto_commit+0x30>)
 801f978:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f97c:	4903      	ldr	r1, [pc, #12]	; (801f98c <tcp_rexmit_rto_commit+0x34>)
 801f97e:	4804      	ldr	r0, [pc, #16]	; (801f990 <tcp_rexmit_rto_commit+0x38>)
 801f980:	f005 fd18 	bl	80253b4 <iprintf>
 801f984:	e7eb      	b.n	801f95e <tcp_rexmit_rto_commit+0x6>
 801f986:	bf00      	nop
 801f988:	08044858 	.word	0x08044858
 801f98c:	08044ec8 	.word	0x08044ec8
 801f990:	0802a008 	.word	0x0802a008

0801f994 <tcp_rexmit_rto>:
{
 801f994:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f996:	4604      	mov	r4, r0
 801f998:	b118      	cbz	r0, 801f9a2 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f99a:	f7ff fcb5 	bl	801f308 <tcp_rexmit_rto_prepare>
 801f99e:	b198      	cbz	r0, 801f9c8 <tcp_rexmit_rto+0x34>
}
 801f9a0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f9a2:	4b0f      	ldr	r3, [pc, #60]	; (801f9e0 <tcp_rexmit_rto+0x4c>)
 801f9a4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801f9a8:	490e      	ldr	r1, [pc, #56]	; (801f9e4 <tcp_rexmit_rto+0x50>)
 801f9aa:	480f      	ldr	r0, [pc, #60]	; (801f9e8 <tcp_rexmit_rto+0x54>)
 801f9ac:	f005 fd02 	bl	80253b4 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f9b0:	4620      	mov	r0, r4
 801f9b2:	f7ff fca9 	bl	801f308 <tcp_rexmit_rto_prepare>
 801f9b6:	2800      	cmp	r0, #0
 801f9b8:	d1f2      	bne.n	801f9a0 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f9ba:	4b09      	ldr	r3, [pc, #36]	; (801f9e0 <tcp_rexmit_rto+0x4c>)
 801f9bc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f9c0:	490a      	ldr	r1, [pc, #40]	; (801f9ec <tcp_rexmit_rto+0x58>)
 801f9c2:	4809      	ldr	r0, [pc, #36]	; (801f9e8 <tcp_rexmit_rto+0x54>)
 801f9c4:	f005 fcf6 	bl	80253b4 <iprintf>
  if (pcb->nrtx < 0xFF) {
 801f9c8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f9cc:	2bff      	cmp	r3, #255	; 0xff
 801f9ce:	d002      	beq.n	801f9d6 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 801f9d0:	3301      	adds	r3, #1
 801f9d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f9d6:	4620      	mov	r0, r4
}
 801f9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f9dc:	f7ff bdd2 	b.w	801f584 <tcp_output>
 801f9e0:	08044858 	.word	0x08044858
 801f9e4:	08044eec 	.word	0x08044eec
 801f9e8:	0802a008 	.word	0x0802a008
 801f9ec:	08044ec8 	.word	0x08044ec8

0801f9f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f9f0:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f9f2:	4604      	mov	r4, r0
 801f9f4:	b188      	cbz	r0, 801fa1a <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f9f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f9f8:	3801      	subs	r0, #1
 801f9fa:	f7f9 fbd9 	bl	80191b0 <lwip_htonl>
 801f9fe:	2100      	movs	r1, #0
 801fa00:	4602      	mov	r2, r0
 801fa02:	4620      	mov	r0, r4
 801fa04:	f7fe ff1c 	bl	801e840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801fa08:	4601      	mov	r1, r0
 801fa0a:	b170      	cbz	r0, 801fa2a <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fa0c:	1d23      	adds	r3, r4, #4
 801fa0e:	4622      	mov	r2, r4
 801fa10:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801fa12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fa16:	f7fe bf3b 	b.w	801e890 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801fa1a:	4b05      	ldr	r3, [pc, #20]	; (801fa30 <tcp_keepalive+0x40>)
 801fa1c:	f640 0224 	movw	r2, #2084	; 0x824
 801fa20:	4904      	ldr	r1, [pc, #16]	; (801fa34 <tcp_keepalive+0x44>)
 801fa22:	4805      	ldr	r0, [pc, #20]	; (801fa38 <tcp_keepalive+0x48>)
 801fa24:	f005 fcc6 	bl	80253b4 <iprintf>
 801fa28:	e7e5      	b.n	801f9f6 <tcp_keepalive+0x6>
}
 801fa2a:	f04f 30ff 	mov.w	r0, #4294967295
 801fa2e:	bd10      	pop	{r4, pc}
 801fa30:	08044858 	.word	0x08044858
 801fa34:	08044f08 	.word	0x08044f08
 801fa38:	0802a008 	.word	0x0802a008

0801fa3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801fa40:	4604      	mov	r4, r0
 801fa42:	2800      	cmp	r0, #0
 801fa44:	d051      	beq.n	801faea <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801fa46:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801fa48:	2d00      	cmp	r5, #0
 801fa4a:	d04b      	beq.n	801fae4 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801fa4c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801fa50:	2bff      	cmp	r3, #255	; 0xff
 801fa52:	d002      	beq.n	801fa5a <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801fa54:	3301      	adds	r3, #1
 801fa56:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801fa5a:	68eb      	ldr	r3, [r5, #12]
 801fa5c:	8998      	ldrh	r0, [r3, #12]
 801fa5e:	f7f9 fba3 	bl	80191a8 <lwip_htons>
 801fa62:	07c3      	lsls	r3, r0, #31
 801fa64:	d527      	bpl.n	801fab6 <tcp_zero_window_probe+0x7a>
 801fa66:	8929      	ldrh	r1, [r5, #8]
 801fa68:	bb29      	cbnz	r1, 801fab6 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801fa6a:	68eb      	ldr	r3, [r5, #12]
 801fa6c:	4620      	mov	r0, r4
 801fa6e:	685a      	ldr	r2, [r3, #4]
 801fa70:	f7fe fee6 	bl	801e840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801fa74:	4606      	mov	r6, r0
 801fa76:	b388      	cbz	r0, 801fadc <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801fa78:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801fa7c:	2011      	movs	r0, #17
 801fa7e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801fa82:	f7f9 fb91 	bl	80191a8 <lwip_htons>
 801fa86:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801fa8a:	4338      	orrs	r0, r7
 801fa8c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801fa90:	68eb      	ldr	r3, [r5, #12]
 801fa92:	6858      	ldr	r0, [r3, #4]
 801fa94:	f7f9 fb8c 	bl	80191b0 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fa98:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801fa9a:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fa9c:	4622      	mov	r2, r4
 801fa9e:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801faa0:	1a1b      	subs	r3, r3, r0
 801faa2:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801faa4:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 801faa8:	bfb8      	it	lt
 801faaa:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801faac:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801faae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fab2:	f7fe beed 	b.w	801e890 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801fab6:	68eb      	ldr	r3, [r5, #12]
 801fab8:	2101      	movs	r1, #1
 801faba:	4620      	mov	r0, r4
 801fabc:	685a      	ldr	r2, [r3, #4]
 801fabe:	f7fe febf 	bl	801e840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801fac2:	4606      	mov	r6, r0
 801fac4:	b150      	cbz	r0, 801fadc <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801fac6:	6868      	ldr	r0, [r5, #4]
 801fac8:	892a      	ldrh	r2, [r5, #8]
 801faca:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801facc:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801face:	1a9b      	subs	r3, r3, r2
 801fad0:	2201      	movs	r2, #1
 801fad2:	3114      	adds	r1, #20
 801fad4:	b29b      	uxth	r3, r3
 801fad6:	f7fb fc47 	bl	801b368 <pbuf_copy_partial>
 801fada:	e7d9      	b.n	801fa90 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801fadc:	f04f 30ff 	mov.w	r0, #4294967295
}
 801fae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801fae4:	4628      	mov	r0, r5
}
 801fae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801faea:	4b04      	ldr	r3, [pc, #16]	; (801fafc <tcp_zero_window_probe+0xc0>)
 801faec:	f640 024f 	movw	r2, #2127	; 0x84f
 801faf0:	4903      	ldr	r1, [pc, #12]	; (801fb00 <tcp_zero_window_probe+0xc4>)
 801faf2:	4804      	ldr	r0, [pc, #16]	; (801fb04 <tcp_zero_window_probe+0xc8>)
 801faf4:	f005 fc5e 	bl	80253b4 <iprintf>
 801faf8:	e7a5      	b.n	801fa46 <tcp_zero_window_probe+0xa>
 801fafa:	bf00      	nop
 801fafc:	08044858 	.word	0x08044858
 801fb00:	08044f24 	.word	0x08044f24
 801fb04:	0802a008 	.word	0x0802a008

0801fb08 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801fb08:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801fb0a:	22bc      	movs	r2, #188	; 0xbc
{
 801fb0c:	b570      	push	{r4, r5, r6, lr}
 801fb0e:	460e      	mov	r6, r1
 801fb10:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801fb12:	4910      	ldr	r1, [pc, #64]	; (801fb54 <sys_timeout_abs+0x4c>)
 801fb14:	200c      	movs	r0, #12
{
 801fb16:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801fb18:	f7fa fe34 	bl	801a784 <memp_malloc_fn>
  if (timeout == NULL) {
 801fb1c:	b190      	cbz	r0, 801fb44 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 801fb1e:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801fb20:	490d      	ldr	r1, [pc, #52]	; (801fb58 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 801fb22:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 801fb24:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 801fb26:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801fb2a:	680b      	ldr	r3, [r1, #0]
 801fb2c:	b91b      	cbnz	r3, 801fb36 <sys_timeout_abs+0x2e>
 801fb2e:	e007      	b.n	801fb40 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801fb30:	4619      	mov	r1, r3
 801fb32:	681b      	ldr	r3, [r3, #0]
 801fb34:	b11b      	cbz	r3, 801fb3e <sys_timeout_abs+0x36>
 801fb36:	685a      	ldr	r2, [r3, #4]
 801fb38:	1aa2      	subs	r2, r4, r2
 801fb3a:	2a00      	cmp	r2, #0
 801fb3c:	daf8      	bge.n	801fb30 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801fb3e:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801fb40:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801fb42:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801fb44:	4b03      	ldr	r3, [pc, #12]	; (801fb54 <sys_timeout_abs+0x4c>)
 801fb46:	22be      	movs	r2, #190	; 0xbe
 801fb48:	4904      	ldr	r1, [pc, #16]	; (801fb5c <sys_timeout_abs+0x54>)
 801fb4a:	4805      	ldr	r0, [pc, #20]	; (801fb60 <sys_timeout_abs+0x58>)
}
 801fb4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801fb50:	f005 bc30 	b.w	80253b4 <iprintf>
 801fb54:	08044f48 	.word	0x08044f48
 801fb58:	2002e11c 	.word	0x2002e11c
 801fb5c:	08044f7c 	.word	0x08044f7c
 801fb60:	0802a008 	.word	0x0802a008

0801fb64 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801fb64:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801fb66:	6843      	ldr	r3, [r0, #4]
{
 801fb68:	4604      	mov	r4, r0
  cyclic->handler();
 801fb6a:	4798      	blx	r3

  now = sys_now();
 801fb6c:	f7f4 fd74 	bl	8014658 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801fb70:	4b09      	ldr	r3, [pc, #36]	; (801fb98 <lwip_cyclic_timer+0x34>)
 801fb72:	6825      	ldr	r5, [r4, #0]
 801fb74:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fb76:	4909      	ldr	r1, [pc, #36]	; (801fb9c <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801fb78:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801fb7a:	1a1a      	subs	r2, r3, r0
 801fb7c:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fb7e:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801fb80:	da04      	bge.n	801fb8c <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fb82:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801fb84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fb88:	f7ff bfbe 	b.w	801fb08 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801fb8c:	4618      	mov	r0, r3
}
 801fb8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801fb92:	f7ff bfb9 	b.w	801fb08 <sys_timeout_abs>
 801fb96:	bf00      	nop
 801fb98:	2002e118 	.word	0x2002e118
 801fb9c:	0801fb65 	.word	0x0801fb65

0801fba0 <tcpip_tcp_timer>:
{
 801fba0:	b508      	push	{r3, lr}
  tcp_tmr();
 801fba2:	f7fd f887 	bl	801ccb4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801fba6:	4b09      	ldr	r3, [pc, #36]	; (801fbcc <tcpip_tcp_timer+0x2c>)
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	b143      	cbz	r3, 801fbbe <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fbac:	f7f4 fd54 	bl	8014658 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fbb0:	2200      	movs	r2, #0
 801fbb2:	4907      	ldr	r1, [pc, #28]	; (801fbd0 <tcpip_tcp_timer+0x30>)
 801fbb4:	30fa      	adds	r0, #250	; 0xfa
}
 801fbb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fbba:	f7ff bfa5 	b.w	801fb08 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801fbbe:	4b05      	ldr	r3, [pc, #20]	; (801fbd4 <tcpip_tcp_timer+0x34>)
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	d1f2      	bne.n	801fbac <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801fbc6:	4a04      	ldr	r2, [pc, #16]	; (801fbd8 <tcpip_tcp_timer+0x38>)
 801fbc8:	6013      	str	r3, [r2, #0]
}
 801fbca:	bd08      	pop	{r3, pc}
 801fbcc:	2002e0bc 	.word	0x2002e0bc
 801fbd0:	0801fba1 	.word	0x0801fba1
 801fbd4:	2002e0d4 	.word	0x2002e0d4
 801fbd8:	2002e120 	.word	0x2002e120

0801fbdc <tcp_timer_needed>:
{
 801fbdc:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801fbde:	4b0b      	ldr	r3, [pc, #44]	; (801fc0c <tcp_timer_needed+0x30>)
 801fbe0:	681a      	ldr	r2, [r3, #0]
 801fbe2:	b98a      	cbnz	r2, 801fc08 <tcp_timer_needed+0x2c>
 801fbe4:	4a0a      	ldr	r2, [pc, #40]	; (801fc10 <tcp_timer_needed+0x34>)
 801fbe6:	6812      	ldr	r2, [r2, #0]
 801fbe8:	b152      	cbz	r2, 801fc00 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801fbea:	2201      	movs	r2, #1
 801fbec:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fbee:	f7f4 fd33 	bl	8014658 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fbf2:	2200      	movs	r2, #0
 801fbf4:	4907      	ldr	r1, [pc, #28]	; (801fc14 <tcp_timer_needed+0x38>)
 801fbf6:	30fa      	adds	r0, #250	; 0xfa
}
 801fbf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fbfc:	f7ff bf84 	b.w	801fb08 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801fc00:	4a05      	ldr	r2, [pc, #20]	; (801fc18 <tcp_timer_needed+0x3c>)
 801fc02:	6812      	ldr	r2, [r2, #0]
 801fc04:	2a00      	cmp	r2, #0
 801fc06:	d1f0      	bne.n	801fbea <tcp_timer_needed+0xe>
}
 801fc08:	bd08      	pop	{r3, pc}
 801fc0a:	bf00      	nop
 801fc0c:	2002e120 	.word	0x2002e120
 801fc10:	2002e0bc 	.word	0x2002e0bc
 801fc14:	0801fba1 	.word	0x0801fba1
 801fc18:	2002e0d4 	.word	0x2002e0d4

0801fc1c <sys_timeouts_init>:
{
 801fc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc20:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801fc24:	4c11      	ldr	r4, [pc, #68]	; (801fc6c <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fc26:	f8df 9050 	ldr.w	r9, [pc, #80]	; 801fc78 <sys_timeouts_init+0x5c>
 801fc2a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801fc2e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801fc7c <sys_timeouts_init+0x60>
 801fc32:	f104 0620 	add.w	r6, r4, #32
 801fc36:	4f0e      	ldr	r7, [pc, #56]	; (801fc70 <sys_timeouts_init+0x54>)
 801fc38:	d20d      	bcs.n	801fc56 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fc3a:	f7f4 fd0d 	bl	8014658 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fc3e:	4622      	mov	r2, r4
 801fc40:	490c      	ldr	r1, [pc, #48]	; (801fc74 <sys_timeouts_init+0x58>)
 801fc42:	4428      	add	r0, r5
 801fc44:	f7ff ff60 	bl	801fb08 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801fc48:	42b4      	cmp	r4, r6
 801fc4a:	d00c      	beq.n	801fc66 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801fc4c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fc50:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801fc54:	d3f1      	bcc.n	801fc3a <sys_timeouts_init+0x1e>
 801fc56:	464b      	mov	r3, r9
 801fc58:	4641      	mov	r1, r8
 801fc5a:	f240 1229 	movw	r2, #297	; 0x129
 801fc5e:	4638      	mov	r0, r7
 801fc60:	f005 fba8 	bl	80253b4 <iprintf>
 801fc64:	e7e9      	b.n	801fc3a <sys_timeouts_init+0x1e>
}
 801fc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc6a:	bf00      	nop
 801fc6c:	08044ffc 	.word	0x08044ffc
 801fc70:	0802a008 	.word	0x0802a008
 801fc74:	0801fb65 	.word	0x0801fb65
 801fc78:	08044f48 	.word	0x08044f48
 801fc7c:	08044fbc 	.word	0x08044fbc

0801fc80 <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fc80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801fc84:	b570      	push	{r4, r5, r6, lr}
 801fc86:	4604      	mov	r4, r0
 801fc88:	460d      	mov	r5, r1
 801fc8a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fc8c:	d208      	bcs.n	801fca0 <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fc8e:	f7f4 fce3 	bl	8014658 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fc92:	4632      	mov	r2, r6
 801fc94:	4629      	mov	r1, r5
 801fc96:	4420      	add	r0, r4
#endif
}
 801fc98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fc9c:	f7ff bf34 	b.w	801fb08 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fca0:	4b03      	ldr	r3, [pc, #12]	; (801fcb0 <sys_timeout+0x30>)
 801fca2:	f240 1229 	movw	r2, #297	; 0x129
 801fca6:	4903      	ldr	r1, [pc, #12]	; (801fcb4 <sys_timeout+0x34>)
 801fca8:	4803      	ldr	r0, [pc, #12]	; (801fcb8 <sys_timeout+0x38>)
 801fcaa:	f005 fb83 	bl	80253b4 <iprintf>
 801fcae:	e7ee      	b.n	801fc8e <sys_timeout+0xe>
 801fcb0:	08044f48 	.word	0x08044f48
 801fcb4:	08044fbc 	.word	0x08044fbc
 801fcb8:	0802a008 	.word	0x0802a008

0801fcbc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801fcbc:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801fcbe:	4d0d      	ldr	r5, [pc, #52]	; (801fcf4 <sys_untimeout+0x38>)
 801fcc0:	682b      	ldr	r3, [r5, #0]
 801fcc2:	b19b      	cbz	r3, 801fcec <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801fcc4:	2400      	movs	r4, #0
 801fcc6:	e003      	b.n	801fcd0 <sys_untimeout+0x14>
 801fcc8:	681a      	ldr	r2, [r3, #0]
 801fcca:	461c      	mov	r4, r3
 801fccc:	4613      	mov	r3, r2
 801fcce:	b16a      	cbz	r2, 801fcec <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801fcd0:	689a      	ldr	r2, [r3, #8]
 801fcd2:	4282      	cmp	r2, r0
 801fcd4:	d1f8      	bne.n	801fcc8 <sys_untimeout+0xc>
 801fcd6:	68da      	ldr	r2, [r3, #12]
 801fcd8:	428a      	cmp	r2, r1
 801fcda:	d1f5      	bne.n	801fcc8 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801fcdc:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801fcde:	b13c      	cbz	r4, 801fcf0 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801fce0:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801fce2:	4619      	mov	r1, r3
 801fce4:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801fce6:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801fce8:	f7fa bd82 	b.w	801a7f0 <memp_free>
}
 801fcec:	bc30      	pop	{r4, r5}
 801fcee:	4770      	bx	lr
        next_timeout = t->next;
 801fcf0:	602a      	str	r2, [r5, #0]
 801fcf2:	e7f6      	b.n	801fce2 <sys_untimeout+0x26>
 801fcf4:	2002e11c 	.word	0x2002e11c

0801fcf8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801fcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801fcfc:	f7f4 fcac 	bl	8014658 <sys_now>
 801fd00:	4c0f      	ldr	r4, [pc, #60]	; (801fd40 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801fd02:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801fd44 <sys_check_timeouts+0x4c>
  now = sys_now();
 801fd06:	4607      	mov	r7, r0
 801fd08:	e00f      	b.n	801fd2a <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801fd0a:	685a      	ldr	r2, [r3, #4]
 801fd0c:	eba7 0c02 	sub.w	ip, r7, r2
 801fd10:	f1bc 0f00 	cmp.w	ip, #0
 801fd14:	db0e      	blt.n	801fd34 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 801fd16:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801fd18:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 801fd1a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 801fd1e:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 801fd22:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801fd24:	f7fa fd64 	bl	801a7f0 <memp_free>
    if (handler != NULL) {
 801fd28:	b935      	cbnz	r5, 801fd38 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 801fd2a:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801fd2c:	200c      	movs	r0, #12
 801fd2e:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	d1ea      	bne.n	801fd0a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801fd34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 801fd38:	4648      	mov	r0, r9
 801fd3a:	47a8      	blx	r5
 801fd3c:	e7f5      	b.n	801fd2a <sys_check_timeouts+0x32>
 801fd3e:	bf00      	nop
 801fd40:	2002e11c 	.word	0x2002e11c
 801fd44:	2002e118 	.word	0x2002e118

0801fd48 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801fd48:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801fd4a:	4c07      	ldr	r4, [pc, #28]	; (801fd68 <sys_timeouts_sleeptime+0x20>)
 801fd4c:	6823      	ldr	r3, [r4, #0]
 801fd4e:	b13b      	cbz	r3, 801fd60 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801fd50:	f7f4 fc82 	bl	8014658 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801fd54:	6823      	ldr	r3, [r4, #0]
 801fd56:	685b      	ldr	r3, [r3, #4]
    return 0;
 801fd58:	1a18      	subs	r0, r3, r0
 801fd5a:	bf48      	it	mi
 801fd5c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801fd5e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801fd60:	f04f 30ff 	mov.w	r0, #4294967295
}
 801fd64:	bd10      	pop	{r4, pc}
 801fd66:	bf00      	nop
 801fd68:	2002e11c 	.word	0x2002e11c

0801fd6c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801fd6c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801fd6e:	f005 fbc5 	bl	80254fc <rand>
 801fd72:	4b02      	ldr	r3, [pc, #8]	; (801fd7c <udp_init+0x10>)
 801fd74:	4a02      	ldr	r2, [pc, #8]	; (801fd80 <udp_init+0x14>)
 801fd76:	4303      	orrs	r3, r0
 801fd78:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801fd7a:	bd08      	pop	{r3, pc}
 801fd7c:	ffffc000 	.word	0xffffc000
 801fd80:	2000041a 	.word	0x2000041a

0801fd84 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801fd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fd88:	4680      	mov	r8, r0
{
 801fd8a:	b085      	sub	sp, #20
 801fd8c:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fd8e:	2800      	cmp	r0, #0
 801fd90:	f000 80af 	beq.w	801fef2 <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801fd94:	2f00      	cmp	r7, #0
 801fd96:	f000 80b5 	beq.w	801ff04 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801fd9a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 801fd9e:	2b07      	cmp	r3, #7
 801fda0:	f240 8091 	bls.w	801fec6 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801fda4:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801ff7c <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 801fda8:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801fdac:	f8d9 1000 	ldr.w	r1, [r9]
 801fdb0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801fdb4:	f003 f80c 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
 801fdb8:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801fdba:	8820      	ldrh	r0, [r4, #0]
 801fdbc:	f7f9 f9f4 	bl	80191a8 <lwip_htons>
 801fdc0:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801fdc2:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801fdc4:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801fdc6:	f7f9 f9ef 	bl	80191a8 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fdca:	4b64      	ldr	r3, [pc, #400]	; (801ff5c <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 801fdcc:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fdce:	681c      	ldr	r4, [r3, #0]
 801fdd0:	2c00      	cmp	r4, #0
 801fdd2:	d064      	beq.n	801fe9e <udp_input+0x11a>
  uncon_pcb = NULL;
 801fdd4:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801fdd8:	f8df c190 	ldr.w	ip, [pc, #400]	; 801ff6c <udp_input+0x1e8>
 801fddc:	4960      	ldr	r1, [pc, #384]	; (801ff60 <udp_input+0x1dc>)
  prev = NULL;
 801fdde:	465e      	mov	r6, fp
 801fde0:	e004      	b.n	801fdec <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fde2:	68e2      	ldr	r2, [r4, #12]
 801fde4:	4626      	mov	r6, r4
 801fde6:	2a00      	cmp	r2, #0
 801fde8:	d056      	beq.n	801fe98 <udp_input+0x114>
 801fdea:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801fdec:	8a62      	ldrh	r2, [r4, #18]
 801fdee:	42aa      	cmp	r2, r5
 801fdf0:	d1f7      	bne.n	801fde2 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801fdf2:	2f00      	cmp	r7, #0
 801fdf4:	d06d      	beq.n	801fed2 <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fdf6:	7a20      	ldrb	r0, [r4, #8]
 801fdf8:	b138      	cbz	r0, 801fe0a <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801fdfa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801fdfe:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801fe02:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fe04:	b2d2      	uxtb	r2, r2
 801fe06:	4290      	cmp	r0, r2
 801fe08:	d1eb      	bne.n	801fde2 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fe0a:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801fe0c:	f1ba 0f00 	cmp.w	sl, #0
 801fe10:	d038      	beq.n	801fe84 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fe12:	b13a      	cbz	r2, 801fe24 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fe14:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fe18:	1c43      	adds	r3, r0, #1
 801fe1a:	d003      	beq.n	801fe24 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801fe1c:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fe1e:	68bb      	ldr	r3, [r7, #8]
 801fe20:	4218      	tst	r0, r3
 801fe22:	d1de      	bne.n	801fde2 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801fe24:	7c20      	ldrb	r0, [r4, #16]
 801fe26:	0743      	lsls	r3, r0, #29
 801fe28:	d409      	bmi.n	801fe3e <udp_input+0xba>
        if (uncon_pcb == NULL) {
 801fe2a:	f1bb 0f00 	cmp.w	fp, #0
 801fe2e:	d059      	beq.n	801fee4 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801fe30:	f1ba 0f00 	cmp.w	sl, #0
 801fe34:	d003      	beq.n	801fe3e <udp_input+0xba>
 801fe36:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801fe3a:	3001      	adds	r0, #1
 801fe3c:	d069      	beq.n	801ff12 <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801fe3e:	8aa2      	ldrh	r2, [r4, #20]
 801fe40:	9803      	ldr	r0, [sp, #12]
 801fe42:	4282      	cmp	r2, r0
 801fe44:	d1cd      	bne.n	801fde2 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fe46:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801fe48:	b11a      	cbz	r2, 801fe52 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fe4a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801fe4e:	4282      	cmp	r2, r0
 801fe50:	d1c7      	bne.n	801fde2 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801fe52:	b12e      	cbz	r6, 801fe60 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801fe54:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 801fe56:	4a41      	ldr	r2, [pc, #260]	; (801ff5c <udp_input+0x1d8>)
          prev->next = pcb->next;
 801fe58:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 801fe5a:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 801fe5c:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 801fe5e:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fe60:	2108      	movs	r1, #8
 801fe62:	4640      	mov	r0, r8
 801fe64:	f7fb f950 	bl	801b108 <pbuf_remove_header>
 801fe68:	2800      	cmp	r0, #0
 801fe6a:	d15b      	bne.n	801ff24 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fe6c:	69a5      	ldr	r5, [r4, #24]
 801fe6e:	b355      	cbz	r5, 801fec6 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801fe70:	9b03      	ldr	r3, [sp, #12]
 801fe72:	4642      	mov	r2, r8
 801fe74:	69e0      	ldr	r0, [r4, #28]
 801fe76:	4621      	mov	r1, r4
 801fe78:	9300      	str	r3, [sp, #0]
 801fe7a:	4b3a      	ldr	r3, [pc, #232]	; (801ff64 <udp_input+0x1e0>)
 801fe7c:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fe7e:	b005      	add	sp, #20
 801fe80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801fe84:	2a00      	cmp	r2, #0
 801fe86:	d0cd      	beq.n	801fe24 <udp_input+0xa0>
 801fe88:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801fe8c:	4282      	cmp	r2, r0
 801fe8e:	d0c9      	beq.n	801fe24 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fe90:	68e2      	ldr	r2, [r4, #12]
 801fe92:	4626      	mov	r6, r4
 801fe94:	2a00      	cmp	r2, #0
 801fe96:	d1a8      	bne.n	801fdea <udp_input+0x66>
  if (pcb != NULL) {
 801fe98:	f1bb 0f00 	cmp.w	fp, #0
 801fe9c:	d15b      	bne.n	801ff56 <udp_input+0x1d2>
  if (for_us) {
 801fe9e:	687a      	ldr	r2, [r7, #4]
 801fea0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801fea4:	429a      	cmp	r2, r3
 801fea6:	d10e      	bne.n	801fec6 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fea8:	2108      	movs	r1, #8
 801feaa:	4640      	mov	r0, r8
 801feac:	f7fb f92c 	bl	801b108 <pbuf_remove_header>
 801feb0:	2800      	cmp	r0, #0
 801feb2:	d137      	bne.n	801ff24 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801feb4:	f1ba 0f00 	cmp.w	sl, #0
 801feb8:	d105      	bne.n	801fec6 <udp_input+0x142>
 801feba:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801febe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fec2:	2be0      	cmp	r3, #224	; 0xe0
 801fec4:	d13b      	bne.n	801ff3e <udp_input+0x1ba>
      pbuf_free(p);
 801fec6:	4640      	mov	r0, r8
}
 801fec8:	b005      	add	sp, #20
 801feca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801fece:	f7fb b9a7 	b.w	801b220 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801fed2:	4663      	mov	r3, ip
 801fed4:	2288      	movs	r2, #136	; 0x88
 801fed6:	4824      	ldr	r0, [pc, #144]	; (801ff68 <udp_input+0x1e4>)
 801fed8:	f005 fa6c 	bl	80253b4 <iprintf>
 801fedc:	f8df c08c 	ldr.w	ip, [pc, #140]	; 801ff6c <udp_input+0x1e8>
 801fee0:	491f      	ldr	r1, [pc, #124]	; (801ff60 <udp_input+0x1dc>)
 801fee2:	e788      	b.n	801fdf6 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 801fee4:	8aa2      	ldrh	r2, [r4, #20]
 801fee6:	46a3      	mov	fp, r4
 801fee8:	9803      	ldr	r0, [sp, #12]
 801feea:	4282      	cmp	r2, r0
 801feec:	f47f af79 	bne.w	801fde2 <udp_input+0x5e>
 801fef0:	e7a9      	b.n	801fe46 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fef2:	4b1e      	ldr	r3, [pc, #120]	; (801ff6c <udp_input+0x1e8>)
 801fef4:	22cf      	movs	r2, #207	; 0xcf
 801fef6:	491e      	ldr	r1, [pc, #120]	; (801ff70 <udp_input+0x1ec>)
 801fef8:	481b      	ldr	r0, [pc, #108]	; (801ff68 <udp_input+0x1e4>)
 801fefa:	f005 fa5b 	bl	80253b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801fefe:	2f00      	cmp	r7, #0
 801ff00:	f47f af4b 	bne.w	801fd9a <udp_input+0x16>
 801ff04:	4b19      	ldr	r3, [pc, #100]	; (801ff6c <udp_input+0x1e8>)
 801ff06:	22d0      	movs	r2, #208	; 0xd0
 801ff08:	491a      	ldr	r1, [pc, #104]	; (801ff74 <udp_input+0x1f0>)
 801ff0a:	4817      	ldr	r0, [pc, #92]	; (801ff68 <udp_input+0x1e4>)
 801ff0c:	f005 fa52 	bl	80253b4 <iprintf>
 801ff10:	e743      	b.n	801fd9a <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ff12:	6878      	ldr	r0, [r7, #4]
 801ff14:	f8db 3000 	ldr.w	r3, [fp]
 801ff18:	4283      	cmp	r3, r0
 801ff1a:	d090      	beq.n	801fe3e <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ff1c:	4290      	cmp	r0, r2
 801ff1e:	bf08      	it	eq
 801ff20:	46a3      	moveq	fp, r4
 801ff22:	e78c      	b.n	801fe3e <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ff24:	4b11      	ldr	r3, [pc, #68]	; (801ff6c <udp_input+0x1e8>)
 801ff26:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ff2a:	4913      	ldr	r1, [pc, #76]	; (801ff78 <udp_input+0x1f4>)
 801ff2c:	480e      	ldr	r0, [pc, #56]	; (801ff68 <udp_input+0x1e4>)
 801ff2e:	f005 fa41 	bl	80253b4 <iprintf>
      pbuf_free(p);
 801ff32:	4640      	mov	r0, r8
}
 801ff34:	b005      	add	sp, #20
 801ff36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801ff3a:	f7fb b971 	b.w	801b220 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ff3e:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801ff42:	4640      	mov	r0, r8
 801ff44:	3108      	adds	r1, #8
 801ff46:	b209      	sxth	r1, r1
 801ff48:	f7fb f916 	bl	801b178 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ff4c:	2103      	movs	r1, #3
 801ff4e:	4640      	mov	r0, r8
 801ff50:	f002 fd5a 	bl	8022a08 <icmp_dest_unreach>
 801ff54:	e7b7      	b.n	801fec6 <udp_input+0x142>
 801ff56:	465c      	mov	r4, fp
 801ff58:	e782      	b.n	801fe60 <udp_input+0xdc>
 801ff5a:	bf00      	nop
 801ff5c:	2002e124 	.word	0x2002e124
 801ff60:	08045088 	.word	0x08045088
 801ff64:	2001ef30 	.word	0x2001ef30
 801ff68:	0802a008 	.word	0x0802a008
 801ff6c:	08045024 	.word	0x08045024
 801ff70:	08045054 	.word	0x08045054
 801ff74:	0804506c 	.word	0x0804506c
 801ff78:	080450b0 	.word	0x080450b0
 801ff7c:	2001ef20 	.word	0x2001ef20

0801ff80 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801ff80:	4b38      	ldr	r3, [pc, #224]	; (8020064 <udp_bind+0xe4>)
 801ff82:	2900      	cmp	r1, #0
{
 801ff84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801ff88:	bf08      	it	eq
 801ff8a:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff8c:	2800      	cmp	r0, #0
 801ff8e:	d05e      	beq.n	802004e <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff90:	4f35      	ldr	r7, [pc, #212]	; (8020068 <udp_bind+0xe8>)
 801ff92:	683e      	ldr	r6, [r7, #0]
 801ff94:	b34e      	cbz	r6, 801ffea <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ff96:	42b0      	cmp	r0, r6
 801ff98:	d031      	beq.n	801fffe <udp_bind+0x7e>
 801ff9a:	4634      	mov	r4, r6
 801ff9c:	e001      	b.n	801ffa2 <udp_bind+0x22>
 801ff9e:	42a0      	cmp	r0, r4
 801ffa0:	d02d      	beq.n	801fffe <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ffa2:	68e4      	ldr	r4, [r4, #12]
 801ffa4:	2c00      	cmp	r4, #0
 801ffa6:	d1fa      	bne.n	801ff9e <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ffa8:	b362      	cbz	r2, 8020004 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffaa:	680d      	ldr	r5, [r1, #0]
 801ffac:	4633      	mov	r3, r6
 801ffae:	e001      	b.n	801ffb4 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ffb0:	68db      	ldr	r3, [r3, #12]
 801ffb2:	b19b      	cbz	r3, 801ffdc <udp_bind+0x5c>
      if (pcb != ipcb) {
 801ffb4:	4298      	cmp	r0, r3
 801ffb6:	d0fb      	beq.n	801ffb0 <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 801ffb8:	8a59      	ldrh	r1, [r3, #18]
 801ffba:	4291      	cmp	r1, r2
 801ffbc:	d1f8      	bne.n	801ffb0 <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffbe:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801ffc0:	2900      	cmp	r1, #0
 801ffc2:	bf18      	it	ne
 801ffc4:	42a9      	cmpne	r1, r5
 801ffc6:	d001      	beq.n	801ffcc <udp_bind+0x4c>
 801ffc8:	2d00      	cmp	r5, #0
 801ffca:	d1f1      	bne.n	801ffb0 <udp_bind+0x30>
      return ERR_USE;
 801ffcc:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801ffd0:	4618      	mov	r0, r3
 801ffd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffd6:	680d      	ldr	r5, [r1, #0]
 801ffd8:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ffdc:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801ffde:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801ffe0:	b13c      	cbz	r4, 801fff2 <udp_bind+0x72>
  return ERR_OK;
 801ffe2:	2300      	movs	r3, #0
}
 801ffe4:	4618      	mov	r0, r3
 801ffe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801ffea:	b372      	cbz	r2, 802004a <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffec:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801ffee:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fff0:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801fff2:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801fff4:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801fff6:	6038      	str	r0, [r7, #0]
}
 801fff8:	4618      	mov	r0, r3
 801fffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801fffe:	2401      	movs	r4, #1
  if (port == 0) {
 8020000:	2a00      	cmp	r2, #0
 8020002:	d1d2      	bne.n	801ffaa <udp_bind+0x2a>
 8020004:	f8df e070 	ldr.w	lr, [pc, #112]	; 8020078 <udp_bind+0xf8>
  rebind = 0;
 8020008:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 802000c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8020010:	f8be 2000 	ldrh.w	r2, [lr]
 8020014:	4542      	cmp	r2, r8
 8020016:	d015      	beq.n	8020044 <udp_bind+0xc4>
 8020018:	3201      	adds	r2, #1
 802001a:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802001c:	2e00      	cmp	r6, #0
 802001e:	d0da      	beq.n	801ffd6 <udp_bind+0x56>
 8020020:	4633      	mov	r3, r6
 8020022:	e002      	b.n	802002a <udp_bind+0xaa>
 8020024:	68db      	ldr	r3, [r3, #12]
 8020026:	2b00      	cmp	r3, #0
 8020028:	d0d5      	beq.n	801ffd6 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 802002a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 802002e:	4594      	cmp	ip, r2
 8020030:	d1f8      	bne.n	8020024 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8020032:	3d01      	subs	r5, #1
 8020034:	b2ad      	uxth	r5, r5
 8020036:	2d00      	cmp	r5, #0
 8020038:	d1ec      	bne.n	8020014 <udp_bind+0x94>
      return ERR_USE;
 802003a:	f06f 0307 	mvn.w	r3, #7
 802003e:	f8ae 2000 	strh.w	r2, [lr]
 8020042:	e7cf      	b.n	801ffe4 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8020044:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8020048:	e7e8      	b.n	802001c <udp_bind+0x9c>
  rebind = 0;
 802004a:	4634      	mov	r4, r6
 802004c:	e7da      	b.n	8020004 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 802004e:	4b07      	ldr	r3, [pc, #28]	; (802006c <udp_bind+0xec>)
 8020050:	f240 32b7 	movw	r2, #951	; 0x3b7
 8020054:	4906      	ldr	r1, [pc, #24]	; (8020070 <udp_bind+0xf0>)
 8020056:	4807      	ldr	r0, [pc, #28]	; (8020074 <udp_bind+0xf4>)
 8020058:	f005 f9ac 	bl	80253b4 <iprintf>
 802005c:	f06f 030f 	mvn.w	r3, #15
 8020060:	e7c0      	b.n	801ffe4 <udp_bind+0x64>
 8020062:	bf00      	nop
 8020064:	080459a4 	.word	0x080459a4
 8020068:	2002e124 	.word	0x2002e124
 802006c:	08045024 	.word	0x08045024
 8020070:	080450cc 	.word	0x080450cc
 8020074:	0802a008 	.word	0x0802a008
 8020078:	2000041a 	.word	0x2000041a

0802007c <udp_sendto_if_src>:
{
 802007c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020080:	b085      	sub	sp, #20
 8020082:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8020086:	2800      	cmp	r0, #0
 8020088:	f000 8087 	beq.w	802019a <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 802008c:	460d      	mov	r5, r1
 802008e:	2900      	cmp	r1, #0
 8020090:	d079      	beq.n	8020186 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020092:	4690      	mov	r8, r2
 8020094:	2a00      	cmp	r2, #0
 8020096:	d06c      	beq.n	8020172 <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8020098:	f1ba 0f00 	cmp.w	sl, #0
 802009c:	d05f      	beq.n	802015e <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802009e:	f1bb 0f00 	cmp.w	fp, #0
 80200a2:	f000 8084 	beq.w	80201ae <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 80200a6:	8a42      	ldrh	r2, [r0, #18]
 80200a8:	4699      	mov	r9, r3
 80200aa:	4604      	mov	r4, r0
 80200ac:	b39a      	cbz	r2, 8020116 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80200ae:	892a      	ldrh	r2, [r5, #8]
 80200b0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80200b4:	429a      	cmp	r2, r3
 80200b6:	d84f      	bhi.n	8020158 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 80200b8:	2108      	movs	r1, #8
 80200ba:	4628      	mov	r0, r5
 80200bc:	f7fa fff0 	bl	801b0a0 <pbuf_add_header>
 80200c0:	bb98      	cbnz	r0, 802012a <udp_sendto_if_src+0xae>
 80200c2:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80200c4:	8973      	ldrh	r3, [r6, #10]
 80200c6:	2b07      	cmp	r3, #7
 80200c8:	d93e      	bls.n	8020148 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 80200ca:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 80200cc:	8a60      	ldrh	r0, [r4, #18]
 80200ce:	f7f9 f86b 	bl	80191a8 <lwip_htons>
 80200d2:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 80200d4:	4648      	mov	r0, r9
 80200d6:	f7f9 f867 	bl	80191a8 <lwip_htons>
  udphdr->chksum = 0x0000;
 80200da:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 80200dc:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 80200de:	71bb      	strb	r3, [r7, #6]
 80200e0:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 80200e2:	8930      	ldrh	r0, [r6, #8]
 80200e4:	f7f9 f860 	bl	80191a8 <lwip_htons>
 80200e8:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80200ea:	f8cd b008 	str.w	fp, [sp, #8]
 80200ee:	2011      	movs	r0, #17
 80200f0:	7aa3      	ldrb	r3, [r4, #10]
 80200f2:	4642      	mov	r2, r8
 80200f4:	4651      	mov	r1, sl
 80200f6:	9300      	str	r3, [sp, #0]
 80200f8:	7ae3      	ldrb	r3, [r4, #11]
 80200fa:	9001      	str	r0, [sp, #4]
 80200fc:	4630      	mov	r0, r6
 80200fe:	f002 fdb9 	bl	8022c74 <ip4_output_if_src>
  if (q != p) {
 8020102:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8020104:	4607      	mov	r7, r0
  if (q != p) {
 8020106:	d002      	beq.n	802010e <udp_sendto_if_src+0x92>
    pbuf_free(q);
 8020108:	4630      	mov	r0, r6
 802010a:	f7fb f889 	bl	801b220 <pbuf_free>
}
 802010e:	4638      	mov	r0, r7
 8020110:	b005      	add	sp, #20
 8020112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8020116:	4601      	mov	r1, r0
 8020118:	f7ff ff32 	bl	801ff80 <udp_bind>
    if (err != ERR_OK) {
 802011c:	4607      	mov	r7, r0
 802011e:	2800      	cmp	r0, #0
 8020120:	d0c5      	beq.n	80200ae <udp_sendto_if_src+0x32>
}
 8020122:	4638      	mov	r0, r7
 8020124:	b005      	add	sp, #20
 8020126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 802012a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802012e:	2108      	movs	r1, #8
 8020130:	2022      	movs	r0, #34	; 0x22
 8020132:	f7fa fea3 	bl	801ae7c <pbuf_alloc>
    if (q == NULL) {
 8020136:	4606      	mov	r6, r0
 8020138:	b170      	cbz	r0, 8020158 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 802013a:	892b      	ldrh	r3, [r5, #8]
 802013c:	2b00      	cmp	r3, #0
 802013e:	d0c1      	beq.n	80200c4 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 8020140:	4629      	mov	r1, r5
 8020142:	f7fb f8db 	bl	801b2fc <pbuf_chain>
 8020146:	e7bd      	b.n	80200c4 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8020148:	4b1e      	ldr	r3, [pc, #120]	; (80201c4 <udp_sendto_if_src+0x148>)
 802014a:	f240 320d 	movw	r2, #781	; 0x30d
 802014e:	491e      	ldr	r1, [pc, #120]	; (80201c8 <udp_sendto_if_src+0x14c>)
 8020150:	481e      	ldr	r0, [pc, #120]	; (80201cc <udp_sendto_if_src+0x150>)
 8020152:	f005 f92f 	bl	80253b4 <iprintf>
 8020156:	e7b8      	b.n	80200ca <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 8020158:	f04f 37ff 	mov.w	r7, #4294967295
 802015c:	e7d7      	b.n	802010e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 802015e:	4b19      	ldr	r3, [pc, #100]	; (80201c4 <udp_sendto_if_src+0x148>)
 8020160:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8020164:	491a      	ldr	r1, [pc, #104]	; (80201d0 <udp_sendto_if_src+0x154>)
 8020166:	f06f 070f 	mvn.w	r7, #15
 802016a:	4818      	ldr	r0, [pc, #96]	; (80201cc <udp_sendto_if_src+0x150>)
 802016c:	f005 f922 	bl	80253b4 <iprintf>
 8020170:	e7cd      	b.n	802010e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020172:	4b14      	ldr	r3, [pc, #80]	; (80201c4 <udp_sendto_if_src+0x148>)
 8020174:	f240 22d3 	movw	r2, #723	; 0x2d3
 8020178:	4916      	ldr	r1, [pc, #88]	; (80201d4 <udp_sendto_if_src+0x158>)
 802017a:	f06f 070f 	mvn.w	r7, #15
 802017e:	4813      	ldr	r0, [pc, #76]	; (80201cc <udp_sendto_if_src+0x150>)
 8020180:	f005 f918 	bl	80253b4 <iprintf>
 8020184:	e7c3      	b.n	802010e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8020186:	4b0f      	ldr	r3, [pc, #60]	; (80201c4 <udp_sendto_if_src+0x148>)
 8020188:	f240 22d2 	movw	r2, #722	; 0x2d2
 802018c:	4912      	ldr	r1, [pc, #72]	; (80201d8 <udp_sendto_if_src+0x15c>)
 802018e:	f06f 070f 	mvn.w	r7, #15
 8020192:	480e      	ldr	r0, [pc, #56]	; (80201cc <udp_sendto_if_src+0x150>)
 8020194:	f005 f90e 	bl	80253b4 <iprintf>
 8020198:	e7b9      	b.n	802010e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802019a:	4b0a      	ldr	r3, [pc, #40]	; (80201c4 <udp_sendto_if_src+0x148>)
 802019c:	f240 22d1 	movw	r2, #721	; 0x2d1
 80201a0:	490e      	ldr	r1, [pc, #56]	; (80201dc <udp_sendto_if_src+0x160>)
 80201a2:	f06f 070f 	mvn.w	r7, #15
 80201a6:	4809      	ldr	r0, [pc, #36]	; (80201cc <udp_sendto_if_src+0x150>)
 80201a8:	f005 f904 	bl	80253b4 <iprintf>
 80201ac:	e7af      	b.n	802010e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80201ae:	4b05      	ldr	r3, [pc, #20]	; (80201c4 <udp_sendto_if_src+0x148>)
 80201b0:	f240 22d5 	movw	r2, #725	; 0x2d5
 80201b4:	490a      	ldr	r1, [pc, #40]	; (80201e0 <udp_sendto_if_src+0x164>)
 80201b6:	f06f 070f 	mvn.w	r7, #15
 80201ba:	4804      	ldr	r0, [pc, #16]	; (80201cc <udp_sendto_if_src+0x150>)
 80201bc:	f005 f8fa 	bl	80253b4 <iprintf>
 80201c0:	e7a5      	b.n	802010e <udp_sendto_if_src+0x92>
 80201c2:	bf00      	nop
 80201c4:	08045024 	.word	0x08045024
 80201c8:	08045190 	.word	0x08045190
 80201cc:	0802a008 	.word	0x0802a008
 80201d0:	08045148 	.word	0x08045148
 80201d4:	08045124 	.word	0x08045124
 80201d8:	08045104 	.word	0x08045104
 80201dc:	080450e4 	.word	0x080450e4
 80201e0:	0804516c 	.word	0x0804516c

080201e4 <udp_sendto_if>:
{
 80201e4:	b570      	push	{r4, r5, r6, lr}
 80201e6:	b082      	sub	sp, #8
 80201e8:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80201ea:	2800      	cmp	r0, #0
 80201ec:	d036      	beq.n	802025c <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80201ee:	b359      	cbz	r1, 8020248 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80201f0:	b302      	cbz	r2, 8020234 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80201f2:	b1ac      	cbz	r4, 8020220 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80201f4:	6805      	ldr	r5, [r0, #0]
 80201f6:	b935      	cbnz	r5, 8020206 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 80201f8:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80201fa:	e9cd 4500 	strd	r4, r5, [sp]
 80201fe:	f7ff ff3d 	bl	802007c <udp_sendto_if_src>
}
 8020202:	b002      	add	sp, #8
 8020204:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8020206:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802020a:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 802020e:	d0f3      	beq.n	80201f8 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8020210:	6866      	ldr	r6, [r4, #4]
 8020212:	42b5      	cmp	r5, r6
 8020214:	d101      	bne.n	802021a <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020216:	4605      	mov	r5, r0
 8020218:	e7ef      	b.n	80201fa <udp_sendto_if+0x16>
        return ERR_RTE;
 802021a:	f06f 0003 	mvn.w	r0, #3
 802021e:	e7f0      	b.n	8020202 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8020220:	4b13      	ldr	r3, [pc, #76]	; (8020270 <udp_sendto_if+0x8c>)
 8020222:	f240 2283 	movw	r2, #643	; 0x283
 8020226:	4913      	ldr	r1, [pc, #76]	; (8020274 <udp_sendto_if+0x90>)
 8020228:	4813      	ldr	r0, [pc, #76]	; (8020278 <udp_sendto_if+0x94>)
 802022a:	f005 f8c3 	bl	80253b4 <iprintf>
 802022e:	f06f 000f 	mvn.w	r0, #15
 8020232:	e7e6      	b.n	8020202 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020234:	4b0e      	ldr	r3, [pc, #56]	; (8020270 <udp_sendto_if+0x8c>)
 8020236:	f240 2282 	movw	r2, #642	; 0x282
 802023a:	4910      	ldr	r1, [pc, #64]	; (802027c <udp_sendto_if+0x98>)
 802023c:	480e      	ldr	r0, [pc, #56]	; (8020278 <udp_sendto_if+0x94>)
 802023e:	f005 f8b9 	bl	80253b4 <iprintf>
 8020242:	f06f 000f 	mvn.w	r0, #15
 8020246:	e7dc      	b.n	8020202 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8020248:	4b09      	ldr	r3, [pc, #36]	; (8020270 <udp_sendto_if+0x8c>)
 802024a:	f240 2281 	movw	r2, #641	; 0x281
 802024e:	490c      	ldr	r1, [pc, #48]	; (8020280 <udp_sendto_if+0x9c>)
 8020250:	4809      	ldr	r0, [pc, #36]	; (8020278 <udp_sendto_if+0x94>)
 8020252:	f005 f8af 	bl	80253b4 <iprintf>
 8020256:	f06f 000f 	mvn.w	r0, #15
 802025a:	e7d2      	b.n	8020202 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802025c:	4b04      	ldr	r3, [pc, #16]	; (8020270 <udp_sendto_if+0x8c>)
 802025e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020262:	4908      	ldr	r1, [pc, #32]	; (8020284 <udp_sendto_if+0xa0>)
 8020264:	4804      	ldr	r0, [pc, #16]	; (8020278 <udp_sendto_if+0x94>)
 8020266:	f005 f8a5 	bl	80253b4 <iprintf>
 802026a:	f06f 000f 	mvn.w	r0, #15
 802026e:	e7c8      	b.n	8020202 <udp_sendto_if+0x1e>
 8020270:	08045024 	.word	0x08045024
 8020274:	08045218 	.word	0x08045218
 8020278:	0802a008 	.word	0x0802a008
 802027c:	080451f8 	.word	0x080451f8
 8020280:	080451dc 	.word	0x080451dc
 8020284:	080451c0 	.word	0x080451c0

08020288 <udp_sendto>:
{
 8020288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802028c:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802028e:	b388      	cbz	r0, 80202f4 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8020290:	460e      	mov	r6, r1
 8020292:	b329      	cbz	r1, 80202e0 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020294:	4615      	mov	r5, r2
 8020296:	b1ca      	cbz	r2, 80202cc <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8020298:	4604      	mov	r4, r0
 802029a:	7a00      	ldrb	r0, [r0, #8]
 802029c:	4698      	mov	r8, r3
 802029e:	b168      	cbz	r0, 80202bc <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 80202a0:	f7fa fc98 	bl	801abd4 <netif_get_by_index>
 80202a4:	4607      	mov	r7, r0
  if (netif == NULL) {
 80202a6:	b177      	cbz	r7, 80202c6 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80202a8:	4643      	mov	r3, r8
 80202aa:	462a      	mov	r2, r5
 80202ac:	4631      	mov	r1, r6
 80202ae:	4620      	mov	r0, r4
 80202b0:	9700      	str	r7, [sp, #0]
 80202b2:	f7ff ff97 	bl	80201e4 <udp_sendto_if>
}
 80202b6:	b002      	add	sp, #8
 80202b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 80202bc:	4610      	mov	r0, r2
 80202be:	f002 fbab 	bl	8022a18 <ip4_route>
 80202c2:	4607      	mov	r7, r0
 80202c4:	e7ef      	b.n	80202a6 <udp_sendto+0x1e>
    return ERR_RTE;
 80202c6:	f06f 0003 	mvn.w	r0, #3
 80202ca:	e7f4      	b.n	80202b6 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80202cc:	4b0e      	ldr	r3, [pc, #56]	; (8020308 <udp_sendto+0x80>)
 80202ce:	f240 221a 	movw	r2, #538	; 0x21a
 80202d2:	490e      	ldr	r1, [pc, #56]	; (802030c <udp_sendto+0x84>)
 80202d4:	480e      	ldr	r0, [pc, #56]	; (8020310 <udp_sendto+0x88>)
 80202d6:	f005 f86d 	bl	80253b4 <iprintf>
 80202da:	f06f 000f 	mvn.w	r0, #15
 80202de:	e7ea      	b.n	80202b6 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80202e0:	4b09      	ldr	r3, [pc, #36]	; (8020308 <udp_sendto+0x80>)
 80202e2:	f240 2219 	movw	r2, #537	; 0x219
 80202e6:	490b      	ldr	r1, [pc, #44]	; (8020314 <udp_sendto+0x8c>)
 80202e8:	4809      	ldr	r0, [pc, #36]	; (8020310 <udp_sendto+0x88>)
 80202ea:	f005 f863 	bl	80253b4 <iprintf>
 80202ee:	f06f 000f 	mvn.w	r0, #15
 80202f2:	e7e0      	b.n	80202b6 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80202f4:	4b04      	ldr	r3, [pc, #16]	; (8020308 <udp_sendto+0x80>)
 80202f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80202fa:	4907      	ldr	r1, [pc, #28]	; (8020318 <udp_sendto+0x90>)
 80202fc:	4804      	ldr	r0, [pc, #16]	; (8020310 <udp_sendto+0x88>)
 80202fe:	f005 f859 	bl	80253b4 <iprintf>
 8020302:	f06f 000f 	mvn.w	r0, #15
 8020306:	e7d6      	b.n	80202b6 <udp_sendto+0x2e>
 8020308:	08045024 	.word	0x08045024
 802030c:	0804526c 	.word	0x0804526c
 8020310:	0802a008 	.word	0x0802a008
 8020314:	08045250 	.word	0x08045250
 8020318:	08045238 	.word	0x08045238

0802031c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 802031c:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 802031e:	b320      	cbz	r0, 802036a <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8020320:	460d      	mov	r5, r1
 8020322:	b361      	cbz	r1, 802037e <udp_connect+0x62>

  if (pcb->local_port == 0) {
 8020324:	4616      	mov	r6, r2
 8020326:	8a42      	ldrh	r2, [r0, #18]
 8020328:	4604      	mov	r4, r0
 802032a:	b1c2      	cbz	r2, 802035e <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 802032c:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802032e:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020330:	4918      	ldr	r1, [pc, #96]	; (8020394 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8020332:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8020336:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020338:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 802033a:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802033c:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802033e:	b142      	cbz	r2, 8020352 <udp_connect+0x36>
    if (pcb == ipcb) {
 8020340:	4294      	cmp	r4, r2
 8020342:	d00a      	beq.n	802035a <udp_connect+0x3e>
 8020344:	4613      	mov	r3, r2
 8020346:	e001      	b.n	802034c <udp_connect+0x30>
 8020348:	429c      	cmp	r4, r3
 802034a:	d006      	beq.n	802035a <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802034c:	68db      	ldr	r3, [r3, #12]
 802034e:	2b00      	cmp	r3, #0
 8020350:	d1fa      	bne.n	8020348 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 8020352:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 8020354:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8020356:	600c      	str	r4, [r1, #0]
}
 8020358:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 802035a:	2000      	movs	r0, #0
}
 802035c:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 802035e:	4601      	mov	r1, r0
 8020360:	f7ff fe0e 	bl	801ff80 <udp_bind>
    if (err != ERR_OK) {
 8020364:	2800      	cmp	r0, #0
 8020366:	d0e1      	beq.n	802032c <udp_connect+0x10>
}
 8020368:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 802036a:	4b0b      	ldr	r3, [pc, #44]	; (8020398 <udp_connect+0x7c>)
 802036c:	f240 4235 	movw	r2, #1077	; 0x435
 8020370:	490a      	ldr	r1, [pc, #40]	; (802039c <udp_connect+0x80>)
 8020372:	480b      	ldr	r0, [pc, #44]	; (80203a0 <udp_connect+0x84>)
 8020374:	f005 f81e 	bl	80253b4 <iprintf>
 8020378:	f06f 000f 	mvn.w	r0, #15
}
 802037c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 802037e:	4b06      	ldr	r3, [pc, #24]	; (8020398 <udp_connect+0x7c>)
 8020380:	f240 4236 	movw	r2, #1078	; 0x436
 8020384:	4907      	ldr	r1, [pc, #28]	; (80203a4 <udp_connect+0x88>)
 8020386:	4806      	ldr	r0, [pc, #24]	; (80203a0 <udp_connect+0x84>)
 8020388:	f005 f814 	bl	80253b4 <iprintf>
 802038c:	f06f 000f 	mvn.w	r0, #15
}
 8020390:	bd70      	pop	{r4, r5, r6, pc}
 8020392:	bf00      	nop
 8020394:	2002e124 	.word	0x2002e124
 8020398:	08045024 	.word	0x08045024
 802039c:	08045288 	.word	0x08045288
 80203a0:	0802a008 	.word	0x0802a008
 80203a4:	080452a4 	.word	0x080452a4

080203a8 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80203a8:	b110      	cbz	r0, 80203b0 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 80203aa:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 80203ae:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80203b0:	4b03      	ldr	r3, [pc, #12]	; (80203c0 <udp_recv+0x18>)
 80203b2:	f240 428a 	movw	r2, #1162	; 0x48a
 80203b6:	4903      	ldr	r1, [pc, #12]	; (80203c4 <udp_recv+0x1c>)
 80203b8:	4803      	ldr	r0, [pc, #12]	; (80203c8 <udp_recv+0x20>)
 80203ba:	f004 bffb 	b.w	80253b4 <iprintf>
 80203be:	bf00      	nop
 80203c0:	08045024 	.word	0x08045024
 80203c4:	080452c0 	.word	0x080452c0
 80203c8:	0802a008 	.word	0x0802a008

080203cc <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80203cc:	4601      	mov	r1, r0
 80203ce:	b1c0      	cbz	r0, 8020402 <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80203d0:	4b0f      	ldr	r3, [pc, #60]	; (8020410 <udp_remove+0x44>)
 80203d2:	681a      	ldr	r2, [r3, #0]
 80203d4:	4282      	cmp	r2, r0
 80203d6:	d00a      	beq.n	80203ee <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80203d8:	b132      	cbz	r2, 80203e8 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80203da:	68d3      	ldr	r3, [r2, #12]
 80203dc:	428b      	cmp	r3, r1
 80203de:	d100      	bne.n	80203e2 <udp_remove+0x16>
 80203e0:	b953      	cbnz	r3, 80203f8 <udp_remove+0x2c>
 80203e2:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80203e4:	2a00      	cmp	r2, #0
 80203e6:	d1f8      	bne.n	80203da <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80203e8:	2001      	movs	r0, #1
 80203ea:	f7fa ba01 	b.w	801a7f0 <memp_free>
    udp_pcbs = udp_pcbs->next;
 80203ee:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80203f0:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 80203f2:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 80203f4:	f7fa b9fc 	b.w	801a7f0 <memp_free>
        pcb2->next = pcb->next;
 80203f8:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80203fa:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 80203fc:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80203fe:	f7fa b9f7 	b.w	801a7f0 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8020402:	4b04      	ldr	r3, [pc, #16]	; (8020414 <udp_remove+0x48>)
 8020404:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8020408:	4903      	ldr	r1, [pc, #12]	; (8020418 <udp_remove+0x4c>)
 802040a:	4804      	ldr	r0, [pc, #16]	; (802041c <udp_remove+0x50>)
 802040c:	f004 bfd2 	b.w	80253b4 <iprintf>
 8020410:	2002e124 	.word	0x2002e124
 8020414:	08045024 	.word	0x08045024
 8020418:	080452d8 	.word	0x080452d8
 802041c:	0802a008 	.word	0x0802a008

08020420 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8020420:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8020422:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8020426:	4907      	ldr	r1, [pc, #28]	; (8020444 <udp_new+0x24>)
 8020428:	2001      	movs	r0, #1
 802042a:	f7fa f9ab 	bl	801a784 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802042e:	4604      	mov	r4, r0
 8020430:	b128      	cbz	r0, 802043e <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8020432:	2220      	movs	r2, #32
 8020434:	2100      	movs	r1, #0
 8020436:	f004 f81f 	bl	8024478 <memset>
    pcb->ttl = UDP_TTL;
 802043a:	23ff      	movs	r3, #255	; 0xff
 802043c:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 802043e:	4620      	mov	r0, r4
 8020440:	bd10      	pop	{r4, pc}
 8020442:	bf00      	nop
 8020444:	08045024 	.word	0x08045024

08020448 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8020448:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802044a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 802044e:	4907      	ldr	r1, [pc, #28]	; (802046c <udp_new_ip_type+0x24>)
 8020450:	2001      	movs	r0, #1
 8020452:	f7fa f997 	bl	801a784 <memp_malloc_fn>
  if (pcb != NULL) {
 8020456:	4604      	mov	r4, r0
 8020458:	b128      	cbz	r0, 8020466 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 802045a:	2220      	movs	r2, #32
 802045c:	2100      	movs	r1, #0
 802045e:	f004 f80b 	bl	8024478 <memset>
    pcb->ttl = UDP_TTL;
 8020462:	23ff      	movs	r3, #255	; 0xff
 8020464:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 8020466:	4620      	mov	r0, r4
 8020468:	bd10      	pop	{r4, pc}
 802046a:	bf00      	nop
 802046c:	08045024 	.word	0x08045024

08020470 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8020470:	b110      	cbz	r0, 8020478 <udp_netif_ip_addr_changed+0x8>
 8020472:	6802      	ldr	r2, [r0, #0]
 8020474:	b101      	cbz	r1, 8020478 <udp_netif_ip_addr_changed+0x8>
 8020476:	b902      	cbnz	r2, 802047a <udp_netif_ip_addr_changed+0xa>
 8020478:	4770      	bx	lr
 802047a:	680b      	ldr	r3, [r1, #0]
 802047c:	2b00      	cmp	r3, #0
 802047e:	d0fb      	beq.n	8020478 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020480:	4b08      	ldr	r3, [pc, #32]	; (80204a4 <udp_netif_ip_addr_changed+0x34>)
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	2b00      	cmp	r3, #0
 8020486:	d0f7      	beq.n	8020478 <udp_netif_ip_addr_changed+0x8>
{
 8020488:	b410      	push	{r4}
 802048a:	e000      	b.n	802048e <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802048c:	6802      	ldr	r2, [r0, #0]
 802048e:	681c      	ldr	r4, [r3, #0]
 8020490:	4294      	cmp	r4, r2
 8020492:	d101      	bne.n	8020498 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8020494:	680a      	ldr	r2, [r1, #0]
 8020496:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020498:	68db      	ldr	r3, [r3, #12]
 802049a:	2b00      	cmp	r3, #0
 802049c:	d1f6      	bne.n	802048c <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 802049e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80204a2:	4770      	bx	lr
 80204a4:	2002e124 	.word	0x2002e124

080204a8 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80204a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80204aa:	1d07      	adds	r7, r0, #4
{
 80204ac:	4604      	mov	r4, r0
 80204ae:	460d      	mov	r5, r1
 80204b0:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80204b2:	2f44      	cmp	r7, #68	; 0x44
 80204b4:	d80e      	bhi.n	80204d4 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80204b6:	0e33      	lsrs	r3, r6, #24
 80204b8:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80204ba:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80204bc:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80204be:	b292      	uxth	r2, r2
 80204c0:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80204c2:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80204c4:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80204c6:	0a32      	lsrs	r2, r6, #8
 80204c8:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80204ca:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80204cc:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 80204ce:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80204d0:	552e      	strb	r6, [r5, r4]
}
 80204d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80204d4:	4b03      	ldr	r3, [pc, #12]	; (80204e4 <dhcp_option_long+0x3c>)
 80204d6:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80204da:	4903      	ldr	r1, [pc, #12]	; (80204e8 <dhcp_option_long+0x40>)
 80204dc:	4803      	ldr	r0, [pc, #12]	; (80204ec <dhcp_option_long+0x44>)
 80204de:	f004 ff69 	bl	80253b4 <iprintf>
 80204e2:	e7e8      	b.n	80204b6 <dhcp_option_long+0xe>
 80204e4:	080452f0 	.word	0x080452f0
 80204e8:	08045328 	.word	0x08045328
 80204ec:	0802a008 	.word	0x0802a008

080204f0 <dhcp_check>:
{
 80204f0:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80204f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 80204f4:	7963      	ldrb	r3, [r4, #5]
 80204f6:	2b08      	cmp	r3, #8
 80204f8:	d004      	beq.n	8020504 <dhcp_check+0x14>
    dhcp->tries = 0;
 80204fa:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80204fc:	2208      	movs	r2, #8
    dhcp->tries = 0;
 80204fe:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 8020500:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 8020502:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8020504:	2200      	movs	r2, #0
 8020506:	f104 011c 	add.w	r1, r4, #28
 802050a:	f001 ffab 	bl	8022464 <etharp_query>
  if (dhcp->tries < 255) {
 802050e:	79a3      	ldrb	r3, [r4, #6]
 8020510:	2bff      	cmp	r3, #255	; 0xff
 8020512:	d001      	beq.n	8020518 <dhcp_check+0x28>
    dhcp->tries++;
 8020514:	3301      	adds	r3, #1
 8020516:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020518:	2301      	movs	r3, #1
 802051a:	8123      	strh	r3, [r4, #8]
}
 802051c:	bd10      	pop	{r4, pc}
 802051e:	bf00      	nop

08020520 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8020520:	2800      	cmp	r0, #0
 8020522:	f000 808e 	beq.w	8020642 <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 8020526:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8020528:	2900      	cmp	r1, #0
 802052a:	f000 8091 	beq.w	8020650 <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 802052e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 8020530:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8020532:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 8020536:	b500      	push	{lr}
  dhcp->lease_used = 0;
 8020538:	824a      	strh	r2, [r1, #18]
{
 802053a:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 802053c:	d00e      	beq.n	802055c <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802053e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8020540:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8020544:	d258      	bcs.n	80205f8 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020546:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 802054a:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802054c:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 8020550:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 8020554:	f200 8083 	bhi.w	802065e <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 8020558:	2301      	movs	r3, #1
 802055a:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802055c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 802055e:	1c5a      	adds	r2, r3, #1
 8020560:	d050      	beq.n	8020604 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020562:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8020564:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8020568:	d241      	bcs.n	80205ee <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802056a:	4a40      	ldr	r2, [pc, #256]	; (802066c <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 802056c:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802056e:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 8020572:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 8020576:	d874      	bhi.n	8020662 <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 8020578:	2301      	movs	r3, #1
 802057a:	469c      	mov	ip, r3
 802057c:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802057e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8020580:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8020584:	1c53      	adds	r3, r2, #1
 8020586:	d042      	beq.n	802060e <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020588:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 802058a:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 802058e:	d24b      	bcs.n	8020628 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020590:	4b36      	ldr	r3, [pc, #216]	; (802066c <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 8020592:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020594:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8020598:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 802059c:	d864      	bhi.n	8020668 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 802059e:	2201      	movs	r2, #1
 80205a0:	4613      	mov	r3, r2
 80205a2:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80205a4:	2201      	movs	r2, #1
 80205a6:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80205a8:	459c      	cmp	ip, r3
 80205aa:	d302      	bcc.n	80205b2 <dhcp_bind+0x92>
 80205ac:	b10a      	cbz	r2, 80205b2 <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 80205ae:	2300      	movs	r3, #0
 80205b0:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 80205b2:	79cb      	ldrb	r3, [r1, #7]
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d02f      	beq.n	8020618 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80205b8:	6a0b      	ldr	r3, [r1, #32]
 80205ba:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80205bc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80205be:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80205c0:	b92b      	cbnz	r3, 80205ce <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80205c2:	69cb      	ldr	r3, [r1, #28]
 80205c4:	9a00      	ldr	r2, [sp, #0]
 80205c6:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80205c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80205cc:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 80205ce:	794b      	ldrb	r3, [r1, #5]
 80205d0:	2b0a      	cmp	r3, #10
 80205d2:	d004      	beq.n	80205de <dhcp_bind+0xbe>
    dhcp->tries = 0;
 80205d4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80205d6:	220a      	movs	r2, #10
    dhcp->tries = 0;
 80205d8:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 80205da:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 80205dc:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80205de:	ab01      	add	r3, sp, #4
 80205e0:	466a      	mov	r2, sp
 80205e2:	311c      	adds	r1, #28
 80205e4:	f7fa f982 	bl	801a8ec <netif_set_addr>
}
 80205e8:	b003      	add	sp, #12
 80205ea:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 80205ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80205f2:	469c      	mov	ip, r3
 80205f4:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 80205f6:	e7c2      	b.n	802057e <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 80205f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80205fc:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80205fe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8020600:	1c5a      	adds	r2, r3, #1
 8020602:	d1ae      	bne.n	8020562 <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8020604:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8020606:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802060a:	1c53      	adds	r3, r2, #1
 802060c:	d1bc      	bne.n	8020588 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 802060e:	898b      	ldrh	r3, [r1, #12]
 8020610:	1e1a      	subs	r2, r3, #0
 8020612:	bf18      	it	ne
 8020614:	2201      	movne	r2, #1
 8020616:	e7c7      	b.n	80205a8 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 8020618:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 802061c:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 802061e:	2b00      	cmp	r3, #0
 8020620:	db07      	blt.n	8020632 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8020622:	23ff      	movs	r3, #255	; 0xff
 8020624:	9300      	str	r3, [sp, #0]
 8020626:	e7c9      	b.n	80205bc <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 8020628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802062c:	4613      	mov	r3, r2
 802062e:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 8020630:	e7b8      	b.n	80205a4 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 8020632:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8020634:	bf8c      	ite	hi
 8020636:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 802063a:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 802063e:	9300      	str	r3, [sp, #0]
 8020640:	e7bc      	b.n	80205bc <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8020642:	4b0b      	ldr	r3, [pc, #44]	; (8020670 <dhcp_bind+0x150>)
 8020644:	f240 4215 	movw	r2, #1045	; 0x415
 8020648:	490a      	ldr	r1, [pc, #40]	; (8020674 <dhcp_bind+0x154>)
 802064a:	480b      	ldr	r0, [pc, #44]	; (8020678 <dhcp_bind+0x158>)
 802064c:	f004 beb2 	b.w	80253b4 <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8020650:	4b07      	ldr	r3, [pc, #28]	; (8020670 <dhcp_bind+0x150>)
 8020652:	f240 4217 	movw	r2, #1047	; 0x417
 8020656:	4909      	ldr	r1, [pc, #36]	; (802067c <dhcp_bind+0x15c>)
 8020658:	4807      	ldr	r0, [pc, #28]	; (8020678 <dhcp_bind+0x158>)
 802065a:	f004 beab 	b.w	80253b4 <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 802065e:	828a      	strh	r2, [r1, #20]
 8020660:	e77c      	b.n	802055c <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 8020662:	f8a1 c00a 	strh.w	ip, [r1, #10]
 8020666:	e78a      	b.n	802057e <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 8020668:	818b      	strh	r3, [r1, #12]
 802066a:	e79b      	b.n	80205a4 <dhcp_bind+0x84>
 802066c:	88888889 	.word	0x88888889
 8020670:	080452f0 	.word	0x080452f0
 8020674:	08045364 	.word	0x08045364
 8020678:	0802a008 	.word	0x0802a008
 802067c:	08045380 	.word	0x08045380

08020680 <dhcp_inc_pcb_refcount>:
{
 8020680:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8020682:	4c15      	ldr	r4, [pc, #84]	; (80206d8 <dhcp_inc_pcb_refcount+0x58>)
 8020684:	7823      	ldrb	r3, [r4, #0]
 8020686:	b9fb      	cbnz	r3, 80206c8 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8020688:	4d14      	ldr	r5, [pc, #80]	; (80206dc <dhcp_inc_pcb_refcount+0x5c>)
 802068a:	682b      	ldr	r3, [r5, #0]
 802068c:	b12b      	cbz	r3, 802069a <dhcp_inc_pcb_refcount+0x1a>
 802068e:	4b14      	ldr	r3, [pc, #80]	; (80206e0 <dhcp_inc_pcb_refcount+0x60>)
 8020690:	22e5      	movs	r2, #229	; 0xe5
 8020692:	4914      	ldr	r1, [pc, #80]	; (80206e4 <dhcp_inc_pcb_refcount+0x64>)
 8020694:	4814      	ldr	r0, [pc, #80]	; (80206e8 <dhcp_inc_pcb_refcount+0x68>)
 8020696:	f004 fe8d 	bl	80253b4 <iprintf>
    dhcp_pcb = udp_new();
 802069a:	f7ff fec1 	bl	8020420 <udp_new>
 802069e:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 80206a0:	b1b0      	cbz	r0, 80206d0 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80206a2:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80206a4:	4911      	ldr	r1, [pc, #68]	; (80206ec <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80206a6:	f042 0220 	orr.w	r2, r2, #32
 80206aa:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80206ac:	2244      	movs	r2, #68	; 0x44
 80206ae:	f7ff fc67 	bl	801ff80 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80206b2:	2243      	movs	r2, #67	; 0x43
 80206b4:	490d      	ldr	r1, [pc, #52]	; (80206ec <dhcp_inc_pcb_refcount+0x6c>)
 80206b6:	6828      	ldr	r0, [r5, #0]
 80206b8:	f7ff fe30 	bl	802031c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80206bc:	2200      	movs	r2, #0
 80206be:	490c      	ldr	r1, [pc, #48]	; (80206f0 <dhcp_inc_pcb_refcount+0x70>)
 80206c0:	6828      	ldr	r0, [r5, #0]
 80206c2:	f7ff fe71 	bl	80203a8 <udp_recv>
  dhcp_pcb_refcount++;
 80206c6:	7823      	ldrb	r3, [r4, #0]
 80206c8:	3301      	adds	r3, #1
  return ERR_OK;
 80206ca:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 80206cc:	7023      	strb	r3, [r4, #0]
}
 80206ce:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 80206d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80206d4:	bd38      	pop	{r3, r4, r5, pc}
 80206d6:	bf00      	nop
 80206d8:	2002e12c 	.word	0x2002e12c
 80206dc:	2002e128 	.word	0x2002e128
 80206e0:	080452f0 	.word	0x080452f0
 80206e4:	08045398 	.word	0x08045398
 80206e8:	0802a008 	.word	0x0802a008
 80206ec:	080459a4 	.word	0x080459a4
 80206f0:	08020f99 	.word	0x08020f99

080206f4 <dhcp_dec_pcb_refcount>:
{
 80206f4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80206f6:	4d0b      	ldr	r5, [pc, #44]	; (8020724 <dhcp_dec_pcb_refcount+0x30>)
 80206f8:	782c      	ldrb	r4, [r5, #0]
 80206fa:	b154      	cbz	r4, 8020712 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 80206fc:	3c01      	subs	r4, #1
 80206fe:	b2e4      	uxtb	r4, r4
 8020700:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8020702:	b104      	cbz	r4, 8020706 <dhcp_dec_pcb_refcount+0x12>
}
 8020704:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 8020706:	4d08      	ldr	r5, [pc, #32]	; (8020728 <dhcp_dec_pcb_refcount+0x34>)
 8020708:	6828      	ldr	r0, [r5, #0]
 802070a:	f7ff fe5f 	bl	80203cc <udp_remove>
    dhcp_pcb = NULL;
 802070e:	602c      	str	r4, [r5, #0]
}
 8020710:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8020712:	4b06      	ldr	r3, [pc, #24]	; (802072c <dhcp_dec_pcb_refcount+0x38>)
 8020714:	22ff      	movs	r2, #255	; 0xff
 8020716:	4906      	ldr	r1, [pc, #24]	; (8020730 <dhcp_dec_pcb_refcount+0x3c>)
 8020718:	4806      	ldr	r0, [pc, #24]	; (8020734 <dhcp_dec_pcb_refcount+0x40>)
 802071a:	f004 fe4b 	bl	80253b4 <iprintf>
  dhcp_pcb_refcount--;
 802071e:	782c      	ldrb	r4, [r5, #0]
 8020720:	e7ec      	b.n	80206fc <dhcp_dec_pcb_refcount+0x8>
 8020722:	bf00      	nop
 8020724:	2002e12c 	.word	0x2002e12c
 8020728:	2002e128 	.word	0x2002e128
 802072c:	080452f0 	.word	0x080452f0
 8020730:	080453c0 	.word	0x080453c0
 8020734:	0802a008 	.word	0x0802a008

08020738 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8020738:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 802073a:	4d29      	ldr	r5, [pc, #164]	; (80207e0 <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 802073c:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 802073e:	b083      	sub	sp, #12
 8020740:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8020742:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8020744:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8020748:	b112      	cbz	r2, 8020750 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 802074a:	4b26      	ldr	r3, [pc, #152]	; (80207e4 <dhcp_handle_ack.isra.0+0xac>)
 802074c:	68db      	ldr	r3, [r3, #12]
 802074e:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8020750:	792b      	ldrb	r3, [r5, #4]
 8020752:	2b00      	cmp	r3, #0
 8020754:	d041      	beq.n	80207da <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8020756:	4b23      	ldr	r3, [pc, #140]	; (80207e4 <dhcp_handle_ack.isra.0+0xac>)
 8020758:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 802075a:	796a      	ldrb	r2, [r5, #5]
 802075c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802075e:	b312      	cbz	r2, 80207a6 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8020760:	4b20      	ldr	r3, [pc, #128]	; (80207e4 <dhcp_handle_ack.isra.0+0xac>)
 8020762:	695b      	ldr	r3, [r3, #20]
 8020764:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020766:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020768:	690a      	ldr	r2, [r1, #16]
 802076a:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 802076c:	bb2b      	cbnz	r3, 80207ba <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 802076e:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8020770:	79eb      	ldrb	r3, [r5, #7]
 8020772:	2b00      	cmp	r3, #0
 8020774:	d12b      	bne.n	80207ce <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8020776:	7a2b      	ldrb	r3, [r5, #8]
 8020778:	b19b      	cbz	r3, 80207a2 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 802077a:	4c1a      	ldr	r4, [pc, #104]	; (80207e4 <dhcp_handle_ack.isra.0+0xac>)
 802077c:	6a20      	ldr	r0, [r4, #32]
 802077e:	f7f8 fd17 	bl	80191b0 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8020782:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8020784:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8020786:	2000      	movs	r0, #0
 8020788:	f7f9 f8b8 	bl	80198fc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 802078c:	7a6b      	ldrb	r3, [r5, #9]
 802078e:	b143      	cbz	r3, 80207a2 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8020790:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020792:	f7f8 fd0d 	bl	80191b0 <lwip_htonl>
 8020796:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 8020798:	a901      	add	r1, sp, #4
 802079a:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 802079c:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 802079e:	f7f9 f8ad 	bl	80198fc <dns_setserver>
}
 80207a2:	b003      	add	sp, #12
 80207a4:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80207a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80207a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80207ac:	08db      	lsrs	r3, r3, #3
 80207ae:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80207b0:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80207b2:	690a      	ldr	r2, [r1, #16]
 80207b4:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	d0d9      	beq.n	802076e <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80207ba:	4b0a      	ldr	r3, [pc, #40]	; (80207e4 <dhcp_handle_ack.isra.0+0xac>)
 80207bc:	6998      	ldr	r0, [r3, #24]
 80207be:	f7f8 fcf7 	bl	80191b0 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 80207c2:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80207c4:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 80207c6:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80207c8:	79eb      	ldrb	r3, [r5, #7]
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d0d3      	beq.n	8020776 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80207ce:	4b05      	ldr	r3, [pc, #20]	; (80207e4 <dhcp_handle_ack.isra.0+0xac>)
 80207d0:	69d8      	ldr	r0, [r3, #28]
 80207d2:	f7f8 fced 	bl	80191b0 <lwip_htonl>
 80207d6:	6260      	str	r0, [r4, #36]	; 0x24
 80207d8:	e7cd      	b.n	8020776 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80207da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80207dc:	085b      	lsrs	r3, r3, #1
 80207de:	e7bc      	b.n	802075a <dhcp_handle_ack.isra.0+0x22>
 80207e0:	2002e130 	.word	0x2002e130
 80207e4:	2002e13c 	.word	0x2002e13c

080207e8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80207e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80207ec:	4681      	mov	r9, r0
 80207ee:	2800      	cmp	r0, #0
 80207f0:	f000 8097 	beq.w	8020922 <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80207f4:	460c      	mov	r4, r1
 80207f6:	2900      	cmp	r1, #0
 80207f8:	f000 808a 	beq.w	8020910 <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80207fc:	4616      	mov	r6, r2
 80207fe:	f44f 719a 	mov.w	r1, #308	; 0x134
 8020802:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020806:	2036      	movs	r0, #54	; 0x36
 8020808:	461f      	mov	r7, r3
 802080a:	f7fa fb37 	bl	801ae7c <pbuf_alloc>
  if (p_out == NULL) {
 802080e:	4605      	mov	r5, r0
 8020810:	2800      	cmp	r0, #0
 8020812:	d049      	beq.n	80208a8 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8020814:	8943      	ldrh	r3, [r0, #10]
 8020816:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 802081a:	d371      	bcc.n	8020900 <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 802081c:	2e03      	cmp	r6, #3
 802081e:	d051      	beq.n	80208c4 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8020820:	79a3      	ldrb	r3, [r4, #6]
 8020822:	2b00      	cmp	r3, #0
 8020824:	d043      	beq.n	80208ae <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8020826:	4b43      	ldr	r3, [pc, #268]	; (8020934 <dhcp_create_msg+0x14c>)
 8020828:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 802082a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 802082e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8020832:	2100      	movs	r1, #0
    dhcp->xid = xid;
 8020834:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8020836:	4640      	mov	r0, r8
 8020838:	f003 fe1e 	bl	8024478 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 802083c:	2301      	movs	r3, #1
 802083e:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8020842:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8020846:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 802084a:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 802084e:	6820      	ldr	r0, [r4, #0]
 8020850:	f7f8 fcae 	bl	80191b0 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8020854:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8020856:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 802085a:	d12d      	bne.n	80208b8 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 802085c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020860:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020864:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 8020868:	f109 0434 	add.w	r4, r9, #52	; 0x34
 802086c:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8020870:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020874:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 8020876:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802087a:	d1f9      	bne.n	8020870 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 802087c:	2363      	movs	r3, #99	; 0x63
 802087e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 8020882:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8020886:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 802088a:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 802088e:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8020890:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 8020894:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 8020896:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 802089a:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 802089c:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 80208a0:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 80208a4:	2303      	movs	r3, #3
 80208a6:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 80208a8:	4628      	mov	r0, r5
 80208aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 80208ae:	f004 fe25 	bl	80254fc <rand>
 80208b2:	4b20      	ldr	r3, [pc, #128]	; (8020934 <dhcp_create_msg+0x14c>)
 80208b4:	6018      	str	r0, [r3, #0]
 80208b6:	e7b8      	b.n	802082a <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80208b8:	1ff3      	subs	r3, r6, #7
 80208ba:	2b01      	cmp	r3, #1
 80208bc:	d9ce      	bls.n	802085c <dhcp_create_msg+0x74>
 80208be:	2e03      	cmp	r6, #3
 80208c0:	d1d0      	bne.n	8020864 <dhcp_create_msg+0x7c>
 80208c2:	e018      	b.n	80208f6 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80208c4:	7963      	ldrb	r3, [r4, #5]
 80208c6:	2b03      	cmp	r3, #3
 80208c8:	d0aa      	beq.n	8020820 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 80208ca:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80208ce:	f44f 729a 	mov.w	r2, #308	; 0x134
 80208d2:	2100      	movs	r1, #0
 80208d4:	4640      	mov	r0, r8
 80208d6:	f003 fdcf 	bl	8024478 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 80208da:	2301      	movs	r3, #1
 80208dc:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80208e0:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 80208e4:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 80208e8:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80208ec:	6820      	ldr	r0, [r4, #0]
 80208ee:	f7f8 fc5f 	bl	80191b0 <lwip_htonl>
 80208f2:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80208f6:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80208f8:	3b04      	subs	r3, #4
 80208fa:	2b01      	cmp	r3, #1
 80208fc:	d8b2      	bhi.n	8020864 <dhcp_create_msg+0x7c>
 80208fe:	e7ad      	b.n	802085c <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8020900:	4b0d      	ldr	r3, [pc, #52]	; (8020938 <dhcp_create_msg+0x150>)
 8020902:	f240 7271 	movw	r2, #1905	; 0x771
 8020906:	490d      	ldr	r1, [pc, #52]	; (802093c <dhcp_create_msg+0x154>)
 8020908:	480d      	ldr	r0, [pc, #52]	; (8020940 <dhcp_create_msg+0x158>)
 802090a:	f004 fd53 	bl	80253b4 <iprintf>
 802090e:	e785      	b.n	802081c <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8020910:	4b09      	ldr	r3, [pc, #36]	; (8020938 <dhcp_create_msg+0x150>)
 8020912:	f240 726a 	movw	r2, #1898	; 0x76a
 8020916:	490b      	ldr	r1, [pc, #44]	; (8020944 <dhcp_create_msg+0x15c>)
 8020918:	4625      	mov	r5, r4
 802091a:	4809      	ldr	r0, [pc, #36]	; (8020940 <dhcp_create_msg+0x158>)
 802091c:	f004 fd4a 	bl	80253b4 <iprintf>
 8020920:	e7c2      	b.n	80208a8 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8020922:	4b05      	ldr	r3, [pc, #20]	; (8020938 <dhcp_create_msg+0x150>)
 8020924:	f240 7269 	movw	r2, #1897	; 0x769
 8020928:	4907      	ldr	r1, [pc, #28]	; (8020948 <dhcp_create_msg+0x160>)
 802092a:	464d      	mov	r5, r9
 802092c:	4804      	ldr	r0, [pc, #16]	; (8020940 <dhcp_create_msg+0x158>)
 802092e:	f004 fd41 	bl	80253b4 <iprintf>
 8020932:	e7b9      	b.n	80208a8 <dhcp_create_msg+0xc0>
 8020934:	2002e164 	.word	0x2002e164
 8020938:	080452f0 	.word	0x080452f0
 802093c:	08045424 	.word	0x08045424
 8020940:	0802a008 	.word	0x0802a008
 8020944:	08045404 	.word	0x08045404
 8020948:	080453e4 	.word	0x080453e4

0802094c <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 802094c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020950:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 8020954:	b087      	sub	sp, #28
 8020956:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 8020958:	f89a 3005 	ldrb.w	r3, [sl, #5]
 802095c:	2b03      	cmp	r3, #3
 802095e:	d007      	beq.n	8020970 <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 8020960:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020962:	2203      	movs	r2, #3
    dhcp->tries = 0;
 8020964:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 8020968:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 802096c:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020970:	f10d 0316 	add.w	r3, sp, #22
 8020974:	2203      	movs	r2, #3
 8020976:	4651      	mov	r1, sl
 8020978:	4648      	mov	r0, r9
 802097a:	f7ff ff35 	bl	80207e8 <dhcp_create_msg>
  if (p_out != NULL) {
 802097e:	4607      	mov	r7, r0
 8020980:	2800      	cmp	r0, #0
 8020982:	f000 808d 	beq.w	8020aa0 <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020986:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802098a:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802098c:	f104 0804 	add.w	r8, r4, #4
 8020990:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020992:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020994:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020998:	f200 80a3 	bhi.w	8020ae2 <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 802099c:	2239      	movs	r2, #57	; 0x39
 802099e:	1c63      	adds	r3, r4, #1
 80209a0:	fa1f fb85 	uxth.w	fp, r5
 80209a4:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 80209a6:	b29b      	uxth	r3, r3
 80209a8:	2202      	movs	r2, #2
 80209aa:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80209ac:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80209b0:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80209b4:	2b44      	cmp	r3, #68	; 0x44
 80209b6:	f200 80ac 	bhi.w	8020b12 <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80209ba:	2202      	movs	r2, #2
 80209bc:	1ce3      	adds	r3, r4, #3
 80209be:	fa1f f588 	uxth.w	r5, r8
 80209c2:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80209c6:	b29b      	uxth	r3, r3
 80209c8:	2240      	movs	r2, #64	; 0x40
 80209ca:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209cc:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80209ce:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209d2:	2b44      	cmp	r3, #68	; 0x44
 80209d4:	f200 8095 	bhi.w	8020b02 <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 80209d8:	1d63      	adds	r3, r4, #5
 80209da:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 80209dc:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 80209de:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 80209e0:	b29b      	uxth	r3, r3
 80209e2:	2204      	movs	r2, #4
 80209e4:	b2a4      	uxth	r4, r4
 80209e6:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80209e8:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80209ec:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80209f0:	f7f8 fbde 	bl	80191b0 <lwip_htonl>
 80209f4:	4631      	mov	r1, r6
 80209f6:	4602      	mov	r2, r0
 80209f8:	4620      	mov	r0, r4
 80209fa:	f7ff fd55 	bl	80204a8 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209fe:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020a00:	4605      	mov	r5, r0
 8020a02:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020a06:	2b44      	cmp	r3, #68	; 0x44
 8020a08:	9303      	str	r3, [sp, #12]
 8020a0a:	d872      	bhi.n	8020af2 <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 8020a0c:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 8020a0e:	2237      	movs	r2, #55	; 0x37
 8020a10:	1c6b      	adds	r3, r5, #1
 8020a12:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8020b48 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 8020a16:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 8020a18:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8020a1a:	b29b      	uxth	r3, r3
 8020a1c:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a1e:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020a20:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 8020a24:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a26:	493f      	ldr	r1, [pc, #252]	; (8020b24 <dhcp_reboot.isra.0+0x1d8>)
 8020a28:	4b3f      	ldr	r3, [pc, #252]	; (8020b28 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020a2a:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a2e:	d80c      	bhi.n	8020a4a <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 8020a30:	1c62      	adds	r2, r4, #1
 8020a32:	f806 b004 	strb.w	fp, [r6, r4]
 8020a36:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020a38:	4a3c      	ldr	r2, [pc, #240]	; (8020b2c <dhcp_reboot.isra.0+0x1e0>)
 8020a3a:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020a3c:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020a40:	d00b      	beq.n	8020a5a <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a42:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020a44:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a48:	d9f2      	bls.n	8020a30 <dhcp_reboot.isra.0+0xe4>
 8020a4a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020a4e:	4838      	ldr	r0, [pc, #224]	; (8020b30 <dhcp_reboot.isra.0+0x1e4>)
 8020a50:	f004 fcb0 	bl	80253b4 <iprintf>
 8020a54:	4b34      	ldr	r3, [pc, #208]	; (8020b28 <dhcp_reboot.isra.0+0x1dc>)
 8020a56:	4933      	ldr	r1, [pc, #204]	; (8020b24 <dhcp_reboot.isra.0+0x1d8>)
 8020a58:	e7ea      	b.n	8020a30 <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8020a5a:	1de8      	adds	r0, r5, #7
 8020a5c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8020a60:	22ff      	movs	r2, #255	; 0xff
 8020a62:	b280      	uxth	r0, r0
 8020a64:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020a66:	2843      	cmp	r0, #67	; 0x43
 8020a68:	d808      	bhi.n	8020a7c <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8020a6a:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 8020a6e:	4430      	add	r0, r6
 8020a70:	2100      	movs	r1, #0
 8020a72:	b2ad      	uxth	r5, r5
 8020a74:	1c6a      	adds	r2, r5, #1
 8020a76:	f003 fcff 	bl	8024478 <memset>
 8020a7a:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020a7c:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020a80:	4638      	mov	r0, r7
 8020a82:	b289      	uxth	r1, r1
 8020a84:	f7fa fab4 	bl	801aff0 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020a88:	482a      	ldr	r0, [pc, #168]	; (8020b34 <dhcp_reboot.isra.0+0x1e8>)
 8020a8a:	2343      	movs	r3, #67	; 0x43
 8020a8c:	4a2a      	ldr	r2, [pc, #168]	; (8020b38 <dhcp_reboot.isra.0+0x1ec>)
 8020a8e:	6800      	ldr	r0, [r0, #0]
 8020a90:	4639      	mov	r1, r7
 8020a92:	f8cd 9000 	str.w	r9, [sp]
 8020a96:	f7ff fba5 	bl	80201e4 <udp_sendto_if>
    pbuf_free(p_out);
 8020a9a:	4638      	mov	r0, r7
 8020a9c:	f7fa fbc0 	bl	801b220 <pbuf_free>
  if (dhcp->tries < 255) {
 8020aa0:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8020aa4:	2bff      	cmp	r3, #255	; 0xff
 8020aa6:	d016      	beq.n	8020ad6 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 8020aa8:	3301      	adds	r3, #1
 8020aaa:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020aac:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8020aae:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020ab2:	d810      	bhi.n	8020ad6 <dhcp_reboot.isra.0+0x18a>
 8020ab4:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020ab8:	4a20      	ldr	r2, [pc, #128]	; (8020b3c <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020aba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8020abe:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020ac0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020ac4:	b29b      	uxth	r3, r3
 8020ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8020aca:	095b      	lsrs	r3, r3, #5
 8020acc:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8020ad0:	b007      	add	sp, #28
 8020ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020ad6:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020ad8:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8020adc:	b007      	add	sp, #28
 8020ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020ae2:	4b11      	ldr	r3, [pc, #68]	; (8020b28 <dhcp_reboot.isra.0+0x1dc>)
 8020ae4:	f240 529a 	movw	r2, #1434	; 0x59a
 8020ae8:	4915      	ldr	r1, [pc, #84]	; (8020b40 <dhcp_reboot.isra.0+0x1f4>)
 8020aea:	4811      	ldr	r0, [pc, #68]	; (8020b30 <dhcp_reboot.isra.0+0x1e4>)
 8020aec:	f004 fc62 	bl	80253b4 <iprintf>
 8020af0:	e754      	b.n	802099c <dhcp_reboot.isra.0+0x50>
 8020af2:	4b0d      	ldr	r3, [pc, #52]	; (8020b28 <dhcp_reboot.isra.0+0x1dc>)
 8020af4:	f240 529a 	movw	r2, #1434	; 0x59a
 8020af8:	4911      	ldr	r1, [pc, #68]	; (8020b40 <dhcp_reboot.isra.0+0x1f4>)
 8020afa:	480d      	ldr	r0, [pc, #52]	; (8020b30 <dhcp_reboot.isra.0+0x1e4>)
 8020afc:	f004 fc5a 	bl	80253b4 <iprintf>
 8020b00:	e784      	b.n	8020a0c <dhcp_reboot.isra.0+0xc0>
 8020b02:	4b09      	ldr	r3, [pc, #36]	; (8020b28 <dhcp_reboot.isra.0+0x1dc>)
 8020b04:	f240 529a 	movw	r2, #1434	; 0x59a
 8020b08:	490d      	ldr	r1, [pc, #52]	; (8020b40 <dhcp_reboot.isra.0+0x1f4>)
 8020b0a:	4809      	ldr	r0, [pc, #36]	; (8020b30 <dhcp_reboot.isra.0+0x1e4>)
 8020b0c:	f004 fc52 	bl	80253b4 <iprintf>
 8020b10:	e762      	b.n	80209d8 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020b12:	4b05      	ldr	r3, [pc, #20]	; (8020b28 <dhcp_reboot.isra.0+0x1dc>)
 8020b14:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020b18:	490a      	ldr	r1, [pc, #40]	; (8020b44 <dhcp_reboot.isra.0+0x1f8>)
 8020b1a:	4805      	ldr	r0, [pc, #20]	; (8020b30 <dhcp_reboot.isra.0+0x1e4>)
 8020b1c:	f004 fc4a 	bl	80253b4 <iprintf>
 8020b20:	e74b      	b.n	80209ba <dhcp_reboot.isra.0+0x6e>
 8020b22:	bf00      	nop
 8020b24:	080454e4 	.word	0x080454e4
 8020b28:	080452f0 	.word	0x080452f0
 8020b2c:	0804566c 	.word	0x0804566c
 8020b30:	0802a008 	.word	0x0802a008
 8020b34:	2002e128 	.word	0x2002e128
 8020b38:	080459a8 	.word	0x080459a8
 8020b3c:	10624dd3 	.word	0x10624dd3
 8020b40:	08045464 	.word	0x08045464
 8020b44:	080454a8 	.word	0x080454a8
 8020b48:	08045669 	.word	0x08045669

08020b4c <dhcp_discover>:
{
 8020b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020b50:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8020b52:	2300      	movs	r3, #0
{
 8020b54:	b087      	sub	sp, #28
 8020b56:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8020b58:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8020b5a:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 8020b5c:	2a06      	cmp	r2, #6
 8020b5e:	d003      	beq.n	8020b68 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 8020b60:	2206      	movs	r2, #6
    dhcp->tries = 0;
 8020b62:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 8020b64:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 8020b66:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8020b68:	f10d 0316 	add.w	r3, sp, #22
 8020b6c:	2201      	movs	r2, #1
 8020b6e:	4639      	mov	r1, r7
 8020b70:	4658      	mov	r0, fp
 8020b72:	f7ff fe39 	bl	80207e8 <dhcp_create_msg>
  if (p_out != NULL) {
 8020b76:	4605      	mov	r5, r0
 8020b78:	2800      	cmp	r0, #0
 8020b7a:	f000 8081 	beq.w	8020c80 <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020b7e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020b82:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020b84:	f104 0804 	add.w	r8, r4, #4
 8020b88:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020b8c:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020b8e:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020b92:	f200 809a 	bhi.w	8020cca <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 8020b96:	2239      	movs	r2, #57	; 0x39
 8020b98:	1c63      	adds	r3, r4, #1
 8020b9a:	fa1f f189 	uxth.w	r1, r9
 8020b9e:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8020ba0:	b29b      	uxth	r3, r3
 8020ba2:	2202      	movs	r2, #2
 8020ba4:	9103      	str	r1, [sp, #12]
 8020ba6:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020ba8:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020baa:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020bae:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020bb0:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020bb4:	f200 8091 	bhi.w	8020cda <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020bb8:	1ce3      	adds	r3, r4, #3
 8020bba:	fa1f f988 	uxth.w	r9, r8
 8020bbe:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020bc2:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020bc4:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020bc6:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020bc8:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020bcc:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020bd0:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020bd4:	2b44      	cmp	r3, #68	; 0x44
 8020bd6:	d870      	bhi.n	8020cba <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 8020bd8:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8020bdc:	2237      	movs	r2, #55	; 0x37
 8020bde:	1d63      	adds	r3, r4, #5
 8020be0:	f8df a130 	ldr.w	sl, [pc, #304]	; 8020d14 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 8020be4:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8020be8:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8020bec:	b29b      	uxth	r3, r3
 8020bee:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020bf0:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020bf4:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8020bf8:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020bfa:	493c      	ldr	r1, [pc, #240]	; (8020cec <dhcp_discover+0x1a0>)
 8020bfc:	4b3c      	ldr	r3, [pc, #240]	; (8020cf0 <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020bfe:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c02:	d80f      	bhi.n	8020c24 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 8020c04:	f108 0201 	add.w	r2, r8, #1
 8020c08:	f806 9008 	strb.w	r9, [r6, r8]
 8020c0c:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c10:	4a38      	ldr	r2, [pc, #224]	; (8020cf4 <dhcp_discover+0x1a8>)
 8020c12:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020c14:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c18:	d00c      	beq.n	8020c34 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c1a:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020c1e:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c22:	d9ef      	bls.n	8020c04 <dhcp_discover+0xb8>
 8020c24:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020c28:	4833      	ldr	r0, [pc, #204]	; (8020cf8 <dhcp_discover+0x1ac>)
 8020c2a:	f004 fbc3 	bl	80253b4 <iprintf>
 8020c2e:	4b30      	ldr	r3, [pc, #192]	; (8020cf0 <dhcp_discover+0x1a4>)
 8020c30:	492e      	ldr	r1, [pc, #184]	; (8020cec <dhcp_discover+0x1a0>)
 8020c32:	e7e7      	b.n	8020c04 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 8020c34:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8020c38:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8020c3c:	22ff      	movs	r2, #255	; 0xff
 8020c3e:	b280      	uxth	r0, r0
 8020c40:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020c42:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8020c44:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020c46:	d808      	bhi.n	8020c5a <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 8020c48:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8020c4c:	4430      	add	r0, r6
 8020c4e:	2100      	movs	r1, #0
 8020c50:	b2a4      	uxth	r4, r4
 8020c52:	1c62      	adds	r2, r4, #1
 8020c54:	f003 fc10 	bl	8024478 <memset>
 8020c58:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020c5a:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020c5e:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020c60:	4c26      	ldr	r4, [pc, #152]	; (8020cfc <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020c62:	b289      	uxth	r1, r1
 8020c64:	f7fa f9c4 	bl	801aff0 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020c68:	4825      	ldr	r0, [pc, #148]	; (8020d00 <dhcp_discover+0x1b4>)
 8020c6a:	2343      	movs	r3, #67	; 0x43
 8020c6c:	4a25      	ldr	r2, [pc, #148]	; (8020d04 <dhcp_discover+0x1b8>)
 8020c6e:	6800      	ldr	r0, [r0, #0]
 8020c70:	4629      	mov	r1, r5
 8020c72:	e9cd b400 	strd	fp, r4, [sp]
 8020c76:	f7ff fa01 	bl	802007c <udp_sendto_if_src>
    pbuf_free(p_out);
 8020c7a:	4628      	mov	r0, r5
 8020c7c:	f7fa fad0 	bl	801b220 <pbuf_free>
  if (dhcp->tries < 255) {
 8020c80:	79bb      	ldrb	r3, [r7, #6]
 8020c82:	2bff      	cmp	r3, #255	; 0xff
 8020c84:	d013      	beq.n	8020cae <dhcp_discover+0x162>
    dhcp->tries++;
 8020c86:	3301      	adds	r3, #1
 8020c88:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020c8a:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8020c8c:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020c8e:	d80e      	bhi.n	8020cae <dhcp_discover+0x162>
 8020c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020c94:	491c      	ldr	r1, [pc, #112]	; (8020d08 <dhcp_discover+0x1bc>)
}
 8020c96:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020c98:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020c9a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020c9e:	b29b      	uxth	r3, r3
 8020ca0:	fba1 2303 	umull	r2, r3, r1, r3
 8020ca4:	095b      	lsrs	r3, r3, #5
 8020ca6:	813b      	strh	r3, [r7, #8]
}
 8020ca8:	b007      	add	sp, #28
 8020caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020cae:	2378      	movs	r3, #120	; 0x78
}
 8020cb0:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020cb2:	813b      	strh	r3, [r7, #8]
}
 8020cb4:	b007      	add	sp, #28
 8020cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020cba:	4b0d      	ldr	r3, [pc, #52]	; (8020cf0 <dhcp_discover+0x1a4>)
 8020cbc:	f240 529a 	movw	r2, #1434	; 0x59a
 8020cc0:	4912      	ldr	r1, [pc, #72]	; (8020d0c <dhcp_discover+0x1c0>)
 8020cc2:	480d      	ldr	r0, [pc, #52]	; (8020cf8 <dhcp_discover+0x1ac>)
 8020cc4:	f004 fb76 	bl	80253b4 <iprintf>
 8020cc8:	e786      	b.n	8020bd8 <dhcp_discover+0x8c>
 8020cca:	4b09      	ldr	r3, [pc, #36]	; (8020cf0 <dhcp_discover+0x1a4>)
 8020ccc:	f240 529a 	movw	r2, #1434	; 0x59a
 8020cd0:	490e      	ldr	r1, [pc, #56]	; (8020d0c <dhcp_discover+0x1c0>)
 8020cd2:	4809      	ldr	r0, [pc, #36]	; (8020cf8 <dhcp_discover+0x1ac>)
 8020cd4:	f004 fb6e 	bl	80253b4 <iprintf>
 8020cd8:	e75d      	b.n	8020b96 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020cda:	4b05      	ldr	r3, [pc, #20]	; (8020cf0 <dhcp_discover+0x1a4>)
 8020cdc:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020ce0:	490b      	ldr	r1, [pc, #44]	; (8020d10 <dhcp_discover+0x1c4>)
 8020ce2:	4805      	ldr	r0, [pc, #20]	; (8020cf8 <dhcp_discover+0x1ac>)
 8020ce4:	f004 fb66 	bl	80253b4 <iprintf>
 8020ce8:	e766      	b.n	8020bb8 <dhcp_discover+0x6c>
 8020cea:	bf00      	nop
 8020cec:	080454e4 	.word	0x080454e4
 8020cf0:	080452f0 	.word	0x080452f0
 8020cf4:	0804566c 	.word	0x0804566c
 8020cf8:	0802a008 	.word	0x0802a008
 8020cfc:	080459a4 	.word	0x080459a4
 8020d00:	2002e128 	.word	0x2002e128
 8020d04:	080459a8 	.word	0x080459a8
 8020d08:	10624dd3 	.word	0x10624dd3
 8020d0c:	08045464 	.word	0x08045464
 8020d10:	080454a8 	.word	0x080454a8
 8020d14:	08045669 	.word	0x08045669

08020d18 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8020d18:	2800      	cmp	r0, #0
 8020d1a:	f000 8112 	beq.w	8020f42 <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 8020d1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 8020d22:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 8020d24:	b087      	sub	sp, #28
 8020d26:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020d28:	2e00      	cmp	r6, #0
 8020d2a:	f000 8111 	beq.w	8020f50 <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 8020d2e:	7973      	ldrb	r3, [r6, #5]
 8020d30:	2b01      	cmp	r3, #1
 8020d32:	d004      	beq.n	8020d3e <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 8020d34:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020d36:	2201      	movs	r2, #1
    dhcp->tries = 0;
 8020d38:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 8020d3a:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 8020d3c:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020d3e:	f10d 0316 	add.w	r3, sp, #22
 8020d42:	2203      	movs	r2, #3
 8020d44:	4631      	mov	r1, r6
 8020d46:	4658      	mov	r0, fp
 8020d48:	f7ff fd4e 	bl	80207e8 <dhcp_create_msg>
  if (p_out != NULL) {
 8020d4c:	4605      	mov	r5, r0
 8020d4e:	2800      	cmp	r0, #0
 8020d50:	f000 80b4 	beq.w	8020ebc <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020d54:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8020d58:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020d5a:	f107 0804 	add.w	r8, r7, #4
 8020d5e:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020d62:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020d64:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020d68:	f200 80cb 	bhi.w	8020f02 <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 8020d6c:	2239      	movs	r2, #57	; 0x39
 8020d6e:	1c7b      	adds	r3, r7, #1
 8020d70:	fa1f f189 	uxth.w	r1, r9
 8020d74:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8020d76:	b29b      	uxth	r3, r3
 8020d78:	2202      	movs	r2, #2
 8020d7a:	9103      	str	r1, [sp, #12]
 8020d7c:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020d7e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020d80:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020d84:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020d86:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020d8a:	f200 80c2 	bhi.w	8020f12 <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020d8e:	1cfb      	adds	r3, r7, #3
 8020d90:	fa1f f988 	uxth.w	r9, r8
 8020d94:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020d98:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020d9a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020d9c:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020d9e:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020da2:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020da6:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020daa:	2b44      	cmp	r3, #68	; 0x44
 8020dac:	f200 80b9 	bhi.w	8020f22 <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 8020db0:	1d7b      	adds	r3, r7, #5
 8020db2:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8020db4:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 8020db6:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 8020dba:	b29b      	uxth	r3, r3
 8020dbc:	2204      	movs	r2, #4
 8020dbe:	b2bf      	uxth	r7, r7
 8020dc0:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020dc2:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020dc4:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020dc8:	f7f8 f9f2 	bl	80191b0 <lwip_htonl>
 8020dcc:	4621      	mov	r1, r4
 8020dce:	4602      	mov	r2, r0
 8020dd0:	4638      	mov	r0, r7
 8020dd2:	f7ff fb69 	bl	80204a8 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020dd6:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020dd8:	4607      	mov	r7, r0
 8020dda:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020dde:	2b44      	cmp	r3, #68	; 0x44
 8020de0:	f200 80a7 	bhi.w	8020f32 <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 8020de4:	2236      	movs	r2, #54	; 0x36
 8020de6:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 8020de8:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 8020dec:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8020dee:	b29b      	uxth	r3, r3
 8020df0:	2204      	movs	r2, #4
 8020df2:	fa1f f888 	uxth.w	r8, r8
 8020df6:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020df8:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8020dfa:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020dfe:	f7f8 f9d7 	bl	80191b0 <lwip_htonl>
 8020e02:	4621      	mov	r1, r4
 8020e04:	4602      	mov	r2, r0
 8020e06:	4640      	mov	r0, r8
 8020e08:	f7ff fb4e 	bl	80204a8 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020e0c:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020e0e:	4680      	mov	r8, r0
 8020e10:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020e14:	2b44      	cmp	r3, #68	; 0x44
 8020e16:	9303      	str	r3, [sp, #12]
 8020e18:	d86b      	bhi.n	8020ef2 <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 8020e1a:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 8020e1e:	2237      	movs	r2, #55	; 0x37
 8020e20:	f108 0301 	add.w	r3, r8, #1
 8020e24:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8020f94 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 8020e28:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 8020e2a:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 8020e2e:	b29b      	uxth	r3, r3
 8020e30:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e32:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020e34:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8020e38:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e3a:	494a      	ldr	r1, [pc, #296]	; (8020f64 <dhcp_select.isra.0+0x24c>)
 8020e3c:	4b4a      	ldr	r3, [pc, #296]	; (8020f68 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020e3e:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e42:	d80c      	bhi.n	8020e5e <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 8020e44:	1c7a      	adds	r2, r7, #1
 8020e46:	f804 a007 	strb.w	sl, [r4, r7]
 8020e4a:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020e4c:	4a47      	ldr	r2, [pc, #284]	; (8020f6c <dhcp_select.isra.0+0x254>)
 8020e4e:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020e50:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020e54:	d00b      	beq.n	8020e6e <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e56:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020e58:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e5c:	d9f2      	bls.n	8020e44 <dhcp_select.isra.0+0x12c>
 8020e5e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020e62:	4843      	ldr	r0, [pc, #268]	; (8020f70 <dhcp_select.isra.0+0x258>)
 8020e64:	f004 faa6 	bl	80253b4 <iprintf>
 8020e68:	4b3f      	ldr	r3, [pc, #252]	; (8020f68 <dhcp_select.isra.0+0x250>)
 8020e6a:	493e      	ldr	r1, [pc, #248]	; (8020f64 <dhcp_select.isra.0+0x24c>)
 8020e6c:	e7ea      	b.n	8020e44 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 8020e6e:	f108 0007 	add.w	r0, r8, #7
 8020e72:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8020e76:	22ff      	movs	r2, #255	; 0xff
 8020e78:	b280      	uxth	r0, r0
 8020e7a:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020e7c:	2843      	cmp	r0, #67	; 0x43
 8020e7e:	d80a      	bhi.n	8020e96 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 8020e80:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 8020e84:	4420      	add	r0, r4
 8020e86:	2100      	movs	r1, #0
 8020e88:	fa1f f888 	uxth.w	r8, r8
 8020e8c:	f108 0201 	add.w	r2, r8, #1
 8020e90:	f003 faf2 	bl	8024478 <memset>
 8020e94:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020e96:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020e9a:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020e9c:	4c35      	ldr	r4, [pc, #212]	; (8020f74 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020e9e:	b289      	uxth	r1, r1
 8020ea0:	f7fa f8a6 	bl	801aff0 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020ea4:	4834      	ldr	r0, [pc, #208]	; (8020f78 <dhcp_select.isra.0+0x260>)
 8020ea6:	2343      	movs	r3, #67	; 0x43
 8020ea8:	4a34      	ldr	r2, [pc, #208]	; (8020f7c <dhcp_select.isra.0+0x264>)
 8020eaa:	6800      	ldr	r0, [r0, #0]
 8020eac:	4629      	mov	r1, r5
 8020eae:	e9cd b400 	strd	fp, r4, [sp]
 8020eb2:	f7ff f8e3 	bl	802007c <udp_sendto_if_src>
    pbuf_free(p_out);
 8020eb6:	4628      	mov	r0, r5
 8020eb8:	f7fa f9b2 	bl	801b220 <pbuf_free>
  if (dhcp->tries < 255) {
 8020ebc:	79b3      	ldrb	r3, [r6, #6]
 8020ebe:	2bff      	cmp	r3, #255	; 0xff
 8020ec0:	d012      	beq.n	8020ee8 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 8020ec2:	3301      	adds	r3, #1
 8020ec4:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020ec6:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8020ec8:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020eca:	d80d      	bhi.n	8020ee8 <dhcp_select.isra.0+0x1d0>
 8020ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020ed0:	492b      	ldr	r1, [pc, #172]	; (8020f80 <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020ed2:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020ed4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020ed8:	b29b      	uxth	r3, r3
 8020eda:	fba1 2303 	umull	r2, r3, r1, r3
 8020ede:	095b      	lsrs	r3, r3, #5
 8020ee0:	8133      	strh	r3, [r6, #8]
}
 8020ee2:	b007      	add	sp, #28
 8020ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020ee8:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020eea:	8133      	strh	r3, [r6, #8]
}
 8020eec:	b007      	add	sp, #28
 8020eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020ef2:	4b1d      	ldr	r3, [pc, #116]	; (8020f68 <dhcp_select.isra.0+0x250>)
 8020ef4:	f240 529a 	movw	r2, #1434	; 0x59a
 8020ef8:	4922      	ldr	r1, [pc, #136]	; (8020f84 <dhcp_select.isra.0+0x26c>)
 8020efa:	481d      	ldr	r0, [pc, #116]	; (8020f70 <dhcp_select.isra.0+0x258>)
 8020efc:	f004 fa5a 	bl	80253b4 <iprintf>
 8020f00:	e78b      	b.n	8020e1a <dhcp_select.isra.0+0x102>
 8020f02:	4b19      	ldr	r3, [pc, #100]	; (8020f68 <dhcp_select.isra.0+0x250>)
 8020f04:	f240 529a 	movw	r2, #1434	; 0x59a
 8020f08:	491e      	ldr	r1, [pc, #120]	; (8020f84 <dhcp_select.isra.0+0x26c>)
 8020f0a:	4819      	ldr	r0, [pc, #100]	; (8020f70 <dhcp_select.isra.0+0x258>)
 8020f0c:	f004 fa52 	bl	80253b4 <iprintf>
 8020f10:	e72c      	b.n	8020d6c <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020f12:	4b15      	ldr	r3, [pc, #84]	; (8020f68 <dhcp_select.isra.0+0x250>)
 8020f14:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020f18:	491b      	ldr	r1, [pc, #108]	; (8020f88 <dhcp_select.isra.0+0x270>)
 8020f1a:	4815      	ldr	r0, [pc, #84]	; (8020f70 <dhcp_select.isra.0+0x258>)
 8020f1c:	f004 fa4a 	bl	80253b4 <iprintf>
 8020f20:	e735      	b.n	8020d8e <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020f22:	4b11      	ldr	r3, [pc, #68]	; (8020f68 <dhcp_select.isra.0+0x250>)
 8020f24:	f240 529a 	movw	r2, #1434	; 0x59a
 8020f28:	4916      	ldr	r1, [pc, #88]	; (8020f84 <dhcp_select.isra.0+0x26c>)
 8020f2a:	4811      	ldr	r0, [pc, #68]	; (8020f70 <dhcp_select.isra.0+0x258>)
 8020f2c:	f004 fa42 	bl	80253b4 <iprintf>
 8020f30:	e73e      	b.n	8020db0 <dhcp_select.isra.0+0x98>
 8020f32:	4b0d      	ldr	r3, [pc, #52]	; (8020f68 <dhcp_select.isra.0+0x250>)
 8020f34:	f240 529a 	movw	r2, #1434	; 0x59a
 8020f38:	4912      	ldr	r1, [pc, #72]	; (8020f84 <dhcp_select.isra.0+0x26c>)
 8020f3a:	480d      	ldr	r0, [pc, #52]	; (8020f70 <dhcp_select.isra.0+0x258>)
 8020f3c:	f004 fa3a 	bl	80253b4 <iprintf>
 8020f40:	e750      	b.n	8020de4 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8020f42:	4b09      	ldr	r3, [pc, #36]	; (8020f68 <dhcp_select.isra.0+0x250>)
 8020f44:	f240 1277 	movw	r2, #375	; 0x177
 8020f48:	4910      	ldr	r1, [pc, #64]	; (8020f8c <dhcp_select.isra.0+0x274>)
 8020f4a:	4809      	ldr	r0, [pc, #36]	; (8020f70 <dhcp_select.isra.0+0x258>)
 8020f4c:	f004 ba32 	b.w	80253b4 <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020f50:	4b05      	ldr	r3, [pc, #20]	; (8020f68 <dhcp_select.isra.0+0x250>)
 8020f52:	f240 1279 	movw	r2, #377	; 0x179
 8020f56:	490e      	ldr	r1, [pc, #56]	; (8020f90 <dhcp_select.isra.0+0x278>)
 8020f58:	4805      	ldr	r0, [pc, #20]	; (8020f70 <dhcp_select.isra.0+0x258>)
}
 8020f5a:	b007      	add	sp, #28
 8020f5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020f60:	f004 ba28 	b.w	80253b4 <iprintf>
 8020f64:	080454e4 	.word	0x080454e4
 8020f68:	080452f0 	.word	0x080452f0
 8020f6c:	0804566c 	.word	0x0804566c
 8020f70:	0802a008 	.word	0x0802a008
 8020f74:	080459a4 	.word	0x080459a4
 8020f78:	2002e128 	.word	0x2002e128
 8020f7c:	080459a8 	.word	0x080459a8
 8020f80:	10624dd3 	.word	0x10624dd3
 8020f84:	08045464 	.word	0x08045464
 8020f88:	080454a8 	.word	0x080454a8
 8020f8c:	0804551c 	.word	0x0804551c
 8020f90:	08045538 	.word	0x08045538
 8020f94:	08045669 	.word	0x08045669

08020f98 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8020f98:	4ba5      	ldr	r3, [pc, #660]	; (8021230 <dhcp_recv+0x298>)
{
 8020f9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8020f9e:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 8020fa2:	b08b      	sub	sp, #44	; 0x2c
 8020fa4:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020fa6:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8020faa:	f1b9 0f00 	cmp.w	r9, #0
 8020fae:	d04b      	beq.n	8021048 <dhcp_recv+0xb0>
 8020fb0:	f899 3004 	ldrb.w	r3, [r9, #4]
 8020fb4:	2b00      	cmp	r3, #0
 8020fb6:	d047      	beq.n	8021048 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8020fb8:	8953      	ldrh	r3, [r2, #10]
 8020fba:	2b2b      	cmp	r3, #43	; 0x2b
 8020fbc:	d944      	bls.n	8021048 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8020fbe:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8020fc0:	782b      	ldrb	r3, [r5, #0]
 8020fc2:	2b02      	cmp	r3, #2
 8020fc4:	d140      	bne.n	8021048 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fc6:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 8020fca:	b186      	cbz	r6, 8020fee <dhcp_recv+0x56>
 8020fcc:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 8020fd0:	f105 021c 	add.w	r2, r5, #28
 8020fd4:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fda:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020fdc:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fe0:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020fe2:	4284      	cmp	r4, r0
 8020fe4:	d130      	bne.n	8021048 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fe6:	2b06      	cmp	r3, #6
 8020fe8:	d001      	beq.n	8020fee <dhcp_recv+0x56>
 8020fea:	42b3      	cmp	r3, r6
 8020fec:	d3f3      	bcc.n	8020fd6 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8020fee:	6868      	ldr	r0, [r5, #4]
 8020ff0:	f7f8 f8de 	bl	80191b0 <lwip_htonl>
 8020ff4:	f8d9 3000 	ldr.w	r3, [r9]
 8020ff8:	4298      	cmp	r0, r3
 8020ffa:	d125      	bne.n	8021048 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 8020ffc:	4b8d      	ldr	r3, [pc, #564]	; (8021234 <dhcp_recv+0x29c>)
 8020ffe:	2200      	movs	r2, #0
 8021000:	605a      	str	r2, [r3, #4]
 8021002:	811a      	strh	r2, [r3, #8]
 8021004:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8021006:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 802100a:	2b2b      	cmp	r3, #43	; 0x2b
 802100c:	d91c      	bls.n	8021048 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 802100e:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 8021012:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 8021014:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8021018:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 802101c:	4693      	mov	fp, r2
 802101e:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 8021022:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 8021026:	e000      	b.n	802102a <dhcp_recv+0x92>
 8021028:	896b      	ldrh	r3, [r5, #10]
 802102a:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 802102c:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8021030:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8021034:	d80e      	bhi.n	8021054 <dhcp_recv+0xbc>
    q = q->next;
 8021036:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8021038:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 802103c:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8021040:	2d00      	cmp	r5, #0
 8021042:	d1f1      	bne.n	8021028 <dhcp_recv+0x90>
 8021044:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 8021048:	4658      	mov	r0, fp
}
 802104a:	b00b      	add	sp, #44	; 0x2c
 802104c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8021050:	f7fa b8e6 	b.w	801b220 <pbuf_free>
  options = (u8_t *)q->payload;
 8021054:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021056:	45d8      	cmp	r8, fp
 8021058:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 802105c:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802105e:	f080 8140 	bcs.w	80212e2 <dhcp_recv+0x34a>
 8021062:	9c02      	ldr	r4, [sp, #8]
 8021064:	9b01      	ldr	r3, [sp, #4]
 8021066:	5d1a      	ldrb	r2, [r3, r4]
 8021068:	2aff      	cmp	r2, #255	; 0xff
 802106a:	f000 813a 	beq.w	80212e2 <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 802106e:	1ca7      	adds	r7, r4, #2
 8021070:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 8021072:	42bc      	cmp	r4, r7
 8021074:	d8e6      	bhi.n	8021044 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 8021076:	1c61      	adds	r1, r4, #1
 8021078:	896b      	ldrh	r3, [r5, #10]
 802107a:	4299      	cmp	r1, r3
 802107c:	f280 8129 	bge.w	80212d2 <dhcp_recv+0x33a>
      len = options[offset + 1];
 8021080:	9801      	ldr	r0, [sp, #4]
 8021082:	4420      	add	r0, r4
 8021084:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 8021086:	2a3b      	cmp	r2, #59	; 0x3b
 8021088:	d83e      	bhi.n	8021108 <dhcp_recv+0x170>
 802108a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802108e:	0040      	.short	0x0040
 8021090:	003d0053 	.word	0x003d0053
 8021094:	003d00b4 	.word	0x003d00b4
 8021098:	009f003d 	.word	0x009f003d
 802109c:	003d003d 	.word	0x003d003d
 80210a0:	003d003d 	.word	0x003d003d
 80210a4:	003d003d 	.word	0x003d003d
 80210a8:	003d003d 	.word	0x003d003d
 80210ac:	003d003d 	.word	0x003d003d
 80210b0:	003d003d 	.word	0x003d003d
 80210b4:	003d003d 	.word	0x003d003d
 80210b8:	003d003d 	.word	0x003d003d
 80210bc:	003d003d 	.word	0x003d003d
 80210c0:	003d003d 	.word	0x003d003d
 80210c4:	003d003d 	.word	0x003d003d
 80210c8:	003d003d 	.word	0x003d003d
 80210cc:	003d003d 	.word	0x003d003d
 80210d0:	003d003d 	.word	0x003d003d
 80210d4:	003d003d 	.word	0x003d003d
 80210d8:	003d003d 	.word	0x003d003d
 80210dc:	003d003d 	.word	0x003d003d
 80210e0:	003d003d 	.word	0x003d003d
 80210e4:	003d003d 	.word	0x003d003d
 80210e8:	003d003d 	.word	0x003d003d
 80210ec:	003d003d 	.word	0x003d003d
 80210f0:	003d003d 	.word	0x003d003d
 80210f4:	00f80115 	.word	0x00f80115
 80210f8:	00df0109 	.word	0x00df0109
 80210fc:	003d003d 	.word	0x003d003d
 8021100:	00ec003d 	.word	0x00ec003d
 8021104:	00c3      	.short	0x00c3
 8021106:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 8021108:	2a00      	cmp	r2, #0
 802110a:	f040 82a2 	bne.w	8021652 <dhcp_recv+0x6ba>
      offset++;
 802110e:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 8021110:	429c      	cmp	r4, r3
 8021112:	f0c0 80e3 	bcc.w	80212dc <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 8021116:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8021118:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 802111c:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 802111e:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 8021122:	455c      	cmp	r4, fp
 8021124:	d28e      	bcs.n	8021044 <dhcp_recv+0xac>
        q = q->next;
 8021126:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8021128:	2d00      	cmp	r5, #0
 802112a:	f000 81e1 	beq.w	80214f0 <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 802112e:	686b      	ldr	r3, [r5, #4]
 8021130:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021132:	e797      	b.n	8021064 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021134:	2e04      	cmp	r6, #4
 8021136:	f040 81b5 	bne.w	80214a4 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 802113a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802113e:	429c      	cmp	r4, r3
 8021140:	dc80      	bgt.n	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021142:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8021144:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 8021148:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 802114a:	2300      	movs	r3, #0
 802114c:	9405      	str	r4, [sp, #20]
 802114e:	9309      	str	r3, [sp, #36]	; 0x24
 8021150:	4b38      	ldr	r3, [pc, #224]	; (8021234 <dhcp_recv+0x29c>)
 8021152:	eb03 0908 	add.w	r9, r3, r8
 8021156:	4b38      	ldr	r3, [pc, #224]	; (8021238 <dhcp_recv+0x2a0>)
 8021158:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 802115c:	e02b      	b.n	80211b6 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 802115e:	f899 3000 	ldrb.w	r3, [r9]
 8021162:	2b00      	cmp	r3, #0
 8021164:	f040 81a8 	bne.w	80214b8 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 8021168:	2e04      	cmp	r6, #4
 802116a:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 802116c:	463b      	mov	r3, r7
 802116e:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 8021170:	bf28      	it	cs
 8021172:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8021174:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 8021176:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8021178:	4622      	mov	r2, r4
 802117a:	f7fa f8f5 	bl	801b368 <pbuf_copy_partial>
 802117e:	4284      	cmp	r4, r0
 8021180:	f47f af60 	bne.w	8021044 <dhcp_recv+0xac>
          if (decode_len > 4) {
 8021184:	2e04      	cmp	r6, #4
 8021186:	f240 819a 	bls.w	80214be <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802118a:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 802118e:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8021192:	f040 81a3 	bne.w	80214dc <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 8021196:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8021198:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 802119a:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 802119c:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80211a0:	f7f8 f806 	bl	80191b0 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 80211a4:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 80211a6:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80211a8:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 80211ac:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 80211ae:	429f      	cmp	r7, r3
            goto decode_next;
 80211b0:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 80211b2:	f63f af47 	bhi.w	8021044 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80211b6:	f1b8 0f09 	cmp.w	r8, #9
 80211ba:	d9d0      	bls.n	802115e <dhcp_recv+0x1c6>
 80211bc:	4b1f      	ldr	r3, [pc, #124]	; (802123c <dhcp_recv+0x2a4>)
 80211be:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80211c2:	491f      	ldr	r1, [pc, #124]	; (8021240 <dhcp_recv+0x2a8>)
 80211c4:	481f      	ldr	r0, [pc, #124]	; (8021244 <dhcp_recv+0x2ac>)
 80211c6:	f004 f8f5 	bl	80253b4 <iprintf>
 80211ca:	e7c8      	b.n	802115e <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80211cc:	07b2      	lsls	r2, r6, #30
 80211ce:	f040 81ae 	bne.w	802152e <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80211d2:	2e08      	cmp	r6, #8
 80211d4:	4632      	mov	r2, r6
 80211d6:	bf28      	it	cs
 80211d8:	2208      	movcs	r2, #8
 80211da:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80211dc:	42b2      	cmp	r2, r6
 80211de:	f240 8241 	bls.w	8021664 <dhcp_recv+0x6cc>
 80211e2:	4b16      	ldr	r3, [pc, #88]	; (802123c <dhcp_recv+0x2a4>)
 80211e4:	f240 623c 	movw	r2, #1596	; 0x63c
 80211e8:	4917      	ldr	r1, [pc, #92]	; (8021248 <dhcp_recv+0x2b0>)
 80211ea:	4816      	ldr	r0, [pc, #88]	; (8021244 <dhcp_recv+0x2ac>)
 80211ec:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80211f0:	f004 f8e0 	bl	80253b4 <iprintf>
 80211f4:	e728      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80211f6:	2e03      	cmp	r6, #3
 80211f8:	f240 814a 	bls.w	8021490 <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 80211fc:	4434      	add	r4, r6
 80211fe:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8021202:	429c      	cmp	r4, r3
 8021204:	f73f af1e 	bgt.w	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021208:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 802120a:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 802120e:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 8021210:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021212:	e79a      	b.n	802114a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021214:	2e04      	cmp	r6, #4
 8021216:	f040 8131 	bne.w	802147c <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 802121a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802121e:	429c      	cmp	r4, r3
 8021220:	f73f af10 	bgt.w	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021224:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 8021226:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 802122a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802122c:	e78d      	b.n	802114a <dhcp_recv+0x1b2>
 802122e:	bf00      	nop
 8021230:	2001ef20 	.word	0x2001ef20
 8021234:	2002e130 	.word	0x2002e130
 8021238:	2002e13c 	.word	0x2002e13c
 802123c:	080452f0 	.word	0x080452f0
 8021240:	080455a8 	.word	0x080455a8
 8021244:	0802a008 	.word	0x0802a008
 8021248:	08045560 	.word	0x08045560
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802124c:	2e04      	cmp	r6, #4
 802124e:	f040 80ed 	bne.w	802142c <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 8021252:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8021256:	429c      	cmp	r4, r3
 8021258:	f73f aef4 	bgt.w	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802125c:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 802125e:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 8021262:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021264:	e771      	b.n	802114a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021266:	2e04      	cmp	r6, #4
 8021268:	f040 80d6 	bne.w	8021418 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 802126c:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8021270:	429c      	cmp	r4, r3
 8021272:	f73f aee7 	bgt.w	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021276:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 8021278:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 802127a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802127c:	e765      	b.n	802114a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 802127e:	2e01      	cmp	r6, #1
 8021280:	f040 80e8 	bne.w	8021454 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8021284:	9b02      	ldr	r3, [sp, #8]
 8021286:	2bf0      	cmp	r3, #240	; 0xf0
 8021288:	f040 8147 	bne.w	802151a <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 802128c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8021290:	4299      	cmp	r1, r3
 8021292:	f43f aed7 	beq.w	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021296:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8021298:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 802129c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802129e:	e754      	b.n	802114a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80212a0:	2e01      	cmp	r6, #1
 80212a2:	f040 80cd 	bne.w	8021440 <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 80212a6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80212aa:	4299      	cmp	r1, r3
 80212ac:	f43f aeca 	beq.w	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80212b0:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80212b2:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 80212b4:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80212b6:	e748      	b.n	802114a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80212b8:	2e04      	cmp	r6, #4
 80212ba:	f040 80d5 	bne.w	8021468 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 80212be:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80212c2:	429c      	cmp	r4, r3
 80212c4:	f73f aebe 	bgt.w	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80212c8:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80212ca:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 80212ce:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80212d0:	e73b      	b.n	802114a <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80212d2:	6828      	ldr	r0, [r5, #0]
 80212d4:	b310      	cbz	r0, 802131c <dhcp_recv+0x384>
 80212d6:	6840      	ldr	r0, [r0, #4]
 80212d8:	7806      	ldrb	r6, [r0, #0]
 80212da:	e6d4      	b.n	8021086 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80212dc:	455c      	cmp	r4, fp
 80212de:	f4ff aec1 	bcc.w	8021064 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80212e2:	4bb7      	ldr	r3, [pc, #732]	; (80215c0 <dhcp_recv+0x628>)
 80212e4:	781b      	ldrb	r3, [r3, #0]
 80212e6:	b163      	cbz	r3, 8021302 <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80212e8:	2300      	movs	r3, #0
 80212ea:	4ab5      	ldr	r2, [pc, #724]	; (80215c0 <dhcp_recv+0x628>)
 80212ec:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80212ee:	4bb5      	ldr	r3, [pc, #724]	; (80215c4 <dhcp_recv+0x62c>)
 80212f0:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80212f2:	2b01      	cmp	r3, #1
 80212f4:	f000 8108 	beq.w	8021508 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80212f8:	2b02      	cmp	r3, #2
 80212fa:	d006      	beq.n	802130a <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80212fc:	2b03      	cmp	r3, #3
 80212fe:	f000 8101 	beq.w	8021504 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 8021302:	9b04      	ldr	r3, [sp, #16]
 8021304:	2b00      	cmp	r3, #0
 8021306:	f000 811c 	beq.w	8021542 <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 802130a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 802130c:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 8021310:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 8021312:	232c      	movs	r3, #44	; 0x2c
 8021314:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 8021316:	9b03      	ldr	r3, [sp, #12]
 8021318:	895b      	ldrh	r3, [r3, #10]
 802131a:	e682      	b.n	8021022 <dhcp_recv+0x8a>
    switch (op) {
 802131c:	1e50      	subs	r0, r2, #1
 802131e:	283a      	cmp	r0, #58	; 0x3a
 8021320:	f63f aef1 	bhi.w	8021106 <dhcp_recv+0x16e>
 8021324:	a601      	add	r6, pc, #4	; (adr r6, 802132c <dhcp_recv+0x394>)
 8021326:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 802132a:	bf00      	nop
 802132c:	080214a5 	.word	0x080214a5
 8021330:	08021107 	.word	0x08021107
 8021334:	08021491 	.word	0x08021491
 8021338:	08021107 	.word	0x08021107
 802133c:	08021107 	.word	0x08021107
 8021340:	08021107 	.word	0x08021107
 8021344:	08021107 	.word	0x08021107
 8021348:	08021107 	.word	0x08021107
 802134c:	08021107 	.word	0x08021107
 8021350:	08021107 	.word	0x08021107
 8021354:	08021107 	.word	0x08021107
 8021358:	08021107 	.word	0x08021107
 802135c:	08021107 	.word	0x08021107
 8021360:	08021107 	.word	0x08021107
 8021364:	08021107 	.word	0x08021107
 8021368:	08021107 	.word	0x08021107
 802136c:	08021107 	.word	0x08021107
 8021370:	08021107 	.word	0x08021107
 8021374:	08021107 	.word	0x08021107
 8021378:	08021107 	.word	0x08021107
 802137c:	08021107 	.word	0x08021107
 8021380:	08021107 	.word	0x08021107
 8021384:	08021107 	.word	0x08021107
 8021388:	08021107 	.word	0x08021107
 802138c:	08021107 	.word	0x08021107
 8021390:	08021107 	.word	0x08021107
 8021394:	08021107 	.word	0x08021107
 8021398:	08021107 	.word	0x08021107
 802139c:	08021107 	.word	0x08021107
 80213a0:	08021107 	.word	0x08021107
 80213a4:	08021107 	.word	0x08021107
 80213a8:	08021107 	.word	0x08021107
 80213ac:	08021107 	.word	0x08021107
 80213b0:	08021107 	.word	0x08021107
 80213b4:	08021107 	.word	0x08021107
 80213b8:	08021107 	.word	0x08021107
 80213bc:	08021107 	.word	0x08021107
 80213c0:	08021107 	.word	0x08021107
 80213c4:	08021107 	.word	0x08021107
 80213c8:	08021107 	.word	0x08021107
 80213cc:	08021107 	.word	0x08021107
 80213d0:	08021107 	.word	0x08021107
 80213d4:	08021107 	.word	0x08021107
 80213d8:	08021107 	.word	0x08021107
 80213dc:	08021107 	.word	0x08021107
 80213e0:	08021107 	.word	0x08021107
 80213e4:	08021107 	.word	0x08021107
 80213e8:	08021107 	.word	0x08021107
 80213ec:	08021107 	.word	0x08021107
 80213f0:	08021107 	.word	0x08021107
 80213f4:	08021469 	.word	0x08021469
 80213f8:	08021455 	.word	0x08021455
 80213fc:	08021441 	.word	0x08021441
 8021400:	0802142d 	.word	0x0802142d
 8021404:	08021107 	.word	0x08021107
 8021408:	08021107 	.word	0x08021107
 802140c:	08021107 	.word	0x08021107
 8021410:	08021419 	.word	0x08021419
 8021414:	0802147d 	.word	0x0802147d
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021418:	4b6b      	ldr	r3, [pc, #428]	; (80215c8 <dhcp_recv+0x630>)
 802141a:	f240 625d 	movw	r2, #1629	; 0x65d
 802141e:	496b      	ldr	r1, [pc, #428]	; (80215cc <dhcp_recv+0x634>)
 8021420:	486b      	ldr	r0, [pc, #428]	; (80215d0 <dhcp_recv+0x638>)
 8021422:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021426:	f003 ffc5 	bl	80253b4 <iprintf>
 802142a:	e60d      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802142c:	4b66      	ldr	r3, [pc, #408]	; (80215c8 <dhcp_recv+0x630>)
 802142e:	f240 6259 	movw	r2, #1625	; 0x659
 8021432:	4966      	ldr	r1, [pc, #408]	; (80215cc <dhcp_recv+0x634>)
 8021434:	4866      	ldr	r0, [pc, #408]	; (80215d0 <dhcp_recv+0x638>)
 8021436:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802143a:	f003 ffbb 	bl	80253b4 <iprintf>
 802143e:	e603      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8021440:	4b61      	ldr	r3, [pc, #388]	; (80215c8 <dhcp_recv+0x630>)
 8021442:	f240 6255 	movw	r2, #1621	; 0x655
 8021446:	4963      	ldr	r1, [pc, #396]	; (80215d4 <dhcp_recv+0x63c>)
 8021448:	4861      	ldr	r0, [pc, #388]	; (80215d0 <dhcp_recv+0x638>)
 802144a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802144e:	f003 ffb1 	bl	80253b4 <iprintf>
 8021452:	e5f9      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8021454:	4b5c      	ldr	r3, [pc, #368]	; (80215c8 <dhcp_recv+0x630>)
 8021456:	f240 624f 	movw	r2, #1615	; 0x64f
 802145a:	495e      	ldr	r1, [pc, #376]	; (80215d4 <dhcp_recv+0x63c>)
 802145c:	485c      	ldr	r0, [pc, #368]	; (80215d0 <dhcp_recv+0x638>)
 802145e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021462:	f003 ffa7 	bl	80253b4 <iprintf>
 8021466:	e5ef      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021468:	4b57      	ldr	r3, [pc, #348]	; (80215c8 <dhcp_recv+0x630>)
 802146a:	f240 6241 	movw	r2, #1601	; 0x641
 802146e:	4957      	ldr	r1, [pc, #348]	; (80215cc <dhcp_recv+0x634>)
 8021470:	4857      	ldr	r0, [pc, #348]	; (80215d0 <dhcp_recv+0x638>)
 8021472:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021476:	f003 ff9d 	bl	80253b4 <iprintf>
 802147a:	e5e5      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802147c:	4b52      	ldr	r3, [pc, #328]	; (80215c8 <dhcp_recv+0x630>)
 802147e:	f240 6261 	movw	r2, #1633	; 0x661
 8021482:	4952      	ldr	r1, [pc, #328]	; (80215cc <dhcp_recv+0x634>)
 8021484:	4852      	ldr	r0, [pc, #328]	; (80215d0 <dhcp_recv+0x638>)
 8021486:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802148a:	f003 ff93 	bl	80253b4 <iprintf>
 802148e:	e5db      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8021490:	4b4d      	ldr	r3, [pc, #308]	; (80215c8 <dhcp_recv+0x630>)
 8021492:	f240 6233 	movw	r2, #1587	; 0x633
 8021496:	4950      	ldr	r1, [pc, #320]	; (80215d8 <dhcp_recv+0x640>)
 8021498:	484d      	ldr	r0, [pc, #308]	; (80215d0 <dhcp_recv+0x638>)
 802149a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802149e:	f003 ff89 	bl	80253b4 <iprintf>
 80214a2:	e5d1      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80214a4:	4b48      	ldr	r3, [pc, #288]	; (80215c8 <dhcp_recv+0x630>)
 80214a6:	f240 622e 	movw	r2, #1582	; 0x62e
 80214aa:	4948      	ldr	r1, [pc, #288]	; (80215cc <dhcp_recv+0x634>)
 80214ac:	4848      	ldr	r0, [pc, #288]	; (80215d0 <dhcp_recv+0x638>)
 80214ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80214b2:	f003 ff7f 	bl	80253b4 <iprintf>
 80214b6:	e5c7      	b.n	8021048 <dhcp_recv+0xb0>
 80214b8:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 80214ba:	896b      	ldrh	r3, [r5, #10]
 80214bc:	e628      	b.n	8021110 <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 80214be:	9c05      	ldr	r4, [sp, #20]
 80214c0:	d027      	beq.n	8021512 <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80214c2:	2e01      	cmp	r6, #1
 80214c4:	f040 80bb 	bne.w	802163e <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 80214c8:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 80214cc:	4b3d      	ldr	r3, [pc, #244]	; (80215c4 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 80214ce:	4a3c      	ldr	r2, [pc, #240]	; (80215c0 <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 80214d0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 80214d4:	2301      	movs	r3, #1
 80214d6:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80214da:	e7ee      	b.n	80214ba <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80214dc:	4b3a      	ldr	r3, [pc, #232]	; (80215c8 <dhcp_recv+0x630>)
 80214de:	f240 6281 	movw	r2, #1665	; 0x681
 80214e2:	493e      	ldr	r1, [pc, #248]	; (80215dc <dhcp_recv+0x644>)
 80214e4:	483a      	ldr	r0, [pc, #232]	; (80215d0 <dhcp_recv+0x638>)
 80214e6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80214ea:	f003 ff63 	bl	80253b4 <iprintf>
 80214ee:	e5ab      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80214f0:	4b35      	ldr	r3, [pc, #212]	; (80215c8 <dhcp_recv+0x630>)
 80214f2:	f240 629d 	movw	r2, #1693	; 0x69d
 80214f6:	493a      	ldr	r1, [pc, #232]	; (80215e0 <dhcp_recv+0x648>)
 80214f8:	4835      	ldr	r0, [pc, #212]	; (80215d0 <dhcp_recv+0x638>)
 80214fa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80214fe:	f003 ff59 	bl	80253b4 <iprintf>
 8021502:	e5a1      	b.n	8021048 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 8021504:	2301      	movs	r3, #1
 8021506:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 8021508:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 802150a:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 802150e:	9302      	str	r3, [sp, #8]
 8021510:	e701      	b.n	8021316 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 8021512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021514:	f7f7 fe4c 	bl	80191b0 <lwip_htonl>
 8021518:	e7d8      	b.n	80214cc <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 802151a:	4b2b      	ldr	r3, [pc, #172]	; (80215c8 <dhcp_recv+0x630>)
 802151c:	f240 6251 	movw	r2, #1617	; 0x651
 8021520:	4930      	ldr	r1, [pc, #192]	; (80215e4 <dhcp_recv+0x64c>)
 8021522:	482b      	ldr	r0, [pc, #172]	; (80215d0 <dhcp_recv+0x638>)
 8021524:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021528:	f003 ff44 	bl	80253b4 <iprintf>
 802152c:	e58c      	b.n	8021048 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802152e:	4b26      	ldr	r3, [pc, #152]	; (80215c8 <dhcp_recv+0x630>)
 8021530:	f240 6239 	movw	r2, #1593	; 0x639
 8021534:	492c      	ldr	r1, [pc, #176]	; (80215e8 <dhcp_recv+0x650>)
 8021536:	4826      	ldr	r0, [pc, #152]	; (80215d0 <dhcp_recv+0x638>)
 8021538:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802153c:	f003 ff3a 	bl	80253b4 <iprintf>
 8021540:	e582      	b.n	8021048 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8021542:	4b1f      	ldr	r3, [pc, #124]	; (80215c0 <dhcp_recv+0x628>)
 8021544:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021548:	785b      	ldrb	r3, [r3, #1]
 802154a:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 802154e:	2b00      	cmp	r3, #0
 8021550:	f43f ad7a 	beq.w	8021048 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8021554:	4a1b      	ldr	r2, [pc, #108]	; (80215c4 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 8021556:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 802155a:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 802155c:	2b05      	cmp	r3, #5
 802155e:	d01d      	beq.n	802159c <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 8021560:	2b06      	cmp	r3, #6
 8021562:	d043      	beq.n	80215ec <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8021564:	2b02      	cmp	r3, #2
 8021566:	f47f ad6f 	bne.w	8021048 <dhcp_recv+0xb0>
 802156a:	f899 3005 	ldrb.w	r3, [r9, #5]
 802156e:	2b06      	cmp	r3, #6
 8021570:	f47f ad6a 	bne.w	8021048 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8021574:	4b12      	ldr	r3, [pc, #72]	; (80215c0 <dhcp_recv+0x628>)
 8021576:	789b      	ldrb	r3, [r3, #2]
 8021578:	2b00      	cmp	r3, #0
 802157a:	f43f ad65 	beq.w	8021048 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802157e:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 8021582:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8021584:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8021586:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8021588:	f7f7 fe12 	bl	80191b0 <lwip_htonl>
 802158c:	4603      	mov	r3, r0
    dhcp_select(netif);
 802158e:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8021590:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021592:	6923      	ldr	r3, [r4, #16]
 8021594:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 8021596:	f7ff fbbf 	bl	8020d18 <dhcp_select.isra.0>
 802159a:	e555      	b.n	8021048 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 802159c:	f899 3005 	ldrb.w	r3, [r9, #5]
 80215a0:	2b01      	cmp	r3, #1
 80215a2:	d03f      	beq.n	8021624 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80215a4:	3b03      	subs	r3, #3
 80215a6:	2b02      	cmp	r3, #2
 80215a8:	f63f ad4e 	bhi.w	8021048 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 80215ac:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 80215b0:	4621      	mov	r1, r4
 80215b2:	f7ff f8c1 	bl	8020738 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 80215b6:	4650      	mov	r0, sl
 80215b8:	f7fe ffb2 	bl	8020520 <dhcp_bind>
 80215bc:	e544      	b.n	8021048 <dhcp_recv+0xb0>
 80215be:	bf00      	nop
 80215c0:	2002e130 	.word	0x2002e130
 80215c4:	2002e13c 	.word	0x2002e13c
 80215c8:	080452f0 	.word	0x080452f0
 80215cc:	08045554 	.word	0x08045554
 80215d0:	0802a008 	.word	0x0802a008
 80215d4:	08045584 	.word	0x08045584
 80215d8:	08045560 	.word	0x08045560
 80215dc:	080455bc 	.word	0x080455bc
 80215e0:	080455e8 	.word	0x080455e8
 80215e4:	08045590 	.word	0x08045590
 80215e8:	08045574 	.word	0x08045574
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80215ec:	f899 3005 	ldrb.w	r3, [r9, #5]
 80215f0:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80215f2:	2a02      	cmp	r2, #2
 80215f4:	d902      	bls.n	80215fc <dhcp_recv+0x664>
 80215f6:	2b01      	cmp	r3, #1
 80215f8:	f47f ad26 	bne.w	8021048 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80215fc:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 8021600:	795a      	ldrb	r2, [r3, #5]
 8021602:	2a0c      	cmp	r2, #12
 8021604:	d004      	beq.n	8021610 <dhcp_recv+0x678>
    dhcp->tries = 0;
 8021606:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8021608:	210c      	movs	r1, #12
    dhcp->tries = 0;
 802160a:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 802160c:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 802160e:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8021610:	4b1c      	ldr	r3, [pc, #112]	; (8021684 <dhcp_recv+0x6ec>)
 8021612:	4650      	mov	r0, sl
 8021614:	461a      	mov	r2, r3
 8021616:	4619      	mov	r1, r3
 8021618:	f7f9 f968 	bl	801a8ec <netif_set_addr>
  dhcp_discover(netif);
 802161c:	4650      	mov	r0, sl
 802161e:	f7ff fa95 	bl	8020b4c <dhcp_discover>
}
 8021622:	e511      	b.n	8021048 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 8021624:	4621      	mov	r1, r4
 8021626:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 802162a:	f7ff f885 	bl	8020738 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 802162e:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 8021632:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8021634:	0719      	lsls	r1, r3, #28
 8021636:	d5bf      	bpl.n	80215b8 <dhcp_recv+0x620>
        dhcp_check(netif);
 8021638:	f7fe ff5a 	bl	80204f0 <dhcp_check>
 802163c:	e504      	b.n	8021048 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 802163e:	4b12      	ldr	r3, [pc, #72]	; (8021688 <dhcp_recv+0x6f0>)
 8021640:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8021644:	4911      	ldr	r1, [pc, #68]	; (802168c <dhcp_recv+0x6f4>)
 8021646:	4812      	ldr	r0, [pc, #72]	; (8021690 <dhcp_recv+0x6f8>)
 8021648:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802164c:	f003 feb2 	bl	80253b4 <iprintf>
 8021650:	e4fa      	b.n	8021048 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 8021652:	4434      	add	r4, r6
 8021654:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8021658:	4294      	cmp	r4, r2
 802165a:	f73f acf3 	bgt.w	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802165e:	19bc      	adds	r4, r7, r6
 8021660:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021662:	e555      	b.n	8021110 <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 8021664:	4434      	add	r4, r6
 8021666:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 802166a:	428c      	cmp	r4, r1
 802166c:	f73f acea 	bgt.w	8021044 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021670:	19bc      	adds	r4, r7, r6
 8021672:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021674:	2e00      	cmp	r6, #0
 8021676:	f43f ad4b 	beq.w	8021110 <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 802167a:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 802167c:	f04f 0808 	mov.w	r8, #8
 8021680:	e563      	b.n	802114a <dhcp_recv+0x1b2>
 8021682:	bf00      	nop
 8021684:	080459a4 	.word	0x080459a4
 8021688:	080452f0 	.word	0x080452f0
 802168c:	080455d4 	.word	0x080455d4
 8021690:	0802a008 	.word	0x0802a008

08021694 <dhcp_network_changed>:
{
 8021694:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021696:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 8021698:	b135      	cbz	r5, 80216a8 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 802169a:	796b      	ldrb	r3, [r5, #5]
 802169c:	4604      	mov	r4, r0
 802169e:	2b05      	cmp	r3, #5
 80216a0:	d803      	bhi.n	80216aa <dhcp_network_changed+0x16>
 80216a2:	2b02      	cmp	r3, #2
 80216a4:	d813      	bhi.n	80216ce <dhcp_network_changed+0x3a>
 80216a6:	b95b      	cbnz	r3, 80216c0 <dhcp_network_changed+0x2c>
}
 80216a8:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 80216aa:	2b0a      	cmp	r3, #10
 80216ac:	d00f      	beq.n	80216ce <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80216ae:	2b0c      	cmp	r3, #12
 80216b0:	d906      	bls.n	80216c0 <dhcp_network_changed+0x2c>
 80216b2:	4b0a      	ldr	r3, [pc, #40]	; (80216dc <dhcp_network_changed+0x48>)
 80216b4:	f240 326d 	movw	r2, #877	; 0x36d
 80216b8:	4909      	ldr	r1, [pc, #36]	; (80216e0 <dhcp_network_changed+0x4c>)
 80216ba:	480a      	ldr	r0, [pc, #40]	; (80216e4 <dhcp_network_changed+0x50>)
 80216bc:	f003 fe7a 	bl	80253b4 <iprintf>
      dhcp->tries = 0;
 80216c0:	2300      	movs	r3, #0
      dhcp_discover(netif);
 80216c2:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80216c4:	71ab      	strb	r3, [r5, #6]
}
 80216c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 80216ca:	f7ff ba3f 	b.w	8020b4c <dhcp_discover>
      dhcp->tries = 0;
 80216ce:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 80216d0:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80216d2:	71ab      	strb	r3, [r5, #6]
}
 80216d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 80216d8:	f7ff b938 	b.w	802094c <dhcp_reboot.isra.0>
 80216dc:	080452f0 	.word	0x080452f0
 80216e0:	08045630 	.word	0x08045630
 80216e4:	0802a008 	.word	0x0802a008

080216e8 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80216e8:	2800      	cmp	r0, #0
 80216ea:	d066      	beq.n	80217ba <dhcp_arp_reply+0xd2>
{
 80216ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 80216f0:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 80216f2:	b085      	sub	sp, #20
 80216f4:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80216f6:	b115      	cbz	r5, 80216fe <dhcp_arp_reply+0x16>
 80216f8:	796b      	ldrb	r3, [r5, #5]
 80216fa:	2b08      	cmp	r3, #8
 80216fc:	d002      	beq.n	8021704 <dhcp_arp_reply+0x1c>
}
 80216fe:	b005      	add	sp, #20
 8021700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8021704:	680a      	ldr	r2, [r1, #0]
 8021706:	69eb      	ldr	r3, [r5, #28]
 8021708:	429a      	cmp	r2, r3
 802170a:	d1f8      	bne.n	80216fe <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 802170c:	2200      	movs	r2, #0
    dhcp->state = new_state;
 802170e:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8021710:	4629      	mov	r1, r5
    dhcp->tries = 0;
 8021712:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 8021714:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8021716:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 802171a:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 802171c:	2204      	movs	r2, #4
 802171e:	f7ff f863 	bl	80207e8 <dhcp_create_msg>
  if (p_out != NULL) {
 8021722:	4606      	mov	r6, r0
 8021724:	2800      	cmp	r0, #0
 8021726:	d040      	beq.n	80217aa <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021728:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 802172c:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802172e:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021732:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021734:	2b44      	cmp	r3, #68	; 0x44
 8021736:	d847      	bhi.n	80217c8 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 8021738:	2232      	movs	r2, #50	; 0x32
 802173a:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 802173e:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 8021742:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 8021746:	b29b      	uxth	r3, r3
 8021748:	2204      	movs	r2, #4
 802174a:	fa1f f888 	uxth.w	r8, r8
 802174e:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021750:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021752:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021756:	f7f7 fd2b 	bl	80191b0 <lwip_htonl>
 802175a:	4639      	mov	r1, r7
 802175c:	4602      	mov	r2, r0
 802175e:	4640      	mov	r0, r8
 8021760:	f7fe fea2 	bl	80204a8 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8021764:	1c41      	adds	r1, r0, #1
 8021766:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021768:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 802176c:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802176e:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8021770:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021772:	2943      	cmp	r1, #67	; 0x43
 8021774:	d807      	bhi.n	8021786 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 8021776:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 802177a:	1878      	adds	r0, r7, r1
 802177c:	2100      	movs	r1, #0
 802177e:	b292      	uxth	r2, r2
 8021780:	f002 fe7a 	bl	8024478 <memset>
 8021784:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021786:	31f0      	adds	r1, #240	; 0xf0
 8021788:	4630      	mov	r0, r6
 802178a:	b289      	uxth	r1, r1
 802178c:	f7f9 fc30 	bl	801aff0 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021790:	4911      	ldr	r1, [pc, #68]	; (80217d8 <dhcp_arp_reply+0xf0>)
 8021792:	4a12      	ldr	r2, [pc, #72]	; (80217dc <dhcp_arp_reply+0xf4>)
 8021794:	2343      	movs	r3, #67	; 0x43
 8021796:	9400      	str	r4, [sp, #0]
 8021798:	6808      	ldr	r0, [r1, #0]
 802179a:	4631      	mov	r1, r6
 802179c:	9201      	str	r2, [sp, #4]
 802179e:	4a10      	ldr	r2, [pc, #64]	; (80217e0 <dhcp_arp_reply+0xf8>)
 80217a0:	f7fe fc6c 	bl	802007c <udp_sendto_if_src>
    pbuf_free(p_out);
 80217a4:	4630      	mov	r0, r6
 80217a6:	f7f9 fd3b 	bl	801b220 <pbuf_free>
  if (dhcp->tries < 255) {
 80217aa:	79ab      	ldrb	r3, [r5, #6]
 80217ac:	2bff      	cmp	r3, #255	; 0xff
 80217ae:	d001      	beq.n	80217b4 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 80217b0:	3301      	adds	r3, #1
 80217b2:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80217b4:	2314      	movs	r3, #20
 80217b6:	812b      	strh	r3, [r5, #8]
  return result;
 80217b8:	e7a1      	b.n	80216fe <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80217ba:	4b0a      	ldr	r3, [pc, #40]	; (80217e4 <dhcp_arp_reply+0xfc>)
 80217bc:	f240 328b 	movw	r2, #907	; 0x38b
 80217c0:	4909      	ldr	r1, [pc, #36]	; (80217e8 <dhcp_arp_reply+0x100>)
 80217c2:	480a      	ldr	r0, [pc, #40]	; (80217ec <dhcp_arp_reply+0x104>)
 80217c4:	f003 bdf6 	b.w	80253b4 <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80217c8:	4b06      	ldr	r3, [pc, #24]	; (80217e4 <dhcp_arp_reply+0xfc>)
 80217ca:	f240 529a 	movw	r2, #1434	; 0x59a
 80217ce:	4908      	ldr	r1, [pc, #32]	; (80217f0 <dhcp_arp_reply+0x108>)
 80217d0:	4806      	ldr	r0, [pc, #24]	; (80217ec <dhcp_arp_reply+0x104>)
 80217d2:	f003 fdef 	bl	80253b4 <iprintf>
 80217d6:	e7af      	b.n	8021738 <dhcp_arp_reply+0x50>
 80217d8:	2002e128 	.word	0x2002e128
 80217dc:	080459a4 	.word	0x080459a4
 80217e0:	080459a8 	.word	0x080459a8
 80217e4:	080452f0 	.word	0x080452f0
 80217e8:	0802cd80 	.word	0x0802cd80
 80217ec:	0802a008 	.word	0x0802a008
 80217f0:	08045464 	.word	0x08045464

080217f4 <dhcp_renew>:
{
 80217f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80217f8:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 80217fa:	b087      	sub	sp, #28
 80217fc:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 80217fe:	797b      	ldrb	r3, [r7, #5]
 8021800:	2b05      	cmp	r3, #5
 8021802:	d004      	beq.n	802180e <dhcp_renew+0x1a>
    dhcp->tries = 0;
 8021804:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021806:	2205      	movs	r2, #5
    dhcp->tries = 0;
 8021808:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 802180a:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 802180c:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802180e:	f10d 0316 	add.w	r3, sp, #22
 8021812:	2203      	movs	r2, #3
 8021814:	4639      	mov	r1, r7
 8021816:	4658      	mov	r0, fp
 8021818:	f7fe ffe6 	bl	80207e8 <dhcp_create_msg>
  if (p_out != NULL) {
 802181c:	4605      	mov	r5, r0
 802181e:	2800      	cmp	r0, #0
 8021820:	f000 80b9 	beq.w	8021996 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021824:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021828:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802182a:	f104 0804 	add.w	r8, r4, #4
 802182e:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021832:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021834:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021838:	f200 8095 	bhi.w	8021966 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 802183c:	2239      	movs	r2, #57	; 0x39
 802183e:	1c63      	adds	r3, r4, #1
 8021840:	fa1f f189 	uxth.w	r1, r9
 8021844:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021846:	b29b      	uxth	r3, r3
 8021848:	2202      	movs	r2, #2
 802184a:	9103      	str	r1, [sp, #12]
 802184c:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802184e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021850:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021854:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021856:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802185a:	f200 8094 	bhi.w	8021986 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802185e:	1ce3      	adds	r3, r4, #3
 8021860:	fa1f f988 	uxth.w	r9, r8
 8021864:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021868:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802186a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802186c:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802186e:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021872:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021876:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802187a:	2b44      	cmp	r3, #68	; 0x44
 802187c:	d87b      	bhi.n	8021976 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 802187e:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8021882:	2237      	movs	r2, #55	; 0x37
 8021884:	1d63      	adds	r3, r4, #5
 8021886:	f8df a134 	ldr.w	sl, [pc, #308]	; 80219bc <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 802188a:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 802188e:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8021892:	b29b      	uxth	r3, r3
 8021894:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021896:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802189a:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 802189e:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218a0:	493e      	ldr	r1, [pc, #248]	; (802199c <dhcp_renew+0x1a8>)
 80218a2:	4b3f      	ldr	r3, [pc, #252]	; (80219a0 <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80218a4:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218a8:	d80f      	bhi.n	80218ca <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 80218aa:	f108 0201 	add.w	r2, r8, #1
 80218ae:	f806 9008 	strb.w	r9, [r6, r8]
 80218b2:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80218b6:	4a3b      	ldr	r2, [pc, #236]	; (80219a4 <dhcp_renew+0x1b0>)
 80218b8:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80218ba:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80218be:	d00c      	beq.n	80218da <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218c0:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80218c4:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218c8:	d9ef      	bls.n	80218aa <dhcp_renew+0xb6>
 80218ca:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80218ce:	4836      	ldr	r0, [pc, #216]	; (80219a8 <dhcp_renew+0x1b4>)
 80218d0:	f003 fd70 	bl	80253b4 <iprintf>
 80218d4:	4b32      	ldr	r3, [pc, #200]	; (80219a0 <dhcp_renew+0x1ac>)
 80218d6:	4931      	ldr	r1, [pc, #196]	; (802199c <dhcp_renew+0x1a8>)
 80218d8:	e7e7      	b.n	80218aa <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 80218da:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 80218de:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 80218e2:	22ff      	movs	r2, #255	; 0xff
 80218e4:	b280      	uxth	r0, r0
 80218e6:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80218e8:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 80218ea:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80218ec:	d808      	bhi.n	8021900 <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 80218ee:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 80218f2:	4430      	add	r0, r6
 80218f4:	2100      	movs	r1, #0
 80218f6:	b2a4      	uxth	r4, r4
 80218f8:	1c62      	adds	r2, r4, #1
 80218fa:	f002 fdbd 	bl	8024478 <memset>
 80218fe:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021900:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021904:	4628      	mov	r0, r5
 8021906:	b289      	uxth	r1, r1
 8021908:	f7f9 fb72 	bl	801aff0 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 802190c:	4827      	ldr	r0, [pc, #156]	; (80219ac <dhcp_renew+0x1b8>)
 802190e:	2343      	movs	r3, #67	; 0x43
 8021910:	f107 0218 	add.w	r2, r7, #24
 8021914:	6800      	ldr	r0, [r0, #0]
 8021916:	4629      	mov	r1, r5
 8021918:	f8cd b000 	str.w	fp, [sp]
 802191c:	f7fe fc62 	bl	80201e4 <udp_sendto_if>
 8021920:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8021922:	4628      	mov	r0, r5
 8021924:	f7f9 fc7c 	bl	801b220 <pbuf_free>
  if (dhcp->tries < 255) {
 8021928:	79bb      	ldrb	r3, [r7, #6]
 802192a:	2bff      	cmp	r3, #255	; 0xff
 802192c:	d015      	beq.n	802195a <dhcp_renew+0x166>
    dhcp->tries++;
 802192e:	3301      	adds	r3, #1
 8021930:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8021932:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021934:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8021936:	d810      	bhi.n	802195a <dhcp_renew+0x166>
 8021938:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802193c:	4a1c      	ldr	r2, [pc, #112]	; (80219b0 <dhcp_renew+0x1bc>)
}
 802193e:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8021940:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8021944:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021946:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802194a:	b29b      	uxth	r3, r3
 802194c:	fba2 2303 	umull	r2, r3, r2, r3
 8021950:	095b      	lsrs	r3, r3, #5
 8021952:	813b      	strh	r3, [r7, #8]
}
 8021954:	b007      	add	sp, #28
 8021956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 802195a:	2328      	movs	r3, #40	; 0x28
}
 802195c:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802195e:	813b      	strh	r3, [r7, #8]
}
 8021960:	b007      	add	sp, #28
 8021962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021966:	4b0e      	ldr	r3, [pc, #56]	; (80219a0 <dhcp_renew+0x1ac>)
 8021968:	f240 529a 	movw	r2, #1434	; 0x59a
 802196c:	4911      	ldr	r1, [pc, #68]	; (80219b4 <dhcp_renew+0x1c0>)
 802196e:	480e      	ldr	r0, [pc, #56]	; (80219a8 <dhcp_renew+0x1b4>)
 8021970:	f003 fd20 	bl	80253b4 <iprintf>
 8021974:	e762      	b.n	802183c <dhcp_renew+0x48>
 8021976:	4b0a      	ldr	r3, [pc, #40]	; (80219a0 <dhcp_renew+0x1ac>)
 8021978:	f240 529a 	movw	r2, #1434	; 0x59a
 802197c:	490d      	ldr	r1, [pc, #52]	; (80219b4 <dhcp_renew+0x1c0>)
 802197e:	480a      	ldr	r0, [pc, #40]	; (80219a8 <dhcp_renew+0x1b4>)
 8021980:	f003 fd18 	bl	80253b4 <iprintf>
 8021984:	e77b      	b.n	802187e <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021986:	4b06      	ldr	r3, [pc, #24]	; (80219a0 <dhcp_renew+0x1ac>)
 8021988:	f240 52ae 	movw	r2, #1454	; 0x5ae
 802198c:	490a      	ldr	r1, [pc, #40]	; (80219b8 <dhcp_renew+0x1c4>)
 802198e:	4806      	ldr	r0, [pc, #24]	; (80219a8 <dhcp_renew+0x1b4>)
 8021990:	f003 fd10 	bl	80253b4 <iprintf>
 8021994:	e763      	b.n	802185e <dhcp_renew+0x6a>
    result = ERR_MEM;
 8021996:	f04f 34ff 	mov.w	r4, #4294967295
 802199a:	e7c5      	b.n	8021928 <dhcp_renew+0x134>
 802199c:	080454e4 	.word	0x080454e4
 80219a0:	080452f0 	.word	0x080452f0
 80219a4:	0804566c 	.word	0x0804566c
 80219a8:	0802a008 	.word	0x0802a008
 80219ac:	2002e128 	.word	0x2002e128
 80219b0:	10624dd3 	.word	0x10624dd3
 80219b4:	08045464 	.word	0x08045464
 80219b8:	080454a8 	.word	0x080454a8
 80219bc:	08045669 	.word	0x08045669

080219c0 <dhcp_release_and_stop>:
{
 80219c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80219c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 80219c6:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 80219c8:	2c00      	cmp	r4, #0
 80219ca:	d06c      	beq.n	8021aa6 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 80219cc:	7962      	ldrb	r2, [r4, #5]
 80219ce:	2a00      	cmp	r2, #0
 80219d0:	d069      	beq.n	8021aa6 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80219d2:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80219d4:	2300      	movs	r3, #0
 80219d6:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80219d8:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80219da:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80219dc:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80219de:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80219e0:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80219e2:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80219e4:	81e3      	strh	r3, [r4, #14]
 80219e6:	6123      	str	r3, [r4, #16]
 80219e8:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80219ea:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80219ee:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80219f2:	d901      	bls.n	80219f8 <dhcp_release_and_stop+0x38>
 80219f4:	2a0a      	cmp	r2, #10
 80219f6:	d148      	bne.n	8021a8a <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80219f8:	f10d 030a 	add.w	r3, sp, #10
 80219fc:	2207      	movs	r2, #7
 80219fe:	4621      	mov	r1, r4
 8021a00:	4628      	mov	r0, r5
 8021a02:	f7fe fef1 	bl	80207e8 <dhcp_create_msg>
    if (p_out != NULL) {
 8021a06:	4606      	mov	r6, r0
 8021a08:	2800      	cmp	r0, #0
 8021a0a:	d03e      	beq.n	8021a8a <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021a0c:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 8021a10:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021a12:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021a16:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021a18:	2b44      	cmp	r3, #68	; 0x44
 8021a1a:	d84e      	bhi.n	8021aba <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 8021a1c:	f108 0301 	add.w	r3, r8, #1
 8021a20:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 8021a22:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8021a24:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 8021a28:	2204      	movs	r2, #4
 8021a2a:	f108 0802 	add.w	r8, r8, #2
 8021a2e:	54fa      	strb	r2, [r7, r3]
 8021a30:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021a34:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021a36:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021a3a:	f7f7 fbb9 	bl	80191b0 <lwip_htonl>
 8021a3e:	4639      	mov	r1, r7
 8021a40:	4602      	mov	r2, r0
 8021a42:	4640      	mov	r0, r8
 8021a44:	f7fe fd30 	bl	80204a8 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8021a48:	1c43      	adds	r3, r0, #1
 8021a4a:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021a4c:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 8021a50:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021a52:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8021a54:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021a56:	2b43      	cmp	r3, #67	; 0x43
 8021a58:	d807      	bhi.n	8021a6a <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 8021a5a:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8021a5e:	18f8      	adds	r0, r7, r3
 8021a60:	2100      	movs	r1, #0
 8021a62:	b292      	uxth	r2, r2
 8021a64:	f002 fd08 	bl	8024478 <memset>
 8021a68:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021a6a:	33f0      	adds	r3, #240	; 0xf0
 8021a6c:	4630      	mov	r0, r6
 8021a6e:	b299      	uxth	r1, r3
 8021a70:	f7f9 fabe 	bl	801aff0 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021a74:	4a15      	ldr	r2, [pc, #84]	; (8021acc <dhcp_release_and_stop+0x10c>)
 8021a76:	9500      	str	r5, [sp, #0]
 8021a78:	2343      	movs	r3, #67	; 0x43
 8021a7a:	6810      	ldr	r0, [r2, #0]
 8021a7c:	4631      	mov	r1, r6
 8021a7e:	aa03      	add	r2, sp, #12
 8021a80:	f7fe fbb0 	bl	80201e4 <udp_sendto_if>
      pbuf_free(p_out);
 8021a84:	4630      	mov	r0, r6
 8021a86:	f7f9 fbcb 	bl	801b220 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8021a8a:	4b11      	ldr	r3, [pc, #68]	; (8021ad0 <dhcp_release_and_stop+0x110>)
 8021a8c:	4628      	mov	r0, r5
 8021a8e:	461a      	mov	r2, r3
 8021a90:	4619      	mov	r1, r3
 8021a92:	f7f8 ff2b 	bl	801a8ec <netif_set_addr>
  if (new_state != dhcp->state) {
 8021a96:	7963      	ldrb	r3, [r4, #5]
 8021a98:	b11b      	cbz	r3, 8021aa2 <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 8021a9a:	2300      	movs	r3, #0
 8021a9c:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 8021a9e:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 8021aa0:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 8021aa2:	7923      	ldrb	r3, [r4, #4]
 8021aa4:	b913      	cbnz	r3, 8021aac <dhcp_release_and_stop+0xec>
}
 8021aa6:	b004      	add	sp, #16
 8021aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8021aac:	f7fe fe22 	bl	80206f4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8021ab0:	2300      	movs	r3, #0
 8021ab2:	7123      	strb	r3, [r4, #4]
}
 8021ab4:	b004      	add	sp, #16
 8021ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021aba:	4b06      	ldr	r3, [pc, #24]	; (8021ad4 <dhcp_release_and_stop+0x114>)
 8021abc:	f240 529a 	movw	r2, #1434	; 0x59a
 8021ac0:	4905      	ldr	r1, [pc, #20]	; (8021ad8 <dhcp_release_and_stop+0x118>)
 8021ac2:	4806      	ldr	r0, [pc, #24]	; (8021adc <dhcp_release_and_stop+0x11c>)
 8021ac4:	f003 fc76 	bl	80253b4 <iprintf>
 8021ac8:	e7a8      	b.n	8021a1c <dhcp_release_and_stop+0x5c>
 8021aca:	bf00      	nop
 8021acc:	2002e128 	.word	0x2002e128
 8021ad0:	080459a4 	.word	0x080459a4
 8021ad4:	080452f0 	.word	0x080452f0
 8021ad8:	08045464 	.word	0x08045464
 8021adc:	0802a008 	.word	0x0802a008

08021ae0 <dhcp_start>:
{
 8021ae0:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8021ae2:	2800      	cmp	r0, #0
 8021ae4:	d046      	beq.n	8021b74 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021ae6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8021aea:	4604      	mov	r4, r0
 8021aec:	07da      	lsls	r2, r3, #31
 8021aee:	d537      	bpl.n	8021b60 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8021af0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 8021af2:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8021af4:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8021af8:	d32f      	bcc.n	8021b5a <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8021afa:	b33d      	cbz	r5, 8021b4c <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8021afc:	792b      	ldrb	r3, [r5, #4]
 8021afe:	bb13      	cbnz	r3, 8021b46 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 8021b00:	2234      	movs	r2, #52	; 0x34
 8021b02:	2100      	movs	r1, #0
 8021b04:	4628      	mov	r0, r5
 8021b06:	f002 fcb7 	bl	8024478 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8021b0a:	f7fe fdb9 	bl	8020680 <dhcp_inc_pcb_refcount>
 8021b0e:	4606      	mov	r6, r0
 8021b10:	bb18      	cbnz	r0, 8021b5a <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 8021b12:	2301      	movs	r3, #1
 8021b14:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8021b16:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8021b1a:	075b      	lsls	r3, r3, #29
 8021b1c:	d408      	bmi.n	8021b30 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 8021b1e:	796b      	ldrb	r3, [r5, #5]
 8021b20:	2b02      	cmp	r3, #2
 8021b22:	d003      	beq.n	8021b2c <dhcp_start+0x4c>
    dhcp->state = new_state;
 8021b24:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8021b26:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8021b28:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8021b2a:	716b      	strb	r3, [r5, #5]
}
 8021b2c:	4630      	mov	r0, r6
 8021b2e:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 8021b30:	4620      	mov	r0, r4
 8021b32:	f7ff f80b 	bl	8020b4c <dhcp_discover>
  if (result != ERR_OK) {
 8021b36:	2800      	cmp	r0, #0
 8021b38:	d0f8      	beq.n	8021b2c <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8021b3a:	4620      	mov	r0, r4
    return ERR_MEM;
 8021b3c:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 8021b40:	f7ff ff3e 	bl	80219c0 <dhcp_release_and_stop>
    return ERR_MEM;
 8021b44:	e7f2      	b.n	8021b2c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8021b46:	f7fe fdd5 	bl	80206f4 <dhcp_dec_pcb_refcount>
 8021b4a:	e7d9      	b.n	8021b00 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8021b4c:	2034      	movs	r0, #52	; 0x34
 8021b4e:	f7f8 fc77 	bl	801a440 <mem_malloc>
    if (dhcp == NULL) {
 8021b52:	4605      	mov	r5, r0
 8021b54:	b108      	cbz	r0, 8021b5a <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8021b56:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8021b58:	e7d2      	b.n	8021b00 <dhcp_start+0x20>
    return ERR_MEM;
 8021b5a:	f04f 36ff 	mov.w	r6, #4294967295
 8021b5e:	e7e5      	b.n	8021b2c <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021b60:	4b09      	ldr	r3, [pc, #36]	; (8021b88 <dhcp_start+0xa8>)
 8021b62:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8021b66:	4909      	ldr	r1, [pc, #36]	; (8021b8c <dhcp_start+0xac>)
 8021b68:	f06f 060f 	mvn.w	r6, #15
 8021b6c:	4808      	ldr	r0, [pc, #32]	; (8021b90 <dhcp_start+0xb0>)
 8021b6e:	f003 fc21 	bl	80253b4 <iprintf>
 8021b72:	e7db      	b.n	8021b2c <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8021b74:	4b04      	ldr	r3, [pc, #16]	; (8021b88 <dhcp_start+0xa8>)
 8021b76:	f240 22e7 	movw	r2, #743	; 0x2e7
 8021b7a:	4906      	ldr	r1, [pc, #24]	; (8021b94 <dhcp_start+0xb4>)
 8021b7c:	f06f 060f 	mvn.w	r6, #15
 8021b80:	4803      	ldr	r0, [pc, #12]	; (8021b90 <dhcp_start+0xb0>)
 8021b82:	f003 fc17 	bl	80253b4 <iprintf>
 8021b86:	e7d1      	b.n	8021b2c <dhcp_start+0x4c>
 8021b88:	080452f0 	.word	0x080452f0
 8021b8c:	08045644 	.word	0x08045644
 8021b90:	0802a008 	.word	0x0802a008
 8021b94:	0802cd80 	.word	0x0802cd80

08021b98 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8021b98:	4b8a      	ldr	r3, [pc, #552]	; (8021dc4 <dhcp_coarse_tmr+0x22c>)
{
 8021b9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8021b9e:	681d      	ldr	r5, [r3, #0]
{
 8021ba0:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8021ba2:	b1dd      	cbz	r5, 8021bdc <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8021ba4:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8021ba6:	b1b4      	cbz	r4, 8021bd6 <dhcp_coarse_tmr+0x3e>
 8021ba8:	7963      	ldrb	r3, [r4, #5]
 8021baa:	b1a3      	cbz	r3, 8021bd6 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8021bac:	8aa1      	ldrh	r1, [r4, #20]
 8021bae:	b129      	cbz	r1, 8021bbc <dhcp_coarse_tmr+0x24>
 8021bb0:	8a62      	ldrh	r2, [r4, #18]
 8021bb2:	3201      	adds	r2, #1
 8021bb4:	b292      	uxth	r2, r2
 8021bb6:	4291      	cmp	r1, r2
 8021bb8:	8262      	strh	r2, [r4, #18]
 8021bba:	d012      	beq.n	8021be2 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8021bbc:	8a22      	ldrh	r2, [r4, #16]
 8021bbe:	b11a      	cbz	r2, 8021bc8 <dhcp_coarse_tmr+0x30>
 8021bc0:	1e51      	subs	r1, r2, #1
 8021bc2:	2a01      	cmp	r2, #1
 8021bc4:	8221      	strh	r1, [r4, #16]
 8021bc6:	d013      	beq.n	8021bf0 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8021bc8:	89e2      	ldrh	r2, [r4, #14]
 8021bca:	b122      	cbz	r2, 8021bd6 <dhcp_coarse_tmr+0x3e>
 8021bcc:	1e51      	subs	r1, r2, #1
 8021bce:	2a01      	cmp	r2, #1
 8021bd0:	81e1      	strh	r1, [r4, #14]
 8021bd2:	f000 8087 	beq.w	8021ce4 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8021bd6:	682d      	ldr	r5, [r5, #0]
 8021bd8:	2d00      	cmp	r5, #0
 8021bda:	d1e3      	bne.n	8021ba4 <dhcp_coarse_tmr+0xc>
}
 8021bdc:	b007      	add	sp, #28
 8021bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 8021be2:	4628      	mov	r0, r5
 8021be4:	f7ff feec 	bl	80219c0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8021be8:	4628      	mov	r0, r5
 8021bea:	f7ff ff79 	bl	8021ae0 <dhcp_start>
 8021bee:	e7f2      	b.n	8021bd6 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021bf0:	1e5a      	subs	r2, r3, #1
 8021bf2:	b2d1      	uxtb	r1, r2
 8021bf4:	2909      	cmp	r1, #9
 8021bf6:	d8ee      	bhi.n	8021bd6 <dhcp_coarse_tmr+0x3e>
 8021bf8:	f240 2219 	movw	r2, #537	; 0x219
 8021bfc:	40ca      	lsrs	r2, r1
 8021bfe:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8021c00:	f012 0201 	ands.w	r2, r2, #1
 8021c04:	d1e7      	bne.n	8021bd6 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8021c06:	2b04      	cmp	r3, #4
 8021c08:	d003      	beq.n	8021c12 <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8021c0a:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8021c0c:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 8021c0e:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 8021c10:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8021c12:	f10d 0316 	add.w	r3, sp, #22
 8021c16:	2203      	movs	r2, #3
 8021c18:	4621      	mov	r1, r4
 8021c1a:	4628      	mov	r0, r5
 8021c1c:	f7fe fde4 	bl	80207e8 <dhcp_create_msg>
  if (p_out != NULL) {
 8021c20:	4607      	mov	r7, r0
 8021c22:	2800      	cmp	r0, #0
 8021c24:	f000 8096 	beq.w	8021d54 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021c28:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8021c2c:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c2e:	f106 0904 	add.w	r9, r6, #4
 8021c32:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021c36:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c3a:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 8021c3e:	f200 80b9 	bhi.w	8021db4 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 8021c42:	2239      	movs	r2, #57	; 0x39
 8021c44:	1c73      	adds	r3, r6, #1
 8021c46:	fa1f fb8a 	uxth.w	fp, sl
 8021c4a:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 8021c4e:	b29b      	uxth	r3, r3
 8021c50:	2202      	movs	r2, #2
 8021c52:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021c56:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021c5a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021c5c:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021c5e:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021c62:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021c64:	f200 809e 	bhi.w	8021da4 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021c68:	9903      	ldr	r1, [sp, #12]
 8021c6a:	1cf3      	adds	r3, r6, #3
 8021c6c:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021c70:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021c72:	0a0a      	lsrs	r2, r1, #8
 8021c74:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021c78:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c7c:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021c80:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c84:	2b44      	cmp	r3, #68	; 0x44
 8021c86:	f200 8085 	bhi.w	8021d94 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 8021c8a:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 8021c8e:	2237      	movs	r2, #55	; 0x37
 8021c90:	1d73      	adds	r3, r6, #5
 8021c92:	f8df b158 	ldr.w	fp, [pc, #344]	; 8021dec <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 8021c96:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 8021c9a:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 8021c9e:	b29b      	uxth	r3, r3
 8021ca0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021ca2:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021ca6:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8021caa:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021cae:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021cb2:	d80f      	bhi.n	8021cd4 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 8021cb4:	f808 a009 	strb.w	sl, [r8, r9]
 8021cb8:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021cbc:	4b42      	ldr	r3, [pc, #264]	; (8021dc8 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 8021cbe:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021cc2:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021cc4:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021cc8:	d01f      	beq.n	8021d0a <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021cca:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021cce:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021cd2:	d9ef      	bls.n	8021cb4 <dhcp_coarse_tmr+0x11c>
 8021cd4:	4b3d      	ldr	r3, [pc, #244]	; (8021dcc <dhcp_coarse_tmr+0x234>)
 8021cd6:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021cda:	493d      	ldr	r1, [pc, #244]	; (8021dd0 <dhcp_coarse_tmr+0x238>)
 8021cdc:	483d      	ldr	r0, [pc, #244]	; (8021dd4 <dhcp_coarse_tmr+0x23c>)
 8021cde:	f003 fb69 	bl	80253b4 <iprintf>
 8021ce2:	e7e7      	b.n	8021cb4 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021ce4:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8021ce8:	2a01      	cmp	r2, #1
 8021cea:	d002      	beq.n	8021cf2 <dhcp_coarse_tmr+0x15a>
 8021cec:	2b0a      	cmp	r3, #10
 8021cee:	f47f af72 	bne.w	8021bd6 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8021cf2:	4628      	mov	r0, r5
 8021cf4:	f7ff fd7e 	bl	80217f4 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021cf8:	89a3      	ldrh	r3, [r4, #12]
 8021cfa:	8a62      	ldrh	r2, [r4, #18]
 8021cfc:	1a9b      	subs	r3, r3, r2
 8021cfe:	2b01      	cmp	r3, #1
 8021d00:	f77f af69 	ble.w	8021bd6 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8021d04:	105b      	asrs	r3, r3, #1
 8021d06:	81e3      	strh	r3, [r4, #14]
 8021d08:	e765      	b.n	8021bd6 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 8021d0a:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 8021d0e:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8021d12:	22ff      	movs	r2, #255	; 0xff
 8021d14:	b280      	uxth	r0, r0
 8021d16:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021d18:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021d1a:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021d1e:	d808      	bhi.n	8021d32 <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 8021d20:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 8021d24:	4440      	add	r0, r8
 8021d26:	2100      	movs	r1, #0
 8021d28:	b292      	uxth	r2, r2
 8021d2a:	3201      	adds	r2, #1
 8021d2c:	f002 fba4 	bl	8024478 <memset>
 8021d30:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021d32:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021d36:	4638      	mov	r0, r7
 8021d38:	b289      	uxth	r1, r1
 8021d3a:	f7f9 f959 	bl	801aff0 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021d3e:	4b26      	ldr	r3, [pc, #152]	; (8021dd8 <dhcp_coarse_tmr+0x240>)
 8021d40:	9500      	str	r5, [sp, #0]
 8021d42:	4639      	mov	r1, r7
 8021d44:	6818      	ldr	r0, [r3, #0]
 8021d46:	2343      	movs	r3, #67	; 0x43
 8021d48:	4a24      	ldr	r2, [pc, #144]	; (8021ddc <dhcp_coarse_tmr+0x244>)
 8021d4a:	f7fe fa4b 	bl	80201e4 <udp_sendto_if>
    pbuf_free(p_out);
 8021d4e:	4638      	mov	r0, r7
 8021d50:	f7f9 fa66 	bl	801b220 <pbuf_free>
  if (dhcp->tries < 255) {
 8021d54:	79a3      	ldrb	r3, [r4, #6]
 8021d56:	2bff      	cmp	r3, #255	; 0xff
 8021d58:	d01a      	beq.n	8021d90 <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 8021d5a:	3301      	adds	r3, #1
 8021d5c:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021d5e:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021d60:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021d62:	d815      	bhi.n	8021d90 <dhcp_coarse_tmr+0x1f8>
 8021d64:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8021d68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021d6c:	4a1c      	ldr	r2, [pc, #112]	; (8021de0 <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021d6e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021d70:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021d74:	b29b      	uxth	r3, r3
 8021d76:	fba2 2303 	umull	r2, r3, r2, r3
 8021d7a:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021d7c:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021d7e:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021d80:	8aa3      	ldrh	r3, [r4, #20]
 8021d82:	1a9b      	subs	r3, r3, r2
 8021d84:	2b01      	cmp	r3, #1
 8021d86:	f77f af26 	ble.w	8021bd6 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8021d8a:	105b      	asrs	r3, r3, #1
 8021d8c:	8223      	strh	r3, [r4, #16]
 8021d8e:	e722      	b.n	8021bd6 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 8021d90:	2314      	movs	r3, #20
 8021d92:	e7f3      	b.n	8021d7c <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d94:	4b0d      	ldr	r3, [pc, #52]	; (8021dcc <dhcp_coarse_tmr+0x234>)
 8021d96:	f240 529a 	movw	r2, #1434	; 0x59a
 8021d9a:	4912      	ldr	r1, [pc, #72]	; (8021de4 <dhcp_coarse_tmr+0x24c>)
 8021d9c:	480d      	ldr	r0, [pc, #52]	; (8021dd4 <dhcp_coarse_tmr+0x23c>)
 8021d9e:	f003 fb09 	bl	80253b4 <iprintf>
 8021da2:	e772      	b.n	8021c8a <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021da4:	4b09      	ldr	r3, [pc, #36]	; (8021dcc <dhcp_coarse_tmr+0x234>)
 8021da6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021daa:	490f      	ldr	r1, [pc, #60]	; (8021de8 <dhcp_coarse_tmr+0x250>)
 8021dac:	4809      	ldr	r0, [pc, #36]	; (8021dd4 <dhcp_coarse_tmr+0x23c>)
 8021dae:	f003 fb01 	bl	80253b4 <iprintf>
 8021db2:	e759      	b.n	8021c68 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021db4:	4b05      	ldr	r3, [pc, #20]	; (8021dcc <dhcp_coarse_tmr+0x234>)
 8021db6:	f240 529a 	movw	r2, #1434	; 0x59a
 8021dba:	490a      	ldr	r1, [pc, #40]	; (8021de4 <dhcp_coarse_tmr+0x24c>)
 8021dbc:	4805      	ldr	r0, [pc, #20]	; (8021dd4 <dhcp_coarse_tmr+0x23c>)
 8021dbe:	f003 faf9 	bl	80253b4 <iprintf>
 8021dc2:	e73e      	b.n	8021c42 <dhcp_coarse_tmr+0xaa>
 8021dc4:	2002e0b0 	.word	0x2002e0b0
 8021dc8:	0804566c 	.word	0x0804566c
 8021dcc:	080452f0 	.word	0x080452f0
 8021dd0:	080454e4 	.word	0x080454e4
 8021dd4:	0802a008 	.word	0x0802a008
 8021dd8:	2002e128 	.word	0x2002e128
 8021ddc:	080459a8 	.word	0x080459a8
 8021de0:	10624dd3 	.word	0x10624dd3
 8021de4:	08045464 	.word	0x08045464
 8021de8:	080454a8 	.word	0x080454a8
 8021dec:	08045669 	.word	0x08045669

08021df0 <dhcp_fine_tmr>:
{
 8021df0:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8021df2:	4b21      	ldr	r3, [pc, #132]	; (8021e78 <dhcp_fine_tmr+0x88>)
 8021df4:	681c      	ldr	r4, [r3, #0]
 8021df6:	b1fc      	cbz	r4, 8021e38 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8021df8:	2500      	movs	r5, #0
 8021dfa:	e003      	b.n	8021e04 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 8021dfc:	3a01      	subs	r2, #1
 8021dfe:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8021e00:	6824      	ldr	r4, [r4, #0]
 8021e02:	b1cc      	cbz	r4, 8021e38 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8021e04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d0fa      	beq.n	8021e00 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 8021e0a:	891a      	ldrh	r2, [r3, #8]
 8021e0c:	2a01      	cmp	r2, #1
 8021e0e:	d8f5      	bhi.n	8021dfc <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 8021e10:	d1f6      	bne.n	8021e00 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8021e12:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8021e14:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8021e16:	2a0c      	cmp	r2, #12
 8021e18:	d016      	beq.n	8021e48 <dhcp_fine_tmr+0x58>
 8021e1a:	2a06      	cmp	r2, #6
 8021e1c:	d014      	beq.n	8021e48 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8021e1e:	2a01      	cmp	r2, #1
 8021e20:	d016      	beq.n	8021e50 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8021e22:	2a08      	cmp	r2, #8
 8021e24:	d009      	beq.n	8021e3a <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8021e26:	2a03      	cmp	r2, #3
 8021e28:	d1ea      	bne.n	8021e00 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 8021e2a:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8021e2c:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8021e2e:	2b01      	cmp	r3, #1
 8021e30:	d91e      	bls.n	8021e70 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 8021e32:	f7fe fe8b 	bl	8020b4c <dhcp_discover>
 8021e36:	e7e3      	b.n	8021e00 <dhcp_fine_tmr+0x10>
}
 8021e38:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 8021e3a:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8021e3c:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8021e3e:	2b01      	cmp	r3, #1
 8021e40:	d913      	bls.n	8021e6a <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 8021e42:	f7fe fb6d 	bl	8020520 <dhcp_bind>
 8021e46:	e7db      	b.n	8021e00 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 8021e48:	4620      	mov	r0, r4
 8021e4a:	f7fe fe7f 	bl	8020b4c <dhcp_discover>
 8021e4e:	e7d7      	b.n	8021e00 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 8021e50:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8021e52:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8021e54:	2b05      	cmp	r3, #5
 8021e56:	d802      	bhi.n	8021e5e <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 8021e58:	f7fe ff5e 	bl	8020d18 <dhcp_select.isra.0>
 8021e5c:	e7d0      	b.n	8021e00 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 8021e5e:	f7ff fdaf 	bl	80219c0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8021e62:	4620      	mov	r0, r4
 8021e64:	f7ff fe3c 	bl	8021ae0 <dhcp_start>
 8021e68:	e7ca      	b.n	8021e00 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 8021e6a:	f7fe fb41 	bl	80204f0 <dhcp_check>
 8021e6e:	e7c7      	b.n	8021e00 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8021e70:	f7fe fd6c 	bl	802094c <dhcp_reboot.isra.0>
 8021e74:	e7c4      	b.n	8021e00 <dhcp_fine_tmr+0x10>
 8021e76:	bf00      	nop
 8021e78:	2002e0b0 	.word	0x2002e0b0

08021e7c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8021e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8021e80:	4f1a      	ldr	r7, [pc, #104]	; (8021eec <etharp_free_entry+0x70>)
 8021e82:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 8021e86:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 8021e88:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8021e8c:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8021e90:	b32c      	cbz	r4, 8021ede <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8021e92:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8021ef0 <etharp_free_entry+0x74>
 8021e96:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8021ef4 <etharp_free_entry+0x78>
 8021e9a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8021ef8 <etharp_free_entry+0x7c>
 8021e9e:	e006      	b.n	8021eae <etharp_free_entry+0x32>
    pbuf_free(r->p);
 8021ea0:	f7f9 f9be 	bl	801b220 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8021ea4:	4629      	mov	r1, r5
 8021ea6:	200b      	movs	r0, #11
 8021ea8:	f7f8 fca2 	bl	801a7f0 <memp_free>
  while (q) {
 8021eac:	b19c      	cbz	r4, 8021ed6 <etharp_free_entry+0x5a>
    q = q->next;
 8021eae:	4625      	mov	r5, r4
 8021eb0:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8021eb2:	6868      	ldr	r0, [r5, #4]
 8021eb4:	2800      	cmp	r0, #0
 8021eb6:	d1f3      	bne.n	8021ea0 <etharp_free_entry+0x24>
 8021eb8:	4651      	mov	r1, sl
 8021eba:	465b      	mov	r3, fp
 8021ebc:	229a      	movs	r2, #154	; 0x9a
 8021ebe:	4648      	mov	r0, r9
 8021ec0:	f003 fa78 	bl	80253b4 <iprintf>
    pbuf_free(r->p);
 8021ec4:	6868      	ldr	r0, [r5, #4]
 8021ec6:	f7f9 f9ab 	bl	801b220 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8021eca:	4629      	mov	r1, r5
 8021ecc:	200b      	movs	r0, #11
 8021ece:	f7f8 fc8f 	bl	801a7f0 <memp_free>
  while (q) {
 8021ed2:	2c00      	cmp	r4, #0
 8021ed4:	d1eb      	bne.n	8021eae <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8021ed6:	eb08 0306 	add.w	r3, r8, r6
 8021eda:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8021ede:	4446      	add	r6, r8
 8021ee0:	2300      	movs	r3, #0
 8021ee2:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8021ee6:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8021ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eec:	2002e168 	.word	0x2002e168
 8021ef0:	0804566c 	.word	0x0804566c
 8021ef4:	080456a4 	.word	0x080456a4
 8021ef8:	0802a008 	.word	0x0802a008

08021efc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8021efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f00:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8021f02:	f04f 0820 	mov.w	r8, #32
{
 8021f06:	b083      	sub	sp, #12
 8021f08:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8021f0a:	469e      	mov	lr, r3
 8021f0c:	469b      	mov	fp, r3
{
 8021f0e:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8021f10:	469a      	mov	sl, r3
 8021f12:	4948      	ldr	r1, [pc, #288]	; (8022034 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 8021f14:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8021f16:	46c4      	mov	ip, r8
 8021f18:	4691      	mov	r9, r2
 8021f1a:	f8cd 8004 	str.w	r8, [sp, #4]
 8021f1e:	e004      	b.n	8021f2a <etharp_find_entry+0x2e>
 8021f20:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021f22:	3301      	adds	r3, #1
 8021f24:	3118      	adds	r1, #24
 8021f26:	2b20      	cmp	r3, #32
 8021f28:	d015      	beq.n	8021f56 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021f2a:	2c20      	cmp	r4, #32
 8021f2c:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 8021f2e:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021f30:	d134      	bne.n	8021f9c <etharp_find_entry+0xa0>
 8021f32:	2800      	cmp	r0, #0
 8021f34:	d0f4      	beq.n	8021f20 <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8021f36:	b11d      	cbz	r5, 8021f40 <etharp_find_entry+0x44>
 8021f38:	682f      	ldr	r7, [r5, #0]
 8021f3a:	684e      	ldr	r6, [r1, #4]
 8021f3c:	42b7      	cmp	r7, r6
 8021f3e:	d038      	beq.n	8021fb2 <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8021f40:	2801      	cmp	r0, #1
 8021f42:	d02e      	beq.n	8021fa2 <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8021f44:	8a48      	ldrh	r0, [r1, #18]
 8021f46:	4570      	cmp	r0, lr
 8021f48:	d3eb      	bcc.n	8021f22 <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021f4a:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 8021f4c:	4686      	mov	lr, r0
 8021f4e:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021f50:	3118      	adds	r1, #24
 8021f52:	2b20      	cmp	r3, #32
 8021f54:	d1e9      	bne.n	8021f2a <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8021f56:	9b00      	ldr	r3, [sp, #0]
 8021f58:	464e      	mov	r6, r9
 8021f5a:	2b01      	cmp	r3, #1
 8021f5c:	d166      	bne.n	802202c <etharp_find_entry+0x130>
 8021f5e:	2c20      	cmp	r4, #32
 8021f60:	d040      	beq.n	8021fe4 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021f62:	46a1      	mov	r9, r4
 8021f64:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8021f68:	4a32      	ldr	r2, [pc, #200]	; (8022034 <etharp_find_entry+0x138>)
 8021f6a:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8021f6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021f72:	7d1b      	ldrb	r3, [r3, #20]
 8021f74:	bb73      	cbnz	r3, 8021fd4 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8021f76:	b135      	cbz	r5, 8021f86 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8021f78:	eb08 0309 	add.w	r3, r8, r9
 8021f7c:	492d      	ldr	r1, [pc, #180]	; (8022034 <etharp_find_entry+0x138>)
 8021f7e:	682a      	ldr	r2, [r5, #0]
 8021f80:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8021f84:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8021f86:	44c8      	add	r8, r9
 8021f88:	4a2a      	ldr	r2, [pc, #168]	; (8022034 <etharp_find_entry+0x138>)
 8021f8a:	2300      	movs	r3, #0
 8021f8c:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 8021f90:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8021f92:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8021f94:	4620      	mov	r0, r4
 8021f96:	b003      	add	sp, #12
 8021f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8021f9c:	2800      	cmp	r0, #0
 8021f9e:	d0c0      	beq.n	8021f22 <etharp_find_entry+0x26>
 8021fa0:	e7c9      	b.n	8021f36 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 8021fa2:	6808      	ldr	r0, [r1, #0]
 8021fa4:	b180      	cbz	r0, 8021fc8 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 8021fa6:	8a48      	ldrh	r0, [r1, #18]
 8021fa8:	4550      	cmp	r0, sl
 8021faa:	d3ba      	bcc.n	8021f22 <etharp_find_entry+0x26>
 8021fac:	4682      	mov	sl, r0
 8021fae:	4690      	mov	r8, r2
 8021fb0:	e7b7      	b.n	8021f22 <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8021fb2:	f1b9 0f00 	cmp.w	r9, #0
 8021fb6:	d002      	beq.n	8021fbe <etharp_find_entry+0xc2>
 8021fb8:	688e      	ldr	r6, [r1, #8]
 8021fba:	454e      	cmp	r6, r9
 8021fbc:	d1c0      	bne.n	8021f40 <etharp_find_entry+0x44>
 8021fbe:	4614      	mov	r4, r2
}
 8021fc0:	4620      	mov	r0, r4
 8021fc2:	b003      	add	sp, #12
 8021fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8021fc8:	8a48      	ldrh	r0, [r1, #18]
 8021fca:	4558      	cmp	r0, fp
 8021fcc:	d3a9      	bcc.n	8021f22 <etharp_find_entry+0x26>
 8021fce:	4683      	mov	fp, r0
 8021fd0:	9201      	str	r2, [sp, #4]
 8021fd2:	e7a6      	b.n	8021f22 <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021fd4:	4b18      	ldr	r3, [pc, #96]	; (8022038 <etharp_find_entry+0x13c>)
 8021fd6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8021fda:	4918      	ldr	r1, [pc, #96]	; (802203c <etharp_find_entry+0x140>)
 8021fdc:	4818      	ldr	r0, [pc, #96]	; (8022040 <etharp_find_entry+0x144>)
 8021fde:	f003 f9e9 	bl	80253b4 <iprintf>
 8021fe2:	e7c8      	b.n	8021f76 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8021fe4:	f1bc 0f20 	cmp.w	ip, #32
 8021fe8:	d012      	beq.n	8022010 <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8021fea:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8021fee:	4a11      	ldr	r2, [pc, #68]	; (8022034 <etharp_find_entry+0x138>)
 8021ff0:	46e1      	mov	r9, ip
 8021ff2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021ff6:	b1bb      	cbz	r3, 8022028 <etharp_find_entry+0x12c>
 8021ff8:	464c      	mov	r4, r9
 8021ffa:	4b0f      	ldr	r3, [pc, #60]	; (8022038 <etharp_find_entry+0x13c>)
 8021ffc:	f240 126d 	movw	r2, #365	; 0x16d
 8022000:	4910      	ldr	r1, [pc, #64]	; (8022044 <etharp_find_entry+0x148>)
 8022002:	480f      	ldr	r0, [pc, #60]	; (8022040 <etharp_find_entry+0x144>)
 8022004:	f003 f9d6 	bl	80253b4 <iprintf>
    etharp_free_entry(i);
 8022008:	4648      	mov	r0, r9
 802200a:	f7ff ff37 	bl	8021e7c <etharp_free_entry>
 802200e:	e7a9      	b.n	8021f64 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8022010:	9b01      	ldr	r3, [sp, #4]
 8022012:	2b20      	cmp	r3, #32
 8022014:	d105      	bne.n	8022022 <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8022016:	f1b8 0f20 	cmp.w	r8, #32
 802201a:	d007      	beq.n	802202c <etharp_find_entry+0x130>
    etharp_free_entry(i);
 802201c:	4644      	mov	r4, r8
 802201e:	46c1      	mov	r9, r8
 8022020:	e7f2      	b.n	8022008 <etharp_find_entry+0x10c>
 8022022:	461c      	mov	r4, r3
 8022024:	4699      	mov	r9, r3
 8022026:	e7ef      	b.n	8022008 <etharp_find_entry+0x10c>
 8022028:	4664      	mov	r4, ip
 802202a:	e7ed      	b.n	8022008 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 802202c:	f04f 34ff 	mov.w	r4, #4294967295
 8022030:	e7b0      	b.n	8021f94 <etharp_find_entry+0x98>
 8022032:	bf00      	nop
 8022034:	2002e168 	.word	0x2002e168
 8022038:	0804566c 	.word	0x0804566c
 802203c:	080456cc 	.word	0x080456cc
 8022040:	0802a008 	.word	0x0802a008
 8022044:	080456b4 	.word	0x080456b4

08022048 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8022048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802204c:	b082      	sub	sp, #8
 802204e:	4688      	mov	r8, r1
 8022050:	4691      	mov	r9, r2
 8022052:	461f      	mov	r7, r3
 8022054:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022058:	4606      	mov	r6, r0
{
 802205a:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802205e:	2800      	cmp	r0, #0
 8022060:	d050      	beq.n	8022104 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8022062:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022066:	211c      	movs	r1, #28
 8022068:	200e      	movs	r0, #14
 802206a:	f7f8 ff07 	bl	801ae7c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 802206e:	4605      	mov	r5, r0
 8022070:	2800      	cmp	r0, #0
 8022072:	d04f      	beq.n	8022114 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8022074:	8943      	ldrh	r3, [r0, #10]
 8022076:	2b1b      	cmp	r3, #27
 8022078:	d93c      	bls.n	80220f4 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802207a:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 802207c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 802207e:	f7f7 f893 	bl	80191a8 <lwip_htons>
 8022082:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8022084:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8022088:	2b06      	cmp	r3, #6
 802208a:	d006      	beq.n	802209a <etharp_raw+0x52>
 802208c:	4b23      	ldr	r3, [pc, #140]	; (802211c <etharp_raw+0xd4>)
 802208e:	f240 4269 	movw	r2, #1129	; 0x469
 8022092:	4923      	ldr	r1, [pc, #140]	; (8022120 <etharp_raw+0xd8>)
 8022094:	4823      	ldr	r0, [pc, #140]	; (8022124 <etharp_raw+0xdc>)
 8022096:	f003 f98d 	bl	80253b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 802209a:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802209c:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802209e:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80220a0:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80220a2:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80220a4:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80220a6:	88b9      	ldrh	r1, [r7, #4]
 80220a8:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80220aa:	f8da 1000 	ldr.w	r1, [sl]
 80220ae:	f8c4 1012 	str.w	r1, [r4, #18]
 80220b2:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 80220b6:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80220b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80220ba:	6809      	ldr	r1, [r1, #0]
 80220bc:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80220c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80220c2:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80220c4:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80220c6:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80220c8:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80220ca:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80220cc:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80220ce:	2108      	movs	r1, #8
 80220d0:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80220d2:	2106      	movs	r1, #6
 80220d4:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80220d6:	2104      	movs	r1, #4
 80220d8:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80220da:	f640 0106 	movw	r1, #2054	; 0x806
 80220de:	9100      	str	r1, [sp, #0]
 80220e0:	4629      	mov	r1, r5
 80220e2:	f001 fbf5 	bl	80238d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80220e6:	4628      	mov	r0, r5
 80220e8:	f7f9 f89a 	bl	801b220 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80220ec:	4630      	mov	r0, r6
}
 80220ee:	b002      	add	sp, #8
 80220f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80220f4:	4b09      	ldr	r3, [pc, #36]	; (802211c <etharp_raw+0xd4>)
 80220f6:	f240 4262 	movw	r2, #1122	; 0x462
 80220fa:	490b      	ldr	r1, [pc, #44]	; (8022128 <etharp_raw+0xe0>)
 80220fc:	4809      	ldr	r0, [pc, #36]	; (8022124 <etharp_raw+0xdc>)
 80220fe:	f003 f959 	bl	80253b4 <iprintf>
 8022102:	e7ba      	b.n	802207a <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022104:	4b05      	ldr	r3, [pc, #20]	; (802211c <etharp_raw+0xd4>)
 8022106:	f240 4257 	movw	r2, #1111	; 0x457
 802210a:	4908      	ldr	r1, [pc, #32]	; (802212c <etharp_raw+0xe4>)
 802210c:	4805      	ldr	r0, [pc, #20]	; (8022124 <etharp_raw+0xdc>)
 802210e:	f003 f951 	bl	80253b4 <iprintf>
 8022112:	e7a6      	b.n	8022062 <etharp_raw+0x1a>
    return ERR_MEM;
 8022114:	f04f 30ff 	mov.w	r0, #4294967295
 8022118:	e7e9      	b.n	80220ee <etharp_raw+0xa6>
 802211a:	bf00      	nop
 802211c:	0804566c 	.word	0x0804566c
 8022120:	0804572c 	.word	0x0804572c
 8022124:	0802a008 	.word	0x0802a008
 8022128:	080456f8 	.word	0x080456f8
 802212c:	0802cd80 	.word	0x0802cd80

08022130 <etharp_output_to_arp_index>:
{
 8022130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8022134:	4f37      	ldr	r7, [pc, #220]	; (8022214 <etharp_output_to_arp_index+0xe4>)
 8022136:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 802213a:	b085      	sub	sp, #20
 802213c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802213e:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 8022142:	4605      	mov	r5, r0
 8022144:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8022146:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802214a:	f899 3014 	ldrb.w	r3, [r9, #20]
 802214e:	2b01      	cmp	r3, #1
 8022150:	d93c      	bls.n	80221cc <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8022152:	2b02      	cmp	r3, #2
 8022154:	d011      	beq.n	802217a <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8022156:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022158:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802215c:	fb02 7404 	mla	r4, r2, r4, r7
 8022160:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8022162:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8022166:	4623      	mov	r3, r4
 8022168:	464a      	mov	r2, r9
 802216a:	4631      	mov	r1, r6
 802216c:	4628      	mov	r0, r5
 802216e:	9700      	str	r7, [sp, #0]
 8022170:	f001 fbae 	bl	80238d0 <ethernet_output>
}
 8022174:	b005      	add	sp, #20
 8022176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 802217a:	44a0      	add	r8, r4
 802217c:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 8022180:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8022184:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8022188:	d82a      	bhi.n	80221e0 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802218a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802218e:	d3e2      	bcc.n	8022156 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8022190:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022194:	2301      	movs	r3, #1
 8022196:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802219a:	4628      	mov	r0, r5
 802219c:	00e4      	lsls	r4, r4, #3
 802219e:	9303      	str	r3, [sp, #12]
 80221a0:	4b1d      	ldr	r3, [pc, #116]	; (8022218 <etharp_output_to_arp_index+0xe8>)
 80221a2:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80221a4:	f104 020c 	add.w	r2, r4, #12
 80221a8:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80221ac:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80221ae:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80221b0:	18bc      	adds	r4, r7, r2
 80221b2:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80221b4:	9300      	str	r3, [sp, #0]
 80221b6:	464b      	mov	r3, r9
 80221b8:	4622      	mov	r2, r4
 80221ba:	9702      	str	r7, [sp, #8]
 80221bc:	f7ff ff44 	bl	8022048 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80221c0:	2800      	cmp	r0, #0
 80221c2:	d1ce      	bne.n	8022162 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80221c4:	2303      	movs	r3, #3
 80221c6:	f888 3014 	strb.w	r3, [r8, #20]
 80221ca:	e7ca      	b.n	8022162 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80221cc:	4b13      	ldr	r3, [pc, #76]	; (802221c <etharp_output_to_arp_index+0xec>)
 80221ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 80221d2:	4913      	ldr	r1, [pc, #76]	; (8022220 <etharp_output_to_arp_index+0xf0>)
 80221d4:	4813      	ldr	r0, [pc, #76]	; (8022224 <etharp_output_to_arp_index+0xf4>)
 80221d6:	f003 f8ed 	bl	80253b4 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80221da:	f899 3014 	ldrb.w	r3, [r9, #20]
 80221de:	e7b8      	b.n	8022152 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80221e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80221e4:	2301      	movs	r3, #1
 80221e6:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 80221ea:	4a0f      	ldr	r2, [pc, #60]	; (8022228 <etharp_output_to_arp_index+0xf8>)
 80221ec:	00e4      	lsls	r4, r4, #3
 80221ee:	9303      	str	r3, [sp, #12]
 80221f0:	4649      	mov	r1, r9
 80221f2:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80221f4:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80221f6:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80221f8:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80221fa:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80221fc:	9302      	str	r3, [sp, #8]
 80221fe:	4b06      	ldr	r3, [pc, #24]	; (8022218 <etharp_output_to_arp_index+0xe8>)
 8022200:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022202:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022204:	9300      	str	r3, [sp, #0]
 8022206:	464b      	mov	r3, r9
 8022208:	f7ff ff1e 	bl	8022048 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 802220c:	2800      	cmp	r0, #0
 802220e:	d0d9      	beq.n	80221c4 <etharp_output_to_arp_index+0x94>
 8022210:	e7a7      	b.n	8022162 <etharp_output_to_arp_index+0x32>
 8022212:	bf00      	nop
 8022214:	2002e168 	.word	0x2002e168
 8022218:	08045ba4 	.word	0x08045ba4
 802221c:	0804566c 	.word	0x0804566c
 8022220:	08045770 	.word	0x08045770
 8022224:	0802a008 	.word	0x0802a008
 8022228:	08045b9c 	.word	0x08045b9c

0802222c <etharp_tmr>:
{
 802222c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022230:	4c1e      	ldr	r4, [pc, #120]	; (80222ac <etharp_tmr+0x80>)
 8022232:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022234:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022236:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80222b4 <etharp_tmr+0x88>
 802223a:	4f1d      	ldr	r7, [pc, #116]	; (80222b0 <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 802223c:	2602      	movs	r6, #2
 802223e:	e00d      	b.n	802225c <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8022240:	2a01      	cmp	r2, #1
 8022242:	d101      	bne.n	8022248 <etharp_tmr+0x1c>
 8022244:	2b04      	cmp	r3, #4
 8022246:	d813      	bhi.n	8022270 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8022248:	2a03      	cmp	r2, #3
 802224a:	d01b      	beq.n	8022284 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802224c:	2a04      	cmp	r2, #4
 802224e:	d01c      	beq.n	802228a <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8022250:	2a01      	cmp	r2, #1
 8022252:	d01c      	beq.n	802228e <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022254:	3501      	adds	r5, #1
 8022256:	3418      	adds	r4, #24
 8022258:	2d20      	cmp	r5, #32
 802225a:	d010      	beq.n	802227e <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 802225c:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 802225e:	2a00      	cmp	r2, #0
 8022260:	d0f8      	beq.n	8022254 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 8022262:	89e3      	ldrh	r3, [r4, #14]
 8022264:	3301      	adds	r3, #1
 8022266:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8022268:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 802226c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802226e:	d3e7      	bcc.n	8022240 <etharp_tmr+0x14>
        etharp_free_entry(i);
 8022270:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022272:	3501      	adds	r5, #1
        etharp_free_entry(i);
 8022274:	f7ff fe02 	bl	8021e7c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022278:	3418      	adds	r4, #24
 802227a:	2d20      	cmp	r5, #32
 802227c:	d1ee      	bne.n	802225c <etharp_tmr+0x30>
}
 802227e:	b004      	add	sp, #16
 8022280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8022284:	2304      	movs	r3, #4
 8022286:	7423      	strb	r3, [r4, #16]
 8022288:	e7e4      	b.n	8022254 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 802228a:	7426      	strb	r6, [r4, #16]
 802228c:	e7e2      	b.n	8022254 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802228e:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022290:	f8cd 8004 	str.w	r8, [sp, #4]
 8022294:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022298:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802229a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802229e:	9100      	str	r1, [sp, #0]
 80222a0:	463a      	mov	r2, r7
 80222a2:	4619      	mov	r1, r3
 80222a4:	f7ff fed0 	bl	8022048 <etharp_raw>
 80222a8:	e7d4      	b.n	8022254 <etharp_tmr+0x28>
 80222aa:	bf00      	nop
 80222ac:	2002e16c 	.word	0x2002e16c
 80222b0:	08045b9c 	.word	0x08045b9c
 80222b4:	08045ba4 	.word	0x08045ba4

080222b8 <etharp_cleanup_netif>:
{
 80222b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222ba:	4c0c      	ldr	r4, [pc, #48]	; (80222ec <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80222bc:	2500      	movs	r5, #0
{
 80222be:	4607      	mov	r7, r0
 80222c0:	f504 7640 	add.w	r6, r4, #768	; 0x300
 80222c4:	e003      	b.n	80222ce <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80222c6:	3418      	adds	r4, #24
 80222c8:	3501      	adds	r5, #1
 80222ca:	42b4      	cmp	r4, r6
 80222cc:	d00c      	beq.n	80222e8 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80222ce:	7d23      	ldrb	r3, [r4, #20]
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	d0f8      	beq.n	80222c6 <etharp_cleanup_netif+0xe>
 80222d4:	68a3      	ldr	r3, [r4, #8]
 80222d6:	42bb      	cmp	r3, r7
 80222d8:	d1f5      	bne.n	80222c6 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80222da:	3418      	adds	r4, #24
      etharp_free_entry(i);
 80222dc:	4628      	mov	r0, r5
 80222de:	f7ff fdcd 	bl	8021e7c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80222e2:	3501      	adds	r5, #1
 80222e4:	42b4      	cmp	r4, r6
 80222e6:	d1f2      	bne.n	80222ce <etharp_cleanup_netif+0x16>
}
 80222e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80222ea:	bf00      	nop
 80222ec:	2002e168 	.word	0x2002e168

080222f0 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80222f0:	2900      	cmp	r1, #0
 80222f2:	f000 808e 	beq.w	8022412 <etharp_input+0x122>
{
 80222f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 80222fa:	6846      	ldr	r6, [r0, #4]
{
 80222fc:	b087      	sub	sp, #28
 80222fe:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022300:	8833      	ldrh	r3, [r6, #0]
 8022302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022306:	d102      	bne.n	802230e <etharp_input+0x1e>
 8022308:	7933      	ldrb	r3, [r6, #4]
 802230a:	2b06      	cmp	r3, #6
 802230c:	d005      	beq.n	802231a <etharp_input+0x2a>
    pbuf_free(p);
 802230e:	4620      	mov	r0, r4
}
 8022310:	b007      	add	sp, #28
 8022312:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8022316:	f7f8 bf83 	b.w	801b220 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802231a:	7973      	ldrb	r3, [r6, #5]
 802231c:	2b04      	cmp	r3, #4
 802231e:	d1f6      	bne.n	802230e <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022320:	8873      	ldrh	r3, [r6, #2]
 8022322:	2b08      	cmp	r3, #8
 8022324:	d1f3      	bne.n	802230e <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8022326:	f8d6 000e 	ldr.w	r0, [r6, #14]
 802232a:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802232c:	684b      	ldr	r3, [r1, #4]
 802232e:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8022332:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022334:	2b00      	cmp	r3, #0
 8022336:	d073      	beq.n	8022420 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8022338:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802233c:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8022340:	faba fa8a 	clz	sl, sl
 8022344:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8022348:	f1ca 0702 	rsb	r7, sl, #2
 802234c:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802234e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8022352:	2b06      	cmp	r3, #6
 8022354:	d007      	beq.n	8022366 <etharp_input+0x76>
 8022356:	4b3e      	ldr	r3, [pc, #248]	; (8022450 <etharp_input+0x160>)
 8022358:	f240 12a9 	movw	r2, #425	; 0x1a9
 802235c:	493d      	ldr	r1, [pc, #244]	; (8022454 <etharp_input+0x164>)
 802235e:	483e      	ldr	r0, [pc, #248]	; (8022458 <etharp_input+0x168>)
 8022360:	f003 f828 	bl	80253b4 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8022364:	9805      	ldr	r0, [sp, #20]
 8022366:	2800      	cmp	r0, #0
 8022368:	d042      	beq.n	80223f0 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802236a:	4629      	mov	r1, r5
 802236c:	f000 fd30 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8022370:	4681      	mov	r9, r0
 8022372:	2800      	cmp	r0, #0
 8022374:	d13c      	bne.n	80223f0 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 8022376:	9b05      	ldr	r3, [sp, #20]
 8022378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802237c:	2be0      	cmp	r3, #224	; 0xe0
 802237e:	d037      	beq.n	80223f0 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 8022380:	4639      	mov	r1, r7
 8022382:	462a      	mov	r2, r5
 8022384:	a805      	add	r0, sp, #20
 8022386:	f7ff fdb9 	bl	8021efc <etharp_find_entry>
  if (i < 0) {
 802238a:	2800      	cmp	r0, #0
 802238c:	db30      	blt.n	80223f0 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 802238e:	4a33      	ldr	r2, [pc, #204]	; (802245c <etharp_input+0x16c>)
 8022390:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8022394:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8022396:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 802239a:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 802239e:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80223a0:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 80223a2:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80223a4:	fb10 330c 	smlabb	r3, r0, ip, r3
 80223a8:	f8d8 0000 	ldr.w	r0, [r8]
 80223ac:	50d0      	str	r0, [r2, r3]
 80223ae:	18d0      	adds	r0, r2, r3
 80223b0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80223b4:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 80223b6:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 80223ba:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 80223be:	b1b9      	cbz	r1, 80223f0 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80223c0:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 80223c4:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 80223c6:	200b      	movs	r0, #11
    p = q->p;
 80223c8:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 80223cc:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 80223ce:	f7f8 fa0f 	bl	801a7f0 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80223d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80223d6:	4659      	mov	r1, fp
 80223d8:	464a      	mov	r2, r9
 80223da:	9300      	str	r3, [sp, #0]
 80223dc:	4628      	mov	r0, r5
 80223de:	4643      	mov	r3, r8
 80223e0:	f001 fa76 	bl	80238d0 <ethernet_output>
    pbuf_free(p);
 80223e4:	4658      	mov	r0, fp
 80223e6:	f7f8 ff1b 	bl	801b220 <pbuf_free>
  while (arp_table[i].q != NULL) {
 80223ea:	6839      	ldr	r1, [r7, #0]
 80223ec:	2900      	cmp	r1, #0
 80223ee:	d1e9      	bne.n	80223c4 <etharp_input+0xd4>
  switch (hdr->opcode) {
 80223f0:	88f3      	ldrh	r3, [r6, #6]
 80223f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80223f6:	d018      	beq.n	802242a <etharp_input+0x13a>
 80223f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80223fc:	d103      	bne.n	8022406 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 80223fe:	a905      	add	r1, sp, #20
 8022400:	4628      	mov	r0, r5
 8022402:	f7ff f971 	bl	80216e8 <dhcp_arp_reply>
  pbuf_free(p);
 8022406:	4620      	mov	r0, r4
 8022408:	f7f8 ff0a 	bl	801b220 <pbuf_free>
}
 802240c:	b007      	add	sp, #28
 802240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022412:	4b0f      	ldr	r3, [pc, #60]	; (8022450 <etharp_input+0x160>)
 8022414:	f240 228a 	movw	r2, #650	; 0x28a
 8022418:	4911      	ldr	r1, [pc, #68]	; (8022460 <etharp_input+0x170>)
 802241a:	480f      	ldr	r0, [pc, #60]	; (8022458 <etharp_input+0x168>)
 802241c:	f002 bfca 	b.w	80253b4 <iprintf>
    for_us = 0;
 8022420:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8022422:	f106 0808 	add.w	r8, r6, #8
 8022426:	2702      	movs	r7, #2
 8022428:	e791      	b.n	802234e <etharp_input+0x5e>
      if (for_us) {
 802242a:	f1ba 0f00 	cmp.w	sl, #0
 802242e:	d0ea      	beq.n	8022406 <etharp_input+0x116>
        etharp_raw(netif,
 8022430:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8022432:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 8022436:	4642      	mov	r2, r8
 8022438:	4628      	mov	r0, r5
 802243a:	9103      	str	r1, [sp, #12]
 802243c:	a905      	add	r1, sp, #20
 802243e:	f8cd 8004 	str.w	r8, [sp, #4]
 8022442:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8022444:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8022446:	9100      	str	r1, [sp, #0]
 8022448:	4619      	mov	r1, r3
 802244a:	f7ff fdfd 	bl	8022048 <etharp_raw>
 802244e:	e7da      	b.n	8022406 <etharp_input+0x116>
 8022450:	0804566c 	.word	0x0804566c
 8022454:	080457c0 	.word	0x080457c0
 8022458:	0802a008 	.word	0x0802a008
 802245c:	2002e168 	.word	0x2002e168
 8022460:	0802cd80 	.word	0x0802cd80

08022464 <etharp_query>:
{
 8022464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022468:	468a      	mov	sl, r1
 802246a:	b085      	sub	sp, #20
 802246c:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802246e:	4601      	mov	r1, r0
 8022470:	f8da 0000 	ldr.w	r0, [sl]
{
 8022474:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8022476:	f000 fcab 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
 802247a:	2800      	cmp	r0, #0
 802247c:	f040 80d1 	bne.w	8022622 <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 8022480:	f8da 3000 	ldr.w	r3, [sl]
 8022484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8022488:	2ae0      	cmp	r2, #224	; 0xe0
 802248a:	f000 80ca 	beq.w	8022622 <etharp_query+0x1be>
 802248e:	2b00      	cmp	r3, #0
 8022490:	f000 80c7 	beq.w	8022622 <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8022494:	462a      	mov	r2, r5
 8022496:	2101      	movs	r1, #1
 8022498:	4650      	mov	r0, sl
 802249a:	f7ff fd2f 	bl	8021efc <etharp_find_entry>
  if (i_err < 0) {
 802249e:	1e07      	subs	r7, r0, #0
 80224a0:	db52      	blt.n	8022548 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80224a2:	2f7e      	cmp	r7, #126	; 0x7e
 80224a4:	dc48      	bgt.n	8022538 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 80224a6:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80224a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8022658 <etharp_query+0x1f4>
 80224ac:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80224b0:	ea4f 0947 	mov.w	r9, r7, lsl #1
 80224b4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80224b8:	7d1a      	ldrb	r2, [r3, #20]
 80224ba:	b18a      	cbz	r2, 80224e0 <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80224bc:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 80224c0:	2e00      	cmp	r6, #0
 80224c2:	f000 80a0 	beq.w	8022606 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80224c6:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 80224ca:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80224ce:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80224d2:	7d13      	ldrb	r3, [r2, #20]
 80224d4:	2b01      	cmp	r3, #1
 80224d6:	d81e      	bhi.n	8022516 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80224d8:	d03a      	beq.n	8022550 <etharp_query+0xec>
}
 80224da:	b005      	add	sp, #20
 80224dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 80224e0:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80224e2:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 80224e6:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80224e8:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 80224ec:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80224ee:	4628      	mov	r0, r5
 80224f0:	4b53      	ldr	r3, [pc, #332]	; (8022640 <etharp_query+0x1dc>)
 80224f2:	4659      	mov	r1, fp
 80224f4:	9203      	str	r2, [sp, #12]
 80224f6:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80224f8:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80224fa:	4a52      	ldr	r2, [pc, #328]	; (8022644 <etharp_query+0x1e0>)
 80224fc:	9300      	str	r3, [sp, #0]
 80224fe:	465b      	mov	r3, fp
 8022500:	f7ff fda2 	bl	8022048 <etharp_raw>
    if (q == NULL) {
 8022504:	2e00      	cmp	r6, #0
 8022506:	d0e8      	beq.n	80224da <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8022508:	eb09 0207 	add.w	r2, r9, r7
 802250c:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8022510:	7d13      	ldrb	r3, [r2, #20]
 8022512:	2b01      	cmp	r3, #1
 8022514:	d9e0      	bls.n	80224d8 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8022516:	2318      	movs	r3, #24
 8022518:	f44f 6400 	mov.w	r4, #2048	; 0x800
 802251c:	465a      	mov	r2, fp
 802251e:	4631      	mov	r1, r6
 8022520:	fb03 8307 	mla	r3, r3, r7, r8
 8022524:	4628      	mov	r0, r5
 8022526:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 8022528:	4c47      	ldr	r4, [pc, #284]	; (8022648 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802252a:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 802252c:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802252e:	f001 f9cf 	bl	80238d0 <ethernet_output>
}
 8022532:	b005      	add	sp, #20
 8022534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8022538:	4b44      	ldr	r3, [pc, #272]	; (802264c <etharp_query+0x1e8>)
 802253a:	f240 32c1 	movw	r2, #961	; 0x3c1
 802253e:	4944      	ldr	r1, [pc, #272]	; (8022650 <etharp_query+0x1ec>)
 8022540:	4844      	ldr	r0, [pc, #272]	; (8022654 <etharp_query+0x1f0>)
 8022542:	f002 ff37 	bl	80253b4 <iprintf>
 8022546:	e7ae      	b.n	80224a6 <etharp_query+0x42>
    return (err_t)i_err;
 8022548:	b278      	sxtb	r0, r7
}
 802254a:	b005      	add	sp, #20
 802254c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022550:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8022552:	4d3e      	ldr	r5, [pc, #248]	; (802264c <etharp_query+0x1e8>)
 8022554:	f8df b104 	ldr.w	fp, [pc, #260]	; 802265c <etharp_query+0x1f8>
 8022558:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8022654 <etharp_query+0x1f0>
 802255c:	e005      	b.n	802256a <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 802255e:	7b23      	ldrb	r3, [r4, #12]
 8022560:	065a      	lsls	r2, r3, #25
 8022562:	d413      	bmi.n	802258c <etharp_query+0x128>
      p = p->next;
 8022564:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8022566:	2c00      	cmp	r4, #0
 8022568:	d038      	beq.n	80225dc <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802256a:	8962      	ldrh	r2, [r4, #10]
 802256c:	8923      	ldrh	r3, [r4, #8]
 802256e:	429a      	cmp	r2, r3
 8022570:	d1f5      	bne.n	802255e <etharp_query+0xfa>
 8022572:	6822      	ldr	r2, [r4, #0]
 8022574:	462b      	mov	r3, r5
 8022576:	b132      	cbz	r2, 8022586 <etharp_query+0x122>
 8022578:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802257c:	4659      	mov	r1, fp
 802257e:	4650      	mov	r0, sl
 8022580:	f002 ff18 	bl	80253b4 <iprintf>
 8022584:	e7eb      	b.n	802255e <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 8022586:	7b23      	ldrb	r3, [r4, #12]
 8022588:	065b      	lsls	r3, r3, #25
 802258a:	d527      	bpl.n	80225dc <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 802258c:	4632      	mov	r2, r6
 802258e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8022592:	200e      	movs	r0, #14
 8022594:	f7f8 ffd6 	bl	801b544 <pbuf_clone>
    if (p != NULL) {
 8022598:	4606      	mov	r6, r0
 802259a:	2800      	cmp	r0, #0
 802259c:	d047      	beq.n	802262e <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 802259e:	f240 4206 	movw	r2, #1030	; 0x406
 80225a2:	492a      	ldr	r1, [pc, #168]	; (802264c <etharp_query+0x1e8>)
 80225a4:	200b      	movs	r0, #11
 80225a6:	f7f8 f8ed 	bl	801a784 <memp_malloc_fn>
      if (new_entry != NULL) {
 80225aa:	4602      	mov	r2, r0
 80225ac:	2800      	cmp	r0, #0
 80225ae:	d041      	beq.n	8022634 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 80225b0:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 80225b4:	2100      	movs	r1, #0
        new_entry->p = p;
 80225b6:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 80225b8:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 80225ba:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 80225bc:	f858 5003 	ldr.w	r5, [r8, r3]
 80225c0:	b1ed      	cbz	r5, 80225fe <etharp_query+0x19a>
          while (r->next != NULL) {
 80225c2:	682c      	ldr	r4, [r5, #0]
 80225c4:	b384      	cbz	r4, 8022628 <etharp_query+0x1c4>
          qlen++;
 80225c6:	2301      	movs	r3, #1
            qlen++;
 80225c8:	4620      	mov	r0, r4
          while (r->next != NULL) {
 80225ca:	6824      	ldr	r4, [r4, #0]
            qlen++;
 80225cc:	3301      	adds	r3, #1
          while (r->next != NULL) {
 80225ce:	2c00      	cmp	r4, #0
 80225d0:	d1fa      	bne.n	80225c8 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 80225d2:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 80225d4:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80225d6:	d805      	bhi.n	80225e4 <etharp_query+0x180>
        result = ERR_OK;
 80225d8:	4620      	mov	r0, r4
 80225da:	e77e      	b.n	80224da <etharp_query+0x76>
      pbuf_ref(p);
 80225dc:	4630      	mov	r0, r6
 80225de:	f7f8 fe3d 	bl	801b25c <pbuf_ref>
    if (p != NULL) {
 80225e2:	e7dc      	b.n	802259e <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 80225e4:	682b      	ldr	r3, [r5, #0]
 80225e6:	444f      	add	r7, r9
          pbuf_free(old->p);
 80225e8:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 80225ea:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 80225ee:	f7f8 fe17 	bl	801b220 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 80225f2:	200b      	movs	r0, #11
 80225f4:	4629      	mov	r1, r5
 80225f6:	f7f8 f8fb 	bl	801a7f0 <memp_free>
        result = ERR_OK;
 80225fa:	4620      	mov	r0, r4
 80225fc:	e76d      	b.n	80224da <etharp_query+0x76>
 80225fe:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 8022600:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 8022604:	e769      	b.n	80224da <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022606:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022608:	2301      	movs	r3, #1
 802260a:	4c0d      	ldr	r4, [pc, #52]	; (8022640 <etharp_query+0x1dc>)
 802260c:	4659      	mov	r1, fp
 802260e:	4628      	mov	r0, r5
 8022610:	e9cd a302 	strd	sl, r3, [sp, #8]
 8022614:	e9cd 2400 	strd	r2, r4, [sp]
 8022618:	465b      	mov	r3, fp
 802261a:	4a0a      	ldr	r2, [pc, #40]	; (8022644 <etharp_query+0x1e0>)
 802261c:	f7ff fd14 	bl	8022048 <etharp_raw>
    if (q == NULL) {
 8022620:	e75b      	b.n	80224da <etharp_query+0x76>
    return ERR_ARG;
 8022622:	f06f 000f 	mvn.w	r0, #15
 8022626:	e758      	b.n	80224da <etharp_query+0x76>
        result = ERR_OK;
 8022628:	4620      	mov	r0, r4
          r->next = new_entry;
 802262a:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 802262c:	e755      	b.n	80224da <etharp_query+0x76>
      result = ERR_MEM;
 802262e:	f04f 30ff 	mov.w	r0, #4294967295
 8022632:	e752      	b.n	80224da <etharp_query+0x76>
        pbuf_free(p);
 8022634:	4630      	mov	r0, r6
 8022636:	f7f8 fdf3 	bl	801b220 <pbuf_free>
        result = ERR_MEM;
 802263a:	f04f 30ff 	mov.w	r0, #4294967295
 802263e:	e74c      	b.n	80224da <etharp_query+0x76>
 8022640:	08045ba4 	.word	0x08045ba4
 8022644:	08045b9c 	.word	0x08045b9c
 8022648:	2002e468 	.word	0x2002e468
 802264c:	0804566c 	.word	0x0804566c
 8022650:	080457e4 	.word	0x080457e4
 8022654:	0802a008 	.word	0x0802a008
 8022658:	2002e168 	.word	0x2002e168
 802265c:	080457f4 	.word	0x080457f4

08022660 <etharp_output>:
{
 8022660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022664:	460f      	mov	r7, r1
 8022666:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022668:	4605      	mov	r5, r0
{
 802266a:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802266c:	2800      	cmp	r0, #0
 802266e:	f000 8086 	beq.w	802277e <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8022672:	2f00      	cmp	r7, #0
 8022674:	d072      	beq.n	802275c <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8022676:	2e00      	cmp	r6, #0
 8022678:	d079      	beq.n	802276e <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 802267a:	4629      	mov	r1, r5
 802267c:	6830      	ldr	r0, [r6, #0]
 802267e:	f000 fba7 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
 8022682:	2800      	cmp	r0, #0
 8022684:	d160      	bne.n	8022748 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8022686:	6833      	ldr	r3, [r6, #0]
 8022688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 802268c:	2ae0      	cmp	r2, #224	; 0xe0
 802268e:	d03b      	beq.n	8022708 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022690:	686a      	ldr	r2, [r5, #4]
 8022692:	68a9      	ldr	r1, [r5, #8]
 8022694:	405a      	eors	r2, r3
 8022696:	420a      	tst	r2, r1
 8022698:	d009      	beq.n	80226ae <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 802269a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802269c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80226a0:	4293      	cmp	r3, r2
 80226a2:	d004      	beq.n	80226ae <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80226a4:	68eb      	ldr	r3, [r5, #12]
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	d07b      	beq.n	80227a2 <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 80226aa:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80226ae:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80227c4 <etharp_output+0x164>
 80226b2:	4b3d      	ldr	r3, [pc, #244]	; (80227a8 <etharp_output+0x148>)
 80226b4:	f898 2000 	ldrb.w	r2, [r8]
 80226b8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80226bc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80226c0:	7d19      	ldrb	r1, [r3, #20]
 80226c2:	2901      	cmp	r1, #1
 80226c4:	d902      	bls.n	80226cc <etharp_output+0x6c>
 80226c6:	6899      	ldr	r1, [r3, #8]
 80226c8:	42a9      	cmp	r1, r5
 80226ca:	d063      	beq.n	8022794 <etharp_output+0x134>
 80226cc:	4c36      	ldr	r4, [pc, #216]	; (80227a8 <etharp_output+0x148>)
{
 80226ce:	2300      	movs	r3, #0
 80226d0:	e003      	b.n	80226da <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80226d2:	2b20      	cmp	r3, #32
 80226d4:	f104 0418 	add.w	r4, r4, #24
 80226d8:	d038      	beq.n	802274c <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80226da:	f894 c014 	ldrb.w	ip, [r4, #20]
 80226de:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80226e0:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80226e2:	f1bc 0f01 	cmp.w	ip, #1
 80226e6:	d9f4      	bls.n	80226d2 <etharp_output+0x72>
 80226e8:	68a0      	ldr	r0, [r4, #8]
 80226ea:	42a8      	cmp	r0, r5
 80226ec:	d1f1      	bne.n	80226d2 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 80226ee:	6860      	ldr	r0, [r4, #4]
 80226f0:	6831      	ldr	r1, [r6, #0]
 80226f2:	4281      	cmp	r1, r0
 80226f4:	d1ed      	bne.n	80226d2 <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 80226f6:	4639      	mov	r1, r7
 80226f8:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 80226fa:	f888 2000 	strb.w	r2, [r8]
}
 80226fe:	b004      	add	sp, #16
 8022700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8022704:	f7ff bd14 	b.w	8022130 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8022708:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 802270a:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802270c:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802270e:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8022712:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022716:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8022718:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802271a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 802271e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8022722:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 8022726:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022728:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802272c:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8022730:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8022734:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 8022738:	4639      	mov	r1, r7
 802273a:	4628      	mov	r0, r5
 802273c:	9400      	str	r4, [sp, #0]
 802273e:	f001 f8c7 	bl	80238d0 <ethernet_output>
}
 8022742:	b004      	add	sp, #16
 8022744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 8022748:	4b18      	ldr	r3, [pc, #96]	; (80227ac <etharp_output+0x14c>)
 802274a:	e7f1      	b.n	8022730 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 802274c:	463a      	mov	r2, r7
 802274e:	4631      	mov	r1, r6
 8022750:	4628      	mov	r0, r5
}
 8022752:	b004      	add	sp, #16
 8022754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 8022758:	f7ff be84 	b.w	8022464 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 802275c:	4b14      	ldr	r3, [pc, #80]	; (80227b0 <etharp_output+0x150>)
 802275e:	f240 321f 	movw	r2, #799	; 0x31f
 8022762:	4914      	ldr	r1, [pc, #80]	; (80227b4 <etharp_output+0x154>)
 8022764:	4814      	ldr	r0, [pc, #80]	; (80227b8 <etharp_output+0x158>)
 8022766:	f002 fe25 	bl	80253b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 802276a:	2e00      	cmp	r6, #0
 802276c:	d185      	bne.n	802267a <etharp_output+0x1a>
 802276e:	4b10      	ldr	r3, [pc, #64]	; (80227b0 <etharp_output+0x150>)
 8022770:	f44f 7248 	mov.w	r2, #800	; 0x320
 8022774:	4911      	ldr	r1, [pc, #68]	; (80227bc <etharp_output+0x15c>)
 8022776:	4810      	ldr	r0, [pc, #64]	; (80227b8 <etharp_output+0x158>)
 8022778:	f002 fe1c 	bl	80253b4 <iprintf>
 802277c:	e77d      	b.n	802267a <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802277e:	4b0c      	ldr	r3, [pc, #48]	; (80227b0 <etharp_output+0x150>)
 8022780:	f240 321e 	movw	r2, #798	; 0x31e
 8022784:	490e      	ldr	r1, [pc, #56]	; (80227c0 <etharp_output+0x160>)
 8022786:	480c      	ldr	r0, [pc, #48]	; (80227b8 <etharp_output+0x158>)
 8022788:	f002 fe14 	bl	80253b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 802278c:	2f00      	cmp	r7, #0
 802278e:	f47f af72 	bne.w	8022676 <etharp_output+0x16>
 8022792:	e7e3      	b.n	802275c <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8022794:	685b      	ldr	r3, [r3, #4]
 8022796:	6831      	ldr	r1, [r6, #0]
 8022798:	4299      	cmp	r1, r3
 802279a:	d197      	bne.n	80226cc <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 802279c:	4639      	mov	r1, r7
 802279e:	4628      	mov	r0, r5
 80227a0:	e7ad      	b.n	80226fe <etharp_output+0x9e>
            return ERR_RTE;
 80227a2:	f06f 0003 	mvn.w	r0, #3
 80227a6:	e7cc      	b.n	8022742 <etharp_output+0xe2>
 80227a8:	2002e168 	.word	0x2002e168
 80227ac:	08045b9c 	.word	0x08045b9c
 80227b0:	0804566c 	.word	0x0804566c
 80227b4:	08045810 	.word	0x08045810
 80227b8:	0802a008 	.word	0x0802a008
 80227bc:	080457a0 	.word	0x080457a0
 80227c0:	0802cd80 	.word	0x0802cd80
 80227c4:	2002e468 	.word	0x2002e468

080227c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80227c8:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80227ca:	2301      	movs	r3, #1
{
 80227cc:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80227ce:	4c07      	ldr	r4, [pc, #28]	; (80227ec <etharp_request+0x24>)
 80227d0:	4a07      	ldr	r2, [pc, #28]	; (80227f0 <etharp_request+0x28>)
 80227d2:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80227d4:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80227d6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80227da:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 80227de:	9400      	str	r4, [sp, #0]
 80227e0:	4619      	mov	r1, r3
 80227e2:	f7ff fc31 	bl	8022048 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80227e6:	b004      	add	sp, #16
 80227e8:	bd10      	pop	{r4, pc}
 80227ea:	bf00      	nop
 80227ec:	08045ba4 	.word	0x08045ba4
 80227f0:	08045b9c 	.word	0x08045b9c

080227f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80227f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80227f6:	460e      	mov	r6, r1
 80227f8:	b087      	sub	sp, #28
 80227fa:	4617      	mov	r7, r2
 80227fc:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80227fe:	2124      	movs	r1, #36	; 0x24
 8022800:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022804:	2022      	movs	r0, #34	; 0x22
 8022806:	f7f8 fb39 	bl	801ae7c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 802280a:	b3a8      	cbz	r0, 8022878 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 802280c:	8943      	ldrh	r3, [r0, #10]
 802280e:	4605      	mov	r5, r0
 8022810:	2b23      	cmp	r3, #35	; 0x23
 8022812:	d933      	bls.n	802287c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8022814:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8022816:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8022818:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 802281a:	2600      	movs	r6, #0
  icmphdr->code = code;
 802281c:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 802281e:	7126      	strb	r6, [r4, #4]
 8022820:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8022822:	71a6      	strb	r6, [r4, #6]
 8022824:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8022826:	6818      	ldr	r0, [r3, #0]
 8022828:	6859      	ldr	r1, [r3, #4]
 802282a:	689a      	ldr	r2, [r3, #8]
 802282c:	68df      	ldr	r7, [r3, #12]
 802282e:	60a0      	str	r0, [r4, #8]
 8022830:	6167      	str	r7, [r4, #20]
 8022832:	60e1      	str	r1, [r4, #12]
 8022834:	6122      	str	r2, [r4, #16]
 8022836:	6918      	ldr	r0, [r3, #16]
 8022838:	6959      	ldr	r1, [r3, #20]
 802283a:	699a      	ldr	r2, [r3, #24]
 802283c:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 802283e:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8022840:	61e1      	str	r1, [r4, #28]
 8022842:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8022844:	68db      	ldr	r3, [r3, #12]
 8022846:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8022848:	f000 f8e6 	bl	8022a18 <ip4_route>
#endif
  if (netif != NULL) {
 802284c:	4607      	mov	r7, r0
 802284e:	b180      	cbz	r0, 8022872 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022850:	8969      	ldrh	r1, [r5, #10]
 8022852:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8022854:	70a6      	strb	r6, [r4, #2]
 8022856:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022858:	f7f7 fa4e 	bl	8019cf8 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802285c:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 802285e:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8022860:	aa05      	add	r2, sp, #20
 8022862:	4631      	mov	r1, r6
 8022864:	4628      	mov	r0, r5
 8022866:	9600      	str	r6, [sp, #0]
 8022868:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802286c:	23ff      	movs	r3, #255	; 0xff
 802286e:	f000 fa9d 	bl	8022dac <ip4_output_if>
  }
  pbuf_free(q);
 8022872:	4628      	mov	r0, r5
 8022874:	f7f8 fcd4 	bl	801b220 <pbuf_free>
}
 8022878:	b007      	add	sp, #28
 802287a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 802287c:	4b03      	ldr	r3, [pc, #12]	; (802288c <icmp_send_response+0x98>)
 802287e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022882:	4903      	ldr	r1, [pc, #12]	; (8022890 <icmp_send_response+0x9c>)
 8022884:	4803      	ldr	r0, [pc, #12]	; (8022894 <icmp_send_response+0xa0>)
 8022886:	f002 fd95 	bl	80253b4 <iprintf>
 802288a:	e7c3      	b.n	8022814 <icmp_send_response+0x20>
 802288c:	0804581c 	.word	0x0804581c
 8022890:	08045854 	.word	0x08045854
 8022894:	0802a008 	.word	0x0802a008

08022898 <icmp_input>:
{
 8022898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 802289c:	4f54      	ldr	r7, [pc, #336]	; (80229f0 <icmp_input+0x158>)
{
 802289e:	b086      	sub	sp, #24
 80228a0:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 80228a2:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 80228a6:	f898 4000 	ldrb.w	r4, [r8]
 80228aa:	f004 040f 	and.w	r4, r4, #15
 80228ae:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 80228b0:	2c13      	cmp	r4, #19
 80228b2:	d913      	bls.n	80228dc <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 80228b4:	8943      	ldrh	r3, [r0, #10]
 80228b6:	2b03      	cmp	r3, #3
 80228b8:	d910      	bls.n	80228dc <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 80228ba:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 80228bc:	781b      	ldrb	r3, [r3, #0]
 80228be:	2b08      	cmp	r3, #8
 80228c0:	d10c      	bne.n	80228dc <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80228c2:	6978      	ldr	r0, [r7, #20]
 80228c4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80228c8:	2be0      	cmp	r3, #224	; 0xe0
 80228ca:	d007      	beq.n	80228dc <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80228cc:	460e      	mov	r6, r1
 80228ce:	6839      	ldr	r1, [r7, #0]
 80228d0:	f000 fa7e 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
 80228d4:	b910      	cbnz	r0, 80228dc <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80228d6:	892b      	ldrh	r3, [r5, #8]
 80228d8:	2b07      	cmp	r3, #7
 80228da:	d805      	bhi.n	80228e8 <icmp_input+0x50>
  pbuf_free(p);
 80228dc:	4628      	mov	r0, r5
}
 80228de:	b006      	add	sp, #24
 80228e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 80228e4:	f7f8 bc9c 	b.w	801b220 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 80228e8:	4628      	mov	r0, r5
 80228ea:	f7f7 fa0b 	bl	8019d04 <inet_chksum_pbuf>
 80228ee:	2800      	cmp	r0, #0
 80228f0:	d1f4      	bne.n	80228dc <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80228f2:	f104 010e 	add.w	r1, r4, #14
 80228f6:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 80228f8:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80228fc:	9105      	str	r1, [sp, #20]
 80228fe:	f7f8 fbcf 	bl	801b0a0 <pbuf_add_header>
 8022902:	9905      	ldr	r1, [sp, #20]
 8022904:	2800      	cmp	r0, #0
 8022906:	d058      	beq.n	80229ba <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8022908:	892b      	ldrh	r3, [r5, #8]
 802290a:	eb03 0109 	add.w	r1, r3, r9
 802290e:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8022910:	428b      	cmp	r3, r1
 8022912:	d8e3      	bhi.n	80228dc <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8022914:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022918:	200e      	movs	r0, #14
 802291a:	f7f8 faaf 	bl	801ae7c <pbuf_alloc>
        if (r == NULL) {
 802291e:	4682      	mov	sl, r0
 8022920:	2800      	cmp	r0, #0
 8022922:	d0db      	beq.n	80228dc <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8022924:	8942      	ldrh	r2, [r0, #10]
 8022926:	f104 0308 	add.w	r3, r4, #8
 802292a:	429a      	cmp	r2, r3
 802292c:	d351      	bcc.n	80229d2 <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 802292e:	4641      	mov	r1, r8
 8022930:	4622      	mov	r2, r4
 8022932:	6840      	ldr	r0, [r0, #4]
 8022934:	f001 fd78 	bl	8024428 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8022938:	4621      	mov	r1, r4
 802293a:	4650      	mov	r0, sl
 802293c:	f7f8 fbe4 	bl	801b108 <pbuf_remove_header>
 8022940:	2800      	cmp	r0, #0
 8022942:	d14a      	bne.n	80229da <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 8022944:	4629      	mov	r1, r5
 8022946:	4650      	mov	r0, sl
 8022948:	f7f8 fcf2 	bl	801b330 <pbuf_copy>
 802294c:	2800      	cmp	r0, #0
 802294e:	d140      	bne.n	80229d2 <icmp_input+0x13a>
        pbuf_free(p);
 8022950:	4628      	mov	r0, r5
 8022952:	4655      	mov	r5, sl
 8022954:	f7f8 fc64 	bl	801b220 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8022958:	4621      	mov	r1, r4
 802295a:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 802295c:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8022960:	f7f8 fb9e 	bl	801b0a0 <pbuf_add_header>
 8022964:	2800      	cmp	r0, #0
 8022966:	d1b9      	bne.n	80228dc <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8022968:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802296a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 802296e:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8022970:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 8022972:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8022974:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 8022976:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8022978:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802297a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802297e:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8022982:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8022984:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8022986:	bf8c      	ite	hi
 8022988:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 802298a:	3308      	addls	r3, #8
 802298c:	b29b      	uxth	r3, r3
 802298e:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8022992:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8022996:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8022998:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 802299c:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 802299e:	f7f7 f9ab 	bl	8019cf8 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80229a2:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80229a4:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80229a6:	4643      	mov	r3, r8
 80229a8:	4912      	ldr	r1, [pc, #72]	; (80229f4 <icmp_input+0x15c>)
 80229aa:	4628      	mov	r0, r5
 80229ac:	9700      	str	r7, [sp, #0]
 80229ae:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80229b2:	463a      	mov	r2, r7
 80229b4:	f000 f9fa 	bl	8022dac <ip4_output_if>
  pbuf_free(p);
 80229b8:	e790      	b.n	80228dc <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80229ba:	4628      	mov	r0, r5
 80229bc:	f7f8 fba4 	bl	801b108 <pbuf_remove_header>
 80229c0:	2800      	cmp	r0, #0
 80229c2:	d0c9      	beq.n	8022958 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80229c4:	4b0c      	ldr	r3, [pc, #48]	; (80229f8 <icmp_input+0x160>)
 80229c6:	22c7      	movs	r2, #199	; 0xc7
 80229c8:	490c      	ldr	r1, [pc, #48]	; (80229fc <icmp_input+0x164>)
 80229ca:	480d      	ldr	r0, [pc, #52]	; (8022a00 <icmp_input+0x168>)
 80229cc:	f002 fcf2 	bl	80253b4 <iprintf>
          goto icmperr;
 80229d0:	e784      	b.n	80228dc <icmp_input+0x44>
          pbuf_free(r);
 80229d2:	4650      	mov	r0, sl
 80229d4:	f7f8 fc24 	bl	801b220 <pbuf_free>
          goto icmperr;
 80229d8:	e780      	b.n	80228dc <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80229da:	4b07      	ldr	r3, [pc, #28]	; (80229f8 <icmp_input+0x160>)
 80229dc:	22b6      	movs	r2, #182	; 0xb6
 80229de:	4909      	ldr	r1, [pc, #36]	; (8022a04 <icmp_input+0x16c>)
 80229e0:	4807      	ldr	r0, [pc, #28]	; (8022a00 <icmp_input+0x168>)
 80229e2:	f002 fce7 	bl	80253b4 <iprintf>
          pbuf_free(r);
 80229e6:	4650      	mov	r0, sl
 80229e8:	f7f8 fc1a 	bl	801b220 <pbuf_free>
          goto icmperr;
 80229ec:	e776      	b.n	80228dc <icmp_input+0x44>
 80229ee:	bf00      	nop
 80229f0:	2001ef20 	.word	0x2001ef20
 80229f4:	2001ef34 	.word	0x2001ef34
 80229f8:	0804581c 	.word	0x0804581c
 80229fc:	080458b8 	.word	0x080458b8
 8022a00:	0802a008 	.word	0x0802a008
 8022a04:	08045880 	.word	0x08045880

08022a08 <icmp_dest_unreach>:
{
 8022a08:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8022a0a:	2103      	movs	r1, #3
 8022a0c:	f7ff bef2 	b.w	80227f4 <icmp_send_response>

08022a10 <icmp_time_exceeded>:
{
 8022a10:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8022a12:	210b      	movs	r1, #11
 8022a14:	f7ff beee 	b.w	80227f4 <icmp_send_response>

08022a18 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8022a18:	4b19      	ldr	r3, [pc, #100]	; (8022a80 <ip4_route+0x68>)
{
 8022a1a:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 8022a1c:	681b      	ldr	r3, [r3, #0]
 8022a1e:	b1ab      	cbz	r3, 8022a4c <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022a20:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8022a24:	07d4      	lsls	r4, r2, #31
 8022a26:	d5f9      	bpl.n	8022a1c <ip4_route+0x4>
 8022a28:	0751      	lsls	r1, r2, #29
 8022a2a:	d5f7      	bpl.n	8022a1c <ip4_route+0x4>
 8022a2c:	6859      	ldr	r1, [r3, #4]
 8022a2e:	2900      	cmp	r1, #0
 8022a30:	d0f4      	beq.n	8022a1c <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8022a32:	6804      	ldr	r4, [r0, #0]
 8022a34:	689d      	ldr	r5, [r3, #8]
 8022a36:	4061      	eors	r1, r4
 8022a38:	4229      	tst	r1, r5
 8022a3a:	d004      	beq.n	8022a46 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8022a3c:	0792      	lsls	r2, r2, #30
 8022a3e:	d4ed      	bmi.n	8022a1c <ip4_route+0x4>
 8022a40:	68da      	ldr	r2, [r3, #12]
 8022a42:	4294      	cmp	r4, r2
 8022a44:	d1ea      	bne.n	8022a1c <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8022a46:	4618      	mov	r0, r3
 8022a48:	bc30      	pop	{r4, r5}
 8022a4a:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022a4c:	4b0d      	ldr	r3, [pc, #52]	; (8022a84 <ip4_route+0x6c>)
 8022a4e:	681b      	ldr	r3, [r3, #0]
 8022a50:	2b00      	cmp	r3, #0
 8022a52:	d0f8      	beq.n	8022a46 <ip4_route+0x2e>
 8022a54:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8022a58:	f002 0205 	and.w	r2, r2, #5
 8022a5c:	2a05      	cmp	r2, #5
 8022a5e:	d108      	bne.n	8022a72 <ip4_route+0x5a>
 8022a60:	685a      	ldr	r2, [r3, #4]
 8022a62:	b152      	cbz	r2, 8022a7a <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022a64:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 8022a66:	2a7f      	cmp	r2, #127	; 0x7f
 8022a68:	bf08      	it	eq
 8022a6a:	2300      	moveq	r3, #0
}
 8022a6c:	bc30      	pop	{r4, r5}
 8022a6e:	4618      	mov	r0, r3
 8022a70:	4770      	bx	lr
    return NULL;
 8022a72:	2300      	movs	r3, #0
}
 8022a74:	bc30      	pop	{r4, r5}
 8022a76:	4618      	mov	r0, r3
 8022a78:	4770      	bx	lr
    return NULL;
 8022a7a:	4613      	mov	r3, r2
 8022a7c:	e7e3      	b.n	8022a46 <ip4_route+0x2e>
 8022a7e:	bf00      	nop
 8022a80:	2002e0b0 	.word	0x2002e0b0
 8022a84:	2002e0ac 	.word	0x2002e0ac

08022a88 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8022a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8022a8c:	6847      	ldr	r7, [r0, #4]
{
 8022a8e:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 8022a90:	783b      	ldrb	r3, [r7, #0]
 8022a92:	091a      	lsrs	r2, r3, #4
 8022a94:	2a04      	cmp	r2, #4
 8022a96:	f040 80a8 	bne.w	8022bea <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022a9a:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022a9e:	8878      	ldrh	r0, [r7, #2]
 8022aa0:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022aa2:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022aa6:	f7f6 fb7f 	bl	80191a8 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8022aaa:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022aac:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022aae:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8022ab0:	4283      	cmp	r3, r0
 8022ab2:	f200 80a0 	bhi.w	8022bf6 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8022ab6:	8963      	ldrh	r3, [r4, #10]
 8022ab8:	42ab      	cmp	r3, r5
 8022aba:	f0c0 8096 	bcc.w	8022bea <ip4_input+0x162>
 8022abe:	8923      	ldrh	r3, [r4, #8]
 8022ac0:	4543      	cmp	r3, r8
 8022ac2:	f0c0 8092 	bcc.w	8022bea <ip4_input+0x162>
 8022ac6:	2d13      	cmp	r5, #19
 8022ac8:	f240 808f 	bls.w	8022bea <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022acc:	693b      	ldr	r3, [r7, #16]
 8022ace:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8022c70 <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022ad2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022ad6:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022ada:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8022adc:	68f8      	ldr	r0, [r7, #12]
 8022ade:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022ae2:	d073      	beq.n	8022bcc <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022ae4:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8022ae8:	07d2      	lsls	r2, r2, #31
 8022aea:	d503      	bpl.n	8022af4 <ip4_input+0x6c>
 8022aec:	6872      	ldr	r2, [r6, #4]
 8022aee:	2a00      	cmp	r2, #0
 8022af0:	f040 8094 	bne.w	8022c1c <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022af4:	b2db      	uxtb	r3, r3
 8022af6:	2b7f      	cmp	r3, #127	; 0x7f
 8022af8:	d06c      	beq.n	8022bd4 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8022afa:	4b5c      	ldr	r3, [pc, #368]	; (8022c6c <ip4_input+0x1e4>)
 8022afc:	681d      	ldr	r5, [r3, #0]
 8022afe:	b935      	cbnz	r5, 8022b0e <ip4_input+0x86>
 8022b00:	e068      	b.n	8022bd4 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022b02:	f000 f965 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022b06:	b980      	cbnz	r0, 8022b2a <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 8022b08:	682d      	ldr	r5, [r5, #0]
 8022b0a:	2d00      	cmp	r5, #0
 8022b0c:	d062      	beq.n	8022bd4 <ip4_input+0x14c>
          if (netif == inp) {
 8022b0e:	42ae      	cmp	r6, r5
 8022b10:	d0fa      	beq.n	8022b08 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022b12:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8022b16:	07db      	lsls	r3, r3, #31
 8022b18:	d5f6      	bpl.n	8022b08 <ip4_input+0x80>
 8022b1a:	686b      	ldr	r3, [r5, #4]
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d0f3      	beq.n	8022b08 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022b20:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022b24:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022b26:	4283      	cmp	r3, r0
 8022b28:	d1eb      	bne.n	8022b02 <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022b2a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8022b2e:	2800      	cmp	r0, #0
 8022b30:	d157      	bne.n	8022be2 <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8022b32:	88fb      	ldrh	r3, [r7, #6]
 8022b34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8022b38:	b133      	cbz	r3, 8022b48 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8022b3a:	4620      	mov	r0, r4
 8022b3c:	f000 fb1c 	bl	8023178 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8022b40:	4604      	mov	r4, r0
 8022b42:	2800      	cmp	r0, #0
 8022b44:	d054      	beq.n	8022bf0 <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8022b46:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8022b48:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8022b4c:	4631      	mov	r1, r6
 8022b4e:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8022b50:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8022b54:	783b      	ldrb	r3, [r7, #0]
 8022b56:	f003 030f 	and.w	r3, r3, #15
 8022b5a:	009b      	lsls	r3, r3, #2
 8022b5c:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 8022b60:	f7f8 fd9e 	bl	801b6a0 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8022b64:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8022b66:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 8022b68:	d024      	beq.n	8022bb4 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8022b6a:	4649      	mov	r1, r9
 8022b6c:	4620      	mov	r0, r4
 8022b6e:	f7f8 facb 	bl	801b108 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8022b72:	7a7b      	ldrb	r3, [r7, #9]
 8022b74:	2b06      	cmp	r3, #6
 8022b76:	d065      	beq.n	8022c44 <ip4_input+0x1bc>
 8022b78:	2b11      	cmp	r3, #17
 8022b7a:	d05e      	beq.n	8022c3a <ip4_input+0x1b2>
 8022b7c:	2b01      	cmp	r3, #1
 8022b7e:	d057      	beq.n	8022c30 <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8022b80:	f1ba 0f02 	cmp.w	sl, #2
 8022b84:	d013      	beq.n	8022bae <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022b86:	4629      	mov	r1, r5
 8022b88:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8022b8c:	f000 f920 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
 8022b90:	b968      	cbnz	r0, 8022bae <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022b92:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8022b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022b9a:	2be0      	cmp	r3, #224	; 0xe0
 8022b9c:	d007      	beq.n	8022bae <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8022b9e:	4649      	mov	r1, r9
 8022ba0:	4620      	mov	r0, r4
 8022ba2:	f7f8 fae9 	bl	801b178 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8022ba6:	2102      	movs	r1, #2
 8022ba8:	4620      	mov	r0, r4
 8022baa:	f7ff ff2d 	bl	8022a08 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8022bae:	4620      	mov	r0, r4
 8022bb0:	f7f8 fb36 	bl	801b220 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8022bb4:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8022bb6:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8022bb8:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 8022bbc:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 8022bc0:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8022bc4:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8022bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022bcc:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8022bd0:	07d9      	lsls	r1, r3, #31
 8022bd2:	d41e      	bmi.n	8022c12 <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8022bd4:	7a7b      	ldrb	r3, [r7, #9]
 8022bd6:	2b11      	cmp	r3, #17
 8022bd8:	d039      	beq.n	8022c4e <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022bda:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8022bde:	b120      	cbz	r0, 8022bea <ip4_input+0x162>
 8022be0:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022be2:	4631      	mov	r1, r6
 8022be4:	f000 f8f4 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
 8022be8:	b150      	cbz	r0, 8022c00 <ip4_input+0x178>
    pbuf_free(p);
 8022bea:	4620      	mov	r0, r4
 8022bec:	f7f8 fb18 	bl	801b220 <pbuf_free>
}
 8022bf0:	2000      	movs	r0, #0
 8022bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8022bf6:	4601      	mov	r1, r0
 8022bf8:	4620      	mov	r0, r4
 8022bfa:	f7f8 f9f9 	bl	801aff0 <pbuf_realloc>
 8022bfe:	e75a      	b.n	8022ab6 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8022c00:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8022c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022c08:	2be0      	cmp	r3, #224	; 0xe0
 8022c0a:	d0ee      	beq.n	8022bea <ip4_input+0x162>
  if (netif == NULL) {
 8022c0c:	2d00      	cmp	r5, #0
 8022c0e:	d190      	bne.n	8022b32 <ip4_input+0xaa>
 8022c10:	e7eb      	b.n	8022bea <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022c12:	6873      	ldr	r3, [r6, #4]
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d0dd      	beq.n	8022bd4 <ip4_input+0x14c>
 8022c18:	4635      	mov	r5, r6
 8022c1a:	e788      	b.n	8022b2e <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022c1c:	4293      	cmp	r3, r2
 8022c1e:	d0fb      	beq.n	8022c18 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022c20:	4618      	mov	r0, r3
 8022c22:	4631      	mov	r1, r6
 8022c24:	f000 f8d4 	bl	8022dd0 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022c28:	b9e0      	cbnz	r0, 8022c64 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022c2a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8022c2e:	e761      	b.n	8022af4 <ip4_input+0x6c>
        icmp_input(p, inp);
 8022c30:	4631      	mov	r1, r6
 8022c32:	4620      	mov	r0, r4
 8022c34:	f7ff fe30 	bl	8022898 <icmp_input>
        break;
 8022c38:	e7bc      	b.n	8022bb4 <ip4_input+0x12c>
        udp_input(p, inp);
 8022c3a:	4631      	mov	r1, r6
 8022c3c:	4620      	mov	r0, r4
 8022c3e:	f7fd f8a1 	bl	801fd84 <udp_input>
        break;
 8022c42:	e7b7      	b.n	8022bb4 <ip4_input+0x12c>
        tcp_input(p, inp);
 8022c44:	4631      	mov	r1, r6
 8022c46:	4620      	mov	r0, r4
 8022c48:	f7fa fefc 	bl	801da44 <tcp_input>
        break;
 8022c4c:	e7b2      	b.n	8022bb4 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8022c4e:	eb07 0309 	add.w	r3, r7, r9
 8022c52:	885b      	ldrh	r3, [r3, #2]
 8022c54:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8022c58:	d1bf      	bne.n	8022bda <ip4_input+0x152>
 8022c5a:	4635      	mov	r5, r6
  if (netif == NULL) {
 8022c5c:	2d00      	cmp	r5, #0
 8022c5e:	f47f af68 	bne.w	8022b32 <ip4_input+0xaa>
 8022c62:	e7c2      	b.n	8022bea <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022c64:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8022c68:	4635      	mov	r5, r6
 8022c6a:	e760      	b.n	8022b2e <ip4_input+0xa6>
 8022c6c:	2002e0b0 	.word	0x2002e0b0
 8022c70:	2001ef20 	.word	0x2001ef20

08022c74 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8022c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c78:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022c7a:	7b83      	ldrb	r3, [r0, #14]
{
 8022c7c:	b083      	sub	sp, #12
 8022c7e:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022c80:	2b01      	cmp	r3, #1
{
 8022c82:	4689      	mov	r9, r1
 8022c84:	4617      	mov	r7, r2
 8022c86:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8022c8a:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8022c8e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022c92:	d158      	bne.n	8022d46 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8022c94:	2f00      	cmp	r7, #0
 8022c96:	d05f      	beq.n	8022d58 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8022c98:	2114      	movs	r1, #20
 8022c9a:	4620      	mov	r0, r4
 8022c9c:	f7f8 fa00 	bl	801b0a0 <pbuf_add_header>
 8022ca0:	2800      	cmp	r0, #0
 8022ca2:	d174      	bne.n	8022d8e <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022ca4:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8022ca6:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022ca8:	2b13      	cmp	r3, #19
 8022caa:	d95d      	bls.n	8022d68 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8022cac:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8022cb0:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8022cb4:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8022cb8:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 8022cba:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8022cbc:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8022cbe:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8022cc0:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8022cc2:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8022cc6:	fa10 f383 	uxtah	r3, r0, r3
 8022cca:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8022ccc:	ea4f 252a 	mov.w	r5, sl, asr #8
 8022cd0:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8022cd4:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022cd8:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022cda:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8022da8 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022cde:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022ce0:	8920      	ldrh	r0, [r4, #8]
 8022ce2:	f7f6 fa61 	bl	80191a8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8022ce6:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8022ce8:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022cea:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8022cec:	71b3      	strb	r3, [r6, #6]
 8022cee:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022cf0:	f8ba 0000 	ldrh.w	r0, [sl]
 8022cf4:	f7f6 fa58 	bl	80191a8 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8022cf8:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 8022cfc:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022cfe:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 8022d00:	3201      	adds	r2, #1
 8022d02:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8022d06:	f1b9 0f00 	cmp.w	r9, #0
 8022d0a:	d035      	beq.n	8022d78 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8022d0c:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8022d10:	fa13 f382 	uxtah	r3, r3, r2
 8022d14:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8022d16:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8022d1a:	b29a      	uxth	r2, r3
 8022d1c:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 8022d20:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 8022d24:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8022d26:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8022d28:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8022d2c:	b113      	cbz	r3, 8022d34 <ip4_output_if_src+0xc0>
 8022d2e:	8922      	ldrh	r2, [r4, #8]
 8022d30:	429a      	cmp	r2, r3
 8022d32:	d824      	bhi.n	8022d7e <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8022d34:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8022d38:	463a      	mov	r2, r7
 8022d3a:	4621      	mov	r1, r4
 8022d3c:	4640      	mov	r0, r8
 8022d3e:	4798      	blx	r3
}
 8022d40:	b003      	add	sp, #12
 8022d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022d46:	4b13      	ldr	r3, [pc, #76]	; (8022d94 <ip4_output_if_src+0x120>)
 8022d48:	f44f 7255 	mov.w	r2, #852	; 0x354
 8022d4c:	4912      	ldr	r1, [pc, #72]	; (8022d98 <ip4_output_if_src+0x124>)
 8022d4e:	4813      	ldr	r0, [pc, #76]	; (8022d9c <ip4_output_if_src+0x128>)
 8022d50:	f002 fb30 	bl	80253b4 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8022d54:	2f00      	cmp	r7, #0
 8022d56:	d19f      	bne.n	8022c98 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8022d58:	8963      	ldrh	r3, [r4, #10]
 8022d5a:	2b13      	cmp	r3, #19
 8022d5c:	d917      	bls.n	8022d8e <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8022d5e:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8022d60:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8022d62:	691b      	ldr	r3, [r3, #16]
 8022d64:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8022d66:	e7df      	b.n	8022d28 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022d68:	4b0a      	ldr	r3, [pc, #40]	; (8022d94 <ip4_output_if_src+0x120>)
 8022d6a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8022d6e:	490c      	ldr	r1, [pc, #48]	; (8022da0 <ip4_output_if_src+0x12c>)
 8022d70:	480a      	ldr	r0, [pc, #40]	; (8022d9c <ip4_output_if_src+0x128>)
 8022d72:	f002 fb1f 	bl	80253b4 <iprintf>
 8022d76:	e799      	b.n	8022cac <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8022d78:	4a0a      	ldr	r2, [pc, #40]	; (8022da4 <ip4_output_if_src+0x130>)
 8022d7a:	6812      	ldr	r2, [r2, #0]
 8022d7c:	e7c8      	b.n	8022d10 <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 8022d7e:	463a      	mov	r2, r7
 8022d80:	4641      	mov	r1, r8
 8022d82:	4620      	mov	r0, r4
 8022d84:	f000 fc36 	bl	80235f4 <ip4_frag>
}
 8022d88:	b003      	add	sp, #12
 8022d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 8022d8e:	f06f 0001 	mvn.w	r0, #1
 8022d92:	e7d5      	b.n	8022d40 <ip4_output_if_src+0xcc>
 8022d94:	080458ec 	.word	0x080458ec
 8022d98:	08045920 	.word	0x08045920
 8022d9c:	0802a008 	.word	0x0802a008
 8022da0:	0804592c 	.word	0x0804592c
 8022da4:	080459a4 	.word	0x080459a4
 8022da8:	2002e46a 	.word	0x2002e46a

08022dac <ip4_output_if>:
{
 8022dac:	b4f0      	push	{r4, r5, r6, r7}
 8022dae:	9c06      	ldr	r4, [sp, #24]
 8022db0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8022db4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8022db8:	b11a      	cbz	r2, 8022dc2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8022dba:	b109      	cbz	r1, 8022dc0 <ip4_output_if+0x14>
 8022dbc:	680f      	ldr	r7, [r1, #0]
 8022dbe:	b907      	cbnz	r7, 8022dc2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8022dc0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022dc2:	9504      	str	r5, [sp, #16]
 8022dc4:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8022dc8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022dca:	f7ff bf53 	b.w	8022c74 <ip4_output_if_src>
 8022dce:	bf00      	nop

08022dd0 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8022dd0:	1e43      	subs	r3, r0, #1
 8022dd2:	3303      	adds	r3, #3
 8022dd4:	d814      	bhi.n	8022e00 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8022dd6:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8022dda:	f013 0302 	ands.w	r3, r3, #2
 8022dde:	d00d      	beq.n	8022dfc <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8022de0:	684b      	ldr	r3, [r1, #4]
 8022de2:	4283      	cmp	r3, r0
 8022de4:	d00f      	beq.n	8022e06 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8022de6:	688a      	ldr	r2, [r1, #8]
 8022de8:	4043      	eors	r3, r0
 8022dea:	4213      	tst	r3, r2
 8022dec:	d10b      	bne.n	8022e06 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022dee:	43d3      	mvns	r3, r2
 8022df0:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8022df4:	1ac3      	subs	r3, r0, r3
 8022df6:	fab3 f383 	clz	r3, r3
 8022dfa:	095b      	lsrs	r3, r3, #5
  }
}
 8022dfc:	4618      	mov	r0, r3
 8022dfe:	4770      	bx	lr
    return 1;
 8022e00:	2301      	movs	r3, #1
}
 8022e02:	4618      	mov	r0, r3
 8022e04:	4770      	bx	lr
    return 0;
 8022e06:	2300      	movs	r3, #0
}
 8022e08:	4618      	mov	r0, r3
 8022e0a:	4770      	bx	lr

08022e0c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8022e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8022e10:	4e4f      	ldr	r6, [pc, #316]	; (8022f50 <ip4addr_aton+0x144>)
{
 8022e12:	b085      	sub	sp, #20
  c = *cp;
 8022e14:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 8022e16:	5cf2      	ldrb	r2, [r6, r3]
 8022e18:	0754      	lsls	r4, r2, #29
 8022e1a:	d538      	bpl.n	8022e8e <ip4addr_aton+0x82>
  u32_t *pp = parts;
 8022e1c:	46e9      	mov	r9, sp
 8022e1e:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8022e20:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8022e24:	464f      	mov	r7, r9
    if (c == '0') {
 8022e26:	2b30      	cmp	r3, #48	; 0x30
 8022e28:	d035      	beq.n	8022e96 <ip4addr_aton+0x8a>
    base = 10;
 8022e2a:	210a      	movs	r1, #10
 8022e2c:	1c42      	adds	r2, r0, #1
 8022e2e:	2400      	movs	r4, #0
 8022e30:	e003      	b.n	8022e3a <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 8022e32:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 8022e36:	7813      	ldrb	r3, [r2, #0]
 8022e38:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 8022e3a:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022e3e:	f103 0e0a 	add.w	lr, r3, #10
 8022e42:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 8022e46:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 8022e4a:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022e4e:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 8022e52:	d1ee      	bne.n	8022e32 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8022e54:	2910      	cmp	r1, #16
 8022e56:	d10d      	bne.n	8022e74 <ip4addr_aton+0x68>
 8022e58:	f01c 0f44 	tst.w	ip, #68	; 0x44
 8022e5c:	d00a      	beq.n	8022e74 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022e5e:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8022e62:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022e64:	bf0c      	ite	eq
 8022e66:	2061      	moveq	r0, #97	; 0x61
 8022e68:	2041      	movne	r0, #65	; 0x41
 8022e6a:	ebae 0e00 	sub.w	lr, lr, r0
 8022e6e:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8022e72:	e7e1      	b.n	8022e38 <ip4addr_aton+0x2c>
    if (c == '.') {
 8022e74:	2b2e      	cmp	r3, #46	; 0x2e
 8022e76:	d11a      	bne.n	8022eae <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8022e78:	4547      	cmp	r7, r8
 8022e7a:	d008      	beq.n	8022e8e <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 8022e7c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8022e80:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 8022e84:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 8022e88:	5cf2      	ldrb	r2, [r6, r3]
 8022e8a:	0752      	lsls	r2, r2, #29
 8022e8c:	d4cb      	bmi.n	8022e26 <ip4addr_aton+0x1a>
      return 0;
 8022e8e:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8022e90:	b005      	add	sp, #20
 8022e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 8022e96:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8022e98:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8022e9c:	2a58      	cmp	r2, #88	; 0x58
 8022e9e:	d002      	beq.n	8022ea6 <ip4addr_aton+0x9a>
      c = *++cp;
 8022ea0:	3001      	adds	r0, #1
        base = 8;
 8022ea2:	2108      	movs	r1, #8
 8022ea4:	e7c2      	b.n	8022e2c <ip4addr_aton+0x20>
        c = *++cp;
 8022ea6:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8022ea8:	2110      	movs	r1, #16
        c = *++cp;
 8022eaa:	3002      	adds	r0, #2
 8022eac:	e7be      	b.n	8022e2c <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 8022eae:	b113      	cbz	r3, 8022eb6 <ip4addr_aton+0xaa>
 8022eb0:	f01c 0f08 	tst.w	ip, #8
 8022eb4:	d0eb      	beq.n	8022e8e <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 8022eb6:	eba7 0009 	sub.w	r0, r7, r9
 8022eba:	1080      	asrs	r0, r0, #2
 8022ebc:	3001      	adds	r0, #1
 8022ebe:	2804      	cmp	r0, #4
 8022ec0:	d83e      	bhi.n	8022f40 <ip4addr_aton+0x134>
 8022ec2:	a301      	add	r3, pc, #4	; (adr r3, 8022ec8 <ip4addr_aton+0xbc>)
 8022ec4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8022ec8:	08022e91 	.word	0x08022e91
 8022ecc:	08022eed 	.word	0x08022eed
 8022ed0:	08022edd 	.word	0x08022edd
 8022ed4:	08022f21 	.word	0x08022f21
 8022ed8:	08022efd 	.word	0x08022efd
      if (val > 0xffffffUL) {
 8022edc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8022ee0:	d2d5      	bcs.n	8022e8e <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 8022ee2:	9b00      	ldr	r3, [sp, #0]
 8022ee4:	2bff      	cmp	r3, #255	; 0xff
 8022ee6:	d8d2      	bhi.n	8022e8e <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8022ee8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 8022eec:	b335      	cbz	r5, 8022f3c <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022eee:	4620      	mov	r0, r4
 8022ef0:	f7f6 f95e 	bl	80191b0 <lwip_htonl>
 8022ef4:	4603      	mov	r3, r0
  return 1;
 8022ef6:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022ef8:	602b      	str	r3, [r5, #0]
 8022efa:	e7c9      	b.n	8022e90 <ip4addr_aton+0x84>
      if (val > 0xff) {
 8022efc:	2cff      	cmp	r4, #255	; 0xff
 8022efe:	d8c6      	bhi.n	8022e8e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8022f00:	9900      	ldr	r1, [sp, #0]
 8022f02:	29ff      	cmp	r1, #255	; 0xff
 8022f04:	d8c3      	bhi.n	8022e8e <ip4addr_aton+0x82>
 8022f06:	9b01      	ldr	r3, [sp, #4]
 8022f08:	2bff      	cmp	r3, #255	; 0xff
 8022f0a:	d8c0      	bhi.n	8022e8e <ip4addr_aton+0x82>
 8022f0c:	9a02      	ldr	r2, [sp, #8]
 8022f0e:	2aff      	cmp	r2, #255	; 0xff
 8022f10:	d8bd      	bhi.n	8022e8e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8022f12:	041b      	lsls	r3, r3, #16
 8022f14:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8022f18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022f1c:	431c      	orrs	r4, r3
      break;
 8022f1e:	e7e5      	b.n	8022eec <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 8022f20:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8022f24:	d2b3      	bcs.n	8022e8e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8022f26:	9a00      	ldr	r2, [sp, #0]
 8022f28:	2aff      	cmp	r2, #255	; 0xff
 8022f2a:	d8b0      	bhi.n	8022e8e <ip4addr_aton+0x82>
 8022f2c:	9b01      	ldr	r3, [sp, #4]
 8022f2e:	2bff      	cmp	r3, #255	; 0xff
 8022f30:	d8ad      	bhi.n	8022e8e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 8022f32:	041b      	lsls	r3, r3, #16
 8022f34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8022f38:	431c      	orrs	r4, r3
      break;
 8022f3a:	e7d7      	b.n	8022eec <ip4addr_aton+0xe0>
  return 1;
 8022f3c:	2001      	movs	r0, #1
 8022f3e:	e7a7      	b.n	8022e90 <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 8022f40:	4b04      	ldr	r3, [pc, #16]	; (8022f54 <ip4addr_aton+0x148>)
 8022f42:	22f9      	movs	r2, #249	; 0xf9
 8022f44:	4904      	ldr	r1, [pc, #16]	; (8022f58 <ip4addr_aton+0x14c>)
 8022f46:	4805      	ldr	r0, [pc, #20]	; (8022f5c <ip4addr_aton+0x150>)
 8022f48:	f002 fa34 	bl	80253b4 <iprintf>
      break;
 8022f4c:	e7ce      	b.n	8022eec <ip4addr_aton+0xe0>
 8022f4e:	bf00      	nop
 8022f50:	08045c01 	.word	0x08045c01
 8022f54:	0804595c 	.word	0x0804595c
 8022f58:	08045998 	.word	0x08045998
 8022f5c:	0802a008 	.word	0x0802a008

08022f60 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022f60:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022f62:	4604      	mov	r4, r0
 8022f64:	b148      	cbz	r0, 8022f7a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8022f66:	6960      	ldr	r0, [r4, #20]
 8022f68:	b108      	cbz	r0, 8022f6e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8022f6a:	f7f8 f959 	bl	801b220 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8022f6e:	4621      	mov	r1, r4
 8022f70:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8022f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8022f76:	f7f7 bc3b 	b.w	801a7f0 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022f7a:	4b04      	ldr	r3, [pc, #16]	; (8022f8c <ipfrag_free_pbuf_custom+0x2c>)
 8022f7c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8022f80:	4903      	ldr	r1, [pc, #12]	; (8022f90 <ipfrag_free_pbuf_custom+0x30>)
 8022f82:	4804      	ldr	r0, [pc, #16]	; (8022f94 <ipfrag_free_pbuf_custom+0x34>)
 8022f84:	f002 fa16 	bl	80253b4 <iprintf>
 8022f88:	e7ed      	b.n	8022f66 <ipfrag_free_pbuf_custom+0x6>
 8022f8a:	bf00      	nop
 8022f8c:	080459ac 	.word	0x080459ac
 8022f90:	080459e8 	.word	0x080459e8
 8022f94:	0802a008 	.word	0x0802a008

08022f98 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022f98:	4281      	cmp	r1, r0
{
 8022f9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f9e:	4606      	mov	r6, r0
 8022fa0:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022fa2:	d075      	beq.n	8023090 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8022fa4:	b147      	cbz	r7, 8022fb8 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8022fa6:	683b      	ldr	r3, [r7, #0]
 8022fa8:	42b3      	cmp	r3, r6
 8022faa:	d005      	beq.n	8022fb8 <ip_reass_free_complete_datagram+0x20>
 8022fac:	4b40      	ldr	r3, [pc, #256]	; (80230b0 <ip_reass_free_complete_datagram+0x118>)
 8022fae:	22ad      	movs	r2, #173	; 0xad
 8022fb0:	4940      	ldr	r1, [pc, #256]	; (80230b4 <ip_reass_free_complete_datagram+0x11c>)
 8022fb2:	4841      	ldr	r0, [pc, #260]	; (80230b8 <ip_reass_free_complete_datagram+0x120>)
 8022fb4:	f002 f9fe 	bl	80253b4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8022fb8:	6875      	ldr	r5, [r6, #4]
 8022fba:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8022fbc:	889a      	ldrh	r2, [r3, #4]
 8022fbe:	2a00      	cmp	r2, #0
 8022fc0:	d047      	beq.n	8023052 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8022fc2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022fc6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80230b0 <ip_reass_free_complete_datagram+0x118>
 8022fca:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80230d0 <ip_reass_free_complete_datagram+0x138>
 8022fce:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80230b8 <ip_reass_free_complete_datagram+0x120>
 8022fd2:	e005      	b.n	8022fe0 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8022fd4:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8022fd6:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022fd8:	f7f8 f922 	bl	801b220 <pbuf_free>
  while (p != NULL) {
 8022fdc:	b1b4      	cbz	r4, 802300c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8022fde:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8022fe0:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8022fe2:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8022fe4:	f7f8 f930 	bl	801b248 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022fe8:	4458      	add	r0, fp
 8022fea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8022fee:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022ff2:	dbef      	blt.n	8022fd4 <ip_reass_free_complete_datagram+0x3c>
 8022ff4:	4653      	mov	r3, sl
 8022ff6:	22cc      	movs	r2, #204	; 0xcc
 8022ff8:	4649      	mov	r1, r9
 8022ffa:	4640      	mov	r0, r8
 8022ffc:	f002 f9da 	bl	80253b4 <iprintf>
    pbuf_free(pcur);
 8023000:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8023002:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8023004:	f7f8 f90c 	bl	801b220 <pbuf_free>
  while (p != NULL) {
 8023008:	2c00      	cmp	r4, #0
 802300a:	d1e8      	bne.n	8022fde <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 802300c:	4b2b      	ldr	r3, [pc, #172]	; (80230bc <ip_reass_free_complete_datagram+0x124>)
 802300e:	681a      	ldr	r2, [r3, #0]
 8023010:	4296      	cmp	r6, r2
 8023012:	d03a      	beq.n	802308a <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023014:	2f00      	cmp	r7, #0
 8023016:	d042      	beq.n	802309e <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8023018:	6833      	ldr	r3, [r6, #0]
 802301a:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 802301c:	4c28      	ldr	r4, [pc, #160]	; (80230c0 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 802301e:	4631      	mov	r1, r6
 8023020:	2005      	movs	r0, #5
 8023022:	f7f7 fbe5 	bl	801a7f0 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023026:	8823      	ldrh	r3, [r4, #0]
 8023028:	455b      	cmp	r3, fp
 802302a:	d305      	bcc.n	8023038 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802302c:	eba3 030b 	sub.w	r3, r3, fp
}
 8023030:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023032:	8023      	strh	r3, [r4, #0]
}
 8023034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023038:	4b1d      	ldr	r3, [pc, #116]	; (80230b0 <ip_reass_free_complete_datagram+0x118>)
 802303a:	22d2      	movs	r2, #210	; 0xd2
 802303c:	4921      	ldr	r1, [pc, #132]	; (80230c4 <ip_reass_free_complete_datagram+0x12c>)
 802303e:	481e      	ldr	r0, [pc, #120]	; (80230b8 <ip_reass_free_complete_datagram+0x120>)
 8023040:	f002 f9b8 	bl	80253b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023044:	8823      	ldrh	r3, [r4, #0]
}
 8023046:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023048:	eba3 030b 	sub.w	r3, r3, fp
 802304c:	8023      	strh	r3, [r4, #0]
}
 802304e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8023052:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023054:	6930      	ldr	r0, [r6, #16]
 8023056:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 8023058:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802305a:	68f4      	ldr	r4, [r6, #12]
 802305c:	68b2      	ldr	r2, [r6, #8]
 802305e:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023060:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023062:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023064:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023066:	601a      	str	r2, [r3, #0]
 8023068:	605c      	str	r4, [r3, #4]
 802306a:	69b2      	ldr	r2, [r6, #24]
 802306c:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802306e:	f7ff fccf 	bl	8022a10 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8023072:	4628      	mov	r0, r5
 8023074:	f7f8 f8e8 	bl	801b248 <pbuf_clen>
 8023078:	4683      	mov	fp, r0
    pbuf_free(p);
 802307a:	4628      	mov	r0, r5
 802307c:	f7f8 f8d0 	bl	801b220 <pbuf_free>
  p = ipr->p;
 8023080:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8023082:	2d00      	cmp	r5, #0
 8023084:	d0c2      	beq.n	802300c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8023086:	686b      	ldr	r3, [r5, #4]
 8023088:	e79d      	b.n	8022fc6 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 802308a:	6832      	ldr	r2, [r6, #0]
 802308c:	601a      	str	r2, [r3, #0]
 802308e:	e7c5      	b.n	802301c <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8023090:	4b07      	ldr	r3, [pc, #28]	; (80230b0 <ip_reass_free_complete_datagram+0x118>)
 8023092:	22ab      	movs	r2, #171	; 0xab
 8023094:	490c      	ldr	r1, [pc, #48]	; (80230c8 <ip_reass_free_complete_datagram+0x130>)
 8023096:	4808      	ldr	r0, [pc, #32]	; (80230b8 <ip_reass_free_complete_datagram+0x120>)
 8023098:	f002 f98c 	bl	80253b4 <iprintf>
 802309c:	e782      	b.n	8022fa4 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802309e:	4b04      	ldr	r3, [pc, #16]	; (80230b0 <ip_reass_free_complete_datagram+0x118>)
 80230a0:	f240 1245 	movw	r2, #325	; 0x145
 80230a4:	4909      	ldr	r1, [pc, #36]	; (80230cc <ip_reass_free_complete_datagram+0x134>)
 80230a6:	4804      	ldr	r0, [pc, #16]	; (80230b8 <ip_reass_free_complete_datagram+0x120>)
 80230a8:	f002 f984 	bl	80253b4 <iprintf>
 80230ac:	e7b4      	b.n	8023018 <ip_reass_free_complete_datagram+0x80>
 80230ae:	bf00      	nop
 80230b0:	080459ac 	.word	0x080459ac
 80230b4:	08045a00 	.word	0x08045a00
 80230b8:	0802a008 	.word	0x0802a008
 80230bc:	2002e470 	.word	0x2002e470
 80230c0:	2002e46c 	.word	0x2002e46c
 80230c4:	08045a50 	.word	0x08045a50
 80230c8:	080459f4 	.word	0x080459f4
 80230cc:	08045a34 	.word	0x08045a34
 80230d0:	08045a14 	.word	0x08045a14

080230d4 <ip_reass_remove_oldest_datagram>:
{
 80230d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 80230d8:	2700      	movs	r7, #0
 80230da:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8023144 <ip_reass_remove_oldest_datagram+0x70>
{
 80230de:	4605      	mov	r5, r0
 80230e0:	460e      	mov	r6, r1
    r = reassdatagrams;
 80230e2:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 80230e6:	b1f3      	cbz	r3, 8023126 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 80230e8:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80230ea:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 80230ee:	4621      	mov	r1, r4
    prev = NULL;
 80230f0:	46a4      	mov	ip, r4
    oldest = NULL;
 80230f2:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80230f4:	695a      	ldr	r2, [r3, #20]
 80230f6:	4572      	cmp	r2, lr
 80230f8:	d018      	beq.n	802312c <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 80230fa:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80230fc:	b120      	cbz	r0, 8023108 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 80230fe:	f893 901f 	ldrb.w	r9, [r3, #31]
 8023102:	7fc2      	ldrb	r2, [r0, #31]
 8023104:	4591      	cmp	r9, r2
 8023106:	d801      	bhi.n	802310c <ip_reass_remove_oldest_datagram+0x38>
 8023108:	4661      	mov	r1, ip
 802310a:	4618      	mov	r0, r3
      if (r->next != NULL) {
 802310c:	681a      	ldr	r2, [r3, #0]
 802310e:	469c      	mov	ip, r3
 8023110:	4613      	mov	r3, r2
 8023112:	2a00      	cmp	r2, #0
 8023114:	d1ee      	bne.n	80230f4 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8023116:	b110      	cbz	r0, 802311e <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8023118:	f7ff ff3e 	bl	8022f98 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 802311c:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802311e:	42b7      	cmp	r7, r6
 8023120:	da01      	bge.n	8023126 <ip_reass_remove_oldest_datagram+0x52>
 8023122:	2c01      	cmp	r4, #1
 8023124:	dcdd      	bgt.n	80230e2 <ip_reass_remove_oldest_datagram+0xe>
}
 8023126:	4638      	mov	r0, r7
 8023128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802312c:	699a      	ldr	r2, [r3, #24]
 802312e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8023132:	454a      	cmp	r2, r9
 8023134:	d1e1      	bne.n	80230fa <ip_reass_remove_oldest_datagram+0x26>
 8023136:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 802313a:	88aa      	ldrh	r2, [r5, #4]
 802313c:	4591      	cmp	r9, r2
 802313e:	d1dc      	bne.n	80230fa <ip_reass_remove_oldest_datagram+0x26>
 8023140:	e7e4      	b.n	802310c <ip_reass_remove_oldest_datagram+0x38>
 8023142:	bf00      	nop
 8023144:	2002e470 	.word	0x2002e470

08023148 <ip_reass_tmr>:
{
 8023148:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 802314a:	4b0a      	ldr	r3, [pc, #40]	; (8023174 <ip_reass_tmr+0x2c>)
 802314c:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 802314e:	b140      	cbz	r0, 8023162 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 8023150:	2400      	movs	r4, #0
    if (r->timer > 0) {
 8023152:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 8023154:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 8023156:	b12b      	cbz	r3, 8023164 <ip_reass_tmr+0x1c>
 8023158:	4604      	mov	r4, r0
      r->timer--;
 802315a:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 802315c:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 802315e:	2800      	cmp	r0, #0
 8023160:	d1f7      	bne.n	8023152 <ip_reass_tmr+0xa>
}
 8023162:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 8023164:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8023166:	4621      	mov	r1, r4
 8023168:	f7ff ff16 	bl	8022f98 <ip_reass_free_complete_datagram>
      r = r->next;
 802316c:	4628      	mov	r0, r5
  while (r != NULL) {
 802316e:	2800      	cmp	r0, #0
 8023170:	d1ef      	bne.n	8023152 <ip_reass_tmr+0xa>
 8023172:	e7f6      	b.n	8023162 <ip_reass_tmr+0x1a>
 8023174:	2002e470 	.word	0x2002e470

08023178 <ip4_reass>:
{
 8023178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 802317c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8023180:	b085      	sub	sp, #20
 8023182:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8023184:	f89a 3000 	ldrb.w	r3, [sl]
 8023188:	f003 030f 	and.w	r3, r3, #15
 802318c:	2b05      	cmp	r3, #5
 802318e:	f040 8089 	bne.w	80232a4 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023192:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8023196:	f7f6 f807 	bl	80191a8 <lwip_htons>
 802319a:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802319c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80231a0:	f7f6 f802 	bl	80191a8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80231a4:	f89a 2000 	ldrb.w	r2, [sl]
 80231a8:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80231ac:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80231b0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80231b4:	d376      	bcc.n	80232a4 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 80231b6:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80231b8:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 80234b0 <ip4_reass+0x338>
  clen = pbuf_clen(p);
 80231bc:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 80231be:	b29b      	uxth	r3, r3
 80231c0:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 80231c2:	f7f8 f841 	bl	801b248 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80231c6:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 80231ca:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80231cc:	4403      	add	r3, r0
 80231ce:	2b14      	cmp	r3, #20
 80231d0:	f300 80e5 	bgt.w	802339e <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80231d4:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 80234b4 <ip4_reass+0x33c>
 80231d8:	f8d9 4000 	ldr.w	r4, [r9]
 80231dc:	2c00      	cmp	r4, #0
 80231de:	f000 80ec 	beq.w	80233ba <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80231e2:	f8da 200c 	ldr.w	r2, [sl, #12]
 80231e6:	e003      	b.n	80231f0 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80231e8:	6824      	ldr	r4, [r4, #0]
 80231ea:	2c00      	cmp	r4, #0
 80231ec:	f000 80e5 	beq.w	80233ba <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80231f0:	6963      	ldr	r3, [r4, #20]
 80231f2:	4293      	cmp	r3, r2
 80231f4:	d1f8      	bne.n	80231e8 <ip4_reass+0x70>
 80231f6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80231fa:	69a1      	ldr	r1, [r4, #24]
 80231fc:	4299      	cmp	r1, r3
 80231fe:	d1f3      	bne.n	80231e8 <ip4_reass+0x70>
 8023200:	89a1      	ldrh	r1, [r4, #12]
 8023202:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8023206:	4299      	cmp	r1, r3
 8023208:	d1ee      	bne.n	80231e8 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802320a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 802320e:	f7f5 ffcb 	bl	80191a8 <lwip_htons>
 8023212:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8023216:	2800      	cmp	r0, #0
 8023218:	f000 80a9 	beq.w	802336e <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802321c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023220:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8023224:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023228:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 802322c:	9301      	str	r3, [sp, #4]
 802322e:	d108      	bne.n	8023242 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8023230:	9b00      	ldr	r3, [sp, #0]
 8023232:	18f3      	adds	r3, r6, r3
 8023234:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8023236:	429e      	cmp	r6, r3
 8023238:	d812      	bhi.n	8023260 <ip4_reass+0xe8>
 802323a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802323e:	4293      	cmp	r3, r2
 8023240:	d80e      	bhi.n	8023260 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8023242:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8023246:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 802324a:	f7f5 ffad 	bl	80191a8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 802324e:	f89a 2000 	ldrb.w	r2, [sl]
 8023252:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8023256:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 802325a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 802325e:	d229      	bcs.n	80232b4 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8023260:	6866      	ldr	r6, [r4, #4]
 8023262:	b9fe      	cbnz	r6, 80232a4 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8023264:	f8d9 3000 	ldr.w	r3, [r9]
 8023268:	42a3      	cmp	r3, r4
 802326a:	d014      	beq.n	8023296 <ip4_reass+0x11e>
 802326c:	4b8c      	ldr	r3, [pc, #560]	; (80234a0 <ip4_reass+0x328>)
 802326e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8023272:	498c      	ldr	r1, [pc, #560]	; (80234a4 <ip4_reass+0x32c>)
 8023274:	488c      	ldr	r0, [pc, #560]	; (80234a8 <ip4_reass+0x330>)
 8023276:	f002 f89d 	bl	80253b4 <iprintf>
  if (reassdatagrams == ipr) {
 802327a:	f8d9 3000 	ldr.w	r3, [r9]
 802327e:	429c      	cmp	r4, r3
 8023280:	d009      	beq.n	8023296 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023282:	4b87      	ldr	r3, [pc, #540]	; (80234a0 <ip4_reass+0x328>)
 8023284:	f240 1245 	movw	r2, #325	; 0x145
 8023288:	4988      	ldr	r1, [pc, #544]	; (80234ac <ip4_reass+0x334>)
 802328a:	4887      	ldr	r0, [pc, #540]	; (80234a8 <ip4_reass+0x330>)
 802328c:	f002 f892 	bl	80253b4 <iprintf>
    prev->next = ipr->next;
 8023290:	6823      	ldr	r3, [r4, #0]
 8023292:	6033      	str	r3, [r6, #0]
 8023294:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 8023296:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8023298:	4621      	mov	r1, r4
 802329a:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 802329c:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80232a0:	f7f7 faa6 	bl	801a7f0 <memp_free>
  pbuf_free(p);
 80232a4:	4628      	mov	r0, r5
  return NULL;
 80232a6:	2600      	movs	r6, #0
  pbuf_free(p);
 80232a8:	f7f7 ffba 	bl	801b220 <pbuf_free>
}
 80232ac:	4630      	mov	r0, r6
 80232ae:	b005      	add	sp, #20
 80232b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 80232b4:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80232b6:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 80232ba:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80232be:	f7f5 ff73 	bl	80191a8 <lwip_htons>
 80232c2:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80232c6:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80232ca:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 80232cc:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 80232d0:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 80232d4:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 80232d8:	f8ab 3006 	strh.w	r3, [fp, #6]
 80232dc:	b29b      	uxth	r3, r3
 80232de:	4619      	mov	r1, r3
 80232e0:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 80232e2:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 80232e4:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 80232e6:	f88b 3000 	strb.w	r3, [fp]
 80232ea:	f88b 3001 	strb.w	r3, [fp, #1]
 80232ee:	f88b 3002 	strb.w	r3, [fp, #2]
 80232f2:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 80232f6:	d8b3      	bhi.n	8023260 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 80232f8:	6861      	ldr	r1, [r4, #4]
 80232fa:	2900      	cmp	r1, #0
 80232fc:	f000 80c4 	beq.w	8023488 <ip4_reass+0x310>
  int valid = 1;
 8023300:	f04f 0a01 	mov.w	sl, #1
 8023304:	4694      	mov	ip, r2
 8023306:	e00e      	b.n	8023326 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 8023308:	d0cc      	beq.n	80232a4 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 802330a:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 802330e:	45f4      	cmp	ip, lr
 8023310:	d3c8      	bcc.n	80232a4 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 8023312:	b122      	cbz	r2, 802331e <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 8023314:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8023316:	4282      	cmp	r2, r0
 8023318:	bf18      	it	ne
 802331a:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 802331e:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8023320:	2900      	cmp	r1, #0
 8023322:	f000 808a 	beq.w	802343a <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8023326:	461a      	mov	r2, r3
 8023328:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 802332a:	8898      	ldrh	r0, [r3, #4]
 802332c:	4584      	cmp	ip, r0
 802332e:	d2eb      	bcs.n	8023308 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 8023330:	4613      	mov	r3, r2
 8023332:	f8cb 1000 	str.w	r1, [fp]
 8023336:	4662      	mov	r2, ip
 8023338:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 802333a:	2b00      	cmp	r3, #0
 802333c:	d066      	beq.n	802340c <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 802333e:	88db      	ldrh	r3, [r3, #6]
 8023340:	429a      	cmp	r2, r3
 8023342:	d3af      	bcc.n	80232a4 <ip4_reass+0x12c>
 8023344:	9903      	ldr	r1, [sp, #12]
 8023346:	4281      	cmp	r1, r0
 8023348:	d8ac      	bhi.n	80232a4 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 802334a:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 802334c:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8023350:	d061      	beq.n	8023416 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8023352:	9b01      	ldr	r3, [sp, #4]
 8023354:	2b00      	cmp	r3, #0
 8023356:	f000 808a 	beq.w	802346e <ip4_reass+0x2f6>
 802335a:	7fa3      	ldrb	r3, [r4, #30]
 802335c:	07db      	lsls	r3, r3, #31
 802335e:	d462      	bmi.n	8023426 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023360:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8023364:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023366:	441f      	add	r7, r3
 8023368:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802336c:	e79e      	b.n	80232ac <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 802336e:	89e0      	ldrh	r0, [r4, #14]
 8023370:	f7f5 ff1a 	bl	80191a8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8023374:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8023378:	2800      	cmp	r0, #0
 802337a:	f43f af4f 	beq.w	802321c <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802337e:	f8da 3000 	ldr.w	r3, [sl]
 8023382:	f8da 0004 	ldr.w	r0, [sl, #4]
 8023386:	f8da 1008 	ldr.w	r1, [sl, #8]
 802338a:	f8da 200c 	ldr.w	r2, [sl, #12]
 802338e:	60a3      	str	r3, [r4, #8]
 8023390:	60e0      	str	r0, [r4, #12]
 8023392:	6121      	str	r1, [r4, #16]
 8023394:	6162      	str	r2, [r4, #20]
 8023396:	f8da 3010 	ldr.w	r3, [sl, #16]
 802339a:	61a3      	str	r3, [r4, #24]
 802339c:	e73e      	b.n	802321c <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802339e:	4601      	mov	r1, r0
 80233a0:	4650      	mov	r0, sl
 80233a2:	f7ff fe97 	bl	80230d4 <ip_reass_remove_oldest_datagram>
 80233a6:	2800      	cmp	r0, #0
 80233a8:	f43f af7c 	beq.w	80232a4 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80233ac:	f8b8 3000 	ldrh.w	r3, [r8]
 80233b0:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80233b2:	2b14      	cmp	r3, #20
 80233b4:	f77f af0e 	ble.w	80231d4 <ip4_reass+0x5c>
 80233b8:	e774      	b.n	80232a4 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80233ba:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80233be:	4938      	ldr	r1, [pc, #224]	; (80234a0 <ip4_reass+0x328>)
 80233c0:	2005      	movs	r0, #5
 80233c2:	f7f7 f9df 	bl	801a784 <memp_malloc_fn>
  if (ipr == NULL) {
 80233c6:	4604      	mov	r4, r0
 80233c8:	b178      	cbz	r0, 80233ea <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80233ca:	2300      	movs	r3, #0
 80233cc:	61e3      	str	r3, [r4, #28]
 80233ce:	60a3      	str	r3, [r4, #8]
 80233d0:	60e3      	str	r3, [r4, #12]
 80233d2:	6123      	str	r3, [r4, #16]
 80233d4:	6163      	str	r3, [r4, #20]
 80233d6:	61a3      	str	r3, [r4, #24]
 80233d8:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 80233da:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 80233de:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 80233e2:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 80233e4:	230f      	movs	r3, #15
 80233e6:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80233e8:	e7c9      	b.n	802337e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80233ea:	4639      	mov	r1, r7
 80233ec:	4650      	mov	r0, sl
 80233ee:	f7ff fe71 	bl	80230d4 <ip_reass_remove_oldest_datagram>
 80233f2:	4287      	cmp	r7, r0
 80233f4:	f73f af56 	bgt.w	80232a4 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80233f8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80233fc:	4928      	ldr	r1, [pc, #160]	; (80234a0 <ip4_reass+0x328>)
 80233fe:	2005      	movs	r0, #5
 8023400:	f7f7 f9c0 	bl	801a784 <memp_malloc_fn>
    if (ipr == NULL)
 8023404:	4604      	mov	r4, r0
 8023406:	2800      	cmp	r0, #0
 8023408:	d1df      	bne.n	80233ca <ip4_reass+0x252>
 802340a:	e74b      	b.n	80232a4 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 802340c:	9b03      	ldr	r3, [sp, #12]
 802340e:	4283      	cmp	r3, r0
 8023410:	f63f af48 	bhi.w	80232a4 <ip4_reass+0x12c>
        ipr->p = new_p;
 8023414:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8023416:	9b01      	ldr	r3, [sp, #4]
 8023418:	b19b      	cbz	r3, 8023442 <ip4_reass+0x2ca>
 802341a:	7fa3      	ldrb	r3, [r4, #30]
 802341c:	07d9      	lsls	r1, r3, #31
 802341e:	d59f      	bpl.n	8023360 <ip4_reass+0x1e8>
    if (valid) {
 8023420:	f1ba 0f00 	cmp.w	sl, #0
 8023424:	d138      	bne.n	8023498 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023426:	f8b8 3000 	ldrh.w	r3, [r8]
 802342a:	441f      	add	r7, r3
 802342c:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 8023430:	2600      	movs	r6, #0
}
 8023432:	4630      	mov	r0, r6
 8023434:	b005      	add	sp, #20
 8023436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 802343a:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 802343c:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802343e:	d188      	bne.n	8023352 <ip4_reass+0x1da>
 8023440:	e7e9      	b.n	8023416 <ip4_reass+0x29e>
    if (valid) {
 8023442:	f1ba 0f00 	cmp.w	sl, #0
 8023446:	d012      	beq.n	802346e <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023448:	6863      	ldr	r3, [r4, #4]
 802344a:	b183      	cbz	r3, 802346e <ip4_reass+0x2f6>
 802344c:	6859      	ldr	r1, [r3, #4]
 802344e:	888b      	ldrh	r3, [r1, #4]
 8023450:	2b00      	cmp	r3, #0
 8023452:	d031      	beq.n	80234b8 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023454:	f8b8 3000 	ldrh.w	r3, [r8]
 8023458:	441f      	add	r7, r3
  if (is_last) {
 802345a:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802345c:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8023460:	2b00      	cmp	r3, #0
 8023462:	d1e5      	bne.n	8023430 <ip4_reass+0x2b8>
 8023464:	e008      	b.n	8023478 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023466:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802346a:	4659      	mov	r1, fp
 802346c:	b323      	cbz	r3, 80234b8 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802346e:	f8b8 3000 	ldrh.w	r3, [r8]
 8023472:	441f      	add	r7, r3
 8023474:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023478:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802347a:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802347c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8023480:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023482:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8023484:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8023486:	e7d3      	b.n	8023430 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8023488:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 802348a:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 802348c:	2b00      	cmp	r3, #0
 802348e:	d0ea      	beq.n	8023466 <ip4_reass+0x2ee>
 8023490:	7fa3      	ldrb	r3, [r4, #30]
 8023492:	07da      	lsls	r2, r3, #31
 8023494:	f57f af64 	bpl.w	8023360 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023498:	6863      	ldr	r3, [r4, #4]
 802349a:	2b00      	cmp	r3, #0
 802349c:	d0c3      	beq.n	8023426 <ip4_reass+0x2ae>
 802349e:	e7d5      	b.n	802344c <ip4_reass+0x2d4>
 80234a0:	080459ac 	.word	0x080459ac
 80234a4:	08045ac4 	.word	0x08045ac4
 80234a8:	0802a008 	.word	0x0802a008
 80234ac:	08045a34 	.word	0x08045a34
 80234b0:	2002e46c 	.word	0x2002e46c
 80234b4:	2002e470 	.word	0x2002e470
        q = iprh->next_pbuf;
 80234b8:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 80234bc:	b153      	cbz	r3, 80234d4 <ip4_reass+0x35c>
 80234be:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 80234c0:	4610      	mov	r0, r2
 80234c2:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80234c4:	88c0      	ldrh	r0, [r0, #6]
 80234c6:	8893      	ldrh	r3, [r2, #4]
 80234c8:	4298      	cmp	r0, r3
 80234ca:	d1c3      	bne.n	8023454 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 80234cc:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 80234ce:	2b00      	cmp	r3, #0
 80234d0:	d1f6      	bne.n	80234c0 <ip4_reass+0x348>
 80234d2:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 80234d4:	9b02      	ldr	r3, [sp, #8]
 80234d6:	428b      	cmp	r3, r1
 80234d8:	d110      	bne.n	80234fc <ip4_reass+0x384>
 80234da:	4b40      	ldr	r3, [pc, #256]	; (80235dc <ip4_reass+0x464>)
 80234dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80234e0:	493f      	ldr	r1, [pc, #252]	; (80235e0 <ip4_reass+0x468>)
 80234e2:	4840      	ldr	r0, [pc, #256]	; (80235e4 <ip4_reass+0x46c>)
 80234e4:	f001 ff66 	bl	80253b4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80234e8:	9b02      	ldr	r3, [sp, #8]
 80234ea:	681b      	ldr	r3, [r3, #0]
 80234ec:	b133      	cbz	r3, 80234fc <ip4_reass+0x384>
 80234ee:	4b3b      	ldr	r3, [pc, #236]	; (80235dc <ip4_reass+0x464>)
 80234f0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80234f4:	493c      	ldr	r1, [pc, #240]	; (80235e8 <ip4_reass+0x470>)
 80234f6:	483b      	ldr	r0, [pc, #236]	; (80235e4 <ip4_reass+0x46c>)
 80234f8:	f001 ff5c 	bl	80253b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80234fc:	f8b8 3000 	ldrh.w	r3, [r8]
 8023500:	441f      	add	r7, r3
  if (is_last) {
 8023502:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023504:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8023508:	2b00      	cmp	r3, #0
 802350a:	d15b      	bne.n	80235c4 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 802350c:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802350e:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8023510:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023512:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8023516:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023518:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 802351a:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802351c:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 802351e:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023520:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8023522:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8023524:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023526:	68a3      	ldr	r3, [r4, #8]
 8023528:	6921      	ldr	r1, [r4, #16]
 802352a:	6962      	ldr	r2, [r4, #20]
 802352c:	6075      	str	r5, [r6, #4]
 802352e:	60b1      	str	r1, [r6, #8]
 8023530:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8023532:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023534:	6033      	str	r3, [r6, #0]
 8023536:	69a3      	ldr	r3, [r4, #24]
 8023538:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802353a:	f7f5 fe35 	bl	80191a8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 802353e:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8023540:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8023542:	2114      	movs	r1, #20
 8023544:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 8023546:	71b3      	strb	r3, [r6, #6]
 8023548:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802354a:	72b3      	strb	r3, [r6, #10]
 802354c:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802354e:	f7f6 fbd3 	bl	8019cf8 <inet_chksum>
 8023552:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 8023554:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8023556:	b15d      	cbz	r5, 8023570 <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 8023558:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 802355a:	4628      	mov	r0, r5
 802355c:	2114      	movs	r1, #20
 802355e:	f7f7 fdd3 	bl	801b108 <pbuf_remove_header>
      pbuf_cat(p, r);
 8023562:	4629      	mov	r1, r5
 8023564:	4630      	mov	r0, r6
 8023566:	f7f7 fe8d 	bl	801b284 <pbuf_cat>
      r = iprh->next_pbuf;
 802356a:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 802356c:	2d00      	cmp	r5, #0
 802356e:	d1f3      	bne.n	8023558 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 8023570:	f8d9 5000 	ldr.w	r5, [r9]
 8023574:	42a5      	cmp	r5, r4
 8023576:	d005      	beq.n	8023584 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023578:	b335      	cbz	r5, 80235c8 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 802357a:	682b      	ldr	r3, [r5, #0]
 802357c:	42a3      	cmp	r3, r4
 802357e:	d014      	beq.n	80235aa <ip4_reass+0x432>
 8023580:	461d      	mov	r5, r3
 8023582:	e7f9      	b.n	8023578 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 8023584:	6823      	ldr	r3, [r4, #0]
 8023586:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 802358a:	4621      	mov	r1, r4
 802358c:	2005      	movs	r0, #5
 802358e:	f7f7 f92f 	bl	801a7f0 <memp_free>
    clen = pbuf_clen(p);
 8023592:	4630      	mov	r0, r6
 8023594:	f7f7 fe58 	bl	801b248 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8023598:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 802359c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802359e:	4283      	cmp	r3, r0
 80235a0:	d306      	bcc.n	80235b0 <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80235a2:	1b1b      	subs	r3, r3, r4
 80235a4:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 80235a8:	e680      	b.n	80232ac <ip4_reass+0x134>
    prev->next = ipr->next;
 80235aa:	6823      	ldr	r3, [r4, #0]
 80235ac:	602b      	str	r3, [r5, #0]
 80235ae:	e7ec      	b.n	802358a <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80235b0:	4b0a      	ldr	r3, [pc, #40]	; (80235dc <ip4_reass+0x464>)
 80235b2:	f240 229b 	movw	r2, #667	; 0x29b
 80235b6:	490d      	ldr	r1, [pc, #52]	; (80235ec <ip4_reass+0x474>)
 80235b8:	480a      	ldr	r0, [pc, #40]	; (80235e4 <ip4_reass+0x46c>)
 80235ba:	f001 fefb 	bl	80253b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80235be:	f8b8 3000 	ldrh.w	r3, [r8]
 80235c2:	e7ee      	b.n	80235a2 <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80235c4:	8ba0      	ldrh	r0, [r4, #28]
 80235c6:	e7a9      	b.n	802351c <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80235c8:	4b04      	ldr	r3, [pc, #16]	; (80235dc <ip4_reass+0x464>)
 80235ca:	f240 1245 	movw	r2, #325	; 0x145
 80235ce:	4908      	ldr	r1, [pc, #32]	; (80235f0 <ip4_reass+0x478>)
 80235d0:	4804      	ldr	r0, [pc, #16]	; (80235e4 <ip4_reass+0x46c>)
 80235d2:	f001 feef 	bl	80253b4 <iprintf>
    prev->next = ipr->next;
 80235d6:	6823      	ldr	r3, [r4, #0]
 80235d8:	602b      	str	r3, [r5, #0]
 80235da:	deff      	udf	#255	; 0xff
 80235dc:	080459ac 	.word	0x080459ac
 80235e0:	08045a74 	.word	0x08045a74
 80235e4:	0802a008 	.word	0x0802a008
 80235e8:	08045a84 	.word	0x08045a84
 80235ec:	08045aa8 	.word	0x08045aa8
 80235f0:	08045a34 	.word	0x08045a34

080235f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80235f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80235f8:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 80235fa:	b08f      	sub	sp, #60	; 0x3c
 80235fc:	4605      	mov	r5, r0
 80235fe:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023600:	f1b3 0214 	subs.w	r2, r3, #20
{
 8023604:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023606:	bf48      	it	mi
 8023608:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802360c:	6843      	ldr	r3, [r0, #4]
 802360e:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023610:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8023614:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023616:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8023618:	f003 030f 	and.w	r3, r3, #15
 802361c:	2b05      	cmp	r3, #5
 802361e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8023622:	f040 80ea 	bne.w	80237fa <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8023626:	8943      	ldrh	r3, [r0, #10]
 8023628:	2b13      	cmp	r3, #19
 802362a:	f240 80e9 	bls.w	8023800 <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802362e:	9b04      	ldr	r3, [sp, #16]
 8023630:	88d8      	ldrh	r0, [r3, #6]
 8023632:	f7f5 fdb9 	bl	80191a8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8023636:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8023638:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 802363c:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 802363e:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 8023640:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8023644:	b29b      	uxth	r3, r3
 8023646:	920d      	str	r2, [sp, #52]	; 0x34
 8023648:	9305      	str	r3, [sp, #20]

  while (left) {
 802364a:	2b00      	cmp	r3, #0
 802364c:	f000 809d 	beq.w	802378a <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023650:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 8023652:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023654:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8023820 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023658:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802365a:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8023828 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802365e:	b29b      	uxth	r3, r3
 8023660:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8023662:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023666:	2114      	movs	r1, #20
 8023668:	200e      	movs	r0, #14
 802366a:	f7f7 fc07 	bl	801ae7c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802366e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023670:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 8023672:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023674:	4293      	cmp	r3, r2
 8023676:	bf28      	it	cs
 8023678:	4613      	movcs	r3, r2
 802367a:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 802367c:	2800      	cmp	r0, #0
 802367e:	f000 80b9 	beq.w	80237f4 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023682:	8943      	ldrh	r3, [r0, #10]
 8023684:	2b13      	cmp	r3, #19
 8023686:	f240 8091 	bls.w	80237ac <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802368a:	9904      	ldr	r1, [sp, #16]
 802368c:	9b03      	ldr	r3, [sp, #12]
 802368e:	680a      	ldr	r2, [r1, #0]
 8023690:	685b      	ldr	r3, [r3, #4]
 8023692:	684f      	ldr	r7, [r1, #4]
 8023694:	6888      	ldr	r0, [r1, #8]
 8023696:	68c9      	ldr	r1, [r1, #12]
 8023698:	605f      	str	r7, [r3, #4]
 802369a:	60d9      	str	r1, [r3, #12]
 802369c:	9904      	ldr	r1, [sp, #16]
 802369e:	601a      	str	r2, [r3, #0]
 80236a0:	6098      	str	r0, [r3, #8]
 80236a2:	690a      	ldr	r2, [r1, #16]
 80236a4:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80236a6:	9b03      	ldr	r3, [sp, #12]
 80236a8:	685b      	ldr	r3, [r3, #4]
 80236aa:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 80236ac:	9b06      	ldr	r3, [sp, #24]
 80236ae:	2b00      	cmp	r3, #0
 80236b0:	d034      	beq.n	802371c <ip4_frag+0x128>
 80236b2:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80236b4:	896b      	ldrh	r3, [r5, #10]
 80236b6:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80236b8:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 80236ba:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80236bc:	d36e      	bcc.n	802379c <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80236be:	454c      	cmp	r4, r9
 80236c0:	bf28      	it	cs
 80236c2:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80236c4:	2c00      	cmp	r4, #0
 80236c6:	d062      	beq.n	802378e <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80236c8:	4641      	mov	r1, r8
 80236ca:	f240 22bd 	movw	r2, #701	; 0x2bd
 80236ce:	2006      	movs	r0, #6
 80236d0:	f7f7 f858 	bl	801a784 <memp_malloc_fn>
 80236d4:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80236d6:	2241      	movs	r2, #65	; 0x41
 80236d8:	4621      	mov	r1, r4
 80236da:	2000      	movs	r0, #0
      if (pcr == NULL) {
 80236dc:	f1bb 0f00 	cmp.w	fp, #0
 80236e0:	d06f      	beq.n	80237c2 <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80236e2:	9401      	str	r4, [sp, #4]
 80236e4:	465b      	mov	r3, fp
 80236e6:	686f      	ldr	r7, [r5, #4]
 80236e8:	4437      	add	r7, r6
 80236ea:	9700      	str	r7, [sp, #0]
 80236ec:	f7f7 fc64 	bl	801afb8 <pbuf_alloced_custom>
 80236f0:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80236f2:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 80236f4:	2f00      	cmp	r7, #0
 80236f6:	d06e      	beq.n	80237d6 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80236f8:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 80236fc:	f7f7 fdae 	bl	801b25c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8023700:	4a44      	ldr	r2, [pc, #272]	; (8023814 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 8023702:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8023704:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8023708:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 802370a:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802370e:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 8023712:	f7f7 fdb7 	bl	801b284 <pbuf_cat>
      if (left_to_copy) {
 8023716:	f1b9 0f00 	cmp.w	r9, #0
 802371a:	d138      	bne.n	802378e <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 802371c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 802371e:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8023720:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 8023722:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 8023724:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8023726:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 802372a:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 802372c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 802372e:	4293      	cmp	r3, r2
 8023730:	dd44      	ble.n	80237bc <ip4_frag+0x1c8>
 8023732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023734:	2b00      	cmp	r3, #0
 8023736:	d141      	bne.n	80237bc <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8023738:	f7f5 fd36 	bl	80191a8 <lwip_htons>
 802373c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802373e:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8023740:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8023742:	f103 0014 	add.w	r0, r3, #20
 8023746:	b280      	uxth	r0, r0
 8023748:	f7f5 fd2e 	bl	80191a8 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 802374c:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802374e:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023750:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 8023752:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023754:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 8023756:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023758:	f7f6 face 	bl	8019cf8 <inet_chksum>
 802375c:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 802375e:	9f03      	ldr	r7, [sp, #12]
 8023760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023764:	4639      	mov	r1, r7
 8023766:	6943      	ldr	r3, [r0, #20]
 8023768:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802376a:	4638      	mov	r0, r7
 802376c:	f7f7 fd58 	bl	801b220 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8023770:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8023774:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8023776:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 802377a:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 802377c:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 802377e:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8023780:	b292      	uxth	r2, r2
 8023782:	9207      	str	r2, [sp, #28]
  while (left) {
 8023784:	2b00      	cmp	r3, #0
 8023786:	f47f af6c 	bne.w	8023662 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802378a:	2000      	movs	r0, #0
 802378c:	e020      	b.n	80237d0 <ip4_frag+0x1dc>
        p = p->next;
 802378e:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8023790:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8023792:	896b      	ldrh	r3, [r5, #10]
 8023794:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8023796:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8023798:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802379a:	d290      	bcs.n	80236be <ip4_frag+0xca>
 802379c:	4643      	mov	r3, r8
 802379e:	f240 322d 	movw	r2, #813	; 0x32d
 80237a2:	491d      	ldr	r1, [pc, #116]	; (8023818 <ip4_frag+0x224>)
 80237a4:	4650      	mov	r0, sl
 80237a6:	f001 fe05 	bl	80253b4 <iprintf>
 80237aa:	e788      	b.n	80236be <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80237ac:	4643      	mov	r3, r8
 80237ae:	f44f 7249 	mov.w	r2, #804	; 0x324
 80237b2:	491a      	ldr	r1, [pc, #104]	; (802381c <ip4_frag+0x228>)
 80237b4:	4650      	mov	r0, sl
 80237b6:	f001 fdfd 	bl	80253b4 <iprintf>
 80237ba:	e766      	b.n	802368a <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 80237bc:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80237c0:	e7ba      	b.n	8023738 <ip4_frag+0x144>
        pbuf_free(rambuf);
 80237c2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80237c6:	4658      	mov	r0, fp
 80237c8:	f7f7 fd2a 	bl	801b220 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80237cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80237d0:	b00f      	add	sp, #60	; 0x3c
 80237d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 80237d6:	46d9      	mov	r9, fp
 80237d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80237dc:	2006      	movs	r0, #6
 80237de:	4649      	mov	r1, r9
 80237e0:	f7f7 f806 	bl	801a7f0 <memp_free>
        pbuf_free(rambuf);
 80237e4:	4658      	mov	r0, fp
 80237e6:	f7f7 fd1b 	bl	801b220 <pbuf_free>
  return ERR_MEM;
 80237ea:	f04f 30ff 	mov.w	r0, #4294967295
}
 80237ee:	b00f      	add	sp, #60	; 0x3c
 80237f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 80237f4:	f04f 30ff 	mov.w	r0, #4294967295
 80237f8:	e7ea      	b.n	80237d0 <ip4_frag+0x1dc>
    return ERR_VAL;
 80237fa:	f06f 0005 	mvn.w	r0, #5
 80237fe:	e7e7      	b.n	80237d0 <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8023800:	4b07      	ldr	r3, [pc, #28]	; (8023820 <ip4_frag+0x22c>)
 8023802:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8023806:	4907      	ldr	r1, [pc, #28]	; (8023824 <ip4_frag+0x230>)
 8023808:	4807      	ldr	r0, [pc, #28]	; (8023828 <ip4_frag+0x234>)
 802380a:	f001 fdd3 	bl	80253b4 <iprintf>
 802380e:	f06f 0005 	mvn.w	r0, #5
 8023812:	e7dd      	b.n	80237d0 <ip4_frag+0x1dc>
 8023814:	08022f61 	.word	0x08022f61
 8023818:	08045b20 	.word	0x08045b20
 802381c:	08045b00 	.word	0x08045b00
 8023820:	080459ac 	.word	0x080459ac
 8023824:	08045ae4 	.word	0x08045ae4
 8023828:	0802a008 	.word	0x0802a008

0802382c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802382c:	8943      	ldrh	r3, [r0, #10]
 802382e:	2b0e      	cmp	r3, #14
{
 8023830:	b570      	push	{r4, r5, r6, lr}
 8023832:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8023834:	d91b      	bls.n	802386e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8023836:	7bc3      	ldrb	r3, [r0, #15]
 8023838:	460d      	mov	r5, r1
 802383a:	b91b      	cbnz	r3, 8023844 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 802383c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8023840:	3301      	adds	r3, #1
 8023842:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8023844:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8023846:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8023848:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 802384a:	07d9      	lsls	r1, r3, #31
 802384c:	d50a      	bpl.n	8023864 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802384e:	2b01      	cmp	r3, #1
 8023850:	d030      	beq.n	80238b4 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8023852:	2206      	movs	r2, #6
 8023854:	491d      	ldr	r1, [pc, #116]	; (80238cc <ethernet_input+0xa0>)
 8023856:	f000 fdd7 	bl	8024408 <memcmp>
 802385a:	b918      	cbnz	r0, 8023864 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802385c:	7b63      	ldrb	r3, [r4, #13]
 802385e:	f043 0308 	orr.w	r3, r3, #8
 8023862:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8023864:	2e08      	cmp	r6, #8
 8023866:	d016      	beq.n	8023896 <ethernet_input+0x6a>
 8023868:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 802386c:	d004      	beq.n	8023878 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 802386e:	4620      	mov	r0, r4
 8023870:	f7f7 fcd6 	bl	801b220 <pbuf_free>
  return ERR_OK;
}
 8023874:	2000      	movs	r0, #0
 8023876:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023878:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 802387c:	071b      	lsls	r3, r3, #28
 802387e:	d5f6      	bpl.n	802386e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023880:	210e      	movs	r1, #14
 8023882:	4620      	mov	r0, r4
 8023884:	f7f7 fc40 	bl	801b108 <pbuf_remove_header>
 8023888:	2800      	cmp	r0, #0
 802388a:	d1f0      	bne.n	802386e <ethernet_input+0x42>
        etharp_input(p, netif);
 802388c:	4629      	mov	r1, r5
 802388e:	4620      	mov	r0, r4
 8023890:	f7fe fd2e 	bl	80222f0 <etharp_input>
      break;
 8023894:	e7ee      	b.n	8023874 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023896:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 802389a:	071a      	lsls	r2, r3, #28
 802389c:	d5e7      	bpl.n	802386e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802389e:	210e      	movs	r1, #14
 80238a0:	4620      	mov	r0, r4
 80238a2:	f7f7 fc31 	bl	801b108 <pbuf_remove_header>
 80238a6:	2800      	cmp	r0, #0
 80238a8:	d1e1      	bne.n	802386e <ethernet_input+0x42>
        ip4_input(p, netif);
 80238aa:	4629      	mov	r1, r5
 80238ac:	4620      	mov	r0, r4
 80238ae:	f7ff f8eb 	bl	8022a88 <ip4_input>
      break;
 80238b2:	e7df      	b.n	8023874 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80238b4:	7843      	ldrb	r3, [r0, #1]
 80238b6:	2b00      	cmp	r3, #0
 80238b8:	d1d4      	bne.n	8023864 <ethernet_input+0x38>
 80238ba:	7883      	ldrb	r3, [r0, #2]
 80238bc:	2b5e      	cmp	r3, #94	; 0x5e
 80238be:	d1d1      	bne.n	8023864 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 80238c0:	7b63      	ldrb	r3, [r4, #13]
 80238c2:	f043 0310 	orr.w	r3, r3, #16
 80238c6:	7363      	strb	r3, [r4, #13]
 80238c8:	e7cc      	b.n	8023864 <ethernet_input+0x38>
 80238ca:	bf00      	nop
 80238cc:	08045b9c 	.word	0x08045b9c

080238d0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80238d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238d4:	460c      	mov	r4, r1
 80238d6:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80238d8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 80238dc:	4616      	mov	r6, r2
 80238de:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80238e0:	f7f5 fc62 	bl	80191a8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80238e4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80238e6:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80238e8:	4620      	mov	r0, r4
 80238ea:	f7f7 fbd9 	bl	801b0a0 <pbuf_add_header>
 80238ee:	b9e0      	cbnz	r0, 802392a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80238f0:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 80238f2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80238f6:	683b      	ldr	r3, [r7, #0]
 80238f8:	600b      	str	r3, [r1, #0]
 80238fa:	88bb      	ldrh	r3, [r7, #4]
 80238fc:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80238fe:	6833      	ldr	r3, [r6, #0]
 8023900:	f8c1 3006 	str.w	r3, [r1, #6]
 8023904:	88b3      	ldrh	r3, [r6, #4]
 8023906:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8023908:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 802390c:	2b06      	cmp	r3, #6
 802390e:	d006      	beq.n	802391e <ethernet_output+0x4e>
 8023910:	4b08      	ldr	r3, [pc, #32]	; (8023934 <ethernet_output+0x64>)
 8023912:	f44f 7299 	mov.w	r2, #306	; 0x132
 8023916:	4908      	ldr	r1, [pc, #32]	; (8023938 <ethernet_output+0x68>)
 8023918:	4808      	ldr	r0, [pc, #32]	; (802393c <ethernet_output+0x6c>)
 802391a:	f001 fd4b 	bl	80253b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802391e:	69ab      	ldr	r3, [r5, #24]
 8023920:	4621      	mov	r1, r4
 8023922:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8023924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8023928:	4718      	bx	r3
}
 802392a:	f06f 0001 	mvn.w	r0, #1
 802392e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023932:	bf00      	nop
 8023934:	08045b30 	.word	0x08045b30
 8023938:	08045b68 	.word	0x08045b68
 802393c:	0802a008 	.word	0x0802a008

08023940 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8023940:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8023942:	2300      	movs	r3, #0
{
 8023944:	b085      	sub	sp, #20
 8023946:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8023948:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802394a:	4619      	mov	r1, r3
{
 802394c:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802394e:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8023950:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8023954:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023958:	f7f1 fe92 	bl	8015680 <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802395c:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023960:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8023962:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8023964:	4258      	negs	r0, r3
 8023966:	b005      	add	sp, #20
 8023968:	bd30      	pop	{r4, r5, pc}
 802396a:	bf00      	nop

0802396c <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802396c:	2200      	movs	r2, #0
 802396e:	6800      	ldr	r0, [r0, #0]
{
 8023970:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8023972:	f7f1 fe99 	bl	80156a8 <osMessagePut>
 8023976:	3800      	subs	r0, #0
 8023978:	bf18      	it	ne
 802397a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 802397c:	4240      	negs	r0, r0
 802397e:	bd08      	pop	{r3, pc}

08023980 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8023980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023982:	4614      	mov	r4, r2
 8023984:	b085      	sub	sp, #20
 8023986:	4605      	mov	r5, r0
 8023988:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 802398a:	f7f1 fd3f 	bl	801540c <osKernelSysTick>
 802398e:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8023990:	b15c      	cbz	r4, 80239aa <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8023992:	4622      	mov	r2, r4
 8023994:	6829      	ldr	r1, [r5, #0]
 8023996:	a801      	add	r0, sp, #4
 8023998:	f7f1 feb2 	bl	8015700 <osMessageGet>

    if(event.status == osEventMessage)
 802399c:	9b01      	ldr	r3, [sp, #4]
 802399e:	2b10      	cmp	r3, #16
 80239a0:	d009      	beq.n	80239b6 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80239a2:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80239a6:	b005      	add	sp, #20
 80239a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 80239aa:	f04f 32ff 	mov.w	r2, #4294967295
 80239ae:	6829      	ldr	r1, [r5, #0]
 80239b0:	a801      	add	r0, sp, #4
 80239b2:	f7f1 fea5 	bl	8015700 <osMessageGet>
    *msg = (void *)event.value.v;
 80239b6:	9b02      	ldr	r3, [sp, #8]
 80239b8:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 80239ba:	f7f1 fd27 	bl	801540c <osKernelSysTick>
 80239be:	1b80      	subs	r0, r0, r6
}
 80239c0:	b005      	add	sp, #20
 80239c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080239c4 <sys_mbox_valid>:
 80239c4:	6800      	ldr	r0, [r0, #0]
 80239c6:	3800      	subs	r0, #0
 80239c8:	bf18      	it	ne
 80239ca:	2001      	movne	r0, #1
 80239cc:	4770      	bx	lr
 80239ce:	bf00      	nop

080239d0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80239d0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80239d2:	4803      	ldr	r0, [pc, #12]	; (80239e0 <sys_init+0x10>)
 80239d4:	f7f1 fd7e 	bl	80154d4 <osMutexCreate>
 80239d8:	4b02      	ldr	r3, [pc, #8]	; (80239e4 <sys_init+0x14>)
 80239da:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80239dc:	bd08      	pop	{r3, pc}
 80239de:	bf00      	nop
 80239e0:	08045bac 	.word	0x08045bac
 80239e4:	2002e474 	.word	0x2002e474

080239e8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80239e8:	b510      	push	{r4, lr}
 80239ea:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80239ec:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80239ee:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 80239f0:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 80239f2:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80239f6:	f7f1 fd6d 	bl	80154d4 <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80239fa:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 80239fe:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8023a00:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8023a02:	4258      	negs	r0, r3
 8023a04:	b002      	add	sp, #8
 8023a06:	bd10      	pop	{r4, pc}

08023a08 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8023a08:	f04f 31ff 	mov.w	r1, #4294967295
 8023a0c:	6800      	ldr	r0, [r0, #0]
 8023a0e:	f7f1 bd69 	b.w	80154e4 <osMutexWait>
 8023a12:	bf00      	nop

08023a14 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8023a14:	6800      	ldr	r0, [r0, #0]
 8023a16:	f7f1 bd91 	b.w	801553c <osMutexRelease>
 8023a1a:	bf00      	nop

08023a1c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8023a1c:	b510      	push	{r4, lr}
 8023a1e:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8023a20:	2400      	movs	r4, #0
 8023a22:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8023a26:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8023a28:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8023a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 8023a2c:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8023a2e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8023a32:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8023a36:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8023a3a:	f7f1 fcef 	bl	801541c <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8023a3e:	b008      	add	sp, #32
 8023a40:	bd10      	pop	{r4, pc}
 8023a42:	bf00      	nop

08023a44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8023a44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8023a46:	2200      	movs	r2, #0
 8023a48:	4917      	ldr	r1, [pc, #92]	; (8023aa8 <MX_USB_DEVICE_Init+0x64>)
 8023a4a:	4818      	ldr	r0, [pc, #96]	; (8023aac <MX_USB_DEVICE_Init+0x68>)
 8023a4c:	f7f1 f850 	bl	8014af0 <USBD_Init>
 8023a50:	b970      	cbnz	r0, 8023a70 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023a52:	4917      	ldr	r1, [pc, #92]	; (8023ab0 <MX_USB_DEVICE_Init+0x6c>)
 8023a54:	4815      	ldr	r0, [pc, #84]	; (8023aac <MX_USB_DEVICE_Init+0x68>)
 8023a56:	f7f1 f863 	bl	8014b20 <USBD_RegisterClass>
 8023a5a:	b988      	cbnz	r0, 8023a80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023a5c:	4915      	ldr	r1, [pc, #84]	; (8023ab4 <MX_USB_DEVICE_Init+0x70>)
 8023a5e:	4813      	ldr	r0, [pc, #76]	; (8023aac <MX_USB_DEVICE_Init+0x68>)
 8023a60:	f7f1 f810 	bl	8014a84 <USBD_CDC_RegisterInterface>
 8023a64:	b9a0      	cbnz	r0, 8023a90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8023a66:	4811      	ldr	r0, [pc, #68]	; (8023aac <MX_USB_DEVICE_Init+0x68>)
 8023a68:	f7f1 f870 	bl	8014b4c <USBD_Start>
 8023a6c:	b9b8      	cbnz	r0, 8023a9e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8023a6e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8023a70:	f7e0 fa5c 	bl	8003f2c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023a74:	490e      	ldr	r1, [pc, #56]	; (8023ab0 <MX_USB_DEVICE_Init+0x6c>)
 8023a76:	480d      	ldr	r0, [pc, #52]	; (8023aac <MX_USB_DEVICE_Init+0x68>)
 8023a78:	f7f1 f852 	bl	8014b20 <USBD_RegisterClass>
 8023a7c:	2800      	cmp	r0, #0
 8023a7e:	d0ed      	beq.n	8023a5c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8023a80:	f7e0 fa54 	bl	8003f2c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023a84:	490b      	ldr	r1, [pc, #44]	; (8023ab4 <MX_USB_DEVICE_Init+0x70>)
 8023a86:	4809      	ldr	r0, [pc, #36]	; (8023aac <MX_USB_DEVICE_Init+0x68>)
 8023a88:	f7f0 fffc 	bl	8014a84 <USBD_CDC_RegisterInterface>
 8023a8c:	2800      	cmp	r0, #0
 8023a8e:	d0ea      	beq.n	8023a66 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8023a90:	f7e0 fa4c 	bl	8003f2c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8023a94:	4805      	ldr	r0, [pc, #20]	; (8023aac <MX_USB_DEVICE_Init+0x68>)
 8023a96:	f7f1 f859 	bl	8014b4c <USBD_Start>
 8023a9a:	2800      	cmp	r0, #0
 8023a9c:	d0e7      	beq.n	8023a6e <MX_USB_DEVICE_Init+0x2a>
}
 8023a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8023aa2:	f7e0 ba43 	b.w	8003f2c <Error_Handler>
 8023aa6:	bf00      	nop
 8023aa8:	20000430 	.word	0x20000430
 8023aac:	2002e478 	.word	0x2002e478
 8023ab0:	20000300 	.word	0x20000300
 8023ab4:	2000041c 	.word	0x2000041c

08023ab8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8023ab8:	2000      	movs	r0, #0
 8023aba:	4770      	bx	lr

08023abc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8023abc:	2000      	movs	r0, #0
 8023abe:	4770      	bx	lr

08023ac0 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8023ac0:	2000      	movs	r0, #0
 8023ac2:	4770      	bx	lr

08023ac4 <CDC_Receive_FS>:
{
 8023ac4:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023ac6:	4c05      	ldr	r4, [pc, #20]	; (8023adc <CDC_Receive_FS+0x18>)
{
 8023ac8:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023aca:	4620      	mov	r0, r4
 8023acc:	f7f0 ffec 	bl	8014aa8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023ad0:	4620      	mov	r0, r4
 8023ad2:	f7f0 fff1 	bl	8014ab8 <USBD_CDC_ReceivePacket>
}
 8023ad6:	2000      	movs	r0, #0
 8023ad8:	bd10      	pop	{r4, pc}
 8023ada:	bf00      	nop
 8023adc:	2002e478 	.word	0x2002e478

08023ae0 <CDC_Init_FS>:
{
 8023ae0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8023ae2:	4c06      	ldr	r4, [pc, #24]	; (8023afc <CDC_Init_FS+0x1c>)
 8023ae4:	2200      	movs	r2, #0
 8023ae6:	4906      	ldr	r1, [pc, #24]	; (8023b00 <CDC_Init_FS+0x20>)
 8023ae8:	4620      	mov	r0, r4
 8023aea:	f7f0 ffd3 	bl	8014a94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8023aee:	4905      	ldr	r1, [pc, #20]	; (8023b04 <CDC_Init_FS+0x24>)
 8023af0:	4620      	mov	r0, r4
 8023af2:	f7f0 ffd9 	bl	8014aa8 <USBD_CDC_SetRxBuffer>
}
 8023af6:	2000      	movs	r0, #0
 8023af8:	bd10      	pop	{r4, pc}
 8023afa:	bf00      	nop
 8023afc:	2002e478 	.word	0x2002e478
 8023b00:	2002ef48 	.word	0x2002ef48
 8023b04:	2002e748 	.word	0x2002e748

08023b08 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8023b08:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8023b0a:	4801      	ldr	r0, [pc, #4]	; (8023b10 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8023b0c:	800b      	strh	r3, [r1, #0]
}
 8023b0e:	4770      	bx	lr
 8023b10:	2000045c 	.word	0x2000045c

08023b14 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8023b14:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8023b16:	4801      	ldr	r0, [pc, #4]	; (8023b1c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8023b18:	800b      	strh	r3, [r1, #0]
}
 8023b1a:	4770      	bx	lr
 8023b1c:	20000470 	.word	0x20000470

08023b20 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8023b20:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8023b22:	4801      	ldr	r0, [pc, #4]	; (8023b28 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8023b24:	800b      	strh	r3, [r1, #0]
}
 8023b26:	4770      	bx	lr
 8023b28:	20000450 	.word	0x20000450

08023b2c <USBD_FS_ManufacturerStrDescriptor>:
{
 8023b2c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8023b2e:	4c04      	ldr	r4, [pc, #16]	; (8023b40 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8023b30:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8023b32:	4804      	ldr	r0, [pc, #16]	; (8023b44 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8023b34:	4621      	mov	r1, r4
 8023b36:	f7f1 fbcd 	bl	80152d4 <USBD_GetString>
}
 8023b3a:	4620      	mov	r0, r4
 8023b3c:	bd10      	pop	{r4, pc}
 8023b3e:	bf00      	nop
 8023b40:	2002f748 	.word	0x2002f748
 8023b44:	08045bb4 	.word	0x08045bb4

08023b48 <USBD_FS_ProductStrDescriptor>:
{
 8023b48:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023b4a:	4c04      	ldr	r4, [pc, #16]	; (8023b5c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8023b4c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023b4e:	4804      	ldr	r0, [pc, #16]	; (8023b60 <USBD_FS_ProductStrDescriptor+0x18>)
 8023b50:	4621      	mov	r1, r4
 8023b52:	f7f1 fbbf 	bl	80152d4 <USBD_GetString>
}
 8023b56:	4620      	mov	r0, r4
 8023b58:	bd10      	pop	{r4, pc}
 8023b5a:	bf00      	nop
 8023b5c:	2002f748 	.word	0x2002f748
 8023b60:	08045bc8 	.word	0x08045bc8

08023b64 <USBD_FS_ConfigStrDescriptor>:
{
 8023b64:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023b66:	4c04      	ldr	r4, [pc, #16]	; (8023b78 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8023b68:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023b6a:	4804      	ldr	r0, [pc, #16]	; (8023b7c <USBD_FS_ConfigStrDescriptor+0x18>)
 8023b6c:	4621      	mov	r1, r4
 8023b6e:	f7f1 fbb1 	bl	80152d4 <USBD_GetString>
}
 8023b72:	4620      	mov	r0, r4
 8023b74:	bd10      	pop	{r4, pc}
 8023b76:	bf00      	nop
 8023b78:	2002f748 	.word	0x2002f748
 8023b7c:	08045be0 	.word	0x08045be0

08023b80 <USBD_FS_InterfaceStrDescriptor>:
{
 8023b80:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023b82:	4c04      	ldr	r4, [pc, #16]	; (8023b94 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8023b84:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023b86:	4804      	ldr	r0, [pc, #16]	; (8023b98 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8023b88:	4621      	mov	r1, r4
 8023b8a:	f7f1 fba3 	bl	80152d4 <USBD_GetString>
}
 8023b8e:	4620      	mov	r0, r4
 8023b90:	bd10      	pop	{r4, pc}
 8023b92:	bf00      	nop
 8023b94:	2002f748 	.word	0x2002f748
 8023b98:	08045bec 	.word	0x08045bec

08023b9c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8023b9c:	4b21      	ldr	r3, [pc, #132]	; (8023c24 <USBD_FS_SerialStrDescriptor+0x88>)
 8023b9e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8023ba2:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 8023ba6:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8023ba8:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 8023baa:	f04f 041a 	mov.w	r4, #26
 8023bae:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8023bb0:	d101      	bne.n	8023bb6 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8023bb2:	481d      	ldr	r0, [pc, #116]	; (8023c28 <USBD_FS_SerialStrDescriptor+0x8c>)
 8023bb4:	bd30      	pop	{r4, r5, pc}
 8023bb6:	491c      	ldr	r1, [pc, #112]	; (8023c28 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8023bb8:	f04f 0e00 	mov.w	lr, #0
 8023bbc:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8023bc0:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8023bc2:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8023bc4:	0f13      	lsrs	r3, r2, #28
 8023bc6:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8023bca:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 8023bce:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8023bd2:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023bd6:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8023bda:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 8023bde:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8023be2:	bf34      	ite	cc
 8023be4:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023be8:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8023bec:	f1be 0f10 	cmp.w	lr, #16
 8023bf0:	d1e8      	bne.n	8023bc4 <USBD_FS_SerialStrDescriptor+0x28>
 8023bf2:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8023bf4:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8023bf6:	0f03      	lsrs	r3, r0, #28
 8023bf8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8023bfc:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 8023c00:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 8023c02:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023c06:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8023c0a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8023c0e:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8023c12:	bf34      	ite	cc
 8023c14:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023c18:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8023c1a:	2a08      	cmp	r2, #8
 8023c1c:	d1eb      	bne.n	8023bf6 <USBD_FS_SerialStrDescriptor+0x5a>
}
 8023c1e:	4802      	ldr	r0, [pc, #8]	; (8023c28 <USBD_FS_SerialStrDescriptor+0x8c>)
 8023c20:	bd30      	pop	{r4, r5, pc}
 8023c22:	bf00      	nop
 8023c24:	1ff0f000 	.word	0x1ff0f000
 8023c28:	20000474 	.word	0x20000474

08023c2c <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8023c2c:	6803      	ldr	r3, [r0, #0]
{
 8023c2e:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8023c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8023c34:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023c36:	f04f 0400 	mov.w	r4, #0
 8023c3a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8023c3e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8023c42:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8023c44:	d001      	beq.n	8023c4a <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8023c46:	b009      	add	sp, #36	; 0x24
 8023c48:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c4a:	4d1e      	ldr	r5, [pc, #120]	; (8023cc4 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8023c4c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023c50:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c52:	481d      	ldr	r0, [pc, #116]	; (8023cc8 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8023c56:	f043 0301 	orr.w	r3, r3, #1
 8023c5a:	632b      	str	r3, [r5, #48]	; 0x30
 8023c5c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8023c5e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023c62:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c66:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023c68:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8023c6a:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c6c:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c6e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8023c70:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c74:	f7e7 fd72 	bl	800b75c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8023c78:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8023c7c:	a903      	add	r1, sp, #12
 8023c7e:	4812      	ldr	r0, [pc, #72]	; (8023cc8 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023c80:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023c82:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8023c86:	f7e7 fd69 	bl	800b75c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023c8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8023c8c:	4622      	mov	r2, r4
 8023c8e:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8023c94:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023c96:	636b      	str	r3, [r5, #52]	; 0x34
 8023c98:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8023c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c9e:	9301      	str	r3, [sp, #4]
 8023ca0:	9b01      	ldr	r3, [sp, #4]
 8023ca2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8023ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023ca8:	646b      	str	r3, [r5, #68]	; 0x44
 8023caa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8023cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023cb0:	9302      	str	r3, [sp, #8]
 8023cb2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8023cb4:	f7e4 fed4 	bl	8008a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8023cb8:	2043      	movs	r0, #67	; 0x43
 8023cba:	f7e4 ff1b 	bl	8008af4 <HAL_NVIC_EnableIRQ>
}
 8023cbe:	b009      	add	sp, #36	; 0x24
 8023cc0:	bd30      	pop	{r4, r5, pc}
 8023cc2:	bf00      	nop
 8023cc4:	40023800 	.word	0x40023800
 8023cc8:	40020000 	.word	0x40020000

08023ccc <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8023ccc:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8023cd0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023cd4:	f7f0 bf4c 	b.w	8014b70 <USBD_LL_SetupStage>

08023cd8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8023cd8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8023cdc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023ce0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023ce4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8023ce8:	f7f0 bf70 	b.w	8014bcc <USBD_LL_DataOutStage>

08023cec <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8023cec:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8023cf0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023cf4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023cf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023cfa:	f7f0 bf9d 	b.w	8014c38 <USBD_LL_DataInStage>
 8023cfe:	bf00      	nop

08023d00 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8023d00:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d04:	f7f1 b834 	b.w	8014d70 <USBD_LL_SOF>

08023d08 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8023d08:	68c1      	ldr	r1, [r0, #12]
{
 8023d0a:	b510      	push	{r4, lr}
 8023d0c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8023d0e:	b111      	cbz	r1, 8023d16 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8023d10:	2902      	cmp	r1, #2
 8023d12:	d10a      	bne.n	8023d2a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8023d14:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023d16:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8023d1a:	f7f1 f811 	bl	8014d40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023d1e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8023d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023d26:	f7f0 bfe3 	b.w	8014cf0 <USBD_LL_Reset>
    Error_Handler();
 8023d2a:	f7e0 f8ff 	bl	8003f2c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8023d2e:	2101      	movs	r1, #1
 8023d30:	e7f1      	b.n	8023d16 <HAL_PCD_ResetCallback+0xe>
 8023d32:	bf00      	nop

08023d34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023d34:	b510      	push	{r4, lr}
 8023d36:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8023d38:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d3c:	f7f1 f804 	bl	8014d48 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023d40:	6822      	ldr	r2, [r4, #0]
 8023d42:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023d46:	f043 0301 	orr.w	r3, r3, #1
 8023d4a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8023d4e:	6a23      	ldr	r3, [r4, #32]
 8023d50:	b123      	cbz	r3, 8023d5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023d52:	4a03      	ldr	r2, [pc, #12]	; (8023d60 <HAL_PCD_SuspendCallback+0x2c>)
 8023d54:	6913      	ldr	r3, [r2, #16]
 8023d56:	f043 0306 	orr.w	r3, r3, #6
 8023d5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8023d5c:	bd10      	pop	{r4, pc}
 8023d5e:	bf00      	nop
 8023d60:	e000ed00 	.word	0xe000ed00

08023d64 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8023d64:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d68:	f7f0 bff8 	b.w	8014d5c <USBD_LL_Resume>

08023d6c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023d6c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d70:	f7f1 b80e 	b.w	8014d90 <USBD_LL_IsoOUTIncomplete>

08023d74 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023d74:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d78:	f7f1 b808 	b.w	8014d8c <USBD_LL_IsoINIncomplete>

08023d7c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8023d7c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d80:	f7f1 b808 	b.w	8014d94 <USBD_LL_DevConnected>

08023d84 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8023d84:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d88:	f7f1 b806 	b.w	8014d98 <USBD_LL_DevDisconnected>

08023d8c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8023d8c:	7802      	ldrb	r2, [r0, #0]
 8023d8e:	b10a      	cbz	r2, 8023d94 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8023d90:	2000      	movs	r0, #0
 8023d92:	4770      	bx	lr
{
 8023d94:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8023d96:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 8023d98:	4b14      	ldr	r3, [pc, #80]	; (8023dec <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8023d9a:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8023d9c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8023da0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8023da2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 8023da4:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8023da8:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8023dac:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8023dae:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8023db0:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8023db2:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8023db4:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8023db8:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8023dbc:	2206      	movs	r2, #6
 8023dbe:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8023dc0:	f7e8 fe04 	bl	800c9cc <HAL_PCD_Init>
 8023dc4:	b978      	cbnz	r0, 8023de6 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8023dc6:	2180      	movs	r1, #128	; 0x80
 8023dc8:	4808      	ldr	r0, [pc, #32]	; (8023dec <USBD_LL_Init+0x60>)
 8023dca:	f7e9 fb69 	bl	800d4a0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8023dce:	2240      	movs	r2, #64	; 0x40
 8023dd0:	2100      	movs	r1, #0
 8023dd2:	4806      	ldr	r0, [pc, #24]	; (8023dec <USBD_LL_Init+0x60>)
 8023dd4:	f7e9 fb3a 	bl	800d44c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8023dd8:	2280      	movs	r2, #128	; 0x80
 8023dda:	2101      	movs	r1, #1
 8023ddc:	4803      	ldr	r0, [pc, #12]	; (8023dec <USBD_LL_Init+0x60>)
 8023dde:	f7e9 fb35 	bl	800d44c <HAL_PCDEx_SetTxFiFo>
}
 8023de2:	2000      	movs	r0, #0
 8023de4:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8023de6:	f7e0 f8a1 	bl	8003f2c <Error_Handler>
 8023dea:	e7ec      	b.n	8023dc6 <USBD_LL_Init+0x3a>
 8023dec:	2002f948 	.word	0x2002f948

08023df0 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8023df0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023df4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023df6:	f7e8 fe97 	bl	800cb28 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8023dfa:	2803      	cmp	r0, #3
 8023dfc:	d802      	bhi.n	8023e04 <USBD_LL_Start+0x14>
 8023dfe:	4b02      	ldr	r3, [pc, #8]	; (8023e08 <USBD_LL_Start+0x18>)
 8023e00:	5c18      	ldrb	r0, [r3, r0]
}
 8023e02:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023e04:	2003      	movs	r0, #3
}
 8023e06:	bd08      	pop	{r3, pc}
 8023e08:	08045bfc 	.word	0x08045bfc

08023e0c <USBD_LL_OpenEP>:
{
 8023e0c:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023e0e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023e12:	461a      	mov	r2, r3
 8023e14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023e16:	4663      	mov	r3, ip
 8023e18:	f7e9 f9ca 	bl	800d1b0 <HAL_PCD_EP_Open>
  switch (hal_status)
 8023e1c:	2803      	cmp	r0, #3
 8023e1e:	d802      	bhi.n	8023e26 <USBD_LL_OpenEP+0x1a>
 8023e20:	4b02      	ldr	r3, [pc, #8]	; (8023e2c <USBD_LL_OpenEP+0x20>)
 8023e22:	5c18      	ldrb	r0, [r3, r0]
}
 8023e24:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023e26:	2003      	movs	r0, #3
}
 8023e28:	bd08      	pop	{r3, pc}
 8023e2a:	bf00      	nop
 8023e2c:	08045bfc 	.word	0x08045bfc

08023e30 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023e30:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023e34:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023e36:	f7e9 f9f9 	bl	800d22c <HAL_PCD_EP_Close>
  switch (hal_status)
 8023e3a:	2803      	cmp	r0, #3
 8023e3c:	d802      	bhi.n	8023e44 <USBD_LL_CloseEP+0x14>
 8023e3e:	4b02      	ldr	r3, [pc, #8]	; (8023e48 <USBD_LL_CloseEP+0x18>)
 8023e40:	5c18      	ldrb	r0, [r3, r0]
}
 8023e42:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023e44:	2003      	movs	r0, #3
}
 8023e46:	bd08      	pop	{r3, pc}
 8023e48:	08045bfc 	.word	0x08045bfc

08023e4c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023e4c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023e50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023e52:	f7e9 fa7b 	bl	800d34c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8023e56:	2803      	cmp	r0, #3
 8023e58:	d802      	bhi.n	8023e60 <USBD_LL_StallEP+0x14>
 8023e5a:	4b02      	ldr	r3, [pc, #8]	; (8023e64 <USBD_LL_StallEP+0x18>)
 8023e5c:	5c18      	ldrb	r0, [r3, r0]
}
 8023e5e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023e60:	2003      	movs	r0, #3
}
 8023e62:	bd08      	pop	{r3, pc}
 8023e64:	08045bfc 	.word	0x08045bfc

08023e68 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023e68:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023e6c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023e6e:	f7e9 fab1 	bl	800d3d4 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8023e72:	2803      	cmp	r0, #3
 8023e74:	d802      	bhi.n	8023e7c <USBD_LL_ClearStallEP+0x14>
 8023e76:	4b02      	ldr	r3, [pc, #8]	; (8023e80 <USBD_LL_ClearStallEP+0x18>)
 8023e78:	5c18      	ldrb	r0, [r3, r0]
}
 8023e7a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023e7c:	2003      	movs	r0, #3
}
 8023e7e:	bd08      	pop	{r3, pc}
 8023e80:	08045bfc 	.word	0x08045bfc

08023e84 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8023e84:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023e86:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8023e8a:	d406      	bmi.n	8023e9a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023e8c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8023e90:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8023e94:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8023e98:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023e9a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8023e9e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8023ea2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8023ea6:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8023eaa:	4770      	bx	lr

08023eac <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023eac:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023eb0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023eb2:	f7e9 f967 	bl	800d184 <HAL_PCD_SetAddress>
  switch (hal_status)
 8023eb6:	2803      	cmp	r0, #3
 8023eb8:	d802      	bhi.n	8023ec0 <USBD_LL_SetUSBAddress+0x14>
 8023eba:	4b02      	ldr	r3, [pc, #8]	; (8023ec4 <USBD_LL_SetUSBAddress+0x18>)
 8023ebc:	5c18      	ldrb	r0, [r3, r0]
}
 8023ebe:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023ec0:	2003      	movs	r0, #3
}
 8023ec2:	bd08      	pop	{r3, pc}
 8023ec4:	08045bfc 	.word	0x08045bfc

08023ec8 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023ec8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023ecc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023ece:	f7e9 fa15 	bl	800d2fc <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8023ed2:	2803      	cmp	r0, #3
 8023ed4:	d802      	bhi.n	8023edc <USBD_LL_Transmit+0x14>
 8023ed6:	4b02      	ldr	r3, [pc, #8]	; (8023ee0 <USBD_LL_Transmit+0x18>)
 8023ed8:	5c18      	ldrb	r0, [r3, r0]
}
 8023eda:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023edc:	2003      	movs	r0, #3
}
 8023ede:	bd08      	pop	{r3, pc}
 8023ee0:	08045bfc 	.word	0x08045bfc

08023ee4 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023ee4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023ee8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023eea:	f7e9 f9d5 	bl	800d298 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8023eee:	2803      	cmp	r0, #3
 8023ef0:	d802      	bhi.n	8023ef8 <USBD_LL_PrepareReceive+0x14>
 8023ef2:	4b02      	ldr	r3, [pc, #8]	; (8023efc <USBD_LL_PrepareReceive+0x18>)
 8023ef4:	5c18      	ldrb	r0, [r3, r0]
}
 8023ef6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023ef8:	2003      	movs	r0, #3
}
 8023efa:	bd08      	pop	{r3, pc}
 8023efc:	08045bfc 	.word	0x08045bfc

08023f00 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023f00:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8023f04:	f7e9 b9f0 	b.w	800d2e8 <HAL_PCD_EP_GetRxCount>

08023f08 <HAL_PCDEx_LPM_Callback>:
{
 8023f08:	b510      	push	{r4, lr}
 8023f0a:	4604      	mov	r4, r0
  switch (msg)
 8023f0c:	b1a1      	cbz	r1, 8023f38 <HAL_PCDEx_LPM_Callback+0x30>
 8023f0e:	2901      	cmp	r1, #1
 8023f10:	d111      	bne.n	8023f36 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023f12:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8023f14:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023f18:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023f1c:	f043 0301 	orr.w	r3, r3, #1
 8023f20:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8023f24:	f7f0 ff10 	bl	8014d48 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8023f28:	6a23      	ldr	r3, [r4, #32]
 8023f2a:	b123      	cbz	r3, 8023f36 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023f2c:	4a0e      	ldr	r2, [pc, #56]	; (8023f68 <HAL_PCDEx_LPM_Callback+0x60>)
 8023f2e:	6913      	ldr	r3, [r2, #16]
 8023f30:	f043 0306 	orr.w	r3, r3, #6
 8023f34:	6113      	str	r3, [r2, #16]
}
 8023f36:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8023f38:	6a03      	ldr	r3, [r0, #32]
 8023f3a:	b963      	cbnz	r3, 8023f56 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023f3c:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8023f3e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023f42:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023f46:	f023 0301 	bic.w	r3, r3, #1
}
 8023f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023f4e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8023f52:	f7f0 bf03 	b.w	8014d5c <USBD_LL_Resume>
  SystemClock_Config();
 8023f56:	f7df fff1 	bl	8003f3c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023f5a:	4a03      	ldr	r2, [pc, #12]	; (8023f68 <HAL_PCDEx_LPM_Callback+0x60>)
 8023f5c:	6913      	ldr	r3, [r2, #16]
 8023f5e:	f023 0306 	bic.w	r3, r3, #6
 8023f62:	6113      	str	r3, [r2, #16]
 8023f64:	e7ea      	b.n	8023f3c <HAL_PCDEx_LPM_Callback+0x34>
 8023f66:	bf00      	nop
 8023f68:	e000ed00 	.word	0xe000ed00

08023f6c <atoi>:
 8023f6c:	220a      	movs	r2, #10
 8023f6e:	2100      	movs	r1, #0
 8023f70:	f002 ba8c 	b.w	802648c <strtol>

08023f74 <ctime>:
 8023f74:	b508      	push	{r3, lr}
 8023f76:	f000 f91f 	bl	80241b8 <localtime>
 8023f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8023f7e:	f002 be1f 	b.w	8026bc0 <asctime>
 8023f82:	Address 0x0000000008023f82 is out of bounds.


08023f84 <std>:
 8023f84:	2300      	movs	r3, #0
 8023f86:	b510      	push	{r4, lr}
 8023f88:	4604      	mov	r4, r0
 8023f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8023f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023f92:	6083      	str	r3, [r0, #8]
 8023f94:	8181      	strh	r1, [r0, #12]
 8023f96:	6643      	str	r3, [r0, #100]	; 0x64
 8023f98:	81c2      	strh	r2, [r0, #14]
 8023f9a:	6183      	str	r3, [r0, #24]
 8023f9c:	4619      	mov	r1, r3
 8023f9e:	2208      	movs	r2, #8
 8023fa0:	305c      	adds	r0, #92	; 0x5c
 8023fa2:	f000 fa69 	bl	8024478 <memset>
 8023fa6:	4b05      	ldr	r3, [pc, #20]	; (8023fbc <std+0x38>)
 8023fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8023faa:	4b05      	ldr	r3, [pc, #20]	; (8023fc0 <std+0x3c>)
 8023fac:	62a3      	str	r3, [r4, #40]	; 0x28
 8023fae:	4b05      	ldr	r3, [pc, #20]	; (8023fc4 <std+0x40>)
 8023fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023fb2:	4b05      	ldr	r3, [pc, #20]	; (8023fc8 <std+0x44>)
 8023fb4:	6224      	str	r4, [r4, #32]
 8023fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8023fb8:	bd10      	pop	{r4, pc}
 8023fba:	bf00      	nop
 8023fbc:	08025821 	.word	0x08025821
 8023fc0:	08025847 	.word	0x08025847
 8023fc4:	0802587f 	.word	0x0802587f
 8023fc8:	080258a3 	.word	0x080258a3

08023fcc <_cleanup_r>:
 8023fcc:	4901      	ldr	r1, [pc, #4]	; (8023fd4 <_cleanup_r+0x8>)
 8023fce:	f000 b8af 	b.w	8024130 <_fwalk_reent>
 8023fd2:	bf00      	nop
 8023fd4:	080279e5 	.word	0x080279e5

08023fd8 <__sfmoreglue>:
 8023fd8:	b570      	push	{r4, r5, r6, lr}
 8023fda:	2268      	movs	r2, #104	; 0x68
 8023fdc:	1e4d      	subs	r5, r1, #1
 8023fde:	4355      	muls	r5, r2
 8023fe0:	460e      	mov	r6, r1
 8023fe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023fe6:	f000 fd2d 	bl	8024a44 <_malloc_r>
 8023fea:	4604      	mov	r4, r0
 8023fec:	b140      	cbz	r0, 8024000 <__sfmoreglue+0x28>
 8023fee:	2100      	movs	r1, #0
 8023ff0:	e9c0 1600 	strd	r1, r6, [r0]
 8023ff4:	300c      	adds	r0, #12
 8023ff6:	60a0      	str	r0, [r4, #8]
 8023ff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023ffc:	f000 fa3c 	bl	8024478 <memset>
 8024000:	4620      	mov	r0, r4
 8024002:	bd70      	pop	{r4, r5, r6, pc}

08024004 <__sfp_lock_acquire>:
 8024004:	4801      	ldr	r0, [pc, #4]	; (802400c <__sfp_lock_acquire+0x8>)
 8024006:	f000 b9eb 	b.w	80243e0 <__retarget_lock_acquire_recursive>
 802400a:	bf00      	nop
 802400c:	2002fd4e 	.word	0x2002fd4e

08024010 <__sfp_lock_release>:
 8024010:	4801      	ldr	r0, [pc, #4]	; (8024018 <__sfp_lock_release+0x8>)
 8024012:	f000 b9e7 	b.w	80243e4 <__retarget_lock_release_recursive>
 8024016:	bf00      	nop
 8024018:	2002fd4e 	.word	0x2002fd4e

0802401c <__sinit_lock_acquire>:
 802401c:	4801      	ldr	r0, [pc, #4]	; (8024024 <__sinit_lock_acquire+0x8>)
 802401e:	f000 b9df 	b.w	80243e0 <__retarget_lock_acquire_recursive>
 8024022:	bf00      	nop
 8024024:	2002fd4f 	.word	0x2002fd4f

08024028 <__sinit_lock_release>:
 8024028:	4801      	ldr	r0, [pc, #4]	; (8024030 <__sinit_lock_release+0x8>)
 802402a:	f000 b9db 	b.w	80243e4 <__retarget_lock_release_recursive>
 802402e:	bf00      	nop
 8024030:	2002fd4f 	.word	0x2002fd4f

08024034 <__sinit>:
 8024034:	b510      	push	{r4, lr}
 8024036:	4604      	mov	r4, r0
 8024038:	f7ff fff0 	bl	802401c <__sinit_lock_acquire>
 802403c:	69a3      	ldr	r3, [r4, #24]
 802403e:	b11b      	cbz	r3, 8024048 <__sinit+0x14>
 8024040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024044:	f7ff bff0 	b.w	8024028 <__sinit_lock_release>
 8024048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802404c:	6523      	str	r3, [r4, #80]	; 0x50
 802404e:	4b13      	ldr	r3, [pc, #76]	; (802409c <__sinit+0x68>)
 8024050:	4a13      	ldr	r2, [pc, #76]	; (80240a0 <__sinit+0x6c>)
 8024052:	681b      	ldr	r3, [r3, #0]
 8024054:	62a2      	str	r2, [r4, #40]	; 0x28
 8024056:	42a3      	cmp	r3, r4
 8024058:	bf04      	itt	eq
 802405a:	2301      	moveq	r3, #1
 802405c:	61a3      	streq	r3, [r4, #24]
 802405e:	4620      	mov	r0, r4
 8024060:	f000 f820 	bl	80240a4 <__sfp>
 8024064:	6060      	str	r0, [r4, #4]
 8024066:	4620      	mov	r0, r4
 8024068:	f000 f81c 	bl	80240a4 <__sfp>
 802406c:	60a0      	str	r0, [r4, #8]
 802406e:	4620      	mov	r0, r4
 8024070:	f000 f818 	bl	80240a4 <__sfp>
 8024074:	2200      	movs	r2, #0
 8024076:	60e0      	str	r0, [r4, #12]
 8024078:	2104      	movs	r1, #4
 802407a:	6860      	ldr	r0, [r4, #4]
 802407c:	f7ff ff82 	bl	8023f84 <std>
 8024080:	68a0      	ldr	r0, [r4, #8]
 8024082:	2201      	movs	r2, #1
 8024084:	2109      	movs	r1, #9
 8024086:	f7ff ff7d 	bl	8023f84 <std>
 802408a:	68e0      	ldr	r0, [r4, #12]
 802408c:	2202      	movs	r2, #2
 802408e:	2112      	movs	r1, #18
 8024090:	f7ff ff78 	bl	8023f84 <std>
 8024094:	2301      	movs	r3, #1
 8024096:	61a3      	str	r3, [r4, #24]
 8024098:	e7d2      	b.n	8024040 <__sinit+0xc>
 802409a:	bf00      	nop
 802409c:	08045d64 	.word	0x08045d64
 80240a0:	08023fcd 	.word	0x08023fcd

080240a4 <__sfp>:
 80240a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240a6:	4607      	mov	r7, r0
 80240a8:	f7ff ffac 	bl	8024004 <__sfp_lock_acquire>
 80240ac:	4b1e      	ldr	r3, [pc, #120]	; (8024128 <__sfp+0x84>)
 80240ae:	681e      	ldr	r6, [r3, #0]
 80240b0:	69b3      	ldr	r3, [r6, #24]
 80240b2:	b913      	cbnz	r3, 80240ba <__sfp+0x16>
 80240b4:	4630      	mov	r0, r6
 80240b6:	f7ff ffbd 	bl	8024034 <__sinit>
 80240ba:	3648      	adds	r6, #72	; 0x48
 80240bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80240c0:	3b01      	subs	r3, #1
 80240c2:	d503      	bpl.n	80240cc <__sfp+0x28>
 80240c4:	6833      	ldr	r3, [r6, #0]
 80240c6:	b30b      	cbz	r3, 802410c <__sfp+0x68>
 80240c8:	6836      	ldr	r6, [r6, #0]
 80240ca:	e7f7      	b.n	80240bc <__sfp+0x18>
 80240cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80240d0:	b9d5      	cbnz	r5, 8024108 <__sfp+0x64>
 80240d2:	4b16      	ldr	r3, [pc, #88]	; (802412c <__sfp+0x88>)
 80240d4:	60e3      	str	r3, [r4, #12]
 80240d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80240da:	6665      	str	r5, [r4, #100]	; 0x64
 80240dc:	f000 f97e 	bl	80243dc <__retarget_lock_init_recursive>
 80240e0:	f7ff ff96 	bl	8024010 <__sfp_lock_release>
 80240e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80240e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80240ec:	6025      	str	r5, [r4, #0]
 80240ee:	61a5      	str	r5, [r4, #24]
 80240f0:	2208      	movs	r2, #8
 80240f2:	4629      	mov	r1, r5
 80240f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80240f8:	f000 f9be 	bl	8024478 <memset>
 80240fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024104:	4620      	mov	r0, r4
 8024106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024108:	3468      	adds	r4, #104	; 0x68
 802410a:	e7d9      	b.n	80240c0 <__sfp+0x1c>
 802410c:	2104      	movs	r1, #4
 802410e:	4638      	mov	r0, r7
 8024110:	f7ff ff62 	bl	8023fd8 <__sfmoreglue>
 8024114:	4604      	mov	r4, r0
 8024116:	6030      	str	r0, [r6, #0]
 8024118:	2800      	cmp	r0, #0
 802411a:	d1d5      	bne.n	80240c8 <__sfp+0x24>
 802411c:	f7ff ff78 	bl	8024010 <__sfp_lock_release>
 8024120:	230c      	movs	r3, #12
 8024122:	603b      	str	r3, [r7, #0]
 8024124:	e7ee      	b.n	8024104 <__sfp+0x60>
 8024126:	bf00      	nop
 8024128:	08045d64 	.word	0x08045d64
 802412c:	ffff0001 	.word	0xffff0001

08024130 <_fwalk_reent>:
 8024130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024134:	4606      	mov	r6, r0
 8024136:	4688      	mov	r8, r1
 8024138:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802413c:	2700      	movs	r7, #0
 802413e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024142:	f1b9 0901 	subs.w	r9, r9, #1
 8024146:	d505      	bpl.n	8024154 <_fwalk_reent+0x24>
 8024148:	6824      	ldr	r4, [r4, #0]
 802414a:	2c00      	cmp	r4, #0
 802414c:	d1f7      	bne.n	802413e <_fwalk_reent+0xe>
 802414e:	4638      	mov	r0, r7
 8024150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024154:	89ab      	ldrh	r3, [r5, #12]
 8024156:	2b01      	cmp	r3, #1
 8024158:	d907      	bls.n	802416a <_fwalk_reent+0x3a>
 802415a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802415e:	3301      	adds	r3, #1
 8024160:	d003      	beq.n	802416a <_fwalk_reent+0x3a>
 8024162:	4629      	mov	r1, r5
 8024164:	4630      	mov	r0, r6
 8024166:	47c0      	blx	r8
 8024168:	4307      	orrs	r7, r0
 802416a:	3568      	adds	r5, #104	; 0x68
 802416c:	e7e9      	b.n	8024142 <_fwalk_reent+0x12>
 802416e:	Address 0x000000000802416e is out of bounds.


08024170 <__libc_init_array>:
 8024170:	b570      	push	{r4, r5, r6, lr}
 8024172:	4d0d      	ldr	r5, [pc, #52]	; (80241a8 <__libc_init_array+0x38>)
 8024174:	4c0d      	ldr	r4, [pc, #52]	; (80241ac <__libc_init_array+0x3c>)
 8024176:	1b64      	subs	r4, r4, r5
 8024178:	10a4      	asrs	r4, r4, #2
 802417a:	2600      	movs	r6, #0
 802417c:	42a6      	cmp	r6, r4
 802417e:	d109      	bne.n	8024194 <__libc_init_array+0x24>
 8024180:	4d0b      	ldr	r5, [pc, #44]	; (80241b0 <__libc_init_array+0x40>)
 8024182:	4c0c      	ldr	r4, [pc, #48]	; (80241b4 <__libc_init_array+0x44>)
 8024184:	f005 f938 	bl	80293f8 <_init>
 8024188:	1b64      	subs	r4, r4, r5
 802418a:	10a4      	asrs	r4, r4, #2
 802418c:	2600      	movs	r6, #0
 802418e:	42a6      	cmp	r6, r4
 8024190:	d105      	bne.n	802419e <__libc_init_array+0x2e>
 8024192:	bd70      	pop	{r4, r5, r6, pc}
 8024194:	f855 3b04 	ldr.w	r3, [r5], #4
 8024198:	4798      	blx	r3
 802419a:	3601      	adds	r6, #1
 802419c:	e7ee      	b.n	802417c <__libc_init_array+0xc>
 802419e:	f855 3b04 	ldr.w	r3, [r5], #4
 80241a2:	4798      	blx	r3
 80241a4:	3601      	adds	r6, #1
 80241a6:	e7f2      	b.n	802418e <__libc_init_array+0x1e>
 80241a8:	080464ec 	.word	0x080464ec
 80241ac:	080464ec 	.word	0x080464ec
 80241b0:	080464ec 	.word	0x080464ec
 80241b4:	080464f0 	.word	0x080464f0

080241b8 <localtime>:
 80241b8:	b538      	push	{r3, r4, r5, lr}
 80241ba:	4b0b      	ldr	r3, [pc, #44]	; (80241e8 <localtime+0x30>)
 80241bc:	681d      	ldr	r5, [r3, #0]
 80241be:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80241c0:	4604      	mov	r4, r0
 80241c2:	b953      	cbnz	r3, 80241da <localtime+0x22>
 80241c4:	2024      	movs	r0, #36	; 0x24
 80241c6:	f000 f90f 	bl	80243e8 <malloc>
 80241ca:	4602      	mov	r2, r0
 80241cc:	63e8      	str	r0, [r5, #60]	; 0x3c
 80241ce:	b920      	cbnz	r0, 80241da <localtime+0x22>
 80241d0:	4b06      	ldr	r3, [pc, #24]	; (80241ec <localtime+0x34>)
 80241d2:	4807      	ldr	r0, [pc, #28]	; (80241f0 <localtime+0x38>)
 80241d4:	2132      	movs	r1, #50	; 0x32
 80241d6:	f002 fd3b 	bl	8026c50 <__assert_func>
 80241da:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80241dc:	4620      	mov	r0, r4
 80241de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80241e2:	f000 b807 	b.w	80241f4 <localtime_r>
 80241e6:	bf00      	nop
 80241e8:	20000490 	.word	0x20000490
 80241ec:	08045d68 	.word	0x08045d68
 80241f0:	08045d7f 	.word	0x08045d7f

080241f4 <localtime_r>:
 80241f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80241f8:	4680      	mov	r8, r0
 80241fa:	9101      	str	r1, [sp, #4]
 80241fc:	f003 fc84 	bl	8027b08 <__gettzinfo>
 8024200:	9901      	ldr	r1, [sp, #4]
 8024202:	4605      	mov	r5, r0
 8024204:	4640      	mov	r0, r8
 8024206:	f003 fc83 	bl	8027b10 <gmtime_r>
 802420a:	6943      	ldr	r3, [r0, #20]
 802420c:	0799      	lsls	r1, r3, #30
 802420e:	4604      	mov	r4, r0
 8024210:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8024214:	d105      	bne.n	8024222 <localtime_r+0x2e>
 8024216:	2264      	movs	r2, #100	; 0x64
 8024218:	fb97 f3f2 	sdiv	r3, r7, r2
 802421c:	fb02 7313 	mls	r3, r2, r3, r7
 8024220:	bb73      	cbnz	r3, 8024280 <localtime_r+0x8c>
 8024222:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8024226:	fb97 f6f3 	sdiv	r6, r7, r3
 802422a:	fb03 7616 	mls	r6, r3, r6, r7
 802422e:	fab6 f386 	clz	r3, r6
 8024232:	095b      	lsrs	r3, r3, #5
 8024234:	4e67      	ldr	r6, [pc, #412]	; (80243d4 <localtime_r+0x1e0>)
 8024236:	2230      	movs	r2, #48	; 0x30
 8024238:	fb02 6603 	mla	r6, r2, r3, r6
 802423c:	f002 fa58 	bl	80266f0 <__tz_lock>
 8024240:	f002 fa62 	bl	8026708 <_tzset_unlocked>
 8024244:	4b64      	ldr	r3, [pc, #400]	; (80243d8 <localtime_r+0x1e4>)
 8024246:	681b      	ldr	r3, [r3, #0]
 8024248:	b34b      	cbz	r3, 802429e <localtime_r+0xaa>
 802424a:	686b      	ldr	r3, [r5, #4]
 802424c:	42bb      	cmp	r3, r7
 802424e:	d119      	bne.n	8024284 <localtime_r+0x90>
 8024250:	682f      	ldr	r7, [r5, #0]
 8024252:	e9d8 2300 	ldrd	r2, r3, [r8]
 8024256:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802425a:	b9df      	cbnz	r7, 8024294 <localtime_r+0xa0>
 802425c:	4282      	cmp	r2, r0
 802425e:	eb73 0101 	sbcs.w	r1, r3, r1
 8024262:	da23      	bge.n	80242ac <localtime_r+0xb8>
 8024264:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8024268:	4282      	cmp	r2, r0
 802426a:	eb73 0701 	sbcs.w	r7, r3, r1
 802426e:	bfb4      	ite	lt
 8024270:	2701      	movlt	r7, #1
 8024272:	2700      	movge	r7, #0
 8024274:	4282      	cmp	r2, r0
 8024276:	418b      	sbcs	r3, r1
 8024278:	6227      	str	r7, [r4, #32]
 802427a:	db19      	blt.n	80242b0 <localtime_r+0xbc>
 802427c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802427e:	e018      	b.n	80242b2 <localtime_r+0xbe>
 8024280:	2301      	movs	r3, #1
 8024282:	e7d7      	b.n	8024234 <localtime_r+0x40>
 8024284:	4638      	mov	r0, r7
 8024286:	f002 f989 	bl	802659c <__tzcalc_limits>
 802428a:	2800      	cmp	r0, #0
 802428c:	d1e0      	bne.n	8024250 <localtime_r+0x5c>
 802428e:	f04f 33ff 	mov.w	r3, #4294967295
 8024292:	e004      	b.n	802429e <localtime_r+0xaa>
 8024294:	4282      	cmp	r2, r0
 8024296:	eb73 0101 	sbcs.w	r1, r3, r1
 802429a:	da02      	bge.n	80242a2 <localtime_r+0xae>
 802429c:	2300      	movs	r3, #0
 802429e:	6223      	str	r3, [r4, #32]
 80242a0:	e7ec      	b.n	802427c <localtime_r+0x88>
 80242a2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80242a6:	4282      	cmp	r2, r0
 80242a8:	418b      	sbcs	r3, r1
 80242aa:	daf7      	bge.n	802429c <localtime_r+0xa8>
 80242ac:	2301      	movs	r3, #1
 80242ae:	6223      	str	r3, [r4, #32]
 80242b0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80242b2:	6861      	ldr	r1, [r4, #4]
 80242b4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80242b8:	203c      	movs	r0, #60	; 0x3c
 80242ba:	fb93 f5f2 	sdiv	r5, r3, r2
 80242be:	fb02 3315 	mls	r3, r2, r5, r3
 80242c2:	fb93 f2f0 	sdiv	r2, r3, r0
 80242c6:	fb00 3012 	mls	r0, r0, r2, r3
 80242ca:	6823      	ldr	r3, [r4, #0]
 80242cc:	1a89      	subs	r1, r1, r2
 80242ce:	68a2      	ldr	r2, [r4, #8]
 80242d0:	6061      	str	r1, [r4, #4]
 80242d2:	1a1b      	subs	r3, r3, r0
 80242d4:	1b52      	subs	r2, r2, r5
 80242d6:	2b3b      	cmp	r3, #59	; 0x3b
 80242d8:	6023      	str	r3, [r4, #0]
 80242da:	60a2      	str	r2, [r4, #8]
 80242dc:	dd35      	ble.n	802434a <localtime_r+0x156>
 80242de:	3101      	adds	r1, #1
 80242e0:	6061      	str	r1, [r4, #4]
 80242e2:	3b3c      	subs	r3, #60	; 0x3c
 80242e4:	6023      	str	r3, [r4, #0]
 80242e6:	6863      	ldr	r3, [r4, #4]
 80242e8:	2b3b      	cmp	r3, #59	; 0x3b
 80242ea:	dd34      	ble.n	8024356 <localtime_r+0x162>
 80242ec:	3201      	adds	r2, #1
 80242ee:	60a2      	str	r2, [r4, #8]
 80242f0:	3b3c      	subs	r3, #60	; 0x3c
 80242f2:	6063      	str	r3, [r4, #4]
 80242f4:	68a3      	ldr	r3, [r4, #8]
 80242f6:	2b17      	cmp	r3, #23
 80242f8:	dd33      	ble.n	8024362 <localtime_r+0x16e>
 80242fa:	69e2      	ldr	r2, [r4, #28]
 80242fc:	3201      	adds	r2, #1
 80242fe:	61e2      	str	r2, [r4, #28]
 8024300:	69a2      	ldr	r2, [r4, #24]
 8024302:	3201      	adds	r2, #1
 8024304:	2a06      	cmp	r2, #6
 8024306:	bfc8      	it	gt
 8024308:	2200      	movgt	r2, #0
 802430a:	61a2      	str	r2, [r4, #24]
 802430c:	68e2      	ldr	r2, [r4, #12]
 802430e:	3b18      	subs	r3, #24
 8024310:	3201      	adds	r2, #1
 8024312:	60a3      	str	r3, [r4, #8]
 8024314:	6923      	ldr	r3, [r4, #16]
 8024316:	60e2      	str	r2, [r4, #12]
 8024318:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802431c:	428a      	cmp	r2, r1
 802431e:	dd0e      	ble.n	802433e <localtime_r+0x14a>
 8024320:	2b0b      	cmp	r3, #11
 8024322:	eba2 0201 	sub.w	r2, r2, r1
 8024326:	60e2      	str	r2, [r4, #12]
 8024328:	f103 0201 	add.w	r2, r3, #1
 802432c:	bf09      	itett	eq
 802432e:	6963      	ldreq	r3, [r4, #20]
 8024330:	6122      	strne	r2, [r4, #16]
 8024332:	2200      	moveq	r2, #0
 8024334:	3301      	addeq	r3, #1
 8024336:	bf02      	ittt	eq
 8024338:	6122      	streq	r2, [r4, #16]
 802433a:	6163      	streq	r3, [r4, #20]
 802433c:	61e2      	streq	r2, [r4, #28]
 802433e:	f002 f9dd 	bl	80266fc <__tz_unlock>
 8024342:	4620      	mov	r0, r4
 8024344:	b002      	add	sp, #8
 8024346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802434a:	2b00      	cmp	r3, #0
 802434c:	dacb      	bge.n	80242e6 <localtime_r+0xf2>
 802434e:	3901      	subs	r1, #1
 8024350:	6061      	str	r1, [r4, #4]
 8024352:	333c      	adds	r3, #60	; 0x3c
 8024354:	e7c6      	b.n	80242e4 <localtime_r+0xf0>
 8024356:	2b00      	cmp	r3, #0
 8024358:	dacc      	bge.n	80242f4 <localtime_r+0x100>
 802435a:	3a01      	subs	r2, #1
 802435c:	60a2      	str	r2, [r4, #8]
 802435e:	333c      	adds	r3, #60	; 0x3c
 8024360:	e7c7      	b.n	80242f2 <localtime_r+0xfe>
 8024362:	2b00      	cmp	r3, #0
 8024364:	daeb      	bge.n	802433e <localtime_r+0x14a>
 8024366:	69e2      	ldr	r2, [r4, #28]
 8024368:	3a01      	subs	r2, #1
 802436a:	61e2      	str	r2, [r4, #28]
 802436c:	69a2      	ldr	r2, [r4, #24]
 802436e:	3a01      	subs	r2, #1
 8024370:	bf48      	it	mi
 8024372:	2206      	movmi	r2, #6
 8024374:	61a2      	str	r2, [r4, #24]
 8024376:	68e2      	ldr	r2, [r4, #12]
 8024378:	3318      	adds	r3, #24
 802437a:	3a01      	subs	r2, #1
 802437c:	60e2      	str	r2, [r4, #12]
 802437e:	60a3      	str	r3, [r4, #8]
 8024380:	2a00      	cmp	r2, #0
 8024382:	d1dc      	bne.n	802433e <localtime_r+0x14a>
 8024384:	6923      	ldr	r3, [r4, #16]
 8024386:	3b01      	subs	r3, #1
 8024388:	d405      	bmi.n	8024396 <localtime_r+0x1a2>
 802438a:	6123      	str	r3, [r4, #16]
 802438c:	6923      	ldr	r3, [r4, #16]
 802438e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024392:	60e3      	str	r3, [r4, #12]
 8024394:	e7d3      	b.n	802433e <localtime_r+0x14a>
 8024396:	230b      	movs	r3, #11
 8024398:	6123      	str	r3, [r4, #16]
 802439a:	6963      	ldr	r3, [r4, #20]
 802439c:	1e5a      	subs	r2, r3, #1
 802439e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80243a2:	6162      	str	r2, [r4, #20]
 80243a4:	079a      	lsls	r2, r3, #30
 80243a6:	d105      	bne.n	80243b4 <localtime_r+0x1c0>
 80243a8:	2164      	movs	r1, #100	; 0x64
 80243aa:	fb93 f2f1 	sdiv	r2, r3, r1
 80243ae:	fb01 3212 	mls	r2, r1, r2, r3
 80243b2:	b962      	cbnz	r2, 80243ce <localtime_r+0x1da>
 80243b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80243b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80243bc:	fb02 3311 	mls	r3, r2, r1, r3
 80243c0:	fab3 f383 	clz	r3, r3
 80243c4:	095b      	lsrs	r3, r3, #5
 80243c6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80243ca:	61e3      	str	r3, [r4, #28]
 80243cc:	e7de      	b.n	802438c <localtime_r+0x198>
 80243ce:	2301      	movs	r3, #1
 80243d0:	e7f9      	b.n	80243c6 <localtime_r+0x1d2>
 80243d2:	bf00      	nop
 80243d4:	08045e3c 	.word	0x08045e3c
 80243d8:	2002fd7c 	.word	0x2002fd7c

080243dc <__retarget_lock_init_recursive>:
 80243dc:	4770      	bx	lr

080243de <__retarget_lock_acquire>:
 80243de:	4770      	bx	lr

080243e0 <__retarget_lock_acquire_recursive>:
 80243e0:	4770      	bx	lr

080243e2 <__retarget_lock_release>:
 80243e2:	4770      	bx	lr

080243e4 <__retarget_lock_release_recursive>:
 80243e4:	4770      	bx	lr
 80243e6:	Address 0x00000000080243e6 is out of bounds.


080243e8 <malloc>:
 80243e8:	4b02      	ldr	r3, [pc, #8]	; (80243f4 <malloc+0xc>)
 80243ea:	4601      	mov	r1, r0
 80243ec:	6818      	ldr	r0, [r3, #0]
 80243ee:	f000 bb29 	b.w	8024a44 <_malloc_r>
 80243f2:	bf00      	nop
 80243f4:	20000490 	.word	0x20000490

080243f8 <free>:
 80243f8:	4b02      	ldr	r3, [pc, #8]	; (8024404 <free+0xc>)
 80243fa:	4601      	mov	r1, r0
 80243fc:	6818      	ldr	r0, [r3, #0]
 80243fe:	f000 bab5 	b.w	802496c <_free_r>
 8024402:	bf00      	nop
 8024404:	20000490 	.word	0x20000490

08024408 <memcmp>:
 8024408:	b510      	push	{r4, lr}
 802440a:	3901      	subs	r1, #1
 802440c:	4402      	add	r2, r0
 802440e:	4290      	cmp	r0, r2
 8024410:	d101      	bne.n	8024416 <memcmp+0xe>
 8024412:	2000      	movs	r0, #0
 8024414:	e005      	b.n	8024422 <memcmp+0x1a>
 8024416:	7803      	ldrb	r3, [r0, #0]
 8024418:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802441c:	42a3      	cmp	r3, r4
 802441e:	d001      	beq.n	8024424 <memcmp+0x1c>
 8024420:	1b18      	subs	r0, r3, r4
 8024422:	bd10      	pop	{r4, pc}
 8024424:	3001      	adds	r0, #1
 8024426:	e7f2      	b.n	802440e <memcmp+0x6>

08024428 <memcpy>:
 8024428:	440a      	add	r2, r1
 802442a:	4291      	cmp	r1, r2
 802442c:	f100 33ff 	add.w	r3, r0, #4294967295
 8024430:	d100      	bne.n	8024434 <memcpy+0xc>
 8024432:	4770      	bx	lr
 8024434:	b510      	push	{r4, lr}
 8024436:	f811 4b01 	ldrb.w	r4, [r1], #1
 802443a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802443e:	4291      	cmp	r1, r2
 8024440:	d1f9      	bne.n	8024436 <memcpy+0xe>
 8024442:	bd10      	pop	{r4, pc}

08024444 <memmove>:
 8024444:	4288      	cmp	r0, r1
 8024446:	b510      	push	{r4, lr}
 8024448:	eb01 0402 	add.w	r4, r1, r2
 802444c:	d902      	bls.n	8024454 <memmove+0x10>
 802444e:	4284      	cmp	r4, r0
 8024450:	4623      	mov	r3, r4
 8024452:	d807      	bhi.n	8024464 <memmove+0x20>
 8024454:	1e43      	subs	r3, r0, #1
 8024456:	42a1      	cmp	r1, r4
 8024458:	d008      	beq.n	802446c <memmove+0x28>
 802445a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802445e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024462:	e7f8      	b.n	8024456 <memmove+0x12>
 8024464:	4402      	add	r2, r0
 8024466:	4601      	mov	r1, r0
 8024468:	428a      	cmp	r2, r1
 802446a:	d100      	bne.n	802446e <memmove+0x2a>
 802446c:	bd10      	pop	{r4, pc}
 802446e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024476:	e7f7      	b.n	8024468 <memmove+0x24>

08024478 <memset>:
 8024478:	4402      	add	r2, r0
 802447a:	4603      	mov	r3, r0
 802447c:	4293      	cmp	r3, r2
 802447e:	d100      	bne.n	8024482 <memset+0xa>
 8024480:	4770      	bx	lr
 8024482:	f803 1b01 	strb.w	r1, [r3], #1
 8024486:	e7f9      	b.n	802447c <memset+0x4>

08024488 <validate_structure>:
 8024488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802448a:	6801      	ldr	r1, [r0, #0]
 802448c:	293b      	cmp	r1, #59	; 0x3b
 802448e:	4604      	mov	r4, r0
 8024490:	d911      	bls.n	80244b6 <validate_structure+0x2e>
 8024492:	223c      	movs	r2, #60	; 0x3c
 8024494:	4668      	mov	r0, sp
 8024496:	f002 fc09 	bl	8026cac <div>
 802449a:	9a01      	ldr	r2, [sp, #4]
 802449c:	6863      	ldr	r3, [r4, #4]
 802449e:	9900      	ldr	r1, [sp, #0]
 80244a0:	2a00      	cmp	r2, #0
 80244a2:	440b      	add	r3, r1
 80244a4:	6063      	str	r3, [r4, #4]
 80244a6:	bfbb      	ittet	lt
 80244a8:	323c      	addlt	r2, #60	; 0x3c
 80244aa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80244ae:	6022      	strge	r2, [r4, #0]
 80244b0:	6022      	strlt	r2, [r4, #0]
 80244b2:	bfb8      	it	lt
 80244b4:	6063      	strlt	r3, [r4, #4]
 80244b6:	6861      	ldr	r1, [r4, #4]
 80244b8:	293b      	cmp	r1, #59	; 0x3b
 80244ba:	d911      	bls.n	80244e0 <validate_structure+0x58>
 80244bc:	223c      	movs	r2, #60	; 0x3c
 80244be:	4668      	mov	r0, sp
 80244c0:	f002 fbf4 	bl	8026cac <div>
 80244c4:	9a01      	ldr	r2, [sp, #4]
 80244c6:	68a3      	ldr	r3, [r4, #8]
 80244c8:	9900      	ldr	r1, [sp, #0]
 80244ca:	2a00      	cmp	r2, #0
 80244cc:	440b      	add	r3, r1
 80244ce:	60a3      	str	r3, [r4, #8]
 80244d0:	bfbb      	ittet	lt
 80244d2:	323c      	addlt	r2, #60	; 0x3c
 80244d4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80244d8:	6062      	strge	r2, [r4, #4]
 80244da:	6062      	strlt	r2, [r4, #4]
 80244dc:	bfb8      	it	lt
 80244de:	60a3      	strlt	r3, [r4, #8]
 80244e0:	68a1      	ldr	r1, [r4, #8]
 80244e2:	2917      	cmp	r1, #23
 80244e4:	d911      	bls.n	802450a <validate_structure+0x82>
 80244e6:	2218      	movs	r2, #24
 80244e8:	4668      	mov	r0, sp
 80244ea:	f002 fbdf 	bl	8026cac <div>
 80244ee:	9a01      	ldr	r2, [sp, #4]
 80244f0:	68e3      	ldr	r3, [r4, #12]
 80244f2:	9900      	ldr	r1, [sp, #0]
 80244f4:	2a00      	cmp	r2, #0
 80244f6:	440b      	add	r3, r1
 80244f8:	60e3      	str	r3, [r4, #12]
 80244fa:	bfbb      	ittet	lt
 80244fc:	3218      	addlt	r2, #24
 80244fe:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8024502:	60a2      	strge	r2, [r4, #8]
 8024504:	60a2      	strlt	r2, [r4, #8]
 8024506:	bfb8      	it	lt
 8024508:	60e3      	strlt	r3, [r4, #12]
 802450a:	6921      	ldr	r1, [r4, #16]
 802450c:	290b      	cmp	r1, #11
 802450e:	d911      	bls.n	8024534 <validate_structure+0xac>
 8024510:	220c      	movs	r2, #12
 8024512:	4668      	mov	r0, sp
 8024514:	f002 fbca 	bl	8026cac <div>
 8024518:	9a01      	ldr	r2, [sp, #4]
 802451a:	6963      	ldr	r3, [r4, #20]
 802451c:	9900      	ldr	r1, [sp, #0]
 802451e:	2a00      	cmp	r2, #0
 8024520:	440b      	add	r3, r1
 8024522:	6163      	str	r3, [r4, #20]
 8024524:	bfbb      	ittet	lt
 8024526:	320c      	addlt	r2, #12
 8024528:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802452c:	6122      	strge	r2, [r4, #16]
 802452e:	6122      	strlt	r2, [r4, #16]
 8024530:	bfb8      	it	lt
 8024532:	6163      	strlt	r3, [r4, #20]
 8024534:	6963      	ldr	r3, [r4, #20]
 8024536:	0798      	lsls	r0, r3, #30
 8024538:	d120      	bne.n	802457c <validate_structure+0xf4>
 802453a:	2164      	movs	r1, #100	; 0x64
 802453c:	fb93 f2f1 	sdiv	r2, r3, r1
 8024540:	fb01 3212 	mls	r2, r1, r2, r3
 8024544:	b9e2      	cbnz	r2, 8024580 <validate_structure+0xf8>
 8024546:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 802454a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802454e:	fb93 f1f2 	sdiv	r1, r3, r2
 8024552:	fb02 3311 	mls	r3, r2, r1, r3
 8024556:	2b00      	cmp	r3, #0
 8024558:	bf14      	ite	ne
 802455a:	231c      	movne	r3, #28
 802455c:	231d      	moveq	r3, #29
 802455e:	68e2      	ldr	r2, [r4, #12]
 8024560:	2a00      	cmp	r2, #0
 8024562:	dc0f      	bgt.n	8024584 <validate_structure+0xfc>
 8024564:	4f33      	ldr	r7, [pc, #204]	; (8024634 <validate_structure+0x1ac>)
 8024566:	260b      	movs	r6, #11
 8024568:	2064      	movs	r0, #100	; 0x64
 802456a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802456e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8024572:	f1bc 0f00 	cmp.w	ip, #0
 8024576:	dd31      	ble.n	80245dc <validate_structure+0x154>
 8024578:	b003      	add	sp, #12
 802457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802457c:	231c      	movs	r3, #28
 802457e:	e7ee      	b.n	802455e <validate_structure+0xd6>
 8024580:	231d      	movs	r3, #29
 8024582:	e7ec      	b.n	802455e <validate_structure+0xd6>
 8024584:	4e2b      	ldr	r6, [pc, #172]	; (8024634 <validate_structure+0x1ac>)
 8024586:	2700      	movs	r7, #0
 8024588:	2064      	movs	r0, #100	; 0x64
 802458a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802458e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8024592:	2a01      	cmp	r2, #1
 8024594:	bf14      	ite	ne
 8024596:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 802459a:	469c      	moveq	ip, r3
 802459c:	4561      	cmp	r1, ip
 802459e:	ddeb      	ble.n	8024578 <validate_structure+0xf0>
 80245a0:	3201      	adds	r2, #1
 80245a2:	eba1 010c 	sub.w	r1, r1, ip
 80245a6:	2a0c      	cmp	r2, #12
 80245a8:	60e1      	str	r1, [r4, #12]
 80245aa:	6122      	str	r2, [r4, #16]
 80245ac:	d1ef      	bne.n	802458e <validate_structure+0x106>
 80245ae:	6963      	ldr	r3, [r4, #20]
 80245b0:	1c5a      	adds	r2, r3, #1
 80245b2:	0791      	lsls	r1, r2, #30
 80245b4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80245b8:	d137      	bne.n	802462a <validate_structure+0x1a2>
 80245ba:	fb92 f1f0 	sdiv	r1, r2, r0
 80245be:	fb00 2211 	mls	r2, r0, r1, r2
 80245c2:	2a00      	cmp	r2, #0
 80245c4:	d133      	bne.n	802462e <validate_structure+0x1a6>
 80245c6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80245ca:	fb93 f2f5 	sdiv	r2, r3, r5
 80245ce:	fb05 3312 	mls	r3, r5, r2, r3
 80245d2:	2b00      	cmp	r3, #0
 80245d4:	bf14      	ite	ne
 80245d6:	231c      	movne	r3, #28
 80245d8:	231d      	moveq	r3, #29
 80245da:	e7d8      	b.n	802458e <validate_structure+0x106>
 80245dc:	6921      	ldr	r1, [r4, #16]
 80245de:	3901      	subs	r1, #1
 80245e0:	6121      	str	r1, [r4, #16]
 80245e2:	3101      	adds	r1, #1
 80245e4:	d114      	bne.n	8024610 <validate_structure+0x188>
 80245e6:	6963      	ldr	r3, [r4, #20]
 80245e8:	1e5a      	subs	r2, r3, #1
 80245ea:	0791      	lsls	r1, r2, #30
 80245ec:	e9c4 6204 	strd	r6, r2, [r4, #16]
 80245f0:	d117      	bne.n	8024622 <validate_structure+0x19a>
 80245f2:	fb92 f1f0 	sdiv	r1, r2, r0
 80245f6:	fb00 2211 	mls	r2, r0, r1, r2
 80245fa:	b9a2      	cbnz	r2, 8024626 <validate_structure+0x19e>
 80245fc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8024600:	fb93 f2f5 	sdiv	r2, r3, r5
 8024604:	fb05 3312 	mls	r3, r5, r2, r3
 8024608:	2b00      	cmp	r3, #0
 802460a:	bf14      	ite	ne
 802460c:	231c      	movne	r3, #28
 802460e:	231d      	moveq	r3, #29
 8024610:	6922      	ldr	r2, [r4, #16]
 8024612:	2a01      	cmp	r2, #1
 8024614:	bf14      	ite	ne
 8024616:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 802461a:	461a      	moveq	r2, r3
 802461c:	4462      	add	r2, ip
 802461e:	60e2      	str	r2, [r4, #12]
 8024620:	e7a5      	b.n	802456e <validate_structure+0xe6>
 8024622:	231c      	movs	r3, #28
 8024624:	e7f4      	b.n	8024610 <validate_structure+0x188>
 8024626:	231d      	movs	r3, #29
 8024628:	e7f2      	b.n	8024610 <validate_structure+0x188>
 802462a:	231c      	movs	r3, #28
 802462c:	e7af      	b.n	802458e <validate_structure+0x106>
 802462e:	231d      	movs	r3, #29
 8024630:	e7ad      	b.n	802458e <validate_structure+0x106>
 8024632:	bf00      	nop
 8024634:	08045ddc 	.word	0x08045ddc

08024638 <mktime>:
 8024638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802463c:	b085      	sub	sp, #20
 802463e:	4607      	mov	r7, r0
 8024640:	f003 fa62 	bl	8027b08 <__gettzinfo>
 8024644:	4681      	mov	r9, r0
 8024646:	4638      	mov	r0, r7
 8024648:	f7ff ff1e 	bl	8024488 <validate_structure>
 802464c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8024650:	233c      	movs	r3, #60	; 0x3c
 8024652:	fb03 4400 	mla	r4, r3, r0, r4
 8024656:	68b8      	ldr	r0, [r7, #8]
 8024658:	4abc      	ldr	r2, [pc, #752]	; (802494c <mktime+0x314>)
 802465a:	697e      	ldr	r6, [r7, #20]
 802465c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8024660:	fb03 4400 	mla	r4, r3, r0, r4
 8024664:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8024668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802466c:	3d01      	subs	r5, #1
 802466e:	2b01      	cmp	r3, #1
 8024670:	4415      	add	r5, r2
 8024672:	dd11      	ble.n	8024698 <mktime+0x60>
 8024674:	07b1      	lsls	r1, r6, #30
 8024676:	d10f      	bne.n	8024698 <mktime+0x60>
 8024678:	2264      	movs	r2, #100	; 0x64
 802467a:	fb96 f3f2 	sdiv	r3, r6, r2
 802467e:	fb02 6313 	mls	r3, r2, r3, r6
 8024682:	b943      	cbnz	r3, 8024696 <mktime+0x5e>
 8024684:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8024688:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802468c:	fb93 f1f2 	sdiv	r1, r3, r2
 8024690:	fb02 3311 	mls	r3, r2, r1, r3
 8024694:	b903      	cbnz	r3, 8024698 <mktime+0x60>
 8024696:	3501      	adds	r5, #1
 8024698:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 802469c:	3310      	adds	r3, #16
 802469e:	f644 6220 	movw	r2, #20000	; 0x4e20
 80246a2:	4293      	cmp	r3, r2
 80246a4:	61fd      	str	r5, [r7, #28]
 80246a6:	f200 815d 	bhi.w	8024964 <mktime+0x32c>
 80246aa:	2e46      	cmp	r6, #70	; 0x46
 80246ac:	dd71      	ble.n	8024792 <mktime+0x15a>
 80246ae:	2346      	movs	r3, #70	; 0x46
 80246b0:	f240 1c6d 	movw	ip, #365	; 0x16d
 80246b4:	2164      	movs	r1, #100	; 0x64
 80246b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80246ba:	079a      	lsls	r2, r3, #30
 80246bc:	d163      	bne.n	8024786 <mktime+0x14e>
 80246be:	fb93 f2f1 	sdiv	r2, r3, r1
 80246c2:	fb01 3212 	mls	r2, r1, r2, r3
 80246c6:	2a00      	cmp	r2, #0
 80246c8:	d160      	bne.n	802478c <mktime+0x154>
 80246ca:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80246ce:	fb92 fef0 	sdiv	lr, r2, r0
 80246d2:	fb00 221e 	mls	r2, r0, lr, r2
 80246d6:	2a00      	cmp	r2, #0
 80246d8:	bf14      	ite	ne
 80246da:	4662      	movne	r2, ip
 80246dc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80246e0:	3301      	adds	r3, #1
 80246e2:	429e      	cmp	r6, r3
 80246e4:	4415      	add	r5, r2
 80246e6:	d1e8      	bne.n	80246ba <mktime+0x82>
 80246e8:	4b99      	ldr	r3, [pc, #612]	; (8024950 <mktime+0x318>)
 80246ea:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80246ee:	fbc5 4803 	smlal	r4, r8, r5, r3
 80246f2:	f001 fffd 	bl	80266f0 <__tz_lock>
 80246f6:	f002 f807 	bl	8026708 <_tzset_unlocked>
 80246fa:	4b96      	ldr	r3, [pc, #600]	; (8024954 <mktime+0x31c>)
 80246fc:	f8d3 b000 	ldr.w	fp, [r3]
 8024700:	f1bb 0f00 	cmp.w	fp, #0
 8024704:	d039      	beq.n	802477a <mktime+0x142>
 8024706:	f8d7 b020 	ldr.w	fp, [r7, #32]
 802470a:	6978      	ldr	r0, [r7, #20]
 802470c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8024710:	f1bb 0f01 	cmp.w	fp, #1
 8024714:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8024718:	46da      	mov	sl, fp
 802471a:	bfa8      	it	ge
 802471c:	f04f 0a01 	movge.w	sl, #1
 8024720:	4283      	cmp	r3, r0
 8024722:	d178      	bne.n	8024816 <mktime+0x1de>
 8024724:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8024728:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 802472c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8024730:	1a5b      	subs	r3, r3, r1
 8024732:	9302      	str	r3, [sp, #8]
 8024734:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8024738:	9303      	str	r3, [sp, #12]
 802473a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 802473e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8024742:	9301      	str	r3, [sp, #4]
 8024744:	ebb3 0c02 	subs.w	ip, r3, r2
 8024748:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 802474c:	4564      	cmp	r4, ip
 802474e:	eb78 0300 	sbcs.w	r3, r8, r0
 8024752:	da66      	bge.n	8024822 <mktime+0x1ea>
 8024754:	f8d9 3000 	ldr.w	r3, [r9]
 8024758:	2b00      	cmp	r3, #0
 802475a:	d06f      	beq.n	802483c <mktime+0x204>
 802475c:	9b02      	ldr	r3, [sp, #8]
 802475e:	429c      	cmp	r4, r3
 8024760:	9b03      	ldr	r3, [sp, #12]
 8024762:	eb78 0303 	sbcs.w	r3, r8, r3
 8024766:	db03      	blt.n	8024770 <mktime+0x138>
 8024768:	4564      	cmp	r4, ip
 802476a:	eb78 0300 	sbcs.w	r3, r8, r0
 802476e:	db6b      	blt.n	8024848 <mktime+0x210>
 8024770:	f1bb 0f00 	cmp.w	fp, #0
 8024774:	f04f 0b00 	mov.w	fp, #0
 8024778:	da6b      	bge.n	8024852 <mktime+0x21a>
 802477a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 802477e:	190c      	adds	r4, r1, r4
 8024780:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8024784:	e0a9      	b.n	80248da <mktime+0x2a2>
 8024786:	f240 126d 	movw	r2, #365	; 0x16d
 802478a:	e7a9      	b.n	80246e0 <mktime+0xa8>
 802478c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8024790:	e7a6      	b.n	80246e0 <mktime+0xa8>
 8024792:	d0a9      	beq.n	80246e8 <mktime+0xb0>
 8024794:	2345      	movs	r3, #69	; 0x45
 8024796:	f240 1c6d 	movw	ip, #365	; 0x16d
 802479a:	2164      	movs	r1, #100	; 0x64
 802479c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80247a0:	e012      	b.n	80247c8 <mktime+0x190>
 80247a2:	bb62      	cbnz	r2, 80247fe <mktime+0x1c6>
 80247a4:	fb93 f2f1 	sdiv	r2, r3, r1
 80247a8:	fb01 3212 	mls	r2, r1, r2, r3
 80247ac:	bb52      	cbnz	r2, 8024804 <mktime+0x1cc>
 80247ae:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80247b2:	fb92 fef0 	sdiv	lr, r2, r0
 80247b6:	fb00 221e 	mls	r2, r0, lr, r2
 80247ba:	2a00      	cmp	r2, #0
 80247bc:	bf14      	ite	ne
 80247be:	4662      	movne	r2, ip
 80247c0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80247c4:	1aad      	subs	r5, r5, r2
 80247c6:	3b01      	subs	r3, #1
 80247c8:	429e      	cmp	r6, r3
 80247ca:	f003 0203 	and.w	r2, r3, #3
 80247ce:	dbe8      	blt.n	80247a2 <mktime+0x16a>
 80247d0:	b9da      	cbnz	r2, 802480a <mktime+0x1d2>
 80247d2:	2264      	movs	r2, #100	; 0x64
 80247d4:	fb96 f3f2 	sdiv	r3, r6, r2
 80247d8:	fb02 6313 	mls	r3, r2, r3, r6
 80247dc:	b9c3      	cbnz	r3, 8024810 <mktime+0x1d8>
 80247de:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80247e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80247e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80247ea:	fb02 3311 	mls	r3, r2, r1, r3
 80247ee:	2b00      	cmp	r3, #0
 80247f0:	f240 136d 	movw	r3, #365	; 0x16d
 80247f4:	bf08      	it	eq
 80247f6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80247fa:	1aed      	subs	r5, r5, r3
 80247fc:	e774      	b.n	80246e8 <mktime+0xb0>
 80247fe:	f240 126d 	movw	r2, #365	; 0x16d
 8024802:	e7df      	b.n	80247c4 <mktime+0x18c>
 8024804:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8024808:	e7dc      	b.n	80247c4 <mktime+0x18c>
 802480a:	f240 136d 	movw	r3, #365	; 0x16d
 802480e:	e7f4      	b.n	80247fa <mktime+0x1c2>
 8024810:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8024814:	e7f1      	b.n	80247fa <mktime+0x1c2>
 8024816:	f001 fec1 	bl	802659c <__tzcalc_limits>
 802481a:	2800      	cmp	r0, #0
 802481c:	d182      	bne.n	8024724 <mktime+0xec>
 802481e:	46d3      	mov	fp, sl
 8024820:	e050      	b.n	80248c4 <mktime+0x28c>
 8024822:	9b01      	ldr	r3, [sp, #4]
 8024824:	1a5b      	subs	r3, r3, r1
 8024826:	9301      	str	r3, [sp, #4]
 8024828:	ea4f 73e1 	mov.w	r3, r1, asr #31
 802482c:	eb6e 0e03 	sbc.w	lr, lr, r3
 8024830:	9b01      	ldr	r3, [sp, #4]
 8024832:	429c      	cmp	r4, r3
 8024834:	eb78 030e 	sbcs.w	r3, r8, lr
 8024838:	dbf1      	blt.n	802481e <mktime+0x1e6>
 802483a:	e78b      	b.n	8024754 <mktime+0x11c>
 802483c:	9b02      	ldr	r3, [sp, #8]
 802483e:	429c      	cmp	r4, r3
 8024840:	9b03      	ldr	r3, [sp, #12]
 8024842:	eb78 0303 	sbcs.w	r3, r8, r3
 8024846:	db8f      	blt.n	8024768 <mktime+0x130>
 8024848:	f1bb 0f00 	cmp.w	fp, #0
 802484c:	db3e      	blt.n	80248cc <mktime+0x294>
 802484e:	f04f 0b01 	mov.w	fp, #1
 8024852:	ea8a 0a0b 	eor.w	sl, sl, fp
 8024856:	f1ba 0f01 	cmp.w	sl, #1
 802485a:	d133      	bne.n	80248c4 <mktime+0x28c>
 802485c:	f1bb 0f00 	cmp.w	fp, #0
 8024860:	d04e      	beq.n	8024900 <mktime+0x2c8>
 8024862:	1a52      	subs	r2, r2, r1
 8024864:	683b      	ldr	r3, [r7, #0]
 8024866:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 802486a:	4413      	add	r3, r2
 802486c:	1914      	adds	r4, r2, r4
 802486e:	603b      	str	r3, [r7, #0]
 8024870:	4638      	mov	r0, r7
 8024872:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8024876:	f7ff fe07 	bl	8024488 <validate_structure>
 802487a:	68fa      	ldr	r2, [r7, #12]
 802487c:	ebb2 020a 	subs.w	r2, r2, sl
 8024880:	d020      	beq.n	80248c4 <mktime+0x28c>
 8024882:	2a01      	cmp	r2, #1
 8024884:	dc3e      	bgt.n	8024904 <mktime+0x2cc>
 8024886:	1c90      	adds	r0, r2, #2
 8024888:	bfd8      	it	le
 802488a:	2201      	movle	r2, #1
 802488c:	69fb      	ldr	r3, [r7, #28]
 802488e:	18d3      	adds	r3, r2, r3
 8024890:	4415      	add	r5, r2
 8024892:	d540      	bpl.n	8024916 <mktime+0x2de>
 8024894:	1e73      	subs	r3, r6, #1
 8024896:	0799      	lsls	r1, r3, #30
 8024898:	d137      	bne.n	802490a <mktime+0x2d2>
 802489a:	2264      	movs	r2, #100	; 0x64
 802489c:	fb93 f1f2 	sdiv	r1, r3, r2
 80248a0:	fb02 3311 	mls	r3, r2, r1, r3
 80248a4:	bba3      	cbnz	r3, 8024910 <mktime+0x2d8>
 80248a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80248aa:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80248ae:	fb96 f2f3 	sdiv	r2, r6, r3
 80248b2:	fb03 6612 	mls	r6, r3, r2, r6
 80248b6:	2e00      	cmp	r6, #0
 80248b8:	f240 136d 	movw	r3, #365	; 0x16d
 80248bc:	bf18      	it	ne
 80248be:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80248c2:	61fb      	str	r3, [r7, #28]
 80248c4:	f1bb 0f01 	cmp.w	fp, #1
 80248c8:	f47f af57 	bne.w	802477a <mktime+0x142>
 80248cc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80248d0:	190c      	adds	r4, r1, r4
 80248d2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80248d6:	f04f 0b01 	mov.w	fp, #1
 80248da:	f001 ff0f 	bl	80266fc <__tz_unlock>
 80248de:	3504      	adds	r5, #4
 80248e0:	2307      	movs	r3, #7
 80248e2:	fb95 f3f3 	sdiv	r3, r5, r3
 80248e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80248ea:	1aed      	subs	r5, r5, r3
 80248ec:	bf48      	it	mi
 80248ee:	3507      	addmi	r5, #7
 80248f0:	f8c7 b020 	str.w	fp, [r7, #32]
 80248f4:	61bd      	str	r5, [r7, #24]
 80248f6:	4620      	mov	r0, r4
 80248f8:	4641      	mov	r1, r8
 80248fa:	b005      	add	sp, #20
 80248fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024900:	1a8a      	subs	r2, r1, r2
 8024902:	e7af      	b.n	8024864 <mktime+0x22c>
 8024904:	f04f 32ff 	mov.w	r2, #4294967295
 8024908:	e7c0      	b.n	802488c <mktime+0x254>
 802490a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 802490e:	e7d8      	b.n	80248c2 <mktime+0x28a>
 8024910:	f240 136d 	movw	r3, #365	; 0x16d
 8024914:	e7d5      	b.n	80248c2 <mktime+0x28a>
 8024916:	07b2      	lsls	r2, r6, #30
 8024918:	d11e      	bne.n	8024958 <mktime+0x320>
 802491a:	2164      	movs	r1, #100	; 0x64
 802491c:	fb96 f2f1 	sdiv	r2, r6, r1
 8024920:	fb01 6212 	mls	r2, r1, r2, r6
 8024924:	b9da      	cbnz	r2, 802495e <mktime+0x326>
 8024926:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802492a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 802492e:	fb96 f1f2 	sdiv	r1, r6, r2
 8024932:	fb02 6611 	mls	r6, r2, r1, r6
 8024936:	2e00      	cmp	r6, #0
 8024938:	f240 126d 	movw	r2, #365	; 0x16d
 802493c:	bf08      	it	eq
 802493e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8024942:	4293      	cmp	r3, r2
 8024944:	bfa8      	it	ge
 8024946:	1a9b      	subge	r3, r3, r2
 8024948:	e7bb      	b.n	80248c2 <mktime+0x28a>
 802494a:	bf00      	nop
 802494c:	08045e0c 	.word	0x08045e0c
 8024950:	00015180 	.word	0x00015180
 8024954:	2002fd7c 	.word	0x2002fd7c
 8024958:	f240 126d 	movw	r2, #365	; 0x16d
 802495c:	e7f1      	b.n	8024942 <mktime+0x30a>
 802495e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8024962:	e7ee      	b.n	8024942 <mktime+0x30a>
 8024964:	f04f 34ff 	mov.w	r4, #4294967295
 8024968:	46a0      	mov	r8, r4
 802496a:	e7c4      	b.n	80248f6 <mktime+0x2be>

0802496c <_free_r>:
 802496c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802496e:	2900      	cmp	r1, #0
 8024970:	d044      	beq.n	80249fc <_free_r+0x90>
 8024972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024976:	9001      	str	r0, [sp, #4]
 8024978:	2b00      	cmp	r3, #0
 802497a:	f1a1 0404 	sub.w	r4, r1, #4
 802497e:	bfb8      	it	lt
 8024980:	18e4      	addlt	r4, r4, r3
 8024982:	f003 f9f1 	bl	8027d68 <__malloc_lock>
 8024986:	4a1e      	ldr	r2, [pc, #120]	; (8024a00 <_free_r+0x94>)
 8024988:	9801      	ldr	r0, [sp, #4]
 802498a:	6813      	ldr	r3, [r2, #0]
 802498c:	b933      	cbnz	r3, 802499c <_free_r+0x30>
 802498e:	6063      	str	r3, [r4, #4]
 8024990:	6014      	str	r4, [r2, #0]
 8024992:	b003      	add	sp, #12
 8024994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024998:	f003 b9ec 	b.w	8027d74 <__malloc_unlock>
 802499c:	42a3      	cmp	r3, r4
 802499e:	d908      	bls.n	80249b2 <_free_r+0x46>
 80249a0:	6825      	ldr	r5, [r4, #0]
 80249a2:	1961      	adds	r1, r4, r5
 80249a4:	428b      	cmp	r3, r1
 80249a6:	bf01      	itttt	eq
 80249a8:	6819      	ldreq	r1, [r3, #0]
 80249aa:	685b      	ldreq	r3, [r3, #4]
 80249ac:	1949      	addeq	r1, r1, r5
 80249ae:	6021      	streq	r1, [r4, #0]
 80249b0:	e7ed      	b.n	802498e <_free_r+0x22>
 80249b2:	461a      	mov	r2, r3
 80249b4:	685b      	ldr	r3, [r3, #4]
 80249b6:	b10b      	cbz	r3, 80249bc <_free_r+0x50>
 80249b8:	42a3      	cmp	r3, r4
 80249ba:	d9fa      	bls.n	80249b2 <_free_r+0x46>
 80249bc:	6811      	ldr	r1, [r2, #0]
 80249be:	1855      	adds	r5, r2, r1
 80249c0:	42a5      	cmp	r5, r4
 80249c2:	d10b      	bne.n	80249dc <_free_r+0x70>
 80249c4:	6824      	ldr	r4, [r4, #0]
 80249c6:	4421      	add	r1, r4
 80249c8:	1854      	adds	r4, r2, r1
 80249ca:	42a3      	cmp	r3, r4
 80249cc:	6011      	str	r1, [r2, #0]
 80249ce:	d1e0      	bne.n	8024992 <_free_r+0x26>
 80249d0:	681c      	ldr	r4, [r3, #0]
 80249d2:	685b      	ldr	r3, [r3, #4]
 80249d4:	6053      	str	r3, [r2, #4]
 80249d6:	4421      	add	r1, r4
 80249d8:	6011      	str	r1, [r2, #0]
 80249da:	e7da      	b.n	8024992 <_free_r+0x26>
 80249dc:	d902      	bls.n	80249e4 <_free_r+0x78>
 80249de:	230c      	movs	r3, #12
 80249e0:	6003      	str	r3, [r0, #0]
 80249e2:	e7d6      	b.n	8024992 <_free_r+0x26>
 80249e4:	6825      	ldr	r5, [r4, #0]
 80249e6:	1961      	adds	r1, r4, r5
 80249e8:	428b      	cmp	r3, r1
 80249ea:	bf04      	itt	eq
 80249ec:	6819      	ldreq	r1, [r3, #0]
 80249ee:	685b      	ldreq	r3, [r3, #4]
 80249f0:	6063      	str	r3, [r4, #4]
 80249f2:	bf04      	itt	eq
 80249f4:	1949      	addeq	r1, r1, r5
 80249f6:	6021      	streq	r1, [r4, #0]
 80249f8:	6054      	str	r4, [r2, #4]
 80249fa:	e7ca      	b.n	8024992 <_free_r+0x26>
 80249fc:	b003      	add	sp, #12
 80249fe:	bd30      	pop	{r4, r5, pc}
 8024a00:	2002fd54 	.word	0x2002fd54

08024a04 <sbrk_aligned>:
 8024a04:	b570      	push	{r4, r5, r6, lr}
 8024a06:	4e0e      	ldr	r6, [pc, #56]	; (8024a40 <sbrk_aligned+0x3c>)
 8024a08:	460c      	mov	r4, r1
 8024a0a:	6831      	ldr	r1, [r6, #0]
 8024a0c:	4605      	mov	r5, r0
 8024a0e:	b911      	cbnz	r1, 8024a16 <sbrk_aligned+0x12>
 8024a10:	f000 fe76 	bl	8025700 <_sbrk_r>
 8024a14:	6030      	str	r0, [r6, #0]
 8024a16:	4621      	mov	r1, r4
 8024a18:	4628      	mov	r0, r5
 8024a1a:	f000 fe71 	bl	8025700 <_sbrk_r>
 8024a1e:	1c43      	adds	r3, r0, #1
 8024a20:	d00a      	beq.n	8024a38 <sbrk_aligned+0x34>
 8024a22:	1cc4      	adds	r4, r0, #3
 8024a24:	f024 0403 	bic.w	r4, r4, #3
 8024a28:	42a0      	cmp	r0, r4
 8024a2a:	d007      	beq.n	8024a3c <sbrk_aligned+0x38>
 8024a2c:	1a21      	subs	r1, r4, r0
 8024a2e:	4628      	mov	r0, r5
 8024a30:	f000 fe66 	bl	8025700 <_sbrk_r>
 8024a34:	3001      	adds	r0, #1
 8024a36:	d101      	bne.n	8024a3c <sbrk_aligned+0x38>
 8024a38:	f04f 34ff 	mov.w	r4, #4294967295
 8024a3c:	4620      	mov	r0, r4
 8024a3e:	bd70      	pop	{r4, r5, r6, pc}
 8024a40:	2002fd58 	.word	0x2002fd58

08024a44 <_malloc_r>:
 8024a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a48:	1ccd      	adds	r5, r1, #3
 8024a4a:	f025 0503 	bic.w	r5, r5, #3
 8024a4e:	3508      	adds	r5, #8
 8024a50:	2d0c      	cmp	r5, #12
 8024a52:	bf38      	it	cc
 8024a54:	250c      	movcc	r5, #12
 8024a56:	2d00      	cmp	r5, #0
 8024a58:	4607      	mov	r7, r0
 8024a5a:	db01      	blt.n	8024a60 <_malloc_r+0x1c>
 8024a5c:	42a9      	cmp	r1, r5
 8024a5e:	d905      	bls.n	8024a6c <_malloc_r+0x28>
 8024a60:	230c      	movs	r3, #12
 8024a62:	603b      	str	r3, [r7, #0]
 8024a64:	2600      	movs	r6, #0
 8024a66:	4630      	mov	r0, r6
 8024a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024a6c:	4e2e      	ldr	r6, [pc, #184]	; (8024b28 <_malloc_r+0xe4>)
 8024a6e:	f003 f97b 	bl	8027d68 <__malloc_lock>
 8024a72:	6833      	ldr	r3, [r6, #0]
 8024a74:	461c      	mov	r4, r3
 8024a76:	bb34      	cbnz	r4, 8024ac6 <_malloc_r+0x82>
 8024a78:	4629      	mov	r1, r5
 8024a7a:	4638      	mov	r0, r7
 8024a7c:	f7ff ffc2 	bl	8024a04 <sbrk_aligned>
 8024a80:	1c43      	adds	r3, r0, #1
 8024a82:	4604      	mov	r4, r0
 8024a84:	d14d      	bne.n	8024b22 <_malloc_r+0xde>
 8024a86:	6834      	ldr	r4, [r6, #0]
 8024a88:	4626      	mov	r6, r4
 8024a8a:	2e00      	cmp	r6, #0
 8024a8c:	d140      	bne.n	8024b10 <_malloc_r+0xcc>
 8024a8e:	6823      	ldr	r3, [r4, #0]
 8024a90:	4631      	mov	r1, r6
 8024a92:	4638      	mov	r0, r7
 8024a94:	eb04 0803 	add.w	r8, r4, r3
 8024a98:	f000 fe32 	bl	8025700 <_sbrk_r>
 8024a9c:	4580      	cmp	r8, r0
 8024a9e:	d13a      	bne.n	8024b16 <_malloc_r+0xd2>
 8024aa0:	6821      	ldr	r1, [r4, #0]
 8024aa2:	3503      	adds	r5, #3
 8024aa4:	1a6d      	subs	r5, r5, r1
 8024aa6:	f025 0503 	bic.w	r5, r5, #3
 8024aaa:	3508      	adds	r5, #8
 8024aac:	2d0c      	cmp	r5, #12
 8024aae:	bf38      	it	cc
 8024ab0:	250c      	movcc	r5, #12
 8024ab2:	4629      	mov	r1, r5
 8024ab4:	4638      	mov	r0, r7
 8024ab6:	f7ff ffa5 	bl	8024a04 <sbrk_aligned>
 8024aba:	3001      	adds	r0, #1
 8024abc:	d02b      	beq.n	8024b16 <_malloc_r+0xd2>
 8024abe:	6823      	ldr	r3, [r4, #0]
 8024ac0:	442b      	add	r3, r5
 8024ac2:	6023      	str	r3, [r4, #0]
 8024ac4:	e00e      	b.n	8024ae4 <_malloc_r+0xa0>
 8024ac6:	6822      	ldr	r2, [r4, #0]
 8024ac8:	1b52      	subs	r2, r2, r5
 8024aca:	d41e      	bmi.n	8024b0a <_malloc_r+0xc6>
 8024acc:	2a0b      	cmp	r2, #11
 8024ace:	d916      	bls.n	8024afe <_malloc_r+0xba>
 8024ad0:	1961      	adds	r1, r4, r5
 8024ad2:	42a3      	cmp	r3, r4
 8024ad4:	6025      	str	r5, [r4, #0]
 8024ad6:	bf18      	it	ne
 8024ad8:	6059      	strne	r1, [r3, #4]
 8024ada:	6863      	ldr	r3, [r4, #4]
 8024adc:	bf08      	it	eq
 8024ade:	6031      	streq	r1, [r6, #0]
 8024ae0:	5162      	str	r2, [r4, r5]
 8024ae2:	604b      	str	r3, [r1, #4]
 8024ae4:	4638      	mov	r0, r7
 8024ae6:	f104 060b 	add.w	r6, r4, #11
 8024aea:	f003 f943 	bl	8027d74 <__malloc_unlock>
 8024aee:	f026 0607 	bic.w	r6, r6, #7
 8024af2:	1d23      	adds	r3, r4, #4
 8024af4:	1af2      	subs	r2, r6, r3
 8024af6:	d0b6      	beq.n	8024a66 <_malloc_r+0x22>
 8024af8:	1b9b      	subs	r3, r3, r6
 8024afa:	50a3      	str	r3, [r4, r2]
 8024afc:	e7b3      	b.n	8024a66 <_malloc_r+0x22>
 8024afe:	6862      	ldr	r2, [r4, #4]
 8024b00:	42a3      	cmp	r3, r4
 8024b02:	bf0c      	ite	eq
 8024b04:	6032      	streq	r2, [r6, #0]
 8024b06:	605a      	strne	r2, [r3, #4]
 8024b08:	e7ec      	b.n	8024ae4 <_malloc_r+0xa0>
 8024b0a:	4623      	mov	r3, r4
 8024b0c:	6864      	ldr	r4, [r4, #4]
 8024b0e:	e7b2      	b.n	8024a76 <_malloc_r+0x32>
 8024b10:	4634      	mov	r4, r6
 8024b12:	6876      	ldr	r6, [r6, #4]
 8024b14:	e7b9      	b.n	8024a8a <_malloc_r+0x46>
 8024b16:	230c      	movs	r3, #12
 8024b18:	603b      	str	r3, [r7, #0]
 8024b1a:	4638      	mov	r0, r7
 8024b1c:	f003 f92a 	bl	8027d74 <__malloc_unlock>
 8024b20:	e7a1      	b.n	8024a66 <_malloc_r+0x22>
 8024b22:	6025      	str	r5, [r4, #0]
 8024b24:	e7de      	b.n	8024ae4 <_malloc_r+0xa0>
 8024b26:	bf00      	nop
 8024b28:	2002fd54 	.word	0x2002fd54

08024b2c <__cvt>:
 8024b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b2e:	ed2d 8b02 	vpush	{d8}
 8024b32:	eeb0 8b40 	vmov.f64	d8, d0
 8024b36:	b085      	sub	sp, #20
 8024b38:	4617      	mov	r7, r2
 8024b3a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024b3c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024b3e:	ee18 2a90 	vmov	r2, s17
 8024b42:	f025 0520 	bic.w	r5, r5, #32
 8024b46:	2a00      	cmp	r2, #0
 8024b48:	bfb6      	itet	lt
 8024b4a:	222d      	movlt	r2, #45	; 0x2d
 8024b4c:	2200      	movge	r2, #0
 8024b4e:	eeb1 8b40 	vneglt.f64	d8, d0
 8024b52:	2d46      	cmp	r5, #70	; 0x46
 8024b54:	460c      	mov	r4, r1
 8024b56:	701a      	strb	r2, [r3, #0]
 8024b58:	d004      	beq.n	8024b64 <__cvt+0x38>
 8024b5a:	2d45      	cmp	r5, #69	; 0x45
 8024b5c:	d100      	bne.n	8024b60 <__cvt+0x34>
 8024b5e:	3401      	adds	r4, #1
 8024b60:	2102      	movs	r1, #2
 8024b62:	e000      	b.n	8024b66 <__cvt+0x3a>
 8024b64:	2103      	movs	r1, #3
 8024b66:	ab03      	add	r3, sp, #12
 8024b68:	9301      	str	r3, [sp, #4]
 8024b6a:	ab02      	add	r3, sp, #8
 8024b6c:	9300      	str	r3, [sp, #0]
 8024b6e:	4622      	mov	r2, r4
 8024b70:	4633      	mov	r3, r6
 8024b72:	eeb0 0b48 	vmov.f64	d0, d8
 8024b76:	f002 f93b 	bl	8026df0 <_dtoa_r>
 8024b7a:	2d47      	cmp	r5, #71	; 0x47
 8024b7c:	d101      	bne.n	8024b82 <__cvt+0x56>
 8024b7e:	07fb      	lsls	r3, r7, #31
 8024b80:	d51a      	bpl.n	8024bb8 <__cvt+0x8c>
 8024b82:	2d46      	cmp	r5, #70	; 0x46
 8024b84:	eb00 0204 	add.w	r2, r0, r4
 8024b88:	d10c      	bne.n	8024ba4 <__cvt+0x78>
 8024b8a:	7803      	ldrb	r3, [r0, #0]
 8024b8c:	2b30      	cmp	r3, #48	; 0x30
 8024b8e:	d107      	bne.n	8024ba0 <__cvt+0x74>
 8024b90:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8024b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b98:	bf1c      	itt	ne
 8024b9a:	f1c4 0401 	rsbne	r4, r4, #1
 8024b9e:	6034      	strne	r4, [r6, #0]
 8024ba0:	6833      	ldr	r3, [r6, #0]
 8024ba2:	441a      	add	r2, r3
 8024ba4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8024ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024bac:	bf08      	it	eq
 8024bae:	9203      	streq	r2, [sp, #12]
 8024bb0:	2130      	movs	r1, #48	; 0x30
 8024bb2:	9b03      	ldr	r3, [sp, #12]
 8024bb4:	4293      	cmp	r3, r2
 8024bb6:	d307      	bcc.n	8024bc8 <__cvt+0x9c>
 8024bb8:	9b03      	ldr	r3, [sp, #12]
 8024bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024bbc:	1a1b      	subs	r3, r3, r0
 8024bbe:	6013      	str	r3, [r2, #0]
 8024bc0:	b005      	add	sp, #20
 8024bc2:	ecbd 8b02 	vpop	{d8}
 8024bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024bc8:	1c5c      	adds	r4, r3, #1
 8024bca:	9403      	str	r4, [sp, #12]
 8024bcc:	7019      	strb	r1, [r3, #0]
 8024bce:	e7f0      	b.n	8024bb2 <__cvt+0x86>

08024bd0 <__exponent>:
 8024bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024bd2:	4603      	mov	r3, r0
 8024bd4:	2900      	cmp	r1, #0
 8024bd6:	bfb8      	it	lt
 8024bd8:	4249      	neglt	r1, r1
 8024bda:	f803 2b02 	strb.w	r2, [r3], #2
 8024bde:	bfb4      	ite	lt
 8024be0:	222d      	movlt	r2, #45	; 0x2d
 8024be2:	222b      	movge	r2, #43	; 0x2b
 8024be4:	2909      	cmp	r1, #9
 8024be6:	7042      	strb	r2, [r0, #1]
 8024be8:	dd2a      	ble.n	8024c40 <__exponent+0x70>
 8024bea:	f10d 0407 	add.w	r4, sp, #7
 8024bee:	46a4      	mov	ip, r4
 8024bf0:	270a      	movs	r7, #10
 8024bf2:	46a6      	mov	lr, r4
 8024bf4:	460a      	mov	r2, r1
 8024bf6:	fb91 f6f7 	sdiv	r6, r1, r7
 8024bfa:	fb07 1516 	mls	r5, r7, r6, r1
 8024bfe:	3530      	adds	r5, #48	; 0x30
 8024c00:	2a63      	cmp	r2, #99	; 0x63
 8024c02:	f104 34ff 	add.w	r4, r4, #4294967295
 8024c06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8024c0a:	4631      	mov	r1, r6
 8024c0c:	dcf1      	bgt.n	8024bf2 <__exponent+0x22>
 8024c0e:	3130      	adds	r1, #48	; 0x30
 8024c10:	f1ae 0502 	sub.w	r5, lr, #2
 8024c14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8024c18:	1c44      	adds	r4, r0, #1
 8024c1a:	4629      	mov	r1, r5
 8024c1c:	4561      	cmp	r1, ip
 8024c1e:	d30a      	bcc.n	8024c36 <__exponent+0x66>
 8024c20:	f10d 0209 	add.w	r2, sp, #9
 8024c24:	eba2 020e 	sub.w	r2, r2, lr
 8024c28:	4565      	cmp	r5, ip
 8024c2a:	bf88      	it	hi
 8024c2c:	2200      	movhi	r2, #0
 8024c2e:	4413      	add	r3, r2
 8024c30:	1a18      	subs	r0, r3, r0
 8024c32:	b003      	add	sp, #12
 8024c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024c3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8024c3e:	e7ed      	b.n	8024c1c <__exponent+0x4c>
 8024c40:	2330      	movs	r3, #48	; 0x30
 8024c42:	3130      	adds	r1, #48	; 0x30
 8024c44:	7083      	strb	r3, [r0, #2]
 8024c46:	70c1      	strb	r1, [r0, #3]
 8024c48:	1d03      	adds	r3, r0, #4
 8024c4a:	e7f1      	b.n	8024c30 <__exponent+0x60>
 8024c4c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08024c50 <_printf_float>:
 8024c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c54:	b08b      	sub	sp, #44	; 0x2c
 8024c56:	460c      	mov	r4, r1
 8024c58:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8024c5c:	4616      	mov	r6, r2
 8024c5e:	461f      	mov	r7, r3
 8024c60:	4605      	mov	r5, r0
 8024c62:	f003 f805 	bl	8027c70 <_localeconv_r>
 8024c66:	f8d0 b000 	ldr.w	fp, [r0]
 8024c6a:	4658      	mov	r0, fp
 8024c6c:	f7db faf2 	bl	8000254 <strlen>
 8024c70:	2300      	movs	r3, #0
 8024c72:	9308      	str	r3, [sp, #32]
 8024c74:	f8d8 3000 	ldr.w	r3, [r8]
 8024c78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8024c7c:	6822      	ldr	r2, [r4, #0]
 8024c7e:	3307      	adds	r3, #7
 8024c80:	f023 0307 	bic.w	r3, r3, #7
 8024c84:	f103 0108 	add.w	r1, r3, #8
 8024c88:	f8c8 1000 	str.w	r1, [r8]
 8024c8c:	4682      	mov	sl, r0
 8024c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024c92:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8024c96:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8024ef8 <_printf_float+0x2a8>
 8024c9a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8024c9e:	eeb0 6bc0 	vabs.f64	d6, d0
 8024ca2:	eeb4 6b47 	vcmp.f64	d6, d7
 8024ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024caa:	dd24      	ble.n	8024cf6 <_printf_float+0xa6>
 8024cac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8024cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024cb4:	d502      	bpl.n	8024cbc <_printf_float+0x6c>
 8024cb6:	232d      	movs	r3, #45	; 0x2d
 8024cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024cbc:	4b90      	ldr	r3, [pc, #576]	; (8024f00 <_printf_float+0x2b0>)
 8024cbe:	4891      	ldr	r0, [pc, #580]	; (8024f04 <_printf_float+0x2b4>)
 8024cc0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8024cc4:	bf94      	ite	ls
 8024cc6:	4698      	movls	r8, r3
 8024cc8:	4680      	movhi	r8, r0
 8024cca:	2303      	movs	r3, #3
 8024ccc:	6123      	str	r3, [r4, #16]
 8024cce:	f022 0204 	bic.w	r2, r2, #4
 8024cd2:	2300      	movs	r3, #0
 8024cd4:	6022      	str	r2, [r4, #0]
 8024cd6:	9304      	str	r3, [sp, #16]
 8024cd8:	9700      	str	r7, [sp, #0]
 8024cda:	4633      	mov	r3, r6
 8024cdc:	aa09      	add	r2, sp, #36	; 0x24
 8024cde:	4621      	mov	r1, r4
 8024ce0:	4628      	mov	r0, r5
 8024ce2:	f000 f9d3 	bl	802508c <_printf_common>
 8024ce6:	3001      	adds	r0, #1
 8024ce8:	f040 808a 	bne.w	8024e00 <_printf_float+0x1b0>
 8024cec:	f04f 30ff 	mov.w	r0, #4294967295
 8024cf0:	b00b      	add	sp, #44	; 0x2c
 8024cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cf6:	eeb4 0b40 	vcmp.f64	d0, d0
 8024cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024cfe:	d709      	bvc.n	8024d14 <_printf_float+0xc4>
 8024d00:	ee10 3a90 	vmov	r3, s1
 8024d04:	2b00      	cmp	r3, #0
 8024d06:	bfbc      	itt	lt
 8024d08:	232d      	movlt	r3, #45	; 0x2d
 8024d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8024d0e:	487e      	ldr	r0, [pc, #504]	; (8024f08 <_printf_float+0x2b8>)
 8024d10:	4b7e      	ldr	r3, [pc, #504]	; (8024f0c <_printf_float+0x2bc>)
 8024d12:	e7d5      	b.n	8024cc0 <_printf_float+0x70>
 8024d14:	6863      	ldr	r3, [r4, #4]
 8024d16:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8024d1a:	9104      	str	r1, [sp, #16]
 8024d1c:	1c59      	adds	r1, r3, #1
 8024d1e:	d13c      	bne.n	8024d9a <_printf_float+0x14a>
 8024d20:	2306      	movs	r3, #6
 8024d22:	6063      	str	r3, [r4, #4]
 8024d24:	2300      	movs	r3, #0
 8024d26:	9303      	str	r3, [sp, #12]
 8024d28:	ab08      	add	r3, sp, #32
 8024d2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8024d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8024d32:	ab07      	add	r3, sp, #28
 8024d34:	6861      	ldr	r1, [r4, #4]
 8024d36:	9300      	str	r3, [sp, #0]
 8024d38:	6022      	str	r2, [r4, #0]
 8024d3a:	f10d 031b 	add.w	r3, sp, #27
 8024d3e:	4628      	mov	r0, r5
 8024d40:	f7ff fef4 	bl	8024b2c <__cvt>
 8024d44:	9b04      	ldr	r3, [sp, #16]
 8024d46:	9907      	ldr	r1, [sp, #28]
 8024d48:	2b47      	cmp	r3, #71	; 0x47
 8024d4a:	4680      	mov	r8, r0
 8024d4c:	d108      	bne.n	8024d60 <_printf_float+0x110>
 8024d4e:	1cc8      	adds	r0, r1, #3
 8024d50:	db02      	blt.n	8024d58 <_printf_float+0x108>
 8024d52:	6863      	ldr	r3, [r4, #4]
 8024d54:	4299      	cmp	r1, r3
 8024d56:	dd41      	ble.n	8024ddc <_printf_float+0x18c>
 8024d58:	f1a9 0902 	sub.w	r9, r9, #2
 8024d5c:	fa5f f989 	uxtb.w	r9, r9
 8024d60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8024d64:	d820      	bhi.n	8024da8 <_printf_float+0x158>
 8024d66:	3901      	subs	r1, #1
 8024d68:	464a      	mov	r2, r9
 8024d6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8024d6e:	9107      	str	r1, [sp, #28]
 8024d70:	f7ff ff2e 	bl	8024bd0 <__exponent>
 8024d74:	9a08      	ldr	r2, [sp, #32]
 8024d76:	9004      	str	r0, [sp, #16]
 8024d78:	1813      	adds	r3, r2, r0
 8024d7a:	2a01      	cmp	r2, #1
 8024d7c:	6123      	str	r3, [r4, #16]
 8024d7e:	dc02      	bgt.n	8024d86 <_printf_float+0x136>
 8024d80:	6822      	ldr	r2, [r4, #0]
 8024d82:	07d2      	lsls	r2, r2, #31
 8024d84:	d501      	bpl.n	8024d8a <_printf_float+0x13a>
 8024d86:	3301      	adds	r3, #1
 8024d88:	6123      	str	r3, [r4, #16]
 8024d8a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8024d8e:	2b00      	cmp	r3, #0
 8024d90:	d0a2      	beq.n	8024cd8 <_printf_float+0x88>
 8024d92:	232d      	movs	r3, #45	; 0x2d
 8024d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024d98:	e79e      	b.n	8024cd8 <_printf_float+0x88>
 8024d9a:	9904      	ldr	r1, [sp, #16]
 8024d9c:	2947      	cmp	r1, #71	; 0x47
 8024d9e:	d1c1      	bne.n	8024d24 <_printf_float+0xd4>
 8024da0:	2b00      	cmp	r3, #0
 8024da2:	d1bf      	bne.n	8024d24 <_printf_float+0xd4>
 8024da4:	2301      	movs	r3, #1
 8024da6:	e7bc      	b.n	8024d22 <_printf_float+0xd2>
 8024da8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8024dac:	d118      	bne.n	8024de0 <_printf_float+0x190>
 8024dae:	2900      	cmp	r1, #0
 8024db0:	6863      	ldr	r3, [r4, #4]
 8024db2:	dd0b      	ble.n	8024dcc <_printf_float+0x17c>
 8024db4:	6121      	str	r1, [r4, #16]
 8024db6:	b913      	cbnz	r3, 8024dbe <_printf_float+0x16e>
 8024db8:	6822      	ldr	r2, [r4, #0]
 8024dba:	07d0      	lsls	r0, r2, #31
 8024dbc:	d502      	bpl.n	8024dc4 <_printf_float+0x174>
 8024dbe:	3301      	adds	r3, #1
 8024dc0:	440b      	add	r3, r1
 8024dc2:	6123      	str	r3, [r4, #16]
 8024dc4:	2300      	movs	r3, #0
 8024dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8024dc8:	9304      	str	r3, [sp, #16]
 8024dca:	e7de      	b.n	8024d8a <_printf_float+0x13a>
 8024dcc:	b913      	cbnz	r3, 8024dd4 <_printf_float+0x184>
 8024dce:	6822      	ldr	r2, [r4, #0]
 8024dd0:	07d2      	lsls	r2, r2, #31
 8024dd2:	d501      	bpl.n	8024dd8 <_printf_float+0x188>
 8024dd4:	3302      	adds	r3, #2
 8024dd6:	e7f4      	b.n	8024dc2 <_printf_float+0x172>
 8024dd8:	2301      	movs	r3, #1
 8024dda:	e7f2      	b.n	8024dc2 <_printf_float+0x172>
 8024ddc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8024de0:	9b08      	ldr	r3, [sp, #32]
 8024de2:	4299      	cmp	r1, r3
 8024de4:	db05      	blt.n	8024df2 <_printf_float+0x1a2>
 8024de6:	6823      	ldr	r3, [r4, #0]
 8024de8:	6121      	str	r1, [r4, #16]
 8024dea:	07d8      	lsls	r0, r3, #31
 8024dec:	d5ea      	bpl.n	8024dc4 <_printf_float+0x174>
 8024dee:	1c4b      	adds	r3, r1, #1
 8024df0:	e7e7      	b.n	8024dc2 <_printf_float+0x172>
 8024df2:	2900      	cmp	r1, #0
 8024df4:	bfd4      	ite	le
 8024df6:	f1c1 0202 	rsble	r2, r1, #2
 8024dfa:	2201      	movgt	r2, #1
 8024dfc:	4413      	add	r3, r2
 8024dfe:	e7e0      	b.n	8024dc2 <_printf_float+0x172>
 8024e00:	6823      	ldr	r3, [r4, #0]
 8024e02:	055a      	lsls	r2, r3, #21
 8024e04:	d407      	bmi.n	8024e16 <_printf_float+0x1c6>
 8024e06:	6923      	ldr	r3, [r4, #16]
 8024e08:	4642      	mov	r2, r8
 8024e0a:	4631      	mov	r1, r6
 8024e0c:	4628      	mov	r0, r5
 8024e0e:	47b8      	blx	r7
 8024e10:	3001      	adds	r0, #1
 8024e12:	d12a      	bne.n	8024e6a <_printf_float+0x21a>
 8024e14:	e76a      	b.n	8024cec <_printf_float+0x9c>
 8024e16:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8024e1a:	f240 80e2 	bls.w	8024fe2 <_printf_float+0x392>
 8024e1e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024e22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e2a:	d133      	bne.n	8024e94 <_printf_float+0x244>
 8024e2c:	4a38      	ldr	r2, [pc, #224]	; (8024f10 <_printf_float+0x2c0>)
 8024e2e:	2301      	movs	r3, #1
 8024e30:	4631      	mov	r1, r6
 8024e32:	4628      	mov	r0, r5
 8024e34:	47b8      	blx	r7
 8024e36:	3001      	adds	r0, #1
 8024e38:	f43f af58 	beq.w	8024cec <_printf_float+0x9c>
 8024e3c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024e40:	429a      	cmp	r2, r3
 8024e42:	db02      	blt.n	8024e4a <_printf_float+0x1fa>
 8024e44:	6823      	ldr	r3, [r4, #0]
 8024e46:	07d8      	lsls	r0, r3, #31
 8024e48:	d50f      	bpl.n	8024e6a <_printf_float+0x21a>
 8024e4a:	4653      	mov	r3, sl
 8024e4c:	465a      	mov	r2, fp
 8024e4e:	4631      	mov	r1, r6
 8024e50:	4628      	mov	r0, r5
 8024e52:	47b8      	blx	r7
 8024e54:	3001      	adds	r0, #1
 8024e56:	f43f af49 	beq.w	8024cec <_printf_float+0x9c>
 8024e5a:	f04f 0800 	mov.w	r8, #0
 8024e5e:	f104 091a 	add.w	r9, r4, #26
 8024e62:	9b08      	ldr	r3, [sp, #32]
 8024e64:	3b01      	subs	r3, #1
 8024e66:	4543      	cmp	r3, r8
 8024e68:	dc09      	bgt.n	8024e7e <_printf_float+0x22e>
 8024e6a:	6823      	ldr	r3, [r4, #0]
 8024e6c:	079b      	lsls	r3, r3, #30
 8024e6e:	f100 8108 	bmi.w	8025082 <_printf_float+0x432>
 8024e72:	68e0      	ldr	r0, [r4, #12]
 8024e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e76:	4298      	cmp	r0, r3
 8024e78:	bfb8      	it	lt
 8024e7a:	4618      	movlt	r0, r3
 8024e7c:	e738      	b.n	8024cf0 <_printf_float+0xa0>
 8024e7e:	2301      	movs	r3, #1
 8024e80:	464a      	mov	r2, r9
 8024e82:	4631      	mov	r1, r6
 8024e84:	4628      	mov	r0, r5
 8024e86:	47b8      	blx	r7
 8024e88:	3001      	adds	r0, #1
 8024e8a:	f43f af2f 	beq.w	8024cec <_printf_float+0x9c>
 8024e8e:	f108 0801 	add.w	r8, r8, #1
 8024e92:	e7e6      	b.n	8024e62 <_printf_float+0x212>
 8024e94:	9b07      	ldr	r3, [sp, #28]
 8024e96:	2b00      	cmp	r3, #0
 8024e98:	dc3c      	bgt.n	8024f14 <_printf_float+0x2c4>
 8024e9a:	4a1d      	ldr	r2, [pc, #116]	; (8024f10 <_printf_float+0x2c0>)
 8024e9c:	2301      	movs	r3, #1
 8024e9e:	4631      	mov	r1, r6
 8024ea0:	4628      	mov	r0, r5
 8024ea2:	47b8      	blx	r7
 8024ea4:	3001      	adds	r0, #1
 8024ea6:	f43f af21 	beq.w	8024cec <_printf_float+0x9c>
 8024eaa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024eae:	4313      	orrs	r3, r2
 8024eb0:	d102      	bne.n	8024eb8 <_printf_float+0x268>
 8024eb2:	6823      	ldr	r3, [r4, #0]
 8024eb4:	07d9      	lsls	r1, r3, #31
 8024eb6:	d5d8      	bpl.n	8024e6a <_printf_float+0x21a>
 8024eb8:	4653      	mov	r3, sl
 8024eba:	465a      	mov	r2, fp
 8024ebc:	4631      	mov	r1, r6
 8024ebe:	4628      	mov	r0, r5
 8024ec0:	47b8      	blx	r7
 8024ec2:	3001      	adds	r0, #1
 8024ec4:	f43f af12 	beq.w	8024cec <_printf_float+0x9c>
 8024ec8:	f04f 0900 	mov.w	r9, #0
 8024ecc:	f104 0a1a 	add.w	sl, r4, #26
 8024ed0:	9b07      	ldr	r3, [sp, #28]
 8024ed2:	425b      	negs	r3, r3
 8024ed4:	454b      	cmp	r3, r9
 8024ed6:	dc01      	bgt.n	8024edc <_printf_float+0x28c>
 8024ed8:	9b08      	ldr	r3, [sp, #32]
 8024eda:	e795      	b.n	8024e08 <_printf_float+0x1b8>
 8024edc:	2301      	movs	r3, #1
 8024ede:	4652      	mov	r2, sl
 8024ee0:	4631      	mov	r1, r6
 8024ee2:	4628      	mov	r0, r5
 8024ee4:	47b8      	blx	r7
 8024ee6:	3001      	adds	r0, #1
 8024ee8:	f43f af00 	beq.w	8024cec <_printf_float+0x9c>
 8024eec:	f109 0901 	add.w	r9, r9, #1
 8024ef0:	e7ee      	b.n	8024ed0 <_printf_float+0x280>
 8024ef2:	bf00      	nop
 8024ef4:	f3af 8000 	nop.w
 8024ef8:	ffffffff 	.word	0xffffffff
 8024efc:	7fefffff 	.word	0x7fefffff
 8024f00:	08045e9c 	.word	0x08045e9c
 8024f04:	08045ea0 	.word	0x08045ea0
 8024f08:	08045ea8 	.word	0x08045ea8
 8024f0c:	08045ea4 	.word	0x08045ea4
 8024f10:	080464c1 	.word	0x080464c1
 8024f14:	9a08      	ldr	r2, [sp, #32]
 8024f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024f18:	429a      	cmp	r2, r3
 8024f1a:	bfa8      	it	ge
 8024f1c:	461a      	movge	r2, r3
 8024f1e:	2a00      	cmp	r2, #0
 8024f20:	4691      	mov	r9, r2
 8024f22:	dc38      	bgt.n	8024f96 <_printf_float+0x346>
 8024f24:	2300      	movs	r3, #0
 8024f26:	9305      	str	r3, [sp, #20]
 8024f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024f2c:	f104 021a 	add.w	r2, r4, #26
 8024f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024f32:	9905      	ldr	r1, [sp, #20]
 8024f34:	9304      	str	r3, [sp, #16]
 8024f36:	eba3 0309 	sub.w	r3, r3, r9
 8024f3a:	428b      	cmp	r3, r1
 8024f3c:	dc33      	bgt.n	8024fa6 <_printf_float+0x356>
 8024f3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024f42:	429a      	cmp	r2, r3
 8024f44:	db3c      	blt.n	8024fc0 <_printf_float+0x370>
 8024f46:	6823      	ldr	r3, [r4, #0]
 8024f48:	07da      	lsls	r2, r3, #31
 8024f4a:	d439      	bmi.n	8024fc0 <_printf_float+0x370>
 8024f4c:	9b08      	ldr	r3, [sp, #32]
 8024f4e:	9a04      	ldr	r2, [sp, #16]
 8024f50:	9907      	ldr	r1, [sp, #28]
 8024f52:	1a9a      	subs	r2, r3, r2
 8024f54:	eba3 0901 	sub.w	r9, r3, r1
 8024f58:	4591      	cmp	r9, r2
 8024f5a:	bfa8      	it	ge
 8024f5c:	4691      	movge	r9, r2
 8024f5e:	f1b9 0f00 	cmp.w	r9, #0
 8024f62:	dc35      	bgt.n	8024fd0 <_printf_float+0x380>
 8024f64:	f04f 0800 	mov.w	r8, #0
 8024f68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024f6c:	f104 0a1a 	add.w	sl, r4, #26
 8024f70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024f74:	1a9b      	subs	r3, r3, r2
 8024f76:	eba3 0309 	sub.w	r3, r3, r9
 8024f7a:	4543      	cmp	r3, r8
 8024f7c:	f77f af75 	ble.w	8024e6a <_printf_float+0x21a>
 8024f80:	2301      	movs	r3, #1
 8024f82:	4652      	mov	r2, sl
 8024f84:	4631      	mov	r1, r6
 8024f86:	4628      	mov	r0, r5
 8024f88:	47b8      	blx	r7
 8024f8a:	3001      	adds	r0, #1
 8024f8c:	f43f aeae 	beq.w	8024cec <_printf_float+0x9c>
 8024f90:	f108 0801 	add.w	r8, r8, #1
 8024f94:	e7ec      	b.n	8024f70 <_printf_float+0x320>
 8024f96:	4613      	mov	r3, r2
 8024f98:	4631      	mov	r1, r6
 8024f9a:	4642      	mov	r2, r8
 8024f9c:	4628      	mov	r0, r5
 8024f9e:	47b8      	blx	r7
 8024fa0:	3001      	adds	r0, #1
 8024fa2:	d1bf      	bne.n	8024f24 <_printf_float+0x2d4>
 8024fa4:	e6a2      	b.n	8024cec <_printf_float+0x9c>
 8024fa6:	2301      	movs	r3, #1
 8024fa8:	4631      	mov	r1, r6
 8024faa:	4628      	mov	r0, r5
 8024fac:	9204      	str	r2, [sp, #16]
 8024fae:	47b8      	blx	r7
 8024fb0:	3001      	adds	r0, #1
 8024fb2:	f43f ae9b 	beq.w	8024cec <_printf_float+0x9c>
 8024fb6:	9b05      	ldr	r3, [sp, #20]
 8024fb8:	9a04      	ldr	r2, [sp, #16]
 8024fba:	3301      	adds	r3, #1
 8024fbc:	9305      	str	r3, [sp, #20]
 8024fbe:	e7b7      	b.n	8024f30 <_printf_float+0x2e0>
 8024fc0:	4653      	mov	r3, sl
 8024fc2:	465a      	mov	r2, fp
 8024fc4:	4631      	mov	r1, r6
 8024fc6:	4628      	mov	r0, r5
 8024fc8:	47b8      	blx	r7
 8024fca:	3001      	adds	r0, #1
 8024fcc:	d1be      	bne.n	8024f4c <_printf_float+0x2fc>
 8024fce:	e68d      	b.n	8024cec <_printf_float+0x9c>
 8024fd0:	9a04      	ldr	r2, [sp, #16]
 8024fd2:	464b      	mov	r3, r9
 8024fd4:	4442      	add	r2, r8
 8024fd6:	4631      	mov	r1, r6
 8024fd8:	4628      	mov	r0, r5
 8024fda:	47b8      	blx	r7
 8024fdc:	3001      	adds	r0, #1
 8024fde:	d1c1      	bne.n	8024f64 <_printf_float+0x314>
 8024fe0:	e684      	b.n	8024cec <_printf_float+0x9c>
 8024fe2:	9a08      	ldr	r2, [sp, #32]
 8024fe4:	2a01      	cmp	r2, #1
 8024fe6:	dc01      	bgt.n	8024fec <_printf_float+0x39c>
 8024fe8:	07db      	lsls	r3, r3, #31
 8024fea:	d537      	bpl.n	802505c <_printf_float+0x40c>
 8024fec:	2301      	movs	r3, #1
 8024fee:	4642      	mov	r2, r8
 8024ff0:	4631      	mov	r1, r6
 8024ff2:	4628      	mov	r0, r5
 8024ff4:	47b8      	blx	r7
 8024ff6:	3001      	adds	r0, #1
 8024ff8:	f43f ae78 	beq.w	8024cec <_printf_float+0x9c>
 8024ffc:	4653      	mov	r3, sl
 8024ffe:	465a      	mov	r2, fp
 8025000:	4631      	mov	r1, r6
 8025002:	4628      	mov	r0, r5
 8025004:	47b8      	blx	r7
 8025006:	3001      	adds	r0, #1
 8025008:	f43f ae70 	beq.w	8024cec <_printf_float+0x9c>
 802500c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025010:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025018:	d01b      	beq.n	8025052 <_printf_float+0x402>
 802501a:	9b08      	ldr	r3, [sp, #32]
 802501c:	f108 0201 	add.w	r2, r8, #1
 8025020:	3b01      	subs	r3, #1
 8025022:	4631      	mov	r1, r6
 8025024:	4628      	mov	r0, r5
 8025026:	47b8      	blx	r7
 8025028:	3001      	adds	r0, #1
 802502a:	d10e      	bne.n	802504a <_printf_float+0x3fa>
 802502c:	e65e      	b.n	8024cec <_printf_float+0x9c>
 802502e:	2301      	movs	r3, #1
 8025030:	464a      	mov	r2, r9
 8025032:	4631      	mov	r1, r6
 8025034:	4628      	mov	r0, r5
 8025036:	47b8      	blx	r7
 8025038:	3001      	adds	r0, #1
 802503a:	f43f ae57 	beq.w	8024cec <_printf_float+0x9c>
 802503e:	f108 0801 	add.w	r8, r8, #1
 8025042:	9b08      	ldr	r3, [sp, #32]
 8025044:	3b01      	subs	r3, #1
 8025046:	4543      	cmp	r3, r8
 8025048:	dcf1      	bgt.n	802502e <_printf_float+0x3de>
 802504a:	9b04      	ldr	r3, [sp, #16]
 802504c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025050:	e6db      	b.n	8024e0a <_printf_float+0x1ba>
 8025052:	f04f 0800 	mov.w	r8, #0
 8025056:	f104 091a 	add.w	r9, r4, #26
 802505a:	e7f2      	b.n	8025042 <_printf_float+0x3f2>
 802505c:	2301      	movs	r3, #1
 802505e:	4642      	mov	r2, r8
 8025060:	e7df      	b.n	8025022 <_printf_float+0x3d2>
 8025062:	2301      	movs	r3, #1
 8025064:	464a      	mov	r2, r9
 8025066:	4631      	mov	r1, r6
 8025068:	4628      	mov	r0, r5
 802506a:	47b8      	blx	r7
 802506c:	3001      	adds	r0, #1
 802506e:	f43f ae3d 	beq.w	8024cec <_printf_float+0x9c>
 8025072:	f108 0801 	add.w	r8, r8, #1
 8025076:	68e3      	ldr	r3, [r4, #12]
 8025078:	9909      	ldr	r1, [sp, #36]	; 0x24
 802507a:	1a5b      	subs	r3, r3, r1
 802507c:	4543      	cmp	r3, r8
 802507e:	dcf0      	bgt.n	8025062 <_printf_float+0x412>
 8025080:	e6f7      	b.n	8024e72 <_printf_float+0x222>
 8025082:	f04f 0800 	mov.w	r8, #0
 8025086:	f104 0919 	add.w	r9, r4, #25
 802508a:	e7f4      	b.n	8025076 <_printf_float+0x426>

0802508c <_printf_common>:
 802508c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025090:	4616      	mov	r6, r2
 8025092:	4699      	mov	r9, r3
 8025094:	688a      	ldr	r2, [r1, #8]
 8025096:	690b      	ldr	r3, [r1, #16]
 8025098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802509c:	4293      	cmp	r3, r2
 802509e:	bfb8      	it	lt
 80250a0:	4613      	movlt	r3, r2
 80250a2:	6033      	str	r3, [r6, #0]
 80250a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80250a8:	4607      	mov	r7, r0
 80250aa:	460c      	mov	r4, r1
 80250ac:	b10a      	cbz	r2, 80250b2 <_printf_common+0x26>
 80250ae:	3301      	adds	r3, #1
 80250b0:	6033      	str	r3, [r6, #0]
 80250b2:	6823      	ldr	r3, [r4, #0]
 80250b4:	0699      	lsls	r1, r3, #26
 80250b6:	bf42      	ittt	mi
 80250b8:	6833      	ldrmi	r3, [r6, #0]
 80250ba:	3302      	addmi	r3, #2
 80250bc:	6033      	strmi	r3, [r6, #0]
 80250be:	6825      	ldr	r5, [r4, #0]
 80250c0:	f015 0506 	ands.w	r5, r5, #6
 80250c4:	d106      	bne.n	80250d4 <_printf_common+0x48>
 80250c6:	f104 0a19 	add.w	sl, r4, #25
 80250ca:	68e3      	ldr	r3, [r4, #12]
 80250cc:	6832      	ldr	r2, [r6, #0]
 80250ce:	1a9b      	subs	r3, r3, r2
 80250d0:	42ab      	cmp	r3, r5
 80250d2:	dc26      	bgt.n	8025122 <_printf_common+0x96>
 80250d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80250d8:	1e13      	subs	r3, r2, #0
 80250da:	6822      	ldr	r2, [r4, #0]
 80250dc:	bf18      	it	ne
 80250de:	2301      	movne	r3, #1
 80250e0:	0692      	lsls	r2, r2, #26
 80250e2:	d42b      	bmi.n	802513c <_printf_common+0xb0>
 80250e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80250e8:	4649      	mov	r1, r9
 80250ea:	4638      	mov	r0, r7
 80250ec:	47c0      	blx	r8
 80250ee:	3001      	adds	r0, #1
 80250f0:	d01e      	beq.n	8025130 <_printf_common+0xa4>
 80250f2:	6823      	ldr	r3, [r4, #0]
 80250f4:	68e5      	ldr	r5, [r4, #12]
 80250f6:	6832      	ldr	r2, [r6, #0]
 80250f8:	f003 0306 	and.w	r3, r3, #6
 80250fc:	2b04      	cmp	r3, #4
 80250fe:	bf08      	it	eq
 8025100:	1aad      	subeq	r5, r5, r2
 8025102:	68a3      	ldr	r3, [r4, #8]
 8025104:	6922      	ldr	r2, [r4, #16]
 8025106:	bf0c      	ite	eq
 8025108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802510c:	2500      	movne	r5, #0
 802510e:	4293      	cmp	r3, r2
 8025110:	bfc4      	itt	gt
 8025112:	1a9b      	subgt	r3, r3, r2
 8025114:	18ed      	addgt	r5, r5, r3
 8025116:	2600      	movs	r6, #0
 8025118:	341a      	adds	r4, #26
 802511a:	42b5      	cmp	r5, r6
 802511c:	d11a      	bne.n	8025154 <_printf_common+0xc8>
 802511e:	2000      	movs	r0, #0
 8025120:	e008      	b.n	8025134 <_printf_common+0xa8>
 8025122:	2301      	movs	r3, #1
 8025124:	4652      	mov	r2, sl
 8025126:	4649      	mov	r1, r9
 8025128:	4638      	mov	r0, r7
 802512a:	47c0      	blx	r8
 802512c:	3001      	adds	r0, #1
 802512e:	d103      	bne.n	8025138 <_printf_common+0xac>
 8025130:	f04f 30ff 	mov.w	r0, #4294967295
 8025134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025138:	3501      	adds	r5, #1
 802513a:	e7c6      	b.n	80250ca <_printf_common+0x3e>
 802513c:	18e1      	adds	r1, r4, r3
 802513e:	1c5a      	adds	r2, r3, #1
 8025140:	2030      	movs	r0, #48	; 0x30
 8025142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025146:	4422      	add	r2, r4
 8025148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802514c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025150:	3302      	adds	r3, #2
 8025152:	e7c7      	b.n	80250e4 <_printf_common+0x58>
 8025154:	2301      	movs	r3, #1
 8025156:	4622      	mov	r2, r4
 8025158:	4649      	mov	r1, r9
 802515a:	4638      	mov	r0, r7
 802515c:	47c0      	blx	r8
 802515e:	3001      	adds	r0, #1
 8025160:	d0e6      	beq.n	8025130 <_printf_common+0xa4>
 8025162:	3601      	adds	r6, #1
 8025164:	e7d9      	b.n	802511a <_printf_common+0x8e>
 8025166:	Address 0x0000000008025166 is out of bounds.


08025168 <_printf_i>:
 8025168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802516c:	7e0f      	ldrb	r7, [r1, #24]
 802516e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025170:	2f78      	cmp	r7, #120	; 0x78
 8025172:	4691      	mov	r9, r2
 8025174:	4680      	mov	r8, r0
 8025176:	460c      	mov	r4, r1
 8025178:	469a      	mov	sl, r3
 802517a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802517e:	d807      	bhi.n	8025190 <_printf_i+0x28>
 8025180:	2f62      	cmp	r7, #98	; 0x62
 8025182:	d80a      	bhi.n	802519a <_printf_i+0x32>
 8025184:	2f00      	cmp	r7, #0
 8025186:	f000 80d8 	beq.w	802533a <_printf_i+0x1d2>
 802518a:	2f58      	cmp	r7, #88	; 0x58
 802518c:	f000 80a3 	beq.w	80252d6 <_printf_i+0x16e>
 8025190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025198:	e03a      	b.n	8025210 <_printf_i+0xa8>
 802519a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802519e:	2b15      	cmp	r3, #21
 80251a0:	d8f6      	bhi.n	8025190 <_printf_i+0x28>
 80251a2:	a101      	add	r1, pc, #4	; (adr r1, 80251a8 <_printf_i+0x40>)
 80251a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80251a8:	08025201 	.word	0x08025201
 80251ac:	08025215 	.word	0x08025215
 80251b0:	08025191 	.word	0x08025191
 80251b4:	08025191 	.word	0x08025191
 80251b8:	08025191 	.word	0x08025191
 80251bc:	08025191 	.word	0x08025191
 80251c0:	08025215 	.word	0x08025215
 80251c4:	08025191 	.word	0x08025191
 80251c8:	08025191 	.word	0x08025191
 80251cc:	08025191 	.word	0x08025191
 80251d0:	08025191 	.word	0x08025191
 80251d4:	08025321 	.word	0x08025321
 80251d8:	08025245 	.word	0x08025245
 80251dc:	08025303 	.word	0x08025303
 80251e0:	08025191 	.word	0x08025191
 80251e4:	08025191 	.word	0x08025191
 80251e8:	08025343 	.word	0x08025343
 80251ec:	08025191 	.word	0x08025191
 80251f0:	08025245 	.word	0x08025245
 80251f4:	08025191 	.word	0x08025191
 80251f8:	08025191 	.word	0x08025191
 80251fc:	0802530b 	.word	0x0802530b
 8025200:	682b      	ldr	r3, [r5, #0]
 8025202:	1d1a      	adds	r2, r3, #4
 8025204:	681b      	ldr	r3, [r3, #0]
 8025206:	602a      	str	r2, [r5, #0]
 8025208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802520c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025210:	2301      	movs	r3, #1
 8025212:	e0a3      	b.n	802535c <_printf_i+0x1f4>
 8025214:	6820      	ldr	r0, [r4, #0]
 8025216:	6829      	ldr	r1, [r5, #0]
 8025218:	0606      	lsls	r6, r0, #24
 802521a:	f101 0304 	add.w	r3, r1, #4
 802521e:	d50a      	bpl.n	8025236 <_printf_i+0xce>
 8025220:	680e      	ldr	r6, [r1, #0]
 8025222:	602b      	str	r3, [r5, #0]
 8025224:	2e00      	cmp	r6, #0
 8025226:	da03      	bge.n	8025230 <_printf_i+0xc8>
 8025228:	232d      	movs	r3, #45	; 0x2d
 802522a:	4276      	negs	r6, r6
 802522c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025230:	485e      	ldr	r0, [pc, #376]	; (80253ac <_printf_i+0x244>)
 8025232:	230a      	movs	r3, #10
 8025234:	e019      	b.n	802526a <_printf_i+0x102>
 8025236:	680e      	ldr	r6, [r1, #0]
 8025238:	602b      	str	r3, [r5, #0]
 802523a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802523e:	bf18      	it	ne
 8025240:	b236      	sxthne	r6, r6
 8025242:	e7ef      	b.n	8025224 <_printf_i+0xbc>
 8025244:	682b      	ldr	r3, [r5, #0]
 8025246:	6820      	ldr	r0, [r4, #0]
 8025248:	1d19      	adds	r1, r3, #4
 802524a:	6029      	str	r1, [r5, #0]
 802524c:	0601      	lsls	r1, r0, #24
 802524e:	d501      	bpl.n	8025254 <_printf_i+0xec>
 8025250:	681e      	ldr	r6, [r3, #0]
 8025252:	e002      	b.n	802525a <_printf_i+0xf2>
 8025254:	0646      	lsls	r6, r0, #25
 8025256:	d5fb      	bpl.n	8025250 <_printf_i+0xe8>
 8025258:	881e      	ldrh	r6, [r3, #0]
 802525a:	4854      	ldr	r0, [pc, #336]	; (80253ac <_printf_i+0x244>)
 802525c:	2f6f      	cmp	r7, #111	; 0x6f
 802525e:	bf0c      	ite	eq
 8025260:	2308      	moveq	r3, #8
 8025262:	230a      	movne	r3, #10
 8025264:	2100      	movs	r1, #0
 8025266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802526a:	6865      	ldr	r5, [r4, #4]
 802526c:	60a5      	str	r5, [r4, #8]
 802526e:	2d00      	cmp	r5, #0
 8025270:	bfa2      	ittt	ge
 8025272:	6821      	ldrge	r1, [r4, #0]
 8025274:	f021 0104 	bicge.w	r1, r1, #4
 8025278:	6021      	strge	r1, [r4, #0]
 802527a:	b90e      	cbnz	r6, 8025280 <_printf_i+0x118>
 802527c:	2d00      	cmp	r5, #0
 802527e:	d04d      	beq.n	802531c <_printf_i+0x1b4>
 8025280:	4615      	mov	r5, r2
 8025282:	fbb6 f1f3 	udiv	r1, r6, r3
 8025286:	fb03 6711 	mls	r7, r3, r1, r6
 802528a:	5dc7      	ldrb	r7, [r0, r7]
 802528c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025290:	4637      	mov	r7, r6
 8025292:	42bb      	cmp	r3, r7
 8025294:	460e      	mov	r6, r1
 8025296:	d9f4      	bls.n	8025282 <_printf_i+0x11a>
 8025298:	2b08      	cmp	r3, #8
 802529a:	d10b      	bne.n	80252b4 <_printf_i+0x14c>
 802529c:	6823      	ldr	r3, [r4, #0]
 802529e:	07de      	lsls	r6, r3, #31
 80252a0:	d508      	bpl.n	80252b4 <_printf_i+0x14c>
 80252a2:	6923      	ldr	r3, [r4, #16]
 80252a4:	6861      	ldr	r1, [r4, #4]
 80252a6:	4299      	cmp	r1, r3
 80252a8:	bfde      	ittt	le
 80252aa:	2330      	movle	r3, #48	; 0x30
 80252ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80252b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80252b4:	1b52      	subs	r2, r2, r5
 80252b6:	6122      	str	r2, [r4, #16]
 80252b8:	f8cd a000 	str.w	sl, [sp]
 80252bc:	464b      	mov	r3, r9
 80252be:	aa03      	add	r2, sp, #12
 80252c0:	4621      	mov	r1, r4
 80252c2:	4640      	mov	r0, r8
 80252c4:	f7ff fee2 	bl	802508c <_printf_common>
 80252c8:	3001      	adds	r0, #1
 80252ca:	d14c      	bne.n	8025366 <_printf_i+0x1fe>
 80252cc:	f04f 30ff 	mov.w	r0, #4294967295
 80252d0:	b004      	add	sp, #16
 80252d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80252d6:	4835      	ldr	r0, [pc, #212]	; (80253ac <_printf_i+0x244>)
 80252d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80252dc:	6829      	ldr	r1, [r5, #0]
 80252de:	6823      	ldr	r3, [r4, #0]
 80252e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80252e4:	6029      	str	r1, [r5, #0]
 80252e6:	061d      	lsls	r5, r3, #24
 80252e8:	d514      	bpl.n	8025314 <_printf_i+0x1ac>
 80252ea:	07df      	lsls	r7, r3, #31
 80252ec:	bf44      	itt	mi
 80252ee:	f043 0320 	orrmi.w	r3, r3, #32
 80252f2:	6023      	strmi	r3, [r4, #0]
 80252f4:	b91e      	cbnz	r6, 80252fe <_printf_i+0x196>
 80252f6:	6823      	ldr	r3, [r4, #0]
 80252f8:	f023 0320 	bic.w	r3, r3, #32
 80252fc:	6023      	str	r3, [r4, #0]
 80252fe:	2310      	movs	r3, #16
 8025300:	e7b0      	b.n	8025264 <_printf_i+0xfc>
 8025302:	6823      	ldr	r3, [r4, #0]
 8025304:	f043 0320 	orr.w	r3, r3, #32
 8025308:	6023      	str	r3, [r4, #0]
 802530a:	2378      	movs	r3, #120	; 0x78
 802530c:	4828      	ldr	r0, [pc, #160]	; (80253b0 <_printf_i+0x248>)
 802530e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025312:	e7e3      	b.n	80252dc <_printf_i+0x174>
 8025314:	0659      	lsls	r1, r3, #25
 8025316:	bf48      	it	mi
 8025318:	b2b6      	uxthmi	r6, r6
 802531a:	e7e6      	b.n	80252ea <_printf_i+0x182>
 802531c:	4615      	mov	r5, r2
 802531e:	e7bb      	b.n	8025298 <_printf_i+0x130>
 8025320:	682b      	ldr	r3, [r5, #0]
 8025322:	6826      	ldr	r6, [r4, #0]
 8025324:	6961      	ldr	r1, [r4, #20]
 8025326:	1d18      	adds	r0, r3, #4
 8025328:	6028      	str	r0, [r5, #0]
 802532a:	0635      	lsls	r5, r6, #24
 802532c:	681b      	ldr	r3, [r3, #0]
 802532e:	d501      	bpl.n	8025334 <_printf_i+0x1cc>
 8025330:	6019      	str	r1, [r3, #0]
 8025332:	e002      	b.n	802533a <_printf_i+0x1d2>
 8025334:	0670      	lsls	r0, r6, #25
 8025336:	d5fb      	bpl.n	8025330 <_printf_i+0x1c8>
 8025338:	8019      	strh	r1, [r3, #0]
 802533a:	2300      	movs	r3, #0
 802533c:	6123      	str	r3, [r4, #16]
 802533e:	4615      	mov	r5, r2
 8025340:	e7ba      	b.n	80252b8 <_printf_i+0x150>
 8025342:	682b      	ldr	r3, [r5, #0]
 8025344:	1d1a      	adds	r2, r3, #4
 8025346:	602a      	str	r2, [r5, #0]
 8025348:	681d      	ldr	r5, [r3, #0]
 802534a:	6862      	ldr	r2, [r4, #4]
 802534c:	2100      	movs	r1, #0
 802534e:	4628      	mov	r0, r5
 8025350:	f7da ff8e 	bl	8000270 <memchr>
 8025354:	b108      	cbz	r0, 802535a <_printf_i+0x1f2>
 8025356:	1b40      	subs	r0, r0, r5
 8025358:	6060      	str	r0, [r4, #4]
 802535a:	6863      	ldr	r3, [r4, #4]
 802535c:	6123      	str	r3, [r4, #16]
 802535e:	2300      	movs	r3, #0
 8025360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025364:	e7a8      	b.n	80252b8 <_printf_i+0x150>
 8025366:	6923      	ldr	r3, [r4, #16]
 8025368:	462a      	mov	r2, r5
 802536a:	4649      	mov	r1, r9
 802536c:	4640      	mov	r0, r8
 802536e:	47d0      	blx	sl
 8025370:	3001      	adds	r0, #1
 8025372:	d0ab      	beq.n	80252cc <_printf_i+0x164>
 8025374:	6823      	ldr	r3, [r4, #0]
 8025376:	079b      	lsls	r3, r3, #30
 8025378:	d413      	bmi.n	80253a2 <_printf_i+0x23a>
 802537a:	68e0      	ldr	r0, [r4, #12]
 802537c:	9b03      	ldr	r3, [sp, #12]
 802537e:	4298      	cmp	r0, r3
 8025380:	bfb8      	it	lt
 8025382:	4618      	movlt	r0, r3
 8025384:	e7a4      	b.n	80252d0 <_printf_i+0x168>
 8025386:	2301      	movs	r3, #1
 8025388:	4632      	mov	r2, r6
 802538a:	4649      	mov	r1, r9
 802538c:	4640      	mov	r0, r8
 802538e:	47d0      	blx	sl
 8025390:	3001      	adds	r0, #1
 8025392:	d09b      	beq.n	80252cc <_printf_i+0x164>
 8025394:	3501      	adds	r5, #1
 8025396:	68e3      	ldr	r3, [r4, #12]
 8025398:	9903      	ldr	r1, [sp, #12]
 802539a:	1a5b      	subs	r3, r3, r1
 802539c:	42ab      	cmp	r3, r5
 802539e:	dcf2      	bgt.n	8025386 <_printf_i+0x21e>
 80253a0:	e7eb      	b.n	802537a <_printf_i+0x212>
 80253a2:	2500      	movs	r5, #0
 80253a4:	f104 0619 	add.w	r6, r4, #25
 80253a8:	e7f5      	b.n	8025396 <_printf_i+0x22e>
 80253aa:	bf00      	nop
 80253ac:	08045eac 	.word	0x08045eac
 80253b0:	08045ebd 	.word	0x08045ebd

080253b4 <iprintf>:
 80253b4:	b40f      	push	{r0, r1, r2, r3}
 80253b6:	4b0a      	ldr	r3, [pc, #40]	; (80253e0 <iprintf+0x2c>)
 80253b8:	b513      	push	{r0, r1, r4, lr}
 80253ba:	681c      	ldr	r4, [r3, #0]
 80253bc:	b124      	cbz	r4, 80253c8 <iprintf+0x14>
 80253be:	69a3      	ldr	r3, [r4, #24]
 80253c0:	b913      	cbnz	r3, 80253c8 <iprintf+0x14>
 80253c2:	4620      	mov	r0, r4
 80253c4:	f7fe fe36 	bl	8024034 <__sinit>
 80253c8:	ab05      	add	r3, sp, #20
 80253ca:	9a04      	ldr	r2, [sp, #16]
 80253cc:	68a1      	ldr	r1, [r4, #8]
 80253ce:	9301      	str	r3, [sp, #4]
 80253d0:	4620      	mov	r0, r4
 80253d2:	f003 fbc7 	bl	8028b64 <_vfiprintf_r>
 80253d6:	b002      	add	sp, #8
 80253d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253dc:	b004      	add	sp, #16
 80253de:	4770      	bx	lr
 80253e0:	20000490 	.word	0x20000490

080253e4 <putchar>:
 80253e4:	4b09      	ldr	r3, [pc, #36]	; (802540c <putchar+0x28>)
 80253e6:	b513      	push	{r0, r1, r4, lr}
 80253e8:	681c      	ldr	r4, [r3, #0]
 80253ea:	4601      	mov	r1, r0
 80253ec:	b134      	cbz	r4, 80253fc <putchar+0x18>
 80253ee:	69a3      	ldr	r3, [r4, #24]
 80253f0:	b923      	cbnz	r3, 80253fc <putchar+0x18>
 80253f2:	9001      	str	r0, [sp, #4]
 80253f4:	4620      	mov	r0, r4
 80253f6:	f7fe fe1d 	bl	8024034 <__sinit>
 80253fa:	9901      	ldr	r1, [sp, #4]
 80253fc:	68a2      	ldr	r2, [r4, #8]
 80253fe:	4620      	mov	r0, r4
 8025400:	b002      	add	sp, #8
 8025402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025406:	f003 be2f 	b.w	8029068 <_putc_r>
 802540a:	bf00      	nop
 802540c:	20000490 	.word	0x20000490

08025410 <_puts_r>:
 8025410:	b570      	push	{r4, r5, r6, lr}
 8025412:	460e      	mov	r6, r1
 8025414:	4605      	mov	r5, r0
 8025416:	b118      	cbz	r0, 8025420 <_puts_r+0x10>
 8025418:	6983      	ldr	r3, [r0, #24]
 802541a:	b90b      	cbnz	r3, 8025420 <_puts_r+0x10>
 802541c:	f7fe fe0a 	bl	8024034 <__sinit>
 8025420:	69ab      	ldr	r3, [r5, #24]
 8025422:	68ac      	ldr	r4, [r5, #8]
 8025424:	b913      	cbnz	r3, 802542c <_puts_r+0x1c>
 8025426:	4628      	mov	r0, r5
 8025428:	f7fe fe04 	bl	8024034 <__sinit>
 802542c:	4b2c      	ldr	r3, [pc, #176]	; (80254e0 <_puts_r+0xd0>)
 802542e:	429c      	cmp	r4, r3
 8025430:	d120      	bne.n	8025474 <_puts_r+0x64>
 8025432:	686c      	ldr	r4, [r5, #4]
 8025434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025436:	07db      	lsls	r3, r3, #31
 8025438:	d405      	bmi.n	8025446 <_puts_r+0x36>
 802543a:	89a3      	ldrh	r3, [r4, #12]
 802543c:	0598      	lsls	r0, r3, #22
 802543e:	d402      	bmi.n	8025446 <_puts_r+0x36>
 8025440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025442:	f7fe ffcd 	bl	80243e0 <__retarget_lock_acquire_recursive>
 8025446:	89a3      	ldrh	r3, [r4, #12]
 8025448:	0719      	lsls	r1, r3, #28
 802544a:	d51d      	bpl.n	8025488 <_puts_r+0x78>
 802544c:	6923      	ldr	r3, [r4, #16]
 802544e:	b1db      	cbz	r3, 8025488 <_puts_r+0x78>
 8025450:	3e01      	subs	r6, #1
 8025452:	68a3      	ldr	r3, [r4, #8]
 8025454:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025458:	3b01      	subs	r3, #1
 802545a:	60a3      	str	r3, [r4, #8]
 802545c:	bb39      	cbnz	r1, 80254ae <_puts_r+0x9e>
 802545e:	2b00      	cmp	r3, #0
 8025460:	da38      	bge.n	80254d4 <_puts_r+0xc4>
 8025462:	4622      	mov	r2, r4
 8025464:	210a      	movs	r1, #10
 8025466:	4628      	mov	r0, r5
 8025468:	f001 fad4 	bl	8026a14 <__swbuf_r>
 802546c:	3001      	adds	r0, #1
 802546e:	d011      	beq.n	8025494 <_puts_r+0x84>
 8025470:	250a      	movs	r5, #10
 8025472:	e011      	b.n	8025498 <_puts_r+0x88>
 8025474:	4b1b      	ldr	r3, [pc, #108]	; (80254e4 <_puts_r+0xd4>)
 8025476:	429c      	cmp	r4, r3
 8025478:	d101      	bne.n	802547e <_puts_r+0x6e>
 802547a:	68ac      	ldr	r4, [r5, #8]
 802547c:	e7da      	b.n	8025434 <_puts_r+0x24>
 802547e:	4b1a      	ldr	r3, [pc, #104]	; (80254e8 <_puts_r+0xd8>)
 8025480:	429c      	cmp	r4, r3
 8025482:	bf08      	it	eq
 8025484:	68ec      	ldreq	r4, [r5, #12]
 8025486:	e7d5      	b.n	8025434 <_puts_r+0x24>
 8025488:	4621      	mov	r1, r4
 802548a:	4628      	mov	r0, r5
 802548c:	f001 fb26 	bl	8026adc <__swsetup_r>
 8025490:	2800      	cmp	r0, #0
 8025492:	d0dd      	beq.n	8025450 <_puts_r+0x40>
 8025494:	f04f 35ff 	mov.w	r5, #4294967295
 8025498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802549a:	07da      	lsls	r2, r3, #31
 802549c:	d405      	bmi.n	80254aa <_puts_r+0x9a>
 802549e:	89a3      	ldrh	r3, [r4, #12]
 80254a0:	059b      	lsls	r3, r3, #22
 80254a2:	d402      	bmi.n	80254aa <_puts_r+0x9a>
 80254a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80254a6:	f7fe ff9d 	bl	80243e4 <__retarget_lock_release_recursive>
 80254aa:	4628      	mov	r0, r5
 80254ac:	bd70      	pop	{r4, r5, r6, pc}
 80254ae:	2b00      	cmp	r3, #0
 80254b0:	da04      	bge.n	80254bc <_puts_r+0xac>
 80254b2:	69a2      	ldr	r2, [r4, #24]
 80254b4:	429a      	cmp	r2, r3
 80254b6:	dc06      	bgt.n	80254c6 <_puts_r+0xb6>
 80254b8:	290a      	cmp	r1, #10
 80254ba:	d004      	beq.n	80254c6 <_puts_r+0xb6>
 80254bc:	6823      	ldr	r3, [r4, #0]
 80254be:	1c5a      	adds	r2, r3, #1
 80254c0:	6022      	str	r2, [r4, #0]
 80254c2:	7019      	strb	r1, [r3, #0]
 80254c4:	e7c5      	b.n	8025452 <_puts_r+0x42>
 80254c6:	4622      	mov	r2, r4
 80254c8:	4628      	mov	r0, r5
 80254ca:	f001 faa3 	bl	8026a14 <__swbuf_r>
 80254ce:	3001      	adds	r0, #1
 80254d0:	d1bf      	bne.n	8025452 <_puts_r+0x42>
 80254d2:	e7df      	b.n	8025494 <_puts_r+0x84>
 80254d4:	6823      	ldr	r3, [r4, #0]
 80254d6:	250a      	movs	r5, #10
 80254d8:	1c5a      	adds	r2, r3, #1
 80254da:	6022      	str	r2, [r4, #0]
 80254dc:	701d      	strb	r5, [r3, #0]
 80254de:	e7db      	b.n	8025498 <_puts_r+0x88>
 80254e0:	08045d24 	.word	0x08045d24
 80254e4:	08045d44 	.word	0x08045d44
 80254e8:	08045d04 	.word	0x08045d04

080254ec <puts>:
 80254ec:	4b02      	ldr	r3, [pc, #8]	; (80254f8 <puts+0xc>)
 80254ee:	4601      	mov	r1, r0
 80254f0:	6818      	ldr	r0, [r3, #0]
 80254f2:	f7ff bf8d 	b.w	8025410 <_puts_r>
 80254f6:	bf00      	nop
 80254f8:	20000490 	.word	0x20000490

080254fc <rand>:
 80254fc:	4b16      	ldr	r3, [pc, #88]	; (8025558 <rand+0x5c>)
 80254fe:	b510      	push	{r4, lr}
 8025500:	681c      	ldr	r4, [r3, #0]
 8025502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025504:	b9b3      	cbnz	r3, 8025534 <rand+0x38>
 8025506:	2018      	movs	r0, #24
 8025508:	f7fe ff6e 	bl	80243e8 <malloc>
 802550c:	63a0      	str	r0, [r4, #56]	; 0x38
 802550e:	b928      	cbnz	r0, 802551c <rand+0x20>
 8025510:	4602      	mov	r2, r0
 8025512:	4b12      	ldr	r3, [pc, #72]	; (802555c <rand+0x60>)
 8025514:	4812      	ldr	r0, [pc, #72]	; (8025560 <rand+0x64>)
 8025516:	214e      	movs	r1, #78	; 0x4e
 8025518:	f001 fb9a 	bl	8026c50 <__assert_func>
 802551c:	4a11      	ldr	r2, [pc, #68]	; (8025564 <rand+0x68>)
 802551e:	4b12      	ldr	r3, [pc, #72]	; (8025568 <rand+0x6c>)
 8025520:	e9c0 2300 	strd	r2, r3, [r0]
 8025524:	4b11      	ldr	r3, [pc, #68]	; (802556c <rand+0x70>)
 8025526:	6083      	str	r3, [r0, #8]
 8025528:	230b      	movs	r3, #11
 802552a:	8183      	strh	r3, [r0, #12]
 802552c:	2201      	movs	r2, #1
 802552e:	2300      	movs	r3, #0
 8025530:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8025534:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8025536:	4a0e      	ldr	r2, [pc, #56]	; (8025570 <rand+0x74>)
 8025538:	6920      	ldr	r0, [r4, #16]
 802553a:	6963      	ldr	r3, [r4, #20]
 802553c:	490d      	ldr	r1, [pc, #52]	; (8025574 <rand+0x78>)
 802553e:	4342      	muls	r2, r0
 8025540:	fb01 2203 	mla	r2, r1, r3, r2
 8025544:	fba0 0101 	umull	r0, r1, r0, r1
 8025548:	1c43      	adds	r3, r0, #1
 802554a:	eb42 0001 	adc.w	r0, r2, r1
 802554e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8025552:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025556:	bd10      	pop	{r4, pc}
 8025558:	20000490 	.word	0x20000490
 802555c:	08045d68 	.word	0x08045d68
 8025560:	08045ece 	.word	0x08045ece
 8025564:	abcd330e 	.word	0xabcd330e
 8025568:	e66d1234 	.word	0xe66d1234
 802556c:	0005deec 	.word	0x0005deec
 8025570:	5851f42d 	.word	0x5851f42d
 8025574:	4c957f2d 	.word	0x4c957f2d

08025578 <cleanup_glue>:
 8025578:	b538      	push	{r3, r4, r5, lr}
 802557a:	460c      	mov	r4, r1
 802557c:	6809      	ldr	r1, [r1, #0]
 802557e:	4605      	mov	r5, r0
 8025580:	b109      	cbz	r1, 8025586 <cleanup_glue+0xe>
 8025582:	f7ff fff9 	bl	8025578 <cleanup_glue>
 8025586:	4621      	mov	r1, r4
 8025588:	4628      	mov	r0, r5
 802558a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802558e:	f7ff b9ed 	b.w	802496c <_free_r>
 8025592:	Address 0x0000000008025592 is out of bounds.


08025594 <_reclaim_reent>:
 8025594:	4b2c      	ldr	r3, [pc, #176]	; (8025648 <_reclaim_reent+0xb4>)
 8025596:	681b      	ldr	r3, [r3, #0]
 8025598:	4283      	cmp	r3, r0
 802559a:	b570      	push	{r4, r5, r6, lr}
 802559c:	4604      	mov	r4, r0
 802559e:	d051      	beq.n	8025644 <_reclaim_reent+0xb0>
 80255a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80255a2:	b143      	cbz	r3, 80255b6 <_reclaim_reent+0x22>
 80255a4:	68db      	ldr	r3, [r3, #12]
 80255a6:	2b00      	cmp	r3, #0
 80255a8:	d14a      	bne.n	8025640 <_reclaim_reent+0xac>
 80255aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80255ac:	6819      	ldr	r1, [r3, #0]
 80255ae:	b111      	cbz	r1, 80255b6 <_reclaim_reent+0x22>
 80255b0:	4620      	mov	r0, r4
 80255b2:	f7ff f9db 	bl	802496c <_free_r>
 80255b6:	6961      	ldr	r1, [r4, #20]
 80255b8:	b111      	cbz	r1, 80255c0 <_reclaim_reent+0x2c>
 80255ba:	4620      	mov	r0, r4
 80255bc:	f7ff f9d6 	bl	802496c <_free_r>
 80255c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80255c2:	b111      	cbz	r1, 80255ca <_reclaim_reent+0x36>
 80255c4:	4620      	mov	r0, r4
 80255c6:	f7ff f9d1 	bl	802496c <_free_r>
 80255ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80255cc:	b111      	cbz	r1, 80255d4 <_reclaim_reent+0x40>
 80255ce:	4620      	mov	r0, r4
 80255d0:	f7ff f9cc 	bl	802496c <_free_r>
 80255d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80255d6:	b111      	cbz	r1, 80255de <_reclaim_reent+0x4a>
 80255d8:	4620      	mov	r0, r4
 80255da:	f7ff f9c7 	bl	802496c <_free_r>
 80255de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80255e0:	b111      	cbz	r1, 80255e8 <_reclaim_reent+0x54>
 80255e2:	4620      	mov	r0, r4
 80255e4:	f7ff f9c2 	bl	802496c <_free_r>
 80255e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80255ea:	b111      	cbz	r1, 80255f2 <_reclaim_reent+0x5e>
 80255ec:	4620      	mov	r0, r4
 80255ee:	f7ff f9bd 	bl	802496c <_free_r>
 80255f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80255f4:	b111      	cbz	r1, 80255fc <_reclaim_reent+0x68>
 80255f6:	4620      	mov	r0, r4
 80255f8:	f7ff f9b8 	bl	802496c <_free_r>
 80255fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80255fe:	b111      	cbz	r1, 8025606 <_reclaim_reent+0x72>
 8025600:	4620      	mov	r0, r4
 8025602:	f7ff f9b3 	bl	802496c <_free_r>
 8025606:	69a3      	ldr	r3, [r4, #24]
 8025608:	b1e3      	cbz	r3, 8025644 <_reclaim_reent+0xb0>
 802560a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802560c:	4620      	mov	r0, r4
 802560e:	4798      	blx	r3
 8025610:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8025612:	b1b9      	cbz	r1, 8025644 <_reclaim_reent+0xb0>
 8025614:	4620      	mov	r0, r4
 8025616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802561a:	f7ff bfad 	b.w	8025578 <cleanup_glue>
 802561e:	5949      	ldr	r1, [r1, r5]
 8025620:	b941      	cbnz	r1, 8025634 <_reclaim_reent+0xa0>
 8025622:	3504      	adds	r5, #4
 8025624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025626:	2d80      	cmp	r5, #128	; 0x80
 8025628:	68d9      	ldr	r1, [r3, #12]
 802562a:	d1f8      	bne.n	802561e <_reclaim_reent+0x8a>
 802562c:	4620      	mov	r0, r4
 802562e:	f7ff f99d 	bl	802496c <_free_r>
 8025632:	e7ba      	b.n	80255aa <_reclaim_reent+0x16>
 8025634:	680e      	ldr	r6, [r1, #0]
 8025636:	4620      	mov	r0, r4
 8025638:	f7ff f998 	bl	802496c <_free_r>
 802563c:	4631      	mov	r1, r6
 802563e:	e7ef      	b.n	8025620 <_reclaim_reent+0x8c>
 8025640:	2500      	movs	r5, #0
 8025642:	e7ef      	b.n	8025624 <_reclaim_reent+0x90>
 8025644:	bd70      	pop	{r4, r5, r6, pc}
 8025646:	bf00      	nop
 8025648:	20000490 	.word	0x20000490

0802564c <modf>:
 802564c:	b570      	push	{r4, r5, r6, lr}
 802564e:	ed2d 8b02 	vpush	{d8}
 8025652:	eeb0 8b40 	vmov.f64	d8, d0
 8025656:	ee18 5a90 	vmov	r5, s17
 802565a:	4604      	mov	r4, r0
 802565c:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8025660:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 8025664:	2b13      	cmp	r3, #19
 8025666:	ee10 1a10 	vmov	r1, s0
 802566a:	dc23      	bgt.n	80256b4 <modf+0x68>
 802566c:	2b00      	cmp	r3, #0
 802566e:	da09      	bge.n	8025684 <modf+0x38>
 8025670:	2200      	movs	r2, #0
 8025672:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025676:	e9c4 2300 	strd	r2, r3, [r4]
 802567a:	eeb0 0b48 	vmov.f64	d0, d8
 802567e:	ecbd 8b02 	vpop	{d8}
 8025682:	bd70      	pop	{r4, r5, r6, pc}
 8025684:	481d      	ldr	r0, [pc, #116]	; (80256fc <modf+0xb0>)
 8025686:	4118      	asrs	r0, r3
 8025688:	ea05 0300 	and.w	r3, r5, r0
 802568c:	4319      	orrs	r1, r3
 802568e:	d107      	bne.n	80256a0 <modf+0x54>
 8025690:	ed84 0b00 	vstr	d0, [r4]
 8025694:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025698:	460a      	mov	r2, r1
 802569a:	ec43 2b18 	vmov	d8, r2, r3
 802569e:	e7ec      	b.n	802567a <modf+0x2e>
 80256a0:	2200      	movs	r2, #0
 80256a2:	ea25 0300 	bic.w	r3, r5, r0
 80256a6:	ec43 2b17 	vmov	d7, r2, r3
 80256aa:	e9c4 2300 	strd	r2, r3, [r4]
 80256ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 80256b2:	e7e2      	b.n	802567a <modf+0x2e>
 80256b4:	2b33      	cmp	r3, #51	; 0x33
 80256b6:	dd0d      	ble.n	80256d4 <modf+0x88>
 80256b8:	ed84 0b00 	vstr	d0, [r4]
 80256bc:	f003 fd2e 	bl	802911c <__fpclassifyd>
 80256c0:	b920      	cbnz	r0, 80256cc <modf+0x80>
 80256c2:	ee38 8b08 	vadd.f64	d8, d8, d8
 80256c6:	ed84 8b00 	vstr	d8, [r4]
 80256ca:	e7d6      	b.n	802567a <modf+0x2e>
 80256cc:	2200      	movs	r2, #0
 80256ce:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80256d2:	e7e2      	b.n	802569a <modf+0x4e>
 80256d4:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 80256d8:	f04f 30ff 	mov.w	r0, #4294967295
 80256dc:	40d8      	lsrs	r0, r3
 80256de:	ea11 0600 	ands.w	r6, r1, r0
 80256e2:	d105      	bne.n	80256f0 <modf+0xa4>
 80256e4:	ed84 0b00 	vstr	d0, [r4]
 80256e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80256ec:	4632      	mov	r2, r6
 80256ee:	e7d4      	b.n	802569a <modf+0x4e>
 80256f0:	ee18 3a90 	vmov	r3, s17
 80256f4:	ea21 0200 	bic.w	r2, r1, r0
 80256f8:	e7d5      	b.n	80256a6 <modf+0x5a>
 80256fa:	bf00      	nop
 80256fc:	000fffff 	.word	0x000fffff

08025700 <_sbrk_r>:
 8025700:	b538      	push	{r3, r4, r5, lr}
 8025702:	4d06      	ldr	r5, [pc, #24]	; (802571c <_sbrk_r+0x1c>)
 8025704:	2300      	movs	r3, #0
 8025706:	4604      	mov	r4, r0
 8025708:	4608      	mov	r0, r1
 802570a:	602b      	str	r3, [r5, #0]
 802570c:	f7e1 fe40 	bl	8007390 <_sbrk>
 8025710:	1c43      	adds	r3, r0, #1
 8025712:	d102      	bne.n	802571a <_sbrk_r+0x1a>
 8025714:	682b      	ldr	r3, [r5, #0]
 8025716:	b103      	cbz	r3, 802571a <_sbrk_r+0x1a>
 8025718:	6023      	str	r3, [r4, #0]
 802571a:	bd38      	pop	{r3, r4, r5, pc}
 802571c:	2002fd5c 	.word	0x2002fd5c

08025720 <sniprintf>:
 8025720:	b40c      	push	{r2, r3}
 8025722:	b530      	push	{r4, r5, lr}
 8025724:	4b17      	ldr	r3, [pc, #92]	; (8025784 <sniprintf+0x64>)
 8025726:	1e0c      	subs	r4, r1, #0
 8025728:	681d      	ldr	r5, [r3, #0]
 802572a:	b09d      	sub	sp, #116	; 0x74
 802572c:	da08      	bge.n	8025740 <sniprintf+0x20>
 802572e:	238b      	movs	r3, #139	; 0x8b
 8025730:	602b      	str	r3, [r5, #0]
 8025732:	f04f 30ff 	mov.w	r0, #4294967295
 8025736:	b01d      	add	sp, #116	; 0x74
 8025738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802573c:	b002      	add	sp, #8
 802573e:	4770      	bx	lr
 8025740:	f44f 7302 	mov.w	r3, #520	; 0x208
 8025744:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025748:	bf14      	ite	ne
 802574a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802574e:	4623      	moveq	r3, r4
 8025750:	9304      	str	r3, [sp, #16]
 8025752:	9307      	str	r3, [sp, #28]
 8025754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025758:	9002      	str	r0, [sp, #8]
 802575a:	9006      	str	r0, [sp, #24]
 802575c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025760:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025762:	ab21      	add	r3, sp, #132	; 0x84
 8025764:	a902      	add	r1, sp, #8
 8025766:	4628      	mov	r0, r5
 8025768:	9301      	str	r3, [sp, #4]
 802576a:	f002 feff 	bl	802856c <_svfiprintf_r>
 802576e:	1c43      	adds	r3, r0, #1
 8025770:	bfbc      	itt	lt
 8025772:	238b      	movlt	r3, #139	; 0x8b
 8025774:	602b      	strlt	r3, [r5, #0]
 8025776:	2c00      	cmp	r4, #0
 8025778:	d0dd      	beq.n	8025736 <sniprintf+0x16>
 802577a:	9b02      	ldr	r3, [sp, #8]
 802577c:	2200      	movs	r2, #0
 802577e:	701a      	strb	r2, [r3, #0]
 8025780:	e7d9      	b.n	8025736 <sniprintf+0x16>
 8025782:	bf00      	nop
 8025784:	20000490 	.word	0x20000490

08025788 <siprintf>:
 8025788:	b40e      	push	{r1, r2, r3}
 802578a:	b500      	push	{lr}
 802578c:	b09c      	sub	sp, #112	; 0x70
 802578e:	ab1d      	add	r3, sp, #116	; 0x74
 8025790:	9002      	str	r0, [sp, #8]
 8025792:	9006      	str	r0, [sp, #24]
 8025794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025798:	4809      	ldr	r0, [pc, #36]	; (80257c0 <siprintf+0x38>)
 802579a:	9107      	str	r1, [sp, #28]
 802579c:	9104      	str	r1, [sp, #16]
 802579e:	4909      	ldr	r1, [pc, #36]	; (80257c4 <siprintf+0x3c>)
 80257a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80257a4:	9105      	str	r1, [sp, #20]
 80257a6:	6800      	ldr	r0, [r0, #0]
 80257a8:	9301      	str	r3, [sp, #4]
 80257aa:	a902      	add	r1, sp, #8
 80257ac:	f002 fede 	bl	802856c <_svfiprintf_r>
 80257b0:	9b02      	ldr	r3, [sp, #8]
 80257b2:	2200      	movs	r2, #0
 80257b4:	701a      	strb	r2, [r3, #0]
 80257b6:	b01c      	add	sp, #112	; 0x70
 80257b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80257bc:	b003      	add	sp, #12
 80257be:	4770      	bx	lr
 80257c0:	20000490 	.word	0x20000490
 80257c4:	ffff0208 	.word	0xffff0208

080257c8 <siscanf>:
 80257c8:	b40e      	push	{r1, r2, r3}
 80257ca:	b510      	push	{r4, lr}
 80257cc:	b09f      	sub	sp, #124	; 0x7c
 80257ce:	ac21      	add	r4, sp, #132	; 0x84
 80257d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80257d4:	f854 2b04 	ldr.w	r2, [r4], #4
 80257d8:	9201      	str	r2, [sp, #4]
 80257da:	f8ad 101c 	strh.w	r1, [sp, #28]
 80257de:	9004      	str	r0, [sp, #16]
 80257e0:	9008      	str	r0, [sp, #32]
 80257e2:	f7da fd37 	bl	8000254 <strlen>
 80257e6:	4b0c      	ldr	r3, [pc, #48]	; (8025818 <siscanf+0x50>)
 80257e8:	9005      	str	r0, [sp, #20]
 80257ea:	9009      	str	r0, [sp, #36]	; 0x24
 80257ec:	930d      	str	r3, [sp, #52]	; 0x34
 80257ee:	480b      	ldr	r0, [pc, #44]	; (802581c <siscanf+0x54>)
 80257f0:	9a01      	ldr	r2, [sp, #4]
 80257f2:	6800      	ldr	r0, [r0, #0]
 80257f4:	9403      	str	r4, [sp, #12]
 80257f6:	2300      	movs	r3, #0
 80257f8:	9311      	str	r3, [sp, #68]	; 0x44
 80257fa:	9316      	str	r3, [sp, #88]	; 0x58
 80257fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025800:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025804:	a904      	add	r1, sp, #16
 8025806:	4623      	mov	r3, r4
 8025808:	f003 f80a 	bl	8028820 <__ssvfiscanf_r>
 802580c:	b01f      	add	sp, #124	; 0x7c
 802580e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025812:	b003      	add	sp, #12
 8025814:	4770      	bx	lr
 8025816:	bf00      	nop
 8025818:	08025843 	.word	0x08025843
 802581c:	20000490 	.word	0x20000490

08025820 <__sread>:
 8025820:	b510      	push	{r4, lr}
 8025822:	460c      	mov	r4, r1
 8025824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025828:	f003 fc66 	bl	80290f8 <_read_r>
 802582c:	2800      	cmp	r0, #0
 802582e:	bfab      	itete	ge
 8025830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025832:	89a3      	ldrhlt	r3, [r4, #12]
 8025834:	181b      	addge	r3, r3, r0
 8025836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802583a:	bfac      	ite	ge
 802583c:	6563      	strge	r3, [r4, #84]	; 0x54
 802583e:	81a3      	strhlt	r3, [r4, #12]
 8025840:	bd10      	pop	{r4, pc}

08025842 <__seofread>:
 8025842:	2000      	movs	r0, #0
 8025844:	4770      	bx	lr

08025846 <__swrite>:
 8025846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802584a:	461f      	mov	r7, r3
 802584c:	898b      	ldrh	r3, [r1, #12]
 802584e:	05db      	lsls	r3, r3, #23
 8025850:	4605      	mov	r5, r0
 8025852:	460c      	mov	r4, r1
 8025854:	4616      	mov	r6, r2
 8025856:	d505      	bpl.n	8025864 <__swrite+0x1e>
 8025858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802585c:	2302      	movs	r3, #2
 802585e:	2200      	movs	r2, #0
 8025860:	f002 fa0a 	bl	8027c78 <_lseek_r>
 8025864:	89a3      	ldrh	r3, [r4, #12]
 8025866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802586a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802586e:	81a3      	strh	r3, [r4, #12]
 8025870:	4632      	mov	r2, r6
 8025872:	463b      	mov	r3, r7
 8025874:	4628      	mov	r0, r5
 8025876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802587a:	f001 b91d 	b.w	8026ab8 <_write_r>

0802587e <__sseek>:
 802587e:	b510      	push	{r4, lr}
 8025880:	460c      	mov	r4, r1
 8025882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025886:	f002 f9f7 	bl	8027c78 <_lseek_r>
 802588a:	1c43      	adds	r3, r0, #1
 802588c:	89a3      	ldrh	r3, [r4, #12]
 802588e:	bf15      	itete	ne
 8025890:	6560      	strne	r0, [r4, #84]	; 0x54
 8025892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802589a:	81a3      	strheq	r3, [r4, #12]
 802589c:	bf18      	it	ne
 802589e:	81a3      	strhne	r3, [r4, #12]
 80258a0:	bd10      	pop	{r4, pc}

080258a2 <__sclose>:
 80258a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80258a6:	f001 b9f1 	b.w	8026c8c <_close_r>

080258aa <stpcpy>:
 80258aa:	4603      	mov	r3, r0
 80258ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80258b0:	4618      	mov	r0, r3
 80258b2:	f803 2b01 	strb.w	r2, [r3], #1
 80258b6:	2a00      	cmp	r2, #0
 80258b8:	d1f8      	bne.n	80258ac <stpcpy+0x2>
 80258ba:	4770      	bx	lr

080258bc <strchr>:
 80258bc:	b2c9      	uxtb	r1, r1
 80258be:	4603      	mov	r3, r0
 80258c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80258c4:	b11a      	cbz	r2, 80258ce <strchr+0x12>
 80258c6:	428a      	cmp	r2, r1
 80258c8:	d1f9      	bne.n	80258be <strchr+0x2>
 80258ca:	4618      	mov	r0, r3
 80258cc:	4770      	bx	lr
 80258ce:	2900      	cmp	r1, #0
 80258d0:	bf18      	it	ne
 80258d2:	2300      	movne	r3, #0
 80258d4:	e7f9      	b.n	80258ca <strchr+0xe>

080258d6 <strcpy>:
 80258d6:	4603      	mov	r3, r0
 80258d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80258dc:	f803 2b01 	strb.w	r2, [r3], #1
 80258e0:	2a00      	cmp	r2, #0
 80258e2:	d1f9      	bne.n	80258d8 <strcpy+0x2>
 80258e4:	4770      	bx	lr
 80258e6:	Address 0x00000000080258e6 is out of bounds.


080258e8 <iso_year_adjust>:
 80258e8:	6942      	ldr	r2, [r0, #20]
 80258ea:	2a00      	cmp	r2, #0
 80258ec:	f240 736c 	movw	r3, #1900	; 0x76c
 80258f0:	bfa8      	it	ge
 80258f2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80258f6:	4413      	add	r3, r2
 80258f8:	0792      	lsls	r2, r2, #30
 80258fa:	d105      	bne.n	8025908 <iso_year_adjust+0x20>
 80258fc:	2164      	movs	r1, #100	; 0x64
 80258fe:	fb93 f2f1 	sdiv	r2, r3, r1
 8025902:	fb01 3212 	mls	r2, r1, r2, r3
 8025906:	b9da      	cbnz	r2, 8025940 <iso_year_adjust+0x58>
 8025908:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802590c:	fb93 f1f2 	sdiv	r1, r3, r2
 8025910:	fb02 3311 	mls	r3, r2, r1, r3
 8025914:	fab3 f383 	clz	r3, r3
 8025918:	095b      	lsrs	r3, r3, #5
 802591a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802591e:	0040      	lsls	r0, r0, #1
 8025920:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8025924:	4418      	add	r0, r3
 8025926:	f241 63a2 	movw	r3, #5794	; 0x16a2
 802592a:	4298      	cmp	r0, r3
 802592c:	d03a      	beq.n	80259a4 <iso_year_adjust+0xbc>
 802592e:	dc21      	bgt.n	8025974 <iso_year_adjust+0x8c>
 8025930:	2801      	cmp	r0, #1
 8025932:	dc1a      	bgt.n	802596a <iso_year_adjust+0x82>
 8025934:	2800      	cmp	r0, #0
 8025936:	bfb4      	ite	lt
 8025938:	2000      	movlt	r0, #0
 802593a:	f04f 30ff 	movge.w	r0, #4294967295
 802593e:	4770      	bx	lr
 8025940:	2301      	movs	r3, #1
 8025942:	e7ea      	b.n	802591a <iso_year_adjust+0x32>
 8025944:	2817      	cmp	r0, #23
 8025946:	d813      	bhi.n	8025970 <iso_year_adjust+0x88>
 8025948:	e8df f000 	tbb	[pc, r0]
 802594c:	0c0c0c0c 	.word	0x0c0c0c0c
 8025950:	0c0c1212 	.word	0x0c0c1212
 8025954:	12121212 	.word	0x12121212
 8025958:	12121212 	.word	0x12121212
 802595c:	0c0c1212 	.word	0x0c0c1212
 8025960:	0c0c1212 	.word	0x0c0c1212
 8025964:	f04f 30ff 	mov.w	r0, #4294967295
 8025968:	4770      	bx	lr
 802596a:	380a      	subs	r0, #10
 802596c:	2817      	cmp	r0, #23
 802596e:	d9e9      	bls.n	8025944 <iso_year_adjust+0x5c>
 8025970:	2000      	movs	r0, #0
 8025972:	4770      	bx	lr
 8025974:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8025978:	4298      	cmp	r0, r3
 802597a:	dc06      	bgt.n	802598a <iso_year_adjust+0xa2>
 802597c:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8025980:	4298      	cmp	r0, r3
 8025982:	bfd4      	ite	le
 8025984:	2000      	movle	r0, #0
 8025986:	2001      	movgt	r0, #1
 8025988:	4770      	bx	lr
 802598a:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 802598e:	3802      	subs	r0, #2
 8025990:	2815      	cmp	r0, #21
 8025992:	d8ed      	bhi.n	8025970 <iso_year_adjust+0x88>
 8025994:	2301      	movs	r3, #1
 8025996:	4083      	lsls	r3, r0
 8025998:	4803      	ldr	r0, [pc, #12]	; (80259a8 <iso_year_adjust+0xc0>)
 802599a:	4018      	ands	r0, r3
 802599c:	3800      	subs	r0, #0
 802599e:	bf18      	it	ne
 80259a0:	2001      	movne	r0, #1
 80259a2:	4770      	bx	lr
 80259a4:	2001      	movs	r0, #1
 80259a6:	4770      	bx	lr
 80259a8:	002a001f 	.word	0x002a001f

080259ac <__strftime.isra.0>:
 80259ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259b0:	b08f      	sub	sp, #60	; 0x3c
 80259b2:	461e      	mov	r6, r3
 80259b4:	2300      	movs	r3, #0
 80259b6:	4607      	mov	r7, r0
 80259b8:	460d      	mov	r5, r1
 80259ba:	9302      	str	r3, [sp, #8]
 80259bc:	461c      	mov	r4, r3
 80259be:	7813      	ldrb	r3, [r2, #0]
 80259c0:	2b00      	cmp	r3, #0
 80259c2:	f000 84ba 	beq.w	802633a <__strftime.isra.0+0x98e>
 80259c6:	2b25      	cmp	r3, #37	; 0x25
 80259c8:	d11f      	bne.n	8025a0a <__strftime.isra.0+0x5e>
 80259ca:	f892 b001 	ldrb.w	fp, [r2, #1]
 80259ce:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80259d2:	d024      	beq.n	8025a1e <__strftime.isra.0+0x72>
 80259d4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80259d8:	d021      	beq.n	8025a1e <__strftime.isra.0+0x72>
 80259da:	f102 0801 	add.w	r8, r2, #1
 80259de:	f04f 0b00 	mov.w	fp, #0
 80259e2:	f898 2000 	ldrb.w	r2, [r8]
 80259e6:	3a31      	subs	r2, #49	; 0x31
 80259e8:	2a08      	cmp	r2, #8
 80259ea:	d81b      	bhi.n	8025a24 <__strftime.isra.0+0x78>
 80259ec:	4640      	mov	r0, r8
 80259ee:	220a      	movs	r2, #10
 80259f0:	a906      	add	r1, sp, #24
 80259f2:	f000 fdc9 	bl	8026588 <strtoul>
 80259f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80259fa:	4681      	mov	r9, r0
 80259fc:	f898 2000 	ldrb.w	r2, [r8]
 8025a00:	2a45      	cmp	r2, #69	; 0x45
 8025a02:	d112      	bne.n	8025a2a <__strftime.isra.0+0x7e>
 8025a04:	f108 0801 	add.w	r8, r8, #1
 8025a08:	e011      	b.n	8025a2e <__strftime.isra.0+0x82>
 8025a0a:	1e69      	subs	r1, r5, #1
 8025a0c:	42a1      	cmp	r1, r4
 8025a0e:	d802      	bhi.n	8025a16 <__strftime.isra.0+0x6a>
 8025a10:	2400      	movs	r4, #0
 8025a12:	f000 bc95 	b.w	8026340 <__strftime.isra.0+0x994>
 8025a16:	553b      	strb	r3, [r7, r4]
 8025a18:	3201      	adds	r2, #1
 8025a1a:	3401      	adds	r4, #1
 8025a1c:	e7cf      	b.n	80259be <__strftime.isra.0+0x12>
 8025a1e:	f102 0802 	add.w	r8, r2, #2
 8025a22:	e7de      	b.n	80259e2 <__strftime.isra.0+0x36>
 8025a24:	f04f 0900 	mov.w	r9, #0
 8025a28:	e7e8      	b.n	80259fc <__strftime.isra.0+0x50>
 8025a2a:	2a4f      	cmp	r2, #79	; 0x4f
 8025a2c:	d0ea      	beq.n	8025a04 <__strftime.isra.0+0x58>
 8025a2e:	f898 0000 	ldrb.w	r0, [r8]
 8025a32:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8025a36:	2a55      	cmp	r2, #85	; 0x55
 8025a38:	d8ea      	bhi.n	8025a10 <__strftime.isra.0+0x64>
 8025a3a:	a301      	add	r3, pc, #4	; (adr r3, 8025a40 <__strftime.isra.0+0x94>)
 8025a3c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8025a40:	0802632f 	.word	0x0802632f
 8025a44:	08025a11 	.word	0x08025a11
 8025a48:	08025a11 	.word	0x08025a11
 8025a4c:	08025a11 	.word	0x08025a11
 8025a50:	08025a11 	.word	0x08025a11
 8025a54:	08025a11 	.word	0x08025a11
 8025a58:	08025a11 	.word	0x08025a11
 8025a5c:	08025a11 	.word	0x08025a11
 8025a60:	08025a11 	.word	0x08025a11
 8025a64:	08025a11 	.word	0x08025a11
 8025a68:	08025a11 	.word	0x08025a11
 8025a6c:	08025a11 	.word	0x08025a11
 8025a70:	08025a11 	.word	0x08025a11
 8025a74:	08025a11 	.word	0x08025a11
 8025a78:	08025a11 	.word	0x08025a11
 8025a7c:	08025a11 	.word	0x08025a11
 8025a80:	08025a11 	.word	0x08025a11
 8025a84:	08025a11 	.word	0x08025a11
 8025a88:	08025a11 	.word	0x08025a11
 8025a8c:	08025a11 	.word	0x08025a11
 8025a90:	08025a11 	.word	0x08025a11
 8025a94:	08025a11 	.word	0x08025a11
 8025a98:	08025a11 	.word	0x08025a11
 8025a9c:	08025a11 	.word	0x08025a11
 8025aa0:	08025a11 	.word	0x08025a11
 8025aa4:	08025a11 	.word	0x08025a11
 8025aa8:	08025a11 	.word	0x08025a11
 8025aac:	08025a11 	.word	0x08025a11
 8025ab0:	08025bd5 	.word	0x08025bd5
 8025ab4:	08025c2d 	.word	0x08025c2d
 8025ab8:	08025c9b 	.word	0x08025c9b
 8025abc:	08025d39 	.word	0x08025d39
 8025ac0:	08025a11 	.word	0x08025a11
 8025ac4:	08025d85 	.word	0x08025d85
 8025ac8:	08025e71 	.word	0x08025e71
 8025acc:	08025f4b 	.word	0x08025f4b
 8025ad0:	08025f59 	.word	0x08025f59
 8025ad4:	08025a11 	.word	0x08025a11
 8025ad8:	08025a11 	.word	0x08025a11
 8025adc:	08025a11 	.word	0x08025a11
 8025ae0:	08025f89 	.word	0x08025f89
 8025ae4:	08025a11 	.word	0x08025a11
 8025ae8:	08025a11 	.word	0x08025a11
 8025aec:	08025f9d 	.word	0x08025f9d
 8025af0:	08025a11 	.word	0x08025a11
 8025af4:	08025fef 	.word	0x08025fef
 8025af8:	08026103 	.word	0x08026103
 8025afc:	08026113 	.word	0x08026113
 8025b00:	0802613b 	.word	0x0802613b
 8025b04:	08026175 	.word	0x08026175
 8025b08:	080261e9 	.word	0x080261e9
 8025b0c:	08025c93 	.word	0x08025c93
 8025b10:	08026215 	.word	0x08026215
 8025b14:	080262dd 	.word	0x080262dd
 8025b18:	08025a11 	.word	0x08025a11
 8025b1c:	08025a11 	.word	0x08025a11
 8025b20:	08025a11 	.word	0x08025a11
 8025b24:	08025a11 	.word	0x08025a11
 8025b28:	08025a11 	.word	0x08025a11
 8025b2c:	08025a11 	.word	0x08025a11
 8025b30:	08025b99 	.word	0x08025b99
 8025b34:	08025c03 	.word	0x08025c03
 8025b38:	08025c59 	.word	0x08025c59
 8025b3c:	08025d15 	.word	0x08025d15
 8025b40:	08025d15 	.word	0x08025d15
 8025b44:	08025a11 	.word	0x08025a11
 8025b48:	08025dd7 	.word	0x08025dd7
 8025b4c:	08025c03 	.word	0x08025c03
 8025b50:	08025a11 	.word	0x08025a11
 8025b54:	08025f7b 	.word	0x08025f7b
 8025b58:	08025f4b 	.word	0x08025f4b
 8025b5c:	08025f59 	.word	0x08025f59
 8025b60:	08025f83 	.word	0x08025f83
 8025b64:	08025f8d 	.word	0x08025f8d
 8025b68:	08025a11 	.word	0x08025a11
 8025b6c:	08025f9d 	.word	0x08025f9d
 8025b70:	08025a11 	.word	0x08025a11
 8025b74:	08025c83 	.word	0x08025c83
 8025b78:	08026001 	.word	0x08026001
 8025b7c:	08026107 	.word	0x08026107
 8025b80:	08026121 	.word	0x08026121
 8025b84:	08025a11 	.word	0x08025a11
 8025b88:	080261db 	.word	0x080261db
 8025b8c:	08025c8b 	.word	0x08025c8b
 8025b90:	080261f9 	.word	0x080261f9
 8025b94:	08026267 	.word	0x08026267
 8025b98:	69b3      	ldr	r3, [r6, #24]
 8025b9a:	4aa9      	ldr	r2, [pc, #676]	; (8025e40 <__strftime.isra.0+0x494>)
 8025b9c:	3318      	adds	r3, #24
 8025b9e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025ba2:	4648      	mov	r0, r9
 8025ba4:	f7da fb56 	bl	8000254 <strlen>
 8025ba8:	f109 39ff 	add.w	r9, r9, #4294967295
 8025bac:	4420      	add	r0, r4
 8025bae:	1e6b      	subs	r3, r5, #1
 8025bb0:	42a0      	cmp	r0, r4
 8025bb2:	d107      	bne.n	8025bc4 <__strftime.isra.0+0x218>
 8025bb4:	f898 3000 	ldrb.w	r3, [r8]
 8025bb8:	2b00      	cmp	r3, #0
 8025bba:	f000 83be 	beq.w	802633a <__strftime.isra.0+0x98e>
 8025bbe:	f108 0201 	add.w	r2, r8, #1
 8025bc2:	e6fc      	b.n	80259be <__strftime.isra.0+0x12>
 8025bc4:	42a3      	cmp	r3, r4
 8025bc6:	f67f af23 	bls.w	8025a10 <__strftime.isra.0+0x64>
 8025bca:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025bce:	553a      	strb	r2, [r7, r4]
 8025bd0:	3401      	adds	r4, #1
 8025bd2:	e7ed      	b.n	8025bb0 <__strftime.isra.0+0x204>
 8025bd4:	69b2      	ldr	r2, [r6, #24]
 8025bd6:	4b9a      	ldr	r3, [pc, #616]	; (8025e40 <__strftime.isra.0+0x494>)
 8025bd8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025bdc:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8025be0:	4648      	mov	r0, r9
 8025be2:	f7da fb37 	bl	8000254 <strlen>
 8025be6:	f109 39ff 	add.w	r9, r9, #4294967295
 8025bea:	4420      	add	r0, r4
 8025bec:	1e6b      	subs	r3, r5, #1
 8025bee:	42a0      	cmp	r0, r4
 8025bf0:	d0e0      	beq.n	8025bb4 <__strftime.isra.0+0x208>
 8025bf2:	42a3      	cmp	r3, r4
 8025bf4:	f67f af0c 	bls.w	8025a10 <__strftime.isra.0+0x64>
 8025bf8:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025bfc:	553a      	strb	r2, [r7, r4]
 8025bfe:	3401      	adds	r4, #1
 8025c00:	e7f5      	b.n	8025bee <__strftime.isra.0+0x242>
 8025c02:	4b8f      	ldr	r3, [pc, #572]	; (8025e40 <__strftime.isra.0+0x494>)
 8025c04:	6932      	ldr	r2, [r6, #16]
 8025c06:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8025c0a:	4648      	mov	r0, r9
 8025c0c:	f7da fb22 	bl	8000254 <strlen>
 8025c10:	f109 39ff 	add.w	r9, r9, #4294967295
 8025c14:	4420      	add	r0, r4
 8025c16:	1e6b      	subs	r3, r5, #1
 8025c18:	42a0      	cmp	r0, r4
 8025c1a:	d0cb      	beq.n	8025bb4 <__strftime.isra.0+0x208>
 8025c1c:	42a3      	cmp	r3, r4
 8025c1e:	f67f aef7 	bls.w	8025a10 <__strftime.isra.0+0x64>
 8025c22:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025c26:	553a      	strb	r2, [r7, r4]
 8025c28:	3401      	adds	r4, #1
 8025c2a:	e7f5      	b.n	8025c18 <__strftime.isra.0+0x26c>
 8025c2c:	6933      	ldr	r3, [r6, #16]
 8025c2e:	4a84      	ldr	r2, [pc, #528]	; (8025e40 <__strftime.isra.0+0x494>)
 8025c30:	330c      	adds	r3, #12
 8025c32:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025c36:	4648      	mov	r0, r9
 8025c38:	f7da fb0c 	bl	8000254 <strlen>
 8025c3c:	f109 39ff 	add.w	r9, r9, #4294967295
 8025c40:	4420      	add	r0, r4
 8025c42:	1e6b      	subs	r3, r5, #1
 8025c44:	42a0      	cmp	r0, r4
 8025c46:	d0b5      	beq.n	8025bb4 <__strftime.isra.0+0x208>
 8025c48:	42a3      	cmp	r3, r4
 8025c4a:	f67f aee1 	bls.w	8025a10 <__strftime.isra.0+0x64>
 8025c4e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025c52:	553a      	strb	r2, [r7, r4]
 8025c54:	3401      	adds	r4, #1
 8025c56:	e7f5      	b.n	8025c44 <__strftime.isra.0+0x298>
 8025c58:	4b79      	ldr	r3, [pc, #484]	; (8025e40 <__strftime.isra.0+0x494>)
 8025c5a:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8025c5e:	4648      	mov	r0, r9
 8025c60:	f7da faf8 	bl	8000254 <strlen>
 8025c64:	f899 3000 	ldrb.w	r3, [r9]
 8025c68:	2b00      	cmp	r3, #0
 8025c6a:	d0a3      	beq.n	8025bb4 <__strftime.isra.0+0x208>
 8025c6c:	4633      	mov	r3, r6
 8025c6e:	464a      	mov	r2, r9
 8025c70:	1b29      	subs	r1, r5, r4
 8025c72:	1938      	adds	r0, r7, r4
 8025c74:	f7ff fe9a 	bl	80259ac <__strftime.isra.0>
 8025c78:	2800      	cmp	r0, #0
 8025c7a:	f77f aec9 	ble.w	8025a10 <__strftime.isra.0+0x64>
 8025c7e:	4404      	add	r4, r0
 8025c80:	e798      	b.n	8025bb4 <__strftime.isra.0+0x208>
 8025c82:	4b6f      	ldr	r3, [pc, #444]	; (8025e40 <__strftime.isra.0+0x494>)
 8025c84:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8025c88:	e7e9      	b.n	8025c5e <__strftime.isra.0+0x2b2>
 8025c8a:	4b6d      	ldr	r3, [pc, #436]	; (8025e40 <__strftime.isra.0+0x494>)
 8025c8c:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8025c90:	e7e5      	b.n	8025c5e <__strftime.isra.0+0x2b2>
 8025c92:	4b6b      	ldr	r3, [pc, #428]	; (8025e40 <__strftime.isra.0+0x494>)
 8025c94:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8025c98:	e7e1      	b.n	8025c5e <__strftime.isra.0+0x2b2>
 8025c9a:	496a      	ldr	r1, [pc, #424]	; (8025e44 <__strftime.isra.0+0x498>)
 8025c9c:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8025ca0:	458a      	cmp	sl, r1
 8025ca2:	bfac      	ite	ge
 8025ca4:	2100      	movge	r1, #0
 8025ca6:	2101      	movlt	r1, #1
 8025ca8:	f1ba 0f00 	cmp.w	sl, #0
 8025cac:	db11      	blt.n	8025cd2 <__strftime.isra.0+0x326>
 8025cae:	2064      	movs	r0, #100	; 0x64
 8025cb0:	fb9a f0f0 	sdiv	r0, sl, r0
 8025cb4:	3013      	adds	r0, #19
 8025cb6:	f1bb 0f00 	cmp.w	fp, #0
 8025cba:	d014      	beq.n	8025ce6 <__strftime.isra.0+0x33a>
 8025cbc:	2863      	cmp	r0, #99	; 0x63
 8025cbe:	dd27      	ble.n	8025d10 <__strftime.isra.0+0x364>
 8025cc0:	4b61      	ldr	r3, [pc, #388]	; (8025e48 <__strftime.isra.0+0x49c>)
 8025cc2:	4a62      	ldr	r2, [pc, #392]	; (8025e4c <__strftime.isra.0+0x4a0>)
 8025cc4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025cc8:	bf18      	it	ne
 8025cca:	461a      	movne	r2, r3
 8025ccc:	f8df c198 	ldr.w	ip, [pc, #408]	; 8025e68 <__strftime.isra.0+0x4bc>
 8025cd0:	e00c      	b.n	8025cec <__strftime.isra.0+0x340>
 8025cd2:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8025cd6:	9103      	str	r1, [sp, #12]
 8025cd8:	f000 ff6e 	bl	8026bb8 <abs>
 8025cdc:	2264      	movs	r2, #100	; 0x64
 8025cde:	9903      	ldr	r1, [sp, #12]
 8025ce0:	fb90 f0f2 	sdiv	r0, r0, r2
 8025ce4:	e7e7      	b.n	8025cb6 <__strftime.isra.0+0x30a>
 8025ce6:	4a58      	ldr	r2, [pc, #352]	; (8025e48 <__strftime.isra.0+0x49c>)
 8025ce8:	f8df c180 	ldr.w	ip, [pc, #384]	; 8025e6c <__strftime.isra.0+0x4c0>
 8025cec:	4b58      	ldr	r3, [pc, #352]	; (8025e50 <__strftime.isra.0+0x4a4>)
 8025cee:	9001      	str	r0, [sp, #4]
 8025cf0:	f1b9 0f02 	cmp.w	r9, #2
 8025cf4:	bf2c      	ite	cs
 8025cf6:	ebc1 0109 	rsbcs	r1, r1, r9
 8025cfa:	f1c1 0102 	rsbcc	r1, r1, #2
 8025cfe:	9100      	str	r1, [sp, #0]
 8025d00:	4950      	ldr	r1, [pc, #320]	; (8025e44 <__strftime.isra.0+0x498>)
 8025d02:	458a      	cmp	sl, r1
 8025d04:	bfa8      	it	ge
 8025d06:	4613      	movge	r3, r2
 8025d08:	4662      	mov	r2, ip
 8025d0a:	1b29      	subs	r1, r5, r4
 8025d0c:	1938      	adds	r0, r7, r4
 8025d0e:	e028      	b.n	8025d62 <__strftime.isra.0+0x3b6>
 8025d10:	4a4d      	ldr	r2, [pc, #308]	; (8025e48 <__strftime.isra.0+0x49c>)
 8025d12:	e7db      	b.n	8025ccc <__strftime.isra.0+0x320>
 8025d14:	494f      	ldr	r1, [pc, #316]	; (8025e54 <__strftime.isra.0+0x4a8>)
 8025d16:	4a50      	ldr	r2, [pc, #320]	; (8025e58 <__strftime.isra.0+0x4ac>)
 8025d18:	68f3      	ldr	r3, [r6, #12]
 8025d1a:	2864      	cmp	r0, #100	; 0x64
 8025d1c:	bf08      	it	eq
 8025d1e:	460a      	moveq	r2, r1
 8025d20:	1b29      	subs	r1, r5, r4
 8025d22:	1938      	adds	r0, r7, r4
 8025d24:	f7ff fcfc 	bl	8025720 <sniprintf>
 8025d28:	2800      	cmp	r0, #0
 8025d2a:	f6ff ae71 	blt.w	8025a10 <__strftime.isra.0+0x64>
 8025d2e:	4404      	add	r4, r0
 8025d30:	42a5      	cmp	r5, r4
 8025d32:	f63f af3f 	bhi.w	8025bb4 <__strftime.isra.0+0x208>
 8025d36:	e66b      	b.n	8025a10 <__strftime.isra.0+0x64>
 8025d38:	6970      	ldr	r0, [r6, #20]
 8025d3a:	6933      	ldr	r3, [r6, #16]
 8025d3c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8025d40:	2800      	cmp	r0, #0
 8025d42:	eb07 0904 	add.w	r9, r7, r4
 8025d46:	eba5 0104 	sub.w	r1, r5, r4
 8025d4a:	f103 0301 	add.w	r3, r3, #1
 8025d4e:	db0b      	blt.n	8025d68 <__strftime.isra.0+0x3bc>
 8025d50:	2264      	movs	r2, #100	; 0x64
 8025d52:	fb90 fcf2 	sdiv	ip, r0, r2
 8025d56:	fb02 001c 	mls	r0, r2, ip, r0
 8025d5a:	4a40      	ldr	r2, [pc, #256]	; (8025e5c <__strftime.isra.0+0x4b0>)
 8025d5c:	e9cd a000 	strd	sl, r0, [sp]
 8025d60:	4648      	mov	r0, r9
 8025d62:	f7ff fcdd 	bl	8025720 <sniprintf>
 8025d66:	e7df      	b.n	8025d28 <__strftime.isra.0+0x37c>
 8025d68:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025d6c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8025d70:	f000 ff22 	bl	8026bb8 <abs>
 8025d74:	2264      	movs	r2, #100	; 0x64
 8025d76:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8025d7a:	fb90 fcf2 	sdiv	ip, r0, r2
 8025d7e:	fb0c 0012 	mls	r0, ip, r2, r0
 8025d82:	e7ea      	b.n	8025d5a <__strftime.isra.0+0x3ae>
 8025d84:	2225      	movs	r2, #37	; 0x25
 8025d86:	f88d 2018 	strb.w	r2, [sp, #24]
 8025d8a:	f1bb 0f00 	cmp.w	fp, #0
 8025d8e:	d011      	beq.n	8025db4 <__strftime.isra.0+0x408>
 8025d90:	f1b9 0f06 	cmp.w	r9, #6
 8025d94:	bf38      	it	cc
 8025d96:	f04f 0906 	movcc.w	r9, #6
 8025d9a:	f1b9 0306 	subs.w	r3, r9, #6
 8025d9e:	f88d b019 	strb.w	fp, [sp, #25]
 8025da2:	d10c      	bne.n	8025dbe <__strftime.isra.0+0x412>
 8025da4:	f10d 001a 	add.w	r0, sp, #26
 8025da8:	492d      	ldr	r1, [pc, #180]	; (8025e60 <__strftime.isra.0+0x4b4>)
 8025daa:	f7ff fd94 	bl	80258d6 <strcpy>
 8025dae:	4633      	mov	r3, r6
 8025db0:	aa06      	add	r2, sp, #24
 8025db2:	e75d      	b.n	8025c70 <__strftime.isra.0+0x2c4>
 8025db4:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8025db8:	f04f 090a 	mov.w	r9, #10
 8025dbc:	e7ed      	b.n	8025d9a <__strftime.isra.0+0x3ee>
 8025dbe:	4a29      	ldr	r2, [pc, #164]	; (8025e64 <__strftime.isra.0+0x4b8>)
 8025dc0:	211e      	movs	r1, #30
 8025dc2:	f10d 001a 	add.w	r0, sp, #26
 8025dc6:	f7ff fcab 	bl	8025720 <sniprintf>
 8025dca:	2800      	cmp	r0, #0
 8025dcc:	ddea      	ble.n	8025da4 <__strftime.isra.0+0x3f8>
 8025dce:	f10d 031a 	add.w	r3, sp, #26
 8025dd2:	4418      	add	r0, r3
 8025dd4:	e7e8      	b.n	8025da8 <__strftime.isra.0+0x3fc>
 8025dd6:	4630      	mov	r0, r6
 8025dd8:	f7ff fd86 	bl	80258e8 <iso_year_adjust>
 8025ddc:	4681      	mov	r9, r0
 8025dde:	6970      	ldr	r0, [r6, #20]
 8025de0:	2800      	cmp	r0, #0
 8025de2:	db11      	blt.n	8025e08 <__strftime.isra.0+0x45c>
 8025de4:	2364      	movs	r3, #100	; 0x64
 8025de6:	fb90 f2f3 	sdiv	r2, r0, r3
 8025dea:	fb03 0012 	mls	r0, r3, r2, r0
 8025dee:	2264      	movs	r2, #100	; 0x64
 8025df0:	4481      	add	r9, r0
 8025df2:	fb99 f3f2 	sdiv	r3, r9, r2
 8025df6:	fb02 9913 	mls	r9, r2, r3, r9
 8025dfa:	4491      	add	r9, r2
 8025dfc:	fbb9 f3f2 	udiv	r3, r9, r2
 8025e00:	fb02 9313 	mls	r3, r2, r3, r9
 8025e04:	4a13      	ldr	r2, [pc, #76]	; (8025e54 <__strftime.isra.0+0x4a8>)
 8025e06:	e78b      	b.n	8025d20 <__strftime.isra.0+0x374>
 8025e08:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025e0c:	f000 fed4 	bl	8026bb8 <abs>
 8025e10:	2364      	movs	r3, #100	; 0x64
 8025e12:	f1b9 0f00 	cmp.w	r9, #0
 8025e16:	fb90 f2f3 	sdiv	r2, r0, r3
 8025e1a:	fb02 0013 	mls	r0, r2, r3, r0
 8025e1e:	da07      	bge.n	8025e30 <__strftime.isra.0+0x484>
 8025e20:	6972      	ldr	r2, [r6, #20]
 8025e22:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8025e26:	429a      	cmp	r2, r3
 8025e28:	bfb8      	it	lt
 8025e2a:	f04f 0901 	movlt.w	r9, #1
 8025e2e:	e7de      	b.n	8025dee <__strftime.isra.0+0x442>
 8025e30:	d0dd      	beq.n	8025dee <__strftime.isra.0+0x442>
 8025e32:	6972      	ldr	r2, [r6, #20]
 8025e34:	4b03      	ldr	r3, [pc, #12]	; (8025e44 <__strftime.isra.0+0x498>)
 8025e36:	429a      	cmp	r2, r3
 8025e38:	bfb8      	it	lt
 8025e3a:	f04f 39ff 	movlt.w	r9, #4294967295
 8025e3e:	e7d6      	b.n	8025dee <__strftime.isra.0+0x442>
 8025e40:	080460b0 	.word	0x080460b0
 8025e44:	fffff894 	.word	0xfffff894
 8025e48:	08046263 	.word	0x08046263
 8025e4c:	08045f38 	.word	0x08045f38
 8025e50:	080464be 	.word	0x080464be
 8025e54:	08045f48 	.word	0x08045f48
 8025e58:	08045f3a 	.word	0x08045f3a
 8025e5c:	08045f3e 	.word	0x08045f3e
 8025e60:	08045f51 	.word	0x08045f51
 8025e64:	08045f4d 	.word	0x08045f4d
 8025e68:	08045f30 	.word	0x08045f30
 8025e6c:	08045f29 	.word	0x08045f29
 8025e70:	6971      	ldr	r1, [r6, #20]
 8025e72:	4ab6      	ldr	r2, [pc, #728]	; (802614c <__strftime.isra.0+0x7a0>)
 8025e74:	4291      	cmp	r1, r2
 8025e76:	bfac      	ite	ge
 8025e78:	2300      	movge	r3, #0
 8025e7a:	2301      	movlt	r3, #1
 8025e7c:	4630      	mov	r0, r6
 8025e7e:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8025e82:	f7ff fd31 	bl	80258e8 <iso_year_adjust>
 8025e86:	9904      	ldr	r1, [sp, #16]
 8025e88:	2900      	cmp	r1, #0
 8025e8a:	4682      	mov	sl, r0
 8025e8c:	db2c      	blt.n	8025ee8 <__strftime.isra.0+0x53c>
 8025e8e:	2264      	movs	r2, #100	; 0x64
 8025e90:	fb91 f2f2 	sdiv	r2, r1, r2
 8025e94:	3213      	adds	r2, #19
 8025e96:	6970      	ldr	r0, [r6, #20]
 8025e98:	2800      	cmp	r0, #0
 8025e9a:	db30      	blt.n	8025efe <__strftime.isra.0+0x552>
 8025e9c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025ea0:	fb90 fefc 	sdiv	lr, r0, ip
 8025ea4:	fb0c 001e 	mls	r0, ip, lr, r0
 8025ea8:	f1ba 0f00 	cmp.w	sl, #0
 8025eac:	da36      	bge.n	8025f1c <__strftime.isra.0+0x570>
 8025eae:	6971      	ldr	r1, [r6, #20]
 8025eb0:	4ba7      	ldr	r3, [pc, #668]	; (8026150 <__strftime.isra.0+0x7a4>)
 8025eb2:	4299      	cmp	r1, r3
 8025eb4:	db3d      	blt.n	8025f32 <__strftime.isra.0+0x586>
 8025eb6:	4482      	add	sl, r0
 8025eb8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8025ebc:	d13e      	bne.n	8025f3c <__strftime.isra.0+0x590>
 8025ebe:	3a01      	subs	r2, #1
 8025ec0:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8025ec4:	9b03      	ldr	r3, [sp, #12]
 8025ec6:	2064      	movs	r0, #100	; 0x64
 8025ec8:	fb00 aa02 	mla	sl, r0, r2, sl
 8025ecc:	2b00      	cmp	r3, #0
 8025ece:	f000 81ad 	beq.w	802622c <__strftime.isra.0+0x880>
 8025ed2:	222d      	movs	r2, #45	; 0x2d
 8025ed4:	f88d 2018 	strb.w	r2, [sp, #24]
 8025ed8:	f1b9 0f00 	cmp.w	r9, #0
 8025edc:	d001      	beq.n	8025ee2 <__strftime.isra.0+0x536>
 8025ede:	f109 39ff 	add.w	r9, r9, #4294967295
 8025ee2:	f10d 0219 	add.w	r2, sp, #25
 8025ee6:	e1ac      	b.n	8026242 <__strftime.isra.0+0x896>
 8025ee8:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8025eec:	9104      	str	r1, [sp, #16]
 8025eee:	f000 fe63 	bl	8026bb8 <abs>
 8025ef2:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025ef6:	9904      	ldr	r1, [sp, #16]
 8025ef8:	fb90 f2fc 	sdiv	r2, r0, ip
 8025efc:	e7cb      	b.n	8025e96 <__strftime.isra.0+0x4ea>
 8025efe:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025f02:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8025f06:	f000 fe57 	bl	8026bb8 <abs>
 8025f0a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025f0e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8025f12:	fb90 fefc 	sdiv	lr, r0, ip
 8025f16:	fb0e 001c 	mls	r0, lr, ip, r0
 8025f1a:	e7c5      	b.n	8025ea8 <__strftime.isra.0+0x4fc>
 8025f1c:	d0cb      	beq.n	8025eb6 <__strftime.isra.0+0x50a>
 8025f1e:	4b8b      	ldr	r3, [pc, #556]	; (802614c <__strftime.isra.0+0x7a0>)
 8025f20:	4299      	cmp	r1, r3
 8025f22:	bfb4      	ite	lt
 8025f24:	2301      	movlt	r3, #1
 8025f26:	2300      	movge	r3, #0
 8025f28:	9303      	str	r3, [sp, #12]
 8025f2a:	bfb8      	it	lt
 8025f2c:	f04f 3aff 	movlt.w	sl, #4294967295
 8025f30:	e7c1      	b.n	8025eb6 <__strftime.isra.0+0x50a>
 8025f32:	f04f 0a01 	mov.w	sl, #1
 8025f36:	f8cd a00c 	str.w	sl, [sp, #12]
 8025f3a:	e7bc      	b.n	8025eb6 <__strftime.isra.0+0x50a>
 8025f3c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8025f40:	bf04      	itt	eq
 8025f42:	3201      	addeq	r2, #1
 8025f44:	f04f 0a00 	moveq.w	sl, #0
 8025f48:	e7bc      	b.n	8025ec4 <__strftime.isra.0+0x518>
 8025f4a:	4982      	ldr	r1, [pc, #520]	; (8026154 <__strftime.isra.0+0x7a8>)
 8025f4c:	4a82      	ldr	r2, [pc, #520]	; (8026158 <__strftime.isra.0+0x7ac>)
 8025f4e:	68b3      	ldr	r3, [r6, #8]
 8025f50:	286b      	cmp	r0, #107	; 0x6b
 8025f52:	bf08      	it	eq
 8025f54:	460a      	moveq	r2, r1
 8025f56:	e6e3      	b.n	8025d20 <__strftime.isra.0+0x374>
 8025f58:	68b3      	ldr	r3, [r6, #8]
 8025f5a:	b163      	cbz	r3, 8025f76 <__strftime.isra.0+0x5ca>
 8025f5c:	2b0c      	cmp	r3, #12
 8025f5e:	d004      	beq.n	8025f6a <__strftime.isra.0+0x5be>
 8025f60:	210c      	movs	r1, #12
 8025f62:	fb93 f2f1 	sdiv	r2, r3, r1
 8025f66:	fb01 3312 	mls	r3, r1, r2, r3
 8025f6a:	497b      	ldr	r1, [pc, #492]	; (8026158 <__strftime.isra.0+0x7ac>)
 8025f6c:	4a79      	ldr	r2, [pc, #484]	; (8026154 <__strftime.isra.0+0x7a8>)
 8025f6e:	2849      	cmp	r0, #73	; 0x49
 8025f70:	bf08      	it	eq
 8025f72:	460a      	moveq	r2, r1
 8025f74:	e6d4      	b.n	8025d20 <__strftime.isra.0+0x374>
 8025f76:	230c      	movs	r3, #12
 8025f78:	e7f7      	b.n	8025f6a <__strftime.isra.0+0x5be>
 8025f7a:	69f3      	ldr	r3, [r6, #28]
 8025f7c:	4a77      	ldr	r2, [pc, #476]	; (802615c <__strftime.isra.0+0x7b0>)
 8025f7e:	3301      	adds	r3, #1
 8025f80:	e6ce      	b.n	8025d20 <__strftime.isra.0+0x374>
 8025f82:	6933      	ldr	r3, [r6, #16]
 8025f84:	3301      	adds	r3, #1
 8025f86:	e73d      	b.n	8025e04 <__strftime.isra.0+0x458>
 8025f88:	6873      	ldr	r3, [r6, #4]
 8025f8a:	e73b      	b.n	8025e04 <__strftime.isra.0+0x458>
 8025f8c:	1e6b      	subs	r3, r5, #1
 8025f8e:	429c      	cmp	r4, r3
 8025f90:	f4bf ad3e 	bcs.w	8025a10 <__strftime.isra.0+0x64>
 8025f94:	230a      	movs	r3, #10
 8025f96:	553b      	strb	r3, [r7, r4]
 8025f98:	3401      	adds	r4, #1
 8025f9a:	e60b      	b.n	8025bb4 <__strftime.isra.0+0x208>
 8025f9c:	68b3      	ldr	r3, [r6, #8]
 8025f9e:	2b0b      	cmp	r3, #11
 8025fa0:	4b6f      	ldr	r3, [pc, #444]	; (8026160 <__strftime.isra.0+0x7b4>)
 8025fa2:	bfd4      	ite	le
 8025fa4:	2200      	movle	r2, #0
 8025fa6:	2201      	movgt	r2, #1
 8025fa8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025fac:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8025fb0:	4648      	mov	r0, r9
 8025fb2:	f7da f94f 	bl	8000254 <strlen>
 8025fb6:	f109 32ff 	add.w	r2, r9, #4294967295
 8025fba:	4420      	add	r0, r4
 8025fbc:	f105 3cff 	add.w	ip, r5, #4294967295
 8025fc0:	42a0      	cmp	r0, r4
 8025fc2:	f43f adf7 	beq.w	8025bb4 <__strftime.isra.0+0x208>
 8025fc6:	45a4      	cmp	ip, r4
 8025fc8:	f67f ad22 	bls.w	8025a10 <__strftime.isra.0+0x64>
 8025fcc:	f898 1000 	ldrb.w	r1, [r8]
 8025fd0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8025fd4:	2950      	cmp	r1, #80	; 0x50
 8025fd6:	d107      	bne.n	8025fe8 <__strftime.isra.0+0x63c>
 8025fd8:	4962      	ldr	r1, [pc, #392]	; (8026164 <__strftime.isra.0+0x7b8>)
 8025fda:	5cc9      	ldrb	r1, [r1, r3]
 8025fdc:	f001 0103 	and.w	r1, r1, #3
 8025fe0:	2901      	cmp	r1, #1
 8025fe2:	bf08      	it	eq
 8025fe4:	3320      	addeq	r3, #32
 8025fe6:	b2db      	uxtb	r3, r3
 8025fe8:	553b      	strb	r3, [r7, r4]
 8025fea:	3401      	adds	r4, #1
 8025fec:	e7e8      	b.n	8025fc0 <__strftime.isra.0+0x614>
 8025fee:	6873      	ldr	r3, [r6, #4]
 8025ff0:	9300      	str	r3, [sp, #0]
 8025ff2:	4a5d      	ldr	r2, [pc, #372]	; (8026168 <__strftime.isra.0+0x7bc>)
 8025ff4:	68b3      	ldr	r3, [r6, #8]
 8025ff6:	1b29      	subs	r1, r5, r4
 8025ff8:	1938      	adds	r0, r7, r4
 8025ffa:	f7ff fb91 	bl	8025720 <sniprintf>
 8025ffe:	e693      	b.n	8025d28 <__strftime.isra.0+0x37c>
 8026000:	6a33      	ldr	r3, [r6, #32]
 8026002:	2b00      	cmp	r3, #0
 8026004:	db7a      	blt.n	80260fc <__strftime.isra.0+0x750>
 8026006:	f000 fb73 	bl	80266f0 <__tz_lock>
 802600a:	9b02      	ldr	r3, [sp, #8]
 802600c:	b90b      	cbnz	r3, 8026012 <__strftime.isra.0+0x666>
 802600e:	f000 fb7b 	bl	8026708 <_tzset_unlocked>
 8026012:	f001 fd79 	bl	8027b08 <__gettzinfo>
 8026016:	6a33      	ldr	r3, [r6, #32]
 8026018:	2b00      	cmp	r3, #0
 802601a:	bfd4      	ite	le
 802601c:	2200      	movle	r2, #0
 802601e:	2201      	movgt	r2, #1
 8026020:	2328      	movs	r3, #40	; 0x28
 8026022:	fb02 3303 	mla	r3, r2, r3, r3
 8026026:	58c3      	ldr	r3, [r0, r3]
 8026028:	f1c3 0900 	rsb	r9, r3, #0
 802602c:	f000 fb66 	bl	80266fc <__tz_unlock>
 8026030:	2301      	movs	r3, #1
 8026032:	9302      	str	r3, [sp, #8]
 8026034:	6972      	ldr	r2, [r6, #20]
 8026036:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 802603a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802603e:	f16c 0c00 	sbc.w	ip, ip, #0
 8026042:	f1bc 0f00 	cmp.w	ip, #0
 8026046:	eba5 0104 	sub.w	r1, r5, r4
 802604a:	eb07 0004 	add.w	r0, r7, r4
 802604e:	da02      	bge.n	8026056 <__strftime.isra.0+0x6aa>
 8026050:	3303      	adds	r3, #3
 8026052:	f14c 0c00 	adc.w	ip, ip, #0
 8026056:	089b      	lsrs	r3, r3, #2
 8026058:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802605c:	f102 3aff 	add.w	sl, r2, #4294967295
 8026060:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8026064:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8026068:	fb9a fefe 	sdiv	lr, sl, lr
 802606c:	ebb3 030e 	subs.w	r3, r3, lr
 8026070:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8026074:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8026078:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 802607c:	fb9a fefe 	sdiv	lr, sl, lr
 8026080:	eb13 030e 	adds.w	r3, r3, lr
 8026084:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8026088:	3a46      	subs	r2, #70	; 0x46
 802608a:	f240 1c6d 	movw	ip, #365	; 0x16d
 802608e:	fb0c f202 	mul.w	r2, ip, r2
 8026092:	189b      	adds	r3, r3, r2
 8026094:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8026098:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 802609c:	f04f 0c18 	mov.w	ip, #24
 80260a0:	eb13 030e 	adds.w	r3, r3, lr
 80260a4:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80260a8:	fba3 3e0c 	umull	r3, lr, r3, ip
 80260ac:	fb0c e202 	mla	r2, ip, r2, lr
 80260b0:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80260b4:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80260b8:	eb13 030e 	adds.w	r3, r3, lr
 80260bc:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 80260c0:	fba3 320c 	umull	r3, r2, r3, ip
 80260c4:	fb0c 220e 	mla	r2, ip, lr, r2
 80260c8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80260cc:	eb13 030e 	adds.w	r3, r3, lr
 80260d0:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80260d4:	fba3 3e0c 	umull	r3, lr, r3, ip
 80260d8:	fb0c e202 	mla	r2, ip, r2, lr
 80260dc:	f8d6 e000 	ldr.w	lr, [r6]
 80260e0:	eb13 030e 	adds.w	r3, r3, lr
 80260e4:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80260e8:	ebb3 0309 	subs.w	r3, r3, r9
 80260ec:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 80260f0:	e9cd 3200 	strd	r3, r2, [sp]
 80260f4:	4a1d      	ldr	r2, [pc, #116]	; (802616c <__strftime.isra.0+0x7c0>)
 80260f6:	f7ff fb13 	bl	8025720 <sniprintf>
 80260fa:	e615      	b.n	8025d28 <__strftime.isra.0+0x37c>
 80260fc:	f04f 0900 	mov.w	r9, #0
 8026100:	e798      	b.n	8026034 <__strftime.isra.0+0x688>
 8026102:	6833      	ldr	r3, [r6, #0]
 8026104:	e67e      	b.n	8025e04 <__strftime.isra.0+0x458>
 8026106:	1e6b      	subs	r3, r5, #1
 8026108:	429c      	cmp	r4, r3
 802610a:	f4bf ac81 	bcs.w	8025a10 <__strftime.isra.0+0x64>
 802610e:	2309      	movs	r3, #9
 8026110:	e741      	b.n	8025f96 <__strftime.isra.0+0x5ea>
 8026112:	6833      	ldr	r3, [r6, #0]
 8026114:	9301      	str	r3, [sp, #4]
 8026116:	6873      	ldr	r3, [r6, #4]
 8026118:	9300      	str	r3, [sp, #0]
 802611a:	4a15      	ldr	r2, [pc, #84]	; (8026170 <__strftime.isra.0+0x7c4>)
 802611c:	68b3      	ldr	r3, [r6, #8]
 802611e:	e5f4      	b.n	8025d0a <__strftime.isra.0+0x35e>
 8026120:	1e6b      	subs	r3, r5, #1
 8026122:	429c      	cmp	r4, r3
 8026124:	f4bf ac74 	bcs.w	8025a10 <__strftime.isra.0+0x64>
 8026128:	69b3      	ldr	r3, [r6, #24]
 802612a:	1c62      	adds	r2, r4, #1
 802612c:	b91b      	cbnz	r3, 8026136 <__strftime.isra.0+0x78a>
 802612e:	2337      	movs	r3, #55	; 0x37
 8026130:	553b      	strb	r3, [r7, r4]
 8026132:	4614      	mov	r4, r2
 8026134:	e53e      	b.n	8025bb4 <__strftime.isra.0+0x208>
 8026136:	3330      	adds	r3, #48	; 0x30
 8026138:	e7fa      	b.n	8026130 <__strftime.isra.0+0x784>
 802613a:	69f3      	ldr	r3, [r6, #28]
 802613c:	69b2      	ldr	r2, [r6, #24]
 802613e:	3307      	adds	r3, #7
 8026140:	1a9b      	subs	r3, r3, r2
 8026142:	2207      	movs	r2, #7
 8026144:	fb93 f3f2 	sdiv	r3, r3, r2
 8026148:	e65c      	b.n	8025e04 <__strftime.isra.0+0x458>
 802614a:	bf00      	nop
 802614c:	fffff894 	.word	0xfffff894
 8026150:	fffff895 	.word	0xfffff895
 8026154:	08045f3a 	.word	0x08045f3a
 8026158:	08045f48 	.word	0x08045f48
 802615c:	08045f5d 	.word	0x08045f5d
 8026160:	080460b0 	.word	0x080460b0
 8026164:	08045c01 	.word	0x08045c01
 8026168:	08045f6c 	.word	0x08045f6c
 802616c:	08045f62 	.word	0x08045f62
 8026170:	08045f67 	.word	0x08045f67
 8026174:	4630      	mov	r0, r6
 8026176:	f7ff fbb7 	bl	80258e8 <iso_year_adjust>
 802617a:	69b2      	ldr	r2, [r6, #24]
 802617c:	b132      	cbz	r2, 802618c <__strftime.isra.0+0x7e0>
 802617e:	3a01      	subs	r2, #1
 8026180:	2800      	cmp	r0, #0
 8026182:	dc28      	bgt.n	80261d6 <__strftime.isra.0+0x82a>
 8026184:	69f3      	ldr	r3, [r6, #28]
 8026186:	d103      	bne.n	8026190 <__strftime.isra.0+0x7e4>
 8026188:	330a      	adds	r3, #10
 802618a:	e7d9      	b.n	8026140 <__strftime.isra.0+0x794>
 802618c:	2206      	movs	r2, #6
 802618e:	e7f7      	b.n	8026180 <__strftime.isra.0+0x7d4>
 8026190:	6971      	ldr	r1, [r6, #20]
 8026192:	2900      	cmp	r1, #0
 8026194:	eba2 0203 	sub.w	r2, r2, r3
 8026198:	f240 736b 	movw	r3, #1899	; 0x76b
 802619c:	bfa8      	it	ge
 802619e:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 80261a2:	440b      	add	r3, r1
 80261a4:	0799      	lsls	r1, r3, #30
 80261a6:	d105      	bne.n	80261b4 <__strftime.isra.0+0x808>
 80261a8:	2064      	movs	r0, #100	; 0x64
 80261aa:	fb93 f1f0 	sdiv	r1, r3, r0
 80261ae:	fb00 3111 	mls	r1, r0, r1, r3
 80261b2:	b971      	cbnz	r1, 80261d2 <__strftime.isra.0+0x826>
 80261b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80261b8:	fb93 f0f1 	sdiv	r0, r3, r1
 80261bc:	fb01 3310 	mls	r3, r1, r0, r3
 80261c0:	fab3 f383 	clz	r3, r3
 80261c4:	095b      	lsrs	r3, r3, #5
 80261c6:	1ad3      	subs	r3, r2, r3
 80261c8:	2b05      	cmp	r3, #5
 80261ca:	bfb4      	ite	lt
 80261cc:	2335      	movlt	r3, #53	; 0x35
 80261ce:	2334      	movge	r3, #52	; 0x34
 80261d0:	e618      	b.n	8025e04 <__strftime.isra.0+0x458>
 80261d2:	2301      	movs	r3, #1
 80261d4:	e7f7      	b.n	80261c6 <__strftime.isra.0+0x81a>
 80261d6:	2301      	movs	r3, #1
 80261d8:	e614      	b.n	8025e04 <__strftime.isra.0+0x458>
 80261da:	1e6b      	subs	r3, r5, #1
 80261dc:	429c      	cmp	r4, r3
 80261de:	f4bf ac17 	bcs.w	8025a10 <__strftime.isra.0+0x64>
 80261e2:	69b3      	ldr	r3, [r6, #24]
 80261e4:	3330      	adds	r3, #48	; 0x30
 80261e6:	e6d6      	b.n	8025f96 <__strftime.isra.0+0x5ea>
 80261e8:	69b2      	ldr	r2, [r6, #24]
 80261ea:	b11a      	cbz	r2, 80261f4 <__strftime.isra.0+0x848>
 80261ec:	3a01      	subs	r2, #1
 80261ee:	69f3      	ldr	r3, [r6, #28]
 80261f0:	3307      	adds	r3, #7
 80261f2:	e7a5      	b.n	8026140 <__strftime.isra.0+0x794>
 80261f4:	2206      	movs	r2, #6
 80261f6:	e7fa      	b.n	80261ee <__strftime.isra.0+0x842>
 80261f8:	6970      	ldr	r0, [r6, #20]
 80261fa:	2800      	cmp	r0, #0
 80261fc:	db05      	blt.n	802620a <__strftime.isra.0+0x85e>
 80261fe:	2364      	movs	r3, #100	; 0x64
 8026200:	fb90 f2f3 	sdiv	r2, r0, r3
 8026204:	fb02 0313 	mls	r3, r2, r3, r0
 8026208:	e5fc      	b.n	8025e04 <__strftime.isra.0+0x458>
 802620a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802620e:	f000 fcd3 	bl	8026bb8 <abs>
 8026212:	e7f4      	b.n	80261fe <__strftime.isra.0+0x852>
 8026214:	6972      	ldr	r2, [r6, #20]
 8026216:	494c      	ldr	r1, [pc, #304]	; (8026348 <__strftime.isra.0+0x99c>)
 8026218:	428a      	cmp	r2, r1
 802621a:	da05      	bge.n	8026228 <__strftime.isra.0+0x87c>
 802621c:	202d      	movs	r0, #45	; 0x2d
 802621e:	f88d 0018 	strb.w	r0, [sp, #24]
 8026222:	eba1 0a02 	sub.w	sl, r1, r2
 8026226:	e657      	b.n	8025ed8 <__strftime.isra.0+0x52c>
 8026228:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 802622c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8026230:	d106      	bne.n	8026240 <__strftime.isra.0+0x894>
 8026232:	f242 720f 	movw	r2, #9999	; 0x270f
 8026236:	4592      	cmp	sl, r2
 8026238:	d902      	bls.n	8026240 <__strftime.isra.0+0x894>
 802623a:	f88d b018 	strb.w	fp, [sp, #24]
 802623e:	e64b      	b.n	8025ed8 <__strftime.isra.0+0x52c>
 8026240:	aa06      	add	r2, sp, #24
 8026242:	2125      	movs	r1, #37	; 0x25
 8026244:	7011      	strb	r1, [r2, #0]
 8026246:	f1bb 0f00 	cmp.w	fp, #0
 802624a:	d108      	bne.n	802625e <__strftime.isra.0+0x8b2>
 802624c:	1c50      	adds	r0, r2, #1
 802624e:	493f      	ldr	r1, [pc, #252]	; (802634c <__strftime.isra.0+0x9a0>)
 8026250:	f7ff fb41 	bl	80258d6 <strcpy>
 8026254:	f8cd a000 	str.w	sl, [sp]
 8026258:	464b      	mov	r3, r9
 802625a:	aa06      	add	r2, sp, #24
 802625c:	e6cb      	b.n	8025ff6 <__strftime.isra.0+0x64a>
 802625e:	2330      	movs	r3, #48	; 0x30
 8026260:	1c90      	adds	r0, r2, #2
 8026262:	7053      	strb	r3, [r2, #1]
 8026264:	e7f3      	b.n	802624e <__strftime.isra.0+0x8a2>
 8026266:	6a33      	ldr	r3, [r6, #32]
 8026268:	2b00      	cmp	r3, #0
 802626a:	f6ff aca3 	blt.w	8025bb4 <__strftime.isra.0+0x208>
 802626e:	f000 fa3f 	bl	80266f0 <__tz_lock>
 8026272:	9b02      	ldr	r3, [sp, #8]
 8026274:	b90b      	cbnz	r3, 802627a <__strftime.isra.0+0x8ce>
 8026276:	f000 fa47 	bl	8026708 <_tzset_unlocked>
 802627a:	f001 fc45 	bl	8027b08 <__gettzinfo>
 802627e:	6a33      	ldr	r3, [r6, #32]
 8026280:	2b00      	cmp	r3, #0
 8026282:	bfd4      	ite	le
 8026284:	2200      	movle	r2, #0
 8026286:	2201      	movgt	r2, #1
 8026288:	2328      	movs	r3, #40	; 0x28
 802628a:	fb02 3303 	mla	r3, r2, r3, r3
 802628e:	eb07 0a04 	add.w	sl, r7, r4
 8026292:	58c3      	ldr	r3, [r0, r3]
 8026294:	f1c3 0900 	rsb	r9, r3, #0
 8026298:	f000 fa30 	bl	80266fc <__tz_unlock>
 802629c:	233c      	movs	r3, #60	; 0x3c
 802629e:	fb99 f0f3 	sdiv	r0, r9, r3
 80262a2:	f001 fce1 	bl	8027c68 <labs>
 80262a6:	233c      	movs	r3, #60	; 0x3c
 80262a8:	eba5 0b04 	sub.w	fp, r5, r4
 80262ac:	fb90 f2f3 	sdiv	r2, r0, r3
 80262b0:	fb02 0013 	mls	r0, r2, r3, r0
 80262b4:	9000      	str	r0, [sp, #0]
 80262b6:	4a26      	ldr	r2, [pc, #152]	; (8026350 <__strftime.isra.0+0x9a4>)
 80262b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80262bc:	4659      	mov	r1, fp
 80262be:	4650      	mov	r0, sl
 80262c0:	fb99 f3f3 	sdiv	r3, r9, r3
 80262c4:	f7ff fa2c 	bl	8025720 <sniprintf>
 80262c8:	2800      	cmp	r0, #0
 80262ca:	f6ff aba1 	blt.w	8025a10 <__strftime.isra.0+0x64>
 80262ce:	4404      	add	r4, r0
 80262d0:	42a5      	cmp	r5, r4
 80262d2:	f67f ab9d 	bls.w	8025a10 <__strftime.isra.0+0x64>
 80262d6:	2301      	movs	r3, #1
 80262d8:	9302      	str	r3, [sp, #8]
 80262da:	e46b      	b.n	8025bb4 <__strftime.isra.0+0x208>
 80262dc:	6a33      	ldr	r3, [r6, #32]
 80262de:	2b00      	cmp	r3, #0
 80262e0:	f6ff ac68 	blt.w	8025bb4 <__strftime.isra.0+0x208>
 80262e4:	f000 fa04 	bl	80266f0 <__tz_lock>
 80262e8:	9b02      	ldr	r3, [sp, #8]
 80262ea:	b90b      	cbnz	r3, 80262f0 <__strftime.isra.0+0x944>
 80262ec:	f000 fa0c 	bl	8026708 <_tzset_unlocked>
 80262f0:	6a33      	ldr	r3, [r6, #32]
 80262f2:	4a18      	ldr	r2, [pc, #96]	; (8026354 <__strftime.isra.0+0x9a8>)
 80262f4:	2b00      	cmp	r3, #0
 80262f6:	bfd4      	ite	le
 80262f8:	2300      	movle	r3, #0
 80262fa:	2301      	movgt	r3, #1
 80262fc:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026300:	4648      	mov	r0, r9
 8026302:	f7d9 ffa7 	bl	8000254 <strlen>
 8026306:	f109 39ff 	add.w	r9, r9, #4294967295
 802630a:	4420      	add	r0, r4
 802630c:	1e6b      	subs	r3, r5, #1
 802630e:	42a0      	cmp	r0, r4
 8026310:	d102      	bne.n	8026318 <__strftime.isra.0+0x96c>
 8026312:	f000 f9f3 	bl	80266fc <__tz_unlock>
 8026316:	e7de      	b.n	80262d6 <__strftime.isra.0+0x92a>
 8026318:	42a3      	cmp	r3, r4
 802631a:	d904      	bls.n	8026326 <__strftime.isra.0+0x97a>
 802631c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026320:	553a      	strb	r2, [r7, r4]
 8026322:	3401      	adds	r4, #1
 8026324:	e7f3      	b.n	802630e <__strftime.isra.0+0x962>
 8026326:	f000 f9e9 	bl	80266fc <__tz_unlock>
 802632a:	f7ff bb71 	b.w	8025a10 <__strftime.isra.0+0x64>
 802632e:	1e6b      	subs	r3, r5, #1
 8026330:	429c      	cmp	r4, r3
 8026332:	f4bf ab6d 	bcs.w	8025a10 <__strftime.isra.0+0x64>
 8026336:	2325      	movs	r3, #37	; 0x25
 8026338:	e62d      	b.n	8025f96 <__strftime.isra.0+0x5ea>
 802633a:	b10d      	cbz	r5, 8026340 <__strftime.isra.0+0x994>
 802633c:	2300      	movs	r3, #0
 802633e:	553b      	strb	r3, [r7, r4]
 8026340:	4620      	mov	r0, r4
 8026342:	b00f      	add	sp, #60	; 0x3c
 8026344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026348:	fffff894 	.word	0xfffff894
 802634c:	08045f59 	.word	0x08045f59
 8026350:	08045f76 	.word	0x08045f76
 8026354:	200004f4 	.word	0x200004f4

08026358 <strftime>:
 8026358:	f7ff bb28 	b.w	80259ac <__strftime.isra.0>

0802635c <strncmp>:
 802635c:	b510      	push	{r4, lr}
 802635e:	b17a      	cbz	r2, 8026380 <strncmp+0x24>
 8026360:	4603      	mov	r3, r0
 8026362:	3901      	subs	r1, #1
 8026364:	1884      	adds	r4, r0, r2
 8026366:	f813 0b01 	ldrb.w	r0, [r3], #1
 802636a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802636e:	4290      	cmp	r0, r2
 8026370:	d101      	bne.n	8026376 <strncmp+0x1a>
 8026372:	42a3      	cmp	r3, r4
 8026374:	d101      	bne.n	802637a <strncmp+0x1e>
 8026376:	1a80      	subs	r0, r0, r2
 8026378:	bd10      	pop	{r4, pc}
 802637a:	2800      	cmp	r0, #0
 802637c:	d1f3      	bne.n	8026366 <strncmp+0xa>
 802637e:	e7fa      	b.n	8026376 <strncmp+0x1a>
 8026380:	4610      	mov	r0, r2
 8026382:	e7f9      	b.n	8026378 <strncmp+0x1c>

08026384 <_strtol_l.constprop.0>:
 8026384:	2b01      	cmp	r3, #1
 8026386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802638a:	d001      	beq.n	8026390 <_strtol_l.constprop.0+0xc>
 802638c:	2b24      	cmp	r3, #36	; 0x24
 802638e:	d906      	bls.n	802639e <_strtol_l.constprop.0+0x1a>
 8026390:	f001 fa9c 	bl	80278cc <__errno>
 8026394:	2316      	movs	r3, #22
 8026396:	6003      	str	r3, [r0, #0]
 8026398:	2000      	movs	r0, #0
 802639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802639e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8026484 <_strtol_l.constprop.0+0x100>
 80263a2:	460d      	mov	r5, r1
 80263a4:	462e      	mov	r6, r5
 80263a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80263aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80263ae:	f017 0708 	ands.w	r7, r7, #8
 80263b2:	d1f7      	bne.n	80263a4 <_strtol_l.constprop.0+0x20>
 80263b4:	2c2d      	cmp	r4, #45	; 0x2d
 80263b6:	d132      	bne.n	802641e <_strtol_l.constprop.0+0x9a>
 80263b8:	782c      	ldrb	r4, [r5, #0]
 80263ba:	2701      	movs	r7, #1
 80263bc:	1cb5      	adds	r5, r6, #2
 80263be:	2b00      	cmp	r3, #0
 80263c0:	d05b      	beq.n	802647a <_strtol_l.constprop.0+0xf6>
 80263c2:	2b10      	cmp	r3, #16
 80263c4:	d109      	bne.n	80263da <_strtol_l.constprop.0+0x56>
 80263c6:	2c30      	cmp	r4, #48	; 0x30
 80263c8:	d107      	bne.n	80263da <_strtol_l.constprop.0+0x56>
 80263ca:	782c      	ldrb	r4, [r5, #0]
 80263cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80263d0:	2c58      	cmp	r4, #88	; 0x58
 80263d2:	d14d      	bne.n	8026470 <_strtol_l.constprop.0+0xec>
 80263d4:	786c      	ldrb	r4, [r5, #1]
 80263d6:	2310      	movs	r3, #16
 80263d8:	3502      	adds	r5, #2
 80263da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80263de:	f108 38ff 	add.w	r8, r8, #4294967295
 80263e2:	f04f 0c00 	mov.w	ip, #0
 80263e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80263ea:	4666      	mov	r6, ip
 80263ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80263f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80263f4:	f1be 0f09 	cmp.w	lr, #9
 80263f8:	d816      	bhi.n	8026428 <_strtol_l.constprop.0+0xa4>
 80263fa:	4674      	mov	r4, lr
 80263fc:	42a3      	cmp	r3, r4
 80263fe:	dd24      	ble.n	802644a <_strtol_l.constprop.0+0xc6>
 8026400:	f1bc 0f00 	cmp.w	ip, #0
 8026404:	db1e      	blt.n	8026444 <_strtol_l.constprop.0+0xc0>
 8026406:	45b1      	cmp	r9, r6
 8026408:	d31c      	bcc.n	8026444 <_strtol_l.constprop.0+0xc0>
 802640a:	d101      	bne.n	8026410 <_strtol_l.constprop.0+0x8c>
 802640c:	45a2      	cmp	sl, r4
 802640e:	db19      	blt.n	8026444 <_strtol_l.constprop.0+0xc0>
 8026410:	fb06 4603 	mla	r6, r6, r3, r4
 8026414:	f04f 0c01 	mov.w	ip, #1
 8026418:	f815 4b01 	ldrb.w	r4, [r5], #1
 802641c:	e7e8      	b.n	80263f0 <_strtol_l.constprop.0+0x6c>
 802641e:	2c2b      	cmp	r4, #43	; 0x2b
 8026420:	bf04      	itt	eq
 8026422:	782c      	ldrbeq	r4, [r5, #0]
 8026424:	1cb5      	addeq	r5, r6, #2
 8026426:	e7ca      	b.n	80263be <_strtol_l.constprop.0+0x3a>
 8026428:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802642c:	f1be 0f19 	cmp.w	lr, #25
 8026430:	d801      	bhi.n	8026436 <_strtol_l.constprop.0+0xb2>
 8026432:	3c37      	subs	r4, #55	; 0x37
 8026434:	e7e2      	b.n	80263fc <_strtol_l.constprop.0+0x78>
 8026436:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802643a:	f1be 0f19 	cmp.w	lr, #25
 802643e:	d804      	bhi.n	802644a <_strtol_l.constprop.0+0xc6>
 8026440:	3c57      	subs	r4, #87	; 0x57
 8026442:	e7db      	b.n	80263fc <_strtol_l.constprop.0+0x78>
 8026444:	f04f 3cff 	mov.w	ip, #4294967295
 8026448:	e7e6      	b.n	8026418 <_strtol_l.constprop.0+0x94>
 802644a:	f1bc 0f00 	cmp.w	ip, #0
 802644e:	da05      	bge.n	802645c <_strtol_l.constprop.0+0xd8>
 8026450:	2322      	movs	r3, #34	; 0x22
 8026452:	6003      	str	r3, [r0, #0]
 8026454:	4646      	mov	r6, r8
 8026456:	b942      	cbnz	r2, 802646a <_strtol_l.constprop.0+0xe6>
 8026458:	4630      	mov	r0, r6
 802645a:	e79e      	b.n	802639a <_strtol_l.constprop.0+0x16>
 802645c:	b107      	cbz	r7, 8026460 <_strtol_l.constprop.0+0xdc>
 802645e:	4276      	negs	r6, r6
 8026460:	2a00      	cmp	r2, #0
 8026462:	d0f9      	beq.n	8026458 <_strtol_l.constprop.0+0xd4>
 8026464:	f1bc 0f00 	cmp.w	ip, #0
 8026468:	d000      	beq.n	802646c <_strtol_l.constprop.0+0xe8>
 802646a:	1e69      	subs	r1, r5, #1
 802646c:	6011      	str	r1, [r2, #0]
 802646e:	e7f3      	b.n	8026458 <_strtol_l.constprop.0+0xd4>
 8026470:	2430      	movs	r4, #48	; 0x30
 8026472:	2b00      	cmp	r3, #0
 8026474:	d1b1      	bne.n	80263da <_strtol_l.constprop.0+0x56>
 8026476:	2308      	movs	r3, #8
 8026478:	e7af      	b.n	80263da <_strtol_l.constprop.0+0x56>
 802647a:	2c30      	cmp	r4, #48	; 0x30
 802647c:	d0a5      	beq.n	80263ca <_strtol_l.constprop.0+0x46>
 802647e:	230a      	movs	r3, #10
 8026480:	e7ab      	b.n	80263da <_strtol_l.constprop.0+0x56>
 8026482:	bf00      	nop
 8026484:	08045c01 	.word	0x08045c01

08026488 <_strtol_r>:
 8026488:	f7ff bf7c 	b.w	8026384 <_strtol_l.constprop.0>

0802648c <strtol>:
 802648c:	4613      	mov	r3, r2
 802648e:	460a      	mov	r2, r1
 8026490:	4601      	mov	r1, r0
 8026492:	4802      	ldr	r0, [pc, #8]	; (802649c <strtol+0x10>)
 8026494:	6800      	ldr	r0, [r0, #0]
 8026496:	f7ff bf75 	b.w	8026384 <_strtol_l.constprop.0>
 802649a:	bf00      	nop
 802649c:	20000490 	.word	0x20000490

080264a0 <_strtoul_l.constprop.0>:
 80264a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80264a4:	4f36      	ldr	r7, [pc, #216]	; (8026580 <_strtoul_l.constprop.0+0xe0>)
 80264a6:	4686      	mov	lr, r0
 80264a8:	460d      	mov	r5, r1
 80264aa:	4628      	mov	r0, r5
 80264ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80264b0:	5de6      	ldrb	r6, [r4, r7]
 80264b2:	f016 0608 	ands.w	r6, r6, #8
 80264b6:	d1f8      	bne.n	80264aa <_strtoul_l.constprop.0+0xa>
 80264b8:	2c2d      	cmp	r4, #45	; 0x2d
 80264ba:	d12f      	bne.n	802651c <_strtoul_l.constprop.0+0x7c>
 80264bc:	782c      	ldrb	r4, [r5, #0]
 80264be:	2601      	movs	r6, #1
 80264c0:	1c85      	adds	r5, r0, #2
 80264c2:	2b00      	cmp	r3, #0
 80264c4:	d057      	beq.n	8026576 <_strtoul_l.constprop.0+0xd6>
 80264c6:	2b10      	cmp	r3, #16
 80264c8:	d109      	bne.n	80264de <_strtoul_l.constprop.0+0x3e>
 80264ca:	2c30      	cmp	r4, #48	; 0x30
 80264cc:	d107      	bne.n	80264de <_strtoul_l.constprop.0+0x3e>
 80264ce:	7828      	ldrb	r0, [r5, #0]
 80264d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80264d4:	2858      	cmp	r0, #88	; 0x58
 80264d6:	d149      	bne.n	802656c <_strtoul_l.constprop.0+0xcc>
 80264d8:	786c      	ldrb	r4, [r5, #1]
 80264da:	2310      	movs	r3, #16
 80264dc:	3502      	adds	r5, #2
 80264de:	f04f 38ff 	mov.w	r8, #4294967295
 80264e2:	2700      	movs	r7, #0
 80264e4:	fbb8 f8f3 	udiv	r8, r8, r3
 80264e8:	fb03 f908 	mul.w	r9, r3, r8
 80264ec:	ea6f 0909 	mvn.w	r9, r9
 80264f0:	4638      	mov	r0, r7
 80264f2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80264f6:	f1bc 0f09 	cmp.w	ip, #9
 80264fa:	d814      	bhi.n	8026526 <_strtoul_l.constprop.0+0x86>
 80264fc:	4664      	mov	r4, ip
 80264fe:	42a3      	cmp	r3, r4
 8026500:	dd22      	ble.n	8026548 <_strtoul_l.constprop.0+0xa8>
 8026502:	2f00      	cmp	r7, #0
 8026504:	db1d      	blt.n	8026542 <_strtoul_l.constprop.0+0xa2>
 8026506:	4580      	cmp	r8, r0
 8026508:	d31b      	bcc.n	8026542 <_strtoul_l.constprop.0+0xa2>
 802650a:	d101      	bne.n	8026510 <_strtoul_l.constprop.0+0x70>
 802650c:	45a1      	cmp	r9, r4
 802650e:	db18      	blt.n	8026542 <_strtoul_l.constprop.0+0xa2>
 8026510:	fb00 4003 	mla	r0, r0, r3, r4
 8026514:	2701      	movs	r7, #1
 8026516:	f815 4b01 	ldrb.w	r4, [r5], #1
 802651a:	e7ea      	b.n	80264f2 <_strtoul_l.constprop.0+0x52>
 802651c:	2c2b      	cmp	r4, #43	; 0x2b
 802651e:	bf04      	itt	eq
 8026520:	782c      	ldrbeq	r4, [r5, #0]
 8026522:	1c85      	addeq	r5, r0, #2
 8026524:	e7cd      	b.n	80264c2 <_strtoul_l.constprop.0+0x22>
 8026526:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802652a:	f1bc 0f19 	cmp.w	ip, #25
 802652e:	d801      	bhi.n	8026534 <_strtoul_l.constprop.0+0x94>
 8026530:	3c37      	subs	r4, #55	; 0x37
 8026532:	e7e4      	b.n	80264fe <_strtoul_l.constprop.0+0x5e>
 8026534:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8026538:	f1bc 0f19 	cmp.w	ip, #25
 802653c:	d804      	bhi.n	8026548 <_strtoul_l.constprop.0+0xa8>
 802653e:	3c57      	subs	r4, #87	; 0x57
 8026540:	e7dd      	b.n	80264fe <_strtoul_l.constprop.0+0x5e>
 8026542:	f04f 37ff 	mov.w	r7, #4294967295
 8026546:	e7e6      	b.n	8026516 <_strtoul_l.constprop.0+0x76>
 8026548:	2f00      	cmp	r7, #0
 802654a:	da07      	bge.n	802655c <_strtoul_l.constprop.0+0xbc>
 802654c:	2322      	movs	r3, #34	; 0x22
 802654e:	f8ce 3000 	str.w	r3, [lr]
 8026552:	f04f 30ff 	mov.w	r0, #4294967295
 8026556:	b932      	cbnz	r2, 8026566 <_strtoul_l.constprop.0+0xc6>
 8026558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802655c:	b106      	cbz	r6, 8026560 <_strtoul_l.constprop.0+0xc0>
 802655e:	4240      	negs	r0, r0
 8026560:	2a00      	cmp	r2, #0
 8026562:	d0f9      	beq.n	8026558 <_strtoul_l.constprop.0+0xb8>
 8026564:	b107      	cbz	r7, 8026568 <_strtoul_l.constprop.0+0xc8>
 8026566:	1e69      	subs	r1, r5, #1
 8026568:	6011      	str	r1, [r2, #0]
 802656a:	e7f5      	b.n	8026558 <_strtoul_l.constprop.0+0xb8>
 802656c:	2430      	movs	r4, #48	; 0x30
 802656e:	2b00      	cmp	r3, #0
 8026570:	d1b5      	bne.n	80264de <_strtoul_l.constprop.0+0x3e>
 8026572:	2308      	movs	r3, #8
 8026574:	e7b3      	b.n	80264de <_strtoul_l.constprop.0+0x3e>
 8026576:	2c30      	cmp	r4, #48	; 0x30
 8026578:	d0a9      	beq.n	80264ce <_strtoul_l.constprop.0+0x2e>
 802657a:	230a      	movs	r3, #10
 802657c:	e7af      	b.n	80264de <_strtoul_l.constprop.0+0x3e>
 802657e:	bf00      	nop
 8026580:	08045c01 	.word	0x08045c01

08026584 <_strtoul_r>:
 8026584:	f7ff bf8c 	b.w	80264a0 <_strtoul_l.constprop.0>

08026588 <strtoul>:
 8026588:	4613      	mov	r3, r2
 802658a:	460a      	mov	r2, r1
 802658c:	4601      	mov	r1, r0
 802658e:	4802      	ldr	r0, [pc, #8]	; (8026598 <strtoul+0x10>)
 8026590:	6800      	ldr	r0, [r0, #0]
 8026592:	f7ff bf85 	b.w	80264a0 <_strtoul_l.constprop.0>
 8026596:	bf00      	nop
 8026598:	20000490 	.word	0x20000490

0802659c <__tzcalc_limits>:
 802659c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265a0:	4605      	mov	r5, r0
 80265a2:	f001 fab1 	bl	8027b08 <__gettzinfo>
 80265a6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80265aa:	429d      	cmp	r5, r3
 80265ac:	f340 8099 	ble.w	80266e2 <__tzcalc_limits+0x146>
 80265b0:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80265b4:	18ac      	adds	r4, r5, r2
 80265b6:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80265ba:	f240 126d 	movw	r2, #365	; 0x16d
 80265be:	10a4      	asrs	r4, r4, #2
 80265c0:	fb02 4403 	mla	r4, r2, r3, r4
 80265c4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80265c8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80265cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80265d0:	441c      	add	r4, r3
 80265d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80265d6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80265da:	fb95 fcf3 	sdiv	ip, r5, r3
 80265de:	fb03 5c1c 	mls	ip, r3, ip, r5
 80265e2:	186a      	adds	r2, r5, r1
 80265e4:	fabc f68c 	clz	r6, ip
 80265e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80265ec:	f005 0303 	and.w	r3, r5, #3
 80265f0:	4414      	add	r4, r2
 80265f2:	2264      	movs	r2, #100	; 0x64
 80265f4:	6045      	str	r5, [r0, #4]
 80265f6:	fb95 f7f2 	sdiv	r7, r5, r2
 80265fa:	0976      	lsrs	r6, r6, #5
 80265fc:	fb02 5717 	mls	r7, r2, r7, r5
 8026600:	4601      	mov	r1, r0
 8026602:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8026606:	9300      	str	r3, [sp, #0]
 8026608:	f04f 0a07 	mov.w	sl, #7
 802660c:	7a0d      	ldrb	r5, [r1, #8]
 802660e:	694b      	ldr	r3, [r1, #20]
 8026610:	2d4a      	cmp	r5, #74	; 0x4a
 8026612:	d12d      	bne.n	8026670 <__tzcalc_limits+0xd4>
 8026614:	9a00      	ldr	r2, [sp, #0]
 8026616:	eb04 0e03 	add.w	lr, r4, r3
 802661a:	b902      	cbnz	r2, 802661e <__tzcalc_limits+0x82>
 802661c:	b917      	cbnz	r7, 8026624 <__tzcalc_limits+0x88>
 802661e:	f1bc 0f00 	cmp.w	ip, #0
 8026622:	d123      	bne.n	802666c <__tzcalc_limits+0xd0>
 8026624:	2b3b      	cmp	r3, #59	; 0x3b
 8026626:	bfd4      	ite	le
 8026628:	2300      	movle	r3, #0
 802662a:	2301      	movgt	r3, #1
 802662c:	4473      	add	r3, lr
 802662e:	3b01      	subs	r3, #1
 8026630:	698d      	ldr	r5, [r1, #24]
 8026632:	4a2d      	ldr	r2, [pc, #180]	; (80266e8 <__tzcalc_limits+0x14c>)
 8026634:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8026638:	fbc3 5e02 	smlal	r5, lr, r3, r2
 802663c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 802663e:	18ed      	adds	r5, r5, r3
 8026640:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8026644:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8026648:	3128      	adds	r1, #40	; 0x28
 802664a:	458b      	cmp	fp, r1
 802664c:	d1de      	bne.n	802660c <__tzcalc_limits+0x70>
 802664e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8026652:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8026656:	428c      	cmp	r4, r1
 8026658:	eb72 0303 	sbcs.w	r3, r2, r3
 802665c:	bfb4      	ite	lt
 802665e:	2301      	movlt	r3, #1
 8026660:	2300      	movge	r3, #0
 8026662:	6003      	str	r3, [r0, #0]
 8026664:	2001      	movs	r0, #1
 8026666:	b003      	add	sp, #12
 8026668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802666c:	2300      	movs	r3, #0
 802666e:	e7dd      	b.n	802662c <__tzcalc_limits+0x90>
 8026670:	2d44      	cmp	r5, #68	; 0x44
 8026672:	d101      	bne.n	8026678 <__tzcalc_limits+0xdc>
 8026674:	4423      	add	r3, r4
 8026676:	e7db      	b.n	8026630 <__tzcalc_limits+0x94>
 8026678:	9a00      	ldr	r2, [sp, #0]
 802667a:	bb62      	cbnz	r2, 80266d6 <__tzcalc_limits+0x13a>
 802667c:	2f00      	cmp	r7, #0
 802667e:	bf0c      	ite	eq
 8026680:	4635      	moveq	r5, r6
 8026682:	2501      	movne	r5, #1
 8026684:	68ca      	ldr	r2, [r1, #12]
 8026686:	9201      	str	r2, [sp, #4]
 8026688:	4a18      	ldr	r2, [pc, #96]	; (80266ec <__tzcalc_limits+0x150>)
 802668a:	f04f 0930 	mov.w	r9, #48	; 0x30
 802668e:	fb09 2505 	mla	r5, r9, r5, r2
 8026692:	46a6      	mov	lr, r4
 8026694:	f04f 0800 	mov.w	r8, #0
 8026698:	3d04      	subs	r5, #4
 802669a:	9a01      	ldr	r2, [sp, #4]
 802669c:	f108 0801 	add.w	r8, r8, #1
 80266a0:	4542      	cmp	r2, r8
 80266a2:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80266a6:	dc18      	bgt.n	80266da <__tzcalc_limits+0x13e>
 80266a8:	f10e 0504 	add.w	r5, lr, #4
 80266ac:	fb95 f8fa 	sdiv	r8, r5, sl
 80266b0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80266b4:	eba5 0808 	sub.w	r8, r5, r8
 80266b8:	ebb3 0808 	subs.w	r8, r3, r8
 80266bc:	690b      	ldr	r3, [r1, #16]
 80266be:	f103 33ff 	add.w	r3, r3, #4294967295
 80266c2:	bf48      	it	mi
 80266c4:	f108 0807 	addmi.w	r8, r8, #7
 80266c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80266cc:	4443      	add	r3, r8
 80266ce:	454b      	cmp	r3, r9
 80266d0:	da05      	bge.n	80266de <__tzcalc_limits+0x142>
 80266d2:	4473      	add	r3, lr
 80266d4:	e7ac      	b.n	8026630 <__tzcalc_limits+0x94>
 80266d6:	4635      	mov	r5, r6
 80266d8:	e7d4      	b.n	8026684 <__tzcalc_limits+0xe8>
 80266da:	44ce      	add	lr, r9
 80266dc:	e7dd      	b.n	802669a <__tzcalc_limits+0xfe>
 80266de:	3b07      	subs	r3, #7
 80266e0:	e7f5      	b.n	80266ce <__tzcalc_limits+0x132>
 80266e2:	2000      	movs	r0, #0
 80266e4:	e7bf      	b.n	8026666 <__tzcalc_limits+0xca>
 80266e6:	bf00      	nop
 80266e8:	00015180 	.word	0x00015180
 80266ec:	08045e3c 	.word	0x08045e3c

080266f0 <__tz_lock>:
 80266f0:	4801      	ldr	r0, [pc, #4]	; (80266f8 <__tz_lock+0x8>)
 80266f2:	f7fd be74 	b.w	80243de <__retarget_lock_acquire>
 80266f6:	bf00      	nop
 80266f8:	2002fd50 	.word	0x2002fd50

080266fc <__tz_unlock>:
 80266fc:	4801      	ldr	r0, [pc, #4]	; (8026704 <__tz_unlock+0x8>)
 80266fe:	f7fd be70 	b.w	80243e2 <__retarget_lock_release>
 8026702:	bf00      	nop
 8026704:	2002fd50 	.word	0x2002fd50

08026708 <_tzset_unlocked>:
 8026708:	4b01      	ldr	r3, [pc, #4]	; (8026710 <_tzset_unlocked+0x8>)
 802670a:	6818      	ldr	r0, [r3, #0]
 802670c:	f000 b802 	b.w	8026714 <_tzset_unlocked_r>
 8026710:	20000490 	.word	0x20000490

08026714 <_tzset_unlocked_r>:
 8026714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026718:	b08d      	sub	sp, #52	; 0x34
 802671a:	4607      	mov	r7, r0
 802671c:	f001 f9f4 	bl	8027b08 <__gettzinfo>
 8026720:	49b0      	ldr	r1, [pc, #704]	; (80269e4 <_tzset_unlocked_r+0x2d0>)
 8026722:	4eb1      	ldr	r6, [pc, #708]	; (80269e8 <_tzset_unlocked_r+0x2d4>)
 8026724:	4605      	mov	r5, r0
 8026726:	4638      	mov	r0, r7
 8026728:	f001 f9e6 	bl	8027af8 <_getenv_r>
 802672c:	4604      	mov	r4, r0
 802672e:	b970      	cbnz	r0, 802674e <_tzset_unlocked_r+0x3a>
 8026730:	4bae      	ldr	r3, [pc, #696]	; (80269ec <_tzset_unlocked_r+0x2d8>)
 8026732:	4aaf      	ldr	r2, [pc, #700]	; (80269f0 <_tzset_unlocked_r+0x2dc>)
 8026734:	6018      	str	r0, [r3, #0]
 8026736:	4baf      	ldr	r3, [pc, #700]	; (80269f4 <_tzset_unlocked_r+0x2e0>)
 8026738:	6018      	str	r0, [r3, #0]
 802673a:	4baf      	ldr	r3, [pc, #700]	; (80269f8 <_tzset_unlocked_r+0x2e4>)
 802673c:	6830      	ldr	r0, [r6, #0]
 802673e:	e9c3 2200 	strd	r2, r2, [r3]
 8026742:	f7fd fe59 	bl	80243f8 <free>
 8026746:	6034      	str	r4, [r6, #0]
 8026748:	b00d      	add	sp, #52	; 0x34
 802674a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802674e:	6831      	ldr	r1, [r6, #0]
 8026750:	2900      	cmp	r1, #0
 8026752:	d162      	bne.n	802681a <_tzset_unlocked_r+0x106>
 8026754:	6830      	ldr	r0, [r6, #0]
 8026756:	f7fd fe4f 	bl	80243f8 <free>
 802675a:	4620      	mov	r0, r4
 802675c:	f7d9 fd7a 	bl	8000254 <strlen>
 8026760:	1c41      	adds	r1, r0, #1
 8026762:	4638      	mov	r0, r7
 8026764:	f7fe f96e 	bl	8024a44 <_malloc_r>
 8026768:	6030      	str	r0, [r6, #0]
 802676a:	2800      	cmp	r0, #0
 802676c:	d15a      	bne.n	8026824 <_tzset_unlocked_r+0x110>
 802676e:	7823      	ldrb	r3, [r4, #0]
 8026770:	4aa2      	ldr	r2, [pc, #648]	; (80269fc <_tzset_unlocked_r+0x2e8>)
 8026772:	49a3      	ldr	r1, [pc, #652]	; (8026a00 <_tzset_unlocked_r+0x2ec>)
 8026774:	2b3a      	cmp	r3, #58	; 0x3a
 8026776:	bf08      	it	eq
 8026778:	3401      	addeq	r4, #1
 802677a:	ae0a      	add	r6, sp, #40	; 0x28
 802677c:	4633      	mov	r3, r6
 802677e:	4620      	mov	r0, r4
 8026780:	f7ff f822 	bl	80257c8 <siscanf>
 8026784:	2800      	cmp	r0, #0
 8026786:	dddf      	ble.n	8026748 <_tzset_unlocked_r+0x34>
 8026788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802678a:	18e7      	adds	r7, r4, r3
 802678c:	5ce3      	ldrb	r3, [r4, r3]
 802678e:	2b2d      	cmp	r3, #45	; 0x2d
 8026790:	d14c      	bne.n	802682c <_tzset_unlocked_r+0x118>
 8026792:	3701      	adds	r7, #1
 8026794:	f04f 38ff 	mov.w	r8, #4294967295
 8026798:	f10d 0a20 	add.w	sl, sp, #32
 802679c:	f10d 0b1e 	add.w	fp, sp, #30
 80267a0:	2400      	movs	r4, #0
 80267a2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80267a6:	4997      	ldr	r1, [pc, #604]	; (8026a04 <_tzset_unlocked_r+0x2f0>)
 80267a8:	9603      	str	r6, [sp, #12]
 80267aa:	f8cd b000 	str.w	fp, [sp]
 80267ae:	4633      	mov	r3, r6
 80267b0:	aa07      	add	r2, sp, #28
 80267b2:	4638      	mov	r0, r7
 80267b4:	f8ad 401e 	strh.w	r4, [sp, #30]
 80267b8:	f8ad 4020 	strh.w	r4, [sp, #32]
 80267bc:	f7ff f804 	bl	80257c8 <siscanf>
 80267c0:	42a0      	cmp	r0, r4
 80267c2:	ddc1      	ble.n	8026748 <_tzset_unlocked_r+0x34>
 80267c4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80267c8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80267cc:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8026a10 <_tzset_unlocked_r+0x2fc>
 80267d0:	213c      	movs	r1, #60	; 0x3c
 80267d2:	fb01 3302 	mla	r3, r1, r2, r3
 80267d6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80267da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80267de:	fb01 3302 	mla	r3, r1, r2, r3
 80267e2:	fb08 f303 	mul.w	r3, r8, r3
 80267e6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80269f8 <_tzset_unlocked_r+0x2e4>
 80267ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80267ec:	4b83      	ldr	r3, [pc, #524]	; (80269fc <_tzset_unlocked_r+0x2e8>)
 80267ee:	f8c8 3000 	str.w	r3, [r8]
 80267f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80267f4:	4982      	ldr	r1, [pc, #520]	; (8026a00 <_tzset_unlocked_r+0x2ec>)
 80267f6:	441f      	add	r7, r3
 80267f8:	464a      	mov	r2, r9
 80267fa:	4633      	mov	r3, r6
 80267fc:	4638      	mov	r0, r7
 80267fe:	f7fe ffe3 	bl	80257c8 <siscanf>
 8026802:	42a0      	cmp	r0, r4
 8026804:	dc18      	bgt.n	8026838 <_tzset_unlocked_r+0x124>
 8026806:	f8d8 3000 	ldr.w	r3, [r8]
 802680a:	f8c8 3004 	str.w	r3, [r8, #4]
 802680e:	4b77      	ldr	r3, [pc, #476]	; (80269ec <_tzset_unlocked_r+0x2d8>)
 8026810:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8026812:	601a      	str	r2, [r3, #0]
 8026814:	4b77      	ldr	r3, [pc, #476]	; (80269f4 <_tzset_unlocked_r+0x2e0>)
 8026816:	601c      	str	r4, [r3, #0]
 8026818:	e796      	b.n	8026748 <_tzset_unlocked_r+0x34>
 802681a:	f7d9 fd11 	bl	8000240 <strcmp>
 802681e:	2800      	cmp	r0, #0
 8026820:	d198      	bne.n	8026754 <_tzset_unlocked_r+0x40>
 8026822:	e791      	b.n	8026748 <_tzset_unlocked_r+0x34>
 8026824:	4621      	mov	r1, r4
 8026826:	f7ff f856 	bl	80258d6 <strcpy>
 802682a:	e7a0      	b.n	802676e <_tzset_unlocked_r+0x5a>
 802682c:	2b2b      	cmp	r3, #43	; 0x2b
 802682e:	bf08      	it	eq
 8026830:	3701      	addeq	r7, #1
 8026832:	f04f 0801 	mov.w	r8, #1
 8026836:	e7af      	b.n	8026798 <_tzset_unlocked_r+0x84>
 8026838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802683a:	f8c8 9004 	str.w	r9, [r8, #4]
 802683e:	18fc      	adds	r4, r7, r3
 8026840:	5cfb      	ldrb	r3, [r7, r3]
 8026842:	2b2d      	cmp	r3, #45	; 0x2d
 8026844:	f040 808b 	bne.w	802695e <_tzset_unlocked_r+0x24a>
 8026848:	3401      	adds	r4, #1
 802684a:	f04f 37ff 	mov.w	r7, #4294967295
 802684e:	2300      	movs	r3, #0
 8026850:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026854:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026858:	f8ad 3020 	strh.w	r3, [sp, #32]
 802685c:	930a      	str	r3, [sp, #40]	; 0x28
 802685e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8026862:	e9cd b600 	strd	fp, r6, [sp]
 8026866:	4967      	ldr	r1, [pc, #412]	; (8026a04 <_tzset_unlocked_r+0x2f0>)
 8026868:	4633      	mov	r3, r6
 802686a:	aa07      	add	r2, sp, #28
 802686c:	4620      	mov	r0, r4
 802686e:	f7fe ffab 	bl	80257c8 <siscanf>
 8026872:	2800      	cmp	r0, #0
 8026874:	dc78      	bgt.n	8026968 <_tzset_unlocked_r+0x254>
 8026876:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8026878:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 802687c:	652b      	str	r3, [r5, #80]	; 0x50
 802687e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026880:	462f      	mov	r7, r5
 8026882:	441c      	add	r4, r3
 8026884:	f04f 0900 	mov.w	r9, #0
 8026888:	7823      	ldrb	r3, [r4, #0]
 802688a:	2b2c      	cmp	r3, #44	; 0x2c
 802688c:	bf08      	it	eq
 802688e:	3401      	addeq	r4, #1
 8026890:	f894 8000 	ldrb.w	r8, [r4]
 8026894:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8026898:	d178      	bne.n	802698c <_tzset_unlocked_r+0x278>
 802689a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802689e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80268a2:	ab09      	add	r3, sp, #36	; 0x24
 80268a4:	9300      	str	r3, [sp, #0]
 80268a6:	4958      	ldr	r1, [pc, #352]	; (8026a08 <_tzset_unlocked_r+0x2f4>)
 80268a8:	9603      	str	r6, [sp, #12]
 80268aa:	4633      	mov	r3, r6
 80268ac:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80268b0:	4620      	mov	r0, r4
 80268b2:	f7fe ff89 	bl	80257c8 <siscanf>
 80268b6:	2803      	cmp	r0, #3
 80268b8:	f47f af46 	bne.w	8026748 <_tzset_unlocked_r+0x34>
 80268bc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80268c0:	1e4b      	subs	r3, r1, #1
 80268c2:	2b0b      	cmp	r3, #11
 80268c4:	f63f af40 	bhi.w	8026748 <_tzset_unlocked_r+0x34>
 80268c8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80268cc:	1e53      	subs	r3, r2, #1
 80268ce:	2b04      	cmp	r3, #4
 80268d0:	f63f af3a 	bhi.w	8026748 <_tzset_unlocked_r+0x34>
 80268d4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80268d8:	2b06      	cmp	r3, #6
 80268da:	f63f af35 	bhi.w	8026748 <_tzset_unlocked_r+0x34>
 80268de:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80268e2:	f887 8008 	strb.w	r8, [r7, #8]
 80268e6:	617b      	str	r3, [r7, #20]
 80268e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80268ea:	eb04 0803 	add.w	r8, r4, r3
 80268ee:	2302      	movs	r3, #2
 80268f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80268f4:	2300      	movs	r3, #0
 80268f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80268fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80268fe:	930a      	str	r3, [sp, #40]	; 0x28
 8026900:	f898 3000 	ldrb.w	r3, [r8]
 8026904:	2b2f      	cmp	r3, #47	; 0x2f
 8026906:	d109      	bne.n	802691c <_tzset_unlocked_r+0x208>
 8026908:	e9cd a602 	strd	sl, r6, [sp, #8]
 802690c:	e9cd b600 	strd	fp, r6, [sp]
 8026910:	493e      	ldr	r1, [pc, #248]	; (8026a0c <_tzset_unlocked_r+0x2f8>)
 8026912:	4633      	mov	r3, r6
 8026914:	aa07      	add	r2, sp, #28
 8026916:	4640      	mov	r0, r8
 8026918:	f7fe ff56 	bl	80257c8 <siscanf>
 802691c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026920:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026924:	213c      	movs	r1, #60	; 0x3c
 8026926:	fb01 3302 	mla	r3, r1, r2, r3
 802692a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802692e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8026932:	fb01 3302 	mla	r3, r1, r2, r3
 8026936:	61bb      	str	r3, [r7, #24]
 8026938:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802693a:	3728      	adds	r7, #40	; 0x28
 802693c:	4444      	add	r4, r8
 802693e:	f1b9 0f00 	cmp.w	r9, #0
 8026942:	d020      	beq.n	8026986 <_tzset_unlocked_r+0x272>
 8026944:	6868      	ldr	r0, [r5, #4]
 8026946:	f7ff fe29 	bl	802659c <__tzcalc_limits>
 802694a:	4b28      	ldr	r3, [pc, #160]	; (80269ec <_tzset_unlocked_r+0x2d8>)
 802694c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802694e:	601a      	str	r2, [r3, #0]
 8026950:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8026952:	1a9b      	subs	r3, r3, r2
 8026954:	4a27      	ldr	r2, [pc, #156]	; (80269f4 <_tzset_unlocked_r+0x2e0>)
 8026956:	bf18      	it	ne
 8026958:	2301      	movne	r3, #1
 802695a:	6013      	str	r3, [r2, #0]
 802695c:	e6f4      	b.n	8026748 <_tzset_unlocked_r+0x34>
 802695e:	2b2b      	cmp	r3, #43	; 0x2b
 8026960:	bf08      	it	eq
 8026962:	3401      	addeq	r4, #1
 8026964:	2701      	movs	r7, #1
 8026966:	e772      	b.n	802684e <_tzset_unlocked_r+0x13a>
 8026968:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802696c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026970:	213c      	movs	r1, #60	; 0x3c
 8026972:	fb01 3302 	mla	r3, r1, r2, r3
 8026976:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802697a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802697e:	fb01 3302 	mla	r3, r1, r2, r3
 8026982:	437b      	muls	r3, r7
 8026984:	e77a      	b.n	802687c <_tzset_unlocked_r+0x168>
 8026986:	f04f 0901 	mov.w	r9, #1
 802698a:	e77d      	b.n	8026888 <_tzset_unlocked_r+0x174>
 802698c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8026990:	bf06      	itte	eq
 8026992:	3401      	addeq	r4, #1
 8026994:	4643      	moveq	r3, r8
 8026996:	2344      	movne	r3, #68	; 0x44
 8026998:	220a      	movs	r2, #10
 802699a:	a90b      	add	r1, sp, #44	; 0x2c
 802699c:	4620      	mov	r0, r4
 802699e:	9305      	str	r3, [sp, #20]
 80269a0:	f7ff fdf2 	bl	8026588 <strtoul>
 80269a4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80269a8:	9b05      	ldr	r3, [sp, #20]
 80269aa:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80269ae:	45a0      	cmp	r8, r4
 80269b0:	d114      	bne.n	80269dc <_tzset_unlocked_r+0x2c8>
 80269b2:	234d      	movs	r3, #77	; 0x4d
 80269b4:	f1b9 0f00 	cmp.w	r9, #0
 80269b8:	d107      	bne.n	80269ca <_tzset_unlocked_r+0x2b6>
 80269ba:	722b      	strb	r3, [r5, #8]
 80269bc:	2103      	movs	r1, #3
 80269be:	2302      	movs	r3, #2
 80269c0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80269c4:	f8c5 9014 	str.w	r9, [r5, #20]
 80269c8:	e791      	b.n	80268ee <_tzset_unlocked_r+0x1da>
 80269ca:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80269ce:	220b      	movs	r2, #11
 80269d0:	2301      	movs	r3, #1
 80269d2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80269d6:	2300      	movs	r3, #0
 80269d8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80269da:	e788      	b.n	80268ee <_tzset_unlocked_r+0x1da>
 80269dc:	b280      	uxth	r0, r0
 80269de:	723b      	strb	r3, [r7, #8]
 80269e0:	6178      	str	r0, [r7, #20]
 80269e2:	e784      	b.n	80268ee <_tzset_unlocked_r+0x1da>
 80269e4:	080461ac 	.word	0x080461ac
 80269e8:	2002fd78 	.word	0x2002fd78
 80269ec:	2002fd80 	.word	0x2002fd80
 80269f0:	080461af 	.word	0x080461af
 80269f4:	2002fd7c 	.word	0x2002fd7c
 80269f8:	200004f4 	.word	0x200004f4
 80269fc:	2002fd6b 	.word	0x2002fd6b
 8026a00:	080461b3 	.word	0x080461b3
 8026a04:	080461d6 	.word	0x080461d6
 8026a08:	080461c2 	.word	0x080461c2
 8026a0c:	080461d5 	.word	0x080461d5
 8026a10:	2002fd60 	.word	0x2002fd60

08026a14 <__swbuf_r>:
 8026a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026a16:	460e      	mov	r6, r1
 8026a18:	4614      	mov	r4, r2
 8026a1a:	4605      	mov	r5, r0
 8026a1c:	b118      	cbz	r0, 8026a26 <__swbuf_r+0x12>
 8026a1e:	6983      	ldr	r3, [r0, #24]
 8026a20:	b90b      	cbnz	r3, 8026a26 <__swbuf_r+0x12>
 8026a22:	f7fd fb07 	bl	8024034 <__sinit>
 8026a26:	4b21      	ldr	r3, [pc, #132]	; (8026aac <__swbuf_r+0x98>)
 8026a28:	429c      	cmp	r4, r3
 8026a2a:	d12b      	bne.n	8026a84 <__swbuf_r+0x70>
 8026a2c:	686c      	ldr	r4, [r5, #4]
 8026a2e:	69a3      	ldr	r3, [r4, #24]
 8026a30:	60a3      	str	r3, [r4, #8]
 8026a32:	89a3      	ldrh	r3, [r4, #12]
 8026a34:	071a      	lsls	r2, r3, #28
 8026a36:	d52f      	bpl.n	8026a98 <__swbuf_r+0x84>
 8026a38:	6923      	ldr	r3, [r4, #16]
 8026a3a:	b36b      	cbz	r3, 8026a98 <__swbuf_r+0x84>
 8026a3c:	6923      	ldr	r3, [r4, #16]
 8026a3e:	6820      	ldr	r0, [r4, #0]
 8026a40:	1ac0      	subs	r0, r0, r3
 8026a42:	6963      	ldr	r3, [r4, #20]
 8026a44:	b2f6      	uxtb	r6, r6
 8026a46:	4283      	cmp	r3, r0
 8026a48:	4637      	mov	r7, r6
 8026a4a:	dc04      	bgt.n	8026a56 <__swbuf_r+0x42>
 8026a4c:	4621      	mov	r1, r4
 8026a4e:	4628      	mov	r0, r5
 8026a50:	f000 ffc8 	bl	80279e4 <_fflush_r>
 8026a54:	bb30      	cbnz	r0, 8026aa4 <__swbuf_r+0x90>
 8026a56:	68a3      	ldr	r3, [r4, #8]
 8026a58:	3b01      	subs	r3, #1
 8026a5a:	60a3      	str	r3, [r4, #8]
 8026a5c:	6823      	ldr	r3, [r4, #0]
 8026a5e:	1c5a      	adds	r2, r3, #1
 8026a60:	6022      	str	r2, [r4, #0]
 8026a62:	701e      	strb	r6, [r3, #0]
 8026a64:	6963      	ldr	r3, [r4, #20]
 8026a66:	3001      	adds	r0, #1
 8026a68:	4283      	cmp	r3, r0
 8026a6a:	d004      	beq.n	8026a76 <__swbuf_r+0x62>
 8026a6c:	89a3      	ldrh	r3, [r4, #12]
 8026a6e:	07db      	lsls	r3, r3, #31
 8026a70:	d506      	bpl.n	8026a80 <__swbuf_r+0x6c>
 8026a72:	2e0a      	cmp	r6, #10
 8026a74:	d104      	bne.n	8026a80 <__swbuf_r+0x6c>
 8026a76:	4621      	mov	r1, r4
 8026a78:	4628      	mov	r0, r5
 8026a7a:	f000 ffb3 	bl	80279e4 <_fflush_r>
 8026a7e:	b988      	cbnz	r0, 8026aa4 <__swbuf_r+0x90>
 8026a80:	4638      	mov	r0, r7
 8026a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026a84:	4b0a      	ldr	r3, [pc, #40]	; (8026ab0 <__swbuf_r+0x9c>)
 8026a86:	429c      	cmp	r4, r3
 8026a88:	d101      	bne.n	8026a8e <__swbuf_r+0x7a>
 8026a8a:	68ac      	ldr	r4, [r5, #8]
 8026a8c:	e7cf      	b.n	8026a2e <__swbuf_r+0x1a>
 8026a8e:	4b09      	ldr	r3, [pc, #36]	; (8026ab4 <__swbuf_r+0xa0>)
 8026a90:	429c      	cmp	r4, r3
 8026a92:	bf08      	it	eq
 8026a94:	68ec      	ldreq	r4, [r5, #12]
 8026a96:	e7ca      	b.n	8026a2e <__swbuf_r+0x1a>
 8026a98:	4621      	mov	r1, r4
 8026a9a:	4628      	mov	r0, r5
 8026a9c:	f000 f81e 	bl	8026adc <__swsetup_r>
 8026aa0:	2800      	cmp	r0, #0
 8026aa2:	d0cb      	beq.n	8026a3c <__swbuf_r+0x28>
 8026aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8026aa8:	e7ea      	b.n	8026a80 <__swbuf_r+0x6c>
 8026aaa:	bf00      	nop
 8026aac:	08045d24 	.word	0x08045d24
 8026ab0:	08045d44 	.word	0x08045d44
 8026ab4:	08045d04 	.word	0x08045d04

08026ab8 <_write_r>:
 8026ab8:	b538      	push	{r3, r4, r5, lr}
 8026aba:	4d07      	ldr	r5, [pc, #28]	; (8026ad8 <_write_r+0x20>)
 8026abc:	4604      	mov	r4, r0
 8026abe:	4608      	mov	r0, r1
 8026ac0:	4611      	mov	r1, r2
 8026ac2:	2200      	movs	r2, #0
 8026ac4:	602a      	str	r2, [r5, #0]
 8026ac6:	461a      	mov	r2, r3
 8026ac8:	f7dc fb62 	bl	8003190 <_write>
 8026acc:	1c43      	adds	r3, r0, #1
 8026ace:	d102      	bne.n	8026ad6 <_write_r+0x1e>
 8026ad0:	682b      	ldr	r3, [r5, #0]
 8026ad2:	b103      	cbz	r3, 8026ad6 <_write_r+0x1e>
 8026ad4:	6023      	str	r3, [r4, #0]
 8026ad6:	bd38      	pop	{r3, r4, r5, pc}
 8026ad8:	2002fd5c 	.word	0x2002fd5c

08026adc <__swsetup_r>:
 8026adc:	4b32      	ldr	r3, [pc, #200]	; (8026ba8 <__swsetup_r+0xcc>)
 8026ade:	b570      	push	{r4, r5, r6, lr}
 8026ae0:	681d      	ldr	r5, [r3, #0]
 8026ae2:	4606      	mov	r6, r0
 8026ae4:	460c      	mov	r4, r1
 8026ae6:	b125      	cbz	r5, 8026af2 <__swsetup_r+0x16>
 8026ae8:	69ab      	ldr	r3, [r5, #24]
 8026aea:	b913      	cbnz	r3, 8026af2 <__swsetup_r+0x16>
 8026aec:	4628      	mov	r0, r5
 8026aee:	f7fd faa1 	bl	8024034 <__sinit>
 8026af2:	4b2e      	ldr	r3, [pc, #184]	; (8026bac <__swsetup_r+0xd0>)
 8026af4:	429c      	cmp	r4, r3
 8026af6:	d10f      	bne.n	8026b18 <__swsetup_r+0x3c>
 8026af8:	686c      	ldr	r4, [r5, #4]
 8026afa:	89a3      	ldrh	r3, [r4, #12]
 8026afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026b00:	0719      	lsls	r1, r3, #28
 8026b02:	d42c      	bmi.n	8026b5e <__swsetup_r+0x82>
 8026b04:	06dd      	lsls	r5, r3, #27
 8026b06:	d411      	bmi.n	8026b2c <__swsetup_r+0x50>
 8026b08:	2309      	movs	r3, #9
 8026b0a:	6033      	str	r3, [r6, #0]
 8026b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026b10:	81a3      	strh	r3, [r4, #12]
 8026b12:	f04f 30ff 	mov.w	r0, #4294967295
 8026b16:	e03e      	b.n	8026b96 <__swsetup_r+0xba>
 8026b18:	4b25      	ldr	r3, [pc, #148]	; (8026bb0 <__swsetup_r+0xd4>)
 8026b1a:	429c      	cmp	r4, r3
 8026b1c:	d101      	bne.n	8026b22 <__swsetup_r+0x46>
 8026b1e:	68ac      	ldr	r4, [r5, #8]
 8026b20:	e7eb      	b.n	8026afa <__swsetup_r+0x1e>
 8026b22:	4b24      	ldr	r3, [pc, #144]	; (8026bb4 <__swsetup_r+0xd8>)
 8026b24:	429c      	cmp	r4, r3
 8026b26:	bf08      	it	eq
 8026b28:	68ec      	ldreq	r4, [r5, #12]
 8026b2a:	e7e6      	b.n	8026afa <__swsetup_r+0x1e>
 8026b2c:	0758      	lsls	r0, r3, #29
 8026b2e:	d512      	bpl.n	8026b56 <__swsetup_r+0x7a>
 8026b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026b32:	b141      	cbz	r1, 8026b46 <__swsetup_r+0x6a>
 8026b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026b38:	4299      	cmp	r1, r3
 8026b3a:	d002      	beq.n	8026b42 <__swsetup_r+0x66>
 8026b3c:	4630      	mov	r0, r6
 8026b3e:	f7fd ff15 	bl	802496c <_free_r>
 8026b42:	2300      	movs	r3, #0
 8026b44:	6363      	str	r3, [r4, #52]	; 0x34
 8026b46:	89a3      	ldrh	r3, [r4, #12]
 8026b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026b4c:	81a3      	strh	r3, [r4, #12]
 8026b4e:	2300      	movs	r3, #0
 8026b50:	6063      	str	r3, [r4, #4]
 8026b52:	6923      	ldr	r3, [r4, #16]
 8026b54:	6023      	str	r3, [r4, #0]
 8026b56:	89a3      	ldrh	r3, [r4, #12]
 8026b58:	f043 0308 	orr.w	r3, r3, #8
 8026b5c:	81a3      	strh	r3, [r4, #12]
 8026b5e:	6923      	ldr	r3, [r4, #16]
 8026b60:	b94b      	cbnz	r3, 8026b76 <__swsetup_r+0x9a>
 8026b62:	89a3      	ldrh	r3, [r4, #12]
 8026b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026b6c:	d003      	beq.n	8026b76 <__swsetup_r+0x9a>
 8026b6e:	4621      	mov	r1, r4
 8026b70:	4630      	mov	r0, r6
 8026b72:	f001 f8b9 	bl	8027ce8 <__smakebuf_r>
 8026b76:	89a0      	ldrh	r0, [r4, #12]
 8026b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026b7c:	f010 0301 	ands.w	r3, r0, #1
 8026b80:	d00a      	beq.n	8026b98 <__swsetup_r+0xbc>
 8026b82:	2300      	movs	r3, #0
 8026b84:	60a3      	str	r3, [r4, #8]
 8026b86:	6963      	ldr	r3, [r4, #20]
 8026b88:	425b      	negs	r3, r3
 8026b8a:	61a3      	str	r3, [r4, #24]
 8026b8c:	6923      	ldr	r3, [r4, #16]
 8026b8e:	b943      	cbnz	r3, 8026ba2 <__swsetup_r+0xc6>
 8026b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026b94:	d1ba      	bne.n	8026b0c <__swsetup_r+0x30>
 8026b96:	bd70      	pop	{r4, r5, r6, pc}
 8026b98:	0781      	lsls	r1, r0, #30
 8026b9a:	bf58      	it	pl
 8026b9c:	6963      	ldrpl	r3, [r4, #20]
 8026b9e:	60a3      	str	r3, [r4, #8]
 8026ba0:	e7f4      	b.n	8026b8c <__swsetup_r+0xb0>
 8026ba2:	2000      	movs	r0, #0
 8026ba4:	e7f7      	b.n	8026b96 <__swsetup_r+0xba>
 8026ba6:	bf00      	nop
 8026ba8:	20000490 	.word	0x20000490
 8026bac:	08045d24 	.word	0x08045d24
 8026bb0:	08045d44 	.word	0x08045d44
 8026bb4:	08045d04 	.word	0x08045d04

08026bb8 <abs>:
 8026bb8:	2800      	cmp	r0, #0
 8026bba:	bfb8      	it	lt
 8026bbc:	4240      	neglt	r0, r0
 8026bbe:	4770      	bx	lr

08026bc0 <asctime>:
 8026bc0:	4b0d      	ldr	r3, [pc, #52]	; (8026bf8 <asctime+0x38>)
 8026bc2:	b570      	push	{r4, r5, r6, lr}
 8026bc4:	681d      	ldr	r5, [r3, #0]
 8026bc6:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8026bc8:	4604      	mov	r4, r0
 8026bca:	b976      	cbnz	r6, 8026bea <asctime+0x2a>
 8026bcc:	201a      	movs	r0, #26
 8026bce:	f7fd fc0b 	bl	80243e8 <malloc>
 8026bd2:	4602      	mov	r2, r0
 8026bd4:	6428      	str	r0, [r5, #64]	; 0x40
 8026bd6:	b920      	cbnz	r0, 8026be2 <asctime+0x22>
 8026bd8:	4b08      	ldr	r3, [pc, #32]	; (8026bfc <asctime+0x3c>)
 8026bda:	4809      	ldr	r0, [pc, #36]	; (8026c00 <asctime+0x40>)
 8026bdc:	2137      	movs	r1, #55	; 0x37
 8026bde:	f000 f837 	bl	8026c50 <__assert_func>
 8026be2:	221a      	movs	r2, #26
 8026be4:	4631      	mov	r1, r6
 8026be6:	f7fd fc47 	bl	8024478 <memset>
 8026bea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8026bec:	4620      	mov	r0, r4
 8026bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026bf2:	f000 b807 	b.w	8026c04 <asctime_r>
 8026bf6:	bf00      	nop
 8026bf8:	20000490 	.word	0x20000490
 8026bfc:	08045d68 	.word	0x08045d68
 8026c00:	080461e8 	.word	0x080461e8

08026c04 <asctime_r>:
 8026c04:	b510      	push	{r4, lr}
 8026c06:	460c      	mov	r4, r1
 8026c08:	6941      	ldr	r1, [r0, #20]
 8026c0a:	6903      	ldr	r3, [r0, #16]
 8026c0c:	6982      	ldr	r2, [r0, #24]
 8026c0e:	b086      	sub	sp, #24
 8026c10:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8026c14:	9104      	str	r1, [sp, #16]
 8026c16:	6801      	ldr	r1, [r0, #0]
 8026c18:	9103      	str	r1, [sp, #12]
 8026c1a:	6841      	ldr	r1, [r0, #4]
 8026c1c:	9102      	str	r1, [sp, #8]
 8026c1e:	6881      	ldr	r1, [r0, #8]
 8026c20:	9101      	str	r1, [sp, #4]
 8026c22:	68c1      	ldr	r1, [r0, #12]
 8026c24:	9100      	str	r1, [sp, #0]
 8026c26:	4907      	ldr	r1, [pc, #28]	; (8026c44 <asctime_r+0x40>)
 8026c28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026c2c:	440b      	add	r3, r1
 8026c2e:	4906      	ldr	r1, [pc, #24]	; (8026c48 <asctime_r+0x44>)
 8026c30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026c34:	440a      	add	r2, r1
 8026c36:	4620      	mov	r0, r4
 8026c38:	4904      	ldr	r1, [pc, #16]	; (8026c4c <asctime_r+0x48>)
 8026c3a:	f7fe fda5 	bl	8025788 <siprintf>
 8026c3e:	4620      	mov	r0, r4
 8026c40:	b006      	add	sp, #24
 8026c42:	bd10      	pop	{r4, pc}
 8026c44:	08046279 	.word	0x08046279
 8026c48:	08046264 	.word	0x08046264
 8026c4c:	08046244 	.word	0x08046244

08026c50 <__assert_func>:
 8026c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026c52:	4614      	mov	r4, r2
 8026c54:	461a      	mov	r2, r3
 8026c56:	4b09      	ldr	r3, [pc, #36]	; (8026c7c <__assert_func+0x2c>)
 8026c58:	681b      	ldr	r3, [r3, #0]
 8026c5a:	4605      	mov	r5, r0
 8026c5c:	68d8      	ldr	r0, [r3, #12]
 8026c5e:	b14c      	cbz	r4, 8026c74 <__assert_func+0x24>
 8026c60:	4b07      	ldr	r3, [pc, #28]	; (8026c80 <__assert_func+0x30>)
 8026c62:	9100      	str	r1, [sp, #0]
 8026c64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026c68:	4906      	ldr	r1, [pc, #24]	; (8026c84 <__assert_func+0x34>)
 8026c6a:	462b      	mov	r3, r5
 8026c6c:	f000 fef6 	bl	8027a5c <fiprintf>
 8026c70:	f002 faf0 	bl	8029254 <abort>
 8026c74:	4b04      	ldr	r3, [pc, #16]	; (8026c88 <__assert_func+0x38>)
 8026c76:	461c      	mov	r4, r3
 8026c78:	e7f3      	b.n	8026c62 <__assert_func+0x12>
 8026c7a:	bf00      	nop
 8026c7c:	20000490 	.word	0x20000490
 8026c80:	0804629d 	.word	0x0804629d
 8026c84:	080462aa 	.word	0x080462aa
 8026c88:	08046263 	.word	0x08046263

08026c8c <_close_r>:
 8026c8c:	b538      	push	{r3, r4, r5, lr}
 8026c8e:	4d06      	ldr	r5, [pc, #24]	; (8026ca8 <_close_r+0x1c>)
 8026c90:	2300      	movs	r3, #0
 8026c92:	4604      	mov	r4, r0
 8026c94:	4608      	mov	r0, r1
 8026c96:	602b      	str	r3, [r5, #0]
 8026c98:	f7e0 fb6c 	bl	8007374 <_close>
 8026c9c:	1c43      	adds	r3, r0, #1
 8026c9e:	d102      	bne.n	8026ca6 <_close_r+0x1a>
 8026ca0:	682b      	ldr	r3, [r5, #0]
 8026ca2:	b103      	cbz	r3, 8026ca6 <_close_r+0x1a>
 8026ca4:	6023      	str	r3, [r4, #0]
 8026ca6:	bd38      	pop	{r3, r4, r5, pc}
 8026ca8:	2002fd5c 	.word	0x2002fd5c

08026cac <div>:
 8026cac:	2900      	cmp	r1, #0
 8026cae:	b510      	push	{r4, lr}
 8026cb0:	fb91 f4f2 	sdiv	r4, r1, r2
 8026cb4:	fb02 1314 	mls	r3, r2, r4, r1
 8026cb8:	db06      	blt.n	8026cc8 <div+0x1c>
 8026cba:	2b00      	cmp	r3, #0
 8026cbc:	da01      	bge.n	8026cc2 <div+0x16>
 8026cbe:	3401      	adds	r4, #1
 8026cc0:	1a9b      	subs	r3, r3, r2
 8026cc2:	e9c0 4300 	strd	r4, r3, [r0]
 8026cc6:	bd10      	pop	{r4, pc}
 8026cc8:	2b00      	cmp	r3, #0
 8026cca:	bfc4      	itt	gt
 8026ccc:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8026cd0:	189b      	addgt	r3, r3, r2
 8026cd2:	e7f6      	b.n	8026cc2 <div+0x16>

08026cd4 <quorem>:
 8026cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cd8:	6903      	ldr	r3, [r0, #16]
 8026cda:	690c      	ldr	r4, [r1, #16]
 8026cdc:	42a3      	cmp	r3, r4
 8026cde:	4607      	mov	r7, r0
 8026ce0:	f2c0 8081 	blt.w	8026de6 <quorem+0x112>
 8026ce4:	3c01      	subs	r4, #1
 8026ce6:	f101 0814 	add.w	r8, r1, #20
 8026cea:	f100 0514 	add.w	r5, r0, #20
 8026cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026cf2:	9301      	str	r3, [sp, #4]
 8026cf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026cf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026cfc:	3301      	adds	r3, #1
 8026cfe:	429a      	cmp	r2, r3
 8026d00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026d04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026d08:	fbb2 f6f3 	udiv	r6, r2, r3
 8026d0c:	d331      	bcc.n	8026d72 <quorem+0x9e>
 8026d0e:	f04f 0e00 	mov.w	lr, #0
 8026d12:	4640      	mov	r0, r8
 8026d14:	46ac      	mov	ip, r5
 8026d16:	46f2      	mov	sl, lr
 8026d18:	f850 2b04 	ldr.w	r2, [r0], #4
 8026d1c:	b293      	uxth	r3, r2
 8026d1e:	fb06 e303 	mla	r3, r6, r3, lr
 8026d22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026d26:	b29b      	uxth	r3, r3
 8026d28:	ebaa 0303 	sub.w	r3, sl, r3
 8026d2c:	f8dc a000 	ldr.w	sl, [ip]
 8026d30:	0c12      	lsrs	r2, r2, #16
 8026d32:	fa13 f38a 	uxtah	r3, r3, sl
 8026d36:	fb06 e202 	mla	r2, r6, r2, lr
 8026d3a:	9300      	str	r3, [sp, #0]
 8026d3c:	9b00      	ldr	r3, [sp, #0]
 8026d3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8026d42:	b292      	uxth	r2, r2
 8026d44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8026d48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026d4c:	f8bd 3000 	ldrh.w	r3, [sp]
 8026d50:	4581      	cmp	r9, r0
 8026d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026d56:	f84c 3b04 	str.w	r3, [ip], #4
 8026d5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8026d5e:	d2db      	bcs.n	8026d18 <quorem+0x44>
 8026d60:	f855 300b 	ldr.w	r3, [r5, fp]
 8026d64:	b92b      	cbnz	r3, 8026d72 <quorem+0x9e>
 8026d66:	9b01      	ldr	r3, [sp, #4]
 8026d68:	3b04      	subs	r3, #4
 8026d6a:	429d      	cmp	r5, r3
 8026d6c:	461a      	mov	r2, r3
 8026d6e:	d32e      	bcc.n	8026dce <quorem+0xfa>
 8026d70:	613c      	str	r4, [r7, #16]
 8026d72:	4638      	mov	r0, r7
 8026d74:	f001 fa86 	bl	8028284 <__mcmp>
 8026d78:	2800      	cmp	r0, #0
 8026d7a:	db24      	blt.n	8026dc6 <quorem+0xf2>
 8026d7c:	3601      	adds	r6, #1
 8026d7e:	4628      	mov	r0, r5
 8026d80:	f04f 0c00 	mov.w	ip, #0
 8026d84:	f858 2b04 	ldr.w	r2, [r8], #4
 8026d88:	f8d0 e000 	ldr.w	lr, [r0]
 8026d8c:	b293      	uxth	r3, r2
 8026d8e:	ebac 0303 	sub.w	r3, ip, r3
 8026d92:	0c12      	lsrs	r2, r2, #16
 8026d94:	fa13 f38e 	uxtah	r3, r3, lr
 8026d98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8026d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026da0:	b29b      	uxth	r3, r3
 8026da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026da6:	45c1      	cmp	r9, r8
 8026da8:	f840 3b04 	str.w	r3, [r0], #4
 8026dac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8026db0:	d2e8      	bcs.n	8026d84 <quorem+0xb0>
 8026db2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026db6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026dba:	b922      	cbnz	r2, 8026dc6 <quorem+0xf2>
 8026dbc:	3b04      	subs	r3, #4
 8026dbe:	429d      	cmp	r5, r3
 8026dc0:	461a      	mov	r2, r3
 8026dc2:	d30a      	bcc.n	8026dda <quorem+0x106>
 8026dc4:	613c      	str	r4, [r7, #16]
 8026dc6:	4630      	mov	r0, r6
 8026dc8:	b003      	add	sp, #12
 8026dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026dce:	6812      	ldr	r2, [r2, #0]
 8026dd0:	3b04      	subs	r3, #4
 8026dd2:	2a00      	cmp	r2, #0
 8026dd4:	d1cc      	bne.n	8026d70 <quorem+0x9c>
 8026dd6:	3c01      	subs	r4, #1
 8026dd8:	e7c7      	b.n	8026d6a <quorem+0x96>
 8026dda:	6812      	ldr	r2, [r2, #0]
 8026ddc:	3b04      	subs	r3, #4
 8026dde:	2a00      	cmp	r2, #0
 8026de0:	d1f0      	bne.n	8026dc4 <quorem+0xf0>
 8026de2:	3c01      	subs	r4, #1
 8026de4:	e7eb      	b.n	8026dbe <quorem+0xea>
 8026de6:	2000      	movs	r0, #0
 8026de8:	e7ee      	b.n	8026dc8 <quorem+0xf4>
 8026dea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8026dee:	Address 0x0000000008026dee is out of bounds.


08026df0 <_dtoa_r>:
 8026df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026df4:	ed2d 8b02 	vpush	{d8}
 8026df8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8026dfa:	b091      	sub	sp, #68	; 0x44
 8026dfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026e00:	ec59 8b10 	vmov	r8, r9, d0
 8026e04:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026e06:	9106      	str	r1, [sp, #24]
 8026e08:	4606      	mov	r6, r0
 8026e0a:	9208      	str	r2, [sp, #32]
 8026e0c:	930c      	str	r3, [sp, #48]	; 0x30
 8026e0e:	b975      	cbnz	r5, 8026e2e <_dtoa_r+0x3e>
 8026e10:	2010      	movs	r0, #16
 8026e12:	f7fd fae9 	bl	80243e8 <malloc>
 8026e16:	4602      	mov	r2, r0
 8026e18:	6270      	str	r0, [r6, #36]	; 0x24
 8026e1a:	b920      	cbnz	r0, 8026e26 <_dtoa_r+0x36>
 8026e1c:	4baa      	ldr	r3, [pc, #680]	; (80270c8 <_dtoa_r+0x2d8>)
 8026e1e:	21ea      	movs	r1, #234	; 0xea
 8026e20:	48aa      	ldr	r0, [pc, #680]	; (80270cc <_dtoa_r+0x2dc>)
 8026e22:	f7ff ff15 	bl	8026c50 <__assert_func>
 8026e26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8026e2a:	6005      	str	r5, [r0, #0]
 8026e2c:	60c5      	str	r5, [r0, #12]
 8026e2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8026e30:	6819      	ldr	r1, [r3, #0]
 8026e32:	b151      	cbz	r1, 8026e4a <_dtoa_r+0x5a>
 8026e34:	685a      	ldr	r2, [r3, #4]
 8026e36:	604a      	str	r2, [r1, #4]
 8026e38:	2301      	movs	r3, #1
 8026e3a:	4093      	lsls	r3, r2
 8026e3c:	608b      	str	r3, [r1, #8]
 8026e3e:	4630      	mov	r0, r6
 8026e40:	f000 ffde 	bl	8027e00 <_Bfree>
 8026e44:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8026e46:	2200      	movs	r2, #0
 8026e48:	601a      	str	r2, [r3, #0]
 8026e4a:	f1b9 0300 	subs.w	r3, r9, #0
 8026e4e:	bfbb      	ittet	lt
 8026e50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8026e54:	9303      	strlt	r3, [sp, #12]
 8026e56:	2300      	movge	r3, #0
 8026e58:	2201      	movlt	r2, #1
 8026e5a:	bfac      	ite	ge
 8026e5c:	6023      	strge	r3, [r4, #0]
 8026e5e:	6022      	strlt	r2, [r4, #0]
 8026e60:	4b9b      	ldr	r3, [pc, #620]	; (80270d0 <_dtoa_r+0x2e0>)
 8026e62:	9c03      	ldr	r4, [sp, #12]
 8026e64:	43a3      	bics	r3, r4
 8026e66:	d11c      	bne.n	8026ea2 <_dtoa_r+0xb2>
 8026e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026e6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8026e6e:	6013      	str	r3, [r2, #0]
 8026e70:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8026e74:	ea53 0308 	orrs.w	r3, r3, r8
 8026e78:	f000 84fd 	beq.w	8027876 <_dtoa_r+0xa86>
 8026e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026e7e:	b963      	cbnz	r3, 8026e9a <_dtoa_r+0xaa>
 8026e80:	4b94      	ldr	r3, [pc, #592]	; (80270d4 <_dtoa_r+0x2e4>)
 8026e82:	e01f      	b.n	8026ec4 <_dtoa_r+0xd4>
 8026e84:	4b94      	ldr	r3, [pc, #592]	; (80270d8 <_dtoa_r+0x2e8>)
 8026e86:	9301      	str	r3, [sp, #4]
 8026e88:	3308      	adds	r3, #8
 8026e8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8026e8c:	6013      	str	r3, [r2, #0]
 8026e8e:	9801      	ldr	r0, [sp, #4]
 8026e90:	b011      	add	sp, #68	; 0x44
 8026e92:	ecbd 8b02 	vpop	{d8}
 8026e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e9a:	4b8e      	ldr	r3, [pc, #568]	; (80270d4 <_dtoa_r+0x2e4>)
 8026e9c:	9301      	str	r3, [sp, #4]
 8026e9e:	3303      	adds	r3, #3
 8026ea0:	e7f3      	b.n	8026e8a <_dtoa_r+0x9a>
 8026ea2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8026ea6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026eae:	d10b      	bne.n	8026ec8 <_dtoa_r+0xd8>
 8026eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026eb2:	2301      	movs	r3, #1
 8026eb4:	6013      	str	r3, [r2, #0]
 8026eb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026eb8:	2b00      	cmp	r3, #0
 8026eba:	f000 84d9 	beq.w	8027870 <_dtoa_r+0xa80>
 8026ebe:	4887      	ldr	r0, [pc, #540]	; (80270dc <_dtoa_r+0x2ec>)
 8026ec0:	6018      	str	r0, [r3, #0]
 8026ec2:	1e43      	subs	r3, r0, #1
 8026ec4:	9301      	str	r3, [sp, #4]
 8026ec6:	e7e2      	b.n	8026e8e <_dtoa_r+0x9e>
 8026ec8:	a90f      	add	r1, sp, #60	; 0x3c
 8026eca:	aa0e      	add	r2, sp, #56	; 0x38
 8026ecc:	4630      	mov	r0, r6
 8026ece:	eeb0 0b48 	vmov.f64	d0, d8
 8026ed2:	f001 fa7d 	bl	80283d0 <__d2b>
 8026ed6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8026eda:	4605      	mov	r5, r0
 8026edc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026ede:	2900      	cmp	r1, #0
 8026ee0:	d046      	beq.n	8026f70 <_dtoa_r+0x180>
 8026ee2:	ee18 4a90 	vmov	r4, s17
 8026ee6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8026eea:	ec53 2b18 	vmov	r2, r3, d8
 8026eee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8026ef2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026ef6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8026efa:	2400      	movs	r4, #0
 8026efc:	ec43 2b16 	vmov	d6, r2, r3
 8026f00:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8026f04:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80270b0 <_dtoa_r+0x2c0>
 8026f08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8026f0c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80270b8 <_dtoa_r+0x2c8>
 8026f10:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026f14:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80270c0 <_dtoa_r+0x2d0>
 8026f18:	ee07 1a90 	vmov	s15, r1
 8026f1c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8026f20:	eeb0 7b46 	vmov.f64	d7, d6
 8026f24:	eea4 7b05 	vfma.f64	d7, d4, d5
 8026f28:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8026f2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8026f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f34:	ee16 ba90 	vmov	fp, s13
 8026f38:	940a      	str	r4, [sp, #40]	; 0x28
 8026f3a:	d508      	bpl.n	8026f4e <_dtoa_r+0x15e>
 8026f3c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8026f40:	eeb4 6b47 	vcmp.f64	d6, d7
 8026f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f48:	bf18      	it	ne
 8026f4a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8026f4e:	f1bb 0f16 	cmp.w	fp, #22
 8026f52:	d82f      	bhi.n	8026fb4 <_dtoa_r+0x1c4>
 8026f54:	4b62      	ldr	r3, [pc, #392]	; (80270e0 <_dtoa_r+0x2f0>)
 8026f56:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026f5a:	ed93 7b00 	vldr	d7, [r3]
 8026f5e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f66:	d501      	bpl.n	8026f6c <_dtoa_r+0x17c>
 8026f68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026f6c:	2300      	movs	r3, #0
 8026f6e:	e022      	b.n	8026fb6 <_dtoa_r+0x1c6>
 8026f70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026f72:	4401      	add	r1, r0
 8026f74:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8026f78:	2b20      	cmp	r3, #32
 8026f7a:	bfc1      	itttt	gt
 8026f7c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026f80:	fa04 f303 	lslgt.w	r3, r4, r3
 8026f84:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8026f88:	fa28 f804 	lsrgt.w	r8, r8, r4
 8026f8c:	bfd6      	itet	le
 8026f8e:	f1c3 0320 	rsble	r3, r3, #32
 8026f92:	ea43 0808 	orrgt.w	r8, r3, r8
 8026f96:	fa08 f803 	lslle.w	r8, r8, r3
 8026f9a:	ee07 8a90 	vmov	s15, r8
 8026f9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026fa2:	3901      	subs	r1, #1
 8026fa4:	ee17 4a90 	vmov	r4, s15
 8026fa8:	ec53 2b17 	vmov	r2, r3, d7
 8026fac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8026fb0:	2401      	movs	r4, #1
 8026fb2:	e7a3      	b.n	8026efc <_dtoa_r+0x10c>
 8026fb4:	2301      	movs	r3, #1
 8026fb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8026fb8:	1a43      	subs	r3, r0, r1
 8026fba:	1e5a      	subs	r2, r3, #1
 8026fbc:	bf45      	ittet	mi
 8026fbe:	f1c3 0301 	rsbmi	r3, r3, #1
 8026fc2:	9304      	strmi	r3, [sp, #16]
 8026fc4:	2300      	movpl	r3, #0
 8026fc6:	2300      	movmi	r3, #0
 8026fc8:	9205      	str	r2, [sp, #20]
 8026fca:	bf54      	ite	pl
 8026fcc:	9304      	strpl	r3, [sp, #16]
 8026fce:	9305      	strmi	r3, [sp, #20]
 8026fd0:	f1bb 0f00 	cmp.w	fp, #0
 8026fd4:	db18      	blt.n	8027008 <_dtoa_r+0x218>
 8026fd6:	9b05      	ldr	r3, [sp, #20]
 8026fd8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8026fdc:	445b      	add	r3, fp
 8026fde:	9305      	str	r3, [sp, #20]
 8026fe0:	2300      	movs	r3, #0
 8026fe2:	9a06      	ldr	r2, [sp, #24]
 8026fe4:	2a09      	cmp	r2, #9
 8026fe6:	d849      	bhi.n	802707c <_dtoa_r+0x28c>
 8026fe8:	2a05      	cmp	r2, #5
 8026fea:	bfc4      	itt	gt
 8026fec:	3a04      	subgt	r2, #4
 8026fee:	9206      	strgt	r2, [sp, #24]
 8026ff0:	9a06      	ldr	r2, [sp, #24]
 8026ff2:	f1a2 0202 	sub.w	r2, r2, #2
 8026ff6:	bfcc      	ite	gt
 8026ff8:	2400      	movgt	r4, #0
 8026ffa:	2401      	movle	r4, #1
 8026ffc:	2a03      	cmp	r2, #3
 8026ffe:	d848      	bhi.n	8027092 <_dtoa_r+0x2a2>
 8027000:	e8df f002 	tbb	[pc, r2]
 8027004:	3a2c2e0b 	.word	0x3a2c2e0b
 8027008:	9b04      	ldr	r3, [sp, #16]
 802700a:	2200      	movs	r2, #0
 802700c:	eba3 030b 	sub.w	r3, r3, fp
 8027010:	9304      	str	r3, [sp, #16]
 8027012:	9209      	str	r2, [sp, #36]	; 0x24
 8027014:	f1cb 0300 	rsb	r3, fp, #0
 8027018:	e7e3      	b.n	8026fe2 <_dtoa_r+0x1f2>
 802701a:	2200      	movs	r2, #0
 802701c:	9207      	str	r2, [sp, #28]
 802701e:	9a08      	ldr	r2, [sp, #32]
 8027020:	2a00      	cmp	r2, #0
 8027022:	dc39      	bgt.n	8027098 <_dtoa_r+0x2a8>
 8027024:	f04f 0a01 	mov.w	sl, #1
 8027028:	46d1      	mov	r9, sl
 802702a:	4652      	mov	r2, sl
 802702c:	f8cd a020 	str.w	sl, [sp, #32]
 8027030:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8027032:	2100      	movs	r1, #0
 8027034:	6079      	str	r1, [r7, #4]
 8027036:	2004      	movs	r0, #4
 8027038:	f100 0c14 	add.w	ip, r0, #20
 802703c:	4594      	cmp	ip, r2
 802703e:	6879      	ldr	r1, [r7, #4]
 8027040:	d92f      	bls.n	80270a2 <_dtoa_r+0x2b2>
 8027042:	4630      	mov	r0, r6
 8027044:	930d      	str	r3, [sp, #52]	; 0x34
 8027046:	f000 fe9b 	bl	8027d80 <_Balloc>
 802704a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802704c:	9001      	str	r0, [sp, #4]
 802704e:	4602      	mov	r2, r0
 8027050:	2800      	cmp	r0, #0
 8027052:	d149      	bne.n	80270e8 <_dtoa_r+0x2f8>
 8027054:	4b23      	ldr	r3, [pc, #140]	; (80270e4 <_dtoa_r+0x2f4>)
 8027056:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802705a:	e6e1      	b.n	8026e20 <_dtoa_r+0x30>
 802705c:	2201      	movs	r2, #1
 802705e:	e7dd      	b.n	802701c <_dtoa_r+0x22c>
 8027060:	2200      	movs	r2, #0
 8027062:	9207      	str	r2, [sp, #28]
 8027064:	9a08      	ldr	r2, [sp, #32]
 8027066:	eb0b 0a02 	add.w	sl, fp, r2
 802706a:	f10a 0901 	add.w	r9, sl, #1
 802706e:	464a      	mov	r2, r9
 8027070:	2a01      	cmp	r2, #1
 8027072:	bfb8      	it	lt
 8027074:	2201      	movlt	r2, #1
 8027076:	e7db      	b.n	8027030 <_dtoa_r+0x240>
 8027078:	2201      	movs	r2, #1
 802707a:	e7f2      	b.n	8027062 <_dtoa_r+0x272>
 802707c:	2401      	movs	r4, #1
 802707e:	2200      	movs	r2, #0
 8027080:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8027084:	f04f 3aff 	mov.w	sl, #4294967295
 8027088:	2100      	movs	r1, #0
 802708a:	46d1      	mov	r9, sl
 802708c:	2212      	movs	r2, #18
 802708e:	9108      	str	r1, [sp, #32]
 8027090:	e7ce      	b.n	8027030 <_dtoa_r+0x240>
 8027092:	2201      	movs	r2, #1
 8027094:	9207      	str	r2, [sp, #28]
 8027096:	e7f5      	b.n	8027084 <_dtoa_r+0x294>
 8027098:	f8dd a020 	ldr.w	sl, [sp, #32]
 802709c:	46d1      	mov	r9, sl
 802709e:	4652      	mov	r2, sl
 80270a0:	e7c6      	b.n	8027030 <_dtoa_r+0x240>
 80270a2:	3101      	adds	r1, #1
 80270a4:	6079      	str	r1, [r7, #4]
 80270a6:	0040      	lsls	r0, r0, #1
 80270a8:	e7c6      	b.n	8027038 <_dtoa_r+0x248>
 80270aa:	bf00      	nop
 80270ac:	f3af 8000 	nop.w
 80270b0:	636f4361 	.word	0x636f4361
 80270b4:	3fd287a7 	.word	0x3fd287a7
 80270b8:	8b60c8b3 	.word	0x8b60c8b3
 80270bc:	3fc68a28 	.word	0x3fc68a28
 80270c0:	509f79fb 	.word	0x509f79fb
 80270c4:	3fd34413 	.word	0x3fd34413
 80270c8:	08045d68 	.word	0x08045d68
 80270cc:	080462e6 	.word	0x080462e6
 80270d0:	7ff00000 	.word	0x7ff00000
 80270d4:	080462e2 	.word	0x080462e2
 80270d8:	080462d9 	.word	0x080462d9
 80270dc:	080464c2 	.word	0x080464c2
 80270e0:	080463d8 	.word	0x080463d8
 80270e4:	08046341 	.word	0x08046341
 80270e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80270ea:	9901      	ldr	r1, [sp, #4]
 80270ec:	6011      	str	r1, [r2, #0]
 80270ee:	f1b9 0f0e 	cmp.w	r9, #14
 80270f2:	d86c      	bhi.n	80271ce <_dtoa_r+0x3de>
 80270f4:	2c00      	cmp	r4, #0
 80270f6:	d06a      	beq.n	80271ce <_dtoa_r+0x3de>
 80270f8:	f1bb 0f00 	cmp.w	fp, #0
 80270fc:	f340 80a0 	ble.w	8027240 <_dtoa_r+0x450>
 8027100:	49c1      	ldr	r1, [pc, #772]	; (8027408 <_dtoa_r+0x618>)
 8027102:	f00b 020f 	and.w	r2, fp, #15
 8027106:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802710a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802710e:	ed92 7b00 	vldr	d7, [r2]
 8027112:	ea4f 112b 	mov.w	r1, fp, asr #4
 8027116:	f000 8087 	beq.w	8027228 <_dtoa_r+0x438>
 802711a:	4abc      	ldr	r2, [pc, #752]	; (802740c <_dtoa_r+0x61c>)
 802711c:	ed92 6b08 	vldr	d6, [r2, #32]
 8027120:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8027124:	ed8d 6b02 	vstr	d6, [sp, #8]
 8027128:	f001 010f 	and.w	r1, r1, #15
 802712c:	2203      	movs	r2, #3
 802712e:	48b7      	ldr	r0, [pc, #732]	; (802740c <_dtoa_r+0x61c>)
 8027130:	2900      	cmp	r1, #0
 8027132:	d17b      	bne.n	802722c <_dtoa_r+0x43c>
 8027134:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027138:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802713c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027142:	2900      	cmp	r1, #0
 8027144:	f000 80a2 	beq.w	802728c <_dtoa_r+0x49c>
 8027148:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802714c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027150:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027158:	f140 8098 	bpl.w	802728c <_dtoa_r+0x49c>
 802715c:	f1b9 0f00 	cmp.w	r9, #0
 8027160:	f000 8094 	beq.w	802728c <_dtoa_r+0x49c>
 8027164:	f1ba 0f00 	cmp.w	sl, #0
 8027168:	dd2f      	ble.n	80271ca <_dtoa_r+0x3da>
 802716a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802716e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027172:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027176:	f10b 37ff 	add.w	r7, fp, #4294967295
 802717a:	3201      	adds	r2, #1
 802717c:	4650      	mov	r0, sl
 802717e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027182:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8027186:	ee07 2a90 	vmov	s15, r2
 802718a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802718e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8027192:	ee15 4a90 	vmov	r4, s11
 8027196:	ec52 1b15 	vmov	r1, r2, d5
 802719a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802719e:	2800      	cmp	r0, #0
 80271a0:	d177      	bne.n	8027292 <_dtoa_r+0x4a2>
 80271a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80271a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80271aa:	ec42 1b17 	vmov	d7, r1, r2
 80271ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80271b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271b6:	f300 8263 	bgt.w	8027680 <_dtoa_r+0x890>
 80271ba:	eeb1 7b47 	vneg.f64	d7, d7
 80271be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80271c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271c6:	f100 8258 	bmi.w	802767a <_dtoa_r+0x88a>
 80271ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80271ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80271d0:	2a00      	cmp	r2, #0
 80271d2:	f2c0 811d 	blt.w	8027410 <_dtoa_r+0x620>
 80271d6:	f1bb 0f0e 	cmp.w	fp, #14
 80271da:	f300 8119 	bgt.w	8027410 <_dtoa_r+0x620>
 80271de:	4b8a      	ldr	r3, [pc, #552]	; (8027408 <_dtoa_r+0x618>)
 80271e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80271e4:	ed93 6b00 	vldr	d6, [r3]
 80271e8:	9b08      	ldr	r3, [sp, #32]
 80271ea:	2b00      	cmp	r3, #0
 80271ec:	f280 80b7 	bge.w	802735e <_dtoa_r+0x56e>
 80271f0:	f1b9 0f00 	cmp.w	r9, #0
 80271f4:	f300 80b3 	bgt.w	802735e <_dtoa_r+0x56e>
 80271f8:	f040 823f 	bne.w	802767a <_dtoa_r+0x88a>
 80271fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8027200:	ee26 6b07 	vmul.f64	d6, d6, d7
 8027204:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027208:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802720c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027210:	464c      	mov	r4, r9
 8027212:	464f      	mov	r7, r9
 8027214:	f280 8215 	bge.w	8027642 <_dtoa_r+0x852>
 8027218:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802721c:	2331      	movs	r3, #49	; 0x31
 802721e:	f808 3b01 	strb.w	r3, [r8], #1
 8027222:	f10b 0b01 	add.w	fp, fp, #1
 8027226:	e211      	b.n	802764c <_dtoa_r+0x85c>
 8027228:	2202      	movs	r2, #2
 802722a:	e780      	b.n	802712e <_dtoa_r+0x33e>
 802722c:	07cc      	lsls	r4, r1, #31
 802722e:	d504      	bpl.n	802723a <_dtoa_r+0x44a>
 8027230:	ed90 6b00 	vldr	d6, [r0]
 8027234:	3201      	adds	r2, #1
 8027236:	ee27 7b06 	vmul.f64	d7, d7, d6
 802723a:	1049      	asrs	r1, r1, #1
 802723c:	3008      	adds	r0, #8
 802723e:	e777      	b.n	8027130 <_dtoa_r+0x340>
 8027240:	d022      	beq.n	8027288 <_dtoa_r+0x498>
 8027242:	f1cb 0100 	rsb	r1, fp, #0
 8027246:	4a70      	ldr	r2, [pc, #448]	; (8027408 <_dtoa_r+0x618>)
 8027248:	f001 000f 	and.w	r0, r1, #15
 802724c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8027250:	ed92 7b00 	vldr	d7, [r2]
 8027254:	ee28 7b07 	vmul.f64	d7, d8, d7
 8027258:	ed8d 7b02 	vstr	d7, [sp, #8]
 802725c:	486b      	ldr	r0, [pc, #428]	; (802740c <_dtoa_r+0x61c>)
 802725e:	1109      	asrs	r1, r1, #4
 8027260:	2400      	movs	r4, #0
 8027262:	2202      	movs	r2, #2
 8027264:	b929      	cbnz	r1, 8027272 <_dtoa_r+0x482>
 8027266:	2c00      	cmp	r4, #0
 8027268:	f43f af6a 	beq.w	8027140 <_dtoa_r+0x350>
 802726c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027270:	e766      	b.n	8027140 <_dtoa_r+0x350>
 8027272:	07cf      	lsls	r7, r1, #31
 8027274:	d505      	bpl.n	8027282 <_dtoa_r+0x492>
 8027276:	ed90 6b00 	vldr	d6, [r0]
 802727a:	3201      	adds	r2, #1
 802727c:	2401      	movs	r4, #1
 802727e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027282:	1049      	asrs	r1, r1, #1
 8027284:	3008      	adds	r0, #8
 8027286:	e7ed      	b.n	8027264 <_dtoa_r+0x474>
 8027288:	2202      	movs	r2, #2
 802728a:	e759      	b.n	8027140 <_dtoa_r+0x350>
 802728c:	465f      	mov	r7, fp
 802728e:	4648      	mov	r0, r9
 8027290:	e775      	b.n	802717e <_dtoa_r+0x38e>
 8027292:	ec42 1b17 	vmov	d7, r1, r2
 8027296:	4a5c      	ldr	r2, [pc, #368]	; (8027408 <_dtoa_r+0x618>)
 8027298:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802729c:	ed12 4b02 	vldr	d4, [r2, #-8]
 80272a0:	9a01      	ldr	r2, [sp, #4]
 80272a2:	1814      	adds	r4, r2, r0
 80272a4:	9a07      	ldr	r2, [sp, #28]
 80272a6:	b352      	cbz	r2, 80272fe <_dtoa_r+0x50e>
 80272a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80272ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80272b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80272b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80272b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80272bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80272c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80272c4:	ee14 2a90 	vmov	r2, s9
 80272c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80272cc:	3230      	adds	r2, #48	; 0x30
 80272ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80272d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80272d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80272da:	f808 2b01 	strb.w	r2, [r8], #1
 80272de:	d439      	bmi.n	8027354 <_dtoa_r+0x564>
 80272e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80272e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80272e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80272ec:	d472      	bmi.n	80273d4 <_dtoa_r+0x5e4>
 80272ee:	45a0      	cmp	r8, r4
 80272f0:	f43f af6b 	beq.w	80271ca <_dtoa_r+0x3da>
 80272f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80272f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80272fc:	e7e0      	b.n	80272c0 <_dtoa_r+0x4d0>
 80272fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027302:	ee27 7b04 	vmul.f64	d7, d7, d4
 8027306:	4621      	mov	r1, r4
 8027308:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802730c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8027310:	ee14 2a90 	vmov	r2, s9
 8027314:	3230      	adds	r2, #48	; 0x30
 8027316:	f808 2b01 	strb.w	r2, [r8], #1
 802731a:	45a0      	cmp	r8, r4
 802731c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8027320:	ee36 6b45 	vsub.f64	d6, d6, d5
 8027324:	d118      	bne.n	8027358 <_dtoa_r+0x568>
 8027326:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802732a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802732e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8027332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027336:	dc4d      	bgt.n	80273d4 <_dtoa_r+0x5e4>
 8027338:	ee35 7b47 	vsub.f64	d7, d5, d7
 802733c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027344:	f57f af41 	bpl.w	80271ca <_dtoa_r+0x3da>
 8027348:	4688      	mov	r8, r1
 802734a:	3901      	subs	r1, #1
 802734c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8027350:	2b30      	cmp	r3, #48	; 0x30
 8027352:	d0f9      	beq.n	8027348 <_dtoa_r+0x558>
 8027354:	46bb      	mov	fp, r7
 8027356:	e02a      	b.n	80273ae <_dtoa_r+0x5be>
 8027358:	ee26 6b03 	vmul.f64	d6, d6, d3
 802735c:	e7d6      	b.n	802730c <_dtoa_r+0x51c>
 802735e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027362:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8027366:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802736a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802736e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8027372:	ee15 3a10 	vmov	r3, s10
 8027376:	3330      	adds	r3, #48	; 0x30
 8027378:	f808 3b01 	strb.w	r3, [r8], #1
 802737c:	9b01      	ldr	r3, [sp, #4]
 802737e:	eba8 0303 	sub.w	r3, r8, r3
 8027382:	4599      	cmp	r9, r3
 8027384:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8027388:	eea3 7b46 	vfms.f64	d7, d3, d6
 802738c:	d133      	bne.n	80273f6 <_dtoa_r+0x606>
 802738e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8027392:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802739a:	dc1a      	bgt.n	80273d2 <_dtoa_r+0x5e2>
 802739c:	eeb4 7b46 	vcmp.f64	d7, d6
 80273a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273a4:	d103      	bne.n	80273ae <_dtoa_r+0x5be>
 80273a6:	ee15 3a10 	vmov	r3, s10
 80273aa:	07d9      	lsls	r1, r3, #31
 80273ac:	d411      	bmi.n	80273d2 <_dtoa_r+0x5e2>
 80273ae:	4629      	mov	r1, r5
 80273b0:	4630      	mov	r0, r6
 80273b2:	f000 fd25 	bl	8027e00 <_Bfree>
 80273b6:	2300      	movs	r3, #0
 80273b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80273ba:	f888 3000 	strb.w	r3, [r8]
 80273be:	f10b 0301 	add.w	r3, fp, #1
 80273c2:	6013      	str	r3, [r2, #0]
 80273c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80273c6:	2b00      	cmp	r3, #0
 80273c8:	f43f ad61 	beq.w	8026e8e <_dtoa_r+0x9e>
 80273cc:	f8c3 8000 	str.w	r8, [r3]
 80273d0:	e55d      	b.n	8026e8e <_dtoa_r+0x9e>
 80273d2:	465f      	mov	r7, fp
 80273d4:	4643      	mov	r3, r8
 80273d6:	4698      	mov	r8, r3
 80273d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80273dc:	2a39      	cmp	r2, #57	; 0x39
 80273de:	d106      	bne.n	80273ee <_dtoa_r+0x5fe>
 80273e0:	9a01      	ldr	r2, [sp, #4]
 80273e2:	429a      	cmp	r2, r3
 80273e4:	d1f7      	bne.n	80273d6 <_dtoa_r+0x5e6>
 80273e6:	9901      	ldr	r1, [sp, #4]
 80273e8:	2230      	movs	r2, #48	; 0x30
 80273ea:	3701      	adds	r7, #1
 80273ec:	700a      	strb	r2, [r1, #0]
 80273ee:	781a      	ldrb	r2, [r3, #0]
 80273f0:	3201      	adds	r2, #1
 80273f2:	701a      	strb	r2, [r3, #0]
 80273f4:	e7ae      	b.n	8027354 <_dtoa_r+0x564>
 80273f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80273fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80273fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027402:	d1b2      	bne.n	802736a <_dtoa_r+0x57a>
 8027404:	e7d3      	b.n	80273ae <_dtoa_r+0x5be>
 8027406:	bf00      	nop
 8027408:	080463d8 	.word	0x080463d8
 802740c:	080463b0 	.word	0x080463b0
 8027410:	9907      	ldr	r1, [sp, #28]
 8027412:	2900      	cmp	r1, #0
 8027414:	f000 80d0 	beq.w	80275b8 <_dtoa_r+0x7c8>
 8027418:	9906      	ldr	r1, [sp, #24]
 802741a:	2901      	cmp	r1, #1
 802741c:	f300 80b4 	bgt.w	8027588 <_dtoa_r+0x798>
 8027420:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027422:	2900      	cmp	r1, #0
 8027424:	f000 80ac 	beq.w	8027580 <_dtoa_r+0x790>
 8027428:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802742c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8027430:	461c      	mov	r4, r3
 8027432:	930a      	str	r3, [sp, #40]	; 0x28
 8027434:	9b04      	ldr	r3, [sp, #16]
 8027436:	4413      	add	r3, r2
 8027438:	9304      	str	r3, [sp, #16]
 802743a:	9b05      	ldr	r3, [sp, #20]
 802743c:	2101      	movs	r1, #1
 802743e:	4413      	add	r3, r2
 8027440:	4630      	mov	r0, r6
 8027442:	9305      	str	r3, [sp, #20]
 8027444:	f000 fd94 	bl	8027f70 <__i2b>
 8027448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802744a:	4607      	mov	r7, r0
 802744c:	f1b8 0f00 	cmp.w	r8, #0
 8027450:	dd0d      	ble.n	802746e <_dtoa_r+0x67e>
 8027452:	9a05      	ldr	r2, [sp, #20]
 8027454:	2a00      	cmp	r2, #0
 8027456:	dd0a      	ble.n	802746e <_dtoa_r+0x67e>
 8027458:	4542      	cmp	r2, r8
 802745a:	9904      	ldr	r1, [sp, #16]
 802745c:	bfa8      	it	ge
 802745e:	4642      	movge	r2, r8
 8027460:	1a89      	subs	r1, r1, r2
 8027462:	9104      	str	r1, [sp, #16]
 8027464:	9905      	ldr	r1, [sp, #20]
 8027466:	eba8 0802 	sub.w	r8, r8, r2
 802746a:	1a8a      	subs	r2, r1, r2
 802746c:	9205      	str	r2, [sp, #20]
 802746e:	b303      	cbz	r3, 80274b2 <_dtoa_r+0x6c2>
 8027470:	9a07      	ldr	r2, [sp, #28]
 8027472:	2a00      	cmp	r2, #0
 8027474:	f000 80a5 	beq.w	80275c2 <_dtoa_r+0x7d2>
 8027478:	2c00      	cmp	r4, #0
 802747a:	dd13      	ble.n	80274a4 <_dtoa_r+0x6b4>
 802747c:	4639      	mov	r1, r7
 802747e:	4622      	mov	r2, r4
 8027480:	4630      	mov	r0, r6
 8027482:	930d      	str	r3, [sp, #52]	; 0x34
 8027484:	f000 fe34 	bl	80280f0 <__pow5mult>
 8027488:	462a      	mov	r2, r5
 802748a:	4601      	mov	r1, r0
 802748c:	4607      	mov	r7, r0
 802748e:	4630      	mov	r0, r6
 8027490:	f000 fd84 	bl	8027f9c <__multiply>
 8027494:	4629      	mov	r1, r5
 8027496:	900a      	str	r0, [sp, #40]	; 0x28
 8027498:	4630      	mov	r0, r6
 802749a:	f000 fcb1 	bl	8027e00 <_Bfree>
 802749e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80274a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80274a2:	4615      	mov	r5, r2
 80274a4:	1b1a      	subs	r2, r3, r4
 80274a6:	d004      	beq.n	80274b2 <_dtoa_r+0x6c2>
 80274a8:	4629      	mov	r1, r5
 80274aa:	4630      	mov	r0, r6
 80274ac:	f000 fe20 	bl	80280f0 <__pow5mult>
 80274b0:	4605      	mov	r5, r0
 80274b2:	2101      	movs	r1, #1
 80274b4:	4630      	mov	r0, r6
 80274b6:	f000 fd5b 	bl	8027f70 <__i2b>
 80274ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80274bc:	2b00      	cmp	r3, #0
 80274be:	4604      	mov	r4, r0
 80274c0:	f340 8081 	ble.w	80275c6 <_dtoa_r+0x7d6>
 80274c4:	461a      	mov	r2, r3
 80274c6:	4601      	mov	r1, r0
 80274c8:	4630      	mov	r0, r6
 80274ca:	f000 fe11 	bl	80280f0 <__pow5mult>
 80274ce:	9b06      	ldr	r3, [sp, #24]
 80274d0:	2b01      	cmp	r3, #1
 80274d2:	4604      	mov	r4, r0
 80274d4:	dd7a      	ble.n	80275cc <_dtoa_r+0x7dc>
 80274d6:	2300      	movs	r3, #0
 80274d8:	930a      	str	r3, [sp, #40]	; 0x28
 80274da:	6922      	ldr	r2, [r4, #16]
 80274dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80274e0:	6910      	ldr	r0, [r2, #16]
 80274e2:	f000 fcf5 	bl	8027ed0 <__hi0bits>
 80274e6:	f1c0 0020 	rsb	r0, r0, #32
 80274ea:	9b05      	ldr	r3, [sp, #20]
 80274ec:	4418      	add	r0, r3
 80274ee:	f010 001f 	ands.w	r0, r0, #31
 80274f2:	f000 808c 	beq.w	802760e <_dtoa_r+0x81e>
 80274f6:	f1c0 0220 	rsb	r2, r0, #32
 80274fa:	2a04      	cmp	r2, #4
 80274fc:	f340 8085 	ble.w	802760a <_dtoa_r+0x81a>
 8027500:	f1c0 001c 	rsb	r0, r0, #28
 8027504:	9b04      	ldr	r3, [sp, #16]
 8027506:	4403      	add	r3, r0
 8027508:	9304      	str	r3, [sp, #16]
 802750a:	9b05      	ldr	r3, [sp, #20]
 802750c:	4403      	add	r3, r0
 802750e:	4480      	add	r8, r0
 8027510:	9305      	str	r3, [sp, #20]
 8027512:	9b04      	ldr	r3, [sp, #16]
 8027514:	2b00      	cmp	r3, #0
 8027516:	dd05      	ble.n	8027524 <_dtoa_r+0x734>
 8027518:	4629      	mov	r1, r5
 802751a:	461a      	mov	r2, r3
 802751c:	4630      	mov	r0, r6
 802751e:	f000 fe41 	bl	80281a4 <__lshift>
 8027522:	4605      	mov	r5, r0
 8027524:	9b05      	ldr	r3, [sp, #20]
 8027526:	2b00      	cmp	r3, #0
 8027528:	dd05      	ble.n	8027536 <_dtoa_r+0x746>
 802752a:	4621      	mov	r1, r4
 802752c:	461a      	mov	r2, r3
 802752e:	4630      	mov	r0, r6
 8027530:	f000 fe38 	bl	80281a4 <__lshift>
 8027534:	4604      	mov	r4, r0
 8027536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027538:	2b00      	cmp	r3, #0
 802753a:	d06a      	beq.n	8027612 <_dtoa_r+0x822>
 802753c:	4621      	mov	r1, r4
 802753e:	4628      	mov	r0, r5
 8027540:	f000 fea0 	bl	8028284 <__mcmp>
 8027544:	2800      	cmp	r0, #0
 8027546:	da64      	bge.n	8027612 <_dtoa_r+0x822>
 8027548:	2300      	movs	r3, #0
 802754a:	4629      	mov	r1, r5
 802754c:	220a      	movs	r2, #10
 802754e:	4630      	mov	r0, r6
 8027550:	f000 fc78 	bl	8027e44 <__multadd>
 8027554:	9b07      	ldr	r3, [sp, #28]
 8027556:	f10b 3bff 	add.w	fp, fp, #4294967295
 802755a:	4605      	mov	r5, r0
 802755c:	2b00      	cmp	r3, #0
 802755e:	f000 8191 	beq.w	8027884 <_dtoa_r+0xa94>
 8027562:	4639      	mov	r1, r7
 8027564:	2300      	movs	r3, #0
 8027566:	220a      	movs	r2, #10
 8027568:	4630      	mov	r0, r6
 802756a:	f000 fc6b 	bl	8027e44 <__multadd>
 802756e:	f1ba 0f00 	cmp.w	sl, #0
 8027572:	4607      	mov	r7, r0
 8027574:	f300 808d 	bgt.w	8027692 <_dtoa_r+0x8a2>
 8027578:	9b06      	ldr	r3, [sp, #24]
 802757a:	2b02      	cmp	r3, #2
 802757c:	dc50      	bgt.n	8027620 <_dtoa_r+0x830>
 802757e:	e088      	b.n	8027692 <_dtoa_r+0x8a2>
 8027580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027582:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8027586:	e751      	b.n	802742c <_dtoa_r+0x63c>
 8027588:	f109 34ff 	add.w	r4, r9, #4294967295
 802758c:	42a3      	cmp	r3, r4
 802758e:	bfbf      	itttt	lt
 8027590:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8027592:	1ae3      	sublt	r3, r4, r3
 8027594:	18d2      	addlt	r2, r2, r3
 8027596:	9209      	strlt	r2, [sp, #36]	; 0x24
 8027598:	bfb6      	itet	lt
 802759a:	4623      	movlt	r3, r4
 802759c:	1b1c      	subge	r4, r3, r4
 802759e:	2400      	movlt	r4, #0
 80275a0:	f1b9 0f00 	cmp.w	r9, #0
 80275a4:	bfb5      	itete	lt
 80275a6:	9a04      	ldrlt	r2, [sp, #16]
 80275a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80275ac:	eba2 0809 	sublt.w	r8, r2, r9
 80275b0:	464a      	movge	r2, r9
 80275b2:	bfb8      	it	lt
 80275b4:	2200      	movlt	r2, #0
 80275b6:	e73c      	b.n	8027432 <_dtoa_r+0x642>
 80275b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80275bc:	9f07      	ldr	r7, [sp, #28]
 80275be:	461c      	mov	r4, r3
 80275c0:	e744      	b.n	802744c <_dtoa_r+0x65c>
 80275c2:	461a      	mov	r2, r3
 80275c4:	e770      	b.n	80274a8 <_dtoa_r+0x6b8>
 80275c6:	9b06      	ldr	r3, [sp, #24]
 80275c8:	2b01      	cmp	r3, #1
 80275ca:	dc18      	bgt.n	80275fe <_dtoa_r+0x80e>
 80275cc:	9b02      	ldr	r3, [sp, #8]
 80275ce:	b9b3      	cbnz	r3, 80275fe <_dtoa_r+0x80e>
 80275d0:	9b03      	ldr	r3, [sp, #12]
 80275d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80275d6:	b9a2      	cbnz	r2, 8027602 <_dtoa_r+0x812>
 80275d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80275dc:	0d12      	lsrs	r2, r2, #20
 80275de:	0512      	lsls	r2, r2, #20
 80275e0:	b18a      	cbz	r2, 8027606 <_dtoa_r+0x816>
 80275e2:	9b04      	ldr	r3, [sp, #16]
 80275e4:	3301      	adds	r3, #1
 80275e6:	9304      	str	r3, [sp, #16]
 80275e8:	9b05      	ldr	r3, [sp, #20]
 80275ea:	3301      	adds	r3, #1
 80275ec:	9305      	str	r3, [sp, #20]
 80275ee:	2301      	movs	r3, #1
 80275f0:	930a      	str	r3, [sp, #40]	; 0x28
 80275f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275f4:	2b00      	cmp	r3, #0
 80275f6:	f47f af70 	bne.w	80274da <_dtoa_r+0x6ea>
 80275fa:	2001      	movs	r0, #1
 80275fc:	e775      	b.n	80274ea <_dtoa_r+0x6fa>
 80275fe:	2300      	movs	r3, #0
 8027600:	e7f6      	b.n	80275f0 <_dtoa_r+0x800>
 8027602:	9b02      	ldr	r3, [sp, #8]
 8027604:	e7f4      	b.n	80275f0 <_dtoa_r+0x800>
 8027606:	920a      	str	r2, [sp, #40]	; 0x28
 8027608:	e7f3      	b.n	80275f2 <_dtoa_r+0x802>
 802760a:	d082      	beq.n	8027512 <_dtoa_r+0x722>
 802760c:	4610      	mov	r0, r2
 802760e:	301c      	adds	r0, #28
 8027610:	e778      	b.n	8027504 <_dtoa_r+0x714>
 8027612:	f1b9 0f00 	cmp.w	r9, #0
 8027616:	dc37      	bgt.n	8027688 <_dtoa_r+0x898>
 8027618:	9b06      	ldr	r3, [sp, #24]
 802761a:	2b02      	cmp	r3, #2
 802761c:	dd34      	ble.n	8027688 <_dtoa_r+0x898>
 802761e:	46ca      	mov	sl, r9
 8027620:	f1ba 0f00 	cmp.w	sl, #0
 8027624:	d10d      	bne.n	8027642 <_dtoa_r+0x852>
 8027626:	4621      	mov	r1, r4
 8027628:	4653      	mov	r3, sl
 802762a:	2205      	movs	r2, #5
 802762c:	4630      	mov	r0, r6
 802762e:	f000 fc09 	bl	8027e44 <__multadd>
 8027632:	4601      	mov	r1, r0
 8027634:	4604      	mov	r4, r0
 8027636:	4628      	mov	r0, r5
 8027638:	f000 fe24 	bl	8028284 <__mcmp>
 802763c:	2800      	cmp	r0, #0
 802763e:	f73f adeb 	bgt.w	8027218 <_dtoa_r+0x428>
 8027642:	9b08      	ldr	r3, [sp, #32]
 8027644:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027648:	ea6f 0b03 	mvn.w	fp, r3
 802764c:	f04f 0900 	mov.w	r9, #0
 8027650:	4621      	mov	r1, r4
 8027652:	4630      	mov	r0, r6
 8027654:	f000 fbd4 	bl	8027e00 <_Bfree>
 8027658:	2f00      	cmp	r7, #0
 802765a:	f43f aea8 	beq.w	80273ae <_dtoa_r+0x5be>
 802765e:	f1b9 0f00 	cmp.w	r9, #0
 8027662:	d005      	beq.n	8027670 <_dtoa_r+0x880>
 8027664:	45b9      	cmp	r9, r7
 8027666:	d003      	beq.n	8027670 <_dtoa_r+0x880>
 8027668:	4649      	mov	r1, r9
 802766a:	4630      	mov	r0, r6
 802766c:	f000 fbc8 	bl	8027e00 <_Bfree>
 8027670:	4639      	mov	r1, r7
 8027672:	4630      	mov	r0, r6
 8027674:	f000 fbc4 	bl	8027e00 <_Bfree>
 8027678:	e699      	b.n	80273ae <_dtoa_r+0x5be>
 802767a:	2400      	movs	r4, #0
 802767c:	4627      	mov	r7, r4
 802767e:	e7e0      	b.n	8027642 <_dtoa_r+0x852>
 8027680:	46bb      	mov	fp, r7
 8027682:	4604      	mov	r4, r0
 8027684:	4607      	mov	r7, r0
 8027686:	e5c7      	b.n	8027218 <_dtoa_r+0x428>
 8027688:	9b07      	ldr	r3, [sp, #28]
 802768a:	46ca      	mov	sl, r9
 802768c:	2b00      	cmp	r3, #0
 802768e:	f000 8100 	beq.w	8027892 <_dtoa_r+0xaa2>
 8027692:	f1b8 0f00 	cmp.w	r8, #0
 8027696:	dd05      	ble.n	80276a4 <_dtoa_r+0x8b4>
 8027698:	4639      	mov	r1, r7
 802769a:	4642      	mov	r2, r8
 802769c:	4630      	mov	r0, r6
 802769e:	f000 fd81 	bl	80281a4 <__lshift>
 80276a2:	4607      	mov	r7, r0
 80276a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80276a6:	2b00      	cmp	r3, #0
 80276a8:	d05d      	beq.n	8027766 <_dtoa_r+0x976>
 80276aa:	6879      	ldr	r1, [r7, #4]
 80276ac:	4630      	mov	r0, r6
 80276ae:	f000 fb67 	bl	8027d80 <_Balloc>
 80276b2:	4680      	mov	r8, r0
 80276b4:	b928      	cbnz	r0, 80276c2 <_dtoa_r+0x8d2>
 80276b6:	4b82      	ldr	r3, [pc, #520]	; (80278c0 <_dtoa_r+0xad0>)
 80276b8:	4602      	mov	r2, r0
 80276ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 80276be:	f7ff bbaf 	b.w	8026e20 <_dtoa_r+0x30>
 80276c2:	693a      	ldr	r2, [r7, #16]
 80276c4:	3202      	adds	r2, #2
 80276c6:	0092      	lsls	r2, r2, #2
 80276c8:	f107 010c 	add.w	r1, r7, #12
 80276cc:	300c      	adds	r0, #12
 80276ce:	f7fc feab 	bl	8024428 <memcpy>
 80276d2:	2201      	movs	r2, #1
 80276d4:	4641      	mov	r1, r8
 80276d6:	4630      	mov	r0, r6
 80276d8:	f000 fd64 	bl	80281a4 <__lshift>
 80276dc:	9b01      	ldr	r3, [sp, #4]
 80276de:	3301      	adds	r3, #1
 80276e0:	9304      	str	r3, [sp, #16]
 80276e2:	9b01      	ldr	r3, [sp, #4]
 80276e4:	4453      	add	r3, sl
 80276e6:	9308      	str	r3, [sp, #32]
 80276e8:	9b02      	ldr	r3, [sp, #8]
 80276ea:	f003 0301 	and.w	r3, r3, #1
 80276ee:	46b9      	mov	r9, r7
 80276f0:	9307      	str	r3, [sp, #28]
 80276f2:	4607      	mov	r7, r0
 80276f4:	9b04      	ldr	r3, [sp, #16]
 80276f6:	4621      	mov	r1, r4
 80276f8:	3b01      	subs	r3, #1
 80276fa:	4628      	mov	r0, r5
 80276fc:	9302      	str	r3, [sp, #8]
 80276fe:	f7ff fae9 	bl	8026cd4 <quorem>
 8027702:	4603      	mov	r3, r0
 8027704:	3330      	adds	r3, #48	; 0x30
 8027706:	9005      	str	r0, [sp, #20]
 8027708:	4649      	mov	r1, r9
 802770a:	4628      	mov	r0, r5
 802770c:	9309      	str	r3, [sp, #36]	; 0x24
 802770e:	f000 fdb9 	bl	8028284 <__mcmp>
 8027712:	463a      	mov	r2, r7
 8027714:	4682      	mov	sl, r0
 8027716:	4621      	mov	r1, r4
 8027718:	4630      	mov	r0, r6
 802771a:	f000 fdcf 	bl	80282bc <__mdiff>
 802771e:	68c2      	ldr	r2, [r0, #12]
 8027720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027722:	4680      	mov	r8, r0
 8027724:	bb0a      	cbnz	r2, 802776a <_dtoa_r+0x97a>
 8027726:	4601      	mov	r1, r0
 8027728:	4628      	mov	r0, r5
 802772a:	f000 fdab 	bl	8028284 <__mcmp>
 802772e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027730:	4602      	mov	r2, r0
 8027732:	4641      	mov	r1, r8
 8027734:	4630      	mov	r0, r6
 8027736:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802773a:	f000 fb61 	bl	8027e00 <_Bfree>
 802773e:	9b06      	ldr	r3, [sp, #24]
 8027740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027742:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8027746:	ea43 0102 	orr.w	r1, r3, r2
 802774a:	9b07      	ldr	r3, [sp, #28]
 802774c:	430b      	orrs	r3, r1
 802774e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027750:	d10d      	bne.n	802776e <_dtoa_r+0x97e>
 8027752:	2b39      	cmp	r3, #57	; 0x39
 8027754:	d029      	beq.n	80277aa <_dtoa_r+0x9ba>
 8027756:	f1ba 0f00 	cmp.w	sl, #0
 802775a:	dd01      	ble.n	8027760 <_dtoa_r+0x970>
 802775c:	9b05      	ldr	r3, [sp, #20]
 802775e:	3331      	adds	r3, #49	; 0x31
 8027760:	9a02      	ldr	r2, [sp, #8]
 8027762:	7013      	strb	r3, [r2, #0]
 8027764:	e774      	b.n	8027650 <_dtoa_r+0x860>
 8027766:	4638      	mov	r0, r7
 8027768:	e7b8      	b.n	80276dc <_dtoa_r+0x8ec>
 802776a:	2201      	movs	r2, #1
 802776c:	e7e1      	b.n	8027732 <_dtoa_r+0x942>
 802776e:	f1ba 0f00 	cmp.w	sl, #0
 8027772:	db06      	blt.n	8027782 <_dtoa_r+0x992>
 8027774:	9906      	ldr	r1, [sp, #24]
 8027776:	ea41 0a0a 	orr.w	sl, r1, sl
 802777a:	9907      	ldr	r1, [sp, #28]
 802777c:	ea5a 0101 	orrs.w	r1, sl, r1
 8027780:	d120      	bne.n	80277c4 <_dtoa_r+0x9d4>
 8027782:	2a00      	cmp	r2, #0
 8027784:	ddec      	ble.n	8027760 <_dtoa_r+0x970>
 8027786:	4629      	mov	r1, r5
 8027788:	2201      	movs	r2, #1
 802778a:	4630      	mov	r0, r6
 802778c:	9304      	str	r3, [sp, #16]
 802778e:	f000 fd09 	bl	80281a4 <__lshift>
 8027792:	4621      	mov	r1, r4
 8027794:	4605      	mov	r5, r0
 8027796:	f000 fd75 	bl	8028284 <__mcmp>
 802779a:	2800      	cmp	r0, #0
 802779c:	9b04      	ldr	r3, [sp, #16]
 802779e:	dc02      	bgt.n	80277a6 <_dtoa_r+0x9b6>
 80277a0:	d1de      	bne.n	8027760 <_dtoa_r+0x970>
 80277a2:	07da      	lsls	r2, r3, #31
 80277a4:	d5dc      	bpl.n	8027760 <_dtoa_r+0x970>
 80277a6:	2b39      	cmp	r3, #57	; 0x39
 80277a8:	d1d8      	bne.n	802775c <_dtoa_r+0x96c>
 80277aa:	9a02      	ldr	r2, [sp, #8]
 80277ac:	2339      	movs	r3, #57	; 0x39
 80277ae:	7013      	strb	r3, [r2, #0]
 80277b0:	4643      	mov	r3, r8
 80277b2:	4698      	mov	r8, r3
 80277b4:	3b01      	subs	r3, #1
 80277b6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80277ba:	2a39      	cmp	r2, #57	; 0x39
 80277bc:	d051      	beq.n	8027862 <_dtoa_r+0xa72>
 80277be:	3201      	adds	r2, #1
 80277c0:	701a      	strb	r2, [r3, #0]
 80277c2:	e745      	b.n	8027650 <_dtoa_r+0x860>
 80277c4:	2a00      	cmp	r2, #0
 80277c6:	dd03      	ble.n	80277d0 <_dtoa_r+0x9e0>
 80277c8:	2b39      	cmp	r3, #57	; 0x39
 80277ca:	d0ee      	beq.n	80277aa <_dtoa_r+0x9ba>
 80277cc:	3301      	adds	r3, #1
 80277ce:	e7c7      	b.n	8027760 <_dtoa_r+0x970>
 80277d0:	9a04      	ldr	r2, [sp, #16]
 80277d2:	9908      	ldr	r1, [sp, #32]
 80277d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80277d8:	428a      	cmp	r2, r1
 80277da:	d02b      	beq.n	8027834 <_dtoa_r+0xa44>
 80277dc:	4629      	mov	r1, r5
 80277de:	2300      	movs	r3, #0
 80277e0:	220a      	movs	r2, #10
 80277e2:	4630      	mov	r0, r6
 80277e4:	f000 fb2e 	bl	8027e44 <__multadd>
 80277e8:	45b9      	cmp	r9, r7
 80277ea:	4605      	mov	r5, r0
 80277ec:	f04f 0300 	mov.w	r3, #0
 80277f0:	f04f 020a 	mov.w	r2, #10
 80277f4:	4649      	mov	r1, r9
 80277f6:	4630      	mov	r0, r6
 80277f8:	d107      	bne.n	802780a <_dtoa_r+0xa1a>
 80277fa:	f000 fb23 	bl	8027e44 <__multadd>
 80277fe:	4681      	mov	r9, r0
 8027800:	4607      	mov	r7, r0
 8027802:	9b04      	ldr	r3, [sp, #16]
 8027804:	3301      	adds	r3, #1
 8027806:	9304      	str	r3, [sp, #16]
 8027808:	e774      	b.n	80276f4 <_dtoa_r+0x904>
 802780a:	f000 fb1b 	bl	8027e44 <__multadd>
 802780e:	4639      	mov	r1, r7
 8027810:	4681      	mov	r9, r0
 8027812:	2300      	movs	r3, #0
 8027814:	220a      	movs	r2, #10
 8027816:	4630      	mov	r0, r6
 8027818:	f000 fb14 	bl	8027e44 <__multadd>
 802781c:	4607      	mov	r7, r0
 802781e:	e7f0      	b.n	8027802 <_dtoa_r+0xa12>
 8027820:	f1ba 0f00 	cmp.w	sl, #0
 8027824:	9a01      	ldr	r2, [sp, #4]
 8027826:	bfcc      	ite	gt
 8027828:	46d0      	movgt	r8, sl
 802782a:	f04f 0801 	movle.w	r8, #1
 802782e:	4490      	add	r8, r2
 8027830:	f04f 0900 	mov.w	r9, #0
 8027834:	4629      	mov	r1, r5
 8027836:	2201      	movs	r2, #1
 8027838:	4630      	mov	r0, r6
 802783a:	9302      	str	r3, [sp, #8]
 802783c:	f000 fcb2 	bl	80281a4 <__lshift>
 8027840:	4621      	mov	r1, r4
 8027842:	4605      	mov	r5, r0
 8027844:	f000 fd1e 	bl	8028284 <__mcmp>
 8027848:	2800      	cmp	r0, #0
 802784a:	dcb1      	bgt.n	80277b0 <_dtoa_r+0x9c0>
 802784c:	d102      	bne.n	8027854 <_dtoa_r+0xa64>
 802784e:	9b02      	ldr	r3, [sp, #8]
 8027850:	07db      	lsls	r3, r3, #31
 8027852:	d4ad      	bmi.n	80277b0 <_dtoa_r+0x9c0>
 8027854:	4643      	mov	r3, r8
 8027856:	4698      	mov	r8, r3
 8027858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802785c:	2a30      	cmp	r2, #48	; 0x30
 802785e:	d0fa      	beq.n	8027856 <_dtoa_r+0xa66>
 8027860:	e6f6      	b.n	8027650 <_dtoa_r+0x860>
 8027862:	9a01      	ldr	r2, [sp, #4]
 8027864:	429a      	cmp	r2, r3
 8027866:	d1a4      	bne.n	80277b2 <_dtoa_r+0x9c2>
 8027868:	f10b 0b01 	add.w	fp, fp, #1
 802786c:	2331      	movs	r3, #49	; 0x31
 802786e:	e778      	b.n	8027762 <_dtoa_r+0x972>
 8027870:	4b14      	ldr	r3, [pc, #80]	; (80278c4 <_dtoa_r+0xad4>)
 8027872:	f7ff bb27 	b.w	8026ec4 <_dtoa_r+0xd4>
 8027876:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027878:	2b00      	cmp	r3, #0
 802787a:	f47f ab03 	bne.w	8026e84 <_dtoa_r+0x94>
 802787e:	4b12      	ldr	r3, [pc, #72]	; (80278c8 <_dtoa_r+0xad8>)
 8027880:	f7ff bb20 	b.w	8026ec4 <_dtoa_r+0xd4>
 8027884:	f1ba 0f00 	cmp.w	sl, #0
 8027888:	dc03      	bgt.n	8027892 <_dtoa_r+0xaa2>
 802788a:	9b06      	ldr	r3, [sp, #24]
 802788c:	2b02      	cmp	r3, #2
 802788e:	f73f aec7 	bgt.w	8027620 <_dtoa_r+0x830>
 8027892:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027896:	4621      	mov	r1, r4
 8027898:	4628      	mov	r0, r5
 802789a:	f7ff fa1b 	bl	8026cd4 <quorem>
 802789e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80278a2:	f808 3b01 	strb.w	r3, [r8], #1
 80278a6:	9a01      	ldr	r2, [sp, #4]
 80278a8:	eba8 0202 	sub.w	r2, r8, r2
 80278ac:	4592      	cmp	sl, r2
 80278ae:	ddb7      	ble.n	8027820 <_dtoa_r+0xa30>
 80278b0:	4629      	mov	r1, r5
 80278b2:	2300      	movs	r3, #0
 80278b4:	220a      	movs	r2, #10
 80278b6:	4630      	mov	r0, r6
 80278b8:	f000 fac4 	bl	8027e44 <__multadd>
 80278bc:	4605      	mov	r5, r0
 80278be:	e7ea      	b.n	8027896 <_dtoa_r+0xaa6>
 80278c0:	08046341 	.word	0x08046341
 80278c4:	080464c1 	.word	0x080464c1
 80278c8:	080462d9 	.word	0x080462d9

080278cc <__errno>:
 80278cc:	4b01      	ldr	r3, [pc, #4]	; (80278d4 <__errno+0x8>)
 80278ce:	6818      	ldr	r0, [r3, #0]
 80278d0:	4770      	bx	lr
 80278d2:	bf00      	nop
 80278d4:	20000490 	.word	0x20000490

080278d8 <__sflush_r>:
 80278d8:	898a      	ldrh	r2, [r1, #12]
 80278da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80278de:	4605      	mov	r5, r0
 80278e0:	0710      	lsls	r0, r2, #28
 80278e2:	460c      	mov	r4, r1
 80278e4:	d458      	bmi.n	8027998 <__sflush_r+0xc0>
 80278e6:	684b      	ldr	r3, [r1, #4]
 80278e8:	2b00      	cmp	r3, #0
 80278ea:	dc05      	bgt.n	80278f8 <__sflush_r+0x20>
 80278ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80278ee:	2b00      	cmp	r3, #0
 80278f0:	dc02      	bgt.n	80278f8 <__sflush_r+0x20>
 80278f2:	2000      	movs	r0, #0
 80278f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80278f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80278fa:	2e00      	cmp	r6, #0
 80278fc:	d0f9      	beq.n	80278f2 <__sflush_r+0x1a>
 80278fe:	2300      	movs	r3, #0
 8027900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027904:	682f      	ldr	r7, [r5, #0]
 8027906:	602b      	str	r3, [r5, #0]
 8027908:	d032      	beq.n	8027970 <__sflush_r+0x98>
 802790a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802790c:	89a3      	ldrh	r3, [r4, #12]
 802790e:	075a      	lsls	r2, r3, #29
 8027910:	d505      	bpl.n	802791e <__sflush_r+0x46>
 8027912:	6863      	ldr	r3, [r4, #4]
 8027914:	1ac0      	subs	r0, r0, r3
 8027916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027918:	b10b      	cbz	r3, 802791e <__sflush_r+0x46>
 802791a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802791c:	1ac0      	subs	r0, r0, r3
 802791e:	2300      	movs	r3, #0
 8027920:	4602      	mov	r2, r0
 8027922:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027924:	6a21      	ldr	r1, [r4, #32]
 8027926:	4628      	mov	r0, r5
 8027928:	47b0      	blx	r6
 802792a:	1c43      	adds	r3, r0, #1
 802792c:	89a3      	ldrh	r3, [r4, #12]
 802792e:	d106      	bne.n	802793e <__sflush_r+0x66>
 8027930:	6829      	ldr	r1, [r5, #0]
 8027932:	291d      	cmp	r1, #29
 8027934:	d82c      	bhi.n	8027990 <__sflush_r+0xb8>
 8027936:	4a2a      	ldr	r2, [pc, #168]	; (80279e0 <__sflush_r+0x108>)
 8027938:	40ca      	lsrs	r2, r1
 802793a:	07d6      	lsls	r6, r2, #31
 802793c:	d528      	bpl.n	8027990 <__sflush_r+0xb8>
 802793e:	2200      	movs	r2, #0
 8027940:	6062      	str	r2, [r4, #4]
 8027942:	04d9      	lsls	r1, r3, #19
 8027944:	6922      	ldr	r2, [r4, #16]
 8027946:	6022      	str	r2, [r4, #0]
 8027948:	d504      	bpl.n	8027954 <__sflush_r+0x7c>
 802794a:	1c42      	adds	r2, r0, #1
 802794c:	d101      	bne.n	8027952 <__sflush_r+0x7a>
 802794e:	682b      	ldr	r3, [r5, #0]
 8027950:	b903      	cbnz	r3, 8027954 <__sflush_r+0x7c>
 8027952:	6560      	str	r0, [r4, #84]	; 0x54
 8027954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027956:	602f      	str	r7, [r5, #0]
 8027958:	2900      	cmp	r1, #0
 802795a:	d0ca      	beq.n	80278f2 <__sflush_r+0x1a>
 802795c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027960:	4299      	cmp	r1, r3
 8027962:	d002      	beq.n	802796a <__sflush_r+0x92>
 8027964:	4628      	mov	r0, r5
 8027966:	f7fd f801 	bl	802496c <_free_r>
 802796a:	2000      	movs	r0, #0
 802796c:	6360      	str	r0, [r4, #52]	; 0x34
 802796e:	e7c1      	b.n	80278f4 <__sflush_r+0x1c>
 8027970:	6a21      	ldr	r1, [r4, #32]
 8027972:	2301      	movs	r3, #1
 8027974:	4628      	mov	r0, r5
 8027976:	47b0      	blx	r6
 8027978:	1c41      	adds	r1, r0, #1
 802797a:	d1c7      	bne.n	802790c <__sflush_r+0x34>
 802797c:	682b      	ldr	r3, [r5, #0]
 802797e:	2b00      	cmp	r3, #0
 8027980:	d0c4      	beq.n	802790c <__sflush_r+0x34>
 8027982:	2b1d      	cmp	r3, #29
 8027984:	d001      	beq.n	802798a <__sflush_r+0xb2>
 8027986:	2b16      	cmp	r3, #22
 8027988:	d101      	bne.n	802798e <__sflush_r+0xb6>
 802798a:	602f      	str	r7, [r5, #0]
 802798c:	e7b1      	b.n	80278f2 <__sflush_r+0x1a>
 802798e:	89a3      	ldrh	r3, [r4, #12]
 8027990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027994:	81a3      	strh	r3, [r4, #12]
 8027996:	e7ad      	b.n	80278f4 <__sflush_r+0x1c>
 8027998:	690f      	ldr	r7, [r1, #16]
 802799a:	2f00      	cmp	r7, #0
 802799c:	d0a9      	beq.n	80278f2 <__sflush_r+0x1a>
 802799e:	0793      	lsls	r3, r2, #30
 80279a0:	680e      	ldr	r6, [r1, #0]
 80279a2:	bf08      	it	eq
 80279a4:	694b      	ldreq	r3, [r1, #20]
 80279a6:	600f      	str	r7, [r1, #0]
 80279a8:	bf18      	it	ne
 80279aa:	2300      	movne	r3, #0
 80279ac:	eba6 0807 	sub.w	r8, r6, r7
 80279b0:	608b      	str	r3, [r1, #8]
 80279b2:	f1b8 0f00 	cmp.w	r8, #0
 80279b6:	dd9c      	ble.n	80278f2 <__sflush_r+0x1a>
 80279b8:	6a21      	ldr	r1, [r4, #32]
 80279ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80279bc:	4643      	mov	r3, r8
 80279be:	463a      	mov	r2, r7
 80279c0:	4628      	mov	r0, r5
 80279c2:	47b0      	blx	r6
 80279c4:	2800      	cmp	r0, #0
 80279c6:	dc06      	bgt.n	80279d6 <__sflush_r+0xfe>
 80279c8:	89a3      	ldrh	r3, [r4, #12]
 80279ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80279ce:	81a3      	strh	r3, [r4, #12]
 80279d0:	f04f 30ff 	mov.w	r0, #4294967295
 80279d4:	e78e      	b.n	80278f4 <__sflush_r+0x1c>
 80279d6:	4407      	add	r7, r0
 80279d8:	eba8 0800 	sub.w	r8, r8, r0
 80279dc:	e7e9      	b.n	80279b2 <__sflush_r+0xda>
 80279de:	bf00      	nop
 80279e0:	20400001 	.word	0x20400001

080279e4 <_fflush_r>:
 80279e4:	b538      	push	{r3, r4, r5, lr}
 80279e6:	690b      	ldr	r3, [r1, #16]
 80279e8:	4605      	mov	r5, r0
 80279ea:	460c      	mov	r4, r1
 80279ec:	b913      	cbnz	r3, 80279f4 <_fflush_r+0x10>
 80279ee:	2500      	movs	r5, #0
 80279f0:	4628      	mov	r0, r5
 80279f2:	bd38      	pop	{r3, r4, r5, pc}
 80279f4:	b118      	cbz	r0, 80279fe <_fflush_r+0x1a>
 80279f6:	6983      	ldr	r3, [r0, #24]
 80279f8:	b90b      	cbnz	r3, 80279fe <_fflush_r+0x1a>
 80279fa:	f7fc fb1b 	bl	8024034 <__sinit>
 80279fe:	4b14      	ldr	r3, [pc, #80]	; (8027a50 <_fflush_r+0x6c>)
 8027a00:	429c      	cmp	r4, r3
 8027a02:	d11b      	bne.n	8027a3c <_fflush_r+0x58>
 8027a04:	686c      	ldr	r4, [r5, #4]
 8027a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027a0a:	2b00      	cmp	r3, #0
 8027a0c:	d0ef      	beq.n	80279ee <_fflush_r+0xa>
 8027a0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027a10:	07d0      	lsls	r0, r2, #31
 8027a12:	d404      	bmi.n	8027a1e <_fflush_r+0x3a>
 8027a14:	0599      	lsls	r1, r3, #22
 8027a16:	d402      	bmi.n	8027a1e <_fflush_r+0x3a>
 8027a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027a1a:	f7fc fce1 	bl	80243e0 <__retarget_lock_acquire_recursive>
 8027a1e:	4628      	mov	r0, r5
 8027a20:	4621      	mov	r1, r4
 8027a22:	f7ff ff59 	bl	80278d8 <__sflush_r>
 8027a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027a28:	07da      	lsls	r2, r3, #31
 8027a2a:	4605      	mov	r5, r0
 8027a2c:	d4e0      	bmi.n	80279f0 <_fflush_r+0xc>
 8027a2e:	89a3      	ldrh	r3, [r4, #12]
 8027a30:	059b      	lsls	r3, r3, #22
 8027a32:	d4dd      	bmi.n	80279f0 <_fflush_r+0xc>
 8027a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027a36:	f7fc fcd5 	bl	80243e4 <__retarget_lock_release_recursive>
 8027a3a:	e7d9      	b.n	80279f0 <_fflush_r+0xc>
 8027a3c:	4b05      	ldr	r3, [pc, #20]	; (8027a54 <_fflush_r+0x70>)
 8027a3e:	429c      	cmp	r4, r3
 8027a40:	d101      	bne.n	8027a46 <_fflush_r+0x62>
 8027a42:	68ac      	ldr	r4, [r5, #8]
 8027a44:	e7df      	b.n	8027a06 <_fflush_r+0x22>
 8027a46:	4b04      	ldr	r3, [pc, #16]	; (8027a58 <_fflush_r+0x74>)
 8027a48:	429c      	cmp	r4, r3
 8027a4a:	bf08      	it	eq
 8027a4c:	68ec      	ldreq	r4, [r5, #12]
 8027a4e:	e7da      	b.n	8027a06 <_fflush_r+0x22>
 8027a50:	08045d24 	.word	0x08045d24
 8027a54:	08045d44 	.word	0x08045d44
 8027a58:	08045d04 	.word	0x08045d04

08027a5c <fiprintf>:
 8027a5c:	b40e      	push	{r1, r2, r3}
 8027a5e:	b503      	push	{r0, r1, lr}
 8027a60:	4601      	mov	r1, r0
 8027a62:	ab03      	add	r3, sp, #12
 8027a64:	4805      	ldr	r0, [pc, #20]	; (8027a7c <fiprintf+0x20>)
 8027a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8027a6a:	6800      	ldr	r0, [r0, #0]
 8027a6c:	9301      	str	r3, [sp, #4]
 8027a6e:	f001 f879 	bl	8028b64 <_vfiprintf_r>
 8027a72:	b002      	add	sp, #8
 8027a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8027a78:	b003      	add	sp, #12
 8027a7a:	4770      	bx	lr
 8027a7c:	20000490 	.word	0x20000490

08027a80 <_findenv_r>:
 8027a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a84:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8027af4 <_findenv_r+0x74>
 8027a88:	4607      	mov	r7, r0
 8027a8a:	4689      	mov	r9, r1
 8027a8c:	4616      	mov	r6, r2
 8027a8e:	f001 fbe9 	bl	8029264 <__env_lock>
 8027a92:	f8da 4000 	ldr.w	r4, [sl]
 8027a96:	b134      	cbz	r4, 8027aa6 <_findenv_r+0x26>
 8027a98:	464b      	mov	r3, r9
 8027a9a:	4698      	mov	r8, r3
 8027a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027aa0:	b13a      	cbz	r2, 8027ab2 <_findenv_r+0x32>
 8027aa2:	2a3d      	cmp	r2, #61	; 0x3d
 8027aa4:	d1f9      	bne.n	8027a9a <_findenv_r+0x1a>
 8027aa6:	4638      	mov	r0, r7
 8027aa8:	f001 fbe2 	bl	8029270 <__env_unlock>
 8027aac:	2000      	movs	r0, #0
 8027aae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ab2:	eba8 0809 	sub.w	r8, r8, r9
 8027ab6:	46a3      	mov	fp, r4
 8027ab8:	f854 0b04 	ldr.w	r0, [r4], #4
 8027abc:	2800      	cmp	r0, #0
 8027abe:	d0f2      	beq.n	8027aa6 <_findenv_r+0x26>
 8027ac0:	4642      	mov	r2, r8
 8027ac2:	4649      	mov	r1, r9
 8027ac4:	f7fe fc4a 	bl	802635c <strncmp>
 8027ac8:	2800      	cmp	r0, #0
 8027aca:	d1f4      	bne.n	8027ab6 <_findenv_r+0x36>
 8027acc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8027ad0:	eb03 0508 	add.w	r5, r3, r8
 8027ad4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8027ad8:	2b3d      	cmp	r3, #61	; 0x3d
 8027ada:	d1ec      	bne.n	8027ab6 <_findenv_r+0x36>
 8027adc:	f8da 3000 	ldr.w	r3, [sl]
 8027ae0:	ebab 0303 	sub.w	r3, fp, r3
 8027ae4:	109b      	asrs	r3, r3, #2
 8027ae6:	4638      	mov	r0, r7
 8027ae8:	6033      	str	r3, [r6, #0]
 8027aea:	f001 fbc1 	bl	8029270 <__env_unlock>
 8027aee:	1c68      	adds	r0, r5, #1
 8027af0:	e7dd      	b.n	8027aae <_findenv_r+0x2e>
 8027af2:	bf00      	nop
 8027af4:	20000280 	.word	0x20000280

08027af8 <_getenv_r>:
 8027af8:	b507      	push	{r0, r1, r2, lr}
 8027afa:	aa01      	add	r2, sp, #4
 8027afc:	f7ff ffc0 	bl	8027a80 <_findenv_r>
 8027b00:	b003      	add	sp, #12
 8027b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8027b06:	Address 0x0000000008027b06 is out of bounds.


08027b08 <__gettzinfo>:
 8027b08:	4800      	ldr	r0, [pc, #0]	; (8027b0c <__gettzinfo+0x4>)
 8027b0a:	4770      	bx	lr
 8027b0c:	20000500 	.word	0x20000500

08027b10 <gmtime_r>:
 8027b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027b14:	e9d0 6700 	ldrd	r6, r7, [r0]
 8027b18:	460c      	mov	r4, r1
 8027b1a:	4a4f      	ldr	r2, [pc, #316]	; (8027c58 <gmtime_r+0x148>)
 8027b1c:	2300      	movs	r3, #0
 8027b1e:	4630      	mov	r0, r6
 8027b20:	4639      	mov	r1, r7
 8027b22:	f7d8 fbf5 	bl	8000310 <__aeabi_ldivmod>
 8027b26:	4639      	mov	r1, r7
 8027b28:	4605      	mov	r5, r0
 8027b2a:	4a4b      	ldr	r2, [pc, #300]	; (8027c58 <gmtime_r+0x148>)
 8027b2c:	4630      	mov	r0, r6
 8027b2e:	2300      	movs	r3, #0
 8027b30:	f7d8 fbee 	bl	8000310 <__aeabi_ldivmod>
 8027b34:	2a00      	cmp	r2, #0
 8027b36:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8027b3a:	bfb7      	itett	lt
 8027b3c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8027b40:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8027b44:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8027b48:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8027b4c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8027b50:	fbb2 f1f0 	udiv	r1, r2, r0
 8027b54:	fb00 2211 	mls	r2, r0, r1, r2
 8027b58:	203c      	movs	r0, #60	; 0x3c
 8027b5a:	60a1      	str	r1, [r4, #8]
 8027b5c:	fbb2 f1f0 	udiv	r1, r2, r0
 8027b60:	fb00 2211 	mls	r2, r0, r1, r2
 8027b64:	6061      	str	r1, [r4, #4]
 8027b66:	6022      	str	r2, [r4, #0]
 8027b68:	2107      	movs	r1, #7
 8027b6a:	1cda      	adds	r2, r3, #3
 8027b6c:	fb92 f1f1 	sdiv	r1, r2, r1
 8027b70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8027b74:	1a52      	subs	r2, r2, r1
 8027b76:	bf48      	it	mi
 8027b78:	3207      	addmi	r2, #7
 8027b7a:	4d38      	ldr	r5, [pc, #224]	; (8027c5c <gmtime_r+0x14c>)
 8027b7c:	4838      	ldr	r0, [pc, #224]	; (8027c60 <gmtime_r+0x150>)
 8027b7e:	61a2      	str	r2, [r4, #24]
 8027b80:	2b00      	cmp	r3, #0
 8027b82:	bfb7      	itett	lt
 8027b84:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8027b88:	fb93 f5f5 	sdivge	r5, r3, r5
 8027b8c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8027b90:	fb92 f5f5 	sdivlt	r5, r2, r5
 8027b94:	fb00 3005 	mla	r0, r0, r5, r3
 8027b98:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8027b9c:	fbb0 f2f2 	udiv	r2, r0, r2
 8027ba0:	4402      	add	r2, r0
 8027ba2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8027ba6:	fbb0 f1f3 	udiv	r1, r0, r3
 8027baa:	1a52      	subs	r2, r2, r1
 8027bac:	f240 1c6d 	movw	ip, #365	; 0x16d
 8027bb0:	492c      	ldr	r1, [pc, #176]	; (8027c64 <gmtime_r+0x154>)
 8027bb2:	fbb0 f1f1 	udiv	r1, r0, r1
 8027bb6:	2764      	movs	r7, #100	; 0x64
 8027bb8:	1a52      	subs	r2, r2, r1
 8027bba:	fbb2 f1fc 	udiv	r1, r2, ip
 8027bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8027bc2:	fbb1 f6f7 	udiv	r6, r1, r7
 8027bc6:	1af3      	subs	r3, r6, r3
 8027bc8:	4403      	add	r3, r0
 8027bca:	fb0c 3311 	mls	r3, ip, r1, r3
 8027bce:	2299      	movs	r2, #153	; 0x99
 8027bd0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8027bd4:	f10e 0e02 	add.w	lr, lr, #2
 8027bd8:	f103 0c01 	add.w	ip, r3, #1
 8027bdc:	fbbe f0f2 	udiv	r0, lr, r2
 8027be0:	4342      	muls	r2, r0
 8027be2:	3202      	adds	r2, #2
 8027be4:	f04f 0805 	mov.w	r8, #5
 8027be8:	fbb2 f2f8 	udiv	r2, r2, r8
 8027bec:	ebac 0c02 	sub.w	ip, ip, r2
 8027bf0:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8027bf4:	4596      	cmp	lr, r2
 8027bf6:	bf94      	ite	ls
 8027bf8:	2202      	movls	r2, #2
 8027bfa:	f06f 0209 	mvnhi.w	r2, #9
 8027bfe:	4410      	add	r0, r2
 8027c00:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8027c04:	fb02 1505 	mla	r5, r2, r5, r1
 8027c08:	2801      	cmp	r0, #1
 8027c0a:	bf98      	it	ls
 8027c0c:	3501      	addls	r5, #1
 8027c0e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8027c12:	d30d      	bcc.n	8027c30 <gmtime_r+0x120>
 8027c14:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8027c18:	61e3      	str	r3, [r4, #28]
 8027c1a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8027c1e:	2300      	movs	r3, #0
 8027c20:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8027c24:	f8c4 c00c 	str.w	ip, [r4, #12]
 8027c28:	6223      	str	r3, [r4, #32]
 8027c2a:	4620      	mov	r0, r4
 8027c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027c30:	078a      	lsls	r2, r1, #30
 8027c32:	d102      	bne.n	8027c3a <gmtime_r+0x12a>
 8027c34:	fb07 1616 	mls	r6, r7, r6, r1
 8027c38:	b95e      	cbnz	r6, 8027c52 <gmtime_r+0x142>
 8027c3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8027c3e:	fbb1 f6f2 	udiv	r6, r1, r2
 8027c42:	fb02 1216 	mls	r2, r2, r6, r1
 8027c46:	fab2 f282 	clz	r2, r2
 8027c4a:	0952      	lsrs	r2, r2, #5
 8027c4c:	333b      	adds	r3, #59	; 0x3b
 8027c4e:	4413      	add	r3, r2
 8027c50:	e7e2      	b.n	8027c18 <gmtime_r+0x108>
 8027c52:	2201      	movs	r2, #1
 8027c54:	e7fa      	b.n	8027c4c <gmtime_r+0x13c>
 8027c56:	bf00      	nop
 8027c58:	00015180 	.word	0x00015180
 8027c5c:	00023ab1 	.word	0x00023ab1
 8027c60:	fffdc54f 	.word	0xfffdc54f
 8027c64:	00023ab0 	.word	0x00023ab0

08027c68 <labs>:
 8027c68:	2800      	cmp	r0, #0
 8027c6a:	bfb8      	it	lt
 8027c6c:	4240      	neglt	r0, r0
 8027c6e:	4770      	bx	lr

08027c70 <_localeconv_r>:
 8027c70:	4800      	ldr	r0, [pc, #0]	; (8027c74 <_localeconv_r+0x4>)
 8027c72:	4770      	bx	lr
 8027c74:	20000648 	.word	0x20000648

08027c78 <_lseek_r>:
 8027c78:	b538      	push	{r3, r4, r5, lr}
 8027c7a:	4d07      	ldr	r5, [pc, #28]	; (8027c98 <_lseek_r+0x20>)
 8027c7c:	4604      	mov	r4, r0
 8027c7e:	4608      	mov	r0, r1
 8027c80:	4611      	mov	r1, r2
 8027c82:	2200      	movs	r2, #0
 8027c84:	602a      	str	r2, [r5, #0]
 8027c86:	461a      	mov	r2, r3
 8027c88:	f7df fb80 	bl	800738c <_lseek>
 8027c8c:	1c43      	adds	r3, r0, #1
 8027c8e:	d102      	bne.n	8027c96 <_lseek_r+0x1e>
 8027c90:	682b      	ldr	r3, [r5, #0]
 8027c92:	b103      	cbz	r3, 8027c96 <_lseek_r+0x1e>
 8027c94:	6023      	str	r3, [r4, #0]
 8027c96:	bd38      	pop	{r3, r4, r5, pc}
 8027c98:	2002fd5c 	.word	0x2002fd5c

08027c9c <__swhatbuf_r>:
 8027c9c:	b570      	push	{r4, r5, r6, lr}
 8027c9e:	460e      	mov	r6, r1
 8027ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027ca4:	2900      	cmp	r1, #0
 8027ca6:	b096      	sub	sp, #88	; 0x58
 8027ca8:	4614      	mov	r4, r2
 8027caa:	461d      	mov	r5, r3
 8027cac:	da08      	bge.n	8027cc0 <__swhatbuf_r+0x24>
 8027cae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027cb2:	2200      	movs	r2, #0
 8027cb4:	602a      	str	r2, [r5, #0]
 8027cb6:	061a      	lsls	r2, r3, #24
 8027cb8:	d410      	bmi.n	8027cdc <__swhatbuf_r+0x40>
 8027cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027cbe:	e00e      	b.n	8027cde <__swhatbuf_r+0x42>
 8027cc0:	466a      	mov	r2, sp
 8027cc2:	f001 fadb 	bl	802927c <_fstat_r>
 8027cc6:	2800      	cmp	r0, #0
 8027cc8:	dbf1      	blt.n	8027cae <__swhatbuf_r+0x12>
 8027cca:	9a01      	ldr	r2, [sp, #4]
 8027ccc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027cd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027cd4:	425a      	negs	r2, r3
 8027cd6:	415a      	adcs	r2, r3
 8027cd8:	602a      	str	r2, [r5, #0]
 8027cda:	e7ee      	b.n	8027cba <__swhatbuf_r+0x1e>
 8027cdc:	2340      	movs	r3, #64	; 0x40
 8027cde:	2000      	movs	r0, #0
 8027ce0:	6023      	str	r3, [r4, #0]
 8027ce2:	b016      	add	sp, #88	; 0x58
 8027ce4:	bd70      	pop	{r4, r5, r6, pc}
 8027ce6:	Address 0x0000000008027ce6 is out of bounds.


08027ce8 <__smakebuf_r>:
 8027ce8:	898b      	ldrh	r3, [r1, #12]
 8027cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027cec:	079d      	lsls	r5, r3, #30
 8027cee:	4606      	mov	r6, r0
 8027cf0:	460c      	mov	r4, r1
 8027cf2:	d507      	bpl.n	8027d04 <__smakebuf_r+0x1c>
 8027cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027cf8:	6023      	str	r3, [r4, #0]
 8027cfa:	6123      	str	r3, [r4, #16]
 8027cfc:	2301      	movs	r3, #1
 8027cfe:	6163      	str	r3, [r4, #20]
 8027d00:	b002      	add	sp, #8
 8027d02:	bd70      	pop	{r4, r5, r6, pc}
 8027d04:	ab01      	add	r3, sp, #4
 8027d06:	466a      	mov	r2, sp
 8027d08:	f7ff ffc8 	bl	8027c9c <__swhatbuf_r>
 8027d0c:	9900      	ldr	r1, [sp, #0]
 8027d0e:	4605      	mov	r5, r0
 8027d10:	4630      	mov	r0, r6
 8027d12:	f7fc fe97 	bl	8024a44 <_malloc_r>
 8027d16:	b948      	cbnz	r0, 8027d2c <__smakebuf_r+0x44>
 8027d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027d1c:	059a      	lsls	r2, r3, #22
 8027d1e:	d4ef      	bmi.n	8027d00 <__smakebuf_r+0x18>
 8027d20:	f023 0303 	bic.w	r3, r3, #3
 8027d24:	f043 0302 	orr.w	r3, r3, #2
 8027d28:	81a3      	strh	r3, [r4, #12]
 8027d2a:	e7e3      	b.n	8027cf4 <__smakebuf_r+0xc>
 8027d2c:	4b0d      	ldr	r3, [pc, #52]	; (8027d64 <__smakebuf_r+0x7c>)
 8027d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8027d30:	89a3      	ldrh	r3, [r4, #12]
 8027d32:	6020      	str	r0, [r4, #0]
 8027d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027d38:	81a3      	strh	r3, [r4, #12]
 8027d3a:	9b00      	ldr	r3, [sp, #0]
 8027d3c:	6163      	str	r3, [r4, #20]
 8027d3e:	9b01      	ldr	r3, [sp, #4]
 8027d40:	6120      	str	r0, [r4, #16]
 8027d42:	b15b      	cbz	r3, 8027d5c <__smakebuf_r+0x74>
 8027d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027d48:	4630      	mov	r0, r6
 8027d4a:	f001 faa9 	bl	80292a0 <_isatty_r>
 8027d4e:	b128      	cbz	r0, 8027d5c <__smakebuf_r+0x74>
 8027d50:	89a3      	ldrh	r3, [r4, #12]
 8027d52:	f023 0303 	bic.w	r3, r3, #3
 8027d56:	f043 0301 	orr.w	r3, r3, #1
 8027d5a:	81a3      	strh	r3, [r4, #12]
 8027d5c:	89a0      	ldrh	r0, [r4, #12]
 8027d5e:	4305      	orrs	r5, r0
 8027d60:	81a5      	strh	r5, [r4, #12]
 8027d62:	e7cd      	b.n	8027d00 <__smakebuf_r+0x18>
 8027d64:	08023fcd 	.word	0x08023fcd

08027d68 <__malloc_lock>:
 8027d68:	4801      	ldr	r0, [pc, #4]	; (8027d70 <__malloc_lock+0x8>)
 8027d6a:	f7fc bb39 	b.w	80243e0 <__retarget_lock_acquire_recursive>
 8027d6e:	bf00      	nop
 8027d70:	2002fd4d 	.word	0x2002fd4d

08027d74 <__malloc_unlock>:
 8027d74:	4801      	ldr	r0, [pc, #4]	; (8027d7c <__malloc_unlock+0x8>)
 8027d76:	f7fc bb35 	b.w	80243e4 <__retarget_lock_release_recursive>
 8027d7a:	bf00      	nop
 8027d7c:	2002fd4d 	.word	0x2002fd4d

08027d80 <_Balloc>:
 8027d80:	b570      	push	{r4, r5, r6, lr}
 8027d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027d84:	4604      	mov	r4, r0
 8027d86:	460d      	mov	r5, r1
 8027d88:	b976      	cbnz	r6, 8027da8 <_Balloc+0x28>
 8027d8a:	2010      	movs	r0, #16
 8027d8c:	f7fc fb2c 	bl	80243e8 <malloc>
 8027d90:	4602      	mov	r2, r0
 8027d92:	6260      	str	r0, [r4, #36]	; 0x24
 8027d94:	b920      	cbnz	r0, 8027da0 <_Balloc+0x20>
 8027d96:	4b18      	ldr	r3, [pc, #96]	; (8027df8 <_Balloc+0x78>)
 8027d98:	4818      	ldr	r0, [pc, #96]	; (8027dfc <_Balloc+0x7c>)
 8027d9a:	2166      	movs	r1, #102	; 0x66
 8027d9c:	f7fe ff58 	bl	8026c50 <__assert_func>
 8027da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027da4:	6006      	str	r6, [r0, #0]
 8027da6:	60c6      	str	r6, [r0, #12]
 8027da8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8027daa:	68f3      	ldr	r3, [r6, #12]
 8027dac:	b183      	cbz	r3, 8027dd0 <_Balloc+0x50>
 8027dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027db0:	68db      	ldr	r3, [r3, #12]
 8027db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8027db6:	b9b8      	cbnz	r0, 8027de8 <_Balloc+0x68>
 8027db8:	2101      	movs	r1, #1
 8027dba:	fa01 f605 	lsl.w	r6, r1, r5
 8027dbe:	1d72      	adds	r2, r6, #5
 8027dc0:	0092      	lsls	r2, r2, #2
 8027dc2:	4620      	mov	r0, r4
 8027dc4:	f000 fb60 	bl	8028488 <_calloc_r>
 8027dc8:	b160      	cbz	r0, 8027de4 <_Balloc+0x64>
 8027dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8027dce:	e00e      	b.n	8027dee <_Balloc+0x6e>
 8027dd0:	2221      	movs	r2, #33	; 0x21
 8027dd2:	2104      	movs	r1, #4
 8027dd4:	4620      	mov	r0, r4
 8027dd6:	f000 fb57 	bl	8028488 <_calloc_r>
 8027dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027ddc:	60f0      	str	r0, [r6, #12]
 8027dde:	68db      	ldr	r3, [r3, #12]
 8027de0:	2b00      	cmp	r3, #0
 8027de2:	d1e4      	bne.n	8027dae <_Balloc+0x2e>
 8027de4:	2000      	movs	r0, #0
 8027de6:	bd70      	pop	{r4, r5, r6, pc}
 8027de8:	6802      	ldr	r2, [r0, #0]
 8027dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8027dee:	2300      	movs	r3, #0
 8027df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027df4:	e7f7      	b.n	8027de6 <_Balloc+0x66>
 8027df6:	bf00      	nop
 8027df8:	08045d68 	.word	0x08045d68
 8027dfc:	08046352 	.word	0x08046352

08027e00 <_Bfree>:
 8027e00:	b570      	push	{r4, r5, r6, lr}
 8027e02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027e04:	4605      	mov	r5, r0
 8027e06:	460c      	mov	r4, r1
 8027e08:	b976      	cbnz	r6, 8027e28 <_Bfree+0x28>
 8027e0a:	2010      	movs	r0, #16
 8027e0c:	f7fc faec 	bl	80243e8 <malloc>
 8027e10:	4602      	mov	r2, r0
 8027e12:	6268      	str	r0, [r5, #36]	; 0x24
 8027e14:	b920      	cbnz	r0, 8027e20 <_Bfree+0x20>
 8027e16:	4b09      	ldr	r3, [pc, #36]	; (8027e3c <_Bfree+0x3c>)
 8027e18:	4809      	ldr	r0, [pc, #36]	; (8027e40 <_Bfree+0x40>)
 8027e1a:	218a      	movs	r1, #138	; 0x8a
 8027e1c:	f7fe ff18 	bl	8026c50 <__assert_func>
 8027e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027e24:	6006      	str	r6, [r0, #0]
 8027e26:	60c6      	str	r6, [r0, #12]
 8027e28:	b13c      	cbz	r4, 8027e3a <_Bfree+0x3a>
 8027e2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8027e2c:	6862      	ldr	r2, [r4, #4]
 8027e2e:	68db      	ldr	r3, [r3, #12]
 8027e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027e34:	6021      	str	r1, [r4, #0]
 8027e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8027e3a:	bd70      	pop	{r4, r5, r6, pc}
 8027e3c:	08045d68 	.word	0x08045d68
 8027e40:	08046352 	.word	0x08046352

08027e44 <__multadd>:
 8027e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027e48:	690d      	ldr	r5, [r1, #16]
 8027e4a:	4607      	mov	r7, r0
 8027e4c:	460c      	mov	r4, r1
 8027e4e:	461e      	mov	r6, r3
 8027e50:	f101 0c14 	add.w	ip, r1, #20
 8027e54:	2000      	movs	r0, #0
 8027e56:	f8dc 3000 	ldr.w	r3, [ip]
 8027e5a:	b299      	uxth	r1, r3
 8027e5c:	fb02 6101 	mla	r1, r2, r1, r6
 8027e60:	0c1e      	lsrs	r6, r3, #16
 8027e62:	0c0b      	lsrs	r3, r1, #16
 8027e64:	fb02 3306 	mla	r3, r2, r6, r3
 8027e68:	b289      	uxth	r1, r1
 8027e6a:	3001      	adds	r0, #1
 8027e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027e70:	4285      	cmp	r5, r0
 8027e72:	f84c 1b04 	str.w	r1, [ip], #4
 8027e76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8027e7a:	dcec      	bgt.n	8027e56 <__multadd+0x12>
 8027e7c:	b30e      	cbz	r6, 8027ec2 <__multadd+0x7e>
 8027e7e:	68a3      	ldr	r3, [r4, #8]
 8027e80:	42ab      	cmp	r3, r5
 8027e82:	dc19      	bgt.n	8027eb8 <__multadd+0x74>
 8027e84:	6861      	ldr	r1, [r4, #4]
 8027e86:	4638      	mov	r0, r7
 8027e88:	3101      	adds	r1, #1
 8027e8a:	f7ff ff79 	bl	8027d80 <_Balloc>
 8027e8e:	4680      	mov	r8, r0
 8027e90:	b928      	cbnz	r0, 8027e9e <__multadd+0x5a>
 8027e92:	4602      	mov	r2, r0
 8027e94:	4b0c      	ldr	r3, [pc, #48]	; (8027ec8 <__multadd+0x84>)
 8027e96:	480d      	ldr	r0, [pc, #52]	; (8027ecc <__multadd+0x88>)
 8027e98:	21b5      	movs	r1, #181	; 0xb5
 8027e9a:	f7fe fed9 	bl	8026c50 <__assert_func>
 8027e9e:	6922      	ldr	r2, [r4, #16]
 8027ea0:	3202      	adds	r2, #2
 8027ea2:	f104 010c 	add.w	r1, r4, #12
 8027ea6:	0092      	lsls	r2, r2, #2
 8027ea8:	300c      	adds	r0, #12
 8027eaa:	f7fc fabd 	bl	8024428 <memcpy>
 8027eae:	4621      	mov	r1, r4
 8027eb0:	4638      	mov	r0, r7
 8027eb2:	f7ff ffa5 	bl	8027e00 <_Bfree>
 8027eb6:	4644      	mov	r4, r8
 8027eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027ebc:	3501      	adds	r5, #1
 8027ebe:	615e      	str	r6, [r3, #20]
 8027ec0:	6125      	str	r5, [r4, #16]
 8027ec2:	4620      	mov	r0, r4
 8027ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027ec8:	08046341 	.word	0x08046341
 8027ecc:	08046352 	.word	0x08046352

08027ed0 <__hi0bits>:
 8027ed0:	0c03      	lsrs	r3, r0, #16
 8027ed2:	041b      	lsls	r3, r3, #16
 8027ed4:	b9d3      	cbnz	r3, 8027f0c <__hi0bits+0x3c>
 8027ed6:	0400      	lsls	r0, r0, #16
 8027ed8:	2310      	movs	r3, #16
 8027eda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8027ede:	bf04      	itt	eq
 8027ee0:	0200      	lsleq	r0, r0, #8
 8027ee2:	3308      	addeq	r3, #8
 8027ee4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8027ee8:	bf04      	itt	eq
 8027eea:	0100      	lsleq	r0, r0, #4
 8027eec:	3304      	addeq	r3, #4
 8027eee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8027ef2:	bf04      	itt	eq
 8027ef4:	0080      	lsleq	r0, r0, #2
 8027ef6:	3302      	addeq	r3, #2
 8027ef8:	2800      	cmp	r0, #0
 8027efa:	db05      	blt.n	8027f08 <__hi0bits+0x38>
 8027efc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8027f00:	f103 0301 	add.w	r3, r3, #1
 8027f04:	bf08      	it	eq
 8027f06:	2320      	moveq	r3, #32
 8027f08:	4618      	mov	r0, r3
 8027f0a:	4770      	bx	lr
 8027f0c:	2300      	movs	r3, #0
 8027f0e:	e7e4      	b.n	8027eda <__hi0bits+0xa>

08027f10 <__lo0bits>:
 8027f10:	6803      	ldr	r3, [r0, #0]
 8027f12:	f013 0207 	ands.w	r2, r3, #7
 8027f16:	4601      	mov	r1, r0
 8027f18:	d00b      	beq.n	8027f32 <__lo0bits+0x22>
 8027f1a:	07da      	lsls	r2, r3, #31
 8027f1c:	d423      	bmi.n	8027f66 <__lo0bits+0x56>
 8027f1e:	0798      	lsls	r0, r3, #30
 8027f20:	bf49      	itett	mi
 8027f22:	085b      	lsrmi	r3, r3, #1
 8027f24:	089b      	lsrpl	r3, r3, #2
 8027f26:	2001      	movmi	r0, #1
 8027f28:	600b      	strmi	r3, [r1, #0]
 8027f2a:	bf5c      	itt	pl
 8027f2c:	600b      	strpl	r3, [r1, #0]
 8027f2e:	2002      	movpl	r0, #2
 8027f30:	4770      	bx	lr
 8027f32:	b298      	uxth	r0, r3
 8027f34:	b9a8      	cbnz	r0, 8027f62 <__lo0bits+0x52>
 8027f36:	0c1b      	lsrs	r3, r3, #16
 8027f38:	2010      	movs	r0, #16
 8027f3a:	b2da      	uxtb	r2, r3
 8027f3c:	b90a      	cbnz	r2, 8027f42 <__lo0bits+0x32>
 8027f3e:	3008      	adds	r0, #8
 8027f40:	0a1b      	lsrs	r3, r3, #8
 8027f42:	071a      	lsls	r2, r3, #28
 8027f44:	bf04      	itt	eq
 8027f46:	091b      	lsreq	r3, r3, #4
 8027f48:	3004      	addeq	r0, #4
 8027f4a:	079a      	lsls	r2, r3, #30
 8027f4c:	bf04      	itt	eq
 8027f4e:	089b      	lsreq	r3, r3, #2
 8027f50:	3002      	addeq	r0, #2
 8027f52:	07da      	lsls	r2, r3, #31
 8027f54:	d403      	bmi.n	8027f5e <__lo0bits+0x4e>
 8027f56:	085b      	lsrs	r3, r3, #1
 8027f58:	f100 0001 	add.w	r0, r0, #1
 8027f5c:	d005      	beq.n	8027f6a <__lo0bits+0x5a>
 8027f5e:	600b      	str	r3, [r1, #0]
 8027f60:	4770      	bx	lr
 8027f62:	4610      	mov	r0, r2
 8027f64:	e7e9      	b.n	8027f3a <__lo0bits+0x2a>
 8027f66:	2000      	movs	r0, #0
 8027f68:	4770      	bx	lr
 8027f6a:	2020      	movs	r0, #32
 8027f6c:	4770      	bx	lr
 8027f6e:	Address 0x0000000008027f6e is out of bounds.


08027f70 <__i2b>:
 8027f70:	b510      	push	{r4, lr}
 8027f72:	460c      	mov	r4, r1
 8027f74:	2101      	movs	r1, #1
 8027f76:	f7ff ff03 	bl	8027d80 <_Balloc>
 8027f7a:	4602      	mov	r2, r0
 8027f7c:	b928      	cbnz	r0, 8027f8a <__i2b+0x1a>
 8027f7e:	4b05      	ldr	r3, [pc, #20]	; (8027f94 <__i2b+0x24>)
 8027f80:	4805      	ldr	r0, [pc, #20]	; (8027f98 <__i2b+0x28>)
 8027f82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8027f86:	f7fe fe63 	bl	8026c50 <__assert_func>
 8027f8a:	2301      	movs	r3, #1
 8027f8c:	6144      	str	r4, [r0, #20]
 8027f8e:	6103      	str	r3, [r0, #16]
 8027f90:	bd10      	pop	{r4, pc}
 8027f92:	bf00      	nop
 8027f94:	08046341 	.word	0x08046341
 8027f98:	08046352 	.word	0x08046352

08027f9c <__multiply>:
 8027f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fa0:	4691      	mov	r9, r2
 8027fa2:	690a      	ldr	r2, [r1, #16]
 8027fa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027fa8:	429a      	cmp	r2, r3
 8027faa:	bfb8      	it	lt
 8027fac:	460b      	movlt	r3, r1
 8027fae:	460c      	mov	r4, r1
 8027fb0:	bfbc      	itt	lt
 8027fb2:	464c      	movlt	r4, r9
 8027fb4:	4699      	movlt	r9, r3
 8027fb6:	6927      	ldr	r7, [r4, #16]
 8027fb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027fbc:	68a3      	ldr	r3, [r4, #8]
 8027fbe:	6861      	ldr	r1, [r4, #4]
 8027fc0:	eb07 060a 	add.w	r6, r7, sl
 8027fc4:	42b3      	cmp	r3, r6
 8027fc6:	b085      	sub	sp, #20
 8027fc8:	bfb8      	it	lt
 8027fca:	3101      	addlt	r1, #1
 8027fcc:	f7ff fed8 	bl	8027d80 <_Balloc>
 8027fd0:	b930      	cbnz	r0, 8027fe0 <__multiply+0x44>
 8027fd2:	4602      	mov	r2, r0
 8027fd4:	4b44      	ldr	r3, [pc, #272]	; (80280e8 <__multiply+0x14c>)
 8027fd6:	4845      	ldr	r0, [pc, #276]	; (80280ec <__multiply+0x150>)
 8027fd8:	f240 115d 	movw	r1, #349	; 0x15d
 8027fdc:	f7fe fe38 	bl	8026c50 <__assert_func>
 8027fe0:	f100 0514 	add.w	r5, r0, #20
 8027fe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027fe8:	462b      	mov	r3, r5
 8027fea:	2200      	movs	r2, #0
 8027fec:	4543      	cmp	r3, r8
 8027fee:	d321      	bcc.n	8028034 <__multiply+0x98>
 8027ff0:	f104 0314 	add.w	r3, r4, #20
 8027ff4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027ff8:	f109 0314 	add.w	r3, r9, #20
 8027ffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8028000:	9202      	str	r2, [sp, #8]
 8028002:	1b3a      	subs	r2, r7, r4
 8028004:	3a15      	subs	r2, #21
 8028006:	f022 0203 	bic.w	r2, r2, #3
 802800a:	3204      	adds	r2, #4
 802800c:	f104 0115 	add.w	r1, r4, #21
 8028010:	428f      	cmp	r7, r1
 8028012:	bf38      	it	cc
 8028014:	2204      	movcc	r2, #4
 8028016:	9201      	str	r2, [sp, #4]
 8028018:	9a02      	ldr	r2, [sp, #8]
 802801a:	9303      	str	r3, [sp, #12]
 802801c:	429a      	cmp	r2, r3
 802801e:	d80c      	bhi.n	802803a <__multiply+0x9e>
 8028020:	2e00      	cmp	r6, #0
 8028022:	dd03      	ble.n	802802c <__multiply+0x90>
 8028024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8028028:	2b00      	cmp	r3, #0
 802802a:	d05a      	beq.n	80280e2 <__multiply+0x146>
 802802c:	6106      	str	r6, [r0, #16]
 802802e:	b005      	add	sp, #20
 8028030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028034:	f843 2b04 	str.w	r2, [r3], #4
 8028038:	e7d8      	b.n	8027fec <__multiply+0x50>
 802803a:	f8b3 a000 	ldrh.w	sl, [r3]
 802803e:	f1ba 0f00 	cmp.w	sl, #0
 8028042:	d024      	beq.n	802808e <__multiply+0xf2>
 8028044:	f104 0e14 	add.w	lr, r4, #20
 8028048:	46a9      	mov	r9, r5
 802804a:	f04f 0c00 	mov.w	ip, #0
 802804e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8028052:	f8d9 1000 	ldr.w	r1, [r9]
 8028056:	fa1f fb82 	uxth.w	fp, r2
 802805a:	b289      	uxth	r1, r1
 802805c:	fb0a 110b 	mla	r1, sl, fp, r1
 8028060:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8028064:	f8d9 2000 	ldr.w	r2, [r9]
 8028068:	4461      	add	r1, ip
 802806a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802806e:	fb0a c20b 	mla	r2, sl, fp, ip
 8028072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8028076:	b289      	uxth	r1, r1
 8028078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802807c:	4577      	cmp	r7, lr
 802807e:	f849 1b04 	str.w	r1, [r9], #4
 8028082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8028086:	d8e2      	bhi.n	802804e <__multiply+0xb2>
 8028088:	9a01      	ldr	r2, [sp, #4]
 802808a:	f845 c002 	str.w	ip, [r5, r2]
 802808e:	9a03      	ldr	r2, [sp, #12]
 8028090:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8028094:	3304      	adds	r3, #4
 8028096:	f1b9 0f00 	cmp.w	r9, #0
 802809a:	d020      	beq.n	80280de <__multiply+0x142>
 802809c:	6829      	ldr	r1, [r5, #0]
 802809e:	f104 0c14 	add.w	ip, r4, #20
 80280a2:	46ae      	mov	lr, r5
 80280a4:	f04f 0a00 	mov.w	sl, #0
 80280a8:	f8bc b000 	ldrh.w	fp, [ip]
 80280ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80280b0:	fb09 220b 	mla	r2, r9, fp, r2
 80280b4:	4492      	add	sl, r2
 80280b6:	b289      	uxth	r1, r1
 80280b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80280bc:	f84e 1b04 	str.w	r1, [lr], #4
 80280c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80280c4:	f8be 1000 	ldrh.w	r1, [lr]
 80280c8:	0c12      	lsrs	r2, r2, #16
 80280ca:	fb09 1102 	mla	r1, r9, r2, r1
 80280ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80280d2:	4567      	cmp	r7, ip
 80280d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80280d8:	d8e6      	bhi.n	80280a8 <__multiply+0x10c>
 80280da:	9a01      	ldr	r2, [sp, #4]
 80280dc:	50a9      	str	r1, [r5, r2]
 80280de:	3504      	adds	r5, #4
 80280e0:	e79a      	b.n	8028018 <__multiply+0x7c>
 80280e2:	3e01      	subs	r6, #1
 80280e4:	e79c      	b.n	8028020 <__multiply+0x84>
 80280e6:	bf00      	nop
 80280e8:	08046341 	.word	0x08046341
 80280ec:	08046352 	.word	0x08046352

080280f0 <__pow5mult>:
 80280f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80280f4:	4615      	mov	r5, r2
 80280f6:	f012 0203 	ands.w	r2, r2, #3
 80280fa:	4606      	mov	r6, r0
 80280fc:	460f      	mov	r7, r1
 80280fe:	d007      	beq.n	8028110 <__pow5mult+0x20>
 8028100:	4c25      	ldr	r4, [pc, #148]	; (8028198 <__pow5mult+0xa8>)
 8028102:	3a01      	subs	r2, #1
 8028104:	2300      	movs	r3, #0
 8028106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802810a:	f7ff fe9b 	bl	8027e44 <__multadd>
 802810e:	4607      	mov	r7, r0
 8028110:	10ad      	asrs	r5, r5, #2
 8028112:	d03d      	beq.n	8028190 <__pow5mult+0xa0>
 8028114:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8028116:	b97c      	cbnz	r4, 8028138 <__pow5mult+0x48>
 8028118:	2010      	movs	r0, #16
 802811a:	f7fc f965 	bl	80243e8 <malloc>
 802811e:	4602      	mov	r2, r0
 8028120:	6270      	str	r0, [r6, #36]	; 0x24
 8028122:	b928      	cbnz	r0, 8028130 <__pow5mult+0x40>
 8028124:	4b1d      	ldr	r3, [pc, #116]	; (802819c <__pow5mult+0xac>)
 8028126:	481e      	ldr	r0, [pc, #120]	; (80281a0 <__pow5mult+0xb0>)
 8028128:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802812c:	f7fe fd90 	bl	8026c50 <__assert_func>
 8028130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8028134:	6004      	str	r4, [r0, #0]
 8028136:	60c4      	str	r4, [r0, #12]
 8028138:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802813c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8028140:	b94c      	cbnz	r4, 8028156 <__pow5mult+0x66>
 8028142:	f240 2171 	movw	r1, #625	; 0x271
 8028146:	4630      	mov	r0, r6
 8028148:	f7ff ff12 	bl	8027f70 <__i2b>
 802814c:	2300      	movs	r3, #0
 802814e:	f8c8 0008 	str.w	r0, [r8, #8]
 8028152:	4604      	mov	r4, r0
 8028154:	6003      	str	r3, [r0, #0]
 8028156:	f04f 0900 	mov.w	r9, #0
 802815a:	07eb      	lsls	r3, r5, #31
 802815c:	d50a      	bpl.n	8028174 <__pow5mult+0x84>
 802815e:	4639      	mov	r1, r7
 8028160:	4622      	mov	r2, r4
 8028162:	4630      	mov	r0, r6
 8028164:	f7ff ff1a 	bl	8027f9c <__multiply>
 8028168:	4639      	mov	r1, r7
 802816a:	4680      	mov	r8, r0
 802816c:	4630      	mov	r0, r6
 802816e:	f7ff fe47 	bl	8027e00 <_Bfree>
 8028172:	4647      	mov	r7, r8
 8028174:	106d      	asrs	r5, r5, #1
 8028176:	d00b      	beq.n	8028190 <__pow5mult+0xa0>
 8028178:	6820      	ldr	r0, [r4, #0]
 802817a:	b938      	cbnz	r0, 802818c <__pow5mult+0x9c>
 802817c:	4622      	mov	r2, r4
 802817e:	4621      	mov	r1, r4
 8028180:	4630      	mov	r0, r6
 8028182:	f7ff ff0b 	bl	8027f9c <__multiply>
 8028186:	6020      	str	r0, [r4, #0]
 8028188:	f8c0 9000 	str.w	r9, [r0]
 802818c:	4604      	mov	r4, r0
 802818e:	e7e4      	b.n	802815a <__pow5mult+0x6a>
 8028190:	4638      	mov	r0, r7
 8028192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028196:	bf00      	nop
 8028198:	080464a0 	.word	0x080464a0
 802819c:	08045d68 	.word	0x08045d68
 80281a0:	08046352 	.word	0x08046352

080281a4 <__lshift>:
 80281a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80281a8:	460c      	mov	r4, r1
 80281aa:	6849      	ldr	r1, [r1, #4]
 80281ac:	6923      	ldr	r3, [r4, #16]
 80281ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80281b2:	68a3      	ldr	r3, [r4, #8]
 80281b4:	4607      	mov	r7, r0
 80281b6:	4691      	mov	r9, r2
 80281b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80281bc:	f108 0601 	add.w	r6, r8, #1
 80281c0:	42b3      	cmp	r3, r6
 80281c2:	db0b      	blt.n	80281dc <__lshift+0x38>
 80281c4:	4638      	mov	r0, r7
 80281c6:	f7ff fddb 	bl	8027d80 <_Balloc>
 80281ca:	4605      	mov	r5, r0
 80281cc:	b948      	cbnz	r0, 80281e2 <__lshift+0x3e>
 80281ce:	4602      	mov	r2, r0
 80281d0:	4b2a      	ldr	r3, [pc, #168]	; (802827c <__lshift+0xd8>)
 80281d2:	482b      	ldr	r0, [pc, #172]	; (8028280 <__lshift+0xdc>)
 80281d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80281d8:	f7fe fd3a 	bl	8026c50 <__assert_func>
 80281dc:	3101      	adds	r1, #1
 80281de:	005b      	lsls	r3, r3, #1
 80281e0:	e7ee      	b.n	80281c0 <__lshift+0x1c>
 80281e2:	2300      	movs	r3, #0
 80281e4:	f100 0114 	add.w	r1, r0, #20
 80281e8:	f100 0210 	add.w	r2, r0, #16
 80281ec:	4618      	mov	r0, r3
 80281ee:	4553      	cmp	r3, sl
 80281f0:	db37      	blt.n	8028262 <__lshift+0xbe>
 80281f2:	6920      	ldr	r0, [r4, #16]
 80281f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80281f8:	f104 0314 	add.w	r3, r4, #20
 80281fc:	f019 091f 	ands.w	r9, r9, #31
 8028200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8028204:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8028208:	d02f      	beq.n	802826a <__lshift+0xc6>
 802820a:	f1c9 0e20 	rsb	lr, r9, #32
 802820e:	468a      	mov	sl, r1
 8028210:	f04f 0c00 	mov.w	ip, #0
 8028214:	681a      	ldr	r2, [r3, #0]
 8028216:	fa02 f209 	lsl.w	r2, r2, r9
 802821a:	ea42 020c 	orr.w	r2, r2, ip
 802821e:	f84a 2b04 	str.w	r2, [sl], #4
 8028222:	f853 2b04 	ldr.w	r2, [r3], #4
 8028226:	4298      	cmp	r0, r3
 8028228:	fa22 fc0e 	lsr.w	ip, r2, lr
 802822c:	d8f2      	bhi.n	8028214 <__lshift+0x70>
 802822e:	1b03      	subs	r3, r0, r4
 8028230:	3b15      	subs	r3, #21
 8028232:	f023 0303 	bic.w	r3, r3, #3
 8028236:	3304      	adds	r3, #4
 8028238:	f104 0215 	add.w	r2, r4, #21
 802823c:	4290      	cmp	r0, r2
 802823e:	bf38      	it	cc
 8028240:	2304      	movcc	r3, #4
 8028242:	f841 c003 	str.w	ip, [r1, r3]
 8028246:	f1bc 0f00 	cmp.w	ip, #0
 802824a:	d001      	beq.n	8028250 <__lshift+0xac>
 802824c:	f108 0602 	add.w	r6, r8, #2
 8028250:	3e01      	subs	r6, #1
 8028252:	4638      	mov	r0, r7
 8028254:	612e      	str	r6, [r5, #16]
 8028256:	4621      	mov	r1, r4
 8028258:	f7ff fdd2 	bl	8027e00 <_Bfree>
 802825c:	4628      	mov	r0, r5
 802825e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028262:	f842 0f04 	str.w	r0, [r2, #4]!
 8028266:	3301      	adds	r3, #1
 8028268:	e7c1      	b.n	80281ee <__lshift+0x4a>
 802826a:	3904      	subs	r1, #4
 802826c:	f853 2b04 	ldr.w	r2, [r3], #4
 8028270:	f841 2f04 	str.w	r2, [r1, #4]!
 8028274:	4298      	cmp	r0, r3
 8028276:	d8f9      	bhi.n	802826c <__lshift+0xc8>
 8028278:	e7ea      	b.n	8028250 <__lshift+0xac>
 802827a:	bf00      	nop
 802827c:	08046341 	.word	0x08046341
 8028280:	08046352 	.word	0x08046352

08028284 <__mcmp>:
 8028284:	b530      	push	{r4, r5, lr}
 8028286:	6902      	ldr	r2, [r0, #16]
 8028288:	690c      	ldr	r4, [r1, #16]
 802828a:	1b12      	subs	r2, r2, r4
 802828c:	d10e      	bne.n	80282ac <__mcmp+0x28>
 802828e:	f100 0314 	add.w	r3, r0, #20
 8028292:	3114      	adds	r1, #20
 8028294:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8028298:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802829c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80282a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80282a4:	42a5      	cmp	r5, r4
 80282a6:	d003      	beq.n	80282b0 <__mcmp+0x2c>
 80282a8:	d305      	bcc.n	80282b6 <__mcmp+0x32>
 80282aa:	2201      	movs	r2, #1
 80282ac:	4610      	mov	r0, r2
 80282ae:	bd30      	pop	{r4, r5, pc}
 80282b0:	4283      	cmp	r3, r0
 80282b2:	d3f3      	bcc.n	802829c <__mcmp+0x18>
 80282b4:	e7fa      	b.n	80282ac <__mcmp+0x28>
 80282b6:	f04f 32ff 	mov.w	r2, #4294967295
 80282ba:	e7f7      	b.n	80282ac <__mcmp+0x28>

080282bc <__mdiff>:
 80282bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282c0:	460c      	mov	r4, r1
 80282c2:	4606      	mov	r6, r0
 80282c4:	4611      	mov	r1, r2
 80282c6:	4620      	mov	r0, r4
 80282c8:	4690      	mov	r8, r2
 80282ca:	f7ff ffdb 	bl	8028284 <__mcmp>
 80282ce:	1e05      	subs	r5, r0, #0
 80282d0:	d110      	bne.n	80282f4 <__mdiff+0x38>
 80282d2:	4629      	mov	r1, r5
 80282d4:	4630      	mov	r0, r6
 80282d6:	f7ff fd53 	bl	8027d80 <_Balloc>
 80282da:	b930      	cbnz	r0, 80282ea <__mdiff+0x2e>
 80282dc:	4b3a      	ldr	r3, [pc, #232]	; (80283c8 <__mdiff+0x10c>)
 80282de:	4602      	mov	r2, r0
 80282e0:	f240 2132 	movw	r1, #562	; 0x232
 80282e4:	4839      	ldr	r0, [pc, #228]	; (80283cc <__mdiff+0x110>)
 80282e6:	f7fe fcb3 	bl	8026c50 <__assert_func>
 80282ea:	2301      	movs	r3, #1
 80282ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80282f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282f4:	bfa4      	itt	ge
 80282f6:	4643      	movge	r3, r8
 80282f8:	46a0      	movge	r8, r4
 80282fa:	4630      	mov	r0, r6
 80282fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8028300:	bfa6      	itte	ge
 8028302:	461c      	movge	r4, r3
 8028304:	2500      	movge	r5, #0
 8028306:	2501      	movlt	r5, #1
 8028308:	f7ff fd3a 	bl	8027d80 <_Balloc>
 802830c:	b920      	cbnz	r0, 8028318 <__mdiff+0x5c>
 802830e:	4b2e      	ldr	r3, [pc, #184]	; (80283c8 <__mdiff+0x10c>)
 8028310:	4602      	mov	r2, r0
 8028312:	f44f 7110 	mov.w	r1, #576	; 0x240
 8028316:	e7e5      	b.n	80282e4 <__mdiff+0x28>
 8028318:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802831c:	6926      	ldr	r6, [r4, #16]
 802831e:	60c5      	str	r5, [r0, #12]
 8028320:	f104 0914 	add.w	r9, r4, #20
 8028324:	f108 0514 	add.w	r5, r8, #20
 8028328:	f100 0e14 	add.w	lr, r0, #20
 802832c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8028330:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8028334:	f108 0210 	add.w	r2, r8, #16
 8028338:	46f2      	mov	sl, lr
 802833a:	2100      	movs	r1, #0
 802833c:	f859 3b04 	ldr.w	r3, [r9], #4
 8028340:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8028344:	fa1f f883 	uxth.w	r8, r3
 8028348:	fa11 f18b 	uxtah	r1, r1, fp
 802834c:	0c1b      	lsrs	r3, r3, #16
 802834e:	eba1 0808 	sub.w	r8, r1, r8
 8028352:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8028356:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802835a:	fa1f f888 	uxth.w	r8, r8
 802835e:	1419      	asrs	r1, r3, #16
 8028360:	454e      	cmp	r6, r9
 8028362:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8028366:	f84a 3b04 	str.w	r3, [sl], #4
 802836a:	d8e7      	bhi.n	802833c <__mdiff+0x80>
 802836c:	1b33      	subs	r3, r6, r4
 802836e:	3b15      	subs	r3, #21
 8028370:	f023 0303 	bic.w	r3, r3, #3
 8028374:	3304      	adds	r3, #4
 8028376:	3415      	adds	r4, #21
 8028378:	42a6      	cmp	r6, r4
 802837a:	bf38      	it	cc
 802837c:	2304      	movcc	r3, #4
 802837e:	441d      	add	r5, r3
 8028380:	4473      	add	r3, lr
 8028382:	469e      	mov	lr, r3
 8028384:	462e      	mov	r6, r5
 8028386:	4566      	cmp	r6, ip
 8028388:	d30e      	bcc.n	80283a8 <__mdiff+0xec>
 802838a:	f10c 0203 	add.w	r2, ip, #3
 802838e:	1b52      	subs	r2, r2, r5
 8028390:	f022 0203 	bic.w	r2, r2, #3
 8028394:	3d03      	subs	r5, #3
 8028396:	45ac      	cmp	ip, r5
 8028398:	bf38      	it	cc
 802839a:	2200      	movcc	r2, #0
 802839c:	441a      	add	r2, r3
 802839e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80283a2:	b17b      	cbz	r3, 80283c4 <__mdiff+0x108>
 80283a4:	6107      	str	r7, [r0, #16]
 80283a6:	e7a3      	b.n	80282f0 <__mdiff+0x34>
 80283a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80283ac:	fa11 f288 	uxtah	r2, r1, r8
 80283b0:	1414      	asrs	r4, r2, #16
 80283b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80283b6:	b292      	uxth	r2, r2
 80283b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80283bc:	f84e 2b04 	str.w	r2, [lr], #4
 80283c0:	1421      	asrs	r1, r4, #16
 80283c2:	e7e0      	b.n	8028386 <__mdiff+0xca>
 80283c4:	3f01      	subs	r7, #1
 80283c6:	e7ea      	b.n	802839e <__mdiff+0xe2>
 80283c8:	08046341 	.word	0x08046341
 80283cc:	08046352 	.word	0x08046352

080283d0 <__d2b>:
 80283d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80283d4:	4689      	mov	r9, r1
 80283d6:	2101      	movs	r1, #1
 80283d8:	ec57 6b10 	vmov	r6, r7, d0
 80283dc:	4690      	mov	r8, r2
 80283de:	f7ff fccf 	bl	8027d80 <_Balloc>
 80283e2:	4604      	mov	r4, r0
 80283e4:	b930      	cbnz	r0, 80283f4 <__d2b+0x24>
 80283e6:	4602      	mov	r2, r0
 80283e8:	4b25      	ldr	r3, [pc, #148]	; (8028480 <__d2b+0xb0>)
 80283ea:	4826      	ldr	r0, [pc, #152]	; (8028484 <__d2b+0xb4>)
 80283ec:	f240 310a 	movw	r1, #778	; 0x30a
 80283f0:	f7fe fc2e 	bl	8026c50 <__assert_func>
 80283f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80283f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80283fc:	bb35      	cbnz	r5, 802844c <__d2b+0x7c>
 80283fe:	2e00      	cmp	r6, #0
 8028400:	9301      	str	r3, [sp, #4]
 8028402:	d028      	beq.n	8028456 <__d2b+0x86>
 8028404:	4668      	mov	r0, sp
 8028406:	9600      	str	r6, [sp, #0]
 8028408:	f7ff fd82 	bl	8027f10 <__lo0bits>
 802840c:	9900      	ldr	r1, [sp, #0]
 802840e:	b300      	cbz	r0, 8028452 <__d2b+0x82>
 8028410:	9a01      	ldr	r2, [sp, #4]
 8028412:	f1c0 0320 	rsb	r3, r0, #32
 8028416:	fa02 f303 	lsl.w	r3, r2, r3
 802841a:	430b      	orrs	r3, r1
 802841c:	40c2      	lsrs	r2, r0
 802841e:	6163      	str	r3, [r4, #20]
 8028420:	9201      	str	r2, [sp, #4]
 8028422:	9b01      	ldr	r3, [sp, #4]
 8028424:	61a3      	str	r3, [r4, #24]
 8028426:	2b00      	cmp	r3, #0
 8028428:	bf14      	ite	ne
 802842a:	2202      	movne	r2, #2
 802842c:	2201      	moveq	r2, #1
 802842e:	6122      	str	r2, [r4, #16]
 8028430:	b1d5      	cbz	r5, 8028468 <__d2b+0x98>
 8028432:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8028436:	4405      	add	r5, r0
 8028438:	f8c9 5000 	str.w	r5, [r9]
 802843c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028440:	f8c8 0000 	str.w	r0, [r8]
 8028444:	4620      	mov	r0, r4
 8028446:	b003      	add	sp, #12
 8028448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802844c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028450:	e7d5      	b.n	80283fe <__d2b+0x2e>
 8028452:	6161      	str	r1, [r4, #20]
 8028454:	e7e5      	b.n	8028422 <__d2b+0x52>
 8028456:	a801      	add	r0, sp, #4
 8028458:	f7ff fd5a 	bl	8027f10 <__lo0bits>
 802845c:	9b01      	ldr	r3, [sp, #4]
 802845e:	6163      	str	r3, [r4, #20]
 8028460:	2201      	movs	r2, #1
 8028462:	6122      	str	r2, [r4, #16]
 8028464:	3020      	adds	r0, #32
 8028466:	e7e3      	b.n	8028430 <__d2b+0x60>
 8028468:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802846c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8028470:	f8c9 0000 	str.w	r0, [r9]
 8028474:	6918      	ldr	r0, [r3, #16]
 8028476:	f7ff fd2b 	bl	8027ed0 <__hi0bits>
 802847a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802847e:	e7df      	b.n	8028440 <__d2b+0x70>
 8028480:	08046341 	.word	0x08046341
 8028484:	08046352 	.word	0x08046352

08028488 <_calloc_r>:
 8028488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802848a:	fba1 2402 	umull	r2, r4, r1, r2
 802848e:	b94c      	cbnz	r4, 80284a4 <_calloc_r+0x1c>
 8028490:	4611      	mov	r1, r2
 8028492:	9201      	str	r2, [sp, #4]
 8028494:	f7fc fad6 	bl	8024a44 <_malloc_r>
 8028498:	9a01      	ldr	r2, [sp, #4]
 802849a:	4605      	mov	r5, r0
 802849c:	b930      	cbnz	r0, 80284ac <_calloc_r+0x24>
 802849e:	4628      	mov	r0, r5
 80284a0:	b003      	add	sp, #12
 80284a2:	bd30      	pop	{r4, r5, pc}
 80284a4:	220c      	movs	r2, #12
 80284a6:	6002      	str	r2, [r0, #0]
 80284a8:	2500      	movs	r5, #0
 80284aa:	e7f8      	b.n	802849e <_calloc_r+0x16>
 80284ac:	4621      	mov	r1, r4
 80284ae:	f7fb ffe3 	bl	8024478 <memset>
 80284b2:	e7f4      	b.n	802849e <_calloc_r+0x16>

080284b4 <__ssputs_r>:
 80284b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80284b8:	688e      	ldr	r6, [r1, #8]
 80284ba:	429e      	cmp	r6, r3
 80284bc:	4682      	mov	sl, r0
 80284be:	460c      	mov	r4, r1
 80284c0:	4690      	mov	r8, r2
 80284c2:	461f      	mov	r7, r3
 80284c4:	d838      	bhi.n	8028538 <__ssputs_r+0x84>
 80284c6:	898a      	ldrh	r2, [r1, #12]
 80284c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80284cc:	d032      	beq.n	8028534 <__ssputs_r+0x80>
 80284ce:	6825      	ldr	r5, [r4, #0]
 80284d0:	6909      	ldr	r1, [r1, #16]
 80284d2:	eba5 0901 	sub.w	r9, r5, r1
 80284d6:	6965      	ldr	r5, [r4, #20]
 80284d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80284dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80284e0:	3301      	adds	r3, #1
 80284e2:	444b      	add	r3, r9
 80284e4:	106d      	asrs	r5, r5, #1
 80284e6:	429d      	cmp	r5, r3
 80284e8:	bf38      	it	cc
 80284ea:	461d      	movcc	r5, r3
 80284ec:	0553      	lsls	r3, r2, #21
 80284ee:	d531      	bpl.n	8028554 <__ssputs_r+0xa0>
 80284f0:	4629      	mov	r1, r5
 80284f2:	f7fc faa7 	bl	8024a44 <_malloc_r>
 80284f6:	4606      	mov	r6, r0
 80284f8:	b950      	cbnz	r0, 8028510 <__ssputs_r+0x5c>
 80284fa:	230c      	movs	r3, #12
 80284fc:	f8ca 3000 	str.w	r3, [sl]
 8028500:	89a3      	ldrh	r3, [r4, #12]
 8028502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028506:	81a3      	strh	r3, [r4, #12]
 8028508:	f04f 30ff 	mov.w	r0, #4294967295
 802850c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028510:	6921      	ldr	r1, [r4, #16]
 8028512:	464a      	mov	r2, r9
 8028514:	f7fb ff88 	bl	8024428 <memcpy>
 8028518:	89a3      	ldrh	r3, [r4, #12]
 802851a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802851e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028522:	81a3      	strh	r3, [r4, #12]
 8028524:	6126      	str	r6, [r4, #16]
 8028526:	6165      	str	r5, [r4, #20]
 8028528:	444e      	add	r6, r9
 802852a:	eba5 0509 	sub.w	r5, r5, r9
 802852e:	6026      	str	r6, [r4, #0]
 8028530:	60a5      	str	r5, [r4, #8]
 8028532:	463e      	mov	r6, r7
 8028534:	42be      	cmp	r6, r7
 8028536:	d900      	bls.n	802853a <__ssputs_r+0x86>
 8028538:	463e      	mov	r6, r7
 802853a:	6820      	ldr	r0, [r4, #0]
 802853c:	4632      	mov	r2, r6
 802853e:	4641      	mov	r1, r8
 8028540:	f7fb ff80 	bl	8024444 <memmove>
 8028544:	68a3      	ldr	r3, [r4, #8]
 8028546:	1b9b      	subs	r3, r3, r6
 8028548:	60a3      	str	r3, [r4, #8]
 802854a:	6823      	ldr	r3, [r4, #0]
 802854c:	4433      	add	r3, r6
 802854e:	6023      	str	r3, [r4, #0]
 8028550:	2000      	movs	r0, #0
 8028552:	e7db      	b.n	802850c <__ssputs_r+0x58>
 8028554:	462a      	mov	r2, r5
 8028556:	f000 fec5 	bl	80292e4 <_realloc_r>
 802855a:	4606      	mov	r6, r0
 802855c:	2800      	cmp	r0, #0
 802855e:	d1e1      	bne.n	8028524 <__ssputs_r+0x70>
 8028560:	6921      	ldr	r1, [r4, #16]
 8028562:	4650      	mov	r0, sl
 8028564:	f7fc fa02 	bl	802496c <_free_r>
 8028568:	e7c7      	b.n	80284fa <__ssputs_r+0x46>
 802856a:	Address 0x000000000802856a is out of bounds.


0802856c <_svfiprintf_r>:
 802856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028570:	4698      	mov	r8, r3
 8028572:	898b      	ldrh	r3, [r1, #12]
 8028574:	061b      	lsls	r3, r3, #24
 8028576:	b09d      	sub	sp, #116	; 0x74
 8028578:	4607      	mov	r7, r0
 802857a:	460d      	mov	r5, r1
 802857c:	4614      	mov	r4, r2
 802857e:	d50e      	bpl.n	802859e <_svfiprintf_r+0x32>
 8028580:	690b      	ldr	r3, [r1, #16]
 8028582:	b963      	cbnz	r3, 802859e <_svfiprintf_r+0x32>
 8028584:	2140      	movs	r1, #64	; 0x40
 8028586:	f7fc fa5d 	bl	8024a44 <_malloc_r>
 802858a:	6028      	str	r0, [r5, #0]
 802858c:	6128      	str	r0, [r5, #16]
 802858e:	b920      	cbnz	r0, 802859a <_svfiprintf_r+0x2e>
 8028590:	230c      	movs	r3, #12
 8028592:	603b      	str	r3, [r7, #0]
 8028594:	f04f 30ff 	mov.w	r0, #4294967295
 8028598:	e0d1      	b.n	802873e <_svfiprintf_r+0x1d2>
 802859a:	2340      	movs	r3, #64	; 0x40
 802859c:	616b      	str	r3, [r5, #20]
 802859e:	2300      	movs	r3, #0
 80285a0:	9309      	str	r3, [sp, #36]	; 0x24
 80285a2:	2320      	movs	r3, #32
 80285a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80285a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80285ac:	2330      	movs	r3, #48	; 0x30
 80285ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028758 <_svfiprintf_r+0x1ec>
 80285b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80285b6:	f04f 0901 	mov.w	r9, #1
 80285ba:	4623      	mov	r3, r4
 80285bc:	469a      	mov	sl, r3
 80285be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80285c2:	b10a      	cbz	r2, 80285c8 <_svfiprintf_r+0x5c>
 80285c4:	2a25      	cmp	r2, #37	; 0x25
 80285c6:	d1f9      	bne.n	80285bc <_svfiprintf_r+0x50>
 80285c8:	ebba 0b04 	subs.w	fp, sl, r4
 80285cc:	d00b      	beq.n	80285e6 <_svfiprintf_r+0x7a>
 80285ce:	465b      	mov	r3, fp
 80285d0:	4622      	mov	r2, r4
 80285d2:	4629      	mov	r1, r5
 80285d4:	4638      	mov	r0, r7
 80285d6:	f7ff ff6d 	bl	80284b4 <__ssputs_r>
 80285da:	3001      	adds	r0, #1
 80285dc:	f000 80aa 	beq.w	8028734 <_svfiprintf_r+0x1c8>
 80285e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80285e2:	445a      	add	r2, fp
 80285e4:	9209      	str	r2, [sp, #36]	; 0x24
 80285e6:	f89a 3000 	ldrb.w	r3, [sl]
 80285ea:	2b00      	cmp	r3, #0
 80285ec:	f000 80a2 	beq.w	8028734 <_svfiprintf_r+0x1c8>
 80285f0:	2300      	movs	r3, #0
 80285f2:	f04f 32ff 	mov.w	r2, #4294967295
 80285f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80285fa:	f10a 0a01 	add.w	sl, sl, #1
 80285fe:	9304      	str	r3, [sp, #16]
 8028600:	9307      	str	r3, [sp, #28]
 8028602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028606:	931a      	str	r3, [sp, #104]	; 0x68
 8028608:	4654      	mov	r4, sl
 802860a:	2205      	movs	r2, #5
 802860c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028610:	4851      	ldr	r0, [pc, #324]	; (8028758 <_svfiprintf_r+0x1ec>)
 8028612:	f7d7 fe2d 	bl	8000270 <memchr>
 8028616:	9a04      	ldr	r2, [sp, #16]
 8028618:	b9d8      	cbnz	r0, 8028652 <_svfiprintf_r+0xe6>
 802861a:	06d0      	lsls	r0, r2, #27
 802861c:	bf44      	itt	mi
 802861e:	2320      	movmi	r3, #32
 8028620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028624:	0711      	lsls	r1, r2, #28
 8028626:	bf44      	itt	mi
 8028628:	232b      	movmi	r3, #43	; 0x2b
 802862a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802862e:	f89a 3000 	ldrb.w	r3, [sl]
 8028632:	2b2a      	cmp	r3, #42	; 0x2a
 8028634:	d015      	beq.n	8028662 <_svfiprintf_r+0xf6>
 8028636:	9a07      	ldr	r2, [sp, #28]
 8028638:	4654      	mov	r4, sl
 802863a:	2000      	movs	r0, #0
 802863c:	f04f 0c0a 	mov.w	ip, #10
 8028640:	4621      	mov	r1, r4
 8028642:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028646:	3b30      	subs	r3, #48	; 0x30
 8028648:	2b09      	cmp	r3, #9
 802864a:	d94e      	bls.n	80286ea <_svfiprintf_r+0x17e>
 802864c:	b1b0      	cbz	r0, 802867c <_svfiprintf_r+0x110>
 802864e:	9207      	str	r2, [sp, #28]
 8028650:	e014      	b.n	802867c <_svfiprintf_r+0x110>
 8028652:	eba0 0308 	sub.w	r3, r0, r8
 8028656:	fa09 f303 	lsl.w	r3, r9, r3
 802865a:	4313      	orrs	r3, r2
 802865c:	9304      	str	r3, [sp, #16]
 802865e:	46a2      	mov	sl, r4
 8028660:	e7d2      	b.n	8028608 <_svfiprintf_r+0x9c>
 8028662:	9b03      	ldr	r3, [sp, #12]
 8028664:	1d19      	adds	r1, r3, #4
 8028666:	681b      	ldr	r3, [r3, #0]
 8028668:	9103      	str	r1, [sp, #12]
 802866a:	2b00      	cmp	r3, #0
 802866c:	bfbb      	ittet	lt
 802866e:	425b      	neglt	r3, r3
 8028670:	f042 0202 	orrlt.w	r2, r2, #2
 8028674:	9307      	strge	r3, [sp, #28]
 8028676:	9307      	strlt	r3, [sp, #28]
 8028678:	bfb8      	it	lt
 802867a:	9204      	strlt	r2, [sp, #16]
 802867c:	7823      	ldrb	r3, [r4, #0]
 802867e:	2b2e      	cmp	r3, #46	; 0x2e
 8028680:	d10c      	bne.n	802869c <_svfiprintf_r+0x130>
 8028682:	7863      	ldrb	r3, [r4, #1]
 8028684:	2b2a      	cmp	r3, #42	; 0x2a
 8028686:	d135      	bne.n	80286f4 <_svfiprintf_r+0x188>
 8028688:	9b03      	ldr	r3, [sp, #12]
 802868a:	1d1a      	adds	r2, r3, #4
 802868c:	681b      	ldr	r3, [r3, #0]
 802868e:	9203      	str	r2, [sp, #12]
 8028690:	2b00      	cmp	r3, #0
 8028692:	bfb8      	it	lt
 8028694:	f04f 33ff 	movlt.w	r3, #4294967295
 8028698:	3402      	adds	r4, #2
 802869a:	9305      	str	r3, [sp, #20]
 802869c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028768 <_svfiprintf_r+0x1fc>
 80286a0:	7821      	ldrb	r1, [r4, #0]
 80286a2:	2203      	movs	r2, #3
 80286a4:	4650      	mov	r0, sl
 80286a6:	f7d7 fde3 	bl	8000270 <memchr>
 80286aa:	b140      	cbz	r0, 80286be <_svfiprintf_r+0x152>
 80286ac:	2340      	movs	r3, #64	; 0x40
 80286ae:	eba0 000a 	sub.w	r0, r0, sl
 80286b2:	fa03 f000 	lsl.w	r0, r3, r0
 80286b6:	9b04      	ldr	r3, [sp, #16]
 80286b8:	4303      	orrs	r3, r0
 80286ba:	3401      	adds	r4, #1
 80286bc:	9304      	str	r3, [sp, #16]
 80286be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80286c2:	4826      	ldr	r0, [pc, #152]	; (802875c <_svfiprintf_r+0x1f0>)
 80286c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80286c8:	2206      	movs	r2, #6
 80286ca:	f7d7 fdd1 	bl	8000270 <memchr>
 80286ce:	2800      	cmp	r0, #0
 80286d0:	d038      	beq.n	8028744 <_svfiprintf_r+0x1d8>
 80286d2:	4b23      	ldr	r3, [pc, #140]	; (8028760 <_svfiprintf_r+0x1f4>)
 80286d4:	bb1b      	cbnz	r3, 802871e <_svfiprintf_r+0x1b2>
 80286d6:	9b03      	ldr	r3, [sp, #12]
 80286d8:	3307      	adds	r3, #7
 80286da:	f023 0307 	bic.w	r3, r3, #7
 80286de:	3308      	adds	r3, #8
 80286e0:	9303      	str	r3, [sp, #12]
 80286e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286e4:	4433      	add	r3, r6
 80286e6:	9309      	str	r3, [sp, #36]	; 0x24
 80286e8:	e767      	b.n	80285ba <_svfiprintf_r+0x4e>
 80286ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80286ee:	460c      	mov	r4, r1
 80286f0:	2001      	movs	r0, #1
 80286f2:	e7a5      	b.n	8028640 <_svfiprintf_r+0xd4>
 80286f4:	2300      	movs	r3, #0
 80286f6:	3401      	adds	r4, #1
 80286f8:	9305      	str	r3, [sp, #20]
 80286fa:	4619      	mov	r1, r3
 80286fc:	f04f 0c0a 	mov.w	ip, #10
 8028700:	4620      	mov	r0, r4
 8028702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028706:	3a30      	subs	r2, #48	; 0x30
 8028708:	2a09      	cmp	r2, #9
 802870a:	d903      	bls.n	8028714 <_svfiprintf_r+0x1a8>
 802870c:	2b00      	cmp	r3, #0
 802870e:	d0c5      	beq.n	802869c <_svfiprintf_r+0x130>
 8028710:	9105      	str	r1, [sp, #20]
 8028712:	e7c3      	b.n	802869c <_svfiprintf_r+0x130>
 8028714:	fb0c 2101 	mla	r1, ip, r1, r2
 8028718:	4604      	mov	r4, r0
 802871a:	2301      	movs	r3, #1
 802871c:	e7f0      	b.n	8028700 <_svfiprintf_r+0x194>
 802871e:	ab03      	add	r3, sp, #12
 8028720:	9300      	str	r3, [sp, #0]
 8028722:	462a      	mov	r2, r5
 8028724:	4b0f      	ldr	r3, [pc, #60]	; (8028764 <_svfiprintf_r+0x1f8>)
 8028726:	a904      	add	r1, sp, #16
 8028728:	4638      	mov	r0, r7
 802872a:	f7fc fa91 	bl	8024c50 <_printf_float>
 802872e:	1c42      	adds	r2, r0, #1
 8028730:	4606      	mov	r6, r0
 8028732:	d1d6      	bne.n	80286e2 <_svfiprintf_r+0x176>
 8028734:	89ab      	ldrh	r3, [r5, #12]
 8028736:	065b      	lsls	r3, r3, #25
 8028738:	f53f af2c 	bmi.w	8028594 <_svfiprintf_r+0x28>
 802873c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802873e:	b01d      	add	sp, #116	; 0x74
 8028740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028744:	ab03      	add	r3, sp, #12
 8028746:	9300      	str	r3, [sp, #0]
 8028748:	462a      	mov	r2, r5
 802874a:	4b06      	ldr	r3, [pc, #24]	; (8028764 <_svfiprintf_r+0x1f8>)
 802874c:	a904      	add	r1, sp, #16
 802874e:	4638      	mov	r0, r7
 8028750:	f7fc fd0a 	bl	8025168 <_printf_i>
 8028754:	e7eb      	b.n	802872e <_svfiprintf_r+0x1c2>
 8028756:	bf00      	nop
 8028758:	080464ac 	.word	0x080464ac
 802875c:	080464b6 	.word	0x080464b6
 8028760:	08024c51 	.word	0x08024c51
 8028764:	080284b5 	.word	0x080284b5
 8028768:	080464b2 	.word	0x080464b2

0802876c <_sungetc_r>:
 802876c:	b538      	push	{r3, r4, r5, lr}
 802876e:	1c4b      	adds	r3, r1, #1
 8028770:	4614      	mov	r4, r2
 8028772:	d103      	bne.n	802877c <_sungetc_r+0x10>
 8028774:	f04f 35ff 	mov.w	r5, #4294967295
 8028778:	4628      	mov	r0, r5
 802877a:	bd38      	pop	{r3, r4, r5, pc}
 802877c:	8993      	ldrh	r3, [r2, #12]
 802877e:	f023 0320 	bic.w	r3, r3, #32
 8028782:	8193      	strh	r3, [r2, #12]
 8028784:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028786:	6852      	ldr	r2, [r2, #4]
 8028788:	b2cd      	uxtb	r5, r1
 802878a:	b18b      	cbz	r3, 80287b0 <_sungetc_r+0x44>
 802878c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802878e:	4293      	cmp	r3, r2
 8028790:	dd08      	ble.n	80287a4 <_sungetc_r+0x38>
 8028792:	6823      	ldr	r3, [r4, #0]
 8028794:	1e5a      	subs	r2, r3, #1
 8028796:	6022      	str	r2, [r4, #0]
 8028798:	f803 5c01 	strb.w	r5, [r3, #-1]
 802879c:	6863      	ldr	r3, [r4, #4]
 802879e:	3301      	adds	r3, #1
 80287a0:	6063      	str	r3, [r4, #4]
 80287a2:	e7e9      	b.n	8028778 <_sungetc_r+0xc>
 80287a4:	4621      	mov	r1, r4
 80287a6:	f000 fd1b 	bl	80291e0 <__submore>
 80287aa:	2800      	cmp	r0, #0
 80287ac:	d0f1      	beq.n	8028792 <_sungetc_r+0x26>
 80287ae:	e7e1      	b.n	8028774 <_sungetc_r+0x8>
 80287b0:	6921      	ldr	r1, [r4, #16]
 80287b2:	6823      	ldr	r3, [r4, #0]
 80287b4:	b151      	cbz	r1, 80287cc <_sungetc_r+0x60>
 80287b6:	4299      	cmp	r1, r3
 80287b8:	d208      	bcs.n	80287cc <_sungetc_r+0x60>
 80287ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80287be:	42a9      	cmp	r1, r5
 80287c0:	d104      	bne.n	80287cc <_sungetc_r+0x60>
 80287c2:	3b01      	subs	r3, #1
 80287c4:	3201      	adds	r2, #1
 80287c6:	6023      	str	r3, [r4, #0]
 80287c8:	6062      	str	r2, [r4, #4]
 80287ca:	e7d5      	b.n	8028778 <_sungetc_r+0xc>
 80287cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80287d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80287d4:	6363      	str	r3, [r4, #52]	; 0x34
 80287d6:	2303      	movs	r3, #3
 80287d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80287da:	4623      	mov	r3, r4
 80287dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80287e0:	6023      	str	r3, [r4, #0]
 80287e2:	2301      	movs	r3, #1
 80287e4:	e7dc      	b.n	80287a0 <_sungetc_r+0x34>

080287e6 <__ssrefill_r>:
 80287e6:	b510      	push	{r4, lr}
 80287e8:	460c      	mov	r4, r1
 80287ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80287ec:	b169      	cbz	r1, 802880a <__ssrefill_r+0x24>
 80287ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80287f2:	4299      	cmp	r1, r3
 80287f4:	d001      	beq.n	80287fa <__ssrefill_r+0x14>
 80287f6:	f7fc f8b9 	bl	802496c <_free_r>
 80287fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80287fc:	6063      	str	r3, [r4, #4]
 80287fe:	2000      	movs	r0, #0
 8028800:	6360      	str	r0, [r4, #52]	; 0x34
 8028802:	b113      	cbz	r3, 802880a <__ssrefill_r+0x24>
 8028804:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028806:	6023      	str	r3, [r4, #0]
 8028808:	bd10      	pop	{r4, pc}
 802880a:	6923      	ldr	r3, [r4, #16]
 802880c:	6023      	str	r3, [r4, #0]
 802880e:	2300      	movs	r3, #0
 8028810:	6063      	str	r3, [r4, #4]
 8028812:	89a3      	ldrh	r3, [r4, #12]
 8028814:	f043 0320 	orr.w	r3, r3, #32
 8028818:	81a3      	strh	r3, [r4, #12]
 802881a:	f04f 30ff 	mov.w	r0, #4294967295
 802881e:	e7f3      	b.n	8028808 <__ssrefill_r+0x22>

08028820 <__ssvfiscanf_r>:
 8028820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028824:	460c      	mov	r4, r1
 8028826:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802882a:	2100      	movs	r1, #0
 802882c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8028830:	49a6      	ldr	r1, [pc, #664]	; (8028acc <__ssvfiscanf_r+0x2ac>)
 8028832:	91a0      	str	r1, [sp, #640]	; 0x280
 8028834:	f10d 0804 	add.w	r8, sp, #4
 8028838:	49a5      	ldr	r1, [pc, #660]	; (8028ad0 <__ssvfiscanf_r+0x2b0>)
 802883a:	4fa6      	ldr	r7, [pc, #664]	; (8028ad4 <__ssvfiscanf_r+0x2b4>)
 802883c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8028ad8 <__ssvfiscanf_r+0x2b8>
 8028840:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8028844:	4606      	mov	r6, r0
 8028846:	91a1      	str	r1, [sp, #644]	; 0x284
 8028848:	9300      	str	r3, [sp, #0]
 802884a:	7813      	ldrb	r3, [r2, #0]
 802884c:	2b00      	cmp	r3, #0
 802884e:	f000 815a 	beq.w	8028b06 <__ssvfiscanf_r+0x2e6>
 8028852:	5dd9      	ldrb	r1, [r3, r7]
 8028854:	f011 0108 	ands.w	r1, r1, #8
 8028858:	f102 0501 	add.w	r5, r2, #1
 802885c:	d019      	beq.n	8028892 <__ssvfiscanf_r+0x72>
 802885e:	6863      	ldr	r3, [r4, #4]
 8028860:	2b00      	cmp	r3, #0
 8028862:	dd0f      	ble.n	8028884 <__ssvfiscanf_r+0x64>
 8028864:	6823      	ldr	r3, [r4, #0]
 8028866:	781a      	ldrb	r2, [r3, #0]
 8028868:	5cba      	ldrb	r2, [r7, r2]
 802886a:	0712      	lsls	r2, r2, #28
 802886c:	d401      	bmi.n	8028872 <__ssvfiscanf_r+0x52>
 802886e:	462a      	mov	r2, r5
 8028870:	e7eb      	b.n	802884a <__ssvfiscanf_r+0x2a>
 8028872:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028874:	3201      	adds	r2, #1
 8028876:	9245      	str	r2, [sp, #276]	; 0x114
 8028878:	6862      	ldr	r2, [r4, #4]
 802887a:	3301      	adds	r3, #1
 802887c:	3a01      	subs	r2, #1
 802887e:	6062      	str	r2, [r4, #4]
 8028880:	6023      	str	r3, [r4, #0]
 8028882:	e7ec      	b.n	802885e <__ssvfiscanf_r+0x3e>
 8028884:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028886:	4621      	mov	r1, r4
 8028888:	4630      	mov	r0, r6
 802888a:	4798      	blx	r3
 802888c:	2800      	cmp	r0, #0
 802888e:	d0e9      	beq.n	8028864 <__ssvfiscanf_r+0x44>
 8028890:	e7ed      	b.n	802886e <__ssvfiscanf_r+0x4e>
 8028892:	2b25      	cmp	r3, #37	; 0x25
 8028894:	d012      	beq.n	80288bc <__ssvfiscanf_r+0x9c>
 8028896:	469a      	mov	sl, r3
 8028898:	6863      	ldr	r3, [r4, #4]
 802889a:	2b00      	cmp	r3, #0
 802889c:	f340 8091 	ble.w	80289c2 <__ssvfiscanf_r+0x1a2>
 80288a0:	6822      	ldr	r2, [r4, #0]
 80288a2:	7813      	ldrb	r3, [r2, #0]
 80288a4:	4553      	cmp	r3, sl
 80288a6:	f040 812e 	bne.w	8028b06 <__ssvfiscanf_r+0x2e6>
 80288aa:	6863      	ldr	r3, [r4, #4]
 80288ac:	3b01      	subs	r3, #1
 80288ae:	6063      	str	r3, [r4, #4]
 80288b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80288b2:	3201      	adds	r2, #1
 80288b4:	3301      	adds	r3, #1
 80288b6:	6022      	str	r2, [r4, #0]
 80288b8:	9345      	str	r3, [sp, #276]	; 0x114
 80288ba:	e7d8      	b.n	802886e <__ssvfiscanf_r+0x4e>
 80288bc:	9141      	str	r1, [sp, #260]	; 0x104
 80288be:	9143      	str	r1, [sp, #268]	; 0x10c
 80288c0:	7853      	ldrb	r3, [r2, #1]
 80288c2:	2b2a      	cmp	r3, #42	; 0x2a
 80288c4:	bf02      	ittt	eq
 80288c6:	2310      	moveq	r3, #16
 80288c8:	1c95      	addeq	r5, r2, #2
 80288ca:	9341      	streq	r3, [sp, #260]	; 0x104
 80288cc:	220a      	movs	r2, #10
 80288ce:	46aa      	mov	sl, r5
 80288d0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80288d4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80288d8:	2b09      	cmp	r3, #9
 80288da:	d91d      	bls.n	8028918 <__ssvfiscanf_r+0xf8>
 80288dc:	487e      	ldr	r0, [pc, #504]	; (8028ad8 <__ssvfiscanf_r+0x2b8>)
 80288de:	2203      	movs	r2, #3
 80288e0:	f7d7 fcc6 	bl	8000270 <memchr>
 80288e4:	b140      	cbz	r0, 80288f8 <__ssvfiscanf_r+0xd8>
 80288e6:	2301      	movs	r3, #1
 80288e8:	eba0 0009 	sub.w	r0, r0, r9
 80288ec:	fa03 f000 	lsl.w	r0, r3, r0
 80288f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80288f2:	4318      	orrs	r0, r3
 80288f4:	9041      	str	r0, [sp, #260]	; 0x104
 80288f6:	4655      	mov	r5, sl
 80288f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80288fc:	2b78      	cmp	r3, #120	; 0x78
 80288fe:	d806      	bhi.n	802890e <__ssvfiscanf_r+0xee>
 8028900:	2b57      	cmp	r3, #87	; 0x57
 8028902:	d810      	bhi.n	8028926 <__ssvfiscanf_r+0x106>
 8028904:	2b25      	cmp	r3, #37	; 0x25
 8028906:	d0c6      	beq.n	8028896 <__ssvfiscanf_r+0x76>
 8028908:	d856      	bhi.n	80289b8 <__ssvfiscanf_r+0x198>
 802890a:	2b00      	cmp	r3, #0
 802890c:	d064      	beq.n	80289d8 <__ssvfiscanf_r+0x1b8>
 802890e:	2303      	movs	r3, #3
 8028910:	9347      	str	r3, [sp, #284]	; 0x11c
 8028912:	230a      	movs	r3, #10
 8028914:	9342      	str	r3, [sp, #264]	; 0x108
 8028916:	e071      	b.n	80289fc <__ssvfiscanf_r+0x1dc>
 8028918:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802891a:	fb02 1103 	mla	r1, r2, r3, r1
 802891e:	3930      	subs	r1, #48	; 0x30
 8028920:	9143      	str	r1, [sp, #268]	; 0x10c
 8028922:	4655      	mov	r5, sl
 8028924:	e7d3      	b.n	80288ce <__ssvfiscanf_r+0xae>
 8028926:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802892a:	2a20      	cmp	r2, #32
 802892c:	d8ef      	bhi.n	802890e <__ssvfiscanf_r+0xee>
 802892e:	a101      	add	r1, pc, #4	; (adr r1, 8028934 <__ssvfiscanf_r+0x114>)
 8028930:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8028934:	080289e7 	.word	0x080289e7
 8028938:	0802890f 	.word	0x0802890f
 802893c:	0802890f 	.word	0x0802890f
 8028940:	08028a45 	.word	0x08028a45
 8028944:	0802890f 	.word	0x0802890f
 8028948:	0802890f 	.word	0x0802890f
 802894c:	0802890f 	.word	0x0802890f
 8028950:	0802890f 	.word	0x0802890f
 8028954:	0802890f 	.word	0x0802890f
 8028958:	0802890f 	.word	0x0802890f
 802895c:	0802890f 	.word	0x0802890f
 8028960:	08028a5b 	.word	0x08028a5b
 8028964:	08028a31 	.word	0x08028a31
 8028968:	080289bf 	.word	0x080289bf
 802896c:	080289bf 	.word	0x080289bf
 8028970:	080289bf 	.word	0x080289bf
 8028974:	0802890f 	.word	0x0802890f
 8028978:	08028a35 	.word	0x08028a35
 802897c:	0802890f 	.word	0x0802890f
 8028980:	0802890f 	.word	0x0802890f
 8028984:	0802890f 	.word	0x0802890f
 8028988:	0802890f 	.word	0x0802890f
 802898c:	08028a6b 	.word	0x08028a6b
 8028990:	08028a3d 	.word	0x08028a3d
 8028994:	080289df 	.word	0x080289df
 8028998:	0802890f 	.word	0x0802890f
 802899c:	0802890f 	.word	0x0802890f
 80289a0:	08028a67 	.word	0x08028a67
 80289a4:	0802890f 	.word	0x0802890f
 80289a8:	08028a31 	.word	0x08028a31
 80289ac:	0802890f 	.word	0x0802890f
 80289b0:	0802890f 	.word	0x0802890f
 80289b4:	080289e7 	.word	0x080289e7
 80289b8:	3b45      	subs	r3, #69	; 0x45
 80289ba:	2b02      	cmp	r3, #2
 80289bc:	d8a7      	bhi.n	802890e <__ssvfiscanf_r+0xee>
 80289be:	2305      	movs	r3, #5
 80289c0:	e01b      	b.n	80289fa <__ssvfiscanf_r+0x1da>
 80289c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80289c4:	4621      	mov	r1, r4
 80289c6:	4630      	mov	r0, r6
 80289c8:	4798      	blx	r3
 80289ca:	2800      	cmp	r0, #0
 80289cc:	f43f af68 	beq.w	80288a0 <__ssvfiscanf_r+0x80>
 80289d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80289d2:	2800      	cmp	r0, #0
 80289d4:	f040 808d 	bne.w	8028af2 <__ssvfiscanf_r+0x2d2>
 80289d8:	f04f 30ff 	mov.w	r0, #4294967295
 80289dc:	e08f      	b.n	8028afe <__ssvfiscanf_r+0x2de>
 80289de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80289e0:	f042 0220 	orr.w	r2, r2, #32
 80289e4:	9241      	str	r2, [sp, #260]	; 0x104
 80289e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80289e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80289ec:	9241      	str	r2, [sp, #260]	; 0x104
 80289ee:	2210      	movs	r2, #16
 80289f0:	2b6f      	cmp	r3, #111	; 0x6f
 80289f2:	9242      	str	r2, [sp, #264]	; 0x108
 80289f4:	bf34      	ite	cc
 80289f6:	2303      	movcc	r3, #3
 80289f8:	2304      	movcs	r3, #4
 80289fa:	9347      	str	r3, [sp, #284]	; 0x11c
 80289fc:	6863      	ldr	r3, [r4, #4]
 80289fe:	2b00      	cmp	r3, #0
 8028a00:	dd42      	ble.n	8028a88 <__ssvfiscanf_r+0x268>
 8028a02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028a04:	0659      	lsls	r1, r3, #25
 8028a06:	d404      	bmi.n	8028a12 <__ssvfiscanf_r+0x1f2>
 8028a08:	6823      	ldr	r3, [r4, #0]
 8028a0a:	781a      	ldrb	r2, [r3, #0]
 8028a0c:	5cba      	ldrb	r2, [r7, r2]
 8028a0e:	0712      	lsls	r2, r2, #28
 8028a10:	d441      	bmi.n	8028a96 <__ssvfiscanf_r+0x276>
 8028a12:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8028a14:	2b02      	cmp	r3, #2
 8028a16:	dc50      	bgt.n	8028aba <__ssvfiscanf_r+0x29a>
 8028a18:	466b      	mov	r3, sp
 8028a1a:	4622      	mov	r2, r4
 8028a1c:	a941      	add	r1, sp, #260	; 0x104
 8028a1e:	4630      	mov	r0, r6
 8028a20:	f000 f9d0 	bl	8028dc4 <_scanf_chars>
 8028a24:	2801      	cmp	r0, #1
 8028a26:	d06e      	beq.n	8028b06 <__ssvfiscanf_r+0x2e6>
 8028a28:	2802      	cmp	r0, #2
 8028a2a:	f47f af20 	bne.w	802886e <__ssvfiscanf_r+0x4e>
 8028a2e:	e7cf      	b.n	80289d0 <__ssvfiscanf_r+0x1b0>
 8028a30:	220a      	movs	r2, #10
 8028a32:	e7dd      	b.n	80289f0 <__ssvfiscanf_r+0x1d0>
 8028a34:	2300      	movs	r3, #0
 8028a36:	9342      	str	r3, [sp, #264]	; 0x108
 8028a38:	2303      	movs	r3, #3
 8028a3a:	e7de      	b.n	80289fa <__ssvfiscanf_r+0x1da>
 8028a3c:	2308      	movs	r3, #8
 8028a3e:	9342      	str	r3, [sp, #264]	; 0x108
 8028a40:	2304      	movs	r3, #4
 8028a42:	e7da      	b.n	80289fa <__ssvfiscanf_r+0x1da>
 8028a44:	4629      	mov	r1, r5
 8028a46:	4640      	mov	r0, r8
 8028a48:	f000 fb92 	bl	8029170 <__sccl>
 8028a4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028a52:	9341      	str	r3, [sp, #260]	; 0x104
 8028a54:	4605      	mov	r5, r0
 8028a56:	2301      	movs	r3, #1
 8028a58:	e7cf      	b.n	80289fa <__ssvfiscanf_r+0x1da>
 8028a5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028a60:	9341      	str	r3, [sp, #260]	; 0x104
 8028a62:	2300      	movs	r3, #0
 8028a64:	e7c9      	b.n	80289fa <__ssvfiscanf_r+0x1da>
 8028a66:	2302      	movs	r3, #2
 8028a68:	e7c7      	b.n	80289fa <__ssvfiscanf_r+0x1da>
 8028a6a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8028a6c:	06c3      	lsls	r3, r0, #27
 8028a6e:	f53f aefe 	bmi.w	802886e <__ssvfiscanf_r+0x4e>
 8028a72:	9b00      	ldr	r3, [sp, #0]
 8028a74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028a76:	1d19      	adds	r1, r3, #4
 8028a78:	9100      	str	r1, [sp, #0]
 8028a7a:	681b      	ldr	r3, [r3, #0]
 8028a7c:	f010 0f01 	tst.w	r0, #1
 8028a80:	bf14      	ite	ne
 8028a82:	801a      	strhne	r2, [r3, #0]
 8028a84:	601a      	streq	r2, [r3, #0]
 8028a86:	e6f2      	b.n	802886e <__ssvfiscanf_r+0x4e>
 8028a88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028a8a:	4621      	mov	r1, r4
 8028a8c:	4630      	mov	r0, r6
 8028a8e:	4798      	blx	r3
 8028a90:	2800      	cmp	r0, #0
 8028a92:	d0b6      	beq.n	8028a02 <__ssvfiscanf_r+0x1e2>
 8028a94:	e79c      	b.n	80289d0 <__ssvfiscanf_r+0x1b0>
 8028a96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028a98:	3201      	adds	r2, #1
 8028a9a:	9245      	str	r2, [sp, #276]	; 0x114
 8028a9c:	6862      	ldr	r2, [r4, #4]
 8028a9e:	3a01      	subs	r2, #1
 8028aa0:	2a00      	cmp	r2, #0
 8028aa2:	6062      	str	r2, [r4, #4]
 8028aa4:	dd02      	ble.n	8028aac <__ssvfiscanf_r+0x28c>
 8028aa6:	3301      	adds	r3, #1
 8028aa8:	6023      	str	r3, [r4, #0]
 8028aaa:	e7ad      	b.n	8028a08 <__ssvfiscanf_r+0x1e8>
 8028aac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028aae:	4621      	mov	r1, r4
 8028ab0:	4630      	mov	r0, r6
 8028ab2:	4798      	blx	r3
 8028ab4:	2800      	cmp	r0, #0
 8028ab6:	d0a7      	beq.n	8028a08 <__ssvfiscanf_r+0x1e8>
 8028ab8:	e78a      	b.n	80289d0 <__ssvfiscanf_r+0x1b0>
 8028aba:	2b04      	cmp	r3, #4
 8028abc:	dc0e      	bgt.n	8028adc <__ssvfiscanf_r+0x2bc>
 8028abe:	466b      	mov	r3, sp
 8028ac0:	4622      	mov	r2, r4
 8028ac2:	a941      	add	r1, sp, #260	; 0x104
 8028ac4:	4630      	mov	r0, r6
 8028ac6:	f000 f9d7 	bl	8028e78 <_scanf_i>
 8028aca:	e7ab      	b.n	8028a24 <__ssvfiscanf_r+0x204>
 8028acc:	0802876d 	.word	0x0802876d
 8028ad0:	080287e7 	.word	0x080287e7
 8028ad4:	08045c01 	.word	0x08045c01
 8028ad8:	080464b2 	.word	0x080464b2
 8028adc:	4b0b      	ldr	r3, [pc, #44]	; (8028b0c <__ssvfiscanf_r+0x2ec>)
 8028ade:	2b00      	cmp	r3, #0
 8028ae0:	f43f aec5 	beq.w	802886e <__ssvfiscanf_r+0x4e>
 8028ae4:	466b      	mov	r3, sp
 8028ae6:	4622      	mov	r2, r4
 8028ae8:	a941      	add	r1, sp, #260	; 0x104
 8028aea:	4630      	mov	r0, r6
 8028aec:	f3af 8000 	nop.w
 8028af0:	e798      	b.n	8028a24 <__ssvfiscanf_r+0x204>
 8028af2:	89a3      	ldrh	r3, [r4, #12]
 8028af4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8028af8:	bf18      	it	ne
 8028afa:	f04f 30ff 	movne.w	r0, #4294967295
 8028afe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8028b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028b06:	9844      	ldr	r0, [sp, #272]	; 0x110
 8028b08:	e7f9      	b.n	8028afe <__ssvfiscanf_r+0x2de>
 8028b0a:	bf00      	nop
 8028b0c:	00000000 	.word	0x00000000

08028b10 <__sfputc_r>:
 8028b10:	6893      	ldr	r3, [r2, #8]
 8028b12:	3b01      	subs	r3, #1
 8028b14:	2b00      	cmp	r3, #0
 8028b16:	b410      	push	{r4}
 8028b18:	6093      	str	r3, [r2, #8]
 8028b1a:	da08      	bge.n	8028b2e <__sfputc_r+0x1e>
 8028b1c:	6994      	ldr	r4, [r2, #24]
 8028b1e:	42a3      	cmp	r3, r4
 8028b20:	db01      	blt.n	8028b26 <__sfputc_r+0x16>
 8028b22:	290a      	cmp	r1, #10
 8028b24:	d103      	bne.n	8028b2e <__sfputc_r+0x1e>
 8028b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b2a:	f7fd bf73 	b.w	8026a14 <__swbuf_r>
 8028b2e:	6813      	ldr	r3, [r2, #0]
 8028b30:	1c58      	adds	r0, r3, #1
 8028b32:	6010      	str	r0, [r2, #0]
 8028b34:	7019      	strb	r1, [r3, #0]
 8028b36:	4608      	mov	r0, r1
 8028b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b3c:	4770      	bx	lr

08028b3e <__sfputs_r>:
 8028b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b40:	4606      	mov	r6, r0
 8028b42:	460f      	mov	r7, r1
 8028b44:	4614      	mov	r4, r2
 8028b46:	18d5      	adds	r5, r2, r3
 8028b48:	42ac      	cmp	r4, r5
 8028b4a:	d101      	bne.n	8028b50 <__sfputs_r+0x12>
 8028b4c:	2000      	movs	r0, #0
 8028b4e:	e007      	b.n	8028b60 <__sfputs_r+0x22>
 8028b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028b54:	463a      	mov	r2, r7
 8028b56:	4630      	mov	r0, r6
 8028b58:	f7ff ffda 	bl	8028b10 <__sfputc_r>
 8028b5c:	1c43      	adds	r3, r0, #1
 8028b5e:	d1f3      	bne.n	8028b48 <__sfputs_r+0xa>
 8028b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028b62:	Address 0x0000000008028b62 is out of bounds.


08028b64 <_vfiprintf_r>:
 8028b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b68:	460d      	mov	r5, r1
 8028b6a:	b09d      	sub	sp, #116	; 0x74
 8028b6c:	4614      	mov	r4, r2
 8028b6e:	4698      	mov	r8, r3
 8028b70:	4606      	mov	r6, r0
 8028b72:	b118      	cbz	r0, 8028b7c <_vfiprintf_r+0x18>
 8028b74:	6983      	ldr	r3, [r0, #24]
 8028b76:	b90b      	cbnz	r3, 8028b7c <_vfiprintf_r+0x18>
 8028b78:	f7fb fa5c 	bl	8024034 <__sinit>
 8028b7c:	4b89      	ldr	r3, [pc, #548]	; (8028da4 <_vfiprintf_r+0x240>)
 8028b7e:	429d      	cmp	r5, r3
 8028b80:	d11b      	bne.n	8028bba <_vfiprintf_r+0x56>
 8028b82:	6875      	ldr	r5, [r6, #4]
 8028b84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028b86:	07d9      	lsls	r1, r3, #31
 8028b88:	d405      	bmi.n	8028b96 <_vfiprintf_r+0x32>
 8028b8a:	89ab      	ldrh	r3, [r5, #12]
 8028b8c:	059a      	lsls	r2, r3, #22
 8028b8e:	d402      	bmi.n	8028b96 <_vfiprintf_r+0x32>
 8028b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028b92:	f7fb fc25 	bl	80243e0 <__retarget_lock_acquire_recursive>
 8028b96:	89ab      	ldrh	r3, [r5, #12]
 8028b98:	071b      	lsls	r3, r3, #28
 8028b9a:	d501      	bpl.n	8028ba0 <_vfiprintf_r+0x3c>
 8028b9c:	692b      	ldr	r3, [r5, #16]
 8028b9e:	b9eb      	cbnz	r3, 8028bdc <_vfiprintf_r+0x78>
 8028ba0:	4629      	mov	r1, r5
 8028ba2:	4630      	mov	r0, r6
 8028ba4:	f7fd ff9a 	bl	8026adc <__swsetup_r>
 8028ba8:	b1c0      	cbz	r0, 8028bdc <_vfiprintf_r+0x78>
 8028baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028bac:	07dc      	lsls	r4, r3, #31
 8028bae:	d50e      	bpl.n	8028bce <_vfiprintf_r+0x6a>
 8028bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8028bb4:	b01d      	add	sp, #116	; 0x74
 8028bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028bba:	4b7b      	ldr	r3, [pc, #492]	; (8028da8 <_vfiprintf_r+0x244>)
 8028bbc:	429d      	cmp	r5, r3
 8028bbe:	d101      	bne.n	8028bc4 <_vfiprintf_r+0x60>
 8028bc0:	68b5      	ldr	r5, [r6, #8]
 8028bc2:	e7df      	b.n	8028b84 <_vfiprintf_r+0x20>
 8028bc4:	4b79      	ldr	r3, [pc, #484]	; (8028dac <_vfiprintf_r+0x248>)
 8028bc6:	429d      	cmp	r5, r3
 8028bc8:	bf08      	it	eq
 8028bca:	68f5      	ldreq	r5, [r6, #12]
 8028bcc:	e7da      	b.n	8028b84 <_vfiprintf_r+0x20>
 8028bce:	89ab      	ldrh	r3, [r5, #12]
 8028bd0:	0598      	lsls	r0, r3, #22
 8028bd2:	d4ed      	bmi.n	8028bb0 <_vfiprintf_r+0x4c>
 8028bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028bd6:	f7fb fc05 	bl	80243e4 <__retarget_lock_release_recursive>
 8028bda:	e7e9      	b.n	8028bb0 <_vfiprintf_r+0x4c>
 8028bdc:	2300      	movs	r3, #0
 8028bde:	9309      	str	r3, [sp, #36]	; 0x24
 8028be0:	2320      	movs	r3, #32
 8028be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028be6:	f8cd 800c 	str.w	r8, [sp, #12]
 8028bea:	2330      	movs	r3, #48	; 0x30
 8028bec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028db0 <_vfiprintf_r+0x24c>
 8028bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028bf4:	f04f 0901 	mov.w	r9, #1
 8028bf8:	4623      	mov	r3, r4
 8028bfa:	469a      	mov	sl, r3
 8028bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028c00:	b10a      	cbz	r2, 8028c06 <_vfiprintf_r+0xa2>
 8028c02:	2a25      	cmp	r2, #37	; 0x25
 8028c04:	d1f9      	bne.n	8028bfa <_vfiprintf_r+0x96>
 8028c06:	ebba 0b04 	subs.w	fp, sl, r4
 8028c0a:	d00b      	beq.n	8028c24 <_vfiprintf_r+0xc0>
 8028c0c:	465b      	mov	r3, fp
 8028c0e:	4622      	mov	r2, r4
 8028c10:	4629      	mov	r1, r5
 8028c12:	4630      	mov	r0, r6
 8028c14:	f7ff ff93 	bl	8028b3e <__sfputs_r>
 8028c18:	3001      	adds	r0, #1
 8028c1a:	f000 80aa 	beq.w	8028d72 <_vfiprintf_r+0x20e>
 8028c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028c20:	445a      	add	r2, fp
 8028c22:	9209      	str	r2, [sp, #36]	; 0x24
 8028c24:	f89a 3000 	ldrb.w	r3, [sl]
 8028c28:	2b00      	cmp	r3, #0
 8028c2a:	f000 80a2 	beq.w	8028d72 <_vfiprintf_r+0x20e>
 8028c2e:	2300      	movs	r3, #0
 8028c30:	f04f 32ff 	mov.w	r2, #4294967295
 8028c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028c38:	f10a 0a01 	add.w	sl, sl, #1
 8028c3c:	9304      	str	r3, [sp, #16]
 8028c3e:	9307      	str	r3, [sp, #28]
 8028c40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028c44:	931a      	str	r3, [sp, #104]	; 0x68
 8028c46:	4654      	mov	r4, sl
 8028c48:	2205      	movs	r2, #5
 8028c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028c4e:	4858      	ldr	r0, [pc, #352]	; (8028db0 <_vfiprintf_r+0x24c>)
 8028c50:	f7d7 fb0e 	bl	8000270 <memchr>
 8028c54:	9a04      	ldr	r2, [sp, #16]
 8028c56:	b9d8      	cbnz	r0, 8028c90 <_vfiprintf_r+0x12c>
 8028c58:	06d1      	lsls	r1, r2, #27
 8028c5a:	bf44      	itt	mi
 8028c5c:	2320      	movmi	r3, #32
 8028c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028c62:	0713      	lsls	r3, r2, #28
 8028c64:	bf44      	itt	mi
 8028c66:	232b      	movmi	r3, #43	; 0x2b
 8028c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8028c70:	2b2a      	cmp	r3, #42	; 0x2a
 8028c72:	d015      	beq.n	8028ca0 <_vfiprintf_r+0x13c>
 8028c74:	9a07      	ldr	r2, [sp, #28]
 8028c76:	4654      	mov	r4, sl
 8028c78:	2000      	movs	r0, #0
 8028c7a:	f04f 0c0a 	mov.w	ip, #10
 8028c7e:	4621      	mov	r1, r4
 8028c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028c84:	3b30      	subs	r3, #48	; 0x30
 8028c86:	2b09      	cmp	r3, #9
 8028c88:	d94e      	bls.n	8028d28 <_vfiprintf_r+0x1c4>
 8028c8a:	b1b0      	cbz	r0, 8028cba <_vfiprintf_r+0x156>
 8028c8c:	9207      	str	r2, [sp, #28]
 8028c8e:	e014      	b.n	8028cba <_vfiprintf_r+0x156>
 8028c90:	eba0 0308 	sub.w	r3, r0, r8
 8028c94:	fa09 f303 	lsl.w	r3, r9, r3
 8028c98:	4313      	orrs	r3, r2
 8028c9a:	9304      	str	r3, [sp, #16]
 8028c9c:	46a2      	mov	sl, r4
 8028c9e:	e7d2      	b.n	8028c46 <_vfiprintf_r+0xe2>
 8028ca0:	9b03      	ldr	r3, [sp, #12]
 8028ca2:	1d19      	adds	r1, r3, #4
 8028ca4:	681b      	ldr	r3, [r3, #0]
 8028ca6:	9103      	str	r1, [sp, #12]
 8028ca8:	2b00      	cmp	r3, #0
 8028caa:	bfbb      	ittet	lt
 8028cac:	425b      	neglt	r3, r3
 8028cae:	f042 0202 	orrlt.w	r2, r2, #2
 8028cb2:	9307      	strge	r3, [sp, #28]
 8028cb4:	9307      	strlt	r3, [sp, #28]
 8028cb6:	bfb8      	it	lt
 8028cb8:	9204      	strlt	r2, [sp, #16]
 8028cba:	7823      	ldrb	r3, [r4, #0]
 8028cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8028cbe:	d10c      	bne.n	8028cda <_vfiprintf_r+0x176>
 8028cc0:	7863      	ldrb	r3, [r4, #1]
 8028cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8028cc4:	d135      	bne.n	8028d32 <_vfiprintf_r+0x1ce>
 8028cc6:	9b03      	ldr	r3, [sp, #12]
 8028cc8:	1d1a      	adds	r2, r3, #4
 8028cca:	681b      	ldr	r3, [r3, #0]
 8028ccc:	9203      	str	r2, [sp, #12]
 8028cce:	2b00      	cmp	r3, #0
 8028cd0:	bfb8      	it	lt
 8028cd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8028cd6:	3402      	adds	r4, #2
 8028cd8:	9305      	str	r3, [sp, #20]
 8028cda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028dc0 <_vfiprintf_r+0x25c>
 8028cde:	7821      	ldrb	r1, [r4, #0]
 8028ce0:	2203      	movs	r2, #3
 8028ce2:	4650      	mov	r0, sl
 8028ce4:	f7d7 fac4 	bl	8000270 <memchr>
 8028ce8:	b140      	cbz	r0, 8028cfc <_vfiprintf_r+0x198>
 8028cea:	2340      	movs	r3, #64	; 0x40
 8028cec:	eba0 000a 	sub.w	r0, r0, sl
 8028cf0:	fa03 f000 	lsl.w	r0, r3, r0
 8028cf4:	9b04      	ldr	r3, [sp, #16]
 8028cf6:	4303      	orrs	r3, r0
 8028cf8:	3401      	adds	r4, #1
 8028cfa:	9304      	str	r3, [sp, #16]
 8028cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028d00:	482c      	ldr	r0, [pc, #176]	; (8028db4 <_vfiprintf_r+0x250>)
 8028d02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028d06:	2206      	movs	r2, #6
 8028d08:	f7d7 fab2 	bl	8000270 <memchr>
 8028d0c:	2800      	cmp	r0, #0
 8028d0e:	d03f      	beq.n	8028d90 <_vfiprintf_r+0x22c>
 8028d10:	4b29      	ldr	r3, [pc, #164]	; (8028db8 <_vfiprintf_r+0x254>)
 8028d12:	bb1b      	cbnz	r3, 8028d5c <_vfiprintf_r+0x1f8>
 8028d14:	9b03      	ldr	r3, [sp, #12]
 8028d16:	3307      	adds	r3, #7
 8028d18:	f023 0307 	bic.w	r3, r3, #7
 8028d1c:	3308      	adds	r3, #8
 8028d1e:	9303      	str	r3, [sp, #12]
 8028d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d22:	443b      	add	r3, r7
 8028d24:	9309      	str	r3, [sp, #36]	; 0x24
 8028d26:	e767      	b.n	8028bf8 <_vfiprintf_r+0x94>
 8028d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8028d2c:	460c      	mov	r4, r1
 8028d2e:	2001      	movs	r0, #1
 8028d30:	e7a5      	b.n	8028c7e <_vfiprintf_r+0x11a>
 8028d32:	2300      	movs	r3, #0
 8028d34:	3401      	adds	r4, #1
 8028d36:	9305      	str	r3, [sp, #20]
 8028d38:	4619      	mov	r1, r3
 8028d3a:	f04f 0c0a 	mov.w	ip, #10
 8028d3e:	4620      	mov	r0, r4
 8028d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028d44:	3a30      	subs	r2, #48	; 0x30
 8028d46:	2a09      	cmp	r2, #9
 8028d48:	d903      	bls.n	8028d52 <_vfiprintf_r+0x1ee>
 8028d4a:	2b00      	cmp	r3, #0
 8028d4c:	d0c5      	beq.n	8028cda <_vfiprintf_r+0x176>
 8028d4e:	9105      	str	r1, [sp, #20]
 8028d50:	e7c3      	b.n	8028cda <_vfiprintf_r+0x176>
 8028d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8028d56:	4604      	mov	r4, r0
 8028d58:	2301      	movs	r3, #1
 8028d5a:	e7f0      	b.n	8028d3e <_vfiprintf_r+0x1da>
 8028d5c:	ab03      	add	r3, sp, #12
 8028d5e:	9300      	str	r3, [sp, #0]
 8028d60:	462a      	mov	r2, r5
 8028d62:	4b16      	ldr	r3, [pc, #88]	; (8028dbc <_vfiprintf_r+0x258>)
 8028d64:	a904      	add	r1, sp, #16
 8028d66:	4630      	mov	r0, r6
 8028d68:	f7fb ff72 	bl	8024c50 <_printf_float>
 8028d6c:	4607      	mov	r7, r0
 8028d6e:	1c78      	adds	r0, r7, #1
 8028d70:	d1d6      	bne.n	8028d20 <_vfiprintf_r+0x1bc>
 8028d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028d74:	07d9      	lsls	r1, r3, #31
 8028d76:	d405      	bmi.n	8028d84 <_vfiprintf_r+0x220>
 8028d78:	89ab      	ldrh	r3, [r5, #12]
 8028d7a:	059a      	lsls	r2, r3, #22
 8028d7c:	d402      	bmi.n	8028d84 <_vfiprintf_r+0x220>
 8028d7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028d80:	f7fb fb30 	bl	80243e4 <__retarget_lock_release_recursive>
 8028d84:	89ab      	ldrh	r3, [r5, #12]
 8028d86:	065b      	lsls	r3, r3, #25
 8028d88:	f53f af12 	bmi.w	8028bb0 <_vfiprintf_r+0x4c>
 8028d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028d8e:	e711      	b.n	8028bb4 <_vfiprintf_r+0x50>
 8028d90:	ab03      	add	r3, sp, #12
 8028d92:	9300      	str	r3, [sp, #0]
 8028d94:	462a      	mov	r2, r5
 8028d96:	4b09      	ldr	r3, [pc, #36]	; (8028dbc <_vfiprintf_r+0x258>)
 8028d98:	a904      	add	r1, sp, #16
 8028d9a:	4630      	mov	r0, r6
 8028d9c:	f7fc f9e4 	bl	8025168 <_printf_i>
 8028da0:	e7e4      	b.n	8028d6c <_vfiprintf_r+0x208>
 8028da2:	bf00      	nop
 8028da4:	08045d24 	.word	0x08045d24
 8028da8:	08045d44 	.word	0x08045d44
 8028dac:	08045d04 	.word	0x08045d04
 8028db0:	080464ac 	.word	0x080464ac
 8028db4:	080464b6 	.word	0x080464b6
 8028db8:	08024c51 	.word	0x08024c51
 8028dbc:	08028b3f 	.word	0x08028b3f
 8028dc0:	080464b2 	.word	0x080464b2

08028dc4 <_scanf_chars>:
 8028dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028dc8:	4615      	mov	r5, r2
 8028dca:	688a      	ldr	r2, [r1, #8]
 8028dcc:	4680      	mov	r8, r0
 8028dce:	460c      	mov	r4, r1
 8028dd0:	b932      	cbnz	r2, 8028de0 <_scanf_chars+0x1c>
 8028dd2:	698a      	ldr	r2, [r1, #24]
 8028dd4:	2a00      	cmp	r2, #0
 8028dd6:	bf0c      	ite	eq
 8028dd8:	2201      	moveq	r2, #1
 8028dda:	f04f 32ff 	movne.w	r2, #4294967295
 8028dde:	608a      	str	r2, [r1, #8]
 8028de0:	6822      	ldr	r2, [r4, #0]
 8028de2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8028e74 <_scanf_chars+0xb0>
 8028de6:	06d1      	lsls	r1, r2, #27
 8028de8:	bf5f      	itttt	pl
 8028dea:	681a      	ldrpl	r2, [r3, #0]
 8028dec:	1d11      	addpl	r1, r2, #4
 8028dee:	6019      	strpl	r1, [r3, #0]
 8028df0:	6816      	ldrpl	r6, [r2, #0]
 8028df2:	2700      	movs	r7, #0
 8028df4:	69a0      	ldr	r0, [r4, #24]
 8028df6:	b188      	cbz	r0, 8028e1c <_scanf_chars+0x58>
 8028df8:	2801      	cmp	r0, #1
 8028dfa:	d107      	bne.n	8028e0c <_scanf_chars+0x48>
 8028dfc:	682a      	ldr	r2, [r5, #0]
 8028dfe:	7811      	ldrb	r1, [r2, #0]
 8028e00:	6962      	ldr	r2, [r4, #20]
 8028e02:	5c52      	ldrb	r2, [r2, r1]
 8028e04:	b952      	cbnz	r2, 8028e1c <_scanf_chars+0x58>
 8028e06:	2f00      	cmp	r7, #0
 8028e08:	d031      	beq.n	8028e6e <_scanf_chars+0xaa>
 8028e0a:	e022      	b.n	8028e52 <_scanf_chars+0x8e>
 8028e0c:	2802      	cmp	r0, #2
 8028e0e:	d120      	bne.n	8028e52 <_scanf_chars+0x8e>
 8028e10:	682b      	ldr	r3, [r5, #0]
 8028e12:	781b      	ldrb	r3, [r3, #0]
 8028e14:	f813 3009 	ldrb.w	r3, [r3, r9]
 8028e18:	071b      	lsls	r3, r3, #28
 8028e1a:	d41a      	bmi.n	8028e52 <_scanf_chars+0x8e>
 8028e1c:	6823      	ldr	r3, [r4, #0]
 8028e1e:	06da      	lsls	r2, r3, #27
 8028e20:	bf5e      	ittt	pl
 8028e22:	682b      	ldrpl	r3, [r5, #0]
 8028e24:	781b      	ldrbpl	r3, [r3, #0]
 8028e26:	f806 3b01 	strbpl.w	r3, [r6], #1
 8028e2a:	682a      	ldr	r2, [r5, #0]
 8028e2c:	686b      	ldr	r3, [r5, #4]
 8028e2e:	3201      	adds	r2, #1
 8028e30:	602a      	str	r2, [r5, #0]
 8028e32:	68a2      	ldr	r2, [r4, #8]
 8028e34:	3b01      	subs	r3, #1
 8028e36:	3a01      	subs	r2, #1
 8028e38:	606b      	str	r3, [r5, #4]
 8028e3a:	3701      	adds	r7, #1
 8028e3c:	60a2      	str	r2, [r4, #8]
 8028e3e:	b142      	cbz	r2, 8028e52 <_scanf_chars+0x8e>
 8028e40:	2b00      	cmp	r3, #0
 8028e42:	dcd7      	bgt.n	8028df4 <_scanf_chars+0x30>
 8028e44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028e48:	4629      	mov	r1, r5
 8028e4a:	4640      	mov	r0, r8
 8028e4c:	4798      	blx	r3
 8028e4e:	2800      	cmp	r0, #0
 8028e50:	d0d0      	beq.n	8028df4 <_scanf_chars+0x30>
 8028e52:	6823      	ldr	r3, [r4, #0]
 8028e54:	f013 0310 	ands.w	r3, r3, #16
 8028e58:	d105      	bne.n	8028e66 <_scanf_chars+0xa2>
 8028e5a:	68e2      	ldr	r2, [r4, #12]
 8028e5c:	3201      	adds	r2, #1
 8028e5e:	60e2      	str	r2, [r4, #12]
 8028e60:	69a2      	ldr	r2, [r4, #24]
 8028e62:	b102      	cbz	r2, 8028e66 <_scanf_chars+0xa2>
 8028e64:	7033      	strb	r3, [r6, #0]
 8028e66:	6923      	ldr	r3, [r4, #16]
 8028e68:	443b      	add	r3, r7
 8028e6a:	6123      	str	r3, [r4, #16]
 8028e6c:	2000      	movs	r0, #0
 8028e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028e72:	bf00      	nop
 8028e74:	08045c01 	.word	0x08045c01

08028e78 <_scanf_i>:
 8028e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e7c:	4698      	mov	r8, r3
 8028e7e:	4b76      	ldr	r3, [pc, #472]	; (8029058 <_scanf_i+0x1e0>)
 8028e80:	460c      	mov	r4, r1
 8028e82:	4682      	mov	sl, r0
 8028e84:	4616      	mov	r6, r2
 8028e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028e8a:	b087      	sub	sp, #28
 8028e8c:	ab03      	add	r3, sp, #12
 8028e8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8028e92:	4b72      	ldr	r3, [pc, #456]	; (802905c <_scanf_i+0x1e4>)
 8028e94:	69a1      	ldr	r1, [r4, #24]
 8028e96:	4a72      	ldr	r2, [pc, #456]	; (8029060 <_scanf_i+0x1e8>)
 8028e98:	2903      	cmp	r1, #3
 8028e9a:	bf18      	it	ne
 8028e9c:	461a      	movne	r2, r3
 8028e9e:	68a3      	ldr	r3, [r4, #8]
 8028ea0:	9201      	str	r2, [sp, #4]
 8028ea2:	1e5a      	subs	r2, r3, #1
 8028ea4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8028ea8:	bf88      	it	hi
 8028eaa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8028eae:	4627      	mov	r7, r4
 8028eb0:	bf82      	ittt	hi
 8028eb2:	eb03 0905 	addhi.w	r9, r3, r5
 8028eb6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8028eba:	60a3      	strhi	r3, [r4, #8]
 8028ebc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8028ec0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8028ec4:	bf98      	it	ls
 8028ec6:	f04f 0900 	movls.w	r9, #0
 8028eca:	6023      	str	r3, [r4, #0]
 8028ecc:	463d      	mov	r5, r7
 8028ece:	f04f 0b00 	mov.w	fp, #0
 8028ed2:	6831      	ldr	r1, [r6, #0]
 8028ed4:	ab03      	add	r3, sp, #12
 8028ed6:	7809      	ldrb	r1, [r1, #0]
 8028ed8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8028edc:	2202      	movs	r2, #2
 8028ede:	f7d7 f9c7 	bl	8000270 <memchr>
 8028ee2:	b328      	cbz	r0, 8028f30 <_scanf_i+0xb8>
 8028ee4:	f1bb 0f01 	cmp.w	fp, #1
 8028ee8:	d159      	bne.n	8028f9e <_scanf_i+0x126>
 8028eea:	6862      	ldr	r2, [r4, #4]
 8028eec:	b92a      	cbnz	r2, 8028efa <_scanf_i+0x82>
 8028eee:	6822      	ldr	r2, [r4, #0]
 8028ef0:	2308      	movs	r3, #8
 8028ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028ef6:	6063      	str	r3, [r4, #4]
 8028ef8:	6022      	str	r2, [r4, #0]
 8028efa:	6822      	ldr	r2, [r4, #0]
 8028efc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8028f00:	6022      	str	r2, [r4, #0]
 8028f02:	68a2      	ldr	r2, [r4, #8]
 8028f04:	1e51      	subs	r1, r2, #1
 8028f06:	60a1      	str	r1, [r4, #8]
 8028f08:	b192      	cbz	r2, 8028f30 <_scanf_i+0xb8>
 8028f0a:	6832      	ldr	r2, [r6, #0]
 8028f0c:	1c51      	adds	r1, r2, #1
 8028f0e:	6031      	str	r1, [r6, #0]
 8028f10:	7812      	ldrb	r2, [r2, #0]
 8028f12:	f805 2b01 	strb.w	r2, [r5], #1
 8028f16:	6872      	ldr	r2, [r6, #4]
 8028f18:	3a01      	subs	r2, #1
 8028f1a:	2a00      	cmp	r2, #0
 8028f1c:	6072      	str	r2, [r6, #4]
 8028f1e:	dc07      	bgt.n	8028f30 <_scanf_i+0xb8>
 8028f20:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8028f24:	4631      	mov	r1, r6
 8028f26:	4650      	mov	r0, sl
 8028f28:	4790      	blx	r2
 8028f2a:	2800      	cmp	r0, #0
 8028f2c:	f040 8085 	bne.w	802903a <_scanf_i+0x1c2>
 8028f30:	f10b 0b01 	add.w	fp, fp, #1
 8028f34:	f1bb 0f03 	cmp.w	fp, #3
 8028f38:	d1cb      	bne.n	8028ed2 <_scanf_i+0x5a>
 8028f3a:	6863      	ldr	r3, [r4, #4]
 8028f3c:	b90b      	cbnz	r3, 8028f42 <_scanf_i+0xca>
 8028f3e:	230a      	movs	r3, #10
 8028f40:	6063      	str	r3, [r4, #4]
 8028f42:	6863      	ldr	r3, [r4, #4]
 8028f44:	4947      	ldr	r1, [pc, #284]	; (8029064 <_scanf_i+0x1ec>)
 8028f46:	6960      	ldr	r0, [r4, #20]
 8028f48:	1ac9      	subs	r1, r1, r3
 8028f4a:	f000 f911 	bl	8029170 <__sccl>
 8028f4e:	f04f 0b00 	mov.w	fp, #0
 8028f52:	68a3      	ldr	r3, [r4, #8]
 8028f54:	6822      	ldr	r2, [r4, #0]
 8028f56:	2b00      	cmp	r3, #0
 8028f58:	d03d      	beq.n	8028fd6 <_scanf_i+0x15e>
 8028f5a:	6831      	ldr	r1, [r6, #0]
 8028f5c:	6960      	ldr	r0, [r4, #20]
 8028f5e:	f891 c000 	ldrb.w	ip, [r1]
 8028f62:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028f66:	2800      	cmp	r0, #0
 8028f68:	d035      	beq.n	8028fd6 <_scanf_i+0x15e>
 8028f6a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8028f6e:	d124      	bne.n	8028fba <_scanf_i+0x142>
 8028f70:	0510      	lsls	r0, r2, #20
 8028f72:	d522      	bpl.n	8028fba <_scanf_i+0x142>
 8028f74:	f10b 0b01 	add.w	fp, fp, #1
 8028f78:	f1b9 0f00 	cmp.w	r9, #0
 8028f7c:	d003      	beq.n	8028f86 <_scanf_i+0x10e>
 8028f7e:	3301      	adds	r3, #1
 8028f80:	f109 39ff 	add.w	r9, r9, #4294967295
 8028f84:	60a3      	str	r3, [r4, #8]
 8028f86:	6873      	ldr	r3, [r6, #4]
 8028f88:	3b01      	subs	r3, #1
 8028f8a:	2b00      	cmp	r3, #0
 8028f8c:	6073      	str	r3, [r6, #4]
 8028f8e:	dd1b      	ble.n	8028fc8 <_scanf_i+0x150>
 8028f90:	6833      	ldr	r3, [r6, #0]
 8028f92:	3301      	adds	r3, #1
 8028f94:	6033      	str	r3, [r6, #0]
 8028f96:	68a3      	ldr	r3, [r4, #8]
 8028f98:	3b01      	subs	r3, #1
 8028f9a:	60a3      	str	r3, [r4, #8]
 8028f9c:	e7d9      	b.n	8028f52 <_scanf_i+0xda>
 8028f9e:	f1bb 0f02 	cmp.w	fp, #2
 8028fa2:	d1ae      	bne.n	8028f02 <_scanf_i+0x8a>
 8028fa4:	6822      	ldr	r2, [r4, #0]
 8028fa6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8028faa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8028fae:	d1bf      	bne.n	8028f30 <_scanf_i+0xb8>
 8028fb0:	2310      	movs	r3, #16
 8028fb2:	6063      	str	r3, [r4, #4]
 8028fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028fb8:	e7a2      	b.n	8028f00 <_scanf_i+0x88>
 8028fba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8028fbe:	6022      	str	r2, [r4, #0]
 8028fc0:	780b      	ldrb	r3, [r1, #0]
 8028fc2:	f805 3b01 	strb.w	r3, [r5], #1
 8028fc6:	e7de      	b.n	8028f86 <_scanf_i+0x10e>
 8028fc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028fcc:	4631      	mov	r1, r6
 8028fce:	4650      	mov	r0, sl
 8028fd0:	4798      	blx	r3
 8028fd2:	2800      	cmp	r0, #0
 8028fd4:	d0df      	beq.n	8028f96 <_scanf_i+0x11e>
 8028fd6:	6823      	ldr	r3, [r4, #0]
 8028fd8:	05db      	lsls	r3, r3, #23
 8028fda:	d50d      	bpl.n	8028ff8 <_scanf_i+0x180>
 8028fdc:	42bd      	cmp	r5, r7
 8028fde:	d909      	bls.n	8028ff4 <_scanf_i+0x17c>
 8028fe0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028fe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8028fe8:	4632      	mov	r2, r6
 8028fea:	4650      	mov	r0, sl
 8028fec:	4798      	blx	r3
 8028fee:	f105 39ff 	add.w	r9, r5, #4294967295
 8028ff2:	464d      	mov	r5, r9
 8028ff4:	42bd      	cmp	r5, r7
 8028ff6:	d02d      	beq.n	8029054 <_scanf_i+0x1dc>
 8028ff8:	6822      	ldr	r2, [r4, #0]
 8028ffa:	f012 0210 	ands.w	r2, r2, #16
 8028ffe:	d113      	bne.n	8029028 <_scanf_i+0x1b0>
 8029000:	702a      	strb	r2, [r5, #0]
 8029002:	6863      	ldr	r3, [r4, #4]
 8029004:	9e01      	ldr	r6, [sp, #4]
 8029006:	4639      	mov	r1, r7
 8029008:	4650      	mov	r0, sl
 802900a:	47b0      	blx	r6
 802900c:	6821      	ldr	r1, [r4, #0]
 802900e:	f8d8 3000 	ldr.w	r3, [r8]
 8029012:	f011 0f20 	tst.w	r1, #32
 8029016:	d013      	beq.n	8029040 <_scanf_i+0x1c8>
 8029018:	1d1a      	adds	r2, r3, #4
 802901a:	f8c8 2000 	str.w	r2, [r8]
 802901e:	681b      	ldr	r3, [r3, #0]
 8029020:	6018      	str	r0, [r3, #0]
 8029022:	68e3      	ldr	r3, [r4, #12]
 8029024:	3301      	adds	r3, #1
 8029026:	60e3      	str	r3, [r4, #12]
 8029028:	1bed      	subs	r5, r5, r7
 802902a:	44ab      	add	fp, r5
 802902c:	6925      	ldr	r5, [r4, #16]
 802902e:	445d      	add	r5, fp
 8029030:	6125      	str	r5, [r4, #16]
 8029032:	2000      	movs	r0, #0
 8029034:	b007      	add	sp, #28
 8029036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802903a:	f04f 0b00 	mov.w	fp, #0
 802903e:	e7ca      	b.n	8028fd6 <_scanf_i+0x15e>
 8029040:	1d1a      	adds	r2, r3, #4
 8029042:	f8c8 2000 	str.w	r2, [r8]
 8029046:	681b      	ldr	r3, [r3, #0]
 8029048:	f011 0f01 	tst.w	r1, #1
 802904c:	bf14      	ite	ne
 802904e:	8018      	strhne	r0, [r3, #0]
 8029050:	6018      	streq	r0, [r3, #0]
 8029052:	e7e6      	b.n	8029022 <_scanf_i+0x1aa>
 8029054:	2001      	movs	r0, #1
 8029056:	e7ed      	b.n	8029034 <_scanf_i+0x1bc>
 8029058:	080295f0 	.word	0x080295f0
 802905c:	08026585 	.word	0x08026585
 8029060:	08026489 	.word	0x08026489
 8029064:	080464d6 	.word	0x080464d6

08029068 <_putc_r>:
 8029068:	b570      	push	{r4, r5, r6, lr}
 802906a:	460d      	mov	r5, r1
 802906c:	4614      	mov	r4, r2
 802906e:	4606      	mov	r6, r0
 8029070:	b118      	cbz	r0, 802907a <_putc_r+0x12>
 8029072:	6983      	ldr	r3, [r0, #24]
 8029074:	b90b      	cbnz	r3, 802907a <_putc_r+0x12>
 8029076:	f7fa ffdd 	bl	8024034 <__sinit>
 802907a:	4b1c      	ldr	r3, [pc, #112]	; (80290ec <_putc_r+0x84>)
 802907c:	429c      	cmp	r4, r3
 802907e:	d124      	bne.n	80290ca <_putc_r+0x62>
 8029080:	6874      	ldr	r4, [r6, #4]
 8029082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029084:	07d8      	lsls	r0, r3, #31
 8029086:	d405      	bmi.n	8029094 <_putc_r+0x2c>
 8029088:	89a3      	ldrh	r3, [r4, #12]
 802908a:	0599      	lsls	r1, r3, #22
 802908c:	d402      	bmi.n	8029094 <_putc_r+0x2c>
 802908e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029090:	f7fb f9a6 	bl	80243e0 <__retarget_lock_acquire_recursive>
 8029094:	68a3      	ldr	r3, [r4, #8]
 8029096:	3b01      	subs	r3, #1
 8029098:	2b00      	cmp	r3, #0
 802909a:	60a3      	str	r3, [r4, #8]
 802909c:	da05      	bge.n	80290aa <_putc_r+0x42>
 802909e:	69a2      	ldr	r2, [r4, #24]
 80290a0:	4293      	cmp	r3, r2
 80290a2:	db1c      	blt.n	80290de <_putc_r+0x76>
 80290a4:	b2eb      	uxtb	r3, r5
 80290a6:	2b0a      	cmp	r3, #10
 80290a8:	d019      	beq.n	80290de <_putc_r+0x76>
 80290aa:	6823      	ldr	r3, [r4, #0]
 80290ac:	1c5a      	adds	r2, r3, #1
 80290ae:	6022      	str	r2, [r4, #0]
 80290b0:	701d      	strb	r5, [r3, #0]
 80290b2:	b2ed      	uxtb	r5, r5
 80290b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80290b6:	07da      	lsls	r2, r3, #31
 80290b8:	d405      	bmi.n	80290c6 <_putc_r+0x5e>
 80290ba:	89a3      	ldrh	r3, [r4, #12]
 80290bc:	059b      	lsls	r3, r3, #22
 80290be:	d402      	bmi.n	80290c6 <_putc_r+0x5e>
 80290c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80290c2:	f7fb f98f 	bl	80243e4 <__retarget_lock_release_recursive>
 80290c6:	4628      	mov	r0, r5
 80290c8:	bd70      	pop	{r4, r5, r6, pc}
 80290ca:	4b09      	ldr	r3, [pc, #36]	; (80290f0 <_putc_r+0x88>)
 80290cc:	429c      	cmp	r4, r3
 80290ce:	d101      	bne.n	80290d4 <_putc_r+0x6c>
 80290d0:	68b4      	ldr	r4, [r6, #8]
 80290d2:	e7d6      	b.n	8029082 <_putc_r+0x1a>
 80290d4:	4b07      	ldr	r3, [pc, #28]	; (80290f4 <_putc_r+0x8c>)
 80290d6:	429c      	cmp	r4, r3
 80290d8:	bf08      	it	eq
 80290da:	68f4      	ldreq	r4, [r6, #12]
 80290dc:	e7d1      	b.n	8029082 <_putc_r+0x1a>
 80290de:	4629      	mov	r1, r5
 80290e0:	4622      	mov	r2, r4
 80290e2:	4630      	mov	r0, r6
 80290e4:	f7fd fc96 	bl	8026a14 <__swbuf_r>
 80290e8:	4605      	mov	r5, r0
 80290ea:	e7e3      	b.n	80290b4 <_putc_r+0x4c>
 80290ec:	08045d24 	.word	0x08045d24
 80290f0:	08045d44 	.word	0x08045d44
 80290f4:	08045d04 	.word	0x08045d04

080290f8 <_read_r>:
 80290f8:	b538      	push	{r3, r4, r5, lr}
 80290fa:	4d07      	ldr	r5, [pc, #28]	; (8029118 <_read_r+0x20>)
 80290fc:	4604      	mov	r4, r0
 80290fe:	4608      	mov	r0, r1
 8029100:	4611      	mov	r1, r2
 8029102:	2200      	movs	r2, #0
 8029104:	602a      	str	r2, [r5, #0]
 8029106:	461a      	mov	r2, r3
 8029108:	f7de f926 	bl	8007358 <_read>
 802910c:	1c43      	adds	r3, r0, #1
 802910e:	d102      	bne.n	8029116 <_read_r+0x1e>
 8029110:	682b      	ldr	r3, [r5, #0]
 8029112:	b103      	cbz	r3, 8029116 <_read_r+0x1e>
 8029114:	6023      	str	r3, [r4, #0]
 8029116:	bd38      	pop	{r3, r4, r5, pc}
 8029118:	2002fd5c 	.word	0x2002fd5c

0802911c <__fpclassifyd>:
 802911c:	ec51 0b10 	vmov	r0, r1, d0
 8029120:	b510      	push	{r4, lr}
 8029122:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8029126:	460b      	mov	r3, r1
 8029128:	d019      	beq.n	802915e <__fpclassifyd+0x42>
 802912a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802912e:	490e      	ldr	r1, [pc, #56]	; (8029168 <__fpclassifyd+0x4c>)
 8029130:	428a      	cmp	r2, r1
 8029132:	d90e      	bls.n	8029152 <__fpclassifyd+0x36>
 8029134:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8029138:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802913c:	428a      	cmp	r2, r1
 802913e:	d908      	bls.n	8029152 <__fpclassifyd+0x36>
 8029140:	4a0a      	ldr	r2, [pc, #40]	; (802916c <__fpclassifyd+0x50>)
 8029142:	4213      	tst	r3, r2
 8029144:	d007      	beq.n	8029156 <__fpclassifyd+0x3a>
 8029146:	4294      	cmp	r4, r2
 8029148:	d107      	bne.n	802915a <__fpclassifyd+0x3e>
 802914a:	fab0 f080 	clz	r0, r0
 802914e:	0940      	lsrs	r0, r0, #5
 8029150:	bd10      	pop	{r4, pc}
 8029152:	2004      	movs	r0, #4
 8029154:	e7fc      	b.n	8029150 <__fpclassifyd+0x34>
 8029156:	2003      	movs	r0, #3
 8029158:	e7fa      	b.n	8029150 <__fpclassifyd+0x34>
 802915a:	2000      	movs	r0, #0
 802915c:	e7f8      	b.n	8029150 <__fpclassifyd+0x34>
 802915e:	2800      	cmp	r0, #0
 8029160:	d1ee      	bne.n	8029140 <__fpclassifyd+0x24>
 8029162:	2002      	movs	r0, #2
 8029164:	e7f4      	b.n	8029150 <__fpclassifyd+0x34>
 8029166:	bf00      	nop
 8029168:	7fdfffff 	.word	0x7fdfffff
 802916c:	7ff00000 	.word	0x7ff00000

08029170 <__sccl>:
 8029170:	b570      	push	{r4, r5, r6, lr}
 8029172:	780b      	ldrb	r3, [r1, #0]
 8029174:	4604      	mov	r4, r0
 8029176:	2b5e      	cmp	r3, #94	; 0x5e
 8029178:	bf0b      	itete	eq
 802917a:	784b      	ldrbeq	r3, [r1, #1]
 802917c:	1c48      	addne	r0, r1, #1
 802917e:	1c88      	addeq	r0, r1, #2
 8029180:	2200      	movne	r2, #0
 8029182:	bf08      	it	eq
 8029184:	2201      	moveq	r2, #1
 8029186:	1e61      	subs	r1, r4, #1
 8029188:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802918c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8029190:	42a9      	cmp	r1, r5
 8029192:	d1fb      	bne.n	802918c <__sccl+0x1c>
 8029194:	b90b      	cbnz	r3, 802919a <__sccl+0x2a>
 8029196:	3801      	subs	r0, #1
 8029198:	bd70      	pop	{r4, r5, r6, pc}
 802919a:	f082 0201 	eor.w	r2, r2, #1
 802919e:	54e2      	strb	r2, [r4, r3]
 80291a0:	4605      	mov	r5, r0
 80291a2:	4628      	mov	r0, r5
 80291a4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80291a8:	292d      	cmp	r1, #45	; 0x2d
 80291aa:	d006      	beq.n	80291ba <__sccl+0x4a>
 80291ac:	295d      	cmp	r1, #93	; 0x5d
 80291ae:	d0f3      	beq.n	8029198 <__sccl+0x28>
 80291b0:	b909      	cbnz	r1, 80291b6 <__sccl+0x46>
 80291b2:	4628      	mov	r0, r5
 80291b4:	e7f0      	b.n	8029198 <__sccl+0x28>
 80291b6:	460b      	mov	r3, r1
 80291b8:	e7f1      	b.n	802919e <__sccl+0x2e>
 80291ba:	786e      	ldrb	r6, [r5, #1]
 80291bc:	2e5d      	cmp	r6, #93	; 0x5d
 80291be:	d0fa      	beq.n	80291b6 <__sccl+0x46>
 80291c0:	42b3      	cmp	r3, r6
 80291c2:	dcf8      	bgt.n	80291b6 <__sccl+0x46>
 80291c4:	3502      	adds	r5, #2
 80291c6:	4619      	mov	r1, r3
 80291c8:	3101      	adds	r1, #1
 80291ca:	428e      	cmp	r6, r1
 80291cc:	5462      	strb	r2, [r4, r1]
 80291ce:	dcfb      	bgt.n	80291c8 <__sccl+0x58>
 80291d0:	1af1      	subs	r1, r6, r3
 80291d2:	3901      	subs	r1, #1
 80291d4:	1c58      	adds	r0, r3, #1
 80291d6:	42b3      	cmp	r3, r6
 80291d8:	bfa8      	it	ge
 80291da:	2100      	movge	r1, #0
 80291dc:	1843      	adds	r3, r0, r1
 80291de:	e7e0      	b.n	80291a2 <__sccl+0x32>

080291e0 <__submore>:
 80291e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80291e4:	460c      	mov	r4, r1
 80291e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80291e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80291ec:	4299      	cmp	r1, r3
 80291ee:	d11d      	bne.n	802922c <__submore+0x4c>
 80291f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80291f4:	f7fb fc26 	bl	8024a44 <_malloc_r>
 80291f8:	b918      	cbnz	r0, 8029202 <__submore+0x22>
 80291fa:	f04f 30ff 	mov.w	r0, #4294967295
 80291fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029206:	63a3      	str	r3, [r4, #56]	; 0x38
 8029208:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802920c:	6360      	str	r0, [r4, #52]	; 0x34
 802920e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8029212:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8029216:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802921a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802921e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8029222:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8029226:	6020      	str	r0, [r4, #0]
 8029228:	2000      	movs	r0, #0
 802922a:	e7e8      	b.n	80291fe <__submore+0x1e>
 802922c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802922e:	0077      	lsls	r7, r6, #1
 8029230:	463a      	mov	r2, r7
 8029232:	f000 f857 	bl	80292e4 <_realloc_r>
 8029236:	4605      	mov	r5, r0
 8029238:	2800      	cmp	r0, #0
 802923a:	d0de      	beq.n	80291fa <__submore+0x1a>
 802923c:	eb00 0806 	add.w	r8, r0, r6
 8029240:	4601      	mov	r1, r0
 8029242:	4632      	mov	r2, r6
 8029244:	4640      	mov	r0, r8
 8029246:	f7fb f8ef 	bl	8024428 <memcpy>
 802924a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802924e:	f8c4 8000 	str.w	r8, [r4]
 8029252:	e7e9      	b.n	8029228 <__submore+0x48>

08029254 <abort>:
 8029254:	b508      	push	{r3, lr}
 8029256:	2006      	movs	r0, #6
 8029258:	f000 f89c 	bl	8029394 <raise>
 802925c:	2001      	movs	r0, #1
 802925e:	f7de f875 	bl	800734c <_exit>
 8029262:	Address 0x0000000008029262 is out of bounds.


08029264 <__env_lock>:
 8029264:	4801      	ldr	r0, [pc, #4]	; (802926c <__env_lock+0x8>)
 8029266:	f7fb b8bb 	b.w	80243e0 <__retarget_lock_acquire_recursive>
 802926a:	bf00      	nop
 802926c:	2002fd4c 	.word	0x2002fd4c

08029270 <__env_unlock>:
 8029270:	4801      	ldr	r0, [pc, #4]	; (8029278 <__env_unlock+0x8>)
 8029272:	f7fb b8b7 	b.w	80243e4 <__retarget_lock_release_recursive>
 8029276:	bf00      	nop
 8029278:	2002fd4c 	.word	0x2002fd4c

0802927c <_fstat_r>:
 802927c:	b538      	push	{r3, r4, r5, lr}
 802927e:	4d07      	ldr	r5, [pc, #28]	; (802929c <_fstat_r+0x20>)
 8029280:	2300      	movs	r3, #0
 8029282:	4604      	mov	r4, r0
 8029284:	4608      	mov	r0, r1
 8029286:	4611      	mov	r1, r2
 8029288:	602b      	str	r3, [r5, #0]
 802928a:	f7de f877 	bl	800737c <_fstat>
 802928e:	1c43      	adds	r3, r0, #1
 8029290:	d102      	bne.n	8029298 <_fstat_r+0x1c>
 8029292:	682b      	ldr	r3, [r5, #0]
 8029294:	b103      	cbz	r3, 8029298 <_fstat_r+0x1c>
 8029296:	6023      	str	r3, [r4, #0]
 8029298:	bd38      	pop	{r3, r4, r5, pc}
 802929a:	bf00      	nop
 802929c:	2002fd5c 	.word	0x2002fd5c

080292a0 <_isatty_r>:
 80292a0:	b538      	push	{r3, r4, r5, lr}
 80292a2:	4d06      	ldr	r5, [pc, #24]	; (80292bc <_isatty_r+0x1c>)
 80292a4:	2300      	movs	r3, #0
 80292a6:	4604      	mov	r4, r0
 80292a8:	4608      	mov	r0, r1
 80292aa:	602b      	str	r3, [r5, #0]
 80292ac:	f7de f86c 	bl	8007388 <_isatty>
 80292b0:	1c43      	adds	r3, r0, #1
 80292b2:	d102      	bne.n	80292ba <_isatty_r+0x1a>
 80292b4:	682b      	ldr	r3, [r5, #0]
 80292b6:	b103      	cbz	r3, 80292ba <_isatty_r+0x1a>
 80292b8:	6023      	str	r3, [r4, #0]
 80292ba:	bd38      	pop	{r3, r4, r5, pc}
 80292bc:	2002fd5c 	.word	0x2002fd5c

080292c0 <__ascii_mbtowc>:
 80292c0:	b082      	sub	sp, #8
 80292c2:	b901      	cbnz	r1, 80292c6 <__ascii_mbtowc+0x6>
 80292c4:	a901      	add	r1, sp, #4
 80292c6:	b142      	cbz	r2, 80292da <__ascii_mbtowc+0x1a>
 80292c8:	b14b      	cbz	r3, 80292de <__ascii_mbtowc+0x1e>
 80292ca:	7813      	ldrb	r3, [r2, #0]
 80292cc:	600b      	str	r3, [r1, #0]
 80292ce:	7812      	ldrb	r2, [r2, #0]
 80292d0:	1e10      	subs	r0, r2, #0
 80292d2:	bf18      	it	ne
 80292d4:	2001      	movne	r0, #1
 80292d6:	b002      	add	sp, #8
 80292d8:	4770      	bx	lr
 80292da:	4610      	mov	r0, r2
 80292dc:	e7fb      	b.n	80292d6 <__ascii_mbtowc+0x16>
 80292de:	f06f 0001 	mvn.w	r0, #1
 80292e2:	e7f8      	b.n	80292d6 <__ascii_mbtowc+0x16>

080292e4 <_realloc_r>:
 80292e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292e8:	4680      	mov	r8, r0
 80292ea:	4614      	mov	r4, r2
 80292ec:	460e      	mov	r6, r1
 80292ee:	b921      	cbnz	r1, 80292fa <_realloc_r+0x16>
 80292f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80292f4:	4611      	mov	r1, r2
 80292f6:	f7fb bba5 	b.w	8024a44 <_malloc_r>
 80292fa:	b92a      	cbnz	r2, 8029308 <_realloc_r+0x24>
 80292fc:	f7fb fb36 	bl	802496c <_free_r>
 8029300:	4625      	mov	r5, r4
 8029302:	4628      	mov	r0, r5
 8029304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029308:	f000 f86d 	bl	80293e6 <_malloc_usable_size_r>
 802930c:	4284      	cmp	r4, r0
 802930e:	4607      	mov	r7, r0
 8029310:	d802      	bhi.n	8029318 <_realloc_r+0x34>
 8029312:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8029316:	d812      	bhi.n	802933e <_realloc_r+0x5a>
 8029318:	4621      	mov	r1, r4
 802931a:	4640      	mov	r0, r8
 802931c:	f7fb fb92 	bl	8024a44 <_malloc_r>
 8029320:	4605      	mov	r5, r0
 8029322:	2800      	cmp	r0, #0
 8029324:	d0ed      	beq.n	8029302 <_realloc_r+0x1e>
 8029326:	42bc      	cmp	r4, r7
 8029328:	4622      	mov	r2, r4
 802932a:	4631      	mov	r1, r6
 802932c:	bf28      	it	cs
 802932e:	463a      	movcs	r2, r7
 8029330:	f7fb f87a 	bl	8024428 <memcpy>
 8029334:	4631      	mov	r1, r6
 8029336:	4640      	mov	r0, r8
 8029338:	f7fb fb18 	bl	802496c <_free_r>
 802933c:	e7e1      	b.n	8029302 <_realloc_r+0x1e>
 802933e:	4635      	mov	r5, r6
 8029340:	e7df      	b.n	8029302 <_realloc_r+0x1e>

08029342 <_raise_r>:
 8029342:	291f      	cmp	r1, #31
 8029344:	b538      	push	{r3, r4, r5, lr}
 8029346:	4604      	mov	r4, r0
 8029348:	460d      	mov	r5, r1
 802934a:	d904      	bls.n	8029356 <_raise_r+0x14>
 802934c:	2316      	movs	r3, #22
 802934e:	6003      	str	r3, [r0, #0]
 8029350:	f04f 30ff 	mov.w	r0, #4294967295
 8029354:	bd38      	pop	{r3, r4, r5, pc}
 8029356:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8029358:	b112      	cbz	r2, 8029360 <_raise_r+0x1e>
 802935a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802935e:	b94b      	cbnz	r3, 8029374 <_raise_r+0x32>
 8029360:	4620      	mov	r0, r4
 8029362:	f000 f831 	bl	80293c8 <_getpid_r>
 8029366:	462a      	mov	r2, r5
 8029368:	4601      	mov	r1, r0
 802936a:	4620      	mov	r0, r4
 802936c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029370:	f000 b818 	b.w	80293a4 <_kill_r>
 8029374:	2b01      	cmp	r3, #1
 8029376:	d00a      	beq.n	802938e <_raise_r+0x4c>
 8029378:	1c59      	adds	r1, r3, #1
 802937a:	d103      	bne.n	8029384 <_raise_r+0x42>
 802937c:	2316      	movs	r3, #22
 802937e:	6003      	str	r3, [r0, #0]
 8029380:	2001      	movs	r0, #1
 8029382:	e7e7      	b.n	8029354 <_raise_r+0x12>
 8029384:	2400      	movs	r4, #0
 8029386:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802938a:	4628      	mov	r0, r5
 802938c:	4798      	blx	r3
 802938e:	2000      	movs	r0, #0
 8029390:	e7e0      	b.n	8029354 <_raise_r+0x12>
 8029392:	Address 0x0000000008029392 is out of bounds.


08029394 <raise>:
 8029394:	4b02      	ldr	r3, [pc, #8]	; (80293a0 <raise+0xc>)
 8029396:	4601      	mov	r1, r0
 8029398:	6818      	ldr	r0, [r3, #0]
 802939a:	f7ff bfd2 	b.w	8029342 <_raise_r>
 802939e:	bf00      	nop
 80293a0:	20000490 	.word	0x20000490

080293a4 <_kill_r>:
 80293a4:	b538      	push	{r3, r4, r5, lr}
 80293a6:	4d07      	ldr	r5, [pc, #28]	; (80293c4 <_kill_r+0x20>)
 80293a8:	2300      	movs	r3, #0
 80293aa:	4604      	mov	r4, r0
 80293ac:	4608      	mov	r0, r1
 80293ae:	4611      	mov	r1, r2
 80293b0:	602b      	str	r3, [r5, #0]
 80293b2:	f7dd ffc3 	bl	800733c <_kill>
 80293b6:	1c43      	adds	r3, r0, #1
 80293b8:	d102      	bne.n	80293c0 <_kill_r+0x1c>
 80293ba:	682b      	ldr	r3, [r5, #0]
 80293bc:	b103      	cbz	r3, 80293c0 <_kill_r+0x1c>
 80293be:	6023      	str	r3, [r4, #0]
 80293c0:	bd38      	pop	{r3, r4, r5, pc}
 80293c2:	bf00      	nop
 80293c4:	2002fd5c 	.word	0x2002fd5c

080293c8 <_getpid_r>:
 80293c8:	f7dd bfb6 	b.w	8007338 <_getpid>

080293cc <__ascii_wctomb>:
 80293cc:	b149      	cbz	r1, 80293e2 <__ascii_wctomb+0x16>
 80293ce:	2aff      	cmp	r2, #255	; 0xff
 80293d0:	bf85      	ittet	hi
 80293d2:	238a      	movhi	r3, #138	; 0x8a
 80293d4:	6003      	strhi	r3, [r0, #0]
 80293d6:	700a      	strbls	r2, [r1, #0]
 80293d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80293dc:	bf98      	it	ls
 80293de:	2001      	movls	r0, #1
 80293e0:	4770      	bx	lr
 80293e2:	4608      	mov	r0, r1
 80293e4:	4770      	bx	lr

080293e6 <_malloc_usable_size_r>:
 80293e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80293ea:	1f18      	subs	r0, r3, #4
 80293ec:	2b00      	cmp	r3, #0
 80293ee:	bfbc      	itt	lt
 80293f0:	580b      	ldrlt	r3, [r1, r0]
 80293f2:	18c0      	addlt	r0, r0, r3
 80293f4:	4770      	bx	lr
 80293f6:	Address 0x00000000080293f6 is out of bounds.


080293f8 <_init>:
 80293f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293fa:	bf00      	nop
 80293fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80293fe:	bc08      	pop	{r3}
 8029400:	469e      	mov	lr, r3
 8029402:	4770      	bx	lr

08029404 <_fini>:
 8029404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029406:	bf00      	nop
 8029408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802940a:	bc08      	pop	{r3}
 802940c:	469e      	mov	lr, r3
 802940e:	4770      	bx	lr
